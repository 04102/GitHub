###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Config\FS_ConfigIO.c                    #
#    Command line =  C:\DUII\TargetHW\Config\FS_ConfigIO.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _ConfigIO.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    ConfigIO.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Config\FS_ConfigIO.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER SYSTEME GmbH                 *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2007         SEGGER Microcontroller Systeme GmbH        *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          ----------------------------------------------------------------------
     12          File        : FS_ConfigIO.c
     13          Purpose     : I/O Configuration routines for Filesystem
     14          ---------------------------END-OF-HEADER------------------------------
     15          */
     16          
     17          #include <stdio.h>
     18          #include "FS.h"
     19          
     20          /*********************************************************************
     21          *
     22          *       FS_X_Panic
     23          *
     24          *  Function description
     25          *    Referred in debug builds of the file system only and
     26          *    called only in case of fatal, unrecoverable errors.
     27          */

   \                                 In section .text, align 4, keep-with-next
     28          void FS_X_Panic(int ErrorCode) {
     29            FS_USE_PARA(ErrorCode);
     30            while (1);
   \                     FS_X_Panic:
   \                     ??FS_X_Panic_0:
   \   00000000   FEFFFFEA           B        ??FS_X_Panic_0
     31          }
     32          
     33          /*********************************************************************
     34          *
     35          *      Logging: OS dependent
     36          
     37          Note:
     38            Logging is used in higher debug levels only. The typical target
     39            build does not use logging and does therefore not require any of
     40            the logging routines below. For a release build without logging
     41            the routines below may be eliminated to save some space.
     42            (If the linker is not function aware and eliminates unreferenced
     43            functions automatically)
     44          
     45          */

   \                                 In section .text, align 4, keep-with-next
     46          void FS_X_Log(const char *s) {
     47            printf("%s", s);
   \                     FS_X_Log:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   ........           ADR      R0,??DataTable3  ;; 0x25, 0x73, 0x00, 0x00
   \   00000008   ........           B        printf           ;; tailcall
     48          }
     49          

   \                                 In section .text, align 4, keep-with-next
     50          void FS_X_Warn(const char *s) {
     51            printf("FS warning: %s\n", s);
   \                     FS_X_Warn:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   ........           ADR      R0,`?<Constant "FS warning: %s\\n">`
   \   00000008   ........           B        printf           ;; tailcall
     52          }
     53          

   \                                 In section .text, align 4, keep-with-next
     54          void FS_X_ErrorOut(const char *s) {
     55            printf("FS error: %s\n", s);
   \                     FS_X_ErrorOut:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   ........           ADR      R0,`?<Constant "FS error: %s\\n">`
   \   00000008   ........           B        printf           ;; tailcall
     56          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   25730000           DC8      0x25, 0x73, 0x00, 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25730000           DC8 37, 115, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FS warning: %s\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   465320776172       DC8 70, 83, 32, 119, 97, 114, 110, 105, 110, 103
   \              6E696E67    
   \   0000000A   3A2025730A00       DC8 58, 32, 37, 115, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FS error: %s\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   465320657272       DC8 70, 83, 32, 101, 114, 114, 111, 114, 58, 32
   \              6F723A20    
   \   0000000A   25730A000000       DC8 37, 115, 10, 0, 0, 0
     57          
     58          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     FS_X_ErrorOut      8
     FS_X_Log           8
     FS_X_Panic         0
     FS_X_Warn          8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     FS_X_Panic                        4
     FS_X_Log                         12
     FS_X_Warn                        12
     FS_X_ErrorOut                    12
     ??DataTable3                      4
     ?<Constant "%s">                  4
     ?<Constant "FS warning: %s\n">   16
     ?<Constant "FS error: %s\n">     16

 
  4 bytes in section .rodata
 76 bytes in section .text
 
 76 bytes of CODE  memory
  4 bytes of CONST memory

Errors: none
Warnings: none
