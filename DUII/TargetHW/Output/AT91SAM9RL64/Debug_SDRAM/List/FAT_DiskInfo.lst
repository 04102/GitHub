###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FAT_DiskInfo.c                       #
#    Command line =  C:\DUII\TargetHW\FS\FAT_DiskInfo.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FA #
#                    T_DiskInfo.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FAT #
#                    _DiskInfo.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FAT_DiskInfo.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FAT_DiskInfo.c
     19          Purpose     : FAT File System Layer for handling disk information
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FAT.h"
     31          #include "FAT_Intern.h"
     32          
     33          
     34          /*********************************************************************
     35          *
     36          *       #define constants
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       Typedefs
     44          *
     45          **********************************************************************
     46          */
     47          
     48          
     49          /*********************************************************************
     50          *
     51          *       Static const
     52          *
     53          **********************************************************************
     54          */
     55          
     56          
     57          /*********************************************************************
     58          *
     59          *       Static code
     60          *
     61          **********************************************************************
     62          */
     63          
     64          /*********************************************************************
     65          *
     66          *       Public code
     67          *
     68          **********************************************************************
     69          */
     70          
     71          /*********************************************************************
     72          *
     73          *       FS_FAT_GetDiskInfo
     74          *
     75          *  Description:
     76          *    Store information about used/unused clusters
     77          *    in a FS_DISK_INFO data structure.
     78          *
     79          *  Parameters:
     80          *    pDiskData   - Pointer to a FS_DISK_INFO data structure.
     81          *
     82          *  Return value:
     83          *    ==0         - Information is stored in pDiskData.
     84          *    <0          - An error has occurred.
     85          */

   \                                 In section .text, align 4, keep-with-next
     86          int FS_FAT_GetDiskInfo(FS_VOLUME * pVolume, FS_DISK_INFO * pDiskData, int Flags) {
   \                     FS_FAT_GetDiskInfo:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   0270A0E1           MOV      R7,R2
     87            FS_FAT_INFO* pFATInfo;
     88            U32 iCluster;
     89            U32 LastCluster;
     90            U32 NumFreeClusters;
     91            FS_SB  sb;
     92          
     93            pFATInfo = &pVolume->FSInfo.FATInfo;
   \   00000014   1C5086E2           ADD      R5,R6,#+28
     94            if (pDiskData == NULL) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0100001A           BNE      ??FS_FAT_GetDiskInfo_0
     95              return -1;  /* No pointer to a FS_DISK_INFO structure */
   \                     ??FS_FAT_GetDiskInfo_1:
   \   00000020   0000E0E3           MVN      R0,#+0
   \   00000024   2F0000EA           B        ??FS_FAT_GetDiskInfo_2
     96            }
     97            FS__SB_Create(&sb, &pVolume->Partition);
   \                     ??FS_FAT_GetDiskInfo_0:
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       FS__SB_Create
     98            if (Flags & FS_DISKINFO_FLAG_USE_FREE_SPACE) {
   \   00000034   010017E3           TST      R7,#0x1
   \   00000038   1F00000A           BEQ      ??FS_FAT_GetDiskInfo_3
     99              LastCluster = pFATInfo->NumClusters + 1;
   \   0000003C   200095E5           LDR      R0,[R5, #+32]
    100              if ((pFATInfo->NumFreeClusters != INVALID_NUM_FREE_CLUSTERS_VALUE) && (pFATInfo->NumFreeClusters <= pFATInfo->NumClusters)) {
   \   00000040   248095E5           LDR      R8,[R5, #+36]
   \   00000044   017080E2           ADD      R7,R0,#+1
   \   00000048   010078E3           CMN      R8,#+1
   \   0000004C   0100000A           BEQ      ??FS_FAT_GetDiskInfo_4
   \   00000050   080050E1           CMP      R0,R8
   \   00000054   1900002A           BCS      ??FS_FAT_GetDiskInfo_5
    101                NumFreeClusters = pFATInfo->NumFreeClusters;
    102              } else {
    103                //
    104                // Start to count the empty clusters
    105                //
    106                NumFreeClusters = 0;
   \                     ??FS_FAT_GetDiskInfo_4:
   \   00000058   0080A0E3           MOV      R8,#+0
    107                for (iCluster = 2; iCluster <= LastCluster; iCluster++) {
   \   0000005C   0290A0E3           MOV      R9,#+2
   \   00000060   020057E3           CMP      R7,#+2
   \   00000064   1200003A           BCC      ??FS_FAT_GetDiskInfo_6
    108                  if (FS_FAT_ReadFATEntry(pVolume, &sb, iCluster) == 0) {
   \                     ??FS_FAT_GetDiskInfo_7:
   \   00000068   0920A0E1           MOV      R2,R9
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       FS_FAT_ReadFATEntry
   \   00000078   000050E3           CMP      R0,#+0
    109                    NumFreeClusters++;
    110                  }
    111                  if (sb.HasError) {
   \   0000007C   0D00DDE5           LDRB     R0,[SP, #+13]
   \   00000080   01808802           ADDEQ    R8,R8,#+1
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0600000A           BEQ      ??FS_FAT_GetDiskInfo_8
    112                    FS_MEMSET(pDiskData, 0, sizeof(FS_DISK_INFO));
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0700A4E8           STM      R4!,{R0-R2}
    113                    FS__SB_Delete(&sb);
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           BL       FS__SB_Delete
    114                    return -1;
   \   000000A4   DDFFFFEA           B        ??FS_FAT_GetDiskInfo_1
    115                  }
    116                }
   \                     ??FS_FAT_GetDiskInfo_8:
   \   000000A8   019089E2           ADD      R9,R9,#+1
   \   000000AC   090057E1           CMP      R7,R9
   \   000000B0   ECFFFF2A           BCS      ??FS_FAT_GetDiskInfo_7
    117                pFATInfo->NumFreeClusters = NumFreeClusters;         /* Update FATInfo */
   \                     ??FS_FAT_GetDiskInfo_6:
   \   000000B4   248085E5           STR      R8,[R5, #+36]
   \   000000B8   000000EA           B        ??FS_FAT_GetDiskInfo_5
    118              }
    119            } else {
    120              NumFreeClusters = 0;
   \                     ??FS_FAT_GetDiskInfo_3:
   \   000000BC   0080A0E3           MOV      R8,#+0
    121            }
    122            pDiskData->NumTotalClusters  = pFATInfo->NumClusters;
   \                     ??FS_FAT_GetDiskInfo_5:
   \   000000C0   200095E5           LDR      R0,[R5, #+32]
   \   000000C4   000084E5           STR      R0,[R4, #+0]
    123            pDiskData->NumFreeClusters   = NumFreeClusters;
   \   000000C8   048084E5           STR      R8,[R4, #+4]
    124            pDiskData->SectorsPerCluster = pFATInfo->SecPerClus;
   \   000000CC   1C00D5E5           LDRB     R0,[R5, #+28]
   \   000000D0   B800C4E1           STRH     R0,[R4, #+8]
    125            pDiskData->BytesPerSector    = pFATInfo->BytesPerSec;
   \   000000D4   B400D5E1           LDRH     R0,[R5, #+4]
   \   000000D8   BA00C4E1           STRH     R0,[R4, #+10]
    126            FS__SB_Delete(&sb);
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   ........           BL       FS__SB_Delete
    127            return 0;
   \   000000E4   0000A0E3           MOV      R0,#+0
   \                     ??FS_FAT_GetDiskInfo_2:
   \   000000E8   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000EC   F083BDE8           POP      {R4-R9,PC}       ;; return
    128          }
    129          
    130          /*********************************************************************
    131          *
    132          *       FS_FAT_GetDiskSpace
    133          *
    134          *  Description:
    135          *    Return the available disk space on volume
    136          *
    137          *  Return value:
    138          *    !=0          - Size of disk in bytes.
    139          *    ==0          - An error has occurred.
    140          *    ==0xFFFFFFFF - Disk size > 4GBytes.
    141          */

   \                                 In section .text, align 4, keep-with-next
    142          U32 FS_FAT_GetDiskSpace(FS_VOLUME * pVolume) {
    143            U32 r;
    144            FS_FAT_INFO * pFATInfo;
    145          
    146            pFATInfo = &pVolume->FSInfo.FATInfo;
   \                     FS_FAT_GetDiskSpace:
   \   00000000   1C0080E2           ADD      R0,R0,#+28
    147            r = FS__CalcSizeInBytes(pFATInfo->NumClusters, pFATInfo->SecPerClus, pFATInfo->BytesPerSec);
    148            return r;
   \   00000004   B420D0E1           LDRH     R2,[R0, #+4]
   \   00000008   1C10D0E5           LDRB     R1,[R0, #+28]
   \   0000000C   200090E5           LDR      R0,[R0, #+32]
   \   00000010   ........           B        FS__CalcSizeInBytes  ;; tailcall
    149          }
    150          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     FS_FAT_GetDiskInfo      48
     FS_FAT_GetDiskSpace      8


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     FS_FAT_GetDiskInfo   240
     FS_FAT_GetDiskSpace   20

 
 260 bytes in section .text
 
 260 bytes of CODE memory

Errors: none
Warnings: none
