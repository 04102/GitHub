###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_84444.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_84444.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    ICC_84444.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    CC_84444.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_84444.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_84444.c
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _Color2Index_84444
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static unsigned _Color2Index_84444(LCD_COLOR Color) {
     36            U8 r, g, b, Alpha;
     37          
     38            /* Calculate color components (8 bit info) */
     39            r = (Color & 0xff)       >>  0;
   \                     _Color2Index_84444:
   \   00000000   FF1000E2           AND      R1,R0,#0xFF
     40            g = (Color & 0xff00)     >>  8;
   \   00000004   2024A0E1           LSR      R2,R0,#+8
     41            b = (Color & 0xff0000)   >> 16;
   \   00000008   2038A0E1           LSR      R3,R0,#+16
     42            /* Calculate alpha component */
     43            Alpha = 3 - ((Color & 0xff000000) >> 24) / 0x40;
   \   0000000C   200FA0E1           LSR      R0,R0,#+30
   \   00000010   030060E2           RSB      R0,R0,#+3
   \   00000014   FF2002E2           AND      R2,R2,#0xFF
   \   00000018   FF3003E2           AND      R3,R3,#0xFF
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF
     44            if (Alpha == 0) {
   \   00000020   0100001A           BNE      ??_Color2Index_84444_0
     45              return 0;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   1EFF2FE1           BX       LR
     46            }
     47            if ((r == g) && (g == b)) {
   \                     ??_Color2Index_84444_0:
   \   0000002C   020051E1           CMP      R1,R2
   \   00000030   03005201           CMPEQ    R2,R3
   \   00000034   0200001A           BNE      ??_Color2Index_84444_1
     48              /* Return gray */
     49              return (Alpha * 0x10) + (r >> 4);
   \   00000038   4112A0E1           ASR      R1,R1,#+4
   \   0000003C   000281E0           ADD      R0,R1,R0, LSL #+4
   \   00000040   1EFF2FE1           BX       LR
     50            }
     51            /* Reduce color information */
     52            r = r / 0x40;
     53            g = g / 0x40;
     54            b = b / 0x40;
     55            /* Return color */
     56            return r | (g << 2) | (b << 4) | (Alpha << 6);
   \                     ??_Color2Index_84444_1:
   \   00000044   C1C2A0E1           ASR      R12,R1,#+5
   \   00000048   2C1D81E0           ADD      R1,R1,R12, LSR #+26
   \   0000004C   C2C2A0E1           ASR      R12,R2,#+5
   \   00000050   2C2D82E0           ADD      R2,R2,R12, LSR #+26
   \   00000054   0119A0E1           LSL      R1,R1,#+18
   \   00000058   0229A0E1           LSL      R2,R2,#+18
   \   0000005C   211CA0E1           LSR      R1,R1,#+24
   \   00000060   222CA0E1           LSR      R2,R2,#+24
   \   00000064   021181E1           ORR      R1,R1,R2, LSL #+2
   \   00000068   C322A0E1           ASR      R2,R3,#+5
   \   0000006C   222D83E0           ADD      R2,R3,R2, LSR #+26
   \   00000070   0229A0E1           LSL      R2,R2,#+18
   \   00000074   222CA0E1           LSR      R2,R2,#+24
   \   00000078   021281E1           ORR      R1,R1,R2, LSL #+4
   \   0000007C   000381E1           ORR      R0,R1,R0, LSL #+6
   \   00000080   1EFF2FE1           BX       LR               ;; return
     57          }
     58          
     59          /*********************************************************************
     60          *
     61          *       _Index2Color_84444
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          static LCD_COLOR _Index2Color_84444(unsigned Index) {
     64            U8 r, g, b, Alpha;
     65          
     66            if (Index < 0x40) {
   \                     _Index2Color_84444:
   \   00000000   400050E3           CMP      R0,#+64
   \   00000004   0E00002A           BCS      ??_Index2Color_84444_0
     67              /* Gray */
     68              if (Index < 0x10) {
   \   00000008   100050E3           CMP      R0,#+16
   \   0000000C   0100002A           BCS      ??_Index2Color_84444_1
     69                return 0xff000000;
   \   00000010   FF04A0E3           MOV      R0,#-16777216
   \   00000014   1EFF2FE1           BX       LR
     70              }
     71              /* Calculate alpha factor */
     72              Alpha = (3 - ((Index & 0x30) >> 4)) * 0x55;
     73              return (Alpha << 24) | (Index & 0xf) * 0x111111;
   \                     ??_Index2Color_84444_1:
   \   00000018   0310A0E3           MOV      R1,#+3
   \   0000001C   201201E0           AND      R1,R1,R0, LSR #+4
   \   00000020   031061E2           RSB      R1,R1,#+3
   \   00000024   5520A0E3           MOV      R2,#+85
   \   00000028   820161E1           SMULBB   R1,R2,R1
   \   0000002C   ........           LDR      R2,??DataTable1  ;; 0x111111
   \   00000030   0F0000E2           AND      R0,R0,#0xF
   \   00000034   920000E0           MUL      R0,R2,R0
   \   00000038   FF1001E2           AND      R1,R1,#0xFF
   \   0000003C   010C80E1           ORR      R0,R0,R1, LSL #+24
   \   00000040   1EFF2FE1           BX       LR
     74            }
     75            /* Calculate alpha factor */
     76            Alpha = (3 - (Index >> 6)) * 0x55;
     77            /* Calculate color components */
     78            r = ((Index & 0x03) >> 0) * 0x55;
     79            g = ((Index & 0x0c) >> 2) * 0x55;
     80            b = ((Index & 0x30) >> 4) * 0x55;
     81            /* Return color */
     82            return r | (g << 8) | (b << 16) | (Alpha << 24);
   \                     ??_Index2Color_84444_0:
   \   00000044   0330A0E3           MOV      R3,#+3
   \   00000048   5510A0E3           MOV      R1,#+85
   \   0000004C   032000E2           AND      R2,R0,#0x3
   \   00000050   203103E0           AND      R3,R3,R0, LSR #+2
   \   00000054   810262E1           SMULBB   R2,R1,R2
   \   00000058   810363E1           SMULBB   R3,R1,R3
   \   0000005C   FF2002E2           AND      R2,R2,#0xFF
   \   00000060   FF3003E2           AND      R3,R3,#0xFF
   \   00000064   032482E1           ORR      R2,R2,R3, LSL #+8
   \   00000068   0330A0E3           MOV      R3,#+3
   \   0000006C   203203E0           AND      R3,R3,R0, LSR #+4
   \   00000070   810363E1           SMULBB   R3,R1,R3
   \   00000074   FF3003E2           AND      R3,R3,#0xFF
   \   00000078   032882E1           ORR      R2,R2,R3, LSL #+16
   \   0000007C   0330A0E3           MOV      R3,#+3
   \   00000080   200343E0           SUB      R0,R3,R0, LSR #+6
   \   00000084   910000E0           MUL      R0,R1,R0
   \   00000088   FF0000E2           AND      R0,R0,#0xFF
   \   0000008C   000C82E1           ORR      R0,R2,R0, LSL #+24
   \   00000090   1EFF2FE1           BX       LR               ;; return
     83          }
     84          
     85          /*********************************************************************
     86          *
     87          *       _GetIndexMask_84444
     88          */

   \                                 In section .text, align 4, keep-with-next
     89          static unsigned _GetIndexMask_84444(void) {
     90            return 0xff;
   \                     _GetIndexMask_84444:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   1EFF2FE1           BX       LR               ;; return
     91          }
     92          
     93          /*********************************************************************
     94          *
     95          *       Public data
     96          *
     97          **********************************************************************
     98          */
     99          /*********************************************************************
    100          *
    101          *       LCD_API_ColorConv_84444
    102          *
    103          * Purpose
    104          *   API table for this color conversion mode. Only used by memory
    105          *   devices in this mode.
    106          */

   \                                 In section .rodata, align 4, keep-with-next
    107          const LCD_API_COLOR_CONV LCD_API_ColorConv_84444 = {
   \                     LCD_API_ColorConv_84444:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_84444, _Index2Color_84444, _GetIndexMask_84444
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   11111100           DC32     0x111111
    108            _Color2Index_84444,
    109            _Index2Color_84444,
    110            _GetIndexMask_84444
    111          };
    112          
    113          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     _Color2Index_84444       0
     _GetIndexMask_84444      0
     _Index2Color_84444       0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _Color2Index_84444       132
     _Index2Color_84444       148
     _GetIndexMask_84444        8
     LCD_API_ColorConv_84444   12
     ??DataTable1               4

 
  12 bytes in section .rodata
 292 bytes in section .text
 
 292 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
