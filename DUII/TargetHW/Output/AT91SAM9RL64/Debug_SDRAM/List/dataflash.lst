###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:48 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\dataflash.c                       #
#    Command line =  C:\DUII\TargetHW\Setup\dataflash.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\da #
#                    taflash.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\dat #
#                    aflash.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\dataflash.c
      1          #undef WRITEPROTECT
      2          // Part of traqmate.c
      3          // 11/10/2003
      4          // Author: GAStephens
      5          //
      6          // This file contains all the functions to read and write to an Atmel Dataflash
      7          // serial flash memory chip.
      8          
      9          #include "commondefs.h"
     10          #include "dataflash.h"
     11          #include "SPI_API.h"
     12          #include "RTOS.h"
     13          #include "DUII.h"
     14          #include "CommTask.h"
     15          
     16          void mSDelay(int);
     17          void uSDelay(int);
     18          
     19          #define DFWAIT uSDelay(150)				// was 500 through 2.60. 100 usec seems to work
     20          
     21          static void ShiftAddress(u16 page, u16 pagesize) {
     22          	if (MAX_PAGE_64MBIT	== pagesize) {		// atmel 64Mbit dataflash
     23          		// shift out reserved bits and upper bits of page address
     24          		xferSPI(page >> 5);
     25          	
     26          		// shift out bottom 5 bits of page address and top bits of byte address
     27          		xferSPI((u08) page << 3);
     28          	} // if
     29          	else if (MAX_PAGE_64EMBIT == pagesize) {	// adesto 64Mbit dataflash
     30          		// shift out upper bits of page address
     31          		xferSPI(page >> 7);
     32          	
     33          		// shift out bottom 7 bits of page address and top bits of byte address
     34          		xferSPI((u08) page << 1);
     35          	} // if
     36          	else {		// atmel 32Mbit dataflash
     37          		// shift out reserved bits and upper bits of page address
     38          		xferSPI(page >> 6);
     39          	
     40          		// shift out bottom 6 bits of page address and top bits of byte address
     41          		xferSPI((u08) page << 2);
     42          	} // else
     43          } // ShiftAddress
     44          	
     45          // This function transfers a page from an array to the designated buffer and then to
     46          // the designated memory page while erasing. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
     47          void DataFlash_Page_Write_Erase(int chip, int buffnum, int bufsize, char *buffer, u16 pagenum) {
   \                     DataFlash_Page_Write_Erase:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   B082DDE1           LDRH     R8,[SP, #+32]
     48          
     49          	u08 status;
     50          	int i;
     51          
     52          	// wait for Serial Flash to be available
     53          	do {
     54          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Page_Write_Erase_0:
   \   0000001C   FF0004E2           AND      R0,R4,#0xFF
   \   00000020   ........           BL       DF_SPI_X_EnableCS
   \   00000024   9600A0E3           MOV      R0,#+150
   \   00000028   ........           BL       uSDelay
   \   0000002C   D700A0E3           MOV      R0,#+215
   \   00000030   ........           BL       xferSPI
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           BL       xferSPI
   \   0000003C   0090A0E1           MOV      R9,R0
   \   00000040   FF0004E2           AND      R0,R4,#0xFF
   \   00000044   ........           BL       DF_SPI_X_DisableCS
     55          	} while (!(status & STATUS_READY_MASK));
   \   00000048   800019E3           TST      R9,#0x80
   \   0000004C   F2FFFF0A           BEQ      ??DataFlash_Page_Write_Erase_0
     56          
     57          	// set CS to low	
     58          	DF_SPI_X_EnableCS(chip);
   \   00000050   FF0004E2           AND      R0,R4,#0xFF
   \   00000054   ........           BL       DF_SPI_X_EnableCS
     59          #ifdef WRITEPROTECT
     60          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
     61          #endif
     62          	DFWAIT;
   \   00000058   9600A0E3           MOV      R0,#+150
   \   0000005C   ........           BL       uSDelay
     63          	// shift out command
     64          	if (1 == buffnum)
   \   00000060   010055E3           CMP      R5,#+1
     65          		xferSPI(BUFFER1_WRITE);
   \   00000064   8400A003           MOVEQ    R0,#+132
     66          	else
     67          		xferSPI(BUFFER2_WRITE);
   \   00000068   8700A013           MOVNE    R0,#+135
   \   0000006C   ........           BL       xferSPI
     68          
     69          	// shift out 24 more bits to start at byte 0
     70          	xferSPI(0); xferSPI(0); xferSPI(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       xferSPI
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   ........           BL       xferSPI
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   ........           BL       xferSPI
     71          
     72          	// shift out the data
     73          	for (i=0; i<bufsize; i++) xferSPI(buffer[i]);
   \   00000088   010057E3           CMP      R7,#+1
   \   0000008C   0B0000BA           BLT      ??DataFlash_Page_Write_Erase_1
   \   00000090   010017E3           TST      R7,#0x1
   \   00000094   0100000A           BEQ      ??DataFlash_Page_Write_Erase_2
   \   00000098   0100D6E4           LDRB     R0,[R6], #+1
   \   0000009C   ........           BL       xferSPI
   \                     ??DataFlash_Page_Write_Erase_2:
   \   000000A0   A770B0E1           LSRS     R7,R7,#+1
   \   000000A4   0500000A           BEQ      ??DataFlash_Page_Write_Erase_1
   \                     ??DataFlash_Page_Write_Erase_3:
   \   000000A8   0100D6E4           LDRB     R0,[R6], #+1
   \   000000AC   ........           BL       xferSPI
   \   000000B0   0100D6E4           LDRB     R0,[R6], #+1
   \   000000B4   ........           BL       xferSPI
   \   000000B8   017057E2           SUBS     R7,R7,#+1
   \   000000BC   F9FFFF1A           BNE      ??DataFlash_Page_Write_Erase_3
     74          
     75          	// set CS to high to end buffer transfer
     76          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Page_Write_Erase_1:
   \   000000C0   FF0004E2           AND      R0,R4,#0xFF
   \   000000C4   ........           BL       DF_SPI_X_DisableCS
     77          
     78          	DataFlash_Buffer_to_Page_Write_Erase(chip, buffnum, pagenum);
   \   000000C8   0820A0E1           MOV      R2,R8
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   \   000000D8   F043BDE8           POP      {R4-R9,LR}
   \   000000DC   ........           B        DataFlash_Buffer_to_Page_Write_Erase  ;; tailcall
     79          }
     80          
     81          // This function transfers a page from an array to the designated buffer and then to
     82          // the designated memory page. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
     83          void DataFlash_Page_Write(int chip, int buffnum, int bufsize, char *buffer, u16 pagenum) {
   \                     DataFlash_Page_Write:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   B082DDE1           LDRH     R8,[SP, #+32]
     84          	u08 status;
     85          	int i;
     86          
     87          	// wait for Serial Flash to be available
     88          	do {
     89          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Page_Write_0:
   \   0000001C   FF0004E2           AND      R0,R4,#0xFF
   \   00000020   ........           BL       DF_SPI_X_EnableCS
   \   00000024   9600A0E3           MOV      R0,#+150
   \   00000028   ........           BL       uSDelay
   \   0000002C   D700A0E3           MOV      R0,#+215
   \   00000030   ........           BL       xferSPI
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           BL       xferSPI
   \   0000003C   0090A0E1           MOV      R9,R0
   \   00000040   FF0004E2           AND      R0,R4,#0xFF
   \   00000044   ........           BL       DF_SPI_X_DisableCS
     90          	} while (!(status & STATUS_READY_MASK));
   \   00000048   800019E3           TST      R9,#0x80
   \   0000004C   F2FFFF0A           BEQ      ??DataFlash_Page_Write_0
     91          
     92          	// set CS to low	
     93          	DF_SPI_X_EnableCS(chip);
   \   00000050   FF0004E2           AND      R0,R4,#0xFF
   \   00000054   ........           BL       DF_SPI_X_EnableCS
     94          #ifdef WRITEPROTECT
     95          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
     96          #endif
     97          	DFWAIT;
   \   00000058   9600A0E3           MOV      R0,#+150
   \   0000005C   ........           BL       uSDelay
     98          	// shift out command
     99          	if (1 == buffnum)
   \   00000060   010055E3           CMP      R5,#+1
    100          		xferSPI(BUFFER1_WRITE);
   \   00000064   8400A003           MOVEQ    R0,#+132
    101          	else
    102          		xferSPI(BUFFER2_WRITE);
   \   00000068   8700A013           MOVNE    R0,#+135
   \   0000006C   ........           BL       xferSPI
    103          
    104          	// shift out 24 more bits to start at byte 0
    105          	xferSPI(0); xferSPI(0); xferSPI(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       xferSPI
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   ........           BL       xferSPI
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   ........           BL       xferSPI
    106          
    107          	// shift out the data
    108          	for (i=0; i<bufsize; i++) xferSPI(buffer[i]);
   \   00000088   010057E3           CMP      R7,#+1
   \   0000008C   0B0000BA           BLT      ??DataFlash_Page_Write_1
   \   00000090   010017E3           TST      R7,#0x1
   \   00000094   0100000A           BEQ      ??DataFlash_Page_Write_2
   \   00000098   0100D6E4           LDRB     R0,[R6], #+1
   \   0000009C   ........           BL       xferSPI
   \                     ??DataFlash_Page_Write_2:
   \   000000A0   A770B0E1           LSRS     R7,R7,#+1
   \   000000A4   0500000A           BEQ      ??DataFlash_Page_Write_1
   \                     ??DataFlash_Page_Write_3:
   \   000000A8   0100D6E4           LDRB     R0,[R6], #+1
   \   000000AC   ........           BL       xferSPI
   \   000000B0   0100D6E4           LDRB     R0,[R6], #+1
   \   000000B4   ........           BL       xferSPI
   \   000000B8   017057E2           SUBS     R7,R7,#+1
   \   000000BC   F9FFFF1A           BNE      ??DataFlash_Page_Write_3
    109          
    110          	// set CS to high to end buffer transfer
    111          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Page_Write_1:
   \   000000C0   FF0004E2           AND      R0,R4,#0xFF
   \   000000C4   ........           BL       DF_SPI_X_DisableCS
    112          
    113          	DataFlash_Buffer_to_Page_Write(chip, buffnum, pagenum);
   \   000000C8   0820A0E1           MOV      R2,R8
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   \   000000D8   F043BDE8           POP      {R4-R9,LR}
   \   000000DC   ........           B        DataFlash_Buffer_to_Page_Write  ;; tailcall
    114          }
    115          
    116          // This function transfers a page from the designated buffer to
    117          // the designated memory page with an erase. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    118          void DataFlash_Buffer_to_Page_Write_Erase(int chip, int buffnum, u16 pagenum) {
   \                     DataFlash_Buffer_to_Page_Write_Erase:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    119          	u08 status;
    120          	BOOL erased;
    121          
    122          	erased = DataFlash_Page_Erased(chip, unsavedSysData.dataflash[chip].bytesPerPage, pagenum);
   \   00000008   ........           LDR      R0,??DataTable11
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   047180E0           ADD      R7,R0,R4, LSL #+2
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   B218D7E1           LDRH     R1,[R7, #+130]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       DataFlash_Page_Erased
   \   00000028   0080A0E1           MOV      R8,R0
    123          
    124          	// wait for Serial Flash to be available
    125          	do {
    126          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_0:
   \   0000002C   FF0004E2           AND      R0,R4,#0xFF
   \   00000030   ........           BL       DF_SPI_X_EnableCS
   \   00000034   9600A0E3           MOV      R0,#+150
   \   00000038   ........           BL       uSDelay
   \   0000003C   D700A0E3           MOV      R0,#+215
   \   00000040   ........           BL       xferSPI
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   ........           BL       xferSPI
   \   0000004C   0090A0E1           MOV      R9,R0
   \   00000050   FF0004E2           AND      R0,R4,#0xFF
   \   00000054   ........           BL       DF_SPI_X_DisableCS
    127          	} while (!(status & STATUS_READY_MASK));
   \   00000058   800019E3           TST      R9,#0x80
   \   0000005C   F2FFFF0A           BEQ      ??DataFlash_Buffer_to_Page_Write_Erase_0
    128          
    129          	// set CS to low	
    130          	DF_SPI_X_EnableCS(chip);
   \   00000060   FF0004E2           AND      R0,R4,#0xFF
   \   00000064   ........           BL       DF_SPI_X_EnableCS
    131          #ifdef WRITEPROTECT
    132          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
    133          #endif
    134          	DFWAIT;
   \   00000068   9600A0E3           MOV      R0,#+150
   \   0000006C   ........           BL       uSDelay
    135          
    136          	if (erased) {
   \   00000070   000058E3           CMP      R8,#+0
   \   00000074   0300000A           BEQ      ??DataFlash_Buffer_to_Page_Write_Erase_1
    137          		// shift out command
    138          		if (1 == buffnum)
   \   00000078   010056E3           CMP      R6,#+1
    139          			xferSPI(MEMORY_PAGE_THRU_BUFFER1_WRITE);
   \   0000007C   8200A003           MOVEQ    R0,#+130
   \   00000080   8500A013           MOVNE    R0,#+133
   \   00000084   020000EA           B        ??DataFlash_Buffer_to_Page_Write_Erase_2
    140          		else
    141          			xferSPI(MEMORY_PAGE_THRU_BUFFER2_WRITE);
    142          	} // if
    143          	else {
    144          		// shift out command
    145          		if (1 == buffnum)
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_1:
   \   00000088   010056E3           CMP      R6,#+1
    146          			xferSPI(MEMORY_PAGE_THRU_BUFFER1_WRITE_ERASE);
   \   0000008C   8300A003           MOVEQ    R0,#+131
    147          		else
    148          			xferSPI(MEMORY_PAGE_THRU_BUFFER2_WRITE_ERASE);
   \   00000090   8600A013           MOVNE    R0,#+134
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_2:
   \   00000094   ........           BL       xferSPI
    149          	} // else
    150          
    151          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000098   B208D7E1           LDRH     R0,[R7, #+130]
   \   0000009C   420E50E3           CMP      R0,#+1056
   \   000000A0   0B00000A           BEQ      ??DataFlash_Buffer_to_Page_Write_Erase_3
   \   000000A4   420F50E3           CMP      R0,#+264
   \   000000A8   0400000A           BEQ      ??DataFlash_Buffer_to_Page_Write_Erase_4
   \   000000AC   2503A0E1           LSR      R0,R5,#+6
   \   000000B0   FF0000E2           AND      R0,R0,#0xFF
   \   000000B4   ........           BL       xferSPI
   \   000000B8   0501A0E1           LSL      R0,R5,#+2
   \   000000BC   080000EA           B        ??DataFlash_Buffer_to_Page_Write_Erase_5
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_4:
   \   000000C0   A503A0E1           LSR      R0,R5,#+7
   \   000000C4   FF0000E2           AND      R0,R0,#0xFF
   \   000000C8   ........           BL       xferSPI
   \   000000CC   8500A0E1           LSL      R0,R5,#+1
   \   000000D0   030000EA           B        ??DataFlash_Buffer_to_Page_Write_Erase_5
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_3:
   \   000000D4   A502A0E1           LSR      R0,R5,#+5
   \   000000D8   FF0000E2           AND      R0,R0,#0xFF
   \   000000DC   ........           BL       xferSPI
   \   000000E0   8501A0E1           LSL      R0,R5,#+3
   \                     ??DataFlash_Buffer_to_Page_Write_Erase_5:
   \   000000E4   FF0000E2           AND      R0,R0,#0xFF
   \   000000E8   ........           BL       xferSPI
    152          
    153          	// shift out bottom 8 bits of unsigned char address
    154          	xferSPI(0);
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   ........           BL       xferSPI
    155          
    156          #ifdef WRITEPROTECT
    157          	DF_WP = 0;
    158          #endif
    159          	// raise CS to end command and start flash write
    160          	DF_SPI_X_DisableCS(chip);
   \   000000F4   FF0004E2           AND      R0,R4,#0xFF
   \   000000F8   04D08DE2           ADD      SP,SP,#+4
   \   000000FC   F043BDE8           POP      {R4-R9,LR}
   \   00000100   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    161          }
    162          
    163          // This function transfers a page from the designated buffer to
    164          // the designated memory page, no erase. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    165          void DataFlash_Buffer_to_Page_Write(int chip, int buffnum, u16 pagenum) {
   \                     DataFlash_Buffer_to_Page_Write:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    166          	u08 status;
    167          
    168          	// wait for Serial Flash to be available
    169          	do {
    170          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Buffer_to_Page_Write_0:
   \   00000014   FF0004E2           AND      R0,R4,#0xFF
   \   00000018   ........           BL       DF_SPI_X_EnableCS
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   ........           BL       uSDelay
   \   00000024   D700A0E3           MOV      R0,#+215
   \   00000028   ........           BL       xferSPI
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       xferSPI
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   FF0004E2           AND      R0,R4,#0xFF
   \   0000003C   ........           BL       DF_SPI_X_DisableCS
    171          	} while (!(status & STATUS_READY_MASK));
   \   00000040   800017E3           TST      R7,#0x80
   \   00000044   F2FFFF0A           BEQ      ??DataFlash_Buffer_to_Page_Write_0
    172          
    173          	// set CS to low	
    174          	DF_SPI_X_EnableCS(chip);
   \   00000048   FF0004E2           AND      R0,R4,#0xFF
   \   0000004C   ........           BL       DF_SPI_X_EnableCS
    175          #ifdef WRITEPROTECT
    176          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
    177          #endif
    178          	DFWAIT;
   \   00000050   9600A0E3           MOV      R0,#+150
   \   00000054   ........           BL       uSDelay
    179          
    180          	// shift out command
    181          	if (1 == buffnum)
   \   00000058   010055E3           CMP      R5,#+1
    182          //		xferSPI(MEMORY_PAGE_THRU_BUFFER1_WRITE);
    183          		xferSPI(BUFFER1_WRITE_NO_ERASE);
   \   0000005C   8800A003           MOVEQ    R0,#+136
    184          	else
    185          //		xferSPI(MEMORY_PAGE_THRU_BUFFER2_WRITE);
    186          		xferSPI(BUFFER2_WRITE_NO_ERASE);
   \   00000060   8900A013           MOVNE    R0,#+137
   \   00000064   ........           BL       xferSPI
    187          		
    188          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000068   ........           LDR      R0,??DataTable11
   \   0000006C   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000070   B208D0E1           LDRH     R0,[R0, #+130]
   \   00000074   420E50E3           CMP      R0,#+1056
   \   00000078   0B00000A           BEQ      ??DataFlash_Buffer_to_Page_Write_1
   \   0000007C   420F50E3           CMP      R0,#+264
   \   00000080   0400000A           BEQ      ??DataFlash_Buffer_to_Page_Write_2
   \   00000084   2603A0E1           LSR      R0,R6,#+6
   \   00000088   FF0000E2           AND      R0,R0,#0xFF
   \   0000008C   ........           BL       xferSPI
   \   00000090   0601A0E1           LSL      R0,R6,#+2
   \   00000094   080000EA           B        ??DataFlash_Buffer_to_Page_Write_3
   \                     ??DataFlash_Buffer_to_Page_Write_2:
   \   00000098   A603A0E1           LSR      R0,R6,#+7
   \   0000009C   FF0000E2           AND      R0,R0,#0xFF
   \   000000A0   ........           BL       xferSPI
   \   000000A4   8600A0E1           LSL      R0,R6,#+1
   \   000000A8   030000EA           B        ??DataFlash_Buffer_to_Page_Write_3
   \                     ??DataFlash_Buffer_to_Page_Write_1:
   \   000000AC   A602A0E1           LSR      R0,R6,#+5
   \   000000B0   FF0000E2           AND      R0,R0,#0xFF
   \   000000B4   ........           BL       xferSPI
   \   000000B8   8601A0E1           LSL      R0,R6,#+3
   \                     ??DataFlash_Buffer_to_Page_Write_3:
   \   000000BC   FF0000E2           AND      R0,R0,#0xFF
   \   000000C0   ........           BL       xferSPI
    189          
    190          	// shift out bottom 8 bits of unsigned char address
    191          	xferSPI(0);
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   ........           BL       xferSPI
    192          
    193          #ifdef WRITEPROTECT
    194          	DF_WP = 0;
    195          #endif
    196          	// raise CS to end command and start flash write
    197          	DF_SPI_X_DisableCS(chip);
   \   000000CC   FF0004E2           AND      R0,R4,#0xFF
   \   000000D0   04D08DE2           ADD      SP,SP,#+4
   \   000000D4   F040BDE8           POP      {R4-R7,LR}
   \   000000D8   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    198          }
    199          
    200          // This function transfers one or more bytes from an array to the designated buffer. Blocking.
    201          // address is 10 bit address of which byte of buffer to start transfer

   \                                 In section .text, align 4, keep-with-next
    202          void DataFlash_Buffer_Write(int chip, int buffnum, int bufsize, u16 address, char *buffer) {
   \                     DataFlash_Buffer_Write:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   20709DE5           LDR      R7,[SP, #+32]
    203          	u08 status;
    204          	int i;
    205          
    206          	// wait for Serial Flash to be available
    207          	do {
    208          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Buffer_Write_0:
   \   0000001C   FF0004E2           AND      R0,R4,#0xFF
   \   00000020   ........           BL       DF_SPI_X_EnableCS
   \   00000024   9600A0E3           MOV      R0,#+150
   \   00000028   ........           BL       uSDelay
   \   0000002C   D700A0E3           MOV      R0,#+215
   \   00000030   ........           BL       xferSPI
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           BL       xferSPI
   \   0000003C   0090A0E1           MOV      R9,R0
   \   00000040   FF0004E2           AND      R0,R4,#0xFF
   \   00000044   ........           BL       DF_SPI_X_DisableCS
    209          	} while (!(status & STATUS_READY_MASK));
   \   00000048   800019E3           TST      R9,#0x80
   \   0000004C   F2FFFF0A           BEQ      ??DataFlash_Buffer_Write_0
    210          
    211          	// set CS to low	
    212          	DF_SPI_X_EnableCS(chip);
   \   00000050   FF0004E2           AND      R0,R4,#0xFF
   \   00000054   ........           BL       DF_SPI_X_EnableCS
    213          #ifdef WRITEPROTECT
    214          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
    215          #endif
    216          	DFWAIT;
   \   00000058   9600A0E3           MOV      R0,#+150
   \   0000005C   ........           BL       uSDelay
    217          	// shift out command
    218          	if (1 == buffnum)
   \   00000060   010058E3           CMP      R8,#+1
    219          		xferSPI(BUFFER1_WRITE);
   \   00000064   8400A003           MOVEQ    R0,#+132
    220          	else
    221          		xferSPI(BUFFER2_WRITE);
   \   00000068   8700A013           MOVNE    R0,#+135
   \   0000006C   ........           BL       xferSPI
    222          
    223          	// shift out 24 more bits containing address
    224          	xferSPI(0); xferSPI((u08) ((address & 0x0300) >> 8)); xferSPI((u08) (address & 0x00FF));
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       xferSPI
   \   00000078   2604A0E1           LSR      R0,R6,#+8
   \   0000007C   030000E2           AND      R0,R0,#0x3
   \   00000080   ........           BL       xferSPI
   \   00000084   FF0006E2           AND      R0,R6,#0xFF
   \   00000088   ........           BL       xferSPI
    225          
    226          	// shift out the data
    227          	for (i=0; i<bufsize; i++) xferSPI(buffer[i]);
   \   0000008C   010055E3           CMP      R5,#+1
   \   00000090   0B0000BA           BLT      ??DataFlash_Buffer_Write_1
   \   00000094   010015E3           TST      R5,#0x1
   \   00000098   0100000A           BEQ      ??DataFlash_Buffer_Write_2
   \   0000009C   0100D7E4           LDRB     R0,[R7], #+1
   \   000000A0   ........           BL       xferSPI
   \                     ??DataFlash_Buffer_Write_2:
   \   000000A4   A550B0E1           LSRS     R5,R5,#+1
   \   000000A8   0500000A           BEQ      ??DataFlash_Buffer_Write_1
   \                     ??DataFlash_Buffer_Write_3:
   \   000000AC   0100D7E4           LDRB     R0,[R7], #+1
   \   000000B0   ........           BL       xferSPI
   \   000000B4   0100D7E4           LDRB     R0,[R7], #+1
   \   000000B8   ........           BL       xferSPI
   \   000000BC   015055E2           SUBS     R5,R5,#+1
   \   000000C0   F9FFFF1A           BNE      ??DataFlash_Buffer_Write_3
    228          
    229          	// set CS to high to end buffer transfer
    230          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Buffer_Write_1:
   \   000000C4   FF0004E2           AND      R0,R4,#0xFF
   \   000000C8   04D08DE2           ADD      SP,SP,#+4
   \   000000CC   F043BDE8           POP      {R4-R9,LR}
   \   000000D0   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    231          }
    232          
    233          // This function sets every byte in the designated buffer to 0xFF. Blocking.

   \                                 In section .text, align 4, keep-with-next
    234          void DataFlash_Buffer_Clear(int chip, int buffnum, int bufsize) {
   \                     DataFlash_Buffer_Clear:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    235          	u08 status;
    236          	int i;
    237          
    238          	// wait for Serial Flash to be available
    239          	do {
    240          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Buffer_Clear_0:
   \   00000014   FF0004E2           AND      R0,R4,#0xFF
   \   00000018   ........           BL       DF_SPI_X_EnableCS
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   ........           BL       uSDelay
   \   00000024   D700A0E3           MOV      R0,#+215
   \   00000028   ........           BL       xferSPI
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       xferSPI
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   FF0004E2           AND      R0,R4,#0xFF
   \   0000003C   ........           BL       DF_SPI_X_DisableCS
    241          	} while (!(status & STATUS_READY_MASK));
   \   00000040   800017E3           TST      R7,#0x80
   \   00000044   F2FFFF0A           BEQ      ??DataFlash_Buffer_Clear_0
    242          
    243          	// set CS to low	
    244          	DF_SPI_X_EnableCS(chip);
   \   00000048   FF0004E2           AND      R0,R4,#0xFF
   \   0000004C   ........           BL       DF_SPI_X_EnableCS
    245          #ifdef WRITEPROTECT
    246          	if (pagenum < 256) DF_WP = 1;		// writing low order pages
    247          #endif
    248          	DFWAIT;
   \   00000050   9600A0E3           MOV      R0,#+150
   \   00000054   ........           BL       uSDelay
    249          	// shift out command
    250          	if (1 == buffnum)
   \   00000058   010055E3           CMP      R5,#+1
    251          		xferSPI(BUFFER1_WRITE);
   \   0000005C   8400A003           MOVEQ    R0,#+132
    252          	else
    253          		xferSPI(BUFFER2_WRITE);
   \   00000060   8700A013           MOVNE    R0,#+135
   \   00000064   ........           BL       xferSPI
    254          
    255          	// shift out 24 more bits to start at byte 0
    256          	xferSPI(0); xferSPI(0); xferSPI(0);
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   ........           BL       xferSPI
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       xferSPI
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   ........           BL       xferSPI
    257          
    258          	// shift out the data
    259          	for (i=0; i<bufsize; i++) xferSPI(0xFF);
   \   00000080   010056E3           CMP      R6,#+1
   \   00000084   0B0000BA           BLT      ??DataFlash_Buffer_Clear_1
   \   00000088   010016E3           TST      R6,#0x1
   \   0000008C   0100000A           BEQ      ??DataFlash_Buffer_Clear_2
   \   00000090   FF00A0E3           MOV      R0,#+255
   \   00000094   ........           BL       xferSPI
   \                     ??DataFlash_Buffer_Clear_2:
   \   00000098   A650B0E1           LSRS     R5,R6,#+1
   \   0000009C   0500000A           BEQ      ??DataFlash_Buffer_Clear_1
   \                     ??DataFlash_Buffer_Clear_3:
   \   000000A0   FF00A0E3           MOV      R0,#+255
   \   000000A4   ........           BL       xferSPI
   \   000000A8   FF00A0E3           MOV      R0,#+255
   \   000000AC   ........           BL       xferSPI
   \   000000B0   015055E2           SUBS     R5,R5,#+1
   \   000000B4   F9FFFF1A           BNE      ??DataFlash_Buffer_Clear_3
    260          
    261          	// set CS to high to end buffer transfer
    262          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Buffer_Clear_1:
   \   000000B8   FF0004E2           AND      R0,R4,#0xFF
   \   000000BC   04D08DE2           ADD      SP,SP,#+4
   \   000000C0   F040BDE8           POP      {R4-R7,LR}
   \   000000C4   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    263          }
    264          
    265          // returns the value of DataFlash Status Register. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    266          unsigned char DataFlash_Read_Status(int chip)
    267          {
   \                     DataFlash_Read_Status:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    268             u08 dat;
    269          
    270          	DF_SPI_X_EnableCS(chip);
   \   0000000C   FF0000E2           AND      R0,R0,#0xFF
   \   00000010   ........           BL       DF_SPI_X_EnableCS
    271          	DFWAIT;
   \   00000014   9600A0E3           MOV      R0,#+150
   \   00000018   ........           BL       uSDelay
    272          
    273          	//command
    274          	xferSPI(STATUS_REGISTER_READ);
   \   0000001C   D700A0E3           MOV      R0,#+215
   \   00000020   ........           BL       xferSPI
    275          
    276          	dat = xferSPI(0);
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           BL       xferSPI
   \   0000002C   0050A0E1           MOV      R5,R0
    277          
    278          	DF_SPI_X_DisableCS(chip);
   \   00000030   FF0004E2           AND      R0,R4,#0xFF
   \   00000034   ........           BL       DF_SPI_X_DisableCS
    279          
    280             return (dat);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
    281          }
    282          
    283          // returns the value of DataFlash Status Register. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    284          void DataFlash_Read_Id(int chip, int len, unsigned char *id_string)
    285          {
   \                     DataFlash_Read_Id:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    286          	u08 status;
    287          	int i;
    288          
    289          	// wait for Serial Flash to be available
    290          	do {
    291          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Read_Id_0:
   \   00000014   FF0004E2           AND      R0,R4,#0xFF
   \   00000018   ........           BL       DF_SPI_X_EnableCS
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   ........           BL       uSDelay
   \   00000024   D700A0E3           MOV      R0,#+215
   \   00000028   ........           BL       xferSPI
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       xferSPI
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   FF0004E2           AND      R0,R4,#0xFF
   \   0000003C   ........           BL       DF_SPI_X_DisableCS
    292          	} while (!(status & STATUS_READY_MASK));
   \   00000040   800017E3           TST      R7,#0x80
   \   00000044   F2FFFF0A           BEQ      ??DataFlash_Read_Id_0
    293          
    294          	DF_SPI_X_EnableCS(chip);
   \   00000048   FF0004E2           AND      R0,R4,#0xFF
   \   0000004C   ........           BL       DF_SPI_X_EnableCS
    295          	DFWAIT;
   \   00000050   9600A0E3           MOV      R0,#+150
   \   00000054   ........           BL       uSDelay
    296          
    297          	// shift out command
    298          	xferSPI(MANUFACTURER_ID_READ);
   \   00000058   9F00A0E3           MOV      R0,#+159
   \   0000005C   ........           BL       xferSPI
    299          
    300          	for (i=0; i<len; i++)
   \   00000060   010055E3           CMP      R5,#+1
   \   00000064   0E0000BA           BLT      ??DataFlash_Read_Id_1
   \   00000068   010015E3           TST      R5,#0x1
   \   0000006C   0200000A           BEQ      ??DataFlash_Read_Id_2
    301          		id_string[i] = xferSPI(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       xferSPI
   \   00000078   0100C6E4           STRB     R0,[R6], #+1
   \                     ??DataFlash_Read_Id_2:
   \   0000007C   A550B0E1           LSRS     R5,R5,#+1
   \   00000080   0700000A           BEQ      ??DataFlash_Read_Id_1
   \                     ??DataFlash_Read_Id_3:
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   ........           BL       xferSPI
   \   0000008C   0100C6E4           STRB     R0,[R6], #+1
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   ........           BL       xferSPI
   \   00000098   0100C6E4           STRB     R0,[R6], #+1
   \   0000009C   015055E2           SUBS     R5,R5,#+1
   \   000000A0   F7FFFF1A           BNE      ??DataFlash_Read_Id_3
    302          
    303          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Read_Id_1:
   \   000000A4   FF0004E2           AND      R0,R4,#0xFF
   \   000000A8   04D08DE2           ADD      SP,SP,#+4
   \   000000AC   F040BDE8           POP      {R4-R7,LR}
   \   000000B0   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    304          }
    305          
    306          // This function transfers a page from the designated memory page to an array. Blocking.

   \                                 In section .text, align 4, keep-with-next
    307          void DataFlash_Page_Read(int chip, int bufsize, char *buffer, u16 pagenum) {
   \                     DataFlash_Page_Read:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0370A0E1           MOV      R7,R3
    308          
    309          	u08 status;
    310          	int i;
    311          
    312          	// wait for Serial Flash to be available
    313          	do {
    314          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Page_Read_0:
   \   00000014   FF0004E2           AND      R0,R4,#0xFF
   \   00000018   ........           BL       DF_SPI_X_EnableCS
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   ........           BL       uSDelay
   \   00000024   D700A0E3           MOV      R0,#+215
   \   00000028   ........           BL       xferSPI
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       xferSPI
   \   00000034   0080A0E1           MOV      R8,R0
   \   00000038   FF0004E2           AND      R0,R4,#0xFF
   \   0000003C   ........           BL       DF_SPI_X_DisableCS
    315          	} while (!(status & STATUS_READY_MASK));
   \   00000040   800018E3           TST      R8,#0x80
   \   00000044   F2FFFF0A           BEQ      ??DataFlash_Page_Read_0
    316          
    317          	// set CS to low
    318          	DF_SPI_X_EnableCS(chip);
   \   00000048   FF0004E2           AND      R0,R4,#0xFF
   \   0000004C   ........           BL       DF_SPI_X_EnableCS
    319          	DFWAIT;
   \   00000050   9600A0E3           MOV      R0,#+150
   \   00000054   ........           BL       uSDelay
    320          
    321          	// shift out command
    322          	xferSPI(MEMORY_PAGE_READ);
   \   00000058   D200A0E3           MOV      R0,#+210
   \   0000005C   ........           BL       xferSPI
    323          	
    324          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000060   ........           LDR      R0,??DataTable11
   \   00000064   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000068   B208D0E1           LDRH     R0,[R0, #+130]
   \   0000006C   420E50E3           CMP      R0,#+1056
   \   00000070   0B00000A           BEQ      ??DataFlash_Page_Read_1
   \   00000074   420F50E3           CMP      R0,#+264
   \   00000078   0400000A           BEQ      ??DataFlash_Page_Read_2
   \   0000007C   2703A0E1           LSR      R0,R7,#+6
   \   00000080   FF0000E2           AND      R0,R0,#0xFF
   \   00000084   ........           BL       xferSPI
   \   00000088   0701A0E1           LSL      R0,R7,#+2
   \   0000008C   080000EA           B        ??DataFlash_Page_Read_3
   \                     ??DataFlash_Page_Read_2:
   \   00000090   A703A0E1           LSR      R0,R7,#+7
   \   00000094   FF0000E2           AND      R0,R0,#0xFF
   \   00000098   ........           BL       xferSPI
   \   0000009C   8700A0E1           LSL      R0,R7,#+1
   \   000000A0   030000EA           B        ??DataFlash_Page_Read_3
   \                     ??DataFlash_Page_Read_1:
   \   000000A4   A702A0E1           LSR      R0,R7,#+5
   \   000000A8   FF0000E2           AND      R0,R0,#0xFF
   \   000000AC   ........           BL       xferSPI
   \   000000B0   8701A0E1           LSL      R0,R7,#+3
   \                     ??DataFlash_Page_Read_3:
   \   000000B4   FF0000E2           AND      R0,R0,#0xFF
   \   000000B8   ........           BL       xferSPI
    325          
    326          	// shift out bottom 8 bits of unsigned char address
    327          	xferSPI(0);
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   ........           BL       xferSPI
    328          
    329          	// shift out 4 bytes of don't cares
    330          	xferSPI(0);	xferSPI(0);	xferSPI(0);	xferSPI(0);
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   ........           BL       xferSPI
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   ........           BL       xferSPI
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   ........           BL       xferSPI
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   ........           BL       xferSPI
    331          	
    332          	// shift in the data
    333          	for (i=0; i<bufsize; i++) buffer[i] = xferSPI(0);
   \   000000E4   010056E3           CMP      R6,#+1
   \   000000E8   0E0000BA           BLT      ??DataFlash_Page_Read_4
   \   000000EC   010016E3           TST      R6,#0x1
   \   000000F0   0200000A           BEQ      ??DataFlash_Page_Read_5
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   ........           BL       xferSPI
   \   000000FC   0100C5E4           STRB     R0,[R5], #+1
   \                     ??DataFlash_Page_Read_5:
   \   00000100   A660B0E1           LSRS     R6,R6,#+1
   \   00000104   0700000A           BEQ      ??DataFlash_Page_Read_4
   \                     ??DataFlash_Page_Read_6:
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   ........           BL       xferSPI
   \   00000110   0100C5E4           STRB     R0,[R5], #+1
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   ........           BL       xferSPI
   \   0000011C   0100C5E4           STRB     R0,[R5], #+1
   \   00000120   016056E2           SUBS     R6,R6,#+1
   \   00000124   F7FFFF1A           BNE      ??DataFlash_Page_Read_6
    334          
    335          	// raise CS to end operation
    336          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Page_Read_4:
   \   00000128   FF0004E2           AND      R0,R4,#0xFF
   \   0000012C   F041BDE8           POP      {R4-R8,LR}
   \   00000130   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    337          }
    338          
    339          // This function determines if a page is erased. Blocking.

   \                                 In section .text, align 4, keep-with-next
    340          unsigned char DataFlash_Page_Erased(int chip, int bufsize, u16 pagenum) {
   \                     DataFlash_Page_Erased:
   \   00000000   70432DE9           PUSH     {R4-R6,R8,R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    341          
    342          	u08 status;
    343          	BOOL result = TRUE;
   \   00000010   0180A0E3           MOV      R8,#+1
    344          	int i;
    345          
    346          	// wait for Serial Flash to be available
    347          	do {
    348          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Page_Erased_0:
   \   00000014   FF0004E2           AND      R0,R4,#0xFF
   \   00000018   ........           BL       DF_SPI_X_EnableCS
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   ........           BL       uSDelay
   \   00000024   D700A0E3           MOV      R0,#+215
   \   00000028   ........           BL       xferSPI
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       xferSPI
   \   00000034   0090A0E1           MOV      R9,R0
   \   00000038   FF0004E2           AND      R0,R4,#0xFF
   \   0000003C   ........           BL       DF_SPI_X_DisableCS
    349          	} while (!(status & STATUS_READY_MASK));
   \   00000040   800019E3           TST      R9,#0x80
   \   00000044   F2FFFF0A           BEQ      ??DataFlash_Page_Erased_0
    350          
    351          	// set CS to low
    352          	DF_SPI_X_EnableCS(chip);
   \   00000048   FF0004E2           AND      R0,R4,#0xFF
   \   0000004C   ........           BL       DF_SPI_X_EnableCS
    353          	DFWAIT;
   \   00000050   9600A0E3           MOV      R0,#+150
   \   00000054   ........           BL       uSDelay
    354          
    355          	// shift out command
    356          	xferSPI(MEMORY_PAGE_READ);
   \   00000058   D200A0E3           MOV      R0,#+210
   \   0000005C   ........           BL       xferSPI
    357          	
    358          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000060   ........           LDR      R0,??DataTable11
   \   00000064   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000068   B208D0E1           LDRH     R0,[R0, #+130]
   \   0000006C   420E50E3           CMP      R0,#+1056
   \   00000070   0B00000A           BEQ      ??DataFlash_Page_Erased_1
   \   00000074   420F50E3           CMP      R0,#+264
   \   00000078   0400000A           BEQ      ??DataFlash_Page_Erased_2
   \   0000007C   2603A0E1           LSR      R0,R6,#+6
   \   00000080   FF0000E2           AND      R0,R0,#0xFF
   \   00000084   ........           BL       xferSPI
   \   00000088   0601A0E1           LSL      R0,R6,#+2
   \   0000008C   080000EA           B        ??DataFlash_Page_Erased_3
   \                     ??DataFlash_Page_Erased_2:
   \   00000090   A603A0E1           LSR      R0,R6,#+7
   \   00000094   FF0000E2           AND      R0,R0,#0xFF
   \   00000098   ........           BL       xferSPI
   \   0000009C   8600A0E1           LSL      R0,R6,#+1
   \   000000A0   030000EA           B        ??DataFlash_Page_Erased_3
   \                     ??DataFlash_Page_Erased_1:
   \   000000A4   A602A0E1           LSR      R0,R6,#+5
   \   000000A8   FF0000E2           AND      R0,R0,#0xFF
   \   000000AC   ........           BL       xferSPI
   \   000000B0   8601A0E1           LSL      R0,R6,#+3
   \                     ??DataFlash_Page_Erased_3:
   \   000000B4   FF0000E2           AND      R0,R0,#0xFF
   \   000000B8   ........           BL       xferSPI
    359          
    360          	// shift out bottom 8 bits of unsigned char address
    361          	xferSPI(0);
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   ........           BL       xferSPI
    362          
    363          	// shift out 4 bytes of don't cares
    364          	xferSPI(0);	xferSPI(0);	xferSPI(0);	xferSPI(0);
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   ........           BL       xferSPI
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   ........           BL       xferSPI
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   ........           BL       xferSPI
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   ........           BL       xferSPI
    365          	
    366          	// shift in the data while checking for erasure
    367          	for (i=0; i<bufsize; i++)
   \   000000E4   010055E3           CMP      R5,#+1
   \   000000E8   130000BA           BLT      ??DataFlash_Page_Erased_4
   \   000000EC   010015E3           TST      R5,#0x1
   \   000000F0   0300000A           BEQ      ??DataFlash_Page_Erased_5
    368          		if (!(result = (0xFF == xferSPI(0)))) break;
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   ........           BL       xferSPI
   \   000000FC   FF0050E3           CMP      R0,#+255
   \   00000100   0900001A           BNE      ??DataFlash_Page_Erased_6
   \                     ??DataFlash_Page_Erased_5:
   \   00000104   A550B0E1           LSRS     R5,R5,#+1
   \   00000108   0B00000A           BEQ      ??DataFlash_Page_Erased_4
   \                     ??DataFlash_Page_Erased_7:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   ........           BL       xferSPI
   \   00000114   FF0050E3           CMP      R0,#+255
   \   00000118   0300001A           BNE      ??DataFlash_Page_Erased_6
   \   0000011C   0000A0E3           MOV      R0,#+0
   \   00000120   ........           BL       xferSPI
   \   00000124   FF0050E3           CMP      R0,#+255
   \   00000128   0100000A           BEQ      ??DataFlash_Page_Erased_8
   \                     ??DataFlash_Page_Erased_6:
   \   0000012C   0080A0E3           MOV      R8,#+0
   \   00000130   010000EA           B        ??DataFlash_Page_Erased_4
   \                     ??DataFlash_Page_Erased_8:
   \   00000134   015055E2           SUBS     R5,R5,#+1
   \   00000138   F3FFFF1A           BNE      ??DataFlash_Page_Erased_7
    369          
    370          	// raise CS to end operation
    371          	DF_SPI_X_DisableCS(chip);
   \                     ??DataFlash_Page_Erased_4:
   \   0000013C   FF0004E2           AND      R0,R4,#0xFF
   \   00000140   ........           BL       DF_SPI_X_DisableCS
    372          
    373          	return(result);
   \   00000144   0800A0E1           MOV      R0,R8
   \   00000148   7083BDE8           POP      {R4-R6,R8,R9,PC}  ;; return
    374          }
    375          
    376          // erases a block from memory. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    377          void DataFlash_Erase_Block(int chip, u16 pagenum)
    378          {
   \                     DataFlash_Erase_Block:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    379          	u08 status;
    380          
    381          	// wait for Serial Flash to be available
    382          	do {
    383          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Erase_Block_0:
   \   0000000C   FF0004E2           AND      R0,R4,#0xFF
   \   00000010   ........           BL       DF_SPI_X_EnableCS
   \   00000014   9600A0E3           MOV      R0,#+150
   \   00000018   ........           BL       uSDelay
   \   0000001C   D700A0E3           MOV      R0,#+215
   \   00000020   ........           BL       xferSPI
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           BL       xferSPI
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   FF0004E2           AND      R0,R4,#0xFF
   \   00000034   ........           BL       DF_SPI_X_DisableCS
    384          	} while (!(status & STATUS_READY_MASK));
   \   00000038   800016E3           TST      R6,#0x80
   \   0000003C   F2FFFF0A           BEQ      ??DataFlash_Erase_Block_0
    385          
    386          	DF_SPI_X_EnableCS(chip);
   \   00000040   FF0004E2           AND      R0,R4,#0xFF
   \   00000044   ........           BL       DF_SPI_X_EnableCS
    387          #ifdef WRITEPROTECT
    388          	if (pagenum < 256) DF_WP = 1;		// erasing low order pages
    389          #endif
    390          	DFWAIT;
   \   00000048   9600A0E3           MOV      R0,#+150
   \   0000004C   ........           BL       uSDelay
    391          
    392          	//command
    393          	xferSPI(BLOCK_ERASE);
   \   00000050   5000A0E3           MOV      R0,#+80
   \   00000054   ........           BL       xferSPI
    394          
    395          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000058   ........           LDR      R0,??DataTable11
   \   0000005C   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000060   B208D0E1           LDRH     R0,[R0, #+130]
   \   00000064   420E50E3           CMP      R0,#+1056
   \   00000068   0B00000A           BEQ      ??DataFlash_Erase_Block_1
   \   0000006C   420F50E3           CMP      R0,#+264
   \   00000070   0400000A           BEQ      ??DataFlash_Erase_Block_2
   \   00000074   2503A0E1           LSR      R0,R5,#+6
   \   00000078   FF0000E2           AND      R0,R0,#0xFF
   \   0000007C   ........           BL       xferSPI
   \   00000080   0501A0E1           LSL      R0,R5,#+2
   \   00000084   080000EA           B        ??DataFlash_Erase_Block_3
   \                     ??DataFlash_Erase_Block_2:
   \   00000088   A503A0E1           LSR      R0,R5,#+7
   \   0000008C   FF0000E2           AND      R0,R0,#0xFF
   \   00000090   ........           BL       xferSPI
   \   00000094   8500A0E1           LSL      R0,R5,#+1
   \   00000098   030000EA           B        ??DataFlash_Erase_Block_3
   \                     ??DataFlash_Erase_Block_1:
   \   0000009C   A502A0E1           LSR      R0,R5,#+5
   \   000000A0   FF0000E2           AND      R0,R0,#0xFF
   \   000000A4   ........           BL       xferSPI
   \   000000A8   8501A0E1           LSL      R0,R5,#+3
   \                     ??DataFlash_Erase_Block_3:
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   ........           BL       xferSPI
    396          	
    397          	// shift out bottom 8 bits of unsigned char address
    398          	xferSPI(0);
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   ........           BL       xferSPI
    399          
    400          #ifdef WRITEPROTECT
    401          	DF_WP = 0;
    402          #endif
    403          	DF_SPI_X_DisableCS(chip);
   \   000000BC   FF0004E2           AND      R0,R4,#0xFF
   \   000000C0   7040BDE8           POP      {R4-R6,LR}
   \   000000C4   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    404          }
    405          
    406          // erases a page from memory. Non-blocking.

   \                                 In section .text, align 4, keep-with-next
    407          void DataFlash_Erase_Page(int chip, u16 pagenum)
    408          {
   \                     DataFlash_Erase_Page:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    409          	u08 status;
    410          
    411          	// wait for Serial Flash to be available
    412          	do {
    413          		status = DataFlash_Read_Status(chip);
   \                     ??DataFlash_Erase_Page_0:
   \   0000000C   FF0004E2           AND      R0,R4,#0xFF
   \   00000010   ........           BL       DF_SPI_X_EnableCS
   \   00000014   9600A0E3           MOV      R0,#+150
   \   00000018   ........           BL       uSDelay
   \   0000001C   D700A0E3           MOV      R0,#+215
   \   00000020   ........           BL       xferSPI
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           BL       xferSPI
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   FF0004E2           AND      R0,R4,#0xFF
   \   00000034   ........           BL       DF_SPI_X_DisableCS
    414          	} while (!(status & STATUS_READY_MASK));
   \   00000038   800016E3           TST      R6,#0x80
   \   0000003C   F2FFFF0A           BEQ      ??DataFlash_Erase_Page_0
    415          
    416          	DF_SPI_X_EnableCS(chip);
   \   00000040   FF0004E2           AND      R0,R4,#0xFF
   \   00000044   ........           BL       DF_SPI_X_EnableCS
    417          #ifdef WRITEPROTECT
    418          	if (pagenum < 256) DF_WP = 1;		// erasing low order pages
    419          #endif
    420          	DFWAIT;
   \   00000048   9600A0E3           MOV      R0,#+150
   \   0000004C   ........           BL       uSDelay
    421          
    422          	//command
    423          	xferSPI(PAGE_ERASE);
   \   00000050   8100A0E3           MOV      R0,#+129
   \   00000054   ........           BL       xferSPI
    424          	
    425          	ShiftAddress(pagenum, unsavedSysData.dataflash[chip].bytesPerPage);
   \   00000058   ........           LDR      R0,??DataTable11
   \   0000005C   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000060   B208D0E1           LDRH     R0,[R0, #+130]
   \   00000064   420E50E3           CMP      R0,#+1056
   \   00000068   0B00000A           BEQ      ??DataFlash_Erase_Page_1
   \   0000006C   420F50E3           CMP      R0,#+264
   \   00000070   0400000A           BEQ      ??DataFlash_Erase_Page_2
   \   00000074   2503A0E1           LSR      R0,R5,#+6
   \   00000078   FF0000E2           AND      R0,R0,#0xFF
   \   0000007C   ........           BL       xferSPI
   \   00000080   0501A0E1           LSL      R0,R5,#+2
   \   00000084   080000EA           B        ??DataFlash_Erase_Page_3
   \                     ??DataFlash_Erase_Page_2:
   \   00000088   A503A0E1           LSR      R0,R5,#+7
   \   0000008C   FF0000E2           AND      R0,R0,#0xFF
   \   00000090   ........           BL       xferSPI
   \   00000094   8500A0E1           LSL      R0,R5,#+1
   \   00000098   030000EA           B        ??DataFlash_Erase_Page_3
   \                     ??DataFlash_Erase_Page_1:
   \   0000009C   A502A0E1           LSR      R0,R5,#+5
   \   000000A0   FF0000E2           AND      R0,R0,#0xFF
   \   000000A4   ........           BL       xferSPI
   \   000000A8   8501A0E1           LSL      R0,R5,#+3
   \                     ??DataFlash_Erase_Page_3:
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   ........           BL       xferSPI
    426          
    427          	// shift out bottom 8 bits of unsigned char address
    428          	xferSPI(0);
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   ........           BL       xferSPI
    429          
    430          #ifdef WRITEPROTECT
    431          	DF_WP = 0;
    432          #endif
    433          	DF_SPI_X_DisableCS(chip);
   \   000000BC   FF0004E2           AND      R0,R4,#0xFF
   \   000000C0   7040BDE8           POP      {R4-R6,LR}
   \   000000C4   ........           B        DF_SPI_X_DisableCS  ;; tailcall
    434          }
    435          
    436          // erases a range of pages from memory.

   \                                 In section .text, align 4, keep-with-next
    437          void DataFlash_Erase_Range(int chip, u16 firstpage, u16 lastpage) {
   \                     DataFlash_Erase_Range:
   \   00000000   70432DE9           PUSH     {R4-R6,R8,R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    438          	u16 segment;
    439          
    440          	for (segment = firstpage; segment <= lastpage; segment++) {
   \   00000008   ........           LDR      R0,??DataTable11
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   046180E0           ADD      R6,R0,R4, LSL #+2
   \   00000018   080055E1           CMP      R5,R8
   \   0000001C   6300003A           BCC      ??DataFlash_Erase_Range_0
    441          		// check for even block boundary and that we are not near end of segment
    442          		if (0 == (segment % 8) && (lastpage - segment) >= 8) {
   \                     ??DataFlash_Erase_Range_1:
   \   00000020   070018E3           TST      R8,#0x7
   \   00000024   3000001A           BNE      ??DataFlash_Erase_Range_2
   \   00000028   080045E0           SUB      R0,R5,R8
   \   0000002C   080050E3           CMP      R0,#+8
   \   00000030   2D0000BA           BLT      ??DataFlash_Erase_Range_2
   \                     ??DataFlash_Erase_Range_3:
   \   00000034   FF0004E2           AND      R0,R4,#0xFF
   \   00000038   ........           BL       DF_SPI_X_EnableCS
   \   0000003C   9600A0E3           MOV      R0,#+150
   \   00000040   ........           BL       uSDelay
   \   00000044   D700A0E3           MOV      R0,#+215
   \   00000048   ........           BL       xferSPI
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           BL       xferSPI
   \   00000054   0090A0E1           MOV      R9,R0
   \   00000058   FF0004E2           AND      R0,R4,#0xFF
   \   0000005C   ........           BL       DF_SPI_X_DisableCS
   \   00000060   800019E3           TST      R9,#0x80
   \   00000064   F2FFFF0A           BEQ      ??DataFlash_Erase_Range_3
   \   00000068   FF0004E2           AND      R0,R4,#0xFF
   \   0000006C   ........           BL       DF_SPI_X_EnableCS
   \   00000070   9600A0E3           MOV      R0,#+150
   \   00000074   ........           BL       uSDelay
   \   00000078   5000A0E3           MOV      R0,#+80
   \   0000007C   ........           BL       xferSPI
   \   00000080   B208D6E1           LDRH     R0,[R6, #+130]
   \   00000084   420E50E3           CMP      R0,#+1056
   \   00000088   0B00000A           BEQ      ??DataFlash_Erase_Range_4
   \   0000008C   420F50E3           CMP      R0,#+264
   \   00000090   0400000A           BEQ      ??DataFlash_Erase_Range_5
   \   00000094   2803A0E1           LSR      R0,R8,#+6
   \   00000098   FF0000E2           AND      R0,R0,#0xFF
   \   0000009C   ........           BL       xferSPI
   \   000000A0   0801A0E1           LSL      R0,R8,#+2
   \   000000A4   080000EA           B        ??DataFlash_Erase_Range_6
   \                     ??DataFlash_Erase_Range_5:
   \   000000A8   A803A0E1           LSR      R0,R8,#+7
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   ........           BL       xferSPI
   \   000000B4   8800A0E1           LSL      R0,R8,#+1
   \   000000B8   030000EA           B        ??DataFlash_Erase_Range_6
   \                     ??DataFlash_Erase_Range_4:
   \   000000BC   A802A0E1           LSR      R0,R8,#+5
   \   000000C0   FF0000E2           AND      R0,R0,#0xFF
   \   000000C4   ........           BL       xferSPI
   \   000000C8   8801A0E1           LSL      R0,R8,#+3
   \                     ??DataFlash_Erase_Range_6:
   \   000000CC   FF0000E2           AND      R0,R0,#0xFF
   \   000000D0   ........           BL       xferSPI
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   ........           BL       xferSPI
   \   000000DC   FF0004E2           AND      R0,R4,#0xFF
   \   000000E0   ........           BL       DF_SPI_X_DisableCS
    443          
    444          			// erase block
    445          			DataFlash_Erase_Block(chip, segment);
    446          			
    447          			segment += 7;		// will get incremented again at start of loop
   \   000000E4   078088E2           ADD      R8,R8,#+7
   \   000000E8   2B0000EA           B        ??DataFlash_Erase_Range_7
    448          		} // if
    449          		else
    450          			DataFlash_Erase_Page(chip, segment);
    451          	} // for
   \                     ??DataFlash_Erase_Range_2:
   \   000000EC   FF0004E2           AND      R0,R4,#0xFF
   \   000000F0   ........           BL       DF_SPI_X_EnableCS
   \   000000F4   9600A0E3           MOV      R0,#+150
   \   000000F8   ........           BL       uSDelay
   \   000000FC   D700A0E3           MOV      R0,#+215
   \   00000100   ........           BL       xferSPI
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   ........           BL       xferSPI
   \   0000010C   0090A0E1           MOV      R9,R0
   \   00000110   FF0004E2           AND      R0,R4,#0xFF
   \   00000114   ........           BL       DF_SPI_X_DisableCS
   \   00000118   800019E3           TST      R9,#0x80
   \   0000011C   F2FFFF0A           BEQ      ??DataFlash_Erase_Range_2
   \   00000120   FF0004E2           AND      R0,R4,#0xFF
   \   00000124   ........           BL       DF_SPI_X_EnableCS
   \   00000128   9600A0E3           MOV      R0,#+150
   \   0000012C   ........           BL       uSDelay
   \   00000130   8100A0E3           MOV      R0,#+129
   \   00000134   ........           BL       xferSPI
   \   00000138   B208D6E1           LDRH     R0,[R6, #+130]
   \   0000013C   420E50E3           CMP      R0,#+1056
   \   00000140   0B00000A           BEQ      ??DataFlash_Erase_Range_8
   \   00000144   420F50E3           CMP      R0,#+264
   \   00000148   0400000A           BEQ      ??DataFlash_Erase_Range_9
   \   0000014C   2803A0E1           LSR      R0,R8,#+6
   \   00000150   FF0000E2           AND      R0,R0,#0xFF
   \   00000154   ........           BL       xferSPI
   \   00000158   0801A0E1           LSL      R0,R8,#+2
   \   0000015C   080000EA           B        ??DataFlash_Erase_Range_10
   \                     ??DataFlash_Erase_Range_9:
   \   00000160   A803A0E1           LSR      R0,R8,#+7
   \   00000164   FF0000E2           AND      R0,R0,#0xFF
   \   00000168   ........           BL       xferSPI
   \   0000016C   8800A0E1           LSL      R0,R8,#+1
   \   00000170   030000EA           B        ??DataFlash_Erase_Range_10
   \                     ??DataFlash_Erase_Range_8:
   \   00000174   A802A0E1           LSR      R0,R8,#+5
   \   00000178   FF0000E2           AND      R0,R0,#0xFF
   \   0000017C   ........           BL       xferSPI
   \   00000180   8801A0E1           LSL      R0,R8,#+3
   \                     ??DataFlash_Erase_Range_10:
   \   00000184   FF0000E2           AND      R0,R0,#0xFF
   \   00000188   ........           BL       xferSPI
   \   0000018C   0000A0E3           MOV      R0,#+0
   \   00000190   ........           BL       xferSPI
   \   00000194   FF0004E2           AND      R0,R4,#0xFF
   \   00000198   ........           BL       DF_SPI_X_DisableCS
   \                     ??DataFlash_Erase_Range_7:
   \   0000019C   018088E2           ADD      R8,R8,#+1
   \   000001A0   0888A0E1           LSL      R8,R8,#+16
   \   000001A4   2888A0E1           LSR      R8,R8,#+16
   \   000001A8   080055E1           CMP      R5,R8
   \   000001AC   9BFFFF2A           BCS      ??DataFlash_Erase_Range_1
    452          } // DataFlash_Erase_Range
   \                     ??DataFlash_Erase_Range_0:
   \   000001B0   7083BDE8           POP      {R4-R6,R8,R9,PC}  ;; return
    453          
    454          //-----------------------------------------------------------------------------
    455          // Initialization Subroutines
    456          //-----------------------------------------------------------------------------
    457          
    458          // This function initializes the DataFlash. Returns size of part in Mbit
    459          // Sets values for number of pages and bytes per page

   \                                 In section .text, align 4, keep-with-next
    460          void DataFlash_Init(int chip, u16 *pages, u16 *pagebytes) {
   \                     DataFlash_Init:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    461          	u08 trys = 0;			// can be set to higher number to shorten timeout
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0260A0E1           MOV      R6,R2
    462          	u08 status;
    463          
    464          	*pages = 0;
   \   00000014   B000C5E1           STRH     R0,[R5, #+0]
   \   00000018   08D04DE2           SUB      SP,SP,#+8
   \   0000001C   0070A0E3           MOV      R7,#+0
    465          	*pagebytes = 0;
   \   00000020   B000C6E1           STRH     R0,[R6, #+0]
    466          
    467          	// wait for Serial Flash to be available
    468          	do {
    469          		trys++;
   \                     ??DataFlash_Init_1:
   \   00000024   017087E2           ADD      R7,R7,#+1
    470          		status = DataFlash_Read_Status(chip);
   \   00000028   FF0004E2           AND      R0,R4,#0xFF
   \   0000002C   ........           BL       DF_SPI_X_EnableCS
   \   00000030   9600A0E3           MOV      R0,#+150
   \   00000034   ........           BL       uSDelay
   \   00000038   D700A0E3           MOV      R0,#+215
   \   0000003C   ........           BL       xferSPI
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   ........           BL       xferSPI
   \   00000048   0080A0E1           MOV      R8,R0
   \   0000004C   FF0004E2           AND      R0,R4,#0xFF
   \   00000050   ........           BL       DF_SPI_X_DisableCS
    471          	} while ((0 != trys) && !(status & STATUS_READY_MASK));
   \   00000054   FF7017E2           ANDS     R7,R7,#0xFF
   \   00000058   8400000A           BEQ      ??DataFlash_Init_2
   \   0000005C   800018E3           TST      R8,#0x80
   \   00000060   EFFFFF0A           BEQ      ??DataFlash_Init_1
    472          
    473          	if (0 != trys) {			// did not time out
    474          
    475          		// check for ready and determine which type of chip it is
    476          
    477          		switch (status & STATUS_DENSITY_MASK) {
   \   00000064   3C0008E2           AND      R0,R8,#0x3C
   \   00000068   0C0040E2           SUB      R0,R0,#+12
   \   0000006C   300050E3           CMP      R0,#+48
   \   00000070   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??DataFlash_Init_0:
   \   00000074   7D00008A           BHI      ??DataFlash_Init_2
   \   00000078   2F0000EA           B        ??DataFlash_Init_3
   \   0000007C   7B0000EA           B        ??DataFlash_Init_2
   \   00000080   7A0000EA           B        ??DataFlash_Init_2
   \   00000084   790000EA           B        ??DataFlash_Init_2
   \   00000088   780000EA           B        ??DataFlash_Init_2
   \   0000008C   770000EA           B        ??DataFlash_Init_2
   \   00000090   760000EA           B        ??DataFlash_Init_2
   \   00000094   750000EA           B        ??DataFlash_Init_2
   \   00000098   290000EA           B        ??DataFlash_Init_4
   \   0000009C   730000EA           B        ??DataFlash_Init_2
   \   000000A0   720000EA           B        ??DataFlash_Init_2
   \   000000A4   710000EA           B        ??DataFlash_Init_2
   \   000000A8   700000EA           B        ??DataFlash_Init_2
   \   000000AC   6F0000EA           B        ??DataFlash_Init_2
   \   000000B0   6E0000EA           B        ??DataFlash_Init_2
   \   000000B4   6D0000EA           B        ??DataFlash_Init_2
   \   000000B8   230000EA           B        ??DataFlash_Init_5
   \   000000BC   6B0000EA           B        ??DataFlash_Init_2
   \   000000C0   6A0000EA           B        ??DataFlash_Init_2
   \   000000C4   690000EA           B        ??DataFlash_Init_2
   \   000000C8   680000EA           B        ??DataFlash_Init_2
   \   000000CC   670000EA           B        ??DataFlash_Init_2
   \   000000D0   660000EA           B        ??DataFlash_Init_2
   \   000000D4   650000EA           B        ??DataFlash_Init_2
   \   000000D8   1D0000EA           B        ??DataFlash_Init_6
   \   000000DC   630000EA           B        ??DataFlash_Init_2
   \   000000E0   620000EA           B        ??DataFlash_Init_2
   \   000000E4   610000EA           B        ??DataFlash_Init_2
   \   000000E8   600000EA           B        ??DataFlash_Init_2
   \   000000EC   5F0000EA           B        ??DataFlash_Init_2
   \   000000F0   5E0000EA           B        ??DataFlash_Init_2
   \   000000F4   5D0000EA           B        ??DataFlash_Init_2
   \   000000F8   170000EA           B        ??DataFlash_Init_7
   \   000000FC   5B0000EA           B        ??DataFlash_Init_2
   \   00000100   5A0000EA           B        ??DataFlash_Init_2
   \   00000104   590000EA           B        ??DataFlash_Init_2
   \   00000108   580000EA           B        ??DataFlash_Init_2
   \   0000010C   570000EA           B        ??DataFlash_Init_2
   \   00000110   560000EA           B        ??DataFlash_Init_2
   \   00000114   550000EA           B        ??DataFlash_Init_2
   \   00000118   130000EA           B        ??DataFlash_Init_8
   \   0000011C   530000EA           B        ??DataFlash_Init_2
   \   00000120   520000EA           B        ??DataFlash_Init_2
   \   00000124   510000EA           B        ??DataFlash_Init_2
   \   00000128   500000EA           B        ??DataFlash_Init_2
   \   0000012C   4F0000EA           B        ??DataFlash_Init_2
   \   00000130   4E0000EA           B        ??DataFlash_Init_2
   \   00000134   4D0000EA           B        ??DataFlash_Init_2
   \   00000138   0D0000EA           B        ??DataFlash_Init_9
    478          			case DENSITY_1MBIT:
    479          				*pages = NUM_PAGE_1MBIT;
   \                     ??DataFlash_Init_3:
   \   0000013C   800FA0E3           MOV      R0,#+512
   \   00000140   470000EA           B        ??DataFlash_Init_10
    480          				*pagebytes = MAX_PAGE_1MBIT;
    481          				break;
    482          			case DENSITY_2MBIT:
    483          				*pages = NUM_PAGE_2MBIT;
   \                     ??DataFlash_Init_4:
   \   00000144   400EA0E3           MOV      R0,#+1024
   \   00000148   450000EA           B        ??DataFlash_Init_10
    484          				*pagebytes = MAX_PAGE_2MBIT;
    485          				break;
    486          			case DENSITY_4MBIT:
    487          				*pages = NUM_PAGE_4MBIT;
   \                     ??DataFlash_Init_5:
   \   0000014C   800EA0E3           MOV      R0,#+2048
   \   00000150   430000EA           B        ??DataFlash_Init_10
    488          				*pagebytes = MAX_PAGE_4MBIT;
    489          				break;
    490          			case DENSITY_8MBIT:
    491          				*pages = NUM_PAGE_8MBIT;
   \                     ??DataFlash_Init_6:
   \   00000154   400DA0E3           MOV      R0,#+4096
   \   00000158   410000EA           B        ??DataFlash_Init_10
    492          				*pagebytes = MAX_PAGE_8MBIT;
    493          				break;
    494          			case DENSITY_16MBIT:
    495          				*pages = NUM_PAGE_16MBIT;
   \                     ??DataFlash_Init_7:
   \   0000015C   400DA0E3           MOV      R0,#+4096
   \                     ??DataFlash_Init_11:
   \   00000160   B000C5E1           STRH     R0,[R5, #+0]
    496          				*pagebytes = MAX_PAGE_16MBIT;
   \   00000164   840FA0E3           MOV      R0,#+528
   \   00000168   3F0000EA           B        ??DataFlash_Init_12
    497          				break;
    498          			case DENSITY_32MBIT:
    499          				*pages = NUM_PAGE_32MBIT;
   \                     ??DataFlash_Init_8:
   \   0000016C   800DA0E3           MOV      R0,#+8192
   \   00000170   FAFFFFEA           B        ??DataFlash_Init_11
    500          				*pagebytes = MAX_PAGE_32MBIT;
    501          				break;
    502          			case DENSITY_64MBIT:			
    503          				// wait for Serial Flash to be available
    504          				do {
    505          					trys++;
   \                     ??DataFlash_Init_9:
   \   00000174   017087E2           ADD      R7,R7,#+1
    506          					status = DataFlash_Read_Status(chip);
   \   00000178   FF0004E2           AND      R0,R4,#0xFF
   \   0000017C   ........           BL       DF_SPI_X_EnableCS
   \   00000180   9600A0E3           MOV      R0,#+150
   \   00000184   ........           BL       uSDelay
   \   00000188   D700A0E3           MOV      R0,#+215
   \   0000018C   ........           BL       xferSPI
   \   00000190   0000A0E3           MOV      R0,#+0
   \   00000194   ........           BL       xferSPI
   \   00000198   0080A0E1           MOV      R8,R0
   \   0000019C   FF0004E2           AND      R0,R4,#0xFF
   \   000001A0   ........           BL       DF_SPI_X_DisableCS
    507          				} while ((0 != trys) && !(status & STATUS_READY_MASK));
   \   000001A4   FF7017E2           ANDS     R7,R7,#0xFF
   \   000001A8   3000000A           BEQ      ??DataFlash_Init_2
   \   000001AC   800018E3           TST      R8,#0x80
   \   000001B0   EFFFFF0A           BEQ      ??DataFlash_Init_9
    508          				
    509          				if (0 != trys) {			// did not time out		
    510          					unsigned char df_chip_id[5];
    511          					
    512          					// get manufacturer id to see which type of 64mbit chip we have (atmel or adesto)
    513          					DataFlash_Read_Id(chip, 5, df_chip_id);
   \                     ??DataFlash_Init_13:
   \   000001B4   FF0004E2           AND      R0,R4,#0xFF
   \   000001B8   ........           BL       DF_SPI_X_EnableCS
   \   000001BC   9600A0E3           MOV      R0,#+150
   \   000001C0   ........           BL       uSDelay
   \   000001C4   D700A0E3           MOV      R0,#+215
   \   000001C8   ........           BL       xferSPI
   \   000001CC   0000A0E3           MOV      R0,#+0
   \   000001D0   ........           BL       xferSPI
   \   000001D4   0070A0E1           MOV      R7,R0
   \   000001D8   FF0004E2           AND      R0,R4,#0xFF
   \   000001DC   ........           BL       DF_SPI_X_DisableCS
   \   000001E0   800017E3           TST      R7,#0x80
   \   000001E4   F2FFFF0A           BEQ      ??DataFlash_Init_13
   \   000001E8   FF0004E2           AND      R0,R4,#0xFF
   \   000001EC   ........           BL       DF_SPI_X_EnableCS
   \   000001F0   9600A0E3           MOV      R0,#+150
   \   000001F4   ........           BL       uSDelay
   \   000001F8   9F00A0E3           MOV      R0,#+159
   \   000001FC   ........           BL       xferSPI
   \   00000200   0000A0E3           MOV      R0,#+0
   \   00000204   ........           BL       xferSPI
   \   00000208   0000CDE5           STRB     R0,[SP, #+0]
   \   0000020C   0000A0E3           MOV      R0,#+0
   \   00000210   ........           BL       xferSPI
   \   00000214   0100CDE5           STRB     R0,[SP, #+1]
   \   00000218   0000A0E3           MOV      R0,#+0
   \   0000021C   ........           BL       xferSPI
   \   00000220   0200CDE5           STRB     R0,[SP, #+2]
   \   00000224   0000A0E3           MOV      R0,#+0
   \   00000228   ........           BL       xferSPI
   \   0000022C   0080A0E1           MOV      R8,R0
   \   00000230   0380CDE5           STRB     R8,[SP, #+3]
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   ........           BL       xferSPI
   \   0000023C   0400CDE5           STRB     R0,[SP, #+4]
   \   00000240   FF0004E2           AND      R0,R4,#0xFF
   \   00000244   ........           BL       DF_SPI_X_DisableCS
    514          				
    515          					if (0x00 == df_chip_id[3]) {		// old style 64Mbit dataflash (atmel)
   \   00000248   000058E3           CMP      R8,#+0
   \   0000024C   0300001A           BNE      ??DataFlash_Init_14
    516          						*pages = NUM_PAGE_64MBIT;
   \   00000250   800DA0E3           MOV      R0,#+8192
   \   00000254   B000C5E1           STRH     R0,[R5, #+0]
    517          						*pagebytes = MAX_PAGE_64MBIT;
   \   00000258   420EA0E3           MOV      R0,#+1056
   \   0000025C   020000EA           B        ??DataFlash_Init_12
    518          					}
    519          					else {		// new style 64Mbit dataflash (adesto)
    520          						*pages = NUM_PAGE_64EMBIT;
   \                     ??DataFlash_Init_14:
   \   00000260   800CA0E3           MOV      R0,#+32768
   \                     ??DataFlash_Init_10:
   \   00000264   B000C5E1           STRH     R0,[R5, #+0]
    521          						*pagebytes = MAX_PAGE_64EMBIT;
   \   00000268   420FA0E3           MOV      R0,#+264
   \                     ??DataFlash_Init_12:
   \   0000026C   B000C6E1           STRH     R0,[R6, #+0]
    522          					}
    523          				} // if
    524          				break;
    525          			default:
    526          				break;
    527          		} // switch
    528          	} // if
    529          }
   \                     ??DataFlash_Init_2:
   \   00000270   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000274   F081BDE8           POP      {R4-R8,PC}       ;; return
    530          

   \                                 In section .text, align 4, keep-with-next
    531          void DataflashTest(int whichtest, int whichchip) {
   \                     DataflashTest:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    532          
    533          #define PAGESIZE	unsavedSysData.dataflash[whichchip].bytesPerPage
    534          #define NUMPAGES	unsavedSysData.dataflash[whichchip].numPages
    535          	
    536          	u16 pagenum = 0;
    537          	int i;
    538          	BOOL flashfail = FALSE;
    539          	char flashpage[MAX_PAGE_64MBIT];
    540          
    541          	// initialize
    542          	PRINTPC0( "Dataflash Test");
   \   00000004   ........           LDR      R4,??DataTable14
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   D100D4E1           LDRSB    R0,[R4, #+1]
   \   00000010   ........           LDR      R2,??DataTable14_1
   \   00000014   1810A0E3           MOV      R1,#+24
   \   00000018   802105E1           SMLABB   R5,R0,R1,R2
   \   0000001C   ........           ADR      R6,??DataTable13  ;; 0x25, 0x73, 0x00, 0x00
   \   00000020   100095E5           LDR      R0,[R5, #+16]
   \   00000024   42DE4DE2           SUB      SP,SP,#+1056
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   ............       ADRL     R2,`?<Constant "Dataflash Test">`
   \              ....        
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   070080E2           ADD      R0,R0,#+7
   \   0000003C   ........           BL       sprintf
   \   00000040   100095E5           LDR      R0,[R5, #+16]
   \   00000044   070080E2           ADD      R0,R0,#+7
   \   00000048   ........           BL       strlen
   \   0000004C   D040D4E1           LDRSB    R4,[R4, #+0]
   \   00000050   013080E2           ADD      R3,R0,#+1
   \   00000054   0338A0E1           LSL      R3,R3,#+16
   \   00000058   2338A0E1           LSR      R3,R3,#+16
   \   0000005C   7320A0E3           MOV      R2,#+115
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   FF0004E2           AND      R0,R4,#0xFF
   \   00000068   ........           BL       SendMessage
    543          	
    544          	// initialize page to write
    545          	for (i=0; i < PAGESIZE; i++) flashpage[i] = i % 256;
   \   0000006C   ........           LDR      R1,??DataTable14_2
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   079181E0           ADD      R9,R1,R7, LSL #+2
   \   00000078   B218D9E1           LDRH     R1,[R9, #+130]
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   010051E3           CMP      R1,#+1
   \   00000084   070000BA           BLT      ??DataflashTest_0
   \                     ??DataflashTest_1:
   \   00000088   C323A0E1           ASR      R2,R3,#+7
   \   0000008C   222C83E0           ADD      R2,R3,R2, LSR #+24
   \   00000090   4224A0E1           ASR      R2,R2,#+8
   \   00000094   022443E0           SUB      R2,R3,R2, LSL #+8
   \   00000098   013083E2           ADD      R3,R3,#+1
   \   0000009C   0120C0E4           STRB     R2,[R0], #+1
   \   000000A0   010053E1           CMP      R3,R1
   \   000000A4   F7FFFFBA           BLT      ??DataflashTest_1
    546          
    547          	do {
    548          		// write buffer to flash
    549          		DataFlash_Page_Write_Erase(whichchip, 0, PAGESIZE, flashpage, pagenum);
   \                     ??DataflashTest_0:
   \   000000A8   B2A8D9E1           LDRH     R10,[R9, #+130]
   \                     ??DataflashTest_2:
   \   000000AC   FF0007E2           AND      R0,R7,#0xFF
   \   000000B0   ........           BL       DF_SPI_X_EnableCS
   \   000000B4   9600A0E3           MOV      R0,#+150
   \   000000B8   ........           BL       uSDelay
   \   000000BC   D700A0E3           MOV      R0,#+215
   \   000000C0   ........           BL       xferSPI
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   ........           BL       xferSPI
   \   000000CC   00B0A0E1           MOV      R11,R0
   \   000000D0   FF0007E2           AND      R0,R7,#0xFF
   \   000000D4   ........           BL       DF_SPI_X_DisableCS
   \   000000D8   80001BE3           TST      R11,#0x80
   \   000000DC   F2FFFF0A           BEQ      ??DataflashTest_2
   \   000000E0   FF0007E2           AND      R0,R7,#0xFF
   \   000000E4   ........           BL       DF_SPI_X_EnableCS
   \   000000E8   9600A0E3           MOV      R0,#+150
   \   000000EC   ........           BL       uSDelay
   \   000000F0   8700A0E3           MOV      R0,#+135
   \   000000F4   ........           BL       xferSPI
   \   000000F8   0000A0E3           MOV      R0,#+0
   \   000000FC   ........           BL       xferSPI
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   ........           BL       xferSPI
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   ........           BL       xferSPI
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   01005AE3           CMP      R10,#+1
   \   00000118   0D0000BA           BLT      ??DataflashTest_3
   \   0000011C   01001AE3           TST      R10,#0x1
   \   00000120   0200000A           BEQ      ??DataflashTest_4
   \   00000124   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000128   ........           BL       xferSPI
   \   0000012C   0100A0E3           MOV      R0,#+1
   \                     ??DataflashTest_4:
   \   00000130   AAA0B0E1           LSRS     R10,R10,#+1
   \   00000134   0600000A           BEQ      ??DataflashTest_3
   \   00000138   0DB080E0           ADD      R11,R0,SP
   \                     ??DataflashTest_5:
   \   0000013C   0100DBE4           LDRB     R0,[R11], #+1
   \   00000140   ........           BL       xferSPI
   \   00000144   0100DBE4           LDRB     R0,[R11], #+1
   \   00000148   ........           BL       xferSPI
   \   0000014C   01A05AE2           SUBS     R10,R10,#+1
   \   00000150   F9FFFF1A           BNE      ??DataflashTest_5
   \                     ??DataflashTest_3:
   \   00000154   FF0007E2           AND      R0,R7,#0xFF
   \   00000158   ........           BL       DF_SPI_X_DisableCS
   \   0000015C   0828A0E1           LSL      R2,R8,#+16
   \   00000160   2228A0E1           LSR      R2,R2,#+16
   \   00000164   0010A0E3           MOV      R1,#+0
   \   00000168   0700A0E1           MOV      R0,R7
   \   0000016C   ........           BL       DataFlash_Buffer_to_Page_Write_Erase
    550          
    551          		// read back and verify
    552          		DataFlash_Page_Read(whichchip, PAGESIZE, flashpage, pagenum);
   \   00000170   0838A0E1           LSL      R3,R8,#+16
   \   00000174   2338A0E1           LSR      R3,R3,#+16
   \   00000178   0D20A0E1           MOV      R2,SP
   \   0000017C   B218D9E1           LDRH     R1,[R9, #+130]
   \   00000180   0700A0E1           MOV      R0,R7
   \   00000184   ........           BL       DataFlash_Page_Read
    553          
    554          		// initialize page to write
    555          		for (i=0; i<PAGESIZE; i++) {
   \   00000188   0030A0E3           MOV      R3,#+0
   \   0000018C   0D00A0E1           MOV      R0,SP
   \   00000190   000000EA           B        ??DataflashTest_6
   \                     ??DataflashTest_7:
   \   00000194   013083E2           ADD      R3,R3,#+1
   \                     ??DataflashTest_6:
   \   00000198   B218D9E1           LDRH     R1,[R9, #+130]
   \   0000019C   010053E1           CMP      R3,R1
   \   000001A0   170000AA           BGE      ??DataflashTest_8
    556          			if (flashpage[i] != (i % 256)) {
   \   000001A4   C323A0E1           ASR      R2,R3,#+7
   \   000001A8   0110D0E4           LDRB     R1,[R0], #+1
   \   000001AC   222C83E0           ADD      R2,R3,R2, LSR #+24
   \   000001B0   4224A0E1           ASR      R2,R2,#+8
   \   000001B4   022443E0           SUB      R2,R3,R2, LSL #+8
   \   000001B8   020051E1           CMP      R1,R2
   \   000001BC   F4FFFF0A           BEQ      ??DataflashTest_7
    557          				flashfail = TRUE;
    558          				break;
    559          			} // if
    560          		} // for
    561          
    562          		if (flashfail) {
    563          			PRINTPC2("** Flash FAILED **, page %d, byte%d", pagenum, i);
   \   000001C0   100095E5           LDR      R0,[R5, #+16]
   \   000001C4   0828A0E1           LSL      R2,R8,#+16
   \   000001C8   2228A0E1           LSR      R2,R2,#+16
   \   000001CC   ........           ADR      R1,`?<Constant "** Flash FAILED **, p...">`
   \   000001D0   070080E2           ADD      R0,R0,#+7
   \   000001D4   ........           BL       sprintf
   \   000001D8   100095E5           LDR      R0,[R5, #+16]
   \   000001DC   070080E2           ADD      R0,R0,#+7
   \   000001E0   ........           BL       strlen
   \   000001E4   013080E2           ADD      R3,R0,#+1
   \   000001E8   0338A0E1           LSL      R3,R3,#+16
   \   000001EC   2338A0E1           LSR      R3,R3,#+16
   \   000001F0   7320A0E3           MOV      R2,#+115
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   FF0004E2           AND      R0,R4,#0xFF
   \   000001FC   ........           BL       SendMessage
    564          			break;
   \   00000200   4A0000EA           B        ??DataflashTest_9
    565          		} // if
    566          		
    567          		mSDelay(TEXTDELAY);
   \                     ??DataflashTest_8:
   \   00000204   9600A0E3           MOV      R0,#+150
   \   00000208   ........           BL       mSDelay
    568          		PRINTPC1("Page %d ok", pagenum);
   \   0000020C   100095E5           LDR      R0,[R5, #+16]
   \   00000210   0828A0E1           LSL      R2,R8,#+16
   \   00000214   2228A0E1           LSR      R2,R2,#+16
   \   00000218   ........           ADR      R1,`?<Constant "Page %d ok">`
   \   0000021C   070080E2           ADD      R0,R0,#+7
   \   00000220   ........           BL       sprintf
   \   00000224   100095E5           LDR      R0,[R5, #+16]
   \   00000228   070080E2           ADD      R0,R0,#+7
   \   0000022C   ........           BL       strlen
   \   00000230   013080E2           ADD      R3,R0,#+1
   \   00000234   0338A0E1           LSL      R3,R3,#+16
   \   00000238   2338A0E1           LSR      R3,R3,#+16
   \   0000023C   7320A0E3           MOV      R2,#+115
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   FF0004E2           AND      R0,R4,#0xFF
   \   00000248   ........           BL       SendMessage
    569          
    570          		// erase the page
    571          		DataFlash_Erase_Page(whichchip, pagenum);
   \                     ??DataflashTest_10:
   \   0000024C   FF0007E2           AND      R0,R7,#0xFF
   \   00000250   ........           BL       DF_SPI_X_EnableCS
   \   00000254   9600A0E3           MOV      R0,#+150
   \   00000258   ........           BL       uSDelay
   \   0000025C   D700A0E3           MOV      R0,#+215
   \   00000260   ........           BL       xferSPI
   \   00000264   0000A0E3           MOV      R0,#+0
   \   00000268   ........           BL       xferSPI
   \   0000026C   00A0A0E1           MOV      R10,R0
   \   00000270   FF0007E2           AND      R0,R7,#0xFF
   \   00000274   ........           BL       DF_SPI_X_DisableCS
   \   00000278   80001AE3           TST      R10,#0x80
   \   0000027C   F2FFFF0A           BEQ      ??DataflashTest_10
   \   00000280   FF0007E2           AND      R0,R7,#0xFF
   \   00000284   ........           BL       DF_SPI_X_EnableCS
   \   00000288   9600A0E3           MOV      R0,#+150
   \   0000028C   ........           BL       uSDelay
   \   00000290   8100A0E3           MOV      R0,#+129
   \   00000294   ........           BL       xferSPI
   \   00000298   B208D9E1           LDRH     R0,[R9, #+130]
   \   0000029C   420E50E3           CMP      R0,#+1056
   \   000002A0   0B00000A           BEQ      ??DataflashTest_11
   \   000002A4   420F50E3           CMP      R0,#+264
   \   000002A8   0400000A           BEQ      ??DataflashTest_12
   \   000002AC   2803A0E1           LSR      R0,R8,#+6
   \   000002B0   FF0000E2           AND      R0,R0,#0xFF
   \   000002B4   ........           BL       xferSPI
   \   000002B8   0801A0E1           LSL      R0,R8,#+2
   \   000002BC   080000EA           B        ??DataflashTest_13
   \                     ??DataflashTest_12:
   \   000002C0   A803A0E1           LSR      R0,R8,#+7
   \   000002C4   FF0000E2           AND      R0,R0,#0xFF
   \   000002C8   ........           BL       xferSPI
   \   000002CC   8800A0E1           LSL      R0,R8,#+1
   \   000002D0   030000EA           B        ??DataflashTest_13
   \                     ??DataflashTest_11:
   \   000002D4   A802A0E1           LSR      R0,R8,#+5
   \   000002D8   FF0000E2           AND      R0,R0,#0xFF
   \   000002DC   ........           BL       xferSPI
   \   000002E0   8801A0E1           LSL      R0,R8,#+3
   \                     ??DataflashTest_13:
   \   000002E4   FF0000E2           AND      R0,R0,#0xFF
   \   000002E8   ........           BL       xferSPI
   \   000002EC   0000A0E3           MOV      R0,#+0
   \   000002F0   ........           BL       xferSPI
   \   000002F4   FF0007E2           AND      R0,R7,#0xFF
   \   000002F8   ........           BL       DF_SPI_X_DisableCS
    572          
    573          		// at the end yet?
    574          		if (pagenum >= NUMPAGES)
   \   000002FC   B008D9E1           LDRH     R0,[R9, #+128]
   \   00000300   0888A0E1           LSL      R8,R8,#+16
   \   00000304   2888A0E1           LSR      R8,R8,#+16
   \   00000308   000058E1           CMP      R8,R0
    575          			pagenum = 0;
    576          		else
    577          			// go to next page
    578          			pagenum++;
    579          
    580          	} while (whichtest == DATAFLASHTEST || pagenum <= 4);
   \   0000030C   20049DE5           LDR      R0,[SP, #+1056]
   \   00000310   0080A023           MOVCS    R8,#+0
   \   00000314   01808832           ADDCC    R8,R8,#+1
   \   00000318   340050E3           CMP      R0,#+52
   \   0000031C   61FFFF0A           BEQ      ??DataflashTest_0
   \   00000320   0888A0E1           LSL      R8,R8,#+16
   \   00000324   2888A0E1           LSR      R8,R8,#+16
   \   00000328   050058E3           CMP      R8,#+5
   \   0000032C   5DFFFF3A           BCC      ??DataflashTest_0
    581          
    582          	mSDelay((TEXTDELAY));
   \                     ??DataflashTest_9:
   \   00000330   9600A0E3           MOV      R0,#+150
   \   00000334   ........           BL       mSDelay
    583          	PRINTPC0( "Test Passed.");
   \   00000338   100095E5           LDR      R0,[R5, #+16]
   \   0000033C   ........           ADR      R2,`?<Constant "Test Passed.">`
   \   00000340   0610A0E1           MOV      R1,R6
   \   00000344   070080E2           ADD      R0,R0,#+7
   \   00000348   ........           BL       sprintf
   \   0000034C   100095E5           LDR      R0,[R5, #+16]
   \   00000350   070080E2           ADD      R0,R0,#+7
   \   00000354   ........           BL       strlen
   \   00000358   013080E2           ADD      R3,R0,#+1
   \   0000035C   0338A0E1           LSL      R3,R3,#+16
   \   00000360   2338A0E1           LSR      R3,R3,#+16
   \   00000364   7320A0E3           MOV      R2,#+115
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   FF0004E2           AND      R0,R4,#0xFF
   \   00000370   ........           BL       SendMessage
    584          
    585          #undef PAGESIZE
    586          #undef NUMPAGES
    587          
    588          } // DataflashTest
   \   00000374   24D08DE2           ADD      SP,SP,#+36
   \   00000378   40DE8DE2           ADD      SP,SP,#+1024
   \   0000037C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    589          
    590          /*
    591          These functions read and write the user personalization information and the serial number and build dates into the dataflash
    592          
    593          	If 1056 page size, writes at page 61
    594          	If 1024 page size, writes at page 63
    595          	If 264 page size, writes at page 247
    596          */
    597          	

   \                                 In section .text, align 4, keep-with-next
    598          void ReadUserData() {
   \                     ReadUserData:
   \   00000000   10402DE9           PUSH     {R4,LR}
    599          	u16 pagenum;
    600          
    601          	pagenum = (CODESTART / unsavedSysData.dataflash[0].bytesPerPage) - 1;
    602          
    603          	DataFlash_Page_Read(0, sizeof(UNIT_INFO_STRUCTURE), (char *) &(unsavedSysData.unitInfo), pagenum);
   \   00000004   ........           LDR      R4,??DataTable14_2
   \   00000008   400BA0E3           MOV      R0,#+65536
   \   0000000C   B218D4E1           LDRH     R1,[R4, #+130]
   \   00000010   ........           BL       __aeabi_idiv
   \   00000014   082084E2           ADD      R2,R4,#+8
   \   00000018   013040E2           SUB      R3,R0,#+1
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   0338A0E1           LSL      R3,R3,#+16
   \   00000024   2338A0E1           LSR      R3,R3,#+16
   \   00000028   7810A0E3           MOV      R1,#+120
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           B        DataFlash_Page_Read  ;; tailcall
    604          
    605          } // ReadUserData
    606          

   \                                 In section .text, align 4, keep-with-next
    607          void WriteUserData() {
   \                     WriteUserData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    608          	u16 pagenum;
    609          	
    610          	pagenum = (CODESTART / unsavedSysData.dataflash[0].bytesPerPage) - 1;
    611          	
    612          	DataFlash_Page_Write_Erase(0, GENBUFFER, sizeof(UNIT_INFO_STRUCTURE), (char *) &(unsavedSysData.unitInfo), pagenum);
   \   00000004   ........           LDR      R4,??DataTable14_2
   \   00000008   400BA0E3           MOV      R0,#+65536
   \   0000000C   B218D4E1           LDRH     R1,[R4, #+130]
   \   00000010   ........           BL       __aeabi_idiv
   \   00000014   015040E2           SUB      R5,R0,#+1
   \                     ??WriteUserData_0:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           BL       DF_SPI_X_EnableCS
   \   00000020   9600A0E3           MOV      R0,#+150
   \   00000024   ........           BL       uSDelay
   \   00000028   D700A0E3           MOV      R0,#+215
   \   0000002C   ........           BL       xferSPI
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   ........           BL       xferSPI
   \   00000038   0060A0E1           MOV      R6,R0
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           BL       DF_SPI_X_DisableCS
   \   00000044   800016E3           TST      R6,#0x80
   \   00000048   F2FFFF0A           BEQ      ??WriteUserData_0
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           BL       DF_SPI_X_EnableCS
   \   00000054   9600A0E3           MOV      R0,#+150
   \   00000058   ........           BL       uSDelay
   \   0000005C   8700A0E3           MOV      R0,#+135
   \   00000060   ........           BL       xferSPI
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   ........           BL       xferSPI
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   ........           BL       xferSPI
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   ........           BL       xferSPI
   \   0000007C   0060A0E3           MOV      R6,#+0
   \                     ??WriteUserData_1:
   \   00000080   040086E0           ADD      R0,R6,R4
   \   00000084   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000088   ........           BL       xferSPI
   \   0000008C   016086E2           ADD      R6,R6,#+1
   \   00000090   780056E3           CMP      R6,#+120
   \   00000094   F9FFFFBA           BLT      ??WriteUserData_1
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   ........           BL       DF_SPI_X_DisableCS
   \   000000A0   0528A0E1           LSL      R2,R5,#+16
   \   000000A4   7040BDE8           POP      {R4-R6,LR}
   \   000000A8   2228A0E1           LSR      R2,R2,#+16
   \   000000AC   0210A0E3           MOV      R1,#+2
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   ........           B        DataFlash_Buffer_to_Page_Write_Erase  ;; tailcall
    613          						
    614          } // WriteUserData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   25730000           DC8      0x25, 0x73, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     msgrouting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   ........           DC32     com

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25730000           DC8 37, 115, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Dataflash Test">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   44617461666C       DC8 68, 97, 116, 97, 102, 108, 97, 115, 104, 32
   \              61736820    
   \   0000000A   546573740000       DC8 84, 101, 115, 116, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "** Flash FAILED **, p...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   2A2A20466C61       DC8 42, 42, 32, 70, 108, 97, 115, 104, 32, 70
   \              73682046    
   \   0000000A   41494C454420       DC8 65, 73, 76, 69, 68, 32, 42, 42, 44, 32
   \              2A2A2C20    
   \   00000014   706167652025       DC8 112, 97, 103, 101, 32, 37, 100, 44, 32, 98
   \              642C2062    
   \   0000001E   797465256400       DC8 121, 116, 101, 37, 100, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Page %d ok">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   506167652025       DC8 80, 97, 103, 101, 32, 37, 100, 32, 111, 107
   \              64206F6B    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Test Passed.">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   546573742050       DC8 84, 101, 115, 116, 32, 80, 97, 115, 115, 101
   \              61737365    
   \   0000000A   642E00000000       DC8 100, 46, 0, 0, 0, 0

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     DataFlash_Buffer_Clear             24
     DataFlash_Buffer_Write             32
     DataFlash_Buffer_to_Page_Write     24
     DataFlash_Buffer_to_Page_Write_Erase
                                        32
     DataFlash_Erase_Block              16
     DataFlash_Erase_Page               16
     DataFlash_Erase_Range              32
     DataFlash_Init                     32
     DataFlash_Page_Erased              32
     DataFlash_Page_Read                24
     DataFlash_Page_Write               32
     DataFlash_Page_Write_Erase         32
     DataFlash_Read_Id                  24
     DataFlash_Read_Status              16
     DataflashTest                    1096
     ReadUserData                        8
     WriteUserData                      16


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     DataFlash_Page_Write_Erase              224
     DataFlash_Page_Write                    224
     DataFlash_Buffer_to_Page_Write_Erase
                                             260
     DataFlash_Buffer_to_Page_Write          220
     DataFlash_Buffer_Write                  212
     DataFlash_Buffer_Clear                  200
     DataFlash_Read_Status                    68
     DataFlash_Read_Id                       180
     DataFlash_Page_Read                     308
     DataFlash_Page_Erased                   332
     DataFlash_Erase_Block                   200
     DataFlash_Erase_Page                    200
     DataFlash_Erase_Range                   436
     DataFlash_Init                          632
     DataflashTest                           896
     ReadUserData                             52
     WriteUserData                           184
     ??DataTable11                             4
     ??DataTable13                             4
     ??DataTable14                             4
     ??DataTable14_1                           4
     ??DataTable14_2                           4
     ?<Constant "%s">                          4
     ?<Constant "Dataflash Test">             16
     ?<Constant "** Flash FAILED **, p...">   36
     ?<Constant "Page %d ok">                 12
     ?<Constant "Test Passed.">               16

 
     4 bytes in section .rodata
 4 928 bytes in section .text
 
 4 928 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
