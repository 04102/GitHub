###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\gauge.cpp                                   #
#    Command line =  C:\DUII\DUII\gauge.cpp -D DEBUG=1 -D SDRAM_TARGET=1 -D   #
#                    USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D              #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --eec++                              #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\ga #
#                    uge.lst                                                  #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\gau #
#                    ge.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\gauge.cpp
      1          /****************************************************************
      2          *							Track Systems						*
      3          -----------------------------------------------------------------
      4          File: gauge.cpp
      5          Description: The gauge object
      6          -----------------------------------------------------------------
      7          */
      8          #include "gauge.hpp"
      9          #include <math.h>
     10          #include <stdio.h>
     11          #include <string.h>
     12          #include "GeneralConfig.h"
     13          
     14          //
     15          // KMC - 9/15/12 - modified to accept input pointer to graphic to allow us to easily
     16          // alter the background of the gauge screen.  Note that positioning of the redline and
     17          // scale still depends on the image having the same proportions.
     18          //

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp Gauge::subobject Gauge(int, int, int, float, float, char *, char *, char *, Alarm *, float, float, int, int, char, GUI_HWIN, GUI_BITMAP const *)
   \                     _ZN5GaugeC2EiiiffPcS0_S0_P5AlarmffiiclPK10GUI_BITMAP:
   \   00000000   F74F2DE9           PUSH     {R0-R2,R4-R11,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   68009DE5           LDR      R0,[SP, #+104]
   \   0000000C   6C109DE5           LDR      R1,[SP, #+108]
   \   00000010   70209DE5           LDR      R2,[SP, #+112]
   \   00000014   9090DDE5           LDRB     R9,[SP, #+144]
   \   00000018   74C09DE5           LDR      R12,[SP, #+116]
   \   0000001C   78E09DE5           LDR      LR,[SP, #+120]
   \   00000020   7C409DE5           LDR      R4,[SP, #+124]
   \   00000024   80509DE5           LDR      R5,[SP, #+128]
   \   00000028   84609DE5           LDR      R6,[SP, #+132]
   \   0000002C   88709DE5           LDR      R7,[SP, #+136]
   \   00000030   8C809DE5           LDR      R8,[SP, #+140]
   \   00000034   94A09DE5           LDR      R10,[SP, #+148]
   \   00000038   98B09DE5           LDR      R11,[SP, #+152]
   \   0000003C   08208DE5           STR      R2,[SP, #+8]
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   30B08DE5           STR      R11,[SP, #+48]
   \   0000004C   2CA08DE5           STR      R10,[SP, #+44]
   \   00000050   28908DE5           STR      R9,[SP, #+40]
   \   00000054   24808DE5           STR      R8,[SP, #+36]
   \   00000058   20708DE5           STR      R7,[SP, #+32]
   \   0000005C   1C608DE5           STR      R6,[SP, #+28]
   \   00000060   18508DE5           STR      R5,[SP, #+24]
   \   00000064   14408DE5           STR      R4,[SP, #+20]
   \   00000068   10E08DE5           STR      LR,[SP, #+16]
   \   0000006C   0CC08DE5           STR      R12,[SP, #+12]
   \   00000070   40209DE5           LDR      R2,[SP, #+64]
   \   00000074   3C109DE5           LDR      R1,[SP, #+60]
   \   00000078   38009DE5           LDR      R0,[SP, #+56]
   \   0000007C   ........           BL       _ZN5GaugeC1EiiiffPcS0_S0_P5AlarmffiiclPK10GUI_BITMAP
   \   00000080   44D08DE2           ADD      SP,SP,#+68       ;; stack cleaning
   \   00000084   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
     19          Gauge::Gauge(int x, int y, int Radius, float MinValue, float MaxValue, char *Name, char *Units, char *pInputNum, Alarm *AlarmList,
     20          				 float MajorTicRange, float MinorTicRange, int Precision, int Multiplier, char showMultiplier,
     21          				 WM_HWIN _hParent, const GUI_BITMAP *_pBitmap) : ControlBase(x, y, Name, Units, AlarmList)
   \                     _ZN5GaugeC1EiiiffPcS0_S0_P5AlarmffiiclPK10GUI_BITMAP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   4C009DE5           LDR      R0,[SP, #+76]
   \   00000010   40909DE5           LDR      R9,[SP, #+64]
     22          {
   \   00000014   04008DE5           STR      R0,[SP, #+4]
   \   00000018   44009DE5           LDR      R0,[SP, #+68]
   \   0000001C   03A0A0E1           MOV      R10,R3
   \   00000020   00008DE5           STR      R0,[SP, #+0]
   \   00000024   0140A0E1           MOV      R4,R1
   \   00000028   0250A0E1           MOV      R5,R2
   \   0000002C   38809DE5           LDR      R8,[SP, #+56]
   \   00000030   3C709DE5           LDR      R7,[SP, #+60]
   \   00000034   68B09DE5           LDR      R11,[SP, #+104]
   \   00000038   0930A0E1           MOV      R3,R9
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       _ZN11ControlBaseC2EiiPcS0_P5Alarm
     23          	//float radians;
     24          
     25          	if ((_hDlg = WM_CreateWindowAsChild(x, y, Radius * 2, Radius * 2, _hParent, 0, NULL, 0)) <= 0)
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   0C008DE5           STR      R0,[SP, #+12]
   \   0000004C   08008DE5           STR      R0,[SP, #+8]
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   64009DE5           LDR      R0,[SP, #+100]
   \   00000058   8A20A0E1           LSL      R2,R10,#+1
   \   0000005C   00008DE5           STR      R0,[SP, #+0]
   \   00000060   0230A0E1           MOV      R3,R2
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       WM_CreateWindowAsChild
   \   00000070   F80086E5           STR      R0,[R6, #+248]
   \   00000074   010050E3           CMP      R0,#+1
   \   00000078   000000AA           BGE      ??Gauge_0
     26          		SystemError();
   \   0000007C   ........           BL       SystemError
     27          
     28          //	WM_EnableMemdev(_hDlg);
     29          
     30          	xLoc = x;
   \                     ??Gauge_0:
   \   00000080   704086E5           STR      R4,[R6, #+112]
     31          	yLoc = y;
   \   00000084   745086E5           STR      R5,[R6, #+116]
     32          	pBitmap = _pBitmap;
   \   00000088   B8B086E5           STR      R11,[R6, #+184]
     33          	//bRedlineEnabled = RedlineEnabled;
     34          	//iRedline = RedlineValue;
     35          	//bYellowLineEnabled = YellowLineEnabled;
     36          	//iYellowLine = YellowLineValue;
     37          
     38          	iRadius = Radius;
   \   0000008C   80A086E5           STR      R10,[R6, #+128]
     39          	iXCenter = xLoc + Radius;
   \   00000090   700096E5           LDR      R0,[R6, #+112]
   \   00000094   00008AE0           ADD      R0,R10,R0
   \   00000098   780086E5           STR      R0,[R6, #+120]
     40          	iYCenter = yLoc + Radius;
   \   0000009C   740096E5           LDR      R0,[R6, #+116]
   \   000000A0   00008AE0           ADD      R0,R10,R0
   \   000000A4   7C0086E5           STR      R0,[R6, #+124]
     41          
     42          	// round the min and max values to the next whole integer
     43          	if (MinValue < MaxValue)
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           BL       __aeabi_f2d
   \   000000B0   0040A0E1           MOV      R4,R0
   \   000000B4   0150A0E1           MOV      R5,R1
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   ........           BL       __aeabi_f2d
   \   000000C0   0020A0E1           MOV      R2,R0
   \   000000C4   0130A0E1           MOV      R3,R1
   \   000000C8   0800A0E1           MOV      R0,R8
   \   000000CC   0710A0E1           MOV      R1,R7
   \   000000D0   ........           BL       __aeabi_cfcmple
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   0800002A           BCS      ??Gauge_1
     44          	{
     45          		iMin = (int)(MinValue - 0.5);
   \   000000DC   B014A0E3           MOV      R1,#-1342177280
   \   000000E0   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000000E4   ........           BL       __aeabi_dadd
   \   000000E8   ........           BL       __aeabi_d2iz
   \   000000EC   ........           BL       __aeabi_i2f
   \   000000F0   0070A0E1           MOV      R7,R0
     46          		iMax = (int)(MaxValue + 0.5);
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   C015A0E3           MOV      R1,#+805306368
   \   000000FC   070000EA           B        ??Gauge_2
     47          	}
     48          	else
     49          	{
     50          		iMin = (int)(MinValue + 0.5);
   \                     ??Gauge_1:
   \   00000100   C015A0E3           MOV      R1,#+805306368
   \   00000104   FE1681E3           ORR      R1,R1,#0xFE00000
   \   00000108   ........           BL       __aeabi_dadd
   \   0000010C   ........           BL       __aeabi_d2iz
   \   00000110   ........           BL       __aeabi_i2f
   \   00000114   0070A0E1           MOV      R7,R0
     51          		iMax = (int)(MaxValue - 0.5);
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   B014A0E3           MOV      R1,#-1342177280
   \                     ??Gauge_2:
   \   00000120   FE1681E3           ORR      R1,R1,#0xFE00000
   \   00000124   0420A0E1           MOV      R2,R4
   \   00000128   0530A0E1           MOV      R3,R5
   \   0000012C   ........           BL       __aeabi_dadd
   \   00000130   ........           BL       __aeabi_d2iz
   \   00000134   ........           BL       __aeabi_i2f
   \   00000138   487086E5           STR      R7,[R6, #+72]
   \   0000013C   440086E5           STR      R0,[R6, #+68]
     52          	}
     53          
     54          	iMultiplier = Multiplier;
   \   00000140   5C009DE5           LDR      R0,[SP, #+92]
     55          	iShowMultiplier = showMultiplier;
     56          	if(iMultiplier < 1)
   \   00000144   0140A0E3           MOV      R4,#+1
   \   00000148   9C0086E5           STR      R0,[R6, #+156]
   \   0000014C   6000DDE5           LDRB     R0,[SP, #+96]
   \   00000150   A000C6E5           STRB     R0,[R6, #+160]
   \   00000154   9C0096E5           LDR      R0,[R6, #+156]
   \   00000158   010050E3           CMP      R0,#+1
     57          		iMultiplier = 1;
   \   0000015C   9C4086B5           STRLT    R4,[R6, #+156]
     58          
     59          	SetPrecision(Precision);
   \   00000160   58009DE5           LDR      R0,[SP, #+88]
   \   00000164   940086E5           STR      R0,[R6, #+148]
     60          	//iPrecision = 2;
     61          
     62          	iMajorTics = MajorTicRange;
   \   00000168   50009DE5           LDR      R0,[SP, #+80]
   \   0000016C   680086E5           STR      R0,[R6, #+104]
     63          	iMinorTics = MinorTicRange;
   \   00000170   54009DE5           LDR      R0,[SP, #+84]
   \   00000174   6C0086E5           STR      R0,[R6, #+108]
     64          
     65          	sName = Name;
   \   00000178   549086E5           STR      R9,[R6, #+84]
     66          	sUnits = Units;
   \   0000017C   44009DE5           LDR      R0,[SP, #+68]
   \   00000180   580086E5           STR      R0,[R6, #+88]
     67          	sInputNum = pInputNum;
   \   00000184   48009DE5           LDR      R0,[SP, #+72]
   \   00000188   600086E5           STR      R0,[R6, #+96]
     68          
     69          	iStartingAngle = GAUGE_START_ANGLE;
   \   0000018C   2D00A0E3           MOV      R0,#+45
   \   00000190   840086E5           STR      R0,[R6, #+132]
     70          	iEndAngle = GAUGE_END_ANGLE;
   \   00000194   E10080E2           ADD      R0,R0,#+225
   \   00000198   880086E5           STR      R0,[R6, #+136]
     71          
     72          	mMemSpace = -1;
   \   0000019C   000064E2           RSB      R0,R4,#+0
   \   000001A0   4C0086E5           STR      R0,[R6, #+76]
     73          
     74          	dZeroRad = DEGREES_TO_RADIANS(iEndAngle);
   \   000001A4   ........           LDR      R0,??DataTable7_9  ;; 0x4096cbe4
   \   000001A8   B00086E5           STR      R0,[R6, #+176]
     75          	//radians = (float)DEGREES_TO_RADIANS(iEndAngle - iStartingAngle);
     76          	//dValuePerRad =  (float)(iMax - iMin) / radians;
     77          	dValuePerRad = (float)(iMax - iMin) / (float)(iEndAngle - iStartingAngle);
   \   000001AC   440096E5           LDR      R0,[R6, #+68]
   \   000001B0   481096E5           LDR      R1,[R6, #+72]
   \   000001B4   ........           BL       __aeabi_fsub
   \   000001B8   4314A0E3           MOV      R1,#+1124073472
   \   000001BC   611881E3           ORR      R1,R1,#0x610000
   \   000001C0   ........           BL       __aeabi_fdiv
   \   000001C4   AC0086E5           STR      R0,[R6, #+172]
     78          
     79          	Value = iMin;
   \   000001C8   480096E5           LDR      R0,[R6, #+72]
   \   000001CC   B40086E5           STR      R0,[R6, #+180]
     80          
     81          	bShowDigital = true;
   \   000001D0   A140C6E5           STRB     R4,[R6, #+161]
     82          
     83          	CreateGaugeBackground();
   \   000001D4   0600A0E1           MOV      R0,R6
   \   000001D8   ........           BL       _ZN5Gauge21CreateGaugeBackgroundEv
     84          
     85          	// create the needle memory area
     86          	memGauge = GUI_MEMDEV_Create(xLoc, yLoc, iRadius * 2, iRadius * 2);
   \   000001DC   800096E5           LDR      R0,[R6, #+128]
   \   000001E0   741096E5           LDR      R1,[R6, #+116]
   \   000001E4   8030A0E1           LSL      R3,R0,#+1
   \   000001E8   0320A0E1           MOV      R2,R3
   \   000001EC   700096E5           LDR      R0,[R6, #+112]
   \   000001F0   ........           BL       GUI_MEMDEV_Create
   \   000001F4   D40086E5           STR      R0,[R6, #+212]
     87          }
   \   000001F8   0600A0E1           MOV      R0,R6
   \   000001FC   14D08DE2           ADD      SP,SP,#+20
   \   00000200   F08FBDE8           POP      {R4-R11,PC}      ;; return
     88          
     89          /****************************************************************
     90          *
     91          *       ~Gauge()
     92          *		The Destructor
     93          *
     94          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
     95          Gauge::~Gauge()
     96          {
   \                     _ZN5GaugeD1Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     97          	GUI_MEMDEV_Delete(mMemSpace);
   \   00000008   4C0094E5           LDR      R0,[R4, #+76]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
     98          	GUI_MEMDEV_Delete(memGauge);
   \   00000010   D40094E5           LDR      R0,[R4, #+212]
   \   00000014   ........           BL       GUI_MEMDEV_Delete
     99          }
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    100          
    101          /****************************************************************
    102          *
    103          *       CreateGaugeBackground()
    104          *		Draw the gauge except for the needle into a memory space
    105          *
    106          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    107          void Gauge::CreateGaugeBackground()
    108          {
   \                     _ZN5Gauge21CreateGaugeBackgroundEv:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    109          	int i, TicCount, value, MinorTicCount, TicLength, iTemp, radius;
    110          	int x1, y1, x2, y2;
    111          	int txt_length, txt_height, /* iRedlineWidth, */ iNeedleWidth;
    112          	float dCos, dSin, angle, radians, dTemp, Mag, dValuePerDeg, range;
    113          	char str[20], strPrecision[20];
    114          	GUI_COLOR OldColor;
    115          	//GUI_RECT rect;
    116          
    117          	if(mMemSpace > 0)
   \   00000008   4C0094E5           LDR      R0,[R4, #+76]
   \   0000000C   5CD04DE2           SUB      SP,SP,#+92
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   000000BA           BLT      ??CreateGaugeBackground_0
    118          		GUI_MEMDEV_Delete(mMemSpace);
   \   00000018   ........           BL       GUI_MEMDEV_Delete
    119          
    120          	mMemSpace = GUI_MEMDEV_Create(xLoc, yLoc, iRadius * 2, iRadius * 2);
   \                     ??CreateGaugeBackground_0:
   \   0000001C   800094E5           LDR      R0,[R4, #+128]
   \   00000020   741094E5           LDR      R1,[R4, #+116]
   \   00000024   8030A0E1           LSL      R3,R0,#+1
   \   00000028   0320A0E1           MOV      R2,R3
   \   0000002C   700094E5           LDR      R0,[R4, #+112]
   \   00000030   ........           BL       GUI_MEMDEV_Create
   \   00000034   4C0084E5           STR      R0,[R4, #+76]
    121          	GUI_MEMDEV_Select(mMemSpace);
   \   00000038   ........           BL       GUI_MEMDEV_Select
    122          
    123          	//GUI_SetTextMode(GUI_TEXTMODE_TRANS | GUI_TM_XOR);
    124          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   ........           BL       GUI_SetTextMode
   \   00000044   FF04E0E3           MVN      R0,#-16777216
    125          
    126          	GUI_SetColor(GUI_WHITE);
   \   00000048   ........           BL       GUI_SetColor
    127          	GUI_SetPenSize(1);
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       GUI_SetPenSize
    128          
    129          	radius = (int)(iRadius - iRadius * 0.15);
   \   00000054   805094E5           LDR      R5,[R4, #+128]
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           BL       __aeabi_i2d
   \   00000060   0060A0E1           MOV      R6,R0
   \   00000064   0170A0E1           MOV      R7,R1
   \   00000068   CE0F8FE2           ADR      R0,??CreateGaugeBackground_1
   \   0000006C   030090E8           LDM      R0,{R0,R1}
   \   00000070   0620A0E1           MOV      R2,R6
   \   00000074   0730A0E1           MOV      R3,R7
   \   00000078   ........           BL       __aeabi_dmul
   \   0000007C   0020A0E1           MOV      R2,R0
   \   00000080   0130A0E1           MOV      R3,R1
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   ........           BL       __aeabi_dsub
   \   00000090   ........           BL       __aeabi_d2iz
   \   00000094   0C008DE5           STR      R0,[SP, #+12]
    130          	Mag = 1000.0;
    131          	iTemp = (int)((Mag / 1000) * iRadius);
    132          	x1 = iXCenter - iTemp;
    133          	iTemp = (int)((Mag / 1000) * iRadius);
    134          	y1 = iYCenter - iTemp;
    135          	if (pBitmap)
   \   00000098   B86094E5           LDR      R6,[R4, #+184]
   \   0000009C   000056E3           CMP      R6,#+0
   \   000000A0   0E00000A           BEQ      ??CreateGaugeBackground_2
    136          		GUI_DrawBitmapEx(pBitmap, x1, y1, 0, 0, (int)Mag, (int)Mag);
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       __aeabi_i2f
   \   000000AC   ........           BL       __aeabi_f2iz
   \   000000B0   FA1FA0E3           MOV      R1,#+1000
   \   000000B4   08108DE5           STR      R1,[SP, #+8]
   \   000000B8   04108DE5           STR      R1,[SP, #+4]
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   00108DE5           STR      R1,[SP, #+0]
   \   000000C4   7C1094E5           LDR      R1,[R4, #+124]
   \   000000C8   0030A0E3           MOV      R3,#+0
   \   000000CC   002041E0           SUB      R2,R1,R0
   \   000000D0   781094E5           LDR      R1,[R4, #+120]
   \   000000D4   001041E0           SUB      R1,R1,R0
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   ........           BL       GUI_DrawBitmapEx
    137          
    138          	dValuePerDeg = ((float)iEndAngle - (float)iStartingAngle) / ((float)iMax - (float)iMin);
   \                     ??CreateGaugeBackground_2:
   \   000000E0   880094E5           LDR      R0,[R4, #+136]
   \   000000E4   ........           BL       __aeabi_i2f
   \   000000E8   0050A0E1           MOV      R5,R0
   \   000000EC   840094E5           LDR      R0,[R4, #+132]
   \   000000F0   ........           BL       __aeabi_i2f
   \   000000F4   0010A0E1           MOV      R1,R0
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   ........           BL       __aeabi_fsub
   \   00000100   0050A0E1           MOV      R5,R0
   \   00000104   440094E5           LDR      R0,[R4, #+68]
   \   00000108   481094E5           LDR      R1,[R4, #+72]
   \   0000010C   ........           BL       __aeabi_fsub
   \   00000110   0010A0E1           MOV      R1,R0
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   ........           BL       __aeabi_fdiv
   \   0000011C   10008DE5           STR      R0,[SP, #+16]
    139          
    140          	// check for alarm conditions
    141          	if(AlarmList != NULL)
   \   00000120   405094E5           LDR      R5,[R4, #+64]
   \   00000124   000055E3           CMP      R5,#+0
   \   00000128   4400000A           BEQ      ??CreateGaugeBackground_3
    142          	{
    143          		Alarm *pAlarm;
    144          		pAlarm = AlarmList;
    145          		int iAlarmStartAngle, iAlarmEndAngle, temp, iArcRadius;
    146          		float kmcMag;
    147          
    148          		OldColor = GUI_GetColor();
   \   0000012C   ........           BL       GUI_GetColor
   \   00000130   0060A0E1           MOV      R6,R0
    149          
    150          		GUI_SetPenSize(GAUGE_REDLINE_WIDTH);
   \   00000134   0A00A0E3           MOV      R0,#+10
   \   00000138   ........           BL       GUI_SetPenSize
   \   0000013C   4274A0E3           MOV      R7,#+1107296256
   \   00000140   C27887E3           ORR      R7,R7,#0xC20000
    151          		while(pAlarm != NULL)
    152          		{
    153          			if(pAlarm->Enabled == true)
   \                     ??CreateGaugeBackground_4:
   \   00000144   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   3400000A           BEQ      ??CreateGaugeBackground_5
    154          			{
    155          				iAlarmStartAngle = iEndAngle - (int)((pAlarm->MaxValue - iMin) * dValuePerDeg);
   \   00000150   48A094E5           LDR      R10,[R4, #+72]
   \   00000154   889094E5           LDR      R9,[R4, #+136]
   \   00000158   080095E5           LDR      R0,[R5, #+8]
   \   0000015C   0A10A0E1           MOV      R1,R10
   \   00000160   ........           BL       __aeabi_fsub
   \   00000164   10109DE5           LDR      R1,[SP, #+16]
   \   00000168   ........           BL       __aeabi_fmul
   \   0000016C   ........           BL       __aeabi_f2iz
   \   00000170   008049E0           SUB      R8,R9,R0
    156          				iAlarmEndAngle = iEndAngle - (int)((pAlarm->MinValue - iMin) * dValuePerDeg);
   \   00000174   040095E5           LDR      R0,[R5, #+4]
   \   00000178   0A10A0E1           MOV      R1,R10
   \   0000017C   ........           BL       __aeabi_fsub
   \   00000180   10109DE5           LDR      R1,[SP, #+16]
   \   00000184   ........           BL       __aeabi_fmul
   \   00000188   ........           BL       __aeabi_f2iz
   \   0000018C   009049E0           SUB      R9,R9,R0
    157          				if(iAlarmStartAngle > iAlarmEndAngle)
   \   00000190   080059E1           CMP      R9,R8
    158          				{
    159          					// GUI_DrawArc won't draw an arc if the start value is greater than the end value for some reason
    160          					// we need to switch them so it'll work
    161          					temp = iAlarmStartAngle;
   \   00000194   0800A0B1           MOVLT    R0,R8
    162          					iAlarmStartAngle = iAlarmEndAngle;
   \   00000198   0980A0B1           MOVLT    R8,R9
    163          					iAlarmEndAngle = temp;
   \   0000019C   0090A0B1           MOVLT    R9,R0
    164          				}
    165          
    166          	// KMC - REFERENCE image - the image from which measurements have been taken - is 272 pixels on a side.
    167          	// Mag is supposed to refer to the magnification of the image BUT we use two different images!  Therefore
    168          	// these fixed offsets should be scaled based on the ratio of the actual image size to the reference in
    169          	// addition to the scaling of this image relative to it's own native image
    170          				kmcMag = (float)(iRadius * 2) / 272.0;
   \   000001A0   800094E5           LDR      R0,[R4, #+128]
   \   000001A4   8000A0E1           LSL      R0,R0,#+1
   \   000001A8   ........           BL       __aeabi_i2f
   \   000001AC   C61887E2           ADD      R1,R7,#+12976128
   \   000001B0   ........           BL       __aeabi_fdiv
   \   000001B4   00A0A0E1           MOV      R10,R0
    171          
    172          				// draw the dark part of the arc so it fits with the gauge
    173          				GUI_SetPenSize((int)(GAUGE_DARK_REDLINE_ARC_WIDTH * (Mag / 1000)));
   \   000001B8   0900A0E3           MOV      R0,#+9
   \   000001BC   ........           BL       GUI_SetPenSize
    174          				GUI_SetColor(pAlarm->DarkColor);
   \   000001C0   100095E5           LDR      R0,[R5, #+16]
   \   000001C4   ........           BL       GUI_SetColor
    175          				iArcRadius = (int)(GAUGE_DARK_REDLINE_ARC_RADIUS * kmcMag * (Mag / 1000));
   \   000001C8   0A00A0E1           MOV      R0,R10
   \   000001CC   0710A0E1           MOV      R1,R7
   \   000001D0   ........           BL       __aeabi_fmul
   \   000001D4   ........           BL       __aeabi_f2iz
   \   000001D8   00A0A0E1           MOV      R10,R0
    176          				GUI_DrawArc(iXCenter, iYCenter, iArcRadius, iArcRadius, iAlarmStartAngle, iAlarmEndAngle);
   \   000001DC   04908DE5           STR      R9,[SP, #+4]
   \   000001E0   00808DE5           STR      R8,[SP, #+0]
   \   000001E4   0A30A0E1           MOV      R3,R10
   \   000001E8   0A20A0E1           MOV      R2,R10
   \   000001EC   7C1094E5           LDR      R1,[R4, #+124]
   \   000001F0   780094E5           LDR      R0,[R4, #+120]
   \   000001F4   ........           BL       GUI_DrawArc
    177          
    178          				// draw the main part of the arc
    179          				GUI_SetPenSize((int)(GAUGE_REDLINE_ARC_WIDTH * (Mag / 1000)));
   \   000001F8   1900A0E3           MOV      R0,#+25
   \   000001FC   ........           BL       GUI_SetPenSize
    180          				GUI_SetColor(pAlarm->Color);
   \   00000200   0C0095E5           LDR      R0,[R5, #+12]
   \   00000204   ........           BL       GUI_SetColor
    181          				GUI_DrawArc(iXCenter, iYCenter, iArcRadius - ((GAUGE_REDLINE_ARC_WIDTH + GAUGE_DARK_REDLINE_ARC_WIDTH) / 2), iArcRadius - ((GAUGE_REDLINE_ARC_WIDTH + GAUGE_DARK_REDLINE_ARC_WIDTH) / 2), iAlarmStartAngle, iAlarmEndAngle);
   \   00000208   11204AE2           SUB      R2,R10,#+17
   \   0000020C   04908DE5           STR      R9,[SP, #+4]
   \   00000210   00808DE5           STR      R8,[SP, #+0]
   \   00000214   0230A0E1           MOV      R3,R2
   \   00000218   7C1094E5           LDR      R1,[R4, #+124]
   \   0000021C   780094E5           LDR      R0,[R4, #+120]
   \   00000220   ........           BL       GUI_DrawArc
    182          			}
    183          			pAlarm = pAlarm->Next;
   \                     ??CreateGaugeBackground_5:
   \   00000224   185095E5           LDR      R5,[R5, #+24]
   \   00000228   000055E3           CMP      R5,#+0
   \   0000022C   C4FFFF1A           BNE      ??CreateGaugeBackground_4
    184          		}
    185          		GUI_SetPenSize(1);
   \   00000230   0100A0E3           MOV      R0,#+1
   \   00000234   ........           BL       GUI_SetPenSize
    186          		GUI_SetColor(OldColor);
   \   00000238   0600A0E1           MOV      R0,R6
   \   0000023C   ........           BL       GUI_SetColor
    187          	}
    188          
    189          	// draw the tic marks
    190          // KMC	range = (int) iMax - (int) iMin;
    191          	range = iMax - iMin;
    192          
    193          //KMC	TicCount = (int)(range / iMinorTics);
    194          	TicCount = (int)((range / iMinorTics) + 0.500001);		// Add a tiny bit more to account for floating point round-off error ((int)9.9999999 = 9, not 10 without 'adjustment')
   \                     ??CreateGaugeBackground_3:
   \   00000240   6C5094E5           LDR      R5,[R4, #+108]
   \   00000244   440094E5           LDR      R0,[R4, #+68]
   \   00000248   481094E5           LDR      R1,[R4, #+72]
   \   0000024C   ........           BL       __aeabi_fsub
   \   00000250   0510A0E1           MOV      R1,R5
   \   00000254   ........           BL       __aeabi_fdiv
   \   00000258   ........           BL       __aeabi_f2d
   \   0000025C   0020A0E1           MOV      R2,R0
   \   00000260   0130A0E1           MOV      R3,R1
   \   00000264   510F8FE2           ADR      R0,??CreateGaugeBackground_1+0x8
   \   00000268   030090E8           LDM      R0,{R0,R1}
   \   0000026C   ........           BL       __aeabi_dadd
   \   00000270   ........           BL       __aeabi_d2iz
   \   00000274   1C008DE5           STR      R0,[SP, #+28]
    195          	MinorTicCount = (int)(iMajorTics / iMinorTics);
   \   00000278   680094E5           LDR      R0,[R4, #+104]
   \   0000027C   0510A0E1           MOV      R1,R5
   \   00000280   ........           BL       __aeabi_fdiv
   \   00000284   ........           BL       __aeabi_f2iz
   \   00000288   24008DE5           STR      R0,[SP, #+36]
    196          
    197          	//interval = (int)(((float)iEndAngle - (float)iStartingAngle) / ((float)TicCount));
    198          	GUI_SetFont(GAUGE_SMALL_FONT);
   \   0000028C   ........           LDR      R0,??DataTable7
   \   00000290   ........           BL       GUI_SetFont
    199          
    200          	for(i = 0; i < TicCount + 1; i++)
   \   00000294   1C009DE5           LDR      R0,[SP, #+28]
   \   00000298   0070A0E3           MOV      R7,#+0
   \   0000029C   010080E2           ADD      R0,R0,#+1
   \   000002A0   010050E3           CMP      R0,#+1
   \   000002A4   C60000BA           BLT      ??CreateGaugeBackground_6
   \   000002A8   0C009DE5           LDR      R0,[SP, #+12]
   \   000002AC   ........           BL       __aeabi_i2d
   \   000002B0   03008DE8           STM      SP,{R0,R1}
   \   000002B4   0020A0E1           MOV      R2,R0
   \   000002B8   0130A0E1           MOV      R3,R1
   \   000002BC   F024CDE1           STRD     R2,R3,[SP, #+64]
   \   000002C0   0C009DE5           LDR      R0,[SP, #+12]
   \   000002C4   ........           BL       __aeabi_i2f
   \   000002C8   4014A0E3           MOV      R1,#+1073741824
   \   000002CC   00008DE5           STR      R0,[SP, #+0]
   \   000002D0   C01881E3           ORR      R1,R1,#0xC00000
   \   000002D4   ........           BL       __aeabi_fdiv
   \   000002D8   20008DE5           STR      R0,[SP, #+32]
    201          	{
    202          		angle = iEndAngle - (int)(i * iMinorTics) * dValuePerDeg;
    203          
    204          		radians = DEGREES_TO_RADIANS(angle);
   \                     ??CreateGaugeBackground_7:
   \   000002DC   0700A0E1           MOV      R0,R7
   \   000002E0   ........           BL       __aeabi_i2f
   \   000002E4   18008DE5           STR      R0,[SP, #+24]
   \   000002E8   880094E5           LDR      R0,[R4, #+136]
   \   000002EC   ........           BL       __aeabi_i2f
   \   000002F0   0050A0E1           MOV      R5,R0
   \   000002F4   18009DE5           LDR      R0,[SP, #+24]
   \   000002F8   6C1094E5           LDR      R1,[R4, #+108]
   \   000002FC   ........           BL       __aeabi_fmul
   \   00000300   ........           BL       __aeabi_f2iz
   \   00000304   ........           BL       __aeabi_i2f
   \   00000308   10109DE5           LDR      R1,[SP, #+16]
   \   0000030C   ........           BL       __aeabi_fmul
   \   00000310   0010A0E1           MOV      R1,R0
   \   00000314   0500A0E1           MOV      R0,R5
   \   00000318   ........           BL       __aeabi_fsub
   \   0000031C   ........           BL       __aeabi_f2d
   \   00000320   90208FE2           ADR      R2,??CreateGaugeBackground_1+0x10
   \   00000324   0C0092E8           LDM      R2,{R2,R3}
   \   00000328   ........           BL       __aeabi_dmul
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   ........           LDR      R3,??DataTable7_1  ;; 0x40668000
   \   00000334   ........           BL       __aeabi_ddiv
   \   00000338   ........           BL       __aeabi_d2f
   \   0000033C   0050A0E1           MOV      R5,R0
    205          
    206          		dCos = cos(radians);
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   ........           BL       __iar_FSin
   \   00000348   08008DE5           STR      R0,[SP, #+8]
    207          		dSin = sin(radians);
   \   0000034C   0010A0E3           MOV      R1,#+0
   \   00000350   0500A0E1           MOV      R0,R5
   \   00000354   ........           BL       __iar_FSin
   \   00000358   04008DE5           STR      R0,[SP, #+4]
    208          
    209          		if(i % MinorTicCount == 0)
   \   0000035C   0700A0E1           MOV      R0,R7
   \   00000360   24109DE5           LDR      R1,[SP, #+36]
   \   00000364   ........           BL       __aeabi_idivmod
   \   00000368   14108DE5           STR      R1,[SP, #+20]
   \   0000036C   000051E3           CMP      R1,#+0
   \   00000370   1400001A           BNE      ??CreateGaugeBackground_8
    210          		{
    211          			GUI_SetPenSize(3);
   \   00000374   0300A0E3           MOV      R0,#+3
   \   00000378   ........           BL       GUI_SetPenSize
    212          			TicLength = (int)(iRadius * 0.10);
   \   0000037C   800094E5           LDR      R0,[R4, #+128]
   \   00000380   ........           BL       __aeabi_i2d
   \   00000384   34208FE2           ADR      R2,??CreateGaugeBackground_1+0x18
   \   00000388   0C0092E8           LDM      R2,{R2,R3}
   \   0000038C   ........           BL       __aeabi_dmul
   \   00000390   ........           BL       __aeabi_d2iz
   \   00000394   00A0A0E1           MOV      R10,R0
    213          			if(TicLength < GAUGE_MAJOR_TIC_LENGTH)
   \   00000398   0F005AE3           CMP      R10,#+15
   \   0000039C   130000AA           BGE      ??CreateGaugeBackground_9
    214          				TicLength = GAUGE_MAJOR_TIC_LENGTH;
   \   000003A0   0FA0A0E3           MOV      R10,#+15
   \   000003A4   110000EA           B        ??CreateGaugeBackground_9
   \                     ??CreateGaugeBackground_1:
   \   000003A8   333333333333       DC32     0x33333333,0x3FC33333
   \              C33F        
   \   000003B0   17F4DE180200       DC32     0x18DEF417,0x3FE00002
   \              E03F        
   \   000003B8   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        
   \   000003C0   9A9999999999       DC32     0x9999999A,0x3FB99999
   \              B93F        
    215          		}
    216          		else
    217          		{
    218          			GUI_SetPenSize(1);
   \                     ??CreateGaugeBackground_8:
   \   000003C8   0100A0E3           MOV      R0,#+1
   \   000003CC   ........           BL       GUI_SetPenSize
    219          			TicLength = (int)(radius * 0.07);
   \   000003D0   E42F8FE2           ADR      R2,??CreateGaugeBackground_10
   \   000003D4   0C0092E8           LDM      R2,{R2,R3}
   \   000003D8   D004CDE1           LDRD     R0,R1,[SP, #+64]
   \   000003DC   ........           BL       __aeabi_dmul
   \   000003E0   ........           BL       __aeabi_d2iz
   \   000003E4   00A0A0E1           MOV      R10,R0
    220          			if(TicLength < GAUGE_MINOR_TIC_LENGTH)
   \   000003E8   0C005AE3           CMP      R10,#+12
    221          				TicLength = GAUGE_MINOR_TIC_LENGTH;	
   \   000003EC   0CA0A0B3           MOVLT    R10,#+12
    222          		}
    223          
    224          		x1 = iXCenter + (int)(dCos * radius);
   \                     ??CreateGaugeBackground_9:
   \   000003F0   785094E5           LDR      R5,[R4, #+120]
   \   000003F4   00009DE5           LDR      R0,[SP, #+0]
   \   000003F8   08109DE5           LDR      R1,[SP, #+8]
   \   000003FC   ........           BL       __aeabi_fmul
   \   00000400   ........           BL       __aeabi_f2iz
   \   00000404   058080E0           ADD      R8,R0,R5
    225          		y1 = iYCenter + (int)(dSin * radius * -1);
   \   00000408   7C9094E5           LDR      R9,[R4, #+124]
   \   0000040C   00009DE5           LDR      R0,[SP, #+0]
   \   00000410   04109DE5           LDR      R1,[SP, #+4]
   \   00000414   ........           BL       __aeabi_fmul
   \   00000418   8014A0E3           MOV      R1,#-2147483648
   \   0000041C   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000420   ........           BL       __aeabi_fmul
   \   00000424   ........           BL       __aeabi_f2iz
   \   00000428   096080E0           ADD      R6,R0,R9
   \   0000042C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000430   0A0040E0           SUB      R0,R0,R10
   \   00000434   ........           BL       __aeabi_i2f
   \   00000438   00B0A0E1           MOV      R11,R0
   \   0000043C   08009DE5           LDR      R0,[SP, #+8]
   \   00000440   0B10A0E1           MOV      R1,R11
   \   00000444   ........           BL       __aeabi_fmul
   \   00000448   ........           BL       __aeabi_f2iz
   \   0000044C   055080E0           ADD      R5,R0,R5
    226          		x2 = iXCenter + (int)(dCos * (radius - TicLength));
    227          		y2 = iYCenter + (int)(dSin * (radius - TicLength) * -1);
   \   00000450   04009DE5           LDR      R0,[SP, #+4]
   \   00000454   0B10A0E1           MOV      R1,R11
   \   00000458   ........           BL       __aeabi_fmul
   \   0000045C   8014A0E3           MOV      R1,#-2147483648
   \   00000460   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000464   ........           BL       __aeabi_fmul
   \   00000468   ........           BL       __aeabi_f2iz
   \   0000046C   099080E0           ADD      R9,R0,R9
    228          		
    229          		iTemp = GUI_GetPenSize();
   \   00000470   ........           BL       GUI_GetPenSize
   \   00000474   00B0A0E1           MOV      R11,R0
    230          		GUI_SetColor(GUI_BLACK);
   \   00000478   0000A0E3           MOV      R0,#+0
   \   0000047C   ........           BL       GUI_SetColor
    231          		GUI_SetPenSize(iTemp + 2);
   \   00000480   02008BE2           ADD      R0,R11,#+2
   \   00000484   FF0000E2           AND      R0,R0,#0xFF
   \   00000488   ........           BL       GUI_SetPenSize
    232          		GUI_DrawLine(x1, y1, x2, y2);
   \   0000048C   0930A0E1           MOV      R3,R9
   \   00000490   0520A0E1           MOV      R2,R5
   \   00000494   0610A0E1           MOV      R1,R6
   \   00000498   0800A0E1           MOV      R0,R8
   \   0000049C   ........           BL       GUI_DrawLine
    233          		GUI_SetColor(GUI_WHITE);
   \   000004A0   FF04E0E3           MVN      R0,#-16777216
   \   000004A4   ........           BL       GUI_SetColor
    234          		GUI_SetPenSize(iTemp);
   \   000004A8   0B00A0E1           MOV      R0,R11
   \   000004AC   ........           BL       GUI_SetPenSize
    235          		GUI_DrawLine(x1, y1, x2, y2);
   \   000004B0   0930A0E1           MOV      R3,R9
   \   000004B4   0520A0E1           MOV      R2,R5
   \   000004B8   0610A0E1           MOV      R1,R6
   \   000004BC   0800A0E1           MOV      R0,R8
   \   000004C0   ........           BL       GUI_DrawLine
    236          
    237          		if(i % MinorTicCount == 0)
   \   000004C4   14009DE5           LDR      R0,[SP, #+20]
   \   000004C8   000050E3           CMP      R0,#+0
   \   000004CC   3700001A           BNE      ??CreateGaugeBackground_11
    238          		{
    239          			value = (int) (iMin + iMinorTics * i);
    240          			sprintf(str, "%d", value / iMultiplier);
   \   000004D0   18009DE5           LDR      R0,[SP, #+24]
   \   000004D4   6C1094E5           LDR      R1,[R4, #+108]
   \   000004D8   ........           BL       __aeabi_fmul
   \   000004DC   481094E5           LDR      R1,[R4, #+72]
   \   000004E0   ........           BL       __aeabi_fadd
   \   000004E4   ........           BL       __aeabi_f2iz
   \   000004E8   9C1094E5           LDR      R1,[R4, #+156]
   \   000004EC   ........           BL       __aeabi_idiv
   \   000004F0   0020A0E1           MOV      R2,R0
   \   000004F4   9D1F8FE2           ADR      R1,??CreateGaugeBackground_10+0x8  ;; 0x25, 0x64, 0x00, 0x00
   \   000004F8   28008DE2           ADD      R0,SP,#+40
   \   000004FC   ........           BL       sprintf
    241          			txt_length = GUI_GetStringDistX(str);
   \   00000500   28008DE2           ADD      R0,SP,#+40
   \   00000504   ........           BL       GUI_GetStringDistX
   \   00000508   0050A0E1           MOV      R5,R0
    242          			txt_height = GUI_GetFontDistY();
   \   0000050C   ........           BL       GUI_GetFontDistY
   \   00000510   0090A0E1           MOV      R9,R0
    243          
    244          			// draw the tic text
    245          			dTemp = ((float)radius - (float)TicLength - ((float)radius / (float)6));
   \   00000514   0A00A0E1           MOV      R0,R10
   \   00000518   ........           BL       __aeabi_i2f
   \   0000051C   0010A0E1           MOV      R1,R0
   \   00000520   00009DE5           LDR      R0,[SP, #+0]
   \   00000524   ........           BL       __aeabi_fsub
   \   00000528   20109DE5           LDR      R1,[SP, #+32]
   \   0000052C   ........           BL       __aeabi_fsub
   \   00000530   0060A0E1           MOV      R6,R0
    246          			x1 = iXCenter + (int)(dCos * dTemp);
    247          			y1 = iYCenter + (int)(dSin * dTemp * -1);
    248          
    249          			// adjust for the text size
    250          			x1 -= txt_length / 2;
   \   00000534   788094E5           LDR      R8,[R4, #+120]
   \   00000538   08009DE5           LDR      R0,[SP, #+8]
   \   0000053C   0610A0E1           MOV      R1,R6
   \   00000540   ........           BL       __aeabi_fmul
   \   00000544   ........           BL       __aeabi_f2iz
   \   00000548   080080E0           ADD      R0,R0,R8
   \   0000054C   A51F85E0           ADD      R1,R5,R5, LSR #+31
   \   00000550   C18040E0           SUB      R8,R0,R1, ASR #+1
    251          			y1 -= txt_height / 2;
   \   00000554   7C5094E5           LDR      R5,[R4, #+124]
   \   00000558   04009DE5           LDR      R0,[SP, #+4]
   \   0000055C   0610A0E1           MOV      R1,R6
   \   00000560   ........           BL       __aeabi_fmul
   \   00000564   8014A0E3           MOV      R1,#-2147483648
   \   00000568   FE1581E3           ORR      R1,R1,#0x3F800000
   \   0000056C   ........           BL       __aeabi_fmul
   \   00000570   ........           BL       __aeabi_f2iz
   \   00000574   050080E0           ADD      R0,R0,R5
   \   00000578   A91F89E0           ADD      R1,R9,R9, LSR #+31
   \   0000057C   C16040E0           SUB      R6,R0,R1, ASR #+1
    252          
    253          			GUI_SetColor(GUI_BLACK);
   \   00000580   0000A0E3           MOV      R0,#+0
   \   00000584   ........           BL       GUI_SetColor
    254          			GUI_DispStringAt(str, x1 + 1, y1 + 1);
   \   00000588   012086E2           ADD      R2,R6,#+1
   \   0000058C   011088E2           ADD      R1,R8,#+1
   \   00000590   28008DE2           ADD      R0,SP,#+40
   \   00000594   ........           BL       GUI_DispStringAt
    255          			GUI_SetColor(GUI_WHITE);
   \   00000598   FF04E0E3           MVN      R0,#-16777216
   \   0000059C   ........           BL       GUI_SetColor
    256          			GUI_DispStringAt(str, x1, y1);
   \   000005A0   0620A0E1           MOV      R2,R6
   \   000005A4   0810A0E1           MOV      R1,R8
   \   000005A8   28008DE2           ADD      R0,SP,#+40
   \   000005AC   ........           BL       GUI_DispStringAt
    257          		}
    258          	}
   \                     ??CreateGaugeBackground_11:
   \   000005B0   1C009DE5           LDR      R0,[SP, #+28]
   \   000005B4   017087E2           ADD      R7,R7,#+1
   \   000005B8   010080E2           ADD      R0,R0,#+1
   \   000005BC   000057E1           CMP      R7,R0
   \   000005C0   45FFFFBA           BLT      ??CreateGaugeBackground_7
    259          
    260          	// calculate the needle polygon pointing straight down
    261          	iNeedleWidth = radius / 20;
   \                     ??CreateGaugeBackground_6:
   \   000005C4   0C009DE5           LDR      R0,[SP, #+12]
   \   000005C8   ........           LDR      R1,??DataTable7_2  ;; 0x66666667
   \   000005CC   9021C1E0           SMULL    R2,R1,R0,R1
   \   000005D0   C101B0E1           ASRS     R0,R1,#+3
   \   000005D4   01008042           ADDMI    R0,R0,#+1
    262          	if(iNeedleWidth < GAUGE_MIN_NEEDLE_WIDTH)
   \   000005D8   050050E3           CMP      R0,#+5
    263          		iNeedleWidth = GAUGE_MIN_NEEDLE_WIDTH;
   \   000005DC   0500A0B3           MOVLT    R0,#+5
   \   000005E0   010000BA           BLT      ??CreateGaugeBackground_12
    264          
    265          	if(iNeedleWidth > GAUGE_MAX_NEEDLE_WIDTH)
   \   000005E4   0B0050E3           CMP      R0,#+11
    266          		iNeedleWidth = GAUGE_MAX_NEEDLE_WIDTH;
   \   000005E8   0A00A0A3           MOVGE    R0,#+10
    267          
    268          	iTemp = -1 * radius / 15;
   \                     ??CreateGaugeBackground_12:
   \   000005EC   0C109DE5           LDR      R1,[SP, #+12]
   \   000005F0   ........           LDR      R2,??DataTable7_3  ;; 0x77777777
   \   000005F4   9132C2E0           SMULL    R3,R2,R1,R2
   \   000005F8   012042E0           SUB      R2,R2,R1
   \   000005FC   C221B0E1           ASRS     R2,R2,#+3
   \   00000600   01208242           ADDMI    R2,R2,#+1
    269          	if(iTemp > -10) iTemp = -10;
   \   00000604   090072E3           CMN      R2,#+9
    270          
    271          	ptNeedle[0].x = 0;
   \   00000608   0010A0E3           MOV      R1,#+0
   \   0000060C   0920E0A3           MVNGE    R2,#+9
   \   00000610   BC1BC4E1           STRH     R1,[R4, #+188]
    272          	ptNeedle[0].y = iTemp;
   \   00000614   BE2BC4E1           STRH     R2,[R4, #+190]
    273          	ptNeedle[1].x = ptNeedle[0].x - iNeedleWidth;
   \   00000618   0020A0E1           MOV      R2,R0
   \   0000061C   002062E2           RSB      R2,R2,#+0
   \   00000620   B02CC4E1           STRH     R2,[R4, #+192]
    274          	ptNeedle[1].y = 0;
    275          	ptNeedle[2].x = ptNeedle[0].x - (int)(iNeedleWidth / 2);
   \   00000624   A02F80E0           ADD      R2,R0,R0, LSR #+31
   \   00000628   C220A0E1           ASR      R2,R2,#+1
   \   0000062C   B21CC4E1           STRH     R1,[R4, #+194]
   \   00000630   003062E2           RSB      R3,R2,#+0
   \   00000634   B43CC4E1           STRH     R3,[R4, #+196]
    276          	ptNeedle[2].y = radius - 40;
   \   00000638   0C309DE5           LDR      R3,[SP, #+12]
   \   0000063C   283043E2           SUB      R3,R3,#+40
   \   00000640   B63CC4E1           STRH     R3,[R4, #+198]
    277          	ptNeedle[3].x = 0;
   \   00000644   B81CC4E1           STRH     R1,[R4, #+200]
    278          	ptNeedle[3].y = radius - 15;
   \   00000648   0CC09DE5           LDR      R12,[SP, #+12]
   \   0000064C   0FC04CE2           SUB      R12,R12,#+15
   \   00000650   BACCC4E1           STRH     R12,[R4, #+202]
    279          	ptNeedle[4].x = ptNeedle[0].x + (int)(iNeedleWidth / 2);
   \   00000654   BC2CC4E1           STRH     R2,[R4, #+204]
    280          	ptNeedle[4].y = radius - 40;
   \   00000658   BE3CC4E1           STRH     R3,[R4, #+206]
    281          	ptNeedle[5].x = ptNeedle[0].x + iNeedleWidth;
   \   0000065C   B00DC4E1           STRH     R0,[R4, #+208]
    282          	ptNeedle[5].y = 0;
   \   00000660   B21DC4E1           STRH     R1,[R4, #+210]
    283          
    284          	GUI_SetFont(GAUGE_DIGITAL_FONT);
   \   00000664   ........           LDR      R0,??DataTable7_4
   \   00000668   ........           BL       GUI_SetFont
    285          	// create the digital output if necessary
    286          	if(bShowDigital == true)
   \   0000066C   A100D4E5           LDRB     R0,[R4, #+161]
   \   00000670   000050E3           CMP      R0,#+0
   \   00000674   5400000A           BEQ      ??CreateGaugeBackground_13
    287          	{
    288          		float fMax;
    289          		fMax = (float)iMax;
    290          		if (iMax > 100)
   \   00000678   5013A0E3           MOV      R1,#+1073741825
   \   0000067C   440094E5           LDR      R0,[R4, #+68]
   \   00000680   B21781E3           ORR      R1,R1,#0x2C80000
   \   00000684   ........           BL       __aeabi_cfrcmple
   \   00000688   0050A0E1           MOV      R5,R0
    291          			strcpy (strPrecision, "%.0f");
   \   0000068C   0520A093           MOVLS    R2,#+5
   \   00000690   ............       ADRLLS   R1,`?<Constant "%.0f">`
   \              ....        
   \   00000698   0600009A           BLS      ??CreateGaugeBackground_14
    292          		else if (iMax > 10)
   \   0000069C   6A1741E2           SUB      R1,R1,#+27787264
   \   000006A0   ........           BL       __aeabi_cfrcmple
   \   000006A4   0520A0E3           MOV      R2,#+5
    293          			strcpy (strPrecision, "%.1f");
   \   000006A8   ............       ADRLLS   R1,`?<Constant "%.1f">`
   \              ....        
    294          		else
    295          			strcpy (strPrecision, "%.2f");
   \   000006B0   ............       ADRLHI   R1,`?<Constant "%.2f">`
   \              ....        
   \                     ??CreateGaugeBackground_14:
   \   000006B8   48008DE2           ADD      R0,SP,#+72
   \   000006BC   ........           BL       __aeabi_memcpy4
    296          		
    297          		sprintf(str, strPrecision, fMax);
   \   000006C0   0500A0E1           MOV      R0,R5
   \   000006C4   ........           BL       __aeabi_f2d
   \   000006C8   0020A0E1           MOV      R2,R0
   \   000006CC   0130A0E1           MOV      R3,R1
   \   000006D0   48108DE2           ADD      R1,SP,#+72
   \   000006D4   28008DE2           ADD      R0,SP,#+40
   \   000006D8   ........           BL       sprintf
    298          		txt_length = (int)(GUI_GetStringDistX(str) * 2.5);
   \   000006DC   28008DE2           ADD      R0,SP,#+40
   \   000006E0   ........           BL       GUI_GetStringDistX
   \   000006E4   ........           BL       __aeabi_i2d
   \   000006E8   0130A0E1           MOV      R3,R1
   \   000006EC   0020A0E1           MOV      R2,R0
   \   000006F0   4014A0E3           MOV      R1,#+1073741824
   \   000006F4   0000A0E3           MOV      R0,#+0
   \   000006F8   401A81E3           ORR      R1,R1,#0x40000
   \   000006FC   ........           BL       __aeabi_dmul
   \   00000700   ........           BL       __aeabi_d2iz
   \   00000704   0050A0E1           MOV      R5,R0
    299          		txt_height = GUI_GetFontDistY();
   \   00000708   ........           BL       GUI_GetFontDistY
    300          
    301          		iMaxTextLength = txt_length;
   \   0000070C   985084E5           STR      R5,[R4, #+152]
    302          
    303          		// Calculate position of digital insert
    304          		// save the digital rectangle so we can use it later for alarm conditions
    305          		if (pBitmap == &bmDefaultGauge)
   \   00000710   0C209DE5           LDR      R2,[SP, #+12]
   \   00000714   ........           LDR      R3,??DataTable7_5  ;; 0x55555556
   \   00000718   8220A0E1           LSL      R2,R2,#+1
   \   0000071C   92C3C3E0           SMULL    R12,R3,R2,R3
   \   00000720   0090A0E1           MOV      R9,R0
   \   00000724   781094E5           LDR      R1,[R4, #+120]
   \   00000728   0320B0E1           MOVS     R2,R3
   \   0000072C   C500A0E1           ASR      R0,R5,#+1
   \   00000730   01208342           ADDMI    R2,R3,#+1
   \   00000734   200F85E0           ADD      R0,R5,R0, LSR #+30
   \   00000738   011082E0           ADD      R1,R2,R1
   \   0000073C   405181E0           ADD      R5,R1,R0, ASR #+2
   \   00000740   400141E0           SUB      R0,R1,R0, ASR #+2
   \   00000744   B81094E5           LDR      R1,[R4, #+184]
   \   00000748   ........           LDR      R2,??DataTable7_6
   \   0000074C   7C6094E5           LDR      R6,[R4, #+124]
   \   00000750   020051E1           CMP      R1,R2
   \   00000754   0600001A           BNE      ??CreateGaugeBackground_15
    306          		{
    307          			x1 = (GAUGE_DIGITAL_X - txt_length / 4) + 20;
   \   00000758   148080E2           ADD      R8,R0,#+20
    308          			y1 = (GAUGE_DIGITAL_Y) + 12;
   \   0000075C   0C6086E2           ADD      R6,R6,#+12
    309          			x2 = (GAUGE_DIGITAL_X + txt_length / 4) + 20;
   \   00000760   145085E2           ADD      R5,R5,#+20
    310          			y2 = y1 + txt_height + 2;
   \   00000764   030000EA           B        ??CreateGaugeBackground_16
   \                     ??CreateGaugeBackground_10:
   \   00000768   EC51B81E85EB       DC32     0x1EB851EC,0x3FB1EB85
   \              B13F        
   \   00000770   25640000           DC8      0x25, 0x64, 0x00, 0x00
    311          
    312          			DigitalRect.x0 = x1 + 1;
    313          			DigitalRect.y0 = y1 + 1;
    314          			DigitalRect.x1 = x2 - 1;
    315          			DigitalRect.y1 = y2 - 1;
    316          		}
    317          		else
    318          		{
    319          			x1 = GAUGE_DIGITAL_X - txt_length / 4 - 10;
   \                     ??CreateGaugeBackground_15:
   \   00000774   0A8040E2           SUB      R8,R0,#+10
    320          			y1 = GAUGE_DIGITAL_Y;
    321          			x2 = GAUGE_DIGITAL_X + txt_length / 4;
    322          			y2 = y1 + txt_height + 2;
   \                     ??CreateGaugeBackground_16:
   \   00000778   060089E0           ADD      R0,R9,R6
   \   0000077C   029080E2           ADD      R9,R0,#+2
    323          
    324          			DigitalRect.x0 = x1 + 1;
    325          			DigitalRect.y0 = y1 + 1;
    326          			DigitalRect.x1 = x2 - 1;
    327          			DigitalRect.y1 = y2 - 1;
   \   00000780   013049E2           SUB      R3,R9,#+1
   \   00000784   012045E2           SUB      R2,R5,#+1
   \   00000788   B63FC4E1           STRH     R3,[R4, #+246]
   \   0000078C   011086E2           ADD      R1,R6,#+1
   \   00000790   B42FC4E1           STRH     R2,[R4, #+244]
   \   00000794   010088E2           ADD      R0,R8,#+1
   \   00000798   B21FC4E1           STRH     R1,[R4, #+242]
   \   0000079C   B00FC4E1           STRH     R0,[R4, #+240]
    328          		}
    329          
    330          		GUI_DrawRoundedRect(x1, y1, x2, y2, GAUGE_DIGITAL_BOX_RADIUS);
   \   000007A0   0500A0E3           MOV      R0,#+5
   \   000007A4   00008DE5           STR      R0,[SP, #+0]
   \   000007A8   0930A0E1           MOV      R3,R9
   \   000007AC   0520A0E1           MOV      R2,R5
   \   000007B0   0610A0E1           MOV      R1,R6
   \   000007B4   0800A0E1           MOV      R0,R8
   \   000007B8   ........           BL       GUI_DrawRoundedRect
    331          
    332          		ptDigital.x = x2 - 5;
   \   000007BC   050045E2           SUB      R0,R5,#+5
   \   000007C0   A40084E5           STR      R0,[R4, #+164]
    333          		ptDigital.y = y1 + 1;
   \   000007C4   010086E2           ADD      R0,R6,#+1
   \   000007C8   A80084E5           STR      R0,[R4, #+168]
    334          	}
    335          
    336          	
    337          	GUI_SetFont(GAUGE_SMALL_FONT_BOLD);
   \                     ??CreateGaugeBackground_13:
   \   000007CC   ........           LDR      R0,??DataTable7_10
   \   000007D0   ........           BL       GUI_SetFont
    338          	//if(iMultiplier > 1)
    339          	//{
    340          	//	sprintf(str, "x%d", iMultiplier);
    341          	//	GUI_DispStringAt(str, DigitalRect.x0 + 5, ptDigital.y + txt_height + 5);
    342          	//}
    343          	if(iMultiplier > 1)
   \   000007D4   9C3094E5           LDR      R3,[R4, #+156]
   \   000007D8   581094E5           LDR      R1,[R4, #+88]
   \   000007DC   020053E3           CMP      R3,#+2
   \   000007E0   050000BA           BLT      ??CreateGaugeBackground_17
    344          	{
    345          		sprintf(str, "%s x%d", sUnits, iMultiplier);
   \   000007E4   0120A0E1           MOV      R2,R1
   \   000007E8   ............       ADRL     R1,`?<Constant "%s x%d">`
   \              ....        
   \   000007F0   28008DE2           ADD      R0,SP,#+40
   \   000007F4   ........           BL       sprintf
   \   000007F8   010000EA           B        ??CreateGaugeBackground_18
    346          	}
    347          	else
    348          	{
    349          		strcpy(str, sUnits);
   \                     ??CreateGaugeBackground_17:
   \   000007FC   28008DE2           ADD      R0,SP,#+40
   \   00000800   ........           BL       strcpy
    350          	}
    351          
    352          	txt_length = GUI_GetStringDistX(str);
   \                     ??CreateGaugeBackground_18:
   \   00000804   28008DE2           ADD      R0,SP,#+40
   \   00000808   ........           BL       GUI_GetStringDistX
    353          	txt_height = GUI_GetFontDistY();
   \   0000080C   ........           BL       GUI_GetFontDistY
   \   00000810   0050A0E1           MOV      R5,R0
    354          	x2 = iXCenter - txt_length / 2;
    355          	y2 = iYCenter + txt_height * 2 + 4;
    356          
    357          	GUI_SetColor(GUI_WHITE);
   \   00000814   FF04E0E3           MVN      R0,#-16777216
   \   00000818   ........           BL       GUI_SetColor
    358          	//GUI_DispStringAt(str, x2, y2);
    359          // KMC - only display string if requested
    360          	if (iShowMultiplier)
   \   0000081C   A000D4E5           LDRB     R0,[R4, #+160]
   \   00000820   000050E3           CMP      R0,#+0
   \   00000824   0600000A           BEQ      ??CreateGaugeBackground_19
    361          		GUI_DispStringAt(str, DigitalRect.x0 + 5, ptDigital.y + txt_height + 10);
   \   00000828   A80094E5           LDR      R0,[R4, #+168]
   \   0000082C   000085E0           ADD      R0,R5,R0
   \   00000830   0A2080E2           ADD      R2,R0,#+10
   \   00000834   F00FD4E1           LDRSH    R0,[R4, #+240]
   \   00000838   051080E2           ADD      R1,R0,#+5
   \   0000083C   28008DE2           ADD      R0,SP,#+40
   \   00000840   ........           BL       GUI_DispStringAt
    362          
    363          	iTemp = txt_height;
    364          
    365          	//GUI_SetFont(GAUGE_SMALL_FONT);
    366          	// display the text for the title and the units
    367          	txt_length = GUI_GetStringDistX(sName);
   \                     ??CreateGaugeBackground_19:
   \   00000844   540094E5           LDR      R0,[R4, #+84]
   \   00000848   ........           BL       GUI_GetStringDistX
   \   0000084C   0050A0E1           MOV      R5,R0
    368          	txt_height = GUI_GetFontDistY();
   \   00000850   ........           BL       GUI_GetFontDistY
    369          	x1 = iXCenter - txt_length / 2;
    370          	y1 = (int)(iYCenter - txt_height * 1.75 - 2);
    371          	
    372          // KMC - only dislpay string if provided
    373          	if (sName)
   \   00000854   546094E5           LDR      R6,[R4, #+84]
   \   00000858   0070A0E1           MOV      R7,R0
   \   0000085C   000056E3           CMP      R6,#+0
   \   00000860   1C00000A           BEQ      ??CreateGaugeBackground_20
    374          		GUI_DispStringAt(sName, x1, y1);
   \   00000864   7C0094E5           LDR      R0,[R4, #+124]
   \   00000868   ........           BL       __aeabi_i2d
   \   0000086C   0080A0E1           MOV      R8,R0
   \   00000870   0190A0E1           MOV      R9,R1
   \   00000874   0700A0E1           MOV      R0,R7
   \   00000878   ........           BL       __aeabi_i2d
   \   0000087C   0130A0E1           MOV      R3,R1
   \   00000880   0020A0E1           MOV      R2,R0
   \   00000884   F015A0E3           MOV      R1,#+1006632960
   \   00000888   0000A0E3           MOV      R0,#+0
   \   0000088C   FF1781E3           ORR      R1,R1,#0x3FC0000
   \   00000890   ........           BL       __aeabi_dmul
   \   00000894   0020A0E1           MOV      R2,R0
   \   00000898   0130A0E1           MOV      R3,R1
   \   0000089C   0800A0E1           MOV      R0,R8
   \   000008A0   0910A0E1           MOV      R1,R9
   \   000008A4   ........           BL       __aeabi_dsub
   \   000008A8   0020A0E1           MOV      R2,R0
   \   000008AC   0130A0E1           MOV      R3,R1
   \   000008B0   0000A0E3           MOV      R0,#+0
   \   000008B4   C014A0E3           MOV      R1,#-1073741824
   \   000008B8   ........           BL       __aeabi_dadd
   \   000008BC   ........           BL       __aeabi_d2iz
   \   000008C0   0020A0E1           MOV      R2,R0
   \   000008C4   780094E5           LDR      R0,[R4, #+120]
   \   000008C8   A51F85E0           ADD      R1,R5,R5, LSR #+31
   \   000008CC   C11040E0           SUB      R1,R0,R1, ASR #+1
   \   000008D0   0600A0E1           MOV      R0,R6
   \   000008D4   ........           BL       GUI_DispStringAt
    375          	if (sInputNum[0])
   \                     ??CreateGaugeBackground_20:
   \   000008D8   600094E5           LDR      R0,[R4, #+96]
   \   000008DC   0010D0E5           LDRB     R1,[R0, #+0]
   \   000008E0   000051E3           CMP      R1,#+0
   \   000008E4   0200000A           BEQ      ??CreateGaugeBackground_21
    376          		GUI_DispStringHCenterAt(sInputNum, iXCenter, 170);
   \   000008E8   AA20A0E3           MOV      R2,#+170
   \   000008EC   781094E5           LDR      R1,[R4, #+120]
   \   000008F0   ........           BL       GUI_DispStringHCenterAt
    377          
    378          	GUI_SetPenSize(1);
   \                     ??CreateGaugeBackground_21:
   \   000008F4   0100A0E3           MOV      R0,#+1
   \   000008F8   ........           BL       GUI_SetPenSize
    379          	GUI_SelectLCD();
   \   000008FC   ........           BL       GUI_SelectLCD
    380          }
   \   00000900   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   00000904   F08FBDE8           POP      {R4-R11,PC}      ;; return
    381          
    382          /****************************************************************
    383          *
    384          *       SetValue(float value)
    385          *		Set the value of the gauge to the value specified
    386          *
    387          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    388          void Gauge::SetValue(float dValue)
    389          {
    390          	Value = dValue;
   \                     _ZN5Gauge8SetValueEf:
   \   00000000   B41080E5           STR      R1,[R0, #+180]
    391          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    392          
    393          /****************************************************************
    394          *
    395          *       ShowDigital(bool Show)
    396          *		set the gauge to show the digital output as part of the gauge
    397          *
    398          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    399          void Gauge::ShowDigital(bool Show)
    400          {
    401          	bShowDigital = Show;
   \                     _ZN5Gauge11ShowDigitalEb:
   \   00000000   A110C0E5           STRB     R1,[R0, #+161]
    402          	// we change what we show so we have to redo the background
    403          	CreateGaugeBackground();
   \   00000004   ........           B        _ZN5Gauge21CreateGaugeBackgroundEv  ;; tailcall
    404          }
    405          

   \                                 In section .text, align 4, keep-with-next
    406          float Gauge::GetValue()
    407          {
    408          	return Value;
   \                     _ZN5Gauge8GetValueEv:
   \   00000000   B40090E5           LDR      R0,[R0, #+180]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    409          }
    410          

   \                                 In section .text, align 4, keep-with-next
    411          void Gauge::SetPrecision(int Precision)
    412          {
    413          	iPrecision = Precision;
   \                     _ZN5Gauge12SetPrecisionEi:
   \   00000000   941080E5           STR      R1,[R0, #+148]
    414          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    415          
    416          /****************************************************************
    417          *
    418          *       DrawGauge()
    419          *		Draw the gauge
    420          *
    421          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    422          void Gauge::DrawControl()
    423          {
    424          	CommonDraw(false);
   \                     _ZN5Gauge11DrawControlEv:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   ........           B        _ZN5Gauge10CommonDrawEb  ;; tailcall
    425          }
    426          

   \                                 In section .text, align 4, keep-with-next
    427          GUI_MEMDEV_Handle Gauge::DrawToMemArea()
    428          {
   \                     _ZN5Gauge13DrawToMemAreaEv:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    429          	CommonDraw(true);
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           BL       _ZN5Gauge10CommonDrawEb
    430          	return memGauge;
   \   00000010   D40094E5           LDR      R0,[R4, #+212]
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return
    431          }
    432          

   \                                 In section .text, align 4, keep-with-next
    433          void Gauge::CommonDraw(bool toMemArea)
    434          {
   \                     _ZN5Gauge10CommonDrawEb:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   0170A0E1           MOV      R7,R1
    435          	float radians, dValue, degrees, dSin, dCos, dVal;
    436          	int x1, y1, x2, y2;
    437          	int txt_width;
    438          	char str[10], strFormat[5];
    439          	Alarm *pAlarm;
    440          
    441          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   ........           BL       GUI_SetTextMode
    442          
    443          	if (toMemArea)
   \   00000018   000057E3           CMP      R7,#+0
   \   0000001C   0100000A           BEQ      ??CommonDraw_0
    444          		GUI_MEMDEV_Select(memGauge);
   \   00000020   D40096E5           LDR      R0,[R6, #+212]
   \   00000024   ........           BL       GUI_MEMDEV_Select
    445          
    446          	// draw the background
    447          	GUI_MEMDEV_Write(mMemSpace);
   \                     ??CommonDraw_0:
   \   00000028   4C0096E5           LDR      R0,[R6, #+76]
   \   0000002C   ........           BL       GUI_MEMDEV_Write
    448          
    449          	// draw the digital component
    450          	if (bShowDigital == true)
   \   00000030   A100D6E5           LDRB     R0,[R6, #+161]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   4800000A           BEQ      ??CommonDraw_1
    451          	{
    452          		GUI_COLOR BkColor, Color;
    453          
    454          		GUI_SetFont(GAUGE_DIGITAL_FONT);
   \   0000003C   ........           LDR      R0,??DataTable7_4
   \   00000040   ........           BL       GUI_SetFont
    455          		
    456          		if (iMax > 100)
   \   00000044   5013A0E3           MOV      R1,#+1073741825
   \   00000048   440096E5           LDR      R0,[R6, #+68]
   \   0000004C   B21781E3           ORR      R1,R1,#0x2C80000
   \   00000050   ........           BL       __aeabi_cfrcmple
    457          			strcpy (strFormat, "%.0f");
   \   00000054   ............       ADRLLS   R0,`?<Constant "%.0f">`
   \              ....        
   \   0000005C   0500009A           BLS      ??CommonDraw_2
    458          		else if (iMax > 10)
   \   00000060   6A1741E2           SUB      R1,R1,#+27787264
   \   00000064   ........           BL       __aeabi_cfrcmple
    459          			strcpy (strFormat, "%.1f");
   \   00000068   ............       ADRLLS   R0,`?<Constant "%.1f">`
   \              ....        
    460          		else
    461          			strcpy (strFormat, "%.2f");
   \   00000070   ............       ADRLHI   R0,`?<Constant "%.2f">`
   \              ....        
   \                     ??CommonDraw_2:
   \   00000078   0C00B0E8           LDM      R0!,{R2,R3}
   \   0000007C   0C108DE2           ADD      R1,SP,#+12
   \   00000080   0C00A1E8           STM      R1!,{R2,R3}
    462          
    463          		sprintf(str, strFormat, Value);
   \   00000084   B40096E5           LDR      R0,[R6, #+180]
   \   00000088   ........           BL       __aeabi_f2d
   \   0000008C   0020A0E1           MOV      R2,R0
   \   00000090   0130A0E1           MOV      R3,R1
   \   00000094   0C108DE2           ADD      R1,SP,#+12
   \   00000098   28008DE2           ADD      R0,SP,#+40
   \   0000009C   ........           BL       sprintf
    464          		txt_width = GUI_GetStringDistX(str);
   \   000000A0   28008DE2           ADD      R0,SP,#+40
   \   000000A4   ........           BL       GUI_GetStringDistX
    465          		
    466          		x1 = ptDigital.x - txt_width;
   \   000000A8   A41096E5           LDR      R1,[R6, #+164]
    467          		y1 = ptDigital.y;
    468          
    469          		BkColor = GUI_BLACK;
    470          		Color = GUI_WHITE;
    471          
    472          		if(AlarmList != NULL)
   \   000000AC   402096E5           LDR      R2,[R6, #+64]
   \   000000B0   004041E0           SUB      R4,R1,R0
   \   000000B4   A85096E5           LDR      R5,[R6, #+168]
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   FF84E0E3           MVN      R8,#-16777216
   \   000000C0   000052E3           CMP      R2,#+0
   \   000000C4   B49096E5           LDR      R9,[R6, #+180]
   \   000000C8   1600000A           BEQ      ??CommonDraw_3
    473          		{
    474          			pAlarm = AlarmList;
    475          			while(pAlarm != NULL)
    476          			{
    477          				if(pAlarm->Enabled == true)
   \                     ??CommonDraw_4:
   \   000000CC   0000D2E5           LDRB     R0,[R2, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   1000000A           BEQ      ??CommonDraw_5
    478          				{
    479          					if((Value >= pAlarm->MinValue && Value <= pAlarm->MaxValue) || (pAlarm->Type == HIGH && Value > pAlarm->MaxValue) || (pAlarm->Type == LOW && Value < pAlarm->MinValue))
   \   000000D8   043092E5           LDR      R3,[R2, #+4]
   \   000000DC   0900A0E1           MOV      R0,R9
   \   000000E0   0310A0E1           MOV      R1,R3
   \   000000E4   ........           BL       __aeabi_cfrcmple
   \   000000E8   0300008A           BHI      ??CommonDraw_6
   \   000000EC   080092E5           LDR      R0,[R2, #+8]
   \   000000F0   0910A0E1           MOV      R1,R9
   \   000000F4   ........           BL       __aeabi_cfrcmple
   \   000000F8   3200009A           BLS      ??CommonDraw_7
   \                     ??CommonDraw_6:
   \   000000FC   1400D2E5           LDRB     R0,[R2, #+20]
   \   00000100   030050E3           CMP      R0,#+3
   \   00000104   2900001A           BNE      ??CommonDraw_8
   \   00000108   080092E5           LDR      R0,[R2, #+8]
   \   0000010C   0910A0E1           MOV      R1,R9
   \   00000110   ........           BL       __aeabi_cfcmple
   \   00000114   2B00003A           BCC      ??CommonDraw_7
    480          					{
    481          						// we have an alarm condition.  set the color
    482          						BkColor = pAlarm->Color;
    483          						Color = GUI_BLACK;
    484          						break;
    485          					}
    486          					else
    487          					{
    488          						BkColor = GUI_BLACK;
   \                     ??CommonDraw_9:
   \   00000118   0000A0E3           MOV      R0,#+0
    489          						Color = GUI_WHITE;
    490          					}
    491          				}
    492          				else
    493          				{
    494          					BkColor = GUI_BLACK;
    495          					Color = GUI_WHITE;
    496          				}
    497          				pAlarm = pAlarm->Next;
   \                     ??CommonDraw_5:
   \   0000011C   182092E5           LDR      R2,[R2, #+24]
   \   00000120   000052E3           CMP      R2,#+0
   \   00000124   E8FFFF1A           BNE      ??CommonDraw_4
    498          			}
    499          		}
    500          		GUI_SetColor(BkColor);
   \                     ??CommonDraw_3:
   \   00000128   ........           BL       GUI_SetColor
    501          		GUI_FillRoundedRect(DigitalRect.x0, DigitalRect.y0, DigitalRect.x1, DigitalRect.y1, GAUGE_DIGITAL_BOX_RADIUS);
   \   0000012C   0500A0E3           MOV      R0,#+5
   \   00000130   00008DE5           STR      R0,[SP, #+0]
   \   00000134   F63FD6E1           LDRSH    R3,[R6, #+246]
   \   00000138   F42FD6E1           LDRSH    R2,[R6, #+244]
   \   0000013C   F21FD6E1           LDRSH    R1,[R6, #+242]
   \   00000140   F00FD6E1           LDRSH    R0,[R6, #+240]
   \   00000144   ........           BL       GUI_FillRoundedRect
    502          		GUI_SetColor(Color);
   \   00000148   0800A0E1           MOV      R0,R8
   \   0000014C   ........           BL       GUI_SetColor
    503          		GUI_DispStringAt(str, x1, y1 + 1);
   \   00000150   012085E2           ADD      R2,R5,#+1
   \   00000154   0410A0E1           MOV      R1,R4
   \   00000158   28008DE2           ADD      R0,SP,#+40
   \   0000015C   ........           BL       GUI_DispStringAt
    504          	}
    505          
    506          	GUI_SetColor(GUI_WHITE);
   \                     ??CommonDraw_1:
   \   00000160   FF04E0E3           MVN      R0,#-16777216
   \   00000164   ........           BL       GUI_SetColor
    507          	// draw the needle
    508          	dVal = Value / iMultiplier;
   \   00000168   B44096E5           LDR      R4,[R6, #+180]
   \   0000016C   9C0096E5           LDR      R0,[R6, #+156]
   \   00000170   ........           BL       __aeabi_i2f
   \   00000174   0010A0E1           MOV      R1,R0
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   ........           BL       __aeabi_fdiv
    509          
    510          	// limit the needle movements so we don't loop around one way or the other
    511          	if(dVal < (iMin - iMinorTics))
   \   00000180   6C8096E5           LDR      R8,[R6, #+108]
   \   00000184   489096E5           LDR      R9,[R6, #+72]
   \   00000188   0050A0E1           MOV      R5,R0
   \   0000018C   0900A0E1           MOV      R0,R9
   \   00000190   0810A0E1           MOV      R1,R8
   \   00000194   ........           BL       __aeabi_fsub
   \   00000198   0010A0E1           MOV      R1,R0
   \   0000019C   0500A0E1           MOV      R0,R5
   \   000001A0   ........           BL       __aeabi_cfcmple
   \   000001A4   0A00002A           BCS      ??CommonDraw_10
    512          		dValue = iMin - iMinorTics;
   \   000001A8   0140A0E1           MOV      R4,R1
   \   000001AC   0E0000EA           B        ??CommonDraw_11
   \                     ??CommonDraw_8:
   \   000001B0   020050E3           CMP      R0,#+2
   \   000001B4   D7FFFF1A           BNE      ??CommonDraw_9
   \   000001B8   0900A0E1           MOV      R0,R9
   \   000001BC   0310A0E1           MOV      R1,R3
   \   000001C0   ........           BL       __aeabi_cfcmple
   \   000001C4   D3FFFF2A           BCS      ??CommonDraw_9
   \                     ??CommonDraw_7:
   \   000001C8   0C0092E5           LDR      R0,[R2, #+12]
   \   000001CC   0080A0E3           MOV      R8,#+0
   \   000001D0   D4FFFFEA           B        ??CommonDraw_3
    513          	else if (dVal > (iMax + iMinorTics))
   \                     ??CommonDraw_10:
   \   000001D4   440096E5           LDR      R0,[R6, #+68]
   \   000001D8   0810A0E1           MOV      R1,R8
   \   000001DC   ........           BL       __aeabi_fadd
   \   000001E0   0510A0E1           MOV      R1,R5
   \   000001E4   ........           BL       __aeabi_cfcmple
    514          		dValue = iMax + iMinorTics;
   \   000001E8   0040A031           MOVCC    R4,R0
    515          	else
    516          		dValue = Value;
    517          
    518          	degrees = ((float)iEndAngle - (((dValue - iMin) / dValuePerRad)));
    519          	radians = DEGREES_TO_RADIANS(degrees);
   \                     ??CommonDraw_11:
   \   000001EC   880096E5           LDR      R0,[R6, #+136]
   \   000001F0   ........           BL       __aeabi_i2f
   \   000001F4   0050A0E1           MOV      R5,R0
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   0910A0E1           MOV      R1,R9
   \   00000200   ........           BL       __aeabi_fsub
   \   00000204   AC1096E5           LDR      R1,[R6, #+172]
   \   00000208   ........           BL       __aeabi_fdiv
   \   0000020C   0010A0E1           MOV      R1,R0
   \   00000210   0500A0E1           MOV      R0,R5
   \   00000214   ........           BL       __aeabi_fsub
   \   00000218   ........           BL       __aeabi_f2d
   \   0000021C   0020A0E1           MOV      R2,R0
   \   00000220   0130A0E1           MOV      R3,R1
   \   00000224   ........           ADR      R0,??DataTable7_7
   \   00000228   030090E8           LDM      R0,{R0,R1}
   \   0000022C   ........           BL       __aeabi_dmul
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   ........           LDR      R3,??DataTable7_1  ;; 0x40668000
   \   00000238   ........           BL       __aeabi_ddiv
   \   0000023C   ........           BL       __aeabi_d2f
   \   00000240   0040A0E1           MOV      R4,R0
    520          
    521          	dCos = cos(radians);
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   ........           BL       __iar_FSin
   \   0000024C   0050A0E1           MOV      R5,R0
    522          	dSin = sin(radians);
   \   00000250   0010A0E3           MOV      R1,#+0
   \   00000254   0400A0E1           MOV      R0,R4
   \   00000258   ........           BL       __iar_FSin
   \   0000025C   0040A0E1           MOV      R4,R0
    523          
    524          	GUI_SetColor(GUI_BLACK);
   \   00000260   0000A0E3           MOV      R0,#+0
   \   00000264   ........           BL       GUI_SetColor
    525          	GUI_SetPenSize(GAUGE_NEEDLE_WIDTH + 2);
   \   00000268   0600A0E3           MOV      R0,#+6
   \   0000026C   ........           BL       GUI_SetPenSize
   \   00000270   780096E5           LDR      R0,[R6, #+120]
   \   00000274   08008DE5           STR      R0,[SP, #+8]
    526          	x1 = iXCenter + (int)(dCos * (GAUGE_NEEDLE_LENGTH + 1));
    527          	y1 = iYCenter + (int)(dSin * (GAUGE_NEEDLE_LENGTH + 1) * -1);
    528          	x2 = iXCenter;
    529          	y2 = iYCenter;
   \   00000278   7CA096E5           LDR      R10,[R6, #+124]
   \   0000027C   800096E5           LDR      R0,[R6, #+128]
   \   00000280   ........           BL       __aeabi_i2d
   \   00000284   0080A0E1           MOV      R8,R0
   \   00000288   0190A0E1           MOV      R9,R1
   \   0000028C   ........           ADR      R0,??DataTable7_8
   \   00000290   030090E8           LDM      R0,{R0,R1}
   \   00000294   0820A0E1           MOV      R2,R8
   \   00000298   0930A0E1           MOV      R3,R9
   \   0000029C   ........           BL       __aeabi_dmul
   \   000002A0   0020A0E1           MOV      R2,R0
   \   000002A4   0130A0E1           MOV      R3,R1
   \   000002A8   0800A0E1           MOV      R0,R8
   \   000002AC   0910A0E1           MOV      R1,R9
   \   000002B0   ........           BL       __aeabi_dsub
   \   000002B4   0130A0E1           MOV      R3,R1
   \   000002B8   0020A0E1           MOV      R2,R0
   \   000002BC   C015A0E3           MOV      R1,#+805306368
   \   000002C0   0000A0E3           MOV      R0,#+0
   \   000002C4   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000002C8   ........           BL       __aeabi_dadd
   \   000002CC   0080A0E1           MOV      R8,R0
   \   000002D0   0190A0E1           MOV      R9,R1
   \   000002D4   0500A0E1           MOV      R0,R5
   \   000002D8   ........           BL       __aeabi_f2d
   \   000002DC   03008DE8           STM      SP,{R0,R1}
   \   000002E0   F002CDE1           STRD     R0,R1,[SP, #+32]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           BL       __aeabi_f2d
   \   000002EC   03008DE8           STM      SP,{R0,R1}
   \   000002F0   F801CDE1           STRD     R0,R1,[SP, #+24]
   \   000002F4   08B09DE5           LDR      R11,[SP, #+8]
   \   000002F8   D801CDE1           LDRD     R0,R1,[SP, #+24]
   \   000002FC   0820A0E1           MOV      R2,R8
   \   00000300   0930A0E1           MOV      R3,R9
   \   00000304   ........           BL       __aeabi_dmul
   \   00000308   0130A0E1           MOV      R3,R1
   \   0000030C   0020A0E1           MOV      R2,R0
   \   00000310   B014A0E3           MOV      R1,#-1342177280
   \   00000314   0000A0E3           MOV      R0,#+0
   \   00000318   FF1681E3           ORR      R1,R1,#0xFF00000
   \   0000031C   ........           BL       __aeabi_dmul
   \   00000320   ........           BL       __aeabi_d2iz
   \   00000324   0A1080E0           ADD      R1,R0,R10
   \   00000328   00108DE5           STR      R1,[SP, #+0]
   \   0000032C   785096E5           LDR      R5,[R6, #+120]
   \   00000330   D002CDE1           LDRD     R0,R1,[SP, #+32]
   \   00000334   0820A0E1           MOV      R2,R8
   \   00000338   0930A0E1           MOV      R3,R9
   \   0000033C   ........           BL       __aeabi_dmul
   \   00000340   ........           BL       __aeabi_d2iz
   \   00000344   050080E0           ADD      R0,R0,R5
   \   00000348   0A30A0E1           MOV      R3,R10
   \   0000034C   0B20A0E1           MOV      R2,R11
   \   00000350   00109DE5           LDR      R1,[SP, #+0]
    530          	GUI_DrawLine(x1, y1, x2, y2);
   \   00000354   ........           BL       GUI_DrawLine
    531          
    532          	GUI_SetPenSize(GAUGE_NEEDLE_WIDTH);
   \   00000358   0400A0E3           MOV      R0,#+4
   \   0000035C   ........           BL       GUI_SetPenSize
    533          	GUI_SetColor(GAUGE_NEEDLE_COLOR);
   \   00000360   FF00A0E3           MOV      R0,#+255
   \   00000364   ........           BL       GUI_SetColor
   \   00000368   800096E5           LDR      R0,[R6, #+128]
   \   0000036C   ........           BL       __aeabi_i2d
   \   00000370   0040A0E1           MOV      R4,R0
   \   00000374   0150A0E1           MOV      R5,R1
   \   00000378   ........           ADR      R0,??DataTable7_8
   \   0000037C   030090E8           LDM      R0,{R0,R1}
   \   00000380   0420A0E1           MOV      R2,R4
   \   00000384   0530A0E1           MOV      R3,R5
   \   00000388   ........           BL       __aeabi_dmul
   \   0000038C   0020A0E1           MOV      R2,R0
   \   00000390   0130A0E1           MOV      R3,R1
   \   00000394   0400A0E1           MOV      R0,R4
   \   00000398   0510A0E1           MOV      R1,R5
   \   0000039C   ........           BL       __aeabi_dsub
   \   000003A0   0040A0E1           MOV      R4,R0
   \   000003A4   0150A0E1           MOV      R5,R1
   \   000003A8   0A90A0E1           MOV      R9,R10
   \   000003AC   08A09DE5           LDR      R10,[SP, #+8]
   \   000003B0   7C8096E5           LDR      R8,[R6, #+124]
   \   000003B4   D801CDE1           LDRD     R0,R1,[SP, #+24]
   \   000003B8   0420A0E1           MOV      R2,R4
   \   000003BC   0530A0E1           MOV      R3,R5
   \   000003C0   ........           BL       __aeabi_dmul
   \   000003C4   0130A0E1           MOV      R3,R1
   \   000003C8   0020A0E1           MOV      R2,R0
   \   000003CC   B014A0E3           MOV      R1,#-1342177280
   \   000003D0   0000A0E3           MOV      R0,#+0
   \   000003D4   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000003D8   ........           BL       __aeabi_dmul
   \   000003DC   ........           BL       __aeabi_d2iz
   \   000003E0   08B080E0           ADD      R11,R0,R8
   \   000003E4   788096E5           LDR      R8,[R6, #+120]
   \   000003E8   D002CDE1           LDRD     R0,R1,[SP, #+32]
   \   000003EC   0420A0E1           MOV      R2,R4
   \   000003F0   0530A0E1           MOV      R3,R5
   \   000003F4   ........           BL       __aeabi_dmul
   \   000003F8   ........           BL       __aeabi_d2iz
   \   000003FC   080080E0           ADD      R0,R0,R8
   \   00000400   0930A0E1           MOV      R3,R9
   \   00000404   0A20A0E1           MOV      R2,R10
   \   00000408   0B10A0E1           MOV      R1,R11
    534          	x1 = iXCenter + (int)(dCos * (GAUGE_NEEDLE_LENGTH));
    535          	y1 = iYCenter + (int)(dSin * (GAUGE_NEEDLE_LENGTH) * -1);
    536          	GUI_DrawLine(x1, y1, x2, y2);
   \   0000040C   ........           BL       GUI_DrawLine
    537          
    538          	GUI_SetColor(GUI_LIGHTGRAY);
   \   00000410   ........           LDR      R0,??DataTable7_11  ;; 0xd3d3d3
   \   00000414   ........           BL       GUI_SetColor
    539          	GUI_FillCircle(iXCenter, iYCenter, GAUGE_NEEDLE_CENTER_RADIUS);
   \   00000418   0520A0E3           MOV      R2,#+5
   \   0000041C   7C1096E5           LDR      R1,[R6, #+124]
   \   00000420   780096E5           LDR      R0,[R6, #+120]
   \   00000424   ........           BL       GUI_FillCircle
    540          	
    541          	if (toMemArea)
   \   00000428   000057E3           CMP      R7,#+0
   \   0000042C   0000000A           BEQ      ??CommonDraw_12
    542          		GUI_SelectLCD();
   \   00000430   ........           BL       GUI_SelectLCD
    543          }
   \                     ??CommonDraw_12:
   \   00000434   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   00000438   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp Gauge::subobject ~Gauge()
   \                     _ZN5GaugeD2Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   4C0094E5           LDR      R0,[R4, #+76]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
   \   00000010   D40094E5           LDR      R0,[R4, #+212]
   \   00000014   ........           BL       GUI_MEMDEV_Delete
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     GUI_Font24B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   00806640           DC32     0x40668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   67666666           DC32     0x66666667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   77777777           DC32     0x77777777

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   ........           DC32     GUI_Font20_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   56555555           DC32     0x55555556

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   ........           DC32     bmDefaultGauge

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   9A9999999999       DC32     0x9999999A,0x3FC99999
   \              C93F        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   E4CB9640           DC32     0x4096cbe4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   ........           DC32     GUI_Font16B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   D3D3D300           DC32     0xd3d3d3

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.0f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E30660000       DC8 37, 46, 48, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.1f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E31660000       DC8 37, 46, 49, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E32660000       DC8 37, 46, 50, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s x%d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   257320782564       DC8 37, 115, 32, 120, 37, 100, 0, 0
   \              0000        
    544          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     Gauge::CommonDraw(bool)            88
     Gauge::CreateGaugeBackground()    128
     Gauge::DrawControl()                8
     Gauge::DrawToMemArea()              8
     Gauge::Gauge(int, int, int, float, float, char *, char *, char *, Alarm *, float, float, int, int, char, GUI_HWIN, GUI_BITMAP const *)
                                        56
     Gauge::GetValue()                   0
     Gauge::SetPrecision(int)            0
     Gauge::SetValue(float)              0
     Gauge::ShowDigital(bool)            8
     Gauge::subobject Gauge(int, int, int, float, float, char *, char *, char *, Alarm *, float, float, int, int, char, GUI_HWIN, GUI_BITMAP const *)
                                       104
     Gauge::subobject ~Gauge()           8
     Gauge::~Gauge()                     8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     Gauge::subobject Gauge(int, int, int, float, float, char *, char *, char *, Alarm *, float, float, int, int, char, GUI_HWIN, GUI_BITMAP const *)
                                     136
     Gauge::Gauge(int, int, int, float, float, char *, char *, char *, Alarm *, float, float, int, int, char, GUI_HWIN, GUI_BITMAP const *)
                                     516
     Gauge::~Gauge()                  32
     Gauge::CreateGaugeBackground() 2312
     Gauge::SetValue(float)            8
     Gauge::ShowDigital(bool)          8
     Gauge::GetValue()                 8
     Gauge::SetPrecision(int)          8
     Gauge::DrawControl()              8
     Gauge::DrawToMemArea()           24
     Gauge::CommonDraw(bool)        1084
     ?<Constant "%d">                  4
     Gauge::subobject ~Gauge()        32
     ??DataTable7                      4
     ??DataTable7_1                    4
     ??DataTable7_2                    4
     ??DataTable7_3                    4
     ??DataTable7_4                    4
     ??DataTable7_5                    4
     ??DataTable7_6                    4
     ??DataTable7_7                    8
     ??DataTable7_8                    8
     ??DataTable7_9                    4
     ??DataTable7_10                   4
     ??DataTable7_11                   4
     ?<Constant "%.0f">                8
     ?<Constant "%.1f">                8
     ?<Constant "%.2f">                8
     ?<Constant "%s x%d">              8

 
     4 bytes in section .rodata
 4 264 bytes in section .text
 
 4 264 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
