###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:13 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\HEADER_SkinClassic.c                #
#    Command line =  C:\DUII\TargetHW\GUI\HEADER_SkinClassic.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\HE #
#                    ADER_SkinClassic.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\HEA #
#                    DER_SkinClassic.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\HEADER_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : HEADER_SkinClassic.c
     19          Purpose     : Implementation of header widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "HEADER_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _DrawTriangle
     38          */
     39          static void _DrawTriangle(int x, int y, int Size, int Inc) {
     40            for (; Size >= 0; Size--, y += Inc) {
     41              GUI_DrawHLine(y, x - Size, x + Size);
     42            }
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       _Paint
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          static void _Paint(HEADER_Handle hObj) {
   \                     _Paint:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     50            HEADER_Obj * pObj;
     51            GUI_RECT Rect;
     52            GUI_RECT RectItem;
     53            GUI_RECT RectNonFixedArea;
     54            unsigned i;
     55            int xPos;
     56            unsigned NumItems;
     57            int EffectSize;
     58            int ArrowSize;
     59            int ArrowPos;
     60            WM_HMEM hDrawObj;
     61          
     62            pObj = HEADER_LOCK_H(hObj);
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   00A0A0E1           MOV      R10,R0
     63            xPos = -pObj->ScrollPos;
   \   00000010   58009AE5           LDR      R0,[R10, #+88]
   \   00000014   00B060E2           RSB      R11,R0,#+0
     64            NumItems = GUI_ARRAY_GetNumItems(pObj->Columns);
   \   00000018   4C009AE5           LDR      R0,[R10, #+76]
   \   0000001C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000020   10008DE5           STR      R0,[SP, #+16]
     65            EffectSize = pObj->Widget.pEffect->EffectSize;
   \   00000024   2C109AE5           LDR      R1,[R10, #+44]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   08108DE5           STR      R1,[SP, #+8]
     66            LCD_SetBkColor(pObj->Props.BkColor);
   \   00000030   38009AE5           LDR      R0,[R10, #+56]
   \   00000034   ........           BL       LCD_SetBkColor
     67            GUI_SetFont(pObj->Props.pFont);
   \   00000038   34009AE5           LDR      R0,[R10, #+52]
   \   0000003C   ........           BL       GUI_SetFont
     68            GUI_Clear();
   \   00000040   ........           BL       GUI_Clear
     69            GUI_GetClientRect(&RectNonFixedArea);
   \   00000044   14008DE2           ADD      R0,SP,#+20
   \   00000048   ........           BL       GUI_GetClientRect
     70            for (i = 0; i < NumItems; i++) {
   \   0000004C   10009DE5           LDR      R0,[SP, #+16]
   \   00000050   0040A0E3           MOV      R4,#+0
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   D000000A           BEQ      ??_Paint_0
   \   0000005C   08109DE5           LDR      R1,[SP, #+8]
   \   00000060   8110A0E1           LSL      R1,R1,#+1
   \   00000064   1C108DE5           STR      R1,[SP, #+28]
     71              int Subtract = 0;
   \                     ??_Paint_1:
   \   00000068   0050A0E3           MOV      R5,#+0
     72              HEADER_COLUMN * pColumn;
     73              pColumn = (HEADER_COLUMN *)GUI_ARRAY_GetpItemLocked(pObj->Columns, i);
   \   0000006C   0410A0E1           MOV      R1,R4
   \   00000070   4C009AE5           LDR      R0,[R10, #+76]
   \   00000074   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000078   0060A0E1           MOV      R6,R0
     74              GUI_GetClientRect(&Rect);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           BL       GUI_GetClientRect
     75              xPos += (i < pObj->Fixed) ? pObj->ScrollPos : 0;
   \   00000084   68009AE5           LDR      R0,[R10, #+104]
   \   00000088   000054E1           CMP      R4,R0
   \   0000008C   58009A35           LDRCC    R0,[R10, #+88]
   \   00000090   0000A023           MOVCS    R0,#+0
   \   00000094   0B0080E0           ADD      R0,R0,R11
   \   00000098   0C008DE5           STR      R0,[SP, #+12]
     76              Rect.x0 = xPos;
   \   0000009C   B000CDE1           STRH     R0,[SP, #+0]
     77              Rect.x1 = Rect.x0 + pColumn->Width;
   \   000000A0   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000A4   001096E5           LDR      R1,[R6, #+0]
   \   000000A8   007081E0           ADD      R7,R1,R0
     78              RectItem = Rect;
     79              ArrowSize = ((RectItem.y1 - RectItem.y0 - EffectSize * 2) / 3) - 1;
   \   000000AC   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000B0   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000B4   B470CDE1           STRH     R7,[SP, #+4]
   \   000000B8   0778A0E1           LSL      R7,R7,#+16
   \   000000BC   010040E0           SUB      R0,R0,R1
   \   000000C0   1C109DE5           LDR      R1,[SP, #+28]
   \   000000C4   4778A0E1           ASR      R7,R7,#+16
   \   000000C8   010040E0           SUB      R0,R0,R1
   \   000000CC   ........           LDR      R1,??DataTable2  ;; 0x55555556
   \   000000D0   9021C1E0           SMULL    R2,R1,R0,R1
   \   000000D4   0100B0E1           MOVS     R0,R1
   \   000000D8   01008142           ADDMI    R0,R1,#+1
   \   000000DC   018040E2           SUB      R8,R0,#+1
     80              ArrowPos = RectItem.x1 - 4 - ArrowSize;
   \   000000E0   040047E2           SUB      R0,R7,#+4
   \   000000E4   089040E0           SUB      R9,R0,R8
     81              WM_SetUserClipRect(&RectNonFixedArea);
   \   000000E8   14008DE2           ADD      R0,SP,#+20
   \   000000EC   ........           BL       WM_SetUserClipRect
     82              if (pColumn->hDrawObj) {
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   3E00000A           BEQ      ??_Paint_2
     83                int xOff = 0, yOff = 0;
     84                switch (pColumn->Align & GUI_TA_HORIZONTAL) {
   \   000000FC   0410D6E5           LDRB     R1,[R6, #+4]
   \   00000100   00A0A0E3           MOV      R10,#+0
   \   00000104   00B0A0E3           MOV      R11,#+0
   \   00000108   031001E2           AND      R1,R1,#0x3
   \   0000010C   010051E3           CMP      R1,#+1
   \   00000110   0300000A           BEQ      ??_Paint_3
   \   00000114   0B00003A           BCC      ??_Paint_4
   \   00000118   020051E3           CMP      R1,#+2
   \   0000011C   0400000A           BEQ      ??_Paint_5
   \   00000120   080000EA           B        ??_Paint_4
     85                case GUI_TA_RIGHT:
     86                  xOff = (pColumn->Width - GUI_DRAW__GetXSize(pColumn->hDrawObj));
   \                     ??_Paint_3:
   \   00000124   ........           BL       GUI_DRAW__GetXSize
   \   00000128   001096E5           LDR      R1,[R6, #+0]
   \   0000012C   00A041E0           SUB      R10,R1,R0
     87                  break;
   \   00000130   040000EA           B        ??_Paint_4
     88                case GUI_TA_HCENTER:
     89                  xOff = (pColumn->Width - GUI_DRAW__GetXSize(pColumn->hDrawObj)) / 2;
   \                     ??_Paint_5:
   \   00000134   ........           BL       GUI_DRAW__GetXSize
   \   00000138   001096E5           LDR      R1,[R6, #+0]
   \   0000013C   000041E0           SUB      R0,R1,R0
   \   00000140   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000144   C0A0A0E1           ASR      R10,R0,#+1
     90                  break;
     91                }
     92                switch (pColumn->Align & GUI_TA_VERTICAL) {
   \                     ??_Paint_4:
   \   00000148   0400D6E5           LDRB     R0,[R6, #+4]
   \   0000014C   0C0000E2           AND      R0,R0,#0xC
   \   00000150   040050E2           SUBS     R0,R0,#+4
   \   00000154   0200000A           BEQ      ??_Paint_6
   \   00000158   080050E2           SUBS     R0,R0,#+8
   \   0000015C   0800000A           BEQ      ??_Paint_7
   \   00000160   100000EA           B        ??_Paint_8
     93          	    case GUI_TA_BOTTOM:
     94                  yOff = ((Rect.y1 - Rect.y0 + 1) - GUI_DRAW__GetYSize(pColumn->hDrawObj));
   \                     ??_Paint_6:
   \   00000164   080096E5           LDR      R0,[R6, #+8]
   \   00000168   ........           BL       GUI_DRAW__GetYSize
   \   0000016C   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000170   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000174   021041E0           SUB      R1,R1,R2
   \   00000178   011081E2           ADD      R1,R1,#+1
   \   0000017C   00B041E0           SUB      R11,R1,R0
     95                  break;
   \   00000180   080000EA           B        ??_Paint_8
     96          	    case GUI_TA_VCENTER:
     97                  yOff = ((Rect.y1 - Rect.y0 + 1) - GUI_DRAW__GetYSize(pColumn->hDrawObj)) / 2;
   \                     ??_Paint_7:
   \   00000184   080096E5           LDR      R0,[R6, #+8]
   \   00000188   ........           BL       GUI_DRAW__GetYSize
   \   0000018C   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000190   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000194   021041E0           SUB      R1,R1,R2
   \   00000198   011081E2           ADD      R1,R1,#+1
   \   0000019C   000041E0           SUB      R0,R1,R0
   \   000001A0   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000001A4   C0B0A0E1           ASR      R11,R0,#+1
     98                  break;
     99                }
    100                WM_SetUserClipRect(&Rect);
   \                     ??_Paint_8:
   \   000001A8   0D00A0E1           MOV      R0,SP
   \   000001AC   ........           BL       WM_SetUserClipRect
    101                hDrawObj = pColumn->hDrawObj;
   \   000001B0   086096E5           LDR      R6,[R6, #+8]
    102                GUI_UNLOCK_H(pColumn);
   \   000001B4   ........           BL       GUI_ALLOC_UnlockH
    103                GUI_UNLOCK_H(pObj);
   \   000001B8   ........           BL       GUI_ALLOC_UnlockH
    104                GUI_DRAW__Draw(hDrawObj, hObj, xPos + xOff, yOff);
   \   000001BC   0C009DE5           LDR      R0,[SP, #+12]
   \   000001C0   0B30A0E1           MOV      R3,R11
   \   000001C4   00208AE0           ADD      R2,R10,R0
   \   000001C8   20109DE5           LDR      R1,[SP, #+32]
   \   000001CC   0600A0E1           MOV      R0,R6
   \   000001D0   ........           BL       GUI_DRAW__Draw
    105                pObj = HEADER_LOCK_H(hObj);
   \   000001D4   20009DE5           LDR      R0,[SP, #+32]
   \   000001D8   ........           BL       GUI_ALLOC_LockH
   \   000001DC   00A0A0E1           MOV      R10,R0
    106                pColumn = (HEADER_COLUMN *)GUI_ARRAY_GetpItemLocked(pObj->Columns, i);
   \   000001E0   0410A0E1           MOV      R1,R4
   \   000001E4   4C009AE5           LDR      R0,[R10, #+76]
   \   000001E8   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000001EC   0060A0E1           MOV      R6,R0
    107                WM_SetUserClipRect(NULL);
   \   000001F0   0000A0E3           MOV      R0,#+0
   \   000001F4   ........           BL       WM_SetUserClipRect
    108              }
    109              WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &Rect);
   \                     ??_Paint_2:
   \   000001F8   0D10A0E1           MOV      R1,SP
   \   000001FC   0A00A0E1           MOV      R0,R10
   \   00000200   ........           BL       WIDGET__EFFECT_DrawUpRect
    110              xPos += Rect.x1 - Rect.x0;
   \   00000204   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000208   0C109DE5           LDR      R1,[SP, #+12]
   \   0000020C   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000210   011080E0           ADD      R1,R0,R1
    111              Rect.x0 += EffectSize + HEADER__DefaultBorderH;
   \   00000214   08309DE5           LDR      R3,[SP, #+8]
   \   00000218   02B041E0           SUB      R11,R1,R2
   \   0000021C   ........           LDR      R1,??DataTable2_1
   \   00000220   001091E5           LDR      R1,[R1, #+0]
   \   00000224   033081E0           ADD      R3,R1,R3
   \   00000228   022083E0           ADD      R2,R3,R2
   \   0000022C   B020CDE1           STRH     R2,[SP, #+0]
    112              Rect.x1 -= EffectSize + HEADER__DefaultBorderH;
   \   00000230   08209DE5           LDR      R2,[SP, #+8]
   \   00000234   020040E0           SUB      R0,R0,R2
   \   00000238   010040E0           SUB      R0,R0,R1
   \   0000023C   B400CDE1           STRH     R0,[SP, #+4]
    113              Rect.y0 += EffectSize + HEADER__DefaultBorderV;
   \   00000240   ........           LDR      R0,??DataTable2_2
   \   00000244   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   08209DE5           LDR      R2,[SP, #+8]
   \   00000250   022080E0           ADD      R2,R0,R2
   \   00000254   011082E0           ADD      R1,R2,R1
   \   00000258   B210CDE1           STRH     R1,[SP, #+2]
    114              Rect.y1 -= EffectSize + HEADER__DefaultBorderV;
   \   0000025C   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000260   08209DE5           LDR      R2,[SP, #+8]
   \   00000264   021041E0           SUB      R1,R1,R2
   \   00000268   000041E0           SUB      R0,R1,R0
   \   0000026C   B600CDE1           STRH     R0,[SP, #+6]
    115              LCD_SetColor(pObj->Props.TextColor);
   \   00000270   3C009AE5           LDR      R0,[R10, #+60]
   \   00000274   ........           BL       LCD_SetColor
    116              if ((pObj->DirIndicatorColumn == (int)i) && ((pColumn->Align & GUI_TA_HORIZONTAL) == GUI_TA_RIGHT)) {
   \   00000278   60009AE5           LDR      R0,[R10, #+96]
   \   0000027C   040050E1           CMP      R0,R4
   \   00000280   0300001A           BNE      ??_Paint_9
   \   00000284   0400D6E5           LDRB     R0,[R6, #+4]
   \   00000288   030000E2           AND      R0,R0,#0x3
   \   0000028C   010050E3           CMP      R0,#+1
    117                Subtract = (ArrowSize << 1) + 1;
   \   00000290   88508000           ADDEQ    R5,R0,R8, LSL #+1
    118              }
    119              Rect.x1 -= Subtract;
   \                     ??_Paint_9:
   \   00000294   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000298   050040E0           SUB      R0,R0,R5
   \   0000029C   B400CDE1           STRH     R0,[SP, #+4]
    120              GUI_SetTextMode(GUI_TM_TRANS);
   \   000002A0   0200A0E3           MOV      R0,#+2
   \   000002A4   ........           BL       GUI_SetTextMode
    121              GUI_DispStringInRect(pColumn->acText, &Rect, pColumn->Align);
   \   000002A8   F420D6E1           LDRSH    R2,[R6, #+4]
   \   000002AC   0D10A0E1           MOV      R1,SP
   \   000002B0   0C0086E2           ADD      R0,R6,#+12
   \   000002B4   ........           BL       GUI_DispStringInRect
    122              Rect.x1 += Subtract;
   \   000002B8   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000002BC   000085E0           ADD      R0,R5,R0
   \   000002C0   B400CDE1           STRH     R0,[SP, #+4]
    123              if (pObj->DirIndicatorColumn == (int)i) {
   \   000002C4   60009AE5           LDR      R0,[R10, #+96]
   \   000002C8   040050E1           CMP      R0,R4
   \   000002CC   2600001A           BNE      ??_Paint_10
    124                LCD_SetColor(pObj->Props.ArrowColor);
   \   000002D0   40009AE5           LDR      R0,[R10, #+64]
   \   000002D4   ........           BL       LCD_SetColor
    125                WM_SetUserClipRect(&RectNonFixedArea);
   \   000002D8   14008DE2           ADD      R0,SP,#+20
   \   000002DC   ........           BL       WM_SetUserClipRect
    126                if (pObj->DirIndicatorReverse == 0) {
   \   000002E0   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000002E4   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000002E8   010040E0           SUB      R0,R0,R1
   \   000002EC   C050A0E1           ASR      R5,R0,#+1
   \   000002F0   64009AE5           LDR      R0,[R10, #+100]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   0C00001A           BNE      ??_Paint_11
    127                  _DrawTriangle(ArrowPos, ((Rect.y1 - Rect.y0) >> 1), ArrowSize, 1);
   \   000002FC   000058E3           CMP      R8,#+0
   \   00000300   1700004A           BMI      ??_Paint_12
   \   00000304   096088E0           ADD      R6,R8,R9
   \                     ??_Paint_13:
   \   00000308   0620A0E1           MOV      R2,R6
   \   0000030C   081049E0           SUB      R1,R9,R8
   \   00000310   0500A0E1           MOV      R0,R5
   \   00000314   ........           BL       GUI_DrawHLine
   \   00000318   018048E2           SUB      R8,R8,#+1
   \   0000031C   015085E2           ADD      R5,R5,#+1
   \   00000320   016046E2           SUB      R6,R6,#+1
   \   00000324   000058E3           CMP      R8,#+0
   \   00000328   F6FFFF5A           BPL      ??_Paint_13
   \   0000032C   0C0000EA           B        ??_Paint_12
    128                } else {
    129                  _DrawTriangle(ArrowPos, ((Rect.y1 - Rect.y0) >> 1) + ArrowSize, ArrowSize, -1);
   \                     ??_Paint_11:
   \   00000330   055088E0           ADD      R5,R8,R5
   \   00000334   000058E3           CMP      R8,#+0
   \   00000338   0900004A           BMI      ??_Paint_12
   \   0000033C   096088E0           ADD      R6,R8,R9
   \                     ??_Paint_14:
   \   00000340   0620A0E1           MOV      R2,R6
   \   00000344   081049E0           SUB      R1,R9,R8
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           BL       GUI_DrawHLine
   \   00000350   018048E2           SUB      R8,R8,#+1
   \   00000354   015045E2           SUB      R5,R5,#+1
   \   00000358   016046E2           SUB      R6,R6,#+1
   \   0000035C   000058E3           CMP      R8,#+0
   \   00000360   F6FFFF5A           BPL      ??_Paint_14
    130                }
    131                WM_SetUserClipRect(NULL);
   \                     ??_Paint_12:
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   ........           BL       WM_SetUserClipRect
    132              }
    133              if (i < pObj->Fixed) {
   \                     ??_Paint_10:
   \   0000036C   68009AE5           LDR      R0,[R10, #+104]
   \   00000370   000054E1           CMP      R4,R0
   \   00000374   0300002A           BCS      ??_Paint_15
    134                RectNonFixedArea.x0 = RectItem.x1 + 1;
   \   00000378   010087E2           ADD      R0,R7,#+1
   \   0000037C   B401CDE1           STRH     R0,[SP, #+20]
    135                xPos -= pObj->ScrollPos;
   \   00000380   58009AE5           LDR      R0,[R10, #+88]
   \   00000384   00B04BE0           SUB      R11,R11,R0
    136              }
    137              GUI_UNLOCK_H(pColumn);
   \                     ??_Paint_15:
   \   00000388   ........           BL       GUI_ALLOC_UnlockH
    138            }
   \   0000038C   10009DE5           LDR      R0,[SP, #+16]
   \   00000390   014084E2           ADD      R4,R4,#+1
   \   00000394   000054E1           CMP      R4,R0
   \   00000398   32FFFF3A           BCC      ??_Paint_1
    139            WM_SetUserClipRect(NULL);
   \   0000039C   0000A0E3           MOV      R0,#+0
   \                     ??_Paint_0:
   \   000003A0   ........           BL       WM_SetUserClipRect
    140            GUI_GetClientRect(&Rect);
   \   000003A4   0D00A0E1           MOV      R0,SP
   \   000003A8   ........           BL       GUI_GetClientRect
    141            Rect.x0 = xPos;
    142            Rect.x1 = 0xfff;
   \   000003AC   FF10A0E3           MOV      R1,#+255
   \   000003B0   F01E81E3           ORR      R1,R1,#0xF00
   \   000003B4   B410CDE1           STRH     R1,[SP, #+4]
   \   000003B8   B0B0CDE1           STRH     R11,[SP, #+0]
    143            WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &Rect);
   \   000003BC   0D10A0E1           MOV      R1,SP
   \   000003C0   0A00A0E1           MOV      R0,R10
   \   000003C4   ........           BL       WIDGET__EFFECT_DrawUpRect
    144            GUI_UNLOCK_H(pObj);
   \   000003C8   ........           BL       GUI_ALLOC_UnlockH
    145          }
   \   000003CC   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000003D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    146          
    147          /*********************************************************************
    148          *
    149          *       _Create
    150          */

   \                                 In section .text, align 4, keep-with-next
    151          static void _Create(HEADER_Handle hObj) {
    152            // Nothing special to do...
    153            GUI_USE_PARA(hObj);
    154          }
   \                     _Create:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    155          
    156          /*********************************************************************
    157          *
    158          *        Private data
    159          *
    160          **********************************************************************
    161          */

   \                                 In section .text, align 4, keep-with-next
    162          const WIDGET_SKIN HEADER__SkinClassic = {
   \                     HEADER__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0
    163            _Paint,
    164            _Create
    165          };
    166          
    167          /*********************************************************************
    168          *
    169          *        Public code
    170          *
    171          **********************************************************************
    172          */
    173          /*********************************************************************
    174          *
    175          *       HEADER_SetSkinClassic
    176          */

   \                                 In section .text, align 4, keep-with-next
    177          void HEADER_SetSkinClassic(HEADER_Handle hObj) {
   \                     HEADER_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    178            HEADER_Obj * pObj;
    179          
    180            pObj = HEADER_LOCK_H(hObj);
    181            pObj->pWidgetSkin = &HEADER__SkinClassic;
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   ........           ADR      R1,HEADER__SkinClassic
   \   00000010   481080E5           STR      R1,[R0, #+72]
    182            GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    183            WM_InvalidateWindow(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        WM_InvalidateWindow  ;; tailcall
    184          }
    185          
    186          /*********************************************************************
    187          *
    188          *       HEADER_SetDefaultSkinClassic
    189          */

   \                                 In section .text, align 4, keep-with-next
    190          void HEADER_SetDefaultSkinClassic(void) {
    191            HEADER__pSkinDefault = &HEADER__SkinClassic;
   \                     HEADER_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable2_3
   \   00000004   ........           ADR      R1,HEADER__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    192          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   56555555           DC32     0x55555556

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     HEADER__DefaultBorderH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     HEADER__DefaultBorderV

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     HEADER__pSkinDefault
    193          
    194          
    195          #else                            /* Avoid empty object files */
    196            void HEADER_SkinClassic_C(void);
    197            void HEADER_SkinClassic_C(void) {}
    198          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     HEADER_SetDefaultSkinClassic      0
     HEADER_SetSkinClassic             8
     _Create                           0
     _Paint                           72


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     _Paint                        980
     _Create                         4
     HEADER__SkinClassic            12
     HEADER_SetSkinClassic          36
     HEADER_SetDefaultSkinClassic   16
     ??DataTable2                    4
     ??DataTable2_1                  4
     ??DataTable2_2                  4
     ??DataTable2_3                  4

 
 1 064 bytes in section .text
 
 1 064 bytes of CODE memory

Errors: none
Warnings: none
