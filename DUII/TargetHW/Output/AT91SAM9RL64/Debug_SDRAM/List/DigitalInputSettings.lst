###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:52 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\DigitalInputSettings.c                      #
#    Command line =  C:\DUII\DUII\DigitalInputSettings.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Di #
#                    gitalInputSettings.lst                                   #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Dig #
#                    italInputSettings.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\DigitalInputSettings.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "DUII.h"
     26          #include "GUI.h"
     27          #include "commondefs.h"
     28          #include "DIALOG.h"
     29          #include "ConfigScreens.h"
     30          #include "GeneralConfig.h"
     31          #include "FlashReadWrite.h"
     32          #include "DataHandler.h"
     33          #include "DigitalInputSettings.h"
     34          #include "StandardList.h"
     35          #include "InputScreens.h"
     36          #include "KeyboardAccess.h"
     37          
     38          /*********************************************************************
     39          *
     40          *       Public Variables
     41          *
     42          **********************************************************************
     43          */
     44          
     45          /*********************************************************************
     46          *
     47          *       External data and code
     48          *
     49          **********************************************************************
     50          */
     51          extern GUI_CONST_STORAGE GUI_BITMAP bmBackgroundWithPanel;
     52          extern GUI_CONST_STORAGE GUI_BITMAP bmMiniButton;
     53          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     54          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     55          extern GUI_CONST_STORAGE GUI_BITMAP bmBackground;
     56          extern GUI_CONST_STORAGE GUI_BITMAP bmBanner;
     57          extern GUI_CONST_STORAGE GUI_BITMAP bmDummyDigital;
     58          extern GUI_CONST_STORAGE GUI_BITMAP bmDigital;
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmDigitalAlarm;
     60          extern GUI_CONST_STORAGE GUI_BITMAP bm4;
     61          extern GUI_CONST_STORAGE GUI_BITMAP bm5;
     62          
     63          /*********************************************************************
     64          *
     65          *       Local Prototypes
     66          *
     67          **********************************************************************
     68          */
     69          
     70          void DigDisplayAlarm(WM_HWIN);
     71          void DigDisplayRenameInput(WM_HWIN hParent);
     72          void DigRenameInputPaint(WM_HWIN hParent);
     73          void DisplayRenameHigh(WM_HWIN hParent);
     74          void DisplayRenameLow(WM_HWIN hParent);
     75          void RenameHighPaint(WM_HWIN hParent);
     76          void RenameLowPaint(WM_HWIN hParent);
     77          void DigAlarmPaint(WM_HWIN);
     78          
     79          
     80          /*********************************************************************
     81          *
     82          *       Tables and Constants
     83          *
     84          **********************************************************************
     85          */

   \                                 In section .data, align 4
     86          struct SCREEN_LIST DigitalInputSettingsScreenList[NUM_DIGITAL_INPUT_SCREENS+1] = {
   \                     DigitalInputSettingsScreenList:
   \   00000000   00000000....       DC32 0, DigDisplayAlarm, DigAlarmPaint, 1, DigDisplayRenameInput
   \              ............
   \              01000000....
   \              ....        
   \   00000014   ........0200       DC32 DigRenameInputPaint, 2, DisplayRenameHigh, RenameHighPaint, 3
   \              0000........
   \              ........0300
   \              0000        
   \   00000028   ............       DC32 DisplayRenameLow, RenameLowPaint, -1, 0H, 0H
   \              ....FFFFFFFF
   \              000000000000
   \              0000        
   \   0000003C   00000000           DC8 0, 0, 0, 0
     87          	{ DIG_ALARM_STATE, DigDisplayAlarm, DigAlarmPaint },
     88          	{ DIG_RENAME_INPUT, DigDisplayRenameInput, DigRenameInputPaint },
     89          	{ DIG_RENAME_HIGH, DisplayRenameHigh, RenameHighPaint },
     90          	{ DIG_RENAME_LOW, DisplayRenameLow, RenameLowPaint },
     91          	{ -1, NULL, NULL }
     92          };
     93          
     94          #define	LED_1_BUTTON			GUI_ID_USER + 1
     95          #define	LED_2_BUTTON			GUI_ID_USER + 2
     96          #define	ALARM_STATE_BUTTON		GUI_ID_USER + 3
     97          
     98          #define	LEFT_BUTTON_LEFT		25
     99          #define	RIGHT_BUTTON_LEFT		284
    100          #define	ANA_BUTTON_WIDTH		180
    101          #define	ANA_BUTTON_HEIGHT		53
    102          #define	TOP_BUTTON_ROW			76
    103          #define	SECOND_BUTTON_ROW		138
    104          #define	THIRD_BUTTON_ROW		200
    105          
    106          /*********************************************************************
    107          *
    108          *       Local Variables
    109          *
    110          **********************************************************************
    111          */
    112          static WM_HWIN hDigitalInputSettings;

   \                                 In section .bss, align 4
    113          static BUTTON_Handle hLED1Button, hLED2Button, hAlarmStateButton;
   \                     hLED1Button:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4

   \                                 In section .bss, align 4
    114          static void *pRenameHigh = 0;
   \                     pRenameHigh:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
    115          static void *pRenameLow = 0;
    116          static void *pRenameInput = 0;
    117          
    118          /*********************************************************************
    119          *
    120          *       Public code
    121          *
    122          **********************************************************************
    123          */

   \                                 In section .text, align 4, keep-with-next
    124          WM_HWIN GetDigitalInputSettingsWindowHandle(void)
    125          {
    126          	return hDigitalInputSettings;
   \                     GetDigitalInputSettingsWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable18
   \   00000004   3C0090E5           LDR      R0,[R0, #+60]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    127          }
    128          

   \                                 In section .text, align 4, keep-with-next
    129          void SetDigitalInputSettingsWindowHandle(WM_HWIN hWin)
    130          {
    131          	hDigitalInputSettings = hWin;
   \                     SetDigitalInputSettingsWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable18
   \   00000004   3C0081E5           STR      R0,[R1, #+60]
    132          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    133          

   \                                 In section .text, align 4, keep-with-next
    134          void DigitalInputSettingsCallback(WM_MESSAGE * pMsg)
    135          {
   \                     DigitalInputSettingsCallback:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    136          	int NCode, Id;
    137          
    138          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   010050E2           SUBS     R0,R0,#+1
   \   00000010   6300000A           BEQ      ??DigitalInputSettingsCallback_0
   \   00000014   0E0050E2           SUBS     R0,R0,#+14
   \   00000018   1A00000A           BEQ      ??DigitalInputSettingsCallback_1
   \   0000001C   0C0040E2           SUB      R0,R0,#+12
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   0400009A           BLS      ??DigitalInputSettingsCallback_2
   \   00000028   0B0050E2           SUBS     R0,R0,#+11
   \   0000002C   2200000A           BEQ      ??DigitalInputSettingsCallback_3
   \   00000030   ED0050E2           SUBS     R0,R0,#+237
   \   00000034   0800000A           BEQ      ??DigitalInputSettingsCallback_4
   \   00000038   570000EA           B        ??DigitalInputSettingsCallback_5
    139          	{
    140          		case KB_CANCEL_MSG:
    141          		case KB_SAVE_AND_EXIT_MSG:
    142          			DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetLastScreen(INPUTS_SCREENS_TYPE), hDigitalInputSettings);
   \                     ??DigitalInputSettingsCallback_2:
   \   0000003C   0A00A0E3           MOV      R0,#+10
   \   00000040   ........           BL       GetLastScreen
   \   00000044   ........           LDR      R1,??DataTable18
   \   00000048   1040BDE8           POP      {R4,LR}
   \   0000004C   3C2091E5           LDR      R2,[R1, #+60]
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   0A00A0E3           MOV      R0,#+10
   \   00000058   ........           B        DisplayNewScreenList  ;; tailcall
    143          			break;
    144          
    145          		case WM_TIMER:
    146          			if (pMsg->Data.v == hScreenTimer)
   \                     ??DigitalInputSettingsCallback_4:
   \   0000005C   ........           LDR      R0,??DataTable18_1
   \   00000060   0C1094E5           LDR      R1,[R4, #+12]
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   000051E1           CMP      R1,R0
   \   0000006C   4C00001A           BNE      ??DigitalInputSettingsCallback_0
    147          			{
    148          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000070   7D10A0E3           MOV      R1,#+125
   \   00000074   ........           BL       WM_RestartTimer
    149          // Do not display icons on these screens - there is not enough room
    150          //				WM_InvalidateRect(pMsg->hWin, &SignalStrengthRect);
    151          				WM_InvalidateRect(pMsg->hWin, &InfoTimeRect);
   \   00000078   040094E5           LDR      R0,[R4, #+4]
   \   0000007C   1040BDE8           POP      {R4,LR}
   \   00000080   ........           LDR      R1,??DataTable18_2
   \   00000084   ........           B        WM_InvalidateRect  ;; tailcall
    152          			}
    153          			break;
    154          
    155          		case WM_CREATE:
    156          			DigitalInputSettingsIgnoreNextKeyRelease();
    157          			break;
    158          
    159          		case WM_PAINT:
    160          			if (GetScreenType() == DIGITAL_SETTINGS_SCREEN_TYPE)
   \                     ??DigitalInputSettingsCallback_1:
   \   00000088   ........           BL       GetScreenType
   \   0000008C   100050E3           CMP      R0,#+16
   \   00000090   4300001A           BNE      ??DigitalInputSettingsCallback_0
    161          			{
    162          				// Call paint method of center screen
    163          				DigitalInputSettingsScreenList[GetLastScreen(DIGITAL_SETTINGS_SCREEN_TYPE)].paint(hDigitalInputSettings);
   \   00000094   ........           BL       GetLastScreen
   \   00000098   0010A0E1           MOV      R1,R0
   \   0000009C   ........           LDR      R2,??DataTable18
   \   000000A0   0C30A0E3           MOV      R3,#+12
   \   000000A4   932121E0           MLA      R1,R3,R1,R2
   \   000000A8   3C0092E5           LDR      R0,[R2, #+60]
   \   000000AC   081091E5           LDR      R1,[R1, #+8]
   \   000000B0   31FF2FE1           BLX      R1
    164          				// Call paint method of next screen (so it is valid for peeking)
    165          	// Do not display icons on these screens - there is not enough room
    166          	//			DrawSignalStrength();
    167          				DrawInfo();
   \   000000B4   1040BDE8           POP      {R4,LR}
   \   000000B8   ........           B        DrawInfo         ;; tailcall
    168          			}
    169          			break;
    170          
    171          		case WM_NOTIFY_PARENT:
    172          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??DigitalInputSettingsCallback_3:
   \   000000BC   080094E5           LDR      R0,[R4, #+8]
   \   000000C0   ........           BL       WM_GetId
    173          			NCode = pMsg->Data.v;				// Notification code
    174          			switch (NCode)
   \   000000C4   0C1094E5           LDR      R1,[R4, #+12]
   \   000000C8   020051E3           CMP      R1,#+2
   \   000000CC   3400001A           BNE      ??DigitalInputSettingsCallback_0
    175          			{
    176          				case WM_NOTIFICATION_RELEASED:
    177          					switch (Id)
   \   000000D0   010040E2           SUB      R0,R0,#+1
   \   000000D4   800E50E2           SUBS     R0,R0,#+2048
   \   000000D8   0400000A           BEQ      ??DigitalInputSettingsCallback_6
   \   000000DC   010050E2           SUBS     R0,R0,#+1
   \   000000E0   0D00000A           BEQ      ??DigitalInputSettingsCallback_7
   \   000000E4   010050E2           SUBS     R0,R0,#+1
   \   000000E8   1600000A           BEQ      ??DigitalInputSettingsCallback_8
   \   000000EC   260000EA           B        ??DigitalInputSettingsCallback_9
    178          					{
    179          						case LED_1_BUTTON:
    180          							if (vehicleData.digitalInput[globalInput].EnableLED1)
   \                     ??DigitalInputSettingsCallback_6:
   \   000000F0   ........           LDR      R0,??DataTable18_3
   \   000000F4   ........           LDR      R2,??DataTable18_4
   \   000000F8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000FC   2F10A0E3           MOV      R1,#+47
   \   00000100   812000E1           SMLABB   R0,R1,R0,R2
   \   00000104   A511D0E5           LDRB     R1,[R0, #+421]
   \   00000108   000051E3           CMP      R1,#+0
    181          								vehicleData.digitalInput[globalInput].EnableLED1 = false;
   \   0000010C   0010A013           MOVNE    R1,#+0
   \   00000110   0110A003           MOVEQ    R1,#+1
   \   00000114   A511C0E5           STRB     R1,[R0, #+421]
   \   00000118   1B0000EA           B        ??DigitalInputSettingsCallback_9
    182          							else vehicleData.digitalInput[globalInput].EnableLED1 = true;
    183          							break;
    184          
    185          						case LED_2_BUTTON:
    186          							if (vehicleData.digitalInput[globalInput].EnableLED2)
   \                     ??DigitalInputSettingsCallback_7:
   \   0000011C   ........           LDR      R0,??DataTable18_3
   \   00000120   ........           LDR      R2,??DataTable18_4
   \   00000124   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000128   2F10A0E3           MOV      R1,#+47
   \   0000012C   812000E1           SMLABB   R0,R1,R0,R2
   \   00000130   A611D0E5           LDRB     R1,[R0, #+422]
   \   00000134   000051E3           CMP      R1,#+0
    187          								vehicleData.digitalInput[globalInput].EnableLED2 = false;
   \   00000138   0010A013           MOVNE    R1,#+0
   \   0000013C   0110A003           MOVEQ    R1,#+1
   \   00000140   A611C0E5           STRB     R1,[R0, #+422]
   \   00000144   100000EA           B        ??DigitalInputSettingsCallback_9
    188          							else vehicleData.digitalInput[globalInput].EnableLED2 = true;
    189          							break;
    190          
    191          						case ALARM_STATE_BUTTON:
    192          							if (vehicleData.digitalInput[globalInput].alarmTriggerState == DI_DISABLED)
   \                     ??DigitalInputSettingsCallback_8:
   \   00000148   ........           LDR      R0,??DataTable18_3
   \   0000014C   ........           LDR      R2,??DataTable18_4
   \   00000150   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000154   2F10A0E3           MOV      R1,#+47
   \   00000158   0030E0E3           MVN      R3,#+0
   \   0000015C   812000E1           SMLABB   R0,R1,R0,R2
   \   00000160   691FA0E3           MOV      R1,#+420
   \   00000164   D02091E1           LDRSB    R2,[R1, +R0]
   \   00000168   030052E1           CMP      R2,R3
   \   0000016C   0200001A           BNE      ??DigitalInputSettingsCallback_10
    193          								vehicleData.digitalInput[globalInput].alarmTriggerState = DI_OFF;
   \   00000170   0020A0E3           MOV      R2,#+0
   \                     ??DigitalInputSettingsCallback_11:
   \   00000174   0020C1E7           STRB     R2,[R1, +R0]
   \   00000178   030000EA           B        ??DigitalInputSettingsCallback_9
    194          							else if (vehicleData.digitalInput[globalInput].alarmTriggerState == DI_OFF)
   \                     ??DigitalInputSettingsCallback_10:
   \   0000017C   000052E3           CMP      R2,#+0
    195          								vehicleData.digitalInput[globalInput].alarmTriggerState = DI_ON;
   \   00000180   0120A003           MOVEQ    R2,#+1
   \   00000184   FAFFFF0A           BEQ      ??DigitalInputSettingsCallback_11
    196          							else vehicleData.digitalInput[globalInput].alarmTriggerState = DI_DISABLED;
   \   00000188   0030C1E7           STRB     R3,[R1, +R0]
    197          							break;
    198          					}
    199          
    200          					WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \                     ??DigitalInputSettingsCallback_9:
   \   0000018C   080094E5           LDR      R0,[R4, #+8]
   \   00000190   ........           BL       WM_GetParent
   \   00000194   1040BDE8           POP      {R4,LR}
   \   00000198   ........           B        WM_InvalidateWindow  ;; tailcall
    201          					break;
    202          			}
    203          			break;
    204          
    205          		default:
    206          			WM_DefaultProc(pMsg);
   \                     ??DigitalInputSettingsCallback_5:
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       WM_DefaultProc
    207          	}
    208          }
   \                     ??DigitalInputSettingsCallback_0:
   \   000001A4   1080BDE8           POP      {R4,PC}          ;; return
    209          
    210          
    211          

   \                                 In section .text, align 4, keep-with-next
    212          void DigDisplayAlarm(WM_HWIN hParent)
    213          {
   \                     DigDisplayAlarm:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    214          	hLED1Button = BUTTON_CreateEx(LEFT_BUTTON_LEFT, TOP_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, LED_1_BUTTON);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   800E80E3           ORR      R0,R0,#0x800
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   08008DE5           STR      R0,[SP, #+8]
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   04008DE5           STR      R0,[SP, #+4]
   \   00000028   00408DE5           STR      R4,[SP, #+0]
   \   0000002C   3530A0E3           MOV      R3,#+53
   \   00000030   B420A0E3           MOV      R2,#+180
   \   00000034   4C10A0E3           MOV      R1,#+76
   \   00000038   1900A0E3           MOV      R0,#+25
   \   0000003C   ........           BL       BUTTON_CreateEx
   \   00000040   ........           LDR      R5,??DataTable18_5
    215          	BUTTON_SetBitmap(hLED1Button, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   00000044   ........           LDR      R6,??DataTable18_6
   \   00000048   000085E5           STR      R0,[R5, #+0]
   \   0000004C   0620A0E1           MOV      R2,R6
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   ........           BL       BUTTON_SetBitmap
    216          	BUTTON_SetSkinClassic(hLED1Button);
   \   00000058   000095E5           LDR      R0,[R5, #+0]
   \   0000005C   ........           BL       BUTTON_SetSkinClassic
    217          
    218          	hLED2Button = BUTTON_CreateEx(LEFT_BUTTON_LEFT, SECOND_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, LED_2_BUTTON);
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   800E80E3           ORR      R0,R0,#0x800
   \   00000068   0C008DE5           STR      R0,[SP, #+12]
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   08008DE5           STR      R0,[SP, #+8]
   \   00000074   0200A0E3           MOV      R0,#+2
   \   00000078   04008DE5           STR      R0,[SP, #+4]
   \   0000007C   00408DE5           STR      R4,[SP, #+0]
   \   00000080   3530A0E3           MOV      R3,#+53
   \   00000084   B420A0E3           MOV      R2,#+180
   \   00000088   8A10A0E3           MOV      R1,#+138
   \   0000008C   1900A0E3           MOV      R0,#+25
   \   00000090   ........           BL       BUTTON_CreateEx
   \   00000094   040085E5           STR      R0,[R5, #+4]
    219          	BUTTON_SetBitmap(hLED2Button, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   00000098   0620A0E1           MOV      R2,R6
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   ........           BL       BUTTON_SetBitmap
    220          	BUTTON_SetSkinClassic(hLED2Button);
   \   000000A4   040095E5           LDR      R0,[R5, #+4]
   \   000000A8   ........           BL       BUTTON_SetSkinClassic
    221          
    222          	hAlarmStateButton = BUTTON_CreateEx(RIGHT_BUTTON_LEFT, TOP_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, ALARM_STATE_BUTTON);
   \   000000AC   0300A0E3           MOV      R0,#+3
   \   000000B0   800E80E3           ORR      R0,R0,#0x800
   \   000000B4   0C008DE5           STR      R0,[SP, #+12]
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   08008DE5           STR      R0,[SP, #+8]
   \   000000C0   0200A0E3           MOV      R0,#+2
   \   000000C4   04008DE5           STR      R0,[SP, #+4]
   \   000000C8   00408DE5           STR      R4,[SP, #+0]
   \   000000CC   3530A0E3           MOV      R3,#+53
   \   000000D0   B420A0E3           MOV      R2,#+180
   \   000000D4   4C10A0E3           MOV      R1,#+76
   \   000000D8   470FA0E3           MOV      R0,#+284
   \   000000DC   ........           BL       BUTTON_CreateEx
   \   000000E0   080085E5           STR      R0,[R5, #+8]
    223          	BUTTON_SetBitmap(hAlarmStateButton, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   000000E4   0620A0E1           MOV      R2,R6
   \   000000E8   0010A0E3           MOV      R1,#+0
   \   000000EC   ........           BL       BUTTON_SetBitmap
    224          	BUTTON_SetTextColor(hAlarmStateButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000000F0   FF44E0E3           MVN      R4,#-16777216
   \   000000F4   0420A0E1           MOV      R2,R4
   \   000000F8   0010A0E3           MOV      R1,#+0
   \   000000FC   080095E5           LDR      R0,[R5, #+8]
   \   00000100   ........           BL       BUTTON_SetTextColor
    225          	BUTTON_SetTextColor(hAlarmStateButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000104   0420A0E1           MOV      R2,R4
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   080095E5           LDR      R0,[R5, #+8]
   \   00000110   ........           BL       BUTTON_SetTextColor
    226          	BUTTON_SetSkinClassic(hAlarmStateButton);
   \   00000114   080095E5           LDR      R0,[R5, #+8]
   \   00000118   10D08DE2           ADD      SP,SP,#+16
   \   0000011C   7040BDE8           POP      {R4-R6,LR}
   \   00000120   ........           B        BUTTON_SetSkinClassic  ;; tailcall
    227          }
    228          

   \                                 In section .text, align 4, keep-with-next
    229          void DigAlarmPaint(WM_HWIN hParent)
    230          {
   \                     DigAlarmPaint:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    231          	//char scratch[30];
    232          	GUI_CONST_STORAGE GUI_BITMAP *pBanner;
    233          
    234          	GUI_SetFont(&GUI_Font24_ASCII);
   \   00000004   ........           LDR      R0,??DataTable18_7
   \   00000008   ........           BL       GUI_SetFont
    235          	GUI_SetColor(GUI_WHITE);
   \   0000000C   FF44E0E3           MVN      R4,#-16777216
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       GUI_SetColor
    236          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   ........           BL       GUI_SetTextMode
    237          
    238          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   ........           LDR      R0,??DataTable18_8
   \   0000002C   ........           BL       GUI_DrawBitmap
    239          	//sprintf(scratch, "Edit Alarm %d", globalInput + 4);
    240          	//GUI_DispStringHCenterAt(scratch, XSIZE_PHYS/2, 7);
    241          	switch (globalInput)
   \   00000030   ........           LDR      R5,??DataTable18_3
    242          	{
    243          	default:
    244          	case 0:	pBanner = &bm4;	break;
    245          	case 1:	pBanner = &bm5;	break;
    246          	}
    247          	GUI_DrawBitmap(&bmDigital, 0, 0);
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   010050E3           CMP      R0,#+1
   \   00000044   ........           LDRNE    R6,??DataTable18_9
   \   00000048   ........           LDREQ    R6,??DataTable18_10
   \   0000004C   ........           LDR      R0,??DataTable18_11
   \   00000050   ........           BL       GUI_DrawBitmap
    248          	GUI_DrawBitmap(pBanner, 224, 0);
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   E010A0E3           MOV      R1,#+224
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   ........           BL       GUI_DrawBitmap
    249          	GUI_DrawBitmap(&bmDigitalAlarm, 250, 0);
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   FA10A0E3           MOV      R1,#+250
   \   0000006C   ........           LDR      R0,??DataTable18_12
   \   00000070   ........           BL       GUI_DrawBitmap
    250          
    251          	GUI_DispStringHCenterAt("Alarm Indicator", LEFT_BUTTON_LEFT + (ANA_BUTTON_WIDTH/2), TOP_BUTTON_ROW - 28);
   \   00000074   3020A0E3           MOV      R2,#+48
   \   00000078   7310A0E3           MOV      R1,#+115
   \   0000007C   ........           ADR      R0,`?<Constant "Alarm Indicator">`
   \   00000080   ........           BL       GUI_DispStringHCenterAt
    252          	GUI_DispStringHCenterAt("Alarm State", RIGHT_BUTTON_LEFT + (ANA_BUTTON_WIDTH/2), TOP_BUTTON_ROW - 28);
   \   00000084   7610A0E3           MOV      R1,#+118
   \   00000088   3020A0E3           MOV      R2,#+48
   \   0000008C   401F81E3           ORR      R1,R1,#0x100
   \   00000090   ........           ADR      R0,`?<Constant "Alarm State">`
   \   00000094   ........           BL       GUI_DispStringHCenterAt
    253          
    254          	if (vehicleData.digitalInput[globalInput].EnableLED1)
   \   00000098   0010D5E5           LDRB     R1,[R5, #+0]
   \   0000009C   ........           LDR      R8,??DataTable18_4
   \   000000A0   2F70A0E3           MOV      R7,#+47
   \   000000A4   878101E1           SMLABB   R1,R7,R1,R8
   \   000000A8   ........           LDR      R6,??DataTable18_5
   \   000000AC   A511D1E5           LDRB     R1,[R1, #+421]
   \   000000B0   000096E5           LDR      R0,[R6, #+0]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   0800000A           BEQ      ??DigAlarmPaint_0
    255          	{
    256          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_UNPRESSED, GUI_RED);
   \   000000BC   FF20A0E3           MOV      R2,#+255
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   ........           BL       BUTTON_SetTextColor
    257          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_PRESSED, GUI_RED);
   \   000000C8   FF20A0E3           MOV      R2,#+255
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   000096E5           LDR      R0,[R6, #+0]
   \   000000D4   ........           BL       BUTTON_SetTextColor
    258          		BUTTON_SetText(hLED1Button, "LED 1 Enabled");
   \   000000D8   ........           ADR      R1,`?<Constant "LED 1 Enabled">`
   \   000000DC   060000EA           B        ??DigAlarmPaint_1
    259          	}
    260          	else
    261          	{
    262          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \                     ??DigAlarmPaint_0:
   \   000000E0   0420A0E1           MOV      R2,R4
   \   000000E4   ........           BL       BUTTON_SetTextColor
    263          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000000E8   0420A0E1           MOV      R2,R4
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   000096E5           LDR      R0,[R6, #+0]
   \   000000F4   ........           BL       BUTTON_SetTextColor
    264          		BUTTON_SetText(hLED1Button, "LED 1 Disabled");
   \   000000F8   ........           ADR      R1,`?<Constant "LED 1 Disabled">`
   \                     ??DigAlarmPaint_1:
   \   000000FC   000096E5           LDR      R0,[R6, #+0]
   \   00000100   ........           BL       BUTTON_SetText
    265          	}
    266          
    267          	if (vehicleData.digitalInput[globalInput].EnableLED2)
   \   00000104   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000108   040096E5           LDR      R0,[R6, #+4]
   \   0000010C   878101E1           SMLABB   R1,R7,R1,R8
   \   00000110   A611D1E5           LDRB     R1,[R1, #+422]
   \   00000114   000051E3           CMP      R1,#+0
   \   00000118   0800000A           BEQ      ??DigAlarmPaint_2
    268          	{
    269          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_UNPRESSED, GUI_RED);
   \   0000011C   FF20A0E3           MOV      R2,#+255
   \   00000120   0010A0E3           MOV      R1,#+0
   \   00000124   ........           BL       BUTTON_SetTextColor
    270          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_PRESSED, GUI_RED);
   \   00000128   FF20A0E3           MOV      R2,#+255
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   040096E5           LDR      R0,[R6, #+4]
   \   00000134   ........           BL       BUTTON_SetTextColor
    271          		BUTTON_SetText(hLED2Button, "LED 2 Enabled");
   \   00000138   ........           ADR      R1,`?<Constant "LED 2 Enabled">`
   \   0000013C   060000EA           B        ??DigAlarmPaint_3
    272          	}
    273          	else
    274          	{
    275          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \                     ??DigAlarmPaint_2:
   \   00000140   0420A0E1           MOV      R2,R4
   \   00000144   ........           BL       BUTTON_SetTextColor
    276          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000148   0420A0E1           MOV      R2,R4
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   040096E5           LDR      R0,[R6, #+4]
   \   00000154   ........           BL       BUTTON_SetTextColor
    277          		BUTTON_SetText(hLED2Button, "LED 2 Disabled");
   \   00000158   ........           ADR      R1,`?<Constant "LED 2 Disabled">`
   \                     ??DigAlarmPaint_3:
   \   0000015C   040096E5           LDR      R0,[R6, #+4]
   \   00000160   ........           BL       BUTTON_SetText
    278          	}
    279          
    280          	switch (vehicleData.digitalInput[globalInput].alarmTriggerState)
   \   00000164   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000168   878000E1           SMLABB   R0,R7,R0,R8
   \   0000016C   691F80E2           ADD      R1,R0,#+420
   \   00000170   D010D1E1           LDRSB    R1,[R1, #+0]
   \   00000174   000051E3           CMP      R1,#+0
   \   00000178   0700000A           BEQ      ??DigAlarmPaint_4
   \   0000017C   011051E2           SUBS     R1,R1,#+1
   \   00000180   0300000A           BEQ      ??DigAlarmPaint_5
   \   00000184   021091E2           ADDS     R1,R1,#+2
   \   00000188   0800001A           BNE      ??DigAlarmPaint_6
    281          	{
    282          	case DI_DISABLED:
    283          		BUTTON_SetText(hAlarmStateButton, "Disabled");
   \   0000018C   ........           ADR      R1,`?<Constant "Disabled">`
   \   00000190   040000EA           B        ??DigAlarmPaint_7
    284          		break;
    285          	case DI_ON:
    286          		BUTTON_SetText(hAlarmStateButton, vehicleData.digitalInput[globalInput].HighName);
   \                     ??DigAlarmPaint_5:
   \   00000194   8910A0E3           MOV      R1,#+137
   \   00000198   000000EA           B        ??DigAlarmPaint_8
    287          		break;
    288          	case DI_OFF:
    289          		BUTTON_SetText(hAlarmStateButton, vehicleData.digitalInput[globalInput].LowName);
   \                     ??DigAlarmPaint_4:
   \   0000019C   9610A0E3           MOV      R1,#+150
   \                     ??DigAlarmPaint_8:
   \   000001A0   401F81E3           ORR      R1,R1,#0x100
   \   000001A4   001081E0           ADD      R1,R1,R0
   \                     ??DigAlarmPaint_7:
   \   000001A8   080096E5           LDR      R0,[R6, #+8]
   \   000001AC   ........           BL       BUTTON_SetText
    290          		break;
    291          	}
    292          	GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \                     ??DigAlarmPaint_6:
   \   000001B0   F041BDE8           POP      {R4-R8,LR}
   \   000001B4   E520A0E3           MOV      R2,#+229
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   ........           LDR      R0,??DataTable18_13
   \   000001C0   ........           B        GUI_DrawBitmap   ;; tailcall
    293          }
    294          
    295          

   \                                 In section .text, align 4, keep-with-next
    296          void DigDisplayRenameInput(WM_HWIN hParent)
    297          {
   \                     DigDisplayRenameInput:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
    298          	char scratch[30];
    299          
    300          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    301          	//if (pRenameInput)
    302          	//	DestroyKeyboard(pRenameInput);
    303          	sprintf(scratch, "Rename Input %d", globalInput + 4);
   \   00000010   ........           LDR      R5,??DataTable18_3
   \   00000014   ........           ADR      R1,`?<Constant "Rename Input %d">`
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   042080E2           ADD      R2,R0,#+4
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           BL       sprintf
    304          	pRenameInput = CreateKeyboard(scratch, vehicleData.digitalInput[globalInput].Name, ALPHA, false, IONAMELEN, DIG_RENAME_INPUT, hParent, true);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   0C00A0E3           MOV      R0,#+12
   \   00000038   00008DE5           STR      R0,[SP, #+0]
   \   0000003C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000040   ........           LDR      R12,??DataTable18_4
   \   00000044   2F10A0E3           MOV      R1,#+47
   \   00000048   81C000E1           SMLABB   R0,R1,R0,R12
   \   0000004C   08408DE5           STR      R4,[SP, #+8]
   \   00000050   5E1F80E2           ADD      R1,R0,#+376
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   0120A0E3           MOV      R2,#+1
   \   0000005C   10008DE2           ADD      R0,SP,#+16
   \   00000060   ........           BL       CreateKeyboard
   \   00000064   ........           LDR      R1,??DataTable18_14
    305          }
   \   00000068   34D08DE2           ADD      SP,SP,#+52
   \   0000006C   080081E5           STR      R0,[R1, #+8]
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    306          
    307          

   \                                 In section .text, align 4, keep-with-next
    308          void DigRenameInputPaint(WM_HWIN hParent)
    309          {
    310          }
   \                     DigRenameInputPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    311          

   \                                 In section .text, align 4, keep-with-next
    312          void DisplayRenameHigh(WM_HWIN hParent)
    313          {
   \                     DisplayRenameHigh:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
    314          	char scratch[30];
    315          
    316          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    317          	//if (pRenameHigh)
    318          	//	DestroyKeyboard(pRenameHigh);
    319          	sprintf(scratch, "Rename High %d", globalInput + 4);
   \   00000010   ........           LDR      R5,??DataTable18_3
   \   00000014   ........           ADR      R1,`?<Constant "Rename High %d">`
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   042080E2           ADD      R2,R0,#+4
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           BL       sprintf
    320          	pRenameHigh = CreateKeyboard(scratch, vehicleData.digitalInput[globalInput].HighName, ALPHA, false, MAX_HILO_NAME, DIG_RENAME_HIGH, hParent, true);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
   \   00000030   0200A0E3           MOV      R0,#+2
   \   00000034   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   \   0000003C   ........           LDR      LR,??DataTable18_4
   \   00000040   0C00A0E3           MOV      R0,#+12
   \   00000044   2FC0A0E3           MOV      R12,#+47
   \   00000048   00008DE5           STR      R0,[SP, #+0]
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   8CE101E1           SMLABB   R1,R12,R1,LR
   \   00000054   620F82E3           ORR      R0,R2,#0x188
   \   00000058   011080E0           ADD      R1,R0,R1
   \   0000005C   08408DE5           STR      R4,[SP, #+8]
   \   00000060   0030A0E3           MOV      R3,#+0
   \   00000064   10008DE2           ADD      R0,SP,#+16
   \   00000068   ........           BL       CreateKeyboard
   \   0000006C   ........           LDR      R1,??DataTable18_14
    321          }
   \   00000070   34D08DE2           ADD      SP,SP,#+52
   \   00000074   000081E5           STR      R0,[R1, #+0]
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
    322          

   \                                 In section .text, align 4, keep-with-next
    323          void RenameHighPaint(WM_HWIN hParent)
    324          {
    325          }
   \                     RenameHighPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    326          

   \                                 In section .text, align 4, keep-with-next
    327          void DisplayRenameLow(WM_HWIN hParent)
    328          {
   \                     DisplayRenameLow:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
    329          	char scratch[30];
    330          
    331          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    332          	//if (pRenameLow)
    333          	//	DestroyKeyboard(pRenameLow);
    334          	sprintf(scratch, "Rename Low %d", globalInput + 4);
   \   00000010   ........           LDR      R5,??DataTable18_3
   \   00000014   ........           ADR      R1,`?<Constant "Rename Low %d">`
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   042080E2           ADD      R2,R0,#+4
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           BL       sprintf
    335          	pRenameLow = CreateKeyboard(scratch, vehicleData.digitalInput[globalInput].LowName, ALPHA, false, MAX_HILO_NAME, DIG_RENAME_LOW, hParent, true);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
   \   00000030   0300A0E3           MOV      R0,#+3
   \   00000034   04008DE5           STR      R0,[SP, #+4]
   \   00000038   0010D5E5           LDRB     R1,[R5, #+0]
   \   0000003C   0C00A0E3           MOV      R0,#+12
   \   00000040   ........           LDR      LR,??DataTable18_4
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   2FC0A0E3           MOV      R12,#+47
   \   0000004C   9600A0E3           MOV      R0,#+150
   \   00000050   8CE101E1           SMLABB   R1,R12,R1,LR
   \   00000054   400F80E3           ORR      R0,R0,#0x100
   \   00000058   011080E0           ADD      R1,R0,R1
   \   0000005C   08408DE5           STR      R4,[SP, #+8]
   \   00000060   0030A0E3           MOV      R3,#+0
   \   00000064   0120A0E3           MOV      R2,#+1
   \   00000068   10008DE2           ADD      R0,SP,#+16
   \   0000006C   ........           BL       CreateKeyboard
   \   00000070   ........           LDR      R1,??DataTable18_14
    336          }
   \   00000074   34D08DE2           ADD      SP,SP,#+52
   \   00000078   040081E5           STR      R0,[R1, #+4]
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
    337          

   \                                 In section .text, align 4, keep-with-next
    338          void RenameLowPaint(WM_HWIN hParent)
    339          {
    340          }
   \                     RenameLowPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    341          
    342          

   \                                 In section .text, align 4, keep-with-next
    343          void DigitalInputSettingsIgnoreNextKeyRelease(void)
    344          {
    345          //	clickedOnThisScreen = false;
    346          }
   \                     DigitalInputSettingsIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    347          

   \                                 In section .text, align 4, keep-with-next
    348          void DeleteDigitalKeyboards(void)
    349          {
   \                     DeleteDigitalKeyboards:
   \   00000000   10402DE9           PUSH     {R4,LR}
    350          	if (pRenameHigh)
   \   00000004   ........           LDR      R4,??DataTable18_14
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??DeleteDigitalKeyboards_0
    351          	{
    352          		DestroyKeyboard(pRenameHigh);
   \   00000014   ........           BL       DestroyKeyboard
    353          		pRenameHigh = 0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   000084E5           STR      R0,[R4, #+0]
    354          	}
    355          	if (pRenameLow)
   \                     ??DeleteDigitalKeyboards_0:
   \   00000020   040094E5           LDR      R0,[R4, #+4]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??DeleteDigitalKeyboards_1
    356          	{
    357          		DestroyKeyboard(pRenameLow);
   \   0000002C   ........           BL       DestroyKeyboard
    358          		pRenameLow = 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   040084E5           STR      R0,[R4, #+4]
    359          	}
    360          	if (pRenameInput)
   \                     ??DeleteDigitalKeyboards_1:
   \   00000038   080094E5           LDR      R0,[R4, #+8]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0200000A           BEQ      ??DeleteDigitalKeyboards_2
    361          	{
    362          		DestroyKeyboard(pRenameInput);
   \   00000044   ........           BL       DestroyKeyboard
    363          		pRenameInput = 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   080084E5           STR      R0,[R4, #+8]
    364          	}
    365          }
   \                     ??DeleteDigitalKeyboards_2:
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     DigitalInputSettingsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   ........           DC32     InfoTimeRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   ........           DC32     globalInput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   ........           DC32     hLED1Button

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   ........           DC32     bmMiniButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   ........           DC32     bm4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \   00000000   ........           DC32     bm5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \   00000000   ........           DC32     bmDigital

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \   00000000   ........           DC32     bmDigitalAlarm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \   00000000   ........           DC32     pRenameHigh

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm Indicator">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 73, 110, 100, 105
   \              496E6469    
   \   0000000A   6361746F7200       DC8 99, 97, 116, 111, 114, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm State">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 83, 116, 97, 116
   \              53746174    
   \   0000000A   6500               DC8 101, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 1 Enabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203120       DC8 76, 69, 68, 32, 49, 32, 69, 110, 97, 98
   \              456E6162    
   \   0000000A   6C6564000000       DC8 108, 101, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 1 Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203120       DC8 76, 69, 68, 32, 49, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 2 Enabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203220       DC8 76, 69, 68, 32, 50, 32, 69, 110, 97, 98
   \              456E6162    
   \   0000000A   6C6564000000       DC8 108, 101, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 2 Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203220       DC8 76, 69, 68, 32, 50, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Disabled">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   44697361626C       DC8 68, 105, 115, 97, 98, 108, 101, 100, 0, 0
   \              65640000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Input %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 73, 110, 112
   \              20496E70    
   \   0000000A   757420256400       DC8 117, 116, 32, 37, 100, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename High %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 72, 105, 103
   \              20486967    
   \   0000000A   682025640000       DC8 104, 32, 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Low %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 76, 111, 119
   \              204C6F77    
   \   0000000A   202564000000       DC8 32, 37, 100, 0, 0, 0
    366          
    367          /*************************** End of file ****************************/
    368          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     DeleteDigitalKeyboards              8
     DigAlarmPaint                      24
     DigDisplayAlarm                    32
     DigDisplayRenameInput              64
     DigRenameInputPaint                 0
     DigitalInputSettingsCallback        8
     DigitalInputSettingsIgnoreNextKeyRelease
                                         0
     DisplayRenameHigh                  64
     DisplayRenameLow                   64
     GetDigitalInputSettingsWindowHandle
                                         0
     RenameHighPaint                     0
     RenameLowPaint                      0
     SetDigitalInputSettingsWindowHandle
                                         0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     DigitalInputSettingsScreenList   64
     hDigitalInputSettings
     hLED1Button                      12
     hLED2Button
     hAlarmStateButton
     pRenameHigh                      12
     pRenameLow
     pRenameInput
     GetDigitalInputSettingsWindowHandle
                                      12
     SetDigitalInputSettingsWindowHandle
                                      12
     DigitalInputSettingsCallback    424
     DigDisplayAlarm                 292
     DigAlarmPaint                   452
     DigDisplayRenameInput           116
     DigRenameInputPaint               4
     DisplayRenameHigh               124
     RenameHighPaint                   4
     DisplayRenameLow                128
     RenameLowPaint                    4
     DigitalInputSettingsIgnoreNextKeyRelease
                                       4
     DeleteDigitalKeyboards           84
     ??DataTable18                     4
     ??DataTable18_1                   4
     ??DataTable18_2                   4
     ??DataTable18_3                   4
     ??DataTable18_4                   4
     ??DataTable18_5                   4
     ??DataTable18_6                   4
     ??DataTable18_7                   4
     ??DataTable18_8                   4
     ??DataTable18_9                   4
     ??DataTable18_10                  4
     ??DataTable18_11                  4
     ??DataTable18_12                  4
     ??DataTable18_13                  4
     ??DataTable18_14                  4
     ?<Constant "Alarm Indicator">    16
     ?<Constant "Alarm State">        12
     ?<Constant "LED 1 Enabled">      16
     ?<Constant "LED 1 Disabled">     16
     ?<Constant "LED 2 Enabled">      16
     ?<Constant "LED 2 Disabled">     16
     ?<Constant "Disabled">           12
     ?<Constant "Rename Input %d">    16
     ?<Constant "Rename High %d">     16
     ?<Constant "Rename Low %d">      16

 
    24 bytes in section .bss
    64 bytes in section .data
 1 872 bytes in section .text
 
 1 872 bytes of CODE memory
    88 bytes of DATA memory

Errors: none
Warnings: none
