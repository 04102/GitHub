###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_32.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_32.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDRV_Lin_OX_32.lst                                       #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DRV_Lin_OX_32.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_32.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OX_32.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y * (vxSizePhys << 1) + ((U32)x << 1))
     91          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y *  vxSizePhys       +       x      )
     92          
     93          /*********************************************************************
     94          *
     95          *       Types
     96          *
     97          **********************************************************************
     98          */
     99          typedef struct {
    100            U32 VRAMAddr;
    101            int xSize, ySize;
    102            int vxSize, vySize;
    103            int vxSizePhys;
    104            int xPos, yPos;
    105            int Alpha;
    106            int IsVisible;
    107            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    108          } DRIVER_CONTEXT;
    109          
    110          /*********************************************************************
    111          *
    112          *       Static functions
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       _SetPixelIndex
    119          *
    120          * Purpose:
    121          *   Sets the index of the given pixel. The upper layers
    122          *   calling this routine make sure that the coordinates are in range, so
    123          *   that no check on the parameters needs to be performed.
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   00402DE9           PUSH     {LR}
    126            DRIVER_CONTEXT * pContext;
    127            U32 Off;
    128          
    129            //
    130            // Get context
    131            //
    132            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    133            //
    134            // Mirror x
    135            //
    136            x = (pContext->vxSize - 1 - (x));
    137            //
    138            // Write into hardware
    139            //
    140            Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    141            WRITE_MEM32(pContext->VRAMAddr, Off, PixelIndex);
   \   00000008   14C090E5           LDR      R12,[R0, #+20]
   \   0000000C   0CE090E5           LDR      LR,[R0, #+12]
   \   00000010   9CE222E0           MLA      R2,R12,R2,LR
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   012042E2           SUB      R2,R2,#+1
   \   0000001C   011042E0           SUB      R1,R2,R1
   \   00000020   013180E7           STR      R3,[R0, +R1, LSL #+2]
    142          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
    143          
    144          /*********************************************************************
    145          *
    146          *       _GetPixelIndex
    147          *
    148          * Purpose:
    149          *   Returns the index of the given pixel. The upper layers
    150          *   calling this routine make sure that the coordinates are in range, so
    151          *   that no check on the parameters needs to be performed.
    152          */

   \                                 In section .text, align 4, keep-with-next
    153          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    154            DRIVER_CONTEXT * pContext;
    155            U32 Off;
    156            LCD_PIXELINDEX PixelIndex;
    157          
    158            //
    159            // Get context
    160            //
    161            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    162            //
    163            // Mirror x
    164            //
    165            x = (pContext->vxSize - 1 - (x));
    166            //
    167            // Read from hardware
    168            //
    169            Off        = XY2OFF32(pContext->vxSizePhys, x, y);
    170            PixelIndex = READ_MEM32(pContext->VRAMAddr, Off);
    171            return PixelIndex;
   \   00000004   143090E5           LDR      R3,[R0, #+20]
   \   00000008   0CC090E5           LDR      R12,[R0, #+12]
   \   0000000C   93C222E0           MLA      R2,R3,R2,R12
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   011042E0           SUB      R1,R2,R1
   \   0000001C   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   00000020   1EFF2FE1           BX       LR               ;; return
    172          }
    173          
    174          /*********************************************************************
    175          *
    176          *       _XorPixel
    177          */

   \                                 In section .text, align 4, keep-with-next
    178          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    179            LCD_PIXELINDEX PixelIndex;
    180            LCD_PIXELINDEX IndexMask;
    181          
    182            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080096E5           LDR      R0,[R6, #+8]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   141090E5           LDR      R1,[R0, #+20]
   \   00000018   0C2090E5           LDR      R2,[R0, #+12]
   \   0000001C   912522E0           MLA      R2,R1,R5,R2
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   011042E2           SUB      R1,R2,#+1
   \   00000028   041041E0           SUB      R1,R1,R4
   \   0000002C   017190E7           LDR      R7,[R0, +R1, LSL #+2]
    183            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000030   100096E5           LDR      R0,[R6, #+16]
   \   00000034   04D04DE2           SUB      SP,SP,#+4
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   30FF2FE1           BLX      R0
    184            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000040   081096E5           LDR      R1,[R6, #+8]
   \   00000044   070020E0           EOR      R0,R0,R7
   \   00000048   142091E5           LDR      R2,[R1, #+20]
   \   0000004C   0C3091E5           LDR      R3,[R1, #+12]
   \   00000050   923523E0           MLA      R3,R2,R5,R3
   \   00000054   001091E5           LDR      R1,[R1, #+0]
   \   00000058   012043E2           SUB      R2,R3,#+1
   \   0000005C   042042E0           SUB      R2,R2,R4
   \   00000060   020181E7           STR      R0,[R1, +R2, LSL #+2]
    185          }
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   F080BDE8           POP      {R4-R7,PC}       ;; return
    186          
    187          /*********************************************************************
    188          *
    189          *       _DrawHLine
    190          */

   \                                 In section .text, align 4, keep-with-next
    191          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    192            DRIVER_CONTEXT * pContext;
    193            register LCD_PIXELINDEX Color;
    194            U32 * pDest;
    195            U32 Off, RemPixels;
    196            int temp;
    197            LCD_PIXELINDEX ColorIndex;
    198          
    199            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0240A0E1           MOV      R4,R2
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1900000A           BEQ      ??_DrawHLine_0
   \   00000024   060055E1           CMP      R5,R6
   \   00000028   400000BA           BLT      ??_DrawHLine_1
    200              for (; x0 <= x1; x0++) {
    201                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   080097E5           LDR      R0,[R7, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   921421E0           MLA      R1,R2,R4,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   061041E0           SUB      R1,R1,R6
   \   00000048   018190E7           LDR      R8,[R0, +R1, LSL #+2]
   \   0000004C   100097E5           LDR      R0,[R7, #+16]
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   30FF2FE1           BLX      R0
   \   00000058   081097E5           LDR      R1,[R7, #+8]
   \   0000005C   080020E0           EOR      R0,R0,R8
   \   00000060   143091E5           LDR      R3,[R1, #+20]
   \   00000064   0C2091E5           LDR      R2,[R1, #+12]
   \   00000068   932422E0           MLA      R2,R3,R4,R2
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   012042E2           SUB      R2,R2,#+1
   \   00000074   062042E0           SUB      R2,R2,R6
    202              }
   \   00000078   016086E2           ADD      R6,R6,#+1
   \   0000007C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   00000080   060055E1           CMP      R5,R6
   \   00000084   E8FFFFAA           BGE      ??_DrawHLine_2
   \   00000088   F081BDE8           POP      {R4-R8,PC}
    203            } else {
    204              ColorIndex = LCD__GetColorIndex();
    205              //
    206              // Get context
    207              //
    208              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawHLine_0:
   \   0000008C   081097E5           LDR      R1,[R7, #+8]
    209              //
    210              // Mirror x
    211              //
    212              temp = x0;
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0C3091E5           LDR      R3,[R1, #+12]
    213              x0 = (pContext->vxSize - 1 - x1);
    214              x1 = (pContext->vxSize - 1 - temp);
    215              Color = ColorIndex;
    216              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
    217              pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000098   14C091E5           LDR      R12,[R1, #+20]
   \   0000009C   013043E2           SUB      R3,R3,#+1
   \   000000A0   ........           LDR      R0,??DataTable15_1
   \   000000A4   056043E0           SUB      R6,R3,R5
   \   000000A8   9C642EE0           MLA      LR,R12,R4,R6
    218              RemPixels = x1 - x0 + 1;
   \   000000AC   022043E0           SUB      R2,R3,R2
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   001091E5           LDR      R1,[R1, #+0]
   \   000000B8   062042E0           SUB      R2,R2,R6
   \   000000BC   012082E2           ADD      R2,R2,#+1
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   0E1181E0           ADD      R1,R1,LR, LSL #+2
    219              if (RemPixels >= 16) {
   \   000000C8   100052E3           CMP      R2,#+16
   \   000000CC   1200003A           BCC      ??_DrawHLine_3
    220                do {
    221                  WRITE_MEM32P(pDest     , Color);
   \                     ??_DrawHLine_4:
   \   000000D0   040081E4           STR      R0,[R1], #+4
    222                  WRITE_MEM32P(pDest +  1, Color);
   \   000000D4   040081E4           STR      R0,[R1], #+4
    223                  WRITE_MEM32P(pDest +  2, Color);
   \   000000D8   040081E4           STR      R0,[R1], #+4
    224                  WRITE_MEM32P(pDest +  3, Color);
   \   000000DC   040081E4           STR      R0,[R1], #+4
    225                  WRITE_MEM32P(pDest +  4, Color);
   \   000000E0   040081E4           STR      R0,[R1], #+4
    226                  WRITE_MEM32P(pDest +  5, Color);
   \   000000E4   040081E4           STR      R0,[R1], #+4
    227                  WRITE_MEM32P(pDest +  6, Color);
   \   000000E8   040081E4           STR      R0,[R1], #+4
    228                  WRITE_MEM32P(pDest +  7, Color);
   \   000000EC   040081E4           STR      R0,[R1], #+4
    229                  WRITE_MEM32P(pDest +  8, Color);
   \   000000F0   040081E4           STR      R0,[R1], #+4
    230                  WRITE_MEM32P(pDest +  9, Color);
   \   000000F4   040081E4           STR      R0,[R1], #+4
    231                  WRITE_MEM32P(pDest + 10, Color);
   \   000000F8   040081E4           STR      R0,[R1], #+4
    232                  WRITE_MEM32P(pDest + 11, Color);
   \   000000FC   040081E4           STR      R0,[R1], #+4
    233                  WRITE_MEM32P(pDest + 12, Color);
   \   00000100   040081E4           STR      R0,[R1], #+4
    234                  WRITE_MEM32P(pDest + 13, Color);
   \   00000104   040081E4           STR      R0,[R1], #+4
    235                  WRITE_MEM32P(pDest + 14, Color);
   \   00000108   040081E4           STR      R0,[R1], #+4
    236                  WRITE_MEM32P(pDest + 15, Color);
    237                  pDest += 16;
    238                  RemPixels -= 16;
   \   0000010C   102042E2           SUB      R2,R2,#+16
   \   00000110   040081E4           STR      R0,[R1], #+4
    239                } while (RemPixels >= 16);
   \   00000114   100052E3           CMP      R2,#+16
   \   00000118   ECFFFF2A           BCS      ??_DrawHLine_4
    240              }
    241              if (RemPixels) {
   \                     ??_DrawHLine_3:
   \   0000011C   000052E3           CMP      R2,#+0
   \   00000120   0200000A           BEQ      ??_DrawHLine_1
    242                do {
    243                  WRITE_MEM32P(pDest, ColorIndex);
   \                     ??_DrawHLine_5:
   \   00000124   040081E4           STR      R0,[R1], #+4
    244                  pDest++;
    245                } while (--RemPixels);
   \   00000128   012052E2           SUBS     R2,R2,#+1
   \   0000012C   FCFFFF1A           BNE      ??_DrawHLine_5
    246              }
    247            }
    248          }
   \                     ??_DrawHLine_1:
   \   00000130   F081BDE8           POP      {R4-R8,PC}       ;; return
    249          
    250          /*********************************************************************
    251          *
    252          *       _DrawVLine, not optimized
    253          */

   \                                 In section .text, align 4, keep-with-next
    254          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    255            LCD_PIXELINDEX ColorIndex;
    256          
    257            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1900000A           BEQ      ??_DrawVLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   270000BA           BLT      ??_DrawVLine_1
    258              for (; y0 <= y1; y0++) {
    259                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   921721E0           MLA      R1,R2,R7,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   051041E0           SUB      R1,R1,R5
   \   00000048   018190E7           LDR      R8,[R0, +R1, LSL #+2]
   \   0000004C   100094E5           LDR      R0,[R4, #+16]
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   30FF2FE1           BLX      R0
   \   00000058   081094E5           LDR      R1,[R4, #+8]
   \   0000005C   080020E0           EOR      R0,R0,R8
   \   00000060   143091E5           LDR      R3,[R1, #+20]
   \   00000064   0C2091E5           LDR      R2,[R1, #+12]
   \   00000068   932722E0           MLA      R2,R3,R7,R2
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   012042E2           SUB      R2,R2,#+1
   \   00000074   052042E0           SUB      R2,R2,R5
    260              }
   \   00000078   017087E2           ADD      R7,R7,#+1
   \   0000007C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   00000080   070056E1           CMP      R6,R7
   \   00000084   E8FFFFAA           BGE      ??_DrawVLine_2
   \   00000088   F081BDE8           POP      {R4-R8,PC}
    261            } else {
    262              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   0000008C   ........           LDR      R0,??DataTable15_1
   \   00000090   070056E1           CMP      R6,R7
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   0A0000BA           BLT      ??_DrawVLine_1
    263              for (; y0 <= y1; y0++) {
    264                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   000000A0   081094E5           LDR      R1,[R4, #+8]
   \   000000A4   143091E5           LDR      R3,[R1, #+20]
   \   000000A8   0C2091E5           LDR      R2,[R1, #+12]
   \   000000AC   932722E0           MLA      R2,R3,R7,R2
   \   000000B0   001091E5           LDR      R1,[R1, #+0]
   \   000000B4   012042E2           SUB      R2,R2,#+1
   \   000000B8   052042E0           SUB      R2,R2,R5
    265              }
   \   000000BC   017087E2           ADD      R7,R7,#+1
   \   000000C0   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   000000C4   070056E1           CMP      R6,R7
   \   000000C8   F4FFFFAA           BGE      ??_DrawVLine_3
    266            }
    267          }
   \                     ??_DrawVLine_1:
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    268          
    269          /*********************************************************************
    270          *
    271          *       _FillRect
    272          */

   \                                 In section .text, align 4, keep-with-next
    273          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18809DE5           LDR      R8,[SP, #+24]
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   060058E1           CMP      R8,R6
   \   0000001C   070000BA           BLT      ??_FillRect_0
    274            #ifdef LCD_FILL_RECT
    275               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    276            #else
    277              for (; y0 <= y1; y0++) {
    278                _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_1:
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawHLine
    279              }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   060058E1           CMP      R8,R6
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    280            #endif
    281          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    282          
    283          /*********************************************************************
    284          *
    285          *       Draw Bitmap 1 BPP
    286          */

   \                                 In section .text, align 4, keep-with-next
    287          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20709DE5           LDR      R7,[SP, #+32]
   \   00000008   0250A0E1           MOV      R5,R2
    288            DRIVER_CONTEXT * pContext;
    289            LCD_PIXELINDEX Index0, Index1, IndexMask;
    290            U32 * pDest;
    291            U32 Color;
    292            unsigned Pixels, PixelCnt, Off;
    293          
    294            Index0 = *(pTrans + 0);
    295            Index1 = *(pTrans + 1);
    296            //
    297            // Get context
    298            //
    299            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    300            x += Diff;
   \   0000000C   019087E0           ADD      R9,R7,R1
    301            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000010   ........           LDR      R1,??DataTable15
   \   00000014   28209DE5           LDR      R2,[SP, #+40]
   \   00000018   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0360A0E1           MOV      R6,R3
   \   00000024   000092E5           LDR      R0,[R2, #+0]
   \   00000028   031001E2           AND      R1,R1,#0x3
   \   0000002C   24809DE5           LDR      R8,[SP, #+36]
   \   00000030   042092E5           LDR      R2,[R2, #+4]
   \   00000034   083094E5           LDR      R3,[R4, #+8]
   \   00000038   030051E3           CMP      R1,#+3
   \   0000003C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000040   4F00008A           BHI      ??_DrawBitLine1BPP_1
   \   00000044   020000EA           B        ??_DrawBitLine1BPP_2
   \   00000048   300000EA           B        ??_DrawBitLine1BPP_3
   \   0000004C   180000EA           B        ??_DrawBitLine1BPP_4
   \   00000050   2E0000EA           B        ??_DrawBitLine1BPP_3
    302            case 0:
    303              //
    304              // Mirror x
    305              //
    306              x = (pContext->vxSize - 1 - (x));
    307              PixelCnt = 8 - Diff;
    308              Pixels   = LCD_aMirror[*p] >> Diff;
   \                     ??_DrawBitLine1BPP_2:
   \   00000054   00E0D6E5           LDRB     LR,[R6, #+0]
   \   00000058   ........           LDR      R12,??DataTable15_2
   \   0000005C   081067E2           RSB      R1,R7,#+8
   \   00000060   0CE0DEE7           LDRB     LR,[LR, +R12]
    309              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    310              pDest    = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000064   144093E5           LDR      R4,[R3, #+20]
   \   00000068   5EE7A0E1           ASR      LR,LR,R7
   \   0000006C   0C7093E5           LDR      R7,[R3, #+12]
   \   00000070   003093E5           LDR      R3,[R3, #+0]
   \   00000074   017047E2           SUB      R7,R7,#+1
   \   00000078   947525E0           MLA      R5,R4,R5,R7
   \   0000007C   094045E0           SUB      R4,R5,R9
   \   00000080   043183E0           ADD      R3,R3,R4, LSL #+2
    311              do {
    312                Color    = (Pixels & 1) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_5:
   \   00000084   01001EE3           TST      LR,#0x1
   \   00000088   0240A011           MOVNE    R4,R2
   \   0000008C   0040A001           MOVEQ    R4,R0
    313                Pixels >>= 1;
    314                if (--PixelCnt == 0) {
   \   00000090   011051E2           SUBS     R1,R1,#+1
    315                  Pixels = LCD_aMirror[*(++p)];
   \   00000094   0110F605           LDRBEQ   R1,[R6, #+1]!
   \   00000098   AEE0A0E1           LSR      LR,LR,#+1
   \   0000009C   0CE0D107           LDRBEQ   LR,[R1, +R12]
    316                  PixelCnt = 8;
   \   000000A0   0810A003           MOVEQ    R1,#+8
    317                }
    318                WRITE_MEM32P(pDest, Color);
   \   000000A4   044003E4           STR      R4,[R3], #-4
    319                pDest--;
    320              } while (--xsize);
   \   000000A8   018058E2           SUBS     R8,R8,#+1
   \   000000AC   F4FFFF1A           BNE      ??_DrawBitLine1BPP_5
   \   000000B0   F087BDE8           POP      {R4-R10,PC}
    321              break;
    322            case LCD_DRAWMODE_TRANS:
    323              //
    324              // Mirror x
    325              //
    326              x = (pContext->vxSize - 1 - (x));
    327              PixelCnt = 8 - Diff;
    328              Pixels   = LCD_aMirror[*p] >> Diff;
   \                     ??_DrawBitLine1BPP_4:
   \   000000B4   0000D6E5           LDRB     R0,[R6, #+0]
   \   000000B8   ........           LDR      R12,??DataTable15_2
    329              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    330              pDest    = OFF2PTR32(pContext->VRAMAddr, Off);
   \   000000BC   0C4093E5           LDR      R4,[R3, #+12]
   \   000000C0   0C00D0E7           LDRB     R0,[R0, +R12]
   \   000000C4   014044E2           SUB      R4,R4,#+1
   \   000000C8   081067E2           RSB      R1,R7,#+8
   \   000000CC   50E7A0E1           ASR      LR,R0,R7
   \   000000D0   140093E5           LDR      R0,[R3, #+20]
   \   000000D4   003093E5           LDR      R3,[R3, #+0]
   \   000000D8   904524E0           MLA      R4,R0,R5,R4
   \   000000DC   090044E0           SUB      R0,R4,R9
   \   000000E0   003183E0           ADD      R3,R3,R0, LSL #+2
    331              do {
    332                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_6:
   \   000000E4   01001EE3           TST      LR,#0x1
    333                  WRITE_MEM32P(pDest, Index1);
   \   000000E8   00208315           STRNE    R2,[R3, #+0]
    334                }
    335                pDest--;
    336                Pixels >>= 1;
    337                if (--PixelCnt == 0) {
   \   000000EC   011051E2           SUBS     R1,R1,#+1
    338                  Pixels = LCD_aMirror[*(++p)];
   \   000000F0   0100F605           LDRBEQ   R0,[R6, #+1]!
   \   000000F4   AEE0A0E1           LSR      LR,LR,#+1
    339                  PixelCnt = 8;
   \   000000F8   0810A003           MOVEQ    R1,#+8
   \   000000FC   0CE0D007           LDRBEQ   LR,[R0, +R12]
   \   00000100   043043E2           SUB      R3,R3,#+4
    340                }
    341              } while (--xsize);
   \   00000104   018058E2           SUBS     R8,R8,#+1
   \   00000108   F5FFFF1A           BNE      ??_DrawBitLine1BPP_6
   \   0000010C   F087BDE8           POP      {R4-R10,PC}
    342              break;
    343            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    344            case LCD_DRAWMODE_XOR:
    345              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_3:
   \   00000110   100094E5           LDR      R0,[R4, #+16]
   \   00000114   080090E5           LDR      R0,[R0, #+8]
   \   00000118   30FF2FE1           BLX      R0
   \   0000011C   8010A0E3           MOV      R1,#+128
    346              do {
    347                if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_7:
   \   00000120   0020D6E5           LDRB     R2,[R6, #+0]
   \   00000124   510712E1           TST      R2,R1, ASR R7
   \   00000128   0E00000A           BEQ      ??_DrawBitLine1BPP_8
    348                  int Pixel = _GetPixelIndex(pDevice, x, y);
   \   0000012C   082094E5           LDR      R2,[R4, #+8]
    349                  _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
   \   00000130   14A092E5           LDR      R10,[R2, #+20]
   \   00000134   14C092E5           LDR      R12,[R2, #+20]
   \   00000138   0CE092E5           LDR      LR,[R2, #+12]
   \   0000013C   0C3092E5           LDR      R3,[R2, #+12]
   \   00000140   9AE52EE0           MLA      LR,R10,R5,LR
   \   00000144   9C3523E0           MLA      R3,R12,R5,R3
   \   00000148   00C092E5           LDR      R12,[R2, #+0]
   \   0000014C   01E04EE2           SUB      LR,LR,#+1
   \   00000150   09E04EE0           SUB      LR,LR,R9
   \   00000154   0E219CE7           LDR      R2,[R12, +LR, LSL #+2]
   \   00000158   013043E2           SUB      R3,R3,#+1
   \   0000015C   093043E0           SUB      R3,R3,R9
   \   00000160   022020E0           EOR      R2,R0,R2
   \   00000164   03218CE7           STR      R2,[R12, +R3, LSL #+2]
    350                }
    351                x++;
    352                if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_8:
   \   00000168   017087E2           ADD      R7,R7,#+1
   \   0000016C   080057E3           CMP      R7,#+8
    353                  Diff = 0;
   \   00000170   0070A003           MOVEQ    R7,#+0
    354                  p++;
   \   00000174   01608602           ADDEQ    R6,R6,#+1
   \   00000178   019089E2           ADD      R9,R9,#+1
    355                }
    356              } while (--xsize);
   \   0000017C   018058E2           SUBS     R8,R8,#+1
   \   00000180   E6FFFF1A           BNE      ??_DrawBitLine1BPP_7
    357              break;
    358            }
    359          }
   \                     ??_DrawBitLine1BPP_1:
   \   00000184   F087BDE8           POP      {R4-R10,PC}      ;; return
    360          
    361          /*********************************************************************
    362          *
    363          *       Draw Bitmap 2 BPP
    364          */

   \                                 In section .text, align 4, keep-with-next
    365          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   14C09DE5           LDR      R12,[SP, #+20]
   \   0000000C   18E09DE5           LDR      LR,[SP, #+24]
    366            DRIVER_CONTEXT * pContext;
    367            LCD_PIXELINDEX Pixels, PixelIndex;
    368            int CurrentPixel, Shift, Index;
    369            U32 * pDest;
    370            U32 Off;
    371          
    372            if (pTrans == NULL) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3000000A           BEQ      ??_DrawBitLine2BPP_0
    373              return; // pTrans is required
    374            }
    375            //
    376            // Get context
    377            //
    378            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000018   085090E5           LDR      R5,[R0, #+8]
    379            CurrentPixel = Diff;
    380            Pixels       = *p;
   \   0000001C   0000D3E5           LDRB     R0,[R3, #+0]
    381            x           += Diff;
    382            //
    383            // Mirror x
    384            //
    385            x = (pContext->vxSize - 1 - (x));
    386            Off          = XY2OFF32(pContext->vxSizePhys, x, y);
    387            pDest        = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000020   0C7095E5           LDR      R7,[R5, #+12]
   \   00000024   146095E5           LDR      R6,[R5, #+20]
   \   00000028   017047E2           SUB      R7,R7,#+1
   \   0000002C   011047E0           SUB      R1,R7,R1
   \   00000030   0C1041E0           SUB      R1,R1,R12
   \   00000034   961221E0           MLA      R1,R6,R2,R1
   \   00000038   002095E5           LDR      R2,[R5, #+0]
   \   0000003C   011182E0           ADD      R1,R2,R1, LSL #+2
    388            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000040   ........           LDR      R2,??DataTable15
   \   00000044   1020D2E5           LDRB     R2,[R2, #+16]
   \   00000048   032012E2           ANDS     R2,R2,#0x3
   \   0000004C   0200000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000050   022052E2           SUBS     R2,R2,#+2
   \   00000054   1000000A           BEQ      ??_DrawBitLine2BPP_2
   \   00000058   F080BDE8           POP      {R4-R7,PC}
    389            case 0:
    390              do {
    391                Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_1:
   \   0000005C   03206CE2           RSB      R2,R12,#+3
   \   00000060   8220A0E1           LSL      R2,R2,#+1
    392                Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    393                PixelIndex = *(pTrans + Index);
    394                WRITE_MEM32P(pDest, PixelIndex);
   \   00000064   0260A0E1           MOV      R6,R2
   \   00000068   C050A0E3           MOV      R5,#+192
   \   0000006C   066066E2           RSB      R6,R6,#+6
   \   00000070   555600E0           AND      R5,R0,R5, ASR R6
   \   00000074   3522A0E1           LSR      R2,R5,R2
   \   00000078   022194E7           LDR      R2,[R4, +R2, LSL #+2]
    395                pDest--;
    396                if (++CurrentPixel == 4) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   042001E4           STR      R2,[R1], #-4
   \   00000084   04005CE3           CMP      R12,#+4
    397                  CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    398                  Pixels = *(++p);
   \   0000008C   0100F305           LDRBEQ   R0,[R3, #+1]!
    399                }
    400          		} while (--xsize);
   \   00000090   01E05EE2           SUBS     LR,LR,#+1
   \   00000094   F0FFFF1A           BNE      ??_DrawBitLine2BPP_1
   \   00000098   F080BDE8           POP      {R4-R7,PC}
    401              break;
    402            case LCD_DRAWMODE_TRANS:
    403              do {
    404                Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_2:
   \   0000009C   03206CE2           RSB      R2,R12,#+3
   \   000000A0   8220A0E1           LSL      R2,R2,#+1
    405                Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   000000A4   0260A0E1           MOV      R6,R2
   \   000000A8   C050A0E3           MOV      R5,#+192
   \   000000AC   066066E2           RSB      R6,R6,#+6
   \   000000B0   555600E0           AND      R5,R0,R5, ASR R6
   \   000000B4   3522B0E1           LSRS     R2,R5,R2
    406                if (Index) {
    407                  PixelIndex = *(pTrans + Index);
    408                  WRITE_MEM32P(pDest, PixelIndex);
   \   000000B8   02219417           LDRNE    R2,[R4, +R2, LSL #+2]
    409                }
    410                pDest--;
    411                if (++CurrentPixel == 4) {
   \   000000BC   01C08CE2           ADD      R12,R12,#+1
   \   000000C0   00208115           STRNE    R2,[R1, #+0]
   \   000000C4   04005CE3           CMP      R12,#+4
    412                  CurrentPixel = 0;
   \   000000C8   00C0A003           MOVEQ    R12,#+0
    413                  Pixels = *(++p);
   \   000000CC   0100F305           LDRBEQ   R0,[R3, #+1]!
   \   000000D0   041041E2           SUB      R1,R1,#+4
    414                }
    415          		} while (--xsize);
   \   000000D4   01E05EE2           SUBS     LR,LR,#+1
   \   000000D8   EFFFFF1A           BNE      ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_0:
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
    416              break;
    417            }
    418          }
    419          
    420          /*********************************************************************
    421          *
    422          *       Draw Bitmap 4 BPP
    423          */

   \                                 In section .text, align 4, keep-with-next
    424          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   14C09DE5           LDR      R12,[SP, #+20]
   \   0000000C   18E09DE5           LDR      LR,[SP, #+24]
    425            DRIVER_CONTEXT * pContext;
    426            LCD_PIXELINDEX Pixels, PixelIndex;
    427            int CurrentPixel, Shift, Index;
    428            U32 * pDest;
    429            U32 Off;
    430          
    431            if (pTrans == NULL) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3000000A           BEQ      ??_DrawBitLine4BPP_0
    432              return; // pTrans is required
    433            }
    434            //
    435            // Get context
    436            //
    437            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000018   085090E5           LDR      R5,[R0, #+8]
    438            Pixels       = *p;
   \   0000001C   0000D3E5           LDRB     R0,[R3, #+0]
    439            CurrentPixel = Diff;
    440            x           += Diff;
    441            //
    442            // Mirror x
    443            //
    444            x = (pContext->vxSize - 1 - (x));
    445            Off          = XY2OFF32(pContext->vxSizePhys, x, y);
    446            pDest        = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000020   0C7095E5           LDR      R7,[R5, #+12]
   \   00000024   146095E5           LDR      R6,[R5, #+20]
   \   00000028   017047E2           SUB      R7,R7,#+1
   \   0000002C   011047E0           SUB      R1,R7,R1
   \   00000030   0C1041E0           SUB      R1,R1,R12
   \   00000034   961221E0           MLA      R1,R6,R2,R1
   \   00000038   002095E5           LDR      R2,[R5, #+0]
   \   0000003C   011182E0           ADD      R1,R2,R1, LSL #+2
    447            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000040   ........           LDR      R2,??DataTable15
   \   00000044   1020D2E5           LDRB     R2,[R2, #+16]
   \   00000048   032012E2           ANDS     R2,R2,#0x3
   \   0000004C   0200000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000050   022052E2           SUBS     R2,R2,#+2
   \   00000054   1000000A           BEQ      ??_DrawBitLine4BPP_2
   \   00000058   F080BDE8           POP      {R4-R7,PC}
    448            case 0:
    449              do {
    450                Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_1:
   \   0000005C   01206CE2           RSB      R2,R12,#+1
   \   00000060   0221A0E1           LSL      R2,R2,#+2
    451                Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    452                PixelIndex = *(pTrans + Index);
    453                WRITE_MEM32P(pDest, PixelIndex);
   \   00000064   0260A0E1           MOV      R6,R2
   \   00000068   F050A0E3           MOV      R5,#+240
   \   0000006C   046066E2           RSB      R6,R6,#+4
   \   00000070   555600E0           AND      R5,R0,R5, ASR R6
   \   00000074   3522A0E1           LSR      R2,R5,R2
   \   00000078   022194E7           LDR      R2,[R4, +R2, LSL #+2]
    454                pDest--;
    455                if (++CurrentPixel == 2) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   042001E4           STR      R2,[R1], #-4
   \   00000084   02005CE3           CMP      R12,#+2
    456                  CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    457                  Pixels = *(++p);
   \   0000008C   0100F305           LDRBEQ   R0,[R3, #+1]!
    458                }
    459          		} while (--xsize);
   \   00000090   01E05EE2           SUBS     LR,LR,#+1
   \   00000094   F0FFFF1A           BNE      ??_DrawBitLine4BPP_1
   \   00000098   F080BDE8           POP      {R4-R7,PC}
    460              break;
    461            case LCD_DRAWMODE_TRANS:
    462              do {
    463                Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_2:
   \   0000009C   01206CE2           RSB      R2,R12,#+1
   \   000000A0   0221A0E1           LSL      R2,R2,#+2
    464                Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   000000A4   0260A0E1           MOV      R6,R2
   \   000000A8   F050A0E3           MOV      R5,#+240
   \   000000AC   046066E2           RSB      R6,R6,#+4
   \   000000B0   555600E0           AND      R5,R0,R5, ASR R6
   \   000000B4   3522B0E1           LSRS     R2,R5,R2
    465                if (Index) {
    466                  PixelIndex = *(pTrans + Index);
    467                  WRITE_MEM32P(pDest, PixelIndex);
   \   000000B8   02219417           LDRNE    R2,[R4, +R2, LSL #+2]
    468                }
    469                pDest--;
    470                if (++CurrentPixel == 2) {
   \   000000BC   01C08CE2           ADD      R12,R12,#+1
   \   000000C0   00208115           STRNE    R2,[R1, #+0]
   \   000000C4   02005CE3           CMP      R12,#+2
    471                  CurrentPixel = 0;
   \   000000C8   00C0A003           MOVEQ    R12,#+0
    472                  Pixels = *(++p);
   \   000000CC   0100F305           LDRBEQ   R0,[R3, #+1]!
   \   000000D0   041041E2           SUB      R1,R1,#+4
    473                }
    474          		} while (--xsize);
   \   000000D4   01E05EE2           SUBS     LR,LR,#+1
   \   000000D8   EFFFFF1A           BNE      ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_0:
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
    475              break;
    476            }
    477          }
    478          
    479          /*********************************************************************
    480          *
    481          *       Draw Bitmap 8 BPP
    482          */

   \                                 In section .text, align 4, keep-with-next
    483          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10E09DE5           LDR      LR,[SP, #+16]
   \   00000008   0CC09DE5           LDR      R12,[SP, #+12]
    484            DRIVER_CONTEXT * pContext;
    485            LCD_PIXELINDEX Pixel;
    486            register U32 Off;
    487            U32 * pDest;
    488          
    489            if (!pTrans) {
   \   0000000C   00005EE3           CMP      LR,#+0
   \   00000010   5000000A           BEQ      ??_DrawBitLine8BPP_0
    490              return; // No translation from 8bpp BMP to 16bpp device makes no sense
    491            }
    492            //
    493            // Get context
    494            //
    495            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000014   080090E5           LDR      R0,[R0, #+8]
    496            //
    497            // Mirror x
    498            //
    499            x = (pContext->vxSize - 1 - (x));
    500            Off   = XY2OFF32(pContext->vxSizePhys, x,y);
    501            pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000018   0C5090E5           LDR      R5,[R0, #+12]
   \   0000001C   144090E5           LDR      R4,[R0, #+20]
   \   00000020   015045E2           SUB      R5,R5,#+1
   \   00000024   011045E0           SUB      R1,R5,R1
   \   00000028   941221E0           MLA      R1,R4,R2,R1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   010180E0           ADD      R0,R0,R1, LSL #+2
    502            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000034   ........           LDR      R1,??DataTable15
   \   00000038   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000003C   031011E2           ANDS     R1,R1,#0x3
   \   00000040   0200000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000044   021051E2           SUBS     R1,R1,#+2
   \   00000048   3700000A           BEQ      ??_DrawBitLine8BPP_2
   \   0000004C   3080BDE8           POP      {R4,R5,PC}
    503            case 0:
    504              while (xsize >= 8) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000050   08005CE3           CMP      R12,#+8
   \   00000054   180000AA           BGE      ??_DrawBitLine8BPP_3
   \                     ??_DrawBitLine8BPP_4:
   \   00000058   04005CE3           CMP      R12,#+4
   \   0000005C   0E0000BA           BLT      ??_DrawBitLine8BPP_5
    505                WRITE_MEM32P(pDest - 0, *(pTrans + *(p + 0)));
    506                WRITE_MEM32P(pDest - 1, *(pTrans + *(p + 1)));
    507                WRITE_MEM32P(pDest - 2, *(pTrans + *(p + 2)));
    508                WRITE_MEM32P(pDest - 3, *(pTrans + *(p + 3)));
    509                WRITE_MEM32P(pDest - 4, *(pTrans + *(p + 4)));
    510                WRITE_MEM32P(pDest - 5, *(pTrans + *(p + 5)));
    511                WRITE_MEM32P(pDest - 6, *(pTrans + *(p + 6)));
    512                WRITE_MEM32P(pDest - 7, *(pTrans + *(p + 7)));
    513                xsize -= 8;
    514                p     += 8;
    515                pDest -= 8;
    516              }
    517              while (xsize >= 4) {
    518                WRITE_MEM32P(pDest - 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_6:
   \   00000060   0110D3E4           LDRB     R1,[R3], #+1
    519                WRITE_MEM32P(pDest - 1, *(pTrans + *(p + 1)));
    520                WRITE_MEM32P(pDest - 2, *(pTrans + *(p + 2)));
    521                WRITE_MEM32P(pDest - 3, *(pTrans + *(p + 3)));
    522                xsize -= 4;
   \   00000064   04C04CE2           SUB      R12,R12,#+4
    523                p     += 4;
    524                pDest -= 4;
   \   00000068   04005CE3           CMP      R12,#+4
   \   0000006C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000070   041000E4           STR      R1,[R0], #-4
   \   00000074   0110D3E4           LDRB     R1,[R3], #+1
   \   00000078   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   0000007C   041000E4           STR      R1,[R0], #-4
   \   00000080   0110D3E4           LDRB     R1,[R3], #+1
   \   00000084   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000088   041000E4           STR      R1,[R0], #-4
   \   0000008C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000090   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000094   041000E4           STR      R1,[R0], #-4
   \   00000098   F0FFFFAA           BGE      ??_DrawBitLine8BPP_6
    525              }
    526              while (xsize) {
   \                     ??_DrawBitLine8BPP_5:
   \   0000009C   00005CE3           CMP      R12,#+0
   \   000000A0   2C00000A           BEQ      ??_DrawBitLine8BPP_0
    527                WRITE_MEM32P(pDest - 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_7:
   \   000000A4   0110D3E4           LDRB     R1,[R3], #+1
    528                xsize--;
   \   000000A8   01C05CE2           SUBS     R12,R12,#+1
   \   000000AC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000B0   041000E4           STR      R1,[R0], #-4
    529                p++;
    530                pDest--;
   \   000000B4   FAFFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   000000B8   3080BDE8           POP      {R4,R5,PC}
    531              }
   \                     ??_DrawBitLine8BPP_3:
   \   000000BC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000C0   08C04CE2           SUB      R12,R12,#+8
   \   000000C4   08005CE3           CMP      R12,#+8
   \   000000C8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000CC   041000E4           STR      R1,[R0], #-4
   \   000000D0   0110D3E4           LDRB     R1,[R3], #+1
   \   000000D4   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000D8   041000E4           STR      R1,[R0], #-4
   \   000000DC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000E0   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000E4   041000E4           STR      R1,[R0], #-4
   \   000000E8   0110D3E4           LDRB     R1,[R3], #+1
   \   000000EC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000F0   041000E4           STR      R1,[R0], #-4
   \   000000F4   0110D3E4           LDRB     R1,[R3], #+1
   \   000000F8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000FC   041000E4           STR      R1,[R0], #-4
   \   00000100   0110D3E4           LDRB     R1,[R3], #+1
   \   00000104   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000108   041000E4           STR      R1,[R0], #-4
   \   0000010C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000110   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000114   041000E4           STR      R1,[R0], #-4
   \   00000118   0110D3E4           LDRB     R1,[R3], #+1
   \   0000011C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000120   041000E4           STR      R1,[R0], #-4
   \   00000124   E4FFFFAA           BGE      ??_DrawBitLine8BPP_3
   \   00000128   CAFFFFEA           B        ??_DrawBitLine8BPP_4
    532              break;
    533            case LCD_DRAWMODE_TRANS:
    534              for (; xsize > 0; xsize--, p++, pDest--) {
   \                     ??_DrawBitLine8BPP_2:
   \   0000012C   01005CE3           CMP      R12,#+1
   \   00000130   080000BA           BLT      ??_DrawBitLine8BPP_0
    535                Pixel = *p;
    536                if (Pixel) {
   \                     ??_DrawBitLine8BPP_8:
   \   00000134   0010D3E5           LDRB     R1,[R3, #+0]
    537                  WRITE_MEM32P(pDest, *(pTrans + *p));
    538                }
    539              }
   \   00000138   01C04CE2           SUB      R12,R12,#+1
   \   0000013C   013083E2           ADD      R3,R3,#+1
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   01119E17           LDRNE    R1,[LR, +R1, LSL #+2]
   \   00000148   00108015           STRNE    R1,[R0, #+0]
   \   0000014C   040040E2           SUB      R0,R0,#+4
   \   00000150   01005CE3           CMP      R12,#+1
   \   00000154   F6FFFFAA           BGE      ??_DrawBitLine8BPP_8
   \                     ??_DrawBitLine8BPP_0:
   \   00000158   3080BDE8           POP      {R4,R5,PC}       ;; return
    540              break;
    541            }
    542          }
    543          
    544          /*********************************************************************
    545          *
    546          *       Draw Bitmap 16 BPP, not optimized
    547          */
    548          static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR * p, int xsize) {
    549            for (;xsize > 0; xsize--, x++, p++) {
    550              _SetPixelIndex(pDevice, x, y, *p);
    551            }
    552          }
    553          
    554          /*********************************************************************
    555          *
    556          *       Draw Bitmap 32 BPP, not optimized
    557          */
    558          static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const GUI_UNI_PTR * p, int xsize) {
    559            for (;xsize > 0; xsize--, x++, p++) {
    560              _SetPixelIndex(pDevice, x, y, *p);
    561            }
    562          }
    563          
    564          /*********************************************************************
    565          *
    566          *       _DrawBitmap
    567          */

   \                                 In section .text, align 4, keep-with-next
    568          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    569                                 int xSize, int ySize,
    570                                 int BitsPerPixel, 
    571                                 int BytesPerLine,
    572                                 const U8 GUI_UNI_PTR * pData, int Diff,
    573                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C009DE5           LDR      R0,[SP, #+60]
   \   00000010   0150A0E1           MOV      R5,R1
    574            int i;
    575          
    576            //
    577            // Use _DrawBitLineXBPP and _DrawBitLineXBPP_Swap
    578            //
    579            switch (BitsPerPixel) {
   \   00000014   010040E2           SUB      R0,R0,#+1
   \   00000018   0210A0E1           MOV      R1,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   1F0050E3           CMP      R0,#+31
   \   00000034   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   4C00008A           BHI      ??_DrawBitmap_1
   \   0000003C   1E0000EA           B        ??_DrawBitmap_2
   \   00000040   4C0000EA           B        ??_DrawBitmap_3
   \   00000044   490000EA           B        ??_DrawBitmap_1
   \   00000048   780000EA           B        ??_DrawBitmap_4
   \   0000004C   470000EA           B        ??_DrawBitmap_1
   \   00000050   460000EA           B        ??_DrawBitmap_1
   \   00000054   450000EA           B        ??_DrawBitmap_1
   \   00000058   A20000EA           B        ??_DrawBitmap_5
   \   0000005C   430000EA           B        ??_DrawBitmap_1
   \   00000060   420000EA           B        ??_DrawBitmap_1
   \   00000064   410000EA           B        ??_DrawBitmap_1
   \   00000068   400000EA           B        ??_DrawBitmap_1
   \   0000006C   3F0000EA           B        ??_DrawBitmap_1
   \   00000070   3E0000EA           B        ??_DrawBitmap_1
   \   00000074   3D0000EA           B        ??_DrawBitmap_1
   \   00000078   C00000EA           B        ??_DrawBitmap_6
   \   0000007C   3B0000EA           B        ??_DrawBitmap_1
   \   00000080   3A0000EA           B        ??_DrawBitmap_1
   \   00000084   390000EA           B        ??_DrawBitmap_1
   \   00000088   380000EA           B        ??_DrawBitmap_1
   \   0000008C   370000EA           B        ??_DrawBitmap_1
   \   00000090   360000EA           B        ??_DrawBitmap_1
   \   00000094   350000EA           B        ??_DrawBitmap_1
   \   00000098   340000EA           B        ??_DrawBitmap_1
   \   0000009C   330000EA           B        ??_DrawBitmap_1
   \   000000A0   320000EA           B        ??_DrawBitmap_1
   \   000000A4   310000EA           B        ??_DrawBitmap_1
   \   000000A8   300000EA           B        ??_DrawBitmap_1
   \   000000AC   2F0000EA           B        ??_DrawBitmap_1
   \   000000B0   2E0000EA           B        ??_DrawBitmap_1
   \   000000B4   2D0000EA           B        ??_DrawBitmap_1
   \   000000B8   CE0000EA           B        ??_DrawBitmap_7
    580            case 1:
    581              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   000000BC   38009DE5           LDR      R0,[SP, #+56]
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   290000BA           BLT      ??_DrawBitmap_1
   \   000000C8   01B0A0E1           MOV      R11,R1
   \   000000CC   10008DE5           STR      R0,[SP, #+16]
   \   000000D0   010010E3           TST      R0,#0x1
   \   000000D4   0800000A           BEQ      ??_DrawBitmap_8
    582                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000000D8   08A08DE5           STR      R10,[SP, #+8]
   \   000000DC   04608DE5           STR      R6,[SP, #+4]
   \   000000E0   00908DE5           STR      R9,[SP, #+0]
   \   000000E4   0830A0E1           MOV      R3,R8
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       _DrawBitLine1BPP
    583                pData += BytesPerLine;
   \   000000F4   088087E0           ADD      R8,R7,R8
   \   000000F8   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_8:
   \   000000FC   10109DE5           LDR      R1,[SP, #+16]
   \   00000100   A110A0E1           LSR      R1,R1,#+1
   \   00000104   0C108DE5           STR      R1,[SP, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   1700000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_9:
   \   00000110   08A08DE5           STR      R10,[SP, #+8]
   \   00000114   04608DE5           STR      R6,[SP, #+4]
   \   00000118   00908DE5           STR      R9,[SP, #+0]
   \   0000011C   0830A0E1           MOV      R3,R8
   \   00000120   0B20A0E1           MOV      R2,R11
   \   00000124   0510A0E1           MOV      R1,R5
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       _DrawBitLine1BPP
   \   00000130   088087E0           ADD      R8,R7,R8
   \   00000134   08A08DE5           STR      R10,[SP, #+8]
   \   00000138   04608DE5           STR      R6,[SP, #+4]
   \   0000013C   00908DE5           STR      R9,[SP, #+0]
   \   00000140   0830A0E1           MOV      R3,R8
   \   00000144   01208BE2           ADD      R2,R11,#+1
   \   00000148   0510A0E1           MOV      R1,R5
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           BL       _DrawBitLine1BPP
    584              }
   \   00000154   0C109DE5           LDR      R1,[SP, #+12]
   \   00000158   088087E0           ADD      R8,R7,R8
   \   0000015C   011041E2           SUB      R1,R1,#+1
   \   00000160   0C108DE5           STR      R1,[SP, #+12]
   \   00000164   02B08BE2           ADD      R11,R11,#+2
   \   00000168   000051E3           CMP      R1,#+0
   \   0000016C   E7FFFF1A           BNE      ??_DrawBitmap_9
    585              break;
    586            case 2:
    587              for (i = 0; i < ySize; i++) {
    588                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
    589                pData += BytesPerLine;
    590              }
    591              break;
    592            case 4:
    593              for (i = 0; i < ySize; i++) {
    594                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
    595                pData += BytesPerLine;
    596              }
    597              break;
    598            case 8:
    599              for (i = 0; i < ySize; i++) {
    600                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
    601                pData += BytesPerLine;
    602              }
    603              break;
    604            case 16:
    605              for (i = 0; i < ySize; i++) {
    606                _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
    607                pData += BytesPerLine;
    608              }
    609              break;
    610            case 32:
    611              for (i = 0; i < ySize; i++) {
    612                _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
    613                pData += BytesPerLine;
    614              }
    615              break;
    616            }
    617          }
   \                     ??_DrawBitmap_1:
   \   00000170   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000174   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??_DrawBitmap_3:
   \   00000178   38009DE5           LDR      R0,[SP, #+56]
   \   0000017C   010050E3           CMP      R0,#+1
   \   00000180   FAFFFFBA           BLT      ??_DrawBitmap_1
   \   00000184   01B0A0E1           MOV      R11,R1
   \   00000188   10008DE5           STR      R0,[SP, #+16]
   \   0000018C   010010E3           TST      R0,#0x1
   \   00000190   0800000A           BEQ      ??_DrawBitmap_10
   \   00000194   08A08DE5           STR      R10,[SP, #+8]
   \   00000198   04608DE5           STR      R6,[SP, #+4]
   \   0000019C   00908DE5           STR      R9,[SP, #+0]
   \   000001A0   0830A0E1           MOV      R3,R8
   \   000001A4   0510A0E1           MOV      R1,R5
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   ........           BL       _DrawBitLine2BPP
   \   000001B0   088087E0           ADD      R8,R7,R8
   \   000001B4   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_10:
   \   000001B8   10109DE5           LDR      R1,[SP, #+16]
   \   000001BC   A110A0E1           LSR      R1,R1,#+1
   \   000001C0   0C108DE5           STR      R1,[SP, #+12]
   \   000001C4   000051E3           CMP      R1,#+0
   \   000001C8   E8FFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_11:
   \   000001CC   08A08DE5           STR      R10,[SP, #+8]
   \   000001D0   04608DE5           STR      R6,[SP, #+4]
   \   000001D4   00908DE5           STR      R9,[SP, #+0]
   \   000001D8   0830A0E1           MOV      R3,R8
   \   000001DC   0B20A0E1           MOV      R2,R11
   \   000001E0   0510A0E1           MOV      R1,R5
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ........           BL       _DrawBitLine2BPP
   \   000001EC   088087E0           ADD      R8,R7,R8
   \   000001F0   08A08DE5           STR      R10,[SP, #+8]
   \   000001F4   04608DE5           STR      R6,[SP, #+4]
   \   000001F8   00908DE5           STR      R9,[SP, #+0]
   \   000001FC   0830A0E1           MOV      R3,R8
   \   00000200   01208BE2           ADD      R2,R11,#+1
   \   00000204   0510A0E1           MOV      R1,R5
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   ........           BL       _DrawBitLine2BPP
   \   00000210   0C109DE5           LDR      R1,[SP, #+12]
   \   00000214   088087E0           ADD      R8,R7,R8
   \   00000218   011041E2           SUB      R1,R1,#+1
   \   0000021C   0C108DE5           STR      R1,[SP, #+12]
   \   00000220   02B08BE2           ADD      R11,R11,#+2
   \   00000224   000051E3           CMP      R1,#+0
   \   00000228   E7FFFF1A           BNE      ??_DrawBitmap_11
   \   0000022C   CFFFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_4:
   \   00000230   38009DE5           LDR      R0,[SP, #+56]
   \   00000234   010050E3           CMP      R0,#+1
   \   00000238   CCFFFFBA           BLT      ??_DrawBitmap_1
   \   0000023C   01B0A0E1           MOV      R11,R1
   \   00000240   10008DE5           STR      R0,[SP, #+16]
   \   00000244   010010E3           TST      R0,#0x1
   \   00000248   0800000A           BEQ      ??_DrawBitmap_12
   \   0000024C   08A08DE5           STR      R10,[SP, #+8]
   \   00000250   04608DE5           STR      R6,[SP, #+4]
   \   00000254   00908DE5           STR      R9,[SP, #+0]
   \   00000258   0830A0E1           MOV      R3,R8
   \   0000025C   0510A0E1           MOV      R1,R5
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           BL       _DrawBitLine4BPP
   \   00000268   088087E0           ADD      R8,R7,R8
   \   0000026C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_12:
   \   00000270   10109DE5           LDR      R1,[SP, #+16]
   \   00000274   A110A0E1           LSR      R1,R1,#+1
   \   00000278   0C108DE5           STR      R1,[SP, #+12]
   \   0000027C   000051E3           CMP      R1,#+0
   \   00000280   BAFFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_13:
   \   00000284   08A08DE5           STR      R10,[SP, #+8]
   \   00000288   04608DE5           STR      R6,[SP, #+4]
   \   0000028C   00908DE5           STR      R9,[SP, #+0]
   \   00000290   0830A0E1           MOV      R3,R8
   \   00000294   0B20A0E1           MOV      R2,R11
   \   00000298   0510A0E1           MOV      R1,R5
   \   0000029C   0400A0E1           MOV      R0,R4
   \   000002A0   ........           BL       _DrawBitLine4BPP
   \   000002A4   088087E0           ADD      R8,R7,R8
   \   000002A8   08A08DE5           STR      R10,[SP, #+8]
   \   000002AC   04608DE5           STR      R6,[SP, #+4]
   \   000002B0   00908DE5           STR      R9,[SP, #+0]
   \   000002B4   0830A0E1           MOV      R3,R8
   \   000002B8   01208BE2           ADD      R2,R11,#+1
   \   000002BC   0510A0E1           MOV      R1,R5
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           BL       _DrawBitLine4BPP
   \   000002C8   0C109DE5           LDR      R1,[SP, #+12]
   \   000002CC   088087E0           ADD      R8,R7,R8
   \   000002D0   011041E2           SUB      R1,R1,#+1
   \   000002D4   0C108DE5           STR      R1,[SP, #+12]
   \   000002D8   02B08BE2           ADD      R11,R11,#+2
   \   000002DC   000051E3           CMP      R1,#+0
   \   000002E0   E7FFFF1A           BNE      ??_DrawBitmap_13
   \   000002E4   A1FFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_5:
   \   000002E8   38009DE5           LDR      R0,[SP, #+56]
   \   000002EC   010050E3           CMP      R0,#+1
   \   000002F0   9EFFFFBA           BLT      ??_DrawBitmap_1
   \   000002F4   00B0A0E1           MOV      R11,R0
   \   000002F8   0190A0E1           MOV      R9,R1
   \   000002FC   01001BE3           TST      R11,#0x1
   \   00000300   0700000A           BEQ      ??_DrawBitmap_14
   \   00000304   04A08DE5           STR      R10,[SP, #+4]
   \   00000308   00608DE5           STR      R6,[SP, #+0]
   \   0000030C   0830A0E1           MOV      R3,R8
   \   00000310   0510A0E1           MOV      R1,R5
   \   00000314   0400A0E1           MOV      R0,R4
   \   00000318   ........           BL       _DrawBitLine8BPP
   \   0000031C   088087E0           ADD      R8,R7,R8
   \   00000320   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_14:
   \   00000324   ABB0B0E1           LSRS     R11,R11,#+1
   \   00000328   90FFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_15:
   \   0000032C   04A08DE5           STR      R10,[SP, #+4]
   \   00000330   00608DE5           STR      R6,[SP, #+0]
   \   00000334   0830A0E1           MOV      R3,R8
   \   00000338   0920A0E1           MOV      R2,R9
   \   0000033C   0510A0E1           MOV      R1,R5
   \   00000340   0400A0E1           MOV      R0,R4
   \   00000344   ........           BL       _DrawBitLine8BPP
   \   00000348   088087E0           ADD      R8,R7,R8
   \   0000034C   04A08DE5           STR      R10,[SP, #+4]
   \   00000350   00608DE5           STR      R6,[SP, #+0]
   \   00000354   0830A0E1           MOV      R3,R8
   \   00000358   012089E2           ADD      R2,R9,#+1
   \   0000035C   0510A0E1           MOV      R1,R5
   \   00000360   0400A0E1           MOV      R0,R4
   \   00000364   ........           BL       _DrawBitLine8BPP
   \   00000368   01B04BE2           SUB      R11,R11,#+1
   \   0000036C   088087E0           ADD      R8,R7,R8
   \   00000370   029089E2           ADD      R9,R9,#+2
   \   00000374   00005BE3           CMP      R11,#+0
   \   00000378   EBFFFF1A           BNE      ??_DrawBitmap_15
   \   0000037C   7BFFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_6:
   \   00000380   38209DE5           LDR      R2,[SP, #+56]
   \   00000384   0000A0E3           MOV      R0,#+0
   \   00000388   010052E3           CMP      R2,#+1
   \   0000038C   77FFFFBA           BLT      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   00000390   0620A0E1           MOV      R2,R6
   \   00000394   0830A0E1           MOV      R3,R8
   \   00000398   05E0A0E1           MOV      LR,R5
   \   0000039C   010052E3           CMP      R2,#+1
   \   000003A0   060000AA           BGE      ??_DrawBitmap_17
   \                     ??_DrawBitmap_18:
   \   000003A4   38209DE5           LDR      R2,[SP, #+56]
   \   000003A8   010080E2           ADD      R0,R0,#+1
   \   000003AC   088087E0           ADD      R8,R7,R8
   \   000003B0   011081E2           ADD      R1,R1,#+1
   \   000003B4   020050E1           CMP      R0,R2
   \   000003B8   6CFFFFAA           BGE      ??_DrawBitmap_1
   \   000003BC   F3FFFFEA           B        ??_DrawBitmap_16
   \                     ??_DrawBitmap_17:
   \   000003C0   08A094E5           LDR      R10,[R4, #+8]
   \   000003C4   012042E2           SUB      R2,R2,#+1
   \   000003C8   14909AE5           LDR      R9,[R10, #+20]
   \   000003CC   0CB09AE5           LDR      R11,[R10, #+12]
   \   000003D0   99B12BE0           MLA      R11,R9,R1,R11
   \   000003D4   010052E3           CMP      R2,#+1
   \   000003D8   01904BE2           SUB      R9,R11,#+1
   \   000003DC   00B09AE5           LDR      R11,[R10, #+0]
   \   000003E0   B2A0D3E0           LDRH     R10,[R3], #+2
   \   000003E4   0E9049E0           SUB      R9,R9,LR
   \   000003E8   01E08EE2           ADD      LR,LR,#+1
   \   000003EC   09A18BE7           STR      R10,[R11, +R9, LSL #+2]
   \   000003F0   F2FFFFAA           BGE      ??_DrawBitmap_17
   \   000003F4   EAFFFFEA           B        ??_DrawBitmap_18
   \                     ??_DrawBitmap_7:
   \   000003F8   38209DE5           LDR      R2,[SP, #+56]
   \   000003FC   0000A0E3           MOV      R0,#+0
   \   00000400   010052E3           CMP      R2,#+1
   \   00000404   59FFFFBA           BLT      ??_DrawBitmap_1
   \                     ??_DrawBitmap_19:
   \   00000408   0620A0E1           MOV      R2,R6
   \   0000040C   0830A0E1           MOV      R3,R8
   \   00000410   05E0A0E1           MOV      LR,R5
   \   00000414   010052E3           CMP      R2,#+1
   \   00000418   060000AA           BGE      ??_DrawBitmap_20
   \                     ??_DrawBitmap_21:
   \   0000041C   38209DE5           LDR      R2,[SP, #+56]
   \   00000420   010080E2           ADD      R0,R0,#+1
   \   00000424   088087E0           ADD      R8,R7,R8
   \   00000428   011081E2           ADD      R1,R1,#+1
   \   0000042C   020050E1           CMP      R0,R2
   \   00000430   4EFFFFAA           BGE      ??_DrawBitmap_1
   \   00000434   F3FFFFEA           B        ??_DrawBitmap_19
   \                     ??_DrawBitmap_20:
   \   00000438   089094E5           LDR      R9,[R4, #+8]
   \   0000043C   012042E2           SUB      R2,R2,#+1
   \   00000440   14A099E5           LDR      R10,[R9, #+20]
   \   00000444   0CB099E5           LDR      R11,[R9, #+12]
   \   00000448   9AB12BE0           MLA      R11,R10,R1,R11
   \   0000044C   010052E3           CMP      R2,#+1
   \   00000450   01A04BE2           SUB      R10,R11,#+1
   \   00000454   00B099E5           LDR      R11,[R9, #+0]
   \   00000458   049093E4           LDR      R9,[R3], #+4
   \   0000045C   0EA04AE0           SUB      R10,R10,LR
   \   00000460   0A918BE7           STR      R9,[R11, +R10, LSL #+2]
   \   00000464   01E08EE2           ADD      LR,LR,#+1
   \   00000468   F2FFFFAA           BGE      ??_DrawBitmap_20
   \   0000046C   EAFFFFEA           B        ??_DrawBitmap_21
    618          
    619          /*********************************************************************
    620          *
    621          *       _SetOrg
    622          */

   \                                 In section .text, align 4, keep-with-next
    623          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    624            #ifndef WIN32
    625              DRIVER_CONTEXT * pContext;
    626            #endif
    627            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    628          
    629            #ifdef WIN32
    630              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    631            #else
    632              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
    633              Data.xPos = pContext->vxSize - pContext->xSize - x;
   \   00000024   0CC093E5           LDR      R12,[R3, #+12]
   \   00000028   043093E5           LDR      R3,[R3, #+4]
    634              Data.yPos = y;
   \   0000002C   04208DE5           STR      R2,[SP, #+4]
   \   00000030   03304CE0           SUB      R3,R12,R3
   \   00000034   011043E0           SUB      R1,R3,R1
   \   00000038   00108DE5           STR      R1,[SP, #+0]
    635              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   180090E5           LDR      R0,[R0, #+24]
   \   00000048   ........           BL       LCD_X_DisplayDriver
    636            #endif
    637          }
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    638          
    639          /*********************************************************************
    640          *
    641          *       _InitOnce
    642          *
    643          * Purpose:
    644          *   Allocates a fixed block for the context of the driver
    645          *
    646          * Return value:
    647          *   0 on success, 1 on error
    648          */
    649          static int _InitOnce(GUI_DEVICE * pDevice) {
    650            if (pDevice->u.pContext == NULL) {
    651              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    652              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    653            }
    654            return pDevice->u.pContext ? 0 : 1;
    655          }
    656          
    657          /*********************************************************************
    658          *
    659          *       _GetRect
    660          */

   \                                 In section .text, align 4, keep-with-next
    661          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    662            DRIVER_CONTEXT * pContext;
    663          
    664            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    665            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    666            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    667            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    668            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    669          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    670          
    671          /*********************************************************************
    672          *
    673          *       _GetDevProp
    674          */

   \                                 In section .text, align 4, keep-with-next
    675          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    676            DRIVER_CONTEXT * pContext;
    677          
    678            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    679            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0D0000EA           B        ??_GetDevProp_8
   \   00000044   0A0000EA           B        ??_GetDevProp_7
   \   00000048   090000EA           B        ??_GetDevProp_7
    680            case LCD_DEVCAP_XSIZE:
    681              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    682            case LCD_DEVCAP_YSIZE:
    683              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    684            case LCD_DEVCAP_VXSIZE:
    685              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    686            case LCD_DEVCAP_VYSIZE:
    687              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    688            case LCD_DEVCAP_BITSPERPIXEL:
    689              return 32;
   \                     ??_GetDevProp_6:
   \   0000006C   2000A0E3           MOV      R0,#+32
   \   00000070   1EFF2FE1           BX       LR
    690            case LCD_DEVCAP_NUMCOLORS:
    691              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    692            case LCD_DEVCAP_XMAG:
    693              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    694            case LCD_DEVCAP_YMAG:
    695              return 1;
    696            case LCD_DEVCAP_MIRROR_X:
    697              return 1;
    698            case LCD_DEVCAP_MIRROR_Y:
    699              return 0;
    700            case LCD_DEVCAP_SWAP_XY:
    701              return 0;
    702            }
    703            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    704          }
    705          
    706          /*********************************************************************
    707          *
    708          *       _GetDevData
    709          */

   \                                 In section .text, align 4, keep-with-next
    710          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    711            GUI_USE_PARA(pDevice);
    712            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    713            #if GUI_SUPPORT_MEMDEV
    714              case LCD_DEVDATA_MEMDEV:
    715                return (void *)&GUI_MEMDEV_DEVICE_32;
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   1EFF2FE1           BX       LR
    716            #endif
    717            }
    718            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    719          }
    720          
    721          /*********************************************************************
    722          *
    723          *       Static code: Functions available by _GetDevFunc()
    724          *
    725          **********************************************************************
    726          */
    727          /*********************************************************************
    728          *
    729          *       _ReadRect
    730          */

   \                                 In section .text, align 4, keep-with-next
    731          static void _ReadRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer) {
   \                     _ReadRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    732            DRIVER_CONTEXT * pContext;
    733            U32 Off;
    734            int x, NumPixelsPerLine;
    735            U32 * p;
    736          
    737            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   \   0000000C   0C4090E5           LDR      R4,[R0, #+12]
   \   00000010   14E09DE5           LDR      LR,[SP, #+20]
   \   00000014   014044E2           SUB      R4,R4,#+1
   \   00000018   015044E0           SUB      R5,R4,R1
    738            x0 = (pContext->vxSize - 1 - (x0));
    739            x1 = (pContext->vxSize - 1 - (x1));
   \   0000001C   031044E0           SUB      R1,R4,R3
    740            p = (U32 *)pBuffer;
    741            x = x0;
   \   00000020   0530A0E1           MOV      R3,R5
    742            do {
    743              Off = XY2OFF32(pContext->vxSizePhys, x0, y0);
    744              NumPixelsPerLine = x0 - x1 + 1;
   \                     ??_ReadRect_0:
   \   00000024   146090E5           LDR      R6,[R0, #+20]
   \   00000028   014045E0           SUB      R4,R5,R1
   \   0000002C   965225E0           MLA      R5,R6,R2,R5
   \   00000030   014084E2           ADD      R4,R4,#+1
   \   00000034   0551A0E1           LSL      R5,R5,#+2
    745              do {
    746                *p++ = READ_MEM32(pContext->VRAMAddr, Off);
   \                     ??_ReadRect_1:
   \   00000038   006090E5           LDR      R6,[R0, #+0]
    747                Off--;
    748              } while (--NumPixelsPerLine);
   \   0000003C   014044E2           SUB      R4,R4,#+1
   \   00000040   066095E7           LDR      R6,[R5, +R6]
   \   00000044   045045E2           SUB      R5,R5,#+4
   \   00000048   04608EE4           STR      R6,[LR], #+4
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   F8FFFF1A           BNE      ??_ReadRect_1
    749              x0 = x;
    750            } while (y0++ < y1);
   \   00000054   0240A0E1           MOV      R4,R2
   \   00000058   0350A0E1           MOV      R5,R3
   \   0000005C   012084E2           ADD      R2,R4,#+1
   \   00000060   0C0054E1           CMP      R4,R12
   \   00000064   EEFFFFBA           BLT      ??_ReadRect_0
    751          }
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
    752          
    753          /*********************************************************************
    754          *
    755          *       _SetVRAMAddr
    756          */

   \                                 In section .text, align 4, keep-with-next
    757          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    758            DRIVER_CONTEXT * pContext;
    759            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    760          
    761            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    762            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    763              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    764              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    765              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    766              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    767            }
    768            #ifdef WIN32
    769              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    770            #endif
    771          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    772          
    773          /*********************************************************************
    774          *
    775          *       _SetVSize
    776          */

   \                                 In section .text, align 4, keep-with-next
    777          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    778            DRIVER_CONTEXT * pContext;
    779          
    780            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    781            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    782              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    783              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    784              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    785              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
    786            }
    787            #ifdef WIN32
    788              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    789            #endif
    790          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    791          
    792          /*********************************************************************
    793          *
    794          *       _SetSize
    795          */

   \                                 In section .text, align 4, keep-with-next
    796          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    797            DRIVER_CONTEXT * pContext;
    798            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    799          
    800            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    801            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    802              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    803              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    804                pContext->vxSizePhys = xSize;
    805              }
    806              pContext->xSize = xSize;
    807              pContext->ySize = ySize;
    808              Data.xSize = xSize;
    809              Data.ySize = ySize;
    810              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    811            }
    812          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    813          
    814          /*********************************************************************
    815          *
    816          *       _SetPos
    817          */

   \                                 In section .text, align 4, keep-with-next
    818          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    819            DRIVER_CONTEXT * pContext;
    820            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    821          
    822            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    823            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    824              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    825              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    826              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    827              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    828              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    829              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    830            }
    831          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    832          
    833          /*********************************************************************
    834          *
    835          *       _GetPos
    836          */

   \                                 In section .text, align 4, keep-with-next
    837          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    838            DRIVER_CONTEXT * pContext;
    839          
    840            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    841            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    842              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    843              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    844              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    845            }
    846          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    847          
    848          /*********************************************************************
    849          *
    850          *       _SetAlpha
    851          */

   \                                 In section .text, align 4, keep-with-next
    852          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    853            DRIVER_CONTEXT * pContext;
    854            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    855          
    856            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    857            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    858              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    859              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    860              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    861              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    862            }
    863          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    864          
    865          /*********************************************************************
    866          *
    867          *       _SetVis
    868          */

   \                                 In section .text, align 4, keep-with-next
    869          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    870            DRIVER_CONTEXT * pContext;
    871            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    872          
    873            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    874            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    875              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    876              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    877              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    878              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    879            }
    880          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    881          
    882          /*********************************************************************
    883          *
    884          *       _Init
    885          */

   \                                 In section .text, align 4, keep-with-next
    886          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    887            int r;
    888          
    889            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    890            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    891            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    892          }
    893          
    894          /*********************************************************************
    895          *
    896          *       _On
    897          */

   \                                 In section .text, align 4, keep-with-next
    898          static void _On (GUI_DEVICE * pDevice) {
    899            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    900          }
    901          
    902          /*********************************************************************
    903          *
    904          *       _Off
    905          */

   \                                 In section .text, align 4, keep-with-next
    906          static void _Off (GUI_DEVICE * pDevice) {
    907            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    908          }
    909          
    910          /*********************************************************************
    911          *
    912          *       _SetLUTEntry
    913          */

   \                                 In section .text, align 4, keep-with-next
    914          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    915            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    916          
    917            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
    918            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    919            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    920          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    921          
    922          /*********************************************************************
    923          *
    924          *       _SetAlphaMode
    925          */

   \                                 In section .text, align 4, keep-with-next
    926          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    927            LCD_X_SETALPHAMODE_INFO Data = {0};
    928          
    929            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    930            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    931          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    932          
    933          /*********************************************************************
    934          *
    935          *       _SetChromaMode
    936          */

   \                                 In section .text, align 4, keep-with-next
    937          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    938            LCD_X_SETCHROMAMODE_INFO Data = {0};
    939          
    940            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    941            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    942          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    943          
    944          /*********************************************************************
    945          *
    946          *       _SetChroma
    947          */

   \                                 In section .text, align 4, keep-with-next
    948          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    949            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    950          
    951            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    952            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
    953            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    954          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    955          
    956          /*********************************************************************
    957          *
    958          *       _SetFunc
    959          */

   \                                 In section .text, align 4, keep-with-next
    960          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    961            DRIVER_CONTEXT * pContext;
    962          
    963            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    964            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
    965              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    966              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
    967              case LCD_DEVFUNC_FILLRECT:
    968                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
    969                break;
    970              }
    971            }
    972          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    973          
    974          /*********************************************************************
    975          *
    976          *       _GetDevFunc
    977          */

   \                                 In section .text, align 4, keep-with-next
    978          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
    979            GUI_USE_PARA(ppDevice);
    980            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   150051E3           CMP      R1,#+21
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3500008A           BHI      ??_GetDevFunc_1
   \   00000010   140000EA           B        ??_GetDevFunc_2
   \   00000014   1F0000EA           B        ??_GetDevFunc_3
   \   00000018   1A0000EA           B        ??_GetDevFunc_4
   \   0000001C   1B0000EA           B        ??_GetDevFunc_5
   \   00000020   300000EA           B        ??_GetDevFunc_1
   \   00000024   1D0000EA           B        ??_GetDevFunc_6
   \   00000028   2E0000EA           B        ??_GetDevFunc_1
   \   0000002C   2D0000EA           B        ??_GetDevFunc_1
   \   00000030   0E0000EA           B        ??_GetDevFunc_7
   \   00000034   0F0000EA           B        ??_GetDevFunc_8
   \   00000038   100000EA           B        ??_GetDevFunc_9
   \   0000003C   190000EA           B        ??_GetDevFunc_10
   \   00000040   280000EA           B        ??_GetDevFunc_1
   \   00000044   190000EA           B        ??_GetDevFunc_11
   \   00000048   1A0000EA           B        ??_GetDevFunc_12
   \   0000004C   1B0000EA           B        ??_GetDevFunc_13
   \   00000050   240000EA           B        ??_GetDevFunc_1
   \   00000054   230000EA           B        ??_GetDevFunc_1
   \   00000058   1A0000EA           B        ??_GetDevFunc_14
   \   0000005C   1B0000EA           B        ??_GetDevFunc_15
   \   00000060   1C0000EA           B        ??_GetDevFunc_16
   \   00000064   1D0000EA           B        ??_GetDevFunc_17
    981            case LCD_DEVFUNC_READRECT:
    982              return (void (*)(void))_ReadRect;
   \                     ??_GetDevFunc_2:
   \   00000068   ........           LDR      R0,??DataTable16_1
   \   0000006C   1EFF2FE1           BX       LR
    983            case LCD_DEVFUNC_SET_VRAM_ADDR:
    984              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_7:
   \   00000070   ........           LDR      R0,??DataTable16_2
   \   00000074   1EFF2FE1           BX       LR
    985            case LCD_DEVFUNC_SET_VSIZE:
    986              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_8:
   \   00000078   ........           LDR      R0,??DataTable16_3
   \   0000007C   1EFF2FE1           BX       LR
    987            case LCD_DEVFUNC_SET_SIZE:
    988              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_9:
   \   00000080   ........           LDR      R0,??DataTable16_4
   \   00000084   1EFF2FE1           BX       LR
    989            case LCD_DEVFUNC_SETPOS:
    990              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_4:
   \   00000088   ........           LDR      R0,??DataTable16_5
   \   0000008C   1EFF2FE1           BX       LR
    991            case LCD_DEVFUNC_GETPOS:
    992              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_5:
   \   00000090   ........           LDR      R0,??DataTable16_6
   \   00000094   1EFF2FE1           BX       LR
    993            case LCD_DEVFUNC_SETALPHA:
    994              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_3:
   \   00000098   ........           LDR      R0,??DataTable16_7
   \   0000009C   1EFF2FE1           BX       LR
    995            case LCD_DEVFUNC_SETVIS:
    996              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_6:
   \   000000A0   ........           LDR      R0,??DataTable16_8
   \   000000A4   1EFF2FE1           BX       LR
    997            case LCD_DEVFUNC_INIT:
    998              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_10:
   \   000000A8   ........           LDR      R0,??DataTable16_9
   \   000000AC   1EFF2FE1           BX       LR
    999            case LCD_DEVFUNC_ON:
   1000              return (void (*)(void))_On;
   \                     ??_GetDevFunc_11:
   \   000000B0   ........           LDR      R0,??DataTable16_10
   \   000000B4   1EFF2FE1           BX       LR
   1001            case LCD_DEVFUNC_OFF:
   1002              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_12:
   \   000000B8   ........           LDR      R0,??DataTable16_11
   \   000000BC   1EFF2FE1           BX       LR
   1003            case LCD_DEVFUNC_SETLUTENTRY:
   1004              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_13:
   \   000000C0   ........           LDR      R0,??DataTable16_12
   \   000000C4   1EFF2FE1           BX       LR
   1005          
   1006            case LCD_DEVFUNC_ALPHAMODE:
   1007              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_14:
   \   000000C8   ........           LDR      R0,??DataTable16_13
   \   000000CC   1EFF2FE1           BX       LR
   1008            case LCD_DEVFUNC_CHROMAMODE:
   1009              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_15:
   \   000000D0   ........           LDR      R0,??DataTable16_14
   \   000000D4   1EFF2FE1           BX       LR
   1010            case LCD_DEVFUNC_CHROMA:
   1011              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_16:
   \   000000D8   ........           LDR      R0,??DataTable16_15
   \   000000DC   1EFF2FE1           BX       LR
   1012            
   1013            case LCD_DEVFUNC_SETFUNC:
   1014              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_17:
   \   000000E0   ........           LDR      R0,??DataTable16_16
   \   000000E4   1EFF2FE1           BX       LR
   1015            }
   1016            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   1EFF2FE1           BX       LR               ;; return
   1017          }
   1018          
   1019          /*********************************************************************
   1020          *
   1021          *       Public data
   1022          *
   1023          **********************************************************************
   1024          */
   1025          /*********************************************************************
   1026          *
   1027          *       GUI_DEVICE_API structure
   1028          */

   \                                 In section .rodata, align 4, keep-with-next
   1029          const GUI_DEVICE_API GUIDRV_Lin_OX_32_API = {
   \                     GUIDRV_Lin_OX_32_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _ReadRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1030            //
   1031            // Data
   1032            //
   1033            DEVICE_CLASS_DRIVER,
   1034            //
   1035            // Drawing functions
   1036            //
   1037            _DrawBitmap,
   1038            _DrawHLine,
   1039            _DrawVLine,
   1040            _FillRect,
   1041            _GetPixelIndex,
   1042            _SetPixelIndex,
   1043            _XorPixel,
   1044            //
   1045            // Set origin
   1046            //
   1047            _SetOrg,
   1048            //
   1049            // Request information
   1050            //
   1051            _GetDevFunc,
   1052            _GetDevProp,
   1053            _GetDevData,
   1054            _GetRect,
   1055          };
   1056          
   1057          #else
   1058          
   1059          void GUIDRV_Lin_OX_32_C(void);   // Avoid empty object files
   1060          void GUIDRV_Lin_OX_32_C(void) {}
   1061          
   1062          #endif
   1063          
   1064          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitLine1BPP     32
     _DrawBitLine2BPP     20
     _DrawBitLine4BPP     20
     _DrawBitLine8BPP     12
     _DrawBitmap          56
     _DrawHLine           24
     _DrawVLine           24
     _FillRect            24
     _GetDevData           0
     _GetDevFunc           0
     _GetDevProp           0
     _GetPixelIndex        0
     _GetPos              16
     _GetRect              0
     _Init                16
     _Off                  8
     _On                   8
     _ReadRect            16
     _SetAlpha            16
     _SetAlphaMode         8
     _SetChroma           24
     _SetChromaMode        8
     _SetFunc             16
     _SetLUTEntry         24
     _SetOrg              24
     _SetPixelIndex        4
     _SetPos              24
     _SetSize             24
     _SetVRAMAddr         16
     _SetVSize            16
     _SetVis              16
     _XorPixel            24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            40
     _GetPixelIndex            36
     _XorPixel                108
     _DrawHLine               308
     _DrawVLine               208
     _FillRect                 68
     _DrawBitLine1BPP         392
     _DrawBitLine2BPP         224
     _DrawBitLine4BPP         224
     _DrawBitLine8BPP         348
     _DrawBitmap             1136
     _SetOrg                   84
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _ReadRect                108
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              240
     GUIDRV_Lin_OX_32_API      52
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable15_2            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ??DataTable16_16           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 5 020 bytes in section .text
 
 5 020 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
