###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\PROGBAR.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\PROGBAR.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\PR #
#                    OGBAR.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\PRO #
#                    GBAR.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\PROGBAR.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : ProgBar.c
     19          Purpose     : Implementation of progress bar
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include "PROGBAR_Private.h"
     25          
     26          #if GUI_WINSUPPORT
     27          
     28          /*********************************************************************
     29          *
     30          *       Private config defaults
     31          *
     32          **********************************************************************
     33          */
     34          
     35          #ifndef PROGBAR_DEFAULT_FONT
     36            #if   WIDGET_USE_SCHEME_SMALL
     37              #define PROGBAR_DEFAULT_FONT &GUI_Font6x8
     38            #elif WIDGET_USE_SCHEME_MEDIUM
     39              #define PROGBAR_DEFAULT_FONT &GUI_Font8x12_ASCII
     40            #elif WIDGET_USE_SCHEME_LARGE
     41              #define PROGBAR_DEFAULT_FONT &GUI_Font8x16
     42            #endif
     43          #endif
     44          
     45          #ifndef PROGBAR_DEFAULT_BARCOLOR0
     46            #define PROGBAR_DEFAULT_BARCOLOR0 0x555555
     47          #endif
     48          
     49          #ifndef PROGBAR_DEFAULT_BARCOLOR1
     50            #define PROGBAR_DEFAULT_BARCOLOR1 0xAAAAAA
     51          #endif
     52          
     53          #ifndef PROGBAR_DEFAULT_TEXTCOLOR0
     54            #define PROGBAR_DEFAULT_TEXTCOLOR0 0xFFFFFF
     55          #endif
     56          
     57          #ifndef PROGBAR_DEFAULT_TEXTCOLOR1
     58            #define PROGBAR_DEFAULT_TEXTCOLOR1 0x000000
     59          #endif
     60          
     61          #ifndef   PROGBAR_DRAW_SKIN_DEFAULT
     62            #define PROGBAR_DRAW_SKIN_DEFAULT NULL
     63          #endif
     64          
     65          /*********************************************************************
     66          *
     67          *       Static data
     68          *
     69          **********************************************************************
     70          */

   \                                 In section .data, align 4
     71          PROGBAR_PROPS PROGBAR__DefaultProps = {
   \                     PROGBAR__DefaultProps:
   \   00000000   ........5555       DC32 GUI_Font6x8, 5592405, 11184810, 16777215, 0
   \              5500AAAAAA00
   \              FFFFFF000000
   \              0000        
   \   00000014   00000000           DC8 0, 0, 0, 0
     72            PROGBAR_DEFAULT_FONT,
     73            {
     74              PROGBAR_DEFAULT_BARCOLOR0,
     75              PROGBAR_DEFAULT_BARCOLOR1,
     76            },
     77            {
     78              PROGBAR_DEFAULT_TEXTCOLOR0,
     79              PROGBAR_DEFAULT_TEXTCOLOR1
     80            }
     81          };
     82          
     83          WIDGET_SKIN const * PROGBAR__pSkinDefault = &PROGBAR__SkinClassic;
   \                     PROGBAR__pSkinDefault:
   \   00000018   ........           DC32 PROGBAR__SkinClassic
     84          
     85          /*********************************************************************
     86          *
     87          *       Static routines
     88          *
     89          **********************************************************************
     90          */
     91          /*********************************************************************
     92          *
     93          *       _Paint
     94          */
     95          static void _Paint(PROGBAR_Handle hObj) {
     96            PROGBAR_Obj * pObj;
     97            WIDGET_PAINT * pfPaint;
     98          
     99            pObj = PROGBAR_LOCK_H(hObj);
    100            pfPaint = pObj->pWidgetSkin->pfPaint;
    101            GUI_UNLOCK_H(pObj);
    102            if (pfPaint) {
    103              pfPaint(hObj);
    104            }
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       _Delete
    110          */
    111          static void _Delete(PROGBAR_Handle hObj) {
    112            PROGBAR_Obj * pObj;
    113            pObj = PROGBAR_LOCK_H(hObj);
    114            GUI_ALLOC_FreePtr(&pObj->hpText);
    115            GUI_UNLOCK_H(pObj);
    116          }
    117          
    118          /*********************************************************************
    119          *
    120          *       _SetValue
    121          */
    122          static void _SetValue(PROGBAR_Obj * pObj, char * pText, int v) {
    123            char * p;
    124            pObj->v = v;
    125            p = pText;
    126            GUI_AddDecMin((100 * (I32)(pObj->v - pObj->Min)) / (pObj->Max - pObj->Min), &p);
    127            *p++ = '%';
    128            *p   = 0;
    129          }
    130          
    131          /*********************************************************************
    132          *
    133          *       Private routines
    134          *
    135          **********************************************************************
    136          */
    137          /*********************************************************************
    138          *
    139          *       PROGBAR_LockH
    140          */
    141          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    142          PROGBAR_Obj * PROGBAR_LockH(PROGBAR_Handle h) {
    143            PROGBAR_Obj * p = (PROGBAR_Obj *)GUI_LOCK_H(h);
    144            if (p) {
    145              if (p->DebugId != PROGBAR_ID) {
    146                GUI_DEBUG_ERROROUT("PROGBAR.c: Wrong handle type or Object not init'ed");
    147                return 0;
    148              }
    149            }
    150            return p;
    151          }
    152          #endif
    153          
    154          /*********************************************************************
    155          *
    156          *       PROGBAR__GetTextLocked
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          char * PROGBAR__GetTextLocked(const PROGBAR_Obj * pObj) {
    159            char * pText;
    160            pText = (char *)GUI_LOCK_H(pObj->hpText);
    161            return pText;
   \                     PROGBAR__GetTextLocked:
   \   00000000   380090E5           LDR      R0,[R0, #+56]
   \   00000004   ........           B        GUI_ALLOC_LockH  ;; tailcall
    162          }
    163          
    164          /*********************************************************************
    165          *
    166          *       PROGBAR__GetTextRect
    167          */

   \                                 In section .text, align 4, keep-with-next
    168          void PROGBAR__GetTextRect(const PROGBAR_Obj * pObj, GUI_RECT* pRect, const char* pText) {
   \                     PROGBAR__GetTextRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0200A0E1           MOV      R0,R2
    169            int xSize      = pObj->Widget.Win.Rect.x1 - pObj->Widget.Win.Rect.x0 + 1;
   \   00000010   F410D4E1           LDRSH    R1,[R4, #+4]
   \   00000014   F020D4E1           LDRSH    R2,[R4, #+0]
   \   00000018   021041E0           SUB      R1,R1,R2
   \   0000001C   017081E2           ADD      R7,R1,#+1
    170            int ySize      = pObj->Widget.Win.Rect.y1 - pObj->Widget.Win.Rect.y0 + 1;
   \   00000020   F610D4E1           LDRSH    R1,[R4, #+6]
   \   00000024   F220D4E1           LDRSH    R2,[R4, #+2]
   \   00000028   021041E0           SUB      R1,R1,R2
   \   0000002C   018081E2           ADD      R8,R1,#+1
    171            int TextWidth  = GUI_GetStringDistX(pText);
   \   00000030   ........           BL       GUI_GetStringDistX
   \   00000034   0060A0E1           MOV      R6,R0
    172            int TextHeight = GUI_GetFontSizeY();
   \   00000038   ........           BL       GUI_GetFontSizeY
    173            int EffectSize = pObj->Widget.pEffect->EffectSize;
    174            switch (pObj->TextAlign & GUI_TA_HORIZONTAL) {
   \   0000003C   4020D4E5           LDRB     R2,[R4, #+64]
   \   00000040   2C1094E5           LDR      R1,[R4, #+44]
   \   00000044   032002E2           AND      R2,R2,#0x3
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   010052E3           CMP      R2,#+1
   \   00000050   0600000A           BEQ      ??PROGBAR__GetTextRect_0
   \   00000054   0800003A           BCC      ??PROGBAR__GetTextRect_1
   \   00000058   020052E3           CMP      R2,#+2
   \   0000005C   0600001A           BNE      ??PROGBAR__GetTextRect_1
    175            case GUI_TA_CENTER:
    176              pRect->x0 = (xSize - TextWidth) / 2;
   \   00000060   061047E0           SUB      R1,R7,R6
   \   00000064   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000068   C110A0E1           ASR      R1,R1,#+1
    177          		break;
   \   0000006C   020000EA           B        ??PROGBAR__GetTextRect_1
    178            case GUI_TA_RIGHT:
    179              pRect->x0 = xSize - TextWidth - 1 - EffectSize;
   \                     ??PROGBAR__GetTextRect_0:
   \   00000070   062047E0           SUB      R2,R7,R6
   \   00000074   012042E2           SUB      R2,R2,#+1
   \   00000078   011042E0           SUB      R1,R2,R1
    180          		break;
    181            default:
    182              pRect->x0 = EffectSize;
   \                     ??PROGBAR__GetTextRect_1:
   \   0000007C   B010C5E1           STRH     R1,[R5, #+0]
    183          	}
    184            pRect->y0  = (ySize - TextHeight) / 2;
   \   00000080   001048E0           SUB      R1,R8,R0
   \   00000084   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000088   C110A0E1           ASR      R1,R1,#+1
   \   0000008C   B210C5E1           STRH     R1,[R5, #+2]
    185            pRect->x0 += pObj->XOff;
   \   00000090   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000094   FC23D4E1           LDRSH    R2,[R4, #+60]
   \   00000098   011082E0           ADD      R1,R2,R1
   \   0000009C   B010C5E1           STRH     R1,[R5, #+0]
    186            pRect->y0 += pObj->YOff;
   \   000000A0   F220D5E1           LDRSH    R2,[R5, #+2]
   \   000000A4   FE33D4E1           LDRSH    R3,[R4, #+62]
    187            pRect->x1  = pRect->x0 + TextWidth  - 1;
   \   000000A8   011086E0           ADD      R1,R6,R1
   \   000000AC   011041E2           SUB      R1,R1,#+1
   \   000000B0   022083E0           ADD      R2,R3,R2
   \   000000B4   B220C5E1           STRH     R2,[R5, #+2]
   \   000000B8   B410C5E1           STRH     R1,[R5, #+4]
    188            pRect->y1  = pRect->y0 + TextHeight - 1;
   \   000000BC   F210D5E1           LDRSH    R1,[R5, #+2]
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   010040E2           SUB      R0,R0,#+1
   \   000000C8   B600C5E1           STRH     R0,[R5, #+6]
    189          }
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    190          
    191          /*********************************************************************
    192          *
    193          *       PROGBAR__Value2Pos
    194          */

   \                                 In section .text, align 4, keep-with-next
    195          int PROGBAR__Value2Pos(const PROGBAR_Obj * pObj, int v) {
   \                     PROGBAR__Value2Pos:
   \   00000000   10402DE9           PUSH     {R4,LR}
    196            int IsVertical, EffectSize, Size, Min, Max;
    197          
    198            IsVertical = pObj->Flags & PROGBAR_CF_VERTICAL;
   \   00000004   6820D0E5           LDRB     R2,[R0, #+104]
    199            EffectSize = pObj->Widget.pEffect->EffectSize;
   \   00000008   2C3090E5           LDR      R3,[R0, #+44]
   \   0000000C   012012E2           ANDS     R2,R2,#0x1
   \   00000010   004093E5           LDR      R4,[R3, #+0]
    200            Size = IsVertical ? pObj->Widget.Win.Rect.y1 - pObj->Widget.Win.Rect.y0 + 1 : pObj->Widget.Win.Rect.x1 - pObj->Widget.Win.Rect.x0 + 1;
   \   00000014   F630D011           LDRSHNE  R3,[R0, #+6]
   \   00000018   F2C0D011           LDRSHNE  R12,[R0, #+2]
   \   0000001C   F430D001           LDRSHEQ  R3,[R0, #+4]
   \   00000020   F0C0D001           LDRSHEQ  R12,[R0, #+0]
    201            Min  = pObj->Min;
    202            Max  = pObj->Max;
   \   00000024   48E090E5           LDR      LR,[R0, #+72]
   \   00000028   0C3043E0           SUB      R3,R3,R12
   \   0000002C   44C090E5           LDR      R12,[R0, #+68]
    203            if (v < Min) {
    204          	  v = Min;
    205            }
    206            if (v > Max) {
   \   00000030   0E00A0E1           MOV      R0,LR
   \   00000034   0C0051E1           CMP      R1,R12
   \   00000038   0C10A0B1           MOVLT    R1,R12
   \   0000003C   01005EE1           CMP      LR,R1
   \   00000040   0100A0C1           MOVGT    R0,R1
    207          	  v = Max;
    208            }
    209            return EffectSize + ((Size - 2 * EffectSize) * (I32)(IsVertical ? Max - v : v - Min)) / (Max - Min);
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   013083E2           ADD      R3,R3,#+1
   \   0000004C   00104E10           SUBNE    R1,LR,R0
   \   00000050   0C104000           SUBEQ    R1,R0,R12
   \   00000054   840043E0           SUB      R0,R3,R4, LSL #+1
   \   00000058   910000E0           MUL      R0,R1,R0
   \   0000005C   0C104EE0           SUB      R1,LR,R12
   \   00000060   ........           BL       __aeabi_idiv
   \   00000064   040080E0           ADD      R0,R0,R4
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
    210          }
    211          
    212          /*********************************************************************
    213          *
    214          *       Exported routines:  Callback
    215          *
    216          **********************************************************************
    217          */
    218          /*********************************************************************
    219          *
    220          *       PROGBAR_Callback
    221          */

   \                                 In section .text, align 4, keep-with-next
    222          void PROGBAR_Callback(WM_MESSAGE * pMsg) {
   \                     PROGBAR_Callback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    223            PROGBAR_Handle hObj;
    224            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
    225            /* Let widget handle the standard messages */
    226            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1500000A           BEQ      ??PROGBAR_Callback_0
    227              return;
    228            }
    229            switch (pMsg->MsgId) {
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   0B0050E2           SUBS     R0,R0,#+11
   \   0000002C   0B00000A           BEQ      ??PROGBAR_Callback_1
   \   00000030   040050E2           SUBS     R0,R0,#+4
   \   00000034   0E00001A           BNE      ??PROGBAR_Callback_2
    230            case WM_PAINT:
    231              _Paint(hObj);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_ALLOC_LockH
   \   00000040   640090E5           LDR      R0,[R0, #+100]
   \   00000044   004090E5           LDR      R4,[R0, #+0]
   \   00000048   ........           BL       GUI_ALLOC_UnlockH
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   0900000A           BEQ      ??PROGBAR_Callback_0
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   34FF2FE1           BLX      R4
   \   0000005C   060000EA           B        ??PROGBAR_Callback_0
    232              return;
    233            case WM_DELETE:
    234              _Delete(hObj);
   \                     ??PROGBAR_Callback_1:
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       GUI_ALLOC_LockH
   \   00000068   380080E2           ADD      R0,R0,#+56
   \   0000006C   ........           BL       GUI_ALLOC_FreePtr
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
    235              break;
    236            }
    237            WM_DefaultProc(pMsg);
   \                     ??PROGBAR_Callback_2:
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       WM_DefaultProc
    238          }
   \                     ??PROGBAR_Callback_0:
   \   0000007C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
    239          
    240          /*********************************************************************
    241          *
    242          *       Exported routines:  Create
    243          *
    244          **********************************************************************
    245          */
    246          /*********************************************************************
    247          *
    248          *       PROGBAR_CreateEx
    249          */

   \                                 In section .text, align 4, keep-with-next
    250          PROGBAR_Handle PROGBAR_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    251                                          int WinFlags, int ExFlags, int Id)
    252          {
   \                     PROGBAR_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0380A0E1           MOV      R8,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   40409DE5           LDR      R4,[SP, #+64]
   \   00000024   44909DE5           LDR      R9,[SP, #+68]
    253            PROGBAR_Handle hObj;
    254            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    255            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, PROGBAR_Callback,
    256                                          sizeof(PROGBAR_Obj) - sizeof(WM_Obj));
   \   0000002C   4000A0E3           MOV      R0,#+64
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable1
   \   00000038   04B08DE5           STR      R11,[SP, #+4]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   00A08DE5           STR      R10,[SP, #+0]
   \   00000044   0830A0E1           MOV      R3,R8
   \   00000048   0720A0E1           MOV      R2,R7
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   0050B0E1           MOVS     R5,R0
    257            if (hObj) {
   \   0000005C   3200000A           BEQ      ??PROGBAR_CreateEx_0
    258              PROGBAR_Obj * pObj;
    259              char * pText;
    260              WM_HMEM hpText;
    261              hpText = GUI_ALLOC_AllocZero(5);
   \   00000060   0500A0E3           MOV      R0,#+5
   \   00000064   ........           BL       GUI_ALLOC_AllocZero
   \   00000068   0060B0E1           MOVS     R6,R0
    262              if (hpText) {
   \   0000006C   2E00000A           BEQ      ??PROGBAR_CreateEx_0
    263                pObj = (PROGBAR_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       GUI_ALLOC_LockH
   \   00000078   0080A0E1           MOV      R8,R0
    264                /* init widget specific variables */
    265                WIDGET__Init(&pObj->Widget, Id, 0);
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0910A0E1           MOV      R1,R9
   \   00000084   ........           BL       WIDGET__Init
    266                WIDGET_SetEffect(hObj, &WIDGET_Effect_None); /* Standard effect for progbar: None */
   \   00000088   ........           LDR      R1,??DataTable1_1
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       WIDGET_SetEffect
    267                PROGBAR_INIT_ID(pObj);
    268                /* init member variables */
    269                pObj->pWidgetSkin = PROGBAR__pSkinDefault;
   \   00000094   ........           LDR      R9,??DataTable1_2
    270                pObj->Props        = PROGBAR__DefaultProps;
    271                pObj->TextAlign    = GUI_TA_CENTER;
    272                pObj->Max          = 100;
    273                pObj->Min          = 0;
   \   00000098   00B0A0E3           MOV      R11,#+0
   \   0000009C   180099E5           LDR      R0,[R9, #+24]
   \   000000A0   640088E5           STR      R0,[R8, #+100]
   \   000000A4   0E54B9E8           LDM      R9!,{R1-R3,R10,R12,LR}
   \   000000A8   4C0088E2           ADD      R0,R8,#+76
   \   000000AC   0E54A0E8           STM      R0!,{R1-R3,R10,R12,LR}
   \   000000B0   0200A0E3           MOV      R0,#+2
   \   000000B4   B004C8E1           STRH     R0,[R8, #+64]
   \   000000B8   64A0A0E3           MOV      R10,#+100
   \   000000BC   48A088E5           STR      R10,[R8, #+72]
   \   000000C0   44B088E5           STR      R11,[R8, #+68]
    274                pObj->Flags        = ExFlags;
   \   000000C4   6840C8E5           STRB     R4,[R8, #+104]
   \   000000C8   189049E2           SUB      R9,R9,#+24
    275                pObj->hpText       = hpText;
   \   000000CC   386088E5           STR      R6,[R8, #+56]
    276                pText = (char *)GUI_LOCK_H(pObj->hpText);
   \   000000D0   0600A0E1           MOV      R0,R6
   \   000000D4   ........           BL       GUI_ALLOC_LockH
    277                _SetValue(pObj, pText, 0);
   \   000000D8   34B088E5           STR      R11,[R8, #+52]
   \   000000DC   00008DE5           STR      R0,[SP, #+0]
   \   000000E0   442098E5           LDR      R2,[R8, #+68]
   \   000000E4   481098E5           LDR      R1,[R8, #+72]
   \   000000E8   9A0200E0           MUL      R0,R10,R2
   \   000000EC   021041E0           SUB      R1,R1,R2
   \   000000F0   ........           BL       __aeabi_idiv
   \   000000F4   000060E2           RSB      R0,R0,#+0
   \   000000F8   0D10A0E1           MOV      R1,SP
   \   000000FC   ........           BL       GUI_AddDecMin
   \   00000100   00009DE5           LDR      R0,[SP, #+0]
   \   00000104   2510A0E3           MOV      R1,#+37
   \   00000108   0010C0E5           STRB     R1,[R0, #+0]
   \   0000010C   00009DE5           LDR      R0,[SP, #+0]
   \   00000110   01B0C0E5           STRB     R11,[R0, #+1]
    278                GUI_UNLOCK_H(pText);
   \   00000114   ........           BL       GUI_ALLOC_UnlockH
    279                GUI_UNLOCK_H(pObj);
   \   00000118   ........           BL       GUI_ALLOC_UnlockH
    280                PROGBAR__pSkinDefault->pfCreate(hObj);
   \   0000011C   181099E5           LDR      R1,[R9, #+24]
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   041091E5           LDR      R1,[R1, #+4]
   \   00000128   31FF2FE1           BLX      R1
    281              }
    282            }
    283            WM_UNLOCK();
   \                     ??PROGBAR_CreateEx_0:
   \   0000012C   ........           BL       GUI_Unlock
    284            return hObj;
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   14D08DE2           ADD      SP,SP,#+20
   \   00000138   F08FBDE8           POP      {R4-R11,PC}      ;; return
    285          }
    286          
    287          /*********************************************************************
    288          *
    289          *       Exported routines:  Various methods
    290          *
    291          **********************************************************************
    292          */
    293          /*********************************************************************
    294          *
    295          *       PROGBAR_SetValue
    296          */

   \                                 In section .text, align 4, keep-with-next
    297          void PROGBAR_SetValue(PROGBAR_Handle hObj, int v) {
   \                     PROGBAR_SetValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0150A0E1           MOV      R5,R1
    298            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1D01000A           BEQ      ??PROGBAR_SetValue_0
    299              PROGBAR_Obj * pObj;
    300              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    301              pObj = PROGBAR_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0060A0E1           MOV      R6,R0
    302              /* Put v into legal range */
    303              if (v < pObj->Min) {
   \   00000028   447096E5           LDR      R7,[R6, #+68]
    304          	    v = pObj->Min;
    305              }
    306              if (v > pObj->Max) {
   \   0000002C   488096E5           LDR      R8,[R6, #+72]
   \   00000030   070055E1           CMP      R5,R7
   \   00000034   0750A0B1           MOVLT    R5,R7
   \   00000038   050058E1           CMP      R8,R5
    307          	    v = pObj->Max;
    308              }
    309              if (pObj->v != v) {
   \   0000003C   349096E5           LDR      R9,[R6, #+52]
   \   00000040   0850A0D1           MOVLE    R5,R8
   \   00000044   050059E1           CMP      R9,R5
   \   00000048   0E01000A           BEQ      ??PROGBAR_SetValue_1
    310                GUI_RECT r;
    311                if (pObj->Flags & PROGBAR_CF_VERTICAL) {
   \   0000004C   6810D6E5           LDRB     R1,[R6, #+104]
   \   00000050   2CA096E5           LDR      R10,[R6, #+44]
   \   00000054   010011E2           ANDS     R0,R1,#0x1
   \   00000058   6200000A           BEQ      ??PROGBAR_SetValue_2
    312                  /* Get y values */
    313                  if (v < pObj->v) {
   \   0000005C   090055E1           CMP      R5,R9
   \   00000060   2A0000AA           BGE      ??PROGBAR_SetValue_3
    314                    r.y1 = PROGBAR__Value2Pos(pObj, v);
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0530A0E1           MOV      R3,R5
   \   0000006C   F620D611           LDRSHNE  R2,[R6, #+6]
   \   00000070   F2C0D611           LDRSHNE  R12,[R6, #+2]
   \   00000074   F420D601           LDRSHEQ  R2,[R6, #+4]
   \   00000078   F0C0D601           LDRSHEQ  R12,[R6, #+0]
   \   0000007C   070053E1           CMP      R3,R7
   \   00000080   0730A0B1           MOVLT    R3,R7
   \   00000084   030058E1           CMP      R8,R3
   \   00000088   00109AE5           LDR      R1,[R10, #+0]
   \   0000008C   0C2042E0           SUB      R2,R2,R12
   \   00000090   0830A0D1           MOVLE    R3,R8
   \   00000094   012082E2           ADD      R2,R2,#+1
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   03304810           SUBNE    R3,R8,R3
   \   000000A0   07304300           SUBEQ    R3,R3,R7
   \   000000A4   810042E0           SUB      R0,R2,R1, LSL #+1
   \   000000A8   07B048E0           SUB      R11,R8,R7
   \   000000AC   00108DE5           STR      R1,[SP, #+0]
   \   000000B0   930000E0           MUL      R0,R3,R0
   \   000000B4   0B10A0E1           MOV      R1,R11
   \   000000B8   ........           BL       __aeabi_idiv
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   BA00CDE1           STRH     R0,[SP, #+10]
    315                    r.y0 = PROGBAR__Value2Pos(pObj, pObj->v);
   \   000000C8   6800D6E5           LDRB     R0,[R6, #+104]
   \   000000CC   012010E2           ANDS     R2,R0,#0x1
   \   000000D0   F610D611           LDRSHNE  R1,[R6, #+6]
   \   000000D4   F230D611           LDRSHNE  R3,[R6, #+2]
   \   000000D8   F410D601           LDRSHEQ  R1,[R6, #+4]
   \   000000DC   F030D601           LDRSHEQ  R3,[R6, #+0]
   \   000000E0   070059E1           CMP      R9,R7
   \   000000E4   0790A0B1           MOVLT    R9,R7
   \   000000E8   031041E0           SUB      R1,R1,R3
   \   000000EC   0830A0E1           MOV      R3,R8
   \   000000F0   090058E1           CMP      R8,R9
   \   000000F4   0930A0C1           MOVGT    R3,R9
   \   000000F8   000052E3           CMP      R2,#+0
   \   000000FC   00009AE5           LDR      R0,[R10, #+0]
   \   00000100   011081E2           ADD      R1,R1,#+1
   \   00000104   03204810           SUBNE    R2,R8,R3
   \   00000108   07204300           SUBEQ    R2,R3,R7
   \   0000010C   280000EA           B        ??PROGBAR_SetValue_4
    316                  } else {
    317                    r.y1 = PROGBAR__Value2Pos(pObj, pObj->v);
   \                     ??PROGBAR_SetValue_3:
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   F620D611           LDRSHNE  R2,[R6, #+6]
   \   00000118   F230D611           LDRSHNE  R3,[R6, #+2]
   \   0000011C   F420D601           LDRSHEQ  R2,[R6, #+4]
   \   00000120   F030D601           LDRSHEQ  R3,[R6, #+0]
   \   00000124   070059E1           CMP      R9,R7
   \   00000128   0790A0B1           MOVLT    R9,R7
   \   0000012C   032042E0           SUB      R2,R2,R3
   \   00000130   0830A0E1           MOV      R3,R8
   \   00000134   090058E1           CMP      R8,R9
   \   00000138   00109AE5           LDR      R1,[R10, #+0]
   \   0000013C   0930A0C1           MOVGT    R3,R9
   \   00000140   012082E2           ADD      R2,R2,#+1
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   03304810           SUBNE    R3,R8,R3
   \   0000014C   07304300           SUBEQ    R3,R3,R7
   \   00000150   810042E0           SUB      R0,R2,R1, LSL #+1
   \   00000154   07B048E0           SUB      R11,R8,R7
   \   00000158   0190A0E1           MOV      R9,R1
   \   0000015C   930000E0           MUL      R0,R3,R0
   \   00000160   0B10A0E1           MOV      R1,R11
   \   00000164   ........           BL       __aeabi_idiv
   \   00000168   090080E0           ADD      R0,R0,R9
   \   0000016C   BA00CDE1           STRH     R0,[SP, #+10]
    318                    r.y0 = PROGBAR__Value2Pos(pObj, v);
   \   00000170   6800D6E5           LDRB     R0,[R6, #+104]
   \   00000174   0520A0E1           MOV      R2,R5
   \   00000178   013010E2           ANDS     R3,R0,#0x1
   \   0000017C   F610D611           LDRSHNE  R1,[R6, #+6]
   \   00000180   F2C0D611           LDRSHNE  R12,[R6, #+2]
   \   00000184   F410D601           LDRSHEQ  R1,[R6, #+4]
   \   00000188   F0C0D601           LDRSHEQ  R12,[R6, #+0]
   \   0000018C   070052E1           CMP      R2,R7
   \   00000190   0720A0B1           MOVLT    R2,R7
   \   00000194   020058E1           CMP      R8,R2
   \   00000198   0820A0D1           MOVLE    R2,R8
   \   0000019C   0C1041E0           SUB      R1,R1,R12
   \   000001A0   000053E3           CMP      R3,#+0
   \   000001A4   00009AE5           LDR      R0,[R10, #+0]
   \   000001A8   011081E2           ADD      R1,R1,#+1
   \   000001AC   02204810           SUBNE    R2,R8,R2
   \   000001B0   07204200           SUBEQ    R2,R2,R7
    319                  }
   \                     ??PROGBAR_SetValue_4:
   \   000001B4   0070A0E1           MOV      R7,R0
   \   000001B8   800041E0           SUB      R0,R1,R0, LSL #+1
   \   000001BC   920000E0           MUL      R0,R2,R0
   \   000001C0   0B10A0E1           MOV      R1,R11
   \   000001C4   ........           BL       __aeabi_idiv
    320          		    r.x0    = 0;
   \   000001C8   0010A0E3           MOV      R1,#+0
   \   000001CC   B410CDE1           STRH     R1,[SP, #+4]
    321          		    r.x1    = 4095;
   \   000001D0   FF10A0E3           MOV      R1,#+255
   \   000001D4   070080E0           ADD      R0,R0,R7
   \   000001D8   F01E81E3           ORR      R1,R1,#0xF00
   \   000001DC   B600CDE1           STRH     R0,[SP, #+6]
   \   000001E0   B810CDE1           STRH     R1,[SP, #+8]
    322                  pObj->v = v;
   \   000001E4   A30000EA           B        ??PROGBAR_SetValue_5
    323                } else {
    324                  /* Get x values */
    325                  if (v < pObj->v) {
   \                     ??PROGBAR_SetValue_2:
   \   000001E8   090055E1           CMP      R5,R9
   \   000001EC   2A0000AA           BGE      ??PROGBAR_SetValue_6
    326                    r.x0 = PROGBAR__Value2Pos(pObj, v);
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0530A0E1           MOV      R3,R5
   \   000001F8   F620D611           LDRSHNE  R2,[R6, #+6]
   \   000001FC   F2C0D611           LDRSHNE  R12,[R6, #+2]
   \   00000200   F420D601           LDRSHEQ  R2,[R6, #+4]
   \   00000204   F0C0D601           LDRSHEQ  R12,[R6, #+0]
   \   00000208   070053E1           CMP      R3,R7
   \   0000020C   0730A0B1           MOVLT    R3,R7
   \   00000210   030058E1           CMP      R8,R3
   \   00000214   00109AE5           LDR      R1,[R10, #+0]
   \   00000218   0C2042E0           SUB      R2,R2,R12
   \   0000021C   0830A0D1           MOVLE    R3,R8
   \   00000220   012082E2           ADD      R2,R2,#+1
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   03304810           SUBNE    R3,R8,R3
   \   0000022C   07304300           SUBEQ    R3,R3,R7
   \   00000230   810042E0           SUB      R0,R2,R1, LSL #+1
   \   00000234   07B048E0           SUB      R11,R8,R7
   \   00000238   00108DE5           STR      R1,[SP, #+0]
   \   0000023C   930000E0           MUL      R0,R3,R0
   \   00000240   0B10A0E1           MOV      R1,R11
   \   00000244   ........           BL       __aeabi_idiv
   \   00000248   00109DE5           LDR      R1,[SP, #+0]
   \   0000024C   010080E0           ADD      R0,R0,R1
   \   00000250   B400CDE1           STRH     R0,[SP, #+4]
    327                    r.x1 = PROGBAR__Value2Pos(pObj, pObj->v);
   \   00000254   6800D6E5           LDRB     R0,[R6, #+104]
   \   00000258   012010E2           ANDS     R2,R0,#0x1
   \   0000025C   F610D611           LDRSHNE  R1,[R6, #+6]
   \   00000260   F230D611           LDRSHNE  R3,[R6, #+2]
   \   00000264   F410D601           LDRSHEQ  R1,[R6, #+4]
   \   00000268   F030D601           LDRSHEQ  R3,[R6, #+0]
   \   0000026C   070059E1           CMP      R9,R7
   \   00000270   0790A0B1           MOVLT    R9,R7
   \   00000274   031041E0           SUB      R1,R1,R3
   \   00000278   0830A0E1           MOV      R3,R8
   \   0000027C   090058E1           CMP      R8,R9
   \   00000280   0930A0C1           MOVGT    R3,R9
   \   00000284   000052E3           CMP      R2,#+0
   \   00000288   00009AE5           LDR      R0,[R10, #+0]
   \   0000028C   011081E2           ADD      R1,R1,#+1
   \   00000290   03204810           SUBNE    R2,R8,R3
   \   00000294   07204300           SUBEQ    R2,R3,R7
   \   00000298   280000EA           B        ??PROGBAR_SetValue_7
    328                  } else {
    329                    r.x0 = PROGBAR__Value2Pos(pObj, pObj->v);
   \                     ??PROGBAR_SetValue_6:
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   F620D611           LDRSHNE  R2,[R6, #+6]
   \   000002A4   F230D611           LDRSHNE  R3,[R6, #+2]
   \   000002A8   F420D601           LDRSHEQ  R2,[R6, #+4]
   \   000002AC   F030D601           LDRSHEQ  R3,[R6, #+0]
   \   000002B0   070059E1           CMP      R9,R7
   \   000002B4   0790A0B1           MOVLT    R9,R7
   \   000002B8   032042E0           SUB      R2,R2,R3
   \   000002BC   0830A0E1           MOV      R3,R8
   \   000002C0   090058E1           CMP      R8,R9
   \   000002C4   00109AE5           LDR      R1,[R10, #+0]
   \   000002C8   0930A0C1           MOVGT    R3,R9
   \   000002CC   012082E2           ADD      R2,R2,#+1
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   03304810           SUBNE    R3,R8,R3
   \   000002D8   07304300           SUBEQ    R3,R3,R7
   \   000002DC   810042E0           SUB      R0,R2,R1, LSL #+1
   \   000002E0   07B048E0           SUB      R11,R8,R7
   \   000002E4   0190A0E1           MOV      R9,R1
   \   000002E8   930000E0           MUL      R0,R3,R0
   \   000002EC   0B10A0E1           MOV      R1,R11
   \   000002F0   ........           BL       __aeabi_idiv
   \   000002F4   090080E0           ADD      R0,R0,R9
   \   000002F8   B400CDE1           STRH     R0,[SP, #+4]
    330                    r.x1 = PROGBAR__Value2Pos(pObj, v);
   \   000002FC   6800D6E5           LDRB     R0,[R6, #+104]
   \   00000300   0520A0E1           MOV      R2,R5
   \   00000304   013010E2           ANDS     R3,R0,#0x1
   \   00000308   F610D611           LDRSHNE  R1,[R6, #+6]
   \   0000030C   F2C0D611           LDRSHNE  R12,[R6, #+2]
   \   00000310   F410D601           LDRSHEQ  R1,[R6, #+4]
   \   00000314   F0C0D601           LDRSHEQ  R12,[R6, #+0]
   \   00000318   070052E1           CMP      R2,R7
   \   0000031C   0720A0B1           MOVLT    R2,R7
   \   00000320   020058E1           CMP      R8,R2
   \   00000324   0820A0D1           MOVLE    R2,R8
   \   00000328   0C1041E0           SUB      R1,R1,R12
   \   0000032C   000053E3           CMP      R3,#+0
   \   00000330   00009AE5           LDR      R0,[R10, #+0]
   \   00000334   011081E2           ADD      R1,R1,#+1
   \   00000338   02204810           SUBNE    R2,R8,R2
   \   0000033C   07204200           SUBEQ    R2,R2,R7
    331                  }
   \                     ??PROGBAR_SetValue_7:
   \   00000340   0070A0E1           MOV      R7,R0
   \   00000344   800041E0           SUB      R0,R1,R0, LSL #+1
   \   00000348   920000E0           MUL      R0,R2,R0
   \   0000034C   0B10A0E1           MOV      R1,R11
   \   00000350   ........           BL       __aeabi_idiv
   \   00000354   070080E0           ADD      R0,R0,R7
    332          		    r.y0    = 0;
    333          		    r.y1    = 4095;
   \   00000358   FF10A0E3           MOV      R1,#+255
   \   0000035C   0070A0E3           MOV      R7,#+0
   \   00000360   F01E81E3           ORR      R1,R1,#0xF00
   \   00000364   B800CDE1           STRH     R0,[SP, #+8]
   \   00000368   B670CDE1           STRH     R7,[SP, #+6]
   \   0000036C   BA10CDE1           STRH     R1,[SP, #+10]
    334                  if ((pObj->Flags & PROGBAR_SF_USER) == 0) {
   \   00000370   6800D6E5           LDRB     R0,[R6, #+104]
   \   00000374   020010E3           TST      R0,#0x2
   \   00000378   3E00001A           BNE      ??PROGBAR_SetValue_5
    335                    const GUI_FONT GUI_UNI_PTR * pOldFont;
    336                    char * pText;
    337                    GUI_RECT rText = {0};
   \   0000037C   ........           ADR      R3,`?<Constant {0}>`
   \   00000380   000093E5           LDR      R0,[R3, #+0]
   \   00000384   041093E5           LDR      R1,[R3, #+4]
   \   00000388   0C208DE2           ADD      R2,SP,#+12
   \   0000038C   030082E8           STM      R2,{R0,R1}
    338                    if (GUI_ALLOC_GetSize(pObj->hpText) < 5) {
   \   00000390   380096E5           LDR      R0,[R6, #+56]
   \   00000394   ........           BL       GUI_ALLOC_GetSize
   \   00000398   050050E3           CMP      R0,#+5
   \   0000039C   090000AA           BGE      ??PROGBAR_SetValue_8
    339                      WM_HMEM hpText;
    340                      hpText = pObj->hpText;
   \   000003A0   386096E5           LDR      R6,[R6, #+56]
    341                      GUI_UNLOCK_H(pObj);
   \   000003A4   ........           BL       GUI_ALLOC_UnlockH
    342                      hpText = GUI_ALLOC_Realloc(hpText, 5);
   \   000003A8   0510A0E3           MOV      R1,#+5
   \   000003AC   0600A0E1           MOV      R0,R6
   \   000003B0   ........           BL       GUI_ALLOC_Realloc
   \   000003B4   0080A0E1           MOV      R8,R0
    343                      pObj = PROGBAR_LOCK_H(hObj);
   \   000003B8   0400A0E1           MOV      R0,R4
   \   000003BC   ........           BL       GUI_ALLOC_LockH
   \   000003C0   0060A0E1           MOV      R6,R0
    344                      pObj->hpText = hpText;
   \   000003C4   388086E5           STR      R8,[R6, #+56]
    345                    }
    346                    pText = PROGBAR__GetTextLocked(pObj);
   \                     ??PROGBAR_SetValue_8:
   \   000003C8   380096E5           LDR      R0,[R6, #+56]
   \   000003CC   ........           BL       GUI_ALLOC_LockH
   \   000003D0   0080B0E1           MOVS     R8,R0
    347                    if (pText) {
   \   000003D4   2800000A           BEQ      ??PROGBAR_SetValue_9
    348                      pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   000003D8   4C0096E5           LDR      R0,[R6, #+76]
   \   000003DC   ........           BL       GUI_SetFont
   \   000003E0   0090A0E1           MOV      R9,R0
    349                      PROGBAR__GetTextRect(pObj, &rText, pText);
   \   000003E4   0820A0E1           MOV      R2,R8
   \   000003E8   0C108DE2           ADD      R1,SP,#+12
   \   000003EC   0600A0E1           MOV      R0,R6
   \   000003F0   ........           BL       PROGBAR__GetTextRect
    350                      GUI_MergeRect(&r, &r, &rText);
   \   000003F4   0C208DE2           ADD      R2,SP,#+12
   \   000003F8   04108DE2           ADD      R1,SP,#+4
   \   000003FC   04008DE2           ADD      R0,SP,#+4
   \   00000400   ........           BL       GUI_MergeRect
    351                      _SetValue(pObj, pText, v);
   \   00000404   345086E5           STR      R5,[R6, #+52]
   \   00000408   00808DE5           STR      R8,[SP, #+0]
   \   0000040C   442096E5           LDR      R2,[R6, #+68]
   \   00000410   340096E5           LDR      R0,[R6, #+52]
   \   00000414   6410A0E3           MOV      R1,#+100
   \   00000418   020040E0           SUB      R0,R0,R2
   \   0000041C   910000E0           MUL      R0,R1,R0
   \   00000420   481096E5           LDR      R1,[R6, #+72]
   \   00000424   021041E0           SUB      R1,R1,R2
   \   00000428   ........           BL       __aeabi_idiv
   \   0000042C   0D10A0E1           MOV      R1,SP
   \   00000430   ........           BL       GUI_AddDecMin
   \   00000434   00009DE5           LDR      R0,[SP, #+0]
   \   00000438   2510A0E3           MOV      R1,#+37
   \   0000043C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000440   00009DE5           LDR      R0,[SP, #+0]
    352                      PROGBAR__GetTextRect(pObj, &rText, pText);
   \   00000444   0820A0E1           MOV      R2,R8
   \   00000448   0170C0E5           STRB     R7,[R0, #+1]
   \   0000044C   0C108DE2           ADD      R1,SP,#+12
   \   00000450   0600A0E1           MOV      R0,R6
   \   00000454   ........           BL       PROGBAR__GetTextRect
    353                      GUI_MergeRect(&r, &r, &rText);
   \   00000458   0C208DE2           ADD      R2,SP,#+12
   \   0000045C   04108DE2           ADD      R1,SP,#+4
   \   00000460   04008DE2           ADD      R0,SP,#+4
   \   00000464   ........           BL       GUI_MergeRect
    354                      GUI_SetFont(pOldFont);
   \   00000468   0900A0E1           MOV      R0,R9
   \   0000046C   ........           BL       GUI_SetFont
    355                      GUI_UNLOCK_H(pText);
   \   00000470   ........           BL       GUI_ALLOC_UnlockH
   \   00000474   000000EA           B        ??PROGBAR_SetValue_9
    356                    }
    357                  } else {
    358                    pObj->v = v;
   \                     ??PROGBAR_SetValue_5:
   \   00000478   345086E5           STR      R5,[R6, #+52]
    359                  }
    360                }
    361                WM_InvalidateRect(hObj, &r);
   \                     ??PROGBAR_SetValue_9:
   \   0000047C   04108DE2           ADD      R1,SP,#+4
   \   00000480   0400A0E1           MOV      R0,R4
   \   00000484   ........           BL       WM_InvalidateRect
    362              }
    363              GUI_UNLOCK_H(pObj);
   \                     ??PROGBAR_SetValue_1:
   \   00000488   ........           BL       GUI_ALLOC_UnlockH
    364              WM_UNLOCK();
   \   0000048C   ........           BL       GUI_Unlock
    365            }
    366          }
   \                     ??PROGBAR_SetValue_0:
   \   00000490   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000494   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     PROGBAR_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     WIDGET_Effect_None

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     PROGBAR__DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0
    367          
    368          #else
    369          
    370          void WIDGET_Progbar(void) {} /* avoid empty object files */
    371          
    372          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     PROGBAR_Callback           16
     PROGBAR_CreateEx           56
     PROGBAR_SetValue           56
     PROGBAR__GetTextLocked      8
     PROGBAR__GetTextRect       24
     PROGBAR__Value2Pos          8


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     PROGBAR__DefaultProps    28
     PROGBAR__pSkinDefault
     PROGBAR__GetTextLocked    8
     PROGBAR__GetTextRect    208
     PROGBAR__Value2Pos      108
     PROGBAR_Callback        132
     PROGBAR_CreateEx        316
     PROGBAR_SetValue       1176
     ??DataTable1              4
     ??DataTable1_1            4
     ??DataTable1_2            4
     ?<Constant {0}>           8

 
    28 bytes in section .data
 1 968 bytes in section .text
 
 1 968 bytes of CODE memory
    28 bytes of DATA memory

Errors: none
Warnings: none
