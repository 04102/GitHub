###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_CharLine.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_CharLine.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_CharLine.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _CharLine.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_CharLine.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_CharLine.c
     19          Purpose     : Implementation of character and string services
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          #ifndef   GUI_SUPPORT_BIDI
     32            #define GUI_SUPPORT_BIDI 0
     33          #endif
     34          
     35          /*********************************************************************
     36          *
     37          *       Static code
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       _Log2VisBuffered
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          static const char GUI_UNI_PTR * _Log2VisBuffered(const char GUI_UNI_PTR * s, int * pMaxNumChars) {
     46            GUI_USE_PARA(pMaxNumChars);
     47            return s;
   \                     _Log2VisBuffered:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     48          }
     49          
     50          /*********************************************************************
     51          *
     52          *       Private data
     53          *
     54          **********************************************************************
     55          */
     56          /*********************************************************************
     57          *
     58          *       Function pointer for rearranging strings, default is static code
     59          */
     60          #if GUI_SUPPORT_BIDI
     61            const char GUI_UNI_PTR * (* GUI_CharLine_pfLog2Vis)(const char GUI_UNI_PTR * s, int * pMaxNumChars) = GUI__BIDI_Log2VisBuffered;
     62          #else

   \                                 In section .data, align 4
     63            const char GUI_UNI_PTR * (* GUI_CharLine_pfLog2Vis)(const char GUI_UNI_PTR * s, int * pMaxNumChars) = _Log2VisBuffered;
   \                     GUI_CharLine_pfLog2Vis:
   \   00000000   ........           DC32 _Log2VisBuffered
     64          #endif
     65          
     66          /*********************************************************************
     67          *
     68          *       _DispLine
     69          */
     70          static void _DispLine(const char GUI_UNI_PTR * s, int MaxNumChars, const GUI_RECT * pRect) {
     71            //
     72            // Conversion if required
     73            //
     74            s = GUI_CharLine_pfLog2Vis((char *)s, &MaxNumChars);
     75            //
     76            // Check if we have anything to do at all ...
     77            //
     78            if (GUI_Context.pClipRect_HL) {
     79              if (GUI_RectsIntersect(GUI_Context.pClipRect_HL, pRect) == 0)
     80                return;
     81            }
     82            if (GUI_Context.pAFont->pafEncode) {
     83              GUI_Context.pAFont->pafEncode->pfDispLine(s, MaxNumChars);
     84            } else {
     85              U16 Char;
     86              while (--MaxNumChars >= 0) {
     87                Char = GUI_UC__GetCharCodeInc(&s);
     88                GUI_Context.pAFont->pfDispChar(Char);
     89                if (GUI_pfDispCharStyle) {
     90                  GUI_pfDispCharStyle(Char);
     91                }
     92              }
     93            }
     94          }
     95          
     96          /*********************************************************************
     97          *
     98          *       Public code
     99          *
    100          **********************************************************************
    101          */
    102          /*********************************************************************
    103          *
    104          *       GUI__GetLineNumChars
    105          */

   \                                 In section .text, align 4, keep-with-next
    106          int GUI__GetLineNumChars(const char GUI_UNI_PTR * s, int MaxNumChars) {
   \                     GUI__GetLineNumChars:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    107            int NumChars = 0;
   \   00000008   0050A0E3           MOV      R5,#+0
    108            if (s) {
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1200000A           BEQ      ??GUI__GetLineNumChars_0
   \   00000014   ........           LDR      R0,??DataTable3
   \   00000018   1C0090E5           LDR      R0,[R0, #+28]
   \   0000001C   142090E5           LDR      R2,[R0, #+20]
   \   00000020   000052E3           CMP      R2,#+0
    109              if (GUI_Context.pAFont->pafEncode) {
    110                if (GUI_Context.pAFont->pafEncode->pfGetLineLen) {
   \   00000024   04009215           LDRNE    R0,[R2, #+4]
   \   00000028   00005013           CMPNE    R0,#+0
   \   0000002C   0400000A           BEQ      ??GUI__GetLineNumChars_1
    111                  return GUI_Context.pAFont->pafEncode->pfGetLineLen(s, MaxNumChars);
   \   00000030   00009DE5           LDR      R0,[SP, #+0]
   \   00000034   042092E5           LDR      R2,[R2, #+4]
   \   00000038   32FF2FE1           BLX      R2
   \   0000003C   080000EA           B        ??GUI__GetLineNumChars_2
    112                }
    113              }
    114              for (; NumChars < MaxNumChars; NumChars++) {
   \                     ??GUI__GetLineNumChars_3:
   \   00000040   015085E2           ADD      R5,R5,#+1
   \                     ??GUI__GetLineNumChars_1:
   \   00000044   040055E1           CMP      R5,R4
   \   00000048   040000AA           BGE      ??GUI__GetLineNumChars_0
    115                U16 Data = GUI_UC__GetCharCodeInc(&s);
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       GUI_UC__GetCharCodeInc
    116                if ((Data == 0) || (Data == '\n')) {
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A005013           CMPNE    R0,#+10
   \   0000005C   F7FFFF1A           BNE      ??GUI__GetLineNumChars_3
    117                  break;
    118                }
    119              }
    120            }
    121            return NumChars;
   \                     ??GUI__GetLineNumChars_0:
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??GUI__GetLineNumChars_2:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       GUI__GetOverlap
    127          */

   \                                 In section .text, align 4, keep-with-next
    128          int GUI__GetOverlap(U16 Char) {
   \                     GUI__GetOverlap:
   \   00000000   10402DE9           PUSH     {R4,LR}
    129            GUI_CHARINFO_EXT CharInfo;
    130            int Size;
    131            int r = 0;
   \   00000004   ........           LDR      R1,??DataTable3
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   1C1091E5           LDR      R1,[R1, #+28]
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   102091E5           LDR      R2,[R1, #+16]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0900000A           BEQ      ??GUI__GetOverlap_0
    132            if (GUI_Context.pAFont->pfGetCharInfo) {
    133              if (GUI_Context.pAFont->pfGetCharInfo(Char, &CharInfo) == 0) {
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   32FF2FE1           BLX      R2
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0500001A           BNE      ??GUI__GetOverlap_0
    134                Size = CharInfo.XSize + CharInfo.XPos;
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   D210DDE1           LDRSB    R1,[SP, #+2]
   \   00000038   000081E0           ADD      R0,R1,R0
    135                if (Size > CharInfo.XDist) {
   \   0000003C   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000040   000051E1           CMP      R1,R0
    136                  r = Size - CharInfo.XDist;
   \   00000044   014040B0           SUBLT    R4,R0,R1
    137                }
    138              }
    139            }
    140            return r;
   \                     ??GUI__GetOverlap_0:
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   10D08DE2           ADD      SP,SP,#+16
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
    141          }
    142          
    143          /*********************************************************************
    144          *
    145          *       GUI__GetLineDistX
    146          *
    147          *  This routine is used to calculate the length of a line in pixels.
    148          */

   \                                 In section .text, align 4, keep-with-next
    149          int GUI__GetLineDistX(const char GUI_UNI_PTR * s, int MaxNumChars) {
   \                     GUI__GetLineDistX:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
    150            int Dist;
    151            //
    152            // Conversion if required
    153            //
    154            s = GUI_CharLine_pfLog2Vis((char *)s, &MaxNumChars);
   \   00000004   ........           LDR      R2,??DataTable3_1
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   10108DE2           ADD      R1,SP,#+16
   \   00000010   002092E5           LDR      R2,[R2, #+0]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   0C008DE5           STR      R0,[SP, #+12]
    155            //
    156            // Calculate legth of line
    157            //
    158            Dist = 0;
   \   0000001C   0040A0E3           MOV      R4,#+0
    159            if (s) {
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2700000A           BEQ      ??GUI__GetLineDistX_0
    160              U16 Char = 0;
    161              if (GUI_Context.pAFont->pafEncode) {
   \   00000028   ........           LDR      R6,??DataTable3
   \   0000002C   0050A0E3           MOV      R5,#+0
   \   00000030   1C0096E5           LDR      R0,[R6, #+28]
   \   00000034   142090E5           LDR      R2,[R0, #+20]
   \   00000038   000052E3           CMP      R2,#+0
    162                if (GUI_Context.pAFont->pafEncode->pfGetLineDistX) {
   \   0000003C   00009215           LDRNE    R0,[R2, #+0]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0900000A           BEQ      ??GUI__GetLineDistX_1
    163                  return GUI_Context.pAFont->pafEncode->pfGetLineDistX(s, MaxNumChars);
   \   00000048   10109DE5           LDR      R1,[SP, #+16]
   \   0000004C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000050   002092E5           LDR      R2,[R2, #+0]
   \   00000054   32FF2FE1           BLX      R2
   \   00000058   1B0000EA           B        ??GUI__GetLineDistX_2
    164                }
    165              }
    166              while (--MaxNumChars >= 0) {
    167                Char  = GUI_UC__GetCharCodeInc(&s);
   \                     ??GUI__GetLineDistX_3:
   \   0000005C   0C008DE2           ADD      R0,SP,#+12
   \   00000060   ........           BL       GUI_UC__GetCharCodeInc
   \   00000064   0050A0E1           MOV      R5,R0
    168                Dist += GUI_GetCharDistX(Char);
   \   00000068   ........           BL       GUI_GetCharDistX
   \   0000006C   044080E0           ADD      R4,R0,R4
    169              }
   \                     ??GUI__GetLineDistX_1:
   \   00000070   10009DE5           LDR      R0,[SP, #+16]
   \   00000074   010040E2           SUB      R0,R0,#+1
   \   00000078   10008DE5           STR      R0,[SP, #+16]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   F5FFFF5A           BPL      ??GUI__GetLineDistX_3
    170              Dist += GUI__GetOverlap(Char);
   \   00000084   1C0096E5           LDR      R0,[R6, #+28]
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   102090E5           LDR      R2,[R0, #+16]
   \   00000090   000052E3           CMP      R2,#+0
   \   00000094   0A00000A           BEQ      ??GUI__GetLineDistX_4
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   32FF2FE1           BLX      R2
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0500001A           BNE      ??GUI__GetLineDistX_4
   \   000000AC   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000B0   D210DDE1           LDRSB    R1,[SP, #+2]
   \   000000B4   000081E0           ADD      R0,R1,R0
   \   000000B8   0410DDE5           LDRB     R1,[SP, #+4]
   \   000000BC   000051E1           CMP      R1,R0
   \   000000C0   017040B0           SUBLT    R7,R0,R1
    171            }
   \                     ??GUI__GetLineDistX_4:
   \   000000C4   044087E0           ADD      R4,R7,R4
    172            return Dist;
   \                     ??GUI__GetLineDistX_0:
   \   000000C8   0400A0E1           MOV      R0,R4
   \                     ??GUI__GetLineDistX_2:
   \   000000CC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000D0   F080BDE8           POP      {R4-R7,PC}       ;; return
    173          }
    174          
    175          /*********************************************************************
    176          *
    177          *       GUI__DispLine
    178          */

   \                                 In section .text, align 4, keep-with-next
    179          void GUI__DispLine(const char GUI_UNI_PTR * s, int MaxNumChars, const GUI_RECT * pr) {
   \                     GUI__DispLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    180            GUI_RECT r;
    181            #if GUI_SUPPORT_ROTATION
    182            if (GUI_pLCD_APIList) {
   \   00000008   ........           LDR      R0,??DataTable3_2
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   14D04DE2           SUB      SP,SP,#+20
   \   00000018   0210A0E1           MOV      R1,R2
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   3100000A           BEQ      ??GUI__DispLine_0
    183              #if GUI_WINSUPPORT
    184              WM_ITERATE_START(NULL) {
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           BL       WM__InitIVRSearch
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   ........           LDR      R6,??DataTable3
   \   00000034   7A00000A           BEQ      ??GUI__DispLine_1
    185              #endif
    186                //
    187                // Do the actual drawing via routine call.
    188                //
    189                _DispLine(s, MaxNumChars, &r);
   \                     ??GUI__DispLine_2:
   \   00000038   ........           LDR      R2,??DataTable3_1
   \   0000003C   00508DE5           STR      R5,[SP, #+0]
   \   00000040   04408DE5           STR      R4,[SP, #+4]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   32FF2FE1           BLX      R2
   \   00000054   04008DE5           STR      R0,[SP, #+4]
   \   00000058   140096E5           LDR      R0,[R6, #+20]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0300000A           BEQ      ??GUI__DispLine_3
   \   00000064   08108DE2           ADD      R1,SP,#+8
   \   00000068   ........           BL       GUI_RectsIntersect
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   1900000A           BEQ      ??GUI__DispLine_4
   \                     ??GUI__DispLine_3:
   \   00000074   1C0096E5           LDR      R0,[R6, #+28]
   \   00000078   142090E5           LDR      R2,[R0, #+20]
   \   0000007C   000052E3           CMP      R2,#+0
   \   00000080   1100001A           BNE      ??GUI__DispLine_5
   \                     ??GUI__DispLine_6:
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   010040E2           SUB      R0,R0,#+1
   \   0000008C   00008DE5           STR      R0,[SP, #+0]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1000004A           BMI      ??GUI__DispLine_4
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           BL       GUI_UC__GetCharCodeInc
   \   000000A0   1C1096E5           LDR      R1,[R6, #+28]
   \   000000A4   0070A0E1           MOV      R7,R0
   \   000000A8   001091E5           LDR      R1,[R1, #+0]
   \   000000AC   31FF2FE1           BLX      R1
   \   000000B0   ........           LDR      R0,??DataTable3_3
   \   000000B4   001090E5           LDR      R1,[R0, #+0]
   \   000000B8   000051E3           CMP      R1,#+0
   \   000000BC   F0FFFF0A           BEQ      ??GUI__DispLine_6
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   31FF2FE1           BLX      R1
   \   000000C8   EDFFFFEA           B        ??GUI__DispLine_6
   \                     ??GUI__DispLine_5:
   \   000000CC   00109DE5           LDR      R1,[SP, #+0]
   \   000000D0   04009DE5           LDR      R0,[SP, #+4]
   \   000000D4   082092E5           LDR      R2,[R2, #+8]
   \   000000D8   32FF2FE1           BLX      R2
    190              #if GUI_WINSUPPORT
    191              } WM_ITERATE_END();
   \                     ??GUI__DispLine_4:
   \   000000DC   ........           BL       WM__GetNextIVR
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   D3FFFF1A           BNE      ??GUI__DispLine_2
   \   000000E8   4D0000EA           B        ??GUI__DispLine_1
    192              #endif
    193            } else
    194            #endif
    195            {
    196              r = *pr;
   \                     ??GUI__DispLine_0:
   \   000000EC   08008DE2           ADD      R0,SP,#+8
   \   000000F0   0820A0E3           MOV      R2,#+8
   \   000000F4   ........           BL       __aeabi_memcpy
    197              #if GUI_WINSUPPORT
    198              WM_ADDORG(r.x0, r.y0);
   \   000000F8   ........           LDR      R6,??DataTable3
   \   000000FC   F810DDE1           LDRSH    R1,[SP, #+8]
   \   00000100   400096E5           LDR      R0,[R6, #+64]
   \   00000104   FA20DDE1           LDRSH    R2,[SP, #+10]
   \   00000108   011080E0           ADD      R1,R0,R1
   \   0000010C   B810CDE1           STRH     R1,[SP, #+8]
   \   00000110   441096E5           LDR      R1,[R6, #+68]
   \   00000114   022081E0           ADD      R2,R1,R2
   \   00000118   BA20CDE1           STRH     R2,[SP, #+10]
    199              WM_ADDORG(r.x1, r.y1);
   \   0000011C   FC20DDE1           LDRSH    R2,[SP, #+12]
   \   00000120   020080E0           ADD      R0,R0,R2
   \   00000124   BC00CDE1           STRH     R0,[SP, #+12]
   \   00000128   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   0000012C   000081E0           ADD      R0,R1,R0
   \   00000130   BE00CDE1           STRH     R0,[SP, #+14]
    200              WM_ITERATE_START(&r) {
   \   00000134   08008DE2           ADD      R0,SP,#+8
   \   00000138   ........           BL       WM__InitIVRSearch
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   2F00000A           BEQ      ??GUI__DispLine_7
    201              #endif
    202                GUI_Context.DispPosX = r.x0;
   \                     ??GUI__DispLine_8:
   \   00000144   F800DDE1           LDRSH    R0,[SP, #+8]
    203                GUI_Context.DispPosY = r.y0;
    204                //
    205                // Do the actual drawing via routine call.
    206                //
    207                _DispLine(s, MaxNumChars, &r);
   \   00000148   ........           LDR      R2,??DataTable3_1
   \   0000014C   00508DE5           STR      R5,[SP, #+0]
   \   00000150   B202C6E1           STRH     R0,[R6, #+34]
   \   00000154   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   00000158   04408DE5           STR      R4,[SP, #+4]
   \   0000015C   0D10A0E1           MOV      R1,SP
   \   00000160   B402C6E1           STRH     R0,[R6, #+36]
   \   00000164   0400A0E1           MOV      R0,R4
   \   00000168   002092E5           LDR      R2,[R2, #+0]
   \   0000016C   32FF2FE1           BLX      R2
   \   00000170   04008DE5           STR      R0,[SP, #+4]
   \   00000174   140096E5           LDR      R0,[R6, #+20]
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   0300000A           BEQ      ??GUI__DispLine_9
   \   00000180   08108DE2           ADD      R1,SP,#+8
   \   00000184   ........           BL       GUI_RectsIntersect
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   1900000A           BEQ      ??GUI__DispLine_10
   \                     ??GUI__DispLine_9:
   \   00000190   1C0096E5           LDR      R0,[R6, #+28]
   \   00000194   142090E5           LDR      R2,[R0, #+20]
   \   00000198   000052E3           CMP      R2,#+0
   \   0000019C   1100001A           BNE      ??GUI__DispLine_11
   \                     ??GUI__DispLine_12:
   \   000001A0   00009DE5           LDR      R0,[SP, #+0]
   \   000001A4   010040E2           SUB      R0,R0,#+1
   \   000001A8   00008DE5           STR      R0,[SP, #+0]
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   1000004A           BMI      ??GUI__DispLine_10
   \   000001B4   04008DE2           ADD      R0,SP,#+4
   \   000001B8   ........           BL       GUI_UC__GetCharCodeInc
   \   000001BC   1C1096E5           LDR      R1,[R6, #+28]
   \   000001C0   0070A0E1           MOV      R7,R0
   \   000001C4   001091E5           LDR      R1,[R1, #+0]
   \   000001C8   31FF2FE1           BLX      R1
   \   000001CC   ........           LDR      R0,??DataTable3_3
   \   000001D0   001090E5           LDR      R1,[R0, #+0]
   \   000001D4   000051E3           CMP      R1,#+0
   \   000001D8   F0FFFF0A           BEQ      ??GUI__DispLine_12
   \   000001DC   0700A0E1           MOV      R0,R7
   \   000001E0   31FF2FE1           BLX      R1
   \   000001E4   EDFFFFEA           B        ??GUI__DispLine_12
   \                     ??GUI__DispLine_11:
   \   000001E8   00109DE5           LDR      R1,[SP, #+0]
   \   000001EC   04009DE5           LDR      R0,[SP, #+4]
   \   000001F0   082092E5           LDR      R2,[R2, #+8]
   \   000001F4   32FF2FE1           BLX      R2
    208              #if GUI_WINSUPPORT
    209              } WM_ITERATE_END();
   \                     ??GUI__DispLine_10:
   \   000001F8   ........           BL       WM__GetNextIVR
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   CFFFFF1A           BNE      ??GUI__DispLine_8
    210              WM_SUBORG(GUI_Context.DispPosX, GUI_Context.DispPosY);
   \                     ??GUI__DispLine_7:
   \   00000204   F202D6E1           LDRSH    R0,[R6, #+34]
   \   00000208   401096E5           LDR      R1,[R6, #+64]
   \   0000020C   010040E0           SUB      R0,R0,R1
   \   00000210   B202C6E1           STRH     R0,[R6, #+34]
   \   00000214   F402D6E1           LDRSH    R0,[R6, #+36]
   \   00000218   441096E5           LDR      R1,[R6, #+68]
   \   0000021C   010040E0           SUB      R0,R0,R1
   \   00000220   B402C6E1           STRH     R0,[R6, #+36]
    211              #endif
    212            }
    213          }
   \                     ??GUI__DispLine_1:
   \   00000224   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000228   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI_CharLine_pfLog2Vis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     GUI_pLCD_APIList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     GUI_pfDispCharStyle
    214          
    215          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUI__DispLine            40
     GUI__GetLineDistX        40
     GUI__GetLineNumChars     16
     GUI__GetOverlap          24
     _Log2VisBuffered          0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Log2VisBuffered          4
     GUI_CharLine_pfLog2Vis    4
     GUI__GetLineNumChars    108
     GUI__GetOverlap          84
     GUI__GetLineDistX       212
     GUI__DispLine           556
     ??DataTable3              4
     ??DataTable3_1            4
     ??DataTable3_2            4
     ??DataTable3_3            4

 
   4 bytes in section .data
 980 bytes in section .text
 
 980 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
