###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_AA.c                            #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_AA.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LC #
#                    D_AA.lst                                                 #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LCD #
#                    _AA.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_AA.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDAA.c
     19          Purpose     : Low level antialiasing routines.
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Defines
     30          *
     31          **********************************************************************
     32          */
     33          
     34          #define RETURN_IF_Y_OUT() \
     35            if (y < GUI_Context.ClipRect.y0)                     \
     36              return;                                            \
     37            if (y > GUI_Context.ClipRect.y1)                     \
     38              return;
     39          
     40          #define RETURN_IF_X_OUT() \
     41            if (x < GUI_Context.ClipRect.x0) return;             \
     42            if (x > GUI_Context.ClipRect.x1) return;
     43          
     44          #define CLIP_X() \
     45            if (x0 < GUI_Context.ClipRect.x0) { x0 = GUI_Context.ClipRect.x0; } \
     46            if (x1 > GUI_Context.ClipRect.x1) { x1 = GUI_Context.ClipRect.x1; }
     47          
     48          #define CLIP_Y() \
     49            if (y0 < GUI_Context.ClipRect.y0) { y0 = GUI_Context.ClipRect.y0; } \
     50            if (y1 > GUI_Context.ClipRect.y1) { y1 = GUI_Context.ClipRect.y1; }
     51          
     52          /*********************************************************************
     53          *
     54          *       Static code
     55          *
     56          **********************************************************************
     57          */
     58          /*********************************************************************
     59          *
     60          *       _MixColorsXor
     61          */
     62          static LCD_COLOR _MixColorsXor(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens) {
     63            U32 rc, gc, bc;
     64            rc = (Color & 0x0000ff) * Intens / 15;
     65            gc = (Color & 0x00ff00) * Intens / 15;
     66            bc = (Color & 0xff0000) * Intens / 15;
     67            Color = BkColor;
     68            Color ^= rc;
     69            Color ^= gc;
     70            Color ^= bc;
     71            return Color;
     72          }
     73          
     74          /*********************************************************************
     75          *
     76          *       Public code
     77          *
     78          **********************************************************************
     79          */
     80          /*********************************************************************
     81          *
     82          *       LCD_AA_MixColors
     83          */

   \                                 In section .text, align 4, keep-with-next
     84          LCD_COLOR LCD_AA_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens) {
   \                     LCD_AA_MixColors:
   \   00000000   00402DE9           PUSH     {LR}
     85            #if 1
     86              LCD_COLOR r;
     87              r = GUI__MixColors(Color, BkColor, Intens * 17) & 0xFFFFFF;
     88              return r;
   \   00000004   022282E0           ADD      R2,R2,R2, LSL #+4
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   FF2002E2           AND      R2,R2,#0xFF
   \   00000010   ........           BL       GUI__MixColors
   \   00000014   0004A0E1           LSL      R0,R0,#+8
   \   00000018   2004A0E1           LSR      R0,R0,#+8
   \   0000001C   04D08DE2           ADD      SP,SP,#+4
   \   00000020   0080BDE8           POP      {PC}             ;; return
     89            #else
     90              /* Calc Color seperations for FgColor first */
     91              I32 R = (Color & 0x0000ff) * Intens;
     92              I32 G = (Color & 0x00ff00) * Intens;
     93              I32 B = (Color & 0xff0000) * Intens;
     94              /* Add Color seperations for BkColor */
     95              Intens = 15-Intens;
     96              R += (BkColor & 0x0000ff) * Intens;
     97              G += (BkColor & 0x00ff00) * Intens;
     98              B += (BkColor & 0xff0000) * Intens;
     99              R = (R / 15) & 0x0000ff;
    100              G = (G / 15) & 0x00ff00;
    101              B = (B / 15) & 0xff0000;
    102              Color = R + G + B;
    103              return Color;
    104            #endif
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       LCD_SetPixelAA
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          void LCD_SetPixelAA(int x, int y, U8 Intens) {
   \                     LCD_SetPixelAA:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0270B0E1           MOVS     R7,R2
    112            if (Intens == 0) {
   \   00000010   2D00000A           BEQ      ??LCD_SetPixelAA_0
    113              return;
    114            }
    115            RETURN_IF_Y_OUT();
   \   00000014   ........           LDR      R6,??DataTable2
   \   00000018   FA00D6E1           LDRSH    R0,[R6, #+10]
   \   0000001C   000055E1           CMP      R5,R0
   \   00000020   FE00D6A1           LDRSHGE  R0,[R6, #+14]
   \   00000024   050050A1           CMPGE    R0,R5
    116            RETURN_IF_X_OUT();
   \   00000028   F800D6A1           LDRSHGE  R0,[R6, #+8]
   \   0000002C   000054A1           CMPGE    R4,R0
   \   00000030   FC00D6A1           LDRSHGE  R0,[R6, #+12]
   \   00000034   040050A1           CMPGE    R0,R4
   \   00000038   230000BA           BLT      ??LCD_SetPixelAA_0
   \   0000003C   ........           LDR      R0,??DataTable2_1
   \   00000040   0F0057E3           CMP      R7,#+15
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   003090E5           LDR      R3,[R0, #+0]
   \   0000004C   0600003A           BCC      ??LCD_SetPixelAA_1
   \   00000050   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   000186E0           ADD      R0,R6,R0, LSL #+2
   \   00000060   480090E5           LDR      R0,[R0, #+72]
   \   00000064   0CC090E5           LDR      R12,[R0, #+12]
   \   00000068   150000EA           B        ??LCD_SetPixelAA_2
    117            if (Intens >= 15) {
    118              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, LCD__GetColorIndex());
    119            } else {
    120              LCD_COLOR Color, BkColor;
    121              Color   = LCD_Index2Color(LCD__GetColorIndex());
   \                     ??LCD_SetPixelAA_1:
   \   0000006C   0300A0E1           MOV      R0,R3
   \   00000070   ........           BL       LCD_Index2Color
   \   00000074   0080A0E1           MOV      R8,R0
    122              BkColor = LCD_GetPixelColor(x, y);
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       LCD_GetPixelColor
   \   00000084   0010A0E1           MOV      R1,R0
    123              Color   = LCD_AA_MixColors(Color, BkColor, Intens);
   \   00000088   072287E0           ADD      R2,R7,R7, LSL #+4
   \   0000008C   FF2002E2           AND      R2,R2,#0xFF
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           BL       GUI__MixColors
    124              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, LCD_Color2Index(Color));
   \   00000098   0004A0E1           LSL      R0,R0,#+8
   \   0000009C   2004A0E1           LSR      R0,R0,#+8
   \   000000A0   ........           BL       LCD_Color2Index
   \   000000A4   1110D6E5           LDRB     R1,[R6, #+17]
   \   000000A8   0030A0E1           MOV      R3,R0
   \   000000AC   0520A0E1           MOV      R2,R5
   \   000000B0   011186E0           ADD      R1,R6,R1, LSL #+2
   \   000000B4   48C091E5           LDR      R12,[R1, #+72]
   \   000000B8   0410A0E1           MOV      R1,R4
   \   000000BC   0C00A0E1           MOV      R0,R12
   \   000000C0   0CC09CE5           LDR      R12,[R12, #+12]
   \                     ??LCD_SetPixelAA_2:
   \   000000C4   18C09CE5           LDR      R12,[R12, #+24]
   \   000000C8   3CFF2FE1           BLX      R12
   \                     ??LCD_SetPixelAA_0:
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    125            }
    126          }
    127          
    128          /*********************************************************************
    129          *
    130          *       LCD_SetPixelAA_Xor
    131          */

   \                                 In section .text, align 4, keep-with-next
    132          void LCD_SetPixelAA_Xor(int x, int y, U8 Intens) {
   \                     LCD_SetPixelAA_Xor:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    133            LCD_COLOR Color, BkColor;
    134            if (Intens == 0) {
   \   00000010   2900000A           BEQ      ??LCD_SetPixelAA_Xor_0
    135              return;
    136            }
    137            RETURN_IF_Y_OUT();
   \   00000014   ........           LDR      R7,??DataTable2
   \   00000018   FA00D7E1           LDRSH    R0,[R7, #+10]
   \   0000001C   000055E1           CMP      R5,R0
   \   00000020   FE00D7A1           LDRSHGE  R0,[R7, #+14]
   \   00000024   050050A1           CMPGE    R0,R5
    138            RETURN_IF_X_OUT();
   \   00000028   F800D7A1           LDRSHGE  R0,[R7, #+8]
   \   0000002C   000054A1           CMPGE    R4,R0
   \   00000030   FC00D7A1           LDRSHGE  R0,[R7, #+12]
   \   00000034   040050A1           CMPGE    R0,R4
   \   00000038   1F0000BA           BLT      ??LCD_SetPixelAA_Xor_0
    139            BkColor = LCD_GetPixelColor(x, y);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       LCD_GetPixelColor
   \   00000044   0080A0E1           MOV      R8,R0
    140            Color   = LCD_Index2Color(LCD__GetColorIndex());
   \   00000048   ........           LDR      R0,??DataTable2_1
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   ........           BL       LCD_Index2Color
    141            Color   = _MixColorsXor(Color, BkColor, Intens);
    142            LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, LCD_Color2Index(Color));
   \   00000058   FF1000E2           AND      R1,R0,#0xFF
   \   0000005C   860161E1           SMULBB   R1,R6,R1
   \   00000060   ........           LDR      R3,??DataTable2_2  ;; 0x88888889
   \   00000064   ........           LDR      R12,??DataTable2_2  ;; 0x88888889
   \   00000068   913382E0           UMULL    R3,R2,R1,R3
   \   0000006C   A21128E0           EOR      R1,R8,R2, LSR #+3
   \   00000070   FF2C00E2           AND      R2,R0,#0xFF00
   \   00000074   960202E0           MUL      R2,R6,R2
   \   00000078   FF0800E2           AND      R0,R0,#0xFF0000
   \   0000007C   92CC83E0           UMULL    R12,R3,R2,R12
   \   00000080   960000E0           MUL      R0,R6,R0
   \   00000084   A31121E0           EOR      R1,R1,R3, LSR #+3
   \   00000088   ........           LDR      R3,??DataTable2_2  ;; 0x88888889
   \   0000008C   903382E0           UMULL    R3,R2,R0,R3
   \   00000090   A20121E0           EOR      R0,R1,R2, LSR #+3
   \   00000094   ........           BL       LCD_Color2Index
   \   00000098   0030A0E1           MOV      R3,R0
   \   0000009C   1100D7E5           LDRB     R0,[R7, #+17]
   \   000000A0   0520A0E1           MOV      R2,R5
   \   000000A4   0410A0E1           MOV      R1,R4
   \   000000A8   000187E0           ADD      R0,R7,R0, LSL #+2
   \   000000AC   480090E5           LDR      R0,[R0, #+72]
   \   000000B0   0CC090E5           LDR      R12,[R0, #+12]
   \   000000B4   18C09CE5           LDR      R12,[R12, #+24]
   \   000000B8   3CFF2FE1           BLX      R12
    143          }
   \                     ??LCD_SetPixelAA_Xor_0:
   \   000000BC   F081BDE8           POP      {R4-R8,PC}       ;; return
    144          
    145          /*********************************************************************
    146          *
    147          *       LCD_SetPixelAA_NoTrans
    148          */

   \                                 In section .text, align 4, keep-with-next
    149          void LCD_SetPixelAA_NoTrans(int x, int y, U8 Intens) {
   \                     LCD_SetPixelAA_NoTrans:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    150            RETURN_IF_Y_OUT();
   \   00000004   ........           LDR      R6,??DataTable2
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   FA00D6E1           LDRSH    R0,[R6, #+10]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   000055E1           CMP      R5,R0
   \   0000001C   FE00D6A1           LDRSHGE  R0,[R6, #+14]
   \   00000020   050050A1           CMPGE    R0,R5
    151            RETURN_IF_X_OUT();
   \   00000024   F800D6A1           LDRSHGE  R0,[R6, #+8]
   \   00000028   000054A1           CMPGE    R4,R0
   \   0000002C   FC00D6A1           LDRSHGE  R0,[R6, #+12]
   \   00000030   040050A1           CMPGE    R0,R4
   \   00000034   2F0000BA           BLT      ??LCD_SetPixelAA_NoTrans_0
    152            if (Intens == 0) {
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0900001A           BNE      ??LCD_SetPixelAA_NoTrans_1
    153              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, LCD__GetBkColorIndex());
   \   00000040   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000044   ........           LDR      R1,??DataTable2_3
   \   00000048   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   480090E5           LDR      R0,[R0, #+72]
   \   00000054   003091E5           LDR      R3,[R1, #+0]
   \   00000058   0520A0E1           MOV      R2,R5
   \   0000005C   0410A0E1           MOV      R1,R4
   \                     ??LCD_SetPixelAA_NoTrans_2:
   \   00000060   0CC090E5           LDR      R12,[R0, #+12]
   \   00000064   210000EA           B        ??LCD_SetPixelAA_NoTrans_3
    154            } else if (Intens == 15) {
   \                     ??LCD_SetPixelAA_NoTrans_1:
   \   00000068   ........           LDR      R0,??DataTable2_1
   \   0000006C   0F0057E3           CMP      R7,#+15
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   003090E5           LDR      R3,[R0, #+0]
   \   00000078   0500001A           BNE      ??LCD_SetPixelAA_NoTrans_4
    155              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, LCD__GetColorIndex());
   \   0000007C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000080   0520A0E1           MOV      R2,R5
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000008C   480090E5           LDR      R0,[R0, #+72]
   \   00000090   F2FFFFEA           B        ??LCD_SetPixelAA_NoTrans_2
    156            } else {
    157              LCD_PIXELINDEX Index;
    158              LCD_COLOR Color, ColorBk, ColorMixed;
    159              Color      = LCD_Index2Color(LCD__GetColorIndex());
   \                     ??LCD_SetPixelAA_NoTrans_4:
   \   00000094   0300A0E1           MOV      R0,R3
   \   00000098   ........           BL       LCD_Index2Color
   \   0000009C   0080A0E1           MOV      R8,R0
    160              ColorBk    = LCD_Index2Color(LCD__GetBkColorIndex());
   \   000000A0   ........           LDR      R0,??DataTable2_3
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   ........           BL       LCD_Index2Color
   \   000000B0   0010A0E1           MOV      R1,R0
    161              ColorMixed = LCD_AA_MixColors(Color, ColorBk, Intens);
   \   000000B4   072287E0           ADD      R2,R7,R7, LSL #+4
   \   000000B8   FF2002E2           AND      R2,R2,#0xFF
   \   000000BC   0800A0E1           MOV      R0,R8
   \   000000C0   ........           BL       GUI__MixColors
    162              Index      = LCD_Color2Index(ColorMixed);
   \   000000C4   0004A0E1           LSL      R0,R0,#+8
   \   000000C8   2004A0E1           LSR      R0,R0,#+8
   \   000000CC   ........           BL       LCD_Color2Index
   \   000000D0   1110D6E5           LDRB     R1,[R6, #+17]
   \   000000D4   0030A0E1           MOV      R3,R0
   \   000000D8   0520A0E1           MOV      R2,R5
   \   000000DC   011186E0           ADD      R1,R6,R1, LSL #+2
   \   000000E0   48C091E5           LDR      R12,[R1, #+72]
   \   000000E4   0410A0E1           MOV      R1,R4
   \   000000E8   0C00A0E1           MOV      R0,R12
   \   000000EC   0CC09CE5           LDR      R12,[R12, #+12]
   \                     ??LCD_SetPixelAA_NoTrans_3:
   \   000000F0   18C09CE5           LDR      R12,[R12, #+24]
    163              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, Index);
   \   000000F4   3CFF2FE1           BLX      R12
   \                     ??LCD_SetPixelAA_NoTrans_0:
   \   000000F8   F081BDE8           POP      {R4-R8,PC}       ;; return
    164            }
    165          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   89888888           DC32     0x88888889

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    166          
    167          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     LCD_AA_MixColors            8
     LCD_SetPixelAA             24
     LCD_SetPixelAA_NoTrans     24
     LCD_SetPixelAA_Xor         24


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     LCD_AA_MixColors         36
     LCD_SetPixelAA          208
     LCD_SetPixelAA_Xor      192
     LCD_SetPixelAA_NoTrans  252
     ??DataTable2              4
     ??DataTable2_1            4
     ??DataTable2_2            4
     ??DataTable2_3            4

 
 704 bytes in section .text
 
 704 bytes of CODE memory

Errors: none
Warnings: none
