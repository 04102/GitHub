###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_UC_EncodeUTF8.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_UC_EncodeUTF8.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_UC_EncodeUTF8.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _UC_EncodeUTF8.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_UC_EncodeUTF8.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_UC_EncodeUTF8.c
     19          Purpose     : Encoding routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _GetCharCode
     34          *
     35          * Purpose:
     36          *   Return the UNICODE character code of the current character.
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          static U16 _GetCharCode(const char GUI_UNI_PTR * s) {
     39            U16 r;
     40            U8 Char = *s;
   \                     _GetCharCode:
   \   00000000   0010D0E5           LDRB     R1,[R0, #+0]
     41            if ((Char & 0x80) == 0) {                /* Single byte (ASCII)  */
   \   00000004   800011E3           TST      R1,#0x80
   \   00000008   1300000A           BEQ      ??_GetCharCode_0
     42              r = Char;
     43            } else if ((Char & 0xe0) == 0xc0) {      /* Double byte sequence */
   \   0000000C   E02001E2           AND      R2,R1,#0xE0
   \   00000010   C00052E3           CMP      R2,#+192
   \   00000014   0400001A           BNE      ??_GetCharCode_1
     44              r = (Char & 0x1f) << 6;
     45              Char = *(++s);
     46              Char &= 0x3f;
     47              r |= Char;
   \   00000018   0100D0E5           LDRB     R0,[R0, #+1]
   \   0000001C   1F1001E2           AND      R1,R1,#0x1F
   \   00000020   3F0000E2           AND      R0,R0,#0x3F
   \   00000024   011380E1           ORR      R1,R0,R1, LSL #+6
   \   00000028   0B0000EA           B        ??_GetCharCode_0
     48            } else if ((Char & 0xf0) == 0xe0) {      /* 3 byte sequence      */
   \                     ??_GetCharCode_1:
   \   0000002C   F02001E2           AND      R2,R1,#0xF0
   \   00000030   E00052E3           CMP      R2,#+224
   \   00000034   0700001A           BNE      ??_GetCharCode_2
     49              r = (Char & 0x0f) << 12;
     50              Char = *(++s);
     51              Char &= 0x3f;
     52              r |= (Char << 6);
     53              Char = *(++s);
     54              Char &= 0x3f;
     55              r |= Char;
   \   00000038   0120F0E5           LDRB     R2,[R0, #+1]!
   \   0000003C   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000040   3F2002E2           AND      R2,R2,#0x3F
   \   00000044   0223A0E1           LSL      R2,R2,#+6
   \   00000048   011682E1           ORR      R1,R2,R1, LSL #+12
   \   0000004C   3F0000E2           AND      R0,R0,#0x3F
   \   00000050   011080E1           ORR      R1,R0,R1
   \   00000054   000000EA           B        ??_GetCharCode_0
     56            } else {
     57              GUI_DEBUG_ERROROUT("Illegal character during UTF-8 decoding!");
     58              r = 1;       /* Illegal character. To avoid endless loops in upper layers, we return 1 rather than 0. */
   \                     ??_GetCharCode_2:
   \   00000058   0110A0E3           MOV      R1,#+1
     59            }
     60            return r;
   \                     ??_GetCharCode_0:
   \   0000005C   0108A0E1           LSL      R0,R1,#+16
   \   00000060   2008A0E1           LSR      R0,R0,#+16
   \   00000064   1EFF2FE1           BX       LR               ;; return
     61          }
     62          
     63          /*********************************************************************
     64          *
     65          *       _GetCharSize
     66          *
     67          * Purpose:
     68          *   Return the number of bytes of the current character.
     69          */

   \                                 In section .text, align 4, keep-with-next
     70          static int _GetCharSize(const char GUI_UNI_PTR * s) {
     71            U8 Char = *s;
   \                     _GetCharSize:
   \   00000000   0000D0E5           LDRB     R0,[R0, #+0]
     72            if ((Char & 0x80) == 0) {
   \   00000004   800010E3           TST      R0,#0x80
   \   00000008   0900000A           BEQ      ??_GetCharSize_0
     73              return 1;
     74            } else if ((Char & 0xe0) == 0xc0) {
   \   0000000C   E01000E2           AND      R1,R0,#0xE0
   \   00000010   C00051E3           CMP      R1,#+192
   \   00000014   0100001A           BNE      ??_GetCharSize_1
     75              return 2;
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   1EFF2FE1           BX       LR
     76            } else if ((Char & 0xf0) == 0xe0) {
   \                     ??_GetCharSize_1:
   \   00000020   F00000E2           AND      R0,R0,#0xF0
   \   00000024   E00050E3           CMP      R0,#+224
   \   00000028   0100001A           BNE      ??_GetCharSize_0
     77              return 3;
   \   0000002C   0300A0E3           MOV      R0,#+3
   \   00000030   1EFF2FE1           BX       LR
     78            }
     79            GUI_DEBUG_ERROROUT("Illegal character during UTF-8 decoding!");
     80            return 1;       /* Illegal character. To avoid endless loops in upper layers, we return 1 rather than 0. */
   \                     ??_GetCharSize_0:
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   1EFF2FE1           BX       LR               ;; return
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       _CalcSizeOfChar
     86          *
     87          * Purpose:
     88          *   Return the number of bytes needed for the given character.
     89          */

   \                                 In section .text, align 4, keep-with-next
     90          static int _CalcSizeOfChar(U16 Char) {
     91            int r;
     92            if (Char & 0xF800) {                /* Single byte (ASCII)  */
   \                     _CalcSizeOfChar:
   \   00000000   F80C10E3           TST      R0,#0xF800
   \   00000004   0100000A           BEQ      ??_CalcSizeOfChar_0
     93              r = 3;
   \   00000008   0300A0E3           MOV      R0,#+3
   \   0000000C   1EFF2FE1           BX       LR
     94            } else if (Char & 0xFF80) {         /* Double byte sequence */
   \                     ??_CalcSizeOfChar_0:
   \   00000010   8010A0E3           MOV      R1,#+128
   \   00000014   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000018   000011E1           TST      R1,R0
   \   0000001C   0100000A           BEQ      ??_CalcSizeOfChar_1
     95              r = 2;
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   1EFF2FE1           BX       LR
     96            } else {                            /* 3 byte sequence      */
     97              r = 1;
   \                     ??_CalcSizeOfChar_1:
   \   00000028   0100A0E3           MOV      R0,#+1
     98            }
     99            return r;
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    100          }
    101          
    102          /*********************************************************************
    103          *
    104          *       _Encode
    105          *
    106          * Purpose:
    107          *   Encode character into 1/2/3 bytes.
    108          */

   \                                 In section .text, align 4, keep-with-next
    109          static int _Encode(char *s, U16 Char) {
    110            int r;
    111            r = _CalcSizeOfChar(Char);
   \                     _Encode:
   \   00000000   F80C11E3           TST      R1,#0xF800
   \   00000004   0B00000A           BEQ      ??_Encode_0
    112            switch (r) {
    113            case 1:
    114              *s = (char)Char;
    115              break;
    116            case 2:
    117              *s++ = 0xC0 | (Char >> 6);
    118              *s   = 0x80 | (Char & 0x3F);
    119              break;
    120            case 3:
    121              *s++ = 0xE0 | (Char >> 12);
   \   00000008   2136A0E1           LSR      R3,R1,#+12
   \   0000000C   E03083E3           ORR      R3,R3,#0xE0
   \   00000010   0030C0E5           STRB     R3,[R0, #+0]
    122              *s++ = 0x80 | ((Char >> 6) & 0x3F);
   \   00000014   3F30A0E3           MOV      R3,#+63
   \   00000018   213303E0           AND      R3,R3,R1, LSR #+6
   \   0000001C   803083E3           ORR      R3,R3,#0x80
   \   00000020   0320A0E3           MOV      R2,#+3
   \   00000024   0130E0E5           STRB     R3,[R0, #+1]!
    123              *s   = 0x80 | (Char & 0x3F);
   \                     ??_Encode_1:
   \   00000028   3F1001E2           AND      R1,R1,#0x3F
   \   0000002C   801081E3           ORR      R1,R1,#0x80
   \   00000030   0110E0E5           STRB     R1,[R0, #+1]!
    124              break;
   \   00000034   0A0000EA           B        ??_Encode_2
   \                     ??_Encode_0:
   \   00000038   8020A0E3           MOV      R2,#+128
   \   0000003C   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000040   010012E1           TST      R2,R1
   \   00000044   0400000A           BEQ      ??_Encode_3
   \   00000048   C030A0E3           MOV      R3,#+192
   \   0000004C   213383E1           ORR      R3,R3,R1, LSR #+6
   \   00000050   0220A0E3           MOV      R2,#+2
   \   00000054   0030C0E5           STRB     R3,[R0, #+0]
   \   00000058   F2FFFFEA           B        ??_Encode_1
   \                     ??_Encode_3:
   \   0000005C   0120A0E3           MOV      R2,#+1
   \   00000060   0010C0E5           STRB     R1,[R0, #+0]
    125            }
    126            return r;
   \                     ??_Encode_2:
   \   00000064   0200A0E1           MOV      R0,R2
   \   00000068   1EFF2FE1           BX       LR               ;; return
    127          }
    128          
    129          /*********************************************************************
    130          *
    131          *       _API_Table
    132          */

   \                                 In section .text, align 4, keep-with-next
    133          static const GUI_UC_ENC_APILIST _API_Table = {
   \                     _API_Table:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   ............       DC32 _GetCharCode, _GetCharSize, _CalcSizeOfChar, _Encode
   \              ............
   \              ........    
    134            _GetCharCode,     /*  return character code as U16 (Unicode) */
    135            _GetCharSize,     /*  return size of character: 1/2/3        */
    136            _CalcSizeOfChar,  /*  return size of character: 1/2/3        */
    137            _Encode           /*  Encode character into 1/2/3 bytes      */
    138          };
    139          
    140          /*********************************************************************
    141          *
    142          *       Exported code
    143          *
    144          **********************************************************************
    145          */
    146          /*********************************************************************
    147          *
    148          *       GUI_UC_SetEncodeUTF8
    149          */

   \                                 In section .text, align 4, keep-with-next
    150          void GUI_UC_SetEncodeUTF8(void) {
   \                     GUI_UC_SetEncodeUTF8:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    151            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
    152            GUI_pUC_API = &_API_Table;
   \   0000000C   ........           LDR      R0,??DataTable1
   \   00000010   ........           ADR      R1,_API_Table
    153            GUI_UNLOCK();
   \   00000014   04D08DE2           ADD      SP,SP,#+4
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   ........           B        GUI_Unlock       ;; tailcall
    154          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_pUC_API
    155          
    156          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUI_UC_SetEncodeUTF8      8
     _CalcSizeOfChar           0
     _Encode                   0
     _GetCharCode              0
     _GetCharSize              0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _GetCharCode          104
     _GetCharSize           60
     _CalcSizeOfChar        48
     _Encode               108
     _API_Table             16
     GUI_UC_SetEncodeUTF8   36
     ??DataTable1            4

 
 376 bytes in section .text
 
 376 bytes of CODE memory

Errors: none
Warnings: none
