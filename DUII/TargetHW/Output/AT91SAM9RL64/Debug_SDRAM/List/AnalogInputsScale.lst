###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:49 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\AnalogInputsScale.c                         #
#    Command line =  C:\DUII\DUII\AnalogInputsScale.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\An #
#                    alogInputsScale.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Ana #
#                    logInputsScale.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\AnalogInputsScale.c
      1          //
      2          //	AnalogInputScale.c
      3          //
      4          //	Gathers user input for analog input scale settings
      5          //
      6          #include <stdio.h>
      7          #include <stdlib.h>
      8          #include <string.h>
      9          #include "DUII.h"
     10          #include "GUI.h"
     11          #include "commondefs.h"
     12          #include "ConfigScreens.h"
     13          #include "DataHandler.h"
     14          #include "AnalogInputSettings.h"
     15          #include "InputScreens.h"
     16          #include "KeyboardAccess.h"
     17          #include "AnalogInputsScale.h"
     18          #include "Utilities.h"
     19          #include "GeneralConfig.h"
     20          
     21          
     22          /*********************************************************************
     23          *
     24          *       Public Variables
     25          *
     26          **********************************************************************
     27          */
     28          
     29          /*********************************************************************
     30          *
     31          *       External data and code
     32          *
     33          **********************************************************************
     34          */
     35          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     36          
     37          /*********************************************************************
     38          *
     39          *       Local Prototypes
     40          *
     41          **********************************************************************
     42          */
     43          void DisplayVoltsLow(WM_HWIN);
     44          void DisplayVoltsHigh(WM_HWIN);
     45          void DisplayValueLow(WM_HWIN hParent);
     46          void ValueLowPaint(WM_HWIN hParent);
     47          void DisplayValueHigh(WM_HWIN hParent);
     48          void ValueHighPaint(WM_HWIN hParent);
     49          void VoltsLowPaint(WM_HWIN);
     50          void VoltsHighPaint(WM_HWIN);
     51          void SaveData(const void *type);
     52          
     53          
     54          /*********************************************************************
     55          *
     56          *       Tables and Constants
     57          *
     58          **********************************************************************
     59          */

   \                                 In section .data, align 4
     60          struct SCREEN_LIST AnalogInputsScaleScreenList[NUM_ANALOG_SCALE_SCREENS+1] = {
   \                     AnalogInputsScaleScreenList:
   \   00000000   00000000....       DC32 0, DisplayVoltsLow, VoltsLowPaint, 1, DisplayVoltsHigh
   \              ............
   \              01000000....
   \              ....        
   \   00000014   ........0200       DC32 VoltsHighPaint, 2, DisplayValueLow, ValueLowPaint, 3
   \              0000........
   \              ........0300
   \              0000        
   \   00000028   ............       DC32 DisplayValueHigh, ValueHighPaint, -1, 0H, 0H
   \              ....FFFFFFFF
   \              000000000000
   \              0000        
   \   0000003C   00000000           DC8 0, 0, 0, 0
     61          	{ VOLTS_LOW_SCREEN, DisplayVoltsLow, VoltsLowPaint },
     62          	{ VOLTS_HIGH_SCREEN, DisplayVoltsHigh, VoltsHighPaint },
     63          	{ VALUE_LOW_SCREEN, DisplayValueLow, ValueLowPaint },
     64          	{ VALUE_HIGH_SCREEN, DisplayValueHigh, ValueHighPaint },
     65          	{ -1, NULL, NULL }
     66          };
     67          
     68          /*********************************************************************
     69          *
     70          *       Local Variables
     71          *
     72          **********************************************************************
     73          */
     74          static WM_HWIN hAnalogInputsScale;

   \                                 In section .bss, align 4
     75          static void *pVoltsLow = 0;
   \                     pVoltsLow:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
     76          static void *pVoltsHigh = 0;
     77          static void *pValueLow = 0;
     78          static void *pValueHigh = 0;
     79          
     80          char voltsLowString[NUMBER_LENGTH + NUMBER_LENGTH];		// Make these super big to handle sprintf output for numbers like 12345.67891
   \                     voltsLowString:
   \   00000010                      DS8 20
     81          char voltsHighString[NUMBER_LENGTH + NUMBER_LENGTH];
   \                     voltsHighString:
   \   00000024                      DS8 20
     82          char valueLowString[NUMBER_LENGTH + NUMBER_LENGTH];
   \                     valueLowString:
   \   00000038                      DS8 20
     83          char valueHighString[NUMBER_LENGTH + NUMBER_LENGTH];
   \                     valueHighString:
   \   0000004C                      DS8 20
     84          
     85          /*********************************************************************
     86          *
     87          *       Public code
     88          *
     89          **********************************************************************
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          WM_HWIN GetAnalogInputsScaleWindowHandle(void)
     92          {
     93          	return hAnalogInputsScale;
   \                     GetAnalogInputsScaleWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable13_1
   \   00000004   3C0090E5           LDR      R0,[R0, #+60]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     94          }
     95          

   \                                 In section .text, align 4, keep-with-next
     96          void SetAnalogInputsScaleWindowHandle(WM_HWIN hWin)
     97          {
     98          	hAnalogInputsScale = hWin;
   \                     SetAnalogInputsScaleWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable13_1
   \   00000004   3C0081E5           STR      R0,[R1, #+60]
     99          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    100          

   \                                 In section .text, align 4, keep-with-next
    101          void SaveData(const void *type)
    102          {
   \                     SaveData:
   \   00000000   00402DE9           PUSH     {LR}
    103          	if (type == pVoltsLow)
   \   00000004   ........           LDR      R3,??DataTable13_2
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   001093E5           LDR      R1,[R3, #+0]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0A00001A           BNE      ??SaveData_0
    104          		vehicleData.analogInput[globalInput].lowVoltagePoint = atof(voltsLowString);
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   100083E2           ADD      R0,R3,#+16
   \   00000024   ........           BL       __iar_Stod
   \   00000028   ........           BL       __aeabi_d2f
   \   0000002C   ........           LDR      R1,??DataTable13_3
   \   00000030   ........           LDR      R2,??DataTable13_4
   \   00000034   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000038   011382E0           ADD      R1,R2,R1, LSL #+6
   \   0000003C   A40081E5           STR      R0,[R1, #+164]
   \   00000040   280000EA           B        ??SaveData_1
    105          	else if (type == pVoltsHigh)
   \                     ??SaveData_0:
   \   00000044   041093E5           LDR      R1,[R3, #+4]
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   0A00001A           BNE      ??SaveData_2
    106          		vehicleData.analogInput[globalInput].highVoltagePoint = atof(voltsHighString);
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   240083E2           ADD      R0,R3,#+36
   \   0000005C   ........           BL       __iar_Stod
   \   00000060   ........           BL       __aeabi_d2f
   \   00000064   ........           LDR      R1,??DataTable13_3
   \   00000068   ........           LDR      R2,??DataTable13_4
   \   0000006C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000070   011382E0           ADD      R1,R2,R1, LSL #+6
   \   00000074   A80081E5           STR      R0,[R1, #+168]
   \   00000078   1A0000EA           B        ??SaveData_1
    107          	else if (type == pValueLow)
   \                     ??SaveData_2:
   \   0000007C   081093E5           LDR      R1,[R3, #+8]
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   0A00001A           BNE      ??SaveData_3
    108          		vehicleData.analogInput[globalInput].lowValuePoint = atof(valueLowString);
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   380083E2           ADD      R0,R3,#+56
   \   00000094   ........           BL       __iar_Stod
   \   00000098   ........           BL       __aeabi_d2f
   \   0000009C   ........           LDR      R1,??DataTable13_3
   \   000000A0   ........           LDR      R2,??DataTable13_4
   \   000000A4   0010D1E5           LDRB     R1,[R1, #+0]
   \   000000A8   011382E0           ADD      R1,R2,R1, LSL #+6
   \   000000AC   AC0081E5           STR      R0,[R1, #+172]
   \   000000B0   0C0000EA           B        ??SaveData_1
    109          	else if (type == pValueHigh)
   \                     ??SaveData_3:
   \   000000B4   0C1093E5           LDR      R1,[R3, #+12]
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   0900001A           BNE      ??SaveData_1
    110          		vehicleData.analogInput[globalInput].highValuePoint = atof(valueHighString);
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   4C0083E2           ADD      R0,R3,#+76
   \   000000CC   ........           BL       __iar_Stod
   \   000000D0   ........           BL       __aeabi_d2f
   \   000000D4   ........           LDR      R1,??DataTable13_3
   \   000000D8   ........           LDR      R2,??DataTable13_4
   \   000000DC   0010D1E5           LDRB     R1,[R1, #+0]
   \   000000E0   011382E0           ADD      R1,R2,R1, LSL #+6
   \   000000E4   B00081E5           STR      R0,[R1, #+176]
    111          }
   \                     ??SaveData_1:
   \   000000E8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000EC   0080BDE8           POP      {PC}             ;; return
    112          

   \                                 In section .text, align 4, keep-with-next
    113          void AnalogInputsScaleCallback(WM_MESSAGE * pMsg)
    114          {
    115          	switch(pMsg->MsgId)
   \                     AnalogInputsScaleCallback:
   \   00000000   001090E5           LDR      R1,[R0, #+0]
   \   00000004   011051E2           SUBS     R1,R1,#+1
   \   00000008   0000001A           BNE      ??AnalogInputsScaleCallback_0
   \   0000000C   1EFF2FE1           BX       LR
   \                     ??AnalogInputsScaleCallback_0:
   \   00000010   00402DE9           PUSH     {LR}
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0E1051E2           SUBS     R1,R1,#+14
   \   0000001C   1F00000A           BEQ      ??AnalogInputsScaleCallback_1
   \   00000020   0B1051E2           SUBS     R1,R1,#+11
   \   00000024   0E00000A           BEQ      ??AnalogInputsScaleCallback_2
   \   00000028   011051E2           SUBS     R1,R1,#+1
   \   0000002C   0400000A           BEQ      ??AnalogInputsScaleCallback_3
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   0D00000A           BEQ      ??AnalogInputsScaleCallback_4
   \   00000038   F71051E2           SUBS     R1,R1,#+247
   \   0000003C   0E00000A           BEQ      ??AnalogInputsScaleCallback_5
   \   00000040   220000EA           B        ??AnalogInputsScaleCallback_6
    116          	{
    117          		case KB_CANCEL_MSG:
    118          			DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, GetLastScreen(ANALOG_SETTINGS_SCREEN_TYPE), hAnalogInputsScale);
   \                     ??AnalogInputsScaleCallback_3:
   \   00000044   0F00A0E3           MOV      R0,#+15
   \   00000048   ........           BL       GetLastScreen
   \   0000004C   ........           LDR      R1,??DataTable13_1
   \   00000050   3C2091E5           LDR      R2,[R1, #+60]
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0F00A0E3           MOV      R0,#+15
   \   0000005C   ........           BL       DisplayNewScreenList
    119          			break;
   \   00000060   1B0000EA           B        ??AnalogInputsScaleCallback_7
    120          
    121          		case KB_SAVE_MSG:
    122          			SaveData(pMsg->Data.p);
   \                     ??AnalogInputsScaleCallback_2:
   \   00000064   0C0090E5           LDR      R0,[R0, #+12]
   \   00000068   ........           BL       SaveData
    123          			break;
   \   0000006C   180000EA           B        ??AnalogInputsScaleCallback_7
    124          
    125          		case KB_SAVE_AND_EXIT_MSG:
    126          			SaveData(pMsg->Data.p);
   \                     ??AnalogInputsScaleCallback_4:
   \   00000070   0C0090E5           LDR      R0,[R0, #+12]
   \   00000074   ........           BL       SaveData
    127          			DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, GetLastScreen(ANALOG_SETTINGS_SCREEN_TYPE), hAnalogInputsScale);
   \   00000078   F1FFFFEA           B        ??AnalogInputsScaleCallback_3
    128          			break;
    129          
    130          		case WM_TIMER:
    131          			if (pMsg->Data.v == hScreenTimer)
   \                     ??AnalogInputsScaleCallback_5:
   \   0000007C   ........           LDR      R1,??DataTable13_5
   \   00000080   0C0090E5           LDR      R0,[R0, #+12]
   \   00000084   002091E5           LDR      R2,[R1, #+0]
   \   00000088   020050E1           CMP      R0,R2
   \   0000008C   1000001A           BNE      ??AnalogInputsScaleCallback_7
    132          			{
    133          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000090   7D10A0E3           MOV      R1,#+125
   \   00000094   0200A0E1           MOV      R0,R2
   \   00000098   ........           BL       WM_RestartTimer
   \   0000009C   0C0000EA           B        ??AnalogInputsScaleCallback_7
    134          // Do not display icons on these screens - there is not enough room
    135          //				WM_InvalidateRect(pMsg->hWin, &SignalStrengthRect);
    136          			}
    137          			break;
    138          
    139          		case WM_CREATE:
    140          			AnalogInputsScaleIgnoreNextKeyRelease();
    141          			break;
    142          
    143          		case WM_PAINT:
    144          			if (GetScreenType() == ANALOG_INPUTS_SCALE)
   \                     ??AnalogInputsScaleCallback_1:
   \   000000A0   ........           BL       GetScreenType
   \   000000A4   120050E3           CMP      R0,#+18
   \   000000A8   0900001A           BNE      ??AnalogInputsScaleCallback_7
    145          			{
    146          				// Call paint method of center screen
    147          				AnalogInputsScaleScreenList[GetLastScreen(ANALOG_INPUTS_SCALE)].paint(hAnalogInputsScale);
   \   000000AC   ........           BL       GetLastScreen
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   ........           LDR      R2,??DataTable13_1
   \   000000B8   0C30A0E3           MOV      R3,#+12
   \   000000BC   932121E0           MLA      R1,R3,R1,R2
   \   000000C0   3C0092E5           LDR      R0,[R2, #+60]
   \   000000C4   081091E5           LDR      R1,[R1, #+8]
   \   000000C8   31FF2FE1           BLX      R1
   \   000000CC   000000EA           B        ??AnalogInputsScaleCallback_7
    148          
    149          // Do not display icons on these screens - there is not enough room
    150          //				DrawSignalStrength();
    151          			}
    152          			break;
    153          
    154          		default:
    155          			WM_DefaultProc(pMsg);
   \                     ??AnalogInputsScaleCallback_6:
   \   000000D0   ........           BL       WM_DefaultProc
    156          	}
    157          }
   \                     ??AnalogInputsScaleCallback_7:
   \   000000D4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000D8   0080BDE8           POP      {PC}             ;; return
    158          

   \                                 In section .text, align 4, keep-with-next
    159          void DisplayVoltsLow(WM_HWIN hParent)
    160          {
   \                     DisplayVoltsLow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
    161          	char scratch[30];
    162          
    163          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    164          	////if (pVoltsLow)
    165          	////	DestroyKeyboard(pVoltsLow);
    166          
    167          	sprintf(scratch, "Volts Low - Analog %d", globalInput);
   \   00000010   ........           LDR      R6,??DataTable13_3
   \   00000014   ........           ADR      R1,`?<Constant "Volts Low - Analog %d">`
   \   00000018   0020D6E5           LDRB     R2,[R6, #+0]
   \   0000001C   10008DE2           ADD      R0,SP,#+16
   \   00000020   ........           BL       sprintf
    168          	sprintf(voltsLowString, "%f", vehicleData.analogInput[globalInput].lowVoltagePoint);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000028   ........           LDR      R1,??DataTable13_4
   \   0000002C   ........           LDR      R5,??DataTable13_2
   \   00000030   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000034   A40090E5           LDR      R0,[R0, #+164]
   \   00000038   ........           BL       __aeabi_f2d
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0130A0E1           MOV      R3,R1
   \   00000044   ........           ADR      R1,??DataTable13  ;; 0x25, 0x66, 0x00, 0x00
   \   00000048   100085E2           ADD      R0,R5,#+16
   \   0000004C   ........           BL       sprintf
    169          	trimn(voltsLowString, NUMBER_LENGTH);			// Trim off trailing 0s
   \   00000050   0910A0E3           MOV      R1,#+9
   \   00000054   100085E2           ADD      R0,R5,#+16
   \   00000058   ........           BL       trimn
    170          	pVoltsLow = CreateKeyboard(scratch, voltsLowString, NUMERIC, true, NUMBER_LENGTH, VOLTS_LOW_SCREEN, hParent, true);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   0C008DE5           STR      R0,[SP, #+12]
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \   0000006C   0900A0E3           MOV      R0,#+9
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   08408DE5           STR      R4,[SP, #+8]
   \   00000078   0130A0E3           MOV      R3,#+1
   \   0000007C   0220A0E3           MOV      R2,#+2
   \   00000080   101085E2           ADD      R1,R5,#+16
   \   00000084   10008DE2           ADD      R0,SP,#+16
   \   00000088   ........           BL       CreateKeyboard
   \   0000008C   000085E5           STR      R0,[R5, #+0]
    171          }
   \   00000090   30D08DE2           ADD      SP,SP,#+48
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
    172          

   \                                 In section .text, align 4, keep-with-next
    173          void DisplayVoltsHigh(WM_HWIN hParent)
    174          {
   \                     DisplayVoltsHigh:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
    175          	char scratch[30];
    176          
    177          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    178          	////if (pVoltsHigh)
    179          	////	DestroyKeyboard(pVoltsHigh);
    180          
    181          	sprintf(scratch, "Volts High - Analog %d", globalInput);
   \   00000010   ........           LDR      R6,??DataTable13_3
   \   00000014   ........           ADR      R1,`?<Constant "Volts High - Analog %d">`
   \   00000018   0020D6E5           LDRB     R2,[R6, #+0]
   \   0000001C   10008DE2           ADD      R0,SP,#+16
   \   00000020   ........           BL       sprintf
    182          	sprintf(voltsHighString, "%f", vehicleData.analogInput[globalInput].highVoltagePoint);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000028   ........           LDR      R1,??DataTable13_4
   \   0000002C   ........           LDR      R5,??DataTable13_2
   \   00000030   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000034   A80090E5           LDR      R0,[R0, #+168]
   \   00000038   ........           BL       __aeabi_f2d
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0130A0E1           MOV      R3,R1
   \   00000044   ........           ADR      R1,??DataTable13  ;; 0x25, 0x66, 0x00, 0x00
   \   00000048   240085E2           ADD      R0,R5,#+36
   \   0000004C   ........           BL       sprintf
    183          	trimn(voltsHighString, NUMBER_LENGTH);
   \   00000050   0910A0E3           MOV      R1,#+9
   \   00000054   240085E2           ADD      R0,R5,#+36
   \   00000058   ........           BL       trimn
    184          	pVoltsHigh = CreateKeyboard(scratch, voltsHighString, NUMERIC, true, NUMBER_LENGTH, VOLTS_HIGH_SCREEN, hParent, true);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   0C008DE5           STR      R0,[SP, #+12]
   \   00000064   04008DE5           STR      R0,[SP, #+4]
   \   00000068   0900A0E3           MOV      R0,#+9
   \   0000006C   00008DE5           STR      R0,[SP, #+0]
   \   00000070   08408DE5           STR      R4,[SP, #+8]
   \   00000074   0130A0E3           MOV      R3,#+1
   \   00000078   0220A0E3           MOV      R2,#+2
   \   0000007C   241085E2           ADD      R1,R5,#+36
   \   00000080   10008DE2           ADD      R0,SP,#+16
   \   00000084   ........           BL       CreateKeyboard
   \   00000088   040085E5           STR      R0,[R5, #+4]
    185          }
   \   0000008C   30D08DE2           ADD      SP,SP,#+48
   \   00000090   7080BDE8           POP      {R4-R6,PC}       ;; return
    186          

   \                                 In section .text, align 4, keep-with-next
    187          void DisplayValueLow(WM_HWIN hParent)
    188          {
   \                     DisplayValueLow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
    189          	char scratch[30];
    190          
    191          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    192          	////if (pValueLow)
    193          	////	DestroyKeyboard(pValueLow);
    194          
    195          	sprintf(scratch, "Value Low - Analog %d", globalInput);
   \   00000010   ........           LDR      R6,??DataTable13_3
   \   00000014   ........           ADR      R1,`?<Constant "Value Low - Analog %d">`
   \   00000018   0020D6E5           LDRB     R2,[R6, #+0]
   \   0000001C   10008DE2           ADD      R0,SP,#+16
   \   00000020   ........           BL       sprintf
    196          	sprintf(valueLowString, "%f", vehicleData.analogInput[globalInput].lowValuePoint);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000028   ........           LDR      R1,??DataTable13_4
   \   0000002C   ........           LDR      R5,??DataTable13_2
   \   00000030   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000034   AC0090E5           LDR      R0,[R0, #+172]
   \   00000038   ........           BL       __aeabi_f2d
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0130A0E1           MOV      R3,R1
   \   00000044   ........           ADR      R1,??DataTable13  ;; 0x25, 0x66, 0x00, 0x00
   \   00000048   380085E2           ADD      R0,R5,#+56
   \   0000004C   ........           BL       sprintf
    197          	trimn(valueLowString, NUMBER_LENGTH);
   \   00000050   0910A0E3           MOV      R1,#+9
   \   00000054   380085E2           ADD      R0,R5,#+56
   \   00000058   ........           BL       trimn
    198          	pValueLow = CreateKeyboard(scratch, valueLowString, NUMERIC, true, NUMBER_LENGTH, VALUE_LOW_SCREEN, hParent, true);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   0C008DE5           STR      R0,[SP, #+12]
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \   0000006C   0900A0E3           MOV      R0,#+9
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   08408DE5           STR      R4,[SP, #+8]
   \   00000078   0130A0E3           MOV      R3,#+1
   \   0000007C   0220A0E3           MOV      R2,#+2
   \   00000080   381085E2           ADD      R1,R5,#+56
   \   00000084   10008DE2           ADD      R0,SP,#+16
   \   00000088   ........           BL       CreateKeyboard
   \   0000008C   080085E5           STR      R0,[R5, #+8]
    199          }
   \   00000090   30D08DE2           ADD      SP,SP,#+48
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
    200          

   \                                 In section .text, align 4, keep-with-next
    201          void DisplayValueHigh(WM_HWIN hParent)
    202          {
   \                     DisplayValueHigh:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
    203          	char scratch[30];
    204          
    205          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    206          	////if (pValueHigh)
    207          	////	DestroyKeyboard(pValueHigh);
    208          
    209          	sprintf(scratch, "Value High - Analog %d", globalInput);
   \   00000010   ........           LDR      R6,??DataTable13_3
   \   00000014   ........           ADR      R1,`?<Constant "Value High - Analog %d">`
   \   00000018   0020D6E5           LDRB     R2,[R6, #+0]
   \   0000001C   10008DE2           ADD      R0,SP,#+16
   \   00000020   ........           BL       sprintf
    210          	sprintf(valueHighString, "%f", vehicleData.analogInput[globalInput].highValuePoint);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000028   ........           LDR      R1,??DataTable13_4
   \   0000002C   ........           LDR      R5,??DataTable13_2
   \   00000030   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000034   B00090E5           LDR      R0,[R0, #+176]
   \   00000038   ........           BL       __aeabi_f2d
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0130A0E1           MOV      R3,R1
   \   00000044   ........           ADR      R1,??DataTable13  ;; 0x25, 0x66, 0x00, 0x00
   \   00000048   4C0085E2           ADD      R0,R5,#+76
   \   0000004C   ........           BL       sprintf
    211          	trimn(valueHighString, NUMBER_LENGTH);
   \   00000050   0910A0E3           MOV      R1,#+9
   \   00000054   4C0085E2           ADD      R0,R5,#+76
   \   00000058   ........           BL       trimn
    212          	pValueHigh = CreateKeyboard(scratch, valueHighString, NUMERIC, true, NUMBER_LENGTH, VALUE_HIGH_SCREEN, hParent, true);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   0C008DE5           STR      R0,[SP, #+12]
   \   00000064   0300A0E3           MOV      R0,#+3
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \   0000006C   0900A0E3           MOV      R0,#+9
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   08408DE5           STR      R4,[SP, #+8]
   \   00000078   0130A0E3           MOV      R3,#+1
   \   0000007C   0220A0E3           MOV      R2,#+2
   \   00000080   4C1085E2           ADD      R1,R5,#+76
   \   00000084   10008DE2           ADD      R0,SP,#+16
   \   00000088   ........           BL       CreateKeyboard
   \   0000008C   0C0085E5           STR      R0,[R5, #+12]
    213          }
   \   00000090   30D08DE2           ADD      SP,SP,#+48
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
    214          

   \                                 In section .text, align 4, keep-with-next
    215          void VoltsLowPaint(WM_HWIN hParent)
    216          {
    217          }
   \                     VoltsLowPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    218          
    219          

   \                                 In section .text, align 4, keep-with-next
    220          void VoltsHighPaint(WM_HWIN hParent)
    221          {
    222          }
   \                     VoltsHighPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    223          

   \                                 In section .text, align 4, keep-with-next
    224          void ValueLowPaint(WM_HWIN hParent)
    225          {
    226          }
   \                     ValueLowPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    227          

   \                                 In section .text, align 4, keep-with-next
    228          void ValueHighPaint(WM_HWIN hParent)
    229          {
    230          }
   \                     ValueHighPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    231          

   \                                 In section .text, align 4, keep-with-next
    232          void AnalogInputsScaleIgnoreNextKeyRelease(void)
    233          {
    234          }
   \                     AnalogInputsScaleIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    235          

   \                                 In section .text, align 4, keep-with-next
    236          void DeleteAnalogScaleKeyboards(void)
    237          {
   \                     DeleteAnalogScaleKeyboards:
   \   00000000   10402DE9           PUSH     {R4,LR}
    238          	if (pVoltsHigh)
   \   00000004   ........           LDR      R4,??DataTable13_2
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??DeleteAnalogScaleKeyboards_0
    239          	{
    240          		DestroyKeyboard(pVoltsHigh);
   \   00000014   ........           BL       DestroyKeyboard
    241          		pVoltsHigh = 0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   040084E5           STR      R0,[R4, #+4]
    242          	}
    243          	if (pVoltsLow)
   \                     ??DeleteAnalogScaleKeyboards_0:
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??DeleteAnalogScaleKeyboards_1
    244          	{
    245          		DestroyKeyboard(pVoltsLow);
   \   0000002C   ........           BL       DestroyKeyboard
    246          		pVoltsLow = 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   000084E5           STR      R0,[R4, #+0]
    247          	}
    248          	if (pValueHigh)
   \                     ??DeleteAnalogScaleKeyboards_1:
   \   00000038   0C0094E5           LDR      R0,[R4, #+12]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0200000A           BEQ      ??DeleteAnalogScaleKeyboards_2
    249          	{
    250          		DestroyKeyboard(pValueHigh);
   \   00000044   ........           BL       DestroyKeyboard
    251          		pValueHigh = 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0C0084E5           STR      R0,[R4, #+12]
    252          	}
    253          	if (pValueLow)
   \                     ??DeleteAnalogScaleKeyboards_2:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0200000A           BEQ      ??DeleteAnalogScaleKeyboards_3
    254          	{
    255          		DestroyKeyboard(pValueLow);
   \   0000005C   ........           BL       DestroyKeyboard
    256          		pValueLow = 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   080084E5           STR      R0,[R4, #+8]
    257          	}
    258          }
   \                     ??DeleteAnalogScaleKeyboards_3:
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   25660000           DC8      0x25, 0x66, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   ........           DC32     AnalogInputsScaleScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   ........           DC32     pVoltsLow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   ........           DC32     globalInput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%f">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25660000           DC8 37, 102, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Volts Low - Analog %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   566F6C747320       DC8 86, 111, 108, 116, 115, 32, 76, 111, 119, 32
   \              4C6F7720    
   \   0000000A   2D20416E616C       DC8 45, 32, 65, 110, 97, 108, 111, 103, 32, 37
   \              6F672025    
   \   00000014   64000000           DC8 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Volts High - Analog %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   566F6C747320       DC8 86, 111, 108, 116, 115, 32, 72, 105, 103, 104
   \              48696768    
   \   0000000A   202D20416E61       DC8 32, 45, 32, 65, 110, 97, 108, 111, 103, 32
   \              6C6F6720    
   \   00000014   25640000           DC8 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Value Low - Analog %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   56616C756520       DC8 86, 97, 108, 117, 101, 32, 76, 111, 119, 32
   \              4C6F7720    
   \   0000000A   2D20416E616C       DC8 45, 32, 65, 110, 97, 108, 111, 103, 32, 37
   \              6F672025    
   \   00000014   64000000           DC8 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Value High - Analog %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   56616C756520       DC8 86, 97, 108, 117, 101, 32, 72, 105, 103, 104
   \              48696768    
   \   0000000A   202D20416E61       DC8 32, 45, 32, 65, 110, 97, 108, 111, 103, 32
   \              6C6F6720    
   \   00000014   25640000           DC8 37, 100, 0, 0
    259          
    260          /*************************** End of file ****************************/
    261          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AnalogInputsScaleCallback           8
     AnalogInputsScaleIgnoreNextKeyRelease
                                         0
     DeleteAnalogScaleKeyboards          8
     DisplayValueHigh                   64
     DisplayValueLow                    64
     DisplayVoltsHigh                   64
     DisplayVoltsLow                    64
     GetAnalogInputsScaleWindowHandle
                                         0
     SaveData                            8
     SetAnalogInputsScaleWindowHandle
                                         0
     ValueHighPaint                      0
     ValueLowPaint                       0
     VoltsHighPaint                      0
     VoltsLowPaint                       0


   Section sizes:

     Function/Label                       Bytes
     --------------                       -----
     AnalogInputsScaleScreenList            64
     hAnalogInputsScale
     pVoltsLow                              96
     pVoltsHigh
     pValueLow
     pValueHigh
     voltsLowString
     voltsHighString
     valueLowString
     valueHighString
     GetAnalogInputsScaleWindowHandle
                                            12
     SetAnalogInputsScaleWindowHandle
                                            12
     SaveData                              240
     AnalogInputsScaleCallback             220
     DisplayVoltsLow                       152
     DisplayVoltsHigh                      148
     DisplayValueLow                       152
     DisplayValueHigh                      152
     VoltsLowPaint                           4
     VoltsHighPaint                          4
     ValueLowPaint                           4
     ValueHighPaint                          4
     AnalogInputsScaleIgnoreNextKeyRelease
                                             4
     DeleteAnalogScaleKeyboards            108
     ??DataTable13                           4
     ??DataTable13_1                         4
     ??DataTable13_2                         4
     ??DataTable13_3                         4
     ??DataTable13_4                         4
     ??DataTable13_5                         4
     ?<Constant "%f">                        4
     ?<Constant "Volts Low - Analog %d">    24
     ?<Constant "Volts High - Analog %d">   24
     ?<Constant "Value Low - Analog %d">    24
     ?<Constant "Value High - Analog %d">   24

 
    96 bytes in section .bss
    64 bytes in section .data
     4 bytes in section .rodata
 1 336 bytes in section .text
 
 1 336 bytes of CODE  memory
     4 bytes of CONST memory
   160 bytes of DATA  memory

Errors: none
Warnings: none
