###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_DirOld.c                          #
#    Command line =  C:\DUII\TargetHW\FS\FS_DirOld.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _DirOld.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    DirOld.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_DirOld.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_DirOld.c
     19          Purpose     : Obsolete directory functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Public data
     35          *
     36          **********************************************************************
     37          */

   \                                 In section .bss, align 4
     38          FS_DIR FS__aDirHandle[FS_NUM_DIR_HANDLES];
   \                     FS__aDirHandle:
   \   00000000                      DS8 308
     39          
     40          /*********************************************************************
     41          *
     42          *       Static data
     43          *
     44          **********************************************************************
     45          */
     46          /*********************************************************************
     47          *
     48          *       _AllocDirHandle
     49          *
     50          */
     51          static FS_DIR * _AllocDirHandle(void) {
     52            FS_DIR * pHandle;
     53            unsigned i;
     54          
     55            pHandle = NULL;
     56            FS_LOCK_SYS();
     57            for (i = 0; i < COUNTOF(FS__aDirHandle); i++) {
     58              if (FS__aDirHandle[i].InUse == 0) {
     59                pHandle = &FS__aDirHandle[i];
     60                pHandle->InUse = 1;
     61                break;
     62              }
     63            }
     64            FS_UNLOCK_SYS();
     65          #if FS_DEBUG_LEVEL >= FS_DEBUG_LEVEL_CHECK_ALL
     66            if ((void*)pHandle == NULL) {
     67              FS_DEBUG_ERROROUT((FS_MTYPE_API, "No directory handle available.\n"));
     68            }
     69          #endif
     70            return pHandle;
     71          }
     72          
     73          /*********************************************************************
     74          *
     75          *       _FreeDirHandle
     76          *
     77          */
     78          static void _FreeDirHandle(FS_DIR * pHandle) {
     79            if (pHandle) {
     80              FS_LOCK_SYS();
     81              pHandle->InUse = 0;
     82              FS_UNLOCK_SYS();
     83            }
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       Public code, internal version of API functions
     89          *
     90          **********************************************************************
     91          */
     92          /*********************************************************************
     93          *
     94          *       FS__OpenDir
     95          *
     96          *  Description:
     97          *    Internal version of FS_OpenDir.
     98          *    Open an existing directory for reading.
     99          *
    100          *  Parameters:
    101          *    pDirName    - Fully qualified directory name.
    102          *
    103          *  Return value:
    104          *    ==0         - Unable to open the directory.
    105          *    !=0         - Address of an FS_DIR data structure.
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          FS_DIR *FS__OpenDir(const char * pDirName) {
   \                     FS__OpenDir:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    108            FS_DIR       * pDirHandle;
    109            FS_VOLUME    * pVolume;
    110            const char   *s;
    111          
    112            pDirHandle = (FS_DIR*) NULL;
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   0050A0E3           MOV      R5,#+0
    113            /* Find correct FSL (device:unit:name) */
    114            pVolume = FS__FindVolume(pDirName, &s);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   ........           BL       FS__FindVolume
   \   00000018   0060B0E1           MOVS     R6,R0
    115            if (pVolume) {
   \   0000001C   1100000A           BEQ      ??FS__OpenDir_0
    116              if (FS__AutoMount(pVolume) & FS_MOUNT_R)  {
   \   00000020   ........           BL       FS__AutoMount
   \   00000024   010010E3           TST      R0,#0x1
   \   00000028   0E00000A           BEQ      ??FS__OpenDir_0
    117                /*  Find next free entry in FS__aDirHandle */
    118                pDirHandle = _AllocDirHandle();
   \   0000002C   ........           LDR      R0,??DataTable1
   \   00000030   3211D0E5           LDRB     R1,[R0, #+306]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   0110A003           MOVEQ    R1,#+1
   \   0000003C   0050A001           MOVEQ    R5,R0
   \   00000040   3211C005           STRBEQ   R1,[R0, #+306]
    119                if (pDirHandle) {
   \   00000044   000055E3           CMP      R5,#+0
   \   00000048   0600000A           BEQ      ??FS__OpenDir_0
    120                  int Error;
    121                  pDirHandle->Dir.pVolume = pVolume;
   \   0000004C   186085E5           STR      R6,[R5, #+24]
    122                  FS_LOCK_DRIVER(&pVolume->Partition.Device);
    123                  Error = FS_OPENDIR(s, &pDirHandle->Dir);
    124                  FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    125                  if (Error) {
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   00009DE5           LDR      R0,[SP, #+0]
   \   00000058   ........           BL       FS_FAT_OpenDir
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   3241C515           STRBNE   R4,[R5, #+306]
    126                    _FreeDirHandle(pDirHandle);
    127                    pDirHandle = (FS_DIR *)NULL;
   \   00000064   0050A013           MOVNE    R5,#+0
    128                  }
    129                }
    130              }
    131            }
    132            return pDirHandle;
   \                     ??FS__OpenDir_0:
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   08D08DE2           ADD      SP,SP,#+8
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    133          }
    134          
    135          /*********************************************************************
    136          *
    137          *       FS__ReadDir
    138          *
    139          *  Description:
    140          *    Internal version of FS_ReadDir.
    141          *    Read next directory entry in directory specified by
    142          *    pDir.
    143          *
    144          *  Parameters:
    145          *    pDir        - Pointer to a FS_DIR data structure.
    146          *
    147          *  Return value:
    148          *    ==0         - No more directory entries or error.
    149          *    !=0         - Pointer to a directory entry.
    150          */

   \                                 In section .text, align 4, keep-with-next
    151          FS_DIRENT * FS__ReadDir(FS_DIR * pDir) {
   \                     FS__ReadDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    152            FS_DIRENT        * pDirEnt;
    153            FS_DIRENTRY_INFO   DirEntryInfo;
    154          
    155            FS_MEMSET(&DirEntryInfo, 0, sizeof(FS_DIRENTRY_INFO));
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   00C0A0E3           MOV      R12,#+0
   \   00000020   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000024   0E00A0E8           STM      R0!,{R1-R3}
    156            DirEntryInfo.sFileName      = &pDir->DirEntry.DirName[0];
   \   00000028   201084E2           ADD      R1,R4,#+32
   \   0000002C   14108DE5           STR      R1,[SP, #+20]
    157            DirEntryInfo.SizeofFileName = sizeof(pDir->DirEntry.DirName);
   \   00000030   411FA0E3           MOV      R1,#+260
   \   00000034   18108DE5           STR      R1,[SP, #+24]
    158            pDirEnt = (FS_DIRENT *)NULL;
    159            if (pDir) {
   \   00000038   000054E3           CMP      R4,#+0
    160              FS_VOLUME * pVolume;
    161          
    162              pVolume = pDir->Dir.pVolume;
    163              if (pVolume) {
   \   0000003C   18009415           LDRNE    R0,[R4, #+24]
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   00005013           CMPNE    R0,#+0
   \   00000048   0B00000A           BEQ      ??FS__ReadDir_0
    164                FS_LOCK_DRIVER(&pVolume->Partition.Device);
    165                if (FS_READDIR(&pDir->Dir, &DirEntryInfo) == 0) {
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       FS_FAT_ReadDir
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0600001A           BNE      ??FS__ReadDir_0
    166                  pDirEnt = &pDir->DirEntry;
    167                  pDirEnt->Attributes = DirEntryInfo.Attributes;
   \   00000060   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000064   205084E2           ADD      R5,R4,#+32
   \   00000068   0401C5E5           STRB     R0,[R5, #+260]
    168                  pDirEnt->Size       = DirEntryInfo.FileSize;
   \   0000006C   10009DE5           LDR      R0,[SP, #+16]
   \   00000070   080185E5           STR      R0,[R5, #+264]
    169                  pDirEnt->TimeStamp  = DirEntryInfo.CreationTime;
   \   00000074   04009DE5           LDR      R0,[SP, #+4]
   \   00000078   0C0185E5           STR      R0,[R5, #+268]
    170                }
    171                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    172              }
    173            }
    174            return pDirEnt;
   \                     ??FS__ReadDir_0:
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   1CD08DE2           ADD      SP,SP,#+28
   \   00000084   3080BDE8           POP      {R4,R5,PC}       ;; return
    175          }
    176          
    177          /*********************************************************************
    178          *
    179          *       FS__CloseDir
    180          *
    181          *  Description:
    182          *    Internal version of FS_CloseDir.
    183          *    Close a directory referred by pDir.
    184          *
    185          *  Parameters:
    186          *    pDir        - Pointer to a FS_DIR data structure.
    187          *
    188          *  Return value:
    189          *    ==0         - Directory has been closed.
    190          *    ==-1        - Unable to close directory.
    191          */

   \                                 In section .text, align 4, keep-with-next
    192          int FS__CloseDir(FS_DIR * pDir) {
   \                     FS__CloseDir:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    193            int i;
    194          
    195            i = -1;
   \   00000008   0000E0E3           MVN      R0,#+0
    196            if (pDir) {
   \   0000000C   0600000A           BEQ      ??FS__CloseDir_0
    197              FS_VOLUME * pVolume;
    198          
    199              pVolume = pDir->Dir.pVolume;
    200              if (pVolume) {
   \   00000010   181094E5           LDR      R1,[R4, #+24]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0200000A           BEQ      ??FS__CloseDir_1
    201                FS_LOCK_DRIVER(&pVolume->Partition.Device);
    202                i = FS_CLOSEDIR(&pDir->Dir);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS_FAT_CloseDir
   \   00000024   0010A0E3           MOV      R1,#+0
   \                     ??FS__CloseDir_1:
   \   00000028   3211C4E5           STRB     R1,[R4, #+306]
    203                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    204              }
    205            }
    206            _FreeDirHandle(pDir);
    207            return i;
   \                     ??FS__CloseDir_0:
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    208          }
    209          
    210          /*********************************************************************
    211          *
    212          *       FS__RewindDir
    213          *
    214          *  Description:
    215          *    Internal version of FS_RewindDir.
    216          *    Set pointer for reading the next directory entry to
    217          *    the first entry in the directory.
    218          *
    219          *  Parameters:
    220          *    pDir        - Pointer to a FS_DIR data structure.
    221          *
    222          *    Return value:
    223          *    None.
    224          */

   \                                 In section .text, align 4, keep-with-next
    225          void FS__RewindDir(FS_DIR * pDir) {
    226            if (pDir) {
   \                     FS__RewindDir:
   \   00000000   000050E3           CMP      R0,#+0
    227              FS_LOCK_SYS();
    228              pDir->Dir.DirEntryIndex = 0; /* Only rewind, if we have a valid pointer */
   \   00000004   0010A013           MOVNE    R1,#+0
   \   00000008   B011C011           STRHNE   R1,[R0, #+16]
    229              FS_UNLOCK_SYS();
    230            }
    231          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    232          
    233          
    234          /*********************************************************************
    235          *
    236          *       FS__DirEnt2Attr
    237          *
    238          *  Description:
    239          *    Internal version of FS_DirEnt2Attr.
    240          *    Gets the directory entry attributes.
    241          *
    242          *  Parameters:
    243          *    pDir        - Pointer to a FS_DIRENT data structure.
    244          *    pString     - Pointer to a buffer to be copied to.
    245          *
    246          */

   \                                 In section .text, align 4, keep-with-next
    247          void FS__DirEnt2Attr(FS_DIRENT * pDirEnt, U8 * pAttr) {
    248            if (pDirEnt != NULL) {
   \                     FS__DirEnt2Attr:
   \   00000000   000050E3           CMP      R0,#+0
    249              if (pAttr) {
   \   00000004   00005113           CMPNE    R1,#+0
    250                *pAttr = pDirEnt->Attributes;
   \   00000008   0401D015           LDRBNE   R0,[R0, #+260]
   \   0000000C   0000C115           STRBNE   R0,[R1, #+0]
    251              }
    252            }
    253          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    254          
    255          /*********************************************************************
    256          *
    257          *       Public code
    258          *
    259          **********************************************************************
    260          */
    261          
    262          /*********************************************************************
    263          *
    264          *       FS_OpenDir
    265          *
    266          *  Description:
    267          *    API function. Open an existing directory for reading.
    268          *
    269          *  Parameters:
    270          *    pDirName    - Fully qualified directory name.
    271          *
    272          *  Return value:
    273          *    ==0         - Unable to open the directory.
    274          *    !=0         - Address of an FS_DIR data structure.
    275          */

   \                                 In section .text, align 4, keep-with-next
    276          FS_DIR * FS_OpenDir(const char * pDirName) {
   \                     FS_OpenDir:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
    277            FS_DIR * pHandle;
    278            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    279            pHandle = FS__OpenDir(pDirName);
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0040B0E1           MOVS     R4,R0
   \   0000002C   1200000A           BEQ      ??FS_OpenDir_0
   \   00000030   ........           BL       FS__AutoMount
   \   00000034   010010E3           TST      R0,#0x1
   \   00000038   0F00000A           BEQ      ??FS_OpenDir_0
   \   0000003C   ........           LDR      R0,??DataTable1
   \   00000040   3211D0E5           LDRB     R1,[R0, #+306]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   0110A003           MOVEQ    R1,#+1
   \   0000004C   0060A001           MOVEQ    R6,R0
   \   00000050   3211C005           STRBEQ   R1,[R0, #+306]
   \   00000054   000056E3           CMP      R6,#+0
   \   00000058   0700000A           BEQ      ??FS_OpenDir_0
   \   0000005C   184086E5           STR      R4,[R6, #+24]
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   00009DE5           LDR      R0,[SP, #+0]
   \   00000068   ........           BL       FS_FAT_OpenDir
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0200000A           BEQ      ??FS_OpenDir_1
   \   00000074   3251C6E5           STRB     R5,[R6, #+306]
   \   00000078   0060A0E3           MOV      R6,#+0
    280            FS_UNLOCK();
   \                     ??FS_OpenDir_0:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \                     ??FS_OpenDir_1:
   \   00000080   ........           BL       FS_OS_Unlock
    281            return pHandle;
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   08D08DE2           ADD      SP,SP,#+8
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    282          }
    283          
    284          
    285          /*********************************************************************
    286          *
    287          *       FS_CloseDir
    288          *
    289          *  Description:
    290          *    API function. Close a directory referred by pDir.
    291          *
    292          *  Parameters:
    293          *    pDir        - Pointer to a FS_DIR data structure.
    294          *
    295          *  Return value:
    296          *    ==0         - Directory has been closed.
    297          *    ==-1        - Unable to close directory.
    298          */

   \                                 In section .text, align 4, keep-with-next
    299          int FS_CloseDir(FS_DIR * pDir) {
   \                     FS_CloseDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    300            int i;
    301          
    302            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    303            i = FS__CloseDir(pDir);
   \   00000014   0050E0E3           MVN      R5,#+0
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0700000A           BEQ      ??FS_CloseDir_0
   \   00000020   180094E5           LDR      R0,[R4, #+24]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??FS_CloseDir_1
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       FS_FAT_CloseDir
   \   00000034   0050A0E1           MOV      R5,R0
   \   00000038   0000A0E3           MOV      R0,#+0
   \                     ??FS_CloseDir_1:
   \   0000003C   3201C4E5           STRB     R0,[R4, #+306]
    304            FS_UNLOCK();
   \                     ??FS_CloseDir_0:
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   ........           BL       FS_OS_Unlock
    305            return i;
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    306          }
    307          
    308          /*********************************************************************
    309          *
    310          *       FS_ReadDir
    311          *
    312          *  Description:
    313          *    API function. Read next directory entry in directory specified by
    314          *    pDir.
    315          *
    316          *  Parameters:
    317          *    pDir        - Pointer to a FS_DIR data structure.
    318          *
    319          *  Return value:
    320          *    ==0         - No more directory entries or error.
    321          *    !=0         - Pointer to a directory entry.
    322          */

   \                                 In section .text, align 4, keep-with-next
    323          FS_DIRENT * FS_ReadDir(FS_DIR * pDir) {
   \                     FS_ReadDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
    324            FS_DIRENT * pDirEnt;
    325            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    326            pDirEnt = FS__ReadDir(pDir);
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   00C0A0E3           MOV      R12,#+0
   \   00000028   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   0000002C   0E00A0E8           STM      R0!,{R1-R3}
   \   00000030   201084E2           ADD      R1,R4,#+32
   \   00000034   14108DE5           STR      R1,[SP, #+20]
   \   00000038   411FA0E3           MOV      R1,#+260
   \   0000003C   18108DE5           STR      R1,[SP, #+24]
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   000054E3           CMP      R4,#+0
   \   00000048   0E00000A           BEQ      ??FS_ReadDir_0
   \   0000004C   180094E5           LDR      R0,[R4, #+24]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0C00000A           BEQ      ??FS_ReadDir_1
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       FS_FAT_ReadDir
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0600001A           BNE      ??FS_ReadDir_0
   \   0000006C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000070   205084E2           ADD      R5,R4,#+32
   \   00000074   0401C5E5           STRB     R0,[R5, #+260]
   \   00000078   10009DE5           LDR      R0,[SP, #+16]
   \   0000007C   080185E5           STR      R0,[R5, #+264]
   \   00000080   04009DE5           LDR      R0,[SP, #+4]
   \   00000084   0C0185E5           STR      R0,[R5, #+268]
    327            FS_UNLOCK();
   \                     ??FS_ReadDir_0:
   \   00000088   0000A0E3           MOV      R0,#+0
   \                     ??FS_ReadDir_1:
   \   0000008C   ........           BL       FS_OS_Unlock
    328            return pDirEnt;
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   1CD08DE2           ADD      SP,SP,#+28
   \   00000098   3080BDE8           POP      {R4,R5,PC}       ;; return
    329          }
    330          
    331          /*********************************************************************
    332          *
    333          *       FS_RewindDir
    334          *
    335          *  Description:
    336          *    API function. Set pointer for reading the next directory entry to
    337          *    the first entry in the directory.
    338          *
    339          *  Parameters:
    340          *    pDir        - Pointer to a FS_DIR data structure.
    341          *
    342          *    Return value:
    343          *    None.
    344          */

   \                                 In section .text, align 4, keep-with-next
    345          void FS_RewindDir(FS_DIR * pDir) {
   \                     FS_RewindDir:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    346            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    347            FS__RewindDir(pDir);
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0000A013           MOVNE    R0,#+0
   \   00000018   B001C411           STRHNE   R0,[R4, #+16]
    348            FS_UNLOCK();
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           BL       FS_OS_Unlock
    349          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    350          
    351          /*********************************************************************
    352          *
    353          *       FS_DirEnt2Attr
    354          *
    355          *  Description:
    356          *    API function. Get the directory entry attributes.
    357          *
    358          *  Parameters:
    359          *    pDir        - Pointer to a FS_DIRENT data structure.
    360          *    pString     - Pointer to a buffer to be copied to.
    361          *
    362          */

   \                                 In section .text, align 4, keep-with-next
    363          void FS_DirEnt2Attr(FS_DIRENT * pDirEnt, U8 * pAttr) {
   \                     FS_DirEnt2Attr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    364            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    365            FS__DirEnt2Attr(pDirEnt, pAttr);
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   00005513           CMPNE    R5,#+0
   \   00000020   0401D415           LDRBNE   R0,[R4, #+260]
   \   00000024   0000C515           STRBNE   R0,[R5, #+0]
    366            FS_UNLOCK();
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   ........           BL       FS_OS_Unlock
    367          }
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    368          
    369          /*********************************************************************
    370          *
    371          *       FS_DirEnt2Name
    372          *
    373          *  Description:
    374          *    API function. Get the Get the directory entry name.
    375          *
    376          *  Parameters:
    377          *    pDir        - Pointer to a FS_DIRENT data structure.
    378          *    pBuffer     - Pointer to a buffer to be copied to.
    379          *
    380          */

   \                                 In section .text, align 4, keep-with-next
    381          void FS_DirEnt2Name(FS_DIRENT * pDirEnt, char * pBuffer) {
   \                     FS_DirEnt2Name:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    382            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    383            if (pDirEnt) {
   \   00000018   000054E3           CMP      R4,#+0
    384              if (pBuffer) {
   \   0000001C   00005513           CMPNE    R5,#+0
   \   00000020   0200000A           BEQ      ??FS_DirEnt2Name_0
    385                FS_STRCPY(pBuffer, pDirEnt->DirName);
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       strcpy
    386              }
    387            }
    388            FS_UNLOCK();
   \                     ??FS_DirEnt2Name_0:
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   ........           B        FS_OS_Unlock     ;; tailcall
    389          }
    390          
    391          /*********************************************************************
    392          *
    393          *       FS_DirEnt2Size
    394          *
    395          *  Description:
    396          *    API function. Get the directory entry file size.
    397          *
    398          *  Parameters:
    399          *    pDirEnt     - Pointer to a FS_DIRENT data structure.
    400          *
    401          */

   \                                 In section .text, align 4, keep-with-next
    402          U32 FS_DirEnt2Size(FS_DIRENT * pDirEnt) {
   \                     FS_DirEnt2Size:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    403            U32 r;
    404          
    405            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    406            r = 0;
   \   00000014   0050A0E3           MOV      R5,#+0
    407            if (pDirEnt) {
   \   00000018   000054E3           CMP      R4,#+0
    408              r = pDirEnt->Size;
   \   0000001C   08519415           LDRNE    R5,[R4, #+264]
    409            }
    410            FS_UNLOCK();
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   ........           BL       FS_OS_Unlock
    411            return r;
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    412          }
    413          
    414          /*********************************************************************
    415          *
    416          *       FS_DirEnt2Time
    417          *
    418          *  Description:
    419          *    API function. Get the directory entry timestamp.
    420          *
    421          *  Parameters:
    422          *    pDirEnt      - Pointer to a FS_DIRENT data structure.
    423          *
    424          */

   \                                 In section .text, align 4, keep-with-next
    425          U32 FS_DirEnt2Time(FS_DIRENT * pDirEnt) {
   \                     FS_DirEnt2Time:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    426            U32 r;
    427            r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    428            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    429            if (pDirEnt) {
   \   00000018   000054E3           CMP      R4,#+0
    430              r = pDirEnt->TimeStamp;
   \   0000001C   0C519415           LDRNE    R5,[R4, #+268]
    431            }
    432            FS_UNLOCK();
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   ........           BL       FS_OS_Unlock
    433            return r;
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    434          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     FS__aDirHandle
    435          
    436          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     FS_CloseDir         16
     FS_DirEnt2Attr      16
     FS_DirEnt2Name      16
     FS_DirEnt2Size      16
     FS_DirEnt2Time      16
     FS_OpenDir          24
     FS_ReadDir          40
     FS_RewindDir         8
     FS__CloseDir         8
     FS__DirEnt2Attr      0
     FS__OpenDir         24
     FS__ReadDir         40
     FS__RewindDir        0


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     FS__aDirHandle   308
     FS__OpenDir      116
     FS__ReadDir      136
     FS__CloseDir      48
     FS__RewindDir     16
     FS__DirEnt2Attr   20
     FS_OpenDir       144
     FS_CloseDir       84
     FS_ReadDir       156
     FS_RewindDir      40
     FS_DirEnt2Attr    56
     FS_DirEnt2Name    64
     FS_DirEnt2Size    52
     FS_DirEnt2Time    52
     ??DataTable1       4

 
 308 bytes in section .bss
 988 bytes in section .text
 
 988 bytes of CODE memory
 308 bytes of DATA memory

Errors: none
Warnings: none
