###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:01 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\InputScreens.c                              #
#    Command line =  C:\DUII\DUII\InputScreens.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\In #
#                    putScreens.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Inp #
#                    utScreens.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\InputScreens.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "DUII.h"
     26          #include "GUI.h"
     27          #include "commondefs.h"
     28          #include "DIALOG.h"
     29          #include "ConfigScreens.h"
     30          #include "GeneralConfig.h"
     31          #include "FlashReadWrite.h"
     32          #include "DataHandler.h"
     33          #include "InputScreens.h"
     34          #include "StandardList.h"
     35          #include "AnalogInputSettings.h"
     36          #include "DigitalInputSettings.h"
     37          #include "InterTask.h"
     38          #include "VehicleSettingsScreens.h"
     39          
     40          
     41          /*********************************************************************
     42          *
     43          *       Public Variables
     44          *
     45          **********************************************************************
     46          */
     47          char globalInput = 0;
     48          
     49          /*********************************************************************
     50          *
     51          *       External data and code
     52          *
     53          **********************************************************************
     54          */
     55          extern GUI_CONST_STORAGE GUI_BITMAP bmBackgroundWithPanel;
     56          extern GUI_CONST_STORAGE GUI_BITMAP bmYellowButton;
     57          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenButton;
     58          extern GUI_CONST_STORAGE GUI_BITMAP bmRedButton;
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmBlueButton;
     60          extern GUI_CONST_STORAGE GUI_BITMAP bmGrayButton;
     61          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     62          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     63          extern GUI_CONST_STORAGE GUI_BITMAP bmBackground;
     64          extern GUI_CONST_STORAGE GUI_BITMAP bmBanner;
     65          extern GUI_CONST_STORAGE GUI_BITMAP bmDummyDigital;
     66          extern GUI_CONST_STORAGE GUI_BITMAP bmDummyAnalog;
     67          extern GUI_CONST_STORAGE GUI_BITMAP bmAnalog;
     68          extern GUI_CONST_STORAGE GUI_BITMAP bmDigital;
     69          extern GUI_CONST_STORAGE GUI_BITMAP bm0;
     70          extern GUI_CONST_STORAGE GUI_BITMAP bm1;
     71          extern GUI_CONST_STORAGE GUI_BITMAP bm2;
     72          extern GUI_CONST_STORAGE GUI_BITMAP bm3;
     73          extern GUI_CONST_STORAGE GUI_BITMAP bm4;
     74          extern GUI_CONST_STORAGE GUI_BITMAP bm5;
     75          
     76          /*********************************************************************
     77          *
     78          *       Local Prototypes
     79          *
     80          **********************************************************************
     81          */
     82          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen);
     83          void SetAnalogEnableButtonText(BUTTON_Handle hBtn, int input);
     84          void SetDigitalEnableButtonText(BUTTON_Handle hBtn, int input);
     85          int ScreenIDToInput(int input);
     86          
     87          void DisplayAnalog(char, WM_HWIN);
     88          void DisplayAnalog0(WM_HWIN);
     89          void DisplayAnalog1(WM_HWIN);
     90          void DisplayAnalog2(WM_HWIN);
     91          void DisplayAnalog3(WM_HWIN);
     92          void DisplayDigital(char, WM_HWIN);
     93          void DisplayDigital4(WM_HWIN);
     94          void DisplayDigital5(WM_HWIN);
     95          
     96          void AnalogPaint(char, WM_HWIN);
     97          void Analog0Paint(WM_HWIN);
     98          void Analog1Paint(WM_HWIN);
     99          void Analog2Paint(WM_HWIN);
    100          void Analog3Paint(WM_HWIN);
    101          void DigitalPaint(char, WM_HWIN);
    102          void Digital4Paint(WM_HWIN);
    103          void Digital5Paint(WM_HWIN);
    104          
    105          
    106          /*********************************************************************
    107          *
    108          *       Tables and Constants
    109          *
    110          **********************************************************************
    111          */
    112          struct SCREEN_LIST InputsScreenList[NUM_INPUTS_SCREENS+1] = {
    113          	{ ANALOG0, DisplayAnalog0, Analog0Paint },
    114          	{ ANALOG1, DisplayAnalog1, Analog1Paint },
    115          	{ ANALOG2, DisplayAnalog2, Analog2Paint },
    116          	{ ANALOG3, DisplayAnalog3, Analog3Paint },
    117          	{ DIGITAL4, DisplayDigital4, Digital4Paint },
    118          	{ DIGITAL5, DisplayDigital5, Digital5Paint },
    119          	{ -1, NULL, NULL }
    120          };
    121          
    122          #ifdef TEST_KEYBOARD
    123          #define	ID_Q		GUI_ID_USER + 1
    124          #define	ID_W		GUI_ID_USER + 2
    125          #define	ID_E		GUI_ID_USER + 3
    126          #define	ID_R		GUI_ID_USER + 4
    127          #define	ID_T		GUI_ID_USER + 5
    128          #define	ID_Y		GUI_ID_USER + 6
    129          #endif
    130          
    131          #define	ENABLE_BUTTON			GUI_ID_USER + 1
    132          #define	EDIT_SCALE_BUTTON		GUI_ID_USER + 2
    133          #define	EDIT_ALARM_BUTTON		GUI_ID_USER + 3
    134          #define	RENAME_INPUT_BUTTON		GUI_ID_USER + 4
    135          #define	RENAME_UNITS_BUTTON		GUI_ID_USER + 5
    136          #define	RENAME_HIGH_BUTTON		GUI_ID_USER + 6
    137          #define	RENAME_LOW_BUTTON		GUI_ID_USER + 7
    138          

   \                                 In section .bss, align 4
    139          int test;
   \                     test:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     InputsScreenList:
   \   00000000   00000000....       DC32 0, DisplayAnalog0, Analog0Paint, 1, DisplayAnalog1, Analog1Paint
   \              ............
   \              01000000....
   \              ............
   \   00000018   02000000....       DC32 2, DisplayAnalog2, Analog2Paint, 3, DisplayAnalog3, Analog3Paint
   \              ............
   \              03000000....
   \              ............
   \   00000030   04000000....       DC32 4, DisplayDigital4, Digital4Paint, 5, DisplayDigital5
   \              ............
   \              05000000....
   \              ....        
   \   00000044   ........FFFF       DC32 Digital5Paint, -1, 0H, 0H
   \              FFFF00000000
   \              00000000    
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     globalInput:
   \   00000058   00                 DC8 0
    140          
    141          /*********************************************************************
    142          *
    143          *       Local Variables
    144          *
    145          **********************************************************************
    146          */
    147          static WM_HWIN hInputsScreens;
    148          //static int KMCDialogSemaphone = 0;
    149          //static int clickedOnThisScreen;
    150          
    151          
    152          /*********************************************************************
    153          *
    154          *       Public code
    155          *
    156          **********************************************************************
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          WM_HWIN GetInputsWindowHandle(void)
    159          {
    160          	return hInputsScreens;
   \                     GetInputsWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable52
   \   00000004   540090E5           LDR      R0,[R0, #+84]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    161          }
    162          

   \                                 In section .text, align 4, keep-with-next
    163          void SetInputsWindowHandle(WM_HWIN hWin)
    164          {
    165          	hInputsScreens = hWin;
   \                     SetInputsWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable52
   \   00000004   540081E5           STR      R0,[R1, #+84]
    166          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    167          

   \                                 In section .text, align 4, keep-with-next
    168          void InputsScreensCallback(WM_MESSAGE * pMsg)
    169          {
   \                     InputsScreensCallback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    170          	int NCode, Id;
    171          	int input;
    172          //	int results;
    173          //	int Sel;
    174          //	WM_HWIN hDlg;
    175          
    176          //	hDlg = pMsg->hWin;
    177          
    178          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   9D00000A           BEQ      ??InputsScreensCallback_1
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   0D00000A           BEQ      ??InputsScreensCallback_2
   \   00000020   170050E2           SUBS     R0,R0,#+23
   \   00000024   1800000A           BEQ      ??InputsScreensCallback_3
   \   00000028   ED0050E2           SUBS     R0,R0,#+237
   \   0000002C   9500001A           BNE      ??InputsScreensCallback_4
    179          	{
    180          		case WM_TIMER:
    181          			if (pMsg->Data.v == hScreenTimer)
   \   00000030   ........           LDR      R0,??DataTable52_3
   \   00000034   0C1094E5           LDR      R1,[R4, #+12]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   000051E1           CMP      R1,R0
   \   00000040   9200001A           BNE      ??InputsScreensCallback_1
    182          			{
    183          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000044   7D10A0E3           MOV      R1,#+125
   \   00000048   ........           BL       WM_RestartTimer
    184          //				WM_InvalidateRect(pMsg->hWin, &SignalStrengthRect);
    185          				WM_InvalidateWindow(pMsg->hWin);		// Allow timer to invalidate the whole window so we can show live data on the inputs
   \   0000004C   040094E5           LDR      R0,[R4, #+4]
   \                     ??InputsScreensCallback_5:
   \   00000050   ........           BL       WM_InvalidateWindow
   \   00000054   8D0000EA           B        ??InputsScreensCallback_1
    186          			}
    187          			break;
    188          
    189          		case WM_CREATE:
    190          			InputsIgnoreNextKeyRelease();
    191          			break;
    192          
    193          		case WM_PAINT:
    194          			if (GetScreenType() == INPUTS_SCREENS_TYPE)
   \                     ??InputsScreensCallback_2:
   \   00000058   ........           BL       GetScreenType
   \   0000005C   0A0050E3           CMP      R0,#+10
   \   00000060   8A00001A           BNE      ??InputsScreensCallback_1
    195          			{
    196          				// Call paint method of center screen
    197          				InputsScreenList[GetLastScreen(INPUTS_SCREENS_TYPE)].paint(hInputsScreens);
   \   00000064   ........           BL       GetLastScreen
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   ........           LDR      R5,??DataTable52
   \   00000070   0C20A0E3           MOV      R2,#+12
   \   00000074   925121E0           MLA      R1,R2,R1,R5
   \   00000078   540095E5           LDR      R0,[R5, #+84]
   \   0000007C   081091E5           LDR      R1,[R1, #+8]
   \   00000080   31FF2FE1           BLX      R1
    198          				DrawSignalStrength();
   \   00000084   ........           BL       DrawSignalStrength
   \   00000088   800000EA           B        ??InputsScreensCallback_1
    199          			}
    200          			break;
    201          
    202          #ifdef TEST_KEYBOARD
    203          		case WM_NOTIFY_PARENT:
    204          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
    205          			NCode = pMsg->Data.v;				// Notification code
    206          			switch (NCode)
    207          			{
    208          				case WM_NOTIFICATION_CLICKED:
    209          					switch (Id)
    210          					{
    211          						case ID_Q:
    212          							test++;
    213          							break;
    214          
    215          						case ID_W:
    216          							test--;
    217          							break;
    218          
    219          						default:
    220          							test = 0;
    221          							break;
    222          					}
    223          					break;
    224          
    225          				case WM_NOTIFICATION_RELEASED:
    226          					pressingbutton_semaphore = 0;
    227          //					if (!clickedOnThisScreen)
    228          //						break;
    229          
    230          					switch (Id)
    231          					{
    232          						case ID_Q:
    233          							test++;
    234          							break;
    235          
    236          						default:
    237          							test = 0;
    238          							break;
    239          					}
    240          					break;
    241          			}
    242          			break;
    243          #endif
    244          
    245          		case WM_NOTIFY_PARENT:
    246          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??InputsScreensCallback_3:
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   ........           BL       WM_GetId
   \   00000094   0060A0E1           MOV      R6,R0
    247          			NCode = pMsg->Data.v;				// Notification code
    248          			switch (NCode)
   \   00000098   0C0094E5           LDR      R0,[R4, #+12]
   \   0000009C   020050E3           CMP      R0,#+2
   \   000000A0   7A00001A           BNE      ??InputsScreensCallback_1
    249          			{
    250          				case WM_NOTIFICATION_RELEASED:
    251          					//pressingbutton_semaphore = 0;
    252          					//if (!clickedOnThisScreen)
    253          					//	break;
    254          
    255          					input = GetCurrentScreen();
   \   000000A4   ........           BL       GetCurrentScreen
   \   000000A8   0030A0E1           MOV      R3,R0
    256          					input = ScreenIDToInput(input);
   \   000000AC   010040E2           SUB      R0,R0,#+1
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   0030A083           MOVHI    R3,#+0
   \   000000B8   0100008A           BHI      ??InputsScreensCallback_6
    257          					if (input < 4)
   \   000000BC   040053E3           CMP      R3,#+4
   \   000000C0   010000AA           BGE      ??InputsScreensCallback_7
    258          						globalInput = input;
   \                     ??InputsScreensCallback_6:
   \   000000C4   0300A0E1           MOV      R0,R3
   \   000000C8   000000EA           B        ??InputsScreensCallback_8
    259          					else globalInput = input - 4;
   \                     ??InputsScreensCallback_7:
   \   000000CC   040043E2           SUB      R0,R3,#+4
   \                     ??InputsScreensCallback_8:
   \   000000D0   ........           LDR      R5,??DataTable52
    260          
    261          					switch (Id)
   \   000000D4   016046E2           SUB      R6,R6,#+1
   \   000000D8   806E46E2           SUB      R6,R6,#+2048
   \   000000DC   5800C5E5           STRB     R0,[R5, #+88]
   \   000000E0   060056E3           CMP      R6,#+6
   \   000000E4   06F18F90           ADDLS    PC,PC,R6, LSL #+2
   \                     ??InputsScreensCallback_0:
   \   000000E8   6800008A           BHI      ??InputsScreensCallback_1
   \   000000EC   050000EA           B        ??InputsScreensCallback_9
   \   000000F0   440000EA           B        ??InputsScreensCallback_10
   \   000000F4   4A0000EA           B        ??InputsScreensCallback_11
   \   000000F8   500000EA           B        ??InputsScreensCallback_12
   \   000000FC   550000EA           B        ??InputsScreensCallback_13
   \   00000100   570000EA           B        ??InputsScreensCallback_14
   \   00000104   5B0000EA           B        ??InputsScreensCallback_15
    262          					{
    263          						case ENABLE_BUTTON:
    264          							if (input < 4)
   \                     ??InputsScreensCallback_9:
   \   00000108   ........           LDR      R6,??DataTable52_4
   \   0000010C   040053E3           CMP      R3,#+4
   \   00000110   0F0000AA           BGE      ??InputsScreensCallback_16
    265          							{
    266          								if (vehicleData.analogInput[input].enabled)
   \   00000114   030386E0           ADD      R0,R6,R3, LSL #+6
   \   00000118   9310D0E5           LDRB     R1,[R0, #+147]
   \   0000011C   000051E3           CMP      R1,#+0
    267          									vehicleData.analogInput[input].enabled = false;
   \   00000120   0010A013           MOVNE    R1,#+0
    268          								else vehicleData.analogInput[input].enabled = FILTER_NONE;	// no averaging
   \   00000124   0110A003           MOVEQ    R1,#+1
   \   00000128   9310C0E5           STRB     R1,[R0, #+147]
    269          								
    270          								SetAnalogEnableButtonText(pMsg->hWinSrc, input);
   \   0000012C   9300D0E5           LDRB     R0,[R0, #+147]
   \   00000130   085094E5           LDR      R5,[R4, #+8]
   \   00000134   ............       ADRL     R1,`?<Constant "%s Analog %d">`
   \              ....        
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   00000148   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   00000150   230000EA           B        ??InputsScreensCallback_17
    271          							}
    272          							else
    273          							{
    274          								// If user is attempting to enable digital input 4
    275          								if ((input == 4) && (vehicleData.digitalInput[0].enabled == false))
   \                     ??InputsScreensCallback_16:
   \   00000154   A301D605           LDRBEQ   R0,[R6, #+419]
   \   00000158   00005003           CMPEQ    R0,#+0
   \   0000015C   0E00001A           BNE      ??InputsScreensCallback_18
    276          								{
    277          									// Input 4 mutually exclusive with camera.  If camera enabled warn that this option is not allowed
    278          									if (GetSUCam() != CAMERA_NONE)
   \   00000160   ........           BL       GetSUCam
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0B00000A           BEQ      ??InputsScreensCallback_18
    279          									{
    280          										static const GUI_WIDGET_CREATE_INFO Input4DisabledResources[] = {
    281          											{ FRAMEWIN_CreateIndirect, "Invalid Setting", 0, 30, 20, 400, 220, 0, 0 },
    282          											{ TEXT_CreateIndirect, "You cannot enable Digital Input 4", 0, 0, 10, 390, 30, TEXT_CF_HCENTER },
    283          											{ TEXT_CreateIndirect, "if you have a camera selected.",    0, 0, 40, 390, 30, TEXT_CF_HCENTER },
    284          											{ TEXT_CreateIndirect, "Disable camera to use Input 4.",    0, 0, 70, 390, 30, TEXT_CF_HCENTER },
    285          											{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 145, 115, 100, 60 },
    286          										};
    287          
    288          										SetPopupDefaults(ERROR_POPUP);
   \   0000016C   0200A0E3           MOV      R0,#+2
   \   00000170   ........           BL       SetPopupDefaults
    289          										GUI_ExecDialogBox(Input4DisabledResources, GUI_COUNTOF(Input4DisabledResources), &popupCallback, hInputsScreens, 10, 10);
   \   00000174   0A00A0E3           MOV      R0,#+10
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   00008DE5           STR      R0,[SP, #+0]
   \   00000180   543095E5           LDR      R3,[R5, #+84]
   \   00000184   ........           LDR      R2,??DataTable52_5
   \   00000188   0510A0E3           MOV      R1,#+5
   \   0000018C   ............       ADRL     R0,??Input4DisabledResources
   \              ....        
   \   00000194   ........           BL       GUI_ExecDialogBox
    290          										break;
   \   00000198   3C0000EA           B        ??InputsScreensCallback_1
    291          									}
    292          								}
   \                     ??InputsScreensCallback_18:
   \   0000019C   5800D5E5           LDRB     R0,[R5, #+88]
   \   000001A0   2F20A0E3           MOV      R2,#+47
   \   000001A4   826001E1           SMLABB   R1,R2,R0,R6
    293          								if (vehicleData.digitalInput[globalInput].enabled)
    294          									vehicleData.digitalInput[globalInput].enabled = false;
    295          								else vehicleData.digitalInput[globalInput].enabled = true;
    296          							
    297          								SetDigitalEnableButtonText(pMsg->hWinSrc, globalInput);
   \   000001A8   043080E2           ADD      R3,R0,#+4
   \   000001AC   A321D1E5           LDRB     R2,[R1, #+419]
   \   000001B0   000052E3           CMP      R2,#+0
   \   000001B4   0020A013           MOVNE    R2,#+0
   \   000001B8   0120A003           MOVEQ    R2,#+1
   \   000001BC   A321C1E5           STRB     R2,[R1, #+419]
   \   000001C0   A311D1E5           LDRB     R1,[R1, #+419]
   \   000001C4   085094E5           LDR      R5,[R4, #+8]
   \   000001C8   000051E3           CMP      R1,#+0
   \   000001CC   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   000001D4   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   000001DC   ............       ADRL     R1,`?<Constant "%s Digital %d">`
   \              ....        
   \                     ??InputsScreensCallback_17:
   \   000001E4   0D00A0E1           MOV      R0,SP
   \   000001E8   ........           BL       sprintf
   \   000001EC   0D10A0E1           MOV      R1,SP
   \   000001F0   0500A0E1           MOV      R0,R5
   \   000001F4   ........           BL       BUTTON_SetText
    298          							}
    299          							notifyConfigChange();
   \   000001F8   ........           BL       notifyConfigChange
    300          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \   000001FC   080094E5           LDR      R0,[R4, #+8]
   \   00000200   ........           BL       WM_GetParent
   \   00000204   91FFFFEA           B        ??InputsScreensCallback_5
    301          							break;
    302          
    303          						case EDIT_SCALE_BUTTON:
    304          							if (input < 4)
   \                     ??InputsScreensCallback_10:
   \   00000208   040053E3           CMP      R3,#+4
   \   0000020C   1F0000AA           BGE      ??InputsScreensCallback_1
    305          								DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, SCALE, hInputsScreens);
   \   00000210   542095E5           LDR      R2,[R5, #+84]
   \   00000214   0010A0E3           MOV      R1,#+0
   \                     ??InputsScreensCallback_19:
   \   00000218   0F00A0E3           MOV      R0,#+15
   \                     ??InputsScreensCallback_20:
   \   0000021C   ........           BL       DisplayNewScreenList
   \   00000220   1A0000EA           B        ??InputsScreensCallback_1
    306          							break;
    307          
    308          						case EDIT_ALARM_BUTTON:
    309          							if (input < 4)
   \                     ??InputsScreensCallback_11:
   \   00000224   040053E3           CMP      R3,#+4
   \   00000228   542095E5           LDR      R2,[R5, #+84]
    310          								DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, ALARM, hInputsScreens);
   \   0000022C   0110A0B3           MOVLT    R1,#+1
   \   00000230   F8FFFFBA           BLT      ??InputsScreensCallback_19
    311          							else DisplayNewScreenList(DIGITAL_SETTINGS_SCREEN_TYPE, DIG_ALARM_STATE, hInputsScreens);
   \   00000234   0010A0E3           MOV      R1,#+0
   \                     ??InputsScreensCallback_21:
   \   00000238   1000A0E3           MOV      R0,#+16
   \   0000023C   F6FFFFEA           B        ??InputsScreensCallback_20
    312          							break;
    313          
    314          						case RENAME_INPUT_BUTTON:
    315          							if (input < 4)
   \                     ??InputsScreensCallback_12:
   \   00000240   040053E3           CMP      R3,#+4
   \   00000244   542095E5           LDR      R2,[R5, #+84]
    316          								DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, RENAME_INPUT, hInputsScreens);
   \   00000248   0210A0B3           MOVLT    R1,#+2
   \   0000024C   F1FFFFBA           BLT      ??InputsScreensCallback_19
    317          							else DisplayNewScreenList(DIGITAL_SETTINGS_SCREEN_TYPE, DIG_RENAME_INPUT, hInputsScreens);
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   F7FFFFEA           B        ??InputsScreensCallback_21
    318          							break;
    319          
    320          						case RENAME_UNITS_BUTTON:
    321          							DisplayNewScreenList(ANALOG_SETTINGS_SCREEN_TYPE, RENAME_UNITS, hInputsScreens);
   \                     ??InputsScreensCallback_13:
   \   00000258   542095E5           LDR      R2,[R5, #+84]
   \   0000025C   0310A0E3           MOV      R1,#+3
   \   00000260   ECFFFFEA           B        ??InputsScreensCallback_19
    322          							break;
    323          
    324          						case RENAME_HIGH_BUTTON:
    325          							DisplayNewScreenList(DIGITAL_SETTINGS_SCREEN_TYPE, DIG_RENAME_HIGH, hInputsScreens);
   \                     ??InputsScreensCallback_14:
   \   00000264   542095E5           LDR      R2,[R5, #+84]
   \   00000268   0210A0E3           MOV      R1,#+2
   \   0000026C   1000A0E3           MOV      R0,#+16
   \   00000270   ........           BL       DisplayNewScreenList
    326          							break;
   \   00000274   050000EA           B        ??InputsScreensCallback_1
    327          
    328          						case RENAME_LOW_BUTTON:
    329          							DisplayNewScreenList(DIGITAL_SETTINGS_SCREEN_TYPE, DIG_RENAME_LOW, hInputsScreens);
   \                     ??InputsScreensCallback_15:
   \   00000278   542095E5           LDR      R2,[R5, #+84]
   \   0000027C   0310A0E3           MOV      R1,#+3
   \   00000280   1000A0E3           MOV      R0,#+16
   \   00000284   E4FFFFEA           B        ??InputsScreensCallback_20
    330          							break;
    331          					}
    332          			}
    333          			break;
    334          
    335          		default:
    336          			WM_DefaultProc(pMsg);
   \                     ??InputsScreensCallback_4:
   \   00000288   0400A0E1           MOV      R0,R4
   \   0000028C   ........           BL       WM_DefaultProc
    337          	}
    338          }
   \                     ??InputsScreensCallback_1:
   \   00000290   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000294   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??Input4DisabledResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Invalid Setting">`
   \              ....        
   \   00000008   00001E001400       DC16 0, 30, 20, 400, 220, 0
   \              9001DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "You cannot enable Dig...">`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 390, 30, 2
   \              86011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "if you have a camera ...">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 390, 30, 2
   \              86011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Disable camera to use...">`
   \              ....        
   \   00000050   000000004600       DC16 0, 0, 70, 390, 30, 2
   \              86011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000068   010091007300       DC16 1, 145, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
    339          

   \                                 In section .text, align 4, keep-with-next
    340          void DisplayAnalog0(WM_HWIN hParent)
    341          {
    342          	DisplayAnalog(0, hParent);
   \                     DisplayAnalog0:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           B        DisplayAnalog    ;; tailcall
    343          }

   \                                 In section .text, align 4, keep-with-next
    344          void DisplayAnalog1(WM_HWIN hParent)
    345          {
    346          	DisplayAnalog(1, hParent);
   \                     DisplayAnalog1:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           B        DisplayAnalog    ;; tailcall
    347          }

   \                                 In section .text, align 4, keep-with-next
    348          void DisplayAnalog2(WM_HWIN hParent)
    349          {
    350          	DisplayAnalog(2, hParent);
   \                     DisplayAnalog2:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0200A0E3           MOV      R0,#+2
   \   00000008   ........           B        DisplayAnalog    ;; tailcall
    351          }

   \                                 In section .text, align 4, keep-with-next
    352          void DisplayAnalog3(WM_HWIN hParent)
    353          {
    354          	DisplayAnalog(3, hParent);
   \                     DisplayAnalog3:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0300A0E3           MOV      R0,#+3
   \   00000008   ........           B        DisplayAnalog    ;; tailcall
    355          }
    356          

   \                                 In section .text, align 4, keep-with-next
    357          void SetAnalogEnableButtonText(BUTTON_Handle hBtn, int input)
    358          {
   \                     SetAnalogEnableButtonText:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    359          	char scratch[20];
    360          
    361          	sprintf(scratch, "%s Analog %d", vehicleData.analogInput[input].enabled ? "Disable" : "Enable", input);
   \   00000008   ........           LDR      R0,??DataTable52_4
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   010380E0           ADD      R0,R0,R1, LSL #+6
   \   00000014   9300D0E5           LDRB     R0,[R0, #+147]
   \   00000018   0130A0E1           MOV      R3,R1
   \   0000001C   ............       ADRL     R1,`?<Constant "%s Analog %d">`
   \              ....        
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   00000030   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           BL       sprintf
    362          	BUTTON_SetText(hBtn, scratch);
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       BUTTON_SetText
    363          }
   \   0000004C   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
    364          

   \                                 In section .text, align 4, keep-with-next
    365          void SetDigitalEnableButtonText(BUTTON_Handle hBtn, int input)
    366          {
   \                     SetDigitalEnableButtonText:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    367          	char scratch[20];
    368          
    369          	sprintf(scratch, "%s Digital %d", vehicleData.digitalInput[input].enabled ? "Disable" : "Enable", input+4);
   \   00000008   2F00A0E3           MOV      R0,#+47
   \   0000000C   ........           LDR      R2,??DataTable52_4
   \   00000010   902122E0           MLA      R2,R0,R1,R2
   \   00000014   18D04DE2           SUB      SP,SP,#+24
   \   00000018   A301D2E5           LDRB     R0,[R2, #+419]
   \   0000001C   043081E2           ADD      R3,R1,#+4
   \   00000020   ............       ADRL     R1,`?<Constant "%s Digital %d">`
   \              ....        
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   00000034   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           BL       sprintf
    370          	BUTTON_SetText(hBtn, scratch);
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       BUTTON_SetText
    371          }
   \   00000050   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    372          
    373          #define	LINE1					30			
    374          #define	LINE2					70		
    375          #define	LINE3					100
    376          #define	LINE_SPACING			30
    377          #define	LINE_GAP				15
    378          #define	GEAR_TABLE_TOP			(LINE3 + 7)
    379          #define	GEAR_TABLE_VGAP			25
    380          #define	SECOND_COL_GAP			((((BOX_RIGHT - LINE_GAP) - (BOX_LEFT + LINE_GAP)) / 4) + LINE_GAP)
    381          #define	THIRD_COL_GAP			((BOX_RIGHT - BOX_LEFT)/2 + (LINE_GAP/2))
    382          #define	FORTH_COL_GAP			(((((BOX_RIGHT - LINE_GAP) - (BOX_LEFT + LINE_GAP)) / 4) * 3) + LINE_GAP)
    383          #define	FORTH_COL_POS			(BOX_RIGHT - 52)
    384          #define	LED1_POS				(BOX_LEFT + 25)
    385          #define	LED2_POS				(BOX_RIGHT - 70)
    386          #define FILTER_VPOS				(BOX_RIGHT - 37)
    387          #define	LED_VPOS				(BOX_BOTTOM - 25)
    388          
    389          

   \                                 In section .text, align 4, keep-with-next
    390          void Analog0Paint(WM_HWIN hParent)
    391          {
    392          	AnalogPaint(0, hParent);
   \                     Analog0Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           B        AnalogPaint      ;; tailcall
    393          }

   \                                 In section .text, align 4, keep-with-next
    394          void Analog1Paint(WM_HWIN hParent)
    395          {
    396          	AnalogPaint(1, hParent);
   \                     Analog1Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           B        AnalogPaint      ;; tailcall
    397          }
    398          

   \                                 In section .text, align 4, keep-with-next
    399          void Analog2Paint(WM_HWIN hParent)
    400          {
    401          	AnalogPaint(2, hParent);
   \                     Analog2Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0200A0E3           MOV      R0,#+2
   \   00000008   ........           B        AnalogPaint      ;; tailcall
    402          }
    403          

   \                                 In section .text, align 4, keep-with-next
    404          void Analog3Paint(WM_HWIN hParent)
    405          {
    406          	AnalogPaint(3, hParent);
   \                     Analog3Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0300A0E3           MOV      R0,#+3
   \   00000008   ........           B        AnalogPaint      ;; tailcall
    407          }
    408          
    409          

   \                                 In section .text, align 4, keep-with-next
    410          void DisplayAnalog(char input, WM_HWIN hParent)
    411          {
   \                     DisplayAnalog:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    412          	BUTTON_Handle hBtn;
    413          
    414          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 48, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, ENABLE_BUTTON);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   800E80E3           ORR      R0,R0,#0x800
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   08008DE5           STR      R0,[SP, #+8]
   \   00000020   0250A0E3           MOV      R5,#+2
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   0140A0E1           MOV      R4,R1
   \   0000002C   405F85E3           ORR      R5,R5,#0x100
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   00408DE5           STR      R4,[SP, #+0]
   \   00000038   2730A0E3           MOV      R3,#+39
   \   0000003C   CA20A0E3           MOV      R2,#+202
   \   00000040   3010A0E3           MOV      R1,#+48
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       BUTTON_CreateEx
   \   0000004C   0070A0E1           MOV      R7,R0
    415          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   00000050   ........           LDR      R2,??DataTable53
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ........           BL       BUTTON_SetBitmap
    416          	SetAnalogEnableButtonText(hBtn, input);
   \   0000005C   ........           LDR      R0,??DataTable52_4
   \   00000060   0630A0E1           MOV      R3,R6
   \   00000064   060380E0           ADD      R0,R0,R6, LSL #+6
   \   00000068   9300D0E5           LDRB     R0,[R0, #+147]
   \   0000006C   ............       ADRL     R1,`?<Constant "%s Analog %d">`
   \              ....        
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   00000080   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   00000088   10008DE2           ADD      R0,SP,#+16
   \   0000008C   ........           BL       sprintf
   \   00000090   10108DE2           ADD      R1,SP,#+16
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           BL       BUTTON_SetText
    417          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   ........           BL       BUTTON_SetTextColor
    418          
    419          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 91, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_SCALE_BUTTON);
   \   000000AC   700E85E2           ADD      R0,R5,#+1792
   \   000000B0   0C008DE5           STR      R0,[SP, #+12]
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   08008DE5           STR      R0,[SP, #+8]
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
   \   000000C4   00408DE5           STR      R4,[SP, #+0]
   \   000000C8   2730A0E3           MOV      R3,#+39
   \   000000CC   CA20A0E3           MOV      R2,#+202
   \   000000D0   5B10A0E3           MOV      R1,#+91
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           BL       BUTTON_CreateEx
   \   000000DC   0060A0E1           MOV      R6,R0
    420          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmYellowButton);
   \   000000E0   ........           LDR      R2,??DataTable54
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   ........           BL       BUTTON_SetBitmap
    421          	BUTTON_SetText(hBtn, "Edit Scale");
   \   000000EC   ............       ADRL     R1,`?<Constant "Edit Scale">`
   \              ....        
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           BL       BUTTON_SetText
    422          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           BL       BUTTON_SetTextColor
    423          
    424          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 134, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_ALARM_BUTTON);
   \   0000010C   0300A0E3           MOV      R0,#+3
   \   00000110   800E80E3           ORR      R0,R0,#0x800
   \   00000114   0C008DE5           STR      R0,[SP, #+12]
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   08008DE5           STR      R0,[SP, #+8]
   \   00000120   0200A0E3           MOV      R0,#+2
   \   00000124   04008DE5           STR      R0,[SP, #+4]
   \   00000128   00408DE5           STR      R4,[SP, #+0]
   \   0000012C   2730A0E3           MOV      R3,#+39
   \   00000130   CA20A0E3           MOV      R2,#+202
   \   00000134   8610A0E3           MOV      R1,#+134
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   ........           BL       BUTTON_CreateEx
   \   00000140   0060A0E1           MOV      R6,R0
    425          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000144   ........           LDR      R2,??DataTable55
   \   00000148   0010A0E3           MOV      R1,#+0
   \   0000014C   ........           BL       BUTTON_SetBitmap
    426          	BUTTON_SetText(hBtn, "Edit Alarm");
   \   00000150   ............       ADRL     R1,`?<Constant "Edit Alarm">`
   \              ....        
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   ........           BL       BUTTON_SetText
    427          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0010A0E3           MOV      R1,#+0
   \   00000168   0600A0E1           MOV      R0,R6
   \   0000016C   ........           BL       BUTTON_SetTextColor
    428          
    429          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 177, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, RENAME_INPUT_BUTTON);
   \   00000170   0400A0E3           MOV      R0,#+4
   \   00000174   800E80E3           ORR      R0,R0,#0x800
   \   00000178   0C008DE5           STR      R0,[SP, #+12]
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   08008DE5           STR      R0,[SP, #+8]
   \   00000184   0200A0E3           MOV      R0,#+2
   \   00000188   04008DE5           STR      R0,[SP, #+4]
   \   0000018C   00408DE5           STR      R4,[SP, #+0]
   \   00000190   2730A0E3           MOV      R3,#+39
   \   00000194   CA20A0E3           MOV      R2,#+202
   \   00000198   B110A0E3           MOV      R1,#+177
   \   0000019C   0500A0E1           MOV      R0,R5
   \   000001A0   ........           BL       BUTTON_CreateEx
    430          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGrayButton);
   \   000001A4   ........           LDR      R6,??DataTable55_1
   \   000001A8   0080A0E1           MOV      R8,R0
   \   000001AC   0620A0E1           MOV      R2,R6
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   ........           BL       BUTTON_SetBitmap
    431          	BUTTON_SetText(hBtn, "Rename Input");
   \   000001B8   ............       ADRL     R1,`?<Constant "Rename Input">`
   \              ....        
   \   000001C0   0800A0E1           MOV      R0,R8
   \   000001C4   ........           BL       BUTTON_SetText
    432          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000001C8   FF74E0E3           MVN      R7,#-16777216
   \   000001CC   0720A0E1           MOV      R2,R7
   \   000001D0   0010A0E3           MOV      R1,#+0
   \   000001D4   0800A0E1           MOV      R0,R8
   \   000001D8   ........           BL       BUTTON_SetTextColor
    433          
    434          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 220, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, RENAME_UNITS_BUTTON);
   \   000001DC   0500A0E3           MOV      R0,#+5
   \   000001E0   800E80E3           ORR      R0,R0,#0x800
   \   000001E4   0C008DE5           STR      R0,[SP, #+12]
   \   000001E8   0000A0E3           MOV      R0,#+0
   \   000001EC   08008DE5           STR      R0,[SP, #+8]
   \   000001F0   0200A0E3           MOV      R0,#+2
   \   000001F4   04008DE5           STR      R0,[SP, #+4]
   \   000001F8   00408DE5           STR      R4,[SP, #+0]
   \   000001FC   2730A0E3           MOV      R3,#+39
   \   00000200   CA20A0E3           MOV      R2,#+202
   \   00000204   DC10A0E3           MOV      R1,#+220
   \   00000208   0500A0E1           MOV      R0,R5
   \   0000020C   ........           BL       BUTTON_CreateEx
   \   00000210   0040A0E1           MOV      R4,R0
    435          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGrayButton);
   \   00000214   0620A0E1           MOV      R2,R6
   \   00000218   0010A0E3           MOV      R1,#+0
   \   0000021C   ........           BL       BUTTON_SetBitmap
    436          	BUTTON_SetText(hBtn, "Rename Units");
   \   00000220   ............       ADRL     R1,`?<Constant "Rename Units">`
   \              ....        
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   ........           BL       BUTTON_SetText
    437          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000230   0720A0E1           MOV      R2,R7
   \   00000234   0010A0E3           MOV      R1,#+0
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   ........           BL       BUTTON_SetTextColor
    438          }
   \   00000240   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   00000244   F081BDE8           POP      {R4-R8,PC}       ;; return
    439          

   \                                 In section .text, align 4, keep-with-next
    440          void AnalogPaint(char input, WM_HWIN hParent)
    441          {
   \                     AnalogPaint:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
    442          	char scratch[30];
    443          	GUI_CONST_STORAGE GUI_BITMAP *pBanner;
    444          
    445          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           LDR      R0,??DataTable55_3
   \   00000018   ........           BL       GUI_DrawBitmap
    446          	switch (input)
   \   0000001C   0450A0E1           MOV      R5,R4
   \   00000020   010055E3           CMP      R5,#+1
   \   00000024   0500000A           BEQ      ??AnalogPaint_2
   \   00000028   0200003A           BCC      ??AnalogPaint_3
   \   0000002C   030055E3           CMP      R5,#+3
   \   00000030   0600000A           BEQ      ??AnalogPaint_4
   \   00000034   0300003A           BCC      ??AnalogPaint_5
    447          	{
    448          	default:
    449          	case 0:	pBanner = &bm0;	break;
   \                     ??AnalogPaint_3:
   \   00000038   ........           LDR      R6,??DataTable55_4
   \   0000003C   040000EA           B        ??AnalogPaint_6
    450          	case 1:	pBanner = &bm1;	break;
   \                     ??AnalogPaint_2:
   \   00000040   ........           LDR      R6,??DataTable55_5
   \   00000044   020000EA           B        ??AnalogPaint_6
    451          	case 2:	pBanner = &bm2;	break;
   \                     ??AnalogPaint_5:
   \   00000048   ........           LDR      R6,??DataTable55_6
   \   0000004C   000000EA           B        ??AnalogPaint_6
    452          	case 3:	pBanner = &bm3;	break;
   \                     ??AnalogPaint_4:
   \   00000050   ........           LDR      R6,??DataTable55_7
    453          	}
    454          	GUI_DrawBitmap(&bmAnalog, 60, 0);
   \                     ??AnalogPaint_6:
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   3C10A0E3           MOV      R1,#+60
   \   0000005C   ........           LDR      R0,??DataTable55_8
   \   00000060   ........           BL       GUI_DrawBitmap
    455          	GUI_DrawBitmap(pBanner, 284, 0);
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   471FA0E3           MOV      R1,#+284
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI_DrawBitmap
    456          
    457          	// Draw left side square for data
    458          	GUI_DrawRoundedRect(BOX_LEFT, BOX_TOP, BOX_RIGHT, BOX_BOTTOM, 5);
   \   00000074   0500A0E3           MOV      R0,#+5
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   FF30A0E3           MOV      R3,#+255
   \   00000080   F520A0E3           MOV      R2,#+245
   \   00000084   3310A0E3           MOV      R1,#+51
   \   00000088   1B00A0E3           MOV      R0,#+27
   \   0000008C   ........           BL       GUI_DrawRoundedRect
    459          	GUI_SetColor(GUI_GRAY);
   \   00000090   ........           LDR      R6,??DataTable55_9  ;; 0x808080
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           BL       GUI_SetColor
    460          	GUI_FillRoundedRect(BOX_LEFT, BOX_TOP, BOX_RIGHT, BOX_BOTTOM, 5);
   \   0000009C   0500A0E3           MOV      R0,#+5
   \   000000A0   00008DE5           STR      R0,[SP, #+0]
   \   000000A4   FF30A0E3           MOV      R3,#+255
   \   000000A8   F520A0E3           MOV      R2,#+245
   \   000000AC   3310A0E3           MOV      R1,#+51
   \   000000B0   1B00A0E3           MOV      R0,#+27
   \   000000B4   ........           BL       GUI_FillRoundedRect
    461          
    462          	GUI_DrawRoundedRect(BOX_LEFT+2, BOX_TOP+2, BOX_RIGHT-2, BOX_BOTTOM - 2, 5);
   \   000000B8   0500A0E3           MOV      R0,#+5
   \   000000BC   00008DE5           STR      R0,[SP, #+0]
   \   000000C0   FD30A0E3           MOV      R3,#+253
   \   000000C4   F320A0E3           MOV      R2,#+243
   \   000000C8   3510A0E3           MOV      R1,#+53
   \   000000CC   1D00A0E3           MOV      R0,#+29
   \   000000D0   ........           BL       GUI_DrawRoundedRect
    463          	GUI_SetColor(GUI_BLACK);
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   ........           BL       GUI_SetColor
    464          	GUI_FillRoundedRect(BOX_LEFT+2, BOX_TOP+2, BOX_RIGHT-2, BOX_BOTTOM - 2, 5);
   \   000000DC   0500A0E3           MOV      R0,#+5
   \   000000E0   00008DE5           STR      R0,[SP, #+0]
   \   000000E4   FD30A0E3           MOV      R3,#+253
   \   000000E8   F320A0E3           MOV      R2,#+243
   \   000000EC   3510A0E3           MOV      R1,#+53
   \   000000F0   1D00A0E3           MOV      R0,#+29
   \   000000F4   ........           BL       GUI_FillRoundedRect
    465          
    466          	GUI_DrawBitmap(GetNavigationArrow(0), 0, 229);
   \   000000F8   E520A0E3           MOV      R2,#+229
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   ........           LDR      R0,??DataTable55_10
   \   00000104   ........           BL       GUI_DrawBitmap
   \   00000108   ........           LDR      R0,??DataTable52_4
   \   0000010C   ........           LDR      R7,??DataTable55_11
   \   00000110   044380E0           ADD      R4,R0,R4, LSL #+6
   \   00000114   9300D4E5           LDRB     R0,[R4, #+147]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0900001A           BNE      ??AnalogPaint_7
    467          
    468          	// If alarm disabled - display disabled and exit!
    469          	if (vehicleData.analogInput[input].enabled == false)
    470          	{
    471          		GUI_SetFont(&GUI_Font24_ASCII);
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   ........           BL       GUI_SetFont
    472          		GUI_SetColor(GUI_GRAY);
   \   00000128   0600A0E1           MOV      R0,R6
   \   0000012C   ........           BL       GUI_SetColor
    473          		GUI_DispStringHCenterAt("Input Disabled", BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + 4);
   \   00000130   3720A0E3           MOV      R2,#+55
   \   00000134   8810A0E3           MOV      R1,#+136
   \   00000138   ............       ADRL     R0,`?<Constant "Input Disabled">`
   \              ....        
   \   00000140   ........           BL       GUI_DispStringHCenterAt
    474          		return;
   \   00000144   230100EA           B        ??AnalogPaint_8
    475          	}
    476          
    477          	// draw 3 gray lines for field seperators
    478          	GUI_SetPenSize(3);
   \                     ??AnalogPaint_7:
   \   00000148   0300A0E3           MOV      R0,#+3
   \   0000014C   ........           BL       GUI_SetPenSize
    479          	GUI_SetColor(GUI_GRAY);
   \   00000150   0600A0E1           MOV      R0,R6
   \   00000154   ........           BL       GUI_SetColor
    480          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE1, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE1);
   \   00000158   5130A0E3           MOV      R3,#+81
   \   0000015C   E620A0E3           MOV      R2,#+230
   \   00000160   5110A0E3           MOV      R1,#+81
   \   00000164   2A00A0E3           MOV      R0,#+42
   \   00000168   ........           BL       GUI_DrawLine
    481          
    482          	GUI_SetPenSize(2);
   \   0000016C   0200A0E3           MOV      R0,#+2
   \   00000170   ........           BL       GUI_SetPenSize
    483          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE2, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE2);
   \   00000174   7930A0E3           MOV      R3,#+121
   \   00000178   E620A0E3           MOV      R2,#+230
   \   0000017C   7910A0E3           MOV      R1,#+121
   \   00000180   2A00A0E3           MOV      R0,#+42
   \   00000184   ........           BL       GUI_DrawLine
    484          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE3, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE3);
   \   00000188   9730A0E3           MOV      R3,#+151
   \   0000018C   E620A0E3           MOV      R2,#+230
   \   00000190   9710A0E3           MOV      R1,#+151
   \   00000194   2A00A0E3           MOV      R0,#+42
   \   00000198   ........           BL       GUI_DrawLine
    485          
    486          	// Draw text:
    487          	// Draw alarm trigger state
    488          	GUI_SetFont(&GUI_Font24_ASCII);
   \   0000019C   0700A0E1           MOV      R0,R7
   \   000001A0   ........           BL       GUI_SetFont
    489          	GUI_SetColor(GUI_RED);
   \   000001A4   FF00A0E3           MOV      R0,#+255
   \   000001A8   ........           BL       GUI_SetColor
    490          
    491          //		upper = none, lower = none, text = "No Alarm Set"
    492          //		upper = U, lower = L, text = "L < Alarm > U"
    493          //		upper = U, lower = none, text = "Alarm > U"
    494          //		upper = none, lower = L, text = "L < Alarm"
    495          
    496          	if (OFF == vehicleData.analogInput[input].lowerAlarmTriggerComparison && OFF == vehicleData.analogInput[input].upperAlarmTriggerComparison)
   \   000001AC   9400D4E5           LDRB     R0,[R4, #+148]
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   9510D405           LDRBEQ   R1,[R4, #+149]
   \   000001B8   00005103           CMPEQ    R1,#+0
   \   000001BC   0500001A           BNE      ??AnalogPaint_9
    497          		strcpy(scratch, "No Alarm Set");
   \   000001C0   0D20A0E3           MOV      R2,#+13
   \   000001C4   ............       ADRL     R1,`?<Constant "No Alarm Set">`
   \              ....        
   \   000001CC   08008DE2           ADD      R0,SP,#+8
   \   000001D0   ........           BL       __aeabi_memcpy4
   \   000001D4   1A0000EA           B        ??AnalogPaint_10
    498          	else {
    499          		scratch[0] = '\0';
   \                     ??AnalogPaint_9:
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0820CDE5           STRB     R2,[SP, #+8]
    500          		if (BELOW == vehicleData.analogInput[input].lowerAlarmTriggerComparison)
   \   000001E0   020050E3           CMP      R0,#+2
   \   000001E4   0700001A           BNE      ??AnalogPaint_11
    501          			sprintf(scratch, "%.2f < ", vehicleData.analogInput[input].lowerAlarmTriggerLevel);
   \   000001E8   980094E5           LDR      R0,[R4, #+152]
   \   000001EC   ........           BL       __aeabi_f2d
   \   000001F0   0020A0E1           MOV      R2,R0
   \   000001F4   0130A0E1           MOV      R3,R1
   \   000001F8   ............       ADRL     R1,`?<Constant "%.2f < ">`
   \              ....        
   \   00000200   08008DE2           ADD      R0,SP,#+8
   \   00000204   ........           BL       sprintf
    502          		strcat(scratch, "Alarm");
   \                     ??AnalogPaint_11:
   \   00000208   ............       ADRL     R1,`?<Constant "Alarm">`
   \              ....        
   \   00000210   08008DE2           ADD      R0,SP,#+8
   \   00000214   ........           BL       strcat
    503          		if (ABOVE == vehicleData.analogInput[input].upperAlarmTriggerComparison)
   \   00000218   9500D4E5           LDRB     R0,[R4, #+149]
   \   0000021C   010050E3           CMP      R0,#+1
   \   00000220   0700001A           BNE      ??AnalogPaint_10
    504          			sprintf(scratch, "%s > %.2f", scratch, vehicleData.analogInput[input].upperAlarmTriggerLevel);
   \   00000224   9C0094E5           LDR      R0,[R4, #+156]
   \   00000228   ........           BL       __aeabi_f2d
   \   0000022C   03008DE8           STM      SP,{R0,R1}
   \   00000230   08208DE2           ADD      R2,SP,#+8
   \   00000234   ............       ADRL     R1,`?<Constant "%s > %.2f">`
   \              ....        
   \   0000023C   08008DE2           ADD      R0,SP,#+8
   \   00000240   ........           BL       sprintf
    505          	} // else
    506          
    507          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + 4);
   \                     ??AnalogPaint_10:
   \   00000244   3720A0E3           MOV      R2,#+55
   \   00000248   8810A0E3           MOV      R1,#+136
   \   0000024C   08008DE2           ADD      R0,SP,#+8
   \   00000250   ........           BL       GUI_DispStringHCenterAt
    508          
    509          	// Actual Voltage reading (live data)
    510          	GUI_SetFont(&GUI_Font32_ASCII);
   \   00000254   ........           LDR      R0,??DataTable55_13
   \   00000258   ........           BL       GUI_SetFont
    511          	GUI_SetColor(GUI_GREEN);
   \   0000025C   FF0CA0E3           MOV      R0,#+65280
   \   00000260   ........           BL       GUI_SetColor
    512          	sprintf(scratch, "Volts: %0.2f", GetAnalogInput(RAW, input));
   \   00000264   030055E3           CMP      R5,#+3
   \   00000268   05F18F90           ADDLS    PC,PC,R5, LSL #+2
   \                     ??AnalogPaint_0:
   \   0000026C   0E00008A           BHI      ??AnalogPaint_12
   \   00000270   0B0000EA           B        ??AnalogPaint_13
   \   00000274   080000EA           B        ??AnalogPaint_14
   \   00000278   050000EA           B        ??AnalogPaint_15
   \   0000027C   FFFFFFEA           B        ??AnalogPaint_16
   \                     ??AnalogPaint_16:
   \   00000280   3910A0E3           MOV      R1,#+57
   \                     ??AnalogPaint_17:
   \   00000284   0D00A0E1           MOV      R0,SP
   \   00000288   ........           BL       GetRawValue
   \   0000028C   00009DE5           LDR      R0,[SP, #+0]
   \   00000290   060000EA           B        ??AnalogPaint_18
   \                     ??AnalogPaint_15:
   \   00000294   3810A0E3           MOV      R1,#+56
   \   00000298   F9FFFFEA           B        ??AnalogPaint_17
   \                     ??AnalogPaint_14:
   \   0000029C   3710A0E3           MOV      R1,#+55
   \   000002A0   F7FFFFEA           B        ??AnalogPaint_17
   \                     ??AnalogPaint_13:
   \   000002A4   3610A0E3           MOV      R1,#+54
   \   000002A8   F5FFFFEA           B        ??AnalogPaint_17
   \                     ??AnalogPaint_12:
   \   000002AC   0000A0E3           MOV      R0,#+0
   \                     ??AnalogPaint_18:
   \   000002B0   ........           BL       __aeabi_f2d
   \   000002B4   0020A0E1           MOV      R2,R0
   \   000002B8   0130A0E1           MOV      R3,R1
   \   000002BC   ............       ADRL     R1,`?<Constant "Volts: %0.2f">`
   \              ....        
   \   000002C4   08008DE2           ADD      R0,SP,#+8
   \   000002C8   ........           BL       sprintf
    513          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + LINE1 + 4);
   \   000002CC   5520A0E3           MOV      R2,#+85
   \   000002D0   8810A0E3           MOV      R1,#+136
   \   000002D4   08008DE2           ADD      R0,SP,#+8
   \   000002D8   ........           BL       GUI_DispStringHCenterAt
    514          
    515          	// Voltage range selected
    516          	GUI_SetFont(&GUI_Font20_ASCII);
   \   000002DC   ........           LDR      R5,??DataTable55_14
   \   000002E0   0500A0E1           MOV      R0,R5
   \   000002E4   ........           BL       GUI_SetFont
    517          	GUI_SetColor(GUI_WHITE);
   \   000002E8   FF64E0E3           MVN      R6,#-16777216
   \   000002EC   0600A0E1           MOV      R0,R6
   \   000002F0   ........           BL       GUI_SetColor
    518          	sprintf(scratch, "%dV Range Selected", vehicleData.analogInput[input].inputRange);
   \   000002F4   A020D4E5           LDRB     R2,[R4, #+160]
   \   000002F8   ............       ADRL     R1,`?<Constant "%dV Range Selected">`
   \              ....        
   \   00000300   08008DE2           ADD      R0,SP,#+8
   \   00000304   ........           BL       sprintf
    519          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + LINE2 + 6);
   \   00000308   7F20A0E3           MOV      R2,#+127
   \   0000030C   8810A0E3           MOV      R1,#+136
   \   00000310   08008DE2           ADD      R0,SP,#+8
   \   00000314   ........           BL       GUI_DispStringHCenterAt
    520          
    521          	// Low and high graph points text
    522          	GUI_SetColor(GUI_WHITE);
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   ........           BL       GUI_SetColor
    523          	GUI_DispStringAt("Low:", BOX_LEFT + LINE_GAP, BOX_TOP + GEAR_TABLE_TOP);
   \   00000320   ............       ADRL     R6,`?<Constant "Low:">`
   \              ....        
   \   00000328   9E20A0E3           MOV      R2,#+158
   \   0000032C   2A10A0E3           MOV      R1,#+42
   \   00000330   0600A0E1           MOV      R0,R6
   \   00000334   ........           BL       GUI_DispStringAt
    524          	GUI_DispStringAt("High:", BOX_LEFT + LINE_GAP, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   00000338   ............       ADRL     R7,`?<Constant "High:">`
   \              ....        
   \   00000340   B720A0E3           MOV      R2,#+183
   \   00000344   2A10A0E3           MOV      R1,#+42
   \   00000348   0700A0E1           MOV      R0,R7
   \   0000034C   ........           BL       GUI_DispStringAt
    525          	GUI_DispStringAt("Low:", BOX_LEFT + THIRD_COL_GAP, BOX_TOP + GEAR_TABLE_TOP);
   \   00000350   9E20A0E3           MOV      R2,#+158
   \   00000354   8F10A0E3           MOV      R1,#+143
   \   00000358   0600A0E1           MOV      R0,R6
   \   0000035C   ........           BL       GUI_DispStringAt
    526          	GUI_DispStringAt("High:", BOX_LEFT + THIRD_COL_GAP, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   00000360   B720A0E3           MOV      R2,#+183
   \   00000364   8F10A0E3           MOV      R1,#+143
   \   00000368   0700A0E1           MOV      R0,R7
   \   0000036C   ........           BL       GUI_DispStringAt
    527          
    528          	// Draw graph point data values
    529          	GUI_SetColor(GUI_GREEN);
   \   00000370   FF0CA0E3           MOV      R0,#+65280
   \   00000374   ........           BL       GUI_SetColor
    530          	sprintf(scratch, "%.2f", vehicleData.analogInput[input].lowVoltagePoint);
   \   00000378   ............       ADRL     R6,`?<Constant "%.2f">`
   \              ....        
   \   00000380   A40094E5           LDR      R0,[R4, #+164]
   \   00000384   ........           BL       __aeabi_f2d
   \   00000388   0020A0E1           MOV      R2,R0
   \   0000038C   0130A0E1           MOV      R3,R1
   \   00000390   0610A0E1           MOV      R1,R6
   \   00000394   08008DE2           ADD      R0,SP,#+8
   \   00000398   ........           BL       sprintf
    531          	GUI_DispStringAt(scratch, BOX_LEFT + SECOND_COL_GAP, BOX_TOP + GEAR_TABLE_TOP);
   \   0000039C   9E20A0E3           MOV      R2,#+158
   \   000003A0   5910A0E3           MOV      R1,#+89
   \   000003A4   08008DE2           ADD      R0,SP,#+8
   \   000003A8   ........           BL       GUI_DispStringAt
    532          	sprintf(scratch, "%.2f", vehicleData.analogInput[input].highVoltagePoint);
   \   000003AC   A80094E5           LDR      R0,[R4, #+168]
   \   000003B0   ........           BL       __aeabi_f2d
   \   000003B4   0020A0E1           MOV      R2,R0
   \   000003B8   0130A0E1           MOV      R3,R1
   \   000003BC   0610A0E1           MOV      R1,R6
   \   000003C0   08008DE2           ADD      R0,SP,#+8
   \   000003C4   ........           BL       sprintf
    533          	GUI_DispStringAt(scratch, BOX_LEFT + SECOND_COL_GAP, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   000003C8   B720A0E3           MOV      R2,#+183
   \   000003CC   5910A0E3           MOV      R1,#+89
   \   000003D0   08008DE2           ADD      R0,SP,#+8
   \   000003D4   ........           BL       GUI_DispStringAt
    534          //	sprintf(scratch, "%.2f", vehicleData.analogInput[input].lowValuePoint);
    535          	sprintf(scratch, "%d", (int)vehicleData.analogInput[input].lowValuePoint);
   \   000003D8   ........           ADR      R6,??DataTable51  ;; 0x25, 0x64, 0x00, 0x00
   \   000003DC   AC0094E5           LDR      R0,[R4, #+172]
   \   000003E0   ........           BL       __aeabi_f2iz
   \   000003E4   0020A0E1           MOV      R2,R0
   \   000003E8   0610A0E1           MOV      R1,R6
   \   000003EC   08008DE2           ADD      R0,SP,#+8
   \   000003F0   ........           BL       sprintf
    536          	GUI_DispStringAt(scratch, FORTH_COL_POS, BOX_TOP + GEAR_TABLE_TOP);
   \   000003F4   9E20A0E3           MOV      R2,#+158
   \   000003F8   C110A0E3           MOV      R1,#+193
   \   000003FC   08008DE2           ADD      R0,SP,#+8
   \   00000400   ........           BL       GUI_DispStringAt
    537          //	sprintf(scratch, "%.2f", vehicleData.analogInput[input].highValuePoint);
    538          	sprintf(scratch, "%d", (int)vehicleData.analogInput[input].highValuePoint);
   \   00000404   B00094E5           LDR      R0,[R4, #+176]
   \   00000408   ........           BL       __aeabi_f2iz
   \   0000040C   0020A0E1           MOV      R2,R0
   \   00000410   0610A0E1           MOV      R1,R6
   \   00000414   08008DE2           ADD      R0,SP,#+8
   \   00000418   ........           BL       sprintf
    539          	GUI_DispStringAt(scratch, FORTH_COL_POS, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   0000041C   B720A0E3           MOV      R2,#+183
   \   00000420   C110A0E3           MOV      R1,#+193
   \   00000424   08008DE2           ADD      R0,SP,#+8
   \   00000428   ........           BL       GUI_DispStringAt
    540          
    541          	// Filtering level selected
    542          	GUI_SetFont(&GUI_Font20_ASCII);
   \   0000042C   0500A0E1           MOV      R0,R5
   \   00000430   ........           BL       GUI_SetFont
    543          	GUI_SetColor(GUI_LIGHTBLUE);
   \   00000434   ........           LDR      R0,??DataTable55_15  ;; 0xff8080
   \   00000438   ........           BL       GUI_SetColor
    544          	switch (vehicleData.analogInput[input].enabled) {
   \   0000043C   9300D4E5           LDRB     R0,[R4, #+147]
   \   00000440   010040E2           SUB      R0,R0,#+1
   \   00000444   320050E3           CMP      R0,#+50
   \   00000448   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??AnalogPaint_1:
   \   0000044C   4700008A           BHI      ??AnalogPaint_19
   \   00000450   310000EA           B        ??AnalogPaint_20
   \   00000454   450000EA           B        ??AnalogPaint_19
   \   00000458   440000EA           B        ??AnalogPaint_19
   \   0000045C   430000EA           B        ??AnalogPaint_19
   \   00000460   300000EA           B        ??AnalogPaint_21
   \   00000464   410000EA           B        ??AnalogPaint_19
   \   00000468   400000EA           B        ??AnalogPaint_19
   \   0000046C   3F0000EA           B        ??AnalogPaint_19
   \   00000470   3E0000EA           B        ??AnalogPaint_19
   \   00000474   3D0000EA           B        ??AnalogPaint_19
   \   00000478   2F0000EA           B        ??AnalogPaint_22
   \   0000047C   3B0000EA           B        ??AnalogPaint_19
   \   00000480   3A0000EA           B        ??AnalogPaint_19
   \   00000484   390000EA           B        ??AnalogPaint_19
   \   00000488   380000EA           B        ??AnalogPaint_19
   \   0000048C   370000EA           B        ??AnalogPaint_19
   \   00000490   360000EA           B        ??AnalogPaint_19
   \   00000494   350000EA           B        ??AnalogPaint_19
   \   00000498   340000EA           B        ??AnalogPaint_19
   \   0000049C   330000EA           B        ??AnalogPaint_19
   \   000004A0   290000EA           B        ??AnalogPaint_23
   \   000004A4   310000EA           B        ??AnalogPaint_19
   \   000004A8   300000EA           B        ??AnalogPaint_19
   \   000004AC   2F0000EA           B        ??AnalogPaint_19
   \   000004B0   2E0000EA           B        ??AnalogPaint_19
   \   000004B4   2D0000EA           B        ??AnalogPaint_19
   \   000004B8   2C0000EA           B        ??AnalogPaint_19
   \   000004BC   2B0000EA           B        ??AnalogPaint_19
   \   000004C0   2A0000EA           B        ??AnalogPaint_19
   \   000004C4   290000EA           B        ??AnalogPaint_19
   \   000004C8   280000EA           B        ??AnalogPaint_19
   \   000004CC   270000EA           B        ??AnalogPaint_19
   \   000004D0   260000EA           B        ??AnalogPaint_19
   \   000004D4   250000EA           B        ??AnalogPaint_19
   \   000004D8   240000EA           B        ??AnalogPaint_19
   \   000004DC   230000EA           B        ??AnalogPaint_19
   \   000004E0   220000EA           B        ??AnalogPaint_19
   \   000004E4   210000EA           B        ??AnalogPaint_19
   \   000004E8   200000EA           B        ??AnalogPaint_19
   \   000004EC   1F0000EA           B        ??AnalogPaint_19
   \   000004F0   1E0000EA           B        ??AnalogPaint_19
   \   000004F4   1D0000EA           B        ??AnalogPaint_19
   \   000004F8   1C0000EA           B        ??AnalogPaint_19
   \   000004FC   1B0000EA           B        ??AnalogPaint_19
   \   00000500   1A0000EA           B        ??AnalogPaint_19
   \   00000504   190000EA           B        ??AnalogPaint_19
   \   00000508   180000EA           B        ??AnalogPaint_19
   \   0000050C   170000EA           B        ??AnalogPaint_19
   \   00000510   160000EA           B        ??AnalogPaint_19
   \   00000514   150000EA           B        ??AnalogPaint_19
   \   00000518   0F0000EA           B        ??AnalogPaint_24
    545          		case FILTER_NONE:
    546          			strcpy (scratch, "NO");
   \                     ??AnalogPaint_20:
   \   0000051C   0320A0E3           MOV      R2,#+3
   \   00000520   ........           ADR      R1,??DataTable52_1  ;; 0x4E, 0x4F, 0x00, 0x00
   \   00000524   0F0000EA           B        ??AnalogPaint_25
    547          			break;
    548          		case FILTER_LOW:
    549          			strcpy (scratch, "LOW");
   \                     ??AnalogPaint_21:
   \   00000528   ........           ADR      R0,??DataTable52_2  ;; "LOW"
   \   0000052C   002090E5           LDR      R2,[R0, #0]
   \   00000530   08108DE2           ADD      R1,SP,#+8
   \   00000534   002081E5           STR      R2,[R1, #+0]
    550          		  break;
   \   00000538   0C0000EA           B        ??AnalogPaint_19
    551          		case FILTER_MEDIUM:
    552          			strcpy (scratch, "MEDIUM");
   \                     ??AnalogPaint_22:
   \   0000053C   0720A0E3           MOV      R2,#+7
   \   00000540   ............       ADRL     R1,`?<Constant "MEDIUM">`
   \              ....        
   \   00000548   060000EA           B        ??AnalogPaint_25
    553          		  break;
    554          		case FILTER_HIGH:
    555          			strcpy (scratch, "HIGH");
   \                     ??AnalogPaint_23:
   \   0000054C   0520A0E3           MOV      R2,#+5
   \   00000550   ............       ADRL     R1,`?<Constant "HIGH">`
   \              ....        
   \   00000558   020000EA           B        ??AnalogPaint_25
    556          			break;
    557          		case FILTER_VERY_HIGH:
    558          			strcpy (scratch, "VERY HIGH");
   \                     ??AnalogPaint_24:
   \   0000055C   0A20A0E3           MOV      R2,#+10
   \   00000560   ............       ADRL     R1,`?<Constant "VERY HIGH">`
   \              ....        
   \                     ??AnalogPaint_25:
   \   00000568   08008DE2           ADD      R0,SP,#+8
   \   0000056C   ........           BL       __aeabi_memcpy4
    559          			break;
    560          	} // switch
    561          	strcat(scratch, " Filtering");
   \                     ??AnalogPaint_19:
   \   00000570   ............       ADRL     R1,`?<Constant " Filtering">`
   \              ....        
   \   00000578   08008DE2           ADD      R0,SP,#+8
   \   0000057C   ........           BL       strcat
    562          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), FILTER_VPOS);
   \   00000580   D020A0E3           MOV      R2,#+208
   \   00000584   8810A0E3           MOV      R1,#+136
   \   00000588   08008DE2           ADD      R0,SP,#+8
   \   0000058C   ........           BL       GUI_DispStringHCenterAt
    563          	
    564          	// Draw LED config states
    565          	GUI_SetColor(GUI_RED);
   \   00000590   FF00A0E3           MOV      R0,#+255
   \   00000594   ........           BL       GUI_SetColor
    566          	if (vehicleData.analogInput[input].EnableLED1)
   \   00000598   B400D4E5           LDRB     R0,[R4, #+180]
   \   0000059C   000050E3           CMP      R0,#+0
   \   000005A0   0400000A           BEQ      ??AnalogPaint_26
    567          		GUI_DispStringAt("LED1", LED1_POS, LED_VPOS);
   \   000005A4   E620A0E3           MOV      R2,#+230
   \   000005A8   3410A0E3           MOV      R1,#+52
   \   000005AC   ............       ADRL     R0,`?<Constant "LED1">`
   \              ....        
   \   000005B4   ........           BL       GUI_DispStringAt
    568          	if (vehicleData.analogInput[input].EnableLED2)
   \                     ??AnalogPaint_26:
   \   000005B8   B500D4E5           LDRB     R0,[R4, #+181]
   \   000005BC   000050E3           CMP      R0,#+0
   \   000005C0   0400000A           BEQ      ??AnalogPaint_8
    569          		GUI_DispStringAt("LED2", LED2_POS, LED_VPOS);
   \   000005C4   E620A0E3           MOV      R2,#+230
   \   000005C8   AF10A0E3           MOV      R1,#+175
   \   000005CC   ............       ADRL     R0,`?<Constant "LED2">`
   \              ....        
   \   000005D4   ........           BL       GUI_DispStringAt
   \                     ??AnalogPaint_8:
   \   000005D8   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000005DC   F080BDE8           POP      {R4-R7,PC}       ;; return
    570          }
    571          
    572          

   \                                 In section .text, align 4, keep-with-next
    573          void DisplayDigital(char input, WM_HWIN hParent)
    574          {
   \                     DisplayDigital:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    575          	BUTTON_Handle hBtn;
    576          
    577          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 48, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, ENABLE_BUTTON);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   800E80E3           ORR      R0,R0,#0x800
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   08008DE5           STR      R0,[SP, #+8]
   \   00000020   0250A0E3           MOV      R5,#+2
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   0140A0E1           MOV      R4,R1
   \   0000002C   405F85E3           ORR      R5,R5,#0x100
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   00408DE5           STR      R4,[SP, #+0]
   \   00000038   2730A0E3           MOV      R3,#+39
   \   0000003C   CA20A0E3           MOV      R2,#+202
   \   00000040   3010A0E3           MOV      R1,#+48
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       BUTTON_CreateEx
   \   0000004C   0070A0E1           MOV      R7,R0
    578          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   00000050   ........           LDR      R2,??DataTable53
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ........           BL       BUTTON_SetBitmap
    579          	SetDigitalEnableButtonText(hBtn, input);
   \   0000005C   ........           LDR      R1,??DataTable52_4
   \   00000060   2F00A0E3           MOV      R0,#+47
   \   00000064   801601E1           SMLABB   R1,R0,R6,R1
   \   00000068   043086E2           ADD      R3,R6,#+4
   \   0000006C   A301D1E5           LDRB     R0,[R1, #+419]
   \   00000070   ............       ADRL     R1,`?<Constant "%s Digital %d">`
   \              ....        
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   ............       ADRLNE   R2,`?<Constant "Disable">`
   \              ....        
   \   00000084   ............       ADRLEQ   R2,`?<Constant "Enable">`
   \              ....        
   \   0000008C   10008DE2           ADD      R0,SP,#+16
   \   00000090   ........           BL       sprintf
   \   00000094   10108DE2           ADD      R1,SP,#+16
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           BL       BUTTON_SetText
    580          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           BL       BUTTON_SetTextColor
    581          
    582          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 91, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_ALARM_BUTTON);
   \   000000B0   0300A0E3           MOV      R0,#+3
   \   000000B4   800E80E3           ORR      R0,R0,#0x800
   \   000000B8   0C008DE5           STR      R0,[SP, #+12]
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   08008DE5           STR      R0,[SP, #+8]
   \   000000C4   0200A0E3           MOV      R0,#+2
   \   000000C8   04008DE5           STR      R0,[SP, #+4]
   \   000000CC   00408DE5           STR      R4,[SP, #+0]
   \   000000D0   2730A0E3           MOV      R3,#+39
   \   000000D4   CA20A0E3           MOV      R2,#+202
   \   000000D8   5B10A0E3           MOV      R1,#+91
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           BL       BUTTON_CreateEx
   \   000000E4   0060A0E1           MOV      R6,R0
    583          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   000000E8   ........           LDR      R2,??DataTable55
   \   000000EC   0010A0E3           MOV      R1,#+0
   \   000000F0   ........           BL       BUTTON_SetBitmap
    584          	BUTTON_SetText(hBtn, "Edit Alarm");
   \   000000F4   ............       ADRL     R1,`?<Constant "Edit Alarm">`
   \              ....        
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   ........           BL       BUTTON_SetText
    585          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110   ........           BL       BUTTON_SetTextColor
    586          
    587          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 134, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, RENAME_INPUT_BUTTON);
   \   00000114   0400A0E3           MOV      R0,#+4
   \   00000118   800E80E3           ORR      R0,R0,#0x800
   \   0000011C   0C008DE5           STR      R0,[SP, #+12]
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   08008DE5           STR      R0,[SP, #+8]
   \   00000128   0200A0E3           MOV      R0,#+2
   \   0000012C   04008DE5           STR      R0,[SP, #+4]
   \   00000130   00408DE5           STR      R4,[SP, #+0]
   \   00000134   2730A0E3           MOV      R3,#+39
   \   00000138   CA20A0E3           MOV      R2,#+202
   \   0000013C   8610A0E3           MOV      R1,#+134
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           BL       BUTTON_CreateEx
    588          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGrayButton);
   \   00000148   ........           LDR      R6,??DataTable55_1
   \   0000014C   0080A0E1           MOV      R8,R0
   \   00000150   0620A0E1           MOV      R2,R6
   \   00000154   0010A0E3           MOV      R1,#+0
   \   00000158   ........           BL       BUTTON_SetBitmap
    589          	BUTTON_SetText(hBtn, "Rename Input");
   \   0000015C   ............       ADRL     R1,`?<Constant "Rename Input">`
   \              ....        
   \   00000164   0800A0E1           MOV      R0,R8
   \   00000168   ........           BL       BUTTON_SetText
    590          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   0000016C   FF74E0E3           MVN      R7,#-16777216
   \   00000170   0720A0E1           MOV      R2,R7
   \   00000174   0010A0E3           MOV      R1,#+0
   \   00000178   0800A0E1           MOV      R0,R8
   \   0000017C   ........           BL       BUTTON_SetTextColor
    591          
    592          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 177, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, RENAME_HIGH_BUTTON);
   \   00000180   0600A0E3           MOV      R0,#+6
   \   00000184   800E80E3           ORR      R0,R0,#0x800
   \   00000188   0C008DE5           STR      R0,[SP, #+12]
   \   0000018C   0000A0E3           MOV      R0,#+0
   \   00000190   08008DE5           STR      R0,[SP, #+8]
   \   00000194   0200A0E3           MOV      R0,#+2
   \   00000198   04008DE5           STR      R0,[SP, #+4]
   \   0000019C   00408DE5           STR      R4,[SP, #+0]
   \   000001A0   2730A0E3           MOV      R3,#+39
   \   000001A4   CA20A0E3           MOV      R2,#+202
   \   000001A8   B110A0E3           MOV      R1,#+177
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   ........           BL       BUTTON_CreateEx
   \   000001B4   0080A0E1           MOV      R8,R0
    593          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGrayButton);
   \   000001B8   0620A0E1           MOV      R2,R6
   \   000001BC   0010A0E3           MOV      R1,#+0
   \   000001C0   ........           BL       BUTTON_SetBitmap
    594          	BUTTON_SetText(hBtn, "Rename High");
   \   000001C4   ............       ADRL     R1,`?<Constant "Rename High">`
   \              ....        
   \   000001CC   0800A0E1           MOV      R0,R8
   \   000001D0   ........           BL       BUTTON_SetText
    595          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000001D4   0720A0E1           MOV      R2,R7
   \   000001D8   0010A0E3           MOV      R1,#+0
   \   000001DC   0800A0E1           MOV      R0,R8
   \   000001E0   ........           BL       BUTTON_SetTextColor
    596          
    597          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, 220, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, RENAME_LOW_BUTTON);
   \   000001E4   0700A0E3           MOV      R0,#+7
   \   000001E8   800E80E3           ORR      R0,R0,#0x800
   \   000001EC   0C008DE5           STR      R0,[SP, #+12]
   \   000001F0   0000A0E3           MOV      R0,#+0
   \   000001F4   08008DE5           STR      R0,[SP, #+8]
   \   000001F8   0200A0E3           MOV      R0,#+2
   \   000001FC   04008DE5           STR      R0,[SP, #+4]
   \   00000200   00408DE5           STR      R4,[SP, #+0]
   \   00000204   2730A0E3           MOV      R3,#+39
   \   00000208   CA20A0E3           MOV      R2,#+202
   \   0000020C   DC10A0E3           MOV      R1,#+220
   \   00000210   0500A0E1           MOV      R0,R5
   \   00000214   ........           BL       BUTTON_CreateEx
   \   00000218   0040A0E1           MOV      R4,R0
    598          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGrayButton);
   \   0000021C   0620A0E1           MOV      R2,R6
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   ........           BL       BUTTON_SetBitmap
    599          	BUTTON_SetText(hBtn, "Rename Low");
   \   00000228   ............       ADRL     R1,`?<Constant "Rename Low">`
   \              ....        
   \   00000230   0400A0E1           MOV      R0,R4
   \   00000234   ........           BL       BUTTON_SetText
    600          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000238   0720A0E1           MOV      R2,R7
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   ........           BL       BUTTON_SetTextColor
    601          }
   \   00000248   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   0000024C   F081BDE8           POP      {R4-R8,PC}       ;; return
    602          

   \                                 In section .text, align 4, keep-with-next
    603          void DigitalPaint(char input, WM_HWIN hParent)
    604          {
   \                     DigitalPaint:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
    605          	char scratch[30];
    606          	GUI_CONST_STORAGE GUI_BITMAP *pBanner;
    607          
    608          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           LDR      R0,??DataTable55_3
   \   00000018   ........           BL       GUI_DrawBitmap
    609          	if (input == 0)
   \   0000001C   000054E3           CMP      R4,#+0
    610          		pBanner = &bm4;
   \   00000020   ........           LDREQ    R5,??DataTable55_16
    611          	else pBanner = &bm5;
   \   00000024   ........           LDRNE    R5,??DataTable55_17
    612          
    613          	GUI_DrawBitmap(&bmDigital, 60, 1);
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable55_18
   \   00000034   ........           BL       GUI_DrawBitmap
    614          	GUI_DrawBitmap(pBanner, 284, 1);
   \   00000038   0120A0E3           MOV      R2,#+1
   \   0000003C   471FA0E3           MOV      R1,#+284
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       GUI_DrawBitmap
    615          
    616          	// Draw left side square for data
    617          	GUI_DrawRoundedRect(BOX_LEFT, BOX_TOP, BOX_RIGHT, BOX_BOTTOM, 5);
   \   00000048   0500A0E3           MOV      R0,#+5
   \   0000004C   00008DE5           STR      R0,[SP, #+0]
   \   00000050   FF30A0E3           MOV      R3,#+255
   \   00000054   F520A0E3           MOV      R2,#+245
   \   00000058   3310A0E3           MOV      R1,#+51
   \   0000005C   1B00A0E3           MOV      R0,#+27
   \   00000060   ........           BL       GUI_DrawRoundedRect
    618          	GUI_SetColor(GUI_GRAY);
   \   00000064   ........           LDR      R5,??DataTable55_9  ;; 0x808080
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       GUI_SetColor
    619          	GUI_FillRoundedRect(BOX_LEFT, BOX_TOP, BOX_RIGHT, BOX_BOTTOM, 5);
   \   00000070   0500A0E3           MOV      R0,#+5
   \   00000074   00008DE5           STR      R0,[SP, #+0]
   \   00000078   FF30A0E3           MOV      R3,#+255
   \   0000007C   F520A0E3           MOV      R2,#+245
   \   00000080   3310A0E3           MOV      R1,#+51
   \   00000084   1B00A0E3           MOV      R0,#+27
   \   00000088   ........           BL       GUI_FillRoundedRect
    620          
    621          	GUI_DrawRoundedRect(BOX_LEFT+2, BOX_TOP+2, BOX_RIGHT-2, BOX_BOTTOM - 2, 5);
   \   0000008C   0500A0E3           MOV      R0,#+5
   \   00000090   00008DE5           STR      R0,[SP, #+0]
   \   00000094   FD30A0E3           MOV      R3,#+253
   \   00000098   F320A0E3           MOV      R2,#+243
   \   0000009C   3510A0E3           MOV      R1,#+53
   \   000000A0   1D00A0E3           MOV      R0,#+29
   \   000000A4   ........           BL       GUI_DrawRoundedRect
    622          	GUI_SetColor(GUI_BLACK);
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   ........           BL       GUI_SetColor
    623          	GUI_FillRoundedRect(BOX_LEFT+2, BOX_TOP+2, BOX_RIGHT-2, BOX_BOTTOM - 2, 5);
   \   000000B0   0500A0E3           MOV      R0,#+5
   \   000000B4   00008DE5           STR      R0,[SP, #+0]
   \   000000B8   FD30A0E3           MOV      R3,#+253
   \   000000BC   F320A0E3           MOV      R2,#+243
   \   000000C0   3510A0E3           MOV      R1,#+53
   \   000000C4   1D00A0E3           MOV      R0,#+29
   \   000000C8   ........           BL       GUI_FillRoundedRect
    624          
    625          	GUI_DrawBitmap(GetNavigationArrow(0), 0, 229);
   \   000000CC   E520A0E3           MOV      R2,#+229
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   ........           LDR      R0,??DataTable55_10
   \   000000D8   ........           BL       GUI_DrawBitmap
    626          
    627          	// If alarm disabled - display disabled and exit!
    628          	if (vehicleData.digitalInput[input].enabled == false)
   \   000000DC   ........           LDR      R7,??DataTable55_19
   \   000000E0   2F60A0E3           MOV      R6,#+47
   \   000000E4   867408E1           SMLABB   R8,R6,R4,R7
   \   000000E8   ........           LDR      R9,??DataTable55_11
   \   000000EC   A301D8E5           LDRB     R0,[R8, #+419]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0900001A           BNE      ??DigitalPaint_0
    629          	{
    630          		GUI_SetFont(&GUI_Font24_ASCII);
   \   000000F8   0900A0E1           MOV      R0,R9
   \   000000FC   ........           BL       GUI_SetFont
    631          		GUI_SetColor(GUI_GRAY);
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   ........           BL       GUI_SetColor
    632          		GUI_DispStringHCenterAt("Input Disabled", BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + 4);
   \   00000108   3720A0E3           MOV      R2,#+55
   \   0000010C   8810A0E3           MOV      R1,#+136
   \   00000110   ............       ADRL     R0,`?<Constant "Input Disabled">`
   \              ....        
   \   00000118   ........           BL       GUI_DispStringHCenterAt
    633          		return;
   \   0000011C   780000EA           B        ??DigitalPaint_1
    634          	}
    635          
    636          	// draw 3 gray lines for field seperators
    637          	GUI_SetPenSize(3);
   \                     ??DigitalPaint_0:
   \   00000120   0300A0E3           MOV      R0,#+3
   \   00000124   ........           BL       GUI_SetPenSize
    638          	GUI_SetColor(GUI_GRAY);
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   ........           BL       GUI_SetColor
    639          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE1, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE1);
   \   00000130   5130A0E3           MOV      R3,#+81
   \   00000134   E620A0E3           MOV      R2,#+230
   \   00000138   5110A0E3           MOV      R1,#+81
   \   0000013C   2A00A0E3           MOV      R0,#+42
   \   00000140   ........           BL       GUI_DrawLine
    640          
    641          	GUI_SetPenSize(2);
   \   00000144   0200A0E3           MOV      R0,#+2
   \   00000148   ........           BL       GUI_SetPenSize
    642          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE2, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE2);
   \   0000014C   7930A0E3           MOV      R3,#+121
   \   00000150   E620A0E3           MOV      R2,#+230
   \   00000154   7910A0E3           MOV      R1,#+121
   \   00000158   2A00A0E3           MOV      R0,#+42
   \   0000015C   ........           BL       GUI_DrawLine
    643          	GUI_DrawLine(BOX_LEFT + LINE_GAP, BOX_TOP + LINE3, BOX_RIGHT - LINE_GAP, BOX_TOP + LINE3);
   \   00000160   9730A0E3           MOV      R3,#+151
   \   00000164   E620A0E3           MOV      R2,#+230
   \   00000168   9710A0E3           MOV      R1,#+151
   \   0000016C   2A00A0E3           MOV      R0,#+42
   \   00000170   ........           BL       GUI_DrawLine
    644          
    645          	// Draw text:
    646          	// Draw alarm trigger state
    647          	GUI_SetFont(&GUI_Font24_ASCII);
   \   00000174   0900A0E1           MOV      R0,R9
   \   00000178   ........           BL       GUI_SetFont
    648          	GUI_SetColor(GUI_RED);
   \   0000017C   FF00A0E3           MOV      R0,#+255
   \   00000180   ........           BL       GUI_SetColor
    649          	
    650          	//sprintf(scratch, "Alarm when %s", vehicleData.digitalInput[input].alarmTriggerState ? "HIGH" : "LOW");
    651          	switch (vehicleData.digitalInput[globalInput].alarmTriggerState)
   \   00000184   ........           LDR      R0,??DataTable55_20
   \   00000188   5800D0E5           LDRB     R0,[R0, #+88]
   \   0000018C   867000E1           SMLABB   R0,R6,R0,R7
   \   00000190   690F80E2           ADD      R0,R0,#+420
   \   00000194   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   0D00000A           BEQ      ??DigitalPaint_2
   \   000001A0   010050E2           SUBS     R0,R0,#+1
   \   000001A4   0500000A           BEQ      ??DigitalPaint_3
   \   000001A8   020090E2           ADDS     R0,R0,#+2
   \   000001AC   0E00001A           BNE      ??DigitalPaint_4
    652          	{
    653          	case DI_DISABLED:
    654          		strcpy(scratch, "Alarm Disabled");
   \   000001B0   0F20A0E3           MOV      R2,#+15
   \   000001B4   ............       ADRL     R1,`?<Constant "Alarm Disabled">`
   \              ....        
   \   000001BC   080000EA           B        ??DigitalPaint_5
    655          		break;
    656          	case DI_ON:
    657          		strcpy(scratch, "Alarm when HIGH");
   \                     ??DigitalPaint_3:
   \   000001C0   ............       ADRL     R0,`?<Constant "Alarm when HIGH">`
   \              ....        
   \   000001C8   08108DE2           ADD      R1,SP,#+8
   \   000001CC   0C50B0E8           LDM      R0!,{R2,R3,R12,LR}
   \   000001D0   0C50A1E8           STM      R1!,{R2,R3,R12,LR}
    658          		break;
   \   000001D4   040000EA           B        ??DigitalPaint_4
    659          	case DI_OFF:
    660          		strcpy(scratch, "Alarm when LOW");
   \                     ??DigitalPaint_2:
   \   000001D8   0F20A0E3           MOV      R2,#+15
   \   000001DC   ............       ADRL     R1,`?<Constant "Alarm when LOW">`
   \              ....        
   \                     ??DigitalPaint_5:
   \   000001E4   08008DE2           ADD      R0,SP,#+8
   \   000001E8   ........           BL       __aeabi_memcpy4
    661          		break;
    662          	}
    663          
    664          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + 4);
   \                     ??DigitalPaint_4:
   \   000001EC   3720A0E3           MOV      R2,#+55
   \   000001F0   8810A0E3           MOV      R1,#+136
   \   000001F4   08008DE2           ADD      R0,SP,#+8
   \   000001F8   ........           BL       GUI_DispStringHCenterAt
    665          
    666          	// Display actual Digital reading (live data)
    667          	GUI_SetFont(&GUI_Font32_ASCII);
   \   000001FC   ........           LDR      R0,??DataTable55_13
   \   00000200   ........           BL       GUI_SetFont
    668          	GUI_SetColor(GUI_GREEN);
   \   00000204   FF0CA0E3           MOV      R0,#+65280
   \   00000208   ........           BL       GUI_SetColor
    669          	sprintf(scratch, "State: %s", GetDigitalText(RAW, input));
   \   0000020C   000054E3           CMP      R4,#+0
   \   00000210   3B10A013           MOVNE    R1,#+59
   \   00000214   3A10A003           MOVEQ    R1,#+58
   \   00000218   0D00A0E1           MOV      R0,SP
   \   0000021C   ........           BL       GetValue
   \   00000220   00009DE5           LDR      R0,[SP, #+0]
   \   00000224   ............       ADRL     R1,`?<Constant "State: %s">`
   \              ....        
   \   0000022C   000CB0E1           LSLS     R0,R0,#+24
   \   00000230   ............       ADRLNE   R2,`?<Constant "HIGH">`
   \              ....        
   \   00000238   ........           ADREQ    R2,??DataTable55_2  ;; "LOW"
   \   0000023C   08008DE2           ADD      R0,SP,#+8
   \   00000240   ........           BL       sprintf
    670          	GUI_DispStringHCenterAt(scratch, BOX_LEFT + ((BOX_RIGHT - BOX_LEFT)/2), BOX_TOP + LINE1 + 4);
   \   00000244   5520A0E3           MOV      R2,#+85
   \   00000248   8810A0E3           MOV      R1,#+136
   \   0000024C   08008DE2           ADD      R0,SP,#+8
   \   00000250   ........           BL       GUI_DispStringHCenterAt
    671          
    672          	// Low and high names text
    673          	GUI_SetFont(&GUI_Font20_ASCII);
   \   00000254   ........           LDR      R0,??DataTable55_14
   \   00000258   ........           BL       GUI_SetFont
    674          	GUI_SetColor(GUI_WHITE);
   \   0000025C   FF04E0E3           MVN      R0,#-16777216
   \   00000260   ........           BL       GUI_SetColor
    675          	GUI_DispStringAt("HIGH Name:", BOX_LEFT + LINE_GAP, BOX_TOP + GEAR_TABLE_TOP);
   \   00000264   9E20A0E3           MOV      R2,#+158
   \   00000268   2A10A0E3           MOV      R1,#+42
   \   0000026C   ............       ADRL     R0,`?<Constant "HIGH Name:">`
   \              ....        
   \   00000274   ........           BL       GUI_DispStringAt
    676          	GUI_DispStringAt("LOW Name:", BOX_LEFT + LINE_GAP, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   00000278   B720A0E3           MOV      R2,#+183
   \   0000027C   2A10A0E3           MOV      R1,#+42
   \   00000280   ............       ADRL     R0,`?<Constant "LOW Name:">`
   \              ....        
   \   00000288   ........           BL       GUI_DispStringAt
    677          
    678          	// Draw high and low state names
    679          	GUI_SetColor(GUI_GREEN);
   \   0000028C   FF0CA0E3           MOV      R0,#+65280
   \   00000290   ........           BL       GUI_SetColor
    680          	GUI_DispStringHCenterAt(vehicleData.digitalInput[input].HighName, BOX_LEFT + FORTH_COL_GAP + 10, BOX_TOP + GEAR_TABLE_TOP);
   \   00000294   C110A0E3           MOV      R1,#+193
   \   00000298   C80081E2           ADD      R0,R1,#+200
   \   0000029C   9E20A0E3           MOV      R2,#+158
   \   000002A0   080080E0           ADD      R0,R0,R8
   \   000002A4   ........           BL       GUI_DispStringHCenterAt
    681          	GUI_DispStringHCenterAt(vehicleData.digitalInput[input].LowName, BOX_LEFT + FORTH_COL_GAP + 10, BOX_TOP + GEAR_TABLE_TOP + GEAR_TABLE_VGAP);
   \   000002A8   C110A0E3           MOV      R1,#+193
   \   000002AC   D50081E2           ADD      R0,R1,#+213
   \   000002B0   B720A0E3           MOV      R2,#+183
   \   000002B4   080080E0           ADD      R0,R0,R8
   \   000002B8   ........           BL       GUI_DispStringHCenterAt
    682          
    683          	// Draw LED config states
    684          	GUI_SetColor(GUI_RED);
   \   000002BC   FF00A0E3           MOV      R0,#+255
   \   000002C0   ........           BL       GUI_SetColor
    685          	if (vehicleData.digitalInput[input].EnableLED1)
   \   000002C4   A501D8E5           LDRB     R0,[R8, #+421]
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   0400000A           BEQ      ??DigitalPaint_6
    686          		GUI_DispStringAt("LED1", LED1_POS, LED_VPOS);
   \   000002D0   E620A0E3           MOV      R2,#+230
   \   000002D4   3410A0E3           MOV      R1,#+52
   \   000002D8   ............       ADRL     R0,`?<Constant "LED1">`
   \              ....        
   \   000002E0   ........           BL       GUI_DispStringAt
    687          	if (vehicleData.digitalInput[input].EnableLED2)
   \                     ??DigitalPaint_6:
   \   000002E4   A601D8E5           LDRB     R0,[R8, #+422]
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   0400000A           BEQ      ??DigitalPaint_1
    688          		GUI_DispStringAt("LED2", LED2_POS, LED_VPOS);
   \   000002F0   E620A0E3           MOV      R2,#+230
   \   000002F4   AF10A0E3           MOV      R1,#+175
   \   000002F8   ............       ADRL     R0,`?<Constant "LED2">`
   \              ....        
   \   00000300   ........           BL       GUI_DispStringAt
   \                     ??DigitalPaint_1:
   \   00000304   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000308   F083BDE8           POP      {R4-R9,PC}       ;; return
    689          }
    690          
    691          
    692          //void DisplayAnalog1(WM_HWIN hParent)
    693          //{
    694          //#ifdef TEST_KEYBOARD
    695          //	BUTTON_Handle hButton;
    696          //
    697          //	BUTTON_SetDefaultBkColor(GUI_WHITE, BUTTON_BI_UNPRESSED);
    698          //	BUTTON_SetDefaultTextColor(BUTTON_BI_UNPRESSED, GUI_BLACK);
    699          //	BUTTON_SetDefaultFont(&GUI_Font32B_ASCII);
    700          //	hButton = BUTTON_CreateEx(23, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_Q);
    701          //	BUTTON_SetText(hButton, "Q");
    702          //
    703          //	hButton = BUTTON_CreateEx(67, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_W);
    704          //	BUTTON_SetText(hButton, "W");
    705          //
    706          //	hButton = BUTTON_CreateEx(111, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_E);
    707          //	BUTTON_SetText(hButton, "E");
    708          //
    709          //	hButton = BUTTON_CreateEx(157, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_R);
    710          //	BUTTON_SetText(hButton, "R");
    711          //
    712          //	hButton = BUTTON_CreateEx(202, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_T);
    713          //	BUTTON_SetText(hButton, "T");
    714          //
    715          //	hButton = BUTTON_CreateEx(248, 96, 35, 33, hParent, WM_CF_SHOW, 0, ID_Y);
    716          //	BUTTON_SetText(hButton, "Y");
    717          //#endif
    718          //}
    719          

   \                                 In section .text, align 4, keep-with-next
    720          void DisplayDigital4(WM_HWIN hParent)
    721          {
    722          	DisplayDigital(0, hParent);
   \                     DisplayDigital4:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           B        DisplayDigital   ;; tailcall
    723          }
    724          

   \                                 In section .text, align 4, keep-with-next
    725          void DisplayDigital5(WM_HWIN hParent)
    726          {
    727          	DisplayDigital(1, hParent);
   \                     DisplayDigital5:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           B        DisplayDigital   ;; tailcall
    728          }
    729          
    730          //void Analog1Paint(WM_HWIN hParent)
    731          //{
    732          //#ifdef TEST_KEYBOARD
    733          //	GUI_DrawBitmap(&bmKMC_TestKeyboard, 0, 0);
    734          //#else
    735          //	GUI_DrawBitmap(&bmBackground, 0, 0);
    736          //	GUI_DrawBitmap(&bmDummyAnalog, 5, 35);
    737          //	GUI_DrawBitmap(&bmanalog1, 60, 1);
    738          //	GUI_DrawBitmap(GetNavigationArrow(0), 0, 229);
    739          //#endif
    740          //}
    741          
    742          

   \                                 In section .text, align 4, keep-with-next
    743          void Digital4Paint(WM_HWIN hParent)
    744          {
    745          	DigitalPaint(0, hParent);
   \                     Digital4Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           B        DigitalPaint     ;; tailcall
    746          }
    747          
    748          

   \                                 In section .text, align 4, keep-with-next
    749          void Digital5Paint(WM_HWIN hParent)
    750          {
    751          	DigitalPaint(1, hParent);
   \                     Digital5Paint:
   \   00000000   0010A0E1           MOV      R1,R0
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           B        DigitalPaint     ;; tailcall
    752          }
    753          
    754          
    755          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen)
    756          {
    757          	return &bmleftarrow;
    758          }
    759          

   \                                 In section .text, align 4, keep-with-next
    760          void InputsIgnoreNextKeyRelease(void)
    761          {
    762          //	clickedOnThisScreen = false;
    763          }
   \                     InputsIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    764          

   \                                 In section .text, align 4, keep-with-next
    765          int ScreenIDToInput(int input)
    766          {
    767          	switch (input)
   \                     ScreenIDToInput:
   \   00000000   010040E2           SUB      R0,R0,#+1
   \   00000004   040050E3           CMP      R0,#+4
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??ScreenIDToInput_0:
   \   0000000C   0400008A           BHI      ??ScreenIDToInput_1
   \   00000010   050000EA           B        ??ScreenIDToInput_2
   \   00000014   060000EA           B        ??ScreenIDToInput_3
   \   00000018   070000EA           B        ??ScreenIDToInput_4
   \   0000001C   080000EA           B        ??ScreenIDToInput_5
   \   00000020   090000EA           B        ??ScreenIDToInput_6
    768          	{
    769          		case ANALOG0:	return 0;
   \                     ??ScreenIDToInput_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   1EFF2FE1           BX       LR
    770          		case ANALOG1:	return 1;
   \                     ??ScreenIDToInput_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   1EFF2FE1           BX       LR
    771          		case ANALOG2:	return 2;
   \                     ??ScreenIDToInput_3:
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   1EFF2FE1           BX       LR
    772          		case ANALOG3:	return 3;
   \                     ??ScreenIDToInput_4:
   \   0000003C   0300A0E3           MOV      R0,#+3
   \   00000040   1EFF2FE1           BX       LR
    773          		case DIGITAL4:	return 4;
   \                     ??ScreenIDToInput_5:
   \   00000044   0400A0E3           MOV      R0,#+4
   \   00000048   1EFF2FE1           BX       LR
    774          		case DIGITAL5:	return 5;
   \                     ??ScreenIDToInput_6:
   \   0000004C   0500A0E3           MOV      R0,#+5
   \   00000050   1EFF2FE1           BX       LR               ;; return
    775          		default:			return 0;
    776          	}
    777          }
    778          

   \                                 In section .text, align 4, keep-with-next
    779          float GetAnalogInput(enum RAW_OR_USER type, int input)
    780          {
   \                     GetAnalogInput:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    781          	switch (input)
   \   00000008   030051E3           CMP      R1,#+3
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??GetAnalogInput_0:
   \   00000010   1F00008A           BHI      ??GetAnalogInput_1
   \   00000014   020000EA           B        ??GetAnalogInput_2
   \   00000018   0A0000EA           B        ??GetAnalogInput_3
   \   0000001C   0F0000EA           B        ??GetAnalogInput_4
   \   00000020   140000EA           B        ??GetAnalogInput_5
    782          	{
    783          		case 0:	return type == RAW ? GetRawValue(ANALOG_INPUT_0).fVal : GetValue(ANALOG_INPUT_0).fVal;
   \                     ??GetAnalogInput_2:
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   3610A0E3           MOV      R1,#+54
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   0200001A           BNE      ??GetAnalogInput_6
   \   00000034   ........           BL       GetRawValue
   \                     ??GetAnalogInput_7:
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   150000EA           B        ??GetAnalogInput_8
   \                     ??GetAnalogInput_6:
   \   00000040   ........           BL       GetValue
   \   00000044   FBFFFFEA           B        ??GetAnalogInput_7
    784          		case 1:	return type == RAW ? GetRawValue(ANALOG_INPUT_1).fVal : GetValue(ANALOG_INPUT_1).fVal;
   \                     ??GetAnalogInput_3:
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3710A0E3           MOV      R1,#+55
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   F9FFFF1A           BNE      ??GetAnalogInput_6
   \                     ??GetAnalogInput_9:
   \   00000058   ........           BL       GetRawValue
   \   0000005C   F5FFFFEA           B        ??GetAnalogInput_7
    785          		case 2:	return type == RAW ? GetRawValue(ANALOG_INPUT_2).fVal : GetValue(ANALOG_INPUT_2).fVal;
   \                     ??GetAnalogInput_4:
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   3810A0E3           MOV      R1,#+56
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   F9FFFF0A           BEQ      ??GetAnalogInput_9
   \   00000070   ........           BL       GetValue
   \   00000074   EFFFFFEA           B        ??GetAnalogInput_7
    786          		case 3:	return type == RAW ? GetRawValue(ANALOG_INPUT_3).fVal : GetValue(ANALOG_INPUT_3).fVal;
   \                     ??GetAnalogInput_5:
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   3910A0E3           MOV      R1,#+57
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   EDFFFF1A           BNE      ??GetAnalogInput_6
   \   00000088   ........           BL       GetRawValue
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   000000EA           B        ??GetAnalogInput_8
    787          		default:	return (float)0.0;
   \                     ??GetAnalogInput_1:
   \   00000094   0000A0E3           MOV      R0,#+0
   \                     ??GetAnalogInput_8:
   \   00000098   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000009C   0080BDE8           POP      {PC}             ;; return
    788          	}
    789          }
    790          

   \                                 In section .text, align 4, keep-with-next
    791          char *GetDigitalText(enum RAW_OR_USER type, int input)
    792          {
   \                     GetDigitalText:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
    793          	char value;
    794          
    795          	if (input == 0)
    796          		value = (char)GetValue(DIGITAL_INPUT_4).uVal;
   \   00000010   3A10A003           MOVEQ    R1,#+58
    797          	else value = (char)GetValue(DIGITAL_INPUT_5).uVal;
   \   00000014   3B10A013           MOVNE    R1,#+59
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       GetValue
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
    798          
    799          	if (value)
   \   00000024   000CB0E1           LSLS     R0,R0,#+24
   \   00000028   0400000A           BEQ      ??GetDigitalText_0
    800          		return type == RAW ? "HIGH" : vehicleData.digitalInput[input].HighName;
   \   0000002C   000055E3           CMP      R5,#+0
   \   00000030   ........           ADREQ    R0,`?<Constant "HIGH">`
   \   00000034   0A00000A           BEQ      ??GetDigitalText_1
   \   00000038   8900A0E3           MOV      R0,#+137
   \   0000003C   030000EA           B        ??GetDigitalText_2
    801          	else return type == RAW ? "LOW" : vehicleData.digitalInput[input].LowName;
   \                     ??GetDigitalText_0:
   \   00000040   000055E3           CMP      R5,#+0
   \   00000044   ........           ADREQ    R0,??DataTable55_2  ;; "LOW"
   \   00000048   0500000A           BEQ      ??GetDigitalText_1
   \   0000004C   9600A0E3           MOV      R0,#+150
   \                     ??GetDigitalText_2:
   \   00000050   2F10A0E3           MOV      R1,#+47
   \   00000054   ........           LDR      R2,??DataTable55_19
   \   00000058   912422E0           MLA      R2,R1,R4,R2
   \   0000005C   400F80E3           ORR      R0,R0,#0x100
   \   00000060   020080E0           ADD      R0,R0,R2
   \                     ??GetDigitalText_1:
   \   00000064   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    802          }
    803          

   \                                 In section .text, align 4, keep-with-next
    804          char *GetAlarmTriggerText(char input, enum UPPER_LOWER upperLower)
    805          {
   \                     GetAlarmTriggerText:
   \   00000000   ........           LDR      R2,??DataTable55_19
   \   00000004   010051E3           CMP      R1,#+1
   \   00000008   000382E0           ADD      R0,R2,R0, LSL #+6
   \   0000000C   9500D005           LDRBEQ   R0,[R0, #+149]
   \   00000010   9400D015           LDRBNE   R0,[R0, #+148]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0400000A           BEQ      ??GetAlarmTriggerText_0
   \   0000001C   0900003A           BCC      ??GetAlarmTriggerText_1
   \   00000020   030050E3           CMP      R0,#+3
   \   00000024   0500000A           BEQ      ??GetAlarmTriggerText_2
   \   00000028   0200003A           BCC      ??GetAlarmTriggerText_3
   \   0000002C   050000EA           B        ??GetAlarmTriggerText_1
    806          	switch ((upperLower == UPPER ? vehicleData.analogInput[input].upperAlarmTriggerComparison : vehicleData.analogInput[input].lowerAlarmTriggerComparison))
    807          	{
    808          		case ABOVE:		return "Above";		
   \                     ??GetAlarmTriggerText_0:
   \   00000030   ........           ADR      R0,`?<Constant "Above">`
   \   00000034   1EFF2FE1           BX       LR
    809          		case BELOW:		return "Below";		
   \                     ??GetAlarmTriggerText_3:
   \   00000038   ........           ADR      R0,`?<Constant "Below">`
   \   0000003C   1EFF2FE1           BX       LR
    810          		case EQUAL_TO:	return "Equal To";
   \                     ??GetAlarmTriggerText_2:
   \   00000040   ........           ADR      R0,`?<Constant "Equal To">`
   \   00000044   1EFF2FE1           BX       LR
    811          		default:
    812          		case OFF:		return "Off";			
   \                     ??GetAlarmTriggerText_1:
   \   00000048   ........           ADR      R0,??DataTable55_12  ;; "Off"
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    813          	}
    814          }
    815          

   \                                 In section .text, align 4, keep-with-next
    816          void InputCleanUpKeyboards(void)
    817          {
   \                     InputCleanUpKeyboards:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    818          	DeleteDigitalKeyboards();
   \   00000008   ........           BL       DeleteDigitalKeyboards
    819          	DeleteAnalogKeyboards();
   \   0000000C   04D08DE2           ADD      SP,SP,#+4
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   ........           B        DeleteAnalogKeyboards  ;; tailcall
    820          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   25640000           DC8      0x25, 0x64, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     InputsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_1:
   \   00000000   4E4F0000           DC8      0x4E, 0x4F, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_2:
   \   00000000   4C4F5700           DC8      "LOW"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_3:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_4:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_5:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     bmGreenButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     bmYellowButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     bmRedButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   ........           DC32     bmGrayButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   4C4F5700           DC8      "LOW"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   ........           DC32     bm0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   ........           DC32     bm1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   ........           DC32     bm2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   ........           DC32     bm3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   ........           DC32     bmAnalog

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_9:
   \   00000000   80808000           DC32     0x808080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_10:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_11:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_12:
   \   00000000   4F666600           DC8      "Off"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_13:
   \   00000000   ........           DC32     GUI_Font32_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_14:
   \   00000000   ........           DC32     GUI_Font20_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_15:
   \   00000000   8080FF00           DC32     0xff8080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_16:
   \   00000000   ........           DC32     bm4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_17:
   \   00000000   ........           DC32     bm5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_18:
   \   00000000   ........           DC32     bmDigital

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_19:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_20:
   \   00000000   ........           DC32     InputsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s Analog %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   257320416E61       DC8 37, 115, 32, 65, 110, 97, 108, 111, 103, 32
   \              6C6F6720    
   \   0000000A   256400000000       DC8 37, 100, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Disable">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   44697361626C       DC8 68, 105, 115, 97, 98, 108, 101, 0
   \              6500        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enable">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   456E61626C65       DC8 69, 110, 97, 98, 108, 101, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s Digital %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   257320446967       DC8 37, 115, 32, 68, 105, 103, 105, 116, 97, 108
   \              6974616C    
   \   0000000A   202564000000       DC8 32, 37, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Scale">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   456469742053       DC8 69, 100, 105, 116, 32, 83, 99, 97, 108, 101
   \              63616C65    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Alarm">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   456469742041       DC8 69, 100, 105, 116, 32, 65, 108, 97, 114, 109
   \              6C61726D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Invalid Setting">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   496E76616C69       DC8 73, 110, 118, 97, 108, 105, 100, 32, 83, 101
   \              64205365    
   \   0000000A   7474696E6700       DC8 116, 116, 105, 110, 103, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Input">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 73, 110, 112
   \              20496E70    
   \   0000000A   757400000000       DC8 117, 116, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Units">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 85, 110, 105
   \              20556E69    
   \   0000000A   747300000000       DC8 116, 115, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Input Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   496E70757420       DC8 73, 110, 112, 117, 116, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No Alarm Set">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4E6F20416C61       DC8 78, 111, 32, 65, 108, 97, 114, 109, 32, 83
   \              726D2053    
   \   0000000A   657400000000       DC8 101, 116, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f < ">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E3266203C       DC8 37, 46, 50, 102, 32, 60, 32, 0
   \              2000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416C61726D00       DC8 65, 108, 97, 114, 109, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s > %.2f">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   2573203E2025       DC8 37, 115, 32, 62, 32, 37, 46, 50, 102, 0
   \              2E326600    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Volts: %0.2f">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   566F6C74733A       DC8 86, 111, 108, 116, 115, 58, 32, 37, 48, 46
   \              2025302E    
   \   0000000A   326600000000       DC8 50, 102, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%dV Range Selected">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   256456205261       DC8 37, 100, 86, 32, 82, 97, 110, 103, 101, 32
   \              6E676520    
   \   0000000A   53656C656374       DC8 83, 101, 108, 101, 99, 116, 101, 100, 0, 0
   \              65640000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Low:">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C6F773A0000       DC8 76, 111, 119, 58, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "High:">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   486967683A00       DC8 72, 105, 103, 104, 58, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E32660000       DC8 37, 46, 50, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MEDIUM">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4D454449554D       DC8 77, 69, 68, 73, 85, 77, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HIGH">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   484947480000       DC8 72, 73, 71, 72, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "VERY HIGH">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   564552592048       DC8 86, 69, 82, 89, 32, 72, 73, 71, 72, 0
   \              49474800    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Filtering">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   2046696C7465       DC8 32, 70, 105, 108, 116, 101, 114, 105, 110, 103
   \              72696E67    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED1">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C4544310000       DC8 76, 69, 68, 49, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED2">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C4544320000       DC8 76, 69, 68, 50, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename High">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 72, 105, 103
   \              20486967    
   \   0000000A   6800               DC8 104, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Low">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 76, 111, 119
   \              204C6F77    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm when HIGH">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 119, 104, 101, 110
   \              7768656E    
   \   0000000A   204849474800       DC8 32, 72, 73, 71, 72, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm when LOW">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 119, 104, 101, 110
   \              7768656E    
   \   0000000A   204C4F570000       DC8 32, 76, 79, 87, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "State: %s">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53746174653A       DC8 83, 116, 97, 116, 101, 58, 32, 37, 115, 0
   \              20257300    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HIGH Name:">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   48494748204E       DC8 72, 73, 71, 72, 32, 78, 97, 109, 101, 58
   \              616D653A    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LOW Name:">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4C4F57204E61       DC8 76, 79, 87, 32, 78, 97, 109, 101, 58, 0
   \              6D653A00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Above">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   41626F766500       DC8 65, 98, 111, 118, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Below">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   42656C6F7700       DC8 66, 101, 108, 111, 119, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Equal To">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   457175616C20       DC8 69, 113, 117, 97, 108, 32, 84, 111, 0, 0
   \              546F0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "You cannot enable Dig...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   596F75206361       DC8 89, 111, 117, 32, 99, 97, 110, 110, 111, 116
   \              6E6E6F74    
   \   0000000A   20656E61626C       DC8 32, 101, 110, 97, 98, 108, 101, 32, 68, 105
   \              65204469    
   \   00000014   676974616C20       DC8 103, 105, 116, 97, 108, 32, 73, 110, 112, 117
   \              496E7075    
   \   0000001E   742034000000       DC8 116, 32, 52, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "if you have a camera ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   696620796F75       DC8 105, 102, 32, 121, 111, 117, 32, 104, 97, 118
   \              20686176    
   \   0000000A   652061206361       DC8 101, 32, 97, 32, 99, 97, 109, 101, 114, 97
   \              6D657261    
   \   00000014   2073656C6563       DC8 32, 115, 101, 108, 101, 99, 116, 101, 100, 46
   \              7465642E    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Disable camera to use...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   44697361626C       DC8 68, 105, 115, 97, 98, 108, 101, 32, 99, 97
   \              65206361    
   \   0000000A   6D6572612074       DC8 109, 101, 114, 97, 32, 116, 111, 32, 117, 115
   \              6F207573    
   \   00000014   6520496E7075       DC8 101, 32, 73, 110, 112, 117, 116, 32, 52, 46
   \              7420342E    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F4B0000           DC8 79, 75, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4E4F0000           DC8 78, 79, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "LOW">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4C4F5700           DC8 76, 79, 87, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Off">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F666600           DC8 79, 102, 102, 0
    821          
    822          /*************************** End of file ****************************/
    823          

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     Analog0Paint                    8
     Analog1Paint                    8
     Analog2Paint                    8
     Analog3Paint                    8
     AnalogPaint                    64
     Digital4Paint                   8
     Digital5Paint                   8
     DigitalPaint                   72
     DisplayAnalog                  64
     DisplayAnalog0                  8
     DisplayAnalog1                  8
     DisplayAnalog2                  8
     DisplayAnalog3                  8
     DisplayDigital                 64
     DisplayDigital4                 8
     DisplayDigital5                 8
     GetAlarmTriggerText             0
     GetAnalogInput                 16
     GetDigitalText                 24
     GetInputsWindowHandle           0
     InputCleanUpKeyboards           8
     InputsIgnoreNextKeyRelease      0
     InputsScreensCallback          40
     ScreenIDToInput                 0
     SetAnalogEnableButtonText      32
     SetDigitalEnableButtonText     32
     SetInputsWindowHandle           0


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     test                                      4
     InputsScreenList                         89
     hInputsScreens
     globalInput
     GetInputsWindowHandle                    12
     SetInputsWindowHandle                    12
     InputsScreensCallback                   664
     Input4DisabledResources                 120
     DisplayAnalog0                           12
     DisplayAnalog1                           12
     DisplayAnalog2                           12
     DisplayAnalog3                           12
     SetAnalogEnableButtonText                84
     SetDigitalEnableButtonText               88
     Analog0Paint                             12
     Analog1Paint                             12
     Analog2Paint                             12
     Analog3Paint                             12
     DisplayAnalog                           584
     AnalogPaint                            1504
     DisplayDigital                          592
     DigitalPaint                            780
     DisplayDigital4                          12
     DisplayDigital5                          12
     Digital4Paint                            12
     Digital5Paint                            12
     InputsIgnoreNextKeyRelease                4
     ScreenIDToInput                          84
     GetAnalogInput                          160
     GetDigitalText                          108
     GetAlarmTriggerText                      80
     InputCleanUpKeyboards                    24
     ??DataTable51                             4
     ??DataTable52                             4
     ??DataTable52_1                           4
     ??DataTable52_2                           4
     ??DataTable52_3                           4
     ??DataTable52_4                           4
     ??DataTable52_5                           4
     ??DataTable53                             4
     ??DataTable54                             4
     ??DataTable55                             4
     ??DataTable55_1                           4
     ??DataTable55_2                           4
     ??DataTable55_3                           4
     ??DataTable55_4                           4
     ??DataTable55_5                           4
     ??DataTable55_6                           4
     ??DataTable55_7                           4
     ??DataTable55_8                           4
     ??DataTable55_9                           4
     ??DataTable55_10                          4
     ??DataTable55_11                          4
     ??DataTable55_12                          4
     ??DataTable55_13                          4
     ??DataTable55_14                          4
     ??DataTable55_15                          4
     ??DataTable55_16                          4
     ??DataTable55_17                          4
     ??DataTable55_18                          4
     ??DataTable55_19                          4
     ??DataTable55_20                          4
     ?<Constant "%s Analog %d">               16
     ?<Constant "Disable">                     8
     ?<Constant "Enable">                      8
     ?<Constant "%s Digital %d">              16
     ?<Constant "Edit Scale">                 12
     ?<Constant "Edit Alarm">                 12
     ?<Constant "Invalid Setting">            16
     ?<Constant "Rename Input">               16
     ?<Constant "Rename Units">               16
     ?<Constant "Input Disabled">             16
     ?<Constant "No Alarm Set">               16
     ?<Constant "%.2f < ">                     8
     ?<Constant "Alarm">                       8
     ?<Constant "%s > %.2f">                  12
     ?<Constant "Volts: %0.2f">               16
     ?<Constant "%dV Range Selected">         20
     ?<Constant "Low:">                        8
     ?<Constant "High:">                       8
     ?<Constant "%.2f">                        8
     ?<Constant "MEDIUM">                      8
     ?<Constant "HIGH">                        8
     ?<Constant "VERY HIGH">                  12
     ?<Constant " Filtering">                 12
     ?<Constant "LED1">                        8
     ?<Constant "LED2">                        8
     ?<Constant "Rename High">                12
     ?<Constant "Rename Low">                 12
     ?<Constant "Alarm Disabled">             16
     ?<Constant "Alarm when HIGH">            16
     ?<Constant "Alarm when LOW">             16
     ?<Constant "State: %s">                  12
     ?<Constant "HIGH Name:">                 12
     ?<Constant "LOW Name:">                  12
     ?<Constant "Above">                       8
     ?<Constant "Below">                       8
     ?<Constant "Equal To">                   12
     ?<Constant "You cannot enable Dig...">   36
     ?<Constant "if you have a camera ...">   32
     ?<Constant "Disable camera to use...">   32
     ?<Constant "OK">                          4
     ?<Constant "%d">                          4
     ?<Constant "NO">                          4
     ?<Constant "LOW">                         4
     ?<Constant "Off">                         4

 
     4 bytes in section .bss
    89 bytes in section .data
   136 bytes in section .rodata
 5 580 bytes in section .text
 
 5 580 bytes of CODE  memory
   136 bytes of CONST memory
    93 bytes of DATA  memory

Errors: none
Warnings: none
