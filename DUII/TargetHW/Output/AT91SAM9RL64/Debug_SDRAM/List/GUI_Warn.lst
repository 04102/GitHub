###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:07 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_Warn.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_Warn.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_Warn.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _Warn.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_Warn.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_Warn.C
     19          Purpose     : Logging (used only at higher debug levels)
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdio.h>
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Defines
     31          *
     32          **********************************************************************
     33          */
     34          
     35          #define MAXLEN 50
     36          
     37          /*********************************************************************
     38          *
     39          *       Static code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       _CopyString
     46          */
     47          static void _CopyString(char*d, const char*s, int MaxLen) {
     48            while ((MaxLen > 0) && *s) {
     49              *d++ = *s++;
     50              MaxLen--;
     51            }
     52            *d = 0;
     53          }
     54          
     55          /*********************************************************************
     56          *
     57          *       Public code
     58          *
     59          *  Note: These routines are needed only in higher debug levels.
     60          *
     61          **********************************************************************
     62          */
     63          /*********************************************************************
     64          *
     65          *       GUI_Warn
     66          */

   \                                 In section .text, align 4, keep-with-next
     67          void GUI_Warn(const char *s) {
     68            GUI_X_Warn(s);
   \                     GUI_Warn:
   \   00000000   ........           B        GUI_X_Warn       ;; tailcall
     69          }
     70          
     71          /*********************************************************************
     72          *
     73          *       GUI_Warn1
     74          */

   \                                 In section .text, align 4, keep-with-next
     75          void GUI_Warn1(const char *s, int p0) {
   \                     GUI_Warn1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
     76            char ac[MAXLEN + 10];
     77            char* sOut = ac;
   \   00000008   04208DE2           ADD      R2,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   00208DE5           STR      R2,[SP, #+0]
     78            _CopyString(ac, s, MAXLEN);
   \   00000014   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000018   01C0B0E1           MOVS     R12,R1
   \   0000001C   1000000A           BEQ      ??GUI_Warn1_0
   \   00000020   0410CDE5           STRB     R1,[SP, #+4]
   \   00000024   0110F0E5           LDRB     R1,[R0, #+1]!
   \   00000028   05208DE2           ADD      R2,SP,#+5
   \   0000002C   1830A0E3           MOV      R3,#+24
   \   00000030   01C0A0E1           MOV      R12,R1
   \                     ??GUI_Warn1_1:
   \   00000034   00005CE3           CMP      R12,#+0
   \   00000038   0110C214           STRBNE   R1,[R2], #+1
   \   0000003C   0110F015           LDRBNE   R1,[R0, #+1]!
   \   00000040   00005113           CMPNE    R1,#+0
   \   00000044   0600000A           BEQ      ??GUI_Warn1_0
   \   00000048   0110C2E4           STRB     R1,[R2], #+1
   \   0000004C   01C0F0E5           LDRB     R12,[R0, #+1]!
   \   00000050   013053E2           SUBS     R3,R3,#+1
   \   00000054   0C10A0E1           MOV      R1,R12
   \   00000058   F5FFFF1A           BNE      ??GUI_Warn1_1
   \   0000005C   00005CE3           CMP      R12,#+0
   \   00000060   0110C214           STRBNE   R1,[R2], #+1
   \                     ??GUI_Warn1_0:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0000C2E5           STRB     R0,[R2, #+0]
     79            sOut += strlen(sOut);
   \   0000006C   00009DE5           LDR      R0,[SP, #+0]
   \   00000070   ........           BL       strlen
   \   00000074   00109DE5           LDR      R1,[SP, #+0]
     80            GUI__AddSpaceHex(p0, 8, &sOut);
   \   00000078   0D20A0E1           MOV      R2,SP
   \   0000007C   010080E0           ADD      R0,R0,R1
   \   00000080   00008DE5           STR      R0,[SP, #+0]
   \   00000084   0810A0E3           MOV      R1,#+8
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI__AddSpaceHex
     81            GUI_Warn(ac);
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   ........           BL       GUI_X_Warn
     82          }
   \   00000098   40D08DE2           ADD      SP,SP,#+64       ;; stack cleaning
   \   0000009C   1080BDE8           POP      {R4,PC}          ;; return
     83          
     84          /*********************************************************************
     85          *
     86          *       GUI_Warn2
     87          */

   \                                 In section .text, align 4, keep-with-next
     88          void GUI_Warn2(const char *s, int p0, int p1) {
   \                     GUI_Warn2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   4CD04DE2           SUB      SP,SP,#+76
   \   00000008   0250A0E1           MOV      R5,R2
     89            char ac[MAXLEN + 20];
     90            char* sOut = ac;
   \   0000000C   04208DE2           ADD      R2,SP,#+4
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   00208DE5           STR      R2,[SP, #+0]
     91            _CopyString(ac, s, MAXLEN);
   \   00000018   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000001C   01C0B0E1           MOVS     R12,R1
   \   00000020   1000000A           BEQ      ??GUI_Warn2_0
   \   00000024   0410CDE5           STRB     R1,[SP, #+4]
   \   00000028   0110F0E5           LDRB     R1,[R0, #+1]!
   \   0000002C   05208DE2           ADD      R2,SP,#+5
   \   00000030   1830A0E3           MOV      R3,#+24
   \   00000034   01C0A0E1           MOV      R12,R1
   \                     ??GUI_Warn2_1:
   \   00000038   00005CE3           CMP      R12,#+0
   \   0000003C   0110C214           STRBNE   R1,[R2], #+1
   \   00000040   0110F015           LDRBNE   R1,[R0, #+1]!
   \   00000044   00005113           CMPNE    R1,#+0
   \   00000048   0600000A           BEQ      ??GUI_Warn2_0
   \   0000004C   0110C2E4           STRB     R1,[R2], #+1
   \   00000050   01C0F0E5           LDRB     R12,[R0, #+1]!
   \   00000054   013053E2           SUBS     R3,R3,#+1
   \   00000058   0C10A0E1           MOV      R1,R12
   \   0000005C   F5FFFF1A           BNE      ??GUI_Warn2_1
   \   00000060   00005CE3           CMP      R12,#+0
   \   00000064   0110C214           STRBNE   R1,[R2], #+1
   \                     ??GUI_Warn2_0:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0000C2E5           STRB     R0,[R2, #+0]
     92            sOut += strlen(sOut);
   \   00000070   00009DE5           LDR      R0,[SP, #+0]
   \   00000074   ........           BL       strlen
   \   00000078   00109DE5           LDR      R1,[SP, #+0]
     93            GUI__AddSpaceHex(p0, 8, &sOut);
   \   0000007C   0D20A0E1           MOV      R2,SP
   \   00000080   010080E0           ADD      R0,R0,R1
   \   00000084   00008DE5           STR      R0,[SP, #+0]
   \   00000088   0810A0E3           MOV      R1,#+8
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       GUI__AddSpaceHex
     94            GUI__AddSpaceHex(p1, 8, &sOut);
   \   00000094   0D20A0E1           MOV      R2,SP
   \   00000098   0810A0E3           MOV      R1,#+8
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           BL       GUI__AddSpaceHex
     95            GUI_Warn(ac);
   \   000000A4   04008DE2           ADD      R0,SP,#+4
   \   000000A8   ........           BL       GUI_X_Warn
     96          }
   \   000000AC   4CD08DE2           ADD      SP,SP,#+76       ;; stack cleaning
   \   000000B0   3080BDE8           POP      {R4,R5,PC}       ;; return
     97          
     98          /*********************************************************************
     99          *
    100          *       GUI_Warn3
    101          */

   \                                 In section .text, align 4, keep-with-next
    102          void GUI_Warn3(const char *s, int p0, int p1, int p2) {
   \                     GUI_Warn3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   0250A0E1           MOV      R5,R2
    103            char ac[MAXLEN + 30];
    104            char* sOut = ac;
   \   0000000C   04208DE2           ADD      R2,SP,#+4
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    105            _CopyString(ac, s, MAXLEN);
   \   00000018   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   01C0B0E1           MOVS     R12,R1
   \   00000024   1000000A           BEQ      ??GUI_Warn3_0
   \   00000028   0410CDE5           STRB     R1,[SP, #+4]
   \   0000002C   0110F0E5           LDRB     R1,[R0, #+1]!
   \   00000030   05208DE2           ADD      R2,SP,#+5
   \   00000034   1830A0E3           MOV      R3,#+24
   \   00000038   01C0A0E1           MOV      R12,R1
   \                     ??GUI_Warn3_1:
   \   0000003C   00005CE3           CMP      R12,#+0
   \   00000040   0110C214           STRBNE   R1,[R2], #+1
   \   00000044   0110F015           LDRBNE   R1,[R0, #+1]!
   \   00000048   00005113           CMPNE    R1,#+0
   \   0000004C   0600000A           BEQ      ??GUI_Warn3_0
   \   00000050   0110C2E4           STRB     R1,[R2], #+1
   \   00000054   01C0F0E5           LDRB     R12,[R0, #+1]!
   \   00000058   013053E2           SUBS     R3,R3,#+1
   \   0000005C   0C10A0E1           MOV      R1,R12
   \   00000060   F5FFFF1A           BNE      ??GUI_Warn3_1
   \   00000064   00005CE3           CMP      R12,#+0
   \   00000068   0110C214           STRBNE   R1,[R2], #+1
   \                     ??GUI_Warn3_0:
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0000C2E5           STRB     R0,[R2, #+0]
    106            sOut += strlen(sOut);
   \   00000074   00009DE5           LDR      R0,[SP, #+0]
   \   00000078   ........           BL       strlen
   \   0000007C   00109DE5           LDR      R1,[SP, #+0]
    107            GUI__AddSpaceHex(p0, 8, &sOut);
   \   00000080   0D20A0E1           MOV      R2,SP
   \   00000084   010080E0           ADD      R0,R0,R1
   \   00000088   00008DE5           STR      R0,[SP, #+0]
   \   0000008C   0810A0E3           MOV      R1,#+8
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       GUI__AddSpaceHex
    108            GUI__AddSpaceHex(p1, 8, &sOut);
   \   00000098   0D20A0E1           MOV      R2,SP
   \   0000009C   0810A0E3           MOV      R1,#+8
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       GUI__AddSpaceHex
    109            GUI__AddSpaceHex(p2, 8, &sOut);
   \   000000A8   0D20A0E1           MOV      R2,SP
   \   000000AC   0810A0E3           MOV      R1,#+8
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           BL       GUI__AddSpaceHex
    110            GUI_Warn(ac);
   \   000000B8   04008DE2           ADD      R0,SP,#+4
   \   000000BC   ........           BL       GUI_X_Warn
    111          }
   \   000000C0   58D08DE2           ADD      SP,SP,#+88       ;; stack cleaning
   \   000000C4   7080BDE8           POP      {R4-R6,PC}       ;; return
    112          
    113          /*********************************************************************
    114          *
    115          *       GUI_Warn4
    116          */

   \                                 In section .text, align 4, keep-with-next
    117          void GUI_Warn4(const char *s, int p0, int p1, int p2, int p3) {
   \                     GUI_Warn4:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   64D04DE2           SUB      SP,SP,#+100
   \   00000008   0250A0E1           MOV      R5,R2
    118            char ac[MAXLEN + 40];
    119            char* sOut = ac;
   \   0000000C   04208DE2           ADD      R2,SP,#+4
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    120            _CopyString(ac, s, MAXLEN);
   \   00000018   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   78709DE5           LDR      R7,[SP, #+120]
   \   00000024   01C0B0E1           MOVS     R12,R1
   \   00000028   1000000A           BEQ      ??GUI_Warn4_0
   \   0000002C   0410CDE5           STRB     R1,[SP, #+4]
   \   00000030   0110F0E5           LDRB     R1,[R0, #+1]!
   \   00000034   05208DE2           ADD      R2,SP,#+5
   \   00000038   1830A0E3           MOV      R3,#+24
   \   0000003C   01C0A0E1           MOV      R12,R1
   \                     ??GUI_Warn4_1:
   \   00000040   00005CE3           CMP      R12,#+0
   \   00000044   0110C214           STRBNE   R1,[R2], #+1
   \   00000048   0110F015           LDRBNE   R1,[R0, #+1]!
   \   0000004C   00005113           CMPNE    R1,#+0
   \   00000050   0600000A           BEQ      ??GUI_Warn4_0
   \   00000054   0110C2E4           STRB     R1,[R2], #+1
   \   00000058   01C0F0E5           LDRB     R12,[R0, #+1]!
   \   0000005C   013053E2           SUBS     R3,R3,#+1
   \   00000060   0C10A0E1           MOV      R1,R12
   \   00000064   F5FFFF1A           BNE      ??GUI_Warn4_1
   \   00000068   00005CE3           CMP      R12,#+0
   \   0000006C   0110C214           STRBNE   R1,[R2], #+1
   \                     ??GUI_Warn4_0:
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   0000C2E5           STRB     R0,[R2, #+0]
    121            sOut += strlen(sOut);
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   ........           BL       strlen
   \   00000080   00109DE5           LDR      R1,[SP, #+0]
    122            GUI__AddSpaceHex(p0, 8, &sOut);
   \   00000084   0D20A0E1           MOV      R2,SP
   \   00000088   010080E0           ADD      R0,R0,R1
   \   0000008C   00008DE5           STR      R0,[SP, #+0]
   \   00000090   0810A0E3           MOV      R1,#+8
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       GUI__AddSpaceHex
    123            GUI__AddSpaceHex(p1, 8, &sOut);
   \   0000009C   0D20A0E1           MOV      R2,SP
   \   000000A0   0810A0E3           MOV      R1,#+8
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       GUI__AddSpaceHex
    124            GUI__AddSpaceHex(p2, 8, &sOut);
   \   000000AC   0D20A0E1           MOV      R2,SP
   \   000000B0   0810A0E3           MOV      R1,#+8
   \   000000B4   0600A0E1           MOV      R0,R6
   \   000000B8   ........           BL       GUI__AddSpaceHex
    125            GUI__AddSpaceHex(p3, 8, &sOut);
   \   000000BC   0D20A0E1           MOV      R2,SP
   \   000000C0   0810A0E3           MOV      R1,#+8
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   ........           BL       GUI__AddSpaceHex
    126            GUI_Warn(ac);
   \   000000CC   04008DE2           ADD      R0,SP,#+4
   \   000000D0   ........           BL       GUI_X_Warn
    127          }
   \   000000D4   64D08DE2           ADD      SP,SP,#+100      ;; stack cleaning
   \   000000D8   F080BDE8           POP      {R4-R7,PC}       ;; return
    128          
    129          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     GUI_Warn       8
     GUI_Warn1     72
     GUI_Warn2     88
     GUI_Warn3    104
     GUI_Warn4    120


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI_Warn          4
     GUI_Warn1       160
     GUI_Warn2       180
     GUI_Warn3       200
     GUI_Warn4       220

 
 764 bytes in section .text
 
 764 bytes of CODE memory

Errors: none
Warnings: none
