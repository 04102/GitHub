###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__strcmp.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__strcmp.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__strcmp.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __strcmp.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__strcmp.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__strcmp.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUI__strcmp
     36          *
     37          * Purpose:
     38          *   Replacement for the strcmp function. The advantage is that it can
     39          *   be called with NULL pointer(s).
     40          *   A NULL string is treated as a an empty string ("").
     41          * Return value:
     42          *   0 if identical
     43          *   1 else
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          int GUI__strcmp(const char GUI_UNI_PTR * s0, const char GUI_UNI_PTR * s1) {
     46            if (s0 == NULL) {
   \                     GUI__strcmp:
   \   00000000   000050E3           CMP      R0,#+0
     47              s0 = "";
   \   00000004   ........           ADREQ    R0,??DataTable2  ;; ""
     48            }
     49            if (s1 == NULL) {
   \   00000008   000051E3           CMP      R1,#+0
     50              s1 = "";
   \   0000000C   ........           ADREQ    R1,??DataTable2  ;; ""
     51            }
     52            do {
     53              if (*s0 != *s1) {
   \                     ??GUI__strcmp_0:
   \   00000010   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000014   0130D1E4           LDRB     R3,[R1], #+1
   \   00000018   030052E1           CMP      R2,R3
   \   0000001C   0500001A           BNE      ??GUI__strcmp_1
     54                return 1;
     55              }
     56              s1++;
     57            } while (*++s0);
   \   00000020   0120F0E5           LDRB     R2,[R0, #+1]!
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   F8FFFF1A           BNE      ??GUI__strcmp_0
     58            if (*s1) {
   \   0000002C   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000000A           BEQ      ??GUI__strcmp_2
     59              return 1;    /* Not equal, since s1 is longer than s0 */
   \                     ??GUI__strcmp_1:
   \   00000038   0100A0E3           MOV      R0,#+1
     60            }
     61            return 0;      /* Equal ! */
   \                     ??GUI__strcmp_2:
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     62          }
     63          
     64          /*********************************************************************
     65          *
     66          *       GUI__strcmp_hp
     67          *
     68          * Purpose:
     69          *  Replacement for the strcmp function. The advantage is that it can
     70          *  be called with NULL pointer or 0 handle.
     71          *  A NULL string is treated as a an empty string ("").
     72          * Return value:
     73          *  0 if identical
     74          *  1 else
     75          */

   \                                 In section .text, align 4, keep-with-next
     76          int GUI__strcmp_hp(GUI_HMEM  hs0, const char GUI_UNI_PTR * s1) {
   \                     GUI__strcmp_hp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     77            const char* s0 = NULL;
   \   00000008   0010A0E3           MOV      R1,#+0
     78            if (hs0) {
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??GUI__strcmp_hp_0
     79              s0 = (const char*)GUI_ALLOC_h2p(hs0);
   \   00000014   ........           BL       GUI_ALLOC_h2p
   \   00000018   0010A0E1           MOV      R1,R0
     80            }
     81            return GUI__strcmp(s0, s1);
   \                     ??GUI__strcmp_hp_0:
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   ........           ADREQ    R1,??DataTable2  ;; ""
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   ........           ADREQ    R4,??DataTable2  ;; ""
   \                     ??GUI__strcmp_hp_1:
   \   0000002C   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000030   0120D4E4           LDRB     R2,[R4], #+1
   \   00000034   020050E1           CMP      R0,R2
   \   00000038   0500001A           BNE      ??GUI__strcmp_hp_2
   \   0000003C   0100F1E5           LDRB     R0,[R1, #+1]!
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   F8FFFF1A           BNE      ??GUI__strcmp_hp_1
   \   00000048   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0000000A           BEQ      ??GUI__strcmp_hp_3
   \                     ??GUI__strcmp_hp_2:
   \   00000054   0100A0E3           MOV      R0,#+1
   \                     ??GUI__strcmp_hp_3:
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
     82          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0
     83          
     84          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     GUI__strcmp         0
     GUI__strcmp_hp      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI__strcmp      64
     GUI__strcmp_hp   92
     ??DataTable2      4
     ?<Constant "">    1

 
   1 byte  in section .rodata
 160 bytes in section .text
 
 160 bytes of CODE  memory
   1 byte  of CONST memory

Errors: none
Warnings: none
