###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\AnalogInputSettings.c                       #
#    Command line =  C:\DUII\DUII\AnalogInputSettings.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\An #
#                    alogInputSettings.lst                                    #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Ana #
#                    logInputSettings.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\AnalogInputSettings.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "DUII.h"
     26          #include "GUI.h"
     27          #include "commondefs.h"
     28          #include "DIALOG.h"
     29          #include "ConfigScreens.h"
     30          #include "GeneralConfig.h"
     31          #include "FlashReadWrite.h"
     32          #include "DataHandler.h"
     33          #include "AnalogInputSettings.h"
     34          #include "StandardList.h"
     35          #include "InputScreens.h"
     36          #include "KeyboardAccess.h"
     37          #include "AnalogInputsScale.h"
     38          #include "Utilities.h"
     39          
     40          /*********************************************************************
     41          *
     42          *       Public Variables
     43          *
     44          **********************************************************************
     45          */
     46          
     47          /*********************************************************************
     48          *
     49          *       External data and code
     50          *
     51          **********************************************************************
     52          */
     53          extern GUI_CONST_STORAGE GUI_BITMAP bmBackgroundWithPanel;
     54          extern GUI_CONST_STORAGE GUI_BITMAP bmMiniButton;
     55          extern GUI_CONST_STORAGE GUI_BITMAP bmTinyBlackButton;
     56          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     57          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     58          extern GUI_CONST_STORAGE GUI_BITMAP bmBackground;
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmBanner;
     60          extern GUI_CONST_STORAGE GUI_BITMAP bmDummyDigital;
     61          extern GUI_CONST_STORAGE GUI_BITMAP bmDummyAnalog;
     62          extern GUI_CONST_STORAGE GUI_BITMAP bmAnalog;
     63          extern GUI_CONST_STORAGE GUI_BITMAP bmScale;
     64          extern GUI_CONST_STORAGE GUI_BITMAP bmAlarmText;
     65          extern GUI_CONST_STORAGE GUI_BITMAP bm0;
     66          extern GUI_CONST_STORAGE GUI_BITMAP bm1;
     67          extern GUI_CONST_STORAGE GUI_BITMAP bm2;
     68          extern GUI_CONST_STORAGE GUI_BITMAP bm3;
     69          
     70          /*********************************************************************
     71          *
     72          *       Local Prototypes
     73          *
     74          **********************************************************************
     75          */
     76          void DisplayScale(WM_HWIN);
     77          void DisplayAlarm(WM_HWIN);
     78          void DisplayRenameInput(WM_HWIN hParent);
     79          void RenameInputPaint(WM_HWIN hParent);
     80          void DisplayRenameUnits(WM_HWIN hParent);
     81          void RenameUnitsPaint(WM_HWIN hParent);
     82          void ScalePaint(WM_HWIN);
     83          void AlarmPaint(WM_HWIN);
     84          void SetFilteringText(void);
     85          
     86          
     87          /*********************************************************************
     88          *
     89          *       Tables and Constants
     90          *
     91          **********************************************************************
     92          */
     93          struct SCREEN_LIST AnalogInputSettingsScreenList[NUM_ANALOG_INPUT_SCREENS+1] = {
     94          	{ SCALE, DisplayScale, ScalePaint },
     95          	{ ALARM, DisplayAlarm, AlarmPaint },
     96          	{ RENAME_INPUT, DisplayRenameInput, RenameInputPaint },
     97          	{ RENAME_UNITS, DisplayRenameUnits, RenameUnitsPaint },
     98          	{ -1, NULL, NULL }
     99          };
    100          
    101          #define	LED_1_BUTTON			GUI_ID_USER + 1
    102          #define	LED_2_BUTTON			GUI_ID_USER + 2
    103          #define	ALARM_CONDITION_BUTTON	GUI_ID_USER + 3
    104          #define	ALARM_VALUE_BUTTON		GUI_ID_USER + 4
    105          #define	RENAME_UNITS_BUTTON		GUI_ID_USER + 5
    106          #define	RENAME_HIGH_BUTTON		GUI_ID_USER + 6
    107          #define	RENAME_LOW_BUTTON		GUI_ID_USER + 7
    108          #define	VOLTS_LOW_BUTTON		GUI_ID_USER + 8
    109          #define	VOLTS_HIGH_BUTTON		GUI_ID_USER + 9
    110          #define	VALUE_LOW_BUTTON		GUI_ID_USER + 10
    111          #define	VALUE_HIGH_BUTTON		GUI_ID_USER + 11
    112          #define	VOLTS_RANGE_BUTTON		GUI_ID_USER + 12
    113          #define	UPPER_ALARM_CONDITION_BUTTON	GUI_ID_USER + 13
    114          #define	UPPER_ALARM_VALUE_BUTTON		GUI_ID_USER + 14
    115          #define	FILTERING_LEVEL_BUTTON	GUI_ID_USER + 15
    116          
    117          #define	LEFT_BUTTON_LEFT		25
    118          #define	RIGHT_BUTTON_LEFT		284
    119          #define	ANA_BUTTON_WIDTH		180
    120          #define	TINY_BUTTON_WIDTH		90
    121          #define	ANA_BUTTON_HEIGHT		53
    122          #define	TOP_BUTTON_ROW			76
    123          #define	SECOND_BUTTON_ROW		138
    124          #define	THIRD_BUTTON_ROW		200
    125          #define	ALARM_CONFIG_BOX_H_CENTER	356
    126          #define	ALARM_CONFIG_BOX_H_WIDTH	104
    127          #define	ALARM_CONFIG_ROW_1	55
    128          #define	ALARM_CONFIG_ROW_2	90
    129          #define	ALARM_CONFIG_ROW_3	120
    130          #define	ALARM_CONFIG_ROW_4	180
    131          #define	TOP_ALARM_INDICATOR_ROW			90
    132          #define	SECOND_ALARM_INDICATOR_ROW		150
    133          #define	ALARM_INDICATOR_BUTTON_LEFT		40
    134          
    135          /*********************************************************************
    136          *
    137          *       Local Variables
    138          *
    139          **********************************************************************
    140          */
    141          static WM_HWIN hAnalogInputSettings;

   \                                 In section .bss, align 4
    142          BUTTON_Handle hLED1Button, hLED2Button, hAlarmConditionButton, hAlarmValueButton;
   \                     hLED1Button:
   \   00000000                      DS8 4
   \                     hLED2Button:
   \   00000004                      DS8 4
   \                     hAlarmConditionButton:
   \   00000008                      DS8 4
   \                     hAlarmValueButton:
   \   0000000C                      DS8 4
    143          BUTTON_Handle hUpperAlarmConditionButton, hUpperAlarmValueButton;
   \                     hUpperAlarmConditionButton:
   \   00000010                      DS8 4
   \                     hUpperAlarmValueButton:
   \   00000014                      DS8 4

   \                                 In section .data, align 4
   \                     AnalogInputSettingsScreenList:
   \   00000000   00000000....       DC32 0, DisplayScale, ScalePaint, 1, DisplayAlarm, AlarmPaint, 2
   \              ............
   \              01000000....
   \              ............
   \              02000000    
   \   0000001C   ............       DC32 DisplayRenameInput, RenameInputPaint, 3, DisplayRenameUnits
   \              ....03000000
   \              ........    
   \   0000002C   ........FFFF       DC32 RenameUnitsPaint, -1, 0H, 0H
   \              FFFF00000000
   \              00000000    
   \   0000003C   00000000           DC8 0, 0, 0, 0
    144          BUTTON_Handle hVoltsLowButton, hVoltsHighButton, hValueLowButton, hValueHighButton, hVoltsRangeButton, hFilteringLevelButton;
   \                     hVoltsLowButton:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     hVoltsHighButton:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     hValueLowButton:
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     hValueHighButton:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     hVoltsRangeButton:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     hFilteringLevelButton:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \   00000058   00000000           DC32 0H
   \   0000005C   00000000           DC32 0H
   \   00000060   00000000           DC32 0H
    145          static void *pRenameInput = 0;
    146          static void *pRenameUnits = 0;
    147          static void *pAlarmValue = 0;
    148          char alarmValueString[10+1];
    149          enum UPPER_LOWER gathering;
   \                     gathering:
   \   00000064   00                 DC8 0
   \   00000065   000000             DC8 0, 0, 0
   \                     alarmValueString:
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
    150          
    151          /*********************************************************************
    152          *
    153          *       Public code
    154          *
    155          **********************************************************************
    156          */

   \                                 In section .text, align 4, keep-with-next
    157          WM_HWIN GetAnalogInputSettingsWindowHandle(void)
    158          {
    159          	return hAnalogInputSettings;
   \                     GetAnalogInputSettingsWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable45
   \   00000004   3C0090E5           LDR      R0,[R0, #+60]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    160          }
    161          

   \                                 In section .text, align 4, keep-with-next
    162          void SetAnalogInputSettingsWindowHandle(WM_HWIN hWin)
    163          {
    164          	hAnalogInputSettings = hWin;
   \                     SetAnalogInputSettingsWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable45
   \   00000004   3C0081E5           STR      R0,[R1, #+60]
    165          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    166          

   \                                 In section .text, align 4, keep-with-next
    167          void AISKillKeyboard(void)
    168          {
   \                     AISKillKeyboard:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    169          	InputCleanUpKeyboards();
   \   00000008   ........           BL       InputCleanUpKeyboards
    170          	//if (pAlarmValue)		// Should alwaye be there - but just in case!
    171          	//{
    172          	//	DestroyKeyboard(pAlarmValue);
    173          	//	pAlarmValue = 0;
    174          	//}
    175          	ResumeScreenScrolling();
   \   0000000C   ........           LDR      R0,??DataTable45_1
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   001080E5           STR      R1,[R0, #+0]
    176          	SetScreenType(ANALOG_SETTINGS_SCREEN_TYPE);
   \   00000018   0F00A0E3           MOV      R0,#+15
   \   0000001C   ........           BL       SetScreenType
    177          	WM_InvalidateWindow(hAnalogInputSettings);
   \   00000020   ........           LDR      R0,??DataTable45
   \   00000024   04D08DE2           ADD      SP,SP,#+4
   \   00000028   0040BDE8           POP      {LR}
   \   0000002C   3C0090E5           LDR      R0,[R0, #+60]
   \   00000030   ........           B        WM_InvalidateWindow  ;; tailcall
    178          }
    179          
    180          

   \                                 In section .text, align 4, keep-with-next
    181          void AnalogInputSettingsCallback(WM_MESSAGE * pMsg)
    182          {
   \                     AnalogInputSettingsCallback:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    183          	int NCode, Id;
    184          
    185          	switch(pMsg->MsgId)
   \   00000008   000097E5           LDR      R0,[R7, #+0]
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   3201000A           BEQ      ??AnalogInputSettingsCallback_2
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   4600000A           BEQ      ??AnalogInputSettingsCallback_3
   \   00000020   0C0050E2           SUBS     R0,R0,#+12
   \   00000024   0600000A           BEQ      ??AnalogInputSettingsCallback_4
   \   00000028   010050E2           SUBS     R0,R0,#+1
   \   0000002C   1900000A           BEQ      ??AnalogInputSettingsCallback_5
   \   00000030   0A0050E2           SUBS     R0,R0,#+10
   \   00000034   4D00000A           BEQ      ??AnalogInputSettingsCallback_6
   \   00000038   ED0050E2           SUBS     R0,R0,#+237
   \   0000003C   3300000A           BEQ      ??AnalogInputSettingsCallback_7
   \   00000040   250100EA           B        ??AnalogInputSettingsCallback_8
    186          	{
    187          		case KB_CANCEL_MSG:
    188          			if (pMsg->Data.p == pAlarmValue)
   \                     ??AnalogInputSettingsCallback_4:
   \   00000044   ........           LDR      R6,??DataTable45
   \   00000048   0C0097E5           LDR      R0,[R7, #+12]
   \   0000004C   601096E5           LDR      R1,[R6, #+96]
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   0800001A           BNE      ??AnalogInputSettingsCallback_9
    189          			{
    190          				AISKillKeyboard();
   \                     ??AnalogInputSettingsCallback_10:
   \   00000058   ........           BL       InputCleanUpKeyboards
   \   0000005C   ........           LDR      R0,??DataTable45_1
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   001080E5           STR      R1,[R0, #+0]
   \   00000068   0F00A0E3           MOV      R0,#+15
   \   0000006C   ........           BL       SetScreenType
   \   00000070   3C0096E5           LDR      R0,[R6, #+60]
   \                     ??AnalogInputSettingsCallback_11:
   \   00000074   ........           BL       WM_InvalidateWindow
    191          			}
   \   00000078   190100EA           B        ??AnalogInputSettingsCallback_2
    192          			else DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetLastScreen(INPUTS_SCREENS_TYPE), hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_9:
   \   0000007C   0A00A0E3           MOV      R0,#+10
   \   00000080   ........           BL       GetLastScreen
   \   00000084   3C2096E5           LDR      R2,[R6, #+60]
   \   00000088   0010A0E1           MOV      R1,R0
   \                     ??AnalogInputSettingsCallback_12:
   \   0000008C   0A00A0E3           MOV      R0,#+10
   \                     ??AnalogInputSettingsCallback_13:
   \   00000090   ........           BL       DisplayNewScreenList
   \   00000094   120100EA           B        ??AnalogInputSettingsCallback_2
    193          			break;
    194          
    195          		case KB_SAVE_AND_EXIT_MSG:
    196          			if (pMsg->Data.p == pAlarmValue)
   \                     ??AnalogInputSettingsCallback_5:
   \   00000098   ........           LDR      R6,??DataTable45
   \   0000009C   0C0097E5           LDR      R0,[R7, #+12]
   \   000000A0   601096E5           LDR      R1,[R6, #+96]
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   1300001A           BNE      ??AnalogInputSettingsCallback_14
    197          			{
    198          				if (gathering == UPPER)
   \   000000AC   6400D6E5           LDRB     R0,[R6, #+100]
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   ........           LDR      R4,??DataTable45_2
   \   000000B8   010050E3           CMP      R0,#+1
   \   000000BC   ........           LDR      R5,??DataTable45_3
   \   000000C0   0210A0E1           MOV      R1,R2
   \   000000C4   680086E2           ADD      R0,R6,#+104
   \   000000C8   0500001A           BNE      ??AnalogInputSettingsCallback_15
    199          					vehicleData.analogInput[globalInput].upperAlarmTriggerLevel = atof(alarmValueString);
   \   000000CC   ........           BL       __iar_Stod
   \   000000D0   0020D4E5           LDRB     R2,[R4, #+0]
   \   000000D4   024385E0           ADD      R4,R5,R2, LSL #+6
   \   000000D8   ........           BL       __aeabi_d2f
   \   000000DC   9C0084E5           STR      R0,[R4, #+156]
   \   000000E0   DCFFFFEA           B        ??AnalogInputSettingsCallback_10
    200          				else vehicleData.analogInput[globalInput].lowerAlarmTriggerLevel = atof(alarmValueString);
   \                     ??AnalogInputSettingsCallback_15:
   \   000000E4   ........           BL       __iar_Stod
    201          				AISKillKeyboard();
    202          			}
   \   000000E8   0020D4E5           LDRB     R2,[R4, #+0]
   \   000000EC   024385E0           ADD      R4,R5,R2, LSL #+6
   \   000000F0   ........           BL       __aeabi_d2f
   \   000000F4   980084E5           STR      R0,[R4, #+152]
   \   000000F8   D6FFFFEA           B        ??AnalogInputSettingsCallback_10
    203          			else DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetLastScreen(INPUTS_SCREENS_TYPE), hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_14:
   \   000000FC   0A00A0E3           MOV      R0,#+10
   \   00000100   ........           BL       GetLastScreen
   \   00000104   0010A0E1           MOV      R1,R0
   \   00000108   3C2096E5           LDR      R2,[R6, #+60]
   \   0000010C   DEFFFFEA           B        ??AnalogInputSettingsCallback_12
    204          			break;
    205          
    206          		case WM_TIMER:
    207          			if (pMsg->Data.v == hScreenTimer)
   \                     ??AnalogInputSettingsCallback_7:
   \   00000110   ........           LDR      R0,??DataTable45_4
   \   00000114   0C1097E5           LDR      R1,[R7, #+12]
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   000051E1           CMP      R1,R0
   \   00000120   EF00001A           BNE      ??AnalogInputSettingsCallback_2
    208          			{
    209          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000124   7D10A0E3           MOV      R1,#+125
   \   00000128   ........           BL       WM_RestartTimer
    210          // Do not display icons on these screens - there is not enough room
    211          //				WM_InvalidateRect(pMsg->hWin, &SignalStrengthRect);
    212          				WM_InvalidateRect(pMsg->hWin, &InfoTimeRect);
   \   0000012C   ........           LDR      R1,??DataTable45_5
   \   00000130   040097E5           LDR      R0,[R7, #+4]
   \   00000134   ........           BL       WM_InvalidateRect
   \   00000138   E90000EA           B        ??AnalogInputSettingsCallback_2
    213          			}
    214          			break;
    215          
    216          		case WM_CREATE:
    217          			AnalogInputSettingsIgnoreNextKeyRelease();
    218          			break;
    219          
    220          		case WM_PAINT:
    221          			if (GetScreenType() == ANALOG_SETTINGS_SCREEN_TYPE)
   \                     ??AnalogInputSettingsCallback_3:
   \   0000013C   ........           BL       GetScreenType
   \   00000140   0F0050E3           CMP      R0,#+15
   \   00000144   E600001A           BNE      ??AnalogInputSettingsCallback_2
    222          			{
    223          				// Call paint method of center screen
    224          				AnalogInputSettingsScreenList[GetLastScreen(ANALOG_SETTINGS_SCREEN_TYPE)].paint(hAnalogInputSettings);
   \   00000148   ........           BL       GetLastScreen
   \   0000014C   0010A0E1           MOV      R1,R0
   \   00000150   ........           LDR      R6,??DataTable45
   \   00000154   0C20A0E3           MOV      R2,#+12
   \   00000158   926121E0           MLA      R1,R2,R1,R6
   \   0000015C   3C0096E5           LDR      R0,[R6, #+60]
   \   00000160   081091E5           LDR      R1,[R1, #+8]
   \   00000164   31FF2FE1           BLX      R1
    225          
    226          	// Do not display icons on these screens - there is not enough room
    227          	//			DrawSignalStrength();
    228          				DrawInfo();
   \   00000168   ........           BL       DrawInfo
   \   0000016C   DC0000EA           B        ??AnalogInputSettingsCallback_2
    229          			}
    230          			break;
    231          
    232          		case WM_NOTIFY_PARENT:
    233          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??AnalogInputSettingsCallback_6:
   \   00000170   080097E5           LDR      R0,[R7, #+8]
   \   00000174   ........           BL       WM_GetId
    234          			NCode = pMsg->Data.v;				// Notification code
    235          			switch (NCode)
   \   00000178   0C1097E5           LDR      R1,[R7, #+12]
   \   0000017C   020051E3           CMP      R1,#+2
   \   00000180   D700001A           BNE      ??AnalogInputSettingsCallback_2
    236          			{
    237          				case WM_NOTIFICATION_RELEASED:
    238          					switch (Id)
   \   00000184   010040E2           SUB      R0,R0,#+1
   \   00000188   800E40E2           SUB      R0,R0,#+2048
   \   0000018C   0E0050E3           CMP      R0,#+14
   \   00000190   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??AnalogInputSettingsCallback_0:
   \   00000194   D200008A           BHI      ??AnalogInputSettingsCallback_2
   \   00000198   0D0000EA           B        ??AnalogInputSettingsCallback_16
   \   0000019C   180000EA           B        ??AnalogInputSettingsCallback_17
   \   000001A0   230000EA           B        ??AnalogInputSettingsCallback_18
   \   000001A4   360000EA           B        ??AnalogInputSettingsCallback_19
   \   000001A8   CD0000EA           B        ??AnalogInputSettingsCallback_2
   \   000001AC   CC0000EA           B        ??AnalogInputSettingsCallback_2
   \   000001B0   CB0000EA           B        ??AnalogInputSettingsCallback_2
   \   000001B4   770000EA           B        ??AnalogInputSettingsCallback_20
   \   000001B8   7B0000EA           B        ??AnalogInputSettingsCallback_21
   \   000001BC   7F0000EA           B        ??AnalogInputSettingsCallback_22
   \   000001C0   800000EA           B        ??AnalogInputSettingsCallback_23
   \   000001C4   820000EA           B        ??AnalogInputSettingsCallback_24
   \   000001C8   230000EA           B        ??AnalogInputSettingsCallback_25
   \   000001CC   4E0000EA           B        ??AnalogInputSettingsCallback_26
   \   000001D0   900000EA           B        ??AnalogInputSettingsCallback_27
    239          					{
    240          						case LED_1_BUTTON:
    241          							if (vehicleData.analogInput[globalInput].EnableLED1)
   \                     ??AnalogInputSettingsCallback_16:
   \   000001D4   ........           LDR      R4,??DataTable45_2
   \   000001D8   ........           LDR      R5,??DataTable45_3
   \   000001DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001E0   000385E0           ADD      R0,R5,R0, LSL #+6
   \   000001E4   B410D0E5           LDRB     R1,[R0, #+180]
   \   000001E8   000051E3           CMP      R1,#+0
    242          								vehicleData.analogInput[globalInput].EnableLED1 = false;
   \   000001EC   0010A013           MOVNE    R1,#+0
    243          							else vehicleData.analogInput[globalInput].EnableLED1 = true;
   \   000001F0   0110A003           MOVEQ    R1,#+1
   \   000001F4   B410C0E5           STRB     R1,[R0, #+180]
    244          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \                     ??AnalogInputSettingsCallback_28:
   \   000001F8   080097E5           LDR      R0,[R7, #+8]
   \   000001FC   ........           BL       WM_GetParent
   \   00000200   9BFFFFEA           B        ??AnalogInputSettingsCallback_11
    245          							break;
    246          
    247          						case LED_2_BUTTON:
    248          							if (vehicleData.analogInput[globalInput].EnableLED2)
   \                     ??AnalogInputSettingsCallback_17:
   \   00000204   ........           LDR      R4,??DataTable45_2
   \   00000208   ........           LDR      R5,??DataTable45_3
   \   0000020C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000210   000385E0           ADD      R0,R5,R0, LSL #+6
   \   00000214   B510D0E5           LDRB     R1,[R0, #+181]
   \   00000218   000051E3           CMP      R1,#+0
    249          								vehicleData.analogInput[globalInput].EnableLED2 = false;
   \   0000021C   0010A013           MOVNE    R1,#+0
    250          							else vehicleData.analogInput[globalInput].EnableLED2 = true;
   \   00000220   0110A003           MOVEQ    R1,#+1
   \   00000224   B510C0E5           STRB     R1,[R0, #+181]
    251          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \                     ??AnalogInputSettingsCallback_29:
   \   00000228   080097E5           LDR      R0,[R7, #+8]
   \   0000022C   ........           BL       WM_GetParent
   \   00000230   8FFFFFEA           B        ??AnalogInputSettingsCallback_11
    252          							break;
    253          
    254          						case ALARM_CONDITION_BUTTON:
    255          							switch (vehicleData.analogInput[globalInput].lowerAlarmTriggerComparison)
   \                     ??AnalogInputSettingsCallback_18:
   \   00000234   ........           LDR      R4,??DataTable45_2
   \   00000238   ........           LDR      R5,??DataTable45_3
   \   0000023C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000240   000385E0           ADD      R0,R5,R0, LSL #+6
   \   00000244   9410D0E5           LDRB     R1,[R0, #+148]
   \   00000248   020051E3           CMP      R1,#+2
    256          							{
    257          								case BELOW:
    258          								//	vehicleData.analogInput[globalInput].lowerAlarmTriggerComparison = EQUAL_TO;
    259          								//	break;
    260          								//case EQUAL_TO:
    261          									vehicleData.analogInput[globalInput].lowerAlarmTriggerComparison = OFF;
   \   0000024C   0010A003           MOVEQ    R1,#+0
    262          									break;
    263          								default:			// Catch any other value for safety (OFF, EQUAL_TO, ABOVE)
    264          									vehicleData.analogInput[globalInput].lowerAlarmTriggerComparison = BELOW;
   \   00000250   0210A013           MOVNE    R1,#+2
   \   00000254   9410C0E5           STRB     R1,[R0, #+148]
    265          									break;
    266          							}
    267          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \   00000258   E6FFFFEA           B        ??AnalogInputSettingsCallback_28
    268          							break;
    269          
    270          						case UPPER_ALARM_CONDITION_BUTTON:
    271          							switch (vehicleData.analogInput[globalInput].upperAlarmTriggerComparison)
   \                     ??AnalogInputSettingsCallback_25:
   \   0000025C   ........           LDR      R4,??DataTable45_2
   \   00000260   ........           LDR      R5,??DataTable45_3
   \   00000264   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000268   000385E0           ADD      R0,R5,R0, LSL #+6
   \   0000026C   9510D0E5           LDRB     R1,[R0, #+149]
   \   00000270   010051E3           CMP      R1,#+1
    272          							{
    273          								case ABOVE:
    274          								//	vehicleData.analogInput[globalInput].upperAlarmTriggerComparison = EQUAL_TO;
    275          								//	break;
    276          								//case EQUAL_TO:
    277          									vehicleData.analogInput[globalInput].upperAlarmTriggerComparison = OFF;
   \   00000274   0010A003           MOVEQ    R1,#+0
    278          									break;
    279          								default:			// Catch any other value for safety (OFF, EQUAL_TO, BELOW)
    280          									vehicleData.analogInput[globalInput].upperAlarmTriggerComparison = ABOVE;
   \   00000278   0110A013           MOVNE    R1,#+1
   \   0000027C   9510C0E5           STRB     R1,[R0, #+149]
    281          									break;
    282          							}
    283          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \   00000280   E8FFFFEA           B        ??AnalogInputSettingsCallback_29
    284          							break;
    285          
    286          						case ALARM_VALUE_BUTTON:
    287          							{
    288          								gathering = LOWER;
   \                     ??AnalogInputSettingsCallback_19:
   \   00000284   ........           LDR      R6,??DataTable45
   \   00000288   0040A0E3           MOV      R4,#+0
   \   0000028C   6440C6E5           STRB     R4,[R6, #+100]
    289          								InputCleanUpKeyboards();
   \   00000290   ........           BL       InputCleanUpKeyboards
    290          								sprintf(alarmValueString, "%.2f", vehicleData.analogInput[globalInput].lowerAlarmTriggerLevel);
   \   00000294   ........           LDR      R0,??DataTable45_2
   \   00000298   ........           LDR      R1,??DataTable45_3
   \   0000029C   0000D0E5           LDRB     R0,[R0, #+0]
   \   000002A0   000381E0           ADD      R0,R1,R0, LSL #+6
   \   000002A4   980090E5           LDR      R0,[R0, #+152]
   \   000002A8   ........           BL       __aeabi_f2d
   \   000002AC   0020A0E1           MOV      R2,R0
   \   000002B0   0130A0E1           MOV      R3,R1
   \   000002B4   ............       ADRL     R1,`?<Constant "%.2f">`
   \              ....        
   \   000002BC   680086E2           ADD      R0,R6,#+104
   \   000002C0   ........           BL       sprintf
    291          								pAlarmValue = CreateKeyboard("Enter Lower Alarm Value", alarmValueString, NUMERIC, true, NUMBER_LENGTH, 0, hAnalogInputSettings, false);
   \   000002C4   3C0096E5           LDR      R0,[R6, #+60]
   \   000002C8   0C408DE5           STR      R4,[SP, #+12]
   \   000002CC   08008DE5           STR      R0,[SP, #+8]
   \   000002D0   0900A0E3           MOV      R0,#+9
   \   000002D4   00008DE5           STR      R0,[SP, #+0]
   \   000002D8   04408DE5           STR      R4,[SP, #+4]
   \   000002DC   0130A0E3           MOV      R3,#+1
   \   000002E0   0220A0E3           MOV      R2,#+2
   \   000002E4   681086E2           ADD      R1,R6,#+104
   \   000002E8   ............       ADRL     R0,`?<Constant "Enter Lower Alarm Value">`
   \              ....        
   \   000002F0   ........           BL       CreateKeyboard
   \   000002F4   600086E5           STR      R0,[R6, #+96]
    292          								PauseScreenScrolling();
   \   000002F8   ........           LDR      R0,??DataTable45_1
   \   000002FC   004080E5           STR      R4,[R0, #+0]
    293          								SetScreenType(ANALOG_NUMBER_ENTRY_STANDALONE);
   \                     ??AnalogInputSettingsCallback_30:
   \   00000300   1100A0E3           MOV      R0,#+17
   \   00000304   ........           BL       SetScreenType
    294          							}
    295          							break;
   \   00000308   750000EA           B        ??AnalogInputSettingsCallback_2
    296          
    297          						case UPPER_ALARM_VALUE_BUTTON:
    298          							{
    299          								gathering = UPPER;
   \                     ??AnalogInputSettingsCallback_26:
   \   0000030C   ........           LDR      R6,??DataTable45
   \   00000310   0100A0E3           MOV      R0,#+1
   \   00000314   6400C6E5           STRB     R0,[R6, #+100]
    300          								InputCleanUpKeyboards();
   \   00000318   ........           BL       InputCleanUpKeyboards
    301          								sprintf(alarmValueString, "%.2f", vehicleData.analogInput[globalInput].upperAlarmTriggerLevel);
   \   0000031C   ........           LDR      R0,??DataTable45_2
   \   00000320   ........           LDR      R1,??DataTable45_3
   \   00000324   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000328   000381E0           ADD      R0,R1,R0, LSL #+6
   \   0000032C   9C0090E5           LDR      R0,[R0, #+156]
   \   00000330   ........           BL       __aeabi_f2d
   \   00000334   0020A0E1           MOV      R2,R0
   \   00000338   0130A0E1           MOV      R3,R1
   \   0000033C   ............       ADRL     R1,`?<Constant "%.2f">`
   \              ....        
   \   00000344   680086E2           ADD      R0,R6,#+104
   \   00000348   ........           BL       sprintf
    302          								pAlarmValue = CreateKeyboard("Enter Upper Alarm Value", alarmValueString, NUMERIC, true, NUMBER_LENGTH, 0, hAnalogInputSettings, false);
   \   0000034C   0000A0E3           MOV      R0,#+0
   \   00000350   0C008DE5           STR      R0,[SP, #+12]
   \   00000354   3C0096E5           LDR      R0,[R6, #+60]
   \   00000358   0130A0E3           MOV      R3,#+1
   \   0000035C   08008DE5           STR      R0,[SP, #+8]
   \   00000360   0000A0E3           MOV      R0,#+0
   \   00000364   04008DE5           STR      R0,[SP, #+4]
   \   00000368   0900A0E3           MOV      R0,#+9
   \   0000036C   00008DE5           STR      R0,[SP, #+0]
   \   00000370   0220A0E3           MOV      R2,#+2
   \   00000374   681086E2           ADD      R1,R6,#+104
   \   00000378   ............       ADRL     R0,`?<Constant "Enter Upper Alarm Value">`
   \              ....        
   \   00000380   ........           BL       CreateKeyboard
   \   00000384   600086E5           STR      R0,[R6, #+96]
    303          								PauseScreenScrolling();
   \   00000388   ........           LDR      R0,??DataTable45_1
   \   0000038C   0010A0E3           MOV      R1,#+0
   \   00000390   001080E5           STR      R1,[R0, #+0]
    304          								SetScreenType(ANALOG_NUMBER_ENTRY_STANDALONE);
   \   00000394   D9FFFFEA           B        ??AnalogInputSettingsCallback_30
    305          							}
    306          							break;
    307          
    308          						case VOLTS_LOW_BUTTON:
    309          							DisplayNewScreenList(ANALOG_INPUTS_SCALE, VOLTS_LOW_SCREEN, hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_20:
   \   00000398   ........           LDR      R0,??DataTable45
   \   0000039C   0010A0E3           MOV      R1,#+0
   \                     ??AnalogInputSettingsCallback_31:
   \   000003A0   3C2090E5           LDR      R2,[R0, #+60]
   \   000003A4   1200A0E3           MOV      R0,#+18
   \   000003A8   38FFFFEA           B        ??AnalogInputSettingsCallback_13
    310          							break;
    311          
    312          						case VOLTS_HIGH_BUTTON:
    313          							DisplayNewScreenList(ANALOG_INPUTS_SCALE, VOLTS_HIGH_SCREEN, hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_21:
   \   000003AC   ........           LDR      R0,??DataTable45
   \   000003B0   0110A0E3           MOV      R1,#+1
   \                     ??AnalogInputSettingsCallback_32:
   \   000003B4   3C2090E5           LDR      R2,[R0, #+60]
   \   000003B8   1200A0E3           MOV      R0,#+18
   \   000003BC   33FFFFEA           B        ??AnalogInputSettingsCallback_13
    314          							break;
    315          
    316          						case VALUE_LOW_BUTTON:
    317          							DisplayNewScreenList(ANALOG_INPUTS_SCALE, VALUE_LOW_SCREEN, hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_22:
   \   000003C0   ........           LDR      R0,??DataTable45
   \   000003C4   F5FFFFEA           B        ??AnalogInputSettingsCallback_31
    318          							break;
    319          
    320          						case VALUE_HIGH_BUTTON:
    321          							DisplayNewScreenList(ANALOG_INPUTS_SCALE, VALUE_HIGH_SCREEN, hAnalogInputSettings);
   \                     ??AnalogInputSettingsCallback_23:
   \   000003C8   ........           LDR      R0,??DataTable45
   \   000003CC   0310A0E3           MOV      R1,#+3
   \   000003D0   F7FFFFEA           B        ??AnalogInputSettingsCallback_32
    322          							break;
    323          
    324          						case VOLTS_RANGE_BUTTON:
    325          							if (vehicleData.analogInput[globalInput].inputRange == 5)
   \                     ??AnalogInputSettingsCallback_24:
   \   000003D4   ........           LDR      R4,??DataTable45_2
   \   000003D8   ........           LDR      R5,??DataTable45_3
   \   000003DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003E0   000385E0           ADD      R0,R5,R0, LSL #+6
   \   000003E4   A010D0E5           LDRB     R1,[R0, #+160]
   \   000003E8   050051E3           CMP      R1,#+5
    326          								vehicleData.analogInput[globalInput].inputRange = 10;
   \   000003EC   0A10A003           MOVEQ    R1,#+10
   \   000003F0   0200000A           BEQ      ??AnalogInputSettingsCallback_33
    327          							else if (vehicleData.analogInput[globalInput].inputRange == 10)
   \   000003F4   0A0051E3           CMP      R1,#+10
    328          								vehicleData.analogInput[globalInput].inputRange = 20;
   \   000003F8   1410A003           MOVEQ    R1,#+20
    329          							else vehicleData.analogInput[globalInput].inputRange = 5;
   \   000003FC   0510A013           MOVNE    R1,#+5
   \                     ??AnalogInputSettingsCallback_33:
   \   00000400   A010C0E5           STRB     R1,[R0, #+160]
    330          							WM_InvalidateWindow(WM_GetParent(pMsg->hWinSrc));
   \   00000404   080097E5           LDR      R0,[R7, #+8]
   \   00000408   ........           BL       WM_GetParent
   \   0000040C   ........           BL       WM_InvalidateWindow
    331          							notifyConfigChange();		// Tell SU about change in voltage range
   \   00000410   ........           BL       notifyConfigChange
    332          							break;
   \   00000414   320000EA           B        ??AnalogInputSettingsCallback_2
    333          
    334          						case FILTERING_LEVEL_BUTTON:
    335          							switch (vehicleData.analogInput[globalInput].enabled)
   \                     ??AnalogInputSettingsCallback_27:
   \   00000418   ........           LDR      R4,??DataTable45_2
   \   0000041C   ........           LDR      R5,??DataTable45_3
   \   00000420   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000424   000385E0           ADD      R0,R5,R0, LSL #+6
   \   00000428   9310D0E5           LDRB     R1,[R0, #+147]
   \   0000042C   051041E2           SUB      R1,R1,#+5
   \   00000430   2E0051E3           CMP      R1,#+46
   \   00000434   0D00008A           BHI      ??AnalogInputSettingsCallback_34
   \   00000438   0120DFE7           LDRB     R2,[PC, R1]
   \   0000043C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??AnalogInputSettingsCallback_1:
   \   00000440   0F0B0B0B           DC8      0xF,0xB,0xB,0xB
   \   00000444   0B0B140B           DC8      0xB,0xB,0x14,0xB
   \   00000448   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   0000044C   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000450   190B0B0B           DC8      0x19,0xB,0xB,0xB
   \   00000454   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000458   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   0000045C   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000460   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000464   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000468   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   0000046C   0B0B1E00           DC8      0xB,0xB,0x1E,0x0
    336          							{
    337          							case FILTER_NONE:
    338          							default:		vehicleData.analogInput[globalInput].enabled = FILTER_LOW;				break;
   \                     ??AnalogInputSettingsCallback_34:
   \   00000470   0510A0E3           MOV      R1,#+5
   \   00000474   9310C0E5           STRB     R1,[R0, #+147]
   \   00000478   ........           ADR      R1,??DataTable42  ;; "LOW"
   \   0000047C   120000EA           B        ??AnalogInputSettingsCallback_35
    339          							case FILTER_LOW:		vehicleData.analogInput[globalInput].enabled = FILTER_MEDIUM;	break;
   \                     ??AnalogInputSettingsCallback_36:
   \   00000480   0B10A0E3           MOV      R1,#+11
   \   00000484   9310C0E5           STRB     R1,[R0, #+147]
   \   00000488   ............       ADRL     R1,`?<Constant "MEDIUM">`
   \              ....        
   \   00000490   0D0000EA           B        ??AnalogInputSettingsCallback_35
    340          							case FILTER_MEDIUM:	vehicleData.analogInput[globalInput].enabled = FILTER_HIGH;			break;
   \                     ??AnalogInputSettingsCallback_37:
   \   00000494   1510A0E3           MOV      R1,#+21
   \   00000498   9310C0E5           STRB     R1,[R0, #+147]
   \   0000049C   ............       ADRL     R1,`?<Constant "HIGH">`
   \              ....        
   \   000004A4   080000EA           B        ??AnalogInputSettingsCallback_35
    341          							case FILTER_HIGH:		vehicleData.analogInput[globalInput].enabled = FILTER_VERY_HIGH;break;
   \                     ??AnalogInputSettingsCallback_38:
   \   000004A8   3310A0E3           MOV      R1,#+51
   \   000004AC   9310C0E5           STRB     R1,[R0, #+147]
   \   000004B0   ............       ADRL     R1,`?<Constant "VERY\\nHIGH">`
   \              ....        
   \   000004B8   030000EA           B        ??AnalogInputSettingsCallback_35
    342          							case FILTER_VERY_HIGH:	vehicleData.analogInput[globalInput].enabled = FILTER_NONE;		break;
   \                     ??AnalogInputSettingsCallback_39:
   \   000004BC   0110A0E3           MOV      R1,#+1
   \   000004C0   9310C0E5           STRB     R1,[R0, #+147]
   \   000004C4   ............       ADRL     R1,`?<Constant "NONE">`
   \              ....        
   \                     ??AnalogInputSettingsCallback_35:
   \   000004CC   ........           LDR      R0,??DataTable45
   \   000004D0   540090E5           LDR      R0,[R0, #+84]
   \   000004D4   ........           BL       BUTTON_SetText
    343          							}
    344          							SetFilteringText();
    345          							break;
   \   000004D8   010000EA           B        ??AnalogInputSettingsCallback_2
    346          					}
    347          					break;
    348          			}
    349          			break;
    350          
    351          		default:
    352          			WM_DefaultProc(pMsg);
   \                     ??AnalogInputSettingsCallback_8:
   \   000004DC   0700A0E1           MOV      R0,R7
   \   000004E0   ........           BL       WM_DefaultProc
    353          	}
    354          }
   \                     ??AnalogInputSettingsCallback_2:
   \   000004E4   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000004E8   F080BDE8           POP      {R4-R7,PC}       ;; return
    355          
    356          

   \                                 In section .text, align 4, keep-with-next
    357          void DisplayScale(WM_HWIN hParent)
    358          {
   \                     DisplayScale:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
    359          	BUTTON_SetDefaultBkColor(GUI_RED, BUTTON_BI_UNPRESSED);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   FF00A0E3           MOV      R0,#+255
   \   00000014   ........           BL       BUTTON_SetDefaultBkColor
    360          
    361          	hVoltsLowButton = BUTTON_CreateEx(LEFT_BUTTON_LEFT, TOP_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VOLTS_LOW_BUTTON);
   \   00000018   0800A0E3           MOV      R0,#+8
   \   0000001C   800E80E3           ORR      R0,R0,#0x800
   \   00000020   0C008DE5           STR      R0,[SP, #+12]
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   08008DE5           STR      R0,[SP, #+8]
   \   0000002C   0200A0E3           MOV      R0,#+2
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   00608DE5           STR      R6,[SP, #+0]
   \   00000038   3530A0E3           MOV      R3,#+53
   \   0000003C   B420A0E3           MOV      R2,#+180
   \   00000040   4C10A0E3           MOV      R1,#+76
   \   00000044   1900A0E3           MOV      R0,#+25
   \   00000048   ........           BL       BUTTON_CreateEx
   \   0000004C   ........           LDR      R4,??DataTable45
    362          	BUTTON_SetBitmap(hVoltsLowButton, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   00000050   ........           LDR      R7,??DataTable50
   \   00000054   400084E5           STR      R0,[R4, #+64]
   \   00000058   0720A0E1           MOV      R2,R7
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   ........           BL       BUTTON_SetBitmap
    363          	BUTTON_SetTextColor(hVoltsLowButton, BUTTON_BI_UNPRESSED, GUI_GREEN);
   \   00000064   FF2CA0E3           MOV      R2,#+65280
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   400094E5           LDR      R0,[R4, #+64]
   \   00000070   ........           BL       BUTTON_SetTextColor
    364          	BUTTON_SetTextColor(hVoltsLowButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000074   FF54E0E3           MVN      R5,#-16777216
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   400094E5           LDR      R0,[R4, #+64]
   \   00000084   ........           BL       BUTTON_SetTextColor
    365          	BUTTON_SetSkinClassic(hVoltsLowButton);
   \   00000088   400094E5           LDR      R0,[R4, #+64]
   \   0000008C   ........           BL       BUTTON_SetSkinClassic
    366          
    367          	hVoltsHighButton = BUTTON_CreateEx(LEFT_BUTTON_LEFT, SECOND_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VOLTS_HIGH_BUTTON);
   \   00000090   0900A0E3           MOV      R0,#+9
   \   00000094   800E80E3           ORR      R0,R0,#0x800
   \   00000098   0C008DE5           STR      R0,[SP, #+12]
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   08008DE5           STR      R0,[SP, #+8]
   \   000000A4   0200A0E3           MOV      R0,#+2
   \   000000A8   04008DE5           STR      R0,[SP, #+4]
   \   000000AC   00608DE5           STR      R6,[SP, #+0]
   \   000000B0   3530A0E3           MOV      R3,#+53
   \   000000B4   B420A0E3           MOV      R2,#+180
   \   000000B8   8A10A0E3           MOV      R1,#+138
   \   000000BC   1900A0E3           MOV      R0,#+25
   \   000000C0   ........           BL       BUTTON_CreateEx
   \   000000C4   440084E5           STR      R0,[R4, #+68]
    368          	BUTTON_SetBitmap(hVoltsHighButton, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   000000C8   0720A0E1           MOV      R2,R7
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   ........           BL       BUTTON_SetBitmap
    369          	BUTTON_SetTextColor(hVoltsHighButton, BUTTON_BI_UNPRESSED, GUI_RED);
   \   000000D4   FF20A0E3           MOV      R2,#+255
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   440094E5           LDR      R0,[R4, #+68]
   \   000000E0   ........           BL       BUTTON_SetTextColor
    370          	BUTTON_SetTextColor(hVoltsHighButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000000E4   0520A0E1           MOV      R2,R5
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   440094E5           LDR      R0,[R4, #+68]
   \   000000F0   ........           BL       BUTTON_SetTextColor
    371          	BUTTON_SetSkinClassic(hVoltsHighButton);
   \   000000F4   440094E5           LDR      R0,[R4, #+68]
   \   000000F8   ........           BL       BUTTON_SetSkinClassic
    372          
    373          	hValueLowButton = BUTTON_CreateEx(RIGHT_BUTTON_LEFT, TOP_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VALUE_LOW_BUTTON);
   \   000000FC   0A00A0E3           MOV      R0,#+10
   \   00000100   800E80E3           ORR      R0,R0,#0x800
   \   00000104   0C008DE5           STR      R0,[SP, #+12]
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   08008DE5           STR      R0,[SP, #+8]
   \   00000110   0200A0E3           MOV      R0,#+2
   \   00000114   04008DE5           STR      R0,[SP, #+4]
   \   00000118   00608DE5           STR      R6,[SP, #+0]
   \   0000011C   3530A0E3           MOV      R3,#+53
   \   00000120   B420A0E3           MOV      R2,#+180
   \   00000124   4C10A0E3           MOV      R1,#+76
   \   00000128   470FA0E3           MOV      R0,#+284
   \   0000012C   ........           BL       BUTTON_CreateEx
   \   00000130   480084E5           STR      R0,[R4, #+72]
    374          	BUTTON_SetBitmap(hValueLowButton, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   00000134   0720A0E1           MOV      R2,R7
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   ........           BL       BUTTON_SetBitmap
    375          	BUTTON_SetTextColor(hValueLowButton, BUTTON_BI_UNPRESSED, GUI_GREEN);
   \   00000140   FF2CA0E3           MOV      R2,#+65280
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   480094E5           LDR      R0,[R4, #+72]
   \   0000014C   ........           BL       BUTTON_SetTextColor
    376          	BUTTON_SetTextColor(hValueLowButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000150   0520A0E1           MOV      R2,R5
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   480094E5           LDR      R0,[R4, #+72]
   \   0000015C   ........           BL       BUTTON_SetTextColor
    377          	BUTTON_SetSkinClassic(hValueLowButton);
   \   00000160   480094E5           LDR      R0,[R4, #+72]
   \   00000164   ........           BL       BUTTON_SetSkinClassic
    378          
    379          	hValueHighButton = BUTTON_CreateEx(RIGHT_BUTTON_LEFT, SECOND_BUTTON_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VALUE_HIGH_BUTTON);
   \   00000168   0B00A0E3           MOV      R0,#+11
   \   0000016C   800E80E3           ORR      R0,R0,#0x800
   \   00000170   0C008DE5           STR      R0,[SP, #+12]
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   08008DE5           STR      R0,[SP, #+8]
   \   0000017C   0200A0E3           MOV      R0,#+2
   \   00000180   04008DE5           STR      R0,[SP, #+4]
   \   00000184   00608DE5           STR      R6,[SP, #+0]
   \   00000188   3530A0E3           MOV      R3,#+53
   \   0000018C   B420A0E3           MOV      R2,#+180
   \   00000190   8A10A0E3           MOV      R1,#+138
   \   00000194   470FA0E3           MOV      R0,#+284
   \   00000198   ........           BL       BUTTON_CreateEx
   \   0000019C   4C0084E5           STR      R0,[R4, #+76]
    380          	BUTTON_SetBitmap(hValueHighButton, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   000001A0   0720A0E1           MOV      R2,R7
   \   000001A4   0010A0E3           MOV      R1,#+0
   \   000001A8   ........           BL       BUTTON_SetBitmap
    381          	BUTTON_SetTextColor(hValueHighButton, BUTTON_BI_UNPRESSED, GUI_RED);
   \   000001AC   FF20A0E3           MOV      R2,#+255
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   4C0094E5           LDR      R0,[R4, #+76]
   \   000001B8   ........           BL       BUTTON_SetTextColor
    382          	BUTTON_SetTextColor(hValueHighButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000001BC   0520A0E1           MOV      R2,R5
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   4C0094E5           LDR      R0,[R4, #+76]
   \   000001C8   ........           BL       BUTTON_SetTextColor
    383          	BUTTON_SetSkinClassic(hValueHighButton);
   \   000001CC   4C0094E5           LDR      R0,[R4, #+76]
   \   000001D0   ........           BL       BUTTON_SetSkinClassic
    384          
    385          	hVoltsRangeButton = BUTTON_CreateEx(RIGHT_BUTTON_LEFT, THIRD_BUTTON_ROW, TINY_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VOLTS_RANGE_BUTTON);
   \   000001D4   0C00A0E3           MOV      R0,#+12
   \   000001D8   800E80E3           ORR      R0,R0,#0x800
   \   000001DC   0C008DE5           STR      R0,[SP, #+12]
   \   000001E0   0000A0E3           MOV      R0,#+0
   \   000001E4   08008DE5           STR      R0,[SP, #+8]
   \   000001E8   0200A0E3           MOV      R0,#+2
   \   000001EC   04008DE5           STR      R0,[SP, #+4]
   \   000001F0   00608DE5           STR      R6,[SP, #+0]
   \   000001F4   3530A0E3           MOV      R3,#+53
   \   000001F8   5A20A0E3           MOV      R2,#+90
   \   000001FC   C810A0E3           MOV      R1,#+200
   \   00000200   470FA0E3           MOV      R0,#+284
   \   00000204   ........           BL       BUTTON_CreateEx
    386          	BUTTON_SetBitmap(hVoltsRangeButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   00000208   ........           LDR      R7,??DataTable51
   \   0000020C   500084E5           STR      R0,[R4, #+80]
   \   00000210   0720A0E1           MOV      R2,R7
   \   00000214   0010A0E3           MOV      R1,#+0
   \   00000218   ........           BL       BUTTON_SetBitmap
    387          	BUTTON_SetTextColor(hVoltsRangeButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   0000021C   0520A0E1           MOV      R2,R5
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   500094E5           LDR      R0,[R4, #+80]
   \   00000228   ........           BL       BUTTON_SetTextColor
    388          	BUTTON_SetTextColor(hVoltsRangeButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   0000022C   0520A0E1           MOV      R2,R5
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   500094E5           LDR      R0,[R4, #+80]
   \   00000238   ........           BL       BUTTON_SetTextColor
    389          	BUTTON_SetSkinClassic(hVoltsRangeButton);
   \   0000023C   500094E5           LDR      R0,[R4, #+80]
   \   00000240   ........           BL       BUTTON_SetSkinClassic
    390          
    391          	hFilteringLevelButton = BUTTON_CreateEx(LEFT_BUTTON_LEFT + ANA_BUTTON_WIDTH - TINY_BUTTON_WIDTH - 1, THIRD_BUTTON_ROW, TINY_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, FILTERING_LEVEL_BUTTON);
   \   00000244   0F00A0E3           MOV      R0,#+15
   \   00000248   800E80E3           ORR      R0,R0,#0x800
   \   0000024C   0C008DE5           STR      R0,[SP, #+12]
   \   00000250   0000A0E3           MOV      R0,#+0
   \   00000254   08008DE5           STR      R0,[SP, #+8]
   \   00000258   0200A0E3           MOV      R0,#+2
   \   0000025C   04008DE5           STR      R0,[SP, #+4]
   \   00000260   00608DE5           STR      R6,[SP, #+0]
   \   00000264   3530A0E3           MOV      R3,#+53
   \   00000268   5A20A0E3           MOV      R2,#+90
   \   0000026C   C810A0E3           MOV      R1,#+200
   \   00000270   7200A0E3           MOV      R0,#+114
   \   00000274   ........           BL       BUTTON_CreateEx
   \   00000278   540084E5           STR      R0,[R4, #+84]
    392          	BUTTON_SetBitmap(hFilteringLevelButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   0000027C   0720A0E1           MOV      R2,R7
   \   00000280   0010A0E3           MOV      R1,#+0
   \   00000284   ........           BL       BUTTON_SetBitmap
    393          	BUTTON_SetTextColor(hFilteringLevelButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000288   0520A0E1           MOV      R2,R5
   \   0000028C   0010A0E3           MOV      R1,#+0
   \   00000290   540094E5           LDR      R0,[R4, #+84]
   \   00000294   ........           BL       BUTTON_SetTextColor
    394          	BUTTON_SetTextColor(hFilteringLevelButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000298   0520A0E1           MOV      R2,R5
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   540094E5           LDR      R0,[R4, #+84]
   \   000002A4   ........           BL       BUTTON_SetTextColor
    395          	BUTTON_SetSkinClassic(hFilteringLevelButton);
   \   000002A8   540094E5           LDR      R0,[R4, #+84]
   \   000002AC   14D08DE2           ADD      SP,SP,#+20
   \   000002B0   F040BDE8           POP      {R4-R7,LR}
   \   000002B4   ........           B        BUTTON_SetSkinClassic  ;; tailcall
    396          }
    397          

   \                                 In section .text, align 4, keep-with-next
    398          void ScalePaint(WM_HWIN hParent)
    399          {
   \                     ScalePaint:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    400          	char scratch[30];
    401          	GUI_CONST_STORAGE GUI_BITMAP *pBanner;
    402          
    403          	GUI_SetFont(&GUI_Font24_ASCII);
   \   00000008   ........           LDR      R0,??DataTable51_1
   \   0000000C   ........           BL       GUI_SetFont
    404          	GUI_SetColor(GUI_WHITE);
   \   00000010   FF04E0E3           MVN      R0,#-16777216
   \   00000014   ........           BL       GUI_SetColor
    405          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   ........           BL       GUI_SetTextMode
    406          
    407          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   ........           LDR      R0,??DataTable51_2
   \   0000002C   ........           BL       GUI_DrawBitmap
    408          
    409          	switch (globalInput)
   \   00000030   ........           LDR      R4,??DataTable45_2
   \   00000034   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000038   010050E3           CMP      R0,#+1
   \   0000003C   0500000A           BEQ      ??ScalePaint_1
   \   00000040   0200003A           BCC      ??ScalePaint_2
   \   00000044   030050E3           CMP      R0,#+3
   \   00000048   0600000A           BEQ      ??ScalePaint_3
   \   0000004C   0300003A           BCC      ??ScalePaint_4
    410          	{
    411          	default:
    412          	case 0:	pBanner = &bm0;	break;
   \                     ??ScalePaint_2:
   \   00000050   ........           LDR      R5,??DataTable51_3
   \   00000054   040000EA           B        ??ScalePaint_5
    413          	case 1:	pBanner = &bm1;	break;
   \                     ??ScalePaint_1:
   \   00000058   ........           LDR      R5,??DataTable51_4
   \   0000005C   020000EA           B        ??ScalePaint_5
    414          	case 2:	pBanner = &bm2;	break;
   \                     ??ScalePaint_4:
   \   00000060   ........           LDR      R5,??DataTable51_5
   \   00000064   000000EA           B        ??ScalePaint_5
    415          	case 3:	pBanner = &bm3;	break;
   \                     ??ScalePaint_3:
   \   00000068   ........           LDR      R5,??DataTable51_6
    416          	}
    417          	GUI_DrawBitmap(&bmAnalog, 0, 0);
   \                     ??ScalePaint_5:
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   ........           LDR      R0,??DataTable51_7
   \   00000078   ........           BL       GUI_DrawBitmap
    418          	GUI_DrawBitmap(pBanner, 224, 0);
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   E010A0E3           MOV      R1,#+224
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       GUI_DrawBitmap
    419          	GUI_DrawBitmap(&bmScale, 253, 0);
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   FD10A0E3           MOV      R1,#+253
   \   00000094   ........           LDR      R0,??DataTable51_8
   \   00000098   ........           BL       GUI_DrawBitmap
    420          
    421          	GUI_DispStringHCenterAt("Volts", LEFT_BUTTON_LEFT + (ANA_BUTTON_WIDTH/2), TOP_BUTTON_ROW - 28);
   \   0000009C   3020A0E3           MOV      R2,#+48
   \   000000A0   7310A0E3           MOV      R1,#+115
   \   000000A4   ............       ADRL     R0,`?<Constant "Volts">`
   \              ....        
   \   000000AC   ........           BL       GUI_DispStringHCenterAt
    422          	GUI_DispStringHCenterAt("Value", RIGHT_BUTTON_LEFT + (ANA_BUTTON_WIDTH/2), TOP_BUTTON_ROW - 28);
   \   000000B0   7610A0E3           MOV      R1,#+118
   \   000000B4   3020A0E3           MOV      R2,#+48
   \   000000B8   401F81E3           ORR      R1,R1,#0x100
   \   000000BC   ............       ADRL     R0,`?<Constant "Value">`
   \              ....        
   \   000000C4   ........           BL       GUI_DispStringHCenterAt
    423          
    424          	GUI_DispStringHCenterAt("LOW", 245, TOP_BUTTON_ROW + 15);
   \   000000C8   ........           ADR      R9,??DataTable44  ;; "LOW"
   \   000000CC   5B20A0E3           MOV      R2,#+91
   \   000000D0   F510A0E3           MOV      R1,#+245
   \   000000D4   0900A0E1           MOV      R0,R9
   \   000000D8   ........           BL       GUI_DispStringHCenterAt
    425          	GUI_DispStringHCenterAt("HIGH", 245, SECOND_BUTTON_ROW + 15);
   \   000000DC   ............       ADRL     R8,`?<Constant "HIGH">`
   \              ....        
   \   000000E4   9920A0E3           MOV      R2,#+153
   \   000000E8   F510A0E3           MOV      R1,#+245
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   ........           BL       GUI_DispStringHCenterAt
    426          
    427          	sprintf(scratch, "%f", vehicleData.analogInput[globalInput].lowVoltagePoint);
   \   000000F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000F8   ........           LDR      R6,??DataTable45_3
   \   000000FC   ........           ADR      R5,??DataTable44_1  ;; 0x25, 0x66, 0x00, 0x00
   \   00000100   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000104   A40090E5           LDR      R0,[R0, #+164]
   \   00000108   ........           BL       __aeabi_f2d
   \   0000010C   0020A0E1           MOV      R2,R0
   \   00000110   0130A0E1           MOV      R3,R1
   \   00000114   0510A0E1           MOV      R1,R5
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           BL       sprintf
    428          	trimn(scratch, NUMBER_LENGTH);
   \   00000120   0910A0E3           MOV      R1,#+9
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           BL       trimn
    429          	BUTTON_SetText(hVoltsLowButton, scratch);
   \   0000012C   ........           LDR      R7,??DataTable45
   \   00000130   0D10A0E1           MOV      R1,SP
   \   00000134   400097E5           LDR      R0,[R7, #+64]
   \   00000138   ........           BL       BUTTON_SetText
    430          
    431          	sprintf(scratch, "%f", vehicleData.analogInput[globalInput].highVoltagePoint);
   \   0000013C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000140   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000144   A80090E5           LDR      R0,[R0, #+168]
   \   00000148   ........           BL       __aeabi_f2d
   \   0000014C   0020A0E1           MOV      R2,R0
   \   00000150   0130A0E1           MOV      R3,R1
   \   00000154   0510A0E1           MOV      R1,R5
   \   00000158   0D00A0E1           MOV      R0,SP
   \   0000015C   ........           BL       sprintf
    432          	trimn(scratch, NUMBER_LENGTH);
   \   00000160   0910A0E3           MOV      R1,#+9
   \   00000164   0D00A0E1           MOV      R0,SP
   \   00000168   ........           BL       trimn
    433          	BUTTON_SetText(hVoltsHighButton, scratch);
   \   0000016C   0D10A0E1           MOV      R1,SP
   \   00000170   440097E5           LDR      R0,[R7, #+68]
   \   00000174   ........           BL       BUTTON_SetText
    434          
    435          	sprintf(scratch, "%f", vehicleData.analogInput[globalInput].lowValuePoint);
   \   00000178   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000017C   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000180   AC0090E5           LDR      R0,[R0, #+172]
   \   00000184   ........           BL       __aeabi_f2d
   \   00000188   0020A0E1           MOV      R2,R0
   \   0000018C   0130A0E1           MOV      R3,R1
   \   00000190   0510A0E1           MOV      R1,R5
   \   00000194   0D00A0E1           MOV      R0,SP
   \   00000198   ........           BL       sprintf
    436          	trimn(scratch, NUMBER_LENGTH);
   \   0000019C   0910A0E3           MOV      R1,#+9
   \   000001A0   0D00A0E1           MOV      R0,SP
   \   000001A4   ........           BL       trimn
    437          	BUTTON_SetText(hValueLowButton, scratch);
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   480097E5           LDR      R0,[R7, #+72]
   \   000001B0   ........           BL       BUTTON_SetText
    438          
    439          	sprintf(scratch, "%f", vehicleData.analogInput[globalInput].highValuePoint);
   \   000001B4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001B8   000386E0           ADD      R0,R6,R0, LSL #+6
   \   000001BC   B00090E5           LDR      R0,[R0, #+176]
   \   000001C0   ........           BL       __aeabi_f2d
   \   000001C4   0020A0E1           MOV      R2,R0
   \   000001C8   0130A0E1           MOV      R3,R1
   \   000001CC   0510A0E1           MOV      R1,R5
   \   000001D0   0D00A0E1           MOV      R0,SP
   \   000001D4   ........           BL       sprintf
    440          	trimn(scratch, NUMBER_LENGTH);
   \   000001D8   0910A0E3           MOV      R1,#+9
   \   000001DC   0D00A0E1           MOV      R0,SP
   \   000001E0   ........           BL       trimn
    441          	BUTTON_SetText(hValueHighButton, scratch);
   \   000001E4   0D10A0E1           MOV      R1,SP
   \   000001E8   4C0097E5           LDR      R0,[R7, #+76]
   \   000001EC   ........           BL       BUTTON_SetText
    442          
    443          	GUI_DispStringAt("Voltage", RIGHT_BUTTON_LEFT + TINY_BUTTON_WIDTH + 10, THIRD_BUTTON_ROW + 4);
   \   000001F0   CC20A0E3           MOV      R2,#+204
   \   000001F4   601FA0E3           MOV      R1,#+384
   \   000001F8   ............       ADRL     R0,`?<Constant "Voltage">`
   \              ....        
   \   00000200   ........           BL       GUI_DispStringAt
    444          	GUI_DispStringAt("Range", RIGHT_BUTTON_LEFT + TINY_BUTTON_WIDTH + 10, THIRD_BUTTON_ROW + 26);
   \   00000204   E220A0E3           MOV      R2,#+226
   \   00000208   601FA0E3           MOV      R1,#+384
   \   0000020C   ............       ADRL     R0,`?<Constant "Range">`
   \              ....        
   \   00000214   ........           BL       GUI_DispStringAt
    445          	GUI_DispStringAt("Filtering", LEFT_BUTTON_LEFT + 5, THIRD_BUTTON_ROW + 4);
   \   00000218   CC20A0E3           MOV      R2,#+204
   \   0000021C   1E10A0E3           MOV      R1,#+30
   \   00000220   ............       ADRL     R0,`?<Constant "Filtering">`
   \              ....        
   \   00000228   ........           BL       GUI_DispStringAt
    446          	GUI_DispStringAt("Level", LEFT_BUTTON_LEFT + 28, THIRD_BUTTON_ROW + 26);
   \   0000022C   E220A0E3           MOV      R2,#+226
   \   00000230   3510A0E3           MOV      R1,#+53
   \   00000234   ............       ADRL     R0,`?<Constant "Level">`
   \              ....        
   \   0000023C   ........           BL       GUI_DispStringAt
   \   00000240   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000244   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000248   A010D0E5           LDRB     R1,[R0, #+160]
   \   0000024C   000051E3           CMP      R1,#+0
    447          
    448          	if (vehicleData.analogInput[globalInput].inputRange == 0)
    449          		vehicleData.analogInput[globalInput].inputRange = 10;
   \   00000250   0A10A003           MOVEQ    R1,#+10
   \   00000254   A010C005           STRBEQ   R1,[R0, #+160]
    450          	sprintf(scratch, "%d", vehicleData.analogInput[globalInput].inputRange);
   \   00000258   A020D0E5           LDRB     R2,[R0, #+160]
   \   0000025C   ........           ADR      R1,??DataTable44_2  ;; 0x25, 0x64, 0x00, 0x00
   \   00000260   0D00A0E1           MOV      R0,SP
   \   00000264   ........           BL       sprintf
    451          	BUTTON_SetText(hVoltsRangeButton, scratch);
   \   00000268   0D10A0E1           MOV      R1,SP
   \   0000026C   500097E5           LDR      R0,[R7, #+80]
   \   00000270   ........           BL       BUTTON_SetText
    452          
    453          	SetFilteringText();
   \   00000274   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000278   000386E0           ADD      R0,R6,R0, LSL #+6
   \   0000027C   9300D0E5           LDRB     R0,[R0, #+147]
   \   00000280   050040E2           SUB      R0,R0,#+5
   \   00000284   2E0050E3           CMP      R0,#+46
   \   00000288   1700008A           BHI      ??ScalePaint_6
   \   0000028C   0010DFE7           LDRB     R1,[PC, R0]
   \   00000290   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ScalePaint_0:
   \   00000294   13151515           DC8      0x13,0x15,0x15,0x15
   \   00000298   15151015           DC8      0x15,0x15,0x10,0x15
   \   0000029C   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002A0   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002A4   0E151515           DC8      0xE,0x15,0x15,0x15
   \   000002A8   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002AC   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002B0   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002B4   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002B8   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002BC   15151515           DC8      0x15,0x15,0x15,0x15
   \   000002C0   15150B00           DC8      0x15,0x15,0xB,0x0
   \                     ??ScalePaint_7:
   \   000002C4   ............       ADRL     R1,`?<Constant "VERY\\nHIGH">`
   \              ....        
   \   000002CC   080000EA           B        ??ScalePaint_8
   \                     ??ScalePaint_9:
   \   000002D0   0810A0E1           MOV      R1,R8
   \   000002D4   060000EA           B        ??ScalePaint_8
   \                     ??ScalePaint_10:
   \   000002D8   ............       ADRL     R1,`?<Constant "MEDIUM">`
   \              ....        
   \   000002E0   030000EA           B        ??ScalePaint_8
   \                     ??ScalePaint_11:
   \   000002E4   0910A0E1           MOV      R1,R9
   \   000002E8   010000EA           B        ??ScalePaint_8
   \                     ??ScalePaint_6:
   \   000002EC   ............       ADRL     R1,`?<Constant "NONE">`
   \              ....        
   \                     ??ScalePaint_8:
   \   000002F4   540097E5           LDR      R0,[R7, #+84]
   \   000002F8   ........           BL       BUTTON_SetText
    454          
    455          	GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   000002FC   E520A0E3           MOV      R2,#+229
   \   00000300   0010A0E3           MOV      R1,#+0
   \   00000304   ........           LDR      R0,??DataTable51_9
   \   00000308   ........           BL       GUI_DrawBitmap
    456          }
   \   0000030C   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000310   F083BDE8           POP      {R4-R9,PC}       ;; return
    457          

   \                                 In section .text, align 4, keep-with-next
    458          void SetFilteringText(void)
    459          {
    460          	char *pText;
    461          
    462          	switch (vehicleData.analogInput[globalInput].enabled)
   \                     SetFilteringText:
   \   00000000   ........           LDR      R0,??DataTable45_2
   \   00000004   ........           LDR      R1,??DataTable45_3
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000010   9300D0E5           LDRB     R0,[R0, #+147]
   \   00000014   050040E2           SUB      R0,R0,#+5
   \   00000018   2E0050E3           CMP      R0,#+46
   \   0000001C   0D00008A           BHI      ??SetFilteringText_1
   \   00000020   0010DFE7           LDRB     R1,[PC, R0]
   \   00000024   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??SetFilteringText_0:
   \   00000028   0E0B0B0B           DC8      0xE,0xB,0xB,0xB
   \   0000002C   0B0B100B           DC8      0xB,0xB,0x10,0xB
   \   00000030   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000034   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000038   130B0B0B           DC8      0x13,0xB,0xB,0xB
   \   0000003C   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000040   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000044   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000048   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   0000004C   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000050   0B0B0B0B           DC8      0xB,0xB,0xB,0xB
   \   00000054   0B0B1600           DC8      0xB,0xB,0x16,0x0
    463          	{
    464          	case FILTER_NONE:
    465          	default:				pText = "NONE";		break;
   \                     ??SetFilteringText_1:
   \   00000058   ............       ADRL     R1,`?<Constant "NONE">`
   \              ....        
   \   00000060   090000EA           B        ??SetFilteringText_2
    466          	case FILTER_LOW:		pText = "LOW";		break;
   \                     ??SetFilteringText_3:
   \   00000064   ........           ADR      R1,??DataTable44  ;; "LOW"
   \   00000068   070000EA           B        ??SetFilteringText_2
    467          	case FILTER_MEDIUM:		pText = "MEDIUM";	break;
   \                     ??SetFilteringText_4:
   \   0000006C   ............       ADRL     R1,`?<Constant "MEDIUM">`
   \              ....        
   \   00000074   040000EA           B        ??SetFilteringText_2
    468          	case FILTER_HIGH:		pText = "HIGH";		break;
   \                     ??SetFilteringText_5:
   \   00000078   ............       ADRL     R1,`?<Constant "HIGH">`
   \              ....        
   \   00000080   010000EA           B        ??SetFilteringText_2
    469          	case FILTER_VERY_HIGH:	pText = "VERY\nHIGH";break;
   \                     ??SetFilteringText_6:
   \   00000084   ............       ADRL     R1,`?<Constant "VERY\\nHIGH">`
   \              ....        
    470          	}
    471          	BUTTON_SetText(hFilteringLevelButton, pText);
   \                     ??SetFilteringText_2:
   \   0000008C   ........           LDR      R0,??DataTable49
   \   00000090   540090E5           LDR      R0,[R0, #+84]
   \   00000094   ........           B        BUTTON_SetText   ;; tailcall
    472          }
    473          

   \                                 In section .text, align 4, keep-with-next
    474          void DisplayAlarm(WM_HWIN hParent)
    475          {
   \                     DisplayAlarm:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   10D04DE2           SUB      SP,SP,#+16
    476          	BUTTON_SetDefaultBkColor(GUI_BLACK, BUTTON_BI_UNPRESSED);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       BUTTON_SetDefaultBkColor
    477          
    478          	hLED1Button = BUTTON_CreateEx(ALARM_INDICATOR_BUTTON_LEFT, TOP_ALARM_INDICATOR_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, LED_1_BUTTON);
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   800E80E3           ORR      R0,R0,#0x800
   \   00000020   0C008DE5           STR      R0,[SP, #+12]
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   08008DE5           STR      R0,[SP, #+8]
   \   0000002C   0200A0E3           MOV      R0,#+2
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   00508DE5           STR      R5,[SP, #+0]
   \   00000038   3530A0E3           MOV      R3,#+53
   \   0000003C   B420A0E3           MOV      R2,#+180
   \   00000040   5A10A0E3           MOV      R1,#+90
   \   00000044   2800A0E3           MOV      R0,#+40
   \   00000048   ........           BL       BUTTON_CreateEx
   \   0000004C   ........           LDR      R4,??DataTable51_10
    479          	BUTTON_SetBitmap(hLED1Button, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   00000050   ........           LDR      R6,??DataTable50
   \   00000054   000084E5           STR      R0,[R4, #+0]
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   ........           BL       BUTTON_SetBitmap
    480          	BUTTON_SetSkinClassic(hLED1Button);
   \   00000064   000094E5           LDR      R0,[R4, #+0]
   \   00000068   ........           BL       BUTTON_SetSkinClassic
    481          
    482          	hLED2Button = BUTTON_CreateEx(ALARM_INDICATOR_BUTTON_LEFT, SECOND_ALARM_INDICATOR_ROW, ANA_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, LED_2_BUTTON);
   \   0000006C   0200A0E3           MOV      R0,#+2
   \   00000070   800E80E3           ORR      R0,R0,#0x800
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   04008DE5           STR      R0,[SP, #+4]
   \   00000088   00508DE5           STR      R5,[SP, #+0]
   \   0000008C   3530A0E3           MOV      R3,#+53
   \   00000090   B420A0E3           MOV      R2,#+180
   \   00000094   9610A0E3           MOV      R1,#+150
   \   00000098   2800A0E3           MOV      R0,#+40
   \   0000009C   ........           BL       BUTTON_CreateEx
   \   000000A0   040084E5           STR      R0,[R4, #+4]
    483          	BUTTON_SetBitmap(hLED2Button, BUTTON_BI_UNPRESSED, &bmMiniButton);
   \   000000A4   0620A0E1           MOV      R2,R6
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   ........           BL       BUTTON_SetBitmap
    484          	BUTTON_SetSkinClassic(hLED2Button);
   \   000000B0   040094E5           LDR      R0,[R4, #+4]
   \   000000B4   ........           BL       BUTTON_SetSkinClassic
    485          
    486          	hAlarmConditionButton = BUTTON_CreateEx(ALARM_CONFIG_BOX_H_CENTER - 95, ALARM_CONFIG_ROW_3, TINY_BUTTON_WIDTH, 
    487          		ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, ALARM_CONDITION_BUTTON);
   \   000000B8   0300A0E3           MOV      R0,#+3
   \   000000BC   800E80E3           ORR      R0,R0,#0x800
   \   000000C0   0C008DE5           STR      R0,[SP, #+12]
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   08008DE5           STR      R0,[SP, #+8]
   \   000000CC   0580A0E3           MOV      R8,#+5
   \   000000D0   0200A0E3           MOV      R0,#+2
   \   000000D4   408F88E3           ORR      R8,R8,#0x100
   \   000000D8   04008DE5           STR      R0,[SP, #+4]
   \   000000DC   00508DE5           STR      R5,[SP, #+0]
   \   000000E0   3530A0E3           MOV      R3,#+53
   \   000000E4   5A20A0E3           MOV      R2,#+90
   \   000000E8   7810A0E3           MOV      R1,#+120
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   ........           BL       BUTTON_CreateEx
    488          	BUTTON_SetBitmap(hAlarmConditionButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   000000F4   ........           LDR      R6,??DataTable51
   \   000000F8   080084E5           STR      R0,[R4, #+8]
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   ........           BL       BUTTON_SetBitmap
    489          	BUTTON_SetTextColor(hAlarmConditionButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000108   FF74E0E3           MVN      R7,#-16777216
   \   0000010C   0720A0E1           MOV      R2,R7
   \   00000110   0010A0E3           MOV      R1,#+0
   \   00000114   080094E5           LDR      R0,[R4, #+8]
   \   00000118   ........           BL       BUTTON_SetTextColor
    490          	BUTTON_SetTextColor(hAlarmConditionButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   0000011C   0720A0E1           MOV      R2,R7
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   080094E5           LDR      R0,[R4, #+8]
   \   00000128   ........           BL       BUTTON_SetTextColor
    491          	BUTTON_SetSkinClassic(hAlarmConditionButton);
   \   0000012C   080094E5           LDR      R0,[R4, #+8]
   \   00000130   ........           BL       BUTTON_SetSkinClassic
    492          
    493          	hAlarmValueButton = BUTTON_CreateEx(ALARM_CONFIG_BOX_H_CENTER - 95, ALARM_CONFIG_ROW_4, TINY_BUTTON_WIDTH, 
    494          		ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, ALARM_VALUE_BUTTON);
   \   00000134   0400A0E3           MOV      R0,#+4
   \   00000138   800E80E3           ORR      R0,R0,#0x800
   \   0000013C   0C008DE5           STR      R0,[SP, #+12]
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   08008DE5           STR      R0,[SP, #+8]
   \   00000148   0200A0E3           MOV      R0,#+2
   \   0000014C   04008DE5           STR      R0,[SP, #+4]
   \   00000150   00508DE5           STR      R5,[SP, #+0]
   \   00000154   3530A0E3           MOV      R3,#+53
   \   00000158   5A20A0E3           MOV      R2,#+90
   \   0000015C   B410A0E3           MOV      R1,#+180
   \   00000160   0800A0E1           MOV      R0,R8
   \   00000164   ........           BL       BUTTON_CreateEx
   \   00000168   0C0084E5           STR      R0,[R4, #+12]
    495          	BUTTON_SetBitmap(hAlarmValueButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   0000016C   0620A0E1           MOV      R2,R6
   \   00000170   0010A0E3           MOV      R1,#+0
   \   00000174   ........           BL       BUTTON_SetBitmap
    496          	BUTTON_SetTextColor(hAlarmValueButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000178   0720A0E1           MOV      R2,R7
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   0C0094E5           LDR      R0,[R4, #+12]
   \   00000184   ........           BL       BUTTON_SetTextColor
    497          	BUTTON_SetTextColor(hAlarmValueButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000188   0720A0E1           MOV      R2,R7
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   0C0094E5           LDR      R0,[R4, #+12]
   \   00000194   ........           BL       BUTTON_SetTextColor
    498          	BUTTON_SetSkinClassic(hAlarmValueButton);
   \   00000198   0C0094E5           LDR      R0,[R4, #+12]
   \   0000019C   ........           BL       BUTTON_SetSkinClassic
    499          
    500          	hUpperAlarmConditionButton = BUTTON_CreateEx(ALARM_CONFIG_BOX_H_CENTER + 5, ALARM_CONFIG_ROW_3, 
    501          		TINY_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, UPPER_ALARM_CONDITION_BUTTON);
   \   000001A0   0D00A0E3           MOV      R0,#+13
   \   000001A4   800E80E3           ORR      R0,R0,#0x800
   \   000001A8   0C008DE5           STR      R0,[SP, #+12]
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   08008DE5           STR      R0,[SP, #+8]
   \   000001B4   0200A0E3           MOV      R0,#+2
   \   000001B8   648088E2           ADD      R8,R8,#+100
   \   000001BC   04008DE5           STR      R0,[SP, #+4]
   \   000001C0   00508DE5           STR      R5,[SP, #+0]
   \   000001C4   3530A0E3           MOV      R3,#+53
   \   000001C8   5A20A0E3           MOV      R2,#+90
   \   000001CC   7810A0E3           MOV      R1,#+120
   \   000001D0   0800A0E1           MOV      R0,R8
   \   000001D4   ........           BL       BUTTON_CreateEx
   \   000001D8   100084E5           STR      R0,[R4, #+16]
    502          	BUTTON_SetBitmap(hUpperAlarmConditionButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   0010A0E3           MOV      R1,#+0
   \   000001E4   ........           BL       BUTTON_SetBitmap
    503          	BUTTON_SetTextColor(hUpperAlarmConditionButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000001E8   0720A0E1           MOV      R2,R7
   \   000001EC   0010A0E3           MOV      R1,#+0
   \   000001F0   100094E5           LDR      R0,[R4, #+16]
   \   000001F4   ........           BL       BUTTON_SetTextColor
    504          	BUTTON_SetTextColor(hUpperAlarmConditionButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000001F8   0720A0E1           MOV      R2,R7
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   100094E5           LDR      R0,[R4, #+16]
   \   00000204   ........           BL       BUTTON_SetTextColor
    505          	BUTTON_SetSkinClassic(hUpperAlarmConditionButton);
   \   00000208   100094E5           LDR      R0,[R4, #+16]
   \   0000020C   ........           BL       BUTTON_SetSkinClassic
    506          
    507          	hUpperAlarmValueButton = BUTTON_CreateEx(ALARM_CONFIG_BOX_H_CENTER + 5, ALARM_CONFIG_ROW_4, 
    508          		TINY_BUTTON_WIDTH, ANA_BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, UPPER_ALARM_VALUE_BUTTON);
   \   00000210   0E00A0E3           MOV      R0,#+14
   \   00000214   800E80E3           ORR      R0,R0,#0x800
   \   00000218   0C008DE5           STR      R0,[SP, #+12]
   \   0000021C   0000A0E3           MOV      R0,#+0
   \   00000220   08008DE5           STR      R0,[SP, #+8]
   \   00000224   0200A0E3           MOV      R0,#+2
   \   00000228   04008DE5           STR      R0,[SP, #+4]
   \   0000022C   00508DE5           STR      R5,[SP, #+0]
   \   00000230   3530A0E3           MOV      R3,#+53
   \   00000234   5A20A0E3           MOV      R2,#+90
   \   00000238   B410A0E3           MOV      R1,#+180
   \   0000023C   0800A0E1           MOV      R0,R8
   \   00000240   ........           BL       BUTTON_CreateEx
   \   00000244   140084E5           STR      R0,[R4, #+20]
    509          	BUTTON_SetBitmap(hUpperAlarmValueButton, BUTTON_BI_UNPRESSED, &bmTinyBlackButton);
   \   00000248   0620A0E1           MOV      R2,R6
   \   0000024C   0010A0E3           MOV      R1,#+0
   \   00000250   ........           BL       BUTTON_SetBitmap
    510          	BUTTON_SetTextColor(hUpperAlarmValueButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000254   0720A0E1           MOV      R2,R7
   \   00000258   0010A0E3           MOV      R1,#+0
   \   0000025C   140094E5           LDR      R0,[R4, #+20]
   \   00000260   ........           BL       BUTTON_SetTextColor
    511          	BUTTON_SetTextColor(hUpperAlarmValueButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000264   0720A0E1           MOV      R2,R7
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   140094E5           LDR      R0,[R4, #+20]
   \   00000270   ........           BL       BUTTON_SetTextColor
    512          	BUTTON_SetSkinClassic(hUpperAlarmValueButton);
   \   00000274   140094E5           LDR      R0,[R4, #+20]
   \   00000278   10D08DE2           ADD      SP,SP,#+16
   \   0000027C   F041BDE8           POP      {R4-R8,LR}
   \   00000280   ........           B        BUTTON_SetSkinClassic  ;; tailcall
    513          }
    514          

   \                                 In section .text, align 4, keep-with-next
    515          void AlarmPaint(WM_HWIN hParent)
    516          {
   \                     AlarmPaint:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    517          	char scratch[30];
    518          	GUI_CONST_STORAGE GUI_BITMAP *pBanner;
    519          
    520          	GUI_SetFont(&GUI_Font24_ASCII);
   \   00000008   ........           LDR      R0,??DataTable51_1
   \   0000000C   ........           BL       GUI_SetFont
    521          	GUI_SetColor(GUI_WHITE);
   \   00000010   FF74E0E3           MVN      R7,#-16777216
   \   00000014   0700A0E1           MOV      R0,R7
   \   00000018   ........           BL       GUI_SetColor
    522          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   0000001C   0200A0E3           MOV      R0,#+2
   \   00000020   ........           BL       GUI_SetTextMode
    523          
    524          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           LDR      R0,??DataTable51_2
   \   00000030   ........           BL       GUI_DrawBitmap
    525          	//sprintf(scratch, "Edit Alarm %d", globalInput);
    526          	//GUI_DispStringHCenterAt(scratch, XSIZE_PHYS/2, 7);
    527          	switch (globalInput)
   \   00000034   ........           LDR      R4,??DataTable51_11
   \   00000038   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000003C   010050E3           CMP      R0,#+1
   \   00000040   0500000A           BEQ      ??AlarmPaint_0
   \   00000044   0200003A           BCC      ??AlarmPaint_1
   \   00000048   030050E3           CMP      R0,#+3
   \   0000004C   0600000A           BEQ      ??AlarmPaint_2
   \   00000050   0300003A           BCC      ??AlarmPaint_3
    528          	{
    529          	default:
    530          	case 0:	pBanner = &bm0;	break;
   \                     ??AlarmPaint_1:
   \   00000054   ........           LDR      R5,??DataTable51_3
   \   00000058   040000EA           B        ??AlarmPaint_4
    531          	case 1:	pBanner = &bm1;	break;
   \                     ??AlarmPaint_0:
   \   0000005C   ........           LDR      R5,??DataTable51_4
   \   00000060   020000EA           B        ??AlarmPaint_4
    532          	case 2:	pBanner = &bm2;	break;
   \                     ??AlarmPaint_3:
   \   00000064   ........           LDR      R5,??DataTable51_5
   \   00000068   000000EA           B        ??AlarmPaint_4
    533          	case 3:	pBanner = &bm3;	break;
   \                     ??AlarmPaint_2:
   \   0000006C   ........           LDR      R5,??DataTable51_6
    534          	}
    535          	GUI_DrawBitmap(&bmAnalog, 0, 0);
   \                     ??AlarmPaint_4:
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           LDR      R0,??DataTable51_7
   \   0000007C   ........           BL       GUI_DrawBitmap
    536          	GUI_DrawBitmap(pBanner, 224, 0);
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   E010A0E3           MOV      R1,#+224
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       GUI_DrawBitmap
    537          	GUI_DrawBitmap(&bmAlarmText, 253, 0);
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   FD10A0E3           MOV      R1,#+253
   \   00000098   ........           LDR      R0,??DataTable51_12
   \   0000009C   ........           BL       GUI_DrawBitmap
    538          
    539          
    540          	// Draw grouping rectangle around Alarm LED Indicator Configuration buttons
    541          	GUI_DrawRoundedRect(28, 50, 233, 255, 10);
   \   000000A0   0A00A0E3           MOV      R0,#+10
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   FF30A0E3           MOV      R3,#+255
   \   000000AC   E920A0E3           MOV      R2,#+233
   \   000000B0   3210A0E3           MOV      R1,#+50
   \   000000B4   1C00A0E3           MOV      R0,#+28
   \   000000B8   ........           BL       GUI_DrawRoundedRect
    542          	GUI_DispStringHCenterAt("Alarm Indicator", 131, ALARM_CONFIG_ROW_1);
   \   000000BC   3720A0E3           MOV      R2,#+55
   \   000000C0   8310A0E3           MOV      R1,#+131
   \   000000C4   ............       ADRL     R0,`?<Constant "Alarm Indicator">`
   \              ....        
   \   000000CC   ........           BL       GUI_DispStringHCenterAt
    543          
    544          	// Draw grouping rectangle around Alarm Trigger Configuration buttons
    545          	GUI_DrawRoundedRect(252, 50, 460, 255, 10);
   \   000000D0   0A00A0E3           MOV      R0,#+10
   \   000000D4   00008DE5           STR      R0,[SP, #+0]
   \   000000D8   FF30A0E3           MOV      R3,#+255
   \   000000DC   732FA0E3           MOV      R2,#+460
   \   000000E0   3210A0E3           MOV      R1,#+50
   \   000000E4   FC00A0E3           MOV      R0,#+252
   \   000000E8   ........           BL       GUI_DrawRoundedRect
    546          	GUI_DispStringHCenterAt("Alarm Level", ALARM_CONFIG_BOX_H_CENTER, ALARM_CONFIG_ROW_1);
   \   000000EC   3720A0E3           MOV      R2,#+55
   \   000000F0   591FA0E3           MOV      R1,#+356
   \   000000F4   ............       ADRL     R0,`?<Constant "Alarm Level">`
   \              ....        
   \   000000FC   ........           BL       GUI_DispStringHCenterAt
    547          	GUI_DispStringHCenterAt("Lower", ALARM_CONFIG_BOX_H_CENTER - (ALARM_CONFIG_BOX_H_WIDTH/2), ALARM_CONFIG_ROW_2);
   \   00000100   5A20A0E3           MOV      R2,#+90
   \   00000104   4C1FA0E3           MOV      R1,#+304
   \   00000108   ............       ADRL     R0,`?<Constant "Lower">`
   \              ....        
   \   00000110   ........           BL       GUI_DispStringHCenterAt
    548          	GUI_DispStringHCenterAt("Upper", ALARM_CONFIG_BOX_H_CENTER + (ALARM_CONFIG_BOX_H_WIDTH/2), ALARM_CONFIG_ROW_2);
   \   00000114   5A20A0E3           MOV      R2,#+90
   \   00000118   661FA0E3           MOV      R1,#+408
   \   0000011C   ............       ADRL     R0,`?<Constant "Upper">`
   \              ....        
   \   00000124   ........           BL       GUI_DispStringHCenterAt
    549          
    550          	if (vehicleData.analogInput[globalInput].EnableLED1)
   \   00000128   0010D4E5           LDRB     R1,[R4, #+0]
   \   0000012C   ........           LDR      R6,??DataTable51_13
   \   00000130   ........           LDR      R5,??DataTable51_10
   \   00000134   011386E0           ADD      R1,R6,R1, LSL #+6
   \   00000138   B410D1E5           LDRB     R1,[R1, #+180]
   \   0000013C   000095E5           LDR      R0,[R5, #+0]
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   0900000A           BEQ      ??AlarmPaint_5
    551          	{
    552          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_UNPRESSED, GUI_RED);
   \   00000148   FF20A0E3           MOV      R2,#+255
   \   0000014C   0010A0E3           MOV      R1,#+0
   \   00000150   ........           BL       BUTTON_SetTextColor
    553          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_PRESSED, GUI_RED);
   \   00000154   FF20A0E3           MOV      R2,#+255
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   000095E5           LDR      R0,[R5, #+0]
   \   00000160   ........           BL       BUTTON_SetTextColor
    554          		BUTTON_SetText(hLED1Button, "LED 1 Enabled");
   \   00000164   ............       ADRL     R1,`?<Constant "LED 1 Enabled">`
   \              ....        
   \   0000016C   070000EA           B        ??AlarmPaint_6
    555          	}
    556          	else
    557          	{
    558          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \                     ??AlarmPaint_5:
   \   00000170   0720A0E1           MOV      R2,R7
   \   00000174   ........           BL       BUTTON_SetTextColor
    559          		BUTTON_SetTextColor(hLED1Button, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000178   0720A0E1           MOV      R2,R7
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   000095E5           LDR      R0,[R5, #+0]
   \   00000184   ........           BL       BUTTON_SetTextColor
    560          		BUTTON_SetText(hLED1Button, "LED 1 Disabled");
   \   00000188   ............       ADRL     R1,`?<Constant "LED 1 Disabled">`
   \              ....        
   \                     ??AlarmPaint_6:
   \   00000190   000095E5           LDR      R0,[R5, #+0]
   \   00000194   ........           BL       BUTTON_SetText
    561          	}
    562          
    563          	if (vehicleData.analogInput[globalInput].EnableLED2)
   \   00000198   0010D4E5           LDRB     R1,[R4, #+0]
   \   0000019C   040095E5           LDR      R0,[R5, #+4]
   \   000001A0   011386E0           ADD      R1,R6,R1, LSL #+6
   \   000001A4   B510D1E5           LDRB     R1,[R1, #+181]
   \   000001A8   000051E3           CMP      R1,#+0
   \   000001AC   0900000A           BEQ      ??AlarmPaint_7
    564          	{
    565          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_UNPRESSED, GUI_RED);
   \   000001B0   FF20A0E3           MOV      R2,#+255
   \   000001B4   0010A0E3           MOV      R1,#+0
   \   000001B8   ........           BL       BUTTON_SetTextColor
    566          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_PRESSED, GUI_RED);
   \   000001BC   FF20A0E3           MOV      R2,#+255
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   040095E5           LDR      R0,[R5, #+4]
   \   000001C8   ........           BL       BUTTON_SetTextColor
    567          		BUTTON_SetText(hLED2Button, "LED 2 Enabled");
   \   000001CC   ............       ADRL     R1,`?<Constant "LED 2 Enabled">`
   \              ....        
   \   000001D4   070000EA           B        ??AlarmPaint_8
    568          	}
    569          	else
    570          	{
    571          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \                     ??AlarmPaint_7:
   \   000001D8   0720A0E1           MOV      R2,R7
   \   000001DC   ........           BL       BUTTON_SetTextColor
    572          		BUTTON_SetTextColor(hLED2Button, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000001E0   0720A0E1           MOV      R2,R7
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   040095E5           LDR      R0,[R5, #+4]
   \   000001EC   ........           BL       BUTTON_SetTextColor
    573          		BUTTON_SetText(hLED2Button, "LED 2 Disabled");
   \   000001F0   ............       ADRL     R1,`?<Constant "LED 2 Disabled">`
   \              ....        
   \                     ??AlarmPaint_8:
   \   000001F8   040095E5           LDR      R0,[R5, #+4]
   \   000001FC   ........           BL       BUTTON_SetText
    574          	}
    575          
    576          	BUTTON_SetText(hAlarmConditionButton, GetAlarmTriggerText(globalInput, LOWER));
   \   00000200   0010A0E3           MOV      R1,#+0
   \   00000204   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000208   ........           BL       GetAlarmTriggerText
   \   0000020C   0010A0E1           MOV      R1,R0
   \   00000210   080095E5           LDR      R0,[R5, #+8]
   \   00000214   ........           BL       BUTTON_SetText
    577          	BUTTON_SetText(hUpperAlarmConditionButton, GetAlarmTriggerText(globalInput, UPPER));
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000220   ........           BL       GetAlarmTriggerText
   \   00000224   0010A0E1           MOV      R1,R0
   \   00000228   100095E5           LDR      R0,[R5, #+16]
   \   0000022C   ........           BL       BUTTON_SetText
    578          
    579          //	sprintf(scratch, "%d", vehicleData.analogInput[globalInput].lowerAlarmTriggerLevel);
    580          	sprintf(scratch, "%.2f", vehicleData.analogInput[globalInput].lowerAlarmTriggerLevel);
   \   00000230   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000234   ............       ADRL     R7,`?<Constant "%.2f">`
   \              ....        
   \   0000023C   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000240   980090E5           LDR      R0,[R0, #+152]
   \   00000244   ........           BL       __aeabi_f2d
   \   00000248   0020A0E1           MOV      R2,R0
   \   0000024C   0130A0E1           MOV      R3,R1
   \   00000250   0710A0E1           MOV      R1,R7
   \   00000254   04008DE2           ADD      R0,SP,#+4
   \   00000258   ........           BL       sprintf
    581          	BUTTON_SetText(hAlarmValueButton, scratch);
   \   0000025C   04108DE2           ADD      R1,SP,#+4
   \   00000260   0C0095E5           LDR      R0,[R5, #+12]
   \   00000264   ........           BL       BUTTON_SetText
    582          	sprintf(scratch, "%.2f", vehicleData.analogInput[globalInput].upperAlarmTriggerLevel);
   \   00000268   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000026C   000386E0           ADD      R0,R6,R0, LSL #+6
   \   00000270   9C0090E5           LDR      R0,[R0, #+156]
   \   00000274   ........           BL       __aeabi_f2d
   \   00000278   0020A0E1           MOV      R2,R0
   \   0000027C   0130A0E1           MOV      R3,R1
   \   00000280   0710A0E1           MOV      R1,R7
   \   00000284   04008DE2           ADD      R0,SP,#+4
   \   00000288   ........           BL       sprintf
    583          	BUTTON_SetText(hUpperAlarmValueButton, scratch);
   \   0000028C   04108DE2           ADD      R1,SP,#+4
   \   00000290   140095E5           LDR      R0,[R5, #+20]
   \   00000294   ........           BL       BUTTON_SetText
    584          
    585          	GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   00000298   E520A0E3           MOV      R2,#+229
   \   0000029C   0010A0E3           MOV      R1,#+0
   \   000002A0   ........           LDR      R0,??DataTable51_9
   \   000002A4   ........           BL       GUI_DrawBitmap
    586          }
   \   000002A8   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000002AC   F080BDE8           POP      {R4-R7,PC}       ;; return
    587          
    588          

   \                                 In section .text, align 4, keep-with-next
    589          void DisplayRenameInput(WM_HWIN hParent)
    590          {
   \                     DisplayRenameInput:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
    591          	char scratch[30];
    592          
    593          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    594          	////if (pRenameInput)
    595          	////	DestroyKeyboard(pRenameInput);
    596          
    597          	sprintf(scratch, "Rename Input %d", globalInput);
   \   00000010   ........           LDR      R5,??DataTable51_11
   \   00000014   ............       ADRL     R1,`?<Constant "Rename Input %d">`
   \              ....        
   \   0000001C   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           BL       sprintf
    598          	pRenameInput = CreateKeyboard(scratch, vehicleData.analogInput[globalInput].Name, ALPHA, false, IONAMELEN, RENAME_INPUT, hParent, true);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
   \   00000030   0200A0E3           MOV      R0,#+2
   \   00000034   04008DE5           STR      R0,[SP, #+4]
   \   00000038   0C00A0E3           MOV      R0,#+12
   \   0000003C   00008DE5           STR      R0,[SP, #+0]
   \   00000040   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000044   ........           LDR      R1,??DataTable51_13
   \   00000048   08408DE5           STR      R4,[SP, #+8]
   \   0000004C   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000050   781080E2           ADD      R1,R0,#+120
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   0120A0E3           MOV      R2,#+1
   \   0000005C   10008DE2           ADD      R0,SP,#+16
   \   00000060   ........           BL       CreateKeyboard
   \   00000064   ........           LDR      R1,??DataTable49
    599          }
   \   00000068   34D08DE2           ADD      SP,SP,#+52
   \   0000006C   580081E5           STR      R0,[R1, #+88]
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    600          

   \                                 In section .text, align 4, keep-with-next
    601          void RenameInputPaint(WM_HWIN hParent)
    602          {
    603          }
   \                     RenameInputPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    604          

   \                                 In section .text, align 4, keep-with-next
    605          void DisplayRenameUnits(WM_HWIN hParent)
    606          {
   \                     DisplayRenameUnits:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
    607          	char scratch[30];
    608          
    609          	InputCleanUpKeyboards();
   \   0000000C   ........           BL       InputCleanUpKeyboards
    610          	////if (pRenameUnits)
    611          	////	DestroyKeyboard(pRenameUnits);
    612          
    613          	sprintf(scratch, "Rename Units %d", globalInput);
   \   00000010   ........           LDR      R5,??DataTable51_11
   \   00000014   ............       ADRL     R1,`?<Constant "Rename Units %d">`
   \              ....        
   \   0000001C   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           BL       sprintf
    614          	pRenameUnits = CreateKeyboard(scratch, vehicleData.analogInput[globalInput].Units, ALPHA, false, MAX_UNITS-1, RENAME_UNITS, hParent, true);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
   \   00000030   0300A0E3           MOV      R0,#+3
   \   00000034   04008DE5           STR      R0,[SP, #+4]
   \   00000038   0900A0E3           MOV      R0,#+9
   \   0000003C   00008DE5           STR      R0,[SP, #+0]
   \   00000040   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000044   ........           LDR      R1,??DataTable51_13
   \   00000048   08408DE5           STR      R4,[SP, #+8]
   \   0000004C   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000050   891080E2           ADD      R1,R0,#+137
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   0120A0E3           MOV      R2,#+1
   \   0000005C   10008DE2           ADD      R0,SP,#+16
   \   00000060   ........           BL       CreateKeyboard
   \   00000064   ........           LDR      R1,??DataTable49
    615          }
   \   00000068   34D08DE2           ADD      SP,SP,#+52
   \   0000006C   5C0081E5           STR      R0,[R1, #+92]
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    616          

   \                                 In section .text, align 4, keep-with-next
    617          void RenameUnitsPaint(WM_HWIN hParent)
    618          {
    619          }
   \                     RenameUnitsPaint:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    620          
    621          

   \                                 In section .text, align 4, keep-with-next
    622          void AnalogInputSettingsIgnoreNextKeyRelease(void)
    623          {
    624          //	clickedOnThisScreen = false;
    625          }
   \                     AnalogInputSettingsIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    626          
    627          

   \                                 In section .text, align 4, keep-with-next
    628          void DeleteAnalogKeyboards(void)
    629          {
   \                     DeleteAnalogKeyboards:
   \   00000000   10402DE9           PUSH     {R4,LR}
    630          	DeleteAnalogScaleKeyboards();
   \   00000004   ........           BL       DeleteAnalogScaleKeyboards
    631          	if (pAlarmValue)		// Should alwaye be there - but just in case!
   \   00000008   ........           LDR      R4,??DataTable49
   \   0000000C   600094E5           LDR      R0,[R4, #+96]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      ??DeleteAnalogKeyboards_0
    632          	{
    633          		DestroyKeyboard(pAlarmValue);
   \   00000018   ........           BL       DestroyKeyboard
    634          		pAlarmValue = 0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   600084E5           STR      R0,[R4, #+96]
    635          	}
    636          	if (pRenameUnits)
   \                     ??DeleteAnalogKeyboards_0:
   \   00000024   5C0094E5           LDR      R0,[R4, #+92]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0200000A           BEQ      ??DeleteAnalogKeyboards_1
    637          	{
    638          		DestroyKeyboard(pRenameUnits);
   \   00000030   ........           BL       DestroyKeyboard
    639          		pRenameUnits = 0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   5C0084E5           STR      R0,[R4, #+92]
    640          	}
    641          	if (pRenameInput)
   \                     ??DeleteAnalogKeyboards_1:
   \   0000003C   580094E5           LDR      R0,[R4, #+88]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200000A           BEQ      ??DeleteAnalogKeyboards_2
    642          	{
    643          		DestroyKeyboard(pRenameInput);
   \   00000048   ........           BL       DestroyKeyboard
    644          		pRenameInput = 0;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   580084E5           STR      R0,[R4, #+88]
    645          	}
    646          }
   \                     ??DeleteAnalogKeyboards_2:
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    647          
    648          enum INVALIDANALOGDATASCREENS {
    649          	RANGE_TOO_HIGH,
    650          	RANGE_IN_WRONG_ORDER,
    651          	ALARM_IN_WRONG_ORDER
    652          };
    653          
    654          int InvalidAnalogDataPopUp(enum INVALIDANALOGDATASCREENS screen);
    655          
    656          //
    657          // Validate that the voltage ranges are in the correct order and that they are within the selected range.
    658          //
    659          // Returns: true - carry on
    660          //			false - go back so the user can fix it
    661          //

   \                                 In section .text, align 4, keep-with-next
    662          char ValidateAnalogData(void)
    663          {
   \                     ValidateAnalogData:
   \   00000000   10402DE9           PUSH     {R4,LR}
    664          	ANALOG_INPUT_STRUCTURE *pData;
    665          
    666          	pData = &vehicleData.analogInput[globalInput];
   \   00000004   ........           LDR      R0,??DataTable51_11
   \   00000008   ........           LDR      R1,??DataTable51_13
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   000381E0           ADD      R0,R1,R0, LSL #+6
   \   00000018   784080E2           ADD      R4,R0,#+120
    667          
    668          	if (pData->highVoltagePoint <= pData->lowVoltagePoint)
   \   0000001C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000020   301094E5           LDR      R1,[R4, #+48]
   \   00000024   ........           BL       __aeabi_cfrcmple
   \   00000028   1D00008A           BHI      ??ValidateAnalogData_0
    669          	{
    670          		if (InvalidAnalogDataPopUp(RANGE_IN_WRONG_ORDER) == GUI_ID_CANCEL)
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   ........           BL       SetPopupDefaults
   \   00000034   ........           BL       WM_GetDesktopWindow
   \   00000038   0A10A0E3           MOV      R1,#+10
   \   0000003C   04108DE5           STR      R1,[SP, #+4]
   \   00000040   00108DE5           STR      R1,[SP, #+0]
   \   00000044   0030A0E1           MOV      R3,R0
   \   00000048   ........           LDR      R2,??DataTable51_14
   \   0000004C   0610A0E3           MOV      R1,#+6
   \   00000050   ............       ADRL     R0,InvalidOrderResources
   \              ....        
   \   00000058   ........           BL       GUI_ExecDialogBox
   \   0000005C   020050E3           CMP      R0,#+2
   \   00000060   0100001A           BNE      ??ValidateAnalogData_1
    671          			return false;
   \                     ??ValidateAnalogData_2:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   500000EA           B        ??ValidateAnalogData_3
    672          		else
    673          		{
    674          			// Auto-fix the data
    675          			if (pData->highVoltagePoint == pData->lowVoltagePoint)
   \                     ??ValidateAnalogData_1:
   \   0000006C   2C2094E5           LDR      R2,[R4, #+44]
   \   00000070   303094E5           LDR      R3,[R4, #+48]
   \   00000074   0210A0E1           MOV      R1,R2
   \   00000078   0300A0E1           MOV      R0,R3
   \   0000007C   ........           BL       __aeabi_cfcmpeq
   \   00000080   0500001A           BNE      ??ValidateAnalogData_4
    676          			{
    677          				pData->highVoltagePoint = (float)pData->inputRange;
   \   00000084   2800D4E5           LDRB     R0,[R4, #+40]
   \   00000088   ........           BL       __aeabi_ui2f
   \   0000008C   300084E5           STR      R0,[R4, #+48]
    678          				pData->lowVoltagePoint = 0.0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   2C0084E5           STR      R0,[R4, #+44]
   \   00000098   010000EA           B        ??ValidateAnalogData_0
    679          			}
    680          			else
    681          			{
    682          				float temp;
    683          
    684          				temp = pData->highVoltagePoint;
    685          				pData->highVoltagePoint = pData->lowVoltagePoint;
   \                     ??ValidateAnalogData_4:
   \   0000009C   302084E5           STR      R2,[R4, #+48]
    686          				pData->lowVoltagePoint = temp;
   \   000000A0   2C3084E5           STR      R3,[R4, #+44]
    687          			}
    688          		}
    689          	}
    690          	if ((pData->highVoltagePoint > pData->inputRange) || (pData->lowVoltagePoint < 0.0))
   \                     ??ValidateAnalogData_0:
   \   000000A4   2800D4E5           LDRB     R0,[R4, #+40]
   \   000000A8   ........           BL       __aeabi_ui2f
   \   000000AC   301094E5           LDR      R1,[R4, #+48]
   \   000000B0   ........           BL       __aeabi_cfcmple
   \   000000B4   0300003A           BCC      ??ValidateAnalogData_5
   \   000000B8   2C0094E5           LDR      R0,[R4, #+44]
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   ........           BL       __aeabi_cfcmple
   \   000000C4   1D00002A           BCS      ??ValidateAnalogData_6
    691          	{
    692          		if (InvalidAnalogDataPopUp(RANGE_TOO_HIGH) == GUI_ID_CANCEL)
   \                     ??ValidateAnalogData_5:
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   ........           BL       SetPopupDefaults
   \   000000D0   ........           BL       WM_GetDesktopWindow
   \   000000D4   0030A0E1           MOV      R3,R0
   \   000000D8   0A00A0E3           MOV      R0,#+10
   \   000000DC   04008DE5           STR      R0,[SP, #+4]
   \   000000E0   00008DE5           STR      R0,[SP, #+0]
   \   000000E4   ........           LDR      R2,??DataTable51_14
   \   000000E8   0610A0E3           MOV      R1,#+6
   \   000000EC   ............       ADRL     R0,InvalidRangeResources
   \              ....        
   \   000000F4   ........           BL       GUI_ExecDialogBox
   \   000000F8   020050E3           CMP      R0,#+2
   \   000000FC   D8FFFF0A           BEQ      ??ValidateAnalogData_2
    693          			return false;
    694          		else
    695          		{
    696          			// Auto-fix the data
    697          			if (pData->lowVoltagePoint < 0.0)
   \   00000100   2C0094E5           LDR      R0,[R4, #+44]
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   ........           BL       __aeabi_cfcmple
    698          				pData->lowVoltagePoint = 0.0;
   \   0000010C   2C108435           STRCC    R1,[R4, #+44]
   \   00000110   2800D4E5           LDRB     R0,[R4, #+40]
   \   00000114   ........           BL       __aeabi_ui2f
   \   00000118   301094E5           LDR      R1,[R4, #+48]
   \   0000011C   ........           BL       __aeabi_cfcmple
   \   00000120   0020A0E1           MOV      R2,R0
   \   00000124   0500002A           BCS      ??ValidateAnalogData_6
    699          			if (pData->highVoltagePoint > pData->inputRange)
    700          			{
    701          				pData->highVoltagePoint = (float)pData->inputRange;	// Check to see if we introduced a new error
   \   00000128   302084E5           STR      R2,[R4, #+48]
    702          				if (pData->highVoltagePoint <= pData->lowVoltagePoint)
   \   0000012C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000130   0210A0E1           MOV      R1,R2
   \   00000134   ........           BL       __aeabi_cfrcmple
    703          					pData->lowVoltagePoint = 0.0;			// Auto-fix the data
   \   00000138   0000A093           MOVLS    R0,#+0
   \   0000013C   2C008495           STRLS    R0,[R4, #+44]
    704          			}
    705          		}
    706          	}
    707          
    708          	// Validate alarm settings
    709          	if ((pData->lowerAlarmTriggerComparison == BELOW) && (pData->upperAlarmTriggerComparison == ABOVE))
   \                     ??ValidateAnalogData_6:
   \   00000140   1C00D4E5           LDRB     R0,[R4, #+28]
   \   00000144   020050E3           CMP      R0,#+2
   \   00000148   1D00D405           LDRBEQ   R0,[R4, #+29]
   \   0000014C   01005003           CMPEQ    R0,#+1
   \   00000150   1500001A           BNE      ??ValidateAnalogData_7
    710          	{
    711          		if (pData->lowerAlarmTriggerLevel > pData->upperAlarmTriggerLevel)
   \   00000154   240094E5           LDR      R0,[R4, #+36]
   \   00000158   201094E5           LDR      R1,[R4, #+32]
   \   0000015C   ........           BL       __aeabi_cfcmple
   \   00000160   1100002A           BCS      ??ValidateAnalogData_7
    712          		{
    713          			if (InvalidAnalogDataPopUp(ALARM_IN_WRONG_ORDER) == GUI_ID_CANCEL)
   \   00000164   0100A0E3           MOV      R0,#+1
   \   00000168   ........           BL       SetPopupDefaults
   \   0000016C   ........           BL       WM_GetDesktopWindow
   \   00000170   0A10A0E3           MOV      R1,#+10
   \   00000174   04108DE5           STR      R1,[SP, #+4]
   \   00000178   00108DE5           STR      R1,[SP, #+0]
   \   0000017C   0030A0E1           MOV      R3,R0
   \   00000180   ........           LDR      R2,??DataTable51_14
   \   00000184   0610A0E3           MOV      R1,#+6
   \   00000188   ............       ADRL     R0,InvalidAlarmOrderResources
   \              ....        
   \   00000190   ........           BL       GUI_ExecDialogBox
   \   00000194   020050E3           CMP      R0,#+2
   \   00000198   B1FFFF0A           BEQ      ??ValidateAnalogData_2
    714          				return false;
    715          			else // Auto-fix the data
    716          			{
    717          				float temp;
    718          
    719          				temp = pData->lowerAlarmTriggerLevel;
    720          				pData->lowerAlarmTriggerLevel = pData->upperAlarmTriggerLevel;
   \   0000019C   241094E5           LDR      R1,[R4, #+36]
   \   000001A0   200094E5           LDR      R0,[R4, #+32]
   \   000001A4   201084E5           STR      R1,[R4, #+32]
    721          				pData->upperAlarmTriggerLevel = temp;
   \   000001A8   240084E5           STR      R0,[R4, #+36]
    722          			}
    723          		}
    724          	}
    725          
    726          	return true;
   \                     ??ValidateAnalogData_7:
   \   000001AC   0100A0E3           MOV      R0,#+1
   \                     ??ValidateAnalogData_3:
   \   000001B0   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000001B4   1080BDE8           POP      {R4,PC}          ;; return
    727          }
    728          

   \                                 In section .text, align 4, keep-with-next
    729          static const GUI_WIDGET_CREATE_INFO InvalidRangeResources[] = {
   \                     InvalidRangeResources:
   \   00000000                      ; Initializer data, 144 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Settings Error">`
   \              ....        
   \   00000008   000028001400       DC16 0, 40, 20, 380, 220, 0
   \              7C01DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "The specified voltage...">`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "outside the selected ...">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Would you like to aut...">`
   \              ....        
   \   00000050   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Auto-fix">`
   \              ....        
   \   00000068   010023007300       DC16 1, 35, 115, 120, 60
   \              78003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000078   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Go Back">`
   \              ....        
   \   00000080   0200C3007300       DC16 2, 195, 115, 120, 60
   \              78003C00    
   \   0000008A   000000000000       DC8 0, 0, 0, 0, 0, 0
    730          	{ FRAMEWIN_CreateIndirect, "Settings Error", 0, 40, 20, 380, 220, 0, 0 },
    731          	{ TEXT_CreateIndirect, "The specified voltage values are", 0, 0, 10, 360, 30, TEXT_CF_HCENTER },
    732          	{ TEXT_CreateIndirect, "outside the selected range.", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
    733          	{ TEXT_CreateIndirect, "Would you like to auto-fix or go back?", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    734          	{ BUTTON_CreateIndirect, "Auto-fix",	GUI_ID_OK, 35, 115, 120, 60 },
    735          	{ BUTTON_CreateIndirect, "Go Back", GUI_ID_CANCEL, 195, 115, 120, 60 },
    736          };

   \                                 In section .text, align 4, keep-with-next
    737          static const GUI_WIDGET_CREATE_INFO InvalidOrderResources[] = {
   \                     InvalidOrderResources:
   \   00000000                      ; Initializer data, 144 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Settings Error">`
   \              ....        
   \   00000008   000028001400       DC16 0, 40, 20, 380, 220, 0
   \              7C01DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "The selected high and...">`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "values are in the wro...">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Would you like to aut...">`
   \              ....        
   \   00000050   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Auto-fix">`
   \              ....        
   \   00000068   010023007300       DC16 1, 35, 115, 120, 60
   \              78003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000078   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Go Back">`
   \              ....        
   \   00000080   0200C3007300       DC16 2, 195, 115, 120, 60
   \              78003C00    
   \   0000008A   000000000000       DC8 0, 0, 0, 0, 0, 0
    738          	{ FRAMEWIN_CreateIndirect, "Settings Error", 0, 40, 20, 380, 220, 0, 0 },
    739          	{ TEXT_CreateIndirect, "The selected high and low voltage", 0, 0, 10, 360, 30, TEXT_CF_HCENTER },
    740          	{ TEXT_CreateIndirect, "values are in the wrong order.", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
    741          	{ TEXT_CreateIndirect, "Would you like to auto-fix or go back?", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    742          	{ BUTTON_CreateIndirect, "Auto-fix",	GUI_ID_OK, 35, 115, 120, 60 },
    743          	{ BUTTON_CreateIndirect, "Go Back", GUI_ID_CANCEL, 195, 115, 120, 60 },
    744          };

   \                                 In section .text, align 4, keep-with-next
    745          static const GUI_WIDGET_CREATE_INFO InvalidAlarmOrderResources[] = {
   \                     InvalidAlarmOrderResources:
   \   00000000                      ; Initializer data, 144 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Settings Error">`
   \              ....        
   \   00000008   000028001400       DC16 0, 40, 20, 380, 220, 0
   \              7C01DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "The selected high and...">_1`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "values are in the wro...">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Would you like to aut...">`
   \              ....        
   \   00000050   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Auto-fix">`
   \              ....        
   \   00000068   010023007300       DC16 1, 35, 115, 120, 60
   \              78003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000078   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Go Back">`
   \              ....        
   \   00000080   0200C3007300       DC16 2, 195, 115, 120, 60
   \              78003C00    
   \   0000008A   000000000000       DC8 0, 0, 0, 0, 0, 0
    746          	{ FRAMEWIN_CreateIndirect, "Settings Error", 0, 40, 20, 380, 220, 0, 0 },
    747          	{ TEXT_CreateIndirect, "The selected high and low alarm", 0, 0, 10, 360, 30, TEXT_CF_HCENTER },
    748          	{ TEXT_CreateIndirect, "values are in the wrong order.", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
    749          	{ TEXT_CreateIndirect, "Would you like to auto-fix or go back?", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    750          	{ BUTTON_CreateIndirect, "Auto-fix",	GUI_ID_OK, 35, 115, 120, 60 },
    751          	{ BUTTON_CreateIndirect, "Go Back", GUI_ID_CANCEL, 195, 115, 120, 60 },
    752          };
    753          
    754          //
    755          // Tell user about the bad analog data
    756          //
    757          // Returns	GUI_ID_OK - continue
    758          //			GUI_ID_CANCEL - go back and fix it
    759          //

   \                                 In section .text, align 4, keep-with-next
    760          int InvalidAnalogDataPopUp(enum INVALIDANALOGDATASCREENS screen)
    761          {
   \                     InvalidAnalogDataPopUp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
    762          	SetPopupDefaults(WARNING_POPUP);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   ........           BL       SetPopupDefaults
    763          
    764          	switch (screen)
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0300000A           BEQ      ??InvalidAnalogDataPopUp_0
   \   0000001C   020054E3           CMP      R4,#+2
   \   00000020   1500000A           BEQ      ??InvalidAnalogDataPopUp_1
   \   00000024   0A00003A           BCC      ??InvalidAnalogDataPopUp_2
   \   00000028   1D0000EA           B        ??InvalidAnalogDataPopUp_3
    765          	{
    766          		case RANGE_TOO_HIGH:
    767          			return GUI_ExecDialogBox(InvalidRangeResources, GUI_COUNTOF(InvalidRangeResources), &popupCallback, WM_GetDesktopWindow(), 10, 10);
   \                     ??InvalidAnalogDataPopUp_0:
   \   0000002C   ........           BL       WM_GetDesktopWindow
   \   00000030   0A10A0E3           MOV      R1,#+10
   \   00000034   04108DE5           STR      R1,[SP, #+4]
   \   00000038   00108DE5           STR      R1,[SP, #+0]
   \   0000003C   0030A0E1           MOV      R3,R0
   \   00000040   ........           LDR      R2,??DataTable51_14
   \   00000044   0610A0E3           MOV      R1,#+6
   \   00000048   ........           ADR      R0,InvalidRangeResources
   \                     ??InvalidAnalogDataPopUp_4:
   \   0000004C   ........           BL       GUI_ExecDialogBox
   \   00000050   140000EA           B        ??InvalidAnalogDataPopUp_5
    768          		case RANGE_IN_WRONG_ORDER:
    769          			return GUI_ExecDialogBox(InvalidOrderResources, GUI_COUNTOF(InvalidOrderResources), &popupCallback, WM_GetDesktopWindow(), 10, 10);
   \                     ??InvalidAnalogDataPopUp_2:
   \   00000054   ........           BL       WM_GetDesktopWindow
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   04108DE5           STR      R1,[SP, #+4]
   \   00000060   00108DE5           STR      R1,[SP, #+0]
   \   00000064   0030A0E1           MOV      R3,R0
   \   00000068   ........           LDR      R2,??DataTable51_14
   \   0000006C   0610A0E3           MOV      R1,#+6
   \   00000070   ............       ADRL     R0,InvalidOrderResources
   \              ....        
   \   00000078   F3FFFFEA           B        ??InvalidAnalogDataPopUp_4
    770          		case ALARM_IN_WRONG_ORDER:
    771          			return GUI_ExecDialogBox(InvalidAlarmOrderResources, GUI_COUNTOF(InvalidAlarmOrderResources), &popupCallback, WM_GetDesktopWindow(), 10, 10);
   \                     ??InvalidAnalogDataPopUp_1:
   \   0000007C   ........           BL       WM_GetDesktopWindow
   \   00000080   0A10A0E3           MOV      R1,#+10
   \   00000084   04108DE5           STR      R1,[SP, #+4]
   \   00000088   00108DE5           STR      R1,[SP, #+0]
   \   0000008C   0030A0E1           MOV      R3,R0
   \   00000090   ........           LDR      R2,??DataTable51_14
   \   00000094   0610A0E3           MOV      R1,#+6
   \   00000098   ............       ADRL     R0,InvalidAlarmOrderResources
   \              ....        
   \   000000A0   E9FFFFEA           B        ??InvalidAnalogDataPopUp_4
    772          	}
    773          	
    774          	return false;
   \                     ??InvalidAnalogDataPopUp_3:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \                     ??InvalidAnalogDataPopUp_5:
   \   000000A8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000AC   1080BDE8           POP      {R4,PC}          ;; return
    775          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   4C4F5700           DC8      "LOW"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   4C4F5700           DC8      "LOW"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \   00000000   25660000           DC8      0x25, 0x66, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_2:
   \   00000000   25640000           DC8      0x25, 0x64, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     AnalogInputSettingsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \   00000000   ........           DC32     screen_scrolling

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \   00000000   ........           DC32     globalInput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_3:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_4:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_5:
   \   00000000   ........           DC32     InfoTimeRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     AnalogInputSettingsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     bmMiniButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     bmTinyBlackButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_1:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_2:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_3:
   \   00000000   ........           DC32     bm0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_4:
   \   00000000   ........           DC32     bm1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_5:
   \   00000000   ........           DC32     bm2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_6:
   \   00000000   ........           DC32     bm3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_7:
   \   00000000   ........           DC32     bmAnalog

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_8:
   \   00000000   ........           DC32     bmScale

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_9:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_10:
   \   00000000   ........           DC32     hLED1Button

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_11:
   \   00000000   ........           DC32     globalInput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_12:
   \   00000000   ........           DC32     bmAlarmText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_13:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_14:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E32660000       DC8 37, 46, 50, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Lower Alarm Value">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 76, 111, 119, 101
   \              4C6F7765    
   \   0000000A   7220416C6172       DC8 114, 32, 65, 108, 97, 114, 109, 32, 86, 97
   \              6D205661    
   \   00000014   6C756500           DC8 108, 117, 101, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Upper Alarm Value">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 85, 112, 112, 101
   \              55707065    
   \   0000000A   7220416C6172       DC8 114, 32, 65, 108, 97, 114, 109, 32, 86, 97
   \              6D205661    
   \   00000014   6C756500           DC8 108, 117, 101, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Settings Error">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   53657474696E       DC8 83, 101, 116, 116, 105, 110, 103, 115, 32, 69
   \              67732045    
   \   0000000A   72726F720000       DC8 114, 114, 111, 114, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "The specified voltage...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   546865207370       DC8 84, 104, 101, 32, 115, 112, 101, 99, 105, 102
   \              65636966    
   \   0000000A   69656420766F       DC8 105, 101, 100, 32, 118, 111, 108, 116, 97, 103
   \              6C746167    
   \   00000014   652076616C75       DC8 101, 32, 118, 97, 108, 117, 101, 115, 32, 97
   \              65732061    
   \   0000001E   726500000000       DC8 114, 101, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Volts">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   566F6C747300       DC8 86, 111, 108, 116, 115, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Value">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   56616C756500       DC8 86, 97, 108, 117, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HIGH">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   484947480000       DC8 72, 73, 71, 72, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Voltage">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   566F6C746167       DC8 86, 111, 108, 116, 97, 103, 101, 0
   \              6500        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Range">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   52616E676500       DC8 82, 97, 110, 103, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Filtering">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   46696C746572       DC8 70, 105, 108, 116, 101, 114, 105, 110, 103, 0
   \              696E6700    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Level">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C6576656C00       DC8 76, 101, 118, 101, 108, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NONE">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4E4F4E450000       DC8 78, 79, 78, 69, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MEDIUM">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4D454449554D       DC8 77, 69, 68, 73, 85, 77, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "VERY\\nHIGH">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   564552590A48       DC8 86, 69, 82, 89, 10, 72, 73, 71, 72, 0
   \              49474800    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm Indicator">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 73, 110, 100, 105
   \              496E6469    
   \   0000000A   6361746F7200       DC8 99, 97, 116, 111, 114, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Alarm Level">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   416C61726D20       DC8 65, 108, 97, 114, 109, 32, 76, 101, 118, 101
   \              4C657665    
   \   0000000A   6C00               DC8 108, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Lower">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C6F77657200       DC8 76, 111, 119, 101, 114, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Upper">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   557070657200       DC8 85, 112, 112, 101, 114, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 1 Enabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203120       DC8 76, 69, 68, 32, 49, 32, 69, 110, 97, 98
   \              456E6162    
   \   0000000A   6C6564000000       DC8 108, 101, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 1 Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203120       DC8 76, 69, 68, 32, 49, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 2 Enabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203220       DC8 76, 69, 68, 32, 50, 32, 69, 110, 97, 98
   \              456E6162    
   \   0000000A   6C6564000000       DC8 108, 101, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LED 2 Disabled">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   4C4544203220       DC8 76, 69, 68, 32, 50, 32, 68, 105, 115, 97
   \              44697361    
   \   0000000A   626C65640000       DC8 98, 108, 101, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Input %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 73, 110, 112
   \              20496E70    
   \   0000000A   757420256400       DC8 117, 116, 32, 37, 100, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rename Units %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   52656E616D65       DC8 82, 101, 110, 97, 109, 101, 32, 85, 110, 105
   \              20556E69    
   \   0000000A   747320256400       DC8 116, 115, 32, 37, 100, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "outside the selected ...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   6F7574736964       DC8 111, 117, 116, 115, 105, 100, 101, 32, 116, 104
   \              65207468    
   \   0000000A   652073656C65       DC8 101, 32, 115, 101, 108, 101, 99, 116, 101, 100
   \              63746564    
   \   00000014   2072616E6765       DC8 32, 114, 97, 110, 103, 101, 46, 0
   \              2E00        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Would you like to aut...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   576F756C6420       DC8 87, 111, 117, 108, 100, 32, 121, 111, 117, 32
   \              796F7520    
   \   0000000A   6C696B652074       DC8 108, 105, 107, 101, 32, 116, 111, 32, 97, 117
   \              6F206175    
   \   00000014   746F2D666978       DC8 116, 111, 45, 102, 105, 120, 32, 111, 114, 32
   \              206F7220    
   \   0000001E   676F20626163       DC8 103, 111, 32, 98, 97, 99, 107, 63, 0, 0
   \              6B3F0000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Auto-fix">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4175746F2D66       DC8 65, 117, 116, 111, 45, 102, 105, 120, 0, 0
   \              69780000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Go Back">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   476F20426163       DC8 71, 111, 32, 66, 97, 99, 107, 0
   \              6B00        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "The selected high and...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   546865207365       DC8 84, 104, 101, 32, 115, 101, 108, 101, 99, 116
   \              6C656374    
   \   0000000A   656420686967       DC8 101, 100, 32, 104, 105, 103, 104, 32, 97, 110
   \              6820616E    
   \   00000014   64206C6F7720       DC8 100, 32, 108, 111, 119, 32, 118, 111, 108, 116
   \              766F6C74    
   \   0000001E   616765000000       DC8 97, 103, 101, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "values are in the wro...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   76616C756573       DC8 118, 97, 108, 117, 101, 115, 32, 97, 114, 101
   \              20617265    
   \   0000000A   20696E207468       DC8 32, 105, 110, 32, 116, 104, 101, 32, 119, 114
   \              65207772    
   \   00000014   6F6E67206F72       DC8 111, 110, 103, 32, 111, 114, 100, 101, 114, 46
   \              6465722E    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "The selected high and...">_1`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   546865207365       DC8 84, 104, 101, 32, 115, 101, 108, 101, 99, 116
   \              6C656374    
   \   0000000A   656420686967       DC8 101, 100, 32, 104, 105, 103, 104, 32, 97, 110
   \              6820616E    
   \   00000014   64206C6F7720       DC8 100, 32, 108, 111, 119, 32, 97, 108, 97, 114
   \              616C6172    
   \   0000001E   6D00               DC8 109, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "LOW">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4C4F5700           DC8 76, 79, 87, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%f">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25660000           DC8 37, 102, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0
    776          
    777          
    778          /*************************** End of file ****************************/
    779          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AISKillKeyboard                     8
     AlarmPaint                         56
     AnalogInputSettingsCallback        40
     AnalogInputSettingsIgnoreNextKeyRelease
                                         0
     DeleteAnalogKeyboards               8
     DisplayAlarm                       40
     DisplayRenameInput                 64
     DisplayRenameUnits                 64
     DisplayScale                       40
     GetAnalogInputSettingsWindowHandle
                                         0
     InvalidAnalogDataPopUp             16
     RenameInputPaint                    0
     RenameUnitsPaint                    0
     ScalePaint                         64
     SetAnalogInputSettingsWindowHandle
                                         0
     SetFilteringText                    8
     ValidateAnalogData                 16


   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     hLED1Button                                24
     hLED2Button
     hAlarmConditionButton
     hAlarmValueButton
     hUpperAlarmConditionButton
     hUpperAlarmValueButton
     AnalogInputSettingsScreenList             116
     hAnalogInputSettings
     hVoltsLowButton
     hVoltsHighButton
     hValueLowButton
     hValueHighButton
     hVoltsRangeButton
     hFilteringLevelButton
     pRenameInput
     pRenameUnits
     pAlarmValue
     gathering
     alarmValueString
     GetAnalogInputSettingsWindowHandle
                                                12
     SetAnalogInputSettingsWindowHandle
                                                12
     AISKillKeyboard                            52
     AnalogInputSettingsCallback              1260
     DisplayScale                              696
     ScalePaint                                788
     SetFilteringText                          152
     DisplayAlarm                              644
     AlarmPaint                                688
     DisplayRenameInput                        116
     RenameInputPaint                            4
     DisplayRenameUnits                        116
     RenameUnitsPaint                            4
     AnalogInputSettingsIgnoreNextKeyRelease
                                                 4
     DeleteAnalogKeyboards                      88
     ValidateAnalogData                        440
     InvalidRangeResources                     144
     InvalidOrderResources                     144
     InvalidAlarmOrderResources                144
     InvalidAnalogDataPopUp                    176
     ??DataTable42                               4
     ??DataTable44                               4
     ??DataTable44_1                             4
     ??DataTable44_2                             4
     ??DataTable45                               4
     ??DataTable45_1                             4
     ??DataTable45_2                             4
     ??DataTable45_3                             4
     ??DataTable45_4                             4
     ??DataTable45_5                             4
     ??DataTable49                               4
     ??DataTable50                               4
     ??DataTable51                               4
     ??DataTable51_1                             4
     ??DataTable51_2                             4
     ??DataTable51_3                             4
     ??DataTable51_4                             4
     ??DataTable51_5                             4
     ??DataTable51_6                             4
     ??DataTable51_7                             4
     ??DataTable51_8                             4
     ??DataTable51_9                             4
     ??DataTable51_10                            4
     ??DataTable51_11                            4
     ??DataTable51_12                            4
     ??DataTable51_13                            4
     ??DataTable51_14                            4
     ?<Constant "%.2f">                          8
     ?<Constant "Enter Lower Alarm Value">      24
     ?<Constant "Enter Upper Alarm Value">      24
     ?<Constant "Settings Error">               16
     ?<Constant "The specified voltage...">     36
     ?<Constant "Volts">                         8
     ?<Constant "Value">                         8
     ?<Constant "HIGH">                          8
     ?<Constant "Voltage">                       8
     ?<Constant "Range">                         8
     ?<Constant "Filtering">                    12
     ?<Constant "Level">                         8
     ?<Constant "NONE">                          8
     ?<Constant "MEDIUM">                        8
     ?<Constant "VERY\nHIGH">                   12
     ?<Constant "Alarm Indicator">              16
     ?<Constant "Alarm Level">                  12
     ?<Constant "Lower">                         8
     ?<Constant "Upper">                         8
     ?<Constant "LED 1 Enabled">                16
     ?<Constant "LED 1 Disabled">               16
     ?<Constant "LED 2 Enabled">                16
     ?<Constant "LED 2 Disabled">               16
     ?<Constant "Rename Input %d">              16
     ?<Constant "Rename Units %d">              16
     ?<Constant "outside the selected ...">     28
     ?<Constant "Would you like to aut...">     40
     ?<Constant "Auto-fix">                     12
     ?<Constant "Go Back">                       8
     ?<Constant "The selected high and...">     36
     ?<Constant "values are in the wro...">     32
     ?<Constant "The selected high and...">_1   32
     ?<Constant "LOW">                           4
     ?<Constant "%f">                            4
     ?<Constant "%d">                            4

 
    24 bytes in section .bss
   116 bytes in section .data
   252 bytes in section .rodata
 6 076 bytes in section .text
 
 6 076 bytes of CODE  memory
   252 bytes of CONST memory
   140 bytes of DATA  memory

Errors: none
Warnings: none
