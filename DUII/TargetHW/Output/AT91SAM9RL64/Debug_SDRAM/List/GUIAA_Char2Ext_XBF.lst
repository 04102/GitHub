###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_Char2Ext_XBF.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_Char2Ext_XBF.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IAA_Char2Ext_XBF.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    AA_Char2Ext_XBF.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_Char2Ext_XBF.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIAA_Char4Ext_XBF.c
     19          Purpose     : Implementation of external binary fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DispChar
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DispChar(U16P c) {
   \                     _DispChar:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     38            GUI_DRAWMODE DrawMode;
     39            GUI_DRAWMODE OldDrawMode;
     40            U8 aBuffer[GUI_MAX_XBF_BYTES];
     41            const U8 * pBuffer;
     42            const GUI_XBF_DATA * pXBF_Data;
     43            U32                  Off, iOff;
     44            U16 Size;
     45            U16 XSize, YSize;
     46            U16                  BytesPerLine, NumBytes;
     47            U16                  MaxLines;
     48            I16 xDist, xOff, yOff;
     49            int                  RemLines, NumLines, xPos, yPos;
     50          
     51            pBuffer = aBuffer;
   \   00000004   ........           LDR      R1,??DataTable3
   \   00000008   FCD04DE2           SUB      SP,SP,#+252
   \   0000000C   34208DE2           ADD      R2,SP,#+52
   \   00000010   1C1091E5           LDR      R1,[R1, #+28]
   \   00000014   18208DE5           STR      R2,[SP, #+24]
   \   00000018   1C1091E5           LDR      R1,[R1, #+28]
   \   0000001C   1C108DE5           STR      R1,[SP, #+28]
     52            pXBF_Data = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
     53            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   00000020   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   AD00003A           BCC      ??_DispChar_0
   \   0000002C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000030   B210D1E1           LDRH     R1,[R1, #+2]
   \   00000034   000051E1           CMP      R1,R0
   \   00000038   A900003A           BCC      ??_DispChar_0
     54              return;
     55            }
     56            //
     57            // Get offset and size of character data
     58            //
     59            GUI_XBF__GetOffAndSize(pXBF_Data, c, &Off, &Size);
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   20308DE2           ADD      R3,SP,#+32
   \   00000044   24208DE2           ADD      R2,SP,#+36
   \   00000048   1C009DE5           LDR      R0,[SP, #+28]
   \   0000004C   ........           BL       GUI_XBF__GetOffAndSize
     60            if (!Off) {
   \   00000050   24009DE5           LDR      R0,[SP, #+36]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   A100000A           BEQ      ??_DispChar_0
     61              return;
     62            }
     63            DrawMode     = GUI_Context.TextMode;
     64            OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   0000005C   ........           LDR      R0,??DataTable3
   \   00000060   FA02D0E1           LDRSH    R0,[R0, #+42]
   \   00000064   ........           BL       LCD_SetDrawMode
   \   00000068   30008DE5           STR      R0,[SP, #+48]
     65            //
     66            // Use banding mode if size is too large
     67            //
     68            if (Size > GUI_MAX_XBF_BYTES) {
   \   0000006C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000070   08C090E5           LDR      R12,[R0, #+8]
   \   00000074   042090E5           LDR      R2,[R0, #+4]
   \   00000078   B002DDE1           LDRH     R0,[SP, #+32]
   \   0000007C   34308DE2           ADD      R3,SP,#+52
   \   00000080   C90050E3           CMP      R0,#+201
   \   00000084   5800003A           BCC      ??_DispChar_1
     69              //
     70              // Get the heading 12 Bytes of the character data
     71              //
     72              pXBF_Data->pfGetData(Off, 12, pXBF_Data->pVoid, aBuffer);
   \   00000088   0C10A0E3           MOV      R1,#+12
   \   0000008C   24009DE5           LDR      R0,[SP, #+36]
   \   00000090   3CFF2FE1           BLX      R12
     73              xDist        = GUI__Read16(&pBuffer);
   \   00000094   18008DE2           ADD      R0,SP,#+24
   \   00000098   ........           BL       GUI__Read16
   \   0000009C   0008A0E1           LSL      R0,R0,#+16
   \   000000A0   4008A0E1           ASR      R0,R0,#+16
   \   000000A4   28008DE5           STR      R0,[SP, #+40]
     74              XSize        = GUI__Read16(&pBuffer);
   \   000000A8   18008DE2           ADD      R0,SP,#+24
   \   000000AC   ........           BL       GUI__Read16
   \   000000B0   0040A0E1           MOV      R4,R0
     75              YSize        = GUI__Read16(&pBuffer);
   \   000000B4   18008DE2           ADD      R0,SP,#+24
   \   000000B8   ........           BL       GUI__Read16
   \   000000BC   0070A0E1           MOV      R7,R0
     76              xOff         = GUI__Read16(&pBuffer);                                             
   \   000000C0   18008DE2           ADD      R0,SP,#+24
   \   000000C4   ........           BL       GUI__Read16
   \   000000C8   0080A0E1           MOV      R8,R0
     77              yOff         = GUI__Read16(&pBuffer);
   \   000000CC   18008DE2           ADD      R0,SP,#+24
   \   000000D0   ........           BL       GUI__Read16
   \   000000D4   0090A0E1           MOV      R9,R0
     78              BytesPerLine = GUI__Read16(&pBuffer);
   \   000000D8   18008DE2           ADD      R0,SP,#+24
   \   000000DC   ........           BL       GUI__Read16
   \   000000E0   0050A0E1           MOV      R5,R0
     79          
     80              iOff         = Off + 12;
   \   000000E4   24009DE5           LDR      R0,[SP, #+36]
     81              MaxLines     = (GUI_MAX_XBF_BYTES - 12) / BytesPerLine;
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   0C6080E2           ADD      R6,R0,#+12
   \   000000F0   BC00A0E3           MOV      R0,#+188
   \   000000F4   ........           BL       __aeabi_idiv
   \   000000F8   0008A0E1           LSL      R0,R0,#+16
   \   000000FC   2008A0E1           LSR      R0,R0,#+16
   \   00000100   2C008DE5           STR      R0,[SP, #+44]
     82              RemLines     = YSize;
     83              xPos         = GUI_Context.DispPosX + xOff;
   \   00000104   ........           LDR      R0,??DataTable3
   \   00000108   0888A0E1           LSL      R8,R8,#+16
   \   0000010C   F202D0E1           LDRSH    R0,[R0, #+34]
     84              yPos         = GUI_Context.DispPosY + yOff;
   \   00000110   0998A0E1           LSL      R9,R9,#+16
   \   00000114   488880E0           ADD      R8,R0,R8, ASR #+16
   \   00000118   ........           LDR      R0,??DataTable3
   \   0000011C   F402D0E1           LDRSH    R0,[R0, #+36]
   \   00000120   499880E0           ADD      R9,R0,R9, ASR #+16
     85              //
     86              // Display bands while RemLines are left
     87              //
     88              do {
     89                //
     90                // Use MaxLines as YSize for a band until RemLines are less than MaxLines
     91                //
     92                NumLines   = MaxLines;
   \                     ??_DispChar_2:
   \   00000124   2C009DE5           LDR      R0,[SP, #+44]
     93                if (NumLines > RemLines) {
   \   00000128   07A0A0E1           MOV      R10,R7
   \   0000012C   000057E1           CMP      R7,R0
   \   00000130   00A0A0C1           MOVGT    R10,R0
     94                  NumLines = RemLines;
     95                }
     96                NumBytes   = NumLines * BytesPerLine;
   \   00000134   8A056BE1           SMULBB   R11,R10,R5
     97                pXBF_Data->pfGetData(iOff, NumBytes, pXBF_Data->pVoid, aBuffer);
   \   00000138   1C009DE5           LDR      R0,[SP, #+28]
   \   0000013C   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000140   042090E5           LDR      R2,[R0, #+4]
   \   00000144   0B18A0E1           LSL      R1,R11,#+16
   \   00000148   34308DE2           ADD      R3,SP,#+52
   \   0000014C   2118A0E1           LSR      R1,R1,#+16
   \   00000150   0600A0E1           MOV      R0,R6
   \   00000154   08C09CE5           LDR      R12,[R12, #+8]
   \   00000158   3CFF2FE1           BLX      R12
     98                #if GUI_SUPPORT_ROTATION
     99                if (GUI_pLCD_APIList) {
   \   0000015C   ........           LDR      R0,??DataTable3_1
   \   00000160   00C090E5           LDR      R12,[R0, #+0]
   \   00000164   00005CE3           CMP      R12,#+0
   \   00000168   1000000A           BEQ      ??_DispChar_3
    100                  GUI_pLCD_APIList->pfDrawBitmap(xPos,                        // XPos
    101                                                 yPos,                        // YPos
    102                                                 XSize,                       // XSize
    103                                                 NumLines,                    // YSize
    104                                                 1,                           // XMag
    105                                                 1,                           // YMag
    106                                                 2,                           // BitsPerPixel
    107                                                 BytesPerLine,                // BytesPerLine
    108                                                 aBuffer,                     // Pointer to pixel data
    109                                                 NULL);                       // Translation table
   \   0000016C   0000A0E3           MOV      R0,#+0
   \   00000170   14008DE5           STR      R0,[SP, #+20]
   \   00000174   34008DE2           ADD      R0,SP,#+52
   \   00000178   10008DE5           STR      R0,[SP, #+16]
   \   0000017C   0200A0E3           MOV      R0,#+2
   \   00000180   08008DE5           STR      R0,[SP, #+8]
   \   00000184   0100A0E3           MOV      R0,#+1
   \   00000188   0C508DE5           STR      R5,[SP, #+12]
   \   0000018C   04008DE5           STR      R0,[SP, #+4]
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   0A30A0E1           MOV      R3,R10
   \   00000198   0420A0E1           MOV      R2,R4
   \   0000019C   0910A0E1           MOV      R1,R9
   \   000001A0   0800A0E1           MOV      R0,R8
   \   000001A4   00C09CE5           LDR      R12,[R12, #+0]
   \   000001A8   3CFF2FE1           BLX      R12
   \   000001AC   070000EA           B        ??_DispChar_4
    110                } else {
    111                #else
    112                {
    113                #endif
    114                  GUI_AA__DrawCharAA2(xPos,
    115                                      yPos,
    116                                      XSize,
    117                                      NumLines,
    118                                      BytesPerLine,
    119                                      (U8 const *)aBuffer);
   \                     ??_DispChar_3:
   \   000001B0   34008DE2           ADD      R0,SP,#+52
   \   000001B4   04008DE5           STR      R0,[SP, #+4]
   \   000001B8   00508DE5           STR      R5,[SP, #+0]
   \   000001BC   0A30A0E1           MOV      R3,R10
   \   000001C0   0420A0E1           MOV      R2,R4
   \   000001C4   0910A0E1           MOV      R1,R9
   \   000001C8   0800A0E1           MOV      R0,R8
   \   000001CC   ........           BL       GUI_AA__DrawCharAA2
    120                }
    121                iOff      += NumBytes;
   \                     ??_DispChar_4:
   \   000001D0   0BB8A0E1           LSL      R11,R11,#+16
    122                RemLines  -= NumLines;
   \   000001D4   0A7047E0           SUB      R7,R7,R10
   \   000001D8   2B6886E0           ADD      R6,R6,R11, LSR #+16
    123                yPos      += NumLines;
   \   000001DC   09908AE0           ADD      R9,R10,R9
    124              } while (RemLines);
   \   000001E0   000057E3           CMP      R7,#+0
   \   000001E4   CEFFFF1A           BNE      ??_DispChar_2
   \   000001E8   350000EA           B        ??_DispChar_5
    125            } else {
    126              //
    127              // Get character data
    128              //
    129              pXBF_Data->pfGetData(Off, Size, pXBF_Data->pVoid, aBuffer);
   \                     ??_DispChar_1:
   \   000001EC   0010A0E1           MOV      R1,R0
   \   000001F0   24009DE5           LDR      R0,[SP, #+36]
   \   000001F4   3CFF2FE1           BLX      R12
    130              xDist        = GUI__Read16(&pBuffer);
   \   000001F8   18008DE2           ADD      R0,SP,#+24
   \   000001FC   ........           BL       GUI__Read16
   \   00000200   0008A0E1           LSL      R0,R0,#+16
   \   00000204   4008A0E1           ASR      R0,R0,#+16
   \   00000208   28008DE5           STR      R0,[SP, #+40]
    131              XSize        = GUI__Read16(&pBuffer);
   \   0000020C   18008DE2           ADD      R0,SP,#+24
   \   00000210   ........           BL       GUI__Read16
   \   00000214   0040A0E1           MOV      R4,R0
    132              YSize        = GUI__Read16(&pBuffer);
   \   00000218   18008DE2           ADD      R0,SP,#+24
   \   0000021C   ........           BL       GUI__Read16
   \   00000220   0060A0E1           MOV      R6,R0
    133              xOff         = GUI__Read16(&pBuffer);
   \   00000224   18008DE2           ADD      R0,SP,#+24
   \   00000228   ........           BL       GUI__Read16
   \   0000022C   0088A0E1           LSL      R8,R0,#+16
    134              yOff         = GUI__Read16(&pBuffer);
   \   00000230   18008DE2           ADD      R0,SP,#+24
   \   00000234   ........           BL       GUI__Read16
   \   00000238   0078A0E1           LSL      R7,R0,#+16
    135              BytesPerLine = GUI__Read16(&pBuffer);
   \   0000023C   18008DE2           ADD      R0,SP,#+24
   \   00000240   ........           BL       GUI__Read16
   \   00000244   0050A0E1           MOV      R5,R0
    136              #if GUI_SUPPORT_ROTATION
    137              if (GUI_pLCD_APIList) {
   \   00000248   ........           LDR      R0,??DataTable3
   \   0000024C   ........           LDR      R1,??DataTable3
   \   00000250   ........           LDR      R2,??DataTable3_1
   \   00000254   F202D0E1           LDRSH    R0,[R0, #+34]
   \   00000258   F412D1E1           LDRSH    R1,[R1, #+36]
   \   0000025C   00C092E5           LDR      R12,[R2, #+0]
   \   00000260   480880E0           ADD      R0,R0,R8, ASR #+16
   \   00000264   471881E0           ADD      R1,R1,R7, ASR #+16
   \   00000268   00005CE3           CMP      R12,#+0
   \   0000026C   0E00000A           BEQ      ??_DispChar_6
    138                GUI_pLCD_APIList->pfDrawBitmap(GUI_Context.DispPosX + xOff, // XPos
    139                                               GUI_Context.DispPosY + yOff, // YPos
    140                                               XSize,                       // XSize
    141                                               YSize,                       // YSize
    142                                               1,                           // XMag
    143                                               1,                           // YMag
    144                                               2,                           // BitsPerPixel
    145                                               BytesPerLine,                // BytesPerLine
    146                                               pBuffer,                     // Pointer to pixel data
    147                                               NULL);                       // Translation table
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   14208DE5           STR      R2,[SP, #+20]
   \   00000278   18209DE5           LDR      R2,[SP, #+24]
   \   0000027C   0C508DE5           STR      R5,[SP, #+12]
   \   00000280   10208DE5           STR      R2,[SP, #+16]
   \   00000284   0220A0E3           MOV      R2,#+2
   \   00000288   08208DE5           STR      R2,[SP, #+8]
   \   0000028C   0120A0E3           MOV      R2,#+1
   \   00000290   04208DE5           STR      R2,[SP, #+4]
   \   00000294   00208DE5           STR      R2,[SP, #+0]
   \   00000298   0630A0E1           MOV      R3,R6
   \   0000029C   0420A0E1           MOV      R2,R4
   \   000002A0   00C09CE5           LDR      R12,[R12, #+0]
   \   000002A4   3CFF2FE1           BLX      R12
   \   000002A8   050000EA           B        ??_DispChar_5
    148              } else {
    149              #else
    150              {
    151              #endif
    152                GUI_AA__DrawCharAA2(GUI_Context.DispPosX + xOff, // XPos                 
    153                                    GUI_Context.DispPosY + yOff, // YPos                 
    154                                    XSize,                       // XSize                
    155                                    YSize,                       // YSize                
    156                                    BytesPerLine,                // BytesPerLine         
    157                                    (U8 const *)pBuffer);        // Pointer to pixel data
   \                     ??_DispChar_6:
   \   000002AC   18209DE5           LDR      R2,[SP, #+24]
   \   000002B0   00508DE5           STR      R5,[SP, #+0]
   \   000002B4   04208DE5           STR      R2,[SP, #+4]
   \   000002B8   0630A0E1           MOV      R3,R6
   \   000002BC   0420A0E1           MOV      R2,R4
   \   000002C0   ........           BL       GUI_AA__DrawCharAA2
    158              }
    159            }
    160            LCD_SetDrawMode(OldDrawMode); // Restore draw mode
   \                     ??_DispChar_5:
   \   000002C4   30009DE5           LDR      R0,[SP, #+48]
   \   000002C8   ........           BL       LCD_SetDrawMode
    161            GUI_Context.DispPosX += xDist;
   \   000002CC   ........           LDR      R0,??DataTable3
   \   000002D0   28109DE5           LDR      R1,[SP, #+40]
   \   000002D4   F202D0E1           LDRSH    R0,[R0, #+34]
   \   000002D8   000081E0           ADD      R0,R1,R0
   \   000002DC   ........           LDR      R1,??DataTable3
   \   000002E0   B202C1E1           STRH     R0,[R1, #+34]
    162          }
   \                     ??_DispChar_0:
   \   000002E4   FCD08DE2           ADD      SP,SP,#+252      ;; stack cleaning
   \   000002E8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    163          
    164          /*********************************************************************
    165          *
    166          *       _DispLine
    167          */

   \                                 In section .text, align 4, keep-with-next
    168          static void _DispLine(const char GUI_UNI_PTR * s, int Len) {
   \                     _DispLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    169            GUIPROP_EXT__SetfpClearLine(GUI_XBF__ClearLine);
   \   00000010   ........           LDR      R0,??DataTable3_2
   \   00000014   ........           BL       GUIPROP_EXT__SetfpClearLine
    170            GUI_ENC_APIList_EXT.pfDispLine(s, Len);
   \   00000018   ........           LDR      R2,??DataTable3_3
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   082092E5           LDR      R2,[R2, #+8]
   \   00000028   32FF2FE1           BLX      R2
    171            GUIPROP_EXT__SetfpClearLine(GUIPROP_EXT__ClearLine);
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   ........           LDR      R0,??DataTable3_4
   \   00000038   ........           B        GUIPROP_EXT__SetfpClearLine  ;; tailcall
    172          }
    173          
    174          /*********************************************************************
    175          *
    176          *       _APIList
    177          */

   \                                 In section .rodata, align 4, keep-with-next
    178          static const tGUI_ENC_APIList _APIList = {
   \                     _APIList:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   000000000000       DC32 0, 0, _DispLine
   \              0000........
    179            NULL,
    180            NULL,
    181            _DispLine
    182          };
    183          
    184          /*********************************************************************
    185          *
    186          *       Public data
    187          *
    188          **********************************************************************
    189          */
    190          /*********************************************************************
    191          *
    192          *       GUI_XBF_APIList_Prop_AA2_Ext
    193          */

   \                                 In section .rodata, align 4, keep-with-next
    194          const tGUI_XBF_APIList GUI_XBF_APIList_Prop_AA2_Ext = {
   \                     GUI_XBF_APIList_Prop_AA2_Ext:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 _DispChar, GUI_XBF__GetCharDistX, GUI_XBF__GetFontInfo, GUI_XBF__IsInFont, GUI_XBF__GetCharInfo, _APIList
   \              ............
   \              ............
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI_pLCD_APIList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     GUI_XBF__ClearLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     GUI_ENC_APIList_EXT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     GUIPROP_EXT__ClearLine
    195            _DispChar,
    196            GUI_XBF__GetCharDistX,
    197            GUI_XBF__GetFontInfo,
    198            GUI_XBF__IsInFont,
    199            GUI_XBF__GetCharInfo,
    200            &_APIList
    201          };
    202          
    203          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     _DispChar    288
     _DispLine     16


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     _DispChar                     748
     _DispLine                      60
     _APIList                       12
     GUI_XBF_APIList_Prop_AA2_Ext   24
     ??DataTable3                    4
     ??DataTable3_1                  4
     ??DataTable3_2                  4
     ??DataTable3_3                  4
     ??DataTable3_4                  4

 
  36 bytes in section .rodata
 828 bytes in section .text
 
 828 bytes of CODE  memory
  36 bytes of CONST memory

Errors: none
Warnings: none
