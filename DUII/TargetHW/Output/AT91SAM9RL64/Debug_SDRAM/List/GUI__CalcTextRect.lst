###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__CalcTextRect.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__CalcTextRect.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__CalcTextRect.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __CalcTextRect.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__CalcTextRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__CalcTextRect.c
     19          Purpose     : Implementation of gui function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI__CalcTextRect
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          void GUI__CalcTextRect(const char GUI_UNI_PTR* pText, const GUI_RECT* pTextRectIn, GUI_RECT* pTextRectOut, int TextAlign) {
   \                     GUI__CalcTextRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0380A0E1           MOV      R8,R3
     36            if (pText) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   2E00000A           BEQ      ??GUI__CalcTextRect_0
     37              int xPos, yPos, TextWidth, TextHeight;
     38          
     39              /* Calculate X-pos of text */
     40              TextWidth = GUI_GetStringDistX(pText);
   \   00000018   ........           BL       GUI_GetStringDistX
   \   0000001C   0060A0E1           MOV      R6,R0
     41              switch (TextAlign & GUI_TA_HORIZONTAL) {
   \   00000020   030008E2           AND      R0,R8,#0x3
   \   00000024   010050E3           CMP      R0,#+1
   \   00000028   0A00000A           BEQ      ??GUI__CalcTextRect_1
   \   0000002C   0D00003A           BCC      ??GUI__CalcTextRect_2
   \   00000030   020050E3           CMP      R0,#+2
   \   00000034   0B00001A           BNE      ??GUI__CalcTextRect_2
     42              case GUI_TA_HCENTER:
     43                xPos = pTextRectIn->x0 + ((pTextRectIn->x1 - pTextRectIn->x0 + 1) - TextWidth) / 2;
   \   00000038   F000D4E1           LDRSH    R0,[R4, #+0]
   \   0000003C   F410D4E1           LDRSH    R1,[R4, #+4]
   \   00000040   001041E0           SUB      R1,R1,R0
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   061041E0           SUB      R1,R1,R6
   \   0000004C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000050   C17080E0           ADD      R7,R0,R1, ASR #+1
     44                break;
   \   00000054   040000EA           B        ??GUI__CalcTextRect_3
     45              case GUI_TA_RIGHT:
     46                xPos = pTextRectIn->x1 - TextWidth + 1;
   \                     ??GUI__CalcTextRect_1:
   \   00000058   F400D4E1           LDRSH    R0,[R4, #+4]
   \   0000005C   060040E0           SUB      R0,R0,R6
   \   00000060   017080E2           ADD      R7,R0,#+1
     47                break;
   \   00000064   000000EA           B        ??GUI__CalcTextRect_3
     48              default:
     49                xPos = pTextRectIn->x0;
   \                     ??GUI__CalcTextRect_2:
   \   00000068   F070D4E1           LDRSH    R7,[R4, #+0]
     50              }
     51          
     52              /* Calculate Y-pos of text*/
     53              TextHeight = GUI_GetFontDistY();
   \                     ??GUI__CalcTextRect_3:
   \   0000006C   ........           BL       GUI_GetFontDistY
     54              switch (TextAlign & GUI_TA_VERTICAL) {
   \   00000070   0C1008E2           AND      R1,R8,#0xC
   \   00000074   041051E2           SUBS     R1,R1,#+4
   \   00000078   0900000A           BEQ      ??GUI__CalcTextRect_4
   \   0000007C   081051E2           SUBS     R1,R1,#+8
   \   00000080   F210D4E1           LDRSH    R1,[R4, #+2]
   \   00000084   0900001A           BNE      ??GUI__CalcTextRect_5
   \   00000088   F620D4E1           LDRSH    R2,[R4, #+6]
   \   0000008C   012042E0           SUB      R2,R2,R1
   \   00000090   012082E2           ADD      R2,R2,#+1
   \   00000094   002042E0           SUB      R2,R2,R0
   \   00000098   A22F82E0           ADD      R2,R2,R2, LSR #+31
   \   0000009C   C21081E0           ADD      R1,R1,R2, ASR #+1
     55              case GUI_TA_VCENTER:
     56                yPos = pTextRectIn->y0 + ((pTextRectIn->y1 - pTextRectIn->y0 + 1) - TextHeight) / 2;
     57                break;
   \   000000A0   020000EA           B        ??GUI__CalcTextRect_5
     58              case GUI_TA_BOTTOM:
     59                yPos = pTextRectIn->y1 - TextHeight + 1;
   \                     ??GUI__CalcTextRect_4:
   \   000000A4   F610D4E1           LDRSH    R1,[R4, #+6]
   \   000000A8   001041E0           SUB      R1,R1,R0
   \   000000AC   011081E2           ADD      R1,R1,#+1
     60                break;
     61              case GUI_TA_BASELINE:
     62              default:
     63                yPos = pTextRectIn->y0;
     64              }
     65          
     66              /* Return text rectangle */
     67              pTextRectOut->x0 = xPos;
   \                     ??GUI__CalcTextRect_5:
   \   000000B0   B070C5E1           STRH     R7,[R5, #+0]
     68              pTextRectOut->y0 = yPos;
     69              pTextRectOut->x1 = xPos + TextWidth  - 1;
   \   000000B4   072086E0           ADD      R2,R6,R7
   \   000000B8   B210C5E1           STRH     R1,[R5, #+2]
   \   000000BC   012042E2           SUB      R2,R2,#+1
     70              pTextRectOut->y1 = yPos + TextHeight - 1;
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   B420C5E1           STRH     R2,[R5, #+4]
   \   000000C8   010040E2           SUB      R0,R0,#+1
   \   000000CC   B600C5E1           STRH     R0,[R5, #+6]
   \   000000D0   F081BDE8           POP      {R4-R8,PC}
     71            } else {
     72              *pTextRectOut = *pTextRectIn;
   \                     ??GUI__CalcTextRect_0:
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   F041BDE8           POP      {R4-R8,LR}
   \   000000DC   0820A0E3           MOV      R2,#+8
   \   000000E0   ........           B        __aeabi_memcpy   ;; tailcall
     73            }
     74          }
     75          
     76          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     GUI__CalcTextRect     24


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     GUI__CalcTextRect  228

 
 228 bytes in section .text
 
 228 bytes of CODE memory

Errors: none
Warnings: none
