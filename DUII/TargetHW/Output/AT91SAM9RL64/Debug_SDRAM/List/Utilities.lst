###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:38 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\Utilities.c                                 #
#    Command line =  C:\DUII\DUII\Utilities.c -D DEBUG=1 -D SDRAM_TARGET=1    #
#                    -D USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D           #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Ut #
#                    ilities.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Uti #
#                    lities.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\Utilities.c
      1          
      2          #include "WM.h"
      3          #include "commondefs.h"
      4          #include "DataHandler.h"
      5          #include "Utilities.h"
      6          #include <stdio.h>
      7          #include <string.h>
      8          #include <ctype.h>
      9          #include "DUII.h"
     10          
     11          //
     12          // General purpose utility functions
     13          //
     14          
     15          //
     16          // Local function prototypes
     17          //
     18          char *formatLapTime(unsigned int, unsigned int);
     19          char *formatElapsedTime(void);
     20          void trim(char *s);
     21          void trimn(char *s, int n);
     22          float GetPredictiveScale(void);
     23          void iSort(int arr[], int n);
     24          void fSort(float arr[], int n);
     25          int CalculateScaleTop(int rpm);
     26          void EnsurePositive(char *pStr);
     27          
     28          //
     29          // Public variables
     30          //

   \                                 In section .bss, align 4
     31          char timeString[15];
   \                     timeString:
   \   00000000                      DS8 16
     32          
     33          //
     34          // formatElapsedTime
     35          //
     36          // This routine will retrieve the current elapsed time and format it into a printable string
     37          // of the format mm:ss.
     38          //
     39          // Output: pointer to the formatted string
     40          //

   \                                 In section .text, align 4, keep-with-next
     41          char *formatElapsedTime(void)
     42          {
   \                     formatElapsedTime:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
     43          	unsigned int time;
     44          	
     45          	time = GetValue(ELAPSED_RACE_TIME).uVal / 1000;		// time = time in seconds
   \   00000008   2310A0E3           MOV      R1,#+35
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       GetValue
   \   00000014   00009DE5           LDR      R0,[SP, #+0]
   \   00000018   ........           LDR      R2,??DataTable9_1  ;; 0x83126e98
     46          	
     47          	if (time < 3600)
   \   0000001C   ........           LDR      R4,??DataTable9_2
   \   00000020   902281E0           UMULL    R2,R1,R0,R2
   \   00000024   A134A0E1           LSR      R3,R1,#+9
   \   00000028   ........           LDR      R1,??DataTable9_3  ;; 0x88888889
   \   0000002C   E10E53E3           CMP      R3,#+3600
   \   00000030   931180E0           UMULL    R1,R0,R3,R1
   \   00000034   3C10A0E3           MOV      R1,#+60
   \   00000038   A002A0E1           LSR      R0,R0,#+5
   \   0000003C   0500002A           BCS      ??formatElapsedTime_0
     48          		sprintf(timeString, "%02d:%02d", time / 60, time % 60);
   \   00000040   910002E0           MUL      R2,R1,R0
   \   00000044   ............       ADRL     R1,`?<Constant "%02d:%02d">`
   \              ....        
   \   0000004C   023043E0           SUB      R3,R3,R2
   \   00000050   0020A0E1           MOV      R2,R0
   \   00000054   1A0000EA           B        ??formatElapsedTime_1
     49          	else if (time < 36000)
   \                     ??formatElapsedTime_0:
   \   00000058   ........           LDR      R12,??DataTable9_4  ;; 0x91a2b3c5
   \   0000005C   93CC82E0           UMULL    R12,R2,R3,R12
   \   00000060   A0C0A0E3           MOV      R12,#+160
   \   00000064   8CCC8CE3           ORR      R12,R12,#0x8C00
   \   00000068   A225A0E1           LSR      R2,R2,#+11
   \   0000006C   0C0053E1           CMP      R3,R12
   \   00000070   0C00002A           BCS      ??formatElapsedTime_2
     50          		sprintf(timeString, "%d:%02d:%02d", time/3600, (time/60)%60, time % 60);
   \   00000074   91000CE0           MUL      R12,R1,R0
   \   00000078   0C3043E0           SUB      R3,R3,R12
   \   0000007C   ........           LDR      R12,??DataTable9_3  ;; 0x88888889
   \   00000080   00308DE5           STR      R3,[SP, #+0]
   \   00000084   90CC83E0           UMULL    R12,R3,R0,R12
   \   00000088   A332A0E1           LSR      R3,R3,#+5
   \   0000008C   810363E1           SMULBB   R3,R1,R3
   \   00000090   ............       ADRL     R1,`?<Constant "%d:%02d:%02d">`
   \              ....        
   \   00000098   033040E0           SUB      R3,R0,R3
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       sprintf
   \   000000A4   080000EA           B        ??formatElapsedTime_3
     51          	else 		// > 10 hours
     52          		sprintf(timeString, "%d:%02d", time/3600, (time/60)%60);
   \                     ??formatElapsedTime_2:
   \   000000A8   ........           LDR      R12,??DataTable9_3  ;; 0x88888889
   \   000000AC   90CC83E0           UMULL    R12,R3,R0,R12
   \   000000B0   A332A0E1           LSR      R3,R3,#+5
   \   000000B4   810363E1           SMULBB   R3,R1,R3
   \   000000B8   ............       ADRL     R1,`?<Constant "%d:%02d">`
   \              ....        
   \   000000C0   033040E0           SUB      R3,R0,R3
   \                     ??formatElapsedTime_1:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       sprintf
     53          
     54          	return timeString;
   \                     ??formatElapsedTime_3:
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   08D08DE2           ADD      SP,SP,#+8
   \   000000D4   1080BDE8           POP      {R4,PC}          ;; return
     55          }
     56          
     57          //
     58          // Format time in milliseconds into:
     59          //		mm:ss.s or
     60          //		ss.s
     61          //

   \                                 In section .text, align 4, keep-with-next
     62          char *formatLapTime(unsigned int time, unsigned int twodigits)
     63          {
   \                     formatLapTime:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
     64          	unsigned int tenhun, secs, mins;
     65          	char *pStr;
     66          
     67          	if (twodigits)
     68          		time += 5;		// round to hundredths
     69          	else
     70          		time += 50;		// round to tenths
     71          
     72          	tenhun = (time / 10) % 100;		// get 2 digits now
   \   00000008   ........           LDR      R2,??DataTable9_5  ;; 0xcccccccd
   \   0000000C   05008012           ADDNE    R0,R0,#+5
   \   00000010   32008002           ADDEQ    R0,R0,#+50
   \   00000014   902281E0           UMULL    R2,R1,R0,R2
   \   00000018   ........           LDR      R3,??DataTable9_6  ;; 0xa3d70a3e
   \   0000001C   A111A0E1           LSR      R1,R1,#+3
   \   00000020   913382E0           UMULL    R3,R2,R1,R3
   \   00000024   6430A0E3           MOV      R3,#+100
   \   00000028   2223A0E1           LSR      R2,R2,#+6
   \   0000002C   930202E0           MUL      R2,R3,R2
     73          	secs = (time / 1000) % 60;
   \   00000030   ........           LDR      R3,??DataTable9_3  ;; 0x88888889
   \   00000034   025041E0           SUB      R5,R1,R2
   \   00000038   ........           LDR      R2,??DataTable9_1  ;; 0x83126e98
   \   0000003C   04D04DE2           SUB      SP,SP,#+4
   \   00000040   902281E0           UMULL    R2,R1,R0,R2
     74          
     75          	pStr = timeString;
     76          
     77          	if (time >= 60000)	{
   \   00000044   ........           LDR      R7,??DataTable9_2
   \   00000048   A114A0E1           LSR      R1,R1,#+9
   \   0000004C   913382E0           UMULL    R3,R2,R1,R3
   \   00000050   3C30A0E3           MOV      R3,#+60
   \   00000054   A222A0E1           LSR      R2,R2,#+5
   \   00000058   930202E0           MUL      R2,R3,R2
   \   0000005C   ........           LDR      R3,??DataTable9_5  ;; 0xcccccccd
   \   00000060   022041E0           SUB      R2,R1,R2
   \   00000064   953381E0           UMULL    R3,R1,R5,R3
   \   00000068   A161A0E1           LSR      R6,R1,#+3
   \   0000006C   6010A0E3           MOV      R1,#+96
   \   00000070   EA1C81E3           ORR      R1,R1,#0xEA00
   \   00000074   010050E1           CMP      R0,R1
   \   00000078   0800003A           BCC      ??formatLapTime_0
     78          		mins = time / 60000;
     79          		pStr += sprintf(timeString, "%d:%02d.%d", mins, secs, tenhun / 10);
   \   0000007C   0230A0E1           MOV      R3,R2
   \   00000080   ........           LDR      R2,??DataTable9_7  ;; 0x8bcf64e6
   \   00000084   00608DE5           STR      R6,[SP, #+0]
   \   00000088   902281E0           UMULL    R2,R1,R0,R2
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   A127A0E1           LSR      R2,R1,#+15
   \   00000094   ........           ADR      R1,`?<Constant "%d:%02d.%d">`
   \   00000098   ........           BL       sprintf
   \   0000009C   030000EA           B        ??formatLapTime_1
     80          	} // if
     81          	else
     82          		pStr += sprintf(timeString, "%d.%d", secs, tenhun / 10);
   \                     ??formatLapTime_0:
   \   000000A0   0630A0E1           MOV      R3,R6
   \   000000A4   ........           ADR      R1,`?<Constant "%d.%d">`
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           BL       sprintf
   \                     ??formatLapTime_1:
   \   000000B0   070080E0           ADD      R0,R0,R7
     83          
     84          	if (twodigits)		// add the hundredths character
   \   000000B4   000054E3           CMP      R4,#+0
   \   000000B8   0400000A           BEQ      ??formatLapTime_2
     85          		sprintf(pStr, "%d", tenhun % 10);
   \   000000BC   0A10A0E3           MOV      R1,#+10
   \   000000C0   910602E0           MUL      R2,R1,R6
   \   000000C4   ........           ADR      R1,??DataTable9  ;; 0x25, 0x64, 0x00, 0x00
   \   000000C8   022045E0           SUB      R2,R5,R2
   \   000000CC   ........           BL       sprintf
     86          
     87          	return timeString;
   \                     ??formatLapTime_2:
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   \   000000D8   F080BDE8           POP      {R4-R7,PC}       ;; return
     88          }
     89          
     90          //
     91          // Trim trailing zeros off the end of the string produced by sprintf(%f)
     92          //

   \                                 In section .text, align 4, keep-with-next
     93          void trim(char *s)
     94          {
   \                     trim:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     95              char *ptr;
     96              if (!s)
     97                  return;		// handle NULL string
     98              if (!*s)
   \   00000008   0000D415           LDRBNE   R0,[R4, #+0]
   \   0000000C   00005013           CMPNE    R0,#+0
   \   00000010   0F00000A           BEQ      ??trim_0
     99                  return;		// handle empty string
    100              for (ptr = s + strlen(s) - 1; (ptr >= s) && *ptr == '0'; --ptr)
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       strlen
   \   0000001C   040080E0           ADD      R0,R0,R4
   \                     ??trim_1:
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   040050E1           CMP      R0,R4
   \   00000028   0200003A           BCC      ??trim_2
   \   0000002C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000030   300052E3           CMP      R2,#+48
   \   00000034   F9FFFF0A           BEQ      ??trim_1
    101          		;
    102              ptr[1] = '\0';
   \                     ??trim_2:
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0110C0E5           STRB     R1,[R0, #+1]
    103          	if ((ptr[0] == '.') && (ptr != s))	// If the next previous character is the decimal point and we are not yet at the start of the string
   \   00000040   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000044   2E0052E3           CMP      R2,#+46
   \   00000048   0100001A           BNE      ??trim_0
   \   0000004C   040050E1           CMP      R0,R4
    104          		ptr[0] = '\0';					// Clear that out too
   \   00000050   0010C015           STRBNE   R1,[R0, #+0]
   \                     ??trim_0:
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    105          }
    106          
    107          //
    108          // Trim trailing zeros and also ensure string is no longer than n (including NULL)
    109          //

   \                                 In section .text, align 4, keep-with-next
    110          void trimn(char *s, int n)
    111          {
   \                     trimn:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    112          	*(s + n) = 0;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0450C1E7           STRB     R5,[R1, +R4]
    113          	trim(s);
   \   00000010   0000D415           LDRBNE   R0,[R4, #+0]
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   00005013           CMPNE    R0,#+0
   \   0000001C   0E00000A           BEQ      ??trimn_0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       strlen
   \   00000028   040080E0           ADD      R0,R0,R4
   \                     ??trimn_1:
   \   0000002C   010040E2           SUB      R0,R0,#+1
   \   00000030   040050E1           CMP      R0,R4
   \   00000034   0200003A           BCC      ??trimn_2
   \   00000038   0020D0E5           LDRB     R2,[R0, #+0]
   \   0000003C   300052E3           CMP      R2,#+48
   \   00000040   F9FFFF0A           BEQ      ??trimn_1
   \                     ??trimn_2:
   \   00000044   0150C0E5           STRB     R5,[R0, #+1]
   \   00000048   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000004C   2E0051E3           CMP      R1,#+46
   \   00000050   0100001A           BNE      ??trimn_0
   \   00000054   040050E1           CMP      R0,R4
   \   00000058   0050C015           STRBNE   R5,[R0, #+0]
    114          }
   \                     ??trimn_0:
   \   0000005C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
    115          
    116          //
    117          // This string shoule be positive only.  Terminate string at first '-' character
    118          //

   \                                 In section .text, align 4, keep-with-next
    119          void EnsurePositive(char *pStr)
    120          {
   \                     EnsurePositive:
   \   00000000   000000EA           B        ??EnsurePositive_0
    121          	char ch;
    122          
    123          	while ((ch = *pStr) != 0)
    124          	{
    125          		if (ch == '-')
    126          		{						// Found a '-' character
    127          			*pStr = 0;			// End string here
    128          			return;		
    129          		}
    130          		else pStr++;
   \                     ??EnsurePositive_1:
   \   00000004   010080E2           ADD      R0,R0,#+1
   \                     ??EnsurePositive_0:
   \   00000008   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0300000A           BEQ      ??EnsurePositive_2
   \   00000014   2D0051E3           CMP      R1,#+45
   \   00000018   F9FFFF1A           BNE      ??EnsurePositive_1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0010C0E5           STRB     R1,[R0, #+0]
   \                     ??EnsurePositive_2:
   \   00000024   1EFF2FE1           BX       LR               ;; return
    131          	}
    132          }
    133          

   \                                 In section .text, align 4, keep-with-next
    134          float GetPredictiveScale(void)
    135          {
    136          	switch (sysData.lapMeter)
   \                     GetPredictiveScale:
   \   00000000   ........           LDR      R0,??DataTable9_8
   \   00000004   7900D0E5           LDRB     R0,[R0, #+121]
   \   00000008   040050E3           CMP      R0,#+4
   \   0000000C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GetPredictiveScale_0:
   \   00000010   0600008A           BHI      ??GetPredictiveScale_1
   \   00000014   030000EA           B        ??GetPredictiveScale_2
   \   00000018   040000EA           B        ??GetPredictiveScale_1
   \   0000001C   050000EA           B        ??GetPredictiveScale_3
   \   00000020   060000EA           B        ??GetPredictiveScale_4
   \   00000024   080000EA           B        ??GetPredictiveScale_5
    137          	{
    138          	case 0:	return 0.5;
   \                     ??GetPredictiveScale_2:
   \   00000028   FC05A0E3           MOV      R0,#+1056964608
   \   0000002C   1EFF2FE1           BX       LR
    139          	case 1: return 1.0;
   \                     ??GetPredictiveScale_1:
   \   00000030   FE05A0E3           MOV      R0,#+1065353216
   \   00000034   1EFF2FE1           BX       LR
    140          	case 2: return 2.0;
   \                     ??GetPredictiveScale_3:
   \   00000038   4004A0E3           MOV      R0,#+1073741824
   \   0000003C   1EFF2FE1           BX       LR
    141          	case 3: return 5.0;
   \                     ??GetPredictiveScale_4:
   \   00000040   4004A0E3           MOV      R0,#+1073741824
   \   00000044   A00880E3           ORR      R0,R0,#0xA00000
   \   00000048   1EFF2FE1           BX       LR
    142          	case 4: return 10.0;
   \                     ??GetPredictiveScale_5:
   \   0000004C   4004A0E3           MOV      R0,#+1073741824
   \   00000050   480780E3           ORR      R0,R0,#0x1200000
   \   00000054   1EFF2FE1           BX       LR               ;; return
    143          	default: return 1.0;
    144          	}
    145          }
    146          
    147          //
    148          // Perform bubble sort on array of floats
    149          //

   \                                 In section .text, align 4, keep-with-next
    150          void iSort(int arr[], int n)
    151          {
   \                     iSort:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    152                int swapped = true;
    153          	  int i;
    154                int j = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   030000EA           B        ??iSort_0
    155                int tmp;
    156                while (swapped) {
    157                      swapped = false;
    158                      j++;
    159                      for (i = 0; i < n - j; i++) {
    160                            if (arr[i] > arr[i + 1]) {
    161                                  tmp = arr[i];
    162                                  arr[i] = arr[i + 1];
   \                     ??iSort_1:
   \   0000000C   04C093E5           LDR      R12,[R3, #+4]
   \   00000010   00E093E5           LDR      LR,[R3, #+0]
   \   00000014   00C083E5           STR      R12,[R3, #+0]
    163                                  arr[i + 1] = tmp;
   \   00000018   04E083E5           STR      LR,[R3, #+4]
    164                                  swapped = true;
   \                     ??iSort_0:
   \   0000001C   012082E2           ADD      R2,R2,#+1
   \   00000020   023041E0           SUB      R3,R1,R2
   \   00000024   00C0A0E3           MOV      R12,#+0
   \   00000028   010053E3           CMP      R3,#+1
   \   0000002C   270000BA           BLT      ??iSort_2
   \   00000030   015043E2           SUB      R5,R3,#+1
   \   00000034   04E090E5           LDR      LR,[R0, #+4]
   \   00000038   004090E5           LDR      R4,[R0, #+0]
   \   0000003C   0030A0E1           MOV      R3,R0
   \   00000040   010015E3           TST      R5,#0x1
   \   00000044   0800000A           BEQ      ??iSort_3
   \   00000048   04005EE1           CMP      LR,R4
   \   0000004C   030000AA           BGE      ??iSort_4
   \   00000050   04C093E5           LDR      R12,[R3, #+4]
   \   00000054   00C083E5           STR      R12,[R3, #+0]
   \   00000058   044083E5           STR      R4,[R3, #+4]
   \   0000005C   01C0A0E3           MOV      R12,#+1
   \                     ??iSort_4:
   \   00000060   08E093E5           LDR      LR,[R3, #+8]
   \   00000064   044093E5           LDR      R4,[R3, #+4]
   \   00000068   043083E2           ADD      R3,R3,#+4
   \                     ??iSort_3:
   \   0000006C   A550B0E1           LSRS     R5,R5,#+1
   \   00000070   1200000A           BEQ      ??iSort_5
   \                     ??iSort_6:
   \   00000074   04005EE1           CMP      LR,R4
   \   00000078   040000AA           BGE      ??iSort_7
   \   0000007C   04C093E5           LDR      R12,[R3, #+4]
   \   00000080   00E093E5           LDR      LR,[R3, #+0]
   \   00000084   00C083E5           STR      R12,[R3, #+0]
   \   00000088   04E083E5           STR      LR,[R3, #+4]
   \   0000008C   01C0A0E3           MOV      R12,#+1
   \                     ??iSort_7:
   \   00000090   084093E5           LDR      R4,[R3, #+8]
   \   00000094   04E093E5           LDR      LR,[R3, #+4]
    165                            }
   \   00000098   015045E2           SUB      R5,R5,#+1
   \   0000009C   0E0054E1           CMP      R4,LR
   \   000000A0   044083B5           STRLT    R4,[R3, #+4]
   \   000000A4   08E083B5           STRLT    LR,[R3, #+8]
   \   000000A8   01C0A0B3           MOVLT    R12,#+1
   \   000000AC   0CE093E5           LDR      LR,[R3, #+12]
   \   000000B0   084093E5           LDR      R4,[R3, #+8]
   \   000000B4   083083E2           ADD      R3,R3,#+8
   \   000000B8   000055E3           CMP      R5,#+0
   \   000000BC   ECFFFF1A           BNE      ??iSort_6
   \                     ??iSort_5:
   \   000000C0   04005EE1           CMP      LR,R4
   \   000000C4   D0FFFFBA           BLT      ??iSort_1
    166                      }
    167                }
   \   000000C8   00005CE3           CMP      R12,#+0
   \   000000CC   D2FFFF1A           BNE      ??iSort_0
    168          }
   \                     ??iSort_2:
   \   000000D0   3080BDE8           POP      {R4,R5,PC}       ;; return
    169          

   \                                 In section .text, align 4, keep-with-next
    170          void fSort(float arr[], int n)
    171          {
   \                     fSort:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0020A0E1           MOV      R2,R0
   \   00000008   0130A0E1           MOV      R3,R1
    172                int swapped = true;
    173          	  int i;
    174                int j = 0;
   \   0000000C   0040A0E3           MOV      R4,#+0
    175                float tmp;
    176                while (swapped) {
    177                      swapped = false;
    178                      j++;
   \                     ??fSort_0:
   \   00000010   014084E2           ADD      R4,R4,#+1
    179                      for (i = 0; i < n - j; i++) {
   \   00000014   046043E0           SUB      R6,R3,R4
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   010056E3           CMP      R6,#+1
   \   00000020   0B0000BA           BLT      ??fSort_1
   \   00000024   0270A0E1           MOV      R7,R2
    180                            if (arr[i] > arr[i + 1]) {
   \                     ??fSort_2:
   \   00000028   040097E5           LDR      R0,[R7, #+4]
   \   0000002C   001097E5           LDR      R1,[R7, #+0]
   \   00000030   ........           BL       __aeabi_cfcmple
    181                                  tmp = arr[i];
    182                                  arr[i] = arr[i + 1];
   \   00000034   00008735           STRCC    R0,[R7, #+0]
    183                                  arr[i + 1] = tmp;
   \   00000038   04108735           STRCC    R1,[R7, #+4]
    184                                  swapped = true;
   \   0000003C   0150A033           MOVCC    R5,#+1
    185                            }
    186                      }
   \   00000040   047087E2           ADD      R7,R7,#+4
   \   00000044   016056E2           SUBS     R6,R6,#+1
   \   00000048   F6FFFF1A           BNE      ??fSort_2
    187                }
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   EEFFFF1A           BNE      ??fSort_0
    188          }
   \                     ??fSort_1:
   \   00000054   F080BDE8           POP      {R4-R7,PC}       ;; return
    189          
    190          //
    191          // Given an RPM find the next whole 1000 after it
    192          //

   \                                 In section .text, align 4, keep-with-next
    193          int CalculateScaleTop(int rpm)
    194          {
    195          	if (rpm >= 9000)
   \                     CalculateScaleTop:
   \   00000000   2810A0E3           MOV      R1,#+40
   \   00000004   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   ........           LDR      R1,??DataTable9_9  ;; 0x10624dd3
   \   00000010   9021C1E0           SMULL    R2,R1,R0,R1
   \   00000014   040000BA           BLT      ??CalculateScaleTop_0
    196          		return ((rpm / 2000) + 1) * 2000;
   \   00000018   C103B0E1           ASRS     R0,R1,#+7
   \   0000001C   01008042           ADDMI    R0,R0,#+1
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   7D1EA0E3           MOV      R1,#+2000
   \   00000028   030000EA           B        ??CalculateScaleTop_1
    197          	else
    198          		return ((rpm / 1000) + 1) * 1000;
   \                     ??CalculateScaleTop_0:
   \   0000002C   4103B0E1           ASRS     R0,R1,#+6
   \   00000030   01008042           ADDMI    R0,R0,#+1
   \   00000034   010080E2           ADD      R0,R0,#+1
   \   00000038   FA1FA0E3           MOV      R1,#+1000
   \                     ??CalculateScaleTop_1:
   \   0000003C   910000E0           MUL      R0,R1,R0
   \   00000040   1EFF2FE1           BX       LR               ;; return
    199          }
    200          
    201          //
    202          // KMC - created a case insensitive string compare for use by the LISTVIEW compare function
    203          // so that files would be listed in alphabetical order reguardless of case
    204          //

   \                                 In section .text, align 4, keep-with-next
    205          int kmc_stricmp(const char s1[], const char s2[])
    206          {   
   \                     kmc_stricmp:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    207              int i = 0;
    208              while ( s1[i] != '\0' )
   \                     ??kmc_stricmp_0:
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1200000A           BEQ      ??kmc_stricmp_1
    209              {
    210          		char a, b;
    211          		
    212                  if( s2[i] == '\0' ) 
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100001A           BNE      ??kmc_stricmp_2
    213          			return 1;
   \                     ??kmc_stricmp_3:
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   7080BDE8           POP      {R4-R6,PC}
    214                  else if( (a = toupper(s1[i])) < (b = toupper(s2[i])) )
   \                     ??kmc_stricmp_2:
   \   0000002C   0100D4E4           LDRB     R0,[R4], #+1
   \   00000030   ........           BL       toupper
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   0100D5E4           LDRB     R0,[R5], #+1
   \   0000003C   ........           BL       toupper
   \   00000040   FF6006E2           AND      R6,R6,#0xFF
   \   00000044   FF0000E2           AND      R0,R0,#0xFF
   \   00000048   000056E1           CMP      R6,R0
   \   0000004C   0100002A           BCS      ??kmc_stricmp_4
    215          			return -1;
   \   00000050   0000E0E3           MVN      R0,#+0
   \   00000054   7080BDE8           POP      {R4-R6,PC}
    216                  else if( a > b )
   \                     ??kmc_stricmp_4:
   \   00000058   060050E1           CMP      R0,R6
   \   0000005C   EAFFFF2A           BCS      ??kmc_stricmp_0
   \   00000060   EFFFFFEA           B        ??kmc_stricmp_3
    217          			return 1;
    218                  i++;
    219              }   
    220              return 0;
   \                     ??kmc_stricmp_1:
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
    221          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   25640000           DC8      0x25, 0x64, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   986E1283           DC32     0x83126e98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   ........           DC32     timeString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   89888888           DC32     0x88888889

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   C5B3A291           DC32     0x91a2b3c5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   CDCCCCCC           DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   3E0AD7A3           DC32     0xa3d70a3e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   E664CF8B           DC32     0x8bcf64e6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   D34D6210           DC32     0x10624dd3

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02d:%02d">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   253032643A25       DC8 37, 48, 50, 100, 58, 37, 48, 50, 100, 0
   \              30326400    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d:%02d:%02d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   25643A253032       DC8 37, 100, 58, 37, 48, 50, 100, 58, 37, 48
   \              643A2530    
   \   0000000A   326400000000       DC8 50, 100, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d:%02d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25643A253032       DC8 37, 100, 58, 37, 48, 50, 100, 0
   \              6400        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d:%02d.%d">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   25643A253032       DC8 37, 100, 58, 37, 48, 50, 100, 46, 37, 100
   \              642E2564    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d.%d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25642E256400       DC8 37, 100, 46, 37, 100, 0, 0, 0
   \              0000        
    222          
    223          

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     CalculateScaleTop       0
     EnsurePositive          0
     GetPredictiveScale      0
     fSort                  20
     formatElapsedTime      16
     formatLapTime          24
     iSort                  12
     kmc_stricmp            16
     trim                    8
     trimn                  16


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     timeString                   16
     formatElapsedTime           216
     formatLapTime               220
     trim                         88
     trimn                       100
     EnsurePositive               40
     GetPredictiveScale           88
     iSort                       212
     fSort                        88
     CalculateScaleTop            68
     kmc_stricmp                 104
     ??DataTable9                  4
     ??DataTable9_1                4
     ??DataTable9_2                4
     ??DataTable9_3                4
     ??DataTable9_4                4
     ??DataTable9_5                4
     ??DataTable9_6                4
     ??DataTable9_7                4
     ??DataTable9_8                4
     ??DataTable9_9                4
     ?<Constant "%02d:%02d">      12
     ?<Constant "%d">              4
     ?<Constant "%d:%02d:%02d">   16
     ?<Constant "%d:%02d">         8
     ?<Constant "%d:%02d.%d">     12
     ?<Constant "%d.%d">           8

 
    16 bytes in section .bss
     4 bytes in section .rodata
 1 320 bytes in section .text
 
 1 320 bytes of CODE  memory
     4 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
