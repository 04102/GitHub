###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_Char.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_Char.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_Char.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _Char.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_Char.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIChar.C
     19          Purpose     : Implementation of character and string services
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24           
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI_DispNextLine
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          void GUI_DispNextLine(void) {
   \                     GUI_DispNextLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     36            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
     37            GUI_Context.DispPosY += GUI_GetFontDistY();
   \   0000000C   ........           BL       GUI_Lock
   \   00000010   ........           LDR      R4,??DataTable4
   \   00000014   1C0094E5           LDR      R0,[R4, #+28]
   \   00000018   1950D0E5           LDRB     R5,[R0, #+25]
   \   0000001C   ........           BL       GUI_Unlock
   \   00000020   F402D4E1           LDRSH    R0,[R4, #+36]
     38            GUI_Context.DispPosX  = GUI_Context.LBorder;
     39            GUI_UNLOCK();
   \   00000024   04D08DE2           ADD      SP,SP,#+4
   \   00000028   000085E0           ADD      R0,R5,R0
   \   0000002C   B402C4E1           STRH     R0,[R4, #+36]
   \   00000030   F002D4E1           LDRSH    R0,[R4, #+32]
   \   00000034   B202C4E1           STRH     R0,[R4, #+34]
   \   00000038   3040BDE8           POP      {R4,R5,LR}
   \   0000003C   ........           B        GUI_Unlock       ;; tailcall
     40          }
     41          
     42          /*********************************************************************
     43          *
     44          *       GL_DispChar
     45          */

   \                                 In section .text, align 4, keep-with-next
     46          void GL_DispChar(U16 c) {
   \                     GL_DispChar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
     47            /* check for control characters */
     48            if (c == '\n') {
   \   0000000C   0A0054E3           CMP      R4,#+10
   \   00000010   0B00001A           BNE      ??GL_DispChar_0
     49              GUI_DispNextLine();
   \   00000014   ........           BL       GUI_Lock
   \   00000018   ........           BL       GUI_Lock
   \   0000001C   ........           LDR      R4,??DataTable4
   \   00000020   1C0094E5           LDR      R0,[R4, #+28]
   \   00000024   1950D0E5           LDRB     R5,[R0, #+25]
   \   00000028   ........           BL       GUI_Unlock
   \   0000002C   F402D4E1           LDRSH    R0,[R4, #+36]
   \   00000030   000085E0           ADD      R0,R5,R0
   \   00000034   B402C4E1           STRH     R0,[R4, #+36]
   \   00000038   F002D4E1           LDRSH    R0,[R4, #+32]
   \   0000003C   B202C4E1           STRH     R0,[R4, #+34]
   \   00000040   0D0000EA           B        ??GL_DispChar_1
     50            } else {
     51              if (c != '\r') {
   \                     ??GL_DispChar_0:
   \   00000044   0D0054E3           CMP      R4,#+13
   \   00000048   0C00000A           BEQ      ??GL_DispChar_2
     52                GUI_LOCK();
   \   0000004C   ........           BL       GUI_Lock
     53                GUI_Context.pAFont->pfDispChar(c);
   \   00000050   ........           LDR      R1,??DataTable4
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   1C1091E5           LDR      R1,[R1, #+28]
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   31FF2FE1           BLX      R1
     54                if (GUI_pfDispCharStyle) {
   \   00000064   ........           LDR      R0,??DataTable4_1
   \   00000068   001090E5           LDR      R1,[R0, #+0]
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   0100000A           BEQ      ??GL_DispChar_1
     55                  GUI_pfDispCharStyle(c);
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   31FF2FE1           BLX      R1
     56                }
     57                GUI_UNLOCK();
   \                     ??GL_DispChar_1:
   \   0000007C   ........           BL       GUI_Unlock
     58              }
     59            }
     60          }
   \                     ??GL_DispChar_2:
   \   00000080   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000084   3080BDE8           POP      {R4,R5,PC}       ;; return
     61          
     62          /*********************************************************************
     63          *
     64          *       GUI_GetYAdjust
     65          *
     66          * Returns adjustment in vertical (Y) direction
     67          *
     68          * Note: The return value needs to be subtracted from
     69          *       the y-position of the character.
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          int GUI_GetYAdjust(void) {
   \                     GUI_GetYAdjust:
   \   00000000   10402DE9           PUSH     {R4,LR}
     72            int r = 0;
   \   00000004   0040A0E3           MOV      R4,#+0
     73            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
     74            switch (GUI_Context.TextAlign & GUI_TA_VERTICAL) {
   \   0000000C   ........           LDR      R0,??DataTable4
   \   00000010   2C10D0E5           LDRB     R1,[R0, #+44]
   \   00000014   0C1001E2           AND      R1,R1,#0xC
   \   00000018   041051E2           SUBS     R1,R1,#+4
   \   0000001C   0500000A           BEQ      ??GUI_GetYAdjust_0
   \   00000020   041051E2           SUBS     R1,R1,#+4
   \   00000024   04105112           SUBSNE   R1,R1,#+4
   \   00000028   1C009005           LDREQ    R0,[R0, #+28]
   \   0000002C   1800D005           LDRBEQ   R0,[R0, #+24]
   \   00000030   A040A001           LSREQ    R4,R0,#+1
   \   00000034   020000EA           B        ??GUI_GetYAdjust_1
     75          	case GUI_TA_BOTTOM:
     76          		r = GUI_Context.pAFont->YSize - 1;
   \                     ??GUI_GetYAdjust_0:
   \   00000038   1C0090E5           LDR      R0,[R0, #+28]
   \   0000003C   1800D0E5           LDRB     R0,[R0, #+24]
   \   00000040   014040E2           SUB      R4,R0,#+1
     77              break;
     78          	case GUI_TA_VCENTER:
     79          		r = GUI_Context.pAFont->YSize / 2;
     80              break;
     81          	case GUI_TA_BASELINE:
     82          		r = GUI_Context.pAFont->YSize / 2;
     83          	}
     84            GUI_UNLOCK();
   \                     ??GUI_GetYAdjust_1:
   \   00000044   ........           BL       GUI_Unlock
     85            return r;
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       GUI_GetFontDistY
     91          */

   \                                 In section .text, align 4, keep-with-next
     92          int GUI_GetFontDistY(void) {
   \                     GUI_GetFontDistY:
   \   00000000   10402DE9           PUSH     {R4,LR}
     93            int r;
     94            GUI_LOCK();
   \   00000004   ........           BL       GUI_Lock
     95            r = GUI_Context.pAFont->YDist;
   \   00000008   ........           LDR      R0,??DataTable4
   \   0000000C   1C0090E5           LDR      R0,[R0, #+28]
   \   00000010   1940D0E5           LDRB     R4,[R0, #+25]
     96            GUI_UNLOCK();
   \   00000014   ........           BL       GUI_Unlock
     97            return r;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     98          }
     99          
    100          /*********************************************************************
    101          *
    102          *       GUI_GetCharDistX
    103          */

   \                                 In section .text, align 4, keep-with-next
    104          int GUI_GetCharDistX(U16 c) {
   \                     GUI_GetCharDistX:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    105            int r;
    106            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
    107            r = GUI_Context.pAFont->pfGetCharDistX(c);
   \   0000000C   ........           LDR      R1,??DataTable4
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1C1091E5           LDR      R1,[R1, #+28]
   \   00000018   041091E5           LDR      R1,[R1, #+4]
   \   0000001C   31FF2FE1           BLX      R1
   \   00000020   0040A0E1           MOV      R4,R0
    108            GUI_UNLOCK();
   \   00000024   ........           BL       GUI_Unlock
    109            return r;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    110          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     GUI_pfDispCharStyle
    111          
    112          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     GL_DispChar          16
     GUI_DispNextLine     16
     GUI_GetCharDistX      8
     GUI_GetFontDistY      8
     GUI_GetYAdjust        8


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     GUI_DispNextLine   64
     GL_DispChar       136
     GUI_GetYAdjust     80
     GUI_GetFontDistY   32
     GUI_GetCharDistX   48
     ??DataTable4        4
     ??DataTable4_1      4

 
 368 bytes in section .text
 
 368 bytes of CODE memory

Errors: none
Warnings: none
