###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WIDGET_FillStringInRect.c           #
#    Command line =  C:\DUII\TargetHW\GUI\WIDGET_FillStringInRect.c -D        #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\WI #
#                    DGET_FillStringInRect.lst                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\WID #
#                    GET_FillStringInRect.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WIDGET_FillStringInRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WIDGET_FillStringInRect.c
     19          Purpose     : Implementation of widget function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          #include "WM.h"
     30          #include "WIDGET.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Private config defaults
     35          *
     36          **********************************************************************
     37          */
     38          
     39          #ifndef WIDGET_FILL_TEXT_USES_TRANS
     40            #define WIDGET_FILL_TEXT_USES_TRANS 0
     41          #endif
     42          
     43          /*********************************************************************
     44          *
     45          *       Public code
     46          *
     47          **********************************************************************
     48          */
     49          /*********************************************************************
     50          *
     51          *       WIDGET__FillStringInRect
     52          *
     53          * Purpose
     54          *
     55          * Parameters
     56          *
     57          * Notes
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          void WIDGET__FillStringInRect(const char GUI_UNI_PTR * pText, const GUI_RECT * pFillRect, const GUI_RECT * pTextRectMax, const GUI_RECT * pTextRectAct) {
   \                     WIDGET__FillStringInRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     60            /* Check if we have anything to do at all ... */
     61            if (GUI_Context.pClipRect_HL) {
   \   00000004   34819FE5           LDR      R8,??WIDGET__FillStringInRect_0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   140098E5           LDR      R0,[R8, #+20]
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0350A0E1           MOV      R5,R3
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1500000A           BEQ      ??WIDGET__FillStringInRect_1
     62              GUI_RECT r;
     63              r = *pFillRect;
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   0820A0E3           MOV      R2,#+8
   \   00000030   ........           BL       __aeabi_memcpy
     64              WM_ADDORG(r.x0, r.y0);
   \   00000034   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000038   400098E5           LDR      R0,[R8, #+64]
   \   0000003C   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000040   011080E0           ADD      R1,R0,R1
   \   00000044   B010CDE1           STRH     R1,[SP, #+0]
   \   00000048   441098E5           LDR      R1,[R8, #+68]
   \   0000004C   022081E0           ADD      R2,R1,R2
   \   00000050   B220CDE1           STRH     R2,[SP, #+2]
     65              WM_ADDORG(r.x1, r.y1);
   \   00000054   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000058   020080E0           ADD      R0,R0,R2
   \   0000005C   B400CDE1           STRH     R0,[SP, #+4]
   \   00000060   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000064   000081E0           ADD      R0,R1,R0
   \   00000068   B600CDE1           STRH     R0,[SP, #+6]
     66              if (GUI_RectsIntersect(GUI_Context.pClipRect_HL, &r) == 0)
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   140098E5           LDR      R0,[R8, #+20]
   \   00000074   ........           BL       GUI_RectsIntersect
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   2D00000A           BEQ      ??WIDGET__FillStringInRect_2
     67                return;
     68            }
     69          
     70            if (pText) {
   \                     ??WIDGET__FillStringInRect_1:
   \   00000080   000054E3           CMP      R4,#+0
     71              if (*pText) {             /* Speed optimization, not required */
   \   00000084   0000D415           LDRBNE   R0,[R4, #+0]
   \   00000088   00005013           CMPNE    R0,#+0
   \   0000008C   2700000A           BEQ      ??WIDGET__FillStringInRect_3
     72                const GUI_RECT* pOldClipRect;
     73          
     74          
     75                /* Fill border */
     76                #if WIDGET_FILL_TEXT_USES_TRANS
     77                  GUI_ClearRectEx(pFillRect);
     78                #else
     79                  {
     80                    GUI_RECT rText;
     81                    GUI__IntersectRects(&rText, pTextRectMax, pTextRectAct);
   \   00000090   0520A0E1           MOV      R2,R5
   \   00000094   0710A0E1           MOV      R1,R7
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           BL       GUI__IntersectRects
     82                    GUI_ClearRect(pFillRect->x0, pFillRect->y0, pFillRect->x1, rText.y0 - 1); /* Top */
   \   000000A0   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000A4   F420D6E1           LDRSH    R2,[R6, #+4]
   \   000000A8   F210D6E1           LDRSH    R1,[R6, #+2]
   \   000000AC   013040E2           SUB      R3,R0,#+1
   \   000000B0   F000D6E1           LDRSH    R0,[R6, #+0]
   \   000000B4   ........           BL       GUI_ClearRect
     83                    GUI_ClearRect(pFillRect->x0, rText.y0,      rText.x0 - 1 , rText.y1);     /* Left */
   \   000000B8   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000BC   F630DDE1           LDRSH    R3,[SP, #+6]
   \   000000C0   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000C4   012040E2           SUB      R2,R0,#+1
   \   000000C8   F000D6E1           LDRSH    R0,[R6, #+0]
   \   000000CC   ........           BL       GUI_ClearRect
     84                    GUI_ClearRect(rText.x1 + 1,  rText.y0,      pFillRect->x1, rText.y1);     /* Right */
   \   000000D0   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000D4   F630DDE1           LDRSH    R3,[SP, #+6]
   \   000000D8   F420D6E1           LDRSH    R2,[R6, #+4]
   \   000000DC   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000E0   010080E2           ADD      R0,R0,#+1
   \   000000E4   ........           BL       GUI_ClearRect
     85                    GUI_ClearRect(pFillRect->x0, rText.y1 + 1,  pFillRect->x1, pFillRect->y1);/* Bottom */
   \   000000E8   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000EC   F630D6E1           LDRSH    R3,[R6, #+6]
   \   000000F0   F420D6E1           LDRSH    R2,[R6, #+4]
   \   000000F4   011080E2           ADD      R1,R0,#+1
   \   000000F8   F000D6E1           LDRSH    R0,[R6, #+0]
   \   000000FC   ........           BL       GUI_ClearRect
     86                  }
     87                #endif
     88          
     89                /* Set clipping rectangle */
     90                pOldClipRect = WM_SetUserClipRect(pTextRectMax);
   \   00000100   0700A0E1           MOV      R0,R7
   \   00000104   ........           BL       WM_SetUserClipRect
   \   00000108   0060A0E1           MOV      R6,R0
     91          
     92                /* Display text */
     93                #if WIDGET_FILL_TEXT_USES_TRANS
     94                  GUI_SetTextMode(GUI_TM_TRANS);
     95                #else
     96                  GUI_SetTextMode(GUI_TM_NORMAL);
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   ........           BL       GUI_SetTextMode
     97                #endif
     98                GUI_DispStringAt(pText, pTextRectAct->x0, pTextRectAct->y0);
   \   00000114   F220D5E1           LDRSH    R2,[R5, #+2]
   \   00000118   F010D5E1           LDRSH    R1,[R5, #+0]
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       GUI_DispStringAt
     99          
    100                /* Restore clipping rectangle */
    101                WM_SetUserClipRect(pOldClipRect);
   \   00000124   0600A0E1           MOV      R0,R6
   \   00000128   ........           BL       WM_SetUserClipRect
    102                return;
   \   0000012C   010000EA           B        ??WIDGET__FillStringInRect_2
    103              }
    104            }
    105            GUI_ClearRectEx(pFillRect);
   \                     ??WIDGET__FillStringInRect_3:
   \   00000130   0600A0E1           MOV      R0,R6
   \   00000134   ........           BL       GUI_ClearRectEx
    106          }
   \                     ??WIDGET__FillStringInRect_2:
   \   00000138   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000013C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??WIDGET__FillStringInRect_0:
   \   00000140   ........           DC32     GUI_Context
    107          
    108          #else  /* avoid empty object files */
    109          
    110          void WIDGET__FillStringInRect_C(void) {}
    111          
    112          #endif
    113          
    114          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     WIDGET__FillStringInRect     32


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     WIDGET__FillStringInRect  324

 
 324 bytes in section .text
 
 324 bytes of CODE memory

Errors: none
Warnings: none
