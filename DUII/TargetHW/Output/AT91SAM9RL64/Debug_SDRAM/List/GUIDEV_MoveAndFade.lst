###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFade.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFade.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_MoveAndFade.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_MoveAndFade.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFade.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_MoveAndFade.c
     19          Purpose     : Routines for fading and moving memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include <stddef.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if (GUI_SUPPORT_MEMDEV)
     29          
     30          /*********************************************************************
     31          *
     32          *       Defines
     33          *
     34          **********************************************************************
     35          */
     36          #ifdef WIN32
     37            #define TIME_PER_FRAME 10
     38          #else
     39            #define TIME_PER_FRAME 40
     40          #endif
     41          
     42          /*********************************************************************
     43          *
     44          *       Private code
     45          *
     46          **********************************************************************
     47          */
     48          /*********************************************************************
     49          *
     50          *       GUI_MEMDEV__FadeDeviceEx
     51          */

   \                                 In section .text, align 4, keep-with-next
     52          void GUI_MEMDEV__FadeDeviceEx(GUI_MEMDEV_Handle hMemWin, GUI_MEMDEV_Handle hMemBk, GUI_MEMDEV_Handle hMemDst, U8 Intens, int xPosWin, int yPosWin) {
   \                     GUI_MEMDEV__FadeDeviceEx:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   28909DE5           LDR      R9,[SP, #+40]
   \   00000014   2CA09DE5           LDR      R10,[SP, #+44]
     53            int xSizeWin, ySizeWin, y, xSizeBk;
     54            U32 Color, ColorDst, ColorBk, NumPixels, a;
     55            U32 * pWin; // Device of window to fade in
     56            U32 * pBk;  // Device of background
     57            U32 * pDst; // Destination device to be drawn
     58            
     59            xSizeWin = GUI_MEMDEV_GetXSize(hMemWin);
   \   00000018   ........           BL       GUI_MEMDEV_GetXSize
   \   0000001C   0040A0E1           MOV      R4,R0
     60            ySizeWin = GUI_MEMDEV_GetYSize(hMemWin);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       GUI_MEMDEV_GetYSize
   \   00000028   0080A0E1           MOV      R8,R0
     61            pWin     = (U32 *)GUI_MEMDEV_GetDataPtr(hMemWin);
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       GUI_MEMDEV_GetDataPtr
   \   00000034   0050A0E1           MOV      R5,R0
     62            pBk      = (U32 *)GUI_MEMDEV_GetDataPtr(hMemBk);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           BL       GUI_MEMDEV_GetDataPtr
   \   00000040   00B0A0E1           MOV      R11,R0
     63            pDst     = (U32 *)GUI_MEMDEV_GetDataPtr(hMemDst);
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           BL       GUI_MEMDEV_GetDataPtr
   \   0000004C   0060A0E1           MOV      R6,R0
     64            xSizeBk  = GUI_MEMDEV_GetXSize(hMemBk);
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           BL       GUI_MEMDEV_GetXSize
     65            pBk     += (yPosWin * xSizeBk) + xPosWin;
   \   00000058   909A21E0           MLA      R1,R0,R10,R9
     66            //
     67            // Iterate over all lines of window device
     68            //
     69            for (y = 0; y < ySizeWin; y++) {
   \   0000005C   010058E3           CMP      R8,#+1
   \   00000060   01718BE0           ADD      R7,R11,R1, LSL #+2
   \   00000064   140000BA           BLT      ??GUI_MEMDEV__FadeDeviceEx_0
   \   00000068   049040E0           SUB      R9,R0,R4
   \   0000006C   00A0DDE5           LDRB     R10,[SP, #+0]
     70              NumPixels = xSizeWin;
   \                     ??GUI_MEMDEV__FadeDeviceEx_1:
   \   00000070   04B0A0E1           MOV      R11,R4
     71              do {
     72                //
     73                // Get colors
     74                //
     75                Color   = *pWin++;
   \                     ??GUI_MEMDEV__FadeDeviceEx_2:
   \   00000074   040095E4           LDR      R0,[R5], #+4
     76                ColorBk = *pBk++;
     77                //
     78                // Calculate intensity
     79                //
     80                a = ((255 - (Color >> 24)) * Intens) / 255;
     81                //
     82                // Mix up colors
     83                //
     84                ColorDst = GUI__MixColors(Color, ColorBk, a) & 0xFFFFFF; // No alpha value after this operation!
     85                //
     86                // Save result and continue
     87                //
     88                *pDst++ = ColorDst;
   \   00000078   FF20A0E3           MOV      R2,#+255
   \   0000007C   202C42E0           SUB      R2,R2,R0, LSR #+24
   \   00000080   9A0202E0           MUL      R2,R10,R2
   \   00000084   ........           LDR      R12,??DataTable1  ;; 0x80808081
   \   00000088   041097E4           LDR      R1,[R7], #+4
   \   0000008C   92CC83E0           UMULL    R12,R3,R2,R12
   \   00000090   A323A0E1           LSR      R2,R3,#+7
   \   00000094   FF2002E2           AND      R2,R2,#0xFF
   \   00000098   ........           BL       GUI__MixColors
   \   0000009C   0004A0E1           LSL      R0,R0,#+8
   \   000000A0   2004A0E1           LSR      R0,R0,#+8
   \   000000A4   040086E4           STR      R0,[R6], #+4
     89              } while (--NumPixels);
   \   000000A8   01B05BE2           SUBS     R11,R11,#+1
   \   000000AC   F0FFFF1A           BNE      ??GUI_MEMDEV__FadeDeviceEx_2
     90              //
     91              // Move background pointer to the beginning of the next line
     92              //
     93              pBk += xSizeBk - xSizeWin;
   \   000000B0   097187E0           ADD      R7,R7,R9, LSL #+2
     94            }
   \   000000B4   018058E2           SUBS     R8,R8,#+1
   \   000000B8   ECFFFF1A           BNE      ??GUI_MEMDEV__FadeDeviceEx_1
     95          }
   \                     ??GUI_MEMDEV__FadeDeviceEx_0:
   \   000000BC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000C0   F08FBDE8           POP      {R4-R11,PC}      ;; return
     96          
     97          /*********************************************************************
     98          *
     99          *       GUI_MEMDEV__FadeDevice
    100          *
    101          * Purpose:
    102          *   This function mixes up 2 memory devices into a destination device.
    103          *
    104          *   Please note: hMemWin and hMemDst have to have same size and position.
    105          *
    106          * Parameters:
    107          *    hMemWin - Memory device to be mixed up with background
    108          *    hMemBk  - Background to be used
    109          *    hMemDst - Destination device
    110          *    Intens  - Intensity of hMemWin
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          void GUI_MEMDEV__FadeDevice(GUI_MEMDEV_Handle hMemWin, GUI_MEMDEV_Handle hMemBk, GUI_MEMDEV_Handle hMemDst, U8 Intens) {
   \                     GUI_MEMDEV__FadeDevice:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    113            GUI_MEMDEV__FadeDeviceEx(hMemWin, hMemBk, hMemDst, Intens, 0, 0);
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   04C08DE5           STR      R12,[SP, #+4]
   \   00000010   00C08DE5           STR      R12,[SP, #+0]
   \   00000014   ........           BL       GUI_MEMDEV__FadeDeviceEx
    114          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    115          
    116          /*********************************************************************
    117          *
    118          *       Public code
    119          *
    120          **********************************************************************
    121          */
    122          /*********************************************************************
    123          *
    124          *       GUI_MEMDEV_FadeDevices
    125          */

   \                                 In section .text, align 4, keep-with-next
    126          int GUI_MEMDEV_FadeDevices(GUI_MEMDEV_Handle hMem0, GUI_MEMDEV_Handle hMem1, int Period) {
   \                     GUI_MEMDEV_FadeDevices:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    127            int TimeStart, TimeNow, TimeDiff, TimeUsed, Intens;
    128            int xSize0, xSize1, ySize0, ySize1, xPos0, yPos0, xPos1, yPos1;
    129            int r;
    130            GUI_MEMDEV_Handle hMemWork;
    131          
    132            //
    133            // Check if size and position of hMem0 and hMem1 are the same
    134            //
    135            xSize0 = GUI_MEMDEV_GetXSize(hMem0);
   \   00000014   ........           BL       GUI_MEMDEV_GetXSize
   \   00000018   0070A0E1           MOV      R7,R0
    136            xSize1 = GUI_MEMDEV_GetXSize(hMem1);
    137            if (xSize0 != xSize1) {
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       GUI_MEMDEV_GetXSize
   \   00000024   000057E1           CMP      R7,R0
   \   00000028   0100000A           BEQ      ??GUI_MEMDEV_FadeDevices_0
    138              return 1;
   \                     ??GUI_MEMDEV_FadeDevices_1:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   4A0000EA           B        ??GUI_MEMDEV_FadeDevices_2
    139            }
    140            ySize0 = GUI_MEMDEV_GetYSize(hMem0);
   \                     ??GUI_MEMDEV_FadeDevices_0:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       GUI_MEMDEV_GetYSize
   \   0000003C   0080A0E1           MOV      R8,R0
    141            ySize1 = GUI_MEMDEV_GetYSize(hMem1);
    142            if (ySize0 != ySize1) {
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       GUI_MEMDEV_GetYSize
   \   00000048   000058E1           CMP      R8,R0
   \   0000004C   F6FFFF1A           BNE      ??GUI_MEMDEV_FadeDevices_1
    143              return 1;
    144            }
    145            xPos0 = GUI_MEMDEV_GetXPos(hMem0);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       GUI_MEMDEV_GetXPos
   \   00000058   0090A0E1           MOV      R9,R0
    146            xPos1 = GUI_MEMDEV_GetXPos(hMem1);
    147            if (xPos0 != xPos1) {
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       GUI_MEMDEV_GetXPos
   \   00000064   000059E1           CMP      R9,R0
   \   00000068   EFFFFF1A           BNE      ??GUI_MEMDEV_FadeDevices_1
    148              return 1;
    149            }
    150            yPos0 = GUI_MEMDEV_GetYPos(hMem0);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       GUI_MEMDEV_GetYPos
   \   00000074   00A0A0E1           MOV      R10,R0
    151            yPos1 = GUI_MEMDEV_GetYPos(hMem1);
    152            if (yPos0 != yPos1) {
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       GUI_MEMDEV_GetYPos
   \   00000080   00005AE1           CMP      R10,R0
   \   00000084   E8FFFF1A           BNE      ??GUI_MEMDEV_FadeDevices_1
    153              return 1;
    154            }
    155            //
    156            // Create working device
    157            //
    158            GUI_LOCK();
   \   00000088   ........           BL       GUI_Lock
    159            hMemWork = GUI_MEMDEV_CreateFixed(xPos0, yPos0, xSize0, ySize0, GUI_MEMDEV_NOTRANS, GUI_MEMDEV_APILIST_32, GUI_COLOR_CONV_888);
   \   0000008C   ........           LDR      R0,??DataTable1_1
   \   00000090   0830A0E1           MOV      R3,R8
   \   00000094   08008DE5           STR      R0,[SP, #+8]
   \   00000098   ........           LDR      R0,??DataTable1_2
   \   0000009C   0720A0E1           MOV      R2,R7
   \   000000A0   04008DE5           STR      R0,[SP, #+4]
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   00008DE5           STR      R0,[SP, #+0]
   \   000000AC   0A10A0E1           MOV      R1,R10
   \   000000B0   0900A0E1           MOV      R0,R9
   \   000000B4   ........           BL       GUI_MEMDEV_CreateFixed
   \   000000B8   0070B0E1           MOVS     R7,R0
    160            if (hMemWork) {
   \   000000BC   2400000A           BEQ      ??GUI_MEMDEV_FadeDevices_3
    161              //
    162              // Do animation
    163              //
    164              TimeStart = GUI_GetTime();
   \   000000C0   ........           BL       GUI_GetTime
   \   000000C4   0080A0E1           MOV      R8,R0
    165              GUI_X_Delay(TIME_PER_FRAME);
   \   000000C8   2800A0E3           MOV      R0,#+40
   \   000000CC   ........           BL       GUI_X_Delay
   \   000000D0   089086E0           ADD      R9,R6,R8
    166              do {
    167                //
    168                // Calculate elapsed time
    169                //
    170                TimeNow  = GUI_GetTime();
   \                     ??GUI_MEMDEV_FadeDevices_4:
   \   000000D4   ........           BL       GUI_GetTime
   \   000000D8   00A0A0E1           MOV      R10,R0
    171                TimeDiff = TimeNow - TimeStart;
   \   000000DC   08004AE0           SUB      R0,R10,R8
    172                TimeDiff = (TimeDiff > Period) ? Period : TimeDiff;
   \   000000E0   000056E1           CMP      R6,R0
   \   000000E4   0600A0D1           MOVLE    R0,R6
    173                //
    174                // Calculate parameters
    175                //
    176                Intens = (TimeDiff * 255) / Period;
   \   000000E8   000460E0           RSB      R0,R0,R0, LSL #+8
   \   000000EC   0610A0E1           MOV      R1,R6
   \   000000F0   ........           BL       __aeabi_idiv
    177                Intens = (Intens > 255) ? 255 : Intens;
   \   000000F4   400F50E3           CMP      R0,#+256
   \   000000F8   FF00A0A3           MOVGE    R0,#+255
    178                //
    179                // Fade device
    180                //
    181                GUI_MEMDEV__FadeDevice(hMem0, hMem1, hMemWork, Intens);
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   04108DE5           STR      R1,[SP, #+4]
   \   00000104   00108DE5           STR      R1,[SP, #+0]
   \   00000108   FF3000E2           AND      R3,R0,#0xFF
   \   0000010C   0720A0E1           MOV      R2,R7
   \   00000110   0510A0E1           MOV      R1,R5
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       GUI_MEMDEV__FadeDeviceEx
    182                //
    183                // Draw memory device
    184                //
    185                GUI_MEMDEV_CopyToLCD(hMemWork);
   \   0000011C   0700A0E1           MOV      R0,R7
   \   00000120   ........           BL       GUI_MEMDEV_CopyToLCD
    186                //
    187                // Make sure not more than 25 frames per second are drawn
    188                //
    189                TimeUsed = GUI_GetTime() - TimeNow;
   \   00000124   ........           BL       GUI_GetTime
   \   00000128   0A0040E0           SUB      R0,R0,R10
    190                if (TimeUsed < TIME_PER_FRAME) {
   \   0000012C   280050E3           CMP      R0,#+40
   \   00000130   010000AA           BGE      ??GUI_MEMDEV_FadeDevices_5
    191                  GUI_X_Delay(TIME_PER_FRAME - TimeUsed);
   \   00000134   280060E2           RSB      R0,R0,#+40
   \   00000138   ........           BL       GUI_X_Delay
    192                }
    193              } while (TimeNow < (TimeStart + Period));
   \                     ??GUI_MEMDEV_FadeDevices_5:
   \   0000013C   09005AE1           CMP      R10,R9
   \   00000140   E3FFFFBA           BLT      ??GUI_MEMDEV_FadeDevices_4
    194              GUI_MEMDEV_Delete(hMemWork);
   \   00000144   0700A0E1           MOV      R0,R7
   \   00000148   ........           BL       GUI_MEMDEV_Delete
    195              r = 0;
   \   0000014C   0040A0E3           MOV      R4,#+0
   \   00000150   000000EA           B        ??GUI_MEMDEV_FadeDevices_6
    196            } else {
    197              r = 1;
   \                     ??GUI_MEMDEV_FadeDevices_3:
   \   00000154   0140A0E3           MOV      R4,#+1
    198            }
    199            GUI_UNLOCK();
   \                     ??GUI_MEMDEV_FadeDevices_6:
   \   00000158   ........           BL       GUI_Unlock
    200            return r;
   \   0000015C   0400A0E1           MOV      R0,R4
   \                     ??GUI_MEMDEV_FadeDevices_2:
   \   00000160   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000164   F087BDE8           POP      {R4-R10,PC}      ;; return
    201          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   81808080           DC32     0x80808081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_API_ColorConv_888

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32
    202          
    203          #else
    204          
    205          void GUIDEV_MoveAndFade_C(void);
    206          void GUIDEV_MoveAndFade_C(void) {} /* avoid empty object files */
    207          
    208          #endif
    209          
    210          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUI_MEMDEV_FadeDevices       48
     GUI_MEMDEV__FadeDevice       16
     GUI_MEMDEV__FadeDeviceEx     40


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     GUI_MEMDEV__FadeDeviceEx  196
     GUI_MEMDEV__FadeDevice     32
     GUI_MEMDEV_FadeDevices    360
     ??DataTable1                4
     ??DataTable1_1              4
     ??DataTable1_2              4

 
 600 bytes in section .text
 
 600 bytes of CODE memory

Errors: none
Warnings: none
