###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonClose.c              #
#    Command line =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonClose.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FR #
#                    AMEWIN_ButtonClose.lst                                   #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FRA #
#                    MEWIN_ButtonClose.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonClose.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FRAMEWIN_ButtonClose.c
     19          Purpose     : 
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <stdlib.h>
     25          #include <string.h>
     26          #include "GUI_Private.h"
     27          #include "FRAMEWIN_Private.h"
     28          #include "BUTTON.h"
     29          
     30          #if GUI_WINSUPPORT
     31          
     32          /*********************************************************************
     33          *
     34          *        Static code
     35          *
     36          **********************************************************************
     37          */
     38          /*********************************************************************
     39          *
     40          *       Callback
     41          *
     42          * This is the overwritten callback routine for the button.
     43          * The primary reason for overwriting it is that we define the default
     44          * action of the Framewindow here.
     45          * It works as follows:
     46          * - User clicks and releases the button
     47          *   -> BUTTON sends WM_NOTIFY_PARENT to FRAMEWIN
     48          *     -> FRAMEWIN either a) reacts or b)sends WM_NOTIFY_PARENT_REFLECTION back
     49          *       In case of a) This module reacts !
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          static void _cbClose(WM_MESSAGE * pMsg) {
   \                     _cbClose:
   \   00000000   00402DE9           PUSH     {LR}
     52            if (pMsg->MsgId == WM_NOTIFY_PARENT_REFLECTION) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   270051E3           CMP      R1,#+39
   \   00000010   0300001A           BNE      ??_cbClose_0
     53              GUI_EndDialog(pMsg->hWinSrc, 0);
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   080090E5           LDR      R0,[R0, #+8]
   \   0000001C   ........           BL       GUI_EndDialog
     54              return;                                       /* We are done ! */
   \   00000020   000000EA           B        ??_cbClose_1
     55            }
     56            BUTTON_Callback(pMsg);
   \                     ??_cbClose_0:
   \   00000024   ........           BL       BUTTON_Callback
     57          }
   \                     ??_cbClose_1:
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   0080BDE8           POP      {PC}             ;; return
     58          
     59          /*********************************************************************
     60          *
     61          *       _Draw
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          static void _Draw(WM_HWIN hObj) {
   \                     _Draw:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
     64            GUI_RECT r;
     65            int i, Size;
     66            
     67            GUI_SetColor(GUI_BLACK);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       GUI_SetColor
     68            WM_GetInsideRectEx(hObj, &r);
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       WM_GetInsideRectEx
     69            WM_ADDORG(r.x0, r.y0);
   \   00000020   ........           LDR      R1,??DataTable1
   \   00000024   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000028   400091E5           LDR      R0,[R1, #+64]
   \   0000002C   441091E5           LDR      R1,[R1, #+68]
   \   00000030   022080E0           ADD      R2,R0,R2
   \   00000034   B020CDE1           STRH     R2,[SP, #+0]
   \   00000038   F220DDE1           LDRSH    R2,[SP, #+2]
   \   0000003C   022081E0           ADD      R2,R1,R2
   \   00000040   B220CDE1           STRH     R2,[SP, #+2]
     70            WM_ADDORG(r.x1, r.y1);
   \   00000044   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000048   020080E0           ADD      R0,R0,R2
   \   0000004C   F620DDE1           LDRSH    R2,[SP, #+6]
   \   00000050   B400CDE1           STRH     R0,[SP, #+4]
     71            Size = r.x1 - r.x0 - 2;
   \   00000054   0008A0E1           LSL      R0,R0,#+16
   \   00000058   021081E0           ADD      R1,R1,R2
   \   0000005C   B610CDE1           STRH     R1,[SP, #+6]
   \   00000060   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000064   4008A0E1           ASR      R0,R0,#+16
   \   00000068   010040E0           SUB      R0,R0,R1
   \   0000006C   024040E2           SUB      R4,R0,#+2
     72            WM_ITERATE_START(&r); {
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       WM__InitIVRSearch
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   3300000A           BEQ      ??_Draw_0
     73              for (i = 2; i < Size; i++) {
   \                     ??_Draw_1:
   \   00000080   0260A0E3           MOV      R6,#+2
   \   00000084   030054E3           CMP      R4,#+3
   \   00000088   2D0000BA           BLT      ??_Draw_2
   \   0000008C   025044E2           SUB      R5,R4,#+2
   \   00000090   010015E3           TST      R5,#0x1
   \   00000094   0C00000A           BEQ      ??_Draw_3
     74                LCD_DrawHLine(r.x0 + i,     r.y0 + i, r.x0 + i + 1);
   \   00000098   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000009C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000A0   032080E2           ADD      R2,R0,#+3
   \   000000A4   021081E2           ADD      R1,R1,#+2
   \   000000A8   020080E2           ADD      R0,R0,#+2
   \   000000AC   ........           BL       LCD_DrawHLine
     75                LCD_DrawHLine(r.x1 - i - 1, r.y0 + i, r.x1 - i);
   \   000000B0   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000B4   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000B8   022040E2           SUB      R2,R0,#+2
   \   000000BC   021081E2           ADD      R1,R1,#+2
   \   000000C0   030040E2           SUB      R0,R0,#+3
   \   000000C4   ........           BL       LCD_DrawHLine
   \   000000C8   0360A0E3           MOV      R6,#+3
   \                     ??_Draw_3:
   \   000000CC   A550B0E1           LSRS     R5,R5,#+1
   \   000000D0   1B00000A           BEQ      ??_Draw_2
   \                     ??_Draw_4:
   \   000000D4   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000D8   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000DC   000086E0           ADD      R0,R6,R0
   \   000000E0   012080E2           ADD      R2,R0,#+1
   \   000000E4   011086E0           ADD      R1,R6,R1
   \   000000E8   ........           BL       LCD_DrawHLine
   \   000000EC   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000F0   062040E0           SUB      R2,R0,R6
   \   000000F4   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000F8   001086E0           ADD      R1,R6,R0
   \   000000FC   010042E2           SUB      R0,R2,#+1
   \   00000100   ........           BL       LCD_DrawHLine
   \   00000104   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000108   F210DDE1           LDRSH    R1,[SP, #+2]
   \   0000010C   016086E2           ADD      R6,R6,#+1
   \   00000110   000086E0           ADD      R0,R6,R0
   \   00000114   012080E2           ADD      R2,R0,#+1
   \   00000118   011086E0           ADD      R1,R6,R1
   \   0000011C   ........           BL       LCD_DrawHLine
   \   00000120   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000124   062040E0           SUB      R2,R0,R6
   \   00000128   F200DDE1           LDRSH    R0,[SP, #+2]
   \   0000012C   001086E0           ADD      R1,R6,R0
   \   00000130   010042E2           SUB      R0,R2,#+1
   \   00000134   ........           BL       LCD_DrawHLine
     76              }
   \   00000138   016086E2           ADD      R6,R6,#+1
   \   0000013C   015055E2           SUBS     R5,R5,#+1
   \   00000140   E3FFFF1A           BNE      ??_Draw_4
     77            } WM_ITERATE_END();
   \                     ??_Draw_2:
   \   00000144   ........           BL       WM__GetNextIVR
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   CBFFFF1A           BNE      ??_Draw_1
     78          }
   \                     ??_Draw_0:
   \   00000150   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000154   7080BDE8           POP      {R4-R6,PC}       ;; return
     79          
     80          
     81          /*********************************************************************
     82          *
     83          *        Exported routines
     84          *
     85          **********************************************************************
     86          */
     87          /*********************************************************************
     88          *
     89          *       FRAMEWIN_AddCloseButton
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          WM_HWIN FRAMEWIN_AddCloseButton(FRAMEWIN_Handle hObj, int Flags, int Off) {
   \                     FRAMEWIN_AddCloseButton:
   \   00000000   10402DE9           PUSH     {R4,LR}
     92            WM_HWIN hButton;
     93            hButton = FRAMEWIN_AddButton(hObj, Flags, Off, GUI_ID_CLOSE);
   \   00000004   0530A0E3           MOV      R3,#+5
   \   00000008   ........           BL       FRAMEWIN_AddButton
   \   0000000C   0040A0E1           MOV      R4,R0
     94            BUTTON_SetSelfDraw(hButton, 0, &_Draw);
   \   00000010   ........           LDR      R2,??DataTable1_1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           BL       BUTTON_SetSelfDraw
     95            WM_SetCallback(hButton, _cbClose);
   \   0000001C   ........           LDR      R1,??DataTable1_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       WM_SetCallback
     96            return hButton;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     97          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     _Draw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     _cbClose
     98          
     99          #else
    100            void FRAMEWIN_ButtonClose_c(void) {} /* avoid empty object files */
    101          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     FRAMEWIN_AddCloseButton      8
     _Draw                       24
     _cbClose                     8


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _cbClose                  48
     _Draw                    344
     FRAMEWIN_AddCloseButton   48
     ??DataTable1               4
     ??DataTable1_1             4
     ??DataTable1_2             4

 
 452 bytes in section .text
 
 452 bytes of CODE memory

Errors: none
Warnings: none
