###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMin.c                #
#    Command line =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMin.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FR #
#                    AMEWIN_ButtonMin.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FRA #
#                    MEWIN_ButtonMin.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FRAMEWIN_ButtonMin.c
     19          Purpose     : 
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <stdlib.h>
     25          #include <string.h>
     26          #include "GUI_Private.h"
     27          #include "FRAMEWIN_Private.h"
     28          #include "BUTTON.h"
     29          
     30          #if GUI_WINSUPPORT
     31          
     32          /*********************************************************************
     33          *
     34          *        Static code
     35          *
     36          **********************************************************************
     37          */
     38          /*********************************************************************
     39          *
     40          *       Callback
     41          *
     42          * This is the overwritten callback routine for the button.
     43          * The primary reason for overwriting it is that we define the default
     44          * action of the Framewindow here.
     45          * It works as follows:
     46          * - User clicks and releases the button
     47          *   -> BUTTON sends WM_NOTIFY_PARENT to FRAMEWIN
     48          *     -> FRAMEWIN either a) reacts or b)sends WM_NOTIFY_PARENT_REFLECTION back
     49          *       In case of a) This module reacts !
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          static void _cbMin(WM_MESSAGE * pMsg) {
   \                     _cbMin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     52            if (pMsg->MsgId == WM_NOTIFY_PARENT_REFLECTION) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   270051E3           CMP      R1,#+39
   \   00000010   0B00001A           BNE      ??_cbMin_0
     53              WM_HWIN hObj;
     54              FRAMEWIN_Obj * pObj;
     55              U16 Flags;
     56              hObj = pMsg->hWinSrc;
   \   00000014   084090E5           LDR      R4,[R0, #+8]
     57              pObj = FRAMEWIN_LOCK_H(hObj);
     58              Flags = pObj->Flags;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   BC57D0E1           LDRH     R5,[R0, #+124]
     59              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
     60              if (Flags & FRAMEWIN_SF_MINIMIZED) {
   \   00000028   400015E3           TST      R5,#0x40
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0100000A           BEQ      ??_cbMin_1
     61                FRAMEWIN_Restore(hObj);
   \   00000034   ........           BL       FRAMEWIN_Restore
   \   00000038   020000EA           B        ??_cbMin_2
     62              } else {
     63                FRAMEWIN_Minimize(hObj);
   \                     ??_cbMin_1:
   \   0000003C   ........           BL       FRAMEWIN_Minimize
   \   00000040   000000EA           B        ??_cbMin_2
     64              }
     65              return;                                       /* We are done ! */
     66            }
     67            BUTTON_Callback(pMsg);
   \                     ??_cbMin_0:
   \   00000044   ........           BL       BUTTON_Callback
     68          }
   \                     ??_cbMin_2:
   \   00000048   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     69          
     70          /*********************************************************************
     71          *
     72          *       _DrawMin
     73          */
     74          static void _DrawMin(WM_HWIN hObj) {
     75            GUI_RECT r;
     76            int i, Size;
     77            WM_GetInsideRectEx(hObj, &r);
     78            WM_ADDORG(r.x0, r.y0);
     79            WM_ADDORG(r.x1, r.y1);
     80            Size = (r.x1 - r.x0 + 1) >> 1;
     81            WM_ITERATE_START(&r); {
     82              for (i = 1; i < Size; i++) {
     83                LCD_DrawHLine(r.x0 + i, r.y1 - i - (Size >> 1), r.x1 - i);
     84              }
     85            } WM_ITERATE_END();
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       _DrawRestore
     91          */
     92          static void _DrawRestore(WM_HWIN hObj) {
     93            GUI_RECT r;
     94            int i, Size;
     95            WM_GetInsideRectEx(hObj, &r);
     96            WM_ADDORG(r.x0, r.y0);
     97            WM_ADDORG(r.x1, r.y1);
     98            Size = (r.x1 - r.x0 + 1) >> 1;
     99            WM_ITERATE_START(&r); {
    100              for (i = 1; i < Size; i++) {
    101                LCD_DrawHLine(r.x0 + i, r.y0 + i + (Size >> 1), r.x1 - i);
    102              }
    103            } WM_ITERATE_END();
    104          }
    105          
    106          /*********************************************************************
    107          *
    108          *       _Draw
    109          */

   \                                 In section .text, align 4, keep-with-next
    110          static void _Draw(WM_HWIN hObj) {
   \                     _Draw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0050A0E1           MOV      R5,R0
    111            FRAMEWIN_Obj * pFrame;
    112            U16 Flags;
    113            WM_HWIN hFrame;
    114          
    115            hFrame = WM_GetParent(hObj);
   \   0000000C   ........           BL       WM_GetParent
    116            pFrame = FRAMEWIN_LOCK_H(hFrame);
    117            Flags = pFrame->Flags;
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   BC67D0E1           LDRH     R6,[R0, #+124]
    118            GUI_UNLOCK_H(pFrame);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    119            GUI_SetColor(GUI_BLACK);
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           BL       GUI_SetColor
    120            if (Flags & FRAMEWIN_SF_MINIMIZED) {
   \   00000024   ........           LDR      R4,??DataTable1
   \   00000028   400016E3           TST      R6,#0x40
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   4300000A           BEQ      ??_Draw_0
    121              _DrawRestore(hObj);
   \   00000038   ........           BL       WM_GetInsideRectEx
   \   0000003C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000040   400094E5           LDR      R0,[R4, #+64]
   \   00000044   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000048   011080E0           ADD      R1,R0,R1
   \   0000004C   B010CDE1           STRH     R1,[SP, #+0]
   \   00000050   441094E5           LDR      R1,[R4, #+68]
   \   00000054   022081E0           ADD      R2,R1,R2
   \   00000058   B220CDE1           STRH     R2,[SP, #+2]
   \   0000005C   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000060   020080E0           ADD      R0,R0,R2
   \   00000064   F620DDE1           LDRSH    R2,[SP, #+6]
   \   00000068   B400CDE1           STRH     R0,[SP, #+4]
   \   0000006C   0008A0E1           LSL      R0,R0,#+16
   \   00000070   021081E0           ADD      R1,R1,R2
   \   00000074   B610CDE1           STRH     R1,[SP, #+6]
   \   00000078   F010DDE1           LDRSH    R1,[SP, #+0]
   \   0000007C   4008A0E1           ASR      R0,R0,#+16
   \   00000080   010040E0           SUB      R0,R0,R1
   \   00000084   010080E2           ADD      R0,R0,#+1
   \   00000088   C040A0E1           ASR      R4,R0,#+1
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           BL       WM__InitIVRSearch
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   6B00000A           BEQ      ??_Draw_1
   \                     ??_Draw_2:
   \   0000009C   0170A0E3           MOV      R7,#+1
   \   000000A0   020054E3           CMP      R4,#+2
   \   000000A4   230000BA           BLT      ??_Draw_3
   \   000000A8   016044E2           SUB      R6,R4,#+1
   \   000000AC   C45087E0           ADD      R5,R7,R4, ASR #+1
   \   000000B0   010016E3           TST      R6,#0x1
   \   000000B4   0800000A           BEQ      ??_Draw_4
   \   000000B8   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000BC   012040E2           SUB      R2,R0,#+1
   \   000000C0   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000C4   051080E0           ADD      R1,R0,R5
   \   000000C8   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000CC   010080E2           ADD      R0,R0,#+1
   \   000000D0   ........           BL       LCD_DrawHLine
   \   000000D4   0270A0E3           MOV      R7,#+2
   \   000000D8   015085E2           ADD      R5,R5,#+1
   \                     ??_Draw_4:
   \   000000DC   A660B0E1           LSRS     R6,R6,#+1
   \   000000E0   1400000A           BEQ      ??_Draw_3
   \                     ??_Draw_5:
   \   000000E4   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000E8   072040E0           SUB      R2,R0,R7
   \   000000EC   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000F0   051080E0           ADD      R1,R0,R5
   \   000000F4   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000F8   000087E0           ADD      R0,R7,R0
   \   000000FC   ........           BL       LCD_DrawHLine
   \   00000100   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000104   017087E2           ADD      R7,R7,#+1
   \   00000108   072040E0           SUB      R2,R0,R7
   \   0000010C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000110   050080E0           ADD      R0,R0,R5
   \   00000114   011080E2           ADD      R1,R0,#+1
   \   00000118   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000011C   000087E0           ADD      R0,R7,R0
   \   00000120   ........           BL       LCD_DrawHLine
   \   00000124   016046E2           SUB      R6,R6,#+1
   \   00000128   017087E2           ADD      R7,R7,#+1
   \   0000012C   025085E2           ADD      R5,R5,#+2
   \   00000130   000056E3           CMP      R6,#+0
   \   00000134   EAFFFF1A           BNE      ??_Draw_5
   \                     ??_Draw_3:
   \   00000138   ........           BL       WM__GetNextIVR
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   D5FFFF1A           BNE      ??_Draw_2
   \   00000144   400000EA           B        ??_Draw_1
    122            } else {
    123              _DrawMin(hObj);
   \                     ??_Draw_0:
   \   00000148   ........           BL       WM_GetInsideRectEx
   \   0000014C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000150   400094E5           LDR      R0,[R4, #+64]
   \   00000154   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000158   011080E0           ADD      R1,R0,R1
   \   0000015C   B010CDE1           STRH     R1,[SP, #+0]
   \   00000160   441094E5           LDR      R1,[R4, #+68]
   \   00000164   022081E0           ADD      R2,R1,R2
   \   00000168   B220CDE1           STRH     R2,[SP, #+2]
   \   0000016C   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000170   020080E0           ADD      R0,R0,R2
   \   00000174   F620DDE1           LDRSH    R2,[SP, #+6]
   \   00000178   B400CDE1           STRH     R0,[SP, #+4]
   \   0000017C   0008A0E1           LSL      R0,R0,#+16
   \   00000180   021081E0           ADD      R1,R1,R2
   \   00000184   B610CDE1           STRH     R1,[SP, #+6]
   \   00000188   F010DDE1           LDRSH    R1,[SP, #+0]
   \   0000018C   4008A0E1           ASR      R0,R0,#+16
   \   00000190   010040E0           SUB      R0,R0,R1
   \   00000194   010080E2           ADD      R0,R0,#+1
   \   00000198   C040A0E1           ASR      R4,R0,#+1
   \   0000019C   0D00A0E1           MOV      R0,SP
   \   000001A0   ........           BL       WM__InitIVRSearch
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   2700000A           BEQ      ??_Draw_1
   \                     ??_Draw_6:
   \   000001AC   0170A0E3           MOV      R7,#+1
   \   000001B0   020054E3           CMP      R4,#+2
   \   000001B4   210000BA           BLT      ??_Draw_7
   \   000001B8   016044E2           SUB      R6,R4,#+1
   \   000001BC   010016E3           TST      R6,#0x1
   \   000001C0   0800000A           BEQ      ??_Draw_8
   \   000001C4   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000001C8   012040E2           SUB      R2,R0,#+1
   \   000001CC   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000001D0   010040E2           SUB      R0,R0,#+1
   \   000001D4   C41040E0           SUB      R1,R0,R4, ASR #+1
   \   000001D8   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000001DC   010080E2           ADD      R0,R0,#+1
   \   000001E0   ........           BL       LCD_DrawHLine
   \   000001E4   0270A0E3           MOV      R7,#+2
   \                     ??_Draw_8:
   \   000001E8   A660B0E1           LSRS     R6,R6,#+1
   \   000001EC   1300000A           BEQ      ??_Draw_7
   \                     ??_Draw_9:
   \   000001F0   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000001F4   072040E0           SUB      R2,R0,R7
   \   000001F8   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000001FC   070040E0           SUB      R0,R0,R7
   \   00000200   C41040E0           SUB      R1,R0,R4, ASR #+1
   \   00000204   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000208   000087E0           ADD      R0,R7,R0
   \   0000020C   ........           BL       LCD_DrawHLine
   \   00000210   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000214   017087E2           ADD      R7,R7,#+1
   \   00000218   072040E0           SUB      R2,R0,R7
   \   0000021C   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000220   070040E0           SUB      R0,R0,R7
   \   00000224   C41040E0           SUB      R1,R0,R4, ASR #+1
   \   00000228   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000022C   000087E0           ADD      R0,R7,R0
   \   00000230   ........           BL       LCD_DrawHLine
   \   00000234   017087E2           ADD      R7,R7,#+1
   \   00000238   016056E2           SUBS     R6,R6,#+1
   \   0000023C   EBFFFF1A           BNE      ??_Draw_9
   \                     ??_Draw_7:
   \   00000240   ........           BL       WM__GetNextIVR
   \   00000244   000050E3           CMP      R0,#+0
   \   00000248   D7FFFF1A           BNE      ??_Draw_6
    124            }
    125          }
   \                     ??_Draw_1:
   \   0000024C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000250   F080BDE8           POP      {R4-R7,PC}       ;; return
    126          
    127          /*********************************************************************
    128          *
    129          *        Exported routines
    130          *
    131          **********************************************************************
    132          */
    133          /*********************************************************************
    134          *
    135          *       FRAMEWIN_AddMinButton
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          WM_HWIN FRAMEWIN_AddMinButton(FRAMEWIN_Handle hObj, int Flags, int Off) {
   \                     FRAMEWIN_AddMinButton:
   \   00000000   10402DE9           PUSH     {R4,LR}
    138            WM_HWIN hButton;
    139            hButton = FRAMEWIN_AddButton(hObj, Flags, Off, GUI_ID_MINIMIZE);
   \   00000004   0830A0E3           MOV      R3,#+8
   \   00000008   ........           BL       FRAMEWIN_AddButton
   \   0000000C   0040A0E1           MOV      R4,R0
    140            BUTTON_SetSelfDraw(hButton, 0, &_Draw);
   \   00000010   ........           LDR      R2,??DataTable1_1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           BL       BUTTON_SetSelfDraw
    141            WM_SetCallback(hButton, _cbMin);
   \   0000001C   ........           LDR      R1,??DataTable1_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       WM_SetCallback
    142            return hButton;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    143          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     _Draw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     _cbMin
    144          
    145          #else
    146            void FRAMEWIN_ButtonMin_c(void) {} /* avoid empty object files */
    147          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     FRAMEWIN_AddMinButton      8
     _Draw                     32
     _cbMin                    16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _cbMin                  80
     _Draw                  596
     FRAMEWIN_AddMinButton   48
     ??DataTable1             4
     ??DataTable1_1           4
     ??DataTable1_2           4

 
 736 bytes in section .text
 
 736 bytes of CODE memory

Errors: none
Warnings: none
