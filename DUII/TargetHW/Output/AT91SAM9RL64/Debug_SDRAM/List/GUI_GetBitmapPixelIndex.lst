###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:55 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_GetBitmapPixelIndex.c           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_GetBitmapPixelIndex.c -D        #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_GetBitmapPixelIndex.lst                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _GetBitmapPixelIndex.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_GetBitmapPixelIndex.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_GetBitmapPixelIndex.c
     19          Purpose     : Implementation of GUI_GetBitmapPixelIndex
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI_GetBitmapPixelIndexEx
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          int GUI_GetBitmapPixelIndexEx(int BitsPerPixel, int BytesPerLine, const U8 GUI_UNI_PTR * pData, unsigned x, unsigned y) {
   \                     GUI_GetBitmapPixelIndexEx:
   \   00000000   04D04DE2           SUB      SP,SP,#+4
     36            unsigned Off, Value;
     37            const U32 GUI_UNI_PTR * p32;
     38            const U16 GUI_UNI_PTR * p16;
     39            switch (BitsPerPixel) {
   \   00000004   010040E2           SUB      R0,R0,#+1
   \   00000008   04C09DE5           LDR      R12,[SP, #+4]
   \   0000000C   1F0050E3           CMP      R0,#+31
   \   00000010   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GUI_GetBitmapPixelIndexEx_0:
   \   00000014   4800008A           BHI      ??GUI_GetBitmapPixelIndexEx_1
   \   00000018   1E0000EA           B        ??GUI_GetBitmapPixelIndexEx_2
   \   0000001C   250000EA           B        ??GUI_GetBitmapPixelIndexEx_3
   \   00000020   450000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000024   2B0000EA           B        ??GUI_GetBitmapPixelIndexEx_4
   \   00000028   430000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000002C   420000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000030   410000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000034   310000EA           B        ??GUI_GetBitmapPixelIndexEx_5
   \   00000038   3F0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000003C   3E0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000040   3D0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000044   3C0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000048   3B0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000004C   3A0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000050   390000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000054   2D0000EA           B        ??GUI_GetBitmapPixelIndexEx_6
   \   00000058   370000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000005C   360000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000060   350000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000064   340000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000068   330000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000006C   320000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000070   310000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000074   300000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000078   2F0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000007C   2E0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000080   2D0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000084   2C0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000088   2B0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   0000008C   2A0000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000090   290000EA           B        ??GUI_GetBitmapPixelIndexEx_1
   \   00000094   230000EA           B        ??GUI_GetBitmapPixelIndexEx_7
     40            case 1:
     41              Off   = (x >> 3) + (y * BytesPerLine);
     42              Value = *(pData + Off);
     43              Value = Value >> (7 - (x & 0x7)) & 0x1;
   \                     ??GUI_GetBitmapPixelIndexEx_2:
   \   00000098   910C00E0           MUL      R0,R1,R12
   \   0000009C   071003E2           AND      R1,R3,#0x7
   \   000000A0   A30180E0           ADD      R0,R0,R3, LSR #+3
   \   000000A4   0200D0E7           LDRB     R0,[R0, +R2]
   \   000000A8   071061E2           RSB      R1,R1,#+7
   \   000000AC   0120A0E3           MOV      R2,#+1
   \                     ??GUI_GetBitmapPixelIndexEx_8:
   \   000000B0   300102E0           AND      R0,R2,R0, LSR R1
     44              break;
   \   000000B4   0D0000EA           B        ??GUI_GetBitmapPixelIndexEx_9
     45            case 2:
     46              Off   = (x >> 2) + (y * BytesPerLine);
     47              Value = *(pData + Off);
     48              Value = Value >> (6 - ((x << 1) & 0x6)) & 0x3;
   \                     ??GUI_GetBitmapPixelIndexEx_3:
   \   000000B8   910C00E0           MUL      R0,R1,R12
   \   000000BC   0610A0E3           MOV      R1,#+6
   \   000000C0   230180E0           ADD      R0,R0,R3, LSR #+2
   \   000000C4   0200D0E7           LDRB     R0,[R0, +R2]
   \   000000C8   831001E0           AND      R1,R1,R3, LSL #+1
   \   000000CC   061061E2           RSB      R1,R1,#+6
   \   000000D0   0320A0E3           MOV      R2,#+3
   \   000000D4   F5FFFFEA           B        ??GUI_GetBitmapPixelIndexEx_8
     49              break;
     50            case 4:
     51              Off   = (x >> 1) + (y * BytesPerLine);
     52              Value = *(pData + Off);
   \                     ??GUI_GetBitmapPixelIndexEx_4:
   \   000000D8   910C00E0           MUL      R0,R1,R12
     53              Value = (x & 1) ? (Value & 0xF) : (Value >> 4);
   \   000000DC   010013E3           TST      R3,#0x1
   \   000000E0   A30080E0           ADD      R0,R0,R3, LSR #+1
   \   000000E4   0200D0E7           LDRB     R0,[R0, +R2]
   \   000000E8   0200000A           BEQ      ??GUI_GetBitmapPixelIndexEx_10
   \   000000EC   0F0000E2           AND      R0,R0,#0xF
   \                     ??GUI_GetBitmapPixelIndexEx_9:
   \   000000F0   04D08DE2           ADD      SP,SP,#+4
   \   000000F4   1EFF2FE1           BX       LR               ;; return
   \                     ??GUI_GetBitmapPixelIndexEx_10:
   \   000000F8   2002A0E1           LSR      R0,R0,#+4
   \   000000FC   FBFFFFEA           B        ??GUI_GetBitmapPixelIndexEx_9
     54              break;
     55            case 8:
     56              Off   = x + y * BytesPerLine;
     57              Value = *(pData + Off);
   \                     ??GUI_GetBitmapPixelIndexEx_5:
   \   00000100   913C20E0           MLA      R0,R1,R12,R3
     58              break;
   \   00000104   04D08DE2           ADD      SP,SP,#+4
   \   00000108   0200D0E7           LDRB     R0,[R0, +R2]
   \   0000010C   1EFF2FE1           BX       LR               ;; return
     59            case 16:
     60              p16   = (const U16 GUI_UNI_PTR *)pData;
     61              Off   = x + y * (BytesPerLine >> 1);
     62              Value = *(p16 + Off);
   \                     ??GUI_GetBitmapPixelIndexEx_6:
   \   00000110   C100A0E1           ASR      R0,R1,#+1
   \   00000114   903C21E0           MLA      R1,R0,R12,R3
     63              break;
   \   00000118   04D08DE2           ADD      SP,SP,#+4
   \   0000011C   810082E0           ADD      R0,R2,R1, LSL #+1
   \   00000120   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000124   1EFF2FE1           BX       LR               ;; return
     64            case 32:
     65              p32   = (const U32 GUI_UNI_PTR *)pData;
     66              Off   = x + y * (BytesPerLine >> 2);
     67              Value = *(p32 + Off);
   \                     ??GUI_GetBitmapPixelIndexEx_7:
   \   00000128   4101A0E1           ASR      R0,R1,#+2
   \   0000012C   903C21E0           MLA      R1,R0,R12,R3
     68              break;
   \   00000130   04D08DE2           ADD      SP,SP,#+4
   \   00000134   010192E7           LDR      R0,[R2, +R1, LSL #+2]
   \   00000138   1EFF2FE1           BX       LR               ;; return
     69            default:
     70              Value = 0;
   \                     ??GUI_GetBitmapPixelIndexEx_1:
   \   0000013C   0000A0E3           MOV      R0,#+0
     71            }
     72            return Value;
   \   00000140   EAFFFFEA           B        ??GUI_GetBitmapPixelIndexEx_9
     73          }
     74          
     75          /*********************************************************************
     76          *
     77          *       GUI_GetBitmapPixelIndex
     78          */

   \                                 In section .text, align 4, keep-with-next
     79          int GUI_GetBitmapPixelIndex(const GUI_BITMAP GUI_UNI_PTR * pBMP, unsigned x, unsigned y) {
     80            if (!pBMP) {
   \                     GUI_GetBitmapPixelIndex:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0000001A           BNE      ??GUI_GetBitmapPixelIndex_0
     81              return 0;
     82            }
     83            return GUI_GetBitmapPixelIndexEx(pBMP->BitsPerPixel, pBMP->BytesPerLine, pBMP->pData, x, y);
   \   00000008   1EFF2FE1           BX       LR
   \                     ??GUI_GetBitmapPixelIndex_0:
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   00208DE5           STR      R2,[SP, #+0]
   \   00000018   0130A0E1           MOV      R3,R1
   \   0000001C   082090E5           LDR      R2,[R0, #+8]
   \   00000020   B410D0E1           LDRH     R1,[R0, #+4]
   \   00000024   B600D0E1           LDRH     R0,[R0, #+6]
   \   00000028   ........           BL       GUI_GetBitmapPixelIndexEx
   \   0000002C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000030   0080BDE8           POP      {PC}             ;; return
     84          }
     85          
     86          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_GetBitmapPixelIndex        8
     GUI_GetBitmapPixelIndexEx      4


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GUI_GetBitmapPixelIndexEx  324
     GUI_GetBitmapPixelIndex     52

 
 376 bytes in section .text
 
 376 bytes of CODE memory

Errors: none
Warnings: none
