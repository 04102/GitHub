###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_565.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_565.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    ICC_565.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    CC_565.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_565.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_565.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          
     32          #define B_BITS 5
     33          #define G_BITS 6
     34          #define R_BITS 5
     35          
     36          #define R_MASK ((1 << R_BITS) -1)
     37          #define G_MASK ((1 << G_BITS) -1)
     38          #define B_MASK ((1 << B_BITS) -1)
     39          
     40          /*********************************************************************
     41          *
     42          *       Static code,
     43          *
     44          *       LCD_FIXEDPALETTE == 565, 65536 colors, BBBBBGGGGGGRRRRR
     45          *
     46          **********************************************************************
     47          */
     48          /*********************************************************************
     49          *
     50          *       _Color2Index_565
     51          */

   \                                 In section .text, align 4, keep-with-next
     52          static unsigned _Color2Index_565(LCD_COLOR Color) {
     53            int r, g, b;
     54            r = (Color>> (8  - R_BITS)) & R_MASK;
     55            g = (Color>> (16 - G_BITS)) & G_MASK;
     56            b = (Color>> (24 - B_BITS)) & B_MASK;
     57            return r + (g << R_BITS) + (b << (G_BITS + R_BITS));
   \                     _Color2Index_565:
   \   00000000   1F10A0E3           MOV      R1,#+31
   \   00000004   3F20A0E3           MOV      R2,#+63
   \   00000008   A01101E0           AND      R1,R1,R0, LSR #+3
   \   0000000C   202502E0           AND      R2,R2,R0, LSR #+10
   \   00000010   821281E0           ADD      R1,R1,R2, LSL #+5
   \   00000014   1F20A0E3           MOV      R2,#+31
   \   00000018   A00902E0           AND      R0,R2,R0, LSR #+19
   \   0000001C   800581E0           ADD      R0,R1,R0, LSL #+11
   \   00000020   1EFF2FE1           BX       LR               ;; return
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       _GetIndexMask_565
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static unsigned _GetIndexMask_565(void) {
     65            return 0xffff;
   \                     _GetIndexMask_565:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   FF0C80E3           ORR      R0,R0,#0xFF00
   \   00000008   1EFF2FE1           BX       LR               ;; return
     66          }
     67          
     68          /*********************************************************************
     69          *
     70          *       Public data
     71          *
     72          **********************************************************************
     73          */
     74          /*********************************************************************
     75          *
     76          *       LCD_API_ColorConv_565
     77          *
     78          * Purpose
     79          *   API table for this color conversion mode. Only used by memory
     80          *   devices in this mode.
     81          */

   \                                 In section .rodata, align 4, keep-with-next
     82          const LCD_API_COLOR_CONV LCD_API_ColorConv_565 = {
   \                     LCD_API_ColorConv_565:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_565, LCD_Index2Color_565, _GetIndexMask_565
   \              ............
     83            _Color2Index_565,
     84            LCD_Index2Color_565,
     85            _GetIndexMask_565
     86          };
     87          
     88          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _Color2Index_565       0
     _GetIndexMask_565      0


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _Color2Index_565        36
     _GetIndexMask_565       12
     LCD_API_ColorConv_565   12

 
 12 bytes in section .rodata
 48 bytes in section .text
 
 48 bytes of CODE  memory
 12 bytes of CONST memory

Errors: none
Warnings: none
