###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:09 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__SetText.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__SetText.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__SetText.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __SetText.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__SetText.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__SetText.C
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Public code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       GUI__SetText
     37          *
     38          *  Function description
     39          *    GUI internal function.
     40          *    Assigns a "C"-string to a memory handle.
     41          *    Memory for the string is assigned, the string itself is copied to the allocated memory.
     42          *    If the handle was valid before, the memory of the old string is released.
     43          *
     44          *  Parameters
     45          *    phText     Pointer to the handle. The pointer must be valid, the handle may be 0 (invalid).
     46          *    s          Pointer to the string to be copied.
     47          *               A NULL pointer is not allowed.
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          int GUI__SetText(GUI_HMEM* phText, const char* s) {
   \                     GUI__SetText:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     50            int r;
     51            GUI_HMEM hOld;
     52          
     53            r = 0;
     54            hOld = *phText;
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0060A0E3           MOV      R6,#+0
     55            if (GUI__strcmp_hp(hOld, s) != 0) {            /* Make sure we have a quick out if nothing changes */
   \   00000014   0700A0E1           MOV      R0,R7
   \   00000018   ........           BL       GUI__strcmp_hp
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1700000A           BEQ      ??GUI__SetText_0
     56              GUI_HMEM hMem;
     57              int NewLen;
     58              int OldLen;
     59                 
     60              NewLen = GUI__strlen(s) + 1;
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       GUI__strlen
   \   0000002C   018080E2           ADD      R8,R0,#+1
     61              OldLen = GUI_ALLOC_GetSize(hOld);
     62              if (NewLen == OldLen) {
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   ........           BL       GUI_ALLOC_GetSize
   \   00000038   000058E1           CMP      R8,R0
   \   0000003C   0500001A           BNE      ??GUI__SetText_1
     63                char* pMem;
     64                pMem = (char*) GUI_ALLOC_h2p(hOld);
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           BL       GUI_ALLOC_h2p
     65                GUI_MEMCPY(pMem, s, NewLen);
   \   00000048   0820A0E1           MOV      R2,R8
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   ........           BL       __aeabi_memcpy
     66                r = 1;
   \   00000054   090000EA           B        ??GUI__SetText_2
     67              } else {
     68                hMem = GUI_ALLOC_AllocNoInit(NewLen);
   \                     ??GUI__SetText_1:
   \   00000058   0800A0E1           MOV      R0,R8
   \   0000005C   ........           BL       GUI_ALLOC_AllocNoInit
   \   00000060   0070B0E1           MOVS     R7,R0
     69                if (hMem) {
   \   00000064   0600000A           BEQ      ??GUI__SetText_0
     70                  char* pMem;
     71                  pMem = (char*) GUI_ALLOC_h2p(hMem);
   \   00000068   ........           BL       GUI_ALLOC_h2p
     72                  strcpy(pMem, s);
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   ........           BL       strcpy
     73                  GUI_ALLOC_FreePtr(phText);
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       GUI_ALLOC_FreePtr
     74                  *phText = hMem;
   \   0000007C   007084E5           STR      R7,[R4, #+0]
     75                  r = 1;
   \                     ??GUI__SetText_2:
   \   00000080   0160A0E3           MOV      R6,#+1
     76                }
     77              }
     78            }
     79            return r;
   \                     ??GUI__SetText_0:
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   F081BDE8           POP      {R4-R8,PC}       ;; return
     80          }
     81          
     82          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     GUI__SetText     24


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI__SetText    140

 
 140 bytes in section .text
 
 140 bytes of CODE memory

Errors: none
Warnings: none
