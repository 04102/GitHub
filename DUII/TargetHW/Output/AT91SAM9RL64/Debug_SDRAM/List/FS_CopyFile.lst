###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_CopyFile.c                        #
#    Command line =  C:\DUII\TargetHW\FS\FS_CopyFile.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _CopyFile.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    CopyFile.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_CopyFile.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_CopyFile.c
     19          Purpose     : Implementation of FS_CopyFile
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Static code
     35          *
     36          **********************************************************************
     37          */
     38          
     39          /*********************************************************************
     40          *
     41          *       Public code, internal
     42          *
     43          **********************************************************************
     44          */
     45          
     46          /*********************************************************************
     47          *
     48          *       FS__CopyFile
     49          *
     50          *  Function description:
     51          *    Internal version of FS_CopyFile.
     52          *    Copies a file
     53          *
     54          *  Parameters:
     55          *    sSource    - Fully qualified file name to source file.
     56          *    sDest      - Fully qualified file name to destination file.
     57          *
     58          *  Return value:
     59          *    ==0         - File has been copied.
     60          *    ==-1        - An error has occurred.
     61          */

   \                                 In section .text, align 4, keep-with-next
     62          int FS__CopyFile(const char * sSource, const char * sDest) {
   \                     FS__CopyFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   83DF4DE2           SUB      SP,SP,#+524
     63            int           r;
     64            FS_FILE     * pFileSrc;
     65            FS_FILE     * pFileDest;
     66          
     67            U8         aBuffer[512];
     68            U32        NumBytes;
     69            U32        TimeStamp;
     70          
     71            // 
     72            // Open source file
     73            //
     74            pFileSrc  = FS__FOpenEx(sSource, FS_FILE_ACCESS_FLAG_R, 0, 0, 1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   00008DE5           STR      R0,[SP, #+0]
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0810A0E3           MOV      R1,#+8
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FS__FOpenEx
   \   0000002C   0060B0E1           MOVS     R6,R0
     75            if ((void *)pFileSrc == NULL) {
   \   00000030   0100001A           BNE      ??FS__CopyFile_0
     76              FS_DEBUG_ERROROUT((FS_MTYPE_API, "FS__CopyFile: Source file could not be opened.\n"));
     77              return -1;
   \                     ??FS__CopyFile_1:
   \   00000034   0000E0E3           MVN      R0,#+0
   \   00000038   400000EA           B        ??FS__CopyFile_2
     78            }
     79            // 
     80            // Open destination file
     81            // 
     82            pFileDest = FS__FOpenEx(sDest, FS_FILE_ACCESS_FLAGS_CW, 1, 1, 0);
   \                     ??FS__CopyFile_0:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   00008DE5           STR      R0,[SP, #+0]
   \   00000044   0130A0E3           MOV      R3,#+1
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   1410A0E3           MOV      R1,#+20
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       FS__FOpenEx
   \   00000058   0070B0E1           MOVS     R7,R0
     83            if ((void *)pFileDest == NULL) {
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   0100001A           BNE      ??FS__CopyFile_3
     84              FS_DEBUG_ERROROUT((FS_MTYPE_API, "FS__CopyFile: Destination file could not be created.\n"));
     85              FS__FClose(pFileSrc);
   \   00000064   ........           BL       FS__FClose
     86              return -1;
   \   00000068   F1FFFFEA           B        ??FS__CopyFile_1
     87            }
     88            r = -1;
     89            //
     90            //  retrieve the source file size
     91            // 
     92            NumBytes = FS__GetFileSize(pFileSrc);
   \                     ??FS__CopyFile_3:
   \   0000006C   ........           BL       FS__GetFileSize
   \   00000070   0080A0E1           MOV      R8,R0
     93            //
     94            //  Preallocate destination file to optimize copy
     95            //
     96            FS__FSeek(pFileDest, NumBytes, FS_FILE_BEGIN);
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0810A0E1           MOV      R1,R8
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   ........           BL       FS__FSeek
     97            FS__SetEndOfFile(pFileDest);
   \   00000084   0700A0E1           MOV      R0,R7
   \   00000088   ........           BL       FS__SetEndOfFile
     98            FS__FSeek(pFileDest, 0, FS_FILE_BEGIN);
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           BL       FS__FSeek
     99            //
    100            //
    101            //  Now copy the data to the destination file
    102            // 
    103            do {
    104              U32 NumBytesRead;
    105              U32 NumBytesWritten;
    106              NumBytesRead = FS__Read(pFileSrc, aBuffer, sizeof(aBuffer));
   \                     ??FS__CopyFile_4:
   \   0000009C   802FA0E3           MOV      R2,#+512
   \   000000A0   08108DE2           ADD      R1,SP,#+8
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           BL       FS__Read
   \   000000AC   0090B0E1           MOVS     R9,R0
    107              if (NumBytesRead == 0) {
   \   000000B0   1400001A           BNE      ??FS__CopyFile_5
    108                r = 0;
   \                     ??FS__CopyFile_6:
   \   000000B4   0080A0E3           MOV      R8,#+0
    109                break;
    110              }
    111              NumBytesWritten = FS__Write(pFileDest, aBuffer, NumBytesRead);
    112              NumBytes -= NumBytesRead;
    113              if (NumBytesWritten != NumBytesRead) {
    114                r = -1;   // Not all bytes have been written, maybe the volume is full
    115                break;
    116              }
    117              if (NumBytes == 0) {
    118                r = 0;
    119                break;
    120              }
    121            } while (1);
    122            //
    123            //  Close source and destination file
    124            //  and update the directory entry for destination file
    125            // 
    126            FS__FClose(pFileSrc);
   \                     ??FS__CopyFile_7:
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           BL       FS__FClose
    127            FS__FClose(pFileDest);
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           BL       FS__FClose
    128            //
    129            // Since we have copied the file, we need to set the attributes 
    130            // and timestamp of destination file to the same as source file.
    131            // 
    132            if (r == 0) {
   \   000000C8   000058E3           CMP      R8,#+0
   \   000000CC   1800001A           BNE      ??FS__CopyFile_8
    133              U8 Attrib;
    134              FS__GetFileTimeEx(sSource, &TimeStamp, FS_FILETIME_CREATE);
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   04108DE2           ADD      R1,SP,#+4
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       FS__GetFileTimeEx
    135              FS__SetFileTimeEx(sDest,   TimeStamp, FS_FILETIME_CREATE);
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   04109DE5           LDR      R1,[SP, #+4]
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   ........           BL       FS__SetFileTimeEx
    136              Attrib = FS__GetFileAttributes(sSource);
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       FS__GetFileAttributes
   \   000000F8   0010A0E1           MOV      R1,R0
    137              FS__SetFileAttributes(sDest, Attrib);
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           BL       FS__SetFileAttributes
   \   00000104   0C0000EA           B        ??FS__CopyFile_9
    138            } else {
   \                     ??FS__CopyFile_5:
   \   00000108   0920A0E1           MOV      R2,R9
   \   0000010C   08108DE2           ADD      R1,SP,#+8
   \   00000110   0700A0E1           MOV      R0,R7
   \   00000114   ........           BL       FS__Write
   \   00000118   098048E0           SUB      R8,R8,R9
   \   0000011C   090050E1           CMP      R0,R9
   \   00000120   0080E013           MVNNE    R8,#+0
   \   00000124   E3FFFF1A           BNE      ??FS__CopyFile_7
   \   00000128   000058E3           CMP      R8,#+0
   \   0000012C   DAFFFF1A           BNE      ??FS__CopyFile_4
   \   00000130   DFFFFFEA           B        ??FS__CopyFile_6
    139              //
    140              // Error occurred, delete the destination file.
    141              // 
    142              FS__Remove(sDest);
   \                     ??FS__CopyFile_8:
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   ........           BL       FS__Remove
    143            }
    144            return r;
   \                     ??FS__CopyFile_9:
   \   0000013C   0800A0E1           MOV      R0,R8
   \                     ??FS__CopyFile_2:
   \   00000140   83DF8DE2           ADD      SP,SP,#+524      ;; stack cleaning
   \   00000144   F083BDE8           POP      {R4-R9,PC}       ;; return
    145          }
    146          
    147          /*********************************************************************
    148          *
    149          *       Public code
    150          *
    151          **********************************************************************
    152          */
    153          
    154          /*********************************************************************
    155          *
    156          *       FS_CopyFileEx
    157          *
    158          *  Function description:
    159          *    Copies a file
    160          *
    161          *  Parameters:
    162          *    sSource    - Fully qualified file name.
    163          *    sDest      - Fully qualified file name
    164          *
    165          *  Return value:
    166          *    ==0         - File has been copied.
    167          *    ==-1        - An error has occurred.
    168          */
    169          int FS_CopyFileEx(const char * sSource, const char * sDest, ...);

   \                                 In section .text, align 4, keep-with-next
    170          int FS_CopyFileEx(const char * sSource, const char * sDest, ...) {
   \                     FS_CopyFileEx:
   \   00000000   0C002DE9           PUSH     {R2,R3}
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0150A0E1           MOV      R5,R1
    171            int r;
    172          
    173            FS_LOCK();
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
    174            r = FS__CopyFile(sSource, sDest);
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__CopyFile
   \   00000028   0040A0E1           MOV      R4,R0
    175            FS_UNLOCK();
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       FS_OS_Unlock
    176            return r;
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   3000BDE8           POP      {R4,R5}
   \   00000040   0CF09DE4           LDR      PC,[SP], #+12    ;; return
    177          }
    178          
    179          
    180          /*********************************************************************
    181          *
    182          *       FS_CopyFile
    183          *
    184          *  Function description:
    185          *    Copies a file
    186          *
    187          *  Parameters:
    188          *    sSource    - Fully qualified file name.
    189          *    sDest      - Fully qualified file name
    190          *
    191          *  Return value:
    192          *    ==0         - File has been copied.
    193          *    ==-1        - An error has occurred.
    194          */

   \                                 In section .text, align 4, keep-with-next
    195          int FS_CopyFile(const char * sSource, const char * sDest) {
   \                     FS_CopyFile:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    196            int r;
    197          
    198            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    199            r = FS__CopyFile(sSource, sDest);
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS__CopyFile
   \   00000024   0040A0E1           MOV      R4,R0
    200            FS_UNLOCK();
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   ........           BL       FS_OS_Unlock
    201            return r;
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    202          }
    203          
    204          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     FS_CopyFile       16
     FS_CopyFileEx     24
     FS__CopyFile     552


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__CopyFile    328
     FS_CopyFileEx    68
     FS_CopyFile      60

 
 456 bytes in section .text
 
 456 bytes of CODE memory

Errors: none
Warnings: none
