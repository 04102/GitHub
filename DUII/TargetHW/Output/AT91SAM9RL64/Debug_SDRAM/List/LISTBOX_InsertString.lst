###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:24 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_InsertString.c              #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_InsertString.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_InsertString.lst                                   #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_InsertString.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_InsertString.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_InsertString.c
     19          Purpose     : Implementation of LISTBOX_InsertString
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include "LISTBOX_Private.h"
     25          
     26          #if GUI_WINSUPPORT
     27          
     28          
     29          /*********************************************************************
     30          *
     31          *       Public routines
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       LISTBOX_InsertString
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          void LISTBOX_InsertString(LISTBOX_Handle hObj, const char* s, unsigned int Index) {
   \                     LISTBOX_InsertString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
     40            if (hObj && s) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   00005613           CMPNE    R6,#+0
   \   00000018   2700000A           BEQ      ??LISTBOX_InsertString_0
     41              LISTBOX_Obj * pObj;
     42              unsigned int NumItems;
     43              GUI_ARRAY ItemArray;
     44              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     45              pObj = LISTBOX_LOCK_H(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0070A0E1           MOV      R7,R0
     46              NumItems = LISTBOX__GetNumItems(pObj);
   \   0000002C   ........           BL       LISTBOX__GetNumItems
   \   00000030   0080A0E1           MOV      R8,R0
     47              ItemArray = pObj->ItemArray;
   \   00000034   347097E5           LDR      R7,[R7, #+52]
     48              GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
     49              if (Index < NumItems) {
   \   0000003C   080055E1           CMP      R5,R8
   \   00000040   1900002A           BCS      ??LISTBOX_InsertString_1
     50                WM_HMEM hItem;
     51                hItem = GUI_ARRAY_InsertItem(ItemArray, Index, sizeof(LISTBOX_ITEM) + strlen(s));
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           BL       strlen
   \   0000004C   0C2080E2           ADD      R2,R0,#+12
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   ........           BL       GUI_ARRAY_InsertItem
     52                if (hItem) {
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   1400000A           BEQ      ??LISTBOX_InsertString_2
     53                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
   \   00000064   ........           BL       GUI_ALLOC_LockH
     54                  pItem->Status = 0;
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0810C0E5           STRB     R1,[R0, #+8]
     55                  pItem->ItemPosY = -1;
   \   00000070   0110E0E1           MVN      R1,R1
   \   00000074   041080E5           STR      R1,[R0, #+4]
     56                  strcpy(pItem->acText, s);
   \   00000078   0610A0E1           MOV      R1,R6
   \   0000007C   090080E2           ADD      R0,R0,#+9
   \   00000080   ........           BL       strcpy
     57                  GUI_UNLOCK_H(pItem);
   \   00000084   ........           BL       GUI_ALLOC_UnlockH
     58                  pObj = LISTBOX_LOCK_H(hObj);
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI_ALLOC_LockH
     59                  LISTBOX__AddSize(pObj, Index);
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   ........           BL       LISTBOX__AddSize
     60                  GUI_UNLOCK_H(pObj);
   \   00000098   ........           BL       GUI_ALLOC_UnlockH
     61                  LISTBOX_InvalidateItem(hObj, Index);
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       LISTBOX_InvalidateItem
   \   000000A8   020000EA           B        ??LISTBOX_InsertString_2
     62                }
     63              } else {
     64                LISTBOX_AddString(hObj, s);
   \                     ??LISTBOX_InsertString_1:
   \   000000AC   0610A0E1           MOV      R1,R6
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       LISTBOX_AddString
     65              }
     66              WM_UNLOCK();
   \                     ??LISTBOX_InsertString_2:
   \   000000B8   ........           BL       GUI_Unlock
     67            }
     68          }
   \                     ??LISTBOX_InsertString_0:
   \   000000BC   F081BDE8           POP      {R4-R8,PC}       ;; return
     69          
     70          #else                            /* Avoid problems with empty object modules */
     71            void LISTBOX_InsertString_C(void) {}
     72          #endif

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     LISTBOX_InsertString     24


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     LISTBOX_InsertString  192

 
 192 bytes in section .text
 
 192 bytes of CODE memory

Errors: none
Warnings: none
