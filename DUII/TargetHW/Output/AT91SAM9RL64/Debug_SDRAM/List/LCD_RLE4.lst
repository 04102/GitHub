###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:07 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_RLE4.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_RLE4.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LC #
#                    D_RLE4.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LCD #
#                    _RLE4.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_RLE4.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDRLE4.c
     19          Purpose     : Drawing routines for run length encoded bitmaps
     20                        with 4bpp
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          #include <stddef.h>           /* needed for definition of NULL */
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Static code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       _DrawBitmap_RLE4
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          static void _DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR* pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE4:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
     39            const LCD_PIXELINDEX* pTrans =NULL;
     40            char NoTrans = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
   \   00000004   ........           LDR      R7,??DataTable1
   \   00000008   0130A0E3           MOV      R3,#+1
   \   0000000C   1020D7E5           LDRB     R2,[R7, #+16]
   \   00000010   18D04DE2           SUB      SP,SP,#+24
   \   00000014   50509DE5           LDR      R5,[SP, #+80]
   \   00000018   A22003E0           AND      R2,R3,R2, LSR #+1
   \   0000001C   54609DE5           LDR      R6,[SP, #+84]
   \   00000020   012022E2           EOR      R2,R2,#0x1
   \   00000024   08208DE5           STR      R2,[SP, #+8]
     41            LCD_PIXELINDEX aColorIndex[2];
     42            LCD_PIXELINDEX PixelIndex;
     43            int xi,y;
     44            int xL, yL;
     45            char IsMagnified = ((yMag | xMag) != 1);
   \   00000028   062085E1           ORR      R2,R5,R6
   \   0000002C   010052E3           CMP      R2,#+1
   \   00000030   ........           LDR      R2,??DataTable1_1
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   002092E5           LDR      R2,[R2, #+0]
   \   0000003C   00108DE5           STR      R1,[SP, #+0]
   \   00000040   04308D15           STRNE    R3,[SP, #+4]
   \   00000044   04108D05           STREQ    R1,[SP, #+4]
   \   00000048   002092E5           LDR      R2,[R2, #+0]
   \   0000004C   0040A0E1           MOV      R4,R0
   \   00000050   0C208DE5           STR      R2,[SP, #+12]
   \   00000054   ........           LDR      R2,??DataTable1_2
   \   00000058   4C009DE5           LDR      R0,[SP, #+76]
   \   0000005C   002092E5           LDR      R2,[R2, #+0]
     46            aColorIndex[0] = LCD__GetBkColorIndex();
     47            aColorIndex[1] = LCD__GetColorIndex();
     48            /* Handle color translation */
     49            if ((pLogPal) && (pLogPal->pPalEntries)) {
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   002092E5           LDR      R2,[R2, #+0]
   \   00000068   10208DE5           STR      R2,[SP, #+16]
   \   0000006C   08109015           LDRNE    R1,[R0, #+8]
   \   00000070   00005113           CMPNE    R1,#+0
   \   00000074   0300000A           BEQ      ??_DrawBitmap_RLE4_0
     50              if ((pTrans = LCD_GetpPalConvTable(pLogPal)) == NULL) {
   \   00000078   ........           BL       LCD_GetpPalConvTable
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   8F00000A           BEQ      ??_DrawBitmap_RLE4_1
     51                return;
     52              }
     53            }
     54           /* Check if we can limit the number of lines due to clipping) */
     55            if (yMag == 1) {
   \                     ??_DrawBitmap_RLE4_0:
   \   00000088   010056E3           CMP      R6,#+1
   \   0000008C   0600001A           BNE      ??_DrawBitmap_RLE4_2
   \   00000090   FE00D7E1           LDRSH    R0,[R7, #+14]
   \   00000094   18109DE5           LDR      R1,[SP, #+24]
   \   00000098   010040E0           SUB      R0,R0,R1
   \   0000009C   20109DE5           LDR      R1,[SP, #+32]
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   010050E1           CMP      R0,R1
     56              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1)
     57                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   000000A8   20008DB5           STRLT    R0,[SP, #+32]
     58            }
     59            /* Repeat until we have reached bottom */
     60            for (xi=0, y = 0; y < ysize; ) {
   \                     ??_DrawBitmap_RLE4_2:
   \   000000AC   0070A0E3           MOV      R7,#+0
   \   000000B0   0080A0E3           MOV      R8,#+0
   \                     ??_DrawBitmap_RLE4_3:
   \   000000B4   20009DE5           LDR      R0,[SP, #+32]
   \   000000B8   000058E1           CMP      R8,R0
   \   000000BC   790000AA           BGE      ??_DrawBitmap_RLE4_4
     61              U8 Cmd,Data;
     62              Cmd= *pPixel++;
   \   000000C0   48109DE5           LDR      R1,[SP, #+72]
   \   000000C4   01B0D1E4           LDRB     R11,[R1], #+1
   \   000000C8   48108DE5           STR      R1,[SP, #+72]
     63              Data = *pPixel++;
   \   000000CC   0190D1E4           LDRB     R9,[R1], #+1
   \   000000D0   48108DE5           STR      R1,[SP, #+72]
     64              if (Cmd) {
   \   000000D4   00005BE3           CMP      R11,#+0
   \   000000D8   3500000A           BEQ      ??_DrawBitmap_RLE4_5
     65                LCD_SetColorIndex(pTrans ? *(pTrans+Data) : Data);
   \   000000DC   00009DE5           LDR      R0,[SP, #+0]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   00109D15           LDRNE    R1,[SP, #+0]
   \   000000E8   0900A0E1           MOV      R0,R9
   \   000000EC   00019117           LDRNE    R0,[R1, +R0, LSL #+2]
   \   000000F0   ........           BL       LCD_SetColorIndex
     66                while (Cmd) {
     67                  int xi1 = xi+Cmd;
     68                  if (xi1>=xsize)
   \                     ??_DrawBitmap_RLE4_6:
   \   000000F4   1C009DE5           LDR      R0,[SP, #+28]
   \   000000F8   07A08BE0           ADD      R10,R11,R7
   \   000000FC   00005AE1           CMP      R10,R0
   \   00000100   00A0A0C1           MOVGT    R10,R0
     69                    xi1 = xsize;
     70                  Cmd -= (xi1-xi);
   \   00000104   0A004BE0           SUB      R0,R11,R10
   \   00000108   00B087E0           ADD      R11,R7,R0
     71                  if (Data || NoTrans) {  /* Skip transparent pixels */
   \   0000010C   000059E3           CMP      R9,#+0
   \   00000110   08009D05           LDREQ    R0,[SP, #+8]
   \   00000114   FFB00BE2           AND      R11,R11,#0xFF
   \   00000118   00005003           CMPEQ    R0,#+0
   \   0000011C   1200000A           BEQ      ??_DrawBitmap_RLE4_7
     72                    if (IsMagnified) {
   \   00000120   04009DE5           LDR      R0,[SP, #+4]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0900000A           BEQ      ??_DrawBitmap_RLE4_8
     73                      xL = xMag * xi + x0;
     74                      yL = yMag * y + y0;
   \   0000012C   18109DE5           LDR      R1,[SP, #+24]
   \   00000130   981621E0           MLA      R1,R8,R6,R1
     75                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
   \   00000134   062081E0           ADD      R2,R1,R6
   \   00000138   974520E0           MLA      R0,R7,R5,R4
   \   0000013C   013042E2           SUB      R3,R2,#+1
   \   00000140   07204AE0           SUB      R2,R10,R7
   \   00000144   92052CE0           MLA      R12,R2,R5,R0
   \   00000148   01204CE2           SUB      R2,R12,#+1
   \   0000014C   ........           BL       LCD_FillRect
   \   00000150   050000EA           B        ??_DrawBitmap_RLE4_7
     76                    } else {
     77                      LCD_DrawHLine(x0+xi, y + y0, xi1+x0-1);
   \                     ??_DrawBitmap_RLE4_8:
   \   00000154   04008AE0           ADD      R0,R10,R4
   \   00000158   012040E2           SUB      R2,R0,#+1
   \   0000015C   18009DE5           LDR      R0,[SP, #+24]
   \   00000160   081080E0           ADD      R1,R0,R8
   \   00000164   040087E0           ADD      R0,R7,R4
   \   00000168   ........           BL       LCD_DrawHLine
     78                    }
     79                  }
     80                  xi =xi1;
     81                  if (xi1==xsize) {
   \                     ??_DrawBitmap_RLE4_7:
   \   0000016C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000170   0A70A0E1           MOV      R7,R10
   \   00000174   00005AE1           CMP      R10,R0
     82                    y++;
   \   00000178   01808802           ADDEQ    R8,R8,#+1
     83                    xi=0;
   \   0000017C   0070A003           MOVEQ    R7,#+0
     84                  }
     85                }
   \   00000180   00005BE3           CMP      R11,#+0
   \   00000184   DAFFFF1A           BNE      ??_DrawBitmap_RLE4_6
   \   00000188   C9FFFFEA           B        ??_DrawBitmap_RLE4_3
     86              } else {
     87                while (Data--) {
     88                  U8 Index = *pPixel++;
     89                  if ((Index>>4) || NoTrans) {  /* Skip transparent pixels */
     90                    PixelIndex = pTrans ? *(pTrans+(Index>>4)) : (Index>>4);
     91                    if (IsMagnified) {
     92                      LCD_SetColorIndex(PixelIndex);
     93                      xL = xMag * xi + x0;
     94                      yL = yMag * y + y0;
     95                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
     96                    } else {
     97                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
     98                    }
     99                  }
    100                  if (++xi >= xsize) {
    101                    xi=0; y++;
    102                  }
    103                  if (Data-- == 0)
    104                    break;
    105                  if ((Index&15) || NoTrans) {  /* Skip transparent pixels */
    106                    PixelIndex = pTrans ? *(pTrans+(Index&15)) : (Index&15);
    107                    if (IsMagnified) {
    108                      LCD_SetColorIndex(PixelIndex);
    109                      xL = xMag * xi + x0;
    110                      yL = yMag * y + y0;
    111                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
    112                    } else {
    113                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
   \                     ??_DrawBitmap_RLE4_9:
   \   0000018C   0020A0E1           MOV      R2,R0
   \   00000190   18009DE5           LDR      R0,[SP, #+24]
   \   00000194   081080E0           ADD      R1,R0,R8
   \   00000198   040087E0           ADD      R0,R7,R4
   \   0000019C   ........           BL       LCD_SetPixelIndex
    114                    }
    115                  }
    116                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE4_10:
   \   000001A0   1C009DE5           LDR      R0,[SP, #+28]
   \   000001A4   017087E2           ADD      R7,R7,#+1
   \   000001A8   000057E1           CMP      R7,R0
    117                    xi=0; y++;
   \   000001AC   0070A0A3           MOVGE    R7,#+0
   \   000001B0   018088A2           ADDGE    R8,R8,#+1
    118                  }
   \                     ??_DrawBitmap_RLE4_5:
   \   000001B4   FF9019E2           ANDS     R9,R9,#0xFF
   \   000001B8   BDFFFF0A           BEQ      ??_DrawBitmap_RLE4_3
   \   000001BC   48109DE5           LDR      R1,[SP, #+72]
   \   000001C0   019049E2           SUB      R9,R9,#+1
   \   000001C4   01A0D1E4           LDRB     R10,[R1], #+1
   \   000001C8   48108DE5           STR      R1,[SP, #+72]
   \   000001CC   4A02B0E1           ASRS     R0,R10,#+4
   \   000001D0   08109D05           LDREQ    R1,[SP, #+8]
   \   000001D4   00005103           CMPEQ    R1,#+0
   \   000001D8   1400000A           BEQ      ??_DrawBitmap_RLE4_11
   \   000001DC   00109DE5           LDR      R1,[SP, #+0]
   \   000001E0   000051E3           CMP      R1,#+0
   \   000001E4   00019117           LDRNE    R0,[R1, +R0, LSL #+2]
   \   000001E8   04109DE5           LDR      R1,[SP, #+4]
   \   000001EC   000051E3           CMP      R1,#+0
   \   000001F0   0900000A           BEQ      ??_DrawBitmap_RLE4_12
   \   000001F4   ........           BL       LCD_SetColorIndex
   \   000001F8   18109DE5           LDR      R1,[SP, #+24]
   \   000001FC   981621E0           MLA      R1,R8,R6,R1
   \   00000200   974520E0           MLA      R0,R7,R5,R4
   \   00000204   062081E0           ADD      R2,R1,R6
   \   00000208   013042E2           SUB      R3,R2,#+1
   \   0000020C   052080E0           ADD      R2,R0,R5
   \   00000210   012042E2           SUB      R2,R2,#+1
   \   00000214   ........           BL       LCD_FillRect
   \   00000218   040000EA           B        ??_DrawBitmap_RLE4_11
   \                     ??_DrawBitmap_RLE4_12:
   \   0000021C   0020A0E1           MOV      R2,R0
   \   00000220   18009DE5           LDR      R0,[SP, #+24]
   \   00000224   081080E0           ADD      R1,R0,R8
   \   00000228   040087E0           ADD      R0,R7,R4
   \   0000022C   ........           BL       LCD_SetPixelIndex
   \                     ??_DrawBitmap_RLE4_11:
   \   00000230   1C009DE5           LDR      R0,[SP, #+28]
   \   00000234   017087E2           ADD      R7,R7,#+1
   \   00000238   000057E1           CMP      R7,R0
   \   0000023C   0070A0A3           MOVGE    R7,#+0
   \   00000240   018088A2           ADDGE    R8,R8,#+1
   \   00000244   FF9019E2           ANDS     R9,R9,#0xFF
   \   00000248   99FFFF0A           BEQ      ??_DrawBitmap_RLE4_3
   \   0000024C   0F001AE3           TST      R10,#0xF
   \   00000250   08009D05           LDREQ    R0,[SP, #+8]
   \   00000254   019049E2           SUB      R9,R9,#+1
   \   00000258   00005003           CMPEQ    R0,#+0
   \   0000025C   CFFFFF0A           BEQ      ??_DrawBitmap_RLE4_10
   \   00000260   00009DE5           LDR      R0,[SP, #+0]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   00109D15           LDRNE    R1,[SP, #+0]
   \   0000026C   0F000AE2           AND      R0,R10,#0xF
   \   00000270   00019117           LDRNE    R0,[R1, +R0, LSL #+2]
   \   00000274   04109DE5           LDR      R1,[SP, #+4]
   \   00000278   000051E3           CMP      R1,#+0
   \   0000027C   C2FFFF0A           BEQ      ??_DrawBitmap_RLE4_9
   \   00000280   ........           BL       LCD_SetColorIndex
   \   00000284   18109DE5           LDR      R1,[SP, #+24]
   \   00000288   981621E0           MLA      R1,R8,R6,R1
   \   0000028C   974520E0           MLA      R0,R7,R5,R4
   \   00000290   062081E0           ADD      R2,R1,R6
   \   00000294   013042E2           SUB      R3,R2,#+1
   \   00000298   052080E0           ADD      R2,R0,R5
   \   0000029C   012042E2           SUB      R2,R2,#+1
   \   000002A0   ........           BL       LCD_FillRect
   \   000002A4   BDFFFFEA           B        ??_DrawBitmap_RLE4_10
    119                }
    120              }
    121            }
    122            LCD__SetBkColorIndex(aColorIndex[0]);
   \                     ??_DrawBitmap_RLE4_4:
   \   000002A8   ........           LDR      R0,??DataTable1_1
   \   000002AC   0C109DE5           LDR      R1,[SP, #+12]
   \   000002B0   000090E5           LDR      R0,[R0, #+0]
   \   000002B4   001080E5           STR      R1,[R0, #+0]
    123            LCD__SetColorIndex(aColorIndex[1]);
   \   000002B8   ........           LDR      R0,??DataTable1_2
   \   000002BC   10109DE5           LDR      R1,[SP, #+16]
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   001080E5           STR      R1,[R0, #+0]
    124          }
   \                     ??_DrawBitmap_RLE4_1:
   \   000002C8   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000002CC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    125          
    126          /*********************************************************************
    127          *
    128          *       Public data
    129          *
    130          **********************************************************************
    131          */
    132          /*********************************************************************
    133          *
    134          *       GUI_BitmapMethodsRLE4
    135          */

   \                                 In section .rodata, align 4, keep-with-next
    136          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE4 = {
   \                     GUI_BitmapMethodsRLE4:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ........0000       DC32 _DrawBitmap_RLE4, 0
   \              0000        
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_pColorIndex
    137            _DrawBitmap_RLE4,
    138            NULL
    139          };
    140          
    141          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitmap_RLE4     72


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _DrawBitmap_RLE4       720
     GUI_BitmapMethodsRLE4   12
     ??DataTable1             4
     ??DataTable1_1           4
     ??DataTable1_2           4

 
  12 bytes in section .rodata
 732 bytes in section .text
 
 732 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
