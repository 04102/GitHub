###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:46 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_Circ.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_Circ.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_Circ.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _Circ.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_Circ.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_Circ.c
     19          Purpose     : Circle and ellipse drawing functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>       // Needed for definition of NULL
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       Draw8Point
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void Draw8Point(int x0,int y0, int xoff, int yoff) {
   \                     Draw8Point:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
     38            LCD_HL_DrawPixel(x0 + xoff, y0 + yoff);
   \   00000004   ........           LDR      R7,??DataTable6
   \   00000008   02B0A0E1           MOV      R11,R2
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   942097E5           LDR      R2,[R7, #+148]
   \   00000018   00608BE0           ADD      R6,R11,R0
   \   0000001C   049085E0           ADD      R9,R5,R4
   \   00000020   0910A0E1           MOV      R1,R9
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   042092E5           LDR      R2,[R2, #+4]
   \   0000002C   32FF2FE1           BLX      R2
     39            LCD_HL_DrawPixel(x0 - xoff, y0 + yoff);
   \   00000030   00009DE5           LDR      R0,[SP, #+0]
   \   00000034   942097E5           LDR      R2,[R7, #+148]
   \   00000038   0B8040E0           SUB      R8,R0,R11
   \   0000003C   0910A0E1           MOV      R1,R9
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   042092E5           LDR      R2,[R2, #+4]
   \   00000048   32FF2FE1           BLX      R2
     40            LCD_HL_DrawPixel(x0 + yoff, y0 + xoff);
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   942097E5           LDR      R2,[R7, #+148]
   \   00000054   009085E0           ADD      R9,R5,R0
   \   00000058   04A08BE0           ADD      R10,R11,R4
   \   0000005C   0A10A0E1           MOV      R1,R10
   \   00000060   0900A0E1           MOV      R0,R9
   \   00000064   042092E5           LDR      R2,[R2, #+4]
   \   00000068   32FF2FE1           BLX      R2
     41            LCD_HL_DrawPixel(x0 + yoff, y0 - xoff);
   \   0000006C   942097E5           LDR      R2,[R7, #+148]
   \   00000070   0BB044E0           SUB      R11,R4,R11
   \   00000074   0B10A0E1           MOV      R1,R11
   \   00000078   0900A0E1           MOV      R0,R9
   \   0000007C   042092E5           LDR      R2,[R2, #+4]
   \   00000080   32FF2FE1           BLX      R2
     42            if (yoff) {
   \   00000084   000055E3           CMP      R5,#+0
   \   00000088   1600000A           BEQ      ??Draw8Point_0
     43              LCD_HL_DrawPixel(x0 + xoff , y0 - yoff);
   \   0000008C   942097E5           LDR      R2,[R7, #+148]
   \   00000090   054044E0           SUB      R4,R4,R5
   \   00000094   0410A0E1           MOV      R1,R4
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   042092E5           LDR      R2,[R2, #+4]
   \   000000A0   32FF2FE1           BLX      R2
     44              LCD_HL_DrawPixel(x0 - xoff , y0 - yoff);
   \   000000A4   942097E5           LDR      R2,[R7, #+148]
   \   000000A8   0410A0E1           MOV      R1,R4
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   042092E5           LDR      R2,[R2, #+4]
   \   000000B4   32FF2FE1           BLX      R2
     45              LCD_HL_DrawPixel(x0 - yoff , y0 + xoff);
   \   000000B8   00009DE5           LDR      R0,[SP, #+0]
   \   000000BC   942097E5           LDR      R2,[R7, #+148]
   \   000000C0   054040E0           SUB      R4,R0,R5
   \   000000C4   0A10A0E1           MOV      R1,R10
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   042092E5           LDR      R2,[R2, #+4]
   \   000000D0   32FF2FE1           BLX      R2
     46              LCD_HL_DrawPixel(x0 - yoff , y0 - xoff);
   \   000000D4   942097E5           LDR      R2,[R7, #+148]
   \   000000D8   0B10A0E1           MOV      R1,R11
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   042092E5           LDR      R2,[R2, #+4]
   \   000000E4   32FF2FE1           BLX      R2
     47            }
     48          }
   \                     ??Draw8Point_0:
   \   000000E8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
     49          
     50          /*********************************************************************
     51          *
     52          *       Public code, circle
     53          *
     54          **********************************************************************
     55          */
     56          /*********************************************************************
     57          *
     58          *       GL_DrawCircle
     59          */

   \                                 In section .text, align 4, keep-with-next
     60          void GL_DrawCircle(int x0, int y0, int r) {
   \                     GL_DrawCircle:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     61            I32 i;
     62            int imax;
     63            I32 sqmax;
     64            I32 y;
     65            imax  = ((I32)    ((I32)r * 707))  / 1000 + 1;
   \   00000008   C300A0E3           MOV      R0,#+195
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   800F80E3           ORR      R0,R0,#0x200
   \   00000018   900601E0           MUL      R1,R0,R6
   \   0000001C   ........           LDR      R0,??DataTable6_1  ;; 0x10624dd3
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   9120C0E0           SMULL    R2,R0,R1,R0
     66            sqmax =  (I32)r *  (I32)r + (I32)r / 2;
   \   00000028   A61F86E0           ADD      R1,R6,R6, LSR #+31
   \   0000002C   4003B0E1           ASRS     R0,R0,#+6
   \   00000030   01008042           ADDMI    R0,R0,#+1
   \   00000034   017080E2           ADD      R7,R0,#+1
   \   00000038   960600E0           MUL      R0,R6,R6
     67            y     = r;
     68            Draw8Point(x0, y0, r, 0);
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   C18080E0           ADD      R8,R0,R1, ASR #+1
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       Draw8Point
     69            for (i = 1; i <= imax; i++) {
   \   00000054   0190A0E3           MOV      R9,#+1
   \   00000058   010057E3           CMP      R7,#+1
   \   0000005C   110000BA           BLT      ??GL_DrawCircle_0
     70              if ((i * i + y * y) > sqmax) {
   \                     ??GL_DrawCircle_1:
   \   00000060   960600E0           MUL      R0,R6,R6
   \   00000064   990920E0           MLA      R0,R9,R9,R0
   \   00000068   000058E1           CMP      R8,R0
   \   0000006C   050000AA           BGE      ??GL_DrawCircle_2
     71                Draw8Point(x0, y0, i, y);
   \   00000070   0630A0E1           MOV      R3,R6
   \   00000074   0920A0E1           MOV      R2,R9
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       Draw8Point
     72                y--;
   \   00000084   016046E2           SUB      R6,R6,#+1
     73              }
     74              Draw8Point(x0, y0, i, y);
   \                     ??GL_DrawCircle_2:
   \   00000088   0630A0E1           MOV      R3,R6
   \   0000008C   0920A0E1           MOV      R2,R9
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       Draw8Point
     75            }
   \   0000009C   019089E2           ADD      R9,R9,#+1
   \   000000A0   090057E1           CMP      R7,R9
   \   000000A4   EDFFFFAA           BGE      ??GL_DrawCircle_1
     76          }
   \                     ??GL_DrawCircle_0:
   \   000000A8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000AC   F083BDE8           POP      {R4-R9,PC}       ;; return
     77          
     78          /*********************************************************************
     79          *
     80          *       GUI_DrawCircle
     81          */

   \                                 In section .text, align 4, keep-with-next
     82          void GUI_DrawCircle(int x0, int y0, int r) {
   \                     GUI_DrawCircle:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0240A0E1           MOV      R4,R2
     83            #if (GUI_WINSUPPORT)
     84              GUI_RECT Rect;
     85            #endif
     86            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
     87            #if (GUI_WINSUPPORT)
     88              WM_ADDORG(x0, y0);
   \   00000018   ........           LDR      R0,??DataTable6
   \   0000001C   401090E5           LDR      R1,[R0, #+64]
   \   00000020   440090E5           LDR      R0,[R0, #+68]
   \   00000024   055081E0           ADD      R5,R1,R5
   \   00000028   066080E0           ADD      R6,R0,R6
     89              Rect.x0 = x0 - r;
   \   0000002C   040045E0           SUB      R0,R5,R4
   \   00000030   B000CDE1           STRH     R0,[SP, #+0]
     90              Rect.x1 = x0 + r;
   \   00000034   050084E0           ADD      R0,R4,R5
   \   00000038   B400CDE1           STRH     R0,[SP, #+4]
     91              Rect.y0 = y0 - r;
   \   0000003C   040046E0           SUB      R0,R6,R4
   \   00000040   B200CDE1           STRH     R0,[SP, #+2]
     92              Rect.y1 = y0 + r;
   \   00000044   060084E0           ADD      R0,R4,R6
   \   00000048   B600CDE1           STRH     R0,[SP, #+6]
     93              WM_ITERATE_START(&Rect); {
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       WM__InitIVRSearch
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1600000A           BEQ      ??GUI_DrawCircle_0
     94            #endif
     95              GL_DrawCircle(x0, y0, r);
   \                     ??GUI_DrawCircle_1:
   \   0000005C   C300A0E3           MOV      R0,#+195
   \   00000060   800F80E3           ORR      R0,R0,#0x200
   \   00000064   900401E0           MUL      R1,R0,R4
   \   00000068   ........           LDR      R0,??DataTable6_1  ;; 0x10624dd3
   \   0000006C   0490A0E1           MOV      R9,R4
   \   00000070   9120C0E0           SMULL    R2,R0,R1,R0
   \   00000074   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   00000078   4003B0E1           ASRS     R0,R0,#+6
   \   0000007C   01008042           ADDMI    R0,R0,#+1
   \   00000080   017080E2           ADD      R7,R0,#+1
   \   00000084   940400E0           MUL      R0,R4,R4
   \   00000088   0030A0E3           MOV      R3,#+0
   \   0000008C   C18080E0           ADD      R8,R0,R1, ASR #+1
   \   00000090   0420A0E1           MOV      R2,R4
   \   00000094   0610A0E1           MOV      R1,R6
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           BL       Draw8Point
   \   000000A0   01A0A0E3           MOV      R10,#+1
   \   000000A4   010057E3           CMP      R7,#+1
   \   000000A8   050000AA           BGE      ??GUI_DrawCircle_2
     96            #if (GUI_WINSUPPORT)
     97              } WM_ITERATE_END();
   \                     ??GUI_DrawCircle_3:
   \   000000AC   ........           BL       WM__GetNextIVR
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   E8FFFF1A           BNE      ??GUI_DrawCircle_1
     98            #endif
     99            GUI_UNLOCK();
   \                     ??GUI_DrawCircle_0:
   \   000000B8   ........           BL       GUI_Unlock
    100          }
   \   000000BC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000C0   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??GUI_DrawCircle_2:
   \   000000C4   990900E0           MUL      R0,R9,R9
   \   000000C8   9A0A20E0           MLA      R0,R10,R10,R0
   \   000000CC   000058E1           CMP      R8,R0
   \   000000D0   050000AA           BGE      ??GUI_DrawCircle_4
   \   000000D4   0930A0E1           MOV      R3,R9
   \   000000D8   0A20A0E1           MOV      R2,R10
   \   000000DC   0610A0E1           MOV      R1,R6
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           BL       Draw8Point
   \   000000E8   019049E2           SUB      R9,R9,#+1
   \                     ??GUI_DrawCircle_4:
   \   000000EC   0930A0E1           MOV      R3,R9
   \   000000F0   0A20A0E1           MOV      R2,R10
   \   000000F4   0610A0E1           MOV      R1,R6
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   ........           BL       Draw8Point
   \   00000100   01A08AE2           ADD      R10,R10,#+1
   \   00000104   0A0057E1           CMP      R7,R10
   \   00000108   EDFFFFAA           BGE      ??GUI_DrawCircle_2
   \   0000010C   E6FFFFEA           B        ??GUI_DrawCircle_3
    101          
    102          /*********************************************************************
    103          *
    104          *       GL_FillCircle
    105          */

   \                                 In section .text, align 4, keep-with-next
    106          void GL_FillCircle(int x0, int y0, int r) {
   \                     GL_FillCircle:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
    107            I32 i;
    108            int imax;
    109            I32 sqmax;
    110            I32 x;
    111            imax  = ((I32)    ((I32)r * 707))  / 1000 + 1;
   \   00000004   C300A0E3           MOV      R0,#+195
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   800F80E3           ORR      R0,R0,#0x200
   \   00000010   900401E0           MUL      R1,R0,R4
   \   00000014   ........           LDR      R0,??DataTable6_1  ;; 0x10624dd3
   \   00000018   0CD04DE2           SUB      SP,SP,#+12
   \   0000001C   9120C0E0           SMULL    R2,R0,R1,R0
    112            sqmax =  (I32)r *  (I32)r + (I32)r / 2;
   \   00000020   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   00000024   4003B0E1           ASRS     R0,R0,#+6
   \   00000028   01008042           ADDMI    R0,R0,#+1
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   940400E0           MUL      R0,R4,R4
    113            x     = r;
    114            LCD_HL_DrawHLine(x0 - r, y0, x0 + r);
   \   00000038   ........           LDR      R5,??DataTable6
   \   0000003C   C10080E0           ADD      R0,R0,R1, ASR #+1
   \   00000040   04008DE5           STR      R0,[SP, #+4]
   \   00000044   0C009DE5           LDR      R0,[SP, #+12]
   \   00000048   943095E5           LDR      R3,[R5, #+148]
   \   0000004C   002084E0           ADD      R2,R4,R0
   \   00000050   10109DE5           LDR      R1,[SP, #+16]
   \   00000054   040040E0           SUB      R0,R0,R4
   \   00000058   003093E5           LDR      R3,[R3, #+0]
   \   0000005C   33FF2FE1           BLX      R3
    115            for (i = 1; i <= imax; i++) {
   \   00000060   00009DE5           LDR      R0,[SP, #+0]
   \   00000064   0160A0E3           MOV      R6,#+1
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   330000BA           BLT      ??GL_FillCircle_0
   \   00000070   10009DE5           LDR      R0,[SP, #+16]
   \   00000074   0C809DE5           LDR      R8,[SP, #+12]
   \   00000078   017040E2           SUB      R7,R0,#+1
   \   0000007C   019080E2           ADD      R9,R0,#+1
    116              if ((i * i + x * x) > sqmax) {
   \                     ??GL_FillCircle_1:
   \   00000080   940401E0           MUL      R1,R4,R4
   \   00000084   961621E0           MLA      R1,R6,R6,R1
   \   00000088   04009DE5           LDR      R0,[SP, #+4]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   140000AA           BGE      ??GL_FillCircle_2
    117                //
    118                // Draw lines from outside
    119                //
    120                if (x > imax) {
   \   00000094   00009DE5           LDR      R0,[SP, #+0]
   \   00000098   040050E1           CMP      R0,R4
   \   0000009C   100000AA           BGE      ??GL_FillCircle_3
   \   000000A0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000A4   943095E5           LDR      R3,[R5, #+148]
   \   000000A8   060040E0           SUB      R0,R0,R6
   \   000000AC   01A080E2           ADD      R10,R0,#+1
   \   000000B0   10009DE5           LDR      R0,[SP, #+16]
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   001084E0           ADD      R1,R4,R0
   \   000000BC   0A00A0E1           MOV      R0,R10
   \   000000C0   003093E5           LDR      R3,[R3, #+0]
    121                  LCD_HL_DrawHLine (x0 - i + 1, y0 + x, x0 + i - 1);
   \   000000C4   33FF2FE1           BLX      R3
    122                  LCD_HL_DrawHLine (x0 - i + 1, y0 - x, x0 + i - 1);
   \   000000C8   10009DE5           LDR      R0,[SP, #+16]
   \   000000CC   943095E5           LDR      R3,[R5, #+148]
   \   000000D0   041040E0           SUB      R1,R0,R4
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0A00A0E1           MOV      R0,R10
   \   000000DC   003093E5           LDR      R3,[R3, #+0]
   \   000000E0   33FF2FE1           BLX      R3
    123                }
    124                x--;
   \                     ??GL_FillCircle_3:
   \   000000E4   014044E2           SUB      R4,R4,#+1
    125              }
    126              //
    127              // Draw lines from inside (center)
    128              //
    129              LCD_HL_DrawHLine(x0 - x, y0 + i, x0 + x);
   \                     ??GL_FillCircle_2:
   \   000000E8   0C009DE5           LDR      R0,[SP, #+12]
   \   000000EC   943095E5           LDR      R3,[R5, #+148]
   \   000000F0   04A040E0           SUB      R10,R0,R4
   \   000000F4   00B084E0           ADD      R11,R4,R0
   \   000000F8   0B20A0E1           MOV      R2,R11
   \   000000FC   0910A0E1           MOV      R1,R9
   \   00000100   0A00A0E1           MOV      R0,R10
   \   00000104   003093E5           LDR      R3,[R3, #+0]
   \   00000108   33FF2FE1           BLX      R3
    130              LCD_HL_DrawHLine(x0 - x, y0 - i, x0 + x);
   \   0000010C   943095E5           LDR      R3,[R5, #+148]
   \   00000110   0B20A0E1           MOV      R2,R11
   \   00000114   0710A0E1           MOV      R1,R7
   \   00000118   0A00A0E1           MOV      R0,R10
   \   0000011C   003093E5           LDR      R3,[R3, #+0]
   \   00000120   33FF2FE1           BLX      R3
    131            }
   \   00000124   00009DE5           LDR      R0,[SP, #+0]
   \   00000128   016086E2           ADD      R6,R6,#+1
   \   0000012C   019089E2           ADD      R9,R9,#+1
   \   00000130   018088E2           ADD      R8,R8,#+1
   \   00000134   017047E2           SUB      R7,R7,#+1
   \   00000138   060050E1           CMP      R0,R6
   \   0000013C   CFFFFFAA           BGE      ??GL_FillCircle_1
    132          }
   \                     ??GL_FillCircle_0:
   \   00000140   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000144   F08FBDE8           POP      {R4-R11,PC}      ;; return
    133          
    134          /*********************************************************************
    135          *
    136          *       GUI_FillCircle
    137          */

   \                                 In section .text, align 4, keep-with-next
    138          void GUI_FillCircle(int x0, int y0, int r) {
   \                     GUI_FillCircle:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    139            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    140            #if (GUI_WINSUPPORT)
    141              WM_ADDORG(x0, y0);
   \   00000014   ........           LDR      R0,??DataTable6
   \   00000018   401090E5           LDR      R1,[R0, #+64]
   \   0000001C   440090E5           LDR      R0,[R0, #+68]
   \   00000020   044081E0           ADD      R4,R1,R4
   \   00000024   055080E0           ADD      R5,R0,R5
    142              WM_ITERATE_START(NULL); {
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   ........           BL       WM__InitIVRSearch
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600000A           BEQ      ??GUI_FillCircle_0
    143            #endif
    144            GL_FillCircle(x0, y0, r);
   \                     ??GUI_FillCircle_1:
   \   00000038   0620A0E1           MOV      R2,R6
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GL_FillCircle
    145            #if (GUI_WINSUPPORT)
    146              } WM_ITERATE_END();
   \   00000048   ........           BL       WM__GetNextIVR
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F8FFFF1A           BNE      ??GUI_FillCircle_1
    147            #endif
    148            GUI_UNLOCK();
   \                     ??GUI_FillCircle_0:
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   ........           B        GUI_Unlock       ;; tailcall
    149          }
    150          
    151          /*********************************************************************
    152          *
    153          *       Public code, ellipse
    154          *
    155          * To calculate the ellipse positions we use the following equation:
    156          *
    157          *   x^2   y^2
    158          *   --- + --- = 1
    159          *   a^2   b^2
    160          *
    161          * As a, b and y is known the equation has to be solved for x:
    162          *
    163          *           (       y^2 * a^2 )
    164          *   x = sqrt( a^2 - --------- )
    165          *           (          b^2    )
    166          *
    167          **********************************************************************
    168          */
    169          /*********************************************************************
    170          *
    171          *       GL_FillEllipse
    172          *
    173          * Function description
    174          *   Draws a filled ellipse by respecting pen size.
    175          */

   \                                 In section .text, align 4, keep-with-next
    176          void GL_FillEllipse(int xm, int ym, int rx, int ry) {
   \                     GL_FillEllipse:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
    177            U32 rxrx, ryry, yy; // squared variables
    178            int x, y, xOld, xer, xal, yu, yl;
    179          
    180            ryry = ry * ry;
   \   00000004   03C0A0E1           MOV      R12,R3
   \   00000008   9C0303E0           MUL      R3,R12,R3
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   08308DE5           STR      R3,[SP, #+8]
    181            rxrx = rx * rx;
   \   00000014   920203E0           MUL      R3,R2,R2
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   04308DE5           STR      R3,[SP, #+4]
    182            xOld = rx;
   \   00000020   0240A0E1           MOV      R4,R2
    183            for (y = 1; y <= ry; y++) {
   \   00000024   0170A0E3           MOV      R7,#+1
   \   00000028   01005CE3           CMP      R12,#+1
   \   0000002C   290000BA           BLT      ??GL_FillEllipse_0
   \   00000030   0150A0E1           MOV      R5,R1
   \   00000034   00108DE5           STR      R1,[SP, #+0]
   \   00000038   018046E2           SUB      R8,R6,#+1
    184              yy = y * y;
    185              x  = GUI__sqrt32(rxrx - yy * rxrx / ryry); // See heading comment
   \                     ??GL_FillEllipse_1:
   \   0000003C   970700E0           MUL      R0,R7,R7
   \   00000040   04909DE5           LDR      R9,[SP, #+4]
   \   00000044   08109DE5           LDR      R1,[SP, #+8]
   \   00000048   990000E0           MUL      R0,R9,R0
   \   0000004C   ........           BL       __aeabi_uidiv
   \   00000050   000049E0           SUB      R0,R9,R0
   \   00000054   ........           BL       GUI__sqrt32
    186              //
    187              // Avoid overlapping of old and actual line
    188              //
    189              if (x != xOld) {
   \   00000058   040050E1           CMP      R0,R4
    190                xOld--;
   \   0000005C   01404412           SUBNE    R4,R4,#+1
    191              }
    192              xal  = xm - xOld;
   \   00000060   049046E0           SUB      R9,R6,R4
    193              xer  = xm + xOld;
   \   00000064   06A084E0           ADD      R10,R4,R6
    194              xOld = x;
   \   00000068   0040A0E1           MOV      R4,R0
    195              yu   = ym - y + 1;
    196              yl   = ym + y - 1;
   \   0000006C   00B09DE5           LDR      R11,[SP, #+0]
    197              LCD_DrawHLine(xm,  yu, xer);      // 1st quadrant
   \   00000070   0A20A0E1           MOV      R2,R10
   \   00000074   0510A0E1           MOV      R1,R5
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           BL       LCD_DrawHLine
    198              LCD_DrawHLine(xal, yu, xm - 1);   // 2nd quadrant
   \   00000080   0820A0E1           MOV      R2,R8
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   0900A0E1           MOV      R0,R9
   \   0000008C   ........           BL       LCD_DrawHLine
    199              //
    200              // Avoid double painting
    201              //
    202              if (y > 1) {
   \   00000090   020057E3           CMP      R7,#+2
   \   00000094   070000BA           BLT      ??GL_FillEllipse_2
    203                LCD_DrawHLine(xal, yl, xm - 1); // 3rd quadrant
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   0B10A0E1           MOV      R1,R11
   \   000000A0   0900A0E1           MOV      R0,R9
   \   000000A4   ........           BL       LCD_DrawHLine
    204                LCD_DrawHLine(xm,  yl, xer);    // 4th quadrant
   \   000000A8   0A20A0E1           MOV      R2,R10
   \   000000AC   0B10A0E1           MOV      R1,R11
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           BL       LCD_DrawHLine
    205              }
    206            }
   \                     ??GL_FillEllipse_2:
   \   000000B8   00109DE5           LDR      R1,[SP, #+0]
   \   000000BC   10009DE5           LDR      R0,[SP, #+16]
   \   000000C0   017087E2           ADD      R7,R7,#+1
   \   000000C4   011081E2           ADD      R1,R1,#+1
   \   000000C8   00108DE5           STR      R1,[SP, #+0]
   \   000000CC   015045E2           SUB      R5,R5,#+1
   \   000000D0   070050E1           CMP      R0,R7
   \   000000D4   D8FFFFAA           BGE      ??GL_FillEllipse_1
    207          }
   \                     ??GL_FillEllipse_0:
   \   000000D8   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000DC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    208          
    209          /*********************************************************************
    210          *
    211          *       GUI_FillEllipse
    212          */

   \                                 In section .text, align 4, keep-with-next
    213          void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
   \                     GUI_FillEllipse:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0370A0E1           MOV      R7,R3
    214            U8 PenSize;
    215            #if (GUI_WINSUPPORT)
    216              GUI_RECT r;
    217            #endif
    218            PenSize = GUI_GetPenSize();
   \   00000018   ........           BL       GUI_GetPenSize
    219            //
    220            // The ellipse will be drawn half of the pen size wider.
    221            //
    222            rx += (PenSize + 1) >> 1;
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   C05085E0           ADD      R5,R5,R0, ASR #+1
    223            ry += (PenSize + 1) >> 1;
   \   00000024   C07087E0           ADD      R7,R7,R0, ASR #+1
    224            GUI_LOCK();
   \   00000028   ........           BL       GUI_Lock
    225            #if (GUI_WINSUPPORT)
    226              WM_ADDORG(x0,y0);
   \   0000002C   ........           LDR      R0,??DataTable6
   \   00000030   401090E5           LDR      R1,[R0, #+64]
   \   00000034   440090E5           LDR      R0,[R0, #+68]
   \   00000038   066081E0           ADD      R6,R1,R6
   \   0000003C   044080E0           ADD      R4,R0,R4
    227              //
    228              // Calc rectangle in order to avoid unnecessary drawing ops.
    229              //
    230              r.x0 = x0 - rx;
   \   00000040   050046E0           SUB      R0,R6,R5
   \   00000044   B000CDE1           STRH     R0,[SP, #+0]
    231              r.x1 = x0 + rx;
   \   00000048   060085E0           ADD      R0,R5,R6
   \   0000004C   B400CDE1           STRH     R0,[SP, #+4]
    232              r.y0 = y0 - ry;
   \   00000050   070044E0           SUB      R0,R4,R7
   \   00000054   B200CDE1           STRH     R0,[SP, #+2]
    233              r.y1 = y0 + ry;
   \   00000058   040087E0           ADD      R0,R7,R4
   \   0000005C   B600CDE1           STRH     R0,[SP, #+6]
    234              WM_ITERATE_START(&r); {
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           BL       WM__InitIVRSearch
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0700000A           BEQ      ??GUI_FillEllipse_0
    235            #endif
    236            GL_FillEllipse(x0, y0, rx, ry);
   \                     ??GUI_FillEllipse_1:
   \   00000070   0730A0E1           MOV      R3,R7
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0410A0E1           MOV      R1,R4
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       GL_FillEllipse
    237            #if (GUI_WINSUPPORT)
    238              } WM_ITERATE_END();
   \   00000084   ........           BL       WM__GetNextIVR
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   F7FFFF1A           BNE      ??GUI_FillEllipse_1
    239            #endif
    240            GUI_UNLOCK();
   \                     ??GUI_FillEllipse_0:
   \   00000090   ........           BL       GUI_Unlock
    241          }
   \   00000094   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000098   F080BDE8           POP      {R4-R7,PC}       ;; return
    242          
    243          /*********************************************************************
    244          *
    245          *       GL_DrawEllipse
    246          *
    247          * Function description
    248          *   Draws an ellipse by respecting pen size.
    249          */

   \                                 In section .text, align 4, keep-with-next
    250          void GL_DrawEllipse(int xm, int ym, int rx, int ry, int w) {
   \                     GL_DrawEllipse:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   50309DE5           LDR      R3,[SP, #+80]
   \   0000000C   0040A0E1           MOV      R4,R0
    251            U32 rxrx, ryry, rxrxi, ryryi, yy;  // squared variables
    252            int x, y, xOld, xer, xal, xari, xeli, yu, yl, rxi, ryi, xi;
    253          
    254            rxi    = rx  - w + 1;
    255            ryi    = ry  - w + 1;
   \   00000010   28C09DE5           LDR      R12,[SP, #+40]
   \   00000014   030042E0           SUB      R0,R2,R3
   \   00000018   03304CE0           SUB      R3,R12,R3
   \   0000001C   013083E2           ADD      R3,R3,#+1
   \   00000020   00308DE5           STR      R3,[SP, #+0]
    256            ryry   = ry  * ry;
   \   00000024   0C30A0E1           MOV      R3,R12
   \   00000028   9C0303E0           MUL      R3,R12,R3
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   20308DE5           STR      R3,[SP, #+32]
    257            rxrx   = rx  * rx;
   \   00000034   920203E0           MUL      R3,R2,R2
    258            ryryi  = ryi * ryi;
    259            rxrxi  = rxi * rxi;
    260            xOld   = rx;
   \   00000038   0260A0E1           MOV      R6,R2
   \   0000003C   18308DE5           STR      R3,[SP, #+24]
   \   00000040   00309DE5           LDR      R3,[SP, #+0]
    261            for (y = 1; y <= ry; y++) {
   \   00000044   0170A0E3           MOV      R7,#+1
   \   00000048   03C0A0E1           MOV      R12,R3
   \   0000004C   9C0303E0           MUL      R3,R12,R3
   \   00000050   1C308DE5           STR      R3,[SP, #+28]
   \   00000054   900003E0           MUL      R3,R0,R0
   \   00000058   28009DE5           LDR      R0,[SP, #+40]
   \   0000005C   14308DE5           STR      R3,[SP, #+20]
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   3C0000BA           BLT      ??GL_DrawEllipse_0
   \   00000068   08108DE5           STR      R1,[SP, #+8]
   \   0000006C   04108DE5           STR      R1,[SP, #+4]
    262              yy = y  * y;
   \                     ??GL_DrawEllipse_1:
   \   00000070   970700E0           MUL      R0,R7,R7
    263              yu = ym - y + 1;
   \   00000074   08109DE5           LDR      R1,[SP, #+8]
    264              yl = ym + y - 1;
    265              x  = GUI__sqrt32(rxrx - yy * rxrx / ryry); // See heading comment
   \   00000078   18909DE5           LDR      R9,[SP, #+24]
   \   0000007C   10008DE5           STR      R0,[SP, #+16]
   \   00000080   0C108DE5           STR      R1,[SP, #+12]
   \   00000084   990000E0           MUL      R0,R9,R0
   \   00000088   20109DE5           LDR      R1,[SP, #+32]
   \   0000008C   ........           BL       __aeabi_uidiv
   \   00000090   04809DE5           LDR      R8,[SP, #+4]
   \   00000094   000049E0           SUB      R0,R9,R0
   \   00000098   ........           BL       GUI__sqrt32
    266              //
    267              // Avoid overlapping of old and actual line
    268              //
    269              if (x != xOld) {
   \   0000009C   060050E1           CMP      R0,R6
    270                xOld--;
   \   000000A0   01604612           SUBNE    R6,R6,#+1
    271              }
    272              xal  = xm - xOld;
   \   000000A4   069044E0           SUB      R9,R4,R6
    273              xer  = xm + xOld;
   \   000000A8   04A086E0           ADD      R10,R6,R4
    274              xOld = x;
   \   000000AC   0060A0E1           MOV      R6,R0
    275              if (y < ryi) {
   \   000000B0   00009DE5           LDR      R0,[SP, #+0]
   \   000000B4   000057E1           CMP      R7,R0
   \   000000B8   090000AA           BGE      ??GL_DrawEllipse_2
    276                xi   = GUI__sqrt32(rxrxi - yy * rxrxi / ryryi);
   \   000000BC   14509DE5           LDR      R5,[SP, #+20]
   \   000000C0   10009DE5           LDR      R0,[SP, #+16]
   \   000000C4   1C109DE5           LDR      R1,[SP, #+28]
   \   000000C8   950000E0           MUL      R0,R5,R0
   \   000000CC   ........           BL       __aeabi_uidiv
   \   000000D0   000045E0           SUB      R0,R5,R0
   \   000000D4   ........           BL       GUI__sqrt32
    277                xeli = xm - xi;
   \   000000D8   005044E0           SUB      R5,R4,R0
    278                xari = xm + xi;
   \   000000DC   04B080E0           ADD      R11,R0,R4
   \   000000E0   010000EA           B        ??GL_DrawEllipse_3
    279              } else if (y == ryi) {
    280                xeli = xm - 1;
   \                     ??GL_DrawEllipse_2:
   \   000000E4   01504402           SUBEQ    R5,R4,#+1
    281                xari = xm;
   \   000000E8   04B0A001           MOVEQ    R11,R4
    282              }
    283              LCD_DrawHLine(xari, yu, xer);    // 1st quadrant
   \                     ??GL_DrawEllipse_3:
   \   000000EC   0A20A0E1           MOV      R2,R10
   \   000000F0   0C109DE5           LDR      R1,[SP, #+12]
   \   000000F4   0B00A0E1           MOV      R0,R11
   \   000000F8   ........           BL       LCD_DrawHLine
    284              LCD_DrawHLine(xal,  yu, xeli);   // 2nd quadrant
   \   000000FC   0520A0E1           MOV      R2,R5
   \   00000100   0C109DE5           LDR      R1,[SP, #+12]
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   ........           BL       LCD_DrawHLine
    285              //
    286              // Avoid double painting
    287              //
    288              if (y > 1) {
   \   0000010C   020057E3           CMP      R7,#+2
   \   00000110   070000BA           BLT      ??GL_DrawEllipse_4
    289                LCD_DrawHLine(xal,  yl, xeli); // 3rd quadrant
   \   00000114   0520A0E1           MOV      R2,R5
   \   00000118   0810A0E1           MOV      R1,R8
   \   0000011C   0900A0E1           MOV      R0,R9
   \   00000120   ........           BL       LCD_DrawHLine
    290                LCD_DrawHLine(xari, yl, xer);  // 4th quadrant
   \   00000124   0A20A0E1           MOV      R2,R10
   \   00000128   0810A0E1           MOV      R1,R8
   \   0000012C   0B00A0E1           MOV      R0,R11
   \   00000130   ........           BL       LCD_DrawHLine
    291              }
    292            }
   \                     ??GL_DrawEllipse_4:
   \   00000134   04009DE5           LDR      R0,[SP, #+4]
   \   00000138   017087E2           ADD      R7,R7,#+1
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   04008DE5           STR      R0,[SP, #+4]
   \   00000144   08009DE5           LDR      R0,[SP, #+8]
   \   00000148   010040E2           SUB      R0,R0,#+1
   \   0000014C   08008DE5           STR      R0,[SP, #+8]
   \   00000150   28009DE5           LDR      R0,[SP, #+40]
   \   00000154   070050E1           CMP      R0,R7
   \   00000158   C4FFFFAA           BGE      ??GL_DrawEllipse_1
    293          }
   \                     ??GL_DrawEllipse_0:
   \   0000015C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000160   F08FBDE8           POP      {R4-R11,PC}      ;; return
    294          
    295          /*********************************************************************
    296          *
    297          *       GUI_DrawEllipse
    298          */

   \                                 In section .text, align 4, keep-with-next
    299          void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
   \                     GUI_DrawEllipse:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0380A0E1           MOV      R8,R3
    300            U8 PenSize;
    301            #if (GUI_WINSUPPORT)
    302              GUI_RECT r;
    303            #endif
    304            PenSize = GUI_GetPenSize();
   \   00000018   ........           BL       GUI_GetPenSize
   \   0000001C   0060A0E1           MOV      R6,R0
    305            //
    306            // The ellipse will be drawn half of the pen size wider.
    307            //
    308            rx += (PenSize + 1) >> 1;
   \   00000020   010086E2           ADD      R0,R6,#+1
   \   00000024   C07087E0           ADD      R7,R7,R0, ASR #+1
    309            ry += (PenSize + 1) >> 1;
   \   00000028   C08088E0           ADD      R8,R8,R0, ASR #+1
    310            if (rx < PenSize || ry < PenSize) {
   \   0000002C   060057E1           CMP      R7,R6
   \   00000030   060058A1           CMPGE    R8,R6
   \   00000034   240000BA           BLT      ??GUI_DrawEllipse_0
    311              return;
    312            }
    313            GUI_LOCK();
   \   00000038   ........           BL       GUI_Lock
    314            #if (GUI_WINSUPPORT)
    315              WM_ADDORG(x0,y0);
   \   0000003C   ........           LDR      R0,??DataTable6
   \   00000040   401090E5           LDR      R1,[R0, #+64]
   \   00000044   440090E5           LDR      R0,[R0, #+68]
   \   00000048   044081E0           ADD      R4,R1,R4
   \   0000004C   055080E0           ADD      R5,R0,R5
    316              //
    317              // Calc rectangle in order to avoid unnecessary drawing ops.
    318              //
    319              r.x0 = x0 - rx;
   \   00000050   070044E0           SUB      R0,R4,R7
   \   00000054   B400CDE1           STRH     R0,[SP, #+4]
    320              r.x1 = x0 + rx;
   \   00000058   040087E0           ADD      R0,R7,R4
   \   0000005C   B800CDE1           STRH     R0,[SP, #+8]
    321              r.y0 = y0 - ry;
   \   00000060   080045E0           SUB      R0,R5,R8
   \   00000064   B600CDE1           STRH     R0,[SP, #+6]
    322              r.y1 = y0 + ry;
   \   00000068   050088E0           ADD      R0,R8,R5
   \   0000006C   BA00CDE1           STRH     R0,[SP, #+10]
    323              WM_ITERATE_START(&r); {
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   ........           BL       WM__InitIVRSearch
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   1100000A           BEQ      ??GUI_DrawEllipse_1
    324            #endif
    325            if (PenSize == rx || PenSize == ry) {
   \                     ??GUI_DrawEllipse_2:
   \   00000080   070056E1           CMP      R6,R7
   \   00000084   08005611           CMPNE    R6,R8
   \   00000088   0500001A           BNE      ??GUI_DrawEllipse_3
    326              GL_FillEllipse(x0, y0, rx, ry);
   \   0000008C   0830A0E1           MOV      R3,R8
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GL_FillEllipse
   \   000000A0   050000EA           B        ??GUI_DrawEllipse_4
    327            } else{
    328              GL_DrawEllipse(x0, y0, rx, ry, PenSize);
   \                     ??GUI_DrawEllipse_3:
   \   000000A4   00608DE5           STR      R6,[SP, #+0]
   \   000000A8   0830A0E1           MOV      R3,R8
   \   000000AC   0720A0E1           MOV      R2,R7
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       GL_DrawEllipse
    329            }
    330            #if (GUI_WINSUPPORT)
    331              } WM_ITERATE_END();
   \                     ??GUI_DrawEllipse_4:
   \   000000BC   ........           BL       WM__GetNextIVR
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   EDFFFF1A           BNE      ??GUI_DrawEllipse_2
    332            #endif
    333            GUI_UNLOCK();
   \                     ??GUI_DrawEllipse_1:
   \   000000C8   ........           BL       GUI_Unlock
    334          }
   \                     ??GUI_DrawEllipse_0:
   \   000000CC   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   000000D0   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   D34D6210           DC32     0x10624dd3
    335          
    336          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     Draw8Point          40
     GL_DrawCircle       32
     GL_DrawEllipse      80
     GL_FillCircle       56
     GL_FillEllipse      56
     GUI_DrawCircle      40
     GUI_DrawEllipse     40
     GUI_FillCircle      16
     GUI_FillEllipse     32


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     Draw8Point       240
     GL_DrawCircle    176
     GUI_DrawCircle   272
     GL_FillCircle    328
     GUI_FillCircle    92
     GL_FillEllipse   224
     GUI_FillEllipse  156
     GL_DrawEllipse   356
     GUI_DrawEllipse  212
     ??DataTable6       4
     ??DataTable6_1     4

 
 2 064 bytes in section .text
 
 2 064 bytes of CODE memory

Errors: none
Warnings: none
