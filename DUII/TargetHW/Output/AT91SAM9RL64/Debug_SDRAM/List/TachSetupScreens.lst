###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:41 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\TachSetupScreens.c                          #
#    Command line =  C:\DUII\DUII\TachSetupScreens.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Ta #
#                    chSetupScreens.lst                                       #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Tac #
#                    hSetupScreens.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\TachSetupScreens.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include "DUII.h"
     25          #include "GUI.h"
     26          #include "commondefs.h"
     27          #include "DIALOG.h"
     28          #include "ConfigScreens.h"
     29          #include "GeneralConfig.h"
     30          #include "FlashReadWrite.h"
     31          #include "DataHandler.h"
     32          #include "StandardList.h"
     33          #include "TachSetupScreens.h"
     34          
     35          
     36          /*********************************************************************
     37          *
     38          *       Public Variables
     39          *
     40          **********************************************************************
     41          */
     42          
     43          /*********************************************************************
     44          *
     45          *       Local Variables
     46          *
     47          **********************************************************************
     48          */

   \                                 In section .data, align 4
     49          static WM_HWIN hTachSetupScreens;
     50          static LISTWHEEL_Handle hWarningRPMListWheel, hRedlineListWheel, hCylindersListWheel, hMaxRPMListWheel;
     51          int rpmListStart;
     52          
     53          /*********************************************************************
     54          *
     55          *       External data and code
     56          *
     57          **********************************************************************
     58          */
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     60          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     61          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenButton;
     62          extern GUI_CONST_STORAGE GUI_BITMAP bmRedButton;
     63          extern GUI_CONST_STORAGE GUI_BITMAP bmSingleSpinner;
     64          extern GUI_CONST_STORAGE GUI_BITMAP bmBackgroundWithPanel;
     65          extern GUI_CONST_STORAGE GUI_BITMAP bmWarningRPM;
     66          extern GUI_CONST_STORAGE GUI_BITMAP bmRedlineRPM;
     67          extern GUI_CONST_STORAGE GUI_BITMAP bmEngineCylinders;
     68          extern GUI_CONST_STORAGE GUI_BITMAP bmTachStartRPM;
     69          extern GUI_CONST_STORAGE GUI_BITMAP bmPowerBandEnd;
     70          extern GUI_CONST_STORAGE GUI_BITMAP bmMaxRPM;
     71          
     72          
     73          /*********************************************************************
     74          *
     75          *       Local Prototypes
     76          *
     77          **********************************************************************
     78          */
     79          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen);
     80          void DisplayWarningRPM(WM_HWIN);
     81          void DisplayRedline(WM_HWIN);
     82          void DisplayCylinders(WM_HWIN);
     83          void DisplayMaxRPM(WM_HWIN);
     84          void DisplayPowerEnd(WM_HWIN);
     85          void WarningRPMPaint(WM_HWIN);
     86          void RedlinePaint(WM_HWIN);
     87          void CylindersPaint(WM_HWIN);
     88          void MaxRPMPaint(WM_HWIN);
     89          void PowerEndPaint(WM_HWIN);
     90          void BuildRPMList(int rpm, int end, int increment);
     91          
     92          
     93          /*********************************************************************
     94          *
     95          *       Tables and Constants
     96          *
     97          **********************************************************************
     98          */
     99          struct SCREEN_LIST TachSetupScreenList[NUM_TACH_SETUP_SCREENS+1] = {
   \                     TachSetupScreenList:
   \   00000000   00000000....       DC32 0, DisplayWarningRPM, WarningRPMPaint, 1, DisplayRedline
   \              ............
   \              01000000....
   \              ....        
   \   00000014   ........0200       DC32 RedlinePaint, 2, DisplayCylinders, CylindersPaint, 3
   \              0000........
   \              ........0300
   \              0000        
   \   00000028   ............       DC32 DisplayPowerEnd, PowerEndPaint, 4, DisplayMaxRPM, MaxRPMPaint, -1
   \              ....04000000
   \              ............
   \              ....FFFFFFFF
   \   00000040   000000000000       DC32 0H, 0H
   \              0000        
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     rpmListStart:
   \   0000004C   00000000           DC8 0, 0, 0, 0
    100          	{ WARNING_RPM_SETUP, DisplayWarningRPM, WarningRPMPaint },
    101          	{ REDLINE_RPM_SETUP, DisplayRedline, RedlinePaint },
    102          	{ ENGINE_CYLINDERS_SETUP, DisplayCylinders, CylindersPaint },
    103          	{ POWERBANDEND_RPM_SETUP, DisplayPowerEnd, PowerEndPaint },
    104          	{ MAX_RPM_SETUP, DisplayMaxRPM, MaxRPMPaint },
    105          	{ -1, NULL, NULL }
    106          };
    107          
    108          #define	WARNING_WHEEL		GUI_ID_LISTWHEEL0
    109          #define	REDLINE_WHEEL		GUI_ID_LISTWHEEL1
    110          #define	CYLINDERS_WHEEL		GUI_ID_LISTWHEEL2
    111          #define	POWERSTART_WHEEL	GUI_ID_LISTWHEEL3
    112          #define	MAX_RPM_WHEEL		GUI_ID_LISTWHEEL4
    113          #define	POWEREND_WHEEL		GUI_ID_LISTWHEEL5
    114          
    115          #define	RPMLIST_INCREMENT	50
    116          #define	MAXRPM_INCREMENT	100
    117          
    118          // List wheels limited to 171 (plus 1 for NULL) entries
    119          #define	MAX_RPMLIST_STEPS	170
    120          char RPMListData[MAX_RPMLIST_STEPS][6];
    121          char *RPMListPtrs[MAX_RPMLIST_STEPS];
   \                     RPMListPtrs:
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000002F8   00000000           DC8 0, 0, 0, 0
   \   000002FC   00000000           DC8 0, 0, 0, 0
   \   00000300   00000000           DC8 0, 0, 0, 0
   \                     RPMListData:
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000404   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000414   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000424   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000434   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000444   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000454   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000464   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000474   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000484   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000494   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000544   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000554   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000564   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000574   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000584   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000594   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000604   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000614   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000624   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000634   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000644   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000654   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000664   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000674   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000684   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000694   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In section .data, align 4
    122          
    123          char * apCylinders[] = {	// list wheel index
   \                     apCylinders:
   \   00000000   ............       DC32 `?<Constant "2 stroke">`, `?<Constant "ECU / 1">`
   \              ....        
   \   00000008   ............       DC32 `?<Constant "2">`, `?<Constant "3">`, `?<Constant "4">`
   \              ............
   \   00000014   ............       DC32 `?<Constant "5">`, `?<Constant "6">`, `?<Constant "8">`
   \              ............
   \   00000020   ............       DC32 `?<Constant "10">`, `?<Constant "12">`, `?<Constant "16">`, 0H
   \              ............
   \              00000000    
   \   00000030   00000000           DC8 0, 0, 0, 0
    124          		"2 stroke",			// 0
    125          		"ECU / 1",			// 1
    126          		"2",				// 2
    127          		"3",				// 3
    128          		"4",				// 4
    129          		"5",				// 5
    130          		"6",				// 6
    131          		"8",				// 7
    132          		"10",				// 8
    133          		"12",				// 9
    134          		"16",				// 10
    135          		NULL
    136          };
    137          
    138          
    139          /*********************************************************************
    140          *
    141          *       Public code
    142          *
    143          **********************************************************************
    144          */

   \                                 In section .text, align 4, keep-with-next
    145          char CylindersToIndex(char cyl)
    146          {
    147          	if (cyl <= 6)
   \                     CylindersToIndex:
   \   00000000   070050E3           CMP      R0,#+7
   \   00000004   1000003A           BCC      ??CylindersToIndex_0
    148          		return cyl;
    149          	else if (cyl == 8)
   \   00000008   080050E3           CMP      R0,#+8
   \   0000000C   0100001A           BNE      ??CylindersToIndex_1
    150          		return 7;
   \   00000010   0700A0E3           MOV      R0,#+7
   \   00000014   1EFF2FE1           BX       LR
    151          	else if (cyl == 10)
   \                     ??CylindersToIndex_1:
   \   00000018   0A0050E3           CMP      R0,#+10
   \   0000001C   0100001A           BNE      ??CylindersToIndex_2
    152          		return 8;
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   1EFF2FE1           BX       LR
    153          	else if (cyl == 12)
   \                     ??CylindersToIndex_2:
   \   00000028   0C0050E3           CMP      R0,#+12
   \   0000002C   0100001A           BNE      ??CylindersToIndex_3
    154          		return 9;
   \   00000030   0900A0E3           MOV      R0,#+9
   \   00000034   1EFF2FE1           BX       LR
    155          	else if (cyl == 16)
   \                     ??CylindersToIndex_3:
   \   00000038   100050E3           CMP      R0,#+16
   \   0000003C   0100001A           BNE      ??CylindersToIndex_4
    156          		return 10;
   \   00000040   0A00A0E3           MOV      R0,#+10
   \   00000044   1EFF2FE1           BX       LR
    157          	else return 0;
   \                     ??CylindersToIndex_4:
   \   00000048   0000A0E3           MOV      R0,#+0
   \                     ??CylindersToIndex_0:
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    158          }
    159          

   \                                 In section .text, align 4, keep-with-next
    160          char IndexToCylinders(char index)
    161          {
    162          	if (index <= 6)
   \                     IndexToCylinders:
   \   00000000   070050E3           CMP      R0,#+7
   \   00000004   0F00003A           BCC      ??IndexToCylinders_0
    163          		return index;
    164          	else if (index == 7)
   \   00000008   0100001A           BNE      ??IndexToCylinders_1
    165          		return 8;
   \   0000000C   0800A0E3           MOV      R0,#+8
   \   00000010   1EFF2FE1           BX       LR
    166          	else if (index == 8)
   \                     ??IndexToCylinders_1:
   \   00000014   080050E3           CMP      R0,#+8
   \   00000018   0100001A           BNE      ??IndexToCylinders_2
    167          		return 10;
   \   0000001C   0A00A0E3           MOV      R0,#+10
   \   00000020   1EFF2FE1           BX       LR
    168          	else if (index == 9)
   \                     ??IndexToCylinders_2:
   \   00000024   090050E3           CMP      R0,#+9
   \   00000028   0100001A           BNE      ??IndexToCylinders_3
    169          		return 12;
   \   0000002C   0C00A0E3           MOV      R0,#+12
   \   00000030   1EFF2FE1           BX       LR
    170          	else if (index == 10)
   \                     ??IndexToCylinders_3:
   \   00000034   0A0050E3           CMP      R0,#+10
   \   00000038   0100001A           BNE      ??IndexToCylinders_4
    171          		return 16;
   \   0000003C   1000A0E3           MOV      R0,#+16
   \   00000040   1EFF2FE1           BX       LR
    172          	else return 0;
   \                     ??IndexToCylinders_4:
   \   00000044   0000A0E3           MOV      R0,#+0
   \                     ??IndexToCylinders_0:
   \   00000048   1EFF2FE1           BX       LR               ;; return
    173          }
    174          

   \                                 In section .text, align 4, keep-with-next
    175          char *GetCylindersText(void)
    176          {
    177          	return apCylinders[CylindersToIndex(vehicleData.engineCylinders)];
   \                     GetCylindersText:
   \   00000000   ........           LDR      R0,??DataTable27
   \   00000004   0D00D0E5           LDRB     R0,[R0, #+13]
   \   00000008   070050E3           CMP      R0,#+7
   \   0000000C   0E00003A           BCC      ??GetCylindersText_0
   \   00000010   080050E3           CMP      R0,#+8
   \   00000014   0B00000A           BEQ      ??GetCylindersText_1
   \   00000018   0A0050E3           CMP      R0,#+10
   \   0000001C   0700000A           BEQ      ??GetCylindersText_2
   \   00000020   0C0050E3           CMP      R0,#+12
   \   00000024   0300000A           BEQ      ??GetCylindersText_3
   \   00000028   100050E3           CMP      R0,#+16
   \   0000002C   0000A013           MOVNE    R0,#+0
   \   00000030   0A00A003           MOVEQ    R0,#+10
   \   00000034   040000EA           B        ??GetCylindersText_0
   \                     ??GetCylindersText_3:
   \   00000038   0900A0E3           MOV      R0,#+9
   \   0000003C   020000EA           B        ??GetCylindersText_0
   \                     ??GetCylindersText_2:
   \   00000040   0800A0E3           MOV      R0,#+8
   \   00000044   000000EA           B        ??GetCylindersText_0
   \                     ??GetCylindersText_1:
   \   00000048   0700A0E3           MOV      R0,#+7
   \                     ??GetCylindersText_0:
   \   0000004C   ........           LDR      R1,??DataTable27_1
   \   00000050   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000054   1EFF2FE1           BX       LR               ;; return
    178          }
    179          
    180          

   \                                 In section .text, align 4, keep-with-next
    181          WM_HWIN GetTachSetupWindowHandle(void)
    182          {
    183          	return hTachSetupScreens;
   \                     GetTachSetupWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable27_2
   \   00000004   480090E5           LDR      R0,[R0, #+72]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    184          }
    185          

   \                                 In section .text, align 4, keep-with-next
    186          void SetTachSetupWindowHandle(WM_HWIN hWin)
    187          {
    188          	hTachSetupScreens = hWin;
   \                     SetTachSetupWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable27_2
   \   00000004   480081E5           STR      R0,[R1, #+72]
    189          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    190          

   \                                 In section .text, align 4, keep-with-next
    191          void TachSetupScreensCallback(WM_MESSAGE * pMsg)
    192          {
   \                     TachSetupScreensCallback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    193          	int NCode, Id;
    194          //	int results;
    195          	int Sel;
    196          //	WM_HWIN hDlg;
    197          
    198          //	hDlg = pMsg->hWin;
    199          
    200          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   9200000A           BEQ      ??TachSetupScreensCallback_1
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   0E00000A           BEQ      ??TachSetupScreensCallback_2
   \   00000020   170050E2           SUBS     R0,R0,#+23
   \   00000024   1900000A           BEQ      ??TachSetupScreensCallback_3
   \   00000028   ED0050E2           SUBS     R0,R0,#+237
   \   0000002C   8600001A           BNE      ??TachSetupScreensCallback_4
    201          	{
    202          		case WM_TIMER:
    203          			if (pMsg->Data.v == hScreenTimer)
   \   00000030   ........           LDR      R0,??DataTable27_3
   \   00000034   0C1094E5           LDR      R1,[R4, #+12]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   000051E1           CMP      R1,R0
   \   00000040   8700001A           BNE      ??TachSetupScreensCallback_1
    204          			{
    205          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000044   7D10A0E3           MOV      R1,#+125
   \   00000048   ........           BL       WM_RestartTimer
    206          				WM_InvalidateRect(pMsg->hWin, &BannerRect);
   \   0000004C   ........           LDR      R1,??DataTable27_4
   \   00000050   040094E5           LDR      R0,[R4, #+4]
   \   00000054   ........           BL       WM_InvalidateRect
   \   00000058   810000EA           B        ??TachSetupScreensCallback_1
    207          			}
    208          			break;
    209          
    210          		case WM_CREATE:
    211          			TachSetupIgnoreNextKeyRelease();
    212          			break;
    213          
    214          		case WM_PAINT:
    215          			if (GetScreenType() == TACH_SETUP_SCREENS_TYPE)
   \                     ??TachSetupScreensCallback_2:
   \   0000005C   ........           BL       GetScreenType
   \   00000060   090050E3           CMP      R0,#+9
   \   00000064   7E00001A           BNE      ??TachSetupScreensCallback_1
    216          			{
    217          				// Call paint method of center screen
    218          				TachSetupScreenList[GetLastScreen(TACH_SETUP_SCREENS_TYPE)].paint(hTachSetupScreens);
   \   00000068   ........           BL       GetLastScreen
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   ........           LDR      R2,??DataTable27_2
   \   00000074   0C30A0E3           MOV      R3,#+12
   \   00000078   932121E0           MLA      R1,R3,R1,R2
   \   0000007C   480092E5           LDR      R0,[R2, #+72]
   \   00000080   081091E5           LDR      R1,[R1, #+8]
   \   00000084   31FF2FE1           BLX      R1
    219          				DrawSignalStrength();
   \   00000088   ........           BL       DrawSignalStrength
   \   0000008C   740000EA           B        ??TachSetupScreensCallback_1
    220          			}
    221          			break;
    222          
    223          		case WM_NOTIFY_PARENT:
    224          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??TachSetupScreensCallback_3:
   \   00000090   080094E5           LDR      R0,[R4, #+8]
   \   00000094   ........           BL       WM_GetId
   \   00000098   0050A0E1           MOV      R5,R0
    225          			NCode = pMsg->Data.v;				// Notification code
    226          			switch (NCode)
   \   0000009C   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A0   010050E2           SUBS     R0,R0,#+1
   \   000000A4   6300000A           BEQ      ??TachSetupScreensCallback_5
   \   000000A8   010050E2           SUBS     R0,R0,#+1
   \   000000AC   6900000A           BEQ      ??TachSetupScreensCallback_6
   \   000000B0   020050E2           SUBS     R0,R0,#+2
   \   000000B4   6A00001A           BNE      ??TachSetupScreensCallback_1
    227          			{
    228          				case WM_NOTIFICATION_SEL_CHANGED:
    229          					if (abs(LISTWHEEL_GetVelocity(pMsg->hWinSrc)) <= 1)
   \   000000B8   080094E5           LDR      R0,[R4, #+8]
   \   000000BC   ........           BL       LISTWHEEL_GetVelocity
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   00006042           RSBMI    R0,R0,#+0
   \   000000C8   020050E3           CMP      R0,#+2
   \   000000CC   640000AA           BGE      ??TachSetupScreensCallback_1
    230          					{
    231          						switch(Id)
   \   000000D0   985F45E2           SUB      R5,R5,#+608
   \   000000D4   050055E3           CMP      R5,#+5
   \   000000D8   05F18F90           ADDLS    PC,PC,R5, LSL #+2
   \                     ??TachSetupScreensCallback_0:
   \   000000DC   6000008A           BHI      ??TachSetupScreensCallback_1
   \   000000E0   040000EA           B        ??TachSetupScreensCallback_7
   \   000000E4   110000EA           B        ??TachSetupScreensCallback_8
   \   000000E8   1B0000EA           B        ??TachSetupScreensCallback_9
   \   000000EC   310000EA           B        ??TachSetupScreensCallback_10
   \   000000F0   450000EA           B        ??TachSetupScreensCallback_11
   \   000000F4   390000EA           B        ??TachSetupScreensCallback_12
    232          						{
    233          						case WARNING_WHEEL:
    234          							vehicleData.tach.greenEnd = vehicleData.tach.upperYellowStart = ((Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) + rpmListStart) * RPMLIST_INCREMENT;
   \                     ??TachSetupScreensCallback_7:
   \   000000F8   080094E5           LDR      R0,[R4, #+8]
   \   000000FC   ........           BL       LISTWHEEL_GetPos
   \   00000100   ........           LDR      R2,??DataTable27_2
   \   00000104   0010A0E1           MOV      R1,R0
   \   00000108   4C0092E5           LDR      R0,[R2, #+76]
   \   0000010C   3220A0E3           MOV      R2,#+50
   \   00000110   010080E0           ADD      R0,R0,R1
   \   00000114   920000E0           MUL      R0,R2,R0
   \   00000118   ........           LDR      R2,??DataTable27
   \   0000011C   200082E5           STR      R0,[R2, #+32]
   \   00000120   1C0082E5           STR      R0,[R2, #+28]
    235          							LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
   \                     ??TachSetupScreensCallback_13:
   \   00000124   080094E5           LDR      R0,[R4, #+8]
   \   00000128   ........           BL       LISTWHEEL_SetSel
    236          							break;
   \   0000012C   4C0000EA           B        ??TachSetupScreensCallback_1
    237          						case REDLINE_WHEEL:
    238          							vehicleData.tach.upperRedStart = ((Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) + rpmListStart) * RPMLIST_INCREMENT;
   \                     ??TachSetupScreensCallback_8:
   \   00000130   080094E5           LDR      R0,[R4, #+8]
   \   00000134   ........           BL       LISTWHEEL_GetPos
   \   00000138   ........           LDR      R1,??DataTable27_2
   \   0000013C   3220A0E3           MOV      R2,#+50
   \   00000140   4C1091E5           LDR      R1,[R1, #+76]
   \   00000144   001081E0           ADD      R1,R1,R0
   \   00000148   920101E0           MUL      R1,R2,R1
   \   0000014C   ........           LDR      R2,??DataTable27
   \   00000150   241082E5           STR      R1,[R2, #+36]
    239          							LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
   \                     ??TachSetupScreensCallback_14:
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   F1FFFFEA           B        ??TachSetupScreensCallback_13
    240          							break;
    241          						case CYLINDERS_WHEEL:
    242          							LISTWHEEL_SetSel(pMsg->hWinSrc, vehicleData.engineCylinders = IndexToCylinders(LISTWHEEL_GetPos(pMsg->hWinSrc)));
   \                     ??TachSetupScreensCallback_9:
   \   0000015C   080094E5           LDR      R0,[R4, #+8]
   \   00000160   ........           BL       LISTWHEEL_GetPos
   \   00000164   FF0000E2           AND      R0,R0,#0xFF
   \   00000168   070050E3           CMP      R0,#+7
   \   0000016C   0D00003A           BCC      ??TachSetupScreensCallback_15
   \   00000170   0B00000A           BEQ      ??TachSetupScreensCallback_16
   \   00000174   080050E3           CMP      R0,#+8
   \   00000178   0700000A           BEQ      ??TachSetupScreensCallback_17
   \   0000017C   090050E3           CMP      R0,#+9
   \   00000180   0300000A           BEQ      ??TachSetupScreensCallback_18
   \   00000184   0A0050E3           CMP      R0,#+10
   \   00000188   0000A013           MOVNE    R0,#+0
   \   0000018C   1000A003           MOVEQ    R0,#+16
   \   00000190   040000EA           B        ??TachSetupScreensCallback_15
   \                     ??TachSetupScreensCallback_18:
   \   00000194   0C00A0E3           MOV      R0,#+12
   \   00000198   020000EA           B        ??TachSetupScreensCallback_15
   \                     ??TachSetupScreensCallback_17:
   \   0000019C   0A00A0E3           MOV      R0,#+10
   \   000001A0   000000EA           B        ??TachSetupScreensCallback_15
   \                     ??TachSetupScreensCallback_16:
   \   000001A4   0800A0E3           MOV      R0,#+8
   \                     ??TachSetupScreensCallback_15:
   \   000001A8   ........           LDR      R2,??DataTable27
   \   000001AC   0D00C2E5           STRB     R0,[R2, #+13]
   \   000001B0   0D10D2E5           LDRB     R1,[R2, #+13]
   \   000001B4   DAFFFFEA           B        ??TachSetupScreensCallback_13
    243          							break;
    244          						case POWERSTART_WHEEL:
    245          							vehicleData.tach.greenStart = ((Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) + rpmListStart) * RPMLIST_INCREMENT;
   \                     ??TachSetupScreensCallback_10:
   \   000001B8   080094E5           LDR      R0,[R4, #+8]
   \   000001BC   ........           BL       LISTWHEEL_GetPos
   \   000001C0   ........           LDR      R1,??DataTable27_2
   \   000001C4   3220A0E3           MOV      R2,#+50
   \   000001C8   4C1091E5           LDR      R1,[R1, #+76]
   \   000001CC   001081E0           ADD      R1,R1,R0
   \   000001D0   920101E0           MUL      R1,R2,R1
   \   000001D4   ........           LDR      R2,??DataTable27
   \   000001D8   181082E5           STR      R1,[R2, #+24]
    246          							LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
   \   000001DC   DCFFFFEA           B        ??TachSetupScreensCallback_14
    247          							break;
    248          						case POWEREND_WHEEL:
    249          							vehicleData.tach.greenEnd = ((Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) + rpmListStart) * RPMLIST_INCREMENT;
   \                     ??TachSetupScreensCallback_12:
   \   000001E0   080094E5           LDR      R0,[R4, #+8]
   \   000001E4   ........           BL       LISTWHEEL_GetPos
   \   000001E8   ........           LDR      R1,??DataTable27_2
   \   000001EC   3220A0E3           MOV      R2,#+50
   \   000001F0   4C1091E5           LDR      R1,[R1, #+76]
   \   000001F4   001081E0           ADD      R1,R1,R0
   \   000001F8   920101E0           MUL      R1,R2,R1
   \   000001FC   ........           LDR      R2,??DataTable27
   \   00000200   1C1082E5           STR      R1,[R2, #+28]
    250          							LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
   \   00000204   0010A0E1           MOV      R1,R0
   \   00000208   C5FFFFEA           B        ??TachSetupScreensCallback_13
    251          							break;
    252          						case MAX_RPM_WHEEL:
    253          							vehicleData.tach.scaleEnd = ((Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) + rpmListStart) * MAXRPM_INCREMENT;
   \                     ??TachSetupScreensCallback_11:
   \   0000020C   080094E5           LDR      R0,[R4, #+8]
   \   00000210   ........           BL       LISTWHEEL_GetPos
   \   00000214   ........           LDR      R1,??DataTable27_2
   \   00000218   6420A0E3           MOV      R2,#+100
   \   0000021C   4C1091E5           LDR      R1,[R1, #+76]
   \   00000220   001081E0           ADD      R1,R1,R0
   \   00000224   920101E0           MUL      R1,R2,R1
   \   00000228   ........           LDR      R2,??DataTable27
   \   0000022C   141082E5           STR      R1,[R2, #+20]
    254          							LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
   \   00000230   0010A0E1           MOV      R1,R0
   \   00000234   BAFFFFEA           B        ??TachSetupScreensCallback_13
    255          							break;
    256          						}
    257          					}
    258          					break;
    259          
    260          				case WM_NOTIFICATION_CLICKED:
    261          //					clickedOnThisScreen = true;
    262          					switch (Id)
   \                     ??TachSetupScreensCallback_5:
   \   00000238   985F45E2           SUB      R5,R5,#+608
   \   0000023C   050055E3           CMP      R5,#+5
    263          					{
    264          						case WARNING_WHEEL:
    265          						case REDLINE_WHEEL:
    266          						case CYLINDERS_WHEEL:
    267          						case POWERSTART_WHEEL:
    268          						case POWEREND_WHEEL:
    269          						case MAX_RPM_WHEEL:
    270          						//case LAP_METER_WHEEL:
    271          							pressingbutton_semaphore = 1;
   \   00000240   ........           LDRLS    R0,??DataTable27_5
   \   00000244   0110A093           MOVLS    R1,#+1
   \   00000248   0400009A           BLS      ??TachSetupScreensCallback_19
    272          							break;
    273          
    274          						default:
    275          							WM_DefaultProc(pMsg);
   \                     ??TachSetupScreensCallback_4:
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       WM_DefaultProc
   \   00000254   020000EA           B        ??TachSetupScreensCallback_1
    276          					}
    277          					break;
    278          
    279          				case WM_NOTIFICATION_RELEASED:
    280          					pressingbutton_semaphore = 0;
   \                     ??TachSetupScreensCallback_6:
   \   00000258   ........           LDR      R0,??DataTable27_5
   \   0000025C   0010A0E3           MOV      R1,#+0
   \                     ??TachSetupScreensCallback_19:
   \   00000260   001080E5           STR      R1,[R0, #+0]
    281          					break;
    282          			}
    283          			break;
    284          
    285          		default:
    286          			WM_DefaultProc(pMsg);
    287          	}
    288          }
   \                     ??TachSetupScreensCallback_1:
   \   00000264   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000268   3080BDE8           POP      {R4,R5,PC}       ;; return
    289          

   \                                 In section .text, align 4, keep-with-next
    290          void DisplayWarningRPM(WM_HWIN hParent)
    291          {
   \                     DisplayWarningRPM:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    292          	int rpm, end;
    293          
    294          	if ((rpm = vehicleData.tach.greenStart) == 0)
   \   00000004   ........           LDR      R4,??DataTable27
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   185094E5           LDR      R5,[R4, #+24]
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0300001A           BNE      ??DisplayWarningRPM_0
    295          		rpm = vehicleData.tach.upperYellowStart - 2000;
   \   00000018   200094E5           LDR      R0,[R4, #+32]
   \   0000001C   CF10E0E3           MVN      R1,#+207
   \   00000020   701EC1E3           BIC      R1,R1,#0x700
   \   00000024   005081E0           ADD      R5,R1,R0
    296          
    297          	if (((vehicleData.tach.upperRedStart - rpm) / RPMLIST_INCREMENT) > MAX_RPMLIST_STEPS)
   \                     ??DisplayWarningRPM_0:
   \   00000028   247094E5           LDR      R7,[R4, #+36]
   \   0000002C   ........           LDR      R1,??DataTable27_6  ;; 0x51eb851f
   \   00000030   050047E0           SUB      R0,R7,R5
   \   00000034   9021C1E0           SMULL    R2,R1,R0,R1
   \   00000038   4102B0E1           ASRS     R0,R1,#+4
   \   0000003C   01008042           ADDMI    R0,R0,#+1
   \   00000040   AB0050E3           CMP      R0,#+171
   \   00000044   080000BA           BLT      ??DisplayWarningRPM_1
    298          	{
    299          		rpmListStart = (rpm = vehicleData.tach.upperYellowStart - 1000) / RPMLIST_INCREMENT;
   \   00000048   200094E5           LDR      R0,[R4, #+32]
   \   0000004C   E710E0E3           MVN      R1,#+231
   \   00000050   C01FC1E3           BIC      R1,R1,#0x300
   \   00000054   005081E0           ADD      R5,R1,R0
   \   00000058   ........           LDR      R1,??DataTable27_6  ;; 0x51eb851f
    300          		end = vehicleData.tach.upperYellowStart + 1000;
   \   0000005C   FA7F80E2           ADD      R7,R0,#+1000
   \   00000060   9521C1E0           SMULL    R2,R1,R5,R1
   \   00000064   4112B0E1           ASRS     R1,R1,#+4
   \   00000068   020000EA           B        ??DisplayWarningRPM_2
    301          	}
    302          	else
    303          	{
    304          		rpmListStart = rpm / RPMLIST_INCREMENT;
   \                     ??DisplayWarningRPM_1:
   \   0000006C   ........           LDR      R0,??DataTable27_6  ;; 0x51eb851f
   \   00000070   9510C0E0           SMULL    R1,R0,R5,R0
   \   00000074   4012B0E1           ASRS     R1,R0,#+4
   \                     ??DisplayWarningRPM_2:
   \   00000078   01108142           ADDMI    R1,R1,#+1
    305          		end = vehicleData.tach.upperRedStart;
   \   0000007C   ........           LDR      R6,??DataTable27_2
    306          	}
    307          	BuildRPMList(rpm, end, RPMLIST_INCREMENT);
   \   00000080   0080A0E3           MOV      R8,#+0
   \   00000084   4C1086E5           STR      R1,[R6, #+76]
   \   00000088   509086E2           ADD      R9,R6,#+80
   \   0000008C   C1AF86E2           ADD      R10,R6,#+772
   \   00000090   ........           ADR      R11,??DataTable22  ;; 0x25, 0x64, 0x00, 0x00
   \                     ??DisplayWarningRPM_3:
   \   00000094   050057E1           CMP      R7,R5
   \   00000098   090000BA           BLT      ??DisplayWarningRPM_4
   \   0000009C   0520A0E1           MOV      R2,R5
   \   000000A0   0B10A0E1           MOV      R1,R11
   \   000000A4   0A00A0E1           MOV      R0,R10
   \   000000A8   ........           BL       sprintf
   \   000000AC   04A089E4           STR      R10,[R9], #+4
   \   000000B0   018088E2           ADD      R8,R8,#+1
   \   000000B4   325085E2           ADD      R5,R5,#+50
   \   000000B8   06A08AE2           ADD      R10,R10,#+6
   \   000000BC   AA0058E3           CMP      R8,#+170
   \   000000C0   F3FFFFBA           BLT      ??DisplayWarningRPM_3
   \                     ??DisplayWarningRPM_4:
   \   000000C4   080186E0           ADD      R0,R6,R8, LSL #+2
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   501080E5           STR      R1,[R0, #+80]
    308          
    309          	DisplayStdListScreen(hParent, RPMListPtrs, WARNING_WHEEL, &hWarningRPMListWheel,
    310          		((vehicleData.tach.upperYellowStart / RPMLIST_INCREMENT) - rpmListStart) , TEXT_ONLY, "Select RPM");
   \   000000D0   ............       ADRL     R0,`?<Constant "Select RPM">`
   \              ....        
   \   000000D8   04108DE5           STR      R1,[SP, #+4]
   \   000000DC   08008DE5           STR      R0,[SP, #+8]
   \   000000E0   200094E5           LDR      R0,[R4, #+32]
   \   000000E4   ........           LDR      R1,??DataTable27_6  ;; 0x51eb851f
   \   000000E8   BE3F86E2           ADD      R3,R6,#+760
   \   000000EC   9021C1E0           SMULL    R2,R1,R0,R1
   \   000000F0   982FA0E3           MOV      R2,#+608
   \   000000F4   4102B0E1           ASRS     R0,R1,#+4
   \   000000F8   4C1096E5           LDR      R1,[R6, #+76]
   \   000000FC   01008042           ADDMI    R0,R0,#+1
   \   00000100   010040E0           SUB      R0,R0,R1
   \   00000104   00008DE5           STR      R0,[SP, #+0]
   \   00000108   501086E2           ADD      R1,R6,#+80
   \   0000010C   10009DE5           LDR      R0,[SP, #+16]
   \   00000110   ........           BL       DisplayStdListScreen
    311          }
   \   00000114   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000118   F08FBDE8           POP      {R4-R11,PC}      ;; return
    312          

   \                                 In section .text, align 4, keep-with-next
    313          void BuildRPMList(int rpm, int end, int increment)
    314          {
   \                     BuildRPMList:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    315          	int i;
    316          
    317          	for (i = 0; i < MAX_RPMLIST_STEPS; i++)
   \   00000004   ........           LDR      R8,??DataTable27_2
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   509088E2           ADD      R9,R8,#+80
   \   00000020   C1AF88E2           ADD      R10,R8,#+772
   \   00000024   ........           ADR      R11,??DataTable22  ;; 0x25, 0x64, 0x00, 0x00
    318          	{
    319          		if (rpm > end)
   \                     ??BuildRPMList_0:
   \   00000028   040055E1           CMP      R5,R4
   \   0000002C   090000BA           BLT      ??BuildRPMList_1
    320          			break;
    321          		else
    322          		{
    323          			sprintf(RPMListData[i], "%d", rpm);
   \   00000030   0420A0E1           MOV      R2,R4
   \   00000034   0B10A0E1           MOV      R1,R11
   \   00000038   0A00A0E1           MOV      R0,R10
   \   0000003C   ........           BL       sprintf
    324          			RPMListPtrs[i] = RPMListData[i];
   \   00000040   04A089E4           STR      R10,[R9], #+4
    325          			rpm += increment;
    326          		}
    327          	}
   \   00000044   017087E2           ADD      R7,R7,#+1
   \   00000048   044086E0           ADD      R4,R6,R4
   \   0000004C   06A08AE2           ADD      R10,R10,#+6
   \   00000050   AA0057E3           CMP      R7,#+170
   \   00000054   F3FFFFBA           BLT      ??BuildRPMList_0
    328          	RPMListPtrs[i] = 0;
   \                     ??BuildRPMList_1:
   \   00000058   070188E0           ADD      R0,R8,R7, LSL #+2
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   501080E5           STR      R1,[R0, #+80]
    329          }
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   F08FBDE8           POP      {R4-R11,PC}      ;; return
    330          

   \                                 In section .text, align 4, keep-with-next
    331          void DisplayRedline(WM_HWIN hParent)
    332          {
   \                     DisplayRedline:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    333          	int rpm, end;
    334          
    335          	rpmListStart = (rpm = vehicleData.tach.upperYellowStart) / RPMLIST_INCREMENT;
   \   00000004   ........           LDR      R4,??DataTable27
   \   00000008   ........           LDR      R0,??DataTable27_6  ;; 0x51eb851f
   \   0000000C   205094E5           LDR      R5,[R4, #+32]
   \   00000010   ........           LDR      R6,??DataTable27_2
   \   00000014   9510C0E0           SMULL    R1,R0,R5,R0
   \   00000018   10D04DE2           SUB      SP,SP,#+16
   \   0000001C   4002B0E1           ASRS     R0,R0,#+4
   \   00000020   01008042           ADDMI    R0,R0,#+1
   \   00000024   4C0086E5           STR      R0,[R6, #+76]
    336          	end = vehicleData.tach.scaleEnd;
    337          	BuildRPMList(rpm, end, RPMLIST_INCREMENT);
   \   00000028   147094E5           LDR      R7,[R4, #+20]
   \   0000002C   0080A0E3           MOV      R8,#+0
   \   00000030   509086E2           ADD      R9,R6,#+80
   \   00000034   C1AF86E2           ADD      R10,R6,#+772
   \   00000038   ........           ADR      R11,??DataTable22  ;; 0x25, 0x64, 0x00, 0x00
   \                     ??DisplayRedline_0:
   \   0000003C   050057E1           CMP      R7,R5
   \   00000040   090000BA           BLT      ??DisplayRedline_1
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0B10A0E1           MOV      R1,R11
   \   0000004C   0A00A0E1           MOV      R0,R10
   \   00000050   ........           BL       sprintf
   \   00000054   04A089E4           STR      R10,[R9], #+4
   \   00000058   018088E2           ADD      R8,R8,#+1
   \   0000005C   325085E2           ADD      R5,R5,#+50
   \   00000060   06A08AE2           ADD      R10,R10,#+6
   \   00000064   AA0058E3           CMP      R8,#+170
   \   00000068   F3FFFFBA           BLT      ??DisplayRedline_0
   \                     ??DisplayRedline_1:
   \   0000006C   080186E0           ADD      R0,R6,R8, LSL #+2
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   501080E5           STR      R1,[R0, #+80]
    338          
    339          	DisplayStdListScreen(hParent, RPMListPtrs, REDLINE_WHEEL, &hRedlineListWheel,
    340          		((vehicleData.tach.upperRedStart / RPMLIST_INCREMENT) - rpmListStart) , TEXT_ONLY, "Select RPM");
   \   00000078   ............       ADRL     R0,`?<Constant "Select RPM">`
   \              ....        
   \   00000080   04108DE5           STR      R1,[SP, #+4]
   \   00000084   08008DE5           STR      R0,[SP, #+8]
   \   00000088   240094E5           LDR      R0,[R4, #+36]
   \   0000008C   ........           LDR      R1,??DataTable27_6  ;; 0x51eb851f
   \   00000090   BF3F86E2           ADD      R3,R6,#+764
   \   00000094   9021C1E0           SMULL    R2,R1,R0,R1
   \   00000098   6120A0E3           MOV      R2,#+97
   \   0000009C   4102B0E1           ASRS     R0,R1,#+4
   \   000000A0   4C1096E5           LDR      R1,[R6, #+76]
   \   000000A4   01008042           ADDMI    R0,R0,#+1
   \   000000A8   010040E0           SUB      R0,R0,R1
   \   000000AC   00008DE5           STR      R0,[SP, #+0]
   \   000000B0   802F82E3           ORR      R2,R2,#0x200
   \   000000B4   501086E2           ADD      R1,R6,#+80
   \   000000B8   10009DE5           LDR      R0,[SP, #+16]
   \   000000BC   ........           BL       DisplayStdListScreen
    341          }
   \   000000C0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000C4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    342          

   \                                 In section .text, align 4, keep-with-next
    343          void DisplayCylinders(WM_HWIN hParent)
    344          {
   \                     DisplayCylinders:
   \   00000000   00402DE9           PUSH     {LR}
    345          	DisplayStdListScreen(hParent, apCylinders, CYLINDERS_WHEEL, &hCylindersListWheel,
    346          			CylindersToIndex(vehicleData.engineCylinders), TEXT_ONLY, "Select Cylinders");
   \   00000004   ........           LDR      R1,??DataTable27
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000010   070052E3           CMP      R2,#+7
   \   00000014   0E00003A           BCC      ??DisplayCylinders_0
   \   00000018   080052E3           CMP      R2,#+8
   \   0000001C   0B00000A           BEQ      ??DisplayCylinders_1
   \   00000020   0A0052E3           CMP      R2,#+10
   \   00000024   0700000A           BEQ      ??DisplayCylinders_2
   \   00000028   0C0052E3           CMP      R2,#+12
   \   0000002C   0300000A           BEQ      ??DisplayCylinders_3
   \   00000030   100052E3           CMP      R2,#+16
   \   00000034   0020A013           MOVNE    R2,#+0
   \   00000038   0A20A003           MOVEQ    R2,#+10
   \   0000003C   040000EA           B        ??DisplayCylinders_0
   \                     ??DisplayCylinders_3:
   \   00000040   0920A0E3           MOV      R2,#+9
   \   00000044   020000EA           B        ??DisplayCylinders_0
   \                     ??DisplayCylinders_2:
   \   00000048   0820A0E3           MOV      R2,#+8
   \   0000004C   000000EA           B        ??DisplayCylinders_0
   \                     ??DisplayCylinders_1:
   \   00000050   0720A0E3           MOV      R2,#+7
   \                     ??DisplayCylinders_0:
   \   00000054   ........           ADR      R3,`?<Constant "Select Cylinders">`
   \   00000058   ........           LDR      R1,??DataTable27_1
   \   0000005C   08308DE5           STR      R3,[SP, #+8]
   \   00000060   0030A0E3           MOV      R3,#+0
   \   00000064   00208DE5           STR      R2,[SP, #+0]
   \   00000068   04308DE5           STR      R3,[SP, #+4]
   \   0000006C   6220A0E3           MOV      R2,#+98
   \   00000070   303081E2           ADD      R3,R1,#+48
   \   00000074   802F82E3           ORR      R2,R2,#0x200
   \   00000078   ........           BL       DisplayStdListScreen
    347          }
   \   0000007C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000080   0080BDE8           POP      {PC}             ;; return
    348          
    349          

   \                                 In section .text, align 4, keep-with-next
    350          void DisplayPowerEnd(WM_HWIN hParent)
    351          {
    352          }
   \                     DisplayPowerEnd:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    353          

   \                                 In section .text, align 4, keep-with-next
    354          void DisplayMaxRPM(WM_HWIN hParent)
    355          {
   \                     DisplayMaxRPM:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    356          	int rpm, end;
    357          
    358          	rpmListStart = (rpm = ((vehicleData.tach.upperRedStart % 100) * 100)) / MAXRPM_INCREMENT;
   \   00000004   ........           LDR      R4,??DataTable27
   \   00000008   ........           LDR      R2,??DataTable27_6  ;; 0x51eb851f
   \   0000000C   240094E5           LDR      R0,[R4, #+36]
   \   00000010   6410A0E3           MOV      R1,#+100
   \   00000014   9032C2E0           SMULL    R3,R2,R0,R2
   \   00000018   ........           LDR      R6,??DataTable27_2
   \   0000001C   C222B0E1           ASRS     R2,R2,#+5
   \   00000020   01208242           ADDMI    R2,R2,#+1
   \   00000024   910202E0           MUL      R2,R1,R2
    359          	end = 20000;
    360          	BuildRPMList(rpm, end, MAXRPM_INCREMENT);
   \   00000028   21B0A0E3           MOV      R11,#+33
   \   0000002C   020040E0           SUB      R0,R0,R2
   \   00000030   910005E0           MUL      R5,R1,R0
   \   00000034   ........           LDR      R0,??DataTable27_6  ;; 0x51eb851f
   \   00000038   10D04DE2           SUB      SP,SP,#+16
   \   0000003C   9510C0E0           SMULL    R1,R0,R5,R0
   \   00000040   0070A0E3           MOV      R7,#+0
   \   00000044   C002B0E1           ASRS     R0,R0,#+5
   \   00000048   01008042           ADDMI    R0,R0,#+1
   \   0000004C   4C0086E5           STR      R0,[R6, #+76]
   \   00000050   508086E2           ADD      R8,R6,#+80
   \   00000054   C19F86E2           ADD      R9,R6,#+772
   \   00000058   ........           ADR      R10,??DataTable22  ;; 0x25, 0x64, 0x00, 0x00
   \   0000005C   4EBC8BE3           ORR      R11,R11,#0x4E00
   \                     ??DisplayMaxRPM_0:
   \   00000060   0B0055E1           CMP      R5,R11
   \   00000064   090000AA           BGE      ??DisplayMaxRPM_1
   \   00000068   0520A0E1           MOV      R2,R5
   \   0000006C   0A10A0E1           MOV      R1,R10
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   ........           BL       sprintf
   \   00000078   049088E4           STR      R9,[R8], #+4
   \   0000007C   017087E2           ADD      R7,R7,#+1
   \   00000080   645085E2           ADD      R5,R5,#+100
   \   00000084   069089E2           ADD      R9,R9,#+6
   \   00000088   AA0057E3           CMP      R7,#+170
   \   0000008C   F3FFFFBA           BLT      ??DisplayMaxRPM_0
   \                     ??DisplayMaxRPM_1:
   \   00000090   070186E0           ADD      R0,R6,R7, LSL #+2
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   501080E5           STR      R1,[R0, #+80]
    361          
    362          	DisplayStdListScreen(hParent, RPMListPtrs, MAX_RPM_WHEEL, &hMaxRPMListWheel,
    363          		((vehicleData.tach.scaleEnd / MAXRPM_INCREMENT) - rpmListStart) , TEXT_ONLY, "Select RPM");
   \   0000009C   ........           ADR      R0,`?<Constant "Select RPM">`
   \   000000A0   04108DE5           STR      R1,[SP, #+4]
   \   000000A4   08008DE5           STR      R0,[SP, #+8]
   \   000000A8   140094E5           LDR      R0,[R4, #+20]
   \   000000AC   ........           LDR      R1,??DataTable27_6  ;; 0x51eb851f
   \   000000B0   C03F86E2           ADD      R3,R6,#+768
   \   000000B4   9021C1E0           SMULL    R2,R1,R0,R1
   \   000000B8   992FA0E3           MOV      R2,#+612
   \   000000BC   C102B0E1           ASRS     R0,R1,#+5
   \   000000C0   4C1096E5           LDR      R1,[R6, #+76]
   \   000000C4   01008042           ADDMI    R0,R0,#+1
   \   000000C8   010040E0           SUB      R0,R0,R1
   \   000000CC   00008DE5           STR      R0,[SP, #+0]
   \   000000D0   501086E2           ADD      R1,R6,#+80
   \   000000D4   10009DE5           LDR      R0,[SP, #+16]
   \   000000D8   ........           BL       DisplayStdListScreen
    364          }
   \   000000DC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    365          
    366          

   \                                 In section .text, align 4, keep-with-next
    367          void WarningRPMPaint(WM_HWIN hParent)
    368          {
   \                     WarningRPMPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    369          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable27_7
   \   00000014   ........           BL       GUI_DrawBitmap
    370          	GUI_DrawBitmap(&bmSingleSpinner, SPINNER_START, 42);
   \   00000018   2A20A0E3           MOV      R2,#+42
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   ........           LDR      R0,??DataTable27_8
   \   00000024   ........           BL       GUI_DrawBitmap
    371          	GUI_DrawBitmap(&bmWarningRPM, 60, 0);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable27_9
   \   00000034   ........           BL       GUI_DrawBitmap
    372          	GUI_DrawBitmap(GetNavigationArrow(WARNING_RPM_SETUP), 0, 229);
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   0040BDE8           POP      {LR}
   \   00000040   E520A0E3           MOV      R2,#+229
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable27_10
   \   0000004C   ........           B        GUI_DrawBitmap   ;; tailcall
    373          }
    374          

   \                                 In section .text, align 4, keep-with-next
    375          void RedlinePaint(WM_HWIN hParent)
    376          {
   \                     RedlinePaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    377          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable27_7
   \   00000014   ........           BL       GUI_DrawBitmap
    378          	GUI_DrawBitmap(&bmSingleSpinner, SPINNER_START, 42);
   \   00000018   2A20A0E3           MOV      R2,#+42
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   ........           LDR      R0,??DataTable27_8
   \   00000024   ........           BL       GUI_DrawBitmap
    379          	GUI_DrawBitmap(&bmRedlineRPM, 60, 0);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable27_11
   \   00000034   ........           BL       GUI_DrawBitmap
    380          	GUI_DrawBitmap(GetNavigationArrow(REDLINE_RPM_SETUP), 0, 229);
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   0040BDE8           POP      {LR}
   \   00000040   E520A0E3           MOV      R2,#+229
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable27_10
   \   0000004C   ........           B        GUI_DrawBitmap   ;; tailcall
    381          }
    382          

   \                                 In section .text, align 4, keep-with-next
    383          void CylindersPaint(WM_HWIN hParent)
    384          {
   \                     CylindersPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    385          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable27_7
   \   00000014   ........           BL       GUI_DrawBitmap
    386          	GUI_DrawBitmap(&bmSingleSpinner, SPINNER_START, 42);
   \   00000018   2A20A0E3           MOV      R2,#+42
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   ........           LDR      R0,??DataTable27_8
   \   00000024   ........           BL       GUI_DrawBitmap
    387          	GUI_DrawBitmap(&bmEngineCylinders, 60, 0);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable27_12
   \   00000034   ........           BL       GUI_DrawBitmap
    388          	GUI_DrawBitmap(GetNavigationArrow(ENGINE_CYLINDERS_SETUP), 0, 229);
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   0040BDE8           POP      {LR}
   \   00000040   E520A0E3           MOV      R2,#+229
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable27_10
   \   0000004C   ........           B        GUI_DrawBitmap   ;; tailcall
    389          }
    390          

   \                                 In section .text, align 4, keep-with-next
    391          void PowerEndPaint(WM_HWIN hParent)
    392          {
   \                     PowerEndPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    393          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable27_7
   \   00000014   ........           BL       GUI_DrawBitmap
    394          	GUI_DrawBitmap(&bmSingleSpinner, SPINNER_START, 42);
   \   00000018   2A20A0E3           MOV      R2,#+42
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   ........           LDR      R0,??DataTable27_8
   \   00000024   ........           BL       GUI_DrawBitmap
    395          	GUI_DrawBitmap(&bmPowerBandEnd, 60, 0);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable27_13
   \   00000034   ........           BL       GUI_DrawBitmap
    396          	GUI_DrawBitmap(GetNavigationArrow(POWERBANDEND_RPM_SETUP), 0, 229);
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   0040BDE8           POP      {LR}
   \   00000040   E520A0E3           MOV      R2,#+229
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable27_10
   \   0000004C   ........           B        GUI_DrawBitmap   ;; tailcall
    397          }
    398          

   \                                 In section .text, align 4, keep-with-next
    399          void MaxRPMPaint(WM_HWIN hParent)
    400          {
   \                     MaxRPMPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    401          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable27_7
   \   00000014   ........           BL       GUI_DrawBitmap
    402          	GUI_DrawBitmap(&bmSingleSpinner, SPINNER_START, 42);
   \   00000018   2A20A0E3           MOV      R2,#+42
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   ........           LDR      R0,??DataTable27_8
   \   00000024   ........           BL       GUI_DrawBitmap
    403          	GUI_DrawBitmap(&bmMaxRPM, 60, 0);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   3C10A0E3           MOV      R1,#+60
   \   00000030   ........           LDR      R0,??DataTable27_14
   \   00000034   ........           BL       GUI_DrawBitmap
    404          	GUI_DrawBitmap(GetNavigationArrow(MAX_RPM_SETUP), 0, 229);
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   0040BDE8           POP      {LR}
   \   00000040   E520A0E3           MOV      R2,#+229
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable27_10
   \   0000004C   ........           B        GUI_DrawBitmap   ;; tailcall
    405          }
    406          
    407          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen)
    408          {
    409          	return &bmleftarrow;
    410          }
    411          

   \                                 In section .text, align 4, keep-with-next
    412          void TachSetupIgnoreNextKeyRelease(void)
    413          {
    414          //	clickedOnThisScreen = false;
    415          }
   \                     TachSetupIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   25640000           DC8      0x25, 0x64, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   ........           DC32     apCylinders

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   ........           DC32     TachSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   ........           DC32     BannerRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \   00000000   ........           DC32     pressingbutton_semaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_6:
   \   00000000   1F85EB51           DC32     0x51eb851f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_7:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_8:
   \   00000000   ........           DC32     bmSingleSpinner

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_9:
   \   00000000   ........           DC32     bmWarningRPM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_10:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_11:
   \   00000000   ........           DC32     bmRedlineRPM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_12:
   \   00000000   ........           DC32     bmEngineCylinders

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_13:
   \   00000000   ........           DC32     bmPowerBandEnd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_14:
   \   00000000   ........           DC32     bmMaxRPM

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "2 stroke">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   32207374726F       DC8 50, 32, 115, 116, 114, 111, 107, 101, 0, 0
   \              6B650000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ECU / 1">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   454355202F20       DC8 69, 67, 85, 32, 47, 32, 49, 0
   \              3100        

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "2">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3200               DC8 50, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "3">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3300               DC8 51, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "4">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3400               DC8 52, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "5">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3500               DC8 53, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "6">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3600               DC8 54, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "8">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3800               DC8 56, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "10">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   31300000           DC8 49, 48, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "12">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   31320000           DC8 49, 50, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "16">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   31360000           DC8 49, 54, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Select RPM">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53656C656374       DC8 83, 101, 108, 101, 99, 116, 32, 82, 80, 77
   \              2052504D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Select Cylinders">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   53656C656374       DC8 83, 101, 108, 101, 99, 116, 32, 67, 121, 108
   \              2043796C    
   \   0000000A   696E64657273       DC8 105, 110, 100, 101, 114, 115, 0, 0, 0, 0
   \              00000000    
    416          
    417          
    418          /*************************** End of file ****************************/
    419          

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     BuildRPMList                      40
     CylindersPaint                     8
     CylindersToIndex                   0
     DisplayCylinders                  16
     DisplayMaxRPM                     56
     DisplayPowerEnd                    0
     DisplayRedline                    56
     DisplayWarningRPM                 56
     GetCylindersText                   0
     GetTachSetupWindowHandle           0
     IndexToCylinders                   0
     MaxRPMPaint                        8
     PowerEndPaint                      8
     RedlinePaint                       8
     SetTachSetupWindowHandle           0
     TachSetupIgnoreNextKeyRelease      0
     TachSetupScreensCallback          16
     WarningRPMPaint                    8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     TachSetupScreenList            1792
     hTachSetupScreens
     rpmListStart
     RPMListPtrs
     hWarningRPMListWheel
     hRedlineListWheel
     hMaxRPMListWheel
     RPMListData
     apCylinders                      52
     hCylindersListWheel
     CylindersToIndex                 80
     IndexToCylinders                 76
     GetCylindersText                 88
     GetTachSetupWindowHandle         12
     SetTachSetupWindowHandle         12
     TachSetupScreensCallback        620
     DisplayWarningRPM               284
     BuildRPMList                    108
     DisplayRedline                  200
     DisplayCylinders                132
     DisplayPowerEnd                   4
     DisplayMaxRPM                   228
     WarningRPMPaint                  80
     RedlinePaint                     80
     CylindersPaint                   80
     PowerEndPaint                    80
     MaxRPMPaint                      80
     TachSetupIgnoreNextKeyRelease     4
     ??DataTable22                     4
     ??DataTable27                     4
     ??DataTable27_1                   4
     ??DataTable27_2                   4
     ??DataTable27_3                   4
     ??DataTable27_4                   4
     ??DataTable27_5                   4
     ??DataTable27_6                   4
     ??DataTable27_7                   4
     ??DataTable27_8                   4
     ??DataTable27_9                   4
     ??DataTable27_10                  4
     ??DataTable27_11                  4
     ??DataTable27_12                  4
     ??DataTable27_13                  4
     ??DataTable27_14                  4
     ?<Constant "2 stroke">           12
     ?<Constant "ECU / 1">             8
     ?<Constant "2">                   2
     ?<Constant "3">                   2
     ?<Constant "4">                   2
     ?<Constant "5">                   2
     ?<Constant "6">                   2
     ?<Constant "8">                   2
     ?<Constant "10">                  4
     ?<Constant "12">                  4
     ?<Constant "16">                  4
     ?<Constant "%d">                  4
     ?<Constant "Select RPM">         12
     ?<Constant "Select Cylinders">   20

 
 1 844 bytes in section .data
    48 bytes in section .rodata
 2 344 bytes in section .text
 
 2 344 bytes of CODE  memory
    48 bytes of CONST memory
 1 844 bytes of DATA  memory

Errors: none
Warnings: none
