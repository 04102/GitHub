###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\DROPDOWN_InsertString.c             #
#    Command line =  C:\DUII\TargetHW\GUI\DROPDOWN_InsertString.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\DR #
#                    OPDOWN_InsertString.lst                                  #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\DRO #
#                    PDOWN_InsertString.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\DROPDOWN_InsertString.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : DROPDOWN_InsertString.c
     19          Purpose     : Implementation of dropdown widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include "DROPDOWN.h"
     25          #include "DROPDOWN_Private.h"
     26          #include "LISTBOX.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *       Public routines
     33          *
     34          **********************************************************************
     35          */
     36          
     37          /*********************************************************************
     38          *
     39          *       DROPDOWN_InsertString
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void DROPDOWN_InsertString(DROPDOWN_Handle hObj, const char * s, unsigned int Index) {
   \                     DROPDOWN_InsertString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     42            if (hObj && s) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   00005513           CMPNE    R5,#+0
   \   0000001C   2900000A           BEQ      ??DROPDOWN_InsertString_0
     43              DROPDOWN_Obj * pObj;
     44              unsigned int NumItems;
     45              GUI_ARRAY Handles;
     46              WM_HWIN hListWin;
     47              WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
     48              NumItems = DROPDOWN_GetNumItems(hObj);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       DROPDOWN_GetNumItems
   \   0000002C   0080A0E1           MOV      R8,R0
     49              pObj = DROPDOWN_LOCK_H(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_ALLOC_LockH
     50              Handles  = pObj->Handles;
   \   00000038   3C9090E5           LDR      R9,[R0, #+60]
     51              hListWin = pObj->hListWin;
   \   0000003C   887090E5           LDR      R7,[R0, #+136]
     52              GUI_UNLOCK_H(pObj);
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
     53              if (Index < NumItems) {
   \   00000044   080056E1           CMP      R6,R8
   \   00000048   1500002A           BCS      ??DROPDOWN_InsertString_1
     54                WM_HMEM hItem;
     55                hItem = GUI_ARRAY_InsertItem(Handles, Index, strlen(s) + 1);
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       strlen
   \   00000054   012080E2           ADD      R2,R0,#+1
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   ........           BL       GUI_ARRAY_InsertItem
     56                if (hItem) {
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0400000A           BEQ      ??DROPDOWN_InsertString_2
     57                  char * pBuffer = (char *)GUI_LOCK_H(hItem);
   \   0000006C   ........           BL       GUI_ALLOC_LockH
     58                  strcpy(pBuffer, s);
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   ........           BL       strcpy
     59                  GUI_UNLOCK_H(s);
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
   \   0000007C   0050A0E3           MOV      R5,#+0
     60                }
     61                WM_InvalidateWindow(hObj);
   \                     ??DROPDOWN_InsertString_2:
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       WM_InvalidateWindow
     62                if (hListWin) {
   \   00000088   000057E3           CMP      R7,#+0
   \   0000008C   0C00000A           BEQ      ??DROPDOWN_InsertString_3
     63                  LISTBOX_InsertString(hListWin, s, Index);
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           BL       LISTBOX_InsertString
   \   000000A0   070000EA           B        ??DROPDOWN_InsertString_3
     64                }
     65              } else {
     66                DROPDOWN_AddString(hObj, s);
   \                     ??DROPDOWN_InsertString_1:
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       DROPDOWN_AddString
     67                if (hListWin) {
   \   000000B0   000057E3           CMP      R7,#+0
   \   000000B4   0200000A           BEQ      ??DROPDOWN_InsertString_3
     68                  LISTBOX_AddString(hListWin, s);
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0700A0E1           MOV      R0,R7
   \   000000C0   ........           BL       LISTBOX_AddString
     69                }
     70              }
     71              WM_UNLOCK();
   \                     ??DROPDOWN_InsertString_3:
   \   000000C4   ........           BL       GUI_Unlock
     72            }
     73          }
   \                     ??DROPDOWN_InsertString_0:
   \   000000C8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000CC   F083BDE8           POP      {R4-R9,PC}       ;; return
     74          
     75          #else                            /* Avoid problems with empty object modules */
     76            void DROPDOWN_InsertString_C(void);
     77            void DROPDOWN_InsertString_C(void) {}
     78          #endif

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     DROPDOWN_InsertString     32


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     DROPDOWN_InsertString  208

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
