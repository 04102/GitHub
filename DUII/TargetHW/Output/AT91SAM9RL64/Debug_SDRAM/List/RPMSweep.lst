###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:04 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\RPMSweep.cpp                                #
#    Command line =  C:\DUII\DUII\RPMSweep.cpp -D DEBUG=1 -D SDRAM_TARGET=1   #
#                    -D USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D           #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --eec++                              #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\RP #
#                    MSweep.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\RPM #
#                    Sweep.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\RPMSweep.cpp
      1          /****************************************************************
      2          *							Track Systems						*
      3          -----------------------------------------------------------------
      4          File: RPMSweep.cpp
      5          Description: The RPM Sweep object
      6          -----------------------------------------------------------------
      7          */
      8          
      9          #include "RPMSweep.hpp"
     10          #include "CustomArc.h"
     11          #include <math.h>
     12          #include <stdlib.h>
     13          
     14          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmDigitalBarBlueSweep;
     15          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmSweepTachOnAsphalt;
     16          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmTransSweepTachOnAsphalt;
     17          
     18          //#define USE_MATH 1
     19          

   \                                 In section .text, align 4, keep-with-next
     20          RPMSweep::RPMSweep(int x, int y, int xsize, int ysize, int MinValue, int MaxValue, int MajorTicRange, int MinorTicRange, Alarm *pAlarmList, bool bShowGear)
     21          {
   \                     _ZN8RPMSweepC1EiiiiiiiiP5Alarmb:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   18009DE5           LDR      R0,[SP, #+24]
   \   0000000C   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000010   20E09DE5           LDR      LR,[SP, #+32]
   \   00000014   24609DE5           LDR      R6,[SP, #+36]
   \   00000018   28709DE5           LDR      R7,[SP, #+40]
   \   0000001C   2C509DE5           LDR      R5,[SP, #+44]
   \   00000020   3080DDE5           LDRB     R8,[SP, #+48]
     22          	xLoc = x;
   \   00000024   141084E5           STR      R1,[R4, #+20]
     23          	yLoc = y;
   \   00000028   182084E5           STR      R2,[R4, #+24]
     24          	xSize = xsize;
   \   0000002C   1C3084E5           STR      R3,[R4, #+28]
     25          	ySize = ysize;
   \   00000030   200084E5           STR      R0,[R4, #+32]
     26          	ShowGear = bShowGear;
   \   00000034   4C80C4E5           STRB     R8,[R4, #+76]
     27          
     28          	iMax = MaxValue;
   \   00000038   00E084E5           STR      LR,[R4, #+0]
     29          	iMin = MinValue;
   \   0000003C   04C084E5           STR      R12,[R4, #+4]
     30          
     31          	iMajorTicRange = MajorTicRange;
   \   00000040   0C6084E5           STR      R6,[R4, #+12]
     32          	iMinorTicRange = MinorTicRange;
   \   00000044   107084E5           STR      R7,[R4, #+16]
     33          
     34          	dValuePerDeg = (150.0 - 86.0)/ ((float)iMax - (float)iMin);
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   ........           BL       __aeabi_i2f
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   040094E5           LDR      R0,[R4, #+4]
   \   00000058   ........           BL       __aeabi_i2f
   \   0000005C   0010A0E1           MOV      R1,R0
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       __aeabi_fsub
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   4004A0E3           MOV      R0,#+1073741824
   \   00000070   A00780E3           ORR      R0,R0,#0x2800000
   \   00000074   ........           BL       __aeabi_fdiv
   \   00000078   480084E5           STR      R0,[R4, #+72]
     35          
     36          	AlarmList = pAlarmList;
     37          
     38          	iXCenter = 453;
   \   0000007C   C500A0E3           MOV      R0,#+197
   \   00000080   7C5084E5           STR      R5,[R4, #+124]
   \   00000084   400F80E3           ORR      R0,R0,#0x100
   \   00000088   500084E5           STR      R0,[R4, #+80]
     39          	iYCenter = 566;
   \   0000008C   710080E2           ADD      R0,R0,#+113
   \   00000090   540084E5           STR      R0,[R4, #+84]
     40          
     41          	CreateBackground();
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       _ZN8RPMSweep16CreateBackgroundEv
     42          }
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   F081BDE8           POP      {R4-R8,PC}       ;; return
     43          

   \                                 In section .text, align 4, keep-with-next
     44          RPMSweep::~RPMSweep()
     45          {
   \                     _ZN8RPMSweepD1Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     46          	GUI_MEMDEV_Delete(mMemSpace);
   \   00000008   800094E5           LDR      R0,[R4, #+128]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
     47          }
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return
     48          

   \                                 In section .text, align 4, keep-with-next
     49          void RPMSweep::DrawControl()
     50          {
   \                     _ZN8RPMSweep11DrawControlEv:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     51          	// Draw blue sweep in background
     52          	GUI_DrawBitmap(&bmDigitalBarBlueSweep, xLoc, yLoc);
   \   00000008   182094E5           LDR      R2,[R4, #+24]
   \   0000000C   141094E5           LDR      R1,[R4, #+20]
   \   00000010   ........           LDR      R0,??DataTable5
   \   00000014   ........           BL       GUI_DrawBitmap
     53          
     54          	// black out part of the sweep we don't want to see
     55          	GUI_SetColor(GUI_BLACK);
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           BL       GUI_SetColor
     56          	GUI_FillPolygon(pts, 4, iXCenter, iYCenter);
   \   00000020   543094E5           LDR      R3,[R4, #+84]
   \   00000024   502094E5           LDR      R2,[R4, #+80]
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   580084E2           ADD      R0,R4,#+88
   \   00000030   ........           BL       GUI_FillPolygon
     57          
     58          	// Draw foreground (scale and asphalt) on top
     59          	GUI_MEMDEV_Write(mMemSpace);
   \   00000034   800094E5           LDR      R0,[R4, #+128]
   \   00000038   ........           BL       GUI_MEMDEV_Write
     60          
     61          	// draw the gear rectangle - must be done after memdev write
     62          	if(ShowGear)
   \   0000003C   4C00D4E5           LDRB     R0,[R4, #+76]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0700000A           BEQ      ??DrawControl_0
     63          	{
     64          		// draw the gear number
     65          		GUI_SetColor(GUI_WHITE);
   \   00000048   FF04E0E3           MVN      R0,#-16777216
   \   0000004C   ........           BL       GUI_SetColor
     66          		GUI_SetFont(GEAR_FONT);
   \   00000050   ........           LDR      R0,??DataTable5_5
   \   00000054   ........           BL       GUI_SetFont
     67          		GUI_DispStringInRect(strGear, &rectGear, GUI_TA_HCENTER | GUI_TA_VCENTER);
   \   00000058   0E20A0E3           MOV      R2,#+14
   \   0000005C   681084E2           ADD      R1,R4,#+104
   \   00000060   4D0084E2           ADD      R0,R4,#+77
   \   00000064   ........           BL       GUI_DispStringInRect
     68          	}
     69          }
   \                     ??DrawControl_0:
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
     70          
     71          //
     72          // CreateBackground - but in this case it is actually creating the FOREGROUND
     73          // This image will be the asphalt "background" with a transparent hole for
     74          // the blue sweep area.  We then draw the scales and redlines on this image and
     75          // any other static grpahics.
     76          //
     77          // When it is time to draw we first lay down the blue arc, then black out the 
     78          // unused portion and then we lay the foreground on top of it.
     79          //

   \                                 In section .text, align 4, keep-with-next
     80          void RPMSweep::CreateBackground()
     81          {
   \                     _ZN8RPMSweep16CreateBackgroundEv:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
     82          	int iOuterArcRadius, iInnerArcRadius, iXCenter, iYCenter;
     83          	int i, range, TicCount, iEndAngle, iMultiplier;
     84          	int x1, y1, x2, y2, iTemp = 1, radius, TicLength;
     85          	int iOuterX, iOuterY, iInnerX, iInnerY;
     86          	float dCos, dSin, angle, radians, dValuePerDeg;
     87          	char str[10];
     88          #ifdef USE_MATH
     89          	int iSlope, iYIntersect;
     90          #endif
     91          
     92          	// create the foreground memory area
     93          	mMemSpace = GUI_MEMDEV_Create(xLoc, yLoc, xSize, ySize);
   \   00000004   203090E5           LDR      R3,[R0, #+32]
   \   00000008   1C2090E5           LDR      R2,[R0, #+28]
   \   0000000C   181090E5           LDR      R1,[R0, #+24]
   \   00000010   28D04DE2           SUB      SP,SP,#+40
   \   00000014   0140A0E3           MOV      R4,#+1
   \   00000018   140090E5           LDR      R0,[R0, #+20]
   \   0000001C   ........           BL       GUI_MEMDEV_Create
   \   00000020   28109DE5           LDR      R1,[SP, #+40]
   \   00000024   800081E5           STR      R0,[R1, #+128]
     94          	GUI_MEMDEV_Select(mMemSpace);
   \   00000028   ........           BL       GUI_MEMDEV_Select
     95          
     96          	// Draw asphalt image with transparant sweep area
     97          	GUI_DrawBitmap(&bmTransSweepTachOnAsphalt, xLoc, yLoc);
   \   0000002C   28009DE5           LDR      R0,[SP, #+40]
   \   00000030   182090E5           LDR      R2,[R0, #+24]
   \   00000034   141090E5           LDR      R1,[R0, #+20]
   \   00000038   ........           LDR      R0,??DataTable5_1
   \   0000003C   ........           BL       GUI_DrawBitmap
   \   00000040   FF04E0E3           MVN      R0,#-16777216
     98          
     99          	GUI_SetColor(GUI_WHITE);
   \   00000044   ........           BL       GUI_SetColor
    100          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   ........           BL       GUI_SetTextMode
    101          
    102          	GUI_SetPenSize(4);
   \   00000050   0400A0E3           MOV      R0,#+4
   \   00000054   ........           BL       GUI_SetPenSize
   \   00000058   9600A0E3           MOV      R0,#+150
   \   0000005C   04008DE5           STR      R0,[SP, #+4]
   \   00000060   5600A0E3           MOV      R0,#+86
   \   00000064   00008DE5           STR      R0,[SP, #+0]
   \   00000068   6D1F80E2           ADD      R1,R0,#+436
   \   0000006C   823FA0E3           MOV      R3,#+520
   \   00000070   822FA0E3           MOV      R2,#+520
   \   00000074   4B0041E2           SUB      R0,R1,#+75
    103          	iOuterArcRadius = ARC_RADIUS;
    104          	iInnerArcRadius = ARC_RADIUS;
    105          	iOuterX = 447;
    106          	iOuterY = 522;
    107          	iInnerX = 460;
    108          	iInnerY = 610;
    109          	GUI_DrawArc(iOuterX, iOuterY, iOuterArcRadius, iOuterArcRadius, 86, 150);
   \   00000078   ........           BL       GUI_DrawArc
    110          	GUI_DrawArc(iInnerX, iInnerY, iInnerArcRadius, iInnerArcRadius, 88, 140);
   \   0000007C   8C00A0E3           MOV      R0,#+140
   \   00000080   04008DE5           STR      R0,[SP, #+4]
   \   00000084   5800A0E3           MOV      R0,#+88
   \   00000088   00008DE5           STR      R0,[SP, #+0]
   \   0000008C   822FA0E3           MOV      R2,#+520
   \   00000090   823FA0E3           MOV      R3,#+520
   \   00000094   5A1082E2           ADD      R1,R2,#+90
   \   00000098   730FA0E3           MOV      R0,#+460
   \   0000009C   ........           BL       GUI_DrawArc
    111          
    112          	// draw the alarm colors
    113          	dValuePerDeg = (150.0 - 86.0) / (float)(iMax - iMin);
   \   000000A0   28009DE5           LDR      R0,[SP, #+40]
   \   000000A4   28109DE5           LDR      R1,[SP, #+40]
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   041091E5           LDR      R1,[R1, #+4]
   \   000000B0   010040E0           SUB      R0,R0,R1
   \   000000B4   ........           BL       __aeabi_i2f
   \   000000B8   0010A0E1           MOV      R1,R0
   \   000000BC   4004A0E3           MOV      R0,#+1073741824
   \   000000C0   A00780E3           ORR      R0,R0,#0x2800000
   \   000000C4   ........           BL       __aeabi_fdiv
   \   000000C8   10008DE5           STR      R0,[SP, #+16]
    114          
    115          	//iStartAngle = 88;
    116          	iEndAngle = 150;
    117          	iXCenter = 453;
    118          	iYCenter = 566;
    119          
    120          	if(AlarmList != NULL)
   \   000000CC   28009DE5           LDR      R0,[SP, #+40]
   \   000000D0   7C9090E5           LDR      R9,[R0, #+124]
   \   000000D4   000059E3           CMP      R9,#+0
   \   000000D8   0B01000A           BEQ      ??CreateBackground_0
    121          	{
    122          		Alarm *pAlarm;
    123          		pAlarm = AlarmList;
    124          		float iAlarmStartAngle, iAlarmEndAngle;
    125          		//int temp;
    126          
    127          		while(pAlarm != NULL)
    128          		{
    129          			if(pAlarm->Enabled == true)
   \                     ??CreateBackground_1:
   \   000000DC   0000D9E5           LDRB     R0,[R9, #+0]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0501000A           BEQ      ??CreateBackground_2
    130          			{
    131          				iAlarmStartAngle = iEndAngle - (int)(((int)pAlarm->MaxValue - iMin) * dValuePerDeg);
   \   000000E8   28009DE5           LDR      R0,[SP, #+40]
   \   000000EC   085099E5           LDR      R5,[R9, #+8]
   \   000000F0   044090E5           LDR      R4,[R0, #+4]
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           BL       __aeabi_f2iz
   \   000000FC   040040E0           SUB      R0,R0,R4
   \   00000100   ........           BL       __aeabi_i2f
   \   00000104   10109DE5           LDR      R1,[SP, #+16]
   \   00000108   ........           BL       __aeabi_fmul
   \   0000010C   ........           BL       __aeabi_f2iz
   \   00000110   960060E2           RSB      R0,R0,#+150
   \   00000114   ........           BL       __aeabi_i2f
   \   00000118   0060A0E1           MOV      R6,R0
    132          				iAlarmEndAngle = iEndAngle - (int)(((int)pAlarm->MinValue - iMin) * dValuePerDeg);
    133          
    134          				// calculate the angle for the proper tic mark
    135          				angle = ceil(iEndAngle - (pAlarm->MaxValue - iMin) * dValuePerDeg);
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       __aeabi_i2f
   \   00000124   0080A0E1           MOV      R8,R0
   \   00000128   0510A0E1           MOV      R1,R5
   \   0000012C   ........           BL       __aeabi_fsub
   \   00000130   10109DE5           LDR      R1,[SP, #+16]
   \   00000134   ........           BL       __aeabi_fmul
   \   00000138   4314A0E3           MOV      R1,#+1124073472
   \   0000013C   581981E3           ORR      R1,R1,#0x160000
   \   00000140   ........           BL       __aeabi_fadd
   \   00000144   ........           BL       ceilf
   \   00000148   0070A0E1           MOV      R7,R0
    136          				radians = DEGREES_TO_RADIANS(angle);
   \   0000014C   ........           BL       __aeabi_f2d
   \   00000150   0040A0E1           MOV      R4,R0
   \   00000154   0150A0E1           MOV      R5,R1
   \   00000158   BF0F8FE2           ADR      R0,??CreateBackground_3
   \   0000015C   030090E8           LDM      R0,{R0,R1}
   \   00000160   0420A0E1           MOV      R2,R4
   \   00000164   0530A0E1           MOV      R3,R5
   \   00000168   ........           BL       __aeabi_dmul
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   ........           LDR      R3,??DataTable6  ;; 0x40668000
   \   00000174   ........           BL       __aeabi_ddiv
   \   00000178   ........           BL       __aeabi_d2f
   \   0000017C   00A0A0E1           MOV      R10,R0
    137          				dCos = cos(radians);
   \   00000180   0110A0E3           MOV      R1,#+1
   \   00000184   ........           BL       __iar_FSin
   \   00000188   00B0A0E1           MOV      R11,R0
    138          				dSin = sin(radians);
   \   0000018C   0010A0E3           MOV      R1,#+0
   \   00000190   0A00A0E1           MOV      R0,R10
   \   00000194   ........           BL       __iar_FSin
   \   00000198   00A0A0E1           MOV      R10,R0
    139          				
    140          				if(angle < 105)
   \   0000019C   0000A0E3           MOV      R0,#+0
   \   000001A0   ........           LDR      R1,??DataTable6_2  ;; 0x4062c000
   \   000001A4   0420A0E1           MOV      R2,R4
   \   000001A8   0530A0E1           MOV      R3,R5
   \   000001AC   ........           BL       __aeabi_dsub
   \   000001B0   0130A0E1           MOV      R3,R1
   \   000001B4   0020A0E1           MOV      R2,R0
   \   000001B8   4214A0E3           MOV      R1,#+1107296256
   \   000001BC   0700A0E1           MOV      R0,R7
   \   000001C0   D21881E3           ORR      R1,R1,#0xD20000
   \   000001C4   ........           BL       __aeabi_cfcmple
   \   000001C8   0200A0E1           MOV      R0,R2
   \   000001CC   0310A0E1           MOV      R1,R3
   \   000001D0   0200002A           BCS      ??CreateBackground_4
    141          					iTemp = (int)((150.0 - (float)angle) / 3.4);
   \   000001D4   A22F8FE2           ADR      R2,??CreateBackground_3+0x8
   \   000001D8   0C0092E8           LDM      R2,{R2,R3}
   \   000001DC   020000EA           B        ??CreateBackground_5
    142          				else
    143          					iTemp = (int)((150.0 - (float)angle) / 2.75);
   \                     ??CreateBackground_4:
   \   000001E0   4034A0E3           MOV      R3,#+1073741824
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   603A83E3           ORR      R3,R3,#0x60000
   \                     ??CreateBackground_5:
   \   000001EC   ........           BL       __aeabi_ddiv
   \   000001F0   ........           BL       __aeabi_d2iz
    144          
    145          				radius = iOuterArcRadius + 30 + iTemp;
   \   000001F4   2610A0E3           MOV      R1,#+38
   \   000001F8   801F81E3           ORR      R1,R1,#0x200
   \   000001FC   000081E0           ADD      R0,R1,R0
   \   00000200   050040E2           SUB      R0,R0,#+5
   \   00000204   ........           BL       __aeabi_i2f
   \   00000208   0050A0E1           MOV      R5,R0
   \   0000020C   0B10A0E1           MOV      R1,R11
   \   00000210   ........           BL       __aeabi_fmul
   \   00000214   ........           BL       __aeabi_f2iz
   \   00000218   C510A0E3           MOV      R1,#+197
   \   0000021C   401F81E3           ORR      R1,R1,#0x100
   \   00000220   004081E0           ADD      R4,R1,R0
    146          
    147          				x1 = iXCenter + (int)(dCos * (radius - 5));
    148          				y1 = iYCenter + (int)(dSin * (radius - 5) * -1);
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   0A10A0E1           MOV      R1,R10
   \   0000022C   ........           BL       __aeabi_fmul
   \   00000230   8014A0E3           MOV      R1,#-2147483648
   \   00000234   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000238   ........           BL       __aeabi_fmul
   \   0000023C   ........           BL       __aeabi_f2iz
   \   00000240   3610A0E3           MOV      R1,#+54
   \   00000244   801F81E3           ORR      R1,R1,#0x200
   \   00000248   00A081E0           ADD      R10,R1,R0
    149          
    150          				if (((int)iAlarmStartAngle != 86) && ((int)iAlarmStartAngle != 87))
   \   0000024C   0600A0E1           MOV      R0,R6
   \   00000250   ........           BL       __aeabi_f2iz
   \   00000254   560050E3           CMP      R0,#+86
   \   00000258   57005013           CMPNE    R0,#+87
   \   0000025C   1F00000A           BEQ      ??CreateBackground_6
    151          					iAlarmStartAngle = 180 - RADIANS_TO_DEGREES(atan(((float)abs(y1 - iOuterY) / (float)abs(x1 - iOuterX))));
   \   00000260   0900E0E3           MVN      R0,#+9
   \   00000264   800FC0E3           BIC      R0,R0,#0x200
   \   00000268   0A0090E0           ADDS     R0,R0,R10
   \   0000026C   BE10E0E3           MVN      R1,#+190
   \   00000270   00006042           RSBMI    R0,R0,#+0
   \   00000274   401FC1E3           BIC      R1,R1,#0x100
   \   00000278   044091E0           ADDS     R4,R1,R4
   \   0000027C   00406442           RSBMI    R4,R4,#+0
   \   00000280   ........           BL       __aeabi_i2f
   \   00000284   0050A0E1           MOV      R5,R0
   \   00000288   0400A0E1           MOV      R0,R4
   \   0000028C   ........           BL       __aeabi_i2f
   \   00000290   0010A0E1           MOV      R1,R0
   \   00000294   0500A0E1           MOV      R0,R5
   \   00000298   ........           BL       __aeabi_fdiv
   \   0000029C   ........           BL       atanf
   \   000002A0   ........           BL       __aeabi_f2d
   \   000002A4   0020A0E1           MOV      R2,R0
   \   000002A8   0130A0E1           MOV      R3,R1
   \   000002AC   0000A0E3           MOV      R0,#+0
   \   000002B0   ........           LDR      R1,??DataTable6  ;; 0x40668000
   \   000002B4   ........           BL       __aeabi_dmul
   \   000002B8   672F8FE2           ADR      R2,??CreateBackground_3
   \   000002BC   0C0092E8           LDM      R2,{R2,R3}
   \   000002C0   ........           BL       __aeabi_ddiv
   \   000002C4   0020A0E1           MOV      R2,R0
   \   000002C8   0130A0E1           MOV      R3,R1
   \   000002CC   0000A0E3           MOV      R0,#+0
   \   000002D0   ........           LDR      R1,??DataTable6  ;; 0x40668000
   \   000002D4   ........           BL       __aeabi_dsub
   \   000002D8   ........           BL       __aeabi_d2f
   \   000002DC   0060A0E1           MOV      R6,R0
    152          
    153          				angle = ceil(iEndAngle - (pAlarm->MinValue - iMin) * dValuePerDeg);
   \                     ??CreateBackground_6:
   \   000002E0   0800A0E1           MOV      R0,R8
   \   000002E4   041099E5           LDR      R1,[R9, #+4]
   \   000002E8   ........           BL       __aeabi_fsub
   \   000002EC   10109DE5           LDR      R1,[SP, #+16]
   \   000002F0   ........           BL       __aeabi_fmul
   \   000002F4   4314A0E3           MOV      R1,#+1124073472
   \   000002F8   581981E3           ORR      R1,R1,#0x160000
   \   000002FC   ........           BL       __aeabi_fadd
   \   00000300   ........           BL       ceilf
   \   00000304   0070A0E1           MOV      R7,R0
    154          				radians = DEGREES_TO_RADIANS(angle);
   \   00000308   ........           BL       __aeabi_f2d
   \   0000030C   0040A0E1           MOV      R4,R0
   \   00000310   0150A0E1           MOV      R5,R1
   \   00000314   500F8FE2           ADR      R0,??CreateBackground_3
   \   00000318   030090E8           LDM      R0,{R0,R1}
   \   0000031C   0420A0E1           MOV      R2,R4
   \   00000320   0530A0E1           MOV      R3,R5
   \   00000324   ........           BL       __aeabi_dmul
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   ........           LDR      R3,??DataTable6  ;; 0x40668000
   \   00000330   ........           BL       __aeabi_ddiv
   \   00000334   ........           BL       __aeabi_d2f
   \   00000338   0080A0E1           MOV      R8,R0
    155          				dCos = cos(radians);
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   ........           BL       __iar_FSin
   \   00000344   0C008DE5           STR      R0,[SP, #+12]
    156          				dSin = sin(radians);
   \   00000348   0010A0E3           MOV      R1,#+0
   \   0000034C   0800A0E1           MOV      R0,R8
   \   00000350   ........           BL       __iar_FSin
   \   00000354   0080A0E1           MOV      R8,R0
    157          				
    158          				if(angle < 105)
   \   00000358   0000A0E3           MOV      R0,#+0
   \   0000035C   ........           LDR      R1,??DataTable6_2  ;; 0x4062c000
   \   00000360   0420A0E1           MOV      R2,R4
   \   00000364   0530A0E1           MOV      R3,R5
   \   00000368   ........           BL       __aeabi_dsub
   \   0000036C   0130A0E1           MOV      R3,R1
   \   00000370   0020A0E1           MOV      R2,R0
   \   00000374   4214A0E3           MOV      R1,#+1107296256
   \   00000378   0700A0E1           MOV      R0,R7
   \   0000037C   D21881E3           ORR      R1,R1,#0xD20000
   \   00000380   ........           BL       __aeabi_cfcmple
   \   00000384   0200A0E1           MOV      R0,R2
   \   00000388   0310A0E1           MOV      R1,R3
   \   0000038C   0200002A           BCS      ??CreateBackground_7
    159          					iTemp = (int)((150.0 - (float)angle) / 3.4);
   \   00000390   CC208FE2           ADR      R2,??CreateBackground_3+0x8
   \   00000394   0C0092E8           LDM      R2,{R2,R3}
   \   00000398   020000EA           B        ??CreateBackground_8
    160          				else
    161          					iTemp = (int)((150.0 - (float)angle) / 2.75);
   \                     ??CreateBackground_7:
   \   0000039C   4034A0E3           MOV      R3,#+1073741824
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   603A83E3           ORR      R3,R3,#0x60000
   \                     ??CreateBackground_8:
   \   000003A8   ........           BL       __aeabi_ddiv
   \   000003AC   ........           BL       __aeabi_d2iz
    162          
    163          				radius = iOuterArcRadius + 30 + iTemp;
   \   000003B0   2610A0E3           MOV      R1,#+38
   \   000003B4   801F81E3           ORR      R1,R1,#0x200
   \   000003B8   000081E0           ADD      R0,R1,R0
   \   000003BC   08008DE5           STR      R0,[SP, #+8]
   \   000003C0   050040E2           SUB      R0,R0,#+5
   \   000003C4   ........           BL       __aeabi_i2f
   \   000003C8   0040A0E1           MOV      R4,R0
   \   000003CC   0C009DE5           LDR      R0,[SP, #+12]
   \   000003D0   0410A0E1           MOV      R1,R4
   \   000003D4   ........           BL       __aeabi_fmul
   \   000003D8   ........           BL       __aeabi_f2iz
   \   000003DC   C510A0E3           MOV      R1,#+197
   \   000003E0   401F81E3           ORR      R1,R1,#0x100
   \   000003E4   00B081E0           ADD      R11,R1,R0
    164          
    165          				x1 = iXCenter + (int)(dCos * (radius - 5));
    166          				y1 = iYCenter + (int)(dSin * (radius - 5) * -1);
    167          
    168           				iAlarmEndAngle = 180 - RADIANS_TO_DEGREES(atan(((float)abs(y1 - iOuterY) / (float)abs(x1 - iOuterX))));
   \   000003E8   0400A0E1           MOV      R0,R4
   \   000003EC   0810A0E1           MOV      R1,R8
   \   000003F0   ........           BL       __aeabi_fmul
   \   000003F4   8014A0E3           MOV      R1,#-2147483648
   \   000003F8   FE1581E3           ORR      R1,R1,#0x3F800000
   \   000003FC   ........           BL       __aeabi_fmul
   \   00000400   ........           BL       __aeabi_f2iz
   \   00000404   2C0090E2           ADDS     R0,R0,#+44
   \   00000408   BE10E0E3           MVN      R1,#+190
   \   0000040C   00006042           RSBMI    R0,R0,#+0
   \   00000410   401FC1E3           BIC      R1,R1,#0x100
   \   00000414   0B4091E0           ADDS     R4,R1,R11
   \   00000418   00406442           RSBMI    R4,R4,#+0
   \   0000041C   ........           BL       __aeabi_i2f
   \   00000420   0050A0E1           MOV      R5,R0
   \   00000424   0400A0E1           MOV      R0,R4
   \   00000428   ........           BL       __aeabi_i2f
   \   0000042C   0010A0E1           MOV      R1,R0
   \   00000430   0500A0E1           MOV      R0,R5
   \   00000434   ........           BL       __aeabi_fdiv
   \   00000438   ........           BL       atanf
   \   0000043C   ........           BL       __aeabi_f2d
   \   00000440   0020A0E1           MOV      R2,R0
   \   00000444   0130A0E1           MOV      R3,R1
   \   00000448   0000A0E3           MOV      R0,#+0
   \   0000044C   ........           LDR      R1,??DataTable6  ;; 0x40668000
   \   00000450   ........           BL       __aeabi_dmul
   \   00000454   00208FE2           ADR      R2,??CreateBackground_3
   \   00000458   030000EA           B        ??CreateBackground_9
   \                     ??CreateBackground_3:
   \   0000045C   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        
   \   00000464   333333333333       DC32     0x33333333,0x400B3333
   \              0B40        
   \                     ??CreateBackground_9:
   \   0000046C   0C0092E8           LDM      R2,{R2,R3}
   \   00000470   ........           BL       __aeabi_ddiv
   \   00000474   0020A0E1           MOV      R2,R0
   \   00000478   0130A0E1           MOV      R3,R1
   \   0000047C   0000A0E3           MOV      R0,#+0
   \   00000480   ........           LDR      R1,??DataTable6  ;; 0x40668000
   \   00000484   ........           BL       __aeabi_dsub
   \   00000488   ........           BL       __aeabi_d2f
    169          
    170          
    171          				if(iAlarmStartAngle > iAlarmEndAngle)
   \   0000048C   0610A0E1           MOV      R1,R6
   \   00000490   ........           BL       __aeabi_cfcmple
   \   00000494   0050A0E1           MOV      R5,R0
    172          				{
    173          					float temp;
    174          					// GUI_DrawArc won't draw an arc if the start value is greater than the end value for some reason
    175          					// we need to switch them so it'll work
    176          					temp = iAlarmStartAngle;
   \   00000498   0600A031           MOVCC    R0,R6
    177          					iAlarmStartAngle = iAlarmEndAngle;
   \   0000049C   0560A031           MOVCC    R6,R5
    178          					iAlarmEndAngle = temp;
   \   000004A0   0050A031           MOVCC    R5,R0
    179          				}
    180          
    181          				iTemp = ARC_RADIUS - RPMSWEEP_ALARM_WIDTH - 1;
   \   000004A4   804FA0E3           MOV      R4,#+512
    182          				//iTemp = ARC_RADIUS + 28;
    183          				GUI_SetPenSize(RPMSWEEP_ALARM_WIDTH + 2);
   \   000004A8   0900A0E3           MOV      R0,#+9
   \   000004AC   ........           BL       GUI_SetPenSize
    184          				GUI_SetColor(GUI_BLACK);
   \   000004B0   0000A0E3           MOV      R0,#+0
   \   000004B4   ........           BL       GUI_SetColor
    185          				GUI_DrawArc2(iOuterX, iOuterY, iTemp, iTemp, iAlarmStartAngle, iAlarmEndAngle);
   \   000004B8   802FA0E3           MOV      R2,#+512
   \   000004BC   0A1082E3           ORR      R1,R2,#0xA
   \   000004C0   04508DE5           STR      R5,[SP, #+4]
   \   000004C4   00608DE5           STR      R6,[SP, #+0]
   \   000004C8   803FA0E3           MOV      R3,#+512
   \   000004CC   4B0041E2           SUB      R0,R1,#+75
   \   000004D0   ........           BL       GUI_DrawArc2
    186          				//GUI_DrawArc(iXCenter, iYCenter, iTemp, iTemp, iAlarmStartAngle, iAlarmEndAngle);
    187          
    188          				GUI_SetPenSize(RPMSWEEP_ALARM_WIDTH);
   \   000004D4   0700A0E3           MOV      R0,#+7
   \   000004D8   ........           BL       GUI_SetPenSize
    189          				GUI_SetColor(pAlarm->Color);
   \   000004DC   0C0099E5           LDR      R0,[R9, #+12]
   \   000004E0   ........           BL       GUI_SetColor
    190          				GUI_DrawArc2(iOuterX, iOuterY, iTemp, iTemp, iAlarmStartAngle, iAlarmEndAngle);
   \   000004E4   802FA0E3           MOV      R2,#+512
   \   000004E8   0A1082E3           ORR      R1,R2,#0xA
   \   000004EC   04508DE5           STR      R5,[SP, #+4]
   \   000004F0   00608DE5           STR      R6,[SP, #+0]
   \   000004F4   803FA0E3           MOV      R3,#+512
   \   000004F8   4B0041E2           SUB      R0,R1,#+75
   \   000004FC   ........           BL       GUI_DrawArc2
    191          				//GUI_DrawArc(iXCenter, iYCenter, iTemp, iTemp, iAlarmStartAngle, iAlarmEndAngle);
    192          			}
    193          			pAlarm = pAlarm->Next;
   \                     ??CreateBackground_2:
   \   00000500   189099E5           LDR      R9,[R9, #+24]
   \   00000504   000059E3           CMP      R9,#+0
   \   00000508   F3FEFF1A           BNE      ??CreateBackground_1
    194          		}
    195          	}
    196          
    197          	GUI_SetPenSize(3);
   \                     ??CreateBackground_0:
   \   0000050C   0300A0E3           MOV      R0,#+3
   \   00000510   ........           BL       GUI_SetPenSize
    198          
    199          	//iStartAngle = 86;
    200          
    201          	range = iMax - iMin;
    202          	TicCount = (int)(range / iMajorTicRange);
   \   00000514   28009DE5           LDR      R0,[SP, #+40]
   \   00000518   28109DE5           LDR      R1,[SP, #+40]
   \   0000051C   000090E5           LDR      R0,[R0, #+0]
   \   00000520   041091E5           LDR      R1,[R1, #+4]
   \   00000524   010040E0           SUB      R0,R0,R1
   \   00000528   28109DE5           LDR      R1,[SP, #+40]
   \   0000052C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000530   ........           BL       __aeabi_idiv
   \   00000534   04008DE5           STR      R0,[SP, #+4]
    203          	if(TicCount > 9)
   \   00000538   0A0050E3           CMP      R0,#+10
   \   0000053C   0C0000BA           BLT      ??CreateBackground_10
    204          	{
    205          		TicCount = (int)ceil((float)TicCount / 2.0);
   \   00000540   ........           BL       __aeabi_i2f
   \   00000544   ........           BL       __aeabi_f2d
   \   00000548   0130A0E1           MOV      R3,R1
   \   0000054C   0020A0E1           MOV      R2,R0
   \   00000550   C015A0E3           MOV      R1,#+805306368
   \   00000554   0000A0E3           MOV      R0,#+0
   \   00000558   FE1681E3           ORR      R1,R1,#0xFE00000
   \   0000055C   ........           BL       __aeabi_dmul
   \   00000560   ........           BL       ceil
   \   00000564   ........           BL       __aeabi_d2iz
   \   00000568   04008DE5           STR      R0,[SP, #+4]
    206          		iMultiplier = 2;
   \   0000056C   0210A0E3           MOV      R1,#+2
   \   00000570   000000EA           B        ??CreateBackground_11
    207          	}
    208          	else
    209          	{
    210          		iMultiplier = 1;
   \                     ??CreateBackground_10:
   \   00000574   0110A0E3           MOV      R1,#+1
   \                     ??CreateBackground_11:
   \   00000578   14108DE5           STR      R1,[SP, #+20]
    211          	}
    212          
    213          	//dValuePerDeg = ((float)iEndAngle - (float)iStartAngle) / TicCount;
    214          	//dValuePerDeg = (150 - 86) / TicCount;
    215          
    216          	radius = iOuterArcRadius + 30;
    217          	TicLength = 50;
    218          
    219          	GUI_SetFont(TEXT_FONT);
   \   0000057C   ........           LDR      R0,??DataTable6_1
   \   00000580   ........           BL       GUI_SetFont
    220          
    221          	for(i=1; i < TicCount; i++)
   \   00000584   04009DE5           LDR      R0,[SP, #+4]
   \   00000588   0110A0E3           MOV      R1,#+1
   \   0000058C   00108DE5           STR      R1,[SP, #+0]
   \   00000590   020050E3           CMP      R0,#+2
   \   00000594   450100BA           BLT      ??CreateBackground_12
   \   00000598   14009DE5           LDR      R0,[SP, #+20]
   \   0000059C   ........           BL       __aeabi_i2f
   \   000005A0   18008DE5           STR      R0,[SP, #+24]
    222          	{
    223          		angle = ceil(iEndAngle - ((float)i * dValuePerDeg * iMultiplier * iMajorTicRange));
   \                     ??CreateBackground_13:
   \   000005A4   00009DE5           LDR      R0,[SP, #+0]
   \   000005A8   ........           BL       __aeabi_i2f
   \   000005AC   10109DE5           LDR      R1,[SP, #+16]
   \   000005B0   ........           BL       __aeabi_fmul
   \   000005B4   18109DE5           LDR      R1,[SP, #+24]
   \   000005B8   ........           BL       __aeabi_fmul
   \   000005BC   0040A0E1           MOV      R4,R0
   \   000005C0   28009DE5           LDR      R0,[SP, #+40]
   \   000005C4   0C0090E5           LDR      R0,[R0, #+12]
   \   000005C8   ........           BL       __aeabi_i2f
   \   000005CC   0410A0E1           MOV      R1,R4
   \   000005D0   ........           BL       __aeabi_fmul
   \   000005D4   0010A0E1           MOV      R1,R0
   \   000005D8   4304A0E3           MOV      R0,#+1124073472
   \   000005DC   580980E3           ORR      R0,R0,#0x160000
   \   000005E0   ........           BL       __aeabi_fsub
   \   000005E4   ........           BL       ceilf
   \   000005E8   0070A0E1           MOV      R7,R0
    224          
    225          		radians = DEGREES_TO_RADIANS(angle);
   \   000005EC   ........           BL       __aeabi_f2d
   \   000005F0   0040A0E1           MOV      R4,R0
   \   000005F4   0150A0E1           MOV      R5,R1
   \   000005F8   EE0F8FE2           ADR      R0,??CreateBackground_14
   \   000005FC   030090E8           LDM      R0,{R0,R1}
   \   00000600   0420A0E1           MOV      R2,R4
   \   00000604   0530A0E1           MOV      R3,R5
   \   00000608   ........           BL       __aeabi_dmul
   \   0000060C   0020A0E3           MOV      R2,#+0
   \   00000610   ........           LDR      R3,??DataTable6  ;; 0x40668000
   \   00000614   ........           BL       __aeabi_ddiv
   \   00000618   ........           BL       __aeabi_d2f
   \   0000061C   0080A0E1           MOV      R8,R0
    226          
    227          		dCos = cos(radians);
   \   00000620   0110A0E3           MOV      R1,#+1
   \   00000624   ........           BL       __iar_FSin
   \   00000628   0C008DE5           STR      R0,[SP, #+12]
    228          		dSin = sin(radians);
   \   0000062C   0010A0E3           MOV      R1,#+0
   \   00000630   0800A0E1           MOV      R0,R8
   \   00000634   ........           BL       __iar_FSin
   \   00000638   0080A0E1           MOV      R8,R0
    229          
    230          		if(angle < 105)
   \   0000063C   0000A0E3           MOV      R0,#+0
   \   00000640   ........           LDR      R1,??DataTable6_2  ;; 0x4062c000
   \   00000644   0420A0E1           MOV      R2,R4
   \   00000648   0530A0E1           MOV      R3,R5
   \   0000064C   ........           BL       __aeabi_dsub
   \   00000650   0130A0E1           MOV      R3,R1
   \   00000654   0020A0E1           MOV      R2,R0
   \   00000658   4214A0E3           MOV      R1,#+1107296256
   \   0000065C   0700A0E1           MOV      R0,R7
   \   00000660   D21881E3           ORR      R1,R1,#0xD20000
   \   00000664   ........           BL       __aeabi_cfcmple
   \   00000668   0200A0E1           MOV      R0,R2
   \   0000066C   0310A0E1           MOV      R1,R3
   \   00000670   0200002A           BCS      ??CreateBackground_15
    231          			iTemp = (int)((150.0 - (float)angle) / 3.4);
   \   00000674   D12F8FE2           ADR      R2,??CreateBackground_14+0x8
   \   00000678   0C0092E8           LDM      R2,{R2,R3}
   \   0000067C   020000EA           B        ??CreateBackground_16
    232          		else
    233          			iTemp = (int)((150.0 - (float)angle) / 2.75);
   \                     ??CreateBackground_15:
   \   00000680   4034A0E3           MOV      R3,#+1073741824
   \   00000684   0020A0E3           MOV      R2,#+0
   \   00000688   603A83E3           ORR      R3,R3,#0x60000
   \                     ??CreateBackground_16:
   \   0000068C   ........           BL       __aeabi_ddiv
   \   00000690   ........           BL       __aeabi_d2iz
    234          
    235          
    236          		//radius = iOuterArcRadius + 30 + iTemp;
    237          #ifdef USE_MATH
    238          		radius = iOuterArcRadius * 2;
    239          #else
    240          		radius = iOuterArcRadius + 30 + iTemp;
   \   00000694   2610A0E3           MOV      R1,#+38
   \   00000698   801F81E3           ORR      R1,R1,#0x200
   \   0000069C   000081E0           ADD      R0,R1,R0
   \   000006A0   08008DE5           STR      R0,[SP, #+8]
    241          #endif
    242          
    243          // note numbers - first = 8000 rpm, second = 16000 rpm, 3rd = 12000, 4th =10000
    244          
    245          		if (angle < 95)
   \   000006A4   4214A0E3           MOV      R1,#+1107296256
   \   000006A8   0700A0E1           MOV      R0,R7
   \   000006AC   BE1881E3           ORR      R1,R1,#0xBE0000
   \   000006B0   ........           BL       __aeabi_cfcmple
   \   000006B4   5B00002A           BCS      ??CreateBackground_17
    246          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 10.0) / (150.0 - 86.0)));	// straight up 86, 86
   \   000006B8   0000A0E3           MOV      R0,#+0
   \   000006BC   ........           LDR      R1,??DataTable6_3  ;; 0x40618000
   \                     ??CreateBackground_18:
   \   000006C0   0420A0E1           MOV      R2,R4
   \   000006C4   0530A0E1           MOV      R3,R5
   \   000006C8   ........           BL       __aeabi_dsub
   \   000006CC   C035A0E3           MOV      R3,#+805306368
   \   000006D0   0020A0E3           MOV      R2,#+0
   \   000006D4   F93683E3           ORR      R3,R3,#0xF900000
   \   000006D8   ........           BL       __aeabi_dmul
   \                     ??CreateBackground_19:
   \   000006DC   4034A0E3           MOV      R3,#+1073741824
   \   000006E0   0020A0E3           MOV      R2,#+0
   \   000006E4   493883E3           ORR      R3,R3,#0x490000
   \   000006E8   ........           BL       __aeabi_dmul
   \   000006EC   ........           BL       __aeabi_d2iz
   \   000006F0   324080E2           ADD      R4,R0,#+50
   \   000006F4   08009DE5           LDR      R0,[SP, #+8]
   \   000006F8   050040E2           SUB      R0,R0,#+5
   \   000006FC   ........           BL       __aeabi_i2f
   \   00000700   0050A0E1           MOV      R5,R0
   \   00000704   0C009DE5           LDR      R0,[SP, #+12]
   \   00000708   0510A0E1           MOV      R1,R5
   \   0000070C   ........           BL       __aeabi_fmul
   \   00000710   ........           BL       __aeabi_f2iz
   \   00000714   C510A0E3           MOV      R1,#+197
   \   00000718   401F81E3           ORR      R1,R1,#0x100
   \   0000071C   00B081E0           ADD      R11,R1,R0
    247          		else if (angle < 100)
    248          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 10.0) / (150.0 - 90.0)));	// 90, 90, 90
    249          		else if (angle < 105)
    250          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 10.0) / (150.0 - 95.0)));	// 95, 102, 95
    251          		else if (angle < 110)
    252          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 6.0) / (150.0 - 96.0)));	// 96, 96, 86, 96
    253          		else if (angle < 115)
    254          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 6.0) / (150.0 - 98.0)));	// 98 5/8, 99, 101, 101
    255          		else if (angle < 120)
    256          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle - 6.0) / (150.0 - 104.0)));	// 105, 107, 109, 109, 102
    257          		else if (angle < 125)
    258          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle + 6.0) / (150.0 - 90.0)));	// 90, 86, 86
    259          		else if (angle < 130)
    260          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle + 6.0) / (150.0 - 86.0)));	// 86, 90, 90
    261          		else if (angle < 135)
    262          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle + 6.0) / (150.0 - 90.0)));	// 90, 90, 90
    263          		else
    264          			iTemp = TicLength + (int)(TicLength * ((150.0 - angle + 6.0) / (150.0 - 86.0)));	// 86, 86, 86
    265          
    266          
    267          		// get the start and end points of the line
    268          		x1 = iXCenter + (int)(dCos * (radius - 5));
    269          		y1 = iYCenter + (int)(dSin * (radius - 5) * -1);
   \   00000720   0500A0E1           MOV      R0,R5
   \   00000724   0810A0E1           MOV      R1,R8
   \   00000728   ........           BL       __aeabi_fmul
   \   0000072C   8014A0E3           MOV      R1,#-2147483648
   \   00000730   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000734   ........           BL       __aeabi_fmul
   \   00000738   ........           BL       __aeabi_f2iz
   \   0000073C   3610A0E3           MOV      R1,#+54
   \   00000740   801F81E3           ORR      R1,R1,#0x200
   \   00000744   00A081E0           ADD      R10,R1,R0
   \   00000748   08009DE5           LDR      R0,[SP, #+8]
   \   0000074C   040040E0           SUB      R0,R0,R4
   \   00000750   ........           BL       __aeabi_i2f
   \   00000754   0040A0E1           MOV      R4,R0
   \   00000758   0C009DE5           LDR      R0,[SP, #+12]
   \   0000075C   0410A0E1           MOV      R1,R4
   \   00000760   ........           BL       __aeabi_fmul
   \   00000764   ........           BL       __aeabi_f2iz
   \   00000768   C510A0E3           MOV      R1,#+197
   \   0000076C   401F81E3           ORR      R1,R1,#0x100
   \   00000770   005081E0           ADD      R5,R1,R0
    270          
    271          #ifdef USE_MATH
    272          		x2 = iXCenter;
    273          		y2 = iYCenter;
    274          		iSlope = (y1 - y2) / (x1 - x2);
    275          		iYIntersect = iYCenter + (tan(180 - angle) * iXCenter);
    276          
    277          		//iTemp = sqrt(SQ(iSlope) * SQ(iOuterArcRadius) - SQ(iYIntersect) + (2 * iXCenter - 2 * iYCenter * iSlope) * iYIntersect - SQ(iXCenter) * SQ(iSlope) + 2 * iXCenter * iYCenter * iSlope - SQ(iYCenter)) + iSlope * iYIntersect - iXCenter * iSlope - iYCenter
    278          		x1 = GetXIntersect(iOuterX, iOuterY, iOuterArcRadius, x1, y1, x2, y2, 180 - angle);
    279          		y1 = iSlope * x1 + iYIntersect;
    280          		x2 = iXCenter;
    281          		y2 = iYCenter;
    282          		//x2 = GetXIntersect(iInnerX, iInnerY, iInnerArcRadius, x1, y1, x2, y2, 180 - angle);
    283          		//y2 = iSlope * x1 + iYIntersect;
    284          #else
    285          		x2 = iXCenter + (int)(dCos * (radius - iTemp));
    286          		y2 = iYCenter + (int)(dSin * (radius - iTemp) * -1);
   \   00000774   0400A0E1           MOV      R0,R4
   \   00000778   0810A0E1           MOV      R1,R8
   \   0000077C   ........           BL       __aeabi_fmul
   \   00000780   8014A0E3           MOV      R1,#-2147483648
   \   00000784   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000788   ........           BL       __aeabi_fmul
   \   0000078C   ........           BL       __aeabi_f2iz
   \   00000790   3610A0E3           MOV      R1,#+54
   \   00000794   801F81E3           ORR      R1,R1,#0x200
   \   00000798   006081E0           ADD      R6,R1,R0
    287          
    288          #endif
    289          		iTemp = GUI_GetPenSize();
   \   0000079C   ........           BL       GUI_GetPenSize
   \   000007A0   0040A0E1           MOV      R4,R0
    290          		GUI_SetColor(GUI_BLACK);
   \   000007A4   0000A0E3           MOV      R0,#+0
   \   000007A8   ........           BL       GUI_SetColor
    291          		GUI_SetPenSize(iTemp + 2);
   \   000007AC   020084E2           ADD      R0,R4,#+2
   \   000007B0   FF0000E2           AND      R0,R0,#0xFF
   \   000007B4   ........           BL       GUI_SetPenSize
    292          		GUI_DrawLine(x1, y1, x2, y2);
   \   000007B8   0630A0E1           MOV      R3,R6
   \   000007BC   0520A0E1           MOV      R2,R5
   \   000007C0   0A10A0E1           MOV      R1,R10
   \   000007C4   0B00A0E1           MOV      R0,R11
   \   000007C8   ........           BL       GUI_DrawLine
    293          		GUI_SetColor(GUI_WHITE);
   \   000007CC   FF04E0E3           MVN      R0,#-16777216
   \   000007D0   ........           BL       GUI_SetColor
    294          		GUI_SetPenSize(iTemp);
   \   000007D4   0400A0E1           MOV      R0,R4
   \   000007D8   ........           BL       GUI_SetPenSize
    295          		GUI_DrawLine(x1, y1, x2, y2);
   \   000007DC   0630A0E1           MOV      R3,R6
   \   000007E0   0520A0E1           MOV      R2,R5
   \   000007E4   0A10A0E1           MOV      R1,R10
   \   000007E8   0B00A0E1           MOV      R0,R11
   \   000007EC   ........           BL       GUI_DrawLine
    296          		
    297          
    298          		// print the text
    299          		sprintf(str, "%d", i * iMultiplier);
   \   000007F0   00009DE5           LDR      R0,[SP, #+0]
   \   000007F4   14109DE5           LDR      R1,[SP, #+20]
   \   000007F8   910002E0           MUL      R2,R1,R0
   \   000007FC   ........           ADR      R1,??DataTable3  ;; 0x25, 0x64, 0x00, 0x00
   \   00000800   1C008DE2           ADD      R0,SP,#+28
   \   00000804   ........           BL       sprintf
    300          		if(angle < 100)
   \   00000808   4014A0E3           MOV      R1,#+1073741824
   \   0000080C   0700A0E1           MOV      R0,R7
   \   00000810   B21781E3           ORR      R1,R1,#0x2C80000
   \   00000814   ........           BL       __aeabi_cfcmple
   \   00000818   5700002A           BCS      ??CreateBackground_20
    301          			y2 -= GUI_GetFontDistY();
   \   0000081C   ........           BL       GUI_GetFontDistY
   \   00000820   006046E0           SUB      R6,R6,R0
   \   00000824   800000EA           B        ??CreateBackground_21
   \                     ??CreateBackground_17:
   \   00000828   A01A81E2           ADD      R1,R1,#+655360
   \   0000082C   ........           BL       __aeabi_cfcmple
   \   00000830   0900002A           BCS      ??CreateBackground_22
   \   00000834   0000A0E3           MOV      R0,#+0
   \   00000838   ........           LDR      R1,??DataTable6_3  ;; 0x40618000
   \   0000083C   0420A0E1           MOV      R2,R4
   \   00000840   0530A0E1           MOV      R3,R5
   \   00000844   ........           BL       __aeabi_dsub
   \   00000848   4034A0E3           MOV      R3,#+1073741824
   \   0000084C   0020A0E3           MOV      R2,#+0
   \   00000850   4E3883E3           ORR      R3,R3,#0x4E0000
   \                     ??CreateBackground_23:
   \   00000854   ........           BL       __aeabi_ddiv
   \   00000858   9FFFFFEA           B        ??CreateBackground_19
   \                     ??CreateBackground_22:
   \   0000085C   A01A81E2           ADD      R1,R1,#+655360
   \   00000860   ........           BL       __aeabi_cfcmple
   \   00000864   0700002A           BCS      ??CreateBackground_24
   \   00000868   0000A0E3           MOV      R0,#+0
   \   0000086C   ........           LDR      R1,??DataTable6_3  ;; 0x40618000
   \   00000870   0420A0E1           MOV      R2,R4
   \   00000874   0530A0E1           MOV      R3,R5
   \   00000878   ........           BL       __aeabi_dsub
   \   0000087C   0020A0E3           MOV      R2,#+0
   \   00000880   ........           LDR      R3,??DataTable6_4  ;; 0x404b8000
   \   00000884   F2FFFFEA           B        ??CreateBackground_23
   \                     ??CreateBackground_24:
   \   00000888   A01A81E2           ADD      R1,R1,#+655360
   \   0000088C   ........           BL       __aeabi_cfcmple
   \   00000890   0A00002A           BCS      ??CreateBackground_25
   \   00000894   4014A0E3           MOV      R1,#+1073741824
   \   00000898   0000A0E3           MOV      R0,#+0
   \   0000089C   621881E3           ORR      R1,R1,#0x620000
   \   000008A0   0420A0E1           MOV      R2,R4
   \   000008A4   0530A0E1           MOV      R3,R5
   \   000008A8   ........           BL       __aeabi_dsub
   \   000008AC   4034A0E3           MOV      R3,#+1073741824
   \   000008B0   0020A0E3           MOV      R2,#+0
   \   000008B4   4B3883E3           ORR      R3,R3,#0x4B0000
   \                     ??CreateBackground_26:
   \   000008B8   ........           BL       __aeabi_ddiv
   \   000008BC   86FFFFEA           B        ??CreateBackground_19
   \                     ??CreateBackground_25:
   \   000008C0   A01A81E2           ADD      R1,R1,#+655360
   \   000008C4   ........           BL       __aeabi_cfcmple
   \   000008C8   0800002A           BCS      ??CreateBackground_27
   \   000008CC   0000A0E3           MOV      R0,#+0
   \   000008D0   A117C1E3           BIC      R1,R1,#0x2840000
   \   000008D4   0420A0E1           MOV      R2,R4
   \   000008D8   0530A0E1           MOV      R3,R5
   \   000008DC   ........           BL       __aeabi_dsub
   \   000008E0   4034A0E3           MOV      R3,#+1073741824
   \   000008E4   0020A0E3           MOV      R2,#+0
   \   000008E8   4A3883E3           ORR      R3,R3,#0x4A0000
   \   000008EC   D8FFFFEA           B        ??CreateBackground_23
   \                     ??CreateBackground_27:
   \   000008F0   A01A81E2           ADD      R1,R1,#+655360
   \   000008F4   ........           BL       __aeabi_cfcmple
   \   000008F8   0900002A           BCS      ??CreateBackground_28
   \   000008FC   4014A0E3           MOV      R1,#+1073741824
   \   00000900   0000A0E3           MOV      R0,#+0
   \   00000904   621881E3           ORR      R1,R1,#0x620000
   \   00000908   0420A0E1           MOV      R2,R4
   \   0000090C   0530A0E1           MOV      R3,R5
   \   00000910   ........           BL       __aeabi_dsub
   \   00000914   4034A0E3           MOV      R3,#+1073741824
   \   00000918   0020A0E3           MOV      R2,#+0
   \   0000091C   473883E3           ORR      R3,R3,#0x470000
   \   00000920   E4FFFFEA           B        ??CreateBackground_26
   \                     ??CreateBackground_28:
   \   00000924   A01A81E3           ORR      R1,R1,#0xA0000
   \   00000928   ........           BL       __aeabi_cfcmple
   \   0000092C   0800002A           BCS      ??CreateBackground_29
   \                     ??CreateBackground_30:
   \   00000930   0000A0E3           MOV      R0,#+0
   \   00000934   ........           LDR      R1,??DataTable6_5  ;; 0x40638000
   \   00000938   0420A0E1           MOV      R2,R4
   \   0000093C   0530A0E1           MOV      R3,R5
   \   00000940   ........           BL       __aeabi_dsub
   \   00000944   4034A0E3           MOV      R3,#+1073741824
   \   00000948   0020A0E3           MOV      R2,#+0
   \   0000094C   4E3883E3           ORR      R3,R3,#0x4E0000
   \   00000950   BFFFFFEA           B        ??CreateBackground_23
   \                     ??CreateBackground_29:
   \   00000954   801A81E2           ADD      R1,R1,#+524288
   \   00000958   ........           BL       __aeabi_cfcmple
   \   0000095C   0200002A           BCS      ??CreateBackground_31
   \                     ??CreateBackground_32:
   \   00000960   0000A0E3           MOV      R0,#+0
   \   00000964   ........           LDR      R1,??DataTable6_5  ;; 0x40638000
   \   00000968   54FFFFEA           B        ??CreateBackground_18
   \                     ??CreateBackground_31:
   \   0000096C   501A81E3           ORR      R1,R1,#0x50000
   \   00000970   ........           BL       __aeabi_cfcmple
   \   00000974   F9FFFF2A           BCS      ??CreateBackground_32
   \   00000978   ECFFFFEA           B        ??CreateBackground_30
    302          		else if (angle < 115)
   \                     ??CreateBackground_20:
   \   0000097C   0600A0E1           MOV      R0,R6
   \   00000980   ........           BL       __aeabi_i2d
   \   00000984   0190A0E1           MOV      R9,R1
   \   00000988   0080A0E1           MOV      R8,R0
   \   0000098C   4214A0E3           MOV      R1,#+1107296256
   \   00000990   0700A0E1           MOV      R0,R7
   \   00000994   E61881E3           ORR      R1,R1,#0xE60000
   \   00000998   ........           BL       __aeabi_cfcmple
   \   0000099C   0900002A           BCS      ??CreateBackground_33
    303          			y2 -= GUI_GetFontDistY() * 1.15;
   \   000009A0   ........           BL       GUI_GetFontDistY
   \   000009A4   ........           BL       __aeabi_i2d
   \   000009A8   0020A0E1           MOV      R2,R0
   \   000009AC   0130A0E1           MOV      R3,R1
   \   000009B0   ........           ADR      R0,??DataTable5_2
   \   000009B4   130000EA           B        ??CreateBackground_34
   \                     ??CreateBackground_14:
   \   000009B8   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        
   \   000009C0   333333333333       DC32     0x33333333,0x400B3333
   \              0B40        
    304          		else if (angle < 125)
   \                     ??CreateBackground_33:
   \   000009C8   501981E2           ADD      R1,R1,#+1310720
   \   000009CC   ........           BL       __aeabi_cfcmple
   \   000009D0   0700002A           BCS      ??CreateBackground_35
    305          			y2 -= GUI_GetFontDistY() * 1.25;
   \   000009D4   ........           BL       GUI_GetFontDistY
   \   000009D8   ........           BL       __aeabi_i2d
   \   000009DC   0130A0E1           MOV      R3,R1
   \   000009E0   0020A0E1           MOV      R2,R0
   \   000009E4   F015A0E3           MOV      R1,#+1006632960
   \   000009E8   0000A0E3           MOV      R0,#+0
   \   000009EC   FD1781E3           ORR      R1,R1,#0x3F40000
   \   000009F0   050000EA           B        ??CreateBackground_36
    306          		else
    307          			y2 -= GUI_GetFontDistY() * 1.35;
   \                     ??CreateBackground_35:
   \   000009F4   ........           BL       GUI_GetFontDistY
   \   000009F8   ........           BL       __aeabi_i2d
   \   000009FC   0020A0E1           MOV      R2,R0
   \   00000A00   0130A0E1           MOV      R3,R1
   \   00000A04   ........           ADR      R0,??DataTable5_3
   \                     ??CreateBackground_34:
   \   00000A08   030090E8           LDM      R0,{R0,R1}
   \                     ??CreateBackground_36:
   \   00000A0C   ........           BL       __aeabi_dmul
   \   00000A10   0020A0E1           MOV      R2,R0
   \   00000A14   0130A0E1           MOV      R3,R1
   \   00000A18   0800A0E1           MOV      R0,R8
   \   00000A1C   0910A0E1           MOV      R1,R9
   \   00000A20   ........           BL       __aeabi_dsub
   \   00000A24   ........           BL       __aeabi_d2iz
   \   00000A28   0060A0E1           MOV      R6,R0
    308          
    309          		x2 += GUI_GetStringDistX(str) / 2;
   \                     ??CreateBackground_21:
   \   00000A2C   1C008DE2           ADD      R0,SP,#+28
   \   00000A30   ........           BL       GUI_GetStringDistX
   \   00000A34   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000A38   C05085E0           ADD      R5,R5,R0, ASR #+1
    310          		if (angle > 140)
   \   00000A3C   5013A0E3           MOV      R1,#+1073741825
   \   00000A40   0700A0E1           MOV      R0,R7
   \   00000A44   C31781E3           ORR      R1,R1,#0x30C0000
   \   00000A48   ........           BL       __aeabi_cfrcmple
    311          			x2 -= 12;
   \   00000A4C   0C504592           SUBLS    R5,R5,#+12
   \   00000A50   0200009A           BLS      ??CreateBackground_37
    312          		else if (angle > 120)
   \   00000A54   701941E2           SUB      R1,R1,#+1835008
   \   00000A58   ........           BL       __aeabi_cfrcmple
    313          			x2 -= 7;
   \   00000A5C   07504592           SUBLS    R5,R5,#+7
    314          
    315          		GUI_SetColor(GUI_BLACK);
   \                     ??CreateBackground_37:
   \   00000A60   0000A0E3           MOV      R0,#+0
   \   00000A64   ........           BL       GUI_SetColor
    316          		GUI_DispStringAt(str, x2 + 1, y2 + 1);
   \   00000A68   012086E2           ADD      R2,R6,#+1
   \   00000A6C   011085E2           ADD      R1,R5,#+1
   \   00000A70   1C008DE2           ADD      R0,SP,#+28
   \   00000A74   ........           BL       GUI_DispStringAt
    317          		GUI_SetColor(GUI_WHITE);
   \   00000A78   FF04E0E3           MVN      R0,#-16777216
   \   00000A7C   ........           BL       GUI_SetColor
    318          		GUI_DispStringAt(str, x2, y2);
   \   00000A80   0620A0E1           MOV      R2,R6
   \   00000A84   0510A0E1           MOV      R1,R5
   \   00000A88   1C008DE2           ADD      R0,SP,#+28
   \   00000A8C   ........           BL       GUI_DispStringAt
    319          
    320          		//GUI_SetPenSize(60);
    321          		//GUI_DrawArc(iXCenter, iYCenter, ARC_RADIUS, ARC_RADIUS, angle, angle);
    322          		GUI_SetPenSize(iTemp);
   \   00000A90   0400A0E1           MOV      R0,R4
   \   00000A94   ........           BL       GUI_SetPenSize
    323          	}
   \   00000A98   00009DE5           LDR      R0,[SP, #+0]
   \   00000A9C   04109DE5           LDR      R1,[SP, #+4]
   \   00000AA0   010080E2           ADD      R0,R0,#+1
   \   00000AA4   00008DE5           STR      R0,[SP, #+0]
   \   00000AA8   010050E1           CMP      R0,R1
   \   00000AAC   BCFEFFBA           BLT      ??CreateBackground_13
    324          
    325          	// Draw the end lines
    326          	angle = 86;
    327          		radians = DEGREES_TO_RADIANS(angle);
    328          
    329          		dCos = cos(radians);
   \                     ??CreateBackground_12:
   \   00000AB0   ........           LDR      R5,??DataTable6_7  ;; 0x3fc02037
   \   00000AB4   0110A0E3           MOV      R1,#+1
   \   00000AB8   0500A0E1           MOV      R0,R5
   \   00000ABC   ........           BL       __iar_FSin
    330          		dSin = sin(radians);
   \   00000AC0   0010A0E3           MOV      R1,#+0
   \   00000AC4   0500A0E1           MOV      R0,R5
   \   00000AC8   ........           BL       __iar_FSin
    331          
    332          	radius = iOuterArcRadius + 30;
    333          		//x1 = iXCenter + (int)(dCos * (radius - 5));
    334          		//y1 = iYCenter + (int)(dSin * (radius - 5) * -1);
    335          		//x2 = iXCenter + (int)(dCos * (radius));
    336          		//y2 = iYCenter + (int)(dSin * (radius) * -1);
    337          
    338          		x1 = xLoc + xSize - 2;
   \   00000ACC   28009DE5           LDR      R0,[SP, #+40]
   \   00000AD0   28109DE5           LDR      R1,[SP, #+40]
   \   00000AD4   140090E5           LDR      R0,[R0, #+20]
   \   00000AD8   1C1091E5           LDR      R1,[R1, #+28]
   \   00000ADC   000081E0           ADD      R0,R1,R0
   \   00000AE0   025040E2           SUB      R5,R0,#+2
    339          		y1 = iInnerY - ARC_RADIUS;
    340          		x2 = x1;
    341          		y2 = iOuterY - ARC_RADIUS;
    342          
    343          		//GUI_SetColor(GUI_BLACK);
    344          		//GUI_SetPenSize(iTemp + 2);
    345          		//GUI_DrawLine(x1, y1, x2, y2);
    346          		GUI_SetColor(GUI_WHITE);
   \   00000AE4   FF04E0E3           MVN      R0,#-16777216
   \   00000AE8   ........           BL       GUI_SetColor
    347          		GUI_SetPenSize(iTemp);
   \   00000AEC   FF0004E2           AND      R0,R4,#0xFF
   \   00000AF0   ........           BL       GUI_SetPenSize
    348          		GUI_DrawLine(x1, y1, x2, y2);
   \   00000AF4   0230A0E3           MOV      R3,#+2
   \   00000AF8   0520A0E1           MOV      R2,R5
   \   00000AFC   5A10A0E3           MOV      R1,#+90
   \   00000B00   0500A0E1           MOV      R0,R5
   \   00000B04   ........           BL       GUI_DrawLine
    349          
    350          	// draw the Gear indicator background
    351          	if(ShowGear)
   \   00000B08   28009DE5           LDR      R0,[SP, #+40]
   \   00000B0C   4C00D0E5           LDRB     R0,[R0, #+76]
   \   00000B10   000050E3           CMP      R0,#+0
   \   00000B14   1F00000A           BEQ      ??CreateBackground_38
    352          	{
    353          		GUI_SetColor(GUI_BLACK);
   \   00000B18   0000A0E3           MOV      R0,#+0
   \   00000B1C   ........           BL       GUI_SetColor
    354          		x1 = xLoc + xSize - 50;
   \   00000B20   28009DE5           LDR      R0,[SP, #+40]
   \   00000B24   28109DE5           LDR      R1,[SP, #+40]
   \   00000B28   140090E5           LDR      R0,[R0, #+20]
   \   00000B2C   1C1091E5           LDR      R1,[R1, #+28]
   \   00000B30   000081E0           ADD      R0,R1,R0
   \   00000B34   325040E2           SUB      R5,R0,#+50
    355          		y1 = yLoc + 15;
   \   00000B38   28009DE5           LDR      R0,[SP, #+40]
    356          		GUI_FillRoundedRect(x1, y1, x1 + GEAR_HEIGHT, y1 + GEAR_WIDTH, 5);
   \   00000B3C   282085E2           ADD      R2,R5,#+40
   \   00000B40   180090E5           LDR      R0,[R0, #+24]
   \   00000B44   0FA080E2           ADD      R10,R0,#+15
   \   00000B48   0500A0E3           MOV      R0,#+5
   \   00000B4C   00008DE5           STR      R0,[SP, #+0]
   \   00000B50   28308AE2           ADD      R3,R10,#+40
   \   00000B54   0A10A0E1           MOV      R1,R10
   \   00000B58   0500A0E1           MOV      R0,R5
   \   00000B5C   ........           BL       GUI_FillRoundedRect
    357          
    358          		rectGear.x0 = x1 + 1;
   \   00000B60   28009DE5           LDR      R0,[SP, #+40]
   \   00000B64   011085E2           ADD      R1,R5,#+1
   \   00000B68   B816C0E1           STRH     R1,[R0, #+104]
    359          		rectGear.y0 = y1 + 1;
   \   00000B6C   28009DE5           LDR      R0,[SP, #+40]
   \   00000B70   01108AE2           ADD      R1,R10,#+1
   \   00000B74   BA16C0E1           STRH     R1,[R0, #+106]
    360          		rectGear.x1 = x1 + GEAR_WIDTH - 2;
   \   00000B78   28009DE5           LDR      R0,[SP, #+40]
   \   00000B7C   261085E2           ADD      R1,R5,#+38
   \   00000B80   BC16C0E1           STRH     R1,[R0, #+108]
    361          		rectGear.y1 = y1 + GEAR_HEIGHT - 2;
   \   00000B84   28009DE5           LDR      R0,[SP, #+40]
   \   00000B88   26108AE2           ADD      R1,R10,#+38
   \   00000B8C   BE16C0E1           STRH     R1,[R0, #+110]
    362          		GUI_SetColor(GUI_WHITE);
   \   00000B90   FF04E0E3           MVN      R0,#-16777216
   \   00000B94   ........           BL       GUI_SetColor
    363          	}
    364          	GUI_SetPenSize(1);
   \                     ??CreateBackground_38:
   \   00000B98   0100A0E3           MOV      R0,#+1
   \   00000B9C   ........           BL       GUI_SetPenSize
    365          	GUI_SelectLCD();
   \   00000BA0   ........           BL       GUI_SelectLCD
    366          }
   \   00000BA4   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000BA8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    367          

   \                                 In section .text, align 4, keep-with-next
    368          void RPMSweep::SetValue(float dValue)
    369          {
   \                     _ZN8RPMSweep8SetValueEf:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    370          	Value = dValue;
   \   00000008   081084E5           STR      R1,[R4, #+8]
    371          
    372          	angle = 60 - (Value * dValuePerDeg);
   \   0000000C   480094E5           LDR      R0,[R4, #+72]
   \   00000010   ........           BL       __aeabi_fmul
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   4004A0E3           MOV      R0,#+1073741824
   \   0000001C   9C0780E3           ORR      R0,R0,#0x2700000
   \   00000020   ........           BL       __aeabi_fsub
   \   00000024   740084E5           STR      R0,[R4, #+116]
    373          	radians = DEGREES_TO_RADIANS(angle);
   \   00000028   ........           BL       __aeabi_f2d
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0130A0E1           MOV      R3,R1
   \   00000034   ........           ADR      R0,??DataTable5_4
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   ........           BL       __aeabi_dmul
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   ........           LDR      R3,??DataTable6  ;; 0x40668000
   \   00000048   ........           BL       __aeabi_ddiv
   \   0000004C   ........           BL       __aeabi_d2f
   \   00000050   780084E5           STR      R0,[R4, #+120]
    374          	
    375          	dTan = tan(radians);
   \   00000054   ........           BL       tanf
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   705084E5           STR      R5,[R4, #+112]
    376          
    377          	pts[0].x = 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   B805C4E1           STRH     R0,[R4, #+88]
    378          	pts[0].y = 0;
   \   00000068   BA05C4E1           STRH     R0,[R4, #+90]
    379          	pts[1].x = 23;
   \   0000006C   1710A0E3           MOV      R1,#+23
   \   00000070   BC15C4E1           STRH     R1,[R4, #+92]
    380          	pts[1].y = 0;
   \   00000074   BE05C4E1           STRH     R0,[R4, #+94]
    381          	pts[2].x = 23;
    382          	pts[2].y = -566;
   \   00000078   3560E0E3           MVN      R6,#+53
   \   0000007C   B016C4E1           STRH     R1,[R4, #+96]
   \   00000080   806FC6E3           BIC      R6,R6,#0x200
   \   00000084   B266C4E1           STRH     R6,[R4, #+98]
    383          	pts[3].x = -1 * (int)(dTan * (float)iYCenter);
   \   00000088   540094E5           LDR      R0,[R4, #+84]
   \   0000008C   ........           BL       __aeabi_i2f
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   ........           BL       __aeabi_fmul
   \   00000098   ........           BL       __aeabi_f2iz
   \   0000009C   000060E2           RSB      R0,R0,#+0
   \   000000A0   B406C4E1           STRH     R0,[R4, #+100]
    384          	pts[3].y = -566;
   \   000000A4   B666C4E1           STRH     R6,[R4, #+102]
    385          }
   \   000000A8   7080BDE8           POP      {R4-R6,PC}       ;; return
    386          

   \                                 In section .text, align 4, keep-with-next
    387          int RPMSweep::GetPixelsFromValue(float dValue)
    388          {
   \                     _ZN8RPMSweep18GetPixelsFromValueEf:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    389          	int iPixels;
    390          	float dValuePerPix;
    391          
    392          	dValuePerPix = (iMax - iMin) / RPMSWEEP_PIXELS;
    393          	iPixels = (int)(dValue / dValuePerPix);
    394          
    395          	return iPixels;
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   000041E0           SUB      R0,R1,R0
   \   00000014   ........           LDR      R1,??DataTable6_8  ;; 0xe00e00e1
   \   00000018   9021C1E0           SMULL    R2,R1,R0,R1
   \   0000001C   001081E0           ADD      R1,R1,R0
   \   00000020   C104B0E1           ASRS     R0,R1,#+9
   \   00000024   01008042           ADDMI    R0,R0,#+1
   \   00000028   ........           BL       __aeabi_i2f
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       __aeabi_fdiv
   \   00000038   1040BDE8           POP      {R4,LR}
   \   0000003C   ........           B        __aeabi_f2iz     ;; tailcall
    396          }
    397          
    398          

   \                                 In section .text, align 4, keep-with-next
    399          void RPMSweep::SetGear(int iGear)
    400          {
   \                     _ZN8RPMSweep7SetGearEi:
   \   00000000   00402DE9           PUSH     {LR}
    401          	Gear = iGear;
    402          	if (Gear > 0)
   \   00000004   0120A0E1           MOV      R2,R1
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   441080E5           STR      R1,[R0, #+68]
   \   00000010   010052E3           CMP      R2,#+1
   \   00000014   030000BA           BLT      ??SetGear_0
    403          		sprintf(strGear, "%1.0d", Gear);
   \   00000018   ........           ADR      R1,`?<Constant "%1.0d">`
   \   0000001C   4D0080E2           ADD      R0,R0,#+77
   \   00000020   ........           BL       sprintf
   \   00000024   010000EA           B        ??SetGear_1
    404          	else
    405          		strGear[0] = '\0';
   \                     ??SetGear_0:
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   4D10C0E5           STRB     R1,[R0, #+77]
    406          }
   \                     ??SetGear_1:
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   0080BDE8           POP      {PC}             ;; return
    407          

   \                                 In section .text, align 4, keep-with-next
    408          int RPMSweep::GetXIntersect(float iXCenter, float iYCenter, float Radius, int x1, int y1, int x2, int y2, int angle)
    409          {
   \                     _ZN8RPMSweep13GetXIntersectEfffiiiii:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0370A0E1           MOV      R7,R3
   \   0000000C   40609DE5           LDR      R6,[SP, #+64]
   \   00000010   44809DE5           LDR      R8,[SP, #+68]
   \   00000014   48009DE5           LDR      R0,[SP, #+72]
   \   00000018   4C509DE5           LDR      R5,[SP, #+76]
   \   0000001C   50909DE5           LDR      R9,[SP, #+80]
    410          	int x;
    411          	float Slope, radians, iYIntersect, dPart1, dPart2;
    412          	Slope = ((float)y1 - (float)y2) / ((float)x1 - (float)x2);
   \   00000020   ........           BL       __aeabi_i2f
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       __aeabi_i2f
   \   00000030   0050A0E1           MOV      R5,R0
   \   00000034   0800A0E1           MOV      R0,R8
   \   00000038   ........           BL       __aeabi_i2f
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   ........           BL       __aeabi_fsub
   \   00000044   0080A0E1           MOV      R8,R0
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BL       __aeabi_i2f
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   ........           BL       __aeabi_fsub
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   ........           BL       __aeabi_fdiv
   \   00000064   0060A0E1           MOV      R6,R0
    413          	radians = DEGREES_TO_RADIANS(angle);
    414          	iYIntersect = y2 - (tan(radians) * x2);
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   ........           BL       __aeabi_i2d
   \   00000070   0020A0E1           MOV      R2,R0
   \   00000074   0130A0E1           MOV      R3,R1
   \   00000078   ........           ADR      R0,??DataTable6_6
   \   0000007C   030090E8           LDM      R0,{R0,R1}
   \   00000080   ........           BL       __aeabi_dmul
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   ........           LDR      R3,??DataTable6  ;; 0x40668000
   \   0000008C   ........           BL       __aeabi_ddiv
   \   00000090   ........           BL       __aeabi_d2f
   \   00000094   ........           BL       tanf
   \   00000098   0010A0E1           MOV      R1,R0
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       __aeabi_fmul
   \   000000A4   0010A0E1           MOV      R1,R0
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       __aeabi_fsub
   \   000000B0   0080A0E1           MOV      R8,R0
    415           	//iTemp = SQ(Radius);
    416          
    417          	//iTemp = sqrt((float)((SQ(Slope) + 1) * SQ(iRadius) - SQ(iYIntersect) + (2 * iYCenter - iXCenter * Slope) * iYIntersect - SQ(iXCenter) * SQ(Slope) + 2 * iXCenter * iYCenter * Slope - SQ(iYCenter))) + Slope * (iYIntersect - iXCenter) - iYCenter;
    418          	//dPart1 = (SQ(Slope) + 1) * SQ(iRadius) - SQ(iXCenter) * SQ(Slope) + (2 * iXCenter * iYCenter - 2 * iYIntersect * iXCenter) * Slope - SQ(iYCenter) + 2 * iYIntersect * iYCenter - SQ(Slope) ;
    419          	//dPart2 = sqrt(dPart1) + (iYIntersect - iYCenter) * Slope - iXCenter;
    420          	//dPart2 = sqrt(dPart1) + (iYCenter - iYIntersect) * Slope + iXCenter;
    421          
    422          	dPart1 = -1.0 * SQ(iYIntersect) + (2.0 * iYCenter - 2 * Slope * iXCenter) * iYIntersect - SQ(iYCenter) + 2.0 * Slope * iXCenter * iYCenter - SQ(Slope) * SQ(iXCenter) + SQ(Radius) * SQ(Slope) + SQ(Radius);
    423          	dPart2 = sqrt(dPart1) + Slope * iYIntersect - Slope * iYCenter - iXCenter;
    424          	
    425          	x = (int)(dPart2 / (SQ(Slope) + 1.0));
    426          	return x;
   \   000000B4   ........           BL       __aeabi_f2d
   \   000000B8   0040A0E1           MOV      R4,R0
   \   000000BC   0150A0E1           MOV      R5,R1
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   0710A0E1           MOV      R1,R7
   \   000000C8   ........           BL       __aeabi_fmul
   \   000000CC   0090A0E1           MOV      R9,R0
   \   000000D0   0600A0E1           MOV      R0,R6
   \   000000D4   0610A0E1           MOV      R1,R6
   \   000000D8   ........           BL       __aeabi_fmul
   \   000000DC   0070A0E1           MOV      R7,R0
   \   000000E0   18009DE5           LDR      R0,[SP, #+24]
   \   000000E4   ........           BL       __aeabi_f2d
   \   000000E8   03008DE8           STM      SP,{R0,R1}
   \   000000EC   F800CDE1           STRD     R0,R1,[SP, #+8]
   \   000000F0   0600A0E1           MOV      R0,R6
   \   000000F4   0810A0E1           MOV      R1,R8
   \   000000F8   ........           BL       __aeabi_fmul
   \   000000FC   0080A0E1           MOV      R8,R0
   \   00000100   B014A0E3           MOV      R1,#-1342177280
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   FF1681E3           ORR      R1,R1,#0xFF00000
   \   0000010C   0420A0E1           MOV      R2,R4
   \   00000110   0530A0E1           MOV      R3,R5
   \   00000114   ........           BL       __aeabi_dmul
   \   00000118   0420A0E1           MOV      R2,R4
   \   0000011C   0530A0E1           MOV      R3,R5
   \   00000120   ........           BL       __aeabi_dmul
   \   00000124   03008DE8           STM      SP,{R0,R1}
   \   00000128   D800CDE1           LDRD     R0,R1,[SP, #+8]
   \   0000012C   0020A0E1           MOV      R2,R0
   \   00000130   0130A0E1           MOV      R3,R1
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   4014A0E3           MOV      R1,#+1073741824
   \   0000013C   ........           BL       __aeabi_dmul
   \   00000140   00A0A0E1           MOV      R10,R0
   \   00000144   01B0A0E1           MOV      R11,R1
   \   00000148   4014A0E3           MOV      R1,#+1073741824
   \   0000014C   0600A0E1           MOV      R0,R6
   \   00000150   ........           BL       __aeabi_fmul
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   14009DE5           LDR      R0,[SP, #+20]
   \   0000015C   ........           BL       __aeabi_fmul
   \   00000160   ........           BL       __aeabi_f2d
   \   00000164   0020A0E1           MOV      R2,R0
   \   00000168   0130A0E1           MOV      R3,R1
   \   0000016C   0A00A0E1           MOV      R0,R10
   \   00000170   0B10A0E1           MOV      R1,R11
   \   00000174   ........           BL       __aeabi_dsub
   \   00000178   0420A0E1           MOV      R2,R4
   \   0000017C   0530A0E1           MOV      R3,R5
   \   00000180   ........           BL       __aeabi_dmul
   \   00000184   00209DE5           LDR      R2,[SP, #+0]
   \   00000188   04309DE5           LDR      R3,[SP, #+4]
   \   0000018C   ........           BL       __aeabi_dadd
   \   00000190   0040A0E1           MOV      R4,R0
   \   00000194   18009DE5           LDR      R0,[SP, #+24]
   \   00000198   0150A0E1           MOV      R5,R1
   \   0000019C   0010A0E1           MOV      R1,R0
   \   000001A0   ........           BL       __aeabi_fmul
   \   000001A4   ........           BL       __aeabi_f2d
   \   000001A8   0020A0E1           MOV      R2,R0
   \   000001AC   0130A0E1           MOV      R3,R1
   \   000001B0   0400A0E1           MOV      R0,R4
   \   000001B4   0510A0E1           MOV      R1,R5
   \   000001B8   ........           BL       __aeabi_dsub
   \   000001BC   00A0A0E1           MOV      R10,R0
   \   000001C0   01B0A0E1           MOV      R11,R1
   \   000001C4   0600A0E1           MOV      R0,R6
   \   000001C8   ........           BL       __aeabi_f2d
   \   000001CC   0020A0E1           MOV      R2,R0
   \   000001D0   0130A0E1           MOV      R3,R1
   \   000001D4   0000A0E3           MOV      R0,#+0
   \   000001D8   4014A0E3           MOV      R1,#+1073741824
   \   000001DC   ........           BL       __aeabi_dmul
   \   000001E0   0040A0E1           MOV      R4,R0
   \   000001E4   0150A0E1           MOV      R5,R1
   \   000001E8   14009DE5           LDR      R0,[SP, #+20]
   \   000001EC   ........           BL       __aeabi_f2d
   \   000001F0   0420A0E1           MOV      R2,R4
   \   000001F4   0530A0E1           MOV      R3,R5
   \   000001F8   ........           BL       __aeabi_dmul
   \   000001FC   D820CDE1           LDRD     R2,R3,[SP, #+8]
   \   00000200   ........           BL       __aeabi_dmul
   \   00000204   0A20A0E1           MOV      R2,R10
   \   00000208   0B30A0E1           MOV      R3,R11
   \   0000020C   ........           BL       __aeabi_dadd
   \   00000210   0040A0E1           MOV      R4,R0
   \   00000214   0150A0E1           MOV      R5,R1
   \   00000218   14109DE5           LDR      R1,[SP, #+20]
   \   0000021C   0700A0E1           MOV      R0,R7
   \   00000220   ........           BL       __aeabi_fmul
   \   00000224   14109DE5           LDR      R1,[SP, #+20]
   \   00000228   ........           BL       __aeabi_fmul
   \   0000022C   ........           BL       __aeabi_f2d
   \   00000230   0020A0E1           MOV      R2,R0
   \   00000234   0130A0E1           MOV      R3,R1
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   0510A0E1           MOV      R1,R5
   \   00000240   ........           BL       __aeabi_dsub
   \   00000244   0040A0E1           MOV      R4,R0
   \   00000248   0150A0E1           MOV      R5,R1
   \   0000024C   0900A0E1           MOV      R0,R9
   \   00000250   0610A0E1           MOV      R1,R6
   \   00000254   ........           BL       __aeabi_fmul
   \   00000258   0010A0E1           MOV      R1,R0
   \   0000025C   0600A0E1           MOV      R0,R6
   \   00000260   ........           BL       __aeabi_fmul
   \   00000264   ........           BL       __aeabi_f2d
   \   00000268   0420A0E1           MOV      R2,R4
   \   0000026C   0530A0E1           MOV      R3,R5
   \   00000270   ........           BL       __aeabi_dadd
   \   00000274   0040A0E1           MOV      R4,R0
   \   00000278   0150A0E1           MOV      R5,R1
   \   0000027C   0900A0E1           MOV      R0,R9
   \   00000280   ........           BL       __aeabi_f2d
   \   00000284   0420A0E1           MOV      R2,R4
   \   00000288   0530A0E1           MOV      R3,R5
   \   0000028C   ........           BL       __aeabi_dadd
   \   00000290   ........           BL       __aeabi_d2f
   \   00000294   ........           BL       sqrtf
   \   00000298   0010A0E1           MOV      R1,R0
   \   0000029C   0800A0E1           MOV      R0,R8
   \   000002A0   ........           BL       __aeabi_fadd
   \   000002A4   0040A0E1           MOV      R4,R0
   \   000002A8   18109DE5           LDR      R1,[SP, #+24]
   \   000002AC   0600A0E1           MOV      R0,R6
   \   000002B0   ........           BL       __aeabi_fmul
   \   000002B4   0010A0E1           MOV      R1,R0
   \   000002B8   0400A0E1           MOV      R0,R4
   \   000002BC   ........           BL       __aeabi_fsub
   \   000002C0   14109DE5           LDR      R1,[SP, #+20]
   \   000002C4   ........           BL       __aeabi_fsub
   \   000002C8   ........           BL       __aeabi_f2d
   \   000002CC   0040A0E1           MOV      R4,R0
   \   000002D0   0150A0E1           MOV      R5,R1
   \   000002D4   0700A0E1           MOV      R0,R7
   \   000002D8   ........           BL       __aeabi_f2d
   \   000002DC   0130A0E1           MOV      R3,R1
   \   000002E0   0020A0E1           MOV      R2,R0
   \   000002E4   C015A0E3           MOV      R1,#+805306368
   \   000002E8   0000A0E3           MOV      R0,#+0
   \   000002EC   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000002F0   ........           BL       __aeabi_dadd
   \   000002F4   0020A0E1           MOV      R2,R0
   \   000002F8   0130A0E1           MOV      R3,R1
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   0510A0E1           MOV      R1,R5
   \   00000304   ........           BL       __aeabi_ddiv
   \   00000308   1CD08DE2           ADD      SP,SP,#+28
   \   0000030C   F04FBDE8           POP      {R4-R11,LR}
   \   00000310   ........           B        __aeabi_d2iz     ;; tailcall
    427          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25640000           DC8 37, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp RPMSweep::subobject RPMSweep(int, int, int, int, int, int, int, int, Alarm *, bool)
   \                     _ZN8RPMSweepC2EiiiiiiiiP5Alarmb:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   18009DE5           LDR      R0,[SP, #+24]
   \   0000000C   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000010   20E09DE5           LDR      LR,[SP, #+32]
   \   00000014   24609DE5           LDR      R6,[SP, #+36]
   \   00000018   28709DE5           LDR      R7,[SP, #+40]
   \   0000001C   2C509DE5           LDR      R5,[SP, #+44]
   \   00000020   3080DDE5           LDRB     R8,[SP, #+48]
   \   00000024   141084E5           STR      R1,[R4, #+20]
   \   00000028   182084E5           STR      R2,[R4, #+24]
   \   0000002C   1C3084E5           STR      R3,[R4, #+28]
   \   00000030   200084E5           STR      R0,[R4, #+32]
   \   00000034   4C80C4E5           STRB     R8,[R4, #+76]
   \   00000038   00E084E5           STR      LR,[R4, #+0]
   \   0000003C   04C084E5           STR      R12,[R4, #+4]
   \   00000040   0C6084E5           STR      R6,[R4, #+12]
   \   00000044   107084E5           STR      R7,[R4, #+16]
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   ........           BL       __aeabi_i2f
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   040094E5           LDR      R0,[R4, #+4]
   \   00000058   ........           BL       __aeabi_i2f
   \   0000005C   0010A0E1           MOV      R1,R0
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       __aeabi_fsub
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   4004A0E3           MOV      R0,#+1073741824
   \   00000070   A00780E3           ORR      R0,R0,#0x2800000
   \   00000074   ........           BL       __aeabi_fdiv
   \   00000078   480084E5           STR      R0,[R4, #+72]
   \   0000007C   C500A0E3           MOV      R0,#+197
   \   00000080   7C5084E5           STR      R5,[R4, #+124]
   \   00000084   400F80E3           ORR      R0,R0,#0x100
   \   00000088   500084E5           STR      R0,[R4, #+80]
   \   0000008C   710080E2           ADD      R0,R0,#+113
   \   00000090   540084E5           STR      R0,[R4, #+84]
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       _ZN8RPMSweep16CreateBackgroundEv
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp RPMSweep::subobject ~RPMSweep()
   \                     _ZN8RPMSweepD2Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   800094E5           LDR      R0,[R4, #+128]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   25640000           DC8      0x25, 0x64, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     bmDigitalBarBlueSweep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     bmTransSweepTachOnAsphalt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   666666666666       DC32     0x66666666,0x3FF26666
   \              F23F        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   9A9999999999       DC32     0x9999999A,0x3FF59999
   \              F53F        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   ........           DC32     GUI_FontD32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00806640           DC32     0x40668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   00C06240           DC32     0x4062c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   00806140           DC32     0x40618000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   00804B40           DC32     0x404b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   00806340           DC32     0x40638000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   1E264454FB21       DC32     0x5444261E,0x400921FB
   \              0940        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   3720C03F           DC32     0x3fc02037

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   E1000EE0           DC32     0xe00e00e1

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%1.0d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25312E306400       DC8 37, 49, 46, 48, 100, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     RPMSweep::CreateBackground()       80
     RPMSweep::DrawControl()             8
     RPMSweep::GetPixelsFromValue(float)
                                         8
     RPMSweep::GetXIntersect(float, float, float, int, int, int, int, int)
                                        64
     RPMSweep::RPMSweep(int, int, int, int, int, int, int, int, Alarm *, bool)
                                        24
     RPMSweep::SetGear(int)              8
     RPMSweep::SetValue(float)          16
     RPMSweep::subobject RPMSweep(int, int, int, int, int, int, int, int, Alarm *, bool)
                                        24
     RPMSweep::subobject ~RPMSweep()
                                         8
     RPMSweep::~RPMSweep()               8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     RPMSweep::RPMSweep(int, int, int, int, int, int, int, int, Alarm *, bool)
                                     164
     RPMSweep::~RPMSweep()            24
     RPMSweep::DrawControl()         108
     RPMSweep::CreateBackground()   2988
     RPMSweep::SetValue(float)       172
     RPMSweep::GetPixelsFromValue(float)
                                      64
     RPMSweep::SetGear(int)           56
     RPMSweep::GetXIntersect(float, float, float, int, int, int, int, int)
                                     788
     ?<Constant "%d">                  4
     RPMSweep::subobject RPMSweep(int, int, int, int, int, int, int, int, Alarm *, bool)
                                     164
     RPMSweep::subobject ~RPMSweep()
                                      24
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable5_1                    4
     ??DataTable5_2                    8
     ??DataTable5_3                    8
     ??DataTable5_4                    8
     ??DataTable5_5                    4
     ??DataTable6                      4
     ??DataTable6_1                    4
     ??DataTable6_2                    4
     ??DataTable6_3                    4
     ??DataTable6_4                    4
     ??DataTable6_5                    4
     ??DataTable6_6                    8
     ??DataTable6_7                    4
     ??DataTable6_8                    4
     ?<Constant "%1.0d">               8

 
     4 bytes in section .rodata
 4 640 bytes in section .text
 
 4 640 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
