###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_ARRAY.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_ARRAY.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_ARRAY.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _ARRAY.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_ARRAY.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_ARRAY.c
     19          Purpose     : Array handling routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_ARRAY_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Private code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       GUI_ARRAY__SethItem
     38          *
     39          * Purpose:
     40          *   Sets an item.
     41          *
     42          * Returns:
     43          *   1: if operation has failed
     44          *   0: OK
     45          *
     46          * Notes:
     47          *   (1) Replacing Items
     48          *       If the item is already assigned
     49          *       (Which means the handle is already != 0), it is freeed. However,
     50          *       the handle is treated as a handle to a data item, not an object.
     51          *       This means the data item is freed, but if the pointer points to
     52          *       an object, the destructor of the object is not called.
     53          */

   \                                 In section .text, align 4, keep-with-next
     54          int GUI_ARRAY__SethItem(GUI_ARRAY_OBJ * pThis, unsigned int Index, WM_HMEM hItem) {
   \                     GUI_ARRAY__SethItem:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0250A0E1           MOV      R5,R2
     55            WM_HMEM   ha;
     56            WM_HMEM * pa;
     57            int r = 1;
     58          
     59            if (Index < (unsigned)pThis->NumItems) {
   \   00000008   B020D0E1           LDRH     R2,[R0, #+0]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   020054E1           CMP      R4,R2
   \   0000001C   0900002A           BCS      ??GUI_ARRAY__SethItem_0
     60              ha = pThis->haHandle;
   \   00000020   040090E5           LDR      R0,[R0, #+4]
     61              if (ha) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0600000A           BEQ      ??GUI_ARRAY__SethItem_0
     62                pa = (WM_HMEM *)GUI_LOCK_H(ha);
     63                pa += Index;
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   044180E0           ADD      R4,R0,R4, LSL #+2
     64                GUI_ALLOC_FreePtr(pa);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       GUI_ALLOC_FreePtr
     65                *pa = hItem;
   \   0000003C   005084E5           STR      R5,[R4, #+0]
     66                GUI_UNLOCK_H(pa);
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
     67                r = 0;
   \   00000044   0010A0E3           MOV      R1,#+0
     68              }
     69            }
     70            return r;
   \                     ??GUI_ARRAY__SethItem_0:
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
     71          }
     72          
     73          /*********************************************************************
     74          *
     75          *       GUI_ARRAY__GethItem
     76          *
     77          * Purpose:
     78          *   Gets the handle of specified item
     79          *
     80          * Notes:
     81          *   (1) Index out of bounds
     82          *   It is permitted to specify an index larger than the
     83          *   array size. In this case, a 0-handle is returned.
     84          */

   \                                 In section .text, align 4, keep-with-next
     85          WM_HMEM GUI_ARRAY__GethItem(const GUI_ARRAY_OBJ * pThis, unsigned int Index) {
   \                     GUI_ARRAY__GethItem:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     86            WM_HMEM h = 0;
     87          
     88            if (Index < (unsigned)pThis->NumItems) {
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   010054E1           CMP      R4,R1
   \   00000018   0500002A           BCS      ??GUI_ARRAY__GethItem_0
     89              WM_HMEM   ha;
     90              WM_HMEM * pa;
     91              ha = pThis->haHandle;
   \   0000001C   040090E5           LDR      R0,[R0, #+4]
     92              if (ha) {
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0200000A           BEQ      ??GUI_ARRAY__GethItem_0
     93                pa = (WM_HMEM *)GUI_LOCK_H(ha);
     94                h = *(pa + Index);
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   045190E7           LDR      R5,[R0, +R4, LSL #+2]
     95                GUI_UNLOCK_H(pa);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     96              }
     97            }
     98            return h;
   \                     ??GUI_ARRAY__GethItem_0:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
     99          }
    100          
    101          /*********************************************************************
    102          *
    103          *       GUI_ARRAY__GetpItemLocked
    104          *
    105          * Purpose:
    106          *   Gets the pointer of specified item
    107          *
    108          * Notes:
    109          *   (1) Index out of bounds
    110          *       It is permitted to specify an index larger than the
    111          *       array size. In this case, a 0-handle is returned.
    112          *   (2) Locking
    113          *       It is the caller's responsibility to lock before calling this
    114          *       function.
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          void * GUI_ARRAY__GetpItemLocked(const GUI_ARRAY_OBJ * pThis, unsigned int Index) {
   \                     GUI_ARRAY__GetpItemLocked:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    117            void * p = NULL;
    118            WM_HMEM h;
    119          
    120            h = GUI_ARRAY__GethItem(pThis, Index);
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   010054E1           CMP      R4,R1
   \   00000018   0A00002A           BCS      ??GUI_ARRAY__GetpItemLocked_0
   \   0000001C   040090E5           LDR      R0,[R0, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0700000A           BEQ      ??GUI_ARRAY__GetpItemLocked_0
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   044190E7           LDR      R4,[R0, +R4, LSL #+2]
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    121            if (h) {
   \   00000034   000054E3           CMP      R4,#+0
   \   00000038   0200000A           BEQ      ??GUI_ARRAY__GetpItemLocked_0
    122              p = GUI_LOCK_H(h);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       GUI_ALLOC_LockH
   \   00000044   0050A0E1           MOV      R5,R0
    123            }
    124            return p;
   \                     ??GUI_ARRAY__GetpItemLocked_0:
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    125          }
    126          
    127          /*********************************************************************
    128          *
    129          *       Public code
    130          *
    131          **********************************************************************
    132          */
    133          /*********************************************************************
    134          *
    135          *       GUI_ARRAY_GetNumItems
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          unsigned int GUI_ARRAY_GetNumItems(GUI_ARRAY hArray) {
   \                     GUI_ARRAY_GetNumItems:
   \   00000000   10402DE9           PUSH     {R4,LR}
    138            GUI_ARRAY_OBJ * pThis;
    139            unsigned r = 0;
   \   00000004   0040A0E3           MOV      R4,#+0
    140            
    141            if (hArray) {
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0200000A           BEQ      ??GUI_ARRAY_GetNumItems_0
    142              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
    143              r = pThis->NumItems;
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   B040D0E1           LDRH     R4,[R0, #+0]
    144              GUI_UNLOCK_H(pThis);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    145            }
    146            return r;
   \                     ??GUI_ARRAY_GetNumItems_0:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    147          }
    148          
    149          /*********************************************************************
    150          *
    151          *       GUI_ARRAY_AddItem
    152          *
    153          * Purpose:
    154          *   Add an item to a GUI_ARRAY_OBJ.
    155          *   If the SIze is > 0, a memory block is allocated for storage.
    156          *   If on top of this a pointer is specified, the memory block holding
    157          *   the copy of the item is initialized.
    158          *
    159          * Return value:
    160          *   If O.K. : 0
    161          *   On error: 1
    162          *   
    163          */

   \                                 In section .text, align 4, keep-with-next
    164          int GUI_ARRAY_AddItem(GUI_ARRAY hArray, const void * pNew, int Len) {
   \                     GUI_ARRAY_AddItem:
   \   00000000   F0422DE9           PUSH     {R4-R7,R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   0210A0E1           MOV      R1,R2
    165            GUI_ARRAY_OBJ * pThis;
    166            WM_HMEM         hNewItem = 0;
   \   00000010   0060A0E3           MOV      R6,#+0
    167            WM_HMEM         hNewBuffer;
    168            WM_HMEM       * pNewBuffer;
    169            int             r = 0;
   \   00000014   0040A0E3           MOV      R4,#+0
    170            U16 NumItems;
    171            WM_HMEM haHandle;
    172          
    173            if (hArray) {
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   1F00000A           BEQ      ??GUI_ARRAY_AddItem_0
    174              /* Alloc memory for new item */
    175              if (Len) {
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0200000A           BEQ      ??GUI_ARRAY_AddItem_1
    176                if ((hNewItem = GUI_ALLOC_AllocInit(pNew, Len)) == 0) {
   \   00000028   ........           BL       GUI_ALLOC_AllocInit
   \   0000002C   0060B0E1           MOVS     R6,R0
    177                  GUI_DEBUG_ERROROUT("GUI_ARRAY_AddItem failed to alloc buffer");
    178                  r = 1;            /* Error */
   \   00000030   0140A003           MOVEQ    R4,#+1
    179                }
    180              }
    181              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \                     ??GUI_ARRAY_AddItem_1:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       GUI_ALLOC_LockH
    182              NumItems = pThis->NumItems;
   \   0000003C   B070D0E1           LDRH     R7,[R0, #+0]
    183              haHandle = pThis->haHandle;
   \   00000040   049090E5           LDR      R9,[R0, #+4]
    184              GUI_UNLOCK_H(pThis);
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
    185              /* Put handle of new item into the array */
    186              if (r == 0) {
   \   00000048   000054E3           CMP      R4,#+0
   \   0000004C   1300001A           BNE      ??GUI_ARRAY_AddItem_0
    187                /* Add the handle to new item to the buffer */
    188                hNewBuffer = GUI_ALLOC_Realloc(haHandle, (NumItems + 1) * sizeof(WM_HMEM));
   \   00000050   010087E2           ADD      R0,R7,#+1
   \   00000054   0011A0E1           LSL      R1,R0,#+2
   \   00000058   0900A0E1           MOV      R0,R9
   \   0000005C   ........           BL       GUI_ALLOC_Realloc
   \   00000060   0090B0E1           MOVS     R9,R0
    189                if (hNewBuffer == 0) {
   \   00000064   0300001A           BNE      ??GUI_ARRAY_AddItem_2
    190                  GUI_DEBUG_ERROROUT("GUI_ARRAY_AddItem failed to alloc buffer");
    191                  GUI_ALLOC_Free(hNewItem);
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   ........           BL       GUI_ALLOC_Free
    192                  r = 1;            /* Error */
   \   00000070   0140A0E3           MOV      R4,#+1
   \   00000074   090000EA           B        ??GUI_ARRAY_AddItem_0
    193                } else {
    194                  pNewBuffer = (WM_HMEM *)GUI_LOCK_H(hNewBuffer);
    195                  *(pNewBuffer + NumItems) = hNewItem;
   \                     ??GUI_ARRAY_AddItem_2:
   \   00000078   ........           BL       GUI_ALLOC_LockH
   \   0000007C   076180E7           STR      R6,[R0, +R7, LSL #+2]
    196                  GUI_UNLOCK_H(pNewBuffer);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
    197                  pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       GUI_ALLOC_LockH
    198                  pThis->haHandle = hNewBuffer;
   \   0000008C   049080E5           STR      R9,[R0, #+4]
    199                  pThis->NumItems++;
   \   00000090   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000094   011081E2           ADD      R1,R1,#+1
   \   00000098   B010C0E1           STRH     R1,[R0, #+0]
    200                  GUI_UNLOCK_H(pThis);
   \   0000009C   ........           BL       GUI_ALLOC_UnlockH
    201                }
    202              }
    203            }
    204            return r;
   \                     ??GUI_ARRAY_AddItem_0:
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   F082BDE8           POP      {R4-R7,R9,PC}    ;; return
    205          }
    206          
    207          /*********************************************************************
    208          *
    209          *       GUI_ARRAY_Delete
    210          *
    211          * Purpose:
    212          *  Free all allocated memory blocks
    213          *
    214          * Add. info:
    215          *   Locking is not required, since this routine is considered internal
    216          *   and should only be called after locking.
    217          */

   \                                 In section .text, align 4, keep-with-next
    218          void GUI_ARRAY_Delete(GUI_ARRAY hArray) {
   \                     GUI_ARRAY_Delete:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    219            GUI_ARRAY_OBJ * pThis;
    220            int i;
    221            WM_HMEM   ha;
    222            WM_HMEM * pa;
    223          
    224            if (hArray) {
   \   0000000C   1900000A           BEQ      ??GUI_ARRAY_Delete_0
    225              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050A0E1           MOV      R5,R0
    226              ha = pThis->haHandle;
   \   00000018   040095E5           LDR      R0,[R5, #+4]
    227              if (ha) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1100000A           BEQ      ??GUI_ARRAY_Delete_1
    228                pa = (WM_HMEM *)GUI_LOCK_H(ha);
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0060A0E1           MOV      R6,R0
    229                /* Free the attached items, one at a time */
    230                for (i = 0; i < pThis->NumItems; i++) {
   \   0000002C   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   060000BA           BLT      ??GUI_ARRAY_Delete_2
    231                  GUI_ALLOC_FreePtr(pa+i);
   \                     ??GUI_ARRAY_Delete_3:
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       GUI_ALLOC_FreePtr
    232                }
   \   00000044   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000048   017087E2           ADD      R7,R7,#+1
   \   0000004C   046086E2           ADD      R6,R6,#+4
   \   00000050   000057E1           CMP      R7,R0
   \   00000054   F8FFFFBA           BLT      ??GUI_ARRAY_Delete_3
    233                GUI_UNLOCK_H(pa);
   \                     ??GUI_ARRAY_Delete_2:
   \   00000058   ........           BL       GUI_ALLOC_UnlockH
    234                /* Free the handle buffer */
    235                GUI_ALLOC_FreePtr(&pThis->haHandle);
   \   0000005C   040085E2           ADD      R0,R5,#+4
   \   00000060   ........           BL       GUI_ALLOC_FreePtr
    236                pThis->NumItems = 0;                    /* For safety, in case the array is used after it has been deleted */
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   B000C5E1           STRH     R0,[R5, #+0]
    237              }
    238              GUI_UNLOCK_H(pThis);
   \                     ??GUI_ARRAY_Delete_1:
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
    239              GUI_ALLOC_Free(hArray);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       GUI_ALLOC_Free
    240            }
    241          }
   \                     ??GUI_ARRAY_Delete_0:
   \   00000078   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return
    242          
    243          /*********************************************************************
    244          *
    245          *       GUI_ARRAY_SetItem
    246          *
    247          * Purpose:
    248          *   Sets an item, returning the handle.
    249          *   If a data pointer is given, the allocated memory is initialized from it thru memcpy.
    250          *
    251          * Returns:
    252          *   Handle of the allocated memory block
    253          *   
    254          * Notes:
    255          *   (1) Replacing Items
    256          *       If the item is already assigned
    257          *       (Which means the handle is already != 0), it is freeed. However,
    258          *       the handle is treated as a handle to a data item, not an object.
    259          *       This means the data item is freed, but if the pointer points to
    260          *       an object, the destructor of the object is not called.
    261          */

   \                                 In section .text, align 4, keep-with-next
    262          WM_HMEM  GUI_ARRAY_SetItem(GUI_ARRAY hArray, unsigned int Index, const void* pData, int Len) {
   \                     GUI_ARRAY_SetItem:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0350A0E1           MOV      R5,R3
    263            GUI_ARRAY_OBJ * pThis;
    264            WM_HMEM hItem = 0;
   \   00000014   0060A0E3           MOV      R6,#+0
    265            U16 NumItems;
    266            WM_HMEM haHandle;
    267          
    268            if (hArray) {
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2500000A           BEQ      ??GUI_ARRAY_SetItem_0
    269              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \   00000020   ........           BL       GUI_ALLOC_LockH
    270              NumItems = pThis->NumItems;
   \   00000024   B080D0E1           LDRH     R8,[R0, #+0]
    271              haHandle = pThis->haHandle;
   \   00000028   049090E5           LDR      R9,[R0, #+4]
    272              GUI_UNLOCK_H(pThis);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
    273              if (Index < (unsigned)NumItems) {
   \   00000030   080057E1           CMP      R7,R8
   \   00000034   1F00002A           BCS      ??GUI_ARRAY_SetItem_0
    274                WM_HMEM ha;
    275                ha = haHandle;
    276                if (ha) {
   \   00000038   000059E3           CMP      R9,#+0
   \   0000003C   1D00000A           BEQ      ??GUI_ARRAY_SetItem_0
    277                  WM_HMEM* pa;
    278                  pa = (WM_HMEM *)GUI_LOCK_H(ha);
    279                  pa += Index;
    280                  hItem = *pa;
   \   00000040   0900A0E1           MOV      R0,R9
   \   00000044   ........           BL       GUI_ALLOC_LockH
   \   00000048   076190E7           LDR      R6,[R0, +R7, LSL #+2]
    281                  GUI_UNLOCK_H(pa);
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    282                  /*
    283                   * If a buffer is already available, a new buffer is only needed when the
    284                   * new item has a different size.
    285                   */
    286                  if (hItem) {
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   0300000A           BEQ      ??GUI_ARRAY_SetItem_1
    287                    if (GUI_ALLOC_GetSize(hItem) != Len) {
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           BL       GUI_ALLOC_GetSize
   \   00000060   050050E1           CMP      R0,R5
   \   00000064   0A00000A           BEQ      ??GUI_ARRAY_SetItem_2
    288                      hItem = 0;
    289                    }
    290                  }
    291                  /*
    292                   * Allocate a new buffer and free the old one (if needed). 
    293                   */
    294                  if (!hItem) {
    295                    hItem = GUI_ALLOC_AllocZero(Len);
   \                     ??GUI_ARRAY_SetItem_1:
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       GUI_ALLOC_AllocZero
   \   00000070   0060B0E1           MOVS     R6,R0
    296                    if (hItem) {
   \   00000074   0600000A           BEQ      ??GUI_ARRAY_SetItem_2
    297                      pa = (WM_HMEM *)GUI_LOCK_H(ha);
    298                      pa += Index;
   \   00000078   0900A0E1           MOV      R0,R9
   \   0000007C   ........           BL       GUI_ALLOC_LockH
   \   00000080   077180E0           ADD      R7,R0,R7, LSL #+2
    299                      GUI_ALLOC_FreePtr(pa);
   \   00000084   0700A0E1           MOV      R0,R7
   \   00000088   ........           BL       GUI_ALLOC_FreePtr
    300                      *pa = hItem;
   \   0000008C   006087E5           STR      R6,[R7, #+0]
    301                      GUI_UNLOCK_H(pa);
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
    302                    }
    303                  }
    304                  /*
    305                   * Set the item (if needed)
    306                   */
    307                  if (pData && hItem) {
   \                     ??GUI_ARRAY_SetItem_2:
   \   00000094   000054E3           CMP      R4,#+0
   \   00000098   00005613           CMPNE    R6,#+0
   \   0000009C   0500000A           BEQ      ??GUI_ARRAY_SetItem_0
    308                    char * pItem;
    309                    pItem = (char *)GUI_LOCK_H(hItem);
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           BL       GUI_ALLOC_LockH
    310                    GUI_MEMCPY(pItem, pData, Len);
   \   000000A8   0520A0E1           MOV      R2,R5
   \   000000AC   0410A0E1           MOV      R1,R4
   \   000000B0   ........           BL       __aeabi_memcpy
    311                    GUI_UNLOCK_H(pItem);
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
    312                  }
    313                }
    314              }
    315            }
    316            return hItem;
   \                     ??GUI_ARRAY_SetItem_0:
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   04D08DE2           ADD      SP,SP,#+4
   \   000000C0   F083BDE8           POP      {R4-R9,PC}       ;; return
    317          }
    318          
    319          /*********************************************************************
    320          *
    321          *       GUI_ARRAY_GethItem
    322          *
    323          * Purpose:
    324          *   Gets the handle of specified item
    325          *
    326          * Notes:
    327          *   (1) Index out of bounds
    328          *   It is permitted to specify an index larger than the
    329          *   array size. In this case, a 0-handle is returned.
    330          */

   \                                 In section .text, align 4, keep-with-next
    331          WM_HMEM GUI_ARRAY_GethItem(GUI_ARRAY hArray, unsigned int Index) {
   \                     GUI_ARRAY_GethItem:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
    332            GUI_ARRAY_OBJ * pThis;
    333            WM_HMEM h = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    334          
    335            if (hArray) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0A00000A           BEQ      ??GUI_ARRAY_GethItem_0
    336              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
    337              h = GUI_ARRAY__GethItem(pThis, Index);
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000020   010054E1           CMP      R4,R1
   \   00000024   0500002A           BCS      ??GUI_ARRAY_GethItem_1
   \   00000028   040090E5           LDR      R0,[R0, #+4]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0200000A           BEQ      ??GUI_ARRAY_GethItem_1
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   045190E7           LDR      R5,[R0, +R4, LSL #+2]
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
    338              GUI_UNLOCK_H(pThis);
   \                     ??GUI_ARRAY_GethItem_1:
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
    339            }
    340            return h;
   \                     ??GUI_ARRAY_GethItem_0:
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   04D08DE2           ADD      SP,SP,#+4
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
    341          }
    342          
    343          /*********************************************************************
    344          *
    345          *       GUI_ARRAY_GetpItemLocked
    346          *
    347          * Purpose:
    348          *   Gets the pointer of specified item
    349          *
    350          * Notes:
    351          *   (1) Index out of bounds
    352          *       It is permitted to specify an index larger than the
    353          *       array size. In this case, a 0-handle is returned.
    354          *   (2) Locking
    355          *       It is the caller's responsibility to lock before calling this
    356          *       function.
    357          *       The pointer returned by this function is returned in 'locked'
    358          *       state. This means the caller needs to 'unlock' the pointer
    359          *       after use.
    360          */

   \                                 In section .text, align 4, keep-with-next
    361          void * GUI_ARRAY_GetpItemLocked(GUI_ARRAY hArray, unsigned int Index) {
   \                     GUI_ARRAY_GetpItemLocked:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
    362            GUI_ARRAY_OBJ * pThis;
    363            void * p = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
    364          
    365            if (hArray) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0F00000A           BEQ      ??GUI_ARRAY_GetpItemLocked_0
    366              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
    367              p = GUI_ARRAY__GetpItemLocked(pThis, Index);
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000020   010054E1           CMP      R4,R1
   \   00000024   0A00002A           BCS      ??GUI_ARRAY_GetpItemLocked_1
   \   00000028   040090E5           LDR      R0,[R0, #+4]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0700000A           BEQ      ??GUI_ARRAY_GetpItemLocked_1
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   044190E7           LDR      R4,[R0, +R4, LSL #+2]
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   0200000A           BEQ      ??GUI_ARRAY_GetpItemLocked_1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_ALLOC_LockH
   \   00000050   0050A0E1           MOV      R5,R0
    368              GUI_UNLOCK_H(pThis);
   \                     ??GUI_ARRAY_GetpItemLocked_1:
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
    369            }
    370            return p;
   \                     ??GUI_ARRAY_GetpItemLocked_0:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   04D08DE2           ADD      SP,SP,#+4
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
    371          }
    372          
    373          /*********************************************************************
    374          *
    375          *       GUI_ARRAY_Create
    376          *
    377          * Purpose:
    378          */

   \                                 In section .text, align 4, keep-with-next
    379          GUI_ARRAY GUI_ARRAY_Create(void) {
    380            GUI_ARRAY hArray;
    381            hArray = GUI_ALLOC_AllocZero(sizeof(GUI_ARRAY_OBJ));
    382            return hArray;
   \                     GUI_ARRAY_Create:
   \   00000000   0800A0E3           MOV      R0,#+8
   \   00000004   ........           B        GUI_ALLOC_AllocZero  ;; tailcall
    383          }
    384          
    385          #else  /* avoid empty object files */
    386          
    387          void GUI_ARRAY_C(void);
    388          void GUI_ARRAY_C(void){}
    389          
    390          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_ARRAY_AddItem             32
     GUI_ARRAY_Create               8
     GUI_ARRAY_Delete              24
     GUI_ARRAY_GetNumItems          8
     GUI_ARRAY_GethItem            16
     GUI_ARRAY_GetpItemLocked      16
     GUI_ARRAY_SetItem             32
     GUI_ARRAY__GethItem           16
     GUI_ARRAY__GetpItemLocked     16
     GUI_ARRAY__SethItem           16


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GUI_ARRAY__SethItem         84
     GUI_ARRAY__GethItem         64
     GUI_ARRAY__GetpItemLocked   84
     GUI_ARRAY_GetNumItems       36
     GUI_ARRAY_AddItem          168
     GUI_ARRAY_Delete           128
     GUI_ARRAY_SetItem          196
     GUI_ARRAY_GethItem          80
     GUI_ARRAY_GetpItemLocked   100
     GUI_ARRAY_Create             8

 
 948 bytes in section .text
 
 948 bytes of CODE memory

Errors: none
Warnings: none
