###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_ALLOC_AllocInit.c               #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_ALLOC_AllocInit.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_ALLOC_AllocInit.lst                                    #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _ALLOC_AllocInit.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_ALLOC_AllocInit.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIAlloc.C
     19          Purpose     : Dynamic memory management
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <string.h>           /* for memcpy, memset */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Internal memory management
     30          *
     31          **********************************************************************
     32          */
     33          
     34          /*********************************************************************
     35          *
     36          *       GUI_ALLOC_AllocInit
     37          *
     38          * Purpose:
     39          *   Alloc memory block of the given size and initialize from the given pointer.
     40          *   If the pointer is a NULL pointer, zeroinit
     41          */

   \                                 In section .text, align 4, keep-with-next
     42          GUI_HMEM GUI_ALLOC_AllocInit(const void *pInitData, GUI_ALLOC_DATATYPE Size) {
   \                     GUI_ALLOC_AllocInit:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     43            GUI_HMEM hMem;
     44            GUI_LOCK();
   \   0000000C   ........           BL       GUI_Lock
     45            if (Size == 0) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0100001A           BNE      ??GUI_ALLOC_AllocInit_0
     46              return (GUI_HMEM)0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   7080BDE8           POP      {R4-R6,PC}
     47            }
     48            hMem = GUI_ALLOC_AllocNoInit(Size);
   \                     ??GUI_ALLOC_AllocInit_0:
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       GUI_ALLOC_AllocNoInit
   \   00000028   0060B0E1           MOVS     R6,R0
     49            if (hMem) {
   \   0000002C   0800000A           BEQ      ??GUI_ALLOC_AllocInit_1
     50              void *pMem;
     51              pMem = GUI_ALLOC_h2p(hMem);
   \   00000030   ........           BL       GUI_ALLOC_h2p
     52              if (pInitData) {
   \   00000034   000054E3           CMP      R4,#+0
   \   00000038   0520A0E1           MOV      R2,R5
   \   0000003C   0200000A           BEQ      ??GUI_ALLOC_AllocInit_2
     53                GUI_MEMCPY(pMem, pInitData, Size);
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   ........           BL       __aeabi_memcpy
     54              } else {
   \   00000048   010000EA           B        ??GUI_ALLOC_AllocInit_1
     55                GUI_MEMSET((U8*)pMem, 0, Size);
   \                     ??GUI_ALLOC_AllocInit_2:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   ........           BL       GUI__memset
     56              }
     57            }
     58            GUI_UNLOCK();
   \                     ??GUI_ALLOC_AllocInit_1:
   \   00000054   ........           BL       GUI_Unlock
     59            return hMem;
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   7080BDE8           POP      {R4-R6,PC}       ;; return
     60          }
     61          
     62          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_ALLOC_AllocInit     16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     GUI_ALLOC_AllocInit   96

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none
