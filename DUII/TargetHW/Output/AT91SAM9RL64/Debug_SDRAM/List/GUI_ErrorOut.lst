###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:53 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_ErrorOut.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_ErrorOut.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_ErrorOut.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _ErrorOut.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_ErrorOut.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_ErrorOut.C
     19          Purpose     : Logging (used only at higher debug levels)
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdio.h>
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Defines
     31          *
     32          **********************************************************************
     33          */
     34          
     35          #define MAXLEN 50
     36          
     37          /*********************************************************************
     38          *
     39          *      Static code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       _CopyString
     46          */
     47          static void _CopyString(char*d, const char*s, int MaxLen) {
     48            while ((MaxLen > 0) && *s) {
     49              *d++ = *s++;
     50              MaxLen--;
     51            }
     52            *d = 0;
     53          }
     54          
     55          /*********************************************************************
     56          *
     57          *       Public code
     58          *
     59          **********************************************************************
     60          */
     61          /*********************************************************************
     62          *
     63          *       GUI_ErrorOut
     64          */

   \                                 In section .text, align 4, keep-with-next
     65          void GUI_ErrorOut(const char *s) { GUI_X_ErrorOut(s); }
   \                     GUI_ErrorOut:
   \   00000000   ........           B        GUI_X_ErrorOut   ;; tailcall
     66          
     67          /*********************************************************************
     68          *
     69          *       GUI_ErrorOut1
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          void GUI_ErrorOut1(const char *s, int p0) {
   \                     GUI_ErrorOut1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   44D04DE2           SUB      SP,SP,#+68
   \   00000008   0150A0E1           MOV      R5,R1
     72            char ac[MAXLEN + 10];
     73            char* sOut = ac;
   \   0000000C   04108DE2           ADD      R1,SP,#+4
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
     74            GUI_MEMSET((U8*)ac, 0, sizeof(ac));
   \   00000018   3C20A0E3           MOV      R2,#+60
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   ........           BL       GUI__memset
     75            _CopyString(ac, s, MAXLEN);
   \   00000028   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000002C   04108DE2           ADD      R1,SP,#+4
   \   00000030   0030B0E1           MOVS     R3,R0
   \   00000034   1100000A           BEQ      ??GUI_ErrorOut1_0
   \   00000038   0400CDE5           STRB     R0,[SP, #+4]
   \   0000003C   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000040   05108DE2           ADD      R1,SP,#+5
   \   00000044   1820A0E3           MOV      R2,#+24
   \   00000048   0030A0E1           MOV      R3,R0
   \                     ??GUI_ErrorOut1_1:
   \   0000004C   000053E3           CMP      R3,#+0
   \   00000050   0A00000A           BEQ      ??GUI_ErrorOut1_0
   \   00000054   0100C1E4           STRB     R0,[R1], #+1
   \   00000058   0100F4E5           LDRB     R0,[R4, #+1]!
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0700000A           BEQ      ??GUI_ErrorOut1_2
   \   00000064   0100C1E4           STRB     R0,[R1], #+1
   \   00000068   0130F4E5           LDRB     R3,[R4, #+1]!
   \   0000006C   012052E2           SUBS     R2,R2,#+1
   \   00000070   0300A0E1           MOV      R0,R3
   \   00000074   F4FFFF1A           BNE      ??GUI_ErrorOut1_1
   \   00000078   000053E3           CMP      R3,#+0
   \   0000007C   0100C114           STRBNE   R0,[R1], #+1
   \                     ??GUI_ErrorOut1_0:
   \   00000080   0000A0E3           MOV      R0,#+0
   \                     ??GUI_ErrorOut1_2:
   \   00000084   0000C1E5           STRB     R0,[R1, #+0]
     76            sOut += strlen(sOut);
   \   00000088   00009DE5           LDR      R0,[SP, #+0]
   \   0000008C   ........           BL       strlen
   \   00000090   00109DE5           LDR      R1,[SP, #+0]
     77            GUI__AddSpaceHex(p0, 8, &sOut);
   \   00000094   0D20A0E1           MOV      R2,SP
   \   00000098   010080E0           ADD      R0,R0,R1
   \   0000009C   00008DE5           STR      R0,[SP, #+0]
   \   000000A0   0810A0E3           MOV      R1,#+8
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       GUI__AddSpaceHex
     78            GUI_ErrorOut(ac);
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           BL       GUI_X_ErrorOut
     79          }
   \   000000B4   44D08DE2           ADD      SP,SP,#+68       ;; stack cleaning
   \   000000B8   3080BDE8           POP      {R4,R5,PC}       ;; return
     80          
     81          /*********************************************************************
     82          *
     83          *       GUI_ErrorOut2
     84          */

   \                                 In section .text, align 4, keep-with-next
     85          void GUI_ErrorOut2(const char *s, int p0, int p1) {
   \                     GUI_ErrorOut2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
   \   00000008   0150A0E1           MOV      R5,R1
     86            char ac[MAXLEN + 20];
     87            char* sOut = ac;
   \   0000000C   04108DE2           ADD      R1,SP,#+4
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   00108DE5           STR      R1,[SP, #+0]
     88            GUI_MEMSET((U8*)ac, 0, sizeof(ac));
   \   0000001C   4620A0E3           MOV      R2,#+70
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   ........           BL       GUI__memset
     89            _CopyString(ac, s, MAXLEN);
   \   0000002C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0030B0E1           MOVS     R3,R0
   \   00000038   1100000A           BEQ      ??GUI_ErrorOut2_0
   \   0000003C   0400CDE5           STRB     R0,[SP, #+4]
   \   00000040   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000044   05108DE2           ADD      R1,SP,#+5
   \   00000048   1820A0E3           MOV      R2,#+24
   \   0000004C   0030A0E1           MOV      R3,R0
   \                     ??GUI_ErrorOut2_1:
   \   00000050   000053E3           CMP      R3,#+0
   \   00000054   0A00000A           BEQ      ??GUI_ErrorOut2_0
   \   00000058   0100C1E4           STRB     R0,[R1], #+1
   \   0000005C   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0700000A           BEQ      ??GUI_ErrorOut2_2
   \   00000068   0100C1E4           STRB     R0,[R1], #+1
   \   0000006C   0130F4E5           LDRB     R3,[R4, #+1]!
   \   00000070   012052E2           SUBS     R2,R2,#+1
   \   00000074   0300A0E1           MOV      R0,R3
   \   00000078   F4FFFF1A           BNE      ??GUI_ErrorOut2_1
   \   0000007C   000053E3           CMP      R3,#+0
   \   00000080   0100C114           STRBNE   R0,[R1], #+1
   \                     ??GUI_ErrorOut2_0:
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??GUI_ErrorOut2_2:
   \   00000088   0000C1E5           STRB     R0,[R1, #+0]
     90            sOut += strlen(sOut);
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   ........           BL       strlen
   \   00000094   00109DE5           LDR      R1,[SP, #+0]
     91            GUI__AddSpaceHex(p0, 8, &sOut);
   \   00000098   0D20A0E1           MOV      R2,SP
   \   0000009C   010080E0           ADD      R0,R0,R1
   \   000000A0   00008DE5           STR      R0,[SP, #+0]
   \   000000A4   0810A0E3           MOV      R1,#+8
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       GUI__AddSpaceHex
     92            GUI__AddSpaceHex(p1, 8, &sOut);
   \   000000B0   0D20A0E1           MOV      R2,SP
   \   000000B4   0810A0E3           MOV      R1,#+8
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           BL       GUI__AddSpaceHex
     93            GUI_ErrorOut(ac);
   \   000000C0   04008DE2           ADD      R0,SP,#+4
   \   000000C4   ........           BL       GUI_X_ErrorOut
     94          }
   \   000000C8   50D08DE2           ADD      SP,SP,#+80       ;; stack cleaning
   \   000000CC   7080BDE8           POP      {R4-R6,PC}       ;; return
     95          
     96          /*********************************************************************
     97          *
     98          *       GUI_ErrorOut3
     99          */

   \                                 In section .text, align 4, keep-with-next
    100          void GUI_ErrorOut3(const char *s, int p0, int p1, int p2) {
   \                     GUI_ErrorOut3:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0140A0E1           MOV      R4,R1
    101            char ac[MAXLEN + 30];
    102            char* sOut = ac;
   \   0000000C   04108DE2           ADD      R1,SP,#+4
   \   00000010   0070A0E1           MOV      R7,R0
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0360A0E1           MOV      R6,R3
    103            GUI_MEMSET((U8*)ac, 0, sizeof(ac));
   \   00000020   5020A0E3           MOV      R2,#+80
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   ........           BL       GUI__memset
    104            _CopyString(ac, s, MAXLEN);
   \   00000030   0000D7E5           LDRB     R0,[R7, #+0]
   \   00000034   04108DE2           ADD      R1,SP,#+4
   \   00000038   0030B0E1           MOVS     R3,R0
   \   0000003C   1100000A           BEQ      ??GUI_ErrorOut3_0
   \   00000040   0400CDE5           STRB     R0,[SP, #+4]
   \   00000044   0100F7E5           LDRB     R0,[R7, #+1]!
   \   00000048   05108DE2           ADD      R1,SP,#+5
   \   0000004C   1820A0E3           MOV      R2,#+24
   \   00000050   0030A0E1           MOV      R3,R0
   \                     ??GUI_ErrorOut3_1:
   \   00000054   000053E3           CMP      R3,#+0
   \   00000058   0A00000A           BEQ      ??GUI_ErrorOut3_0
   \   0000005C   0100C1E4           STRB     R0,[R1], #+1
   \   00000060   0100F7E5           LDRB     R0,[R7, #+1]!
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0700000A           BEQ      ??GUI_ErrorOut3_2
   \   0000006C   0100C1E4           STRB     R0,[R1], #+1
   \   00000070   0130F7E5           LDRB     R3,[R7, #+1]!
   \   00000074   012052E2           SUBS     R2,R2,#+1
   \   00000078   0300A0E1           MOV      R0,R3
   \   0000007C   F4FFFF1A           BNE      ??GUI_ErrorOut3_1
   \   00000080   000053E3           CMP      R3,#+0
   \   00000084   0100C114           STRBNE   R0,[R1], #+1
   \                     ??GUI_ErrorOut3_0:
   \   00000088   0000A0E3           MOV      R0,#+0
   \                     ??GUI_ErrorOut3_2:
   \   0000008C   0000C1E5           STRB     R0,[R1, #+0]
    105            sOut += strlen(sOut);
   \   00000090   00009DE5           LDR      R0,[SP, #+0]
   \   00000094   ........           BL       strlen
   \   00000098   00109DE5           LDR      R1,[SP, #+0]
    106            GUI__AddSpaceHex(p0, 8, &sOut);
   \   0000009C   0D20A0E1           MOV      R2,SP
   \   000000A0   010080E0           ADD      R0,R0,R1
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0810A0E3           MOV      R1,#+8
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       GUI__AddSpaceHex
    107            GUI__AddSpaceHex(p1, 8, &sOut);
   \   000000B4   0D20A0E1           MOV      R2,SP
   \   000000B8   0810A0E3           MOV      R1,#+8
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       GUI__AddSpaceHex
    108            GUI__AddSpaceHex(p2, 8, &sOut);
   \   000000C4   0D20A0E1           MOV      R2,SP
   \   000000C8   0810A0E3           MOV      R1,#+8
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   ........           BL       GUI__AddSpaceHex
    109            GUI_ErrorOut(ac);
   \   000000D4   04008DE2           ADD      R0,SP,#+4
   \   000000D8   ........           BL       GUI_X_ErrorOut
    110          }
   \   000000DC   54D08DE2           ADD      SP,SP,#+84       ;; stack cleaning
   \   000000E0   F080BDE8           POP      {R4-R7,PC}       ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       GUI_ErrorOut4
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          void GUI_ErrorOut4(const char *s, int p0, int p1, int p2, int p3) {
   \                     GUI_ErrorOut4:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   60D04DE2           SUB      SP,SP,#+96
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   78809DE5           LDR      R8,[SP, #+120]
    117            char ac[MAXLEN + 40] = {0};
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   5C10A0E3           MOV      R1,#+92
   \   00000024   ........           BL       __aeabi_memclr4
    118            char* sOut = ac;
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
    119            GUI_MEMSET((U8*)ac, 0, sizeof(ac));
   \   00000030   5A20A0E3           MOV      R2,#+90
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   ........           BL       GUI__memset
    120            _CopyString(ac, s, MAXLEN);
   \   00000040   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000044   04108DE2           ADD      R1,SP,#+4
   \   00000048   0030B0E1           MOVS     R3,R0
   \   0000004C   1100000A           BEQ      ??GUI_ErrorOut4_0
   \   00000050   0400CDE5           STRB     R0,[SP, #+4]
   \   00000054   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000058   05108DE2           ADD      R1,SP,#+5
   \   0000005C   1820A0E3           MOV      R2,#+24
   \   00000060   0030A0E1           MOV      R3,R0
   \                     ??GUI_ErrorOut4_1:
   \   00000064   000053E3           CMP      R3,#+0
   \   00000068   0A00000A           BEQ      ??GUI_ErrorOut4_0
   \   0000006C   0100C1E4           STRB     R0,[R1], #+1
   \   00000070   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0700000A           BEQ      ??GUI_ErrorOut4_2
   \   0000007C   0100C1E4           STRB     R0,[R1], #+1
   \   00000080   0130F4E5           LDRB     R3,[R4, #+1]!
   \   00000084   012052E2           SUBS     R2,R2,#+1
   \   00000088   0300A0E1           MOV      R0,R3
   \   0000008C   F4FFFF1A           BNE      ??GUI_ErrorOut4_1
   \   00000090   000053E3           CMP      R3,#+0
   \   00000094   0100C114           STRBNE   R0,[R1], #+1
   \                     ??GUI_ErrorOut4_0:
   \   00000098   0000A0E3           MOV      R0,#+0
   \                     ??GUI_ErrorOut4_2:
   \   0000009C   0000C1E5           STRB     R0,[R1, #+0]
    121            sOut += strlen(sOut);
   \   000000A0   00009DE5           LDR      R0,[SP, #+0]
   \   000000A4   ........           BL       strlen
   \   000000A8   00109DE5           LDR      R1,[SP, #+0]
    122            GUI__AddSpaceHex(p0, 8, &sOut);
   \   000000AC   0D20A0E1           MOV      R2,SP
   \   000000B0   010080E0           ADD      R0,R0,R1
   \   000000B4   00008DE5           STR      R0,[SP, #+0]
   \   000000B8   0810A0E3           MOV      R1,#+8
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       GUI__AddSpaceHex
    123            GUI__AddSpaceHex(p1, 8, &sOut);
   \   000000C4   0D20A0E1           MOV      R2,SP
   \   000000C8   0810A0E3           MOV      R1,#+8
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   ........           BL       GUI__AddSpaceHex
    124            GUI__AddSpaceHex(p2, 8, &sOut);
   \   000000D4   0D20A0E1           MOV      R2,SP
   \   000000D8   0810A0E3           MOV      R1,#+8
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   ........           BL       GUI__AddSpaceHex
    125            GUI__AddSpaceHex(p3, 8, &sOut);
   \   000000E4   0D20A0E1           MOV      R2,SP
   \   000000E8   0810A0E3           MOV      R1,#+8
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   ........           BL       GUI__AddSpaceHex
    126            GUI_ErrorOut(ac);
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   ........           BL       GUI_X_ErrorOut
    127          }
   \   000000FC   60D08DE2           ADD      SP,SP,#+96       ;; stack cleaning
   \   00000100   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 92 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000001E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000046   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000005A   0000               DC8 0, 0
    128          
    129          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     GUI_ErrorOut       8
     GUI_ErrorOut1     80
     GUI_ErrorOut2     96
     GUI_ErrorOut3    104
     GUI_ErrorOut4    120


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     GUI_ErrorOut       4
     GUI_ErrorOut1    188
     GUI_ErrorOut2    208
     GUI_ErrorOut3    228
     GUI_ErrorOut4    260
     ?<Constant {0}>   92

 
  92 bytes in section .rodata
 888 bytes in section .text
 
 888 bytes of CODE  memory
  92 bytes of CONST memory

Errors: none
Warnings: none
