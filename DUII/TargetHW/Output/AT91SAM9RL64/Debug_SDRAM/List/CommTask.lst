###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:51 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\CommTask.c                        #
#    Command line =  C:\DUII\TargetHW\Setup\CommTask.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Co #
#                    mmTask.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Com #
#                    mTask.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\CommTask.c
      1          #define COMM_MAIN
      2          
      3          #ifdef PROFILER
      4          #include "profiler.h"
      5          #define THIS_TASK	COMMTASK_NUM
      6          #endif
      7          
      8          #define AUTOON			// enables Auto-On function
      9          
     10          #include <stdio.h>
     11          #include <string.h>
     12          #include "WM.h"
     13          #include "SPI_API.h"
     14          #include "DUII.h"
     15          #include "FS.h"
     16          #include "CommTask.h"

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute signed char const msgrouting[4]
   \                     msgrouting:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   030000FF           DC8 3, 0, 0, 255

   \                                 In section .bss, align 4
   \   __absolute u08 outstanding_msg[5]
   \                     outstanding_msg:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \   __absolute TQMSampType10 tqmsample
   \                     tqmsample:
   \   00000000                      DS8 124

   \                                 In section .bss, align 1
   \   __absolute enum <unnamed> pdrlancstatus
   \                     pdrlancstatus:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   __absolute u08 iobytesenabled
   \                     iobytesenabled:
   \   00000000                      DS8 1
     17          #include "message.h"
     18          #include "DataHandler.h"
     19          #include "datadecode.h"
     20          #include "dbgu.h"
     21          #include "FlashReadWrite.h"
     22          #include "adc.h"
     23          #include "TQMFile.h"
     24          
     25          //
     26          // External data declarations
     27          //
     28          extern char LapInitialize;				// semaphore between CommTask and LapTimerTask
     29          
     30          //
     31          // External functions
     32          //
     33          void mSDelay( int );
     34          
     35          //
     36          // Local defines, constants and structure definitions
     37          //
     38          //
     39          #define	WAIT_FOR_DATA	1
     40          #define WAIT_FOR_CAMERA	2
     41          
     42          // Local function prototypes
     43          //
     44          
     45          //
     46          // Local variable declarations
     47          //
     48          int waiting_usb_camera = FALSE;							// true when we are in delay for usb camera
     49          OS_TIMER stationaryTimer;								// keeps track of time sitting still
     50          

   \                                 In section .text, align 4, keep-with-next
     51          static void ClearCTS( void) {
   \                     ClearCTS:
   \   00000000   10402DE9           PUSH     {R4,LR}
     52          	int i;
     53          	
     54          	for (i=0; i < (NUMUNITS-1); i++) {
     55          		// if already cleared, don't copy value (initial condition solution)
     56          		if (0 != COMMCTS[i])
   \   00000004   ........           LDR      R4,??DataTable12
   \   00000008   BC0094E5           LDR      R0,[R4, #+188]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??ClearCTS_0
     57          			COMMCTS[i] = OS_GetTimerValue(&(COMMCTSTIMERS[i]));
   \   00000014   4800A0E3           MOV      R0,#+72
   \   00000018   900E80E3           ORR      R0,R0,#0x900
   \   0000001C   040080E0           ADD      R0,R0,R4
   \   00000020   ........           BL       OS_GetTimerValue
   \   00000024   BC0084E5           STR      R0,[R4, #+188]
   \                     ??ClearCTS_0:
   \   00000028   C00094E5           LDR      R0,[R4, #+192]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0600000A           BEQ      ??ClearCTS_1
   \   00000034   5C00A0E3           MOV      R0,#+92
   \   00000038   900E80E3           ORR      R0,R0,#0x900
   \   0000003C   040080E0           ADD      R0,R0,R4
   \   00000040   ........           BL       OS_GetTimerValue
   \   00000044   C00084E5           STR      R0,[R4, #+192]
     58          	} // for
     59          	// if SU is not responding report it and report camera not connected
     60          	if (0 == COMMCTS[SENSOR_UNIT-1]) {
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0900001A           BNE      ??ClearCTS_2
   \                     ??ClearCTS_1:
   \   00000050   ........           LDR      R1,??DataTable12_1
   \   00000054   0C00C1E5           STRB     R0,[R1, #+12]
     61          		suData.suPresent = FALSE;
     62          		DataValues[GPS_NUMSAT].uVal = 0;
   \   00000058   ........           LDR      R1,??DataTable12_2
   \   0000005C   A80081E5           STR      R0,[R1, #+168]
   \   00000060   ........           LDR      R0,??DataTable12_3
   \   00000064   7400D0E5           LDRB     R0,[R0, #+116]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   11005013           CMPNE    R0,#+17
     63          		if ((CAMERA_NONE != vehicleData.camera) && (CAMERA_USB != vehicleData.camera))
     64          			DataValues[CAMERA_STATUS].iVal = CAMERA_STATUS_NOT_READY;
   \   00000070   0100A013           MOVNE    R0,#+1
   \   00000074   58028115           STRNE    R0,[R1, #+600]
     65          	} // if
     66          } // ClearCTS
   \                     ??ClearCTS_2:
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
     67          
     68          // returns TRUE if we got an ack, FALSE if we didn't
     69          //
     70          static unsigned char Get_Ack( void ) {
     71          	unsigned char retval = FALSE;
     72          
     73          	// wait for a message to come in or time out
     74          	if (0 != OS_WaitEventTimed( (unsigned char) (1 << TCAT_MSG_RECEIVED), 600 )) {
     75          		
     76          		if (NULL != com[0].rxptr) {
     77          			u08 *tmpptr = com[0].rxptr;
     78          	
     79          			// mark buffer free
     80          			com[0].rxptr = NULL;
     81          	
     82          			// check to see if this is an ACK
     83          			if (ACK == tmpptr[OPCODE])
     84          				retval = TRUE;
     85          	
     86          			// process the message
     87          			Parse_Message((u08) 0, tmpptr);
     88          		} // if
     89          	} // if
     90          	
     91          	
     92          	return (retval);
     93          } // Get_Ack
     94          
     95          // called before ISR is initialized to setup buffers

   \                                 In section .text, align 4, keep-with-next
     96          void App_Comm_Setup(void) {
   \                     App_Comm_Setup:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     97          	int i;
     98          
     99          	// create com port handles
    100          	com[0].use = MESSAGING;					// on DU2 only port used for messaging
   \   00000004   ........           LDR      R4,??DataTable12
   \   00000008   0000A0E3           MOV      R0,#+0
    101          	com[0].port = 0;
   \   0000000C   800084E5           STR      R0,[R4, #+128]
    102          	com[0].txbytes = 0;						// initialize
    103          	com[0].rxnextidx = 0;					// initialize
   \   00000010   8D00C4E5           STRB     R0,[R4, #+141]
    104          	com[0].parity = 'N';					// parity = NONE
    105          	com[0].rxptr = com[0].txptr = NULL;		// initialize semaphor = NULL;
   \   00000014   880084E5           STR      R0,[R4, #+136]
   \   00000018   840084E5           STR      R0,[R4, #+132]
    106          	com[0].rxbuff = msgrxbuff[0];			// point to first buffer
   \   0000001C   D00084E2           ADD      R0,R4,#+208
   \   00000020   940084E5           STR      R0,[R4, #+148]
    107          	com[0].txbuff = msgtxbuff;				// point to single buffer
   \   00000024   2800A0E3           MOV      R0,#+40
   \   00000028   700E80E3           ORR      R0,R0,#0x700
   \   0000002C   040080E0           ADD      R0,R0,R4
   \   00000030   900084E5           STR      R0,[R4, #+144]
   \   00000034   4E10A0E3           MOV      R1,#+78
    108          	
    109          	for (i=0; i< NUMUNITS-1; i++) {
   \   00000038   ........           LDR      R5,??DataTable12_4
    110          		// create timers for communications
    111          		OS_CreateTimer(&(COMMCTSTIMERS[i]), ClearCTS, CTS_COUNTDOWN);
   \   0000003C   4800A0E3           MOV      R0,#+72
   \   00000040   8C10C4E5           STRB     R1,[R4, #+140]
   \   00000044   900E80E3           ORR      R0,R0,#0x900
   \   00000048   04D04DE2           SUB      SP,SP,#+4
   \   0000004C   9B2FA0E3           MOV      R2,#+620
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   040080E0           ADD      R0,R0,R4
   \   00000058   ........           BL       OS_CreateTimer
   \   0000005C   9B2FA0E3           MOV      R2,#+620
   \   00000060   6F0E82E2           ADD      R0,R2,#+1776
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   040080E0           ADD      R0,R0,R4
   \   0000006C   ........           BL       OS_CreateTimer
    112          	} // for
    113          	
    114          	suData.tmState = STARTUP;
   \   00000070   ........           LDR      R0,??DataTable12_1
   \   00000074   FE10A0E3           MOV      R1,#+254
   \   00000078   0E10C0E5           STRB     R1,[R0, #+14]
    115          }
   \   0000007C   04D08DE2           ADD      SP,SP,#+4
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
    116          
    117          // returns the iodata sample byte for the SU

   \                                 In section .text, align 4, keep-with-next
    118          u08 getIoData( void ) {
   \                     getIoData:
   \   00000000   10402DE9           PUSH     {R4,LR}
    119          	u08 iodata = 0x83; 		// start with freq enabled
    120          	int i;
    121          	
    122          	iobytesenabled = 2;		// rpm always on
    123          
    124          	// which i/o data points are turned on/off
    125          	//   bit 7 = 16bit Freq, 6 = all digitals, 5 = Anlg3, 4 = Anlg2
    126          	//   bit 3 = Anlg1, 2 = Anlg0, 1 = Freq1, 0 = Freq0
    127          	// set up analogs
    128          
    129          	for (i = 0; i < NUMANALOGS; i++) {
   \   00000004   ........           LDR      R3,??DataTable12_3
   \   00000008   8300A0E3           MOV      R0,#+131
   \   0000000C   0210A0E3           MOV      R1,#+2
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   03C0A0E1           MOV      R12,R3
   \   00000018   01E0A0E3           MOV      LR,#+1
    130          		// analog enable bits
    131          		if (vehicleData.analogInput[i].enabled) {
   \                     ??getIoData_0:
   \   0000001C   9340DCE5           LDRB     R4,[R12, #+147]
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   0300000A           BEQ      ??getIoData_1
    132          			iodata |= (u08) (1 << (2+i));
   \   00000028   024082E2           ADD      R4,R2,#+2
   \   0000002C   1E0480E1           ORR      R0,R0,LR, LSL R4
   \   00000030   FF0000E2           AND      R0,R0,#0xFF
    133          			iobytesenabled++;
   \   00000034   011081E2           ADD      R1,R1,#+1
    134          		} // if
    135          	} // for
   \                     ??getIoData_1:
   \   00000038   012082E2           ADD      R2,R2,#+1
   \   0000003C   40C08CE2           ADD      R12,R12,#+64
   \   00000040   040052E3           CMP      R2,#+4
   \   00000044   F4FFFFBA           BLT      ??getIoData_0
    136          	
    137          		// if either digital input enabled, turn them both on
    138          	if (vehicleData.digitalInput[0].enabled || vehicleData.digitalInput[1].enabled) {
   \   00000048   A321D3E5           LDRB     R2,[R3, #+419]
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   D221D305           LDRBEQ   R2,[R3, #+466]
   \   00000054   00005203           CMPEQ    R2,#+0
    139          		iodata |= (u08) (1 << 6);
    140          		iobytesenabled++;
   \   00000058   ........           LDR      R2,??DataTable12_5
   \   0000005C   01108112           ADDNE    R1,R1,#+1
   \   00000060   40008013           ORRNE    R0,R0,#0x40
   \   00000064   0010C2E5           STRB     R1,[R2, #+0]
    141          	} // if
    142          
    143          	return iodata;
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
    144          } // getIoData
    145          
    146          // returns the mode samp definition byte for the SU

   \                                 In section .text, align 4, keep-with-next
    147          u08 getModeSamp( void ) {
    148          	u08 mode = 4;					// 1 = 10hz, 2 = 20hz, 4 = 40hz
    149          	
    150          	// put recording mode in upper nibble
    151          	mode |= ((u08) unsavedSysData.recordingMode) << 4;
    152          
    153          	return mode;
   \                     getModeSamp:
   \   00000000   ........           LDR      R0,??DataTable12_6
   \   00000004   0410A0E3           MOV      R1,#+4
   \   00000008   8900D0E5           LDRB     R0,[R0, #+137]
   \   0000000C   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000010   FF0000E2           AND      R0,R0,#0xFF
   \   00000014   1EFF2FE1           BX       LR               ;; return
    154          } // getModeSamp
    155          
    156          static void ChangeSUMode(tmstatetype targetstate) {
    157          	int inputnum;
    158          
    159          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = (unsigned char) targetstate;	// new operating mode
    160          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+1] = getModeSamp();
    161          
    162          	// which i/o data points are turned on/off
    163          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+2] = iocollect = getIoData();
    164          	
    165          	// analog input ranges
    166          	for (inputnum = 0; inputnum < NUMANALOGS; inputnum++) {
    167          		switch (vehicleData.analogInput[inputnum].inputRange) {
    168          			case 10:
    169          				com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+3+inputnum] = 3;
    170          				break;
    171          			case 5:
    172          				com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+3+inputnum] = 2;
    173          				break;
    174          			case 20:
    175          			default:
    176          				com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+3+inputnum] = 4;
    177          				break;
    178          		} // switch
    179          	} // for
    180          	
    181          	// send frequency alarm data for currently selected car
    182          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+7] = SWAP16(vehicleData.tach.upperYellowStart);
    183          	
    184          	// Tell SU to start sending data
    185          	SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) MODE_CHANGE, 10);
    186          
    187          } // ChangeSUMode
    188          

   \                                 In section .text, align 4, keep-with-next
    189          static unsigned char ChangeSUCamera( void ) {
   \                     ChangeSUCamera:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   84DF4DE2           SUB      SP,SP,#+528
    190          	int i;
    191          	flashpagetype flashpage;				// dataflash sector for SU
    192          
    193          	for (i=0; i < sizeof(flashpagetype); i++)
    194          		flashpage.bigbuff[i] = 0xFF;
   \   00000008   FF20A0E3           MOV      R2,#+255
   \   0000000C   841FA0E3           MOV      R1,#+528
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       __aeabi_memset4
    195          
    196          	// put in analog scales
    197          	for (i=0; i < NUMANALOGS; i++)
   \   00000018   ........           LDR      R1,??DataTable12_3
   \   0000001C   18008DE2           ADD      R0,SP,#+24
   \   00000020   0120A0E1           MOV      R2,R1
   \   00000024   0430A0E3           MOV      R3,#+4
    198          		flashpage.io.analogs[i].maxscale = vehicleData.analogInput[i].inputRange;
   \                     ??ChangeSUCamera_1:
   \   00000028   A0C0D2E5           LDRB     R12,[R2, #+160]
   \   0000002C   402082E2           ADD      R2,R2,#+64
   \   00000030   013053E2           SUBS     R3,R3,#+1
   \   00000034   28C0C0E4           STRB     R12,[R0], #+40
   \   00000038   FAFFFF1A           BNE      ??ChangeSUCamera_1
    199          	
    200          	// digital outputs not supported except for camera control
    201          	flashpage.io.digouts[0] = 0x00;			// digital input
    202          	flashpage.io.digouts[1] = 0x00;			// digital input
    203          
    204          //	choosing not to put these in since they get changed during modechange
    205          //	analogdefs analogs[NUMANALOGS];			// 40x4 = 160
    206          //	digitaldefs digitals[NUMDIGITALS];		// 36x7 = 252
    207          //	freqdefs frequency[NUMFREQS]; 			// 5x2 = 10
    208          			
    209          	// determine which selection was chosen and program the camera bits
    210          	switch (vehicleData.camera) {
   \   0000003C   7400D1E5           LDRB     R0,[R1, #+116]
   \   00000040   0040A0E3           MOV      R4,#+0
   \   00000044   A641CDE5           STRB     R4,[SP, #+422]
   \   00000048   010040E2           SUB      R0,R0,#+1
   \   0000004C   A741CDE5           STRB     R4,[SP, #+423]
   \   00000050   0D0050E3           CMP      R0,#+13
   \   00000054   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??ChangeSUCamera_0:
   \   00000058   1B00008A           BHI      ??ChangeSUCamera_2
   \   0000005C   160000EA           B        ??ChangeSUCamera_3
   \   00000060   150000EA           B        ??ChangeSUCamera_3
   \   00000064   0A0000EA           B        ??ChangeSUCamera_4
   \   00000068   130000EA           B        ??ChangeSUCamera_3
   \   0000006C   160000EA           B        ??ChangeSUCamera_2
   \   00000070   150000EA           B        ??ChangeSUCamera_2
   \   00000074   140000EA           B        ??ChangeSUCamera_2
   \   00000078   0B0000EA           B        ??ChangeSUCamera_5
   \   0000007C   0C0000EA           B        ??ChangeSUCamera_6
   \   00000080   0F0000EA           B        ??ChangeSUCamera_7
   \   00000084   080000EA           B        ??ChangeSUCamera_5
   \   00000088   030000EA           B        ??ChangeSUCamera_8
   \   0000008C   040000EA           B        ??ChangeSUCamera_9
   \   00000090   FFFFFFEA           B        ??ChangeSUCamera_4
    211          		case CAMERA_NONE: // None
    212          		case CAMERA_USB:
    213          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + DISABLED;
    214          			break;
    215          		case CAMERA_CHASECAM:		// deprecated to Mobius
    216          		case CAMERA_MOBIUS: // Mobius
    217          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + MOBIUS;
   \                     ??ChangeSUCamera_4:
   \   00000094   0B10A0E3           MOV      R1,#+11
   \   00000098   0A0000EA           B        ??ChangeSUCamera_10
    218          			break;
    219          		case CAMERA_REPLAY_MINI: // Replay Mini USB
    220          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + REPLAYMINI;
   \                     ??ChangeSUCamera_8:
   \   0000009C   0910A0E3           MOV      R1,#+9
   \   000000A0   080000EA           B        ??ChangeSUCamera_10
    221          			break;
    222          		case CAMERA_REPLAY_PRIMEX: // Replay PrimeX USB
    223          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + REPLAYPRIME;
   \                     ??ChangeSUCamera_9:
   \   000000A4   0A10A0E3           MOV      R1,#+10
   \   000000A8   060000EA           B        ??ChangeSUCamera_10
    224          			break;
    225          		case CAMERA_GOPRO_HD: // GoPro
    226          		case CAMERA_GOPRO_HD_PRO:
    227          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + GOPROCAMERA;
   \                     ??ChangeSUCamera_5:
   \   000000AC   0710A0E3           MOV      R1,#+7
   \   000000B0   040000EA           B        ??ChangeSUCamera_10
    228          			break;
    229          		case CAMERA_REPLAY_HD: // ReplayXD
    230          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + REPLAYCAMERA;
   \                     ??ChangeSUCamera_6:
   \   000000B4   0610A0E3           MOV      R1,#+6
   \   000000B8   020000EA           B        ??ChangeSUCamera_10
    231          			break;
    232          		case CAMERA_CHASECAM_LANC:
    233          		case CAMERA_SONY_HD:
    234          		case CAMERA_RACECAM_HD: // Sony HD
    235          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + SONYLANC;
   \                     ??ChangeSUCamera_3:
   \   000000BC   0C10A0E3           MOV      R1,#+12
   \   000000C0   000000EA           B        ??ChangeSUCamera_10
    236          			break;
    237          		case CAMERA_REPLAY_XD_USB: // ReplayXD USB
    238          			flashpage.io.digouts[0] = (flashpage.io.digouts[0] & 0xF0) + REPLAYXDUSB;
   \                     ??ChangeSUCamera_7:
   \   000000C4   0810A0E3           MOV      R1,#+8
   \                     ??ChangeSUCamera_10:
   \   000000C8   A611CDE5           STRB     R1,[SP, #+422]
    239          			break;
    240          	} // switch
    241          
    242          	// put in the write address
    243          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = (u08) 0;
   \                     ??ChangeSUCamera_2:
   \   000000CC   ........           LDR      R5,??DataTable12
    244          	com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+1] = (u08) (IODEFPAGE & 0xFF);
   \   000000D0   0310A0E3           MOV      R1,#+3
   \   000000D4   900095E5           LDR      R0,[R5, #+144]
   \   000000D8   0740C0E5           STRB     R4,[R0, #+7]
   \   000000DC   900095E5           LDR      R0,[R5, #+144]
   \   000000E0   0810C0E5           STRB     R1,[R0, #+8]
    245          	
    246          	// copy segment into output buffer
    247          	for (i=0; i < MAX_PAGE_SIZE; i++)
   \   000000E4   0000A0E3           MOV      R0,#+0
    248          		com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START+2+i] = flashpage.bigbuff[i];
   \                     ??ChangeSUCamera_11:
   \   000000E8   901095E5           LDR      R1,[R5, #+144]
   \   000000EC   0D20D0E7           LDRB     R2,[R0, +SP]
   \   000000F0   011080E0           ADD      R1,R0,R1
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   0920C1E5           STRB     R2,[R1, #+9]
   \   000000FC   840F50E3           CMP      R0,#+528
   \   00000100   F8FFFFBA           BLT      ??ChangeSUCamera_11
    249          
    250          	for (i=0; i<3; i++) {
   \   00000104   1270A0E3           MOV      R7,#+18
   \   00000108   0360A0E3           MOV      R6,#+3
   \   0000010C   807F87E3           ORR      R7,R7,#0x200
    251          		// send io defs to SU for use in digital outputs
    252          		SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) WRITE_SEGMENT, MSGDATA);
   \                     ??ChangeSUCamera_12:
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   9820A0E3           MOV      R2,#+152
   \   00000118   0210A0E3           MOV      R1,#+2
   \   0000011C   0300A0E3           MOV      R0,#+3
   \   00000120   ........           BL       SendMessage
    253          		if (Get_Ack()) return TRUE;
   \   00000124   0080A0E3           MOV      R8,#+0
   \   00000128   962FA0E3           MOV      R2,#+600
   \   0000012C   8010A0E3           MOV      R1,#+128
   \   00000130   0200A0E3           MOV      R0,#+2
   \   00000134   ........           BL       PF_OS_WaitEventTimed
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   84109515           LDRNE    R1,[R5, #+132]
   \   00000140   00005113           CMPNE    R1,#+0
   \   00000144   0800000A           BEQ      ??ChangeSUCamera_13
   \   00000148   844085E5           STR      R4,[R5, #+132]
   \   0000014C   0500D1E5           LDRB     R0,[R1, #+5]
   \   00000150   060050E3           CMP      R0,#+6
   \   00000154   0180A003           MOVEQ    R8,#+1
   \   00000158   0000A0E3           MOV      R0,#+0
   \   0000015C   ........           BL       Parse_Message
   \   00000160   000058E3           CMP      R8,#+0
   \   00000164   0100A013           MOVNE    R0,#+1
   \   00000168   0200001A           BNE      ??ChangeSUCamera_14
    254          	} // if
   \                     ??ChangeSUCamera_13:
   \   0000016C   016056E2           SUBS     R6,R6,#+1
   \   00000170   E6FFFF1A           BNE      ??ChangeSUCamera_12
    255          	return FALSE;
   \   00000174   0000A0E3           MOV      R0,#+0
   \                     ??ChangeSUCamera_14:
   \   00000178   84DF8DE2           ADD      SP,SP,#+528      ;; stack cleaning
   \   0000017C   F081BDE8           POP      {R4-R8,PC}       ;; return
    256          		
    257          } // ChangeSUCamera
    258          
    259          static void ChangeUSBCamera( int activate ) {
    260          
    261          	if (activate)
    262          		PIOA_SODR = (1 << USB_ENABLE_PIN);			// turn on usb
    263          	else
    264          		PIOA_CODR = (1 << USB_ENABLE_PIN);			// turn off usb
    265          	
    266          } // ChangeUSBCamera
    267          
    268          // changes flag to stop recording after user defined stationary period

   \                                 In section .text, align 4, keep-with-next
    269          static void stopRecording ( void ) {
    270          	unsavedSysData.recordingTimedout = TRUE;
   \                     stopRecording:
   \   00000000   ........           LDR      R0,??DataTable12_6
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   D410C0E5           STRB     R1,[R0, #+212]
    271          } // stopRecording
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    272          
    273          static int USBCameraOn ( void ) {
    274          	return (0 != (PIOA_PDSR & (1 << USB_ENABLE_PIN)));
    275          } // USBCameraOn
    276          
    277          static unsigned char ChangeAutoOn( void ) {
    278          	int i;
    279          
    280          #ifdef AUTOON
    281          	// program AutoOn into SU
    282          	if (suData.suHwRev < 200)	// only do this if we are connected to SU2
    283          		return TRUE;
    284          	else {
    285          		for (i=0; i<3; i++) {
    286          			// Send AutoOn status to SU
    287          			com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = (sysData.autoOn? 1 : 0);
    288          			SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) AUTO_ON, 1);
    289          			
    290          			if (Get_Ack()) return TRUE;
    291          		
    292          		} // for
    293          	} // else
    294          	return FALSE;
    295          #else
    296          	return TRUE;
    297          #endif
    298          } // ChangeAutoOn
    299          
    300          
    301          // returns true if SU was successfully stopped
    302          //

   \                                 In section .text, align 4, keep-with-next
    303          static BOOL StopSU( void ) {
   \                     StopSU:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    304          	int i;
    305          
    306          	// try 7 times to reset the sensor unit
    307          	for (i=0; i<7; i++) {
   \   00000004   0740A0E3           MOV      R4,#+7
   \   00000008   0350A0E3           MOV      R5,#+3
   \   0000000C   ........           LDR      R6,??DataTable12_3
   \   00000010   ........           LDR      R7,??DataTable12_6
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   ........           LDR      R9,??DataTable12
    308          		
    309          		// Reset the sensor unit
    310          		ChangeSUMode(WAITING);
   \                     ??StopSU_0:
   \   0000001C   900099E5           LDR      R0,[R9, #+144]
   \   00000020   0410A0E3           MOV      R1,#+4
   \   00000024   0780C0E5           STRB     R8,[R0, #+7]
   \   00000028   8900D7E5           LDRB     R0,[R7, #+137]
   \   0000002C   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000030   901099E5           LDR      R1,[R9, #+144]
   \   00000034   0800C1E5           STRB     R0,[R1, #+8]
   \   00000038   ........           BL       getIoData
   \   0000003C   901099E5           LDR      R1,[R9, #+144]
   \   00000040   CE00C9E5           STRB     R0,[R9, #+206]
   \   00000044   0900C1E5           STRB     R0,[R1, #+9]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0610A0E1           MOV      R1,R6
   \                     ??StopSU_1:
   \   00000050   A020D1E5           LDRB     R2,[R1, #+160]
   \   00000054   052052E2           SUBS     R2,R2,#+5
   \   00000058   0200000A           BEQ      ??StopSU_2
   \   0000005C   052052E2           SUBS     R2,R2,#+5
   \   00000060   0700000A           BEQ      ??StopSU_3
   \   00000064   0A0000EA           B        ??StopSU_4
   \                     ??StopSU_2:
   \   00000068   902099E5           LDR      R2,[R9, #+144]
   \   0000006C   0230A0E3           MOV      R3,#+2
   \   00000070   090000EA           B        ??StopSU_5
   \                     ??StopSU_6:
   \   00000074   014054E2           SUBS     R4,R4,#+1
   \   00000078   E7FFFF1A           BNE      ??StopSU_0
    311          
    312          		if (Get_Ack()) {
    313          			return true;		// worked so report all is good
    314          		} // if
    315          	} // for
    316          	return false;				// didn't work
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??StopSU_3:
   \   00000084   902099E5           LDR      R2,[R9, #+144]
   \   00000088   022080E0           ADD      R2,R0,R2
   \   0000008C   0A50C2E5           STRB     R5,[R2, #+10]
   \   00000090   030000EA           B        ??StopSU_7
   \                     ??StopSU_4:
   \   00000094   902099E5           LDR      R2,[R9, #+144]
   \   00000098   0430A0E3           MOV      R3,#+4
   \                     ??StopSU_5:
   \   0000009C   022080E0           ADD      R2,R0,R2
   \   000000A0   0A30C2E5           STRB     R3,[R2, #+10]
   \                     ??StopSU_7:
   \   000000A4   010080E2           ADD      R0,R0,#+1
   \   000000A8   401081E2           ADD      R1,R1,#+64
   \   000000AC   040050E3           CMP      R0,#+4
   \   000000B0   E6FFFFBA           BLT      ??StopSU_1
   \   000000B4   201096E5           LDR      R1,[R6, #+32]
   \   000000B8   900099E5           LDR      R0,[R9, #+144]
   \   000000BC   4114A0E1           ASR      R1,R1,#+8
   \   000000C0   0E10C0E5           STRB     R1,[R0, #+14]
   \   000000C4   0A30A0E3           MOV      R3,#+10
   \   000000C8   9120A0E3           MOV      R2,#+145
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   0300A0E3           MOV      R0,#+3
   \   000000D4   ........           BL       SendMessage
   \   000000D8   00A0A0E3           MOV      R10,#+0
   \   000000DC   962FA0E3           MOV      R2,#+600
   \   000000E0   8010A0E3           MOV      R1,#+128
   \   000000E4   0200A0E3           MOV      R0,#+2
   \   000000E8   ........           BL       PF_OS_WaitEventTimed
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   84109915           LDRNE    R1,[R9, #+132]
   \   000000F4   00005113           CMPNE    R1,#+0
   \   000000F8   DDFFFF0A           BEQ      ??StopSU_6
   \   000000FC   848089E5           STR      R8,[R9, #+132]
   \   00000100   0500D1E5           LDRB     R0,[R1, #+5]
   \   00000104   060050E3           CMP      R0,#+6
   \   00000108   01A0A003           MOVEQ    R10,#+1
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   ........           BL       Parse_Message
   \   00000114   00005AE3           CMP      R10,#+0
   \   00000118   D5FFFF0A           BEQ      ??StopSU_6
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   F087BDE8           POP      {R4-R10,PC}
    317          } // StopSU
    318          

   \                                 In section .text, align 4, keep-with-next
    319          static void InitCommTask(void) {
   \                     InitCommTask:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    320          
    321          	// clear any pending events
    322          	OS_ClearEvents(&commTCB);
   \   00000004   ........           LDR      R0,??DataTable12_7
   \   00000008   ........           BL       OS_ClearEvents
    323          
    324          	// mark buffer free
    325          	com[0].rxptr = NULL;
   \   0000000C   ........           LDR      R5,??DataTable12
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   844085E5           STR      R4,[R5, #+132]
    326          	
    327          // Not sure what to do here. If no SU and AutoOn is enabled, can't turn off Traqdash.
    328          // Weigh that against having to re-enable AutoOn when next connected to SU2.
    329          //	if (!(suData.suPresent = StopSU()))				// if initialization worked, su is present
    330          //		sysData.autoOn = false;						// turn off autoOn if we are not connected to SU
    331          	
    332          	suData.suPresent = StopSU();					// if initialization worked, su is present
   \   00000018   ........           BL       StopSU
   \   0000001C   ........           LDR      R6,??DataTable12_1
    333          	
    334          	unsavedSysData.recordingMode = TQM_MODE_DRIVE;		// initialize to something
   \   00000020   ........           LDR      R7,??CommTask_1+0x4
   \   00000024   0510A0E3           MOV      R1,#+5
   \   00000028   0C00C6E5           STRB     R0,[R6, #+12]
   \   0000002C   8910C7E5           STRB     R1,[R7, #+137]
    335          	
    336          	if (!suData.suPresent) {
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600001A           BNE      ??InitCommTask_0
    337          		// didn't hook up with SU so keep trying but at a slower rate
    338          		do {
    339          			
    340          			OS_Delay(1000);			// wait a second
   \                     ??InitCommTask_1:
   \   00000038   FA1FA0E3           MOV      R1,#+1000
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   ........           BL       PF_OS_Delay
    341          	
    342          			// Reset the sensor unit
    343          			suData.suPresent = StopSU();					// if initialization worked, su is present
   \   00000044   ........           BL       StopSU
   \   00000048   0C00C6E5           STRB     R0,[R6, #+12]
    344          	
    345          		} while (!suData.suPresent);
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F8FFFF0A           BEQ      ??InitCommTask_1
    346          	} // if
    347          
    348          	do {
    349          		SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) READ_UNIT_INFO, 0);
   \                     ??InitCommTask_0:
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   7020A0E3           MOV      R2,#+112
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   0300A0E3           MOV      R0,#+3
   \   00000064   ........           BL       SendMessage
    350          		Get_Ack();
   \   00000068   962FA0E3           MOV      R2,#+600
   \   0000006C   8010A0E3           MOV      R1,#+128
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       PF_OS_WaitEventTimed
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   84109515           LDRNE    R1,[R5, #+132]
   \   00000080   00005113           CMPNE    R1,#+0
   \   00000084   0200000A           BEQ      ??InitCommTask_2
   \   00000088   844085E5           STR      R4,[R5, #+132]
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   ........           BL       Parse_Message
    351          	} while (!gotscratchpad);
   \                     ??InitCommTask_2:
   \   00000094   CC00D5E5           LDRB     R0,[R5, #+204]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   ECFFFF0A           BEQ      ??InitCommTask_0
    352          
    353          	// translate all the useful info into separate variables
    354          	suData.suSwRev = SWAP16(scratchpad.calibrate.swrev);
   \   000000A0   6A00D5E5           LDRB     R0,[R5, #+106]
   \   000000A4   6910D5E5           LDRB     R1,[R5, #+105]
   \   000000A8   6A20D5E5           LDRB     R2,[R5, #+106]
   \   000000AC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000B0   6910D5E5           LDRB     R1,[R5, #+105]
   \   000000B4   022481E1           ORR      R2,R1,R2, LSL #+8
   \   000000B8   0214A0E1           LSL      R1,R2,#+8
   \   000000BC   200481E1           ORR      R0,R1,R0, LSR #+8
   \   000000C0   B001C6E1           STRH     R0,[R6, #+16]
    355          	suData.suDataRev = SWAP16(scratchpad.calibrate.datarev);
   \   000000C4   6C00D5E5           LDRB     R0,[R5, #+108]
   \   000000C8   6B10D5E5           LDRB     R1,[R5, #+107]
   \   000000CC   6C20D5E5           LDRB     R2,[R5, #+108]
   \   000000D0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000D4   6B10D5E5           LDRB     R1,[R5, #+107]
   \   000000D8   022481E1           ORR      R2,R1,R2, LSL #+8
   \   000000DC   0214A0E1           LSL      R1,R2,#+8
   \   000000E0   200481E1           ORR      R0,R1,R0, LSR #+8
   \   000000E4   B201C6E1           STRH     R0,[R6, #+18]
    356          	suData.suHwRev = scratchpad.calibrate.hwrev;
   \   000000E8   5200D5E5           LDRB     R0,[R5, #+82]
   \   000000EC   1400C6E5           STRB     R0,[R6, #+20]
    357          	suData.buildDateWeek = scratchpad.calibrate.week;
   \   000000F0   5700D5E5           LDRB     R0,[R5, #+87]
   \   000000F4   1500C6E5           STRB     R0,[R6, #+21]
    358          	suData.buildDateYear = scratchpad.calibrate.year;
   \   000000F8   5800D5E5           LDRB     R0,[R5, #+88]
   \   000000FC   1600C6E5           STRB     R0,[R6, #+22]
    359          	suData.serialNumber = SWAP32(scratchpad.calibrate.serno);
   \   00000100   530085E2           ADD      R0,R5,#+83
   \   00000104   ........           BL       __aeabi_uread4
   \   00000108   0080A0E1           MOV      R8,R0
   \   0000010C   530085E2           ADD      R0,R5,#+83
   \   00000110   ........           BL       __aeabi_uread4
   \   00000114   0090A0E1           MOV      R9,R0
   \   00000118   530085E2           ADD      R0,R5,#+83
   \   0000011C   ........           BL       __aeabi_uread4
   \   00000120   FF1CA0E3           MOV      R1,#+65280
   \   00000124   291401E0           AND      R1,R1,R9, LSR #+8
   \   00000128   FF28A0E3           MOV      R2,#+16711680
   \   0000012C   281C81E1           ORR      R1,R1,R8, LSR #+24
   \   00000130   000402E0           AND      R0,R2,R0, LSL #+8
   \   00000134   018080E1           ORR      R8,R0,R1
   \   00000138   530085E2           ADD      R0,R5,#+83
   \   0000013C   ........           BL       __aeabi_uread4
   \   00000140   000C88E1           ORR      R0,R8,R0, LSL #+24
   \   00000144   180086E5           STR      R0,[R6, #+24]
    360          	accelx.min = (float) SWAP16(scratchpad.calibrate.xminusg);
   \   00000148   5E00D5E5           LDRB     R0,[R5, #+94]
   \   0000014C   5D10D5E5           LDRB     R1,[R5, #+93]
   \   00000150   5E20D5E5           LDRB     R2,[R5, #+94]
   \   00000154   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000158   5D10D5E5           LDRB     R1,[R5, #+93]
   \   0000015C   022481E1           ORR      R2,R1,R2, LSL #+8
   \   00000160   FF1CA0E3           MOV      R1,#+65280
   \   00000164   021401E0           AND      R1,R1,R2, LSL #+8
   \   00000168   200481E1           ORR      R0,R1,R0, LSR #+8
   \   0000016C   ........           BL       __aeabi_i2f
   \   00000170   980085E5           STR      R0,[R5, #+152]
    361          	accelx.zero = (float) SWAP16(scratchpad.calibrate.xzero);
   \   00000174   5A00D5E5           LDRB     R0,[R5, #+90]
   \   00000178   5910D5E5           LDRB     R1,[R5, #+89]
   \   0000017C   5A20D5E5           LDRB     R2,[R5, #+90]
   \   00000180   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000184   5910D5E5           LDRB     R1,[R5, #+89]
   \   00000188   022481E1           ORR      R2,R1,R2, LSL #+8
   \   0000018C   FF1CA0E3           MOV      R1,#+65280
   \   00000190   021401E0           AND      R1,R1,R2, LSL #+8
   \   00000194   200481E1           ORR      R0,R1,R0, LSR #+8
   \   00000198   ........           BL       __aeabi_i2f
   \   0000019C   9C0085E5           STR      R0,[R5, #+156]
    362          	accelx.max = (float) SWAP16(scratchpad.calibrate.xplusg);
   \   000001A0   6000D5E5           LDRB     R0,[R5, #+96]
   \   000001A4   5F10D5E5           LDRB     R1,[R5, #+95]
   \   000001A8   6020D5E5           LDRB     R2,[R5, #+96]
   \   000001AC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000001B0   5F10D5E5           LDRB     R1,[R5, #+95]
   \   000001B4   022481E1           ORR      R2,R1,R2, LSL #+8
   \   000001B8   FF1CA0E3           MOV      R1,#+65280
   \   000001BC   021401E0           AND      R1,R1,R2, LSL #+8
   \   000001C0   200481E1           ORR      R0,R1,R0, LSR #+8
   \   000001C4   ........           BL       __aeabi_i2f
   \   000001C8   A00085E5           STR      R0,[R5, #+160]
    363          	accely.min = (float) SWAP16(scratchpad.calibrate.yminusg);
   \   000001CC   6200D5E5           LDRB     R0,[R5, #+98]
   \   000001D0   6110D5E5           LDRB     R1,[R5, #+97]
   \   000001D4   6220D5E5           LDRB     R2,[R5, #+98]
   \   000001D8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000001DC   6110D5E5           LDRB     R1,[R5, #+97]
   \   000001E0   022481E1           ORR      R2,R1,R2, LSL #+8
   \   000001E4   FF1CA0E3           MOV      R1,#+65280
   \   000001E8   021401E0           AND      R1,R1,R2, LSL #+8
   \   000001EC   200481E1           ORR      R0,R1,R0, LSR #+8
   \   000001F0   ........           BL       __aeabi_i2f
   \   000001F4   A40085E5           STR      R0,[R5, #+164]
    364          	accely.zero = (float) SWAP16(scratchpad.calibrate.yzero);
   \   000001F8   5C00D5E5           LDRB     R0,[R5, #+92]
   \   000001FC   5B10D5E5           LDRB     R1,[R5, #+91]
   \   00000200   5C20D5E5           LDRB     R2,[R5, #+92]
   \   00000204   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000208   5B10D5E5           LDRB     R1,[R5, #+91]
   \   0000020C   022481E1           ORR      R2,R1,R2, LSL #+8
   \   00000210   FF1CA0E3           MOV      R1,#+65280
   \   00000214   021401E0           AND      R1,R1,R2, LSL #+8
   \   00000218   200481E1           ORR      R0,R1,R0, LSR #+8
   \   0000021C   ........           BL       __aeabi_i2f
   \   00000220   A80085E5           STR      R0,[R5, #+168]
    365          	accely.max = (float) SWAP16(scratchpad.calibrate.yplusg);
   \   00000224   6400D5E5           LDRB     R0,[R5, #+100]
   \   00000228   6310D5E5           LDRB     R1,[R5, #+99]
   \   0000022C   6420D5E5           LDRB     R2,[R5, #+100]
   \   00000230   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000234   6310D5E5           LDRB     R1,[R5, #+99]
   \   00000238   022481E1           ORR      R2,R1,R2, LSL #+8
   \   0000023C   FF1CA0E3           MOV      R1,#+65280
   \   00000240   021401E0           AND      R1,R1,R2, LSL #+8
   \   00000244   200481E1           ORR      R0,R1,R0, LSR #+8
   \   00000248   ........           BL       __aeabi_i2f
   \   0000024C   AC0085E5           STR      R0,[R5, #+172]
    366          	accelz.min = ((float) SWAP16(scratchpad.calibrate.zminusg)) / 16.0;
   \   00000250   B607D5E1           LDRH     R0,[R5, #+118]
   \   00000254   FF2CA0E3           MOV      R2,#+65280
   \   00000258   2014A0E1           LSR      R1,R0,#+8
   \   0000025C   000402E0           AND      R0,R2,R0, LSL #+8
   \   00000260   010080E1           ORR      R0,R0,R1
   \   00000264   ........           BL       __aeabi_i2f
   \   00000268   F615A0E3           MOV      R1,#+1031798784
   \   0000026C   ........           BL       __aeabi_fmul
   \   00000270   B00085E5           STR      R0,[R5, #+176]
    367          	accelz.zero = ((float) SWAP16(scratchpad.calibrate.zzero)) / 16.0;
   \   00000274   B407D5E1           LDRH     R0,[R5, #+116]
   \   00000278   FF2CA0E3           MOV      R2,#+65280
   \   0000027C   2014A0E1           LSR      R1,R0,#+8
   \   00000280   000402E0           AND      R0,R2,R0, LSL #+8
   \   00000284   010080E1           ORR      R0,R0,R1
   \   00000288   ........           BL       __aeabi_i2f
   \   0000028C   F615A0E3           MOV      R1,#+1031798784
   \   00000290   ........           BL       __aeabi_fmul
   \   00000294   B40085E5           STR      R0,[R5, #+180]
    368          	accelz.max = ((float) SWAP16(scratchpad.calibrate.zplusg)) / 16.0;
   \   00000298   B807D5E1           LDRH     R0,[R5, #+120]
   \   0000029C   FF2CA0E3           MOV      R2,#+65280
   \   000002A0   2014A0E1           LSR      R1,R0,#+8
   \   000002A4   000402E0           AND      R0,R2,R0, LSL #+8
   \   000002A8   010080E1           ORR      R0,R0,R1
   \   000002AC   ........           BL       __aeabi_i2f
   \   000002B0   F615A0E3           MOV      R1,#+1031798784
   \   000002B4   ........           BL       __aeabi_fmul
   \   000002B8   B80085E5           STR      R0,[R5, #+184]
    369          	
    370          	OS_Delay(3500);					// give it a rest while rest of system boots and config is loaded, worked at 3000 but changed due to change in startup priority
   \   000002BC   AC10A0E3           MOV      R1,#+172
   \   000002C0   D01E81E3           ORR      R1,R1,#0xD00
   \   000002C4   0200A0E3           MOV      R0,#+2
   \   000002C8   ........           BL       PF_OS_Delay
    371          
    372          	if (suData.suHwRev < 200)		// if connected to SU1, disable AutoOn
   \   000002CC   1400D6E5           LDRB     R0,[R6, #+20]
   \   000002D0   C80050E3           CMP      R0,#+200
    373          		sysData.autoOn = false;
   \   000002D4   ........           LDRCC    R0,??DataTable13_12
   \   000002D8   7C40C035           STRBCC   R4,[R0, #+124]
    374          	
    375          	ChangeAutoOn();					// program AutoOn settings into SU
   \   000002DC   1400D6E5           LDRB     R0,[R6, #+20]
   \   000002E0   C80050E3           CMP      R0,#+200
   \   000002E4   1E00003A           BCC      ??InitCommTask_3
   \   000002E8   0380A0E3           MOV      R8,#+3
   \   000002EC   ........           LDR      R9,??DataTable13_12
   \                     ??InitCommTask_4:
   \   000002F0   7C00D9E5           LDRB     R0,[R9, #+124]
   \   000002F4   901095E5           LDR      R1,[R5, #+144]
   \   000002F8   0130A0E3           MOV      R3,#+1
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   0100A013           MOVNE    R0,#+1
   \   00000304   0700C1E5           STRB     R0,[R1, #+7]
   \   00000308   9420A0E3           MOV      R2,#+148
   \   0000030C   0210A0E3           MOV      R1,#+2
   \   00000310   0300A0E3           MOV      R0,#+3
   \   00000314   ........           BL       SendMessage
   \   00000318   00A0A0E3           MOV      R10,#+0
   \   0000031C   962FA0E3           MOV      R2,#+600
   \   00000320   8010A0E3           MOV      R1,#+128
   \   00000324   0200A0E3           MOV      R0,#+2
   \   00000328   ........           BL       PF_OS_WaitEventTimed
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   84109515           LDRNE    R1,[R5, #+132]
   \   00000334   00005113           CMPNE    R1,#+0
   \   00000338   0700000A           BEQ      ??InitCommTask_5
   \   0000033C   844085E5           STR      R4,[R5, #+132]
   \   00000340   0500D1E5           LDRB     R0,[R1, #+5]
   \   00000344   060050E3           CMP      R0,#+6
   \   00000348   01A0A003           MOVEQ    R10,#+1
   \   0000034C   0000A0E3           MOV      R0,#+0
   \   00000350   ........           BL       Parse_Message
   \   00000354   00005AE3           CMP      R10,#+0
   \   00000358   0100001A           BNE      ??InitCommTask_3
   \                     ??InitCommTask_5:
   \   0000035C   018058E2           SUBS     R8,R8,#+1
   \   00000360   E2FFFF1A           BNE      ??InitCommTask_4
    376          
    377          	if (CAMERA_CHASECAM == vehicleData.camera)
   \                     ??InitCommTask_3:
   \   00000364   ........           LDR      R8,??DataTable13_4
   \   00000368   7400D8E5           LDRB     R0,[R8, #+116]
   \   0000036C   030050E3           CMP      R0,#+3
   \   00000370   0300001A           BNE      ??InitCommTask_6
    378          		OS_Delay(7000);				// needed for chasecam
   \   00000374   5810A0E3           MOV      R1,#+88
   \   00000378   6C1D81E3           ORR      R1,R1,#0x1B00
   \   0000037C   0200A0E3           MOV      R0,#+2
   \   00000380   ........           BL       PF_OS_Delay
    379          	
    380          	ChangeSUCamera();				// put camera settings into SU
   \                     ??InitCommTask_6:
   \   00000384   ........           BL       ChangeSUCamera
    381          	
    382          	if (CAMERA_CHASECAM == vehicleData.camera)
   \   00000388   7400D8E5           LDRB     R0,[R8, #+116]
   \   0000038C   030050E3           CMP      R0,#+3
    383          		OS_Delay(7000);				// needed for chasecam
   \   00000390   5810A003           MOVEQ    R1,#+88
   \   00000394   6C1D8103           ORREQ    R1,R1,#0x1B00
    384          	else
    385          		OS_Delay(500);				// just for safety, works at 500, seems to work fine when commented out
   \   00000398   7D1FA013           MOVNE    R1,#+500
   \   0000039C   0200A0E3           MOV      R0,#+2
   \   000003A0   ........           BL       PF_OS_Delay
    386          	
    387          	do {
    388          		ChangeSUMode(GPSINFO);
   \                     ??InitCommTask_7:
   \   000003A4   900095E5           LDR      R0,[R5, #+144]
   \   000003A8   2390A0E3           MOV      R9,#+35
   \   000003AC   0790C0E5           STRB     R9,[R0, #+7]
   \   000003B0   8900D7E5           LDRB     R0,[R7, #+137]
   \   000003B4   0410A0E3           MOV      R1,#+4
   \   000003B8   000281E1           ORR      R0,R1,R0, LSL #+4
   \   000003BC   901095E5           LDR      R1,[R5, #+144]
   \   000003C0   0800C1E5           STRB     R0,[R1, #+8]
   \   000003C4   ........           BL       getIoData
   \   000003C8   901095E5           LDR      R1,[R5, #+144]
   \   000003CC   CE00C5E5           STRB     R0,[R5, #+206]
   \   000003D0   0900C1E5           STRB     R0,[R1, #+9]
   \   000003D4   0000A0E3           MOV      R0,#+0
   \   000003D8   0810A0E1           MOV      R1,R8
   \                     ??InitCommTask_8:
   \   000003DC   A020D1E5           LDRB     R2,[R1, #+160]
   \   000003E0   052052E2           SUBS     R2,R2,#+5
   \   000003E4   0200000A           BEQ      ??InitCommTask_9
   \   000003E8   052052E2           SUBS     R2,R2,#+5
   \   000003EC   0300000A           BEQ      ??InitCommTask_10
   \   000003F0   050000EA           B        ??InitCommTask_11
   \                     ??InitCommTask_9:
   \   000003F4   902095E5           LDR      R2,[R5, #+144]
   \   000003F8   0230A0E3           MOV      R3,#+2
   \   000003FC   040000EA           B        ??InitCommTask_12
   \                     ??InitCommTask_10:
   \   00000400   902095E5           LDR      R2,[R5, #+144]
   \   00000404   0330A0E3           MOV      R3,#+3
   \   00000408   010000EA           B        ??InitCommTask_12
   \                     ??InitCommTask_11:
   \   0000040C   902095E5           LDR      R2,[R5, #+144]
   \   00000410   0430A0E3           MOV      R3,#+4
   \                     ??InitCommTask_12:
   \   00000414   022080E0           ADD      R2,R0,R2
   \   00000418   010080E2           ADD      R0,R0,#+1
   \   0000041C   0A30C2E5           STRB     R3,[R2, #+10]
   \   00000420   401081E2           ADD      R1,R1,#+64
   \   00000424   040050E3           CMP      R0,#+4
   \   00000428   EBFFFFBA           BLT      ??InitCommTask_8
   \   0000042C   201098E5           LDR      R1,[R8, #+32]
   \   00000430   900095E5           LDR      R0,[R5, #+144]
   \   00000434   4114A0E1           ASR      R1,R1,#+8
   \   00000438   0E10C0E5           STRB     R1,[R0, #+14]
   \   0000043C   0A30A0E3           MOV      R3,#+10
   \   00000440   9120A0E3           MOV      R2,#+145
   \   00000444   0210A0E3           MOV      R1,#+2
   \   00000448   0300A0E3           MOV      R0,#+3
   \   0000044C   ........           BL       SendMessage
    389          	} while(!Get_Ack());
   \   00000450   00A0A0E3           MOV      R10,#+0
   \   00000454   962FA0E3           MOV      R2,#+600
   \   00000458   8010A0E3           MOV      R1,#+128
   \   0000045C   0200A0E3           MOV      R0,#+2
   \   00000460   ........           BL       PF_OS_WaitEventTimed
   \   00000464   000050E3           CMP      R0,#+0
   \   00000468   84109515           LDRNE    R1,[R5, #+132]
   \   0000046C   00005113           CMPNE    R1,#+0
   \   00000470   CBFFFF0A           BEQ      ??InitCommTask_7
   \   00000474   844085E5           STR      R4,[R5, #+132]
   \   00000478   0500D1E5           LDRB     R0,[R1, #+5]
   \   0000047C   060050E3           CMP      R0,#+6
   \   00000480   01A0A003           MOVEQ    R10,#+1
   \   00000484   0000A0E3           MOV      R0,#+0
   \   00000488   ........           BL       Parse_Message
   \   0000048C   00005AE3           CMP      R10,#+0
   \   00000490   C3FFFF0A           BEQ      ??InitCommTask_7
    390          
    391          	suData.tmState = GPSINFO;		
   \   00000494   0E90C6E5           STRB     R9,[R6, #+14]
    392          
    393          } // InitCommTask
   \   00000498   F087BDE8           POP      {R4-R10,PC}      ;; return
    394          
    395          #define ALL_COMM_EVENTS ((1 << DU2_MODE_CHANGE) | (1 << DU2_CONFIG_CHANGE) | (1 << TCAT_MSG_RECEIVED | (1 << DU2_CAMERA_CHANGE) | (1 << DU2_SIMULATE_GPS_ON) | (1 << DU2_SIMULATE_GPS_OFF)))
    396          

   \                                 In section .text, align 4, keep-with-next
    397          void CommTask( void ) {
   \                     CommTask:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    398          	char which_event;										 // bitmask of events that occured
    399          	static DU2_STATE_TYPE previous_state;
    400          	char filepath[MAX_FILENAME_SIZE];
    401          	OS_TIMER USBCameraTimer;
    402          	
    403          	unsavedSysData.waitingForRecordSpeed = FALSE;
   \   00000004   7C599FE5           LDR      R5,??CommTask_1+0x4
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   BCD04DE2           SUB      SP,SP,#+188
   \   00000010   D540C5E5           STRB     R4,[R5, #+213]
    404          	
    405            	InitCommTask();
   \   00000014   ........           BL       InitCommTask
    406          	
    407          	OS_CreateTimer(&USBCameraTimer, notifyModeChange, 0);				// create timer for usb camera delay
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   ........           LDR      R1,??DataTable13
   \   00000020   0C008DE2           ADD      R0,SP,#+12
   \   00000024   ........           BL       OS_CreateTimer
    408          	OS_CreateTimer(&stationaryTimer, stopRecording, 0);					// create timer to stop recording when sitting still
   \   00000028   ........           LDR      R6,??DataTable13_1
   \   0000002C   9C00A0E3           MOV      R0,#+156
   \   00000030   6C0D80E3           ORR      R0,R0,#0x1B00
   \   00000034   068080E0           ADD      R8,R0,R6
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   ........           LDR      R1,??DataTable13_2
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   ........           BL       OS_CreateTimer
    409          
    410          	previous_state = unsavedSysData.systemMode;
   \   00000048   8800D5E5           LDRB     R0,[R5, #+136]
    411          	sessionFile = NULL;
   \   0000004C   C44086E5           STR      R4,[R6, #+196]
   \   00000050   ........           LDR      R7,??DataTable13_3
   \   00000054   CF00C6E5           STRB     R0,[R6, #+207]
   \   00000058   ........           LDR      R9,??DataTable13_4
   \   0000005C   8A0200EA           B        ??CommTask_2
    412          	
    413          	while (1) {
    414          		// wait for something to happen
    415          		which_event = OS_WaitEvent( (unsigned char) ALL_COMM_EVENTS );
    416          		
    417          		// read the current vehicle power
    418          		DataValues[VEHICLE_12V].fVal = (BATTERY_VOLTAGE_CONVERSION / 255.0 * (float) (GetADC(ADC_VEHICLE_12V))) + 0.15;
    419          		
    420          		// check for power loss
    421          		if (DataValues[VEHICLE_12V].fVal < SHUTDOWN_VOLTAGE) {
    422          			// save files and shut it down
    423          			
    424          			unsavedSysData.systemMode = DU2_POWERLOSS;		// change global state
    425          				
    426          			// shut down backlight and LEDs to save power
    427          //			LEDSystemShutdown();
    428          
    429          			// close data file and save data
    430          			if (NULL != sessionFile) {
    431          
    432          //				too slow
    433          //				notifyTQM ( DU2_POWER_LOSS );					// tell tqm task to finish up and close file
    434          //				OS_SetPriority( &TQMWriteTCB, 220);				// make tqm task run		  
    435          			  
    436          //				save lap times before losing all power
    437          				FS_FSeek( sessionFile, TQM_LAP_OFFSET, FS_SEEK_SET);	// jump to start of lap times in header
    438          //				
    439          				// write header lap times
    440          //				FS_Write( sessionFile, &(tqmheader.tqmheaderstruct.lapInfo), sizeof(tqmheader.tqmheaderstruct.lapInfo));	// write all laps. works most of the time but it failed once.
    441          				FS_Write( sessionFile, &(tqmheader.tqmheaderstruct.lapInfo), 212);	// write first 50 header lap times. works every time.
    442          
    443          //				close the data file and flush
    444          				FS_FClose(sessionFile);
    445          				FS_Sync("");
    446          				sessionFile = NULL;
    447          			} // if
    448          
    449          			StopSU();			
    450          			OS_Delay(500);				// give it a second
    451          	
    452          			// turn off
    453          			while (1) {			
    454          				// go away, just go away
    455          				SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) POWER_DOWN, (u08) 0);
    456          				
    457          				// wait a bit then send again until it works
    458          				OS_Delay(100);			// wait - but allow other tasks to run!
    459          			} // while
    460          		} // if
    461          		
    462          		// if we are reprogramming ourselves, just stop
    463          		if (DU2_REPROGRAMMING == unsavedSysData.systemMode) {	// don't do anything if we are reflashing unit
   \                     ??CommTask_3:
   \   00000060   8800D5E5           LDRB     R0,[R5, #+136]
   \   00000064   200050E3           CMP      R0,#+32
   \   00000068   0700001A           BNE      ??CommTask_4
    464          			StopSU();
   \   0000006C   ........           BL       StopSU
    465          			do {
    466          				OS_Delay(600000);				// go to sleep for a long time during programming
   \                     ??CommTask_5:
   \   00000070   901AA0E3           MOV      R1,#+589824
   \   00000074   9F1D81E3           ORR      R1,R1,#0x27C0
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   ........           BL       PF_OS_Delay
    467          			} while (DU2_REPROGRAMMING == unsavedSysData.systemMode);
   \   00000080   8800D5E5           LDRB     R0,[R5, #+136]
   \   00000084   200050E3           CMP      R0,#+32
   \   00000088   F8FFFF0A           BEQ      ??CommTask_5
    468          		} // if
    469          
    470          		// set the status of the usb camera
    471          		if (CAMERA_USB == vehicleData.camera) {
   \                     ??CommTask_4:
   \   0000008C   7400D9E5           LDRB     R0,[R9, #+116]
   \   00000090   110050E3           CMP      R0,#+17
   \   00000094   0600001A           BNE      ??CommTask_6
    472          			if (USBCameraOn())
   \   00000098   0C00A0E3           MOV      R0,#+12
   \   0000009C   D00B10E5           LDR      R0,[R0, #-3024]
   \   000000A0   400910E3           TST      R0,#0x100000
   \   000000A4   ........           LDR      R0,??DataTable13_11
    473          				DataValues[CAMERA_STATUS].iVal = CAMERA_STATUS_RECORDING;
   \   000000A8   0310A013           MOVNE    R1,#+3
    474          			else
    475          				DataValues[CAMERA_STATUS].iVal = CAMERA_STATUS_READY;
   \   000000AC   0210A003           MOVEQ    R1,#+2
   \   000000B0   581280E5           STR      R1,[R0, #+600]
    476          		} // if
    477          		
    478          		// check for GPS simulator request
    479          		if (which_event & (1 << (DU2_SIMULATE_GPS_ON))) {
   \                     ??CommTask_6:
   \   000000B4   08009DE5           LDR      R0,[SP, #+8]
   \   000000B8   400010E3           TST      R0,#0x40
   \   000000BC   0700000A           BEQ      ??CommTask_7
    480          			com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = 1;
   \   000000C0   900096E5           LDR      R0,[R6, #+144]
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   0710C0E5           STRB     R1,[R0, #+7]
    481          			SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) SIMULATE_GPS, 1);
   \   000000CC   0130A0E3           MOV      R3,#+1
   \   000000D0   5620A0E3           MOV      R2,#+86
   \   000000D4   0210A0E3           MOV      R1,#+2
   \   000000D8   0300A0E3           MOV      R0,#+3
   \   000000DC   ........           BL       SendMessage
    482          		} // if
    483          		if (which_event & (1 << (DU2_SIMULATE_GPS_OFF))) {
   \                     ??CommTask_7:
   \   000000E0   08009DE5           LDR      R0,[SP, #+8]
   \   000000E4   200010E3           TST      R0,#0x20
   \   000000E8   0600000A           BEQ      ??CommTask_8
    484          			com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = 0;
   \   000000EC   900096E5           LDR      R0,[R6, #+144]
    485          			SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) SIMULATE_GPS, 1);
   \   000000F0   0130A0E3           MOV      R3,#+1
   \   000000F4   0740C0E5           STRB     R4,[R0, #+7]
   \   000000F8   5620A0E3           MOV      R2,#+86
   \   000000FC   0210A0E3           MOV      R1,#+2
   \   00000100   0300A0E3           MOV      R0,#+3
   \   00000104   ........           BL       SendMessage
    486          		} // if
    487          
    488          		if (unsavedSysData.waitingForRecordSpeed || (which_event & (1 << DU2_MODE_CHANGE))) {		// user changed modes
   \                     ??CommTask_8:
   \   00000108   D500D5E5           LDRB     R0,[R5, #+213]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   08009D05           LDREQ    R0,[SP, #+8]
   \   00000114   01001003           TSTEQ    R0,#0x1
   \   00000118   4800000A           BEQ      ??CommTask_9
    489          			if (DU2_REPROGRAMMING_SU == unsavedSysData.systemMode) {	// user requested re-flashing of SU
   \   0000011C   8800D5E5           LDRB     R0,[R5, #+136]
   \   00000120   1F0050E3           CMP      R0,#+31
   \   00000124   0000001A           BNE      ??CommTask_10
    490          				StopSU();
   \   00000128   ........           BL       StopSU
    491          			} // if
    492          			
    493          			if (DU2_SHUTDOWN == unsavedSysData.systemMode) {	// user requested shutdown				
   \                     ??CommTask_10:
   \   0000012C   8800D5E5           LDRB     R0,[R5, #+136]
   \   00000130   1E0050E3           CMP      R0,#+30
   \   00000134   1600001A           BNE      ??CommTask_11
    494          				// close the files
    495          
    496          				if (unsavedSysData.sdCardInserted) {		// only save file if we have an SD card
   \   00000138   C00095E5           LDR      R0,[R5, #+192]
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0500000A           BEQ      ??CommTask_12
    497          					notifyTQM ( DU2_TQM_CLOSE );					// tell tqm task to finish up and close file
   \   00000144   0600A0E3           MOV      R0,#+6
   \   00000148   ........           BL       notifyTQM
    498          					OS_SetPriority( &TQMWriteTCB, 200);						// make tqm task run
   \   0000014C   C820A0E3           MOV      R2,#+200
   \   00000150   ........           LDR      R1,??DataTable13_5
   \   00000154   0200A0E3           MOV      R0,#+2
   \   00000158   ........           BL       PF_OS_SetPriority
    499          				} // if
    500          
    501          				// turn off power to usb
    502          				ChangeUSBCamera( 0 );
   \                     ??CommTask_12:
   \   0000015C   0400A0E3           MOV      R0,#+4
   \   00000160   4019A0E3           MOV      R1,#+1048576
   \   00000164   D01B00E5           STR      R1,[R0, #-3024]
    503          				
    504          				StopSU();			
   \   00000168   ........           BL       StopSU
    505          				OS_Delay(2000);				// give it a second to see messages on screen
   \   0000016C   7D1EA0E3           MOV      R1,#+2000
   \                     ??CommTask_13:
   \   00000170   0200A0E3           MOV      R0,#+2
   \   00000174   ........           BL       PF_OS_Delay
    506          
    507          				// turn off
    508          				while (1) {			
    509          					// go away, just go away
    510          					SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) POWER_DOWN, (u08) 0);
   \   00000178   0030A0E3           MOV      R3,#+0
   \   0000017C   9320A0E3           MOV      R2,#+147
   \   00000180   0210A0E3           MOV      R1,#+2
   \   00000184   0300A0E3           MOV      R0,#+3
   \   00000188   ........           BL       SendMessage
    511          					
    512          					// wait a bit then send again until it works
    513          					OS_Delay(100);			// wait - but allow other tasks to run!
   \   0000018C   6410A0E3           MOV      R1,#+100
   \   00000190   F6FFFFEA           B        ??CommTask_13
    514          
    515          				} // while
    516          			} // if
    517          
    518          			if (DU2_INSTRUMENT == unsavedSysData.systemMode)		// not entering recording mode so clear timers another way
   \                     ??CommTask_11:
   \   00000194   160050E3           CMP      R0,#+22
    519          				LapInitialize = true;
   \   00000198   ........           LDREQ    R0,??DataTable13_6
   \   0000019C   0110A003           MOVEQ    R1,#+1
   \   000001A0   0010C005           STRBEQ   R1,[R0, #+0]
    520          			
    521          			// if we have entered a recording mode, reinitialize SU with recording info
    522          			if (previous_state != unsavedSysData.systemMode) {
   \   000001A4   88A0D5E5           LDRB     R10,[R5, #+136]
   \   000001A8   CF00D6E5           LDRB     R0,[R6, #+207]
   \   000001AC   0A0050E1           CMP      R0,R10
   \   000001B0   2200000A           BEQ      ??CommTask_9
    523          				
    524          				// entering recording state
    525          				if (!DU2_RECORDING(previous_state) && DU2_RECORDING(unsavedSysData.systemMode)) {
   \   000001B4   032040E2           SUB      R2,R0,#+3
   \   000001B8   FF2002E2           AND      R2,R2,#0xFF
   \   000001BC   03104AE2           SUB      R1,R10,#+3
   \   000001C0   130052E3           CMP      R2,#+19
   \   000001C4   2701003A           BCC      ??CommTask_14
   \   000001C8   FF1001E2           AND      R1,R1,#0xFF
   \   000001CC   130051E3           CMP      R1,#+19
   \   000001D0   2401002A           BCS      ??CommTask_14
    526          					int filenum;
    527          					char sessionkind;
    528          					
    529          					if (DataValues[SPEED].fVal >= ((sysData.multiSettings_2 & 0xFFFF0000) >> 16)) {
   \   000001D4   ........           LDR      R0,??DataTable13_12
   \   000001D8   EC0090E5           LDR      R0,[R0, #+236]
   \   000001DC   2008A0E1           LSR      R0,R0,#+16
   \   000001E0   ........           BL       __aeabi_ui2f
   \   000001E4   0010A0E1           MOV      R1,R0
   \   000001E8   ........           LDR      R0,??DataTable13_11
   \   000001EC   700090E5           LDR      R0,[R0, #+112]
   \   000001F0   ........           BL       __aeabi_cfrcmple
   \   000001F4   0800008A           BHI      ??CommTask_15
    530          						unsavedSysData.waitingForRecordSpeed = FALSE;
    531          					} // if
    532          					else {
    533          						unsavedSysData.waitingForRecordSpeed = TRUE;
    534          						goto quick_exit;
    535          					} // if
    536          				
    537          					// check to see whether TraqDash usb camera is enabled
    538          					if (!(0x80 & vehicleData.usbCameraDelay)) {		// upper bit is enable bit
   \   000001F8   0C00D9E5           LDRB     R0,[R9, #+12]
   \   000001FC   D540C5E5           STRB     R4,[R5, #+213]
   \   00000200   800010E3           TST      R0,#0x80
   \   00000204   1C00001A           BNE      ??CommTask_16
    539          						// not enabled so turn off USB camera
    540          						ChangeUSBCamera ( 0 );
   \   00000208   0400A0E3           MOV      R0,#+4
   \   0000020C   4019A0E3           MOV      R1,#+1048576
   \   00000210   D01B00E5           STR      R1,[R0, #-3024]
    541          						waiting_usb_camera = FALSE;
   \                     ??CommTask_17:
   \   00000214   C84086E5           STR      R4,[R6, #+200]
   \   00000218   440000EA           B        ??CommTask_18
    542          					} // if
   \                     ??CommTask_15:
   \   0000021C   0100A0E3           MOV      R0,#+1
   \   00000220   D500C5E5           STRB     R0,[R5, #+213]
    543          					else { // usb camera is enabled
    544          						int delay = 100 * (unsigned int) (0x7F & vehicleData.usbCameraDelay);
    545          						
    546          						if ((CAMERA_NONE == vehicleData.camera) || (CAMERA_USB == vehicleData.camera)) {	// start camera first
    547          							if (USBCameraOn()) {		// turned on previously so we can stop waiting
    548          								waiting_usb_camera = FALSE;
    549          							} // if
    550          							else {		// camera not on
    551          								// turn on USB camera
    552          								ChangeUSBCamera ( 1 );
    553          	
    554          								if (0 != delay) {
    555          									waiting_usb_camera = WAIT_FOR_DATA;
    556          									OS_SetTimerPeriod(&USBCameraTimer, delay);
    557          									OS_RetriggerTimer(&USBCameraTimer);
    558          								} // if
    559          							} // else
    560          						} // if
    561          						else {	// SU camera attached so start data first unless we are just testing
    562          							if (WAIT_FOR_CAMERA == waiting_usb_camera) {
    563          								// turn on USB camera
    564          								ChangeUSBCamera ( 1 );
    565          								waiting_usb_camera = FALSE;
    566          								goto quick_exit;
    567          							} // if
    568          							else if ((0 == delay) || (DU2_CAMERA_TEST == unsavedSysData.systemMode)) {
    569          								// turn on USB camera
    570          								ChangeUSBCamera ( 1 );
    571          								waiting_usb_camera = FALSE;
    572          							}
    573          							else {	// first time through
    574          								waiting_usb_camera = WAIT_FOR_CAMERA;
    575          								OS_SetTimerPeriod(&USBCameraTimer, delay);
    576          								OS_RetriggerTimer(&USBCameraTimer);
    577          							} // else
    578          						} // else
    579          					} // else
    580          					
    581          					if (WAIT_FOR_DATA != waiting_usb_camera) { // process the mode change		
    582          
    583          						// clear the flag for not moving recording stop - now done in ConfigScreens -- gas
    584          //						unsavedSysData.recordingTimedout = FALSE;
    585          						
    586          						// entered a recording mode - translate to SU mode
    587          						switch (unsavedSysData.systemMode) {
    588          							case DU2_LAPS_WAITSTART:
    589          								// set working start line to current track start line
    590          								unsavedSysData.workingStartLineLat = trackData.startLineLat;
    591          								unsavedSysData.workingStartLineLong = trackData.startLineLong;
    592          								unsavedSysData.workingStartLineHeading = trackData.startLineHeading;
    593          								// fall through
    594          							case DU2_LAPS_WAITNOSF:
    595          							case DU2_LAPS:							// This case can still happen if the user presses Set S/F line quickly
    596          								suData.tmState = LAPS;
    597          								unsavedSysData.recordingMode = TQM_MODE_LAPPING;
    598          								firstpulse = true;
    599          								sessionkind = 'R';					// circuit racing
    600          								break;
    601          							case DU2_AUTOX_WAITSTAGE:
    602          //							case DU2_AUTOX:				// can't happen
    603          							case DU2_AUTOX_WAITLAUNCH:
    604          //							case DU2_AUTOX_WAITFINISH:	// can't happen
    605          //							case DU2_AUTOX_COMPLETE:	// can't happen
    606          								// set working finish line to current track finish line
    607          								unsavedSysData.workingFinishLineLat = trackData.finishLineLat;
    608          								unsavedSysData.workingFinishLineLong = trackData.finishLineLong;
    609          								unsavedSysData.workingFinishLineHeading = trackData.finishLineHeading;
    610          	
    611          								suData.tmState = AUTOXREADY;
    612          								unsavedSysData.recordingMode = TQM_MODE_AUTOCROSS;
    613          								firstpulse = true;
    614          								sessionkind = 'A';					// autocross
    615          								break;
    616          	
    617          							case DU2_DRAG_WAITSTAGE:
    618          							case DU2_DRAG_WAITLAUNCH:
    619          //							case DU2_DRAG:				// can't happen
    620          //							case DU2_DRAG_COMPLETE:		// can't happen
    621          								suData.tmState = DRAGREADY;
    622          	
    623          								switch (sysData.dragDistance) {
    624          									case DD_1_4:
    625          										unsavedSysData.recordingMode = TQM_MODE_QTR_MILE;
    626          										sessionkind = 'Q';					// drag racing
    627          										break;
    628          									case DD_1_8:
    629          										unsavedSysData.recordingMode = TQM_MODE_EIGHTHMILE;
    630          										sessionkind = 'E';					// drag racing
    631          										break;
    632          									case DD_1000:
    633          										unsavedSysData.recordingMode = TQM_MODE_THOUSAND;
    634          										sessionkind = 'T';					// drag racing
    635          										break;
    636          								} // switch
    637          								firstpulse = true;
    638          								break;
    639          							case DU2_HILLCLIMB_WAITSTART:
    640          								// set working start line to current track start line
    641          								unsavedSysData.workingStartLineLat = trackData.startLineLat;
    642          								unsavedSysData.workingStartLineLong = trackData.startLineLong;
    643          								unsavedSysData.workingStartLineHeading = trackData.startLineHeading;
    644          								
    645          								// set working finish line to current track finish line
    646          								unsavedSysData.workingFinishLineLat = trackData.finishLineLat;
    647          								unsavedSysData.workingFinishLineLong = trackData.finishLineLong;
    648          								unsavedSysData.workingFinishLineHeading = trackData.finishLineHeading;
    649          								// fall through
    650          							case DU2_HILLCLIMB_WAITNOSF:
    651          //							case DU2_HILLCLIMB:
    652          //							case DU2_HILLCLIMB_WAITFINISH:							
    653          								suData.tmState = HILLCLIMB;
    654          								unsavedSysData.recordingMode = TQM_MODE_HILLCLIMB;
    655          								firstpulse = true;
    656          								sessionkind = 'H';					// hillclimb
    657          								break;
    658          	
    659          							case DU2_DRIVE:
    660          							case DU2_CAMERA_TEST:
    661          							default:
    662          								suData.tmState = DRIVE;
    663          								unsavedSysData.recordingMode = TQM_MODE_DRIVE;
    664          								
    665          								// record where we started
    666          								unsavedSysData.workingStartLineLat = trackData.startLineLat = GetValue(LATITUDE).dVal;
    667          								unsavedSysData.workingStartLineLong = trackData.startLineLong = GetValue(LONGITUDE).dVal;
    668          								unsavedSysData.workingStartLineHeading = trackData.startLineHeading = GetValue(HEADING).fVal;
    669          								firstpulse = true;
    670          								sessionkind = 'D';					// drive
    671          								break;
    672          						} // switch					
    673          	
    674          						// change SU to record mode
    675          						StopSU();
    676          						ChangeSUMode(suData.tmState);
    677          							
    678          						if (DU2_CAMERA_TEST != unsavedSysData.systemMode && unsavedSysData.sdCardInserted) {		// create file if we have an SD card and not a camera test
    679          							strcpy(filepath, MY_SESSIONS_PATH);
    680          							strcat(filepath, "\\");
    681          							formattime(SHORTDATE, filepath+(strlen(filepath)));
    682          							sprintf(filepath+strlen(filepath), "_%s_%s_%s_%c01.tqm", sysData.track, sysData.vehicle, sysData.driver, sessionkind);
    683          							filenum = 1;
    684          							
    685          							// find a unique filename
    686          							while (0xFF != FS_GetFileAttributes(filepath)) {
    687          								sprintf((filepath + strlen(filepath) - 6), "%02d.tqm", ++filenum);
    688          							}
    689          							
    690          							// open tqm file and write out tqm header
    691          							tqmOpen (filepath, strlen(filepath)+1);
    692          						} // if		
    693          					} // if not waitusbcamera
    694          				} // if entered recording
    695          				else if (!DU2_RECORDING(unsavedSysData.systemMode)) {		// entering non-recording state
    696          					// exited a recording mode
    697          					if (DU2_RECORDING(previous_state) && (NULL != sessionFile) && (DU2_CAMERA_TEST != previous_state)) {
    698          						if (DU2_DRIVE == previous_state) {
    699          							// record where we ended
    700          							unsavedSysData.workingFinishLineLat = trackData.finishLineLat = GetValue(LATITUDE).dVal;
    701          							unsavedSysData.workingFinishLineLong = trackData.finishLineLong = GetValue(LONGITUDE).dVal;
    702          							unsavedSysData.workingFinishLineHeading = trackData.finishLineHeading = GetValue(HEADING).fVal;
    703          						} // if
    704          						if (unsavedSysData.sdCardInserted)		// only save file if we have an SD card
    705          							notifyTQM (DU2_TQM_CLOSE);								// orderly close
    706          					} // if
    707          
    708          					// no longer waiting to start
    709          					unsavedSysData.waitingForRecordSpeed = FALSE;
    710          					
    711          					// no longer recording so stop stationary timer
    712          					OS_StopTimer(&stationaryTimer);
    713          					unsavedSysData.timeToStopRecording = 0;
    714          					
    715          					// turn off USB camera
    716          					ChangeUSBCamera ( 0 );
    717          					StopSU();
    718          					
    719          					ChangeSUMode(suData.tmState = GPSINFO);
    720          				} // else if
    721          
    722          quick_exit:		// skipping out without processing mode change
    723          		
    724          				// if we have truly started recording, allow mode to change
    725          				if ((FALSE == waiting_usb_camera) && (FALSE == unsavedSysData.waitingForRecordSpeed))
   \                     ??CommTask_19:
   \   00000224   C80096E5           LDR      R0,[R6, #+200]
   \   00000228   000050E3           CMP      R0,#+0
   \   0000022C   D500D505           LDRBEQ   R0,[R5, #+213]
   \   00000230   00005003           CMPEQ    R0,#+0
   \   00000234   0100001A           BNE      ??CommTask_9
    726          					previous_state = unsavedSysData.systemMode;
   \                     ??CommTask_20:
   \   00000238   8800D5E5           LDRB     R0,[R5, #+136]
   \   0000023C   CF00C6E5           STRB     R0,[R6, #+207]
    727          			} // if
    728          		} // if
    729          		
    730          		if (which_event & (1 << TCAT_MSG_RECEIVED)) {	// got a message from SU
   \                     ??CommTask_9:
   \   00000240   08009DE5           LDR      R0,[SP, #+8]
   \   00000244   800010E3           TST      R0,#0x80
    731          			if (NULL != com[0].rxptr) {
   \   00000248   84109615           LDRNE    R1,[R6, #+132]
   \   0000024C   00005113           CMPNE    R1,#+0
   \   00000250   8901000A           BEQ      ??CommTask_21
    732          				
    733          				u08 *tmpptr = com[0].rxptr;
    734          	
    735          				// mark buffer free
    736          				com[0].rxptr = NULL;
   \   00000254   844086E5           STR      R4,[R6, #+132]
    737          	
    738          				// process the message
    739          				Parse_Message((u08) 0, tmpptr);
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   ........           BL       Parse_Message
    740          				
    741          				// if we got our first GPS position of the session, reset the timers to sync with cameras
    742          				if (firstpulse) {
   \   00000260   CD00D6E5           LDRB     R0,[R6, #+205]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   5801000A           BEQ      ??CommTask_22
    743          					LapInitialize = true;
   \   0000026C   ........           LDR      R0,??DataTable13_6
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   0010C0E5           STRB     R1,[R0, #+0]
   \   00000278   7F0100EA           B        ??CommTask_21
    744          				} // if
   \                     ??CommTask_16:
   \   0000027C   7F0000E2           AND      R0,R0,#0x7F
   \   00000280   6420A0E3           MOV      R2,#+100
   \   00000284   820061E1           SMULBB   R1,R2,R0
   \   00000288   7400D9E5           LDRB     R0,[R9, #+116]
   \   0000028C   000050E3           CMP      R0,#+0
   \   00000290   11005013           CMPNE    R0,#+17
   \   00000294   0B00001A           BNE      ??CommTask_23
   \   00000298   0C00A0E3           MOV      R0,#+12
   \   0000029C   D00B10E5           LDR      R0,[R0, #-3024]
   \   000002A0   400910E3           TST      R0,#0x100000
   \   000002A4   DAFFFF1A           BNE      ??CommTask_17
   \   000002A8   CF00E0E3           MVN      R0,#+207
   \   000002AC   B00EC0E3           BIC      R0,R0,#0xB00
   \   000002B0   4029A0E3           MOV      R2,#+1048576
   \   000002B4   002080E5           STR      R2,[R0, #+0]
   \   000002B8   000051E3           CMP      R1,#+0
   \   000002BC   1800000A           BEQ      ??CommTask_24
   \   000002C0   0100A0E3           MOV      R0,#+1
   \   000002C4   110000EA           B        ??CommTask_25
   \                     ??CommTask_23:
   \   000002C8   C80096E5           LDR      R0,[R6, #+200]
   \   000002CC   020050E3           CMP      R0,#+2
   \   000002D0   0500001A           BNE      ??CommTask_26
   \   000002D4   CF00E0E3           MVN      R0,#+207
   \   000002D8   B00EC0E3           BIC      R0,R0,#0xB00
   \   000002DC   4019A0E3           MOV      R1,#+1048576
   \   000002E0   001080E5           STR      R1,[R0, #+0]
   \   000002E4   C84086E5           STR      R4,[R6, #+200]
   \   000002E8   D2FFFFEA           B        ??CommTask_20
   \                     ??CommTask_26:
   \   000002EC   000051E3           CMP      R1,#+0
   \   000002F0   10005A13           CMPNE    R10,#+16
   \   000002F4   0400001A           BNE      ??CommTask_27
   \   000002F8   CF00E0E3           MVN      R0,#+207
   \   000002FC   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000300   4019A0E3           MOV      R1,#+1048576
   \   00000304   001080E5           STR      R1,[R0, #+0]
   \   00000308   C1FFFFEA           B        ??CommTask_17
   \                     ??CommTask_27:
   \   0000030C   0200A0E3           MOV      R0,#+2
   \                     ??CommTask_25:
   \   00000310   C80086E5           STR      R0,[R6, #+200]
   \   00000314   0C008DE2           ADD      R0,SP,#+12
   \   00000318   ........           BL       OS_SetTimerPeriod
   \   0000031C   0C008DE2           ADD      R0,SP,#+12
   \   00000320   ........           BL       OS_RetriggerTimer
   \                     ??CommTask_24:
   \   00000324   C80096E5           LDR      R0,[R6, #+200]
   \   00000328   010050E3           CMP      R0,#+1
   \   0000032C   C3FFFF0A           BEQ      ??CommTask_9
   \                     ??CommTask_18:
   \   00000330   8800D5E5           LDRB     R0,[R5, #+136]
   \   00000334   030040E2           SUB      R0,R0,#+3
   \   00000338   080050E3           CMP      R0,#+8
   \   0000033C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??CommTask_0:
   \   00000340   4B00008A           BHI      ??CommTask_28
   \   00000344   130000EA           B        ??CommTask_29
   \   00000348   1F0000EA           B        ??CommTask_30
   \   0000034C   0B0000EA           B        ??CommTask_31
   \   00000350   100000EA           B        ??CommTask_29
   \   00000354   1C0000EA           B        ??CommTask_30
   \   00000358   3E0000EA           B        ??CommTask_32
   \   0000035C   010000EA           B        ??CommTask_33
   \   00000360   300000EA           B        ??CommTask_34
   \   00000364   050000EA           B        ??CommTask_31
   \                     ??CommTask_33:
   \   00000368   D001C7E1           LDRD     R0,R1,[R7, #+16]
   \   0000036C   F009C5E1           STRD     R0,R1,[R5, #+144]
   \   00000370   D801C7E1           LDRD     R0,R1,[R7, #+24]
   \   00000374   F809C5E1           STRD     R0,R1,[R5, #+152]
   \   00000378   240097E5           LDR      R0,[R7, #+36]
   \   0000037C   A40085E5           STR      R0,[R5, #+164]
   \                     ??CommTask_31:
   \   00000380   ........           LDR      R0,??DataTable13_14
   \   00000384   0910A0E3           MOV      R1,#+9
   \   00000388   0E10C0E5           STRB     R1,[R0, #+14]
   \   0000038C   8940C5E5           STRB     R4,[R5, #+137]
   \   00000390   52B0A0E3           MOV      R11,#+82
   \   00000394   500000EA           B        ??CommTask_35
   \                     ??CommTask_29:
   \   00000398   D802C7E1           LDRD     R0,R1,[R7, #+40]
   \   0000039C   F80AC5E1           STRD     R0,R1,[R5, #+168]
   \   000003A0   D003C7E1           LDRD     R0,R1,[R7, #+48]
   \   000003A4   F00BC5E1           STRD     R0,R1,[R5, #+176]
   \   000003A8   3C0097E5           LDR      R0,[R7, #+60]
   \   000003AC   1610A0E3           MOV      R1,#+22
   \   000003B0   BC0085E5           STR      R0,[R5, #+188]
   \   000003B4   ........           LDR      R0,??DataTable13_14
   \   000003B8   41B0A0E3           MOV      R11,#+65
   \   000003BC   0E10C0E5           STRB     R1,[R0, #+14]
   \   000003C0   0100A0E3           MOV      R0,#+1
   \   000003C4   8900C5E5           STRB     R0,[R5, #+137]
   \   000003C8   430000EA           B        ??CommTask_35
   \                     ??CommTask_30:
   \   000003CC   ........           LDR      R0,??DataTable13_14
   \   000003D0   1510A0E3           MOV      R1,#+21
   \   000003D4   0E10C0E5           STRB     R1,[R0, #+14]
   \   000003D8   ........           LDR      R0,??DataTable13_12
   \   000003DC   D600D0E5           LDRB     R0,[R0, #+214]
   \   000003E0   000050E3           CMP      R0,#+0
   \   000003E4   0300000A           BEQ      ??CommTask_36
   \   000003E8   020050E3           CMP      R0,#+2
   \   000003EC   0500000A           BEQ      ??CommTask_37
   \   000003F0   0800003A           BCC      ??CommTask_38
   \   000003F4   380000EA           B        ??CommTask_35
   \                     ??CommTask_36:
   \   000003F8   0200A0E3           MOV      R0,#+2
   \   000003FC   8900C5E5           STRB     R0,[R5, #+137]
   \   00000400   51B0A0E3           MOV      R11,#+81
   \   00000404   340000EA           B        ??CommTask_35
   \                     ??CommTask_37:
   \   00000408   0300A0E3           MOV      R0,#+3
   \   0000040C   8900C5E5           STRB     R0,[R5, #+137]
   \   00000410   45B0A0E3           MOV      R11,#+69
   \   00000414   300000EA           B        ??CommTask_35
   \                     ??CommTask_38:
   \   00000418   0600A0E3           MOV      R0,#+6
   \   0000041C   8900C5E5           STRB     R0,[R5, #+137]
   \   00000420   54B0A0E3           MOV      R11,#+84
   \   00000424   2C0000EA           B        ??CommTask_35
   \                     ??CommTask_34:
   \   00000428   D001C7E1           LDRD     R0,R1,[R7, #+16]
   \   0000042C   F009C5E1           STRD     R0,R1,[R5, #+144]
   \   00000430   D801C7E1           LDRD     R0,R1,[R7, #+24]
   \   00000434   F809C5E1           STRD     R0,R1,[R5, #+152]
   \   00000438   240097E5           LDR      R0,[R7, #+36]
   \   0000043C   A40085E5           STR      R0,[R5, #+164]
   \   00000440   D802C7E1           LDRD     R0,R1,[R7, #+40]
   \   00000444   F80AC5E1           STRD     R0,R1,[R5, #+168]
   \   00000448   D003C7E1           LDRD     R0,R1,[R7, #+48]
   \   0000044C   F00BC5E1           STRD     R0,R1,[R5, #+176]
   \   00000450   3C0097E5           LDR      R0,[R7, #+60]
   \   00000454   BC0085E5           STR      R0,[R5, #+188]
   \                     ??CommTask_32:
   \   00000458   ........           LDR      R0,??DataTable13_14
   \   0000045C   0810A0E3           MOV      R1,#+8
   \   00000460   0E10C0E5           STRB     R1,[R0, #+14]
   \   00000464   0400A0E3           MOV      R0,#+4
   \   00000468   8900C5E5           STRB     R0,[R5, #+137]
   \   0000046C   48B0A0E3           MOV      R11,#+72
   \   00000470   190000EA           B        ??CommTask_35
   \                     ??CommTask_28:
   \   00000474   ........           LDR      R0,??DataTable13_14
   \   00000478   0610A0E3           MOV      R1,#+6
   \   0000047C   0E10C0E5           STRB     R1,[R0, #+14]
   \   00000480   0500A0E3           MOV      R0,#+5
   \   00000484   8900C5E5           STRB     R0,[R5, #+137]
   \   00000488   0C10A0E3           MOV      R1,#+12
   \   0000048C   0D00A0E1           MOV      R0,SP
   \   00000490   ........           BL       GetValue
   \   00000494   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   00000498   F001C7E1           STRD     R0,R1,[R7, #+16]
   \   0000049C   D001C7E1           LDRD     R0,R1,[R7, #+16]
   \   000004A0   F009C5E1           STRD     R0,R1,[R5, #+144]
   \   000004A4   0D10A0E3           MOV      R1,#+13
   \   000004A8   0D00A0E1           MOV      R0,SP
   \   000004AC   ........           BL       GetValue
   \   000004B0   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000004B4   F801C7E1           STRD     R0,R1,[R7, #+24]
   \   000004B8   D801C7E1           LDRD     R0,R1,[R7, #+24]
   \   000004BC   F809C5E1           STRD     R0,R1,[R5, #+152]
   \   000004C0   0F10A0E3           MOV      R1,#+15
   \   000004C4   0D00A0E1           MOV      R0,SP
   \   000004C8   ........           BL       GetValue
   \   000004CC   00009DE5           LDR      R0,[SP, #+0]
   \   000004D0   44B0A0E3           MOV      R11,#+68
   \   000004D4   240087E5           STR      R0,[R7, #+36]
   \   000004D8   A40085E5           STR      R0,[R5, #+164]
   \                     ??CommTask_35:
   \   000004DC   0100A0E3           MOV      R0,#+1
   \   000004E0   CD00C6E5           STRB     R0,[R6, #+205]
   \   000004E4   ........           BL       StopSU
   \   000004E8   ........           LDR      R1,??DataTable13_14
   \   000004EC   900096E5           LDR      R0,[R6, #+144]
   \   000004F0   0E10D1E5           LDRB     R1,[R1, #+14]
   \   000004F4   0710C0E5           STRB     R1,[R0, #+7]
   \   000004F8   8900D5E5           LDRB     R0,[R5, #+137]
   \   000004FC   0410A0E3           MOV      R1,#+4
   \   00000500   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000504   901096E5           LDR      R1,[R6, #+144]
   \   00000508   0800C1E5           STRB     R0,[R1, #+8]
   \   0000050C   ........           BL       getIoData
   \   00000510   901096E5           LDR      R1,[R6, #+144]
   \   00000514   CE00C6E5           STRB     R0,[R6, #+206]
   \   00000518   0900C1E5           STRB     R0,[R1, #+9]
   \   0000051C   0000A0E3           MOV      R0,#+0
   \   00000520   0910A0E1           MOV      R1,R9
   \                     ??CommTask_39:
   \   00000524   A020D1E5           LDRB     R2,[R1, #+160]
   \   00000528   052052E2           SUBS     R2,R2,#+5
   \   0000052C   0200000A           BEQ      ??CommTask_40
   \   00000530   052052E2           SUBS     R2,R2,#+5
   \   00000534   0300000A           BEQ      ??CommTask_41
   \   00000538   050000EA           B        ??CommTask_42
   \                     ??CommTask_40:
   \   0000053C   902096E5           LDR      R2,[R6, #+144]
   \   00000540   0230A0E3           MOV      R3,#+2
   \   00000544   040000EA           B        ??CommTask_43
   \                     ??CommTask_41:
   \   00000548   902096E5           LDR      R2,[R6, #+144]
   \   0000054C   0330A0E3           MOV      R3,#+3
   \   00000550   010000EA           B        ??CommTask_43
   \                     ??CommTask_42:
   \   00000554   902096E5           LDR      R2,[R6, #+144]
   \   00000558   0430A0E3           MOV      R3,#+4
   \                     ??CommTask_43:
   \   0000055C   022080E0           ADD      R2,R0,R2
   \   00000560   010080E2           ADD      R0,R0,#+1
   \   00000564   0A30C2E5           STRB     R3,[R2, #+10]
   \   00000568   401081E2           ADD      R1,R1,#+64
   \   0000056C   040050E3           CMP      R0,#+4
   \   00000570   EBFFFFBA           BLT      ??CommTask_39
   \   00000574   201099E5           LDR      R1,[R9, #+32]
   \   00000578   900096E5           LDR      R0,[R6, #+144]
   \   0000057C   4114A0E1           ASR      R1,R1,#+8
   \   00000580   0E10C0E5           STRB     R1,[R0, #+14]
   \   00000584   0A30A0E3           MOV      R3,#+10
   \   00000588   9120A0E3           MOV      R2,#+145
   \   0000058C   0210A0E3           MOV      R1,#+2
   \   00000590   0300A0E3           MOV      R0,#+3
   \   00000594   ........           BL       SendMessage
   \   00000598   8800D5E5           LDRB     R0,[R5, #+136]
   \   0000059C   100050E3           CMP      R0,#+16
   \   000005A0   C0009515           LDRNE    R0,[R5, #+192]
   \   000005A4   00005013           CMPNE    R0,#+0
   \   000005A8   1DFFFF0A           BEQ      ??CommTask_19
   \   000005AC   ........           LDR      R1,??DataTable13_7
   \   000005B0   20008DE2           ADD      R0,SP,#+32
   \   000005B4   ........           BL       strcpy
   \   000005B8   F11F8FE2           ADR      R1,??CommTask_1  ;; "\\"
   \   000005BC   20008DE2           ADD      R0,SP,#+32
   \   000005C0   ........           BL       strcat
   \   000005C4   20008DE2           ADD      R0,SP,#+32
   \   000005C8   ........           BL       strlen
   \   000005CC   20108DE2           ADD      R1,SP,#+32
   \   000005D0   011080E0           ADD      R1,R0,R1
   \   000005D4   0400A0E3           MOV      R0,#+4
   \   000005D8   ........           BL       formattime
   \   000005DC   20008DE2           ADD      R0,SP,#+32
   \   000005E0   ........           BL       strlen
   \   000005E4   ........           LDR      R1,??DataTable13_8
   \   000005E8   FFB00BE2           AND      R11,R11,#0xFF
   \   000005EC   00108DE5           STR      R1,[SP, #+0]
   \   000005F0   20C08DE2           ADD      R12,SP,#+32
   \   000005F4   04B08DE5           STR      R11,[SP, #+4]
   \   000005F8   ........           LDR      R3,??DataTable13_9
   \   000005FC   ........           LDR      R2,??DataTable13_10
   \   00000600   ............       ADRL     R1,`?<Constant "_%s_%s_%s_%c01.tqm">`
   \              ....        
   \   00000608   0C0080E0           ADD      R0,R0,R12
   \   0000060C   ........           BL       sprintf
   \   00000610   01A0A0E3           MOV      R10,#+1
   \   00000614   090000EA           B        ??CommTask_44
   \                     ??CommTask_45:
   \   00000618   01A08AE2           ADD      R10,R10,#+1
   \   0000061C   20008DE2           ADD      R0,SP,#+32
   \   00000620   ........           BL       strlen
   \   00000624   20308DE2           ADD      R3,SP,#+32
   \   00000628   030080E0           ADD      R0,R0,R3
   \   0000062C   0A20A0E1           MOV      R2,R10
   \   00000630   ............       ADRL     R1,`?<Constant "%02d.tqm">`
   \              ....        
   \   00000638   060040E2           SUB      R0,R0,#+6
   \   0000063C   ........           BL       sprintf
   \                     ??CommTask_44:
   \   00000640   20008DE2           ADD      R0,SP,#+32
   \   00000644   ........           BL       FS_GetFileAttributes
   \   00000648   FF0050E3           CMP      R0,#+255
   \   0000064C   F1FFFF1A           BNE      ??CommTask_45
   \   00000650   20008DE2           ADD      R0,SP,#+32
   \   00000654   ........           BL       strlen
   \   00000658   011080E2           ADD      R1,R0,#+1
   \   0000065C   20008DE2           ADD      R0,SP,#+32
   \   00000660   ........           BL       tqmOpen
   \   00000664   EEFEFFEA           B        ??CommTask_19
   \                     ??CommTask_14:
   \   00000668   FF1001E2           AND      R1,R1,#0xFF
   \   0000066C   130051E3           CMP      R1,#+19
   \   00000670   EBFEFF3A           BCC      ??CommTask_19
   \   00000674   130052E3           CMP      R2,#+19
   \   00000678   1E00002A           BCS      ??CommTask_46
   \   0000067C   C41096E5           LDR      R1,[R6, #+196]
   \   00000680   000051E3           CMP      R1,#+0
   \   00000684   10005013           CMPNE    R0,#+16
   \   00000688   1A00000A           BEQ      ??CommTask_46
   \   0000068C   0F0050E3           CMP      R0,#+15
   \   00000690   1300001A           BNE      ??CommTask_47
   \   00000694   0C10A0E3           MOV      R1,#+12
   \   00000698   0D00A0E1           MOV      R0,SP
   \   0000069C   ........           BL       GetValue
   \   000006A0   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000006A4   F802C7E1           STRD     R0,R1,[R7, #+40]
   \   000006A8   D802C7E1           LDRD     R0,R1,[R7, #+40]
   \   000006AC   F80AC5E1           STRD     R0,R1,[R5, #+168]
   \   000006B0   0D10A0E3           MOV      R1,#+13
   \   000006B4   0D00A0E1           MOV      R0,SP
   \   000006B8   ........           BL       GetValue
   \   000006BC   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000006C0   F003C7E1           STRD     R0,R1,[R7, #+48]
   \   000006C4   D003C7E1           LDRD     R0,R1,[R7, #+48]
   \   000006C8   F00BC5E1           STRD     R0,R1,[R5, #+176]
   \   000006CC   0F10A0E3           MOV      R1,#+15
   \   000006D0   0D00A0E1           MOV      R0,SP
   \   000006D4   ........           BL       GetValue
   \   000006D8   00009DE5           LDR      R0,[SP, #+0]
   \   000006DC   3C0087E5           STR      R0,[R7, #+60]
   \   000006E0   BC0085E5           STR      R0,[R5, #+188]
   \                     ??CommTask_47:
   \   000006E4   C00095E5           LDR      R0,[R5, #+192]
   \   000006E8   000050E3           CMP      R0,#+0
   \   000006EC   0100000A           BEQ      ??CommTask_46
   \   000006F0   0600A0E3           MOV      R0,#+6
   \   000006F4   ........           BL       notifyTQM
   \                     ??CommTask_46:
   \   000006F8   D540C5E5           STRB     R4,[R5, #+213]
   \   000006FC   0800A0E1           MOV      R0,R8
   \   00000700   ........           BL       OS_StopTimer
   \   00000704   D84085E5           STR      R4,[R5, #+216]
   \   00000708   0400A0E3           MOV      R0,#+4
   \   0000070C   4019A0E3           MOV      R1,#+1048576
   \   00000710   D01B00E5           STR      R1,[R0, #-3024]
   \   00000714   ........           BL       StopSU
   \   00000718   ........           LDR      R0,??DataTable13_14
   \   0000071C   2310A0E3           MOV      R1,#+35
   \   00000720   0E10C0E5           STRB     R1,[R0, #+14]
   \   00000724   900096E5           LDR      R0,[R6, #+144]
   \   00000728   0710C0E5           STRB     R1,[R0, #+7]
   \   0000072C   8900D5E5           LDRB     R0,[R5, #+137]
   \   00000730   0410A0E3           MOV      R1,#+4
   \   00000734   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000738   901096E5           LDR      R1,[R6, #+144]
   \   0000073C   0800C1E5           STRB     R0,[R1, #+8]
   \   00000740   ........           BL       getIoData
   \   00000744   901096E5           LDR      R1,[R6, #+144]
   \   00000748   CE00C6E5           STRB     R0,[R6, #+206]
   \   0000074C   0900C1E5           STRB     R0,[R1, #+9]
   \   00000750   0000A0E3           MOV      R0,#+0
   \   00000754   0910A0E1           MOV      R1,R9
   \                     ??CommTask_48:
   \   00000758   A020D1E5           LDRB     R2,[R1, #+160]
   \   0000075C   052052E2           SUBS     R2,R2,#+5
   \   00000760   0200000A           BEQ      ??CommTask_49
   \   00000764   052052E2           SUBS     R2,R2,#+5
   \   00000768   0300000A           BEQ      ??CommTask_50
   \   0000076C   050000EA           B        ??CommTask_51
   \                     ??CommTask_49:
   \   00000770   902096E5           LDR      R2,[R6, #+144]
   \   00000774   0230A0E3           MOV      R3,#+2
   \   00000778   040000EA           B        ??CommTask_52
   \                     ??CommTask_50:
   \   0000077C   902096E5           LDR      R2,[R6, #+144]
   \   00000780   0330A0E3           MOV      R3,#+3
   \   00000784   010000EA           B        ??CommTask_52
   \                     ??CommTask_51:
   \   00000788   902096E5           LDR      R2,[R6, #+144]
   \   0000078C   0430A0E3           MOV      R3,#+4
   \                     ??CommTask_52:
   \   00000790   022080E0           ADD      R2,R0,R2
   \   00000794   010080E2           ADD      R0,R0,#+1
   \   00000798   0A30C2E5           STRB     R3,[R2, #+10]
   \   0000079C   401081E2           ADD      R1,R1,#+64
   \   000007A0   040050E3           CMP      R0,#+4
   \   000007A4   EBFFFFBA           BLT      ??CommTask_48
   \   000007A8   201099E5           LDR      R1,[R9, #+32]
   \   000007AC   900096E5           LDR      R0,[R6, #+144]
   \   000007B0   4114A0E1           ASR      R1,R1,#+8
   \   000007B4   0E10C0E5           STRB     R1,[R0, #+14]
   \   000007B8   0A30A0E3           MOV      R3,#+10
   \   000007BC   9120A0E3           MOV      R2,#+145
   \   000007C0   0210A0E3           MOV      R1,#+2
   \   000007C4   0300A0E3           MOV      R0,#+3
   \   000007C8   ........           BL       SendMessage
   \   000007CC   94FEFFEA           B        ??CommTask_19
    745          				else if (!unsavedSysData.waitingForRecordSpeed && DU2_RECORDING(unsavedSysData.systemMode)) {
   \                     ??CommTask_22:
   \   000007D0   D500D5E5           LDRB     R0,[R5, #+213]
   \   000007D4   000050E3           CMP      R0,#+0
   \   000007D8   2700001A           BNE      ??CommTask_21
   \   000007DC   8800D5E5           LDRB     R0,[R5, #+136]
   \   000007E0   030040E2           SUB      R0,R0,#+3
   \   000007E4   FF0000E2           AND      R0,R0,#0xFF
   \   000007E8   130050E3           CMP      R0,#+19
   \   000007EC   2200002A           BCS      ??CommTask_21
    746          					// check to see if we are recording, not waiting for a speed, and we are sitting still
    747          					if (DataValues[SPEED].fVal >= 1.0) {		// moving
   \   000007F0   ........           LDR      R0,??DataTable13_11
   \   000007F4   FE15A0E3           MOV      R1,#+1065353216
   \   000007F8   700090E5           LDR      R0,[R0, #+112]
   \   000007FC   ........           BL       __aeabi_cfrcmple
   \   00000800   0300008A           BHI      ??CommTask_53
    748          						// stop timer
    749          						OS_StopTimer(&stationaryTimer);
   \   00000804   0800A0E1           MOV      R0,R8
   \   00000808   ........           BL       OS_StopTimer
    750          						unsavedSysData.timeToStopRecording = 0;
   \   0000080C   D84085E5           STR      R4,[R5, #+216]
   \   00000810   190000EA           B        ??CommTask_21
    751          					} // if
    752          					else { 		// stationary
    753          						int temp;
    754          
    755          						if (0 != (temp = ((sysData.multiSettings_2 & 0x0000FFF0) >> 4))) {	// stationary time set
   \                     ??CommTask_53:
   \   00000814   ........           LDR      R0,??DataTable13_12
   \   00000818   EC0090E5           LDR      R0,[R0, #+236]
   \   0000081C   0008A0E1           LSL      R0,R0,#+16
   \   00000820   20AAB0E1           LSRS     R10,R0,#+20
   \   00000824   1400000A           BEQ      ??CommTask_21
    756          							// don't do anything if timer already running
    757          							if (0 == OS_GetTimerStatus(&stationaryTimer)) {
   \   00000828   0800A0E1           MOV      R0,R8
   \   0000082C   ........           BL       OS_GetTimerStatus
   \   00000830   000050E3           CMP      R0,#+0
   \   00000834   0900001A           BNE      ??CommTask_54
    758          								// timer is stopped so restart
    759          								if (temp > 5) {		// sanity check on timer value in case of initialization problem. minumum is 60 seconds
   \   00000838   06005AE3           CMP      R10,#+6
   \   0000083C   0E0000BA           BLT      ??CommTask_21
    760          									OS_SetTimerPeriod(&stationaryTimer, temp * 1000);
   \   00000840   FA0FA0E3           MOV      R0,#+1000
   \   00000844   800A61E1           SMULBB   R1,R0,R10
   \   00000848   0800A0E1           MOV      R0,R8
   \   0000084C   ........           BL       OS_SetTimerPeriod
    761          									OS_RetriggerTimer(&stationaryTimer);
   \   00000850   0800A0E1           MOV      R0,R8
   \   00000854   ........           BL       OS_RetriggerTimer
    762          									unsavedSysData.timeToStopRecording = temp;
   \   00000858   D8A085E5           STR      R10,[R5, #+216]
   \   0000085C   060000EA           B        ??CommTask_21
    763          								} // if
    764          							} // if
    765          							else {
    766          								// countdown to stop recording for user interface
    767          								unsavedSysData.timeToStopRecording = OS_GetTimerValue(&stationaryTimer) / 1000;			// how much time is left?
   \                     ??CommTask_54:
   \   00000860   0800A0E1           MOV      R0,R8
   \   00000864   ........           BL       OS_GetTimerValue
   \   00000868   ........           LDR      R1,??DataTable13_13  ;; 0x10624dd3
   \   0000086C   9021C1E0           SMULL    R2,R1,R0,R1
   \   00000870   4103B0E1           ASRS     R0,R1,#+6
   \   00000874   01008042           ADDMI    R0,R0,#+1
   \   00000878   D80085E5           STR      R0,[R5, #+216]
    768          							} // else
    769          						} // if
    770          					} // else
    771          				} // else
    772          			} // if
    773          		} // if
    774          		
    775          		if (!(which_event & (1 << DU2_MODE_CHANGE))) {
   \                     ??CommTask_21:
   \   0000087C   08009DE5           LDR      R0,[SP, #+8]
   \   00000880   010010E3           TST      R0,#0x1
   \   00000884   8000001A           BNE      ??CommTask_2
    776          			// must be a configuration change. we are not entering record mode but must reset SU
    777          			if ((which_event & (1 << DU2_CONFIG_CHANGE)) || (which_event & (1 << DU2_CAMERA_CHANGE))) {
   \   00000888   0A0010E3           TST      R0,#0xA
   \   0000088C   7E00000A           BEQ      ??CommTask_2
    778          				// reinitialize SU with new configuration data
    779          //				StopSU();  // works with this enabled but occasionally gets stuck after turning off camera
    780          				ChangeAutoOn();
   \   00000890   ........           LDR      R0,??DataTable13_14
   \   00000894   1400D0E5           LDRB     R0,[R0, #+20]
   \   00000898   C80050E3           CMP      R0,#+200
   \   0000089C   1E00003A           BCC      ??CommTask_55
   \   000008A0   03A0A0E3           MOV      R10,#+3
   \                     ??CommTask_56:
   \   000008A4   ........           LDR      R0,??DataTable13_12
   \   000008A8   901096E5           LDR      R1,[R6, #+144]
   \   000008AC   7C00D0E5           LDRB     R0,[R0, #+124]
   \   000008B0   0130A0E3           MOV      R3,#+1
   \   000008B4   9420A0E3           MOV      R2,#+148
   \   000008B8   000050E3           CMP      R0,#+0
   \   000008BC   0100A013           MOVNE    R0,#+1
   \   000008C0   0700C1E5           STRB     R0,[R1, #+7]
   \   000008C4   0210A0E3           MOV      R1,#+2
   \   000008C8   0300A0E3           MOV      R0,#+3
   \   000008CC   ........           BL       SendMessage
   \   000008D0   00B0A0E3           MOV      R11,#+0
   \   000008D4   962FA0E3           MOV      R2,#+600
   \   000008D8   8010A0E3           MOV      R1,#+128
   \   000008DC   0200A0E3           MOV      R0,#+2
   \   000008E0   ........           BL       PF_OS_WaitEventTimed
   \   000008E4   000050E3           CMP      R0,#+0
   \   000008E8   84109615           LDRNE    R1,[R6, #+132]
   \   000008EC   00005113           CMPNE    R1,#+0
   \   000008F0   0700000A           BEQ      ??CommTask_57
   \   000008F4   844086E5           STR      R4,[R6, #+132]
   \   000008F8   0500D1E5           LDRB     R0,[R1, #+5]
   \   000008FC   060050E3           CMP      R0,#+6
   \   00000900   01B0A003           MOVEQ    R11,#+1
   \   00000904   0000A0E3           MOV      R0,#+0
   \   00000908   ........           BL       Parse_Message
   \   0000090C   00005BE3           CMP      R11,#+0
   \   00000910   0100001A           BNE      ??CommTask_55
   \                     ??CommTask_57:
   \   00000914   01A05AE2           SUBS     R10,R10,#+1
   \   00000918   E1FFFF1A           BNE      ??CommTask_56
    781          				// if camera changed, send new setup to SU
    782          //				if (which_event & (1 << DU2_CAMERA_CHANGE))
    783          				ChangeSUCamera();
   \                     ??CommTask_55:
   \   0000091C   ........           BL       ChangeSUCamera
    784          				OS_Delay(100);
   \   00000920   6410A0E3           MOV      R1,#+100
   \   00000924   0200A0E3           MOV      R0,#+2
   \   00000928   ........           BL       PF_OS_Delay
    785          				ChangeSUCamera();
   \   0000092C   ........           BL       ChangeSUCamera
    786          				
    787          				// do it twice so it will take every time
    788          				ChangeSUMode(suData.tmState);	// return to previous SU state
   \   00000930   ........           LDR      R1,??DataTable13_14
   \   00000934   900096E5           LDR      R0,[R6, #+144]
   \   00000938   0E10D1E5           LDRB     R1,[R1, #+14]
   \   0000093C   0710C0E5           STRB     R1,[R0, #+7]
   \   00000940   8900D5E5           LDRB     R0,[R5, #+137]
   \   00000944   0410A0E3           MOV      R1,#+4
   \   00000948   000281E1           ORR      R0,R1,R0, LSL #+4
   \   0000094C   901096E5           LDR      R1,[R6, #+144]
   \   00000950   0800C1E5           STRB     R0,[R1, #+8]
   \   00000954   ........           BL       getIoData
   \   00000958   901096E5           LDR      R1,[R6, #+144]
   \   0000095C   CE00C6E5           STRB     R0,[R6, #+206]
   \   00000960   0900C1E5           STRB     R0,[R1, #+9]
   \   00000964   0000A0E3           MOV      R0,#+0
   \   00000968   0910A0E1           MOV      R1,R9
   \                     ??CommTask_58:
   \   0000096C   A020D1E5           LDRB     R2,[R1, #+160]
   \   00000970   052052E2           SUBS     R2,R2,#+5
   \   00000974   0400000A           BEQ      ??CommTask_59
   \   00000978   052052E2           SUBS     R2,R2,#+5
   \   0000097C   0900000A           BEQ      ??CommTask_60
   \   00000980   0B0000EA           B        ??CommTask_61
   \                     ??CommTask_1:
   \   00000984   5C000000           DC8      "\\",0x0,0x0
   \   00000988   ........           DC32     unsavedSysData
   \                     ??CommTask_59:
   \   0000098C   902096E5           LDR      R2,[R6, #+144]
   \   00000990   0230A0E3           MOV      R3,#+2
   \   00000994   080000EA           B        ??CommTask_62
   \                     ??CommTask_63:
   \   00000998   902096E5           LDR      R2,[R6, #+144]
   \   0000099C   0230A0E3           MOV      R3,#+2
   \   000009A0   022080E0           ADD      R2,R0,R2
   \   000009A4   2A0000EA           B        ??CommTask_64
   \                     ??CommTask_60:
   \   000009A8   902096E5           LDR      R2,[R6, #+144]
   \   000009AC   0330A0E3           MOV      R3,#+3
   \   000009B0   010000EA           B        ??CommTask_62
   \                     ??CommTask_61:
   \   000009B4   902096E5           LDR      R2,[R6, #+144]
   \   000009B8   0430A0E3           MOV      R3,#+4
   \                     ??CommTask_62:
   \   000009BC   022080E0           ADD      R2,R0,R2
   \   000009C0   010080E2           ADD      R0,R0,#+1
   \   000009C4   0A30C2E5           STRB     R3,[R2, #+10]
   \   000009C8   401081E2           ADD      R1,R1,#+64
   \   000009CC   040050E3           CMP      R0,#+4
   \   000009D0   E5FFFFBA           BLT      ??CommTask_58
   \   000009D4   201099E5           LDR      R1,[R9, #+32]
   \   000009D8   900096E5           LDR      R0,[R6, #+144]
   \   000009DC   4114A0E1           ASR      R1,R1,#+8
   \   000009E0   0E10C0E5           STRB     R1,[R0, #+14]
   \   000009E4   0A30A0E3           MOV      R3,#+10
   \   000009E8   9120A0E3           MOV      R2,#+145
   \   000009EC   0210A0E3           MOV      R1,#+2
   \   000009F0   0300A0E3           MOV      R0,#+3
   \   000009F4   ........           BL       SendMessage
    789          				ChangeSUMode(suData.tmState);	// return to previous SU state
   \   000009F8   ........           LDR      R1,??DataTable13_14
   \   000009FC   900096E5           LDR      R0,[R6, #+144]
   \   00000A00   0E10D1E5           LDRB     R1,[R1, #+14]
   \   00000A04   0710C0E5           STRB     R1,[R0, #+7]
   \   00000A08   8900D5E5           LDRB     R0,[R5, #+137]
   \   00000A0C   0410A0E3           MOV      R1,#+4
   \   00000A10   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000A14   901096E5           LDR      R1,[R6, #+144]
   \   00000A18   0800C1E5           STRB     R0,[R1, #+8]
   \   00000A1C   ........           BL       getIoData
   \   00000A20   901096E5           LDR      R1,[R6, #+144]
   \   00000A24   CE00C6E5           STRB     R0,[R6, #+206]
   \   00000A28   0900C1E5           STRB     R0,[R1, #+9]
   \   00000A2C   0000A0E3           MOV      R0,#+0
   \   00000A30   0910A0E1           MOV      R1,R9
   \                     ??CommTask_65:
   \   00000A34   A020D1E5           LDRB     R2,[R1, #+160]
   \   00000A38   052052E2           SUBS     R2,R2,#+5
   \   00000A3C   D5FFFF0A           BEQ      ??CommTask_63
   \   00000A40   052052E2           SUBS     R2,R2,#+5
   \   00000A44   902096E5           LDR      R2,[R6, #+144]
   \   00000A48   0330A003           MOVEQ    R3,#+3
   \   00000A4C   022080E0           ADD      R2,R0,R2
   \   00000A50   0430A013           MOVNE    R3,#+4
   \                     ??CommTask_64:
   \   00000A54   010080E2           ADD      R0,R0,#+1
   \   00000A58   0A30C2E5           STRB     R3,[R2, #+10]
   \   00000A5C   401081E2           ADD      R1,R1,#+64
   \   00000A60   040050E3           CMP      R0,#+4
   \   00000A64   F2FFFFBA           BLT      ??CommTask_65
   \   00000A68   201099E5           LDR      R1,[R9, #+32]
   \   00000A6C   900096E5           LDR      R0,[R6, #+144]
   \   00000A70   4114A0E1           ASR      R1,R1,#+8
   \   00000A74   0E10C0E5           STRB     R1,[R0, #+14]
   \   00000A78   0A30A0E3           MOV      R3,#+10
   \   00000A7C   9120A0E3           MOV      R2,#+145
   \   00000A80   0210A0E3           MOV      R1,#+2
   \   00000A84   0300A0E3           MOV      R0,#+3
   \   00000A88   ........           BL       SendMessage
    790          			} // if
    791          		} // if
   \                     ??CommTask_2:
   \   00000A8C   EB10A0E3           MOV      R1,#+235
   \   00000A90   0200A0E3           MOV      R0,#+2
   \   00000A94   ........           BL       PF_OS_WaitEvent
   \   00000A98   08008DE5           STR      R0,[SP, #+8]
   \   00000A9C   0000A0E3           MOV      R0,#+0
   \   00000AA0   ........           BL       GetADC
   \   00000AA4   ........           BL       __aeabi_ui2f
   \   00000AA8   ........           BL       __aeabi_f2d
   \   00000AAC   0020A0E1           MOV      R2,R0
   \   00000AB0   0130A0E1           MOV      R3,R1
   \   00000AB4   ........           ADR      R0,??DataTable13_15
   \   00000AB8   030090E8           LDM      R0,{R0,R1}
   \   00000ABC   ........           BL       __aeabi_dmul
   \   00000AC0   0020A0E1           MOV      R2,R0
   \   00000AC4   0130A0E1           MOV      R3,R1
   \   00000AC8   ........           ADR      R0,??DataTable13_16
   \   00000ACC   030090E8           LDM      R0,{R0,R1}
   \   00000AD0   ........           BL       __aeabi_dadd
   \   00000AD4   ........           BL       __aeabi_d2f
   \   00000AD8   ........           LDR      R1,??DataTable13_11
   \   00000ADC   380281E5           STR      R0,[R1, #+568]
   \   00000AE0   380291E5           LDR      R0,[R1, #+568]
   \   00000AE4   ........           LDR      R1,??DataTable13_17  ;; 0x40a66667
   \   00000AE8   ........           BL       __aeabi_cfcmple
   \   00000AEC   5BFDFF2A           BCS      ??CommTask_3
   \   00000AF0   2100A0E3           MOV      R0,#+33
   \   00000AF4   8800C5E5           STRB     R0,[R5, #+136]
   \   00000AF8   C40096E5           LDR      R0,[R6, #+196]
   \   00000AFC   000050E3           CMP      R0,#+0
   \   00000B00   0F00000A           BEQ      ??CommTask_66
   \   00000B04   6610A0E3           MOV      R1,#+102
   \   00000B08   0020A0E3           MOV      R2,#+0
   \   00000B0C   601E81E3           ORR      R1,R1,#0x600
   \   00000B10   ........           BL       FS_FSeek
   \   00000B14   D600A0E3           MOV      R0,#+214
   \   00000B18   F00E80E3           ORR      R0,R0,#0xF00
   \   00000B1C   062080E0           ADD      R2,R0,R6
   \   00000B20   D430A0E3           MOV      R3,#+212
   \   00000B24   C41096E5           LDR      R1,[R6, #+196]
   \   00000B28   0200A0E3           MOV      R0,#+2
   \   00000B2C   ........           BL       PF_FS_Write
   \   00000B30   C40096E5           LDR      R0,[R6, #+196]
   \   00000B34   ........           BL       FS_FClose
   \   00000B38   ........           ADR      R0,??DataTable13_18  ;; ""
   \   00000B3C   ........           BL       FS_Sync
   \   00000B40   C44086E5           STR      R4,[R6, #+196]
   \                     ??CommTask_66:
   \   00000B44   ........           BL       StopSU
   \   00000B48   7D1FA0E3           MOV      R1,#+500
   \                     ??CommTask_67:
   \   00000B4C   0200A0E3           MOV      R0,#+2
   \   00000B50   ........           BL       PF_OS_Delay
   \   00000B54   0030A0E3           MOV      R3,#+0
   \   00000B58   9320A0E3           MOV      R2,#+147
   \   00000B5C   0210A0E3           MOV      R1,#+2
   \   00000B60   0300A0E3           MOV      R0,#+3
   \   00000B64   ........           BL       SendMessage
   \   00000B68   6410A0E3           MOV      R1,#+100
   \   00000B6C   F6FFFFEA           B        ??CommTask_67
    792          	} // while
    793          } // CommTask

   \                                 In section .data, align 4
   \   __absolute scratchpadtype scratchpad
   \                     scratchpad:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute comporthandle com[1]
   \                     com:
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute accelscaling accelx
   \                     accelx:
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   __absolute accelscaling accely
   \                     accely:
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   __absolute accelscaling accelz
   \                     accelz:
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   __absolute u32 COMMCTS[2]
   \                     COMMCTS:
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute struct FS_FILE *sessionFile
   \                     sessionFile:
   \   000000C4   00000000           DC32 0H
   \                     waiting_usb_camera:
   \   000000C8   00000000           DC32 0
   \   __absolute BOOL gotscratchpad
   \                     gotscratchpad:
   \   000000CC   00                 DC8 0
   \   __absolute unsigned char firstpulse
   \                     firstpulse:
   \   000000CD   01                 DC8 1
   \   __absolute u08 iocollect
   \                     iocollect:
   \   000000CE   00                 DC8 0
   \   000000CF   00                 DC8 0
   \   __absolute u08 msgrxbuff[3][541]
   \                     msgrxbuff:
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute u08 msgtxbuff[541]
   \                     msgtxbuff:
   \   00000728   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000738   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000748   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000758   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000768   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000778   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000788   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000798   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000808   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000818   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000828   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000838   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000858   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000868   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000878   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000888   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000898   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000908   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000918   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000928   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000938   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute OS_TIMER COMMCTSTIMERS[2]
   \                     COMMCTSTIMERS:
   \   00000948   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000958   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000968   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute tqmheadertype tqmheader
   \                     tqmheader:
   \   00000970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     stationaryTimer:
   \   00001B9C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     scratchpad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   ........           DC32     suData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   ........           DC32     DataValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   ........           DC32     ClearCTS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   ........           DC32     iobytesenabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   ........           DC32     commTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     notifyModeChange

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   ........           DC32     scratchpad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   ........           DC32     stopRecording

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   ........           DC32     trackData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   ........           DC32     TQMWriteTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   ........           DC32     LapInitialize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   ........           DC32     MY_SESSIONS_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   ........           DC32     sysData+0x7E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   ........           DC32     sysData+0x8F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   ........           DC32     sysData+0xA0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   ........           DC32     DataValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   D34D6210           DC32     0x10624dd3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   ........           DC32     suData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   07DE81F22F3A       DC32     0xF281DE07,0x3F913A2F
   \              913F        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   333333333333       DC32     0x33333333,0x3FC33333
   \              C33F        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   6766A640           DC32     0x40a66667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\\\">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5C00               DC8 92, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "_%s_%s_%s_%c01.tqm">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   5F25735F2573       DC8 95, 37, 115, 95, 37, 115, 95, 37, 115, 95
   \              5F25735F    
   \   0000000A   256330312E74       DC8 37, 99, 48, 49, 46, 116, 113, 109, 0, 0
   \              716D0000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02d.tqm">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   253032642E74       DC8 37, 48, 50, 100, 46, 116, 113, 109, 0, 0
   \              716D0000    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     App_Comm_Setup     16
     ChangeSUCamera    552
     ClearCTS            8
     CommTask          224
     InitCommTask       32
     StopSU             32
     getIoData           8
     getModeSamp         0
     stopRecording       0


   Section sizes:

     Function/Label                   Bytes
     --------------                   -----
     msgrouting                          4
     outstanding_msg                     8
     tqmsample                         124
     pdrlancstatus                       1
     iobytesenabled                      1
     ClearCTS                          124
     App_Comm_Setup                    132
     getIoData                         108
     getModeSamp                        24
     ChangeSUCamera                    384
     stopRecording                      16
     StopSU                            292
     InitCommTask                     1180
     CommTask                         2928
     scratchpad                       7088
     com
     accelx
     accely
     accelz
     COMMCTS
     sessionFile
     waiting_usb_camera
     gotscratchpad
     firstpulse
     iocollect
     previous_state
     msgrxbuff
     msgtxbuff
     COMMCTSTIMERS
     tqmheader
     stationaryTimer
     ??DataTable12                       4
     ??DataTable12_1                     4
     ??DataTable12_2                     4
     ??DataTable12_3                     4
     ??DataTable12_4                     4
     ??DataTable12_5                     4
     ??DataTable12_6                     4
     ??DataTable12_7                     4
     ??DataTable13                       4
     ??DataTable13_1                     4
     ??DataTable13_2                     4
     ??DataTable13_3                     4
     ??DataTable13_4                     4
     ??DataTable13_5                     4
     ??DataTable13_6                     4
     ??DataTable13_7                     4
     ??DataTable13_8                     4
     ??DataTable13_9                     4
     ??DataTable13_10                    4
     ??DataTable13_11                    4
     ??DataTable13_12                    4
     ??DataTable13_13                    4
     ??DataTable13_14                    4
     ??DataTable13_15                    8
     ??DataTable13_16                    8
     ??DataTable13_17                    4
     ??DataTable13_18                    4
     ?<Constant "">                      1
     ?<Constant "\\">                    2
     ?<Constant "_%s_%s_%s_%c01.tqm">   20
     ?<Constant "%02d.tqm">             12

 
   134 bytes in section .bss
 7 088 bytes in section .data
     7 bytes in section .rodata
 5 336 bytes in section .text
 
 5 336 bytes of CODE  memory
     7 bytes of CONST memory
 7 222 bytes of DATA  memory

Errors: none
Warnings: none
