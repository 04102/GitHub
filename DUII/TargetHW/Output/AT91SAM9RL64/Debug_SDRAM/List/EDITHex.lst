###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:58:57 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\EDITHex.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\EDITHex.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\ED #
#                    ITHex.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\EDI #
#                    THex.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\EDITHex.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : EDITHex.c
     19          Purpose     : Edit hexadecimal values
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "EDIT_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *        Defaults for config switches
     33          *
     34          **********************************************************************
     35          */
     36          #ifndef EDIT_HEX_DIGITONLY
     37            #define EDIT_HEX_DIGITONLY     0
     38          #endif
     39          
     40          /*********************************************************************
     41          *
     42          *             Helpers
     43          *
     44          **********************************************************************
     45          */
     46          /*********************************************************************
     47          *
     48          *       _HexChar2Int
     49          */
     50          static int _HexChar2Int(int Char) {
     51            if ((Char >= '0') && (Char <= '9'))
     52              return Char - '0';
     53            Char &= ~0x20;
     54            if ((Char >= 'A') && (Char <= 'F'))
     55              return Char - 'A' + 10;
     56            return -1;
     57          }
     58          
     59          /*********************************************************************
     60          *
     61          *       _UpdateBuffer
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          static void _UpdateBuffer(EDIT_Handle hObj) {
   \                     _UpdateBuffer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
     64            char * s;
     65            EDIT_Obj * pObj;
     66            pObj = EDIT_LOCK_H(hObj);
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   0040A0E1           MOV      R4,R0
     67            s = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000010   340094E5           LDR      R0,[R4, #+52]
   \   00000014   ........           BL       GUI_ALLOC_LockH
   \   00000018   00008DE5           STR      R0,[SP, #+0]
     68            GUI_AddHex(pObj->CurrentValue, pObj->MaxLen, &s);
   \   0000001C   F813D4E1           LDRSH    R1,[R4, #+56]
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   480094E5           LDR      R0,[R4, #+72]
   \   00000028   FF1001E2           AND      R1,R1,#0xFF
   \   0000002C   ........           BL       GUI_AddHex
     69            GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     70            GUI_UNLOCK_H(s);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     71          }
   \   00000038   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
     72          
     73          /*********************************************************************
     74          *
     75          *       _EditHex
     76          */
     77          static void _EditHex(int Nibble, EDIT_Obj* pObj, EDIT_Handle hObj) {
     78            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
     79            U32 AndMask = ~(15     << (Pos << 2));
     80            U32 OrMask  =   Nibble << (Pos << 2);
     81            I32 Result  = pObj->CurrentValue & AndMask;
     82            Result     |= OrMask;
     83            EDIT__SetValueUnsigned(hObj, Result);
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       _GetCurrentNibble
     89          */
     90          #if EDIT_HEX_DIGITONLY
     91            static U8 _GetCurrentNibble(EDIT_Obj* pObj) {
     92              int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
     93              U32 AndMask = 0xf << (Pos << 2);
     94              U8 Nibble = (pObj->CurrentValue & AndMask) >> (Pos << 2);
     95              return Nibble;
     96            }
     97          #endif
     98          
     99          /*********************************************************************
    100          *
    101          *       _GetNumDigits
    102          */
    103          static int _GetNumDigits(U32 Value) {
    104            int Ret;
    105            for (Ret = 0; Value; Value >>= 4, Ret++);
    106            return Ret;
    107          }
    108          
    109          /*********************************************************************
    110          *
    111          *       _AddPosition
    112          */
    113          static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
    114            int Pos;
    115            U32 v;
    116            v = 1;
    117            Pos = pObj->MaxLen - pObj->CursorPos - 1;
    118            while (Pos--) {
    119              v <<= 4;
    120            }
    121            if (Sign < 0) {
    122              v = ~v + 1;
    123            }
    124            EDIT__SetValueUnsigned(hObj, pObj->CurrentValue + v);
    125          }
    126          
    127          /*********************************************************************
    128          *
    129          *             Handle input
    130          *
    131          **********************************************************************
    132          */
    133          /*********************************************************************
    134          *
    135          *       _AddKeyHex
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          static void _AddKeyHex(EDIT_Handle hObj, int Key) {
   \                     _AddKeyHex:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    138            EDIT_Obj * pObj;
    139            pObj = EDIT_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050B0E1           MOVS     R5,R0
    140            if (pObj) {
   \   00000018   4800000A           BEQ      ??_AddKeyHex_1
    141              switch (Key) {
   \   0000001C   100046E2           SUB      R0,R6,#+16
   \   00000020   030050E3           CMP      R0,#+3
   \   00000024   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_AddKeyHex_0:
   \   00000028   2A00008A           BHI      ??_AddKeyHex_2
   \   0000002C   260000EA           B        ??_AddKeyHex_3
   \   00000030   010000EA           B        ??_AddKeyHex_4
   \   00000034   3D0000EA           B        ??_AddKeyHex_5
   \   00000038   110000EA           B        ??_AddKeyHex_6
    142              #if EDIT_HEX_DIGITONLY
    143              case GUI_KEY_UP:
    144                {
    145                  int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
    146                  _EditHex(Nibble, pObj, hObj);
    147                }
    148                break;
    149              case GUI_KEY_DOWN:
    150                {
    151                  int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
    152                  _EditHex(Nibble, pObj, hObj);
    153                }
    154                break;
    155              #else
    156              case GUI_KEY_UP:
    157                _AddPosition(pObj, hObj, 1);
   \                     ??_AddKeyHex_4:
   \   0000003C   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000040   4C2095E5           LDR      R2,[R5, #+76]
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   021041E0           SUB      R1,R1,R2
   \   0000004C   011051E2           SUBS     R1,R1,#+1
   \   00000050   0600000A           BEQ      ??_AddKeyHex_7
   \   00000054   010011E3           TST      R1,#0x1
   \   00000058   1000A013           MOVNE    R0,#+16
   \   0000005C   A110B0E1           LSRS     R1,R1,#+1
   \   00000060   0200000A           BEQ      ??_AddKeyHex_7
   \                     ??_AddKeyHex_8:
   \   00000064   0004A0E1           LSL      R0,R0,#+8
   \   00000068   011051E2           SUBS     R1,R1,#+1
   \   0000006C   FCFFFF1A           BNE      ??_AddKeyHex_8
   \                     ??_AddKeyHex_7:
   \   00000070   481095E5           LDR      R1,[R5, #+72]
   \   00000074   011080E0           ADD      R1,R0,R1
   \                     ??_AddKeyHex_9:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       EDIT__SetValueUnsigned
    158                break;
   \   00000080   2E0000EA           B        ??_AddKeyHex_1
    159              case GUI_KEY_DOWN:
    160                _AddPosition(pObj, hObj, -1);
   \                     ??_AddKeyHex_6:
   \   00000084   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000088   4C2095E5           LDR      R2,[R5, #+76]
   \   0000008C   0100A0E3           MOV      R0,#+1
   \   00000090   021041E0           SUB      R1,R1,R2
   \   00000094   011051E2           SUBS     R1,R1,#+1
   \   00000098   0600000A           BEQ      ??_AddKeyHex_10
   \   0000009C   010011E3           TST      R1,#0x1
   \   000000A0   1000A013           MOVNE    R0,#+16
   \   000000A4   A110B0E1           LSRS     R1,R1,#+1
   \   000000A8   0200000A           BEQ      ??_AddKeyHex_10
   \                     ??_AddKeyHex_11:
   \   000000AC   0004A0E1           LSL      R0,R0,#+8
   \   000000B0   011051E2           SUBS     R1,R1,#+1
   \   000000B4   FCFFFF1A           BNE      ??_AddKeyHex_11
   \                     ??_AddKeyHex_10:
   \   000000B8   481095E5           LDR      R1,[R5, #+72]
   \   000000BC   0000E0E1           MVN      R0,R0
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   011080E2           ADD      R1,R0,#+1
   \   000000C8   EAFFFFEA           B        ??_AddKeyHex_9
    161                break;
    162              #endif
    163              case GUI_KEY_RIGHT:
    164                EDIT__SetCursorPos(hObj, pObj->CursorPos + 1);
    165                break;
    166              case GUI_KEY_LEFT:
    167                EDIT__SetCursorPos(hObj, pObj->CursorPos - 1);
   \                     ??_AddKeyHex_3:
   \   000000CC   4C0095E5           LDR      R0,[R5, #+76]
   \   000000D0   011040E2           SUB      R1,R0,#+1
   \   000000D4   170000EA           B        ??_AddKeyHex_12
    168                break;
    169              default:
    170                {
    171                  int Nibble = _HexChar2Int(Key);
   \                     ??_AddKeyHex_2:
   \   000000D8   300046E2           SUB      R0,R6,#+48
   \   000000DC   0A0050E3           CMP      R0,#+10
   \   000000E0   0400003A           BCC      ??_AddKeyHex_13
   \   000000E4   2000C6E3           BIC      R0,R6,#0x20
   \   000000E8   411040E2           SUB      R1,R0,#+65
   \   000000EC   060051E3           CMP      R1,#+6
   \   000000F0   1200002A           BCS      ??_AddKeyHex_1
   \   000000F4   370040E2           SUB      R0,R0,#+55
    172                  if (Nibble >= 0) {
   \                     ??_AddKeyHex_13:
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0F00004A           BMI      ??_AddKeyHex_1
    173                    _EditHex(Nibble, pObj, hObj);
   \   00000100   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000104   4C2095E5           LDR      R2,[R5, #+76]
   \   00000108   0F30A0E3           MOV      R3,#+15
   \   0000010C   021041E0           SUB      R1,R1,R2
   \   00000110   011041E2           SUB      R1,R1,#+1
   \   00000114   0111A0E1           LSL      R1,R1,#+2
   \   00000118   482095E5           LDR      R2,[R5, #+72]
   \   0000011C   1331E0E1           MVN      R3,R3, LSL R1
   \   00000120   022003E0           AND      R2,R3,R2
   \   00000124   101182E1           ORR      R1,R2,R0, LSL R1
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       EDIT__SetValueUnsigned
    174                    EDIT__SetCursorPos(hObj, pObj->CursorPos + 1);
   \                     ??_AddKeyHex_5:
   \   00000130   4C0095E5           LDR      R0,[R5, #+76]
   \   00000134   011080E2           ADD      R1,R0,#+1
   \                     ??_AddKeyHex_12:
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       EDIT__SetCursorPos
    175                  }
    176                }
    177                break;
    178              }
    179            }
    180            GUI_UNLOCK_H(pObj);
   \                     ??_AddKeyHex_1:
   \   00000140   ........           BL       GUI_ALLOC_UnlockH
    181            _UpdateBuffer(hObj);
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       GUI_ALLOC_LockH
   \   0000014C   0040A0E1           MOV      R4,R0
   \   00000150   340094E5           LDR      R0,[R4, #+52]
   \   00000154   ........           BL       GUI_ALLOC_LockH
   \   00000158   00008DE5           STR      R0,[SP, #+0]
   \   0000015C   F813D4E1           LDRSH    R1,[R4, #+56]
   \   00000160   0D20A0E1           MOV      R2,SP
   \   00000164   480094E5           LDR      R0,[R4, #+72]
   \   00000168   FF1001E2           AND      R1,R1,#0xFF
   \   0000016C   ........           BL       GUI_AddHex
   \   00000170   ........           BL       GUI_ALLOC_UnlockH
   \   00000174   ........           BL       GUI_ALLOC_UnlockH
    182          }
   \   00000178   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000017C   7080BDE8           POP      {R4-R6,PC}       ;; return
    183          
    184          /*********************************************************************
    185          *
    186          *             Exported routines
    187          *
    188          **********************************************************************
    189          */
    190          /*********************************************************************
    191          *
    192          *       EDIT_SetHexMode
    193          */

   \                                 In section .text, align 4, keep-with-next
    194          void EDIT_SetHexMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
   \                     EDIT_SetHexMode:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
    195            EDIT_Obj * pObj;
    196            int MaxLen, MaxLenOld;
    197            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    198            if (hEdit) {
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   2E00000A           BEQ      ??EDIT_SetHexMode_0
    199              pObj = EDIT_LOCK_H(hEdit);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
    200              pObj->pfAddKeyEx = _AddKeyHex;
   \   0000002C   ........           LDR      R1,??DataTable0
   \   00000030   581080E5           STR      R1,[R0, #+88]
    201              pObj->pfUpdateBuffer= _UpdateBuffer;
   \   00000034   ........           LDR      R1,??DataTable0_1
   \   00000038   5C1080E5           STR      R1,[R0, #+92]
    202              pObj->CurrentValue = Value;
   \   0000003C   487080E5           STR      R7,[R0, #+72]
    203              pObj->CursorPos = 0;
   \   00000040   0070A0E3           MOV      R7,#+0
   \   00000044   4C7080E5           STR      R7,[R0, #+76]
    204              MaxLen = pObj->MaxLen;
   \   00000048   F883D0E1           LDRSH    R8,[R0, #+56]
    205              if (MaxLen <= 0 ) {
   \   0000004C   010058E3           CMP      R8,#+1
   \   00000050   060000AA           BGE      ??EDIT_SetHexMode_1
    206                MaxLen = _GetNumDigits(Max);
   \   00000054   0610B0E1           MOVS     R1,R6
   \   00000058   0780A0E1           MOV      R8,R7
   \   0000005C   0300000A           BEQ      ??EDIT_SetHexMode_1
   \                     ??EDIT_SetHexMode_2:
   \   00000060   2112A0E1           LSR      R1,R1,#+4
   \   00000064   018088E2           ADD      R8,R8,#+1
   \   00000068   000051E3           CMP      R1,#+0
   \   0000006C   FBFFFF1A           BNE      ??EDIT_SetHexMode_2
    207              }
    208              if (MaxLen > 8) {
    209                MaxLen = 8;
    210              }
    211              pObj->Min = Min;
   \                     ??EDIT_SetHexMode_1:
   \   00000070   3C5080E5           STR      R5,[R0, #+60]
    212              pObj->Max = Max;
   \   00000074   406080E5           STR      R6,[R0, #+64]
    213              pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   090058E3           CMP      R8,#+9
   \   00000080   5410C0E5           STRB     R1,[R0, #+84]
   \   00000084   0880A0A3           MOVGE    R8,#+8
    214              MaxLenOld = pObj->MaxLen;
   \   00000088   F853D0E1           LDRSH    R5,[R0, #+56]
    215              GUI_UNLOCK_H(pObj);
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
    216              if (MaxLen != MaxLenOld) {
   \   00000090   050058E1           CMP      R8,R5
   \   00000094   0200000A           BEQ      ??EDIT_SetHexMode_3
    217                EDIT_SetMaxLen(hEdit, MaxLen);
   \   00000098   0810A0E1           MOV      R1,R8
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       EDIT_SetMaxLen
    218              }
    219              _UpdateBuffer(hEdit);
   \                     ??EDIT_SetHexMode_3:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       GUI_ALLOC_LockH
   \   000000AC   0050A0E1           MOV      R5,R0
   \   000000B0   340095E5           LDR      R0,[R5, #+52]
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   00008DE5           STR      R0,[SP, #+0]
   \   000000BC   F813D5E1           LDRSH    R1,[R5, #+56]
   \   000000C0   0D20A0E1           MOV      R2,SP
   \   000000C4   480095E5           LDR      R0,[R5, #+72]
   \   000000C8   FF1001E2           AND      R1,R1,#0xFF
   \   000000CC   ........           BL       GUI_AddHex
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   \   000000D4   ........           BL       GUI_ALLOC_UnlockH
    220              WM_Invalidate(hEdit);
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       WM_InvalidateWindow
    221            }
    222            WM_UNLOCK();
   \                     ??EDIT_SetHexMode_0:
   \   000000E0   ........           BL       GUI_Unlock
    223          }
   \   000000E4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     _AddKeyHex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     _UpdateBuffer
    224          
    225          #else  /* avoid empty object files */
    226          
    227          void EditHex_C(void);
    228          void EditHex_C(void){}
    229          
    230          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     EDIT_SetHexMode     32
     _AddKeyHex          24
     _UpdateBuffer       16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     _UpdateBuffer     64
     _AddKeyHex       384
     EDIT_SetHexMode  236
     ??DataTable0       4
     ??DataTable0_1     4

 
 692 bytes in section .text
 
 692 bytes of CODE memory

Errors: none
Warnings: none
