###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:17 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_SkinFlex.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_SkinFlex.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\BU #
#                    TTON_SkinFlex.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\BUT #
#                    TON_SkinFlex.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_SkinFlex.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_SkinFlex.c
     19          Purpose     : Implementation of framewindow skin
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "BUTTON_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Defines (configuration defaults)
     32          *
     33          **********************************************************************
     34          */
     35          #ifndef   BUTTON_SKINFLEX_RADIUS
     36            #define BUTTON_SKINFLEX_RADIUS    4
     37          #endif
     38          
     39          #ifndef   BUTTON_SKINPROPS_PRESSED

   \                                 In section .data, align 4
     40            static BUTTON_SKINFLEX_PROPS _PropsPressed = {
   \                     _PropsPressed:
   \   00000000   2C628B009EB0       DC32 9134636, 12234910, 15716760, 16577765, 16180676, 15716760
   \              BA0098D1EF00
   \              E5F4FC00C4E5
   \              F60098D1EF00
   \   00000018   68B3DB000400       DC32 14398312, 4
   \              0000        
     41              { 0x008B622C, 0x00BAB09E, 0x00EFD198 },
     42              { 0x00FCF4E5, 0x00F6E5C4 },
     43              { 0x00EFD198, 0x00DBB368 },
     44              BUTTON_SKINFLEX_RADIUS
     45            };
     46            #define BUTTON_SKINPROPS_PRESSED  &_PropsPressed
     47          #endif
     48          
     49          #ifndef   BUTTON_SKINPROPS_FOCUSSED

   \                                 In section .data, align 4
     50            static BUTTON_SKINFLEX_PROPS _PropsFocussed = {
   \                     _PropsFocussed:
   \   00000000   3C7FB10046D8       DC32 11632444, 16504902, 14671839, 15987699, 15527148, 14671839
   \              FB00DFDFDF00
   \              F3F3F300ECEC
   \              EC00DFDFDF00
   \   00000018   D0D0D0000400       DC32 13684944, 4
   \              0000        
     51              { 0x00B17F3C, 0x00FBD846, 0x00DFDFDF },
     52              { 0x00F3F3F3, 0x00ECECEC },
     53              { 0x00DFDFDF, 0x00D0D0D0 },
     54              BUTTON_SKINFLEX_RADIUS
     55            };
     56            #define BUTTON_SKINPROPS_FOCUSSED &_PropsFocussed
     57          #endif
     58          
     59          #ifndef   BUTTON_SKINPROPS_ENABLED

   \                                 In section .data, align 4
     60            static BUTTON_SKINFLEX_PROPS _PropsEnabled = {
   \                     _PropsEnabled:
   \   00000000   70707000FCFC       DC32 7368816, 16579836, 14671839, 15987699, 15527148, 14671839
   \              FC00DFDFDF00
   \              F3F3F300ECEC
   \              EC00DFDFDF00
   \   00000018   D0D0D0000400       DC32 13684944, 4
   \              0000        
     61              { 0x00707070, 0x00FCFCFC, 0x00DFDFDF },
     62              { 0x00F3F3F3, 0x00ECECEC },
     63              { 0x00DFDFDF, 0x00D0D0D0 },
     64              BUTTON_SKINFLEX_RADIUS
     65            };
     66            #define BUTTON_SKINPROPS_ENABLED  &_PropsEnabled
     67          #endif
     68          
     69          #ifndef   BUTTON_SKINPROPS_DISABLED

   \                                 In section .data, align 4
     70            static BUTTON_SKINFLEX_PROPS _PropsDisabled = {
   \                     _PropsDisabled:
   \   00000000   ADB2B500FCFC       DC32 11907757, 16579836, 16053492, 16053492, 16053492, 16053492
   \              FC00F4F4F400
   \              F4F4F400F4F4
   \              F400F4F4F400
   \   00000018   F4F4F4000400       DC32 16053492, 4
   \              0000        
     71              { 0x00B5B2AD, 0x00FCFCFC, 0x00F4F4F4 },
     72              { 0x00F4F4F4, 0x00F4F4F4 },
     73              { 0x00F4F4F4, 0x00F4F4F4 },
     74              BUTTON_SKINFLEX_RADIUS
     75            };
     76            #define BUTTON_SKINPROPS_DISABLED &_PropsDisabled
     77          #endif
     78          
     79          /*********************************************************************
     80          *
     81          *       Static data
     82          *
     83          **********************************************************************
     84          */

   \                                 In section .text, align 4, keep-with-next
     85          static BUTTON_SKINFLEX_PROPS * const _apProps[] = {
   \                     _apProps:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   ............       DC32 _PropsPressed, _PropsFocussed, _PropsEnabled, _PropsDisabled
   \              ............
   \              ........    
     86            BUTTON_SKINPROPS_PRESSED,
     87            BUTTON_SKINPROPS_FOCUSSED,
     88            BUTTON_SKINPROPS_ENABLED,
     89            BUTTON_SKINPROPS_DISABLED
     90          };
     91          
     92          /*********************************************************************
     93          *
     94          *       Public code
     95          *
     96          **********************************************************************
     97          */
     98          /*********************************************************************
     99          *
    100          *       BUTTON_DrawSkinFlex
    101          */

   \                                 In section .text, align 4, keep-with-next
    102          int BUTTON_DrawSkinFlex(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo) {
   \                     BUTTON_DrawSkinFlex:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    103            BUTTON_Obj * pObj;
    104            int y, BitmapIndex, ColorIndex, TextAlign, Radius;
    105            GUI_COLOR Color;
    106            WM_HMEM hDrawObj;
    107            GUI_RECT Rect;
    108            const BUTTON_SKINFLEX_PROPS * pProps;
    109            GUI_HMEM hText;
    110            const char * s;
    111          
    112            //
    113            // Get property pointer
    114            //
    115            pProps = _apProps[pDrawItemInfo->ItemIndex];
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   ............       ADRL     R1,_apProps
   \              ....        
   \   00000014   1CD04DE2           SUB      SP,SP,#+28
   \   00000018   005191E7           LDR      R5,[R1, +R0, LSL #+2]
    116            //
    117            // Draw
    118            //
    119            switch (pDrawItemInfo->Cmd) {
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   100050E3           CMP      R0,#+16
   \   00000024   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??BUTTON_DrawSkinFlex_0:
   \   00000028   EB00008A           BHI      ??BUTTON_DrawSkinFlex_1
   \   0000002C   E80000EA           B        ??BUTTON_DrawSkinFlex_2
   \   00000030   E90000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000034   E80000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000038   0C0000EA           B        ??BUTTON_DrawSkinFlex_3
   \   0000003C   A20000EA           B        ??BUTTON_DrawSkinFlex_4
   \   00000040   E50000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000044   E40000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000048   E30000EA           B        ??BUTTON_DrawSkinFlex_1
   \   0000004C   E20000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000050   E10000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000054   E00000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000058   DF0000EA           B        ??BUTTON_DrawSkinFlex_1
   \   0000005C   DE0000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000060   DD0000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000064   DC0000EA           B        ??BUTTON_DrawSkinFlex_1
   \   00000068   DB0000EA           B        ??BUTTON_DrawSkinFlex_1
   \   0000006C   AC0000EA           B        ??BUTTON_DrawSkinFlex_5
    120            case WIDGET_ITEM_DRAW_BACKGROUND:
    121              if (pProps->Radius) {
   \                     ??BUTTON_DrawSkinFlex_3:
   \   00000070   1C1095E5           LDR      R1,[R5, #+28]
   \   00000074   000095E5           LDR      R0,[R5, #+0]
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   6200000A           BEQ      ??BUTTON_DrawSkinFlex_6
    122                //
    123                // Edges
    124                //
    125                GUI__DrawTwinArc4(pDrawItemInfo->x0, pDrawItemInfo->y0, pDrawItemInfo->x1, pDrawItemInfo->y1, pProps->Radius, pProps->aColorFrame[0], pProps->aColorFrame[1], pProps->aColorFrame[2]);
   \   00000080   082095E5           LDR      R2,[R5, #+8]
   \   00000084   0C208DE5           STR      R2,[SP, #+12]
   \   00000088   042095E5           LDR      R2,[R5, #+4]
   \   0000008C   04008DE5           STR      R0,[SP, #+4]
   \   00000090   08208DE5           STR      R2,[SP, #+8]
   \   00000094   00108DE5           STR      R1,[SP, #+0]
   \   00000098   183094E5           LDR      R3,[R4, #+24]
   \   0000009C   142094E5           LDR      R2,[R4, #+20]
   \   000000A0   101094E5           LDR      R1,[R4, #+16]
   \   000000A4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A8   ........           BL       GUI__DrawTwinArc4
    126                //
    127                // Frame
    128                //
    129                for (y = 0; y < 2; y++) {
    130                  Color = *(pProps->aColorFrame + y);
    131                  GUI_SetColor(Color);
   \   000000AC   000095E5           LDR      R0,[R5, #+0]
   \   000000B0   ........           BL       GUI_SetColor
    132                  GUI_DrawHLine(pDrawItemInfo->y0 + y, pDrawItemInfo->x0 + pProps->Radius, pDrawItemInfo->x1 - pProps->Radius);
   \   000000B4   1C0095E5           LDR      R0,[R5, #+28]
   \   000000B8   141094E5           LDR      R1,[R4, #+20]
   \   000000BC   002041E0           SUB      R2,R1,R0
   \   000000C0   0C1094E5           LDR      R1,[R4, #+12]
   \   000000C4   011080E0           ADD      R1,R0,R1
   \   000000C8   100094E5           LDR      R0,[R4, #+16]
   \   000000CC   ........           BL       GUI_DrawHLine
    133                  GUI_DrawHLine(pDrawItemInfo->y1 - y, pDrawItemInfo->x0 + pProps->Radius, pDrawItemInfo->x1 - pProps->Radius);
   \   000000D0   1C0095E5           LDR      R0,[R5, #+28]
   \   000000D4   141094E5           LDR      R1,[R4, #+20]
   \   000000D8   002041E0           SUB      R2,R1,R0
   \   000000DC   0C1094E5           LDR      R1,[R4, #+12]
   \   000000E0   011080E0           ADD      R1,R0,R1
   \   000000E4   180094E5           LDR      R0,[R4, #+24]
   \   000000E8   ........           BL       GUI_DrawHLine
    134                  GUI_DrawVLine(pDrawItemInfo->x0 + y, pDrawItemInfo->y0 + pProps->Radius, pDrawItemInfo->y1 - pProps->Radius);
   \   000000EC   1C0095E5           LDR      R0,[R5, #+28]
   \   000000F0   181094E5           LDR      R1,[R4, #+24]
   \   000000F4   002041E0           SUB      R2,R1,R0
   \   000000F8   101094E5           LDR      R1,[R4, #+16]
   \   000000FC   011080E0           ADD      R1,R0,R1
   \   00000100   0C0094E5           LDR      R0,[R4, #+12]
   \   00000104   ........           BL       GUI_DrawVLine
    135                  GUI_DrawVLine(pDrawItemInfo->x1 - y, pDrawItemInfo->y0 + pProps->Radius, pDrawItemInfo->y1 - pProps->Radius);
   \   00000108   1C0095E5           LDR      R0,[R5, #+28]
   \   0000010C   181094E5           LDR      R1,[R4, #+24]
   \   00000110   002041E0           SUB      R2,R1,R0
   \   00000114   101094E5           LDR      R1,[R4, #+16]
   \   00000118   011080E0           ADD      R1,R0,R1
   \   0000011C   140094E5           LDR      R0,[R4, #+20]
   \   00000120   ........           BL       GUI_DrawVLine
   \   00000124   040095E5           LDR      R0,[R5, #+4]
   \   00000128   ........           BL       GUI_SetColor
   \   0000012C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000130   141094E5           LDR      R1,[R4, #+20]
   \   00000134   002041E0           SUB      R2,R1,R0
   \   00000138   0C1094E5           LDR      R1,[R4, #+12]
   \   0000013C   011080E0           ADD      R1,R0,R1
   \   00000140   100094E5           LDR      R0,[R4, #+16]
   \   00000144   010080E2           ADD      R0,R0,#+1
   \   00000148   ........           BL       GUI_DrawHLine
   \   0000014C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000150   141094E5           LDR      R1,[R4, #+20]
   \   00000154   002041E0           SUB      R2,R1,R0
   \   00000158   0C1094E5           LDR      R1,[R4, #+12]
   \   0000015C   011080E0           ADD      R1,R0,R1
   \   00000160   180094E5           LDR      R0,[R4, #+24]
   \   00000164   010040E2           SUB      R0,R0,#+1
   \   00000168   ........           BL       GUI_DrawHLine
   \   0000016C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000170   181094E5           LDR      R1,[R4, #+24]
   \   00000174   002041E0           SUB      R2,R1,R0
   \   00000178   101094E5           LDR      R1,[R4, #+16]
   \   0000017C   011080E0           ADD      R1,R0,R1
   \   00000180   0C0094E5           LDR      R0,[R4, #+12]
   \   00000184   010080E2           ADD      R0,R0,#+1
   \   00000188   ........           BL       GUI_DrawVLine
   \   0000018C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000190   181094E5           LDR      R1,[R4, #+24]
   \   00000194   002041E0           SUB      R2,R1,R0
   \   00000198   101094E5           LDR      R1,[R4, #+16]
   \   0000019C   011080E0           ADD      R1,R0,R1
   \   000001A0   140094E5           LDR      R0,[R4, #+20]
   \   000001A4   010040E2           SUB      R0,R0,#+1
   \   000001A8   ........           BL       GUI_DrawVLine
    136                }
    137                GUI_SetColor(pProps->aColorFrame[2]);
   \   000001AC   080095E5           LDR      R0,[R5, #+8]
   \   000001B0   ........           BL       GUI_SetColor
    138                GUI_FillRect(pDrawItemInfo->x0 + 2, pDrawItemInfo->y0 + pProps->Radius, pDrawItemInfo->x0 + pProps->Radius - 1, pDrawItemInfo->y1 - pProps->Radius);
   \   000001B4   1C1095E5           LDR      R1,[R5, #+28]
   \   000001B8   182094E5           LDR      R2,[R4, #+24]
   \   000001BC   0C0094E5           LDR      R0,[R4, #+12]
   \   000001C0   013042E0           SUB      R3,R2,R1
   \   000001C4   10C094E5           LDR      R12,[R4, #+16]
   \   000001C8   002081E0           ADD      R2,R1,R0
   \   000001CC   012042E2           SUB      R2,R2,#+1
   \   000001D0   0C1081E0           ADD      R1,R1,R12
   \   000001D4   020080E2           ADD      R0,R0,#+2
   \   000001D8   ........           BL       GUI_FillRect
    139                GUI_FillRect(pDrawItemInfo->x1 - pProps->Radius + 1, pDrawItemInfo->y0 + pProps->Radius, pDrawItemInfo->x1 - 2, pDrawItemInfo->y1 - pProps->Radius);
   \   000001DC   1CC095E5           LDR      R12,[R5, #+28]
   \   000001E0   181094E5           LDR      R1,[R4, #+24]
   \   000001E4   140094E5           LDR      R0,[R4, #+20]
   \   000001E8   0C3041E0           SUB      R3,R1,R12
   \   000001EC   022040E2           SUB      R2,R0,#+2
   \   000001F0   101094E5           LDR      R1,[R4, #+16]
   \   000001F4   0C0040E0           SUB      R0,R0,R12
   \   000001F8   01108CE0           ADD      R1,R12,R1
   \   000001FC   010080E2           ADD      R0,R0,#+1
   \   00000200   ........           BL       GUI_FillRect
    140                Radius = pProps->Radius;
   \   00000204   1C6095E5           LDR      R6,[R5, #+28]
   \   00000208   110000EA           B        ??BUTTON_DrawSkinFlex_7
    141              } else {
    142                //
    143                // Frame
    144                //
    145                for (y = 0; y < 2; y++) {
    146                  Color = *(pProps->aColorFrame + y);
    147                  GUI_SetColor(Color);
   \                     ??BUTTON_DrawSkinFlex_6:
   \   0000020C   ........           BL       GUI_SetColor
    148                  GUI_DrawRect(pDrawItemInfo->x0 + y, pDrawItemInfo->y0 + y, pDrawItemInfo->x1 - y, pDrawItemInfo->y1 - y);
   \   00000210   183094E5           LDR      R3,[R4, #+24]
   \   00000214   142094E5           LDR      R2,[R4, #+20]
   \   00000218   101094E5           LDR      R1,[R4, #+16]
   \   0000021C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000220   ........           BL       GUI_DrawRect
   \   00000224   040095E5           LDR      R0,[R5, #+4]
   \   00000228   ........           BL       GUI_SetColor
   \   0000022C   180094E5           LDR      R0,[R4, #+24]
   \   00000230   013040E2           SUB      R3,R0,#+1
   \   00000234   140094E5           LDR      R0,[R4, #+20]
   \   00000238   012040E2           SUB      R2,R0,#+1
   \   0000023C   100094E5           LDR      R0,[R4, #+16]
   \   00000240   011080E2           ADD      R1,R0,#+1
   \   00000244   0C0094E5           LDR      R0,[R4, #+12]
   \   00000248   010080E2           ADD      R0,R0,#+1
   \   0000024C   ........           BL       GUI_DrawRect
    149                }
    150                Radius = 2;
   \   00000250   0260A0E3           MOV      R6,#+2
    151              }
    152              //
    153              // Background
    154              //
    155              GUI_DrawGradientV(pDrawItemInfo->x0 + Radius,
    156                                pDrawItemInfo->y0 + 2,
    157                                pDrawItemInfo->x1 - Radius,
    158                                ((pDrawItemInfo->y0 + pDrawItemInfo->y1) >> 1),
    159                                pProps->aColorUpper[0], pProps->aColorUpper[1]);
   \                     ??BUTTON_DrawSkinFlex_7:
   \   00000254   101095E5           LDR      R1,[R5, #+16]
   \   00000258   100094E5           LDR      R0,[R4, #+16]
   \   0000025C   04108DE5           STR      R1,[SP, #+4]
   \   00000260   0C1095E5           LDR      R1,[R5, #+12]
   \   00000264   00108DE5           STR      R1,[SP, #+0]
   \   00000268   181094E5           LDR      R1,[R4, #+24]
   \   0000026C   001081E0           ADD      R1,R1,R0
   \   00000270   C130A0E1           ASR      R3,R1,#+1
   \   00000274   141094E5           LDR      R1,[R4, #+20]
   \   00000278   062041E0           SUB      R2,R1,R6
   \   0000027C   021080E2           ADD      R1,R0,#+2
   \   00000280   0C0094E5           LDR      R0,[R4, #+12]
   \   00000284   000086E0           ADD      R0,R6,R0
   \   00000288   ........           BL       GUI_DrawGradientV
    160              GUI_DrawGradientV(pDrawItemInfo->x0 + Radius,
    161                                ((pDrawItemInfo->y0 + pDrawItemInfo->y1) >> 1) + 1,
    162                                pDrawItemInfo->x1 - Radius,
    163                                pDrawItemInfo->y1 - 2,
    164                                pProps->aColorLower[0], pProps->aColorLower[1]);
   \   0000028C   181095E5           LDR      R1,[R5, #+24]
   \   00000290   180094E5           LDR      R0,[R4, #+24]
   \   00000294   04108DE5           STR      R1,[SP, #+4]
   \   00000298   141095E5           LDR      R1,[R5, #+20]
   \   0000029C   023040E2           SUB      R3,R0,#+2
   \   000002A0   00108DE5           STR      R1,[SP, #+0]
   \   000002A4   141094E5           LDR      R1,[R4, #+20]
   \   000002A8   062041E0           SUB      R2,R1,R6
   \   000002AC   101094E5           LDR      R1,[R4, #+16]
   \   000002B0   010080E0           ADD      R0,R0,R1
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   C01081E0           ADD      R1,R1,R0, ASR #+1
   \   000002BC   0C0094E5           LDR      R0,[R4, #+12]
   \   000002C0   000086E0           ADD      R0,R6,R0
   \   000002C4   ........           BL       GUI_DrawGradientV
    165              break;
   \   000002C8   430000EA           B        ??BUTTON_DrawSkinFlex_1
    166            case WIDGET_ITEM_DRAW_BITMAP:
    167              //
    168              // Bitmap
    169              //
    170              pObj = BUTTON_LOCK_H(pDrawItemInfo->hWin);
   \                     ??BUTTON_DrawSkinFlex_4:
   \   000002CC   000094E5           LDR      R0,[R4, #+0]
   \   000002D0   ........           BL       GUI_ALLOC_LockH
    171              if (pDrawItemInfo->ItemIndex == BUTTON_SKINFLEX_PI_PRESSED) {
   \   000002D4   081094E5           LDR      R1,[R4, #+8]
   \   000002D8   000051E3           CMP      R1,#+0
   \   000002DC   0400001A           BNE      ??BUTTON_DrawSkinFlex_8
    172                BitmapIndex = pObj->ahDrawObj[BUTTON_BI_PRESSED]  ? BUTTON_BI_PRESSED  : BUTTON_BI_UNPRESSED;
   \   000002E0   6C1090E5           LDR      R1,[R0, #+108]
   \   000002E4   000051E3           CMP      R1,#+0
   \   000002E8   0400000A           BEQ      ??BUTTON_DrawSkinFlex_9
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   020000EA           B        ??BUTTON_DrawSkinFlex_9
    173              } else {
    174                BitmapIndex = pObj->ahDrawObj[BUTTON_BI_DISABLED] ? BUTTON_BI_DISABLED : BUTTON_BI_UNPRESSED;
   \                     ??BUTTON_DrawSkinFlex_8:
   \   000002F4   701090E5           LDR      R1,[R0, #+112]
   \   000002F8   000051E3           CMP      R1,#+0
   \   000002FC   0210A013           MOVNE    R1,#+2
    175              }
    176              hDrawObj = pObj->ahDrawObj[BitmapIndex];
   \                     ??BUTTON_DrawSkinFlex_9:
   \   00000300   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000304   685090E5           LDR      R5,[R0, #+104]
    177              GUI_UNLOCK_H(pObj);
   \   00000308   ........           BL       GUI_ALLOC_UnlockH
    178              GUI_DRAW__Draw(hDrawObj, pDrawItemInfo->hWin, 0, 0);
   \   0000030C   0030A0E3           MOV      R3,#+0
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   001094E5           LDR      R1,[R4, #+0]
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           BL       GUI_DRAW__Draw
    179              break;
   \   00000320   2D0000EA           B        ??BUTTON_DrawSkinFlex_1
    180            case WIDGET_ITEM_DRAW_TEXT:
    181              //
    182              // Button text
    183              //
    184              pObj = BUTTON_LOCK_H(pDrawItemInfo->hWin);
   \                     ??BUTTON_DrawSkinFlex_5:
   \   00000324   000094E5           LDR      R0,[R4, #+0]
   \   00000328   ........           BL       GUI_ALLOC_LockH
    185              hText = pObj->hpText;
   \   0000032C   647090E5           LDR      R7,[R0, #+100]
    186              if (hText) {
   \   00000330   000057E3           CMP      R7,#+0
   \   00000334   2400000A           BEQ      ??BUTTON_DrawSkinFlex_10
    187                //
    188                // Set right text color
    189                //
    190                TextAlign = pObj->Props.Align;
    191                ColorIndex = (pDrawItemInfo->ItemIndex == BUTTON_SKINFLEX_PI_PRESSED) ? 1 : 
    192                             (pDrawItemInfo->ItemIndex == BUTTON_SKINFLEX_PI_ENABLED) ? 0 :
    193                             2;
   \   00000338   081094E5           LDR      R1,[R4, #+8]
   \   0000033C   FC65D0E1           LDRSH    R6,[R0, #+92]
   \   00000340   000051E3           CMP      R1,#+0
   \   00000344   0110A003           MOVEQ    R1,#+1
   \   00000348   0200000A           BEQ      ??BUTTON_DrawSkinFlex_11
   \   0000034C   020051E3           CMP      R1,#+2
   \   00000350   0010A003           MOVEQ    R1,#+0
   \   00000354   0210A013           MOVNE    R1,#+2
    194                Color = pObj->Props.aTextColor[ColorIndex];
   \                     ??BUTTON_DrawSkinFlex_11:
   \   00000358   011180E0           ADD      R1,R0,R1, LSL #+2
   \   0000035C   404091E5           LDR      R4,[R1, #+64]
    195                GUI_SetFont(pObj->Props.pFont);
   \   00000360   540090E5           LDR      R0,[R0, #+84]
   \   00000364   ........           BL       GUI_SetFont
    196                GUI_UNLOCK_H(pObj);
   \   00000368   ........           BL       GUI_ALLOC_UnlockH
    197                GUI_SetColor(Color);
   \   0000036C   0400A0E1           MOV      R0,R4
   \   00000370   ........           BL       GUI_SetColor
    198                //
    199                // Calculate text rectangle
    200                //
    201                GUI_GetClientRect(&Rect);
   \   00000374   10008DE2           ADD      R0,SP,#+16
   \   00000378   ........           BL       GUI_GetClientRect
    202                Rect.x0 += pProps->Radius;
   \   0000037C   F011DDE1           LDRSH    R1,[SP, #+16]
   \   00000380   1C0095E5           LDR      R0,[R5, #+28]
   \   00000384   011080E0           ADD      R1,R0,R1
   \   00000388   B011CDE1           STRH     R1,[SP, #+16]
    203                Rect.x1 -= pProps->Radius;
   \   0000038C   F411DDE1           LDRSH    R1,[SP, #+20]
   \   00000390   000041E0           SUB      R0,R1,R0
   \   00000394   B401CDE1           STRH     R0,[SP, #+20]
    204                Rect.y0 += 2;
   \   00000398   F201DDE1           LDRSH    R0,[SP, #+18]
   \   0000039C   020080E2           ADD      R0,R0,#+2
   \   000003A0   B201CDE1           STRH     R0,[SP, #+18]
    205                Rect.y1 -= 2;
   \   000003A4   F601DDE1           LDRSH    R0,[SP, #+22]
   \   000003A8   020040E2           SUB      R0,R0,#+2
   \   000003AC   B601CDE1           STRH     R0,[SP, #+22]
    206                //
    207                // Draw text
    208                //
    209                GUI_SetTextMode(GUI_TM_TRANS);
   \   000003B0   0200A0E3           MOV      R0,#+2
   \   000003B4   ........           BL       GUI_SetTextMode
    210                s = (const char *)GUI_LOCK_H(hText);
   \   000003B8   0700A0E1           MOV      R0,R7
   \   000003BC   ........           BL       GUI_ALLOC_LockH
    211                GUI_DispStringInRect(s, &Rect, TextAlign);
   \   000003C0   0620A0E1           MOV      R2,R6
   \   000003C4   10108DE2           ADD      R1,SP,#+16
   \   000003C8   ........           BL       GUI_DispStringInRect
    212                GUI_UNLOCK_H(s);
   \                     ??BUTTON_DrawSkinFlex_10:
   \   000003CC   ........           BL       GUI_ALLOC_UnlockH
   \   000003D0   010000EA           B        ??BUTTON_DrawSkinFlex_1
    213              } else {
    214                GUI_UNLOCK_H(pObj);
    215              }
    216              break;
    217            case WIDGET_ITEM_CREATE:
    218              WM_SetHasTrans(pDrawItemInfo->hWin);
   \                     ??BUTTON_DrawSkinFlex_2:
   \   000003D4   000094E5           LDR      R0,[R4, #+0]
   \   000003D8   ........           BL       WM_SetHasTrans
    219              break;
    220            }
    221            return 0;
   \                     ??BUTTON_DrawSkinFlex_1:
   \   000003DC   0000A0E3           MOV      R0,#+0
   \   000003E0   1CD08DE2           ADD      SP,SP,#+28
   \   000003E4   F080BDE8           POP      {R4-R7,PC}       ;; return
    222          }
    223          
    224          /*********************************************************************
    225          *
    226          *       BUTTON_SetSkinFlexProps
    227          */

   \                                 In section .text, align 4, keep-with-next
    228          void BUTTON_SetSkinFlexProps(const BUTTON_SKINFLEX_PROPS * pProps, int Index) {
    229            if (Index < GUI_COUNTOF(_apProps)) {
   \                     BUTTON_SetSkinFlexProps:
   \   00000000   040051E3           CMP      R1,#+4
   \   00000004   0000003A           BCC      ??BUTTON_SetSkinFlexProps_0
    230              *_apProps[Index] = *pProps;
   \   00000008   1EFF2FE1           BX       LR
    231            }
   \                     ??BUTTON_SetSkinFlexProps_0:
   \   0000000C   F0402DE9           PUSH     {R4-R7,LR}
   \   00000010   ........           ADR      R2,_apProps
   \   00000014   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000018   FC50B0E8           LDM      R0!,{R2-R7,R12,LR}
   \   0000001C   FC50A1E8           STM      R1!,{R2-R7,R12,LR}
    232          }
   \   00000020   F080BDE8           POP      {R4-R7,PC}       ;; return
    233          
    234          /*********************************************************************
    235          *
    236          *       BUTTON_GetSkinFlexProps
    237          */

   \                                 In section .text, align 4, keep-with-next
    238          void BUTTON_GetSkinFlexProps(BUTTON_SKINFLEX_PROPS * pProps, int Index) {
    239            if (Index < GUI_COUNTOF(_apProps)) {
   \                     BUTTON_GetSkinFlexProps:
   \   00000000   040051E3           CMP      R1,#+4
   \   00000004   0000003A           BCC      ??BUTTON_GetSkinFlexProps_0
    240              *pProps = *_apProps[Index];
   \   00000008   1EFF2FE1           BX       LR
    241            }
   \                     ??BUTTON_GetSkinFlexProps_0:
   \   0000000C   F0402DE9           PUSH     {R4-R7,LR}
   \   00000010   ........           ADR      R2,_apProps
   \   00000014   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000018   FC50B1E8           LDM      R1!,{R2-R7,R12,LR}
   \   0000001C   FC50A0E8           STM      R0!,{R2-R7,R12,LR}
    242          }
   \   00000020   F080BDE8           POP      {R4-R7,PC}       ;; return
    243          
    244          #else
    245            void BUTTON_SkinFlex_C(void);
    246            void BUTTON_SkinFlex_C(void) {} /* avoid empty object files */
    247          #endif /* GUI_WINSUPPORT */
    248          
    249          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     BUTTON_DrawSkinFlex         48
     BUTTON_GetSkinFlexProps     20
     BUTTON_SetSkinFlexProps     20


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _PropsPressed             32
     _PropsFocussed            32
     _PropsEnabled             32
     _PropsDisabled            32
     _apProps                  16
     BUTTON_DrawSkinFlex     1000
     BUTTON_SetSkinFlexProps   36
     BUTTON_GetSkinFlexProps   36

 
   128 bytes in section .data
 1 088 bytes in section .text
 
 1 088 bytes of CODE memory
   128 bytes of DATA memory

Errors: none
Warnings: none
