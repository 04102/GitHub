###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:20 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_GetP.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_GetP.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LC #
#                    D_GetP.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LCD #
#                    _GetP.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_GetP.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDGetP.c
     19          Purpose     : Get Pixel routines
     20                        Note: These routines are in a module of their own
     21                              because they are mostly not required to link
     22          ---------------------------END-OF-HEADER------------------------------
     23          */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       LCD_GetPixelIndex
     36          *
     37          * NOTE:
     38          *   We can not use the standard clipping which we use for drawing
     39          *   operations as it is perfectly legal to read pixels outside of
     40          *   the clipping area. We therefor get the bounding rectangle of the
     41          *   device and use it for clipping.
     42          */

   \                                 In section .text, align 4, keep-with-next
     43          unsigned LCD_GetPixelIndex(int x, int y)  {
   \                     LCD_GetPixelIndex:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     44            LCD_RECT r;  
     45            GUI_ASSERT_LOCK();
     46            LCDDEV_L0_GetRect(GUI_Context.apDevice[GUI_Context.SelLayer], &r);
   \   00000004   ........           LDR      R6,??DataTable1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000001C   480090E5           LDR      R0,[R0, #+72]
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0C2090E5           LDR      R2,[R0, #+12]
   \   00000028   302092E5           LDR      R2,[R2, #+48]
   \   0000002C   32FF2FE1           BLX      R2
     47            if (x < r.x0) {
   \   00000030   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000034   000054E1           CMP      R4,R0
   \   00000038   010000AA           BGE      ??LCD_GetPixelIndex_0
     48              return 0;
   \                     ??LCD_GetPixelIndex_1:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   110000EA           B        ??LCD_GetPixelIndex_2
     49            }
     50            if (x > r.x1) {
   \                     ??LCD_GetPixelIndex_0:
   \   00000044   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000048   040050E1           CMP      R0,R4
   \   0000004C   FAFFFFBA           BLT      ??LCD_GetPixelIndex_1
     51              return 0;
     52            }
     53            if (y < r.y0) {
   \   00000050   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000054   000055E1           CMP      R5,R0
     54              return 0;
   \   00000058   0000A0B3           MOVLT    R0,#+0
   \   0000005C   0A0000BA           BLT      ??LCD_GetPixelIndex_2
     55            }
     56            if (y > r.y1) {
   \   00000060   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000064   050050E1           CMP      R0,R5
   \   00000068   F3FFFFBA           BLT      ??LCD_GetPixelIndex_1
   \   0000006C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0410A0E1           MOV      R1,R4
   \   00000078   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000007C   480090E5           LDR      R0,[R0, #+72]
   \   00000080   0C3090E5           LDR      R3,[R0, #+12]
   \   00000084   143093E5           LDR      R3,[R3, #+20]
     57              return 0;
     58            }
     59            return LCDDEV_L0_GetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y);
   \   00000088   33FF2FE1           BLX      R3
   \                     ??LCD_GetPixelIndex_2:
   \   0000008C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000090   7080BDE8           POP      {R4-R6,PC}       ;; return
     60          }
     61          
     62          /*********************************************************************
     63          *
     64          *       GUI_GetPixelIndex
     65          */

   \                                 In section .text, align 4, keep-with-next
     66          unsigned GUI_GetPixelIndex(int x, int y)  {
   \                     GUI_GetPixelIndex:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     67            unsigned r;
     68          
     69            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
     70            r = LCD_GetPixelIndex(x, y);
   \   00000014   ........           LDR      R6,??DataTable1
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000020   000186E0           ADD      R0,R6,R0, LSL #+2
   \   00000024   480090E5           LDR      R0,[R0, #+72]
   \   00000028   0C2090E5           LDR      R2,[R0, #+12]
   \   0000002C   302092E5           LDR      R2,[R2, #+48]
   \   00000030   32FF2FE1           BLX      R2
   \   00000034   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000038   000054E1           CMP      R4,R0
   \   0000003C   F400DDA1           LDRSHGE  R0,[SP, #+4]
   \   00000040   040050A1           CMPGE    R0,R4
   \   00000044   F200DDA1           LDRSHGE  R0,[SP, #+2]
   \   00000048   000055A1           CMPGE    R5,R0
   \   0000004C   F600DDA1           LDRSHGE  R0,[SP, #+6]
   \   00000050   050050A1           CMPGE    R0,R5
   \   00000054   090000BA           BLT      ??GUI_GetPixelIndex_0
   \   00000058   1100D6E5           LDRB     R0,[R6, #+17]
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0410A0E1           MOV      R1,R4
   \   00000064   000186E0           ADD      R0,R6,R0, LSL #+2
   \   00000068   480090E5           LDR      R0,[R0, #+72]
   \   0000006C   0C3090E5           LDR      R3,[R0, #+12]
   \   00000070   143093E5           LDR      R3,[R3, #+20]
   \   00000074   33FF2FE1           BLX      R3
   \   00000078   0040A0E1           MOV      R4,R0
   \   0000007C   000000EA           B        ??GUI_GetPixelIndex_1
   \                     ??GUI_GetPixelIndex_0:
   \   00000080   0040A0E3           MOV      R4,#+0
     71            GUI_UNLOCK();
   \                     ??GUI_GetPixelIndex_1:
   \   00000084   ........           BL       GUI_Unlock
     72            return r;
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   08D08DE2           ADD      SP,SP,#+8
   \   00000090   7080BDE8           POP      {R4-R6,PC}       ;; return
     73          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
     74          
     75          
     76          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     GUI_GetPixelIndex     24
     LCD_GetPixelIndex     24


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     LCD_GetPixelIndex  148
     GUI_GetPixelIndex  148
     ??DataTable1         4

 
 300 bytes in section .text
 
 300 bytes of CODE memory

Errors: none
Warnings: none
