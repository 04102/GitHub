###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:56 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\SLIDER.c                            #
#    Command line =  C:\DUII\TargetHW\GUI\SLIDER.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\SL #
#                    IDER.lst                                                 #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\SLI #
#                    DER.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\SLIDER.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : SLIDER.c
     19          Purpose     : Implementation of slider widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "GUI_Private.h"
     26          #include "SLIDER_Private.h"
     27          #include "WIDGET.h"
     28          
     29          #if GUI_WINSUPPORT
     30          
     31          /*********************************************************************
     32          *
     33          *       Private config defaults
     34          *
     35          **********************************************************************
     36          */
     37          
     38          /* Define colors */
     39          #ifndef   SLIDER_BKCOLOR0_DEFAULT
     40            #define SLIDER_BKCOLOR0_DEFAULT   0xc0c0c0
     41          #endif
     42          
     43          #ifndef   SLIDER_COLOR0_DEFAULT
     44            #define SLIDER_COLOR0_DEFAULT     0xc0c0c0
     45          #endif
     46          
     47          #ifndef   SLIDER_FOCUSCOLOR_DEFAULT
     48            #define SLIDER_FOCUSCOLOR_DEFAULT GUI_BLACK
     49          #endif
     50          
     51          #ifndef   SLIDER_TICKCOLOR_DEFAULT
     52            #define SLIDER_TICKCOLOR_DEFAULT GUI_BLACK
     53          #endif
     54          
     55          #ifndef   SLIDER_DRAW_SKIN_DEFAULT
     56            #define SLIDER_DRAW_SKIN_DEFAULT NULL
     57          #endif
     58          
     59          /*********************************************************************
     60          *
     61          *       Public data
     62          *
     63          **********************************************************************
     64          */
     65          

   \                                 In section .data, align 4
     66          SLIDER_PROPS SLIDER__DefaultProps = {
   \                     SLIDER__DefaultProps:
   \   00000000   C0C0C000C0C0       DC32 12632256, 12632256, 0, 0, 0H
   \              C00000000000
   \              000000000000
   \              0000        
     67            SLIDER_BKCOLOR0_DEFAULT,
     68            SLIDER_COLOR0_DEFAULT,
     69            SLIDER_FOCUSCOLOR_DEFAULT,
     70            SLIDER_TICKCOLOR_DEFAULT,
     71            {
     72              SLIDER_DRAW_SKIN_DEFAULT
     73            }
     74          };
     75          
     76          WIDGET_SKIN const * SLIDER__pSkinDefault = &SLIDER__SkinClassic;
   \                     SLIDER__pSkinDefault:
   \   00000014   ........           DC32 SLIDER__SkinClassic
     77          
     78          /*********************************************************************
     79          *
     80          *       Static routines
     81          *
     82          **********************************************************************
     83          */
     84          /*********************************************************************
     85          *
     86          *       _Paint
     87          */
     88          static void _Paint(SLIDER_Handle hObj) {
     89            SLIDER_Obj * pObj;
     90            WIDGET_PAINT * pfPaint;
     91          
     92            pObj = SLIDER_LOCK_H(hObj);
     93            pfPaint = pObj->pWidgetSkin->pfPaint;
     94            GUI_UNLOCK_H(pObj);
     95            if (pfPaint) {
     96              pfPaint(hObj);
     97            }
     98          }
     99          
    100          /*********************************************************************
    101          *
    102          *       _SliderPressed
    103          */
    104          static void _SliderPressed(SLIDER_Handle hObj, U16 Status) {
    105            WIDGET_OrState(hObj, SLIDER_STATE_PRESSED);
    106            if (Status & WM_SF_ISVIS) {
    107              WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
    108            }
    109          }
    110          
    111          /*********************************************************************
    112          *
    113          *       _SliderReleased
    114          */
    115          static void _SliderReleased(SLIDER_Handle hObj, U16 Status) {
    116            WIDGET_AndState(hObj, SLIDER_STATE_PRESSED);
    117            if (Status & WM_SF_ISVIS) {
    118              WM_NotifyParent(hObj, WM_NOTIFICATION_RELEASED);
    119            }
    120          }
    121          
    122          /*********************************************************************
    123          *
    124          *       _OnTouch
    125          */

   \                                 In section .text, align 4, keep-with-next
    126          static void _OnTouch(SLIDER_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnTouch:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    127            const GUI_PID_STATE * pState = (const GUI_PID_STATE *)pMsg->Data.p;
   \   00000004   0CA091E5           LDR      R10,[R1, #+12]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0060A0E1           MOV      R6,R0
    128            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
   \   00000010   00005AE3           CMP      R10,#+0
   \   00000014   5B00000A           BEQ      ??_OnTouch_0
    129              SLIDER_Obj * pObj;
    130              I16 Width, State;
    131              U16 Status;
    132              int Min, Max;
    133              pObj = SLIDER_LOCK_H(hObj);
   \   00000018   ........           BL       GUI_ALLOC_LockH
    134              Min = pObj->Min;
    135              Max = pObj->Max;
    136              Width = pObj->Width;
    137              State = pObj->Widget.State;
    138              Status = pObj->Widget.Win.Status;
   \   0000001C   288090E5           LDR      R8,[R0, #+40]
   \   00000020   4C5090E5           LDR      R5,[R0, #+76]
   \   00000024   0888A0E1           LSL      R8,R8,#+16
   \   00000028   504090E5           LDR      R4,[R0, #+80]
   \   0000002C   F0B6D0E1           LDRSH    R11,[R0, #+96]
   \   00000030   F273D0E1           LDRSH    R7,[R0, #+50]
   \   00000034   2888A0E1           LSR      R8,R8,#+16
    139              GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    140              if (pState->Pressed) {
   \   0000003C   0800DAE5           LDRB     R0,[R10, #+8]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   4500000A           BEQ      ??_OnTouch_1
    141                int x0, xsize, x, Sel, Range;
    142                Range = (Max - Min);
    143                x0    = 1 + Width / 2;  /* 1 pixel focus rectangle + width of actual slider */
   \   00000048   0BB8A0E1           LSL      R11,R11,#+16
   \   0000004C   2BB8A0E1           LSR      R11,R11,#+16
   \   00000050   AB078BE0           ADD      R0,R11,R11, LSR #+15
   \   00000054   0008A0E1           LSL      R0,R0,#+16
   \   00000058   C008A0E1           ASR      R0,R0,#+17
   \   0000005C   01B080E2           ADD      R11,R0,#+1
    144                x     = (State & WIDGET_STATE_VERTICAL) ? pState->y : pState->x;
   \   00000060   080017E3           TST      R7,#0x8
   \   00000064   04009A15           LDRNE    R0,[R10, #+4]
   \   00000068   00009A05           LDREQ    R0,[R10, #+0]
   \   0000006C   059044E0           SUB      R9,R4,R5
    145                x    -= x0;
   \   00000070   0BA040E0           SUB      R10,R0,R11
    146                xsize = WIDGET__GetWindowSizeX(hObj) - 2 * x0;
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   ........           BL       WIDGET__GetWindowSizeX
    147                if (x <= 0) {
   \   0000007C   01005AE3           CMP      R10,#+1
   \   00000080   8B1040E0           SUB      R1,R0,R11, LSL #+1
    148                  Sel = Min;
   \   00000084   0540A0B1           MOVLT    R4,R5
   \   00000088   080000BA           BLT      ??_OnTouch_2
    149                } else if (x >= xsize) {
   \   0000008C   01005AE1           CMP      R10,R1
   \   00000090   060000AA           BGE      ??_OnTouch_2
    150                  Sel = Max;
    151                } else {
    152                  int Div;
    153                  Div = xsize ? xsize : 1;     /* Make sure we do not divide by 0, even though xsize should never be 0 in this case anyhow */
   \   00000094   000051E3           CMP      R1,#+0
    154                  Sel = Min + ((U32)Range * (U32)x + Div / 2) / Div;
   \   00000098   9A0900E0           MUL      R0,R10,R9
   \   0000009C   0110A003           MOVEQ    R1,#+1
   \   000000A0   A12F81E0           ADD      R2,R1,R1, LSR #+31
   \   000000A4   C20080E0           ADD      R0,R0,R2, ASR #+1
   \   000000A8   ........           BL       __aeabi_uidiv
   \   000000AC   054080E0           ADD      R4,R0,R5
    155                }
    156                if (WM_IsFocussable(hObj)) {
   \                     ??_OnTouch_2:
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           BL       WM_IsFocussable
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0100000A           BEQ      ??_OnTouch_3
    157                  WM_SetFocus(hObj);
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       WM_SetFocus
    158                }
    159                WM_SetCapture(hObj, 1);
   \                     ??_OnTouch_3:
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   ........           BL       WM_SetCapture
    160                SLIDER_SetValue(hObj, Sel);
   \   000000D4   000056E3           CMP      R6,#+0
   \   000000D8   1700000A           BEQ      ??_OnTouch_4
   \   000000DC   ........           BL       GUI_Lock
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           BL       GUI_ALLOC_LockH
   \   000000E8   0010A0E1           MOV      R1,R0
   \   000000EC   4C0091E5           LDR      R0,[R1, #+76]
   \   000000F0   000054E1           CMP      R4,R0
   \   000000F4   0040A0B1           MOVLT    R4,R0
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   504091E5           LDR      R4,[R1, #+80]
   \   00000100   000054E1           CMP      R4,R0
   \   00000104   0040A0C1           MOVGT    R4,R0
   \   00000108   540091E5           LDR      R0,[R1, #+84]
   \   0000010C   040050E1           CMP      R0,R4
   \   00000110   0100001A           BNE      ??_OnTouch_5
   \   00000114   ........           BL       GUI_ALLOC_UnlockH
   \   00000118   060000EA           B        ??_OnTouch_6
   \                     ??_OnTouch_5:
   \   0000011C   544081E5           STR      R4,[R1, #+84]
   \   00000120   0600A0E1           MOV      R0,R6
   \   00000124   ........           BL       WM_InvalidateWindow
   \   00000128   ........           BL       GUI_ALLOC_UnlockH
   \   0000012C   0510A0E3           MOV      R1,#+5
   \   00000130   0600A0E1           MOV      R0,R6
   \   00000134   ........           BL       WM_NotifyParent
   \                     ??_OnTouch_6:
   \   00000138   ........           BL       GUI_Unlock
    161                if ((State & SLIDER_STATE_PRESSED) == 0){   
   \                     ??_OnTouch_4:
   \   0000013C   400F17E3           TST      R7,#0x100
   \   00000140   1000001A           BNE      ??_OnTouch_0
    162                  _SliderPressed(hObj, Status);
   \   00000144   401FA0E3           MOV      R1,#+256
   \   00000148   0600A0E1           MOV      R0,R6
   \   0000014C   ........           BL       WIDGET_OrState
   \   00000150   020018E3           TST      R8,#0x2
   \   00000154   0B00000A           BEQ      ??_OnTouch_0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   070000EA           B        ??_OnTouch_7
    163                }
    164              } else {
    165                /* React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown) */
    166                if (State & SLIDER_STATE_PRESSED) {   
   \                     ??_OnTouch_1:
   \   00000160   400F17E3           TST      R7,#0x100
   \   00000164   0700000A           BEQ      ??_OnTouch_0
    167                  _SliderReleased(hObj, Status);
   \   00000168   401FA0E3           MOV      R1,#+256
   \   0000016C   0600A0E1           MOV      R0,R6
   \   00000170   ........           BL       WIDGET_AndState
   \   00000174   020018E3           TST      R8,#0x2
   \   00000178   0200000A           BEQ      ??_OnTouch_0
   \   0000017C   0210A0E3           MOV      R1,#+2
   \                     ??_OnTouch_7:
   \   00000180   0600A0E1           MOV      R0,R6
   \   00000184   ........           BL       WM_NotifyParent
    168                }
    169              }
    170            }
    171          }
   \                     ??_OnTouch_0:
   \   00000188   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000018C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    172          
    173          /*********************************************************************
    174          *
    175          *       _OnKey
    176          */

   \                                 In section .text, align 4, keep-with-next
    177          static void  _OnKey(SLIDER_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnKey:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    178            const WM_KEY_INFO * pKeyInfo;
    179            int Key;
    180            pKeyInfo = (const WM_KEY_INFO *)(pMsg->Data.p);
   \   00000008   0C0091E5           LDR      R0,[R1, #+12]
    181            Key = pKeyInfo->Key;
    182            if (pKeyInfo->PressedCnt > 0) {
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   010051E3           CMP      R1,#+1
   \   00000014   180000BA           BLT      ??_OnKey_0
    183              switch (Key) {
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   100050E2           SUBS     R0,R0,#+16
   \   00000020   1600000A           BEQ      ??_OnKey_1
   \   00000024   020050E2           SUBS     R0,R0,#+2
   \   00000028   1300001A           BNE      ??_OnKey_0
    184                case GUI_KEY_RIGHT:
    185                  SLIDER_Inc(hObj);
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   1100000A           BEQ      ??_OnKey_0
   \   00000034   ........           BL       GUI_Lock
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       GUI_ALLOC_LockH
   \   00000040   541090E5           LDR      R1,[R0, #+84]
   \   00000044   502090E5           LDR      R2,[R0, #+80]
   \   00000048   020051E1           CMP      R1,R2
   \   0000004C   010000BA           BLT      ??_OnKey_2
   \                     ??_OnKey_3:
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
   \   00000054   070000EA           B        ??_OnKey_4
   \                     ??_OnKey_2:
   \   00000058   011081E2           ADD      R1,R1,#+1
   \                     ??_OnKey_5:
   \   0000005C   541080E5           STR      R1,[R0, #+84]
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       WM_InvalidateWindow
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
   \   0000006C   0510A0E3           MOV      R1,#+5
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       WM_NotifyParent
   \                     ??_OnKey_4:
   \   00000078   ........           BL       GUI_Unlock
   \                     ??_OnKey_0:
   \   0000007C   1080BDE8           POP      {R4,PC}          ;; return
    186                  break;                    /* Send to parent by not doing anything */
    187                case GUI_KEY_LEFT:
    188                  SLIDER_Dec(hObj);
   \                     ??_OnKey_1:
   \   00000080   000054E3           CMP      R4,#+0
   \   00000084   FCFFFF0A           BEQ      ??_OnKey_0
   \   00000088   ........           BL       GUI_Lock
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   541090E5           LDR      R1,[R0, #+84]
   \   00000098   4C2090E5           LDR      R2,[R0, #+76]
   \   0000009C   010052E1           CMP      R2,R1
   \   000000A0   EAFFFFAA           BGE      ??_OnKey_3
   \   000000A4   011041E2           SUB      R1,R1,#+1
   \   000000A8   EBFFFFEA           B        ??_OnKey_5
    189                  break;                    /* Send to parent by not doing anything */
    190                default:
    191                  return;
    192              }
    193            }
    194          }
    195          
    196          /*********************************************************************
    197          *
    198          *       Private routines
    199          *
    200          **********************************************************************
    201          */
    202          /*********************************************************************
    203          *
    204          *       SLIDER_LockH
    205          */
    206          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    207          SLIDER_Obj * SLIDER_LockH(SLIDER_Handle h) {
    208            SLIDER_Obj * p = (SLIDER_Obj *)GUI_LOCK_H(h);
    209            if (p) {
    210              if (p->DebugId != SLIDER_ID) {
    211                GUI_DEBUG_ERROROUT("SLIDER.c: Wrong handle type or Object not init'ed");
    212                return 0;
    213              }
    214            }
    215            return p;
    216          }
    217          #endif
    218          
    219          /*********************************************************************
    220          *
    221          *       Exported routines:  Callback
    222          *
    223          **********************************************************************
    224          */
    225          /*********************************************************************
    226          *
    227          *       SLIDER_Callback
    228          */

   \                                 In section .text, align 4, keep-with-next
    229          void SLIDER_Callback (WM_MESSAGE *pMsg) {
   \                     SLIDER_Callback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    230            SLIDER_Handle hObj;
    231            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
    232            /* Let widget handle the standard messages */
    233            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1900000A           BEQ      ??SLIDER_Callback_0
    234              return;
    235            }
    236            switch (pMsg->MsgId) {
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   0C0050E2           SUBS     R0,R0,#+12
   \   0000002C   0D00000A           BEQ      ??SLIDER_Callback_1
   \   00000030   020050E2           SUBS     R0,R0,#+2
   \   00000034   0F00000A           BEQ      ??SLIDER_Callback_2
   \   00000038   010050E2           SUBS     R0,R0,#+1
   \   0000003C   1000001A           BNE      ??SLIDER_Callback_3
    237            case WM_PAINT:
    238              GUI_DEBUG_LOG("SLIDER: _Callback(WM_PAINT)\n");
    239              _Paint(hObj);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       GUI_ALLOC_LockH
   \   00000048   480090E5           LDR      R0,[R0, #+72]
   \   0000004C   004090E5           LDR      R4,[R0, #+0]
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
   \   00000054   000054E3           CMP      R4,#+0
   \   00000058   0B00000A           BEQ      ??SLIDER_Callback_0
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   34FF2FE1           BLX      R4
   \   00000064   080000EA           B        ??SLIDER_Callback_0
    240              return;
    241            case WM_TOUCH:
    242              _OnTouch(hObj, pMsg);
   \                     ??SLIDER_Callback_1:
   \   00000068   0410A0E1           MOV      R1,R4
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       _OnTouch
    243              break;
   \   00000074   020000EA           B        ??SLIDER_Callback_3
    244            case WM_KEY:
    245              _OnKey(hObj, pMsg);
   \                     ??SLIDER_Callback_2:
   \   00000078   0410A0E1           MOV      R1,R4
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           BL       _OnKey
    246              break;
    247            }
    248            WM_DefaultProc(pMsg);
   \                     ??SLIDER_Callback_3:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       WM_DefaultProc
    249          }
   \                     ??SLIDER_Callback_0:
   \   0000008C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000090   3080BDE8           POP      {R4,R5,PC}       ;; return
    250          
    251          /*********************************************************************
    252          *
    253          *       Exported routines:  Create
    254          *
    255          **********************************************************************
    256          */
    257          
    258          /* Note: the parameters to a create function may vary.
    259                   Some widgets may have multiple create functions */
    260          
    261          /*********************************************************************
    262          *
    263          *       SLIDER_CreateEx
    264          */

   \                                 In section .text, align 4, keep-with-next
    265          SLIDER_Handle SLIDER_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    266                                        int WinFlags, int ExFlags, int Id)
    267          {
   \                     SLIDER_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   40409DE5           LDR      R4,[SP, #+64]
   \   00000024   44509DE5           LDR      R5,[SP, #+68]
    268            SLIDER_Handle hObj;
    269            /* Create the window */
    270            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    271            #if SLIDER_SUPPORT_TRANSPARENCY
    272              WinFlags |= WM_CF_HASTRANS;
    273            #endif
    274            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, SLIDER_Callback, sizeof(SLIDER_Obj) - sizeof(WM_Obj));
   \   0000002C   3800A0E3           MOV      R0,#+56
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable0
   \   00000038   00A08DE5           STR      R10,[SP, #+0]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   01008BE3           ORR      R0,R11,#0x1
   \   00000044   04008DE5           STR      R0,[SP, #+4]
   \   00000048   0930A0E1           MOV      R3,R9
   \   0000004C   0820A0E1           MOV      R2,R8
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       WM_CreateWindowAsChild
   \   0000005C   0060B0E1           MOVS     R6,R0
    275            if (hObj) {
   \   00000060   1A00000A           BEQ      ??SLIDER_CreateEx_0
    276              SLIDER_Obj * pObj;
    277              U16 InitState;
    278              pObj = (SLIDER_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   00000064   ........           BL       GUI_ALLOC_LockH
    279              /* Handle SpecialFlags */
    280              InitState = WIDGET_STATE_FOCUSSABLE;
   \   00000068   1020A0E3           MOV      R2,#+16
    281              if (ExFlags & SLIDER_CF_VERTICAL) {
   \   0000006C   080014E3           TST      R4,#0x8
   \   00000070   0070A0E1           MOV      R7,R0
    282                InitState |= WIDGET_CF_VERTICAL;
   \   00000074   1820A013           MOVNE    R2,#+24
    283              }
    284              /* init widget specific variables */
    285              WIDGET__Init(&pObj->Widget, Id, InitState);
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   ........           BL       WIDGET__Init
    286              /* init member variables */
    287              SLIDER_INIT_ID(pObj);
    288              pObj->Props = SLIDER__DefaultProps;
   \   00000080   ........           LDR      R4,??DataTable0_1
   \   00000084   340087E2           ADD      R0,R7,#+52
   \   00000088   0E50B4E8           LDM      R4!,{R1-R3,R12,LR}
   \   0000008C   144044E2           SUB      R4,R4,#+20
   \   00000090   0E50A0E8           STM      R0!,{R1-R3,R12,LR}
    289              pObj->pWidgetSkin = SLIDER__pSkinDefault;
   \   00000094   140094E5           LDR      R0,[R4, #+20]
   \   00000098   480087E5           STR      R0,[R7, #+72]
    290              pObj->Width       = 8;
   \   0000009C   0800A0E3           MOV      R0,#+8
   \   000000A0   B006C7E1           STRH     R0,[R7, #+96]
    291              pObj->Max         = 100;
   \   000000A4   6400A0E3           MOV      R0,#+100
   \   000000A8   500087E5           STR      R0,[R7, #+80]
    292              pObj->Min         = 0;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   4C0087E5           STR      R0,[R7, #+76]
    293              pObj->NumTicks    = -1;
   \   000000B4   0000E0E1           MVN      R0,R0
   \   000000B8   5C0087E5           STR      R0,[R7, #+92]
    294              GUI_UNLOCK_H(pObj);
   \   000000BC   ........           BL       GUI_ALLOC_UnlockH
    295              SLIDER__pSkinDefault->pfCreate(hObj);
   \   000000C0   141094E5           LDR      R1,[R4, #+20]
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   041091E5           LDR      R1,[R1, #+4]
   \   000000CC   31FF2FE1           BLX      R1
    296            } else {
    297              GUI_DEBUG_ERROROUT_IF(hObj==0, "SLIDER_Create failed")
    298            }
    299            WM_UNLOCK();
   \                     ??SLIDER_CreateEx_0:
   \   000000D0   ........           BL       GUI_Unlock
    300            return hObj;
   \   000000D4   0600A0E1           MOV      R0,R6
   \   000000D8   14D08DE2           ADD      SP,SP,#+20
   \   000000DC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    301          }
    302          
    303          /*********************************************************************
    304          *
    305          *       Exported routines:  Various methods
    306          *
    307          **********************************************************************
    308          */
    309          /*********************************************************************
    310          *
    311          *       SLIDER_Dec
    312          */

   \                                 In section .text, align 4, keep-with-next
    313          void SLIDER_Dec(SLIDER_Handle hObj) {
   \                     SLIDER_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    314            SLIDER_Obj * pObj;
    315            if (hObj) {
   \   00000008   1100000A           BEQ      ??SLIDER_Dec_0
    316              WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
    317              pObj = SLIDER_LOCK_H(hObj);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       GUI_ALLOC_LockH
    318              if (pObj->v > pObj->Min) {
   \   00000018   541090E5           LDR      R1,[R0, #+84]
   \   0000001C   4C2090E5           LDR      R2,[R0, #+76]
   \   00000020   010052E1           CMP      R2,R1
   \   00000024   080000AA           BGE      ??SLIDER_Dec_1
    319                pObj->v--;
   \   00000028   011041E2           SUB      R1,R1,#+1
   \   0000002C   541080E5           STR      R1,[R0, #+84]
    320                WM_InvalidateWindow(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
    321                GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    322                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   0000003C   0510A0E3           MOV      R1,#+5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       WM_NotifyParent
   \   00000048   000000EA           B        ??SLIDER_Dec_2
    323              } else {
    324                GUI_UNLOCK_H(pObj);
   \                     ??SLIDER_Dec_1:
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    325              }
    326              WM_UNLOCK();
   \                     ??SLIDER_Dec_2:
   \   00000050   ........           BL       GUI_Unlock
    327            }
    328          }
   \                     ??SLIDER_Dec_0:
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    329          
    330          /*********************************************************************
    331          *
    332          *       SLIDER_Inc
    333          */

   \                                 In section .text, align 4, keep-with-next
    334          void SLIDER_Inc(SLIDER_Handle hObj) {
   \                     SLIDER_Inc:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    335            SLIDER_Obj * pObj;
    336            if (hObj) {
   \   00000008   1100000A           BEQ      ??SLIDER_Inc_0
    337              WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
    338              pObj = SLIDER_LOCK_H(hObj);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       GUI_ALLOC_LockH
    339              if (pObj->v < pObj->Max) {
   \   00000018   541090E5           LDR      R1,[R0, #+84]
   \   0000001C   502090E5           LDR      R2,[R0, #+80]
   \   00000020   020051E1           CMP      R1,R2
   \   00000024   080000AA           BGE      ??SLIDER_Inc_1
    340                pObj->v++;
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   541080E5           STR      R1,[R0, #+84]
    341                WM_InvalidateWindow(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
    342                GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    343                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   0000003C   0510A0E3           MOV      R1,#+5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       WM_NotifyParent
   \   00000048   000000EA           B        ??SLIDER_Inc_2
    344              } else {
    345                GUI_UNLOCK_H(pObj);
   \                     ??SLIDER_Inc_1:
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    346              }
    347              WM_UNLOCK();
   \                     ??SLIDER_Inc_2:
   \   00000050   ........           BL       GUI_Unlock
    348            }
    349          }
   \                     ??SLIDER_Inc_0:
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    350          
    351          /*********************************************************************
    352          *
    353          *       SLIDER_SetWidth
    354          */

   \                                 In section .text, align 4, keep-with-next
    355          void SLIDER_SetWidth(SLIDER_Handle hObj, int Width) {
   \                     SLIDER_SetWidth:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    356            SLIDER_Obj * pObj;
    357            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??SLIDER_SetWidth_0
    358              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    359              pObj = SLIDER_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    360              if (pObj->Width != Width) {
   \   00000024   F016D0E1           LDRSH    R1,[R0, #+96]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??SLIDER_SetWidth_1
    361                pObj->Width = Width;
   \   00000030   B056C0E1           STRH     R5,[R0, #+96]
    362                WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    363              }
    364              GUI_UNLOCK_H(pObj);
   \                     ??SLIDER_SetWidth_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
    365              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
    366            }
    367          }
   \                     ??SLIDER_SetWidth_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    368          
    369          /*********************************************************************
    370          *
    371          *       SLIDER_SetValue
    372          */

   \                                 In section .text, align 4, keep-with-next
    373          void SLIDER_SetValue(SLIDER_Handle hObj, int v) {
   \                     SLIDER_SetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    374            SLIDER_Obj * pObj;
    375            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1600000A           BEQ      ??SLIDER_SetValue_0
    376              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    377              pObj = SLIDER_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    378              /* Put in min/max range */
    379              if (v < pObj->Min) {
   \   00000024   4C1090E5           LDR      R1,[R0, #+76]
   \   00000028   010055E1           CMP      R5,R1
   \   0000002C   0150A0B1           MOVLT    R5,R1
   \   00000030   0510A0E1           MOV      R1,R5
    380                v = pObj->Min;
    381              }
    382              if (v > pObj->Max) {
   \   00000034   505090E5           LDR      R5,[R0, #+80]
   \   00000038   010055E1           CMP      R5,R1
   \   0000003C   0150A0C1           MOVGT    R5,R1
    383                v = pObj->Max;
    384              }
    385              if (pObj->v != v) {
   \   00000040   541090E5           LDR      R1,[R0, #+84]
   \   00000044   050051E1           CMP      R1,R5
   \   00000048   0700000A           BEQ      ??SLIDER_SetValue_1
    386                pObj->v = v;
   \   0000004C   545080E5           STR      R5,[R0, #+84]
    387                WM_InvalidateWindow(hObj);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       WM_InvalidateWindow
    388                GUI_UNLOCK_H(pObj);
   \   00000058   ........           BL       GUI_ALLOC_UnlockH
    389                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   0000005C   0510A0E3           MOV      R1,#+5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       WM_NotifyParent
   \   00000068   000000EA           B        ??SLIDER_SetValue_2
    390              } else {
    391                GUI_UNLOCK_H(pObj);
   \                     ??SLIDER_SetValue_1:
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
    392              }
    393              WM_UNLOCK();
   \                     ??SLIDER_SetValue_2:
   \   00000070   ........           BL       GUI_Unlock
    394            }
    395          }
   \                     ??SLIDER_SetValue_0:
   \   00000074   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
    396          
    397          /*********************************************************************
    398          *
    399          *       SLIDER_SetRange
    400          */

   \                                 In section .text, align 4, keep-with-next
    401          void SLIDER_SetRange(SLIDER_Handle hObj, int Min, int Max) {
   \                     SLIDER_SetRange:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    402            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1100000A           BEQ      ??SLIDER_SetRange_0
    403              SLIDER_Obj * pObj;
    404              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    405              pObj = SLIDER_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    406              if (Max < Min) {
   \   00000024   050056E1           CMP      R6,R5
   \   00000028   0560A0B1           MOVLT    R6,R5
    407                Max = Min;
    408              }
    409              pObj->Min = Min;
   \   0000002C   4C5080E5           STR      R5,[R0, #+76]
    410              pObj->Max = Max;
   \   00000030   506080E5           STR      R6,[R0, #+80]
    411              if (pObj->v < Min) {
   \   00000034   541090E5           LDR      R1,[R0, #+84]
   \   00000038   050051E1           CMP      R1,R5
   \   0000003C   0510A0B1           MOVLT    R1,R5
    412                pObj->v = Min;
    413              }
    414              if (pObj->v > Max) {
   \   00000040   010056E1           CMP      R6,R1
   \   00000044   541080E5           STR      R1,[R0, #+84]
   \   00000048   0160A0C1           MOVGT    R6,R1
   \   0000004C   546080E5           STR      R6,[R0, #+84]
    415                pObj->v = Max;
    416              }
    417              GUI_UNLOCK_H(pObj);
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
    418              WM_InvalidateWindow(hObj);
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_InvalidateWindow
    419              WM_UNLOCK();
   \   0000005C   ........           BL       GUI_Unlock
    420            }
    421          }
   \                     ??SLIDER_SetRange_0:
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    422          
    423          /*********************************************************************
    424          *
    425          *       SLIDER_SetNumTicks
    426          */

   \                                 In section .text, align 4, keep-with-next
    427          void SLIDER_SetNumTicks(SLIDER_Handle hObj, int NumTicks) {
   \                     SLIDER_SetNumTicks:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    428            if (hObj && (NumTicks >= 0)) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??SLIDER_SetNumTicks_0
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   0700004A           BMI      ??SLIDER_SetNumTicks_0
    429              SLIDER_Obj * pObj;
    430              WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
    431              pObj = SLIDER_LOCK_H(hObj);
    432              pObj->NumTicks = NumTicks;
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   5C5080E5           STR      R5,[R0, #+92]
    433              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    434              WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    435              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
    436            }
    437          }
   \                     ??SLIDER_SetNumTicks_0:
   \   00000040   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
    438          
    439          /*********************************************************************
    440          *
    441          *       Query state
    442          *
    443          **********************************************************************
    444          */
    445          /*********************************************************************
    446          *
    447          *       SLIDER_GetValue
    448          */

   \                                 In section .text, align 4, keep-with-next
    449          int SLIDER_GetValue(SLIDER_Handle hObj) {
   \                     SLIDER_GetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    450            int r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    451            SLIDER_Obj * pObj;
    452            if (hObj) {
   \   00000010   0500000A           BEQ      ??SLIDER_GetValue_0
    453              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    454              pObj = SLIDER_LOCK_H(hObj);
    455              r = pObj->v;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   545090E5           LDR      R5,[R0, #+84]
    456              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    457              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    458            }
    459            return r;
   \                     ??SLIDER_GetValue_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    460          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     SLIDER_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     SLIDER__DefaultProps
    461          
    462          
    463          #else /* avoid empty object files */
    464          
    465          void SLIDER_C(void);
    466          void SLIDER_C(void){}
    467          
    468          #endif  /* #if GUI_WINSUPPORT */
    469          
    470          
    471          

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     SLIDER_Callback        16
     SLIDER_CreateEx        56
     SLIDER_Dec             16
     SLIDER_GetValue        16
     SLIDER_Inc             16
     SLIDER_SetNumTicks     16
     SLIDER_SetRange        16
     SLIDER_SetValue        16
     SLIDER_SetWidth        16
     _OnKey                 16
     _OnTouch               40


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     SLIDER__DefaultProps   24
     SLIDER__pSkinDefault
     _OnTouch              400
     _OnKey                172
     SLIDER_Callback       148
     SLIDER_CreateEx       224
     SLIDER_Dec             88
     SLIDER_Inc             88
     SLIDER_SetWidth        76
     SLIDER_SetValue       124
     SLIDER_SetRange       100
     SLIDER_SetNumTicks     72
     SLIDER_GetValue        56
     ??DataTable0            4
     ??DataTable0_1          4

 
    24 bytes in section .data
 1 556 bytes in section .text
 
 1 556 bytes of CODE memory
    24 bytes of DATA memory

Errors: none
Warnings: none
