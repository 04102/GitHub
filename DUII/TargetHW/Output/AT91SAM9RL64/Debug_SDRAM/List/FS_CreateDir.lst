###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_CreateDir.c                       #
#    Command line =  C:\DUII\TargetHW\FS\FS_CreateDir.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _CreateDir.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    CreateDir.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_CreateDir.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_CreateDir.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include <stdlib.h>
     31          
     32          #include "FS_Int.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Static data
     37          *
     38          **********************************************************************
     39          */
     40          
     41          
     42          
     43          
     44          /*********************************************************************
     45          *
     46          *       Public code
     47          *
     48          **********************************************************************
     49          */
     50          
     51          /*********************************************************************
     52          *
     53          *       FS__CreateDir
     54          *
     55          *  Description:
     56          *    Internal version of FS__CreateDir.
     57          *    Creates a directory, directory path - if a directory does not 
     58          *    exist in the directory path, the directory is created.
     59          *
     60          *  Parameters:
     61          *    sDir    - Fully qualified directory path to create.
     62          *
     63          *  Return value:
     64          *    ==  0        - Directory path has been created.
     65          *    ==  1        - Directory path already exists.
     66          *    == -1        - Directory path cannot be created.
     67          *    == -2        - Directory path is too long to parse.
     68          */

   \                                 In section .text, align 4, keep-with-next
     69          int FS__CreateDir(const char * sDir) {
   \                     FS__CreateDir:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   52DF4DE2           SUB      SP,SP,#+328
     70            int          r;
     71            FS_VOLUME  * pVolume;
     72            const char * sDirPath;
     73          
     74            r = -1;
   \   00000008   0070E0E3           MVN      R7,#+0
     75            //
     76            //  Find correct volume
     77            //
     78            pVolume = FS__FindVolume(sDir, &sDirPath);
   \   0000000C   04108DE2           ADD      R1,SP,#+4
   \   00000010   ........           BL       FS__FindVolume
   \   00000014   0040A0E1           MOV      R4,R0
     79            if (*sDirPath != 0) {
   \   00000018   04009DE5           LDR      R0,[SP, #+4]
   \   0000001C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
     80              if (pVolume) {
   \   00000024   00005413           CMPNE    R4,#+0
   \   00000028   3A00000A           BEQ      ??FS__CreateDir_0
     81                //
     82                // Mount the volume if necessary
     83                //
     84                if (FS__AutoMount(pVolume) == FS_MOUNT_RW) {
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       FS__AutoMount
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   3600001A           BNE      ??FS__CreateDir_0
     85                  //
     86                  //  Check if creating directory recursive is allowed
     87                  //
     88                  FS_FIND_DATA fd;
     89                  const char * sNextDirName;
     90                  int          NumChars;
     91                  int          DestLen;
     92                  int          SrcLen;
     93                  char         acDestPath[260];  // Allow up to 258 bytes for the path
     94          
     95                  acDestPath[0]   = 0;
   \   0000003C   0050A0E3           MOV      R5,#+0
   \   00000040   0850CDE5           STRB     R5,[SP, #+8]
     96                  DestLen         = 0;
   \   00000044   0080A0E3           MOV      R8,#+0
     97                  SrcLen          = FS_STRLEN(sDirPath);
   \   00000048   04009DE5           LDR      R0,[SP, #+4]
   \   0000004C   ........           BL       strlen
   \   00000050   0090A0E1           MOV      R9,R0
     98                  if (SrcLen > (int)sizeof(acDestPath)) {
   \   00000054   0500A0E3           MOV      R0,#+5
   \   00000058   400F80E3           ORR      R0,R0,#0x100
   \   0000005C   000059E1           CMP      R9,R0
   \   00000060   110000BA           BLT      ??FS__CreateDir_1
     99                    FS_DEBUG_ERROROUT((FS_MTYPE_API, "FS__CreateDirEx, DirPath is too long.\n"));
    100                    return -2;
   \   00000064   0100C7E3           BIC      R0,R7,#0x1
   \   00000068   2B0000EA           B        ??FS__CreateDir_2
    101                  }
    102                  //
    103                  // Parse the directory path
    104                  //
    105                  do {
    106                    //
    107                    // For each FS_DIRECTORY_DELIMITER in string
    108                    // check the directory by opening it.
    109                    //
    110                    sNextDirName = FS__strchr(sDirPath, FS_DIRECTORY_DELIMITER);
    111                    if (sNextDirName) {
    112                      NumChars = sNextDirName - sDirPath;
    113                    } else if (SrcLen > 0) {
    114                      NumChars = SrcLen;
    115                    } else {
    116                      break;
    117                    }
    118                    FS_STRNCAT(acDestPath, sDirPath, NumChars);
    119                    //
    120                    // Open a handle to the directory
    121                    //
    122                    if (FS__FindFirstFileEx(&fd, pVolume, acDestPath, NULL, 0) == -1) {
    123                      //
    124                      //  Create the directory
    125                      //
    126                      FS_LOCK_DRIVER(&pVolume->Partition.Device);
    127                      r = FS_CREATEDIR(pVolume, acDestPath);
    128                      FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    129                      if (r) {
    130                        break;
    131                      }
    132                    } else {
    133                      //
    134                      //  Close the handle to the opened directory
    135                      //
    136                      FS__FindClose(&fd);
   \                     ??FS__CreateDir_3:
   \   0000006C   430F8DE2           ADD      R0,SP,#+268
   \   00000070   ........           BL       FS__FindClose
    137                      r = 1;
   \   00000074   0170A0E3           MOV      R7,#+1
    138                    }
    139                    //
    140                    //  Update length of the strings
    141                    // 
    142                    DestLen += NumChars;
   \                     ??FS__CreateDir_4:
   \   00000078   08808AE0           ADD      R8,R10,R8
    143                    SrcLen  -= NumChars;
   \   0000007C   0A0049E0           SUB      R0,R9,R10
    144                    if (DestLen) {
   \   00000080   000058E3           CMP      R8,#+0
   \   00000084   0400000A           BEQ      ??FS__CreateDir_5
    145                      //
    146                      // Append the delimiter to the 
    147                      acDestPath[DestLen++] = FS_DIRECTORY_DELIMITER;
   \   00000088   08108DE2           ADD      R1,SP,#+8
   \   0000008C   5C20A0E3           MOV      R2,#+92
   \   00000090   0120C8E7           STRB     R2,[R8, +R1]
   \   00000094   018088E2           ADD      R8,R8,#+1
    148                      acDestPath[DestLen]   = 0;
   \   00000098   0150C8E7           STRB     R5,[R8, +R1]
    149                    }
    150                    SrcLen--;
   \                     ??FS__CreateDir_5:
   \   0000009C   019040E2           SUB      R9,R0,#+1
    151                    if (sNextDirName) {
   \   000000A0   000056E3           CMP      R6,#+0
    152                      sDirPath = sNextDirName + 1;
   \   000000A4   01008612           ADDNE    R0,R6,#+1
   \   000000A8   04008D15           STRNE    R0,[SP, #+4]
    153                    } 
   \                     ??FS__CreateDir_1:
   \   000000AC   5C10A0E3           MOV      R1,#+92
   \   000000B0   04009DE5           LDR      R0,[SP, #+4]
   \   000000B4   ........           BL       FS__strchr
   \   000000B8   0060B0E1           MOVS     R6,R0
   \   000000BC   04009D15           LDRNE    R0,[SP, #+4]
   \   000000C0   00A04610           SUBNE    R10,R6,R0
   \   000000C4   0200001A           BNE      ??FS__CreateDir_6
   \   000000C8   010059E3           CMP      R9,#+1
   \   000000CC   110000BA           BLT      ??FS__CreateDir_0
   \   000000D0   09A0A0E1           MOV      R10,R9
   \                     ??FS__CreateDir_6:
   \   000000D4   0A20A0E1           MOV      R2,R10
   \   000000D8   04109DE5           LDR      R1,[SP, #+4]
   \   000000DC   08008DE2           ADD      R0,SP,#+8
   \   000000E0   ........           BL       strncat
   \   000000E4   00508DE5           STR      R5,[SP, #+0]
   \   000000E8   0030A0E3           MOV      R3,#+0
   \   000000EC   08208DE2           ADD      R2,SP,#+8
   \   000000F0   0410A0E1           MOV      R1,R4
   \   000000F4   430F8DE2           ADD      R0,SP,#+268
   \   000000F8   ........           BL       FS__FindFirstFileEx
   \   000000FC   010070E3           CMN      R0,#+1
   \   00000100   D9FFFF1A           BNE      ??FS__CreateDir_3
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       FS_FAT_CreateDir
   \   00000110   0070B0E1           MOVS     R7,R0
   \   00000114   D7FFFF0A           BEQ      ??FS__CreateDir_4
    154                  } while (1);
    155                }
    156              }
    157            }
    158            return r;
   \                     ??FS__CreateDir_0:
   \   00000118   0700A0E1           MOV      R0,R7
   \                     ??FS__CreateDir_2:
   \   0000011C   52DF8DE2           ADD      SP,SP,#+328      ;; stack cleaning
   \   00000120   F087BDE8           POP      {R4-R10,PC}      ;; return
    159          }
    160          
    161          
    162          /*********************************************************************
    163          *
    164          *       Public code
    165          *
    166          **********************************************************************
    167          */
    168          
    169          
    170          /*********************************************************************
    171          *
    172          *       FS_CreateDir
    173          *
    174          *  Description:
    175          *    API function.
    176          *    Creates a directory, directory path - if a directory does not 
    177          *    exist in the directory path, the directory is created.
    178          *
    179          *  Parameters:
    180          *    sDirPath    - Fully qualified directory name.
    181          *
    182          *  Return value:
    183          *    ==  0        - Directory path has been created.
    184          *    ==  1        - Directory path already exists.
    185          *    == -1        - Directory path cannot be created.
    186          *    == -2        - Directory path is too long to parse.
    187          */

   \                                 In section .text, align 4, keep-with-next
    188          int FS_CreateDir(const char * sDirPath) {
   \                     FS_CreateDir:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    189            int  r;
    190            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    191            r = FS__CreateDir(sDirPath);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       FS__CreateDir
   \   00000018   0040A0E1           MOV      R4,R0
    192            FS_UNLOCK();
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           BL       FS_OS_Unlock
    193            return r;
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    194          }
    195          
    196          
    197          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     FS_CreateDir       8
     FS__CreateDir    360


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__CreateDir   292
     FS_CreateDir     44

 
 336 bytes in section .text
 
 336 bytes of CODE memory

Errors: none
Warnings: none
