###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:13 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_CacheAll.c                        #
#    Command line =  C:\DUII\TargetHW\FS\FS_CacheAll.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _CacheAll.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    CacheAll.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_CacheAll.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_CacheAll.c
     19          Purpose     : Logical Block Layer, Cache module
     20                        Cache Strategy:
     21                          Pure read cache, caching all sectors equally.
     22                        Limitations:
     23                          None.
     24                          This cache module can be used on any device with any
     25                          file system.
     26          ---------------------------END-OF-HEADER------------------------------
     27          */
     28          
     29          /*********************************************************************
     30          *
     31          *       #include Section
     32          *
     33          **********************************************************************
     34          */
     35          
     36          #include "FS_ConfDefaults.h"
     37          #include "FS_Int.h"
     38          
     39          #if FS_SUPPORT_CACHE
     40          
     41          /*********************************************************************
     42          *
     43          *       Defines, fixed
     44          *
     45          **********************************************************************
     46          */
     47          
     48          #define SECTOR_INDEX_INVALID   0xFFFFFFFFUL
     49          
     50          /*********************************************************************
     51          *
     52          *       Types
     53          *
     54          **********************************************************************
     55          */
     56          
     57          /* Block info. One instance per block.
     58             Every cache block can cache a single sector.
     59             It starts with CACHE_BLOCK_INFO_ALL, followed by the cached data. */
     60          typedef struct {
     61            U32 SectorNo;
     62          } CACHE_BLOCK_INFO_ALL;
     63          
     64          /* Cache data. Once instance per cache.
     65             Size needs to be a multiple of 4 */
     66          typedef struct {
     67            U32 NumSectors;
     68            U32 SectorSize;
     69            U32 NumBytesCache;
     70          } CACHE_DATA_ALL;
     71          
     72          /*********************************************************************
     73          *
     74          *       Static code
     75          *
     76          **********************************************************************
     77          */
     78          
     79          static U32 _GetHashCode(U32 SectorNo, U32 NumSectorIndices) {
     80            return SectorNo % NumSectorIndices;
     81          }
     82          
     83          
     84          /*********************************************************************
     85          *
     86          *       _InvalidateCache
     87          *
     88          *  Description:
     89          *    Invalidates all data in cache
     90          */
     91          static void _InvalidateCache(CACHE_DATA_ALL * pCacheData) {
     92            U32             i;
     93            U32             NumSectors;
     94            CACHE_BLOCK_INFO_ALL * pBlockInfo;
     95            U32             SectorSize;
     96          
     97            NumSectors = pCacheData->NumSectors;
     98            SectorSize = pCacheData->SectorSize;
     99            pBlockInfo = (CACHE_BLOCK_INFO_ALL *)(pCacheData + 1);
    100            /* Init Cache entries */
    101            for (i = 0; i < NumSectors; i++) {
    102              pBlockInfo->SectorNo = SECTOR_INDEX_INVALID;
    103              pBlockInfo = (CACHE_BLOCK_INFO_ALL*)(((U8*)(pBlockInfo + 1)) + SectorSize);
    104            }
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       _ComputeNumSectors
    110          *
    111          */
    112          static U32 _ComputeNumSectors(FS_DEVICE * pDevice, CACHE_DATA_ALL * pCacheData) {
    113            U32 NumSectors;
    114            U16 SectorSize;
    115            U32 NumBytes;
    116          
    117            if (pCacheData->SectorSize) {
    118              return pCacheData->NumSectors;
    119            }
    120            NumBytes   = pCacheData->NumBytesCache;
    121            SectorSize = FS_GetSectorSize(pDevice);
    122            if ((SectorSize == 0) || (NumBytes < sizeof(CACHE_DATA_ALL))) {
    123              return 0;
    124            }
    125            /* Compute number of sectors in cache */
    126            NumSectors = (NumBytes - sizeof(CACHE_DATA_ALL)) / (sizeof(CACHE_BLOCK_INFO_ALL) + SectorSize);
    127            if (NumSectors > 0) {
    128              pCacheData->NumSectors    = NumSectors;
    129              pCacheData->SectorSize    = SectorSize;
    130              _InvalidateCache(pCacheData);
    131            }
    132            return NumSectors;
    133          }
    134          
    135          /*********************************************************************
    136          *
    137          *       Static code (callbacks)
    138          *
    139          **********************************************************************
    140          */
    141          
    142          /*********************************************************************
    143          *
    144          *       _CacheAll_ReadFromCache
    145          *
    146          *  Description:
    147          *    Read sector from cache if possible
    148          *
    149          *  Return value
    150          *    1    Sector not found
    151          *    0    Sector found
    152          */

   \                                 In section .text, align 4, keep-with-next
    153          static char _CacheAll_ReadFromCache(FS_DEVICE * pDevice, U32 SectorNo,       void * pData, U8 SectorType) {
   \                     _CacheAll_ReadFromCache:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    154            U32             Off;
    155            CACHE_DATA_ALL       * pCacheData;
    156            CACHE_BLOCK_INFO_ALL * pBlockInfo;
    157            U32             SectorSize;
    158          
    159            FS_USE_PARA(SectorType);
    160            pCacheData  = (CACHE_DATA_ALL *)pDevice->Data.pCacheData;
   \   00000004   0C6090E5           LDR      R6,[R0, #+12]
   \   00000008   0140A0E1           MOV      R4,R1
    161            if (_ComputeNumSectors(pDevice, pCacheData) == 0) {
   \   0000000C   041096E5           LDR      R1,[R6, #+4]
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   00109615           LDRNE    R1,[R6, #+0]
   \   0000001C   1300001A           BNE      ??_CacheAll_ReadFromCache_0
   \   00000020   087096E5           LDR      R7,[R6, #+8]
   \   00000024   ........           BL       FS_GetSectorSize
   \   00000028   0080B0E1           MOVS     R8,R0
   \   0000002C   2100000A           BEQ      ??_CacheAll_ReadFromCache_1
   \   00000030   0C0057E3           CMP      R7,#+12
   \   00000034   1F00003A           BCC      ??_CacheAll_ReadFromCache_1
   \   00000038   0C0047E2           SUB      R0,R7,#+12
   \   0000003C   041088E2           ADD      R1,R8,#+4
   \   00000040   ........           BL       __aeabi_uidiv
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   0800000A           BEQ      ??_CacheAll_ReadFromCache_0
   \   0000004C   001086E5           STR      R1,[R6, #+0]
   \   00000050   048086E5           STR      R8,[R6, #+4]
   \   00000054   0C3086E2           ADD      R3,R6,#+12
   \   00000058   00C0E0E3           MVN      R12,#+0
   \                     ??_CacheAll_ReadFromCache_2:
   \   0000005C   00C083E5           STR      R12,[R3, #+0]
   \   00000060   033088E0           ADD      R3,R8,R3
   \   00000064   043083E2           ADD      R3,R3,#+4
   \   00000068   010050E2           SUBS     R0,R0,#+1
   \   0000006C   FAFFFF1A           BNE      ??_CacheAll_ReadFromCache_2
   \                     ??_CacheAll_ReadFromCache_0:
   \   00000070   000051E3           CMP      R1,#+0
   \   00000074   0F00000A           BEQ      ??_CacheAll_ReadFromCache_1
    162              return 1;                          /* Device is not available */
    163            }
    164            SectorSize  = pCacheData->SectorSize;
    165            Off         = _GetHashCode(SectorNo, pCacheData->NumSectors) * (sizeof(CACHE_BLOCK_INFO_ALL) + SectorSize);
    166            pBlockInfo  = (CACHE_BLOCK_INFO_ALL *) (((U8 *)(pCacheData + 1)) + Off);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   001096E5           LDR      R1,[R6, #+0]
   \   00000080   ........           BL       __aeabi_uidivmod
   \   00000084   047096E5           LDR      R7,[R6, #+4]
   \   00000088   040087E2           ADD      R0,R7,#+4
   \   0000008C   906121E0           MLA      R1,R0,R1,R6
   \   00000090   0C0081E2           ADD      R0,R1,#+12
    167            if (pBlockInfo->SectorNo == SectorNo) {
   \   00000094   001090E5           LDR      R1,[R0, #+0]
   \   00000098   040051E1           CMP      R1,R4
   \   0000009C   0500001A           BNE      ??_CacheAll_ReadFromCache_1
    168              FS_MEMCPY(pData, pBlockInfo + 1, SectorSize);
   \   000000A0   041080E2           ADD      R1,R0,#+4
   \   000000A4   0720A0E1           MOV      R2,R7
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       FS_memcpy
    169              return 0;                         /* Sector found */
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   F081BDE8           POP      {R4-R8,PC}
    170            }
    171            return 1;                         /* Sector not found */
   \                     ??_CacheAll_ReadFromCache_1:
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   F081BDE8           POP      {R4-R8,PC}       ;; return
    172          }
    173          
    174          /*********************************************************************
    175          *
    176          *       _WriteIntoCache
    177          *
    178          *  Description:
    179          *    Writes a sector in cache.
    180          */
    181          static void _WriteIntoCache(CACHE_BLOCK_INFO_ALL  * pBlockInfo, U32 SectorNo, const void * pData, U32 SectorSize) {
    182            pBlockInfo->SectorNo = SectorNo;
    183            FS_MEMCPY(pBlockInfo + 1, pData, SectorSize);
    184          }
    185          
    186          /*********************************************************************
    187          *
    188          *       _CacheAll_WriteCache
    189          *
    190          *  Description:
    191          *    Write sector into cache
    192          *
    193          *  Return value
    194          *    0    Not in write cache, the physical write operation still needs to be performed (Since this cache is a pure read-cache).
    195          */

   \                                 In section .text, align 4, keep-with-next
    196          static char _CacheAll_WriteCache(FS_DEVICE * pDevice, U32 SectorNo, const void * pData, U8 SectorType) {
   \                     _CacheAll_WriteCache:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    197            U32             Off;
    198            CACHE_DATA_ALL       * pCacheData;
    199            CACHE_BLOCK_INFO_ALL * pBlockInfo;
    200            U32             SectorSize;
    201          
    202            FS_USE_PARA(SectorType);
    203            pCacheData  = (CACHE_DATA_ALL *)pDevice->Data.pCacheData;
   \   00000004   0C6090E5           LDR      R6,[R0, #+12]
   \   00000008   0140A0E1           MOV      R4,R1
    204            if (_ComputeNumSectors(pDevice, pCacheData) == 0) {
   \   0000000C   041096E5           LDR      R1,[R6, #+4]
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   00109615           LDRNE    R1,[R6, #+0]
   \   0000001C   1300001A           BNE      ??_CacheAll_WriteCache_0
   \   00000020   087096E5           LDR      R7,[R6, #+8]
   \   00000024   ........           BL       FS_GetSectorSize
   \   00000028   0080B0E1           MOVS     R8,R0
   \   0000002C   1C00000A           BEQ      ??_CacheAll_WriteCache_1
   \   00000030   0C0057E3           CMP      R7,#+12
   \   00000034   1A00003A           BCC      ??_CacheAll_WriteCache_1
   \   00000038   0C0047E2           SUB      R0,R7,#+12
   \   0000003C   041088E2           ADD      R1,R8,#+4
   \   00000040   ........           BL       __aeabi_uidiv
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   0800000A           BEQ      ??_CacheAll_WriteCache_0
   \   0000004C   001086E5           STR      R1,[R6, #+0]
   \   00000050   048086E5           STR      R8,[R6, #+4]
   \   00000054   0C3086E2           ADD      R3,R6,#+12
   \   00000058   00C0E0E3           MVN      R12,#+0
   \                     ??_CacheAll_WriteCache_2:
   \   0000005C   00C083E5           STR      R12,[R3, #+0]
   \   00000060   033088E0           ADD      R3,R8,R3
   \   00000064   043083E2           ADD      R3,R3,#+4
   \   00000068   010050E2           SUBS     R0,R0,#+1
   \   0000006C   FAFFFF1A           BNE      ??_CacheAll_WriteCache_2
   \                     ??_CacheAll_WriteCache_0:
   \   00000070   000051E3           CMP      R1,#+0
   \   00000074   0A00000A           BEQ      ??_CacheAll_WriteCache_1
    205              return 0;
    206            }
    207            SectorSize  = pCacheData->SectorSize;
    208            Off         = _GetHashCode(SectorNo, pCacheData->NumSectors) * (sizeof(CACHE_BLOCK_INFO_ALL) + SectorSize);
    209            pBlockInfo  = (CACHE_BLOCK_INFO_ALL *) (((U8 *)(pCacheData + 1)) + Off);
    210            _WriteIntoCache(pBlockInfo, SectorNo, pData, SectorSize);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   001096E5           LDR      R1,[R6, #+0]
   \   00000080   ........           BL       __aeabi_uidivmod
   \   00000084   047096E5           LDR      R7,[R6, #+4]
   \   00000088   040087E2           ADD      R0,R7,#+4
   \   0000008C   906121E0           MLA      R1,R0,R1,R6
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   0C0081E2           ADD      R0,R1,#+12
   \   00000098   044080E4           STR      R4,[R0], #+4
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   ........           BL       FS_memcpy
    211            return 0;
   \                     ??_CacheAll_WriteCache_1:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   F081BDE8           POP      {R4-R8,PC}       ;; return
    212          }
    213          
    214          /*********************************************************************
    215          *
    216          *       _CacheAll_InvalidateCache
    217          *
    218          *  Description:
    219          *    Invalidates all data in cache
    220          */

   \                                 In section .text, align 4, keep-with-next
    221          static void _CacheAll_InvalidateCache(void * p) {
    222            CACHE_DATA_ALL *       pCacheData;
    223          
    224            pCacheData = (CACHE_DATA_ALL *)p;
    225            _InvalidateCache(pCacheData);
   \                     _CacheAll_InvalidateCache:
   \   00000000   001090E5           LDR      R1,[R0, #+0]
   \   00000004   042090E5           LDR      R2,[R0, #+4]
   \   00000008   0C3080E2           ADD      R3,R0,#+12
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0600000A           BEQ      ??_CacheAll_InvalidateCache_0
   \   00000014   00C0E0E3           MVN      R12,#+0
   \                     ??_CacheAll_InvalidateCache_1:
   \   00000018   00C083E5           STR      R12,[R3, #+0]
   \   0000001C   033082E0           ADD      R3,R2,R3
   \   00000020   043083E2           ADD      R3,R3,#+4
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   FAFFFF1A           BNE      ??_CacheAll_InvalidateCache_1
    226            pCacheData->NumSectors = 0;
   \   0000002C   0010A0E3           MOV      R1,#+0
   \                     ??_CacheAll_InvalidateCache_0:
   \   00000030   001080E5           STR      R1,[R0, #+0]
    227            pCacheData->SectorSize = 0;
   \   00000034   041080E5           STR      R1,[R0, #+4]
    228          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
    229          
    230          /*********************************************************************
    231          *
    232          *       _CacheAll_Command
    233          *
    234          *  Description:
    235          *    Execute commands on the cache
    236          *
    237          *  Return value:
    238          *    Unsupported command:    -1
    239          *    Supported commands:     <0: Error. Precise value depends on command
    240          */

   \                                 In section .text, align 4, keep-with-next
    241          static int _CacheAll_Command(FS_DEVICE * pDevice, int Cmd, void *p) {
    242            int r;
    243          
    244            FS_USE_PARA(pDevice);
    245            r  = -1;
    246            switch (Cmd) {
   \                     _CacheAll_Command:
   \   00000000   7430A0E3           MOV      R3,#+116
   \   00000004   5C3D83E3           ORR      R3,R3,#0x1700
   \   00000008   0000E0E3           MVN      R0,#+0
   \   0000000C   030051E1           CMP      R1,R3
   \   00000010   0E00001A           BNE      ??_CacheAll_Command_0
    247            case FS_CMD_CACHE_INVALIDATE:
    248              _CacheAll_InvalidateCache(p);    
   \   00000014   000092E5           LDR      R0,[R2, #+0]
   \   00000018   041092E5           LDR      R1,[R2, #+4]
   \   0000001C   0C3082E2           ADD      R3,R2,#+12
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   00C0E0E3           MVN      R12,#+0
   \   00000028   0500000A           BEQ      ??_CacheAll_Command_1
   \                     ??_CacheAll_Command_2:
   \   0000002C   00C083E5           STR      R12,[R3, #+0]
   \   00000030   033081E0           ADD      R3,R1,R3
   \   00000034   043083E2           ADD      R3,R3,#+4
   \   00000038   010050E2           SUBS     R0,R0,#+1
   \   0000003C   FAFFFF1A           BNE      ??_CacheAll_Command_2
   \   00000040   0000A0E3           MOV      R0,#+0
   \                     ??_CacheAll_Command_1:
   \   00000044   000082E5           STR      R0,[R2, #+0]
   \   00000048   040082E5           STR      R0,[R2, #+4]
    249              r = 0;
   \   0000004C   0000A0E3           MOV      R0,#+0
    250              break;
    251            }
    252            return r;
   \                     ??_CacheAll_Command_0:
   \   00000050   1EFF2FE1           BX       LR               ;; return
    253          }
    254          
    255          /*********************************************************************
    256          *
    257          *       _CacheAPI
    258          *
    259          */

   \                                 In section .text, align 4, keep-with-next
    260          static const FS_CACHE_API _CacheAllAPI = {
   \                     _CacheAllAPI:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   ............       DC32 _CacheAll_ReadFromCache, _CacheAll_WriteCache, _CacheAll_InvalidateCache, _CacheAll_Command, _CacheAll_WriteCache
   \              ............
   \              ............
   \              ....        
    261            _CacheAll_ReadFromCache,
    262            _CacheAll_WriteCache,
    263            _CacheAll_InvalidateCache,
    264            _CacheAll_Command,
    265            _CacheAll_WriteCache
    266          };
    267          
    268          /*********************************************************************
    269          *
    270          *       _CacheAll_Init
    271          *
    272          *  Description:
    273          *    Initializes the cache
    274          */

   \                                 In section .text, align 4, keep-with-next
    275          U32 FS_CacheAll_Init(FS_DEVICE * pDevice, void * pData, I32 NumBytes) {
   \                     FS_CacheAll_Init:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0270A0E1           MOV      R7,R2
    276            FS_DEVICE_DATA * pDevData;
    277            U32              NumSectors;
    278            CACHE_DATA_ALL * pCacheData;
    279            U8             * pData8;
    280          
    281            NumSectors = 0;
    282            pDevData   = &pDevice->Data;
   \   00000014   046085E2           ADD      R6,R5,#+4
    283            pData8     = (U8 *)pData;
    284            //
    285            // Align pointer to a 32bit boundary
    286            //
    287            if ((U32)pData8 & 3) {
   \   00000018   030014E3           TST      R4,#0x3
   \   0000001C   0500000A           BEQ      ??FS_CacheAll_Init_0
    288              NumBytes  -= (4 - (((U32)pData8) & 3));
   \   00000020   030004E2           AND      R0,R4,#0x3
   \   00000024   071080E0           ADD      R1,R0,R7
    289              pData8    += (4 - (((U32)pData8) & 3));
   \   00000028   000060E2           RSB      R0,R0,#+0
   \   0000002C   040080E0           ADD      R0,R0,R4
   \   00000030   047041E2           SUB      R7,R1,#+4
   \   00000034   044080E2           ADD      R4,R0,#+4
    290            }
    291            //
    292            // If less memory is available than we need to hold the
    293            // management structure, we leave everything as it is.
    294            // A cache module is then not attached to the device.
    295            //
    296            if ((U32)NumBytes < sizeof(CACHE_DATA_ALL)) {
   \                     ??FS_CacheAll_Init_0:
   \   00000038   0C0057E3           CMP      R7,#+12
   \   0000003C   2200003A           BCC      ??FS_CacheAll_Init_1
    297              return 0;
    298            }
    299            pCacheData = (CACHE_DATA_ALL *)pData8;
    300            FS_MEMSET(pCacheData, 0, sizeof(CACHE_DATA_ALL));
   \   00000040   0C10A0E3           MOV      R1,#+12
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       __aeabi_memclr
    301            pDevData->pCacheAPI       = &_CacheAllAPI;
   \   0000004C   ........           ADR      R0,_CacheAllAPI
   \   00000050   040086E5           STR      R0,[R6, #+4]
    302            pDevData->pCacheData      = pCacheData;
   \   00000054   084086E5           STR      R4,[R6, #+8]
    303            pCacheData->NumBytesCache = NumBytes;
   \   00000058   087084E5           STR      R7,[R4, #+8]
    304            NumSectors = _ComputeNumSectors(pDevice, pCacheData);
   \   0000005C   040094E5           LDR      R0,[R4, #+4]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   00009415           LDRNE    R0,[R4, #+0]
   \   00000068   1800001A           BNE      ??FS_CacheAll_Init_2
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       FS_GetSectorSize
   \   00000074   0050B0E1           MOVS     R5,R0
   \   00000078   1300000A           BEQ      ??FS_CacheAll_Init_1
   \   0000007C   0C0057E3           CMP      R7,#+12
   \   00000080   1100003A           BCC      ??FS_CacheAll_Init_1
   \   00000084   0C0047E2           SUB      R0,R7,#+12
   \   00000088   041085E2           ADD      R1,R5,#+4
   \   0000008C   ........           BL       __aeabi_uidiv
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0D00000A           BEQ      ??FS_CacheAll_Init_2
   \   00000098   000084E5           STR      R0,[R4, #+0]
   \   0000009C   045084E5           STR      R5,[R4, #+4]
   \   000000A0   001094E5           LDR      R1,[R4, #+0]
   \   000000A4   0C3084E2           ADD      R3,R4,#+12
   \   000000A8   000051E3           CMP      R1,#+0
   \   000000AC   0700000A           BEQ      ??FS_CacheAll_Init_2
   \   000000B0   00C0E0E3           MVN      R12,#+0
   \                     ??FS_CacheAll_Init_3:
   \   000000B4   00C083E5           STR      R12,[R3, #+0]
   \   000000B8   033085E0           ADD      R3,R5,R3
   \   000000BC   043083E2           ADD      R3,R3,#+4
   \   000000C0   011051E2           SUBS     R1,R1,#+1
   \   000000C4   FAFFFF1A           BNE      ??FS_CacheAll_Init_3
   \   000000C8   000000EA           B        ??FS_CacheAll_Init_2
   \                     ??FS_CacheAll_Init_1:
   \   000000CC   0000A0E3           MOV      R0,#+0
    305            return NumSectors;
   \                     ??FS_CacheAll_Init_2:
   \   000000D0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000D4   F080BDE8           POP      {R4-R7,PC}       ;; return
    306          }
    307          #else 
    308          
    309          void CacheAll_c(void);
    310          void CacheAll_c(void) {}
    311          
    312          #endif /* FS_SUPPORT_CACHE */
    313          
    314          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     FS_CacheAll_Init              24
     _CacheAll_Command              0
     _CacheAll_InvalidateCache      0
     _CacheAll_ReadFromCache       24
     _CacheAll_WriteCache          24


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     _CacheAll_ReadFromCache    192
     _CacheAll_WriteCache       172
     _CacheAll_InvalidateCache   60
     _CacheAll_Command           84
     _CacheAllAPI                20
     FS_CacheAll_Init           216

 
 744 bytes in section .text
 
 744 bytes of CODE memory

Errors: none
Warnings: none
