###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:02 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\LapTimerTask.c                              #
#    Command line =  C:\DUII\DUII\LapTimerTask.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\La #
#                    pTimerTask.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Lap #
#                    TimerTask.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\LapTimerTask.c
      1          #define LAPTIMER_MAIN
      2          
      3          #ifdef PROFILER
      4          #include "profiler.h"
      5          #define THIS_TASK	LAPTIMERTASK_NUM
      6          #endif
      7          
      8          #include <stdio.h>
      9          #include <string.h>
     10          #include <math.h>
     11          #include "WM.h"
     12          #include "commondefs.h"
     13          #include "tmtypes.h"
     14          #include "DUII.h"
     15          #include "LapTimerTask.h"
     16          #include "DataHandler.h"
     17          #include "FlashReadWrite.h"
     18          
     19          #ifndef _WINDOWS
     20          #include "RTOS.h"
     21          #include "FS.h"
     22          #include "CommTask.h"
     23          #endif
     24          
     25          // external functions
     26          void SetUserMode(DU2_STATE_TYPE mode);
     27          
     28          // local functions
     29          void ProcessFinishLine( s32 );
     30          

   \                                 In section .text, align 4, keep-with-next
     31          static void InitLapTimerVariables(void) {
     32          
     33          	DataValues[PREDICTIVE_LAP].fVal = 0.0;
   \                     InitLapTimerVariables:
   \   00000000   ........           LDR      R0,??DataTable1
     34          	DataValues[LAP_TIME].iVal = 0;
     35          	DataValues[LAST_LAP_TIME].iVal = 0;
     36          	DataValues[ELAPSED_TIME].iVal = 0;
     37          	DataValues[ELAPSED_RACE_TIME].iVal = 0;
     38          	DataValues[LAP_NUMBER].iVal = 0;
     39          	DataValues[LAP_DISTANCE].fVal = 0.0;
     40          	DataValues[TOTAL_DISTANCE].fVal = 0.0;
     41          	DataValues[MIN_DOP].fVal = 10.0;
   \   00000004   4034A0E3           MOV      R3,#+1073741824
   \   00000008   483783E3           ORR      R3,R3,#0x1200000
   \   0000000C   C03080E5           STR      R3,[R0, #+192]
   \   00000010   0010A0E3           MOV      R1,#+0
     42          	DataValues[MIN_SATS].uVal = 4;
   \   00000014   0430A0E3           MOV      R3,#+4
   \   00000018   F81080E5           STR      R1,[R0, #+248]
   \   0000001C   001180E5           STR      R1,[R0, #+256]
   \   00000020   081180E5           STR      R1,[R0, #+264]
   \   00000024   101180E5           STR      R1,[R0, #+272]
   \   00000028   181180E5           STR      R1,[R0, #+280]
   \   0000002C   201180E5           STR      R1,[R0, #+288]
   \   00000030   E81080E5           STR      R1,[R0, #+232]
   \   00000034   F01080E5           STR      R1,[R0, #+240]
   \   00000038   B03080E5           STR      R3,[R0, #+176]
     43          	DataValues[MAX_DOP].fVal = 0.0;
   \   0000003C   C81080E5           STR      R1,[R0, #+200]
     44          	DataValues[MAX_SATS].uVal = 0;
   \   00000040   B81080E5           STR      R1,[R0, #+184]
     45          	DataValues[MAX_SPEED].fVal = 0.0;
   \   00000044   D01080E5           STR      R1,[R0, #+208]
     46          	DataValues[VMIN].fVal = 0.0;
   \   00000048   281180E5           STR      R1,[R0, #+296]
     47          	DataValues[VMAX].fVal = 0.0;
   \   0000004C   301180E5           STR      R1,[R0, #+304]
     48          	DataValues[SPEED_PEAKS].fVal = 0.0;
   \   00000050   381180E5           STR      R1,[R0, #+312]
     49          	DataValues[MAX_X_G].fVal = 0.0;
   \   00000054   181080E5           STR      R1,[R0, #+24]
     50          	DataValues[MAX_Y_G].fVal = 0.0;
   \   00000058   201080E5           STR      R1,[R0, #+32]
     51          	DataValues[MAX_Z_G].fVal = 0.0;
   \   0000005C   281080E5           STR      R1,[R0, #+40]
     52          	DataValues[MIN_X_G].fVal = 0.0;
   \   00000060   301080E5           STR      R1,[R0, #+48]
     53          	DataValues[MIN_Y_G].fVal = 0.0;
   \   00000064   381080E5           STR      R1,[R0, #+56]
     54          	DataValues[MIN_Z_G].fVal = 0.0;
   \   00000068   401080E5           STR      R1,[R0, #+64]
     55          	DataValues[TOTAL_HIGHREVS].uVal = 0;
   \   0000006C   281280E5           STR      R1,[R0, #+552]
     56          	DataValues[TOTAL_OVERREVS].uVal = 0;
   \   00000070   301280E5           STR      R1,[R0, #+560]
     57          	DataValues[MAX_RPM].uVal = 0;
   \   00000074   201280E5           STR      R1,[R0, #+544]
     58          	DataValues[MIN_ALTITUDE].fVal = 0.0;
   \   00000078   D81080E5           STR      R1,[R0, #+216]
     59          	DataValues[MAX_ALTITUDE].fVal = 0.0;
   \   0000007C   E01080E5           STR      R1,[R0, #+224]
     60          	DataValues[SIXTY_FOOT].uVal = 0;
   \   00000080   501180E5           STR      R1,[R0, #+336]
     61          	DataValues[SIXTY_TRAP].fVal = 0;
   \   00000084   781180E5           STR      R1,[R0, #+376]
     62          	DataValues[ZERO_SIXTY].uVal = 0;
   \   00000088   401180E5           STR      R1,[R0, #+320]
     63          	DataValues[ZERO_HUNDRED].uVal = 0;
   \   0000008C   481180E5           STR      R1,[R0, #+328]
     64          	DataValues[THREE_THIRTY_FOOT].uVal = 0;
   \   00000090   581180E5           STR      R1,[R0, #+344]
     65          	DataValues[THREE_THIRTY_TRAP].fVal = 0.0;
   \   00000094   801180E5           STR      R1,[R0, #+384]
     66          	DataValues[EIGHTH_MILE].uVal = 0;
   \   00000098   681180E5           STR      R1,[R0, #+360]
     67          	DataValues[EIGHTH_TRAP].fVal = 0.0;
   \   0000009C   901180E5           STR      R1,[R0, #+400]
     68          	DataValues[THOUSAND_FOOT].uVal = 0;
   \   000000A0   601180E5           STR      R1,[R0, #+352]
     69          	DataValues[THOUSAND_TRAP].fVal = 0.0;
   \   000000A4   881180E5           STR      R1,[R0, #+392]
     70          	DataValues[QUARTER_MILE].uVal = 0;
   \   000000A8   701180E5           STR      R1,[R0, #+368]
     71          	DataValues[QUARTER_TRAP].fVal = 0.0;
   \   000000AC   981180E5           STR      R1,[R0, #+408]
     72          } // InitLapTimerVariables
   \   000000B0   1EFF2FE1           BX       LR               ;; return
     73          
     74          // 4/8/2005 - changed lap_dist from 30 to 35 & lap_head from 20 to 30 based on VIR test
     75          // 10/12/2005 - changed lap_dist from 35 to 40, lap_alt from 80 to 100 based on customer feedback
     76          // 3/28/2006 - changed lap_dist from 40 to 45
     77          //
     78          // Lap Timer Parameters
     79          // good for skidpad #define LAP_DISTRANGE	10		// 45 in du1 matching error for start/finish distance for lat and lon in meters
     80          #define LAP_DISTRANGE	35		// 45 in du1 matching error for start/finish distance for lat and lon in meters
     81          #define LAP_ALTRANGE	100		// matching error for start/finish altitude in meters -- not used
     82          #define LAP_HEADRANGE	30		// 40 in du1, matching error for start/finish heading in degrees
     83          
     84          #define AUTOXSETHDGTIME	2000	// 2 second = number of ms to delay from launch before recording heading
     85          #define AUTOX_DISTRANGE	10		// matching error for finish line distance for lat and lon in meters
     86          #define AUTOX_HEADRANGE	30		// matching error for finish heading in degrees
     87          
     88          #define TIMER_RESOLUTION	50	// 50 msec = 1/20th of second
     89          
     90          typedef struct {
     91          	double lat;					// in decimal degrees
     92          	double lon;					// in decimal degrees
     93          	float heading;				// in degrees
     94          } gpspostype;
     95          
     96          typedef struct {
     97          	s32 besttime;				// best lap time in this session
     98          	gpspostype currentpos;		// where we are now
     99          	gpspostype previouspos;		// position of last sample
    100          	s32 timernminus1;			// lap time at last gps sample in msec
    101          } laptype;
    102          
    103          // globals
    104          	char LapInitialize = true;				// semaphore between CommTask and LapTimerTask indicating when to initialize lap data
    105          
    106          // local globals
    107          	static laptype lap;						// timing of lap

   \                                 In section .bss, align 4
    108          	static sectortype sector[NUMBER_OF_SECTORS];	// intermediate values for predictive lap timing
   \                     sector:
   \   00000000                      DS8 10400
    109          	static int refsectornum;				// which sector are we comparing to
    110          	static int cursectornum;				// which sector are we in
    111          	static double seeklat;					// what position are we watching for. could be start or finish
    112          	static double seeklon;
    113          	static float seekhdg;
    114          	static double speed;					// in meters/sec
    115          

   \                                 In section .text, align 4, keep-with-next
    116          void LapTimerTask( void ) {
   \                     LapTimerTask:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   84489FE5           LDR      R4,??LapTimerTask_1+0x4
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   80689FE5           LDR      R6,??LapTimerTask_1+0x8
   \   00000014   0B0000EA           B        ??LapTimerTask_2
    117          	static u32 lastTimerValue;				// last reading of system clock tick
    118          	static char inrange = FALSE;			// TRUE when we are near Start or Finish
    119          	static float lastdist;					// previous samples distance measurement for predictive lap timing
    120          	static char writeTracks = FALSE;
    121          
    122          	u32 currentTimerValue;					// current reading of system clock tick
    123          	u32 elapsedTime;						// time since last task event in msec
    124          	double deltad;							// in meters
    125          	int predictiveDistance;					// distance between breadcrumbs
    126          		
    127          	while (1) {
    128          		unsigned char which_event;		 	// bitmask of events that occured
    129          		
    130          		// wait for something to happen. wake up in 1/20 second to check where we are
    131          		which_event = OS_WaitSingleEventTimed( (unsigned char) (1 << DU2_NEW_GPS) , TIMER_RESOLUTION );
    132          	
    133          		if (which_event)		// if got gps, add on the du2_start or du2_finish if it occurred
    134          			which_event = which_event | OS_ClearEvents(NULL);
    135          
    136          		// if we are reprogramming just stop
    137          		if (DU2_REPROGRAMMING == unsavedSysData.systemMode || DU2_REPROGRAMMING_SU == unsavedSysData.systemMode) {	// don't do anything if we are reflashing unit
    138          			OS_Delay(600000);				// go to sleep for a long time. unit will reset and wake us up
    139          		} // if
    140          
    141          		// before doing anything else, check to see if we are fresh into a recording mode and initialize
    142          		if (LapInitialize) {
    143          			LapInitialize = false;
    144          			
    145          			InitLapTimerVariables();
    146          			lastTimerValue = 0;
    147          			lastdist = 0.0;
    148          			lap.timernminus1 = 0;
    149          			elapsedTime = 0;
    150          			lastTimerValue = OS_GetTime32();
    151          
    152          			// must do in case the user changed tracks
    153          			seeklat = trackData.startLineLat;
    154          			seeklon = trackData.startLineLong;
    155          			seekhdg = trackData.startLineHeading;
    156          			
    157          			// initialize sector times if they don't exist or if we are in Lap/Race and in qualifying mode
    158          			if ((0 == trackData.bestLapEver) || ((DU2_LAPS_WAITSTART == unsavedSysData.systemMode) && (false == sysData.lappingMode))) {
    159          				// new sf so initialize sectors
    160          				for (cursectornum = 0; cursectornum < NUMBER_OF_SECTORS; cursectornum++)
    161          					sector[cursectornum].reference =
    162          					sector[cursectornum].current =
    163          					trackData.sectorTimes[cursectornum] = 0;
    164          				trackData.numberOfSectors = 0;
    165          				lap.besttime = 0;
    166          			} // if
    167          			else {		// best lap recorded so load the reference sector data and clear the current data
    168          				for (cursectornum = 0; cursectornum < trackData.numberOfSectors; cursectornum++)
    169          					sector[cursectornum].reference = trackData.sectorTimes[cursectornum];
    170          				lap.besttime = trackData.bestLapEver;
    171          				for (cursectornum = 0; cursectornum < NUMBER_OF_SECTORS; cursectornum++)
    172          					sector[cursectornum].current = 0;
    173          			} // else
    174          			cursectornum = 0;
    175          			refsectornum = 0;
    176          			lap.previouspos.lat = lap.currentpos.lat = GetValue(LATITUDE).dVal;
    177          			lap.previouspos.lon = lap.currentpos.lon = GetValue(LONGITUDE).dVal;
    178          			lap.previouspos.heading = lap.currentpos.heading = GetValue(HEADING).fVal;
    179          				
    180          		} // if LapInitialize
    181          
    182          		if ((DU2_IDLE == unsavedSysData.systemMode) && (writeTracks == TRUE)) {		// not timing any more so save the track SF
   \                     ??LapTimerTask_3:
   \   00000018   6E00D6E5           LDRB     R0,[R6, #+110]
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   0800001A           BNE      ??LapTimerTask_2
    183          			writeTracks = FALSE;
    184          			if (unsavedSysData.sdCardInserted) {		// only write file if we have an SD card
   \   00000024   78089FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000028   6E50C6E5           STRB     R5,[R6, #+110]
   \   0000002C   C00090E5           LDR      R0,[R0, #+192]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300000A           BEQ      ??LapTimerTask_2
    185          				WriteDataStructures(TRACK_DATA);
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   ........           BL       WriteDataStructures
    186          				FS_Sync("");			// Flush cache to be sure all files written to disk
   \   00000040   F10F8FE2           ADR      R0,??LapTimerTask_4  ;; ""
   \   00000044   ........           BL       FS_Sync
    187          			} // if
    188          		} // if
   \                     ??LapTimerTask_2:
   \   00000048   3220A0E3           MOV      R2,#+50
   \   0000004C   1010A0E3           MOV      R1,#+16
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   ........           BL       PF_OS_WaitSingleEventTimed
   \   00000058   0070B0E1           MOVS     R7,R0
   \   0000005C   0200000A           BEQ      ??LapTimerTask_5
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   ........           BL       OS_ClearEvents
   \   00000068   077080E1           ORR      R7,R0,R7
   \                     ??LapTimerTask_5:
   \   0000006C   30089FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000070   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000074   200050E3           CMP      R0,#+32
   \   00000078   1F005013           CMPNE    R0,#+31
   \   0000007C   0300001A           BNE      ??LapTimerTask_6
   \   00000080   901AA0E3           MOV      R1,#+589824
   \   00000084   9F1D81E3           ORR      R1,R1,#0x27C0
   \   00000088   0300A0E3           MOV      R0,#+3
   \   0000008C   ........           BL       PF_OS_Delay
   \                     ??LapTimerTask_6:
   \   00000090   6C00D6E5           LDRB     R0,[R6, #+108]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   5A00000A           BEQ      ??LapTimerTask_7
   \   0000009C   6C50C6E5           STRB     R5,[R6, #+108]
   \   000000A0   ........           BL       InitLapTimerVariables
   \   000000A4   F4079FE5           LDR      R0,??LapTimerTask_1+0x10
   \   000000A8   685086E5           STR      R5,[R6, #+104]
   \   000000AC   385086E5           STR      R5,[R6, #+56]
   \   000000B0   1C0090E5           LDR      R0,[R0, #+28]
   \   000000B4   640086E5           STR      R0,[R6, #+100]
   \   000000B8   E8079FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000000BC   D001C0E1           LDRD     R0,R1,[R0, #+16]
   \   000000C0   F004C6E1           STRD     R0,R1,[R6, #+64]
   \   000000C4   DC079FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000000C8   D801C0E1           LDRD     R0,R1,[R0, #+24]
   \   000000CC   F804C6E1           STRD     R0,R1,[R6, #+72]
   \   000000D0   D0079FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000000D4   240090E5           LDR      R0,[R0, #+36]
   \   000000D8   600086E5           STR      R0,[R6, #+96]
   \   000000DC   C4079FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000000E0   440090E5           LDR      R0,[R0, #+68]
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   0800000A           BEQ      ??LapTimerTask_8
   \   000000EC   B0179FE5           LDR      R1,??LapTimerTask_1+0x14
   \   000000F0   8810D1E5           LDRB     R1,[R1, #+136]
   \   000000F4   090051E3           CMP      R1,#+9
   \   000000F8   1300001A           BNE      ??LapTimerTask_9
   \   000000FC   8C179FE5           LDR      R1,??LapTimerTask_1
   \   00000100   B210D1E5           LDRB     R1,[R1, #+178]
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   0F00001A           BNE      ??LapTimerTask_9
   \   0000010C   0000A0E3           MOV      R0,#+0
   \                     ??LapTimerTask_8:
   \   00000110   1430A0E3           MOV      R3,#+20
   \   00000114   8C179FE5           LDR      R1,??LapTimerTask_1+0x18
   \   00000118   602F9FE5           LDR      R2,??LapTimerTask_10
   \   0000011C   503E83E3           ORR      R3,R3,#0x500
   \                     ??LapTimerTask_11:
   \   00000120   4C5081E5           STR      R5,[R1, #+76]
   \   00000124   045082E5           STR      R5,[R2, #+4]
   \   00000128   010080E2           ADD      R0,R0,#+1
   \   0000012C   085082E4           STR      R5,[R2], #+8
   \   00000130   041081E2           ADD      R1,R1,#+4
   \   00000134   030050E1           CMP      R0,R3
   \   00000138   F8FFFFBA           BLT      ??LapTimerTask_11
   \   0000013C   64079FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000140   485080E5           STR      R5,[R0, #+72]
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   170000EA           B        ??LapTimerTask_12
   \                     ??LapTimerTask_9:
   \   0000014C   54279FE5           LDR      R2,??LapTimerTask_1+0x18
   \   00000150   0010A0E3           MOV      R1,#+0
   \   00000154   48C092E5           LDR      R12,[R2, #+72]
   \   00000158   203F9FE5           LDR      R3,??LapTimerTask_10
   \   0000015C   00005CE3           CMP      R12,#+0
   \   00000160   0500000A           BEQ      ??LapTimerTask_13
   \                     ??LapTimerTask_14:
   \   00000164   4CE092E5           LDR      LR,[R2, #+76]
   \   00000168   011081E2           ADD      R1,R1,#+1
   \   0000016C   08E083E4           STR      LR,[R3], #+8
   \   00000170   042082E2           ADD      R2,R2,#+4
   \   00000174   0C0051E1           CMP      R1,R12
   \   00000178   F9FFFF3A           BCC      ??LapTimerTask_14
   \                     ??LapTimerTask_13:
   \   0000017C   1430A0E3           MOV      R3,#+20
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   10279FE5           LDR      R2,??LapTimerTask_1+0xC
   \   00000188   503E83E3           ORR      R3,R3,#0x500
   \                     ??LapTimerTask_15:
   \   0000018C   085082E4           STR      R5,[R2], #+8
   \   00000190   085082E4           STR      R5,[R2], #+8
   \   00000194   085082E4           STR      R5,[R2], #+8
   \   00000198   085082E4           STR      R5,[R2], #+8
   \   0000019C   051081E2           ADD      R1,R1,#+5
   \   000001A0   085082E4           STR      R5,[R2], #+8
   \   000001A4   030051E1           CMP      R1,R3
   \   000001A8   F7FFFFBA           BLT      ??LapTimerTask_15
   \                     ??LapTimerTask_12:
   \   000001AC   000086E5           STR      R0,[R6, #+0]
   \   000001B0   5C5086E5           STR      R5,[R6, #+92]
   \   000001B4   585086E5           STR      R5,[R6, #+88]
   \   000001B8   0C10A0E3           MOV      R1,#+12
   \   000001BC   0D00A0E1           MOV      R0,SP
   \   000001C0   ........           BL       GetValue
   \   000001C4   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000001C8   F800C6E1           STRD     R0,R1,[R6, #+8]
   \   000001CC   D800C6E1           LDRD     R0,R1,[R6, #+8]
   \   000001D0   F002C6E1           STRD     R0,R1,[R6, #+32]
   \   000001D4   0D10A0E3           MOV      R1,#+13
   \   000001D8   0D00A0E1           MOV      R0,SP
   \   000001DC   ........           BL       GetValue
   \   000001E0   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000001E4   F001C6E1           STRD     R0,R1,[R6, #+16]
   \   000001E8   D001C6E1           LDRD     R0,R1,[R6, #+16]
   \   000001EC   F802C6E1           STRD     R0,R1,[R6, #+40]
   \   000001F0   0F10A0E3           MOV      R1,#+15
   \   000001F4   0D00A0E1           MOV      R0,SP
   \   000001F8   ........           BL       GetValue
   \   000001FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000200   180086E5           STR      R0,[R6, #+24]
   \   00000204   300086E5           STR      R0,[R6, #+48]
   \                     ??LapTimerTask_7:
   \   00000208   94069FE5           LDR      R0,??LapTimerTask_1+0x14
   \   0000020C   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000210   010050E3           CMP      R0,#+1
   \   00000214   7FFFFF0A           BEQ      ??LapTimerTask_3
    189          		else if (DU2_IDLE != unsavedSysData.systemMode &&
    190          			DU2_AUTOX_WAITSTAGE != unsavedSysData.systemMode &&
    191          			DU2_DRAG_WAITSTAGE  != unsavedSysData.systemMode &&
    192          			DU2_CAMERA_TEST != unsavedSysData.systemMode) {			// don't do anything if not in a timing mode or waiting to stage
   \   00000218   030050E3           CMP      R0,#+3
   \   0000021C   04005013           CMPNE    R0,#+4
   \   00000220   10005013           CMPNE    R0,#+16
   \   00000224   87FFFF0A           BEQ      ??LapTimerTask_2
    193          			// is this a launchable mode?
    194          			if (DU2_AUTOX_WAITLAUNCH == unsavedSysData.systemMode || DU2_DRAG_WAITLAUNCH  == unsavedSysData.systemMode) {	
   \   00000228   060050E3           CMP      R0,#+6
   \   0000022C   07005013           CMPNE    R0,#+7
   \   00000230   4800001A           BNE      ??LapTimerTask_16
    195          				// check for launch -- note that launch g is negative
    196          				if (DataValues[X_G].fVal < (((float) sysData.launchGForce) / -10.0)) {
   \   00000234   54069FE5           LDR      R0,??LapTimerTask_1
   \   00000238   7800D0E5           LDRB     R0,[R0, #+120]
   \   0000023C   ........           BL       __aeabi_ui2f
   \   00000240   ........           BL       __aeabi_f2d
   \   00000244   C034A0E3           MOV      R3,#-1073741824
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   903983E3           ORR      R3,R3,#0x240000
   \   00000250   ........           BL       __aeabi_ddiv
   \   00000254   0080A0E1           MOV      R8,R0
   \   00000258   0190A0E1           MOV      R9,R1
   \   0000025C   000094E5           LDR      R0,[R4, #+0]
   \   00000260   ........           BL       __aeabi_f2d
   \   00000264   0820A0E1           MOV      R2,R8
   \   00000268   0930A0E1           MOV      R3,R9
   \   0000026C   ........           BL       __aeabi_cdcmple
   \   00000270   74FFFF2A           BCS      ??LapTimerTask_2
    197          					// save the start location. we'll grab the heading later
    198          					unsavedSysData.workingStartLineLat = trackData.startLineLat = GetValue(LATITUDE).dVal;
   \   00000274   0C10A0E3           MOV      R1,#+12
   \   00000278   0D00A0E1           MOV      R0,SP
   \   0000027C   ........           BL       GetValue
   \   00000280   20069FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000284   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   00000288   F021C0E1           STRD     R2,R3,[R0, #+16]
   \   0000028C   14169FE5           LDR      R1,??LapTimerTask_1+0x18
   \   00000290   0C069FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000294   D021C1E1           LDRD     R2,R3,[R1, #+16]
   \   00000298   F029C0E1           STRD     R2,R3,[R0, #+144]
    199          					unsavedSysData.workingStartLineLong = trackData.startLineLong = GetValue(LONGITUDE).dVal;
   \   0000029C   0D10A0E3           MOV      R1,#+13
   \   000002A0   0D00A0E1           MOV      R0,SP
   \   000002A4   ........           BL       GetValue
   \   000002A8   F8059FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000002AC   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   000002B0   F821C0E1           STRD     R2,R3,[R0, #+24]
   \   000002B4   EC159FE5           LDR      R1,??LapTimerTask_1+0x18
   \   000002B8   E4059FE5           LDR      R0,??LapTimerTask_1+0x14
   \   000002BC   D821C1E1           LDRD     R2,R3,[R1, #+24]
   \   000002C0   F829C0E1           STRD     R2,R3,[R0, #+152]
    200          					unsavedSysData.workingStartLineHeading = 0.0;	// will be filled in when we get moving
   \   000002C4   A45080E5           STR      R5,[R0, #+164]
    201          	
    202          					// clear any distance that was racked up wandering up to stage
    203          					DataValues[LAP_DISTANCE].fVal = 0.0;
    204          					DataValues[TOTAL_DISTANCE].fVal = 0.0;
    205          					lastdist = 0.0;
    206          					
    207          					// prime the timer
    208          					elapsedTime = 0;
    209          					lap.timernminus1 = 0;
    210          					lastTimerValue = OS_GetTime32();
   \   000002C8   D0059FE5           LDR      R0,??LapTimerTask_1+0x10
   \   000002CC   E85084E5           STR      R5,[R4, #+232]
   \   000002D0   F05084E5           STR      R5,[R4, #+240]
   \   000002D4   685086E5           STR      R5,[R6, #+104]
   \   000002D8   385086E5           STR      R5,[R6, #+56]
   \   000002DC   1C0090E5           LDR      R0,[R0, #+28]
    211          					DataValues[LAP_NUMBER].iVal = 1;
    212          					predictiveDistance = SHORT_PREDICTIVE_DISTANCE;
   \   000002E0   0A10A0E3           MOV      R1,#+10
   \   000002E4   640086E5           STR      R0,[R6, #+100]
   \   000002E8   0100A0E3           MOV      R0,#+1
   \   000002EC   200184E5           STR      R0,[R4, #+288]
    213          					
    214          					if (DU2_DRAG_WAITLAUNCH == unsavedSysData.systemMode)
   \   000002F0   AC059FE5           LDR      R0,??LapTimerTask_1+0x14
   \   000002F4   08108DE5           STR      R1,[SP, #+8]
   \   000002F8   8800D0E5           LDRB     R0,[R0, #+136]
   \   000002FC   070050E3           CMP      R0,#+7
   \   00000300   0200001A           BNE      ??LapTimerTask_17
    215          						SetUserMode(DU2_DRAG);
   \   00000304   0D00A0E3           MOV      R0,#+13
   \                     ??LapTimerTask_18:
   \   00000308   ........           BL       SetUserMode
   \   0000030C   4DFFFFEA           B        ??LapTimerTask_2
    216          					else {		// autox
    217          						if (0.0 == trackData.finishLineLat)
   \                     ??LapTimerTask_17:
   \   00000310   90059FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000314   0010A0E3           MOV      R1,#+0
   \   00000318   D882C0E1           LDRD     R8,R9,[R0, #+40]
   \   0000031C   0000A0E3           MOV      R0,#+0
   \   00000320   0820A0E1           MOV      R2,R8
   \   00000324   0930A0E1           MOV      R3,R9
   \   00000328   ........           BL       __aeabi_cdcmpeq
    218          							SetUserMode(DU2_AUTOX_WAITFINISH);
   \   0000032C   1100A003           MOVEQ    R0,#+17
   \   00000330   F4FFFF0A           BEQ      ??LapTimerTask_18
    219          						else { // got a finish line so find it
    220          							seeklat = trackData.finishLineLat;
    221          							seeklon = trackData.finishLineLong;
   \   00000334   6C059FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000338   F084C6E1           STRD     R8,R9,[R6, #+64]
   \   0000033C   D003C0E1           LDRD     R0,R1,[R0, #+48]
   \   00000340   F804C6E1           STRD     R0,R1,[R6, #+72]
    222          							seekhdg = trackData.finishLineHeading;
   \   00000344   5C059FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000348   3C0090E5           LDR      R0,[R0, #+60]
   \   0000034C   600086E5           STR      R0,[R6, #+96]
    223          							SetUserMode(DU2_AUTOX);
   \   00000350   0C00A0E3           MOV      R0,#+12
   \   00000354   EBFFFFEA           B        ??LapTimerTask_18
    224          						} // else
    225          					} // else
    226          				} // if
    227          			} // if
    228          			else {		// not waiting to launch so we are in a real timing mode
    229          				if (DU2_LAPS_WAITSTART == unsavedSysData.systemMode || DU2_HILLCLIMB_WAITSTART == unsavedSysData.systemMode) {
   \                     ??LapTimerTask_16:
   \   00000358   090050E3           CMP      R0,#+9
   \   0000035C   0A005013           CMPNE    R0,#+10
   \   00000360   1400001A           BNE      ??LapTimerTask_19
    230          					// we are driving so count toward operating time
    231          					sysData.totalTimeEver += ((currentTimerValue = OS_GetTime32()) - lastTimerValue) / 1000.0;		// all time counter in seconds
   \   00000364   34059FE5           LDR      R0,??LapTimerTask_1+0x10
   \   00000368   1C8090E5           LDR      R8,[R0, #+28]
   \   0000036C   1C059FE5           LDR      R0,??LapTimerTask_1
   \   00000370   C40090E5           LDR      R0,[R0, #+196]
   \   00000374   ........           BL       __aeabi_f2d
   \   00000378   00A0A0E1           MOV      R10,R0
   \   0000037C   640096E5           LDR      R0,[R6, #+100]
   \   00000380   01B0A0E1           MOV      R11,R1
   \   00000384   000048E0           SUB      R0,R8,R0
   \   00000388   ........           BL       __aeabi_ui2d
   \   0000038C   0020A0E3           MOV      R2,#+0
   \   00000390   E83D9FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000394   ........           BL       __aeabi_ddiv
   \   00000398   0A20A0E1           MOV      R2,R10
   \   0000039C   0B30A0E1           MOV      R3,R11
   \   000003A0   ........           BL       __aeabi_dadd
   \   000003A4   ........           BL       __aeabi_d2f
   \   000003A8   E0149FE5           LDR      R1,??LapTimerTask_1
    232          					lastTimerValue = currentTimerValue;
   \   000003AC   648086E5           STR      R8,[R6, #+100]
   \   000003B0   C40081E5           STR      R0,[R1, #+196]
   \   000003B4   3B0000EA           B        ??LapTimerTask_21
    233          				} // if
    234          				// increment the time
    235          				else if (DU2_LAPS == unsavedSysData.systemMode ||
    236          					DU2_DRIVE == unsavedSysData.systemMode ||
    237          					DU2_INSTRUMENT == unsavedSysData.systemMode ||
    238          					DU2_AUTOX == unsavedSysData.systemMode ||
    239          					DU2_AUTOX_WAITFINISH == unsavedSysData.systemMode ||
    240          					DU2_HILLCLIMB == unsavedSysData.systemMode ||
    241          					DU2_HILLCLIMB_WAITFINISH == unsavedSysData.systemMode ||
    242          					DU2_DRAG == unsavedSysData.systemMode) {
   \                     ??LapTimerTask_19:
   \   000003B8   0B0050E3           CMP      R0,#+11
   \   000003BC   0F005013           CMPNE    R0,#+15
   \   000003C0   16005013           CMPNE    R0,#+22
   \   000003C4   0C005013           CMPNE    R0,#+12
   \   000003C8   11005013           CMPNE    R0,#+17
   \   000003CC   0E005013           CMPNE    R0,#+14
   \   000003D0   12005013           CMPNE    R0,#+18
   \   000003D4   0D005013           CMPNE    R0,#+13
   \   000003D8   3200001A           BNE      ??LapTimerTask_21
    243          
    244          					predictiveDistance = LAP_PREDICTIVE_DISTANCE;
   \   000003DC   3220A0E3           MOV      R2,#+50
    245          					
    246          					// timed out so up the times
    247          					elapsedTime = (currentTimerValue = OS_GetTime32()) - lastTimerValue;
   \   000003E0   B8149FE5           LDR      R1,??LapTimerTask_1+0x10
   \   000003E4   08208DE5           STR      R2,[SP, #+8]
   \   000003E8   1C1091E5           LDR      R1,[R1, #+28]
   \   000003EC   642096E5           LDR      R2,[R6, #+100]
    248          					lastTimerValue = currentTimerValue;
   \   000003F0   641086E5           STR      R1,[R6, #+100]
   \   000003F4   028041E0           SUB      R8,R1,R2
    249          		
    250          					switch (unsavedSysData.systemMode) {
   \   000003F8   0F0050E2           SUBS     R0,R0,#+15
   \   000003FC   0300000A           BEQ      ??LapTimerTask_22
   \   00000400   070050E2           SUBS     R0,R0,#+7
   \   00000404   0300000A           BEQ      ??LapTimerTask_23
   \   00000408   070000EA           B        ??LapTimerTask_24
   \                     ??LapTimerTask_4:
   \   0000040C   00000000           DC8      "",0x0,0x0,0x0
    251          						case DU2_DRIVE:
    252          							writeTracks = TRUE;							// save the start line at end of run
   \                     ??LapTimerTask_22:
   \   00000410   0100A0E3           MOV      R0,#+1
   \   00000414   6E00C6E5           STRB     R0,[R6, #+110]
    253          							// fall through
    254          						case DU2_INSTRUMENT:
    255          							sysData.driveTripTime += elapsedTime;		// drive time counter
   \                     ??LapTimerTask_23:
   \   00000418   70049FE5           LDR      R0,??LapTimerTask_1
   \   0000041C   6C149FE5           LDR      R1,??LapTimerTask_1
   \   00000420   C80090E5           LDR      R0,[R0, #+200]
   \   00000424   000088E0           ADD      R0,R8,R0
   \   00000428   C80081E5           STR      R0,[R1, #+200]
    256          					} // switch
    257          		
    258          					sysData.totalTimeEver += elapsedTime / 1000.0;		// all time counter in seconds
   \                     ??LapTimerTask_24:
   \   0000042C   5C049FE5           LDR      R0,??LapTimerTask_1
   \   00000430   C40090E5           LDR      R0,[R0, #+196]
   \   00000434   ........           BL       __aeabi_f2d
   \   00000438   00A0A0E1           MOV      R10,R0
   \   0000043C   01B0A0E1           MOV      R11,R1
   \   00000440   0800A0E1           MOV      R0,R8
   \   00000444   ........           BL       __aeabi_ui2d
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   2C3D9FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000450   ........           BL       __aeabi_ddiv
   \   00000454   0A20A0E1           MOV      R2,R10
   \   00000458   0B30A0E1           MOV      R3,R11
   \   0000045C   ........           BL       __aeabi_dadd
   \   00000460   ........           BL       __aeabi_d2f
   \   00000464   24149FE5           LDR      R1,??LapTimerTask_1
   \   00000468   C40081E5           STR      R0,[R1, #+196]
    259          		
    260          					// request use of global data
    261          					OS_Use(&SEMA_GlobalData);
   \   0000046C   F81C9FE5           LDR      R1,??LapTimerTask_20
   \   00000470   0300A0E3           MOV      R0,#+3
   \   00000474   ........           BL       PF_OS_Use
    262          		
    263          					DataValues[LAP_TIME].iVal += elapsedTime;
   \   00000478   000194E5           LDR      R0,[R4, #+256]
    264          					DataValues[ELAPSED_TIME].iVal += elapsedTime;
    265          					DataValues[ELAPSED_RACE_TIME].iVal += elapsedTime;
    266          		
    267          					// relinquish global data
    268          					OS_Unuse(&SEMA_GlobalData);		
   \   0000047C   E81C9FE5           LDR      R1,??LapTimerTask_20
   \   00000480   000088E0           ADD      R0,R8,R0
   \   00000484   000184E5           STR      R0,[R4, #+256]
   \   00000488   100194E5           LDR      R0,[R4, #+272]
   \   0000048C   000088E0           ADD      R0,R8,R0
   \   00000490   100184E5           STR      R0,[R4, #+272]
   \   00000494   180194E5           LDR      R0,[R4, #+280]
   \   00000498   000088E0           ADD      R0,R8,R0
   \   0000049C   180184E5           STR      R0,[R4, #+280]
   \   000004A0   0300A0E3           MOV      R0,#+3
   \   000004A4   ........           BL       PF_OS_Unuse
    269          				} // if
    270          
    271          				// check to see if we have a new gps position
    272          				if (which_event & (1 << DU2_NEW_GPS)) {			// comm received a new GPS position		
   \                     ??LapTimerTask_21:
   \   000004A8   100017E3           TST      R7,#0x10
   \   000004AC   E5FEFF0A           BEQ      ??LapTimerTask_2
    273          					// new gps update so get speed in kph and convert to meters / sec
    274          					speed = GetRawValue(SPEED).fVal * KPH_TO_MET_PER_SEC;
   \   000004B0   0E10A0E3           MOV      R1,#+14
   \   000004B4   10008DE2           ADD      R0,SP,#+16
   \   000004B8   ........           BL       GetRawValue
   \   000004BC   10009DE5           LDR      R0,[SP, #+16]
   \   000004C0   ........           BL       __aeabi_f2d
   \   000004C4   A22F8FE2           ADR      R2,??LapTimerTask_25
   \   000004C8   0C0092E8           LDM      R2,{R2,R3}
   \   000004CC   ........           BL       __aeabi_dmul
   \   000004D0   03008DE8           STM      SP,{R0,R1}
   \   000004D4   F005C6E1           STRD     R0,R1,[R6, #+80]
    275          				
    276          				  // update the positions
    277          					lap.previouspos = lap.currentpos;
   \   000004D8   081086E2           ADD      R1,R6,#+8
   \   000004DC   0C53B1E8           LDM      R1!,{R2,R3,R8,R9,R12,LR}
   \   000004E0   200086E2           ADD      R0,R6,#+32
   \   000004E4   0C53A0E8           STM      R0!,{R2,R3,R8,R9,R12,LR}
    278          					lap.currentpos.lat = GetValue(LATITUDE).dVal;
   \   000004E8   0C10A0E3           MOV      R1,#+12
   \   000004EC   0D00A0E1           MOV      R0,SP
   \   000004F0   ........           BL       GetValue
   \   000004F4   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   000004F8   F800C6E1           STRD     R0,R1,[R6, #+8]
    279          					lap.currentpos.lon = GetValue(LONGITUDE).dVal;
   \   000004FC   0D10A0E3           MOV      R1,#+13
   \   00000500   0D00A0E1           MOV      R0,SP
   \   00000504   ........           BL       GetValue
   \   00000508   D000CDE1           LDRD     R0,R1,[SP, #+0]
   \   0000050C   F001C6E1           STRD     R0,R1,[R6, #+16]
    280          					lap.currentpos.heading = GetValue(HEADING).fVal;
   \   00000510   0F10A0E3           MOV      R1,#+15
   \   00000514   0D00A0E1           MOV      R0,SP
   \   00000518   ........           BL       GetValue
   \   0000051C   00009DE5           LDR      R0,[SP, #+0]
    281          					
    282          					// don't get an incorrect distance if we just acquired GPS
    283          					if (0.0 == lap.previouspos.lat)
   \   00000520   0020A0E3           MOV      R2,#+0
   \   00000524   180086E5           STR      R0,[R6, #+24]
   \   00000528   D002C6E1           LDRD     R0,R1,[R6, #+32]
   \   0000052C   0030A0E3           MOV      R3,#+0
   \   00000530   ........           BL       __aeabi_cdcmpeq
   \   00000534   0300001A           BNE      ??LapTimerTask_26
    284          						lap.previouspos = lap.currentpos;
   \   00000538   081086E2           ADD      R1,R6,#+8
   \   0000053C   0C53B1E8           LDM      R1!,{R2,R3,R8,R9,R12,LR}
   \   00000540   200086E2           ADD      R0,R6,#+32
   \   00000544   0C53A0E8           STM      R0!,{R2,R3,R8,R9,R12,LR}
    285          					
    286          					// process start and finish lines
    287          					if (DU2_LAPS_WAITNOSF == unsavedSysData.systemMode || DU2_HILLCLIMB_WAITNOSF == unsavedSysData.systemMode ||
    288          						DU2_AUTOX_WAITFINISH == unsavedSysData.systemMode || DU2_HILLCLIMB_WAITFINISH == unsavedSysData.systemMode) {
   \                     ??LapTimerTask_26:
   \   00000548   54039FE5           LDR      R0,??LapTimerTask_1+0x14
   \   0000054C   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000550   050050E3           CMP      R0,#+5
   \   00000554   08005013           CMPNE    R0,#+8
   \   00000558   11005013           CMPNE    R0,#+17
   \   0000055C   12005013           CMPNE    R0,#+18
   \   00000560   8100001A           BNE      ??LapTimerTask_27
    289          						if (which_event & (1 << DU2_START_SET)) {	// user set the start or start/finish and we have new gps
   \   00000564   800017E3           TST      R7,#0x80
   \   00000568   4300000A           BEQ      ??LapTimerTask_28
    290          		
    291          							// we are in range
    292          							inrange = TRUE;
   \   0000056C   0100A0E3           MOV      R0,#+1
   \   00000570   6D00C6E5           STRB     R0,[R6, #+109]
    293          		
    294          							// prime the timer
    295          							elapsedTime = 0;
    296          							lastTimerValue = OS_GetTime32();
   \   00000574   24039FE5           LDR      R0,??LapTimerTask_1+0x10
    297          							DataValues[LAP_NUMBER].iVal = 1;
    298          							
    299          							lap.besttime = trackData.bestLapEver = 0;
    300          							DataValues[LAP_DISTANCE].fVal = 0.0;
    301          							lastdist = 0.0;
    302          						
    303          							// new sf so initialize sectors
    304          							for (cursectornum = 0; cursectornum < NUMBER_OF_SECTORS; cursectornum++)
   \   00000578   1430A0E3           MOV      R3,#+20
   \   0000057C   1C0090E5           LDR      R0,[R0, #+28]
   \   00000580   005086E5           STR      R5,[R6, #+0]
   \   00000584   640086E5           STR      R0,[R6, #+100]
   \   00000588   0100A0E3           MOV      R0,#+1
   \   0000058C   200184E5           STR      R0,[R4, #+288]
   \   00000590   10039FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000594   0C139FE5           LDR      R1,??LapTimerTask_1+0x18
   \   00000598   445080E5           STR      R5,[R0, #+68]
   \   0000059C   0000A0E3           MOV      R0,#+0
   \   000005A0   E80084E5           STR      R0,[R4, #+232]
   \   000005A4   680086E5           STR      R0,[R6, #+104]
   \   000005A8   D02A9FE5           LDR      R2,??LapTimerTask_10
   \   000005AC   503E83E3           ORR      R3,R3,#0x500
    305          								sector[cursectornum].reference =
    306          								sector[cursectornum].current =
    307          								trackData.sectorTimes[cursectornum] = 0;
   \                     ??LapTimerTask_29:
   \   000005B0   4C5081E5           STR      R5,[R1, #+76]
   \   000005B4   045082E5           STR      R5,[R2, #+4]
   \   000005B8   010080E2           ADD      R0,R0,#+1
   \   000005BC   085082E4           STR      R5,[R2], #+8
   \   000005C0   041081E2           ADD      R1,R1,#+4
   \   000005C4   030050E1           CMP      R0,R3
   \   000005C8   F8FFFFBA           BLT      ??LapTimerTask_29
    308          							cursectornum = 0;
    309          							refsectornum = 0;
    310          							trackData.numberOfSectors = 0;
   \   000005CC   D4029FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000005D0   5C5086E5           STR      R5,[R6, #+92]
   \   000005D4   585086E5           STR      R5,[R6, #+88]
   \   000005D8   485080E5           STR      R5,[R0, #+72]
    311          				
    312          							// save starting position for this track and make it available for tqm file writes
    313          							seeklat = unsavedSysData.workingStartLineLat = trackData.startLineLat = lap.currentpos.lat;
   \   000005DC   C4229FE5           LDR      R2,??LapTimerTask_1+0x18
   \   000005E0   D800C6E1           LDRD     R0,R1,[R6, #+8]
   \   000005E4   F001C2E1           STRD     R0,R1,[R2, #+16]
   \   000005E8   B4229FE5           LDR      R2,??LapTimerTask_1+0x14
   \   000005EC   F009C2E1           STRD     R0,R1,[R2, #+144]
   \   000005F0   F004C6E1           STRD     R0,R1,[R6, #+64]
    314          							seeklon = unsavedSysData.workingStartLineLong = trackData.startLineLong = lap.currentpos.lon;
   \   000005F4   AC229FE5           LDR      R2,??LapTimerTask_1+0x18
   \   000005F8   D001C6E1           LDRD     R0,R1,[R6, #+16]
   \   000005FC   F801C2E1           STRD     R0,R1,[R2, #+24]
   \   00000600   9C229FE5           LDR      R2,??LapTimerTask_1+0x14
   \   00000604   F809C2E1           STRD     R0,R1,[R2, #+152]
   \   00000608   F804C6E1           STRD     R0,R1,[R6, #+72]
    315          							seekhdg = unsavedSysData.workingStartLineHeading = trackData.startLineHeading = lap.currentpos.heading;
   \   0000060C   180096E5           LDR      R0,[R6, #+24]
   \   00000610   90129FE5           LDR      R1,??LapTimerTask_1+0x18
   \   00000614   A40082E5           STR      R0,[R2, #+164]
   \   00000618   240081E5           STR      R0,[R1, #+36]
   \   0000061C   600086E5           STR      R0,[R6, #+96]
    316          							trackData.startLineAlt = unsavedSysData.workingStartLineAlt = GetRawValue(ALTITUDE).fVal;
   \   00000620   1310A0E3           MOV      R1,#+19
   \   00000624   0D00A0E1           MOV      R0,SP
   \   00000628   ........           BL       GetRawValue
   \   0000062C   70029FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000630   00109DE5           LDR      R1,[SP, #+0]
   \   00000634   A01080E5           STR      R1,[R0, #+160]
   \   00000638   64129FE5           LDR      R1,??LapTimerTask_1+0x14
   \   0000063C   64029FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000640   A01091E5           LDR      R1,[R1, #+160]
   \   00000644   201080E5           STR      R1,[R0, #+32]
    317          							writeTracks = TRUE;
   \   00000648   0100A0E3           MOV      R0,#+1
   \   0000064C   6E00C6E5           STRB     R0,[R6, #+110]
    318          							
    319          							// got start so go to the next mode
    320          							switch (unsavedSysData.systemMode) {
   \   00000650   4C029FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000654   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000658   050050E2           SUBS     R0,R0,#+5
   \   0000065C   0200000A           BEQ      ??LapTimerTask_30
   \   00000660   030050E2           SUBS     R0,R0,#+3
   \   00000664   0200000A           BEQ      ??LapTimerTask_31
   \   00000668   3F0000EA           B        ??LapTimerTask_27
    321          								case DU2_LAPS_WAITNOSF:
    322          									SetUserMode(DU2_LAPS);
   \                     ??LapTimerTask_30:
   \   0000066C   0B00A0E3           MOV      R0,#+11
   \   00000670   3C0000EA           B        ??LapTimerTask_32
    323          									break;
    324          								case DU2_HILLCLIMB_WAITNOSF:
    325          									SetUserMode(DU2_HILLCLIMB_WAITFINISH);
   \                     ??LapTimerTask_31:
   \   00000674   1200A0E3           MOV      R0,#+18
   \   00000678   3A0000EA           B        ??LapTimerTask_32
    326          									break;
    327          							} // switch
    328          						} // if
    329          						else if (which_event & (1 << DU2_FINISH_SET)) {	// user set the finish line position
   \                     ??LapTimerTask_28:
   \   0000067C   400017E3           TST      R7,#0x40
   \   00000680   3900000A           BEQ      ??LapTimerTask_27
    330          							
    331          							// user set the finish line so remember it
    332          							unsavedSysData.workingFinishLineLat = trackData.finishLineLat = GetValue(LATITUDE).dVal;
   \   00000684   0C10A0E3           MOV      R1,#+12
   \   00000688   0D00A0E1           MOV      R0,SP
   \   0000068C   ........           BL       GetValue
   \   00000690   10029FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000694   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   00000698   F822C0E1           STRD     R2,R3,[R0, #+40]
   \   0000069C   04129FE5           LDR      R1,??LapTimerTask_1+0x18
   \   000006A0   FC019FE5           LDR      R0,??LapTimerTask_1+0x14
   \   000006A4   D822C1E1           LDRD     R2,R3,[R1, #+40]
   \   000006A8   F82AC0E1           STRD     R2,R3,[R0, #+168]
    333          							unsavedSysData.workingFinishLineLong = trackData.finishLineLong = GetValue(LONGITUDE).dVal;	
   \   000006AC   0D10A0E3           MOV      R1,#+13
   \   000006B0   0D00A0E1           MOV      R0,SP
   \   000006B4   ........           BL       GetValue
   \   000006B8   E8019FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000006BC   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   000006C0   F023C0E1           STRD     R2,R3,[R0, #+48]
   \   000006C4   DC119FE5           LDR      R1,??LapTimerTask_1+0x18
   \   000006C8   D4019FE5           LDR      R0,??LapTimerTask_1+0x14
   \   000006CC   D023C1E1           LDRD     R2,R3,[R1, #+48]
   \   000006D0   F02BC0E1           STRD     R2,R3,[R0, #+176]
    334          							unsavedSysData.workingFinishLineHeading = trackData.finishLineHeading = GetValue(HEADING).fVal;
   \   000006D4   0F10A0E3           MOV      R1,#+15
   \   000006D8   0D00A0E1           MOV      R0,SP
   \   000006DC   ........           BL       GetValue
   \   000006E0   C0019FE5           LDR      R0,??LapTimerTask_1+0x18
   \   000006E4   00109DE5           LDR      R1,[SP, #+0]
   \   000006E8   3C1080E5           STR      R1,[R0, #+60]
   \   000006EC   B4119FE5           LDR      R1,??LapTimerTask_1+0x18
   \   000006F0   AC019FE5           LDR      R0,??LapTimerTask_1+0x14
   \   000006F4   3C1091E5           LDR      R1,[R1, #+60]
   \   000006F8   BC1080E5           STR      R1,[R0, #+188]
    335          							writeTracks = TRUE;
   \   000006FC   0100A0E3           MOV      R0,#+1
   \   00000700   6E00C6E5           STRB     R0,[R6, #+110]
    336          							
    337          							// for hillclimb, start looking for the start again
    338          							if (DU2_HILLCLIMB_WAITFINISH == unsavedSysData.systemMode) {
   \   00000704   98019FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000708   8800D0E5           LDRB     R0,[R0, #+136]
   \   0000070C   120050E3           CMP      R0,#+18
   \   00000710   1100001A           BNE      ??LapTimerTask_33
    339          								
    340          								// restart
    341          								lastTimerValue = OS_GetTime32();
   \   00000714   84019FE5           LDR      R0,??LapTimerTask_1+0x10
   \   00000718   1C0090E5           LDR      R0,[R0, #+28]
   \   0000071C   640086E5           STR      R0,[R6, #+100]
    342          											
    343          								seeklat = trackData.startLineLat;
   \   00000720   80019FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000724   D001C0E1           LDRD     R0,R1,[R0, #+16]
   \   00000728   F004C6E1           STRD     R0,R1,[R6, #+64]
    344          								seeklon = trackData.startLineLong;
   \   0000072C   74019FE5           LDR      R0,??LapTimerTask_1+0x18
   \   00000730   D801C0E1           LDRD     R0,R1,[R0, #+24]
   \   00000734   F804C6E1           STRD     R0,R1,[R6, #+72]
    345          								seekhdg = trackData.startLineHeading;
   \   00000738   68019FE5           LDR      R0,??LapTimerTask_1+0x18
   \   0000073C   240090E5           LDR      R0,[R0, #+36]
   \   00000740   600086E5           STR      R0,[R6, #+96]
    346          			
    347          								ProcessFinishLine( 0 );
   \   00000744   0000A0E3           MOV      R0,#+0
   \   00000748   ........           BL       ProcessFinishLine
    348          								SetUserMode(DU2_HILLCLIMB);
   \   0000074C   0E00A0E3           MOV      R0,#+14
   \   00000750   040000EA           B        ??LapTimerTask_32
   \                     ??LapTimerTask_25:
   \   00000754   721CC7711CC7       DC32     0x71C71C72,0x3FD1C71C
   \              D13F        
    349          							} // if
    350          							else {
    351          								ProcessFinishLine( 0 );
   \                     ??LapTimerTask_33:
   \   0000075C   0000A0E3           MOV      R0,#+0
   \   00000760   ........           BL       ProcessFinishLine
    352          								SetUserMode(DU2_AUTOX_COMPLETE);
   \   00000764   1400A0E3           MOV      R0,#+20
   \                     ??LapTimerTask_32:
   \   00000768   ........           BL       SetUserMode
    353          							} // else
    354          						} // else if finish
    355          					} // if no start finish mode
    356          					
    357          					// process the position information. skip if we are not moving to eliminate divide by zero
    358          					if (speed > 0.01) {
   \                     ??LapTimerTask_27:
   \   0000076C   4E2F8FE2           ADR      R2,??LapTimerTask_1+0x1C
   \   00000770   0C0092E8           LDM      R2,{R2,R3}
   \   00000774   D005C6E1           LDRD     R0,R1,[R6, #+80]
   \   00000778   ........           BL       __aeabi_cdrcmple
   \   0000077C   31FEFF8A           BHI      ??LapTimerTask_2
    359          						double fdeltalat, fdeltalon;
    360          						float tempfloat;					
    361          						int headrange;
    362          						int distrange;
    363          
    364          						if (DU2_AUTOX == unsavedSysData.systemMode) {
   \   00000780   1C019FE5           LDR      R0,??LapTimerTask_1+0x14
   \   00000784   8870D0E5           LDRB     R7,[R0, #+136]
   \   00000788   0C0057E3           CMP      R7,#+12
    365          							headrange = AUTOX_HEADRANGE;
    366          							distrange = AUTOX_DISTRANGE;
   \   0000078C   0A10A003           MOVEQ    R1,#+10
    367          						} // if
    368          						else {
    369          							headrange = LAP_HEADRANGE;
    370          							distrange = LAP_DISTRANGE;
   \   00000790   2310A013           MOVNE    R1,#+35
   \   00000794   0C108DE5           STR      R1,[SP, #+12]
    371          						} // else
    372          						
    373          						// calculate lap distance
    374          						// find difference in meters of lat, lon
    375          						fdeltalat = (lap.currentpos.lat - lap.previouspos.lat) * LATMET;
   \   00000798   D880C6E1           LDRD     R8,R9,[R6, #+8]
   \   0000079C   0800A0E1           MOV      R0,R8
   \   000007A0   0910A0E1           MOV      R1,R9
   \   000007A4   D022C6E1           LDRD     R2,R3,[R6, #+32]
   \   000007A8   ........           BL       __aeabi_dsub
   \   000007AC   0020A0E1           MOV      R2,R0
   \   000007B0   0130A0E1           MOV      R3,R1
   \   000007B4   0000A0E3           MOV      R0,#+0
   \   000007B8   ........           LDR      R1,??DataTable3  ;; 0x40fb6f70
   \   000007BC   ........           BL       __aeabi_dmul
   \   000007C0   03008DE8           STM      SP,{R0,R1}
   \   000007C4   F001CDE1           STRD     R0,R1,[SP, #+16]
    376          						fdeltalon = (lap.currentpos.lon - lap.previouspos.lon) * LONMET(lap.currentpos.lat);
   \   000007C8   D001C6E1           LDRD     R0,R1,[R6, #+16]
   \   000007CC   D822C6E1           LDRD     R2,R3,[R6, #+40]
   \   000007D0   ........           BL       __aeabi_dsub
   \   000007D4   03008DE8           STM      SP,{R0,R1}
   \   000007D8   D4208FE2           ADR      R2,??LapTimerTask_1+0x24
   \   000007DC   0C0092E8           LDM      R2,{R2,R3}
   \   000007E0   0800A0E1           MOV      R0,R8
   \   000007E4   0910A0E1           MOV      R1,R9
   \   000007E8   ........           BL       __aeabi_ddiv
   \   000007EC   0120A0E3           MOV      R2,#+1
   \   000007F0   ........           BL       __iar_Sin
   \   000007F4   0020A0E3           MOV      R2,#+0
   \   000007F8   ........           LDR      R3,??DataTable3  ;; 0x40fb6f70
   \   000007FC   ........           BL       __aeabi_dmul
   \   00000800   00209DE5           LDR      R2,[SP, #+0]
   \   00000804   04309DE5           LDR      R3,[SP, #+4]
   \   00000808   ........           BL       __aeabi_dmul
    377          		
    378          						// remember the distance at the last sample point
    379          						lastdist = DataValues[LAP_DISTANCE].fVal;
   \   0000080C   E8A094E5           LDR      R10,[R4, #+232]
   \   00000810   0080A0E1           MOV      R8,R0
   \   00000814   0190A0E1           MOV      R9,R1
   \   00000818   68A086E5           STR      R10,[R6, #+104]
    380          	
    381          						// add on distance traveled in this sample
    382          						deltad = sqrt(fdeltalat * fdeltalat + fdeltalon * fdeltalon);
   \   0000081C   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   00000820   0020A0E1           MOV      R2,R0
   \   00000824   0130A0E1           MOV      R3,R1
   \   00000828   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   0000082C   ........           BL       __aeabi_dmul
   \   00000830   03008DE8           STM      SP,{R0,R1}
   \   00000834   0800A0E1           MOV      R0,R8
   \   00000838   0910A0E1           MOV      R1,R9
   \   0000083C   0820A0E1           MOV      R2,R8
   \   00000840   0930A0E1           MOV      R3,R9
   \   00000844   ........           BL       __aeabi_dmul
   \   00000848   00209DE5           LDR      R2,[SP, #+0]
   \   0000084C   04309DE5           LDR      R3,[SP, #+4]
   \   00000850   ........           BL       __aeabi_dadd
   \   00000854   ........           BL       sqrt
    383          	
    384          						if (DU2_DRIVE == unsavedSysData.systemMode || DU2_INSTRUMENT == unsavedSysData.systemMode) {
   \   00000858   0F0057E3           CMP      R7,#+15
   \   0000085C   0080A0E1           MOV      R8,R0
   \   00000860   0190A0E1           MOV      R9,R1
   \   00000864   16005713           CMPNE    R7,#+22
   \   00000868   1300001A           BNE      ??LapTimerTask_34
    385          							sysData.driveTripDistance += (float) deltad;
   \   0000086C   ........           BL       __aeabi_d2f
   \   00000870   00B0A0E1           MOV      R11,R0
   \   00000874   14009FE5           LDR      R0,??LapTimerTask_1
   \   00000878   0B10A0E1           MOV      R1,R11
   \   0000087C   CC0090E5           LDR      R0,[R0, #+204]
   \   00000880   ........           BL       __aeabi_fadd
   \   00000884   04109FE5           LDR      R1,??LapTimerTask_1
   \   00000888   CC0081E5           STR      R0,[R1, #+204]
    386          							DataValues[TOTAL_DISTANCE].fVal += (float) deltad;
   \   0000088C   120000EA           B        ??LapTimerTask_35
   \                     ??LapTimerTask_1:
   \   00000890   ........           DC32     sysData
   \   00000894   ........           DC32     DataValues
   \   00000898   ........           DC32     lap
   \   0000089C   ........           DC32     sector+0x4
   \   000008A0   ........           DC32     OS_Global
   \   000008A4   ........           DC32     unsavedSysData
   \   000008A8   ........           DC32     trackData
   \   000008AC   7C14AE47E17A       DC32     0x47AE147C,0x3F847AE1
   \              843F        
   \   000008B4   72235D1ADCA5       DC32     0x1A5D2372,0x404CA5DC
   \              4C40        
    387          						} // if
    388          						else if (DU2_AUTOX_COMPLETE != unsavedSysData.systemMode && DU2_DRAG_COMPLETE != unsavedSysData.systemMode) {
   \                     ??LapTimerTask_34:
   \   000008BC   140057E3           CMP      R7,#+20
   \   000008C0   15005713           CMPNE    R7,#+21
   \   000008C4   0800000A           BEQ      ??LapTimerTask_36
    389          							DataValues[LAP_DISTANCE].fVal += (float) deltad;
   \   000008C8   ........           BL       __aeabi_d2f
   \   000008CC   00B0A0E1           MOV      R11,R0
   \   000008D0   0A10A0E1           MOV      R1,R10
   \   000008D4   ........           BL       __aeabi_fadd
   \   000008D8   E80084E5           STR      R0,[R4, #+232]
    390          							DataValues[TOTAL_DISTANCE].fVal += (float) deltad;
   \                     ??LapTimerTask_35:
   \   000008DC   F00094E5           LDR      R0,[R4, #+240]
   \   000008E0   0B10A0E1           MOV      R1,R11
   \   000008E4   ........           BL       __aeabi_fadd
   \   000008E8   F00084E5           STR      R0,[R4, #+240]
    391          						} // else if
    392          	
    393          						sysData.totalDistanceEver += (float) deltad;
   \                     ??LapTimerTask_36:
   \   000008EC   0800A0E1           MOV      R0,R8
   \   000008F0   0910A0E1           MOV      R1,R9
   \   000008F4   ........           BL       __aeabi_d2f
   \   000008F8   ........           LDR      R1,??DataTable3_1
   \   000008FC   C01091E5           LDR      R1,[R1, #+192]
   \   00000900   ........           BL       __aeabi_fadd
   \   00000904   ........           LDR      R1,??DataTable3_1
    394          	
    395          						// now that we are moving, save the heading shortly after launch
    396          						// limit to small window just in case we are headed due East
    397          						if ((DU2_AUTOX == unsavedSysData.systemMode || DU2_AUTOX_WAITFINISH == unsavedSysData.systemMode || DU2_DRAG == unsavedSysData.systemMode)) {
   \   00000908   0C0057E3           CMP      R7,#+12
   \   0000090C   11005713           CMPNE    R7,#+17
   \   00000910   C00081E5           STR      R0,[R1, #+192]
   \   00000914   0D005713           CMPNE    R7,#+13
   \   00000918   1800001A           BNE      ??LapTimerTask_37
    398          							if ((0.0 == unsavedSysData.workingStartLineHeading) && (DataValues[LAP_TIME].iVal >= AUTOXSETHDGTIME) && (DataValues[LAP_TIME].iVal <= (1000 + AUTOXSETHDGTIME))) {
   \   0000091C   ........           LDR      R0,??DataTable3_2
   \   00000920   0010A0E3           MOV      R1,#+0
   \   00000924   A40090E5           LDR      R0,[R0, #+164]
   \   00000928   ........           BL       __aeabi_cfcmpeq
   \   0000092C   1300001A           BNE      ??LapTimerTask_37
   \   00000930   000194E5           LDR      R0,[R4, #+256]
   \   00000934   CF10E0E3           MVN      R1,#+207
   \   00000938   701EC1E3           BIC      R1,R1,#0x700
   \   0000093C   000081E0           ADD      R0,R1,R0
   \   00000940   E910A0E3           MOV      R1,#+233
   \   00000944   C01F81E3           ORR      R1,R1,#0x300
   \   00000948   010050E1           CMP      R0,R1
   \   0000094C   0B00002A           BCS      ??LapTimerTask_37
    399          								// save starting heading for this track
    400          								unsavedSysData.workingStartLineHeading = trackData.startLineHeading = GetValue(HEADING).fVal;
   \   00000950   0F10A0E3           MOV      R1,#+15
   \   00000954   0D00A0E1           MOV      R0,SP
   \   00000958   ........           BL       GetValue
   \   0000095C   ........           LDR      R0,??DataTable3_3
   \   00000960   00109DE5           LDR      R1,[SP, #+0]
   \   00000964   241080E5           STR      R1,[R0, #+36]
   \   00000968   ........           LDR      R1,??DataTable3_3
   \   0000096C   ........           LDR      R0,??DataTable3_2
   \   00000970   241091E5           LDR      R1,[R1, #+36]
   \   00000974   A41080E5           STR      R1,[R0, #+164]
    401          								writeTracks = TRUE;
   \   00000978   0100A0E3           MOV      R0,#+1
   \   0000097C   6E00C6E5           STRB     R0,[R6, #+110]
    402          							} // if
    403          						} // if
    404          	
    405          						// predictive lap timing
    406          						if (DataValues[LAP_TIME].iVal > 0 && lastdist > 0.0) {	// only process after passing S/F and collecting one more sample
   \                     ??LapTimerTask_37:
   \   00000980   000194E5           LDR      R0,[R4, #+256]
   \   00000984   588096E5           LDR      R8,[R6, #+88]
   \   00000988   04008DE5           STR      R0,[SP, #+4]
   \   0000098C   010050E3           CMP      R0,#+1
   \   00000990   560000BA           BLT      ??LapTimerTask_38
   \   00000994   687096E5           LDR      R7,[R6, #+104]
   \   00000998   0010A0E3           MOV      R1,#+0
   \   0000099C   0700A0E1           MOV      R0,R7
   \   000009A0   ........           BL       __aeabi_cfrcmple
   \   000009A4   5100002A           BCS      ??LapTimerTask_38
    407          							int lapdist = ((int) DataValues[LAP_DISTANCE].fVal) % predictiveDistance;  // integer lap distance
   \   000009A8   E80094E5           LDR      R0,[R4, #+232]
   \   000009AC   ........           BL       __aeabi_f2iz
   \   000009B0   08109DE5           LDR      R1,[SP, #+8]
   \   000009B4   ........           BL       __aeabi_idivmod
   \   000009B8   01A0A0E1           MOV      R10,R1
    408          		
    409          							// get just the remainder in this sector
    410          							lastdist = (float) (((int) lastdist) % predictiveDistance);
   \   000009BC   0700A0E1           MOV      R0,R7
   \   000009C0   ........           BL       __aeabi_f2iz
   \   000009C4   08109DE5           LDR      R1,[SP, #+8]
   \   000009C8   ........           BL       __aeabi_idivmod
   \   000009CC   0100A0E1           MOV      R0,R1
   \   000009D0   ........           BL       __aeabi_i2f
   \   000009D4   0090A0E1           MOV      R9,R0
    411          	
    412          							// process sectors if we are in a race mode
    413          							if (DU2_LAPS == unsavedSysData.systemMode ||
    414          								DU2_AUTOX == unsavedSysData.systemMode ||
    415          //								DU2_AUTOX_WAITFINISH == unsavedSysData.systemMode ||
    416          								DU2_HILLCLIMB == unsavedSysData.systemMode ||
    417          //								DU2_HILLCLIMB_WAITFINISH == unsavedSysData.systemMode ||
    418          								DU2_DRAG == unsavedSysData.systemMode) {
   \   000009D8   ........           LDR      R0,??DataTable3_2
   \   000009DC   689086E5           STR      R9,[R6, #+104]
   \   000009E0   8870D0E5           LDRB     R7,[R0, #+136]
   \   000009E4   0B0057E3           CMP      R7,#+11
   \   000009E8   0C005713           CMPNE    R7,#+12
   \   000009EC   0E005713           CMPNE    R7,#+14
   \   000009F0   0D005713           CMPNE    R7,#+13
   \   000009F4   3D00001A           BNE      ??LapTimerTask_38
    419          								
    420          								if (lapdist < lastdist) {	// crossed sector boundary
   \   000009F8   0A00A0E1           MOV      R0,R10
   \   000009FC   ........           BL       __aeabi_i2f
   \   00000A00   0910A0E1           MOV      R1,R9
   \   00000A04   ........           BL       __aeabi_cfcmple
   \   00000A08   0070A0E1           MOV      R7,R0
   \   00000A0C   3700002A           BCS      ??LapTimerTask_38
    421          									float sectoradd;		// bit to add to last timing measurement to get to sector bounday
    422          									// interpolate and save the time
    423          									sectoradd = ((float) predictiveDistance - lastdist) /
    424          											(lapdist + (float) predictiveDistance - lastdist); // ratio between points
    425          									sectoradd = sectoradd * (float) (DataValues[LAP_TIME].iVal - lap.timernminus1); // time in ms to add to previous
   \   00000A10   38A096E5           LDR      R10,[R6, #+56]
   \   00000A14   08009DE5           LDR      R0,[SP, #+8]
   \   00000A18   ........           BL       __aeabi_i2f
   \   00000A1C   00B0A0E1           MOV      R11,R0
   \   00000A20   0910A0E1           MOV      R1,R9
   \   00000A24   ........           BL       __aeabi_fsub
   \   00000A28   00008DE5           STR      R0,[SP, #+0]
   \   00000A2C   0700A0E1           MOV      R0,R7
   \   00000A30   0B10A0E1           MOV      R1,R11
   \   00000A34   ........           BL       __aeabi_fadd
   \   00000A38   0910A0E1           MOV      R1,R9
   \   00000A3C   ........           BL       __aeabi_fsub
   \   00000A40   0010A0E1           MOV      R1,R0
   \   00000A44   00009DE5           LDR      R0,[SP, #+0]
   \   00000A48   ........           BL       __aeabi_fdiv
   \   00000A4C   0070A0E1           MOV      R7,R0
   \   00000A50   04009DE5           LDR      R0,[SP, #+4]
   \   00000A54   0A0040E0           SUB      R0,R0,R10
   \   00000A58   ........           BL       __aeabi_i2f
   \   00000A5C   0710A0E1           MOV      R1,R7
   \   00000A60   ........           BL       __aeabi_fmul
    426          																	
    427          									// if no best time then reference sectors all zero. otherwise check them
    428          									if (0 != lap.besttime) {
   \   00000A64   007096E5           LDR      R7,[R6, #+0]
   \   00000A68   000057E3           CMP      R7,#+0
   \   00000A6C   0500000A           BEQ      ??LapTimerTask_39
    429          										// are we out of comparison sectors?
    430          										if (0 == sector[refsectornum].reference && refsectornum > 0)
   \   00000A70   08169FE5           LDR      R1,??LapTimerTask_10
   \   00000A74   881191E7           LDR      R1,[R1, +R8, LSL #+3]
   \   00000A78   000051E3           CMP      R1,#+0
   \   00000A7C   0100001A           BNE      ??LapTimerTask_39
   \   00000A80   010058E3           CMP      R8,#+1
    431          											// if so, back up a sector
    432          											refsectornum--;
   \   00000A84   018048A2           SUBGE    R8,R8,#+1
    433          									} // if
    434          		
    435          									// store interpolated sector time as current for comparison
    436          									sector[cursectornum].current = lap.timernminus1 + (s32) sectoradd;
   \                     ??LapTimerTask_39:
   \   00000A88   ........           BL       __aeabi_f2iz
   \   00000A8C   5C9096E5           LDR      R9,[R6, #+92]
   \   00000A90   E8159FE5           LDR      R1,??LapTimerTask_10
   \   00000A94   0A0080E0           ADD      R0,R0,R10
   \   00000A98   891181E0           ADD      R1,R1,R9, LSL #+3
   \   00000A9C   040081E5           STR      R0,[R1, #+4]
    437          			
    438          									// only update graph until we run out of sectors
    439          									if (cursectornum < (NUMBER_OF_SECTORS-1)) {
   \   00000AA0   1310A0E3           MOV      R1,#+19
   \   00000AA4   501E81E3           ORR      R1,R1,#0x500
   \   00000AA8   010059E1           CMP      R9,R1
   \   00000AAC   0B0000AA           BGE      ??LapTimerTask_40
    440          										// if sector data loaded then compare progress and display graph						
    441          										if (0 != lap.besttime) {
   \   00000AB0   000057E3           CMP      R7,#+0
   \   00000AB4   0700000A           BEQ      ??LapTimerTask_41
    442          											// determine how much ahead / behind. + is ahead, - is behind
    443          											DataValues[PREDICTIVE_LAP].fVal = (float) (sector[cursectornum].current - sector[refsectornum].reference) / 1000.0;
   \   00000AB8   C0159FE5           LDR      R1,??LapTimerTask_10
   \   00000ABC   881191E7           LDR      R1,[R1, +R8, LSL #+3]
   \   00000AC0   010040E0           SUB      R0,R0,R1
   \   00000AC4   ........           BL       __aeabi_i2f
   \   00000AC8   4414A0E3           MOV      R1,#+1140850688
   \   00000ACC   7A1881E3           ORR      R1,R1,#0x7A0000
   \   00000AD0   ........           BL       __aeabi_fdiv
   \   00000AD4   F80084E5           STR      R0,[R4, #+248]
    444          										} // if
    445          										cursectornum++;
   \                     ??LapTimerTask_41:
   \   00000AD8   010089E2           ADD      R0,R9,#+1
   \   00000ADC   5C0086E5           STR      R0,[R6, #+92]
    446          									} // if
    447          									if (refsectornum < (NUMBER_OF_SECTORS-1))
   \                     ??LapTimerTask_40:
   \   00000AE0   1300A0E3           MOV      R0,#+19
   \   00000AE4   500E80E3           ORR      R0,R0,#0x500
   \   00000AE8   000058E1           CMP      R8,R0
    448          										refsectornum++;
   \   00000AEC   018088B2           ADDLT    R8,R8,#+1
    449          								} // if
    450          							} // if
    451          						} // if process predictive
    452          
    453          						// save the current timer for future interpolation
    454          						lap.timernminus1 = DataValues[LAP_TIME].iVal;
   \                     ??LapTimerTask_38:
   \   00000AF0   009194E5           LDR      R9,[R4, #+256]
    455          	
    456          						tempfloat = lap.currentpos.heading - seekhdg;
   \   00000AF4   180096E5           LDR      R0,[R6, #+24]
   \   00000AF8   588086E5           STR      R8,[R6, #+88]
   \   00000AFC   389086E5           STR      R9,[R6, #+56]
   \   00000B00   04008DE5           STR      R0,[SP, #+4]
   \   00000B04   601096E5           LDR      R1,[R6, #+96]
   \   00000B08   ........           BL       __aeabi_fsub
    457          						tempfloat = FLOATABS(tempfloat);
   \   00000B0C   0010A0E3           MOV      R1,#+0
   \   00000B10   ........           BL       __aeabi_cfrcmple
    458          	
    459          						// if we are waiting for user action, don't bother going any further
    460          						if (DU2_HILLCLIMB_WAITFINISH != unsavedSysData.systemMode && DU2_AUTOX_WAITFINISH != unsavedSysData.systemMode) {
   \   00000B14   ........           LDR      R1,??DataTable3_2
   \   00000B18   80042082           EORHI    R0,R0,#0x80000000
   \   00000B1C   8870D1E5           LDRB     R7,[R1, #+136]
   \   00000B20   120057E3           CMP      R7,#+18
   \   00000B24   11005713           CMPNE    R7,#+17
   \   00000B28   46FDFF0A           BEQ      ??LapTimerTask_2
    461          	
    462          							if (DU2_DRAG == unsavedSysData.systemMode) {
   \   00000B2C   0D0057E3           CMP      R7,#+13
   \   00000B30   AF01001A           BNE      ??LapTimerTask_42
    463          								int dragcomplete = false;
    464          								float extraDistance;			// in meters
    465          								float extraTime;				// in met/sec
    466          								float extraSpeed;				// in seconds
    467          								
    468          								// look for distances and record them
    469          								// all values interpolated using the speed, distance, and acceleration when the boundary was crossed
    470          								
    471          								if (0 == DataValues[SIXTY_FOOT].uVal && DataValues[LAP_DISTANCE].fVal > SIXTY_FEET_IN_METERS) {
   \   00000B34   500194E5           LDR      R0,[R4, #+336]
   \   00000B38   00508DE5           STR      R5,[SP, #+0]
   \   00000B3C   000050E3           CMP      R0,#+0
   \   00000B40   3100001A           BNE      ??LapTimerTask_43
   \   00000B44   E80094E5           LDR      R0,[R4, #+232]
   \   00000B48   ........           LDR      R1,??DataTable3_4  ;; 0x419251ec
   \   00000B4C   ........           BL       __aeabi_cfrcmple
   \   00000B50   2D00008A           BHI      ??LapTimerTask_43
    472          									extraDistance = (DataValues[LAP_DISTANCE].fVal - SIXTY_FEET_IN_METERS);
    473          									extraTime = extraDistance / speed;
   \   00000B54   ........           BL       __aeabi_f2d
   \   00000B58   EB2F8FE2           ADR      R2,??LapTimerTask_44
   \   00000B5C   0C0092E8           LDM      R2,{R2,R3}
   \   00000B60   ........           BL       __aeabi_dadd
   \   00000B64   ........           BL       __aeabi_d2f
   \   00000B68   ........           BL       __aeabi_f2d
   \   00000B6C   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   00000B70   ........           BL       __aeabi_ddiv
   \   00000B74   ........           BL       __aeabi_d2f
   \   00000B78   0070A0E1           MOV      R7,R0
    474          									extraSpeed = extraTime * -DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2;
   \   00000B7C   000094E5           LDR      R0,[R4, #+0]
   \   00000B80   0710A0E1           MOV      R1,R7
   \   00000B84   ........           BL       __aeabi_fmul
   \   00000B88   800420E2           EOR      R0,R0,#0x80000000
   \   00000B8C   ........           BL       __aeabi_f2d
   \   00000B90   F02F8FE2           ADR      R2,??LapTimerTask_45
   \   00000B94   0C0092E8           LDM      R2,{R2,R3}
   \   00000B98   ........           BL       __aeabi_dmul
   \   00000B9C   ........           BL       __aeabi_d2f
   \   00000BA0   0080A0E1           MOV      R8,R0
    475          									DataValues[SIXTY_FOOT].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000BA4   0700A0E1           MOV      R0,R7
   \   00000BA8   ........           BL       __aeabi_f2d
   \   00000BAC   0020A0E3           MOV      R2,#+0
   \   00000BB0   C8359FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000BB4   ........           BL       __aeabi_dmul
   \   00000BB8   ........           BL       __aeabi_d2iz
   \   00000BBC   000049E0           SUB      R0,R9,R0
   \   00000BC0   500184E5           STR      R0,[R4, #+336]
    476          									DataValues[SIXTY_TRAP].fVal = DataValues[SPEED].fVal - (extraSpeed * MET_PER_SEC_TO_KPH);		// record speed in kph
   \   00000BC4   700094E5           LDR      R0,[R4, #+112]
   \   00000BC8   ........           BL       __aeabi_f2d
   \   00000BCC   00A0A0E1           MOV      R10,R0
   \   00000BD0   01B0A0E1           MOV      R11,R1
   \   00000BD4   0800A0E1           MOV      R0,R8
   \   00000BD8   ........           BL       __aeabi_f2d
   \   00000BDC   0020A0E1           MOV      R2,R0
   \   00000BE0   0130A0E1           MOV      R3,R1
   \   00000BE4   DD0F8FE2           ADR      R0,??LapTimerTask_45+0x8
   \   00000BE8   030090E8           LDM      R0,{R0,R1}
   \   00000BEC   ........           BL       __aeabi_dmul
   \   00000BF0   0020A0E1           MOV      R2,R0
   \   00000BF4   0130A0E1           MOV      R3,R1
   \   00000BF8   0A00A0E1           MOV      R0,R10
   \   00000BFC   0B10A0E1           MOV      R1,R11
   \   00000C00   ........           BL       __aeabi_dsub
   \   00000C04   ........           BL       __aeabi_d2f
   \   00000C08   780184E5           STR      R0,[R4, #+376]
    477          								} // if
    478          			
    479          								if (0 == DataValues[ZERO_SIXTY].uVal && DataValues[SPEED].fVal > SIXTY_MPH_IN_KPH) {
   \                     ??LapTimerTask_43:
   \   00000C0C   400194E5           LDR      R0,[R4, #+320]
   \   00000C10   000050E3           CMP      R0,#+0
   \   00000C14   2100001A           BNE      ??LapTimerTask_46
   \   00000C18   700094E5           LDR      R0,[R4, #+112]
   \   00000C1C   ........           LDR      R1,??DataTable3_5  ;; 0x42c11eb9
   \   00000C20   ........           BL       __aeabi_cfrcmple
   \   00000C24   1D00008A           BHI      ??LapTimerTask_46
    480          									extraSpeed = DataValues[SPEED].fVal - SIXTY_MPH_IN_KPH;
    481          									extraTime = extraSpeed / (-DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2);
    482          									DataValues[ZERO_SIXTY].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000C28   007194E5           LDR      R7,[R4, #+256]
   \   00000C2C   ........           BL       __aeabi_f2d
   \   00000C30   E42F8FE2           ADR      R2,??LapTimerTask_47
   \   00000C34   0C0092E8           LDM      R2,{R2,R3}
   \   00000C38   ........           BL       __aeabi_dadd
   \   00000C3C   ........           BL       __aeabi_d2f
   \   00000C40   ........           BL       __aeabi_f2d
   \   00000C44   0080A0E1           MOV      R8,R0
   \   00000C48   000094E5           LDR      R0,[R4, #+0]
   \   00000C4C   0190A0E1           MOV      R9,R1
   \   00000C50   800420E2           EOR      R0,R0,#0x80000000
   \   00000C54   ........           BL       __aeabi_f2d
   \   00000C58   0020A0E1           MOV      R2,R0
   \   00000C5C   0130A0E1           MOV      R3,R1
   \   00000C60   BC0F8FE2           ADR      R0,??LapTimerTask_45
   \   00000C64   030090E8           LDM      R0,{R0,R1}
   \   00000C68   ........           BL       __aeabi_dmul
   \   00000C6C   0020A0E1           MOV      R2,R0
   \   00000C70   0130A0E1           MOV      R3,R1
   \   00000C74   0800A0E1           MOV      R0,R8
   \   00000C78   0910A0E1           MOV      R1,R9
   \   00000C7C   ........           BL       __aeabi_ddiv
   \   00000C80   ........           BL       __aeabi_d2f
   \   00000C84   ........           BL       __aeabi_f2d
   \   00000C88   0020A0E3           MOV      R2,#+0
   \   00000C8C   EC349FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000C90   ........           BL       __aeabi_dmul
   \   00000C94   ........           BL       __aeabi_d2iz
   \   00000C98   000047E0           SUB      R0,R7,R0
   \   00000C9C   400184E5           STR      R0,[R4, #+320]
    483          								} // if
    484          									
    485          								if (0 == DataValues[ZERO_HUNDRED].uVal && DataValues[SPEED].fVal > HUNDRED_MPH_IN_KPH) {
   \                     ??LapTimerTask_46:
   \   00000CA0   480194E5           LDR      R0,[R4, #+328]
   \   00000CA4   000050E3           CMP      R0,#+0
   \   00000CA8   2100001A           BNE      ??LapTimerTask_48
   \   00000CAC   700094E5           LDR      R0,[R4, #+112]
   \   00000CB0   ........           LDR      R1,??DataTable3_6  ;; 0x4320ee15
   \   00000CB4   ........           BL       __aeabi_cfrcmple
   \   00000CB8   1D00008A           BHI      ??LapTimerTask_48
    486          									extraSpeed = DataValues[SPEED].fVal - HUNDRED_MPH_IN_KPH;
    487          									extraTime = extraSpeed / (-DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2);
    488          									DataValues[ZERO_HUNDRED].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000CBC   007194E5           LDR      R7,[R4, #+256]
   \   00000CC0   ........           BL       __aeabi_f2d
   \   00000CC4   EE2F8FE2           ADR      R2,??LapTimerTask_10+0x4
   \   00000CC8   0C0092E8           LDM      R2,{R2,R3}
   \   00000CCC   ........           BL       __aeabi_dadd
   \   00000CD0   ........           BL       __aeabi_d2f
   \   00000CD4   ........           BL       __aeabi_f2d
   \   00000CD8   0080A0E1           MOV      R8,R0
   \   00000CDC   000094E5           LDR      R0,[R4, #+0]
   \   00000CE0   0190A0E1           MOV      R9,R1
   \   00000CE4   800420E2           EOR      R0,R0,#0x80000000
   \   00000CE8   ........           BL       __aeabi_f2d
   \   00000CEC   0020A0E1           MOV      R2,R0
   \   00000CF0   0130A0E1           MOV      R3,R1
   \   00000CF4   970F8FE2           ADR      R0,??LapTimerTask_45
   \   00000CF8   030090E8           LDM      R0,{R0,R1}
   \   00000CFC   ........           BL       __aeabi_dmul
   \   00000D00   0020A0E1           MOV      R2,R0
   \   00000D04   0130A0E1           MOV      R3,R1
   \   00000D08   0800A0E1           MOV      R0,R8
   \   00000D0C   0910A0E1           MOV      R1,R9
   \   00000D10   ........           BL       __aeabi_ddiv
   \   00000D14   ........           BL       __aeabi_d2f
   \   00000D18   ........           BL       __aeabi_f2d
   \   00000D1C   0020A0E3           MOV      R2,#+0
   \   00000D20   58349FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000D24   ........           BL       __aeabi_dmul
   \   00000D28   ........           BL       __aeabi_d2iz
   \   00000D2C   000047E0           SUB      R0,R7,R0
   \   00000D30   480184E5           STR      R0,[R4, #+328]
    489          								} // if
    490          			
    491          								if (0 == DataValues[THREE_THIRTY_FOOT].uVal && DataValues[LAP_DISTANCE].fVal > THREETHIRTY_FEET_IN_METERS) {
   \                     ??LapTimerTask_48:
   \   00000D34   580194E5           LDR      R0,[R4, #+344]
   \   00000D38   000050E3           CMP      R0,#+0
   \   00000D3C   3400001A           BNE      ??LapTimerTask_49
   \   00000D40   E80094E5           LDR      R0,[R4, #+232]
   \   00000D44   ........           LDR      R1,??DataTable3_7  ;; 0x42c928f6
   \   00000D48   ........           BL       __aeabi_cfrcmple
   \   00000D4C   3000008A           BHI      ??LapTimerTask_49
    492          									extraDistance = (DataValues[LAP_DISTANCE].fVal - THREETHIRTY_FEET_IN_METERS);
    493          									extraTime = extraDistance / speed;
   \   00000D50   ........           BL       __aeabi_f2d
   \   00000D54   0020A0E1           MOV      R2,R0
   \   00000D58   0130A0E1           MOV      R3,R1
   \   00000D5C   CA0F8FE2           ADR      R0,??LapTimerTask_10+0xC
   \   00000D60   030090E8           LDM      R0,{R0,R1}
   \   00000D64   ........           BL       __aeabi_dadd
   \   00000D68   ........           BL       __aeabi_d2f
   \   00000D6C   ........           BL       __aeabi_f2d
   \   00000D70   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   00000D74   ........           BL       __aeabi_ddiv
   \   00000D78   ........           BL       __aeabi_d2f
   \   00000D7C   0070A0E1           MOV      R7,R0
    494          									extraSpeed = extraTime * -DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2;
   \   00000D80   000094E5           LDR      R0,[R4, #+0]
   \   00000D84   0710A0E1           MOV      R1,R7
   \   00000D88   ........           BL       __aeabi_fmul
   \   00000D8C   800420E2           EOR      R0,R0,#0x80000000
   \   00000D90   ........           BL       __aeabi_f2d
   \   00000D94   6F2F8FE2           ADR      R2,??LapTimerTask_45
   \   00000D98   0C0092E8           LDM      R2,{R2,R3}
   \   00000D9C   ........           BL       __aeabi_dmul
   \   00000DA0   ........           BL       __aeabi_d2f
   \   00000DA4   0080A0E1           MOV      R8,R0
    495          									DataValues[THREE_THIRTY_FOOT].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000DA8   009194E5           LDR      R9,[R4, #+256]
   \   00000DAC   0700A0E1           MOV      R0,R7
   \   00000DB0   ........           BL       __aeabi_f2d
   \   00000DB4   0020A0E3           MOV      R2,#+0
   \   00000DB8   C0339FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000DBC   ........           BL       __aeabi_dmul
   \   00000DC0   ........           BL       __aeabi_d2iz
   \   00000DC4   000049E0           SUB      R0,R9,R0
   \   00000DC8   580184E5           STR      R0,[R4, #+344]
    496          									DataValues[THREE_THIRTY_TRAP].fVal = DataValues[SPEED].fVal - (extraSpeed * MET_PER_SEC_TO_KPH);		// record speed in kph
   \   00000DCC   700094E5           LDR      R0,[R4, #+112]
   \   00000DD0   ........           BL       __aeabi_f2d
   \   00000DD4   00A0A0E1           MOV      R10,R0
   \   00000DD8   01B0A0E1           MOV      R11,R1
   \   00000DDC   0800A0E1           MOV      R0,R8
   \   00000DE0   ........           BL       __aeabi_f2d
   \   00000DE4   0020A0E1           MOV      R2,R0
   \   00000DE8   0130A0E1           MOV      R3,R1
   \   00000DEC   5B0F8FE2           ADR      R0,??LapTimerTask_45+0x8
   \   00000DF0   030090E8           LDM      R0,{R0,R1}
   \   00000DF4   ........           BL       __aeabi_dmul
   \   00000DF8   0020A0E1           MOV      R2,R0
   \   00000DFC   0130A0E1           MOV      R3,R1
   \   00000E00   0A00A0E1           MOV      R0,R10
   \   00000E04   0B10A0E1           MOV      R1,R11
   \   00000E08   ........           BL       __aeabi_dsub
   \   00000E0C   ........           BL       __aeabi_d2f
   \   00000E10   800184E5           STR      R0,[R4, #+384]
    497          								} // if
    498          			
    499          								if (0 == DataValues[EIGHTH_MILE].uVal && DataValues[LAP_DISTANCE].fVal > (EIGHTH_MILE_IN_METERS + DRAG_LAUNCH_DIST_CORRECTION)) {
   \                     ??LapTimerTask_49:
   \   00000E14   680194E5           LDR      R0,[R4, #+360]
   \   00000E18   000050E3           CMP      R0,#+0
   \   00000E1C   4100001A           BNE      ??LapTimerTask_50
   \   00000E20   E80094E5           LDR      R0,[R4, #+232]
   \   00000E24   ........           LDR      R1,??DataTable3_8  ;; 0x434f2b86
   \   00000E28   ........           BL       __aeabi_cfrcmple
   \   00000E2C   3D00008A           BHI      ??LapTimerTask_50
    500          									extraDistance = (DataValues[LAP_DISTANCE].fVal - EIGHTH_MILE_IN_METERS);
    501          									extraTime = extraDistance / speed;
   \   00000E30   ........           BL       __aeabi_f2d
   \   00000E34   0020A0E1           MOV      R2,R0
   \   00000E38   0130A0E1           MOV      R3,R1
   \   00000E3C   CB0F8FE2           ADR      R0,??LapTimerTask_20+0x4
   \   00000E40   030090E8           LDM      R0,{R0,R1}
   \   00000E44   ........           BL       __aeabi_dadd
   \   00000E48   ........           BL       __aeabi_d2f
   \   00000E4C   ........           BL       __aeabi_f2d
   \   00000E50   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   00000E54   ........           BL       __aeabi_ddiv
   \   00000E58   ........           BL       __aeabi_d2f
   \   00000E5C   0070A0E1           MOV      R7,R0
    502          									extraSpeed = extraTime * -DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2;
   \   00000E60   000094E5           LDR      R0,[R4, #+0]
   \   00000E64   0710A0E1           MOV      R1,R7
   \   00000E68   ........           BL       __aeabi_fmul
   \   00000E6C   800420E2           EOR      R0,R0,#0x80000000
   \   00000E70   ........           BL       __aeabi_f2d
   \   00000E74   DC208FE2           ADR      R2,??LapTimerTask_45
   \   00000E78   0C0092E8           LDM      R2,{R2,R3}
   \   00000E7C   ........           BL       __aeabi_dmul
   \   00000E80   ........           BL       __aeabi_d2f
   \   00000E84   0080A0E1           MOV      R8,R0
    503          									DataValues[EIGHTH_MILE].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000E88   009194E5           LDR      R9,[R4, #+256]
   \   00000E8C   0700A0E1           MOV      R0,R7
   \   00000E90   ........           BL       __aeabi_f2d
   \   00000E94   0020A0E3           MOV      R2,#+0
   \   00000E98   E0329FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000E9C   ........           BL       __aeabi_dmul
   \   00000EA0   ........           BL       __aeabi_d2iz
   \   00000EA4   000049E0           SUB      R0,R9,R0
   \   00000EA8   680184E5           STR      R0,[R4, #+360]
    504          									DataValues[EIGHTH_TRAP].fVal = DataValues[SPEED].fVal - (extraSpeed * MET_PER_SEC_TO_KPH);		// record speed in kph
   \   00000EAC   700094E5           LDR      R0,[R4, #+112]
   \   00000EB0   ........           BL       __aeabi_f2d
   \   00000EB4   00A0A0E1           MOV      R10,R0
   \   00000EB8   01B0A0E1           MOV      R11,R1
   \   00000EBC   0800A0E1           MOV      R0,R8
   \   00000EC0   ........           BL       __aeabi_f2d
   \   00000EC4   0020A0E1           MOV      R2,R0
   \   00000EC8   0130A0E1           MOV      R3,R1
   \   00000ECC   8C008FE2           ADR      R0,??LapTimerTask_45+0x8
   \   00000ED0   030090E8           LDM      R0,{R0,R1}
   \   00000ED4   ........           BL       __aeabi_dmul
   \   00000ED8   0020A0E1           MOV      R2,R0
   \   00000EDC   0130A0E1           MOV      R3,R1
   \   00000EE0   0A00A0E1           MOV      R0,R10
   \   00000EE4   0B10A0E1           MOV      R1,R11
   \   00000EE8   ........           BL       __aeabi_dsub
   \   00000EEC   ........           BL       __aeabi_d2f
   \   00000EF0   900184E5           STR      R0,[R4, #+400]
    505          			
    506          									// 1/8 mile run so stop here
    507          									if (DD_1_8 == sysData.dragDistance) {
   \   00000EF4   ........           LDR      R0,??DataTable3_1
   \   00000EF8   D600D0E5           LDRB     R0,[R0, #+214]
   \   00000EFC   020050E3           CMP      R0,#+2
   \   00000F00   0800001A           BNE      ??LapTimerTask_50
    508          										dragcomplete = true;
    509          										DataValues[LAP_DISTANCE].fVal = EIGHTH_MILE_IN_METERS;		// fix up lap length
   \   00000F04   ........           LDR      R0,??DataTable3_9  ;; 0x43492b85
   \   00000F08   010000EA           B        ??LapTimerTask_51
   \                     ??LapTimerTask_44:
   \   00000F0C   0AD7A3703D4A       DC32     0x70A3D70A,0xC0324A3D
   \              32C0        
   \                     ??LapTimerTask_51:
   \   00000F14   0110A0E3           MOV      R1,#+1
   \   00000F18   E80084E5           STR      R0,[R4, #+232]
    510          										DataValues[LAP_TIME].uVal = DataValues[EIGHTH_MILE].uVal;	// fix up the time
   \   00000F1C   680194E5           LDR      R0,[R4, #+360]
   \   00000F20   00108DE5           STR      R1,[SP, #+0]
   \   00000F24   000184E5           STR      R0,[R4, #+256]
    511          									} // if
    512          								} // if
    513          	
    514          								if (0 == DataValues[THOUSAND_FOOT].uVal && DataValues[LAP_DISTANCE].fVal > (THOUSAND_FEET_IN_METERS + DRAG_LAUNCH_DIST_CORRECTION)) {
   \                     ??LapTimerTask_50:
   \   00000F28   600194E5           LDR      R0,[R4, #+352]
   \   00000F2C   000050E3           CMP      R0,#+0
   \   00000F30   4600001A           BNE      ??LapTimerTask_52
   \   00000F34   E80094E5           LDR      R0,[R4, #+232]
   \   00000F38   ........           LDR      R1,??DataTable3_10  ;; 0x439b6667
   \   00000F3C   ........           BL       __aeabi_cfrcmple
   \   00000F40   4200008A           BHI      ??LapTimerTask_52
    515          									extraDistance = (DataValues[LAP_DISTANCE].fVal - THOUSAND_FEET_IN_METERS);
    516          									extraTime = extraDistance / speed;
   \   00000F44   ........           BL       __aeabi_f2d
   \   00000F48   0020A0E1           MOV      R2,R0
   \   00000F4C   0130A0E1           MOV      R3,R1
   \   00000F50   880F8FE2           ADR      R0,??LapTimerTask_20+0xC
   \   00000F54   030000EA           B        ??LapTimerTask_53
   \                     ??LapTimerTask_45:
   \   00000F58   05A3923A019D       DC32     0x3A92A305,0x40239D01
   \              2340        
   \   00000F60   CDCCCCCCCCCC       DC32     0xCCCCCCCD,0x400CCCCC
   \              0C40        
   \                     ??LapTimerTask_53:
   \   00000F68   030090E8           LDM      R0,{R0,R1}
   \   00000F6C   ........           BL       __aeabi_dadd
   \   00000F70   ........           BL       __aeabi_d2f
   \   00000F74   ........           BL       __aeabi_f2d
   \   00000F78   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   00000F7C   ........           BL       __aeabi_ddiv
   \   00000F80   ........           BL       __aeabi_d2f
   \   00000F84   0070A0E1           MOV      R7,R0
    517          									extraSpeed = extraTime * -DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2;
   \   00000F88   000094E5           LDR      R0,[R4, #+0]
   \   00000F8C   0710A0E1           MOV      R1,R7
   \   00000F90   ........           BL       __aeabi_fmul
   \   00000F94   800420E2           EOR      R0,R0,#0x80000000
   \   00000F98   ........           BL       __aeabi_f2d
   \   00000F9C   782F8FE2           ADR      R2,??LapTimerTask_20+0x18
   \   00000FA0   0C0092E8           LDM      R2,{R2,R3}
   \   00000FA4   ........           BL       __aeabi_dmul
   \   00000FA8   ........           BL       __aeabi_d2f
   \   00000FAC   0080A0E1           MOV      R8,R0
    518          									DataValues[THOUSAND_FOOT].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   00000FB0   009194E5           LDR      R9,[R4, #+256]
   \   00000FB4   0700A0E1           MOV      R0,R7
   \   00000FB8   ........           BL       __aeabi_f2d
   \   00000FBC   0020A0E3           MOV      R2,#+0
   \   00000FC0   B8319FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   00000FC4   010000EA           B        ??LapTimerTask_54
   \                     ??LapTimerTask_47:
   \   00000FC8   A4703D0AD723       DC32     0xA3D70A4,0xC05823D7
   \              58C0        
   \                     ??LapTimerTask_54:
   \   00000FD0   ........           BL       __aeabi_dmul
   \   00000FD4   ........           BL       __aeabi_d2iz
   \   00000FD8   000049E0           SUB      R0,R9,R0
   \   00000FDC   600184E5           STR      R0,[R4, #+352]
    519          									DataValues[THOUSAND_TRAP].fVal = DataValues[SPEED].fVal - (extraSpeed * MET_PER_SEC_TO_KPH);		// record speed in kph
   \   00000FE0   700094E5           LDR      R0,[R4, #+112]
   \   00000FE4   ........           BL       __aeabi_f2d
   \   00000FE8   00A0A0E1           MOV      R10,R0
   \   00000FEC   01B0A0E1           MOV      R11,R1
   \   00000FF0   0800A0E1           MOV      R0,R8
   \   00000FF4   ........           BL       __aeabi_f2d
   \   00000FF8   0020A0E1           MOV      R2,R0
   \   00000FFC   0130A0E1           MOV      R3,R1
   \   00001000   610F8FE2           ADR      R0,??LapTimerTask_20+0x20
   \   00001004   030090E8           LDM      R0,{R0,R1}
   \   00001008   ........           BL       __aeabi_dmul
   \   0000100C   0020A0E1           MOV      R2,R0
   \   00001010   0130A0E1           MOV      R3,R1
   \   00001014   0A00A0E1           MOV      R0,R10
   \   00001018   0B10A0E1           MOV      R1,R11
   \   0000101C   ........           BL       __aeabi_dsub
   \   00001020   ........           BL       __aeabi_d2f
   \   00001024   880184E5           STR      R0,[R4, #+392]
    520          			
    521          									// 1000' run so stop here
    522          									if (DD_1000 == sysData.dragDistance) {
   \   00001028   ........           LDR      R0,??DataTable3_1
   \   0000102C   D600D0E5           LDRB     R0,[R0, #+214]
   \   00001030   010050E3           CMP      R0,#+1
   \   00001034   0500001A           BNE      ??LapTimerTask_52
    523          										dragcomplete = true;
    524          										DataValues[LAP_DISTANCE].fVal = THOUSAND_FEET_IN_METERS;		// fix up lap length
   \   00001038   ........           LDR      R0,??DataTable3_11  ;; 0x43986666
   \   0000103C   0110A0E3           MOV      R1,#+1
   \   00001040   E80084E5           STR      R0,[R4, #+232]
    525          										DataValues[LAP_TIME].uVal = DataValues[THOUSAND_FOOT].uVal;		// fix up the time
   \   00001044   600194E5           LDR      R0,[R4, #+352]
   \   00001048   00108DE5           STR      R1,[SP, #+0]
   \   0000104C   000184E5           STR      R0,[R4, #+256]
    526          									} // if
    527          								} // if
    528          								
    529          								if (0 == DataValues[QUARTER_MILE].uVal && DataValues[LAP_DISTANCE].fVal > (QUARTER_MILE_IN_METERS + DRAG_LAUNCH_DIST_CORRECTION)) {
   \                     ??LapTimerTask_52:
   \   00001050   700194E5           LDR      R0,[R4, #+368]
   \   00001054   000050E3           CMP      R0,#+0
   \   00001058   4D00001A           BNE      ??LapTimerTask_55
   \   0000105C   E80094E5           LDR      R0,[R4, #+232]
   \   00001060   ........           LDR      R1,??DataTable3_12  ;; 0x43cc2b86
   \   00001064   ........           BL       __aeabi_cfrcmple
   \   00001068   4900008A           BHI      ??LapTimerTask_55
    530          									extraDistance = (DataValues[LAP_DISTANCE].fVal - QUARTER_MILE_IN_METERS);
    531          									extraTime = extraDistance / speed;
   \   0000106C   ........           BL       __aeabi_f2d
   \   00001070   0020A0E1           MOV      R2,R0
   \   00001074   0130A0E1           MOV      R3,R1
   \   00001078   E00F8FE2           ADR      R0,??LapTimerTask_56
   \   0000107C   040000EA           B        ??LapTimerTask_57
   \                     ??LapTimerTask_10:
   \   00001080   ........           DC32     sector
   \   00001084   F6285C8FC21D       DC32     0x8F5C28F6,0xC0641DC2
   \              64C0        
   \   0000108C   85EB51B81E25       DC32     0xB851EB85,0xC059251E
   \              59C0        
   \                     ??LapTimerTask_57:
   \   00001094   030090E8           LDM      R0,{R0,R1}
   \   00001098   ........           BL       __aeabi_dadd
   \   0000109C   ........           BL       __aeabi_d2f
   \   000010A0   ........           BL       __aeabi_f2d
   \   000010A4   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   000010A8   ........           BL       __aeabi_ddiv
   \   000010AC   ........           BL       __aeabi_d2f
   \   000010B0   0070A0E1           MOV      R7,R0
    532          									extraSpeed = extraTime * -DataValues[X_G].fVal * ONE_G_IN_MET_PER_SEC2;
   \   000010B4   000094E5           LDR      R0,[R4, #+0]
   \   000010B8   0710A0E1           MOV      R1,R7
   \   000010BC   ........           BL       __aeabi_fmul
   \   000010C0   800420E2           EOR      R0,R0,#0x80000000
   \   000010C4   ........           BL       __aeabi_f2d
   \   000010C8   B4208FE2           ADR      R2,??LapTimerTask_20+0x18
   \   000010CC   0C0092E8           LDM      R2,{R2,R3}
   \   000010D0   ........           BL       __aeabi_dmul
   \   000010D4   ........           BL       __aeabi_d2f
   \   000010D8   0080A0E1           MOV      R8,R0
    533          									DataValues[QUARTER_MILE].iVal = DataValues[LAP_TIME].iVal - (int) (extraTime * 1000.0) + DRAG_LAUNCH_TIME_CORRECTION;
   \   000010DC   009194E5           LDR      R9,[R4, #+256]
   \   000010E0   0700A0E1           MOV      R0,R7
   \   000010E4   ........           BL       __aeabi_f2d
   \   000010E8   0020A0E3           MOV      R2,#+0
   \   000010EC   8C309FE5           LDR      R3,??LapTimerTask_20+0x14  ;; 0x408f4000
   \   000010F0   ........           BL       __aeabi_dmul
   \   000010F4   ........           BL       __aeabi_d2iz
   \   000010F8   000049E0           SUB      R0,R9,R0
   \   000010FC   700184E5           STR      R0,[R4, #+368]
    534          									DataValues[QUARTER_TRAP].fVal = DataValues[SPEED].fVal - (extraSpeed * MET_PER_SEC_TO_KPH);		// record speed in kph
   \   00001100   700094E5           LDR      R0,[R4, #+112]
   \   00001104   ........           BL       __aeabi_f2d
   \   00001108   00A0A0E1           MOV      R10,R0
   \   0000110C   01B0A0E1           MOV      R11,R1
   \   00001110   0800A0E1           MOV      R0,R8
   \   00001114   ........           BL       __aeabi_f2d
   \   00001118   0020A0E1           MOV      R2,R0
   \   0000111C   0130A0E1           MOV      R3,R1
   \   00001120   64008FE2           ADR      R0,??LapTimerTask_20+0x20
   \   00001124   030090E8           LDM      R0,{R0,R1}
   \   00001128   ........           BL       __aeabi_dmul
   \   0000112C   0020A0E1           MOV      R2,R0
   \   00001130   0130A0E1           MOV      R3,R1
   \   00001134   0A00A0E1           MOV      R0,R10
   \   00001138   0B10A0E1           MOV      R1,R11
   \   0000113C   ........           BL       __aeabi_dsub
   \   00001140   ........           BL       __aeabi_d2f
   \   00001144   980184E5           STR      R0,[R4, #+408]
    535          									
    536          									// 1/4 mile run so stop here
    537          									if (DD_1_4 == sysData.dragDistance) {
   \   00001148   ........           LDR      R0,??DataTable3_1
   \   0000114C   D600D0E5           LDRB     R0,[R0, #+214]
   \   00001150   000050E3           CMP      R0,#+0
   \   00001154   0E00001A           BNE      ??LapTimerTask_55
    538          										dragcomplete = true;
    539          										DataValues[LAP_DISTANCE].fVal = QUARTER_MILE_IN_METERS;		// fix up lap length
   \   00001158   ........           LDR      R0,??DataTable3_13  ;; 0x43c92b85
   \   0000115C   E80084E5           STR      R0,[R4, #+232]
    540          										DataValues[LAP_TIME].uVal = DataValues[QUARTER_MILE].uVal;	// fix up the time
   \   00001160   700194E5           LDR      R0,[R4, #+368]
   \   00001164   000184E5           STR      R0,[R4, #+256]
   \   00001168   0C0000EA           B        ??LapTimerTask_58
   \                     ??LapTimerTask_20:
   \   0000116C   ........           DC32     SEMA_GlobalData
   \   00001170   3D0AD7A37025       DC32     0xA3D70A3D,0xC0692570
   \              69C0        
   \   00001178   CDCCCCCCCC0C       DC32     0xCCCCCCCD,0xC0730CCC
   \              73C0        
   \   00001180   00408F40           DC32     0x408f4000
   \   00001184   05A3923A019D       DC32     0x3A92A305,0x40239D01
   \              2340        
   \   0000118C   CDCCCCCCCCCC       DC32     0xCCCCCCCD,0x400CCCCC
   \              0C40        
    541          									} // if
    542          								} // if
    543          	
    544          								if (dragcomplete) {
   \                     ??LapTimerTask_55:
   \   00001194   00009DE5           LDR      R0,[SP, #+0]
   \   00001198   000050E3           CMP      R0,#+0
   \   0000119C   A9FBFF0A           BEQ      ??LapTimerTask_2
    545          									// save the finish information
    546          									unsavedSysData.workingFinishLineLat = trackData.finishLineLat = lap.currentpos.lat;
   \                     ??LapTimerTask_58:
   \   000011A0   ........           LDR      R2,??DataTable3_3
   \   000011A4   D800C6E1           LDRD     R0,R1,[R6, #+8]
   \   000011A8   F802C2E1           STRD     R0,R1,[R2, #+40]
   \   000011AC   ........           LDR      R2,??DataTable3_2
   \   000011B0   F80AC2E1           STRD     R0,R1,[R2, #+168]
    547          									unsavedSysData.workingFinishLineLong = trackData.finishLineLong = lap.currentpos.lon;
   \   000011B4   ........           LDR      R2,??DataTable3_3
   \   000011B8   D001C6E1           LDRD     R0,R1,[R6, #+16]
   \   000011BC   F003C2E1           STRD     R0,R1,[R2, #+48]
   \   000011C0   ........           LDR      R2,??DataTable3_2
   \   000011C4   F00BC2E1           STRD     R0,R1,[R2, #+176]
    548          									unsavedSysData.workingFinishLineHeading = trackData.finishLineHeading = lap.currentpos.heading;
   \   000011C8   ........           LDR      R0,??DataTable3_3
   \   000011CC   04109DE5           LDR      R1,[SP, #+4]
   \   000011D0   3C1080E5           STR      R1,[R0, #+60]
   \   000011D4   04109DE5           LDR      R1,[SP, #+4]
    549          									writeTracks = TRUE;
   \   000011D8   0100A0E3           MOV      R0,#+1
   \   000011DC   6E00C6E5           STRB     R0,[R6, #+110]
   \   000011E0   BC1082E5           STR      R1,[R2, #+188]
    550          									
    551          									ProcessFinishLine( 0 );
   \   000011E4   0000A0E3           MOV      R0,#+0
   \   000011E8   ........           BL       ProcessFinishLine
    552          									SetUserMode(DU2_DRAG_COMPLETE);
   \   000011EC   1500A0E3           MOV      R0,#+21
   \   000011F0   44FCFFEA           B        ??LapTimerTask_18
    553          								} // if
    554          	
    555          							} // if dragfinish
    556          
    557          							// if current heading matches the start/finish heading then check for position
    558          							// while allowing for headings near 0 (due east)
    559          							else if (tempfloat < headrange || tempfloat > (360.0 - headrange)) {
   \                     ??LapTimerTask_42:
   \   000011F4   4014A0E3           MOV      R1,#+1073741824
   \   000011F8   7C1781E3           ORR      R1,R1,#0x1F00000
   \   000011FC   ........           BL       __aeabi_cfcmple
   \   00001200   0200003A           BCC      ??LapTimerTask_59
   \   00001204   ........           LDR      R1,??DataTable3_14  ;; 0x43a50001
   \   00001208   ........           BL       __aeabi_cfrcmple
   \   0000120C   8DFBFF8A           BHI      ??LapTimerTask_2
    560          		
    561          								// find difference in meters of lat, lon
    562          								fdeltalat = (lap.currentpos.lat - seeklat) * LATMET;
   \                     ??LapTimerTask_59:
   \   00001210   D084C6E1           LDRD     R8,R9,[R6, #+64]
   \   00001214   D800C6E1           LDRD     R0,R1,[R6, #+8]
   \   00001218   0820A0E1           MOV      R2,R8
   \   0000121C   0930A0E1           MOV      R3,R9
   \   00001220   ........           BL       __aeabi_dsub
   \   00001224   0020A0E1           MOV      R2,R0
   \   00001228   0130A0E1           MOV      R3,R1
   \   0000122C   0000A0E3           MOV      R0,#+0
   \   00001230   ........           LDR      R1,??DataTable3  ;; 0x40fb6f70
   \   00001234   ........           BL       __aeabi_dmul
   \   00001238   03008DE8           STM      SP,{R0,R1}
   \   0000123C   F001CDE1           STRD     R0,R1,[SP, #+16]
    563          								fdeltalon = (lap.currentpos.lon - seeklon) * LONMET(seeklat);
   \   00001240   D001C6E1           LDRD     R0,R1,[R6, #+16]
   \   00001244   D824C6E1           LDRD     R2,R3,[R6, #+72]
   \   00001248   ........           BL       __aeabi_dsub
   \   0000124C   03008DE8           STM      SP,{R0,R1}
   \   00001250   ........           ADR      R2,??DataTable2
   \   00001254   0C0092E8           LDM      R2,{R2,R3}
   \   00001258   0800A0E1           MOV      R0,R8
   \   0000125C   0910A0E1           MOV      R1,R9
   \   00001260   ........           BL       __aeabi_ddiv
   \   00001264   0120A0E3           MOV      R2,#+1
   \   00001268   ........           BL       __iar_Sin
   \   0000126C   0020A0E3           MOV      R2,#+0
   \   00001270   ........           LDR      R3,??DataTable3  ;; 0x40fb6f70
   \   00001274   ........           BL       __aeabi_dmul
   \   00001278   00209DE5           LDR      R2,[SP, #+0]
   \   0000127C   04309DE5           LDR      R3,[SP, #+4]
   \   00001280   ........           BL       __aeabi_dmul
   \   00001284   0080A0E1           MOV      R8,R0
   \   00001288   0190A0E1           MOV      R9,R1
    564          			
    565          								if (FLOATABS(fdeltalat) < distrange && FLOATABS(fdeltalon) < distrange) {
   \   0000128C   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   00001290   0020A0E3           MOV      R2,#+0
   \   00001294   0030A0E3           MOV      R3,#+0
   \   00001298   ........           BL       __aeabi_cdrcmple
   \   0000129C   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   000012A0   00A0A0E1           MOV      R10,R0
   \   000012A4   01B0A091           MOVLS    R11,R1
   \   000012A8   80B42182           EORHI    R11,R1,#0x80000000
   \   000012AC   0C009DE5           LDR      R0,[SP, #+12]
   \   000012B0   ........           BL       __aeabi_i2d
   \   000012B4   03008DE8           STM      SP,{R0,R1}
   \   000012B8   F000CDE1           STRD     R0,R1,[SP, #+0]
   \   000012BC   0A00A0E1           MOV      R0,R10
   \   000012C0   0B10A0E1           MOV      R1,R11
   \   000012C4   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   000012C8   ........           BL       __aeabi_cdcmple
   \   000012CC   7E00002A           BCS      ??LapTimerTask_60
   \   000012D0   0800A0E1           MOV      R0,R8
   \   000012D4   0910A0E1           MOV      R1,R9
   \   000012D8   0020A0E3           MOV      R2,#+0
   \   000012DC   0030A0E3           MOV      R3,#+0
   \   000012E0   ........           BL       __aeabi_cdrcmple
   \   000012E4   80142982           EORHI    R1,R9,#0x80000000
   \   000012E8   D020CDE1           LDRD     R2,R3,[SP, #+0]
   \   000012EC   ........           BL       __aeabi_cdcmple
   \   000012F0   7500002A           BCS      ??LapTimerTask_60
    566          									if (DU2_AUTOX != unsavedSysData.systemMode || DataValues[LAP_DISTANCE].fVal > (AUTOX_DISTRANGE*8.0)) {
   \   000012F4   0C0057E3           CMP      R7,#+12
   \   000012F8   0400001A           BNE      ??LapTimerTask_61
   \   000012FC   5013A0E3           MOV      R1,#+1073741825
   \   00001300   E80094E5           LDR      R0,[R4, #+232]
   \   00001304   A81781E3           ORR      R1,R1,#0x2A00000
   \   00001308   ........           BL       __aeabi_cfrcmple
   \   0000130C   4DFBFF8A           BHI      ??LapTimerTask_2
    567          										// found either the Start or the Finish
    568          										if (!inrange) {
   \                     ??LapTimerTask_61:
   \   00001310   6D00D6E5           LDRB     R0,[R6, #+109]
   \   00001314   000050E3           CMP      R0,#+0
   \   00001318   4AFBFF1A           BNE      ??LapTimerTask_2
    569          											float distance;
    570          											s32 offset;
    571          											BOOL dofirststart = FALSE;
    572          											BOOL dostart = FALSE;
   \   0000131C   0100A0E3           MOV      R0,#+1
   \   00001320   6D00C6E5           STRB     R0,[R6, #+109]
    573          											BOOL dofinish = FALSE;
    574          				
    575          											// now we are in range
    576          											inrange = TRUE;
    577          				
    578          											// find the actual distance to start/finish in meters
    579          											distance = sqrt(fdeltalat * fdeltalat + fdeltalon * fdeltalon);
   \   00001324   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   00001328   0020A0E1           MOV      R2,R0
   \   0000132C   0130A0E1           MOV      R3,R1
   \   00001330   00B0A0E3           MOV      R11,#+0
   \   00001334   00A0A0E3           MOV      R10,#+0
   \   00001338   D001CDE1           LDRD     R0,R1,[SP, #+16]
   \   0000133C   ........           BL       __aeabi_dmul
   \   00001340   03008DE8           STM      SP,{R0,R1}
   \   00001344   0800A0E1           MOV      R0,R8
   \   00001348   0910A0E1           MOV      R1,R9
   \   0000134C   0820A0E1           MOV      R2,R8
   \   00001350   0930A0E1           MOV      R3,R9
   \   00001354   ........           BL       __aeabi_dmul
   \   00001358   00209DE5           LDR      R2,[SP, #+0]
   \   0000135C   04309DE5           LDR      R3,[SP, #+4]
   \   00001360   ........           BL       __aeabi_dadd
   \   00001364   ........           BL       sqrt
   \   00001368   ........           BL       __aeabi_d2f
   \   0000136C   0070A0E1           MOV      R7,R0
    580          				
    581          											// fix up the timer and lap distance based on our speed, rounding up the hundredth
    582          											offset = (s32) (50.0 + (1000.0 * distance) / speed);
   \   00001370   ........           BL       __aeabi_f2d
   \   00001374   0020A0E1           MOV      R2,R0
   \   00001378   0130A0E1           MOV      R3,R1
   \   0000137C   0000A0E3           MOV      R0,#+0
   \   00001380   ........           LDR      R1,??DataTable3_15  ;; 0x408f4000
   \   00001384   ........           BL       __aeabi_dmul
   \   00001388   D025C6E1           LDRD     R2,R3,[R6, #+80]
   \   0000138C   ........           BL       __aeabi_ddiv
   \   00001390   0130A0E1           MOV      R3,R1
   \   00001394   0020A0E1           MOV      R2,R0
   \   00001398   4014A0E3           MOV      R1,#+1073741824
   \   0000139C   0000A0E3           MOV      R0,#+0
   \   000013A0   491881E3           ORR      R1,R1,#0x490000
   \   000013A4   ........           BL       __aeabi_dadd
   \   000013A8   ........           BL       __aeabi_d2iz
   \   000013AC   0080A0E1           MOV      R8,R0
    583          				
    584          											// process the incoming states							
    585          											switch (unsavedSysData.systemMode) {
   \   000013B0   ........           LDR      R0,??DataTable3_2
   \   000013B4   8800D0E5           LDRB     R0,[R0, #+136]
   \   000013B8   080040E2           SUB      R0,R0,#+8
   \   000013BC   0B0050E3           CMP      R0,#+11
   \   000013C0   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??LapTimerTask_0:
   \   000013C4   1E00008A           BHI      ??LapTimerTask_62
   \   000013C8   0E0000EA           B        ??LapTimerTask_63
   \   000013CC   0D0000EA           B        ??LapTimerTask_63
   \   000013D0   0E0000EA           B        ??LapTimerTask_64
   \   000013D4   070000EA           B        ??LapTimerTask_65
   \   000013D8   0E0000EA           B        ??LapTimerTask_66
   \   000013DC   180000EA           B        ??LapTimerTask_62
   \   000013E0   170000EA           B        ??LapTimerTask_62
   \   000013E4   160000EA           B        ??LapTimerTask_62
   \   000013E8   150000EA           B        ??LapTimerTask_62
   \   000013EC   140000EA           B        ??LapTimerTask_62
   \   000013F0   130000EA           B        ??LapTimerTask_62
   \   000013F4   0A0000EA           B        ??LapTimerTask_67
    586          												case DU2_LAPS:
    587          													dostart = TRUE;
   \                     ??LapTimerTask_65:
   \   000013F8   01A0A0E3           MOV      R10,#+1
    588          													dofinish = TRUE;
    589          													break;
   \   000013FC   080000EA           B        ??LapTimerTask_67
   \                     ??LapTimerTask_56:
   \   00001400   3D0AD7A37025       DC32     0xA3D70A3D,0xC0792570
   \              79C0        
    590          												case DU2_LAPS_WAITSTART:
    591          													dofirststart = TRUE;
   \                     ??LapTimerTask_63:
   \   00001408   01B0A0E3           MOV      R11,#+1
    592          													dofinish = FALSE;
    593          													break;
   \   0000140C   0C0000EA           B        ??LapTimerTask_62
    594          												case DU2_HILLCLIMB_WAITNOSF:
    595          													dofirststart = TRUE;
    596          													break;
    597          												case DU2_HILLCLIMB_WAITSTART:
    598          													dostart = TRUE;
   \                     ??LapTimerTask_64:
   \   00001410   01A0A0E3           MOV      R10,#+1
    599          													break;
   \   00001414   0A0000EA           B        ??LapTimerTask_62
    600          												case DU2_HILLCLIMB_FINISH:
    601          													dofinish = TRUE;
    602          													break;
    603          												case DU2_AUTOX:
    604          													dofinish = TRUE;
    605          													offset += AUTOX_LAUNCH_TIME_CORRECTION;
   \                     ??LapTimerTask_66:
   \   00001418   2B00E0E3           MVN      R0,#+43
   \   0000141C   400FC0E3           BIC      R0,R0,#0x100
   \   00001420   088080E0           ADD      R8,R0,R8
    606          													break;
    607          											} // switch
    608          								
    609          											// general finish line stuff
    610          											if (dofinish) {
    611          												ProcessFinishLine( offset );
   \                     ??LapTimerTask_67:
   \   00001424   0800A0E1           MOV      R0,R8
   \   00001428   ........           BL       ProcessFinishLine
    612          												if (DU2_AUTOX == unsavedSysData.systemMode)
   \   0000142C   ........           LDR      R0,??DataTable3_2
   \   00001430   8800D0E5           LDRB     R0,[R0, #+136]
   \   00001434   0C0050E3           CMP      R0,#+12
   \   00001438   0100001A           BNE      ??LapTimerTask_62
    613          													SetUserMode(DU2_AUTOX_COMPLETE);		// stop timing at finish line
   \   0000143C   1400A0E3           MOV      R0,#+20
   \   00001440   ........           BL       SetUserMode
    614          											} // if
    615          			
    616          											// general start line stuff
    617          											if (dostart || dofirststart) {
   \                     ??LapTimerTask_62:
   \   00001444   0A009BE1           ORRS     R0,R11,R10
   \   00001448   1900000A           BEQ      ??LapTimerTask_68
    618          												// initialize to where start will be
    619          												DataValues[LAP_TIME].iVal = -offset;
   \   0000144C   000068E2           RSB      R0,R8,#+0
   \   00001450   000184E5           STR      R0,[R4, #+256]
    620          												lastdist = DataValues[LAP_DISTANCE].fVal = -distance;
   \   00001454   800427E2           EOR      R0,R7,#0x80000000
   \   00001458   E80084E5           STR      R0,[R4, #+232]
   \   0000145C   680086E5           STR      R0,[R6, #+104]
    621          												lap.timernminus1 = 0;
    622          
    623          												// clear the current sector data
    624          												for (cursectornum = 0; cursectornum < NUMBER_OF_SECTORS; cursectornum++)
   \   00001460   1420A0E3           MOV      R2,#+20
   \   00001464   385086E5           STR      R5,[R6, #+56]
   \   00001468   0000A0E3           MOV      R0,#+0
   \   0000146C   ........           LDR      R1,??DataTable3_16
   \   00001470   502E82E3           ORR      R2,R2,#0x500
    625          													sector[cursectornum].current = 0;
   \                     ??LapTimerTask_69:
   \   00001474   085081E4           STR      R5,[R1], #+8
   \   00001478   085081E4           STR      R5,[R1], #+8
   \   0000147C   085081E4           STR      R5,[R1], #+8
   \   00001480   085081E4           STR      R5,[R1], #+8
   \   00001484   050080E2           ADD      R0,R0,#+5
   \   00001488   085081E4           STR      R5,[R1], #+8
   \   0000148C   020050E1           CMP      R0,R2
   \   00001490   F7FFFFBA           BLT      ??LapTimerTask_69
    626          												cursectornum = 0;
    627          												refsectornum = 0;
    628          			
    629          												elapsedTime = 0;
    630          												lastTimerValue = OS_GetTime32();
   \   00001494   ........           LDR      R0,??DataTable3_17
   \   00001498   5C5086E5           STR      R5,[R6, #+92]
   \   0000149C   585086E5           STR      R5,[R6, #+88]
   \   000014A0   1C0090E5           LDR      R0,[R0, #+28]
   \   000014A4   640086E5           STR      R0,[R6, #+100]
    631          												
    632          												// next lap please
    633          												(DataValues[LAP_NUMBER].iVal)++;
   \   000014A8   200194E5           LDR      R0,[R4, #+288]
   \   000014AC   010080E2           ADD      R0,R0,#+1
   \   000014B0   200184E5           STR      R0,[R4, #+288]
    634          											} // if
    635          											
    636          											switch (unsavedSysData.systemMode) {
   \                     ??LapTimerTask_68:
   \   000014B4   ........           LDR      R0,??DataTable3_2
   \   000014B8   8800D0E5           LDRB     R0,[R0, #+136]
   \   000014BC   090050E3           CMP      R0,#+9
   \   000014C0   E0FAFF1A           BNE      ??LapTimerTask_2
    637          												case DU2_LAPS_WAITSTART:
    638          													SetUserMode(DU2_LAPS);
   \   000014C4   0B00A0E3           MOV      R0,#+11
   \   000014C8   8EFBFFEA           B        ??LapTimerTask_18
    639          													break;
    640          											} // switch
    641          										} // if !inrange
    642          									} // if !autox or distance over 50
    643          								} // if
    644          								else // no longer in range
    645          									inrange = FALSE;
   \                     ??LapTimerTask_60:
   \   000014CC   6D50C6E5           STRB     R5,[R6, #+109]
   \   000014D0   DCFAFFEA           B        ??LapTimerTask_2
    646          							} // else if check for heading in range
    647          						} // if not hillclimb waitfinish
    648          					} // if speed > 0
    649          				} // if new gps position
    650          			} // else not autox, drag startup modes
    651          		} // if
    652          	} // while
    653          } // LapTimerTask

   \                                 In section .data, align 8
   \                     lap:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000058   00000000           DC8 0, 0, 0, 0
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   00000000           DC8 0, 0, 0, 0
   \   00000064   00000000           DC8 0, 0, 0, 0
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     LapInitialize:
   \   0000006C   01                 DC8 1
   \   0000006D   00                 DC8 0
   \   0000006E   00                 DC8 0
    654          

   \                                 In section .text, align 4, keep-with-next
    655          void ProcessFinishLine( s32 offset ) {
   \                     ProcessFinishLine:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    656          	int i;
    657          
    658          	// fudge to where time would be when we cross finish line, rounding up
    659          	DataValues[LAST_LAP_TIME].iVal = (DataValues[LAP_TIME].iVal += offset);
   \   00000004   ........           LDR      R4,??DataTable3_18
   \   00000008   001194E5           LDR      R1,[R4, #+256]
   \   0000000C   010080E0           ADD      R0,R0,R1
   \   00000010   000184E5           STR      R0,[R4, #+256]
   \   00000014   080184E5           STR      R0,[R4, #+264]
    660          
    661          	// store the lap plus a fudge based on our speed
    662          	if (DataValues[LAP_NUMBER].iVal <= NUMLAPS) {
   \   00000018   200194E5           LDR      R0,[R4, #+288]
   \   0000001C   EF10A0E3           MOV      R1,#+239
   \   00000020   801F81E3           ORR      R1,R1,#0x200
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   0B0000AA           BGE      ??ProcessFinishLine_0
    663          		tqmheader.tqmheaderstruct.lapInfo.lapTime[DataValues[LAP_NUMBER].iVal-1] = DataValues[LAST_LAP_TIME].uVal;
   \   0000002C   ........           LDR      R5,??DataTable3_19
   \   00000030   6E10A0E3           MOV      R1,#+110
   \   00000034   601E81E3           ORR      R1,R1,#0x600
   \   00000038   000185E0           ADD      R0,R5,R0, LSL #+2
   \   0000003C   001081E0           ADD      R1,R1,R0
   \   00000040   080194E5           LDR      R0,[R4, #+264]
   \   00000044   ........           BL       __aeabi_uwrite4
    664          		tqmheader.tqmheaderstruct.lapInfo.numberOfLaps = DataValues[LAP_NUMBER].uVal;
   \   00000048   6600A0E3           MOV      R0,#+102
   \   0000004C   600E80E3           ORR      R0,R0,#0x600
   \   00000050   051080E0           ADD      R1,R0,R5
   \   00000054   200194E5           LDR      R0,[R4, #+288]
   \   00000058   ........           BL       __aeabi_uwrite4
    665          	} // if
    666          
    667          	// check for best lap ever
    668          	if ((0 == lap.besttime) || (DataValues[LAST_LAP_TIME].uVal < lap.besttime)) {
   \                     ??ProcessFinishLine_0:
   \   0000005C   ........           LDR      R1,??DataTable3_20
   \   00000060   000091E5           LDR      R0,[R1, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0200000A           BEQ      ??ProcessFinishLine_1
   \   0000006C   082194E5           LDR      R2,[R4, #+264]
   \   00000070   000052E1           CMP      R2,R0
   \   00000074   2700002A           BCS      ??ProcessFinishLine_2
    669          		int copybestlap = ((0 == trackData.bestLapEver) || (DataValues[LAST_LAP_TIME].uVal < trackData.bestLapEver));
   \                     ??ProcessFinishLine_1:
   \   00000078   ........           LDR      R2,??DataTable3_3
   \   0000007C   440092E5           LDR      R0,[R2, #+68]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0200000A           BEQ      ??ProcessFinishLine_3
   \   00000088   083194E5           LDR      R3,[R4, #+264]
   \   0000008C   000053E1           CMP      R3,R0
   \   00000090   0100002A           BCS      ??ProcessFinishLine_4
   \                     ??ProcessFinishLine_3:
   \   00000094   0130A0E3           MOV      R3,#+1
   \   00000098   000000EA           B        ??ProcessFinishLine_5
   \                     ??ProcessFinishLine_4:
   \   0000009C   0030A0E3           MOV      R3,#+0
    670          		
    671          		DataValues[BEST_LAP].uVal = BEST_LAP_EVER;
   \                     ??ProcessFinishLine_5:
   \   000000A0   0200A0E3           MOV      R0,#+2
   \   000000A4   780284E5           STR      R0,[R4, #+632]
    672          		lap.besttime = DataValues[LAST_LAP_TIME].uVal;
   \   000000A8   080194E5           LDR      R0,[R4, #+264]
    673          		if (copybestlap) {
   \   000000AC   5CC091E5           LDR      R12,[R1, #+92]
   \   000000B0   000053E3           CMP      R3,#+0
    674          			trackData.bestLapEver = lap.besttime;
   \   000000B4   44008215           STRNE    R0,[R2, #+68]
    675          			trackData.numberOfSectors = cursectornum;
   \   000000B8   48C08215           STRNE    R12,[R2, #+72]
   \   000000BC   000081E5           STR      R0,[R1, #+0]
    676          		} // if
    677          
    678          		// make current lap the reference lap
    679          		for (i = 0; i < cursectornum; i++) {
   \   000000C0   01005CE3           CMP      R12,#+1
   \   000000C4   080000BA           BLT      ??ProcessFinishLine_6
   \   000000C8   ........           LDR      R1,??DataTable3_21
    680          			sector[i].reference = sector[i].current;
   \                     ??ProcessFinishLine_7:
   \   000000CC   04E091E5           LDR      LR,[R1, #+4]
    681          			if (copybestlap)
   \   000000D0   000053E3           CMP      R3,#+0
   \   000000D4   00E081E5           STR      LR,[R1, #+0]
    682          				trackData.sectorTimes[i] = sector[i].current;
   \   000000D8   4CE08215           STRNE    LR,[R2, #+76]
    683          		} // for
   \   000000DC   081081E2           ADD      R1,R1,#+8
   \   000000E0   042082E2           ADD      R2,R2,#+4
   \   000000E4   01C05CE2           SUBS     R12,R12,#+1
   \   000000E8   F7FFFF1A           BNE      ??ProcessFinishLine_7
    684          
    685          		tqmheader.tqmheaderstruct.lapInfo.bestLapTime = DataValues[LAST_LAP_TIME].uVal;
   \                     ??ProcessFinishLine_6:
   \   000000EC   ........           LDR      R5,??DataTable3_19
   \   000000F0   6E10A0E3           MOV      R1,#+110
   \   000000F4   601E81E3           ORR      R1,R1,#0x600
   \   000000F8   051081E0           ADD      R1,R1,R5
   \   000000FC   ........           BL       __aeabi_uwrite4
    686          		tqmheader.tqmheaderstruct.lapInfo.bestLapNumber = DataValues[LAP_NUMBER].uVal;
   \   00000100   6A00A0E3           MOV      R0,#+106
   \   00000104   600E80E3           ORR      R0,R0,#0x600
   \                     ??ProcessFinishLine_8:
   \   00000108   051080E0           ADD      R1,R0,R5
   \   0000010C   200194E5           LDR      R0,[R4, #+288]
   \   00000110   7040BDE8           POP      {R4-R6,LR}
   \   00000114   ........           B        __aeabi_uwrite4
    687          	} // if								
    688          	// check for best lap of this session
    689          	else if ((0 == tqmheader.tqmheaderstruct.lapInfo.bestLapTime) || (DataValues[LAST_LAP_TIME].uVal < tqmheader.tqmheaderstruct.lapInfo.bestLapTime)) {
   \                     ??ProcessFinishLine_2:
   \   00000118   6E60A0E3           MOV      R6,#+110
   \   0000011C   ........           LDR      R5,??DataTable3_19
   \   00000120   606E86E3           ORR      R6,R6,#0x600
   \   00000124   050086E0           ADD      R0,R6,R5
   \   00000128   ........           BL       __aeabi_uread4
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0400000A           BEQ      ??ProcessFinishLine_9
   \   00000134   050086E0           ADD      R0,R6,R5
   \   00000138   ........           BL       __aeabi_uread4
   \   0000013C   081194E5           LDR      R1,[R4, #+264]
   \   00000140   000051E1           CMP      R1,R0
   \   00000144   0700002A           BCS      ??ProcessFinishLine_10
    690          		DataValues[BEST_SESSION_LAP].uVal = DataValues[LAST_LAP_TIME].uVal;	
   \                     ??ProcessFinishLine_9:
   \   00000148   080194E5           LDR      R0,[R4, #+264]
    691          		DataValues[BEST_LAP].uVal = BEST_LAP_OF_SESSION;
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   781284E5           STR      R1,[R4, #+632]
   \   00000154   880284E5           STR      R0,[R4, #+648]
    692          		tqmheader.tqmheaderstruct.lapInfo.bestLapTime = DataValues[LAST_LAP_TIME].uVal;
   \   00000158   051086E0           ADD      R1,R6,R5
   \   0000015C   ........           BL       __aeabi_uwrite4
    693          		tqmheader.tqmheaderstruct.lapInfo.bestLapNumber = DataValues[LAP_NUMBER].uVal;
   \   00000160   0400C6E3           BIC      R0,R6,#0x4
   \   00000164   E7FFFFEA           B        ??ProcessFinishLine_8
    694          	} // if
    695          	else
    696          		DataValues[BEST_LAP].uVal = NOT_BEST_LAP;
   \                     ??ProcessFinishLine_10:
   \   00000168   0000A0E3           MOV      R0,#+0
   \   0000016C   780284E5           STR      R0,[R4, #+632]
    697          
    698          } // ProcessFinishLine
   \   00000170   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     DataValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   72235D1ADCA5       DC32     0x1A5D2372,0x404CA5DC
   \              4C40        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   706FFB40           DC32     0x40fb6f70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     trackData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   EC519241           DC32     0x419251ec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   B91EC142           DC32     0x42c11eb9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   15EE2043           DC32     0x4320ee15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   F628C942           DC32     0x42c928f6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   862B4F43           DC32     0x434f2b86

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   852B4943           DC32     0x43492b85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   67669B43           DC32     0x439b6667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   66669843           DC32     0x43986666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   862BCC43           DC32     0x43cc2b86

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   852BC943           DC32     0x43c92b85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0100A543           DC32     0x43a50001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   ........           DC32     sector+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   ........           DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   ........           DC32     DataValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   ........           DC32     tqmheader

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   ........           DC32     lap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   ........           DC32     sector

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     InitLapTimerVariables      0
     LapTimerTask              64
     ProcessFinishLine         16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     InitLapTimerVariables   180
     sector                10400
     LapTimerTask           5332
     lap                     111
     seeklat
     seeklon
     speed
     refsectornum
     cursectornum
     seekhdg
     lastTimerValue
     lastdist
     LapInitialize
     inrange
     writeTracks
     ProcessFinishLine       372
     ??DataTable1              4
     ??DataTable2              8
     ??DataTable3              4
     ??DataTable3_1            4
     ??DataTable3_2            4
     ??DataTable3_3            4
     ??DataTable3_4            4
     ??DataTable3_5            4
     ??DataTable3_6            4
     ??DataTable3_7            4
     ??DataTable3_8            4
     ??DataTable3_9            4
     ??DataTable3_10           4
     ??DataTable3_11           4
     ??DataTable3_12           4
     ??DataTable3_13           4
     ??DataTable3_14           4
     ??DataTable3_15           4
     ??DataTable3_16           4
     ??DataTable3_17           4
     ??DataTable3_18           4
     ??DataTable3_19           4
     ??DataTable3_20           4
     ??DataTable3_21           4
     ?<Constant "">            1

 
 10 400 bytes in section .bss
    111 bytes in section .data
      1 byte  in section .rodata
  5 984 bytes in section .text
 
  5 984 bytes of CODE  memory
      1 byte  of CONST memory
 10 511 bytes of DATA  memory

Errors: none
Warnings: none
