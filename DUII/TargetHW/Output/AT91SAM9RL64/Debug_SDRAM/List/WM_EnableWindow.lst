###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_EnableWindow.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\WM_EnableWindow.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\WM #
#                    _EnableWindow.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\WM_ #
#                    EnableWindow.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_EnableWindow.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_EnableWindow.c
     19          Purpose     : Implementation of WM_EnableWindow, WM_DisableWindow
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          
     34          /*********************************************************************
     35          *
     36          *       WM_SetEnableState
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          void WM_SetEnableState(WM_HWIN hWin, int State) {
   \                     WM_SetEnableState:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0150A0E1           MOV      R5,R1
     39            if (hWin) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1600000A           BEQ      ??WM_SetEnableState_0
     40              WM_Obj* pWin;
     41              U16 Status;
     42              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     43              pWin = WM_H2P(hWin);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
     44              Status = pWin->Status;
   \   00000024   281090E5           LDR      R1,[R0, #+40]
     45              if (State) {
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0128A0E1           LSL      R2,R1,#+16
   \   00000030   2228A0E1           LSR      R2,R2,#+16
   \   00000034   0300000A           BEQ      ??WM_SetEnableState_1
     46                Status &= ~WM_SF_DISABLED;
   \   00000038   EF30A0E3           MOV      R3,#+239
   \   0000003C   FF3C83E3           ORR      R3,R3,#0xFF00
   \   00000040   022003E0           AND      R2,R3,R2
   \   00000044   000000EA           B        ??WM_SetEnableState_2
     47              } else {
     48                Status |=  WM_SF_DISABLED;
   \                     ??WM_SetEnableState_1:
   \   00000048   102082E3           ORR      R2,R2,#0x10
     49              }
     50              if (pWin->Status != Status) {
   \                     ??WM_SetEnableState_2:
   \   0000004C   020051E1           CMP      R1,R2
   \   00000050   0600000A           BEQ      ??WM_SetEnableState_3
     51                WM_MESSAGE Msg;
     52                pWin->Status = Status;
   \   00000054   282080E5           STR      R2,[R0, #+40]
     53                Msg.MsgId  = WM_NOTIFY_ENABLE;
   \   00000058   2810A0E3           MOV      R1,#+40
   \   0000005C   00108DE5           STR      R1,[SP, #+0]
     54                Msg.Data.v = State;
   \   00000060   0C508DE5           STR      R5,[SP, #+12]
     55                WM__SendMessage(hWin, &Msg);
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       WM__SendMessage
     56              }
     57              WM_UNLOCK();
   \                     ??WM_SetEnableState_3:
   \   00000070   ........           BL       GUI_Unlock
     58            }
     59          }
   \                     ??WM_SetEnableState_0:
   \   00000074   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
     60          
     61          /*********************************************************************
     62          *
     63          *       WM_EnableWindow
     64          */

   \                                 In section .text, align 4, keep-with-next
     65          void WM_EnableWindow(WM_HWIN hWin) {
   \                     WM_EnableWindow:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040B0E1           MOVS     R4,R0
     66            WM_SetEnableState(hWin, 1);
   \   0000000C   1100000A           BEQ      ??WM_EnableWindow_0
   \   00000010   ........           BL       GUI_Lock
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   281090E5           LDR      R1,[R0, #+40]
   \   00000020   EF30A0E3           MOV      R3,#+239
   \   00000024   FF3C83E3           ORR      R3,R3,#0xFF00
   \   00000028   012003E0           AND      R2,R3,R1
   \   0000002C   020051E1           CMP      R1,R2
   \   00000030   0700000A           BEQ      ??WM_EnableWindow_1
   \   00000034   282080E5           STR      R2,[R0, #+40]
   \   00000038   2810A0E3           MOV      R1,#+40
   \   0000003C   00108DE5           STR      R1,[SP, #+0]
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0C108DE5           STR      R1,[SP, #+12]
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       WM__SendMessage
   \                     ??WM_EnableWindow_1:
   \   00000054   ........           BL       GUI_Unlock
     67          }
   \                     ??WM_EnableWindow_0:
   \   00000058   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
     68          
     69          /*********************************************************************
     70          *
     71          *       WM_DisableWindow
     72          */

   \                                 In section .text, align 4, keep-with-next
     73          void WM_DisableWindow(WM_HWIN hWin) {
   \                     WM_DisableWindow:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040B0E1           MOVS     R4,R0
     74            WM_SetEnableState(hWin, 0);
   \   0000000C   1100000A           BEQ      ??WM_DisableWindow_0
   \   00000010   ........           BL       GUI_Lock
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   281090E5           LDR      R1,[R0, #+40]
   \   00000020   102081E3           ORR      R2,R1,#0x10
   \   00000024   0228A0E1           LSL      R2,R2,#+16
   \   00000028   2228A0E1           LSR      R2,R2,#+16
   \   0000002C   020051E1           CMP      R1,R2
   \   00000030   0700000A           BEQ      ??WM_DisableWindow_1
   \   00000034   282080E5           STR      R2,[R0, #+40]
   \   00000038   2810A0E3           MOV      R1,#+40
   \   0000003C   00108DE5           STR      R1,[SP, #+0]
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   0C108DE5           STR      R1,[SP, #+12]
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       WM__SendMessage
   \                     ??WM_DisableWindow_1:
   \   00000054   ........           BL       GUI_Unlock
     75          }
   \                     ??WM_DisableWindow_0:
   \   00000058   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
     76          #else
     77            void WM_EnableWindow_C(void) {} /* avoid empty object files */
     78          #endif
     79          
     80          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     WM_DisableWindow      24
     WM_EnableWindow       24
     WM_SetEnableState     32


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     WM_SetEnableState  124
     WM_EnableWindow     96
     WM_DisableWindow    96

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
