###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_2.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_2.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDRV_Lin_2.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DRV_Lin_2.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_2.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_8.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y * (vxSizePhys >> 3) + ((U32)x >> 3))
     91          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y * (vxSizePhys >> 4) + ((U32)x >> 4))
     92          
     93          #define MIRROR(x) x = ((x & 0x000000ff) << 24) \
     94                              | ((x & 0x0000ff00) <<  8) \
     95                              | ((x & 0x00ff0000) >>  8) \
     96                              | ((x & 0xff000000) >> 24)
     97          
     98          /*********************************************************************
     99          *
    100          *       Types
    101          *
    102          **********************************************************************
    103          */
    104          typedef struct {
    105            U32 VRAMAddr;
    106            int xSize, ySize;
    107            int vxSize, vySize;
    108            int vxSizePhys;
    109            int xPos, yPos;
    110            int Alpha;
    111            int IsVisible;
    112            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    113            LCD_COLOR aColor[4];
    114          } DRIVER_CONTEXT;
    115          
    116          /*********************************************************************
    117          *
    118          *       Static functions
    119          *
    120          **********************************************************************
    121          */
    122          /*********************************************************************
    123          *
    124          *       _SetPixelIndex
    125          *
    126          * Purpose:
    127          *   Sets the index of the given pixel. The upper layers
    128          *   calling this routine make sure that the coordinates are in range, so
    129          *   that no check on the parameters needs to be performed.
    130          */

   \                                 In section .text, align 4, keep-with-next
    131          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   00402DE9           PUSH     {LR}
    132            DRIVER_CONTEXT * pContext;
    133            U32 Off;
    134            U16 Data;
    135            int Shift;
    136          
    137            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    138            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
    139            Data     = READ_MEM16(pContext->VRAMAddr, Off);
    140            Shift    = ((x & 3) << 1) + ((((x & 7) >> 2) ^ LCD_ENDIAN_BIG) << 3);
   \   00000008   01E0A0E3           MOV      LR,#+1
   \   0000000C   14C090E5           LDR      R12,[R0, #+20]
    141            Data    &= ~(0x3 << Shift);
    142            Data    |= PixelIndex << Shift;
    143            WRITE_MEM16(pContext->VRAMAddr, Off, Data);
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   CCC1A0E1           ASR      R12,R12,#+3
   \   00000018   9C0202E0           MUL      R2,R12,R2
   \   0000001C   03C001E2           AND      R12,R1,#0x3
   \   00000020   A12182E0           ADD      R2,R2,R1, LSR #+3
   \   00000024   41110EE0           AND      R1,LR,R1, ASR #+2
   \   00000028   8111A0E1           LSL      R1,R1,#+3
   \   0000002C   8C1081E0           ADD      R1,R1,R12, LSL #+1
   \   00000030   8220A0E1           LSL      R2,R2,#+1
   \   00000034   B0C092E1           LDRH     R12,[R2, +R0]
   \   00000038   03E0A0E3           MOV      LR,#+3
   \   0000003C   1EE1A0E1           LSL      LR,LR,R1
   \   00000040   0EC0CCE1           BIC      R12,R12,LR
   \   00000044   13118CE1           ORR      R1,R12,R3, LSL R1
   \   00000048   B01082E1           STRH     R1,[R2, +R0]
    144          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
    145          
    146          /*********************************************************************
    147          *
    148          *       _GetPixelIndex
    149          *
    150          * Purpose:
    151          *   Returns the index of the given pixel. The upper layers
    152          *   calling this routine make sure that the coordinates are in range, so
    153          *   that no check on the parameters needs to be performed.
    154          */

   \                                 In section .text, align 4, keep-with-next
    155          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    156            DRIVER_CONTEXT * pContext;
    157            U32 Off;
    158            U16 Data;
    159            int Shift;
    160            LCD_PIXELINDEX PixelIndex;
    161          
    162            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    163            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
    164            Data     = READ_MEM16(pContext->VRAMAddr, Off);
    165            Shift    = ((x & 3) << 1) + ((((x & 7) >> 2) ^ LCD_ENDIAN_BIG) << 3);
   \                     _GetPixelIndex:
   \   00000000   01C0A0E3           MOV      R12,#+1
   \   00000004   41C10CE0           AND      R12,R12,R1, ASR #+2
   \   00000008   080090E5           LDR      R0,[R0, #+8]
   \   0000000C   033001E2           AND      R3,R1,#0x3
   \   00000010   8CC1A0E1           LSL      R12,R12,#+3
   \   00000014   83308CE0           ADD      R3,R12,R3, LSL #+1
    166            PixelIndex = (Data & (0x3 << Shift)) >> Shift;
    167            return PixelIndex;
   \   00000018   14C090E5           LDR      R12,[R0, #+20]
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   CCC1A0E1           ASR      R12,R12,#+3
   \   00000024   9C0202E0           MUL      R2,R12,R2
   \   00000028   A11182E0           ADD      R1,R2,R1, LSR #+3
   \   0000002C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000030   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000034   0310A0E3           MOV      R1,#+3
   \   00000038   110300E0           AND      R0,R0,R1, LSL R3
   \   0000003C   5003A0E1           ASR      R0,R0,R3
   \   00000040   1EFF2FE1           BX       LR               ;; return
    168          }
    169          
    170          /*********************************************************************
    171          *
    172          *       _XorPixel
    173          */

   \                                 In section .text, align 4, keep-with-next
    174          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0080A0E1           MOV      R8,R0
    175            LCD_PIXELINDEX PixelIndex;
    176            LCD_PIXELINDEX IndexMask;
    177            
    178            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   0130A0E3           MOV      R3,#+1
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   080098E5           LDR      R0,[R8, #+8]
   \   00000014   413103E0           AND      R3,R3,R1, ASR #+2
   \   00000018   032001E2           AND      R2,R1,#0x3
   \   0000001C   8331A0E1           LSL      R3,R3,#+3
   \   00000020   A191A0E1           LSR      R9,R1,#+3
   \   00000024   825083E0           ADD      R5,R3,R2, LSL #+1
   \   00000028   141090E5           LDR      R1,[R0, #+20]
   \   0000002C   0320A0E3           MOV      R2,#+3
   \   00000030   1265A0E1           LSL      R6,R2,R5
   \   00000034   C111A0E1           ASR      R1,R1,#+3
   \   00000038   919422E0           MLA      R2,R1,R4,R9
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   04D04DE2           SUB      SP,SP,#+4
   \   00000044   820080E0           ADD      R0,R0,R2, LSL #+1
   \   00000048   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000004C   000006E0           AND      R0,R6,R0
   \   00000050   5075A0E1           ASR      R7,R0,R5
    179            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000054   100098E5           LDR      R0,[R8, #+16]
   \   00000058   080090E5           LDR      R0,[R0, #+8]
   \   0000005C   30FF2FE1           BLX      R0
    180            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000060   081098E5           LDR      R1,[R8, #+8]
   \   00000064   070020E0           EOR      R0,R0,R7
   \   00000068   142091E5           LDR      R2,[R1, #+20]
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   C231A0E1           ASR      R3,R2,#+3
   \   00000074   939422E0           MLA      R2,R3,R4,R9
    181          }
   \   00000078   04D08DE2           ADD      SP,SP,#+4
   \   0000007C   8220A0E1           LSL      R2,R2,#+1
   \   00000080   B13092E1           LDRH     R3,[R2, +R1]
   \   00000084   0630C3E1           BIC      R3,R3,R6
   \   00000088   100583E1           ORR      R0,R3,R0, LSL R5
   \   0000008C   B10082E1           STRH     R0,[R2, +R1]
   \   00000090   F083BDE8           POP      {R4-R9,PC}       ;; return
    182          
    183          /*********************************************************************
    184          *
    185          *       _DrawHLine
    186          */

   \                                 In section .text, align 4, keep-with-next
    187          static void _DrawHLine(GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    188            DRIVER_CONTEXT * pContext;
    189            int Off, NumPixel_0, NumPixel_1, RemPixels;
    190            U32 Data, ColorMask, AndMask;
    191            LCD_PIXELINDEX ColorIndex;
    192          
    193            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0340A0E1           MOV      R4,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   0900000A           BEQ      ??_DrawHLine_0
   \   00000024   050054E1           CMP      R4,R5
   \   00000028   420000BA           BLT      ??_DrawHLine_1
    194              for (; x0 <= x1; x0++) {
    195                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0700A0E1           MOV      R0,R7
   \   00000038   ........           BL       _XorPixel
    196              }
   \   0000003C   015085E2           ADD      R5,R5,#+1
   \   00000040   050054E1           CMP      R4,R5
   \   00000044   F8FFFFAA           BGE      ??_DrawHLine_2
   \   00000048   F081BDE8           POP      {R4-R8,PC}
    197            } else {
    198              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawHLine_0:
   \   0000004C   ........           LDR      R0,??DataTable14_1
    199              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    200              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
    201              NumPixel_0 = x0 & 15;
   \   00000050   0FE005E2           AND      LR,R5,#0xF
   \   00000054   000090E5           LDR      R0,[R0, #+0]
    202              NumPixel_1 = x1 & 15;
    203              RemPixels = x1 - x0 + 1;
   \   00000058   05C044E0           SUB      R12,R4,R5
   \   0000005C   001090E5           LDR      R1,[R0, #+0]
   \   00000060   080097E5           LDR      R0,[R7, #+8]
   \   00000064   01C08CE2           ADD      R12,R12,#+1
   \   00000068   142090E5           LDR      R2,[R0, #+20]
    204              //
    205              // First DWORD
    206              //
    207              if (NumPixel_0) {
   \   0000006C   00005EE3           CMP      LR,#+0
   \   00000070   4222A0E1           ASR      R2,R2,#+4
   \   00000074   920603E0           MUL      R3,R2,R6
   \   00000078   252283E0           ADD      R2,R3,R5, LSR #+4
   \   0000007C   0F3004E2           AND      R3,R4,#0xF
   \   00000080   1600000A           BEQ      ??_DrawHLine_3
    208                AndMask = ~(0xFFFFFFFF << (2 * NumPixel_0));
   \   00000084   0070E0E3           MVN      R7,#+0
   \   00000088   8E60A0E1           LSL      R6,LR,#+1
   \   0000008C   1766E0E1           MVN      R6,R7, LSL R6
    209                if ((x0 & ~0xf) == (x1 & ~0xf)) {
   \   00000090   0F50C5E3           BIC      R5,R5,#0xF
   \   00000094   0F40C4E3           BIC      R4,R4,#0xF
   \   00000098   040055E1           CMP      R5,R4
   \   0000009C   0400001A           BNE      ??_DrawHLine_4
    210                  AndMask |= ~(0xFFFFFFFF >> (2 * (15 - NumPixel_1)));
   \   000000A0   0340A0E1           MOV      R4,R3
   \   000000A4   0F4064E2           RSB      R4,R4,#+15
   \   000000A8   8440A0E1           LSL      R4,R4,#+1
   \   000000AC   3744E0E1           MVN      R4,R7, LSR R4
   \   000000B0   066084E1           ORR      R6,R4,R6
    211                }
    212                ColorMask = (ColorIndex * 0x55555555) & ~AndMask;
    213                #if (LCD_ENDIAN_BIG == 1)
    214                  MIRROR(AndMask);
    215                  MIRROR(ColorMask);
    216                #endif
    217                Data = READ_MEM32(pContext->VRAMAddr, Off);
    218                Data &= AndMask;
    219                Data |= ColorMask;
    220                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_4:
   \   000000B4   004090E5           LDR      R4,[R0, #+0]
   \   000000B8   ........           LDR      R7,??DataTable14_2  ;; 0x55555555
   \   000000BC   025194E7           LDR      R5,[R4, +R2, LSL #+2]
   \   000000C0   970108E0           MUL      R8,R7,R1
   \   000000C4   055006E0           AND      R5,R6,R5
   \   000000C8   0660C8E1           BIC      R6,R8,R6
   \   000000CC   055086E1           ORR      R5,R6,R5
   \   000000D0   025184E7           STR      R5,[R4, +R2, LSL #+2]
    221                RemPixels -= (16 - NumPixel_0);
   \   000000D4   10E04EE2           SUB      LR,LR,#+16
   \   000000D8   0CC08EE0           ADD      R12,LR,R12
    222                Off++;
   \   000000DC   012082E2           ADD      R2,R2,#+1
   \                     ??_DrawHLine_3:
   \   000000E0   ........           LDR      LR,??DataTable14_2  ;; 0x55555555
   \   000000E4   10005CE3           CMP      R12,#+16
   \   000000E8   9E0101E0           MUL      R1,LR,R1
   \   000000EC   01E0A0E1           MOV      LR,R1
   \   000000F0   050000BA           BLT      ??_DrawHLine_5
    223              }
    224              //
    225              // Complete DWORDS
    226              //
    227              ColorMask = ColorIndex * 0x55555555;
    228              while (RemPixels >= 16) {
    229                LCD_WRITE_MEM32(pContext->VRAMAddr, Off, ColorMask);
   \                     ??_DrawHLine_6:
   \   000000F4   004090E5           LDR      R4,[R0, #+0]
    230                Off++;
    231                RemPixels -= 16;
   \   000000F8   10C04CE2           SUB      R12,R12,#+16
   \   000000FC   02E184E7           STR      LR,[R4, +R2, LSL #+2]
   \   00000100   012082E2           ADD      R2,R2,#+1
   \   00000104   10005CE3           CMP      R12,#+16
   \   00000108   F9FFFFAA           BGE      ??_DrawHLine_6
    232              }
    233              //
    234              // Last DWORD
    235              //
    236              if (RemPixels > 0) {
   \                     ??_DrawHLine_5:
   \   0000010C   01005CE3           CMP      R12,#+1
   \   00000110   080000BA           BLT      ??_DrawHLine_1
    237                AndMask = 0xFFFFFFFC << (2 * NumPixel_1);
   \   00000114   03C0E0E3           MVN      R12,#+3
   \   00000118   8330A0E1           LSL      R3,R3,#+1
    238                ColorMask = (ColorIndex * 0x55555555) & ~AndMask;
    239                #if (LCD_ENDIAN_BIG == 1)
    240                  MIRROR(AndMask);
    241                  MIRROR(ColorMask);
    242                #endif
    243                Data = READ_MEM32(pContext->VRAMAddr, Off);
    244                Data &= AndMask;
    245                Data |= ColorMask;
    246                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   1C63A0E1           LSL      R6,R12,R3
   \   00000124   023190E7           LDR      R3,[R0, +R2, LSL #+2]
   \   00000128   0610C1E1           BIC      R1,R1,R6
   \   0000012C   033006E0           AND      R3,R6,R3
   \   00000130   031081E1           ORR      R1,R1,R3
   \   00000134   021180E7           STR      R1,[R0, +R2, LSL #+2]
    247              }
    248            }
    249          }
   \                     ??_DrawHLine_1:
   \   00000138   F081BDE8           POP      {R4-R8,PC}       ;; return
    250          
    251          /*********************************************************************
    252          *
    253          *       _DrawVLine, not optimized
    254          */

   \                                 In section .text, align 4, keep-with-next
    255          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    256            LCD_PIXELINDEX ColorIndex;
    257          
    258            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0350A0E1           MOV      R5,R3
   \   00000020   010010E3           TST      R0,#0x1
   \   00000024   0900000A           BEQ      ??_DrawVLine_0
   \   00000028   060055E1           CMP      R5,R6
   \   0000002C   200000BA           BLT      ??_DrawVLine_1
    259              for (; y0 <= y1; y0++) {
    260                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       _XorPixel
    261              }
   \   00000040   016086E2           ADD      R6,R6,#+1
   \   00000044   060055E1           CMP      R5,R6
   \   00000048   F8FFFFAA           BGE      ??_DrawVLine_2
   \   0000004C   180000EA           B        ??_DrawVLine_1
    262            } else {
    263              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   00000050   ........           LDR      R0,??DataTable14_1
   \   00000054   060055E1           CMP      R5,R6
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   130000BA           BLT      ??_DrawVLine_1
   \   00000064   0120A0E3           MOV      R2,#+1
   \   00000068   472102E0           AND      R2,R2,R7, ASR #+2
   \   0000006C   031007E2           AND      R1,R7,#0x3
   \   00000070   8221A0E1           LSL      R2,R2,#+3
   \   00000074   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000078   A721A0E1           LSR      R2,R7,#+3
   \   0000007C   0330A0E3           MOV      R3,#+3
    264              for (; y0 <= y1; y0++) {
    265                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   00000080   08E094E5           LDR      LR,[R4, #+8]
   \   00000084   14C09EE5           LDR      R12,[LR, #+20]
   \   00000088   00E09EE5           LDR      LR,[LR, #+0]
   \   0000008C   CC71A0E1           ASR      R7,R12,#+3
   \   00000090   97262CE0           MLA      R12,R7,R6,R2
    266              }
   \   00000094   016086E2           ADD      R6,R6,#+1
   \   00000098   8CC0A0E1           LSL      R12,R12,#+1
   \   0000009C   BE709CE1           LDRH     R7,[R12, +LR]
   \   000000A0   060055E1           CMP      R5,R6
   \   000000A4   1371C7E1           BIC      R7,R7,R3, LSL R1
   \   000000A8   107187E1           ORR      R7,R7,R0, LSL R1
   \   000000AC   BE708CE1           STRH     R7,[R12, +LR]
   \   000000B0   F2FFFFAA           BGE      ??_DrawVLine_3
    267            }
    268          }
   \                     ??_DrawVLine_1:
   \   000000B4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
    269          
    270          /*********************************************************************
    271          *
    272          *       _FillRect
    273          */

   \                                 In section .text, align 4, keep-with-next
    274          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18809DE5           LDR      R8,[SP, #+24]
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   060058E1           CMP      R8,R6
   \   0000001C   070000BA           BLT      ??_FillRect_0
    275            for (; y0 <= y1; y0++) {
    276              _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_1:
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawHLine
    277            }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   060058E1           CMP      R8,R6
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    278          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    279          
    280          /*********************************************************************
    281          *
    282          *       Draw Bitmap 1 BPP
    283          */

   \                                 In section .text, align 4, keep-with-next
    284          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
   \   00000010   0280A0E1           MOV      R8,R2
    285            DRIVER_CONTEXT * pContext;
    286            U8 Mode;
    287            LCD_PIXELINDEX Index0, Index1, IndexMask, ColorIndexOld ;
    288            int Off, NumPixel_0, NumPixel_1, i;
    289            U32 Data, ColorMask, AndMask;
    290            U8 Index;
    291            
    292            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    293            Index0 = *(pTrans + 0);
   \   00000014   00E090E5           LDR      LR,[R0, #+0]
    294            Index1 = *(pTrans + 1);
   \   00000018   042090E5           LDR      R2,[R0, #+4]
    295            x += Diff;
    296            Mode = GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR);
   \   0000001C   ........           LDR      R0,??DataTable14
   \   00000020   28509DE5           LDR      R5,[SP, #+40]
   \   00000024   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000028   0340A0E1           MOV      R4,R3
   \   0000002C   2C609DE5           LDR      R6,[SP, #+44]
   \   00000030   08C097E5           LDR      R12,[R7, #+8]
   \   00000034   019085E0           ADD      R9,R5,R1
   \   00000038   030010E2           ANDS     R0,R0,#0x3
    297            if (Mode == 0) {
   \   0000003C   7200001A           BNE      ??_DrawBitLine1BPP_0
   \   00000040   090086E0           ADD      R0,R6,R9
   \   00000044   013040E2           SUB      R3,R0,#+1
   \   00000048   02005EE1           CMP      LR,R2
   \   0000004C   0A00001A           BNE      ??_DrawBitLine1BPP_1
    298              //
    299              // Check if filling will do ...
    300              //
    301              if (Index0 == Index1) {
    302                ColorIndexOld = LCD__GetColorIndex();
   \   00000050   ........           LDR      R5,??DataTable14_1
    303                LCD__SetColorIndex(Index0);
    304                _DrawHLine(pDevice, x, y, x + xsize - 1);
   \   00000054   0820A0E1           MOV      R2,R8
   \   00000058   000095E5           LDR      R0,[R5, #+0]
   \   0000005C   0910A0E1           MOV      R1,R9
   \   00000060   004090E5           LDR      R4,[R0, #+0]
   \   00000064   00E080E5           STR      LR,[R0, #+0]
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   ........           BL       _DrawHLine
    305                LCD__SetColorIndex(ColorIndexOld);
   \   00000070   000095E5           LDR      R0,[R5, #+0]
   \   00000074   004080E5           STR      R4,[R0, #+0]
   \   00000078   AF0000EA           B        ??_DrawBitLine1BPP_2
    306              } else {
    307                //
    308                // O.K., we have to draw ...
    309                //
    310                Off = XY2OFF32(pContext->vxSizePhys, x, y);
   \                     ??_DrawBitLine1BPP_1:
   \   0000007C   14009CE5           LDR      R0,[R12, #+20]
   \   00000080   4002A0E1           ASR      R0,R0,#+4
   \   00000084   900801E0           MUL      R1,R0,R8
    311                NumPixel_0 = x & 15;
    312                NumPixel_1 = (x + xsize - 1) & 15;
   \   00000088   0F8003E2           AND      R8,R3,#0xF
   \   0000008C   297281E0           ADD      R7,R1,R9, LSR #+4
   \   00000090   0F1009E2           AND      R1,R9,#0xF
    313                //
    314                // First DWORD
    315                //
    316                if (NumPixel_0) {
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   2600000A           BEQ      ??_DrawBitLine1BPP_3
    317                  ColorMask = 0;
   \   0000009C   0000A0E3           MOV      R0,#+0
    318                  AndMask = ~(0xFFFFFFFF << (2 * NumPixel_0));
   \   000000A0   0030E0E1           MVN      R3,R0
   \   000000A4   8190A0E1           LSL      R9,R1,#+1
   \   000000A8   1399E0E1           MVN      R9,R3, LSL R9
    319                  if ((16 - NumPixel_0) > xsize) {
   \   000000AC   10A061E2           RSB      R10,R1,#+16
   \   000000B0   0A0056E1           CMP      R6,R10
   \   000000B4   040000AA           BGE      ??_DrawBitLine1BPP_4
    320                    AndMask |= ~(0xFFFFFFFF >> (2 * (15 - NumPixel_1)));
   \   000000B8   08A0A0E1           MOV      R10,R8
   \   000000BC   0FA06AE2           RSB      R10,R10,#+15
   \   000000C0   8AA0A0E1           LSL      R10,R10,#+1
   \   000000C4   333AE0E1           MVN      R3,R3, LSR R10
   \   000000C8   099083E1           ORR      R9,R3,R9
    321                  }
    322                  for (i = NumPixel_0; (i < 16) && xsize; i++, xsize--) {
   \                     ??_DrawBitLine1BPP_4:
   \   000000CC   0130A0E1           MOV      R3,R1
   \   000000D0   8010A0E3           MOV      R1,#+128
   \   000000D4   080000EA           B        ??_DrawBitLine1BPP_5
    323                    Index = *p & (0x80 >> Diff) ? Index1 : Index0;
    324                    if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_6:
   \   000000D8   015085E2           ADD      R5,R5,#+1
    325                      Diff = 0;
    326                      p++;
    327                    }
    328                    ColorMask |= Index << (2 * i);
   \   000000DC   FFA00AE2           AND      R10,R10,#0xFF
   \   000000E0   83B0A0E1           LSL      R11,R3,#+1
   \   000000E4   080055E3           CMP      R5,#+8
   \   000000E8   1A0B80E1           ORR      R0,R0,R10, LSL R11
   \   000000EC   0050A003           MOVEQ    R5,#+0
   \   000000F0   01408402           ADDEQ    R4,R4,#+1
   \   000000F4   013083E2           ADD      R3,R3,#+1
   \   000000F8   016046E2           SUB      R6,R6,#+1
   \                     ??_DrawBitLine1BPP_5:
   \   000000FC   100053E3           CMP      R3,#+16
   \   00000100   060000AA           BGE      ??_DrawBitLine1BPP_7
   \   00000104   000056E3           CMP      R6,#+0
   \   00000108   0400000A           BEQ      ??_DrawBitLine1BPP_7
   \   0000010C   00A0D4E5           LDRB     R10,[R4, #+0]
   \   00000110   51051AE1           TST      R10,R1, ASR R5
   \   00000114   02A0A011           MOVNE    R10,R2
   \   00000118   0EA0A001           MOVEQ    R10,LR
   \   0000011C   EDFFFFEA           B        ??_DrawBitLine1BPP_6
    329                  }
    330                  #if (LCD_ENDIAN_BIG == 1)
    331                    MIRROR(AndMask);
    332                    MIRROR(ColorMask);
    333                  #endif
    334                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    335                  Data &= AndMask;
    336                  Data |= ColorMask;
    337                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_7:
   \   00000120   00109CE5           LDR      R1,[R12, #+0]
   \   00000124   073191E7           LDR      R3,[R1, +R7, LSL #+2]
   \   00000128   033009E0           AND      R3,R9,R3
   \   0000012C   030080E1           ORR      R0,R0,R3
   \   00000130   070181E7           STR      R0,[R1, +R7, LSL #+2]
    338                  Off++;
   \   00000134   017087E2           ADD      R7,R7,#+1
    339                }
    340                //
    341                // Complete DWORDS
    342                //
    343                while (xsize >= 16) {
   \                     ??_DrawBitLine1BPP_3:
   \   00000138   100056E3           CMP      R6,#+16
   \   0000013C   160000BA           BLT      ??_DrawBitLine1BPP_8
    344                  ColorMask = 0;
   \                     ??_DrawBitLine1BPP_9:
   \   00000140   0090A0E3           MOV      R9,#+0
   \   00000144   0000A0E3           MOV      R0,#+0
    345                  for (i = 0; i < 16; i++) {
   \   00000148   1030A0E3           MOV      R3,#+16
   \   0000014C   8010A0E3           MOV      R1,#+128
    346                    Index = *p & (0x80 >> Diff) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_10:
   \   00000150   00A0D4E5           LDRB     R10,[R4, #+0]
   \   00000154   51051AE1           TST      R10,R1, ASR R5
   \   00000158   02A0A011           MOVNE    R10,R2
   \   0000015C   0EA0A001           MOVEQ    R10,LR
    347                    if (++Diff == 8) {
   \   00000160   015085E2           ADD      R5,R5,#+1
    348                      Diff = 0;
    349                      p++;
    350                    }
    351                    ColorMask |= Index << (2 * i);
   \   00000164   FFA00AE2           AND      R10,R10,#0xFF
   \   00000168   080055E3           CMP      R5,#+8
   \   0000016C   1A0980E1           ORR      R0,R0,R10, LSL R9
   \   00000170   0050A003           MOVEQ    R5,#+0
   \   00000174   01408402           ADDEQ    R4,R4,#+1
    352                  }
   \   00000178   029089E2           ADD      R9,R9,#+2
   \   0000017C   013053E2           SUBS     R3,R3,#+1
   \   00000180   F2FFFF1A           BNE      ??_DrawBitLine1BPP_10
    353                  #if (LCD_ENDIAN_BIG == 1)
    354                    MIRROR(ColorMask);
    355                  #endif
    356                  WRITE_MEM32(pContext->VRAMAddr, Off, ColorMask);
   \   00000184   00109CE5           LDR      R1,[R12, #+0]
    357                  Off++;
    358                  xsize -= 16;
   \   00000188   106046E2           SUB      R6,R6,#+16
   \   0000018C   070181E7           STR      R0,[R1, +R7, LSL #+2]
   \   00000190   017087E2           ADD      R7,R7,#+1
   \   00000194   100056E3           CMP      R6,#+16
   \   00000198   E8FFFFAA           BGE      ??_DrawBitLine1BPP_9
    359                }
    360                //
    361                // Last DWORD
    362                //
    363                if (xsize) {
   \                     ??_DrawBitLine1BPP_8:
   \   0000019C   000056E3           CMP      R6,#+0
   \   000001A0   6500000A           BEQ      ??_DrawBitLine1BPP_2
    364                  ColorMask = i = 0;
    365                  AndMask = 0xFFFFFFFC << (2 * NumPixel_1);
   \   000001A4   0310E0E3           MVN      R1,#+3
   \   000001A8   8880A0E1           LSL      R8,R8,#+1
   \   000001AC   1198A0E1           LSL      R9,R1,R8
   \   000001B0   0030A0E3           MOV      R3,#+0
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   8010A0E3           MOV      R1,#+128
    366                  while (xsize) {
    367                    Index = *p & (0x80 >> Diff) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_11:
   \   000001BC   0080D4E5           LDRB     R8,[R4, #+0]
   \   000001C0   510518E1           TST      R8,R1, ASR R5
   \   000001C4   02A0A011           MOVNE    R10,R2
   \   000001C8   0EA0A001           MOVEQ    R10,LR
    368                    if (++Diff == 8) {
   \   000001CC   015085E2           ADD      R5,R5,#+1
   \   000001D0   080055E3           CMP      R5,#+8
    369                      Diff = 0;
    370                      p++;
    371                    }
    372                    ColorMask |= Index << (2 * i++);
   \   000001D4   FFA00AE2           AND      R10,R10,#0xFF
   \   000001D8   8380A0E1           LSL      R8,R3,#+1
   \   000001DC   0050A003           MOVEQ    R5,#+0
   \   000001E0   01408402           ADDEQ    R4,R4,#+1
   \   000001E4   1A0880E1           ORR      R0,R0,R10, LSL R8
   \   000001E8   013083E2           ADD      R3,R3,#+1
    373                    xsize--;
   \   000001EC   016056E2           SUBS     R6,R6,#+1
   \   000001F0   F1FFFF1A           BNE      ??_DrawBitLine1BPP_11
    374                  }
    375                  #if (LCD_ENDIAN_BIG == 1)
    376                    MIRROR(AndMask);
    377                    MIRROR(ColorMask);
    378                  #endif
    379                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    380                  Data &= AndMask;
    381                  Data |= ColorMask;
    382                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000001F4   00109CE5           LDR      R1,[R12, #+0]
   \   000001F8   072191E7           LDR      R2,[R1, +R7, LSL #+2]
   \   000001FC   022009E0           AND      R2,R9,R2
   \   00000200   020080E1           ORR      R0,R0,R2
   \   00000204   070181E7           STR      R0,[R1, +R7, LSL #+2]
   \   00000208   4B0000EA           B        ??_DrawBitLine1BPP_2
    383                }
    384              }
    385            } else {
    386              switch (Mode) {
   \                     ??_DrawBitLine1BPP_0:
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   2100000A           BEQ      ??_DrawBitLine1BPP_12
   \   00000214   4800003A           BCC      ??_DrawBitLine1BPP_2
   \   00000218   030050E3           CMP      R0,#+3
   \   0000021C   1E00000A           BEQ      ??_DrawBitLine1BPP_12
   \   00000220   4500002A           BCS      ??_DrawBitLine1BPP_2
    387              case LCD_DRAWMODE_TRANS:
    388                do {
    389                  if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_13:
   \   00000224   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000228   8010A0E3           MOV      R1,#+128
   \   0000022C   510510E1           TST      R0,R1, ASR R5
   \   00000230   1100000A           BEQ      ??_DrawBitLine1BPP_14
    390                    _SetPixelIndex(pDevice, x, y, Index1);
   \   00000234   080097E5           LDR      R0,[R7, #+8]
   \   00000238   01C0A0E3           MOV      R12,#+1
   \   0000023C   141090E5           LDR      R1,[R0, #+20]
   \   00000240   49C10CE0           AND      R12,R12,R9, ASR #+2
   \   00000244   C111A0E1           ASR      R1,R1,#+3
   \   00000248   910803E0           MUL      R3,R1,R8
   \   0000024C   8CC1A0E1           LSL      R12,R12,#+3
   \   00000250   A91183E0           ADD      R1,R3,R9, LSR #+3
   \   00000254   033009E2           AND      R3,R9,#0x3
   \   00000258   000090E5           LDR      R0,[R0, #+0]
   \   0000025C   83308CE0           ADD      R3,R12,R3, LSL #+1
   \   00000260   8110A0E1           LSL      R1,R1,#+1
   \   00000264   B0C091E1           LDRH     R12,[R1, +R0]
   \   00000268   03E0A0E3           MOV      LR,#+3
   \   0000026C   1EE3A0E1           LSL      LR,LR,R3
   \   00000270   0EC0CCE1           BIC      R12,R12,LR
   \   00000274   12338CE1           ORR      R3,R12,R2, LSL R3
   \   00000278   B03081E1           STRH     R3,[R1, +R0]
    391                  }
    392                  x++;
    393                  if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_14:
   \   0000027C   015085E2           ADD      R5,R5,#+1
   \   00000280   080055E3           CMP      R5,#+8
    394                    Diff = 0;
   \   00000284   0050A003           MOVEQ    R5,#+0
    395                    p++;
   \   00000288   01408402           ADDEQ    R4,R4,#+1
   \   0000028C   019089E2           ADD      R9,R9,#+1
    396                  }
    397                } while (--xsize);
   \   00000290   016056E2           SUBS     R6,R6,#+1
   \   00000294   E2FFFF1A           BNE      ??_DrawBitLine1BPP_13
   \   00000298   270000EA           B        ??_DrawBitLine1BPP_2
    398                break;
    399              case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    400              case LCD_DRAWMODE_XOR:
    401                IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_12:
   \   0000029C   100097E5           LDR      R0,[R7, #+16]
   \   000002A0   080090E5           LDR      R0,[R0, #+8]
   \   000002A4   30FF2FE1           BLX      R0
   \   000002A8   00B0A0E1           MOV      R11,R0
   \   000002AC   8010A0E3           MOV      R1,#+128
    402                do {
    403                  if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_15:
   \   000002B0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000002B4   510510E1           TST      R0,R1, ASR R5
   \   000002B8   1800000A           BEQ      ??_DrawBitLine1BPP_16
    404                    int Pixel = _GetPixelIndex(pDevice, x, y);
   \   000002BC   080097E5           LDR      R0,[R7, #+8]
   \   000002C0   0130A0E3           MOV      R3,#+1
   \   000002C4   493103E0           AND      R3,R3,R9, ASR #+2
   \   000002C8   032009E2           AND      R2,R9,#0x3
   \   000002CC   8331A0E1           LSL      R3,R3,#+3
   \   000002D0   14C090E5           LDR      R12,[R0, #+20]
   \   000002D4   82A083E0           ADD      R10,R3,R2, LSL #+1
   \   000002D8   A931A0E1           LSR      R3,R9,#+3
   \   000002DC   CCC1A0E1           ASR      R12,R12,#+3
   \   000002E0   9C382EE0           MLA      LR,R12,R8,R3
   \   000002E4   00C090E5           LDR      R12,[R0, #+0]
   \   000002E8   0320A0E3           MOV      R2,#+3
   \   000002EC   8EC08CE0           ADD      R12,R12,LR, LSL #+1
    405                    _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
   \   000002F0   14E090E5           LDR      LR,[R0, #+20]
   \   000002F4   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   000002F8   CEE1A0E1           ASR      LR,LR,#+3
   \   000002FC   9E3823E0           MLA      R3,LR,R8,R3
   \   00000300   000090E5           LDR      R0,[R0, #+0]
   \   00000304   8330A0E1           LSL      R3,R3,#+1
   \   00000308   B0E093E1           LDRH     LR,[R3, +R0]
   \   0000030C   12CA0CE0           AND      R12,R12,R2, LSL R10
   \   00000310   122ACEE1           BIC      R2,LR,R2, LSL R10
   \   00000314   5CCA2BE0           EOR      R12,R11,R12, ASR R10
   \   00000318   1C2A82E1           ORR      R2,R2,R12, LSL R10
   \   0000031C   B02083E1           STRH     R2,[R3, +R0]
    406                  }
    407                  x++;
    408                  if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_16:
   \   00000320   015085E2           ADD      R5,R5,#+1
   \   00000324   080055E3           CMP      R5,#+8
    409                    Diff = 0;
   \   00000328   0050A003           MOVEQ    R5,#+0
    410                    p++;
   \   0000032C   01408402           ADDEQ    R4,R4,#+1
   \   00000330   019089E2           ADD      R9,R9,#+1
    411                  }
    412                } while (--xsize);
   \   00000334   016056E2           SUBS     R6,R6,#+1
   \   00000338   DCFFFF1A           BNE      ??_DrawBitLine1BPP_15
    413                break;
    414              }
    415            }
    416          }
   \                     ??_DrawBitLine1BPP_2:
   \   0000033C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000340   F08FBDE8           POP      {R4-R11,PC}      ;; return
    417          
    418          /*********************************************************************
    419          *
    420          *       Draw Bitmap 2 BPP, not optimized
    421          */

   \                                 In section .text, align 4, keep-with-next
    422          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    423            LCD_PIXELINDEX Pixels = *p;
    424            int CurrentPixel = Diff;
    425            x += Diff;
    426            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R5,??DataTable14
   \   00000008   24C09DE5           LDR      R12,[SP, #+36]
   \   0000000C   1050D5E5           LDRB     R5,[R5, #+16]
   \   00000010   28409DE5           LDR      R4,[SP, #+40]
   \   00000014   00E0D3E5           LDRB     LR,[R3, #+0]
   \   00000018   01108CE0           ADD      R1,R12,R1
   \   0000001C   035015E2           ANDS     R5,R5,#0x3
   \   00000020   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000024   025055E2           SUBS     R5,R5,#+2
   \   00000028   4400000A           BEQ      ??_DrawBitLine2BPP_1
   \   0000002C   F08FBDE8           POP      {R4-R11,PC}
    427            case 0:
    428              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000030   2C609DE5           LDR      R6,[SP, #+44]
   \   00000034   C050A0E3           MOV      R5,#+192
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   2000000A           BEQ      ??_DrawBitLine2BPP_2
    429                do {
    430                  int Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_3:
   \   00000040   03606CE2           RSB      R6,R12,#+3
   \   00000044   8660A0E1           LSL      R6,R6,#+1
    431                  int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    432                  LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
   \   00000048   0670A0E1           MOV      R7,R6
   \   0000004C   067067E2           RSB      R7,R7,#+6
   \   00000050   55770EE0           AND      R7,LR,R5, ASR R7
   \   00000054   3766A0E1           LSR      R6,R7,R6
   \   00000058   2C709DE5           LDR      R7,[SP, #+44]
    433                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   0000005C   088090E5           LDR      R8,[R0, #+8]
   \   00000060   066197E7           LDR      R6,[R7, +R6, LSL #+2]
   \   00000064   147098E5           LDR      R7,[R8, #+20]
   \   00000068   01A0A0E3           MOV      R10,#+1
   \   0000006C   C771A0E1           ASR      R7,R7,#+3
   \   00000070   970209E0           MUL      R9,R7,R2
   \   00000074   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   00000078   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   0000007C   037001E2           AND      R7,R1,#0x3
   \   00000080   8AA1A0E1           LSL      R10,R10,#+3
   \   00000084   008098E5           LDR      R8,[R8, #+0]
   \   00000088   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   0000008C   8990A0E1           LSL      R9,R9,#+1
   \   00000090   B8A099E1           LDRH     R10,[R9, +R8]
   \   00000094   03B0A0E3           MOV      R11,#+3
    434                  if (++CurrentPixel == 4) {
   \   00000098   01C08CE2           ADD      R12,R12,#+1
   \   0000009C   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   000000A0   16678AE1           ORR      R6,R10,R6, LSL R7
   \   000000A4   B86089E1           STRH     R6,[R9, +R8]
   \   000000A8   04005CE3           CMP      R12,#+4
    435                    CurrentPixel = 0;
   \   000000AC   00C0A003           MOVEQ    R12,#+0
    436                    Pixels = *(++p);
   \   000000B0   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000B4   011081E2           ADD      R1,R1,#+1
    437                  }
    438          		  } while (--xsize);
   \   000000B8   014054E2           SUBS     R4,R4,#+1
   \   000000BC   DFFFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   000000C0   F08FBDE8           POP      {R4-R11,PC}
    439              } else {
    440                do {
    441                  int Shift = (3 - CurrentPixel) << 1;
    442                  int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    443                  _SetPixelIndex(pDevice, x++, y, Index);
   \                     ??_DrawBitLine2BPP_2:
   \   000000C4   089090E5           LDR      R9,[R0, #+8]
   \   000000C8   01A0A0E3           MOV      R10,#+1
   \   000000CC   147099E5           LDR      R7,[R9, #+20]
   \   000000D0   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   000000D4   C771A0E1           ASR      R7,R7,#+3
   \   000000D8   970208E0           MUL      R8,R7,R2
   \   000000DC   037001E2           AND      R7,R1,#0x3
   \   000000E0   A18188E0           ADD      R8,R8,R1, LSR #+3
   \   000000E4   8AA1A0E1           LSL      R10,R10,#+3
   \   000000E8   009099E5           LDR      R9,[R9, #+0]
   \   000000EC   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   000000F0   8880A0E1           LSL      R8,R8,#+1
   \   000000F4   B9A098E1           LDRH     R10,[R8, +R9]
   \   000000F8   03B0A0E3           MOV      R11,#+3
   \   000000FC   03606CE2           RSB      R6,R12,#+3
   \   00000100   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   00000104   8660A0E1           LSL      R6,R6,#+1
   \   00000108   06B0A0E1           MOV      R11,R6
   \   0000010C   06B06BE2           RSB      R11,R11,#+6
   \   00000110   55BB0EE0           AND      R11,LR,R5, ASR R11
   \   00000114   3B66A0E1           LSR      R6,R11,R6
   \   00000118   16678AE1           ORR      R6,R10,R6, LSL R7
    444                  if (++CurrentPixel == 4) {
   \   0000011C   01C08CE2           ADD      R12,R12,#+1
   \   00000120   B96088E1           STRH     R6,[R8, +R9]
   \   00000124   04005CE3           CMP      R12,#+4
    445                    CurrentPixel = 0;
   \   00000128   00C0A003           MOVEQ    R12,#+0
    446                    Pixels = *(++p);
   \   0000012C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000130   011081E2           ADD      R1,R1,#+1
    447                  }
    448          		  } while (--xsize);
   \   00000134   014054E2           SUBS     R4,R4,#+1
   \   00000138   E1FFFF1A           BNE      ??_DrawBitLine2BPP_2
   \   0000013C   F08FBDE8           POP      {R4-R11,PC}
    449              }
    450              break;
    451            case LCD_DRAWMODE_TRANS:
    452              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   00000140   2C609DE5           LDR      R6,[SP, #+44]
   \   00000144   C050A0E3           MOV      R5,#+192
   \   00000148   000056E3           CMP      R6,#+0
   \   0000014C   2100000A           BEQ      ??_DrawBitLine2BPP_4
    453                do {
    454                  int Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   00000150   03606CE2           RSB      R6,R12,#+3
   \   00000154   8660A0E1           LSL      R6,R6,#+1
    455                  int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000158   0670A0E1           MOV      R7,R6
   \   0000015C   067067E2           RSB      R7,R7,#+6
   \   00000160   55770EE0           AND      R7,LR,R5, ASR R7
   \   00000164   3766B0E1           LSRS     R6,R7,R6
    456                  if (Index) {
   \   00000168   1200000A           BEQ      ??_DrawBitLine2BPP_6
    457                    LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
   \   0000016C   2C709DE5           LDR      R7,[SP, #+44]
    458                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000170   088090E5           LDR      R8,[R0, #+8]
   \   00000174   066197E7           LDR      R6,[R7, +R6, LSL #+2]
   \   00000178   147098E5           LDR      R7,[R8, #+20]
   \   0000017C   01A0A0E3           MOV      R10,#+1
   \   00000180   C771A0E1           ASR      R7,R7,#+3
   \   00000184   970209E0           MUL      R9,R7,R2
   \   00000188   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   0000018C   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   00000190   037001E2           AND      R7,R1,#0x3
   \   00000194   8AA1A0E1           LSL      R10,R10,#+3
   \   00000198   008098E5           LDR      R8,[R8, #+0]
   \   0000019C   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   000001A0   8990A0E1           LSL      R9,R9,#+1
   \   000001A4   B8A099E1           LDRH     R10,[R9, +R8]
   \   000001A8   03B0A0E3           MOV      R11,#+3
   \   000001AC   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   000001B0   16678AE1           ORR      R6,R10,R6, LSL R7
   \   000001B4   B86089E1           STRH     R6,[R9, +R8]
    459                  }
    460                  x++;
    461                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_6:
   \   000001B8   01C08CE2           ADD      R12,R12,#+1
   \   000001BC   04005CE3           CMP      R12,#+4
    462                    CurrentPixel = 0;
   \   000001C0   00C0A003           MOVEQ    R12,#+0
    463                    Pixels = *(++p);
   \   000001C4   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001C8   011081E2           ADD      R1,R1,#+1
    464                  }
    465          		  } while (--xsize);
   \   000001CC   014054E2           SUBS     R4,R4,#+1
   \   000001D0   DEFFFF1A           BNE      ??_DrawBitLine2BPP_5
   \   000001D4   F08FBDE8           POP      {R4-R11,PC}
    466              } else {
    467                do {
    468                  int Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   000001D8   03606CE2           RSB      R6,R12,#+3
   \   000001DC   8660A0E1           LSL      R6,R6,#+1
    469                  int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   000001E0   0670A0E1           MOV      R7,R6
   \   000001E4   067067E2           RSB      R7,R7,#+6
   \   000001E8   55770EE0           AND      R7,LR,R5, ASR R7
   \   000001EC   3766B0E1           LSRS     R6,R7,R6
    470                  if (Index) {
   \   000001F0   1000000A           BEQ      ??_DrawBitLine2BPP_7
    471                    _SetPixelIndex(pDevice, x, y, Index);
   \   000001F4   088090E5           LDR      R8,[R0, #+8]
   \   000001F8   01A0A0E3           MOV      R10,#+1
   \   000001FC   147098E5           LDR      R7,[R8, #+20]
   \   00000200   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   00000204   C771A0E1           ASR      R7,R7,#+3
   \   00000208   970209E0           MUL      R9,R7,R2
   \   0000020C   037001E2           AND      R7,R1,#0x3
   \   00000210   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   00000214   8AA1A0E1           LSL      R10,R10,#+3
   \   00000218   008098E5           LDR      R8,[R8, #+0]
   \   0000021C   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   00000220   8990A0E1           LSL      R9,R9,#+1
   \   00000224   B8A099E1           LDRH     R10,[R9, +R8]
   \   00000228   03B0A0E3           MOV      R11,#+3
   \   0000022C   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   00000230   16678AE1           ORR      R6,R10,R6, LSL R7
   \   00000234   B86089E1           STRH     R6,[R9, +R8]
    472                  }
    473                  x++;
    474                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   00000238   01C08CE2           ADD      R12,R12,#+1
   \   0000023C   04005CE3           CMP      R12,#+4
    475                    CurrentPixel = 0;
   \   00000240   00C0A003           MOVEQ    R12,#+0
    476                    Pixels = *(++p);
   \   00000244   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000248   011081E2           ADD      R1,R1,#+1
    477                  }
    478          		  } while (--xsize);
   \   0000024C   014054E2           SUBS     R4,R4,#+1
   \   00000250   E0FFFF1A           BNE      ??_DrawBitLine2BPP_4
    479              }
    480              break;
    481            }
    482          }
   \   00000254   F08FBDE8           POP      {R4-R11,PC}      ;; return
    483          
    484          /*********************************************************************
    485          *
    486          *       Draw Bitmap 4 BPP
    487          */

   \                                 In section .text, align 4, keep-with-next
    488          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    489            LCD_PIXELINDEX Pixels = *p;
    490            int CurrentPixel = Diff;
    491            x += Diff;
    492            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R5,??DataTable14
   \   00000008   24C09DE5           LDR      R12,[SP, #+36]
   \   0000000C   1050D5E5           LDRB     R5,[R5, #+16]
   \   00000010   28409DE5           LDR      R4,[SP, #+40]
   \   00000014   00E0D3E5           LDRB     LR,[R3, #+0]
   \   00000018   01108CE0           ADD      R1,R12,R1
   \   0000001C   035015E2           ANDS     R5,R5,#0x3
   \   00000020   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000024   025055E2           SUBS     R5,R5,#+2
   \   00000028   4400000A           BEQ      ??_DrawBitLine4BPP_1
   \   0000002C   F08FBDE8           POP      {R4-R11,PC}
   \                     ??_DrawBitLine4BPP_0:
   \   00000030   2C609DE5           LDR      R6,[SP, #+44]
   \   00000034   F050A0E3           MOV      R5,#+240
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   2000000A           BEQ      ??_DrawBitLine4BPP_2
    493            case 0:
    494              if (pTrans) {
    495                do {
    496                  int Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_3:
   \   00000040   01606CE2           RSB      R6,R12,#+1
   \   00000044   0661A0E1           LSL      R6,R6,#+2
    497                  int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    498                  LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
   \   00000048   0670A0E1           MOV      R7,R6
   \   0000004C   047067E2           RSB      R7,R7,#+4
   \   00000050   55770EE0           AND      R7,LR,R5, ASR R7
   \   00000054   3766A0E1           LSR      R6,R7,R6
   \   00000058   2C709DE5           LDR      R7,[SP, #+44]
    499                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   0000005C   088090E5           LDR      R8,[R0, #+8]
   \   00000060   066197E7           LDR      R6,[R7, +R6, LSL #+2]
   \   00000064   147098E5           LDR      R7,[R8, #+20]
   \   00000068   01A0A0E3           MOV      R10,#+1
   \   0000006C   C771A0E1           ASR      R7,R7,#+3
   \   00000070   970209E0           MUL      R9,R7,R2
   \   00000074   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   00000078   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   0000007C   037001E2           AND      R7,R1,#0x3
   \   00000080   8AA1A0E1           LSL      R10,R10,#+3
   \   00000084   008098E5           LDR      R8,[R8, #+0]
   \   00000088   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   0000008C   8990A0E1           LSL      R9,R9,#+1
   \   00000090   B8A099E1           LDRH     R10,[R9, +R8]
   \   00000094   03B0A0E3           MOV      R11,#+3
    500                  if (++CurrentPixel == 2) {
   \   00000098   01C08CE2           ADD      R12,R12,#+1
   \   0000009C   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   000000A0   16678AE1           ORR      R6,R10,R6, LSL R7
   \   000000A4   B86089E1           STRH     R6,[R9, +R8]
   \   000000A8   02005CE3           CMP      R12,#+2
    501                    CurrentPixel = 0;
   \   000000AC   00C0A003           MOVEQ    R12,#+0
    502                    Pixels = *(++p);
   \   000000B0   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000B4   011081E2           ADD      R1,R1,#+1
    503                  }
    504                } while (--xsize);
   \   000000B8   014054E2           SUBS     R4,R4,#+1
   \   000000BC   DFFFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   000000C0   F08FBDE8           POP      {R4-R11,PC}
    505              } else {
    506                do {
    507                  int Shift = (1 - CurrentPixel) << 2;
    508                  int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    509                  _SetPixelIndex(pDevice, x++, y, Index);
   \                     ??_DrawBitLine4BPP_2:
   \   000000C4   089090E5           LDR      R9,[R0, #+8]
   \   000000C8   01A0A0E3           MOV      R10,#+1
   \   000000CC   147099E5           LDR      R7,[R9, #+20]
   \   000000D0   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   000000D4   C771A0E1           ASR      R7,R7,#+3
   \   000000D8   970208E0           MUL      R8,R7,R2
   \   000000DC   037001E2           AND      R7,R1,#0x3
   \   000000E0   A18188E0           ADD      R8,R8,R1, LSR #+3
   \   000000E4   8AA1A0E1           LSL      R10,R10,#+3
   \   000000E8   009099E5           LDR      R9,[R9, #+0]
   \   000000EC   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   000000F0   8880A0E1           LSL      R8,R8,#+1
   \   000000F4   B9A098E1           LDRH     R10,[R8, +R9]
   \   000000F8   03B0A0E3           MOV      R11,#+3
   \   000000FC   01606CE2           RSB      R6,R12,#+1
   \   00000100   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   00000104   0661A0E1           LSL      R6,R6,#+2
   \   00000108   06B0A0E1           MOV      R11,R6
   \   0000010C   04B06BE2           RSB      R11,R11,#+4
   \   00000110   55BB0EE0           AND      R11,LR,R5, ASR R11
   \   00000114   3B66A0E1           LSR      R6,R11,R6
   \   00000118   16678AE1           ORR      R6,R10,R6, LSL R7
    510                  if (++CurrentPixel == 2) {
   \   0000011C   01C08CE2           ADD      R12,R12,#+1
   \   00000120   B96088E1           STRH     R6,[R8, +R9]
   \   00000124   02005CE3           CMP      R12,#+2
    511                    CurrentPixel = 0;
   \   00000128   00C0A003           MOVEQ    R12,#+0
    512                    Pixels = *(++p);
   \   0000012C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000130   011081E2           ADD      R1,R1,#+1
    513                  }
    514                } while (--xsize);
   \   00000134   014054E2           SUBS     R4,R4,#+1
   \   00000138   E1FFFF1A           BNE      ??_DrawBitLine4BPP_2
   \   0000013C   F08FBDE8           POP      {R4-R11,PC}
    515              }
    516              break;
    517            case LCD_DRAWMODE_TRANS:
    518              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   00000140   2C609DE5           LDR      R6,[SP, #+44]
   \   00000144   F050A0E3           MOV      R5,#+240
   \   00000148   000056E3           CMP      R6,#+0
   \   0000014C   2100000A           BEQ      ??_DrawBitLine4BPP_4
    519                do {
    520                  int Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   00000150   01606CE2           RSB      R6,R12,#+1
   \   00000154   0661A0E1           LSL      R6,R6,#+2
    521                  int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000158   0670A0E1           MOV      R7,R6
   \   0000015C   047067E2           RSB      R7,R7,#+4
   \   00000160   55770EE0           AND      R7,LR,R5, ASR R7
   \   00000164   3766B0E1           LSRS     R6,R7,R6
    522                  if (Index) {
   \   00000168   1200000A           BEQ      ??_DrawBitLine4BPP_6
    523                    LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
   \   0000016C   2C709DE5           LDR      R7,[SP, #+44]
    524                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000170   088090E5           LDR      R8,[R0, #+8]
   \   00000174   066197E7           LDR      R6,[R7, +R6, LSL #+2]
   \   00000178   147098E5           LDR      R7,[R8, #+20]
   \   0000017C   01A0A0E3           MOV      R10,#+1
   \   00000180   C771A0E1           ASR      R7,R7,#+3
   \   00000184   970209E0           MUL      R9,R7,R2
   \   00000188   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   0000018C   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   00000190   037001E2           AND      R7,R1,#0x3
   \   00000194   8AA1A0E1           LSL      R10,R10,#+3
   \   00000198   008098E5           LDR      R8,[R8, #+0]
   \   0000019C   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   000001A0   8990A0E1           LSL      R9,R9,#+1
   \   000001A4   B8A099E1           LDRH     R10,[R9, +R8]
   \   000001A8   03B0A0E3           MOV      R11,#+3
   \   000001AC   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   000001B0   16678AE1           ORR      R6,R10,R6, LSL R7
   \   000001B4   B86089E1           STRH     R6,[R9, +R8]
    525                  }
    526                  x++;
    527                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_6:
   \   000001B8   01C08CE2           ADD      R12,R12,#+1
   \   000001BC   02005CE3           CMP      R12,#+2
    528                    CurrentPixel = 0;
   \   000001C0   00C0A003           MOVEQ    R12,#+0
    529                    Pixels = *(++p);
   \   000001C4   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001C8   011081E2           ADD      R1,R1,#+1
    530                  }
    531                } while (--xsize);
   \   000001CC   014054E2           SUBS     R4,R4,#+1
   \   000001D0   DEFFFF1A           BNE      ??_DrawBitLine4BPP_5
   \   000001D4   F08FBDE8           POP      {R4-R11,PC}
    532              } else {
    533                do {
    534                  int Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   000001D8   01606CE2           RSB      R6,R12,#+1
   \   000001DC   0661A0E1           LSL      R6,R6,#+2
    535                  int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   000001E0   0670A0E1           MOV      R7,R6
   \   000001E4   047067E2           RSB      R7,R7,#+4
   \   000001E8   55770EE0           AND      R7,LR,R5, ASR R7
   \   000001EC   3766B0E1           LSRS     R6,R7,R6
    536                  if (Index) {
   \   000001F0   1000000A           BEQ      ??_DrawBitLine4BPP_7
    537                    _SetPixelIndex(pDevice, x, y, Index);
   \   000001F4   088090E5           LDR      R8,[R0, #+8]
   \   000001F8   01A0A0E3           MOV      R10,#+1
   \   000001FC   147098E5           LDR      R7,[R8, #+20]
   \   00000200   41A10AE0           AND      R10,R10,R1, ASR #+2
   \   00000204   C771A0E1           ASR      R7,R7,#+3
   \   00000208   970209E0           MUL      R9,R7,R2
   \   0000020C   037001E2           AND      R7,R1,#0x3
   \   00000210   A19189E0           ADD      R9,R9,R1, LSR #+3
   \   00000214   8AA1A0E1           LSL      R10,R10,#+3
   \   00000218   008098E5           LDR      R8,[R8, #+0]
   \   0000021C   87708AE0           ADD      R7,R10,R7, LSL #+1
   \   00000220   8990A0E1           LSL      R9,R9,#+1
   \   00000224   B8A099E1           LDRH     R10,[R9, +R8]
   \   00000228   03B0A0E3           MOV      R11,#+3
   \   0000022C   1BA7CAE1           BIC      R10,R10,R11, LSL R7
   \   00000230   16678AE1           ORR      R6,R10,R6, LSL R7
   \   00000234   B86089E1           STRH     R6,[R9, +R8]
    538                  }
    539                  x++;
    540                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   00000238   01C08CE2           ADD      R12,R12,#+1
   \   0000023C   02005CE3           CMP      R12,#+2
    541                    CurrentPixel = 0;
   \   00000240   00C0A003           MOVEQ    R12,#+0
    542                    Pixels = *(++p);
   \   00000244   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000248   011081E2           ADD      R1,R1,#+1
    543                  }
    544                } while (--xsize);
   \   0000024C   014054E2           SUBS     R4,R4,#+1
   \   00000250   E0FFFF1A           BNE      ??_DrawBitLine4BPP_4
    545              }
    546              break;
    547            }
    548          }
   \   00000254   F08FBDE8           POP      {R4-R11,PC}      ;; return
    549          
    550          /*********************************************************************
    551          *
    552          *       Draw Bitmap 8 BPP
    553          */

   \                                 In section .text, align 4, keep-with-next
    554          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    555            DRIVER_CONTEXT * pContext;
    556            U32 Data, ColorMask, AndMask;
    557            int Off, NumPixel_0, NumPixel_1, i;
    558            U8 Index;
    559          
    560            if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
   \   00000004   ........           LDR      R4,??DataTable14
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   1040D4E5           LDRB     R4,[R4, #+16]
   \   00000010   20C09DE5           LDR      R12,[SP, #+32]
   \   00000014   24E09DE5           LDR      LR,[SP, #+36]
   \   00000018   020014E3           TST      R4,#0x2
   \   0000001C   CA00001A           BNE      ??_DrawBitLine8BPP_0
    561              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   080090E5           LDR      R0,[R0, #+8]
    562              Off = XY2OFF32(pContext->vxSizePhys, x, y);
    563              NumPixel_0 = x & 15;
    564              NumPixel_1 = (x + xsize - 1) & 15;
    565              if (pTrans) {
   \   00000024   00005EE3           CMP      LR,#+0
   \   00000028   144090E5           LDR      R4,[R0, #+20]
   \   0000002C   4442A0E1           ASR      R4,R4,#+4
   \   00000030   940202E0           MUL      R2,R4,R2
   \   00000034   0F4001E2           AND      R4,R1,#0xF
   \   00000038   212282E0           ADD      R2,R2,R1, LSR #+4
   \   0000003C   01108CE0           ADD      R1,R12,R1
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   0F5001E2           AND      R5,R1,#0xF
   \   00000048   6500000A           BEQ      ??_DrawBitLine8BPP_1
    566                //
    567                // First DWORD
    568                //
    569                if (NumPixel_0) {
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   1500000A           BEQ      ??_DrawBitLine8BPP_2
    570                  ColorMask = 0;
   \   00000054   0060A0E3           MOV      R6,#+0
    571                  AndMask = ~(0xFFFFFFFF << (2 * NumPixel_0));
   \   00000058   0610E0E1           MVN      R1,R6
   \   0000005C   8470A0E1           LSL      R7,R4,#+1
   \   00000060   1117E0E1           MVN      R1,R1, LSL R7
    572                  for (i = NumPixel_0; (i < 16) && xsize; i++, xsize--) {
   \   00000064   060000EA           B        ??_DrawBitLine8BPP_3
    573                    Index = *(pTrans + *p++);
   \                     ??_DrawBitLine8BPP_4:
   \   00000068   0170D3E4           LDRB     R7,[R3], #+1
    574                    ColorMask |= Index << (2 * i);
   \   0000006C   8480A0E1           LSL      R8,R4,#+1
    575                  }
   \   00000070   014084E2           ADD      R4,R4,#+1
   \   00000074   07719EE7           LDR      R7,[LR, +R7, LSL #+2]
   \   00000078   01C04CE2           SUB      R12,R12,#+1
   \   0000007C   FF7007E2           AND      R7,R7,#0xFF
   \   00000080   176886E1           ORR      R6,R6,R7, LSL R8
   \                     ??_DrawBitLine8BPP_3:
   \   00000084   100054E3           CMP      R4,#+16
   \   00000088   010000AA           BGE      ??_DrawBitLine8BPP_5
   \   0000008C   00005CE3           CMP      R12,#+0
   \   00000090   F4FFFF1A           BNE      ??_DrawBitLine8BPP_4
    576                  #if (LCD_ENDIAN_BIG == 1)
    577                    MIRROR(AndMask);
    578                    MIRROR(ColorMask);
    579                  #endif
    580                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    581                  Data &= AndMask;
    582                  Data |= ColorMask;
    583                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine8BPP_5:
   \   00000094   004090E5           LDR      R4,[R0, #+0]
   \   00000098   027194E7           LDR      R7,[R4, +R2, LSL #+2]
   \   0000009C   071001E0           AND      R1,R1,R7
   \   000000A0   011086E1           ORR      R1,R6,R1
   \   000000A4   021184E7           STR      R1,[R4, +R2, LSL #+2]
    584                  Off++;
   \   000000A8   012082E2           ADD      R2,R2,#+1
    585                }
    586                //
    587                // Complete DWORDS
    588                //
    589                while (xsize >= 16) {
   \                     ??_DrawBitLine8BPP_2:
   \   000000AC   10005CE3           CMP      R12,#+16
   \   000000B0   350000BA           BLT      ??_DrawBitLine8BPP_6
    590                  ColorMask =  *(pTrans + *p) |
    591                              (*(pTrans + *(p +  1)) <<  2) |
    592                              (*(pTrans + *(p +  2)) <<  4) |
    593                              (*(pTrans + *(p +  3)) <<  6) |
    594                              (*(pTrans + *(p +  4)) <<  8) |
    595                              (*(pTrans + *(p +  5)) << 10) |
    596                              (*(pTrans + *(p +  6)) << 12) |
    597                              (*(pTrans + *(p +  7)) << 14) |
    598                              (*(pTrans + *(p +  8)) << 16) |
    599                              (*(pTrans + *(p +  9)) << 18) |
    600                              (*(pTrans + *(p + 10)) << 20) |
    601                              (*(pTrans + *(p + 11)) << 22) |
    602                              (*(pTrans + *(p + 12)) << 24) |
    603                              (*(pTrans + *(p + 13)) << 26) |
    604                              (*(pTrans + *(p + 14)) << 28) |
    605                              (*(pTrans + *(p + 15)) << 30);
    606                  #if (LCD_ENDIAN_BIG == 1)
    607                    MIRROR(ColorMask);
    608                  #endif
    609                  WRITE_MEM32(pContext->VRAMAddr, Off, ColorMask);
   \                     ??_DrawBitLine8BPP_7:
   \   000000B4   0010D3E5           LDRB     R1,[R3, #+0]
   \   000000B8   0140D3E5           LDRB     R4,[R3, #+1]
   \   000000BC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000C0   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
    610                  p += 16;
    611                  Off++;
    612                  xsize -= 16;
   \   000000C4   10C04CE2           SUB      R12,R12,#+16
   \   000000C8   041181E1           ORR      R1,R1,R4, LSL #+2
   \   000000CC   0240D3E5           LDRB     R4,[R3, #+2]
   \   000000D0   10005CE3           CMP      R12,#+16
   \   000000D4   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   000000D8   041281E1           ORR      R1,R1,R4, LSL #+4
   \   000000DC   0340D3E5           LDRB     R4,[R3, #+3]
   \   000000E0   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   000000E4   041381E1           ORR      R1,R1,R4, LSL #+6
   \   000000E8   0440D3E5           LDRB     R4,[R3, #+4]
   \   000000EC   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   000000F0   041481E1           ORR      R1,R1,R4, LSL #+8
   \   000000F4   0540D3E5           LDRB     R4,[R3, #+5]
   \   000000F8   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   000000FC   041581E1           ORR      R1,R1,R4, LSL #+10
   \   00000100   0640D3E5           LDRB     R4,[R3, #+6]
   \   00000104   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000108   041681E1           ORR      R1,R1,R4, LSL #+12
   \   0000010C   0740D3E5           LDRB     R4,[R3, #+7]
   \   00000110   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000114   041781E1           ORR      R1,R1,R4, LSL #+14
   \   00000118   0840D3E5           LDRB     R4,[R3, #+8]
   \   0000011C   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000120   041881E1           ORR      R1,R1,R4, LSL #+16
   \   00000124   0940D3E5           LDRB     R4,[R3, #+9]
   \   00000128   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   0000012C   041981E1           ORR      R1,R1,R4, LSL #+18
   \   00000130   0A40D3E5           LDRB     R4,[R3, #+10]
   \   00000134   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000138   041A81E1           ORR      R1,R1,R4, LSL #+20
   \   0000013C   0B40D3E5           LDRB     R4,[R3, #+11]
   \   00000140   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000144   041B81E1           ORR      R1,R1,R4, LSL #+22
   \   00000148   0C40D3E5           LDRB     R4,[R3, #+12]
   \   0000014C   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000150   041C81E1           ORR      R1,R1,R4, LSL #+24
   \   00000154   0D40D3E5           LDRB     R4,[R3, #+13]
   \   00000158   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   0000015C   041D81E1           ORR      R1,R1,R4, LSL #+26
   \   00000160   0E40D3E5           LDRB     R4,[R3, #+14]
   \   00000164   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000168   041E81E1           ORR      R1,R1,R4, LSL #+28
   \   0000016C   0F40D3E5           LDRB     R4,[R3, #+15]
   \   00000170   103083E2           ADD      R3,R3,#+16
   \   00000174   04419EE7           LDR      R4,[LR, +R4, LSL #+2]
   \   00000178   041F81E1           ORR      R1,R1,R4, LSL #+30
   \   0000017C   004090E5           LDR      R4,[R0, #+0]
   \   00000180   021184E7           STR      R1,[R4, +R2, LSL #+2]
   \   00000184   012082E2           ADD      R2,R2,#+1
   \   00000188   C9FFFFAA           BGE      ??_DrawBitLine8BPP_7
    613                }
    614                //
    615                // Last DWORD
    616                //
    617                if (xsize) {
   \                     ??_DrawBitLine8BPP_6:
   \   0000018C   00005CE3           CMP      R12,#+0
   \   00000190   A500000A           BEQ      ??_DrawBitLine8BPP_8
    618                  ColorMask = i = 0;
    619                  AndMask = 0xFFFFFFFC << (2 * NumPixel_1);
   \   00000194   0310E0E3           MVN      R1,#+3
   \   00000198   8550A0E1           LSL      R5,R5,#+1
   \   0000019C   0040A0E3           MOV      R4,#+0
   \   000001A0   0060A0E3           MOV      R6,#+0
   \   000001A4   1115A0E1           LSL      R1,R1,R5
    620                  while (xsize) {
    621                    Index = *(pTrans + *p++);
   \                     ??_DrawBitLine8BPP_9:
   \   000001A8   0150D3E4           LDRB     R5,[R3], #+1
    622                    ColorMask |= Index << (2 * i++);
    623                    xsize--;
   \   000001AC   01C05CE2           SUBS     R12,R12,#+1
   \   000001B0   05719EE7           LDR      R7,[LR, +R5, LSL #+2]
   \   000001B4   8450A0E1           LSL      R5,R4,#+1
   \   000001B8   FF7007E2           AND      R7,R7,#0xFF
   \   000001BC   176586E1           ORR      R6,R6,R7, LSL R5
   \   000001C0   014084E2           ADD      R4,R4,#+1
   \   000001C4   F7FFFF1A           BNE      ??_DrawBitLine8BPP_9
    624                  }
    625                  #if (LCD_ENDIAN_BIG == 1)
    626                    MIRROR(AndMask);
    627                    MIRROR(ColorMask);
    628                  #endif
    629                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    630                  Data &= AndMask;
    631                  Data |= ColorMask;
    632                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine8BPP_10:
   \   000001C8   000090E5           LDR      R0,[R0, #+0]
   \   000001CC   04D08DE2           ADD      SP,SP,#+4
   \   000001D0   023190E7           LDR      R3,[R0, +R2, LSL #+2]
   \   000001D4   031001E0           AND      R1,R1,R3
   \   000001D8   011086E1           ORR      R1,R6,R1
   \   000001DC   021180E7           STR      R1,[R0, +R2, LSL #+2]
   \   000001E0   F083BDE8           POP      {R4-R9,PC}       ;; return
    633                }
    634              } else {
    635                //
    636                // First DWORD
    637                //
    638                if (NumPixel_0) {
   \                     ??_DrawBitLine8BPP_1:
   \   000001E4   000054E3           CMP      R4,#+0
   \   000001E8   1300000A           BEQ      ??_DrawBitLine8BPP_11
    639                  ColorMask = 0;
   \   000001EC   0060A0E3           MOV      R6,#+0
    640                  AndMask = ~(0xFFFFFFFF << (2 * NumPixel_0));
   \   000001F0   0610E0E1           MVN      R1,R6
   \   000001F4   84E0A0E1           LSL      LR,R4,#+1
   \   000001F8   111EE0E1           MVN      R1,R1, LSL LR
    641                  for (i = NumPixel_0; (i < 16) && xsize; i++, xsize--) {
   \   000001FC   040000EA           B        ??_DrawBitLine8BPP_12
    642                    Index = *(p++);
   \                     ??_DrawBitLine8BPP_13:
   \   00000200   0170D3E4           LDRB     R7,[R3], #+1
    643                    ColorMask |= Index << (2 * i);
   \   00000204   84E0A0E1           LSL      LR,R4,#+1
    644                  }
   \   00000208   014084E2           ADD      R4,R4,#+1
   \   0000020C   176E86E1           ORR      R6,R6,R7, LSL LR
   \   00000210   01C04CE2           SUB      R12,R12,#+1
   \                     ??_DrawBitLine8BPP_12:
   \   00000214   100054E3           CMP      R4,#+16
   \   00000218   010000AA           BGE      ??_DrawBitLine8BPP_14
   \   0000021C   00005CE3           CMP      R12,#+0
   \   00000220   F6FFFF1A           BNE      ??_DrawBitLine8BPP_13
    645                  #if (LCD_ENDIAN_BIG == 1)
    646                    MIRROR(AndMask);
    647                    MIRROR(ColorMask);
    648                  #endif
    649                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    650                  Data &= AndMask;
    651                  Data |= ColorMask;
    652                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine8BPP_14:
   \   00000224   004090E5           LDR      R4,[R0, #+0]
   \   00000228   02E194E7           LDR      LR,[R4, +R2, LSL #+2]
   \   0000022C   0E1001E0           AND      R1,R1,LR
   \   00000230   011086E1           ORR      R1,R6,R1
   \   00000234   021184E7           STR      R1,[R4, +R2, LSL #+2]
    653                  Off++;
   \   00000238   012082E2           ADD      R2,R2,#+1
    654                }
    655                //
    656                // Complete DWORDS
    657                //
    658                while (xsize >= 16) {
   \                     ??_DrawBitLine8BPP_11:
   \   0000023C   10005CE3           CMP      R12,#+16
   \   00000240   250000BA           BLT      ??_DrawBitLine8BPP_15
    659                  ColorMask =  *(p) |
    660                              (*(p +  1) <<  2) |
    661                              (*(p +  2) <<  4) |
    662                              (*(p +  3) <<  6) |
    663                              (*(p +  4) <<  8) |
    664                              (*(p +  5) << 10) |
    665                              (*(p +  6) << 12) |
    666                              (*(p +  7) << 14) |
    667                              (*(p +  8) << 16) |
    668                              (*(p +  9) << 18) |
    669                              (*(p + 10) << 20) |
    670                              (*(p + 11) << 22) |
    671                              (*(p + 12) << 24) |
    672                              (*(p + 13) << 26) |
    673                              (*(p + 14) << 28) |
    674                              (*(p + 15) << 30);
    675                  #if (LCD_ENDIAN_BIG == 1)
    676                    MIRROR(ColorMask);
    677                  #endif
    678                  WRITE_MEM32(pContext->VRAMAddr, Off, ColorMask);
   \                     ??_DrawBitLine8BPP_16:
   \   00000244   0010D3E5           LDRB     R1,[R3, #+0]
   \   00000248   01E0D3E5           LDRB     LR,[R3, #+1]
    679                  p += 16;
    680                  Off++;
    681                  xsize -= 16;
   \   0000024C   10C04CE2           SUB      R12,R12,#+16
   \   00000250   10005CE3           CMP      R12,#+16
   \   00000254   0E1181E1           ORR      R1,R1,LR, LSL #+2
   \   00000258   02E0D3E5           LDRB     LR,[R3, #+2]
   \   0000025C   0E1281E1           ORR      R1,R1,LR, LSL #+4
   \   00000260   03E0D3E5           LDRB     LR,[R3, #+3]
   \   00000264   0E1381E1           ORR      R1,R1,LR, LSL #+6
   \   00000268   04E0D3E5           LDRB     LR,[R3, #+4]
   \   0000026C   0E1481E1           ORR      R1,R1,LR, LSL #+8
   \   00000270   05E0D3E5           LDRB     LR,[R3, #+5]
   \   00000274   0E1581E1           ORR      R1,R1,LR, LSL #+10
   \   00000278   06E0D3E5           LDRB     LR,[R3, #+6]
   \   0000027C   0E1681E1           ORR      R1,R1,LR, LSL #+12
   \   00000280   07E0D3E5           LDRB     LR,[R3, #+7]
   \   00000284   0E1781E1           ORR      R1,R1,LR, LSL #+14
   \   00000288   08E0D3E5           LDRB     LR,[R3, #+8]
   \   0000028C   0E1881E1           ORR      R1,R1,LR, LSL #+16
   \   00000290   09E0D3E5           LDRB     LR,[R3, #+9]
   \   00000294   0E1981E1           ORR      R1,R1,LR, LSL #+18
   \   00000298   0AE0D3E5           LDRB     LR,[R3, #+10]
   \   0000029C   0E1A81E1           ORR      R1,R1,LR, LSL #+20
   \   000002A0   0BE0D3E5           LDRB     LR,[R3, #+11]
   \   000002A4   0E1B81E1           ORR      R1,R1,LR, LSL #+22
   \   000002A8   0CE0D3E5           LDRB     LR,[R3, #+12]
   \   000002AC   0E1C81E1           ORR      R1,R1,LR, LSL #+24
   \   000002B0   0DE0D3E5           LDRB     LR,[R3, #+13]
   \   000002B4   0E1D81E1           ORR      R1,R1,LR, LSL #+26
   \   000002B8   0EE0D3E5           LDRB     LR,[R3, #+14]
   \   000002BC   0E1E81E1           ORR      R1,R1,LR, LSL #+28
   \   000002C0   0FE0D3E5           LDRB     LR,[R3, #+15]
   \   000002C4   103083E2           ADD      R3,R3,#+16
   \   000002C8   0E1F81E1           ORR      R1,R1,LR, LSL #+30
   \   000002CC   00E090E5           LDR      LR,[R0, #+0]
   \   000002D0   02118EE7           STR      R1,[LR, +R2, LSL #+2]
   \   000002D4   012082E2           ADD      R2,R2,#+1
   \   000002D8   D9FFFFAA           BGE      ??_DrawBitLine8BPP_16
    682                }
    683                //
    684                // Last DWORD
    685                //
    686                if (xsize) {
   \                     ??_DrawBitLine8BPP_15:
   \   000002DC   00005CE3           CMP      R12,#+0
   \   000002E0   5100000A           BEQ      ??_DrawBitLine8BPP_8
    687                  ColorMask = i = 0;
    688                  AndMask = 0xFFFFFFFC << (2 * NumPixel_1);
   \   000002E4   0310E0E3           MVN      R1,#+3
   \   000002E8   8550A0E1           LSL      R5,R5,#+1
   \   000002EC   1115A0E1           LSL      R1,R1,R5
   \   000002F0   0050D3E5           LDRB     R5,[R3, #+0]
   \   000002F4   01C04CE2           SUB      R12,R12,#+1
   \   000002F8   00E0A0E3           MOV      LR,#+0
   \   000002FC   01001CE3           TST      R12,#0x1
   \   00000300   0040A0E3           MOV      R4,#+0
    689                  while (xsize) {
    690                    Index = *(p++);
    691                    ColorMask |= Index << (2 * i++);
   \   00000304   05E0A011           MOVNE    LR,R5
   \   00000308   0140A013           MOVNE    R4,#+1
    692                    xsize--;
   \   0000030C   0150F315           LDRBNE   R5,[R3, #+1]!
   \   00000310   ACC0B0E1           LSRS     R12,R12,#+1
   \   00000314   0900000A           BEQ      ??_DrawBitLine8BPP_17
   \                     ??_DrawBitLine8BPP_18:
   \   00000318   8460A0E1           LSL      R6,R4,#+1
   \   0000031C   15E68EE1           ORR      LR,LR,R5, LSL R6
   \   00000320   0160F3E5           LDRB     R6,[R3, #+1]!
   \   00000324   014084E2           ADD      R4,R4,#+1
   \   00000328   8450A0E1           LSL      R5,R4,#+1
   \   0000032C   16E58EE1           ORR      LR,LR,R6, LSL R5
   \   00000330   014084E2           ADD      R4,R4,#+1
   \   00000334   0150F3E5           LDRB     R5,[R3, #+1]!
   \   00000338   01C05CE2           SUBS     R12,R12,#+1
   \   0000033C   F5FFFF1A           BNE      ??_DrawBitLine8BPP_18
   \                     ??_DrawBitLine8BPP_17:
   \   00000340   8430A0E1           LSL      R3,R4,#+1
   \   00000344   15638EE1           ORR      R6,LR,R5, LSL R3
   \   00000348   9EFFFFEA           B        ??_DrawBitLine8BPP_10
    693                  }
    694                  #if (LCD_ENDIAN_BIG == 1)
    695                    MIRROR(AndMask);
    696                    MIRROR(ColorMask);
    697                  #endif
    698                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    699                  Data &= AndMask;
    700                  Data |= ColorMask;
    701                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    702                }
    703              }
    704            } else {
    705              //
    706              // Handle transparent bitmap with palette
    707              //
    708              LCD_PIXELINDEX pixel;
    709              if (pTrans) {
   \                     ??_DrawBitLine8BPP_0:
   \   0000034C   00005EE3           CMP      LR,#+0
   \   00000350   1B00000A           BEQ      ??_DrawBitLine8BPP_19
   \   00000354   01005CE3           CMP      R12,#+1
   \   00000358   330000BA           BLT      ??_DrawBitLine8BPP_8
   \   0000035C   0340A0E3           MOV      R4,#+3
    710                while (xsize > 0) {
    711                  pixel = *p;
   \                     ??_DrawBitLine8BPP_20:
   \   00000360   0050D3E5           LDRB     R5,[R3, #+0]
    712                  if (pixel != 0) {
   \   00000364   000055E3           CMP      R5,#+0
   \   00000368   1000000A           BEQ      ??_DrawBitLine8BPP_21
    713                    _SetPixelIndex(pDevice, x + 0, y, *(pTrans + pixel));
   \   0000036C   086090E5           LDR      R6,[R0, #+8]
   \   00000370   0190A0E3           MOV      R9,#+1
   \   00000374   147096E5           LDR      R7,[R6, #+20]
   \   00000378   419109E0           AND      R9,R9,R1, ASR #+2
   \   0000037C   C771A0E1           ASR      R7,R7,#+3
   \   00000380   970208E0           MUL      R8,R7,R2
   \   00000384   8991A0E1           LSL      R9,R9,#+3
   \   00000388   A17188E0           ADD      R7,R8,R1, LSR #+3
   \   0000038C   038001E2           AND      R8,R1,#0x3
   \   00000390   006096E5           LDR      R6,[R6, #+0]
   \   00000394   888089E0           ADD      R8,R9,R8, LSL #+1
   \   00000398   8770A0E1           LSL      R7,R7,#+1
   \   0000039C   B69097E1           LDRH     R9,[R7, +R6]
   \   000003A0   05519EE7           LDR      R5,[LR, +R5, LSL #+2]
   \   000003A4   1498C9E1           BIC      R9,R9,R4, LSL R8
   \   000003A8   155889E1           ORR      R5,R9,R5, LSL R8
   \   000003AC   B65087E1           STRH     R5,[R7, +R6]
    714                  }
    715                  xsize--;
    716                  x++;
   \                     ??_DrawBitLine8BPP_21:
   \   000003B0   011081E2           ADD      R1,R1,#+1
    717                  p++;
   \   000003B4   013083E2           ADD      R3,R3,#+1
   \   000003B8   01C05CE2           SUBS     R12,R12,#+1
    718                }
   \   000003BC   E7FFFF1A           BNE      ??_DrawBitLine8BPP_20
   \   000003C0   190000EA           B        ??_DrawBitLine8BPP_8
    719              //
    720              // Handle transparent bitmap without palette
    721              //
    722              } else {
   \                     ??_DrawBitLine8BPP_19:
   \   000003C4   01005CE3           CMP      R12,#+1
   \   000003C8   170000BA           BLT      ??_DrawBitLine8BPP_8
   \   000003CC   0340A0E3           MOV      R4,#+3
    723                while (xsize > 0) {
    724                  pixel = *p;
   \                     ??_DrawBitLine8BPP_22:
   \   000003D0   0050D3E5           LDRB     R5,[R3, #+0]
    725                  if (pixel != 0) {
   \   000003D4   000055E3           CMP      R5,#+0
   \   000003D8   0F00000A           BEQ      ??_DrawBitLine8BPP_23
    726                    _SetPixelIndex(pDevice, x + 0, y, pixel);
   \   000003DC   08E090E5           LDR      LR,[R0, #+8]
   \   000003E0   0180A0E3           MOV      R8,#+1
   \   000003E4   14609EE5           LDR      R6,[LR, #+20]
   \   000003E8   418108E0           AND      R8,R8,R1, ASR #+2
   \   000003EC   C661A0E1           ASR      R6,R6,#+3
   \   000003F0   960207E0           MUL      R7,R6,R2
   \   000003F4   036001E2           AND      R6,R1,#0x3
   \   000003F8   A17187E0           ADD      R7,R7,R1, LSR #+3
   \   000003FC   8881A0E1           LSL      R8,R8,#+3
   \   00000400   00E09EE5           LDR      LR,[LR, #+0]
   \   00000404   866088E0           ADD      R6,R8,R6, LSL #+1
   \   00000408   8770A0E1           LSL      R7,R7,#+1
   \   0000040C   BE8097E1           LDRH     R8,[R7, +LR]
   \   00000410   1486C8E1           BIC      R8,R8,R4, LSL R6
   \   00000414   155688E1           ORR      R5,R8,R5, LSL R6
   \   00000418   BE5087E1           STRH     R5,[R7, +LR]
    727                  }
    728                  xsize--;
    729                  x++;
   \                     ??_DrawBitLine8BPP_23:
   \   0000041C   011081E2           ADD      R1,R1,#+1
    730                  p++;
   \   00000420   013083E2           ADD      R3,R3,#+1
   \   00000424   01C05CE2           SUBS     R12,R12,#+1
    731                }
   \   00000428   E8FFFF1A           BNE      ??_DrawBitLine8BPP_22
    732              }
    733            }
    734          }
   \                     ??_DrawBitLine8BPP_8:
   \   0000042C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000430   F083BDE8           POP      {R4-R9,PC}       ;; return
    735          
    736          /*********************************************************************
    737          *
    738          *       _DrawBitmap
    739          */

   \                                 In section .text, align 4, keep-with-next
    740          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    741                                 int xSize, int ySize,
    742                                 int BitsPerPixel, 
    743                                 int BytesPerLine,
    744                                 const U8 GUI_UNI_PTR * pData, int Diff,
    745                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
    746            int i;
    747          
    748            switch (BitsPerPixel) {
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   070051E3           CMP      R1,#+7
   \   00000034   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   B200008A           BHI      ??_DrawBitmap_1
   \   0000003C   060000EA           B        ??_DrawBitmap_2
   \   00000040   320000EA           B        ??_DrawBitmap_3
   \   00000044   AF0000EA           B        ??_DrawBitmap_1
   \   00000048   5D0000EA           B        ??_DrawBitmap_4
   \   0000004C   AD0000EA           B        ??_DrawBitmap_1
   \   00000050   AC0000EA           B        ??_DrawBitmap_1
   \   00000054   AB0000EA           B        ??_DrawBitmap_1
   \   00000058   860000EA           B        ??_DrawBitmap_5
    749            case 1:
    750              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   A80000BA           BLT      ??_DrawBitmap_1
   \   00000064   02B0A0E1           MOV      R11,R2
   \   00000068   10008DE5           STR      R0,[SP, #+16]
   \   0000006C   010010E3           TST      R0,#0x1
   \   00000070   0800000A           BEQ      ??_DrawBitmap_6
    751                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000074   08A08DE5           STR      R10,[SP, #+8]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   00908DE5           STR      R9,[SP, #+0]
   \   00000080   0830A0E1           MOV      R3,R8
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       _DrawBitLine1BPP
    752                pData += BytesPerLine;
   \   00000090   088087E0           ADD      R8,R7,R8
   \   00000094   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_6:
   \   00000098   10109DE5           LDR      R1,[SP, #+16]
   \   0000009C   A110A0E1           LSR      R1,R1,#+1
   \   000000A0   0C108DE5           STR      R1,[SP, #+12]
   \   000000A4   000051E3           CMP      R1,#+0
   \   000000A8   9600000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_7:
   \   000000AC   08A08DE5           STR      R10,[SP, #+8]
   \   000000B0   04608DE5           STR      R6,[SP, #+4]
   \   000000B4   00908DE5           STR      R9,[SP, #+0]
   \   000000B8   0830A0E1           MOV      R3,R8
   \   000000BC   0B20A0E1           MOV      R2,R11
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       _DrawBitLine1BPP
   \   000000CC   088087E0           ADD      R8,R7,R8
   \   000000D0   08A08DE5           STR      R10,[SP, #+8]
   \   000000D4   04608DE5           STR      R6,[SP, #+4]
   \   000000D8   00908DE5           STR      R9,[SP, #+0]
   \   000000DC   0830A0E1           MOV      R3,R8
   \   000000E0   01208BE2           ADD      R2,R11,#+1
   \   000000E4   0510A0E1           MOV      R1,R5
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       _DrawBitLine1BPP
    753              }
   \   000000F0   0C109DE5           LDR      R1,[SP, #+12]
   \   000000F4   088087E0           ADD      R8,R7,R8
   \   000000F8   011041E2           SUB      R1,R1,#+1
   \   000000FC   0C108DE5           STR      R1,[SP, #+12]
   \   00000100   02B08BE2           ADD      R11,R11,#+2
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   E7FFFF1A           BNE      ??_DrawBitmap_7
   \   0000010C   7D0000EA           B        ??_DrawBitmap_1
    754              break;
    755            case 2:
    756              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   7B0000BA           BLT      ??_DrawBitmap_1
   \   00000118   02B0A0E1           MOV      R11,R2
   \   0000011C   10008DE5           STR      R0,[SP, #+16]
   \   00000120   010010E3           TST      R0,#0x1
   \   00000124   0800000A           BEQ      ??_DrawBitmap_8
    757                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000128   08A08DE5           STR      R10,[SP, #+8]
   \   0000012C   04608DE5           STR      R6,[SP, #+4]
   \   00000130   00908DE5           STR      R9,[SP, #+0]
   \   00000134   0830A0E1           MOV      R3,R8
   \   00000138   0510A0E1           MOV      R1,R5
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       _DrawBitLine2BPP
    758                pData += BytesPerLine;
   \   00000144   088087E0           ADD      R8,R7,R8
   \   00000148   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_8:
   \   0000014C   10109DE5           LDR      R1,[SP, #+16]
   \   00000150   A110A0E1           LSR      R1,R1,#+1
   \   00000154   0C108DE5           STR      R1,[SP, #+12]
   \   00000158   000051E3           CMP      R1,#+0
   \   0000015C   6900000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_9:
   \   00000160   08A08DE5           STR      R10,[SP, #+8]
   \   00000164   04608DE5           STR      R6,[SP, #+4]
   \   00000168   00908DE5           STR      R9,[SP, #+0]
   \   0000016C   0830A0E1           MOV      R3,R8
   \   00000170   0B20A0E1           MOV      R2,R11
   \   00000174   0510A0E1           MOV      R1,R5
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   ........           BL       _DrawBitLine2BPP
   \   00000180   088087E0           ADD      R8,R7,R8
   \   00000184   08A08DE5           STR      R10,[SP, #+8]
   \   00000188   04608DE5           STR      R6,[SP, #+4]
   \   0000018C   00908DE5           STR      R9,[SP, #+0]
   \   00000190   0830A0E1           MOV      R3,R8
   \   00000194   01208BE2           ADD      R2,R11,#+1
   \   00000198   0510A0E1           MOV      R1,R5
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       _DrawBitLine2BPP
    759              }
   \   000001A4   0C109DE5           LDR      R1,[SP, #+12]
   \   000001A8   088087E0           ADD      R8,R7,R8
   \   000001AC   011041E2           SUB      R1,R1,#+1
   \   000001B0   0C108DE5           STR      R1,[SP, #+12]
   \   000001B4   02B08BE2           ADD      R11,R11,#+2
   \   000001B8   000051E3           CMP      R1,#+0
   \   000001BC   E7FFFF1A           BNE      ??_DrawBitmap_9
   \   000001C0   500000EA           B        ??_DrawBitmap_1
    760              break;
    761            case 4:
    762              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4E0000BA           BLT      ??_DrawBitmap_1
   \   000001CC   02B0A0E1           MOV      R11,R2
   \   000001D0   10008DE5           STR      R0,[SP, #+16]
   \   000001D4   010010E3           TST      R0,#0x1
   \   000001D8   0800000A           BEQ      ??_DrawBitmap_10
    763                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000001DC   08A08DE5           STR      R10,[SP, #+8]
   \   000001E0   04608DE5           STR      R6,[SP, #+4]
   \   000001E4   00908DE5           STR      R9,[SP, #+0]
   \   000001E8   0830A0E1           MOV      R3,R8
   \   000001EC   0510A0E1           MOV      R1,R5
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   ........           BL       _DrawBitLine4BPP
    764                pData += BytesPerLine;
   \   000001F8   088087E0           ADD      R8,R7,R8
   \   000001FC   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_10:
   \   00000200   10109DE5           LDR      R1,[SP, #+16]
   \   00000204   A110A0E1           LSR      R1,R1,#+1
   \   00000208   0C108DE5           STR      R1,[SP, #+12]
   \   0000020C   000051E3           CMP      R1,#+0
   \   00000210   3C00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_11:
   \   00000214   08A08DE5           STR      R10,[SP, #+8]
   \   00000218   04608DE5           STR      R6,[SP, #+4]
   \   0000021C   00908DE5           STR      R9,[SP, #+0]
   \   00000220   0830A0E1           MOV      R3,R8
   \   00000224   0B20A0E1           MOV      R2,R11
   \   00000228   0510A0E1           MOV      R1,R5
   \   0000022C   0400A0E1           MOV      R0,R4
   \   00000230   ........           BL       _DrawBitLine4BPP
   \   00000234   088087E0           ADD      R8,R7,R8
   \   00000238   08A08DE5           STR      R10,[SP, #+8]
   \   0000023C   04608DE5           STR      R6,[SP, #+4]
   \   00000240   00908DE5           STR      R9,[SP, #+0]
   \   00000244   0830A0E1           MOV      R3,R8
   \   00000248   01208BE2           ADD      R2,R11,#+1
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _DrawBitLine4BPP
    765              }
   \   00000258   0C109DE5           LDR      R1,[SP, #+12]
   \   0000025C   088087E0           ADD      R8,R7,R8
   \   00000260   011041E2           SUB      R1,R1,#+1
   \   00000264   0C108DE5           STR      R1,[SP, #+12]
   \   00000268   02B08BE2           ADD      R11,R11,#+2
   \   0000026C   000051E3           CMP      R1,#+0
   \   00000270   E7FFFF1A           BNE      ??_DrawBitmap_11
   \   00000274   230000EA           B        ??_DrawBitmap_1
    766              break;
    767            case 8:
    768              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_5:
   \   00000278   010050E3           CMP      R0,#+1
   \   0000027C   210000BA           BLT      ??_DrawBitmap_1
   \   00000280   00B0A0E1           MOV      R11,R0
   \   00000284   0290A0E1           MOV      R9,R2
   \   00000288   01001BE3           TST      R11,#0x1
   \   0000028C   0700000A           BEQ      ??_DrawBitmap_12
    769                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
   \   00000290   04A08DE5           STR      R10,[SP, #+4]
   \   00000294   00608DE5           STR      R6,[SP, #+0]
   \   00000298   0830A0E1           MOV      R3,R8
   \   0000029C   0510A0E1           MOV      R1,R5
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   ........           BL       _DrawBitLine8BPP
    770                pData += BytesPerLine;
   \   000002A8   088087E0           ADD      R8,R7,R8
   \   000002AC   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_12:
   \   000002B0   ABB0B0E1           LSRS     R11,R11,#+1
   \   000002B4   1300000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_13:
   \   000002B8   04A08DE5           STR      R10,[SP, #+4]
   \   000002BC   00608DE5           STR      R6,[SP, #+0]
   \   000002C0   0830A0E1           MOV      R3,R8
   \   000002C4   0920A0E1           MOV      R2,R9
   \   000002C8   0510A0E1           MOV      R1,R5
   \   000002CC   0400A0E1           MOV      R0,R4
   \   000002D0   ........           BL       _DrawBitLine8BPP
   \   000002D4   088087E0           ADD      R8,R7,R8
   \   000002D8   04A08DE5           STR      R10,[SP, #+4]
   \   000002DC   00608DE5           STR      R6,[SP, #+0]
   \   000002E0   0830A0E1           MOV      R3,R8
   \   000002E4   012089E2           ADD      R2,R9,#+1
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0400A0E1           MOV      R0,R4
   \   000002F0   ........           BL       _DrawBitLine8BPP
    771              }
   \   000002F4   01B04BE2           SUB      R11,R11,#+1
   \   000002F8   088087E0           ADD      R8,R7,R8
   \   000002FC   029089E2           ADD      R9,R9,#+2
   \   00000300   00005BE3           CMP      R11,#+0
   \   00000304   EBFFFF1A           BNE      ??_DrawBitmap_13
    772              break;
    773            }
    774          }
   \                     ??_DrawBitmap_1:
   \   00000308   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000030C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    775          
    776          /*********************************************************************
    777          *
    778          *       _SetOrg
    779          */

   \                                 In section .text, align 4, keep-with-next
    780          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    781            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    782          
    783            #ifdef WIN32
    784              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    785            #else
    786              Data.xPos = x;
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    787              Data.yPos = y;
   \   00000024   04208DE5           STR      R2,[SP, #+4]
    788              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   0310A0E3           MOV      R1,#+3
   \   00000030   180090E5           LDR      R0,[R0, #+24]
   \   00000034   ........           BL       LCD_X_DisplayDriver
    789            #endif
    790          }
   \   00000038   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    791          
    792          /*********************************************************************
    793          *
    794          *       _InitOnce
    795          *
    796          * Purpose:
    797          *   Allocates a fixed block for the context of the driver
    798          *
    799          * Return value:
    800          *   0 on success, 1 on error
    801          */
    802          static int _InitOnce(GUI_DEVICE * pDevice) {
    803            if (pDevice->u.pContext == NULL) {
    804              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    805              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    806            }
    807            return pDevice->u.pContext ? 0 : 1;
    808          }
    809          
    810          /*********************************************************************
    811          *
    812          *       _GetRect
    813          */

   \                                 In section .text, align 4, keep-with-next
    814          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    815            DRIVER_CONTEXT * pContext;
    816          
    817            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    818            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    819            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    820            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    821            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    822          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    823          
    824          /*********************************************************************
    825          *
    826          *       _GetDevProp
    827          */

   \                                 In section .text, align 4, keep-with-next
    828          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    829            DRIVER_CONTEXT * pContext;
    830          
    831            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    832            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1D00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   180000EA           B        ??_GetDevProp_1
   \   00000028   170000EA           B        ??_GetDevProp_1
   \   0000002C   160000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0F0000EA           B        ??_GetDevProp_9
   \   00000044   0E0000EA           B        ??_GetDevProp_9
   \   00000048   0D0000EA           B        ??_GetDevProp_9
    833            case LCD_DEVCAP_XSIZE:
    834              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    835            case LCD_DEVCAP_YSIZE:
    836              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    837            case LCD_DEVCAP_VXSIZE:
    838              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    839            case LCD_DEVCAP_VYSIZE:
    840              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    841            case LCD_DEVCAP_BITSPERPIXEL:
    842              return 2;
   \                     ??_GetDevProp_6:
   \   0000006C   0200A0E3           MOV      R0,#+2
   \   00000070   1EFF2FE1           BX       LR
    843            case LCD_DEVCAP_NUMCOLORS:
    844              return 4;
   \                     ??_GetDevProp_7:
   \   00000074   0400A0E3           MOV      R0,#+4
   \   00000078   1EFF2FE1           BX       LR
    845            case LCD_DEVCAP_XMAG:
    846              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    847            case LCD_DEVCAP_YMAG:
    848              return 1;
    849            case LCD_DEVCAP_MIRROR_X:
    850              return 0;
   \                     ??_GetDevProp_9:
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   1EFF2FE1           BX       LR
    851            case LCD_DEVCAP_MIRROR_Y:
    852              return 0;
    853            case LCD_DEVCAP_SWAP_XY:
    854              return 0;
    855            }
    856            return -1;
   \                     ??_GetDevProp_1:
   \   0000008C   0000E0E3           MVN      R0,#+0
   \   00000090   1EFF2FE1           BX       LR               ;; return
    857          }
    858          
    859          /*********************************************************************
    860          *
    861          *       _GetDevData
    862          */

   \                                 In section .text, align 4, keep-with-next
    863          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    864            DRIVER_CONTEXT * pContext;
    865          
    866            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    867            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0300000A           BEQ      ??_GetDevData_0
   \   00000008   0700003A           BCC      ??_GetDevData_1
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   0200000A           BEQ      ??_GetDevData_2
   \   00000014   040000EA           B        ??_GetDevData_1
    868            #if GUI_SUPPORT_MEMDEV
    869              case LCD_DEVDATA_MEMDEV:
    870                return (void *)&GUI_MEMDEV_DEVICE_8;
   \                     ??_GetDevData_0:
   \   00000018   ........           LDR      R0,??DataTable16
   \   0000001C   1EFF2FE1           BX       LR
    871            #endif
    872            case LCD_DEVDATA_PHYSPAL:
    873              return  (void *)pContext->aColor;
   \                     ??_GetDevData_2:
   \   00000020   080090E5           LDR      R0,[R0, #+8]
   \   00000024   2C0080E2           ADD      R0,R0,#+44
   \   00000028   1EFF2FE1           BX       LR
    874            }
    875            return NULL;
   \                     ??_GetDevData_1:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1EFF2FE1           BX       LR               ;; return
    876          }
    877          
    878          /*********************************************************************
    879          *
    880          *       Static code: Functions available by _GetDevFunc()
    881          *
    882          **********************************************************************
    883          */
    884          /*********************************************************************
    885          *
    886          *       _SetVRAMAddr
    887          */

   \                                 In section .text, align 4, keep-with-next
    888          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    889            DRIVER_CONTEXT * pContext;
    890            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    891          
    892            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   3C00A0E3           MOV      R0,#+60
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   3C20A0E3           MOV      R2,#+60
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    893            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    894              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    895              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    896              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    897              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    898            }
    899            #ifdef WIN32
    900              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    901            #endif
    902          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    903          
    904          /*********************************************************************
    905          *
    906          *       _SetVSize
    907          */

   \                                 In section .text, align 4, keep-with-next
    908          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    909            DRIVER_CONTEXT * pContext;
    910          
    911            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   3C00A0E3           MOV      R0,#+60
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   3C20A0E3           MOV      R2,#+60
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    912            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    913              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    914              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    915              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    916              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
    917            }
    918            #ifdef WIN32
    919              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    920            #endif
    921          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    922          
    923          /*********************************************************************
    924          *
    925          *       _SetSize
    926          */

   \                                 In section .text, align 4, keep-with-next
    927          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    928            DRIVER_CONTEXT * pContext;
    929            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    930          
    931            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   3C00A0E3           MOV      R0,#+60
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   3C20A0E3           MOV      R2,#+60
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    932            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    933              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    934              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    935                pContext->vxSizePhys = xSize;
    936              }
    937              pContext->xSize = xSize;
    938              pContext->ySize = ySize;
    939              Data.xSize = xSize;
    940              Data.ySize = ySize;
    941              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    942            }
    943          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    944          
    945          /*********************************************************************
    946          *
    947          *       _SetPos
    948          */

   \                                 In section .text, align 4, keep-with-next
    949          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    950            DRIVER_CONTEXT * pContext;
    951            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    952          
    953            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   3C00A0E3           MOV      R0,#+60
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   3C20A0E3           MOV      R2,#+60
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    954            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    955              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    956              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    957              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    958              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    959              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    960              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    961            }
    962          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    963          
    964          /*********************************************************************
    965          *
    966          *       _GetPos
    967          */

   \                                 In section .text, align 4, keep-with-next
    968          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    969            DRIVER_CONTEXT * pContext;
    970          
    971            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   3C00A0E3           MOV      R0,#+60
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   3C20A0E3           MOV      R2,#+60
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    972            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    973              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    974              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    975              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    976            }
    977          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    978          
    979          /*********************************************************************
    980          *
    981          *       _SetAlpha
    982          */

   \                                 In section .text, align 4, keep-with-next
    983          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    984            DRIVER_CONTEXT * pContext;
    985            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_3`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    986          
    987            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetAlpha_0
   \   0000002C   3C00A0E3           MOV      R0,#+60
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   3C20A0E3           MOV      R2,#+60
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    988            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetAlpha_1
    989              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    990              pContext->Alpha = Alpha;
   \   00000050   205080E5           STR      R5,[R0, #+32]
    991              Data.Alpha = Alpha;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    992              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0A10A0E3           MOV      R1,#+10
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    993            }
    994          }
   \                     ??_SetAlpha_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    995          
    996          /*********************************************************************
    997          *
    998          *       _SetVis
    999          */

   \                                 In section .text, align 4, keep-with-next
   1000          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1001            DRIVER_CONTEXT * pContext;
   1002            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   1003          
   1004            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   3C00A0E3           MOV      R0,#+60
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   3C20A0E3           MOV      R2,#+60
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
   1005            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
   1006              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1007              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
   1008              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
   1009              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
   1010            }
   1011          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   1012          
   1013          /*********************************************************************
   1014          *
   1015          *       _Init
   1016          */

   \                                 In section .text, align 4, keep-with-next
   1017          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1018            int r;
   1019          
   1020            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   3C00A0E3           MOV      R0,#+60
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   3C20A0E3           MOV      R2,#+60
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
   1021            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
   1022            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
   1023          }
   1024          
   1025          /*********************************************************************
   1026          *
   1027          *       _On
   1028          */

   \                                 In section .text, align 4, keep-with-next
   1029          static void _On (GUI_DEVICE * pDevice) {
   1030            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
   1031          }
   1032          
   1033          /*********************************************************************
   1034          *
   1035          *       _Off
   1036          */

   \                                 In section .text, align 4, keep-with-next
   1037          static void _Off (GUI_DEVICE * pDevice) {
   1038            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
   1039          }
   1040          
   1041          /*********************************************************************
   1042          *
   1043          *       _SetLUTEntry
   1044          */

   \                                 In section .text, align 4, keep-with-next
   1045          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1046            DRIVER_CONTEXT * pContext;
   1047            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0L}>`
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   002091E5           LDR      R2,[R1, #+0]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   0C0080E8           STM      R0,{R2,R3}
   1048          
   1049            _InitOnce(pDevice);
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0500001A           BNE      ??_SetLUTEntry_0
   \   00000034   3C00A0E3           MOV      R0,#+60
   \   00000038   ........           BL       GUI_ALLOC_GetFixedBlock
   \   0000003C   080084E5           STR      R0,[R4, #+8]
   \   00000040   3C20A0E3           MOV      R2,#+60
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           BL       GUI__memset
   1050            if (pDevice->u.pContext) {
   \                     ??_SetLUTEntry_0:
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0900000A           BEQ      ??_SetLUTEntry_1
   1051              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1052              if (Pos < GUI_COUNTOF(pContext->aColor)) {
   \   00000058   040055E3           CMP      R5,#+4
   \   0000005C   0700002A           BCS      ??_SetLUTEntry_1
   1053                Data.Pos   = Pos;
   \   00000060   0450CDE5           STRB     R5,[SP, #+4]
   1054                Data.Color = Color;
   \   00000064   00608DE5           STR      R6,[SP, #+0]
   1055                pContext->aColor[Pos] = Color;
   \   00000068   050180E0           ADD      R0,R0,R5, LSL #+2
   \   0000006C   2C6080E5           STR      R6,[R0, #+44]
   1056                LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000070   0D20A0E1           MOV      R2,SP
   \   00000074   0410A0E3           MOV      R1,#+4
   \   00000078   180094E5           LDR      R0,[R4, #+24]
   \   0000007C   ........           BL       LCD_X_DisplayDriver
   1057              }
   1058            }
   1059          }
   \                     ??_SetLUTEntry_1:
   \   00000080   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   1060          
   1061          /*********************************************************************
   1062          *
   1063          *       _SetAlphaMode
   1064          */

   \                                 In section .text, align 4, keep-with-next
   1065          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1066            LCD_X_SETALPHAMODE_INFO Data = {0};
   1067          
   1068            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1069            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1070          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1071          
   1072          /*********************************************************************
   1073          *
   1074          *       _SetChromaMode
   1075          */

   \                                 In section .text, align 4, keep-with-next
   1076          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1077            LCD_X_SETCHROMAMODE_INFO Data = {0};
   1078          
   1079            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1080            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1081          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1082          
   1083          /*********************************************************************
   1084          *
   1085          *       _SetChroma
   1086          */

   \                                 In section .text, align 4, keep-with-next
   1087          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1088            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1089          
   1090            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1091            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   1092            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1093          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1094          
   1095          /*********************************************************************
   1096          *
   1097          *       _SetFunc
   1098          */

   \                                 In section .text, align 4, keep-with-next
   1099          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1100            DRIVER_CONTEXT * pContext;
   1101          
   1102            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   3C00A0E3           MOV      R0,#+60
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   3C20A0E3           MOV      R2,#+60
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1103            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
   1104              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1105              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
   1106              case LCD_DEVFUNC_FILLRECT:
   1107                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
   1108                break;
   1109              }
   1110            }
   1111          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1112          
   1113          /*********************************************************************
   1114          *
   1115          *       _GetDevFunc
   1116          */

   \                                 In section .text, align 4, keep-with-next
   1117          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
   1118            GUI_USE_PARA(ppDevice);
   1119            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   021041E2           SUB      R1,R1,#+2
   \   00000004   140051E3           CMP      R1,#+20
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3200008A           BHI      ??_GetDevFunc_1
   \   00000010   1D0000EA           B        ??_GetDevFunc_2
   \   00000014   180000EA           B        ??_GetDevFunc_3
   \   00000018   190000EA           B        ??_GetDevFunc_4
   \   0000001C   2E0000EA           B        ??_GetDevFunc_1
   \   00000020   1B0000EA           B        ??_GetDevFunc_5
   \   00000024   2C0000EA           B        ??_GetDevFunc_1
   \   00000028   2B0000EA           B        ??_GetDevFunc_1
   \   0000002C   0C0000EA           B        ??_GetDevFunc_6
   \   00000030   0D0000EA           B        ??_GetDevFunc_7
   \   00000034   0E0000EA           B        ??_GetDevFunc_8
   \   00000038   170000EA           B        ??_GetDevFunc_9
   \   0000003C   260000EA           B        ??_GetDevFunc_1
   \   00000040   170000EA           B        ??_GetDevFunc_10
   \   00000044   180000EA           B        ??_GetDevFunc_11
   \   00000048   190000EA           B        ??_GetDevFunc_12
   \   0000004C   220000EA           B        ??_GetDevFunc_1
   \   00000050   210000EA           B        ??_GetDevFunc_1
   \   00000054   180000EA           B        ??_GetDevFunc_13
   \   00000058   190000EA           B        ??_GetDevFunc_14
   \   0000005C   1A0000EA           B        ??_GetDevFunc_15
   \   00000060   1B0000EA           B        ??_GetDevFunc_16
   1120            case LCD_DEVFUNC_SET_VRAM_ADDR:
   1121              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_6:
   \   00000064   ........           LDR      R0,??DataTable16_1
   \   00000068   1EFF2FE1           BX       LR
   1122            case LCD_DEVFUNC_SET_VSIZE:
   1123              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_7:
   \   0000006C   ........           LDR      R0,??DataTable16_2
   \   00000070   1EFF2FE1           BX       LR
   1124            case LCD_DEVFUNC_SET_SIZE:
   1125              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_8:
   \   00000074   ........           LDR      R0,??DataTable16_3
   \   00000078   1EFF2FE1           BX       LR
   1126            case LCD_DEVFUNC_SETPOS:
   1127              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_3:
   \   0000007C   ........           LDR      R0,??DataTable16_4
   \   00000080   1EFF2FE1           BX       LR
   1128            case LCD_DEVFUNC_GETPOS:
   1129              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_4:
   \   00000084   ........           LDR      R0,??DataTable16_5
   \   00000088   1EFF2FE1           BX       LR
   1130            case LCD_DEVFUNC_SETALPHA:
   1131              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_2:
   \   0000008C   ........           LDR      R0,??DataTable16_6
   \   00000090   1EFF2FE1           BX       LR
   1132            case LCD_DEVFUNC_SETVIS:
   1133              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_5:
   \   00000094   ........           LDR      R0,??DataTable16_7
   \   00000098   1EFF2FE1           BX       LR
   1134            case LCD_DEVFUNC_INIT:
   1135              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_9:
   \   0000009C   ........           LDR      R0,??DataTable16_8
   \   000000A0   1EFF2FE1           BX       LR
   1136            case LCD_DEVFUNC_ON:
   1137              return (void (*)(void))_On;
   \                     ??_GetDevFunc_10:
   \   000000A4   ........           LDR      R0,??DataTable16_9
   \   000000A8   1EFF2FE1           BX       LR
   1138            case LCD_DEVFUNC_OFF:
   1139              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_11:
   \   000000AC   ........           LDR      R0,??DataTable16_10
   \   000000B0   1EFF2FE1           BX       LR
   1140            case LCD_DEVFUNC_SETLUTENTRY:
   1141              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_12:
   \   000000B4   ........           LDR      R0,??DataTable16_11
   \   000000B8   1EFF2FE1           BX       LR
   1142          
   1143            case LCD_DEVFUNC_ALPHAMODE:
   1144              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_13:
   \   000000BC   ........           LDR      R0,??DataTable16_12
   \   000000C0   1EFF2FE1           BX       LR
   1145            case LCD_DEVFUNC_CHROMAMODE:
   1146              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_14:
   \   000000C4   ........           LDR      R0,??DataTable16_13
   \   000000C8   1EFF2FE1           BX       LR
   1147            case LCD_DEVFUNC_CHROMA:
   1148              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_15:
   \   000000CC   ........           LDR      R0,??DataTable16_14
   \   000000D0   1EFF2FE1           BX       LR
   1149            
   1150            case LCD_DEVFUNC_SETFUNC:
   1151              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_16:
   \   000000D4   ........           LDR      R0,??DataTable16_15
   \   000000D8   1EFF2FE1           BX       LR
   1152            }
   1153            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   1EFF2FE1           BX       LR               ;; return
   1154          }
   1155          
   1156          /*********************************************************************
   1157          *
   1158          *       Public data
   1159          *
   1160          **********************************************************************
   1161          */
   1162          /*********************************************************************
   1163          *
   1164          *       GUI_DEVICE_API structure
   1165          */

   \                                 In section .rodata, align 4, keep-with-next
   1166          const GUI_DEVICE_API GUIDRV_Lin_2_API = {
   \                     GUIDRV_Lin_2_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   55555555           DC32     0x55555555

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1167            //
   1168            // Data
   1169            //
   1170            DEVICE_CLASS_DRIVER,
   1171            //
   1172            // Drawing functions
   1173            //
   1174            _DrawBitmap,
   1175            _DrawHLine,
   1176            _DrawVLine,
   1177            _FillRect,
   1178            _GetPixelIndex,
   1179            _SetPixelIndex,
   1180            _XorPixel,
   1181            //
   1182            // Set origin
   1183            //
   1184            _SetOrg,
   1185            //
   1186            // Request information
   1187            //
   1188            _GetDevFunc,
   1189            _GetDevProp,
   1190            _GetDevData,
   1191            _GetRect,
   1192          };
   1193          
   1194          #else
   1195          
   1196          void GUIDRV_Lin_2_C(void);   // Avoid empty object files
   1197          void GUIDRV_Lin_2_C(void) {}
   1198          
   1199          #endif
   1200          
   1201          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitLine1BPP     40
     _DrawBitLine2BPP     36
     _DrawBitLine4BPP     36
     _DrawBitLine8BPP     32
     _DrawBitmap          56
     _DrawHLine           24
     _DrawVLine           24
     _FillRect            24
     _GetDevData           0
     _GetDevFunc           0
     _GetDevProp           0
     _GetPixelIndex        0
     _GetPos              16
     _GetRect              0
     _Init                16
     _Off                  8
     _On                   8
     _SetAlpha            16
     _SetAlphaMode         8
     _SetChroma           24
     _SetChromaMode        8
     _SetFunc             16
     _SetLUTEntry         24
     _SetOrg              24
     _SetPixelIndex        4
     _SetPos              24
     _SetSize             24
     _SetVRAMAddr         16
     _SetVSize            16
     _SetVis              16
     _XorPixel            32


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            80
     _GetPixelIndex            68
     _XorPixel                148
     _DrawHLine               316
     _DrawVLine               188
     _FillRect                 68
     _DrawBitLine1BPP         836
     _DrawBitLine2BPP         600
     _DrawBitLine4BPP         600
     _DrawBitLine8BPP        1076
     _DrawBitmap              784
     _SetOrg                   64
     _GetRect                  44
     _GetDevProp              148
     _GetDevData               52
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                112
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry             136
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              228
     GUIDRV_Lin_2_API          52
     ??DataTable14              4
     ??DataTable14_1            4
     ??DataTable14_2            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 6 664 bytes in section .text
 
 6 664 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
