###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:54 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_GIF.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_GIF.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_GIF.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _GIF.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_GIF.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_GIF.c
     19          Purpose     : Implementation of rendering GIF images
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "GUI_GIF_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Defines
     31          *
     32          **********************************************************************
     33          */
     34          /* Input buffer configuration */
     35          #ifndef   GUI_GIF_INPUT_BUFFER_SIZE
     36            #define GUI_GIF_INPUT_BUFFER_SIZE 0
     37          #endif
     38          
     39          /* Constants for reading GIFs */
     40          #define GIF_INTRO_TERMINATOR ';'
     41          #define GIF_INTRO_EXTENSION  '!'
     42          #define GIF_INTRO_IMAGE      ','
     43          
     44          #define GIF_COMMENT     0xFE
     45          #define GIF_APPLICATION 0xFF
     46          #define GIF_PLAINTEXT   0x01
     47          #define GIF_GRAPHICCTL  0xF9
     48          
     49          /*********************************************************************
     50          *
     51          *       Static const data
     52          *
     53          **********************************************************************
     54          */
     55          #if GUI_GIF_INPUT_BUFFER_SIZE
     56            static U8 _aInputBuffer[GUI_GIF_INPUT_BUFFER_SIZE];
     57          #endif
     58          

   \                                 In section .text, align 4, keep-with-next
     59          static const int _aMaskTbl[16] = {
   \                     _aMaskTbl:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   000000000100       DC32 0, 1, 3, 7, 15, 31, 63, 127, 255, 511
   \              000003000000
   \              070000000F00
   \              00001F000000
   \              3F0000007F00
   \              0000FF000000
   \              FF010000    
   \   00000028   FF030000FF07       DC32 1023, 2047, 4095, 8191, 16383, 32767
   \              0000FF0F0000
   \              FF1F0000FF3F
   \              0000FF7F0000
     60            0x0000, 0x0001, 0x0003, 0x0007,
     61            0x000f, 0x001f, 0x003f, 0x007f,
     62            0x00ff, 0x01ff, 0x03ff, 0x07ff,
     63            0x0fff, 0x1fff, 0x3fff, 0x7fff,
     64          };
     65          
     66          /*********************************************************************
     67          *
     68          *       Static data
     69          *
     70          **********************************************************************
     71          */

   \                                 In section .bss, align 4
     72          static U8   _aBuffer[256];
   \                     _aBuffer:
   \   00000000                      DS8 256
     73          
     74          /*********************************************************************
     75          *
     76          *       Private data
     77          *
     78          **********************************************************************
     79          */

   \                                 In section .text, align 4, keep-with-next
     80          const int GUI_GIF__aInterlaceOffset[4] = {  8, 8, 4, 2 };
   \                     GUI_GIF__aInterlaceOffset:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   080000000800       DC32 8, 8, 4, 2
   \              000004000000
   \              02000000    

   \                                 In section .text, align 4, keep-with-next
     81          const int GUI_GIF__aInterlaceYPos[4]   = {  0, 4, 2, 1 };
   \                     GUI_GIF__aInterlaceYPos:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   000000000400       DC32 0, 4, 2, 1
   \              000002000000
   \              01000000    
     82          
     83          //GUI_COLOR   GUI_GIF__aColorTable[256];
     84          //LZW_CONTEXT GUI_GIF__LZWContext;
     85          
     86          /*********************************************************************
     87          *
     88          *       Static code
     89          *
     90          **********************************************************************
     91          */
     92          /*********************************************************************
     93          *
     94          *       _ReadBytes
     95          *
     96          * Purpose:
     97          *   Reads a string from the given pointer if possible and increments the pointer
     98          */
     99          static void _ReadBytes(GUI_GIF_CONTEXT * pContext, U8 * pBuffer, int Len) {
    100            const U8 * pData;
    101            if (GUI_GIF__ReadData(pContext, Len, &pData, 0)) {
    102              return; /* Error */
    103            }
    104            GUI_MEMCPY(pBuffer, pData, Len);
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       _GetDataBlock
    110          *
    111          * Purpose:
    112          *   Reads a LZW data block. The first byte contains the length of the block,
    113          *   so the maximum length is 256 byte
    114          *
    115          * Return value:
    116          *   Length of the data block
    117          */

   \                                 In section .text, align 4, keep-with-next
    118          static int _GetDataBlock(GUI_GIF_CONTEXT * pContext, U8 * pBuffer) {
   \                     _GetDataBlock:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    119            U8 Count;
    120            const U8 * pData;
    121            if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \   00000010   103094E5           LDR      R3,[R4, #+16]
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000020   08C094E5           LDR      R12,[R4, #+8]
   \   00000024   3CFF2FE1           BLX      R12
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   1700001A           BNE      ??_GetDataBlock_0
   \   00000030   100094E5           LDR      R0,[R4, #+16]
   \   00000034   013080E2           ADD      R3,R0,#+1
   \   00000038   103084E5           STR      R3,[R4, #+16]
    122              return 0; /* Error */
    123            }
    124            Count = *pData; /* Read the length of the data block */
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   0060D0E5           LDRB     R6,[R0, #+0]
    125            if (Count) {
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   1900000A           BEQ      ??_GetDataBlock_1
    126              if (pBuffer) {
   \   0000004C   08C094E5           LDR      R12,[R4, #+8]
   \   00000050   0C0094E5           LDR      R0,[R4, #+12]
   \   00000054   000055E3           CMP      R5,#+0
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0D00000A           BEQ      ??_GetDataBlock_2
    127                _ReadBytes(pContext, pBuffer, Count);
   \   00000060   04108DE2           ADD      R1,SP,#+4
   \   00000064   3CFF2FE1           BLX      R12
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   1000001A           BNE      ??_GetDataBlock_1
   \   00000070   100094E5           LDR      R0,[R4, #+16]
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   000086E0           ADD      R0,R6,R0
   \   0000007C   100084E5           STR      R0,[R4, #+16]
   \   00000080   04109DE5           LDR      R1,[SP, #+4]
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       __aeabi_memcpy
   \   0000008C   080000EA           B        ??_GetDataBlock_1
    128              } else {
   \                     ??_GetDataBlock_0:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   070000EA           B        ??_GetDataBlock_3
    129                if (GUI_GIF__ReadData(pContext, Count, &pData, 0)) {
   \                     ??_GetDataBlock_2:
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   3CFF2FE1           BLX      R12
   \   000000A0   060050E1           CMP      R0,R6
   \   000000A4   F9FFFF1A           BNE      ??_GetDataBlock_0
   \   000000A8   100094E5           LDR      R0,[R4, #+16]
   \   000000AC   000086E0           ADD      R0,R6,R0
   \   000000B0   100084E5           STR      R0,[R4, #+16]
    130                  return 0; /* Error */
    131                }
    132              }
    133            }
    134            return((int)Count);
   \                     ??_GetDataBlock_1:
   \   000000B4   0600A0E1           MOV      R0,R6
   \                     ??_GetDataBlock_3:
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
    135          }
    136          
    137          /*********************************************************************
    138          *
    139          *       _GetNextCode
    140          *
    141          * Purpose:
    142          *   Returns the next LZW code from the LZW stack. One LZW code contains up to 12 bits.
    143          *
    144          * Return value:
    145          *   >= 0 if succeed
    146          *   <  0 if not succeed
    147          */

   \                                 In section .text, align 4, keep-with-next
    148          static int _GetNextCode(GUI_GIF_CONTEXT * pContext) {
   \                     _GetNextCode:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    149            int i, j, End;
    150            long Result;
    151            if (pContext->ReturnClear) {
   \   00000004   D450A0E3           MOV      R5,#+212
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   F05D85E3           ORR      R5,R5,#0x3C00
   \   00000010   046085E0           ADD      R6,R5,R4
   \   00000014   100096E5           LDR      R0,[R6, #+16]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_GetNextCode_0
    152              /* The first code should be a clear code. */
    153              pContext->ReturnClear = 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   100086E5           STR      R0,[R6, #+16]
    154              return pContext->ClearCode;
   \   00000028   240096E5           LDR      R0,[R6, #+36]
   \   0000002C   7080BDE8           POP      {R4-R6,PC}
    155            }
    156            End = pContext->CurBit + pContext->CodeSize;
   \                     ??_GetNextCode_0:
   \   00000030   040095E7           LDR      R0,[R5, +R4]
   \   00000034   141096E5           LDR      R1,[R6, #+20]
   \   00000038   000081E0           ADD      R0,R1,R0
    157            if (End >= pContext->LastBit) {
   \   0000003C   041096E5           LDR      R1,[R6, #+4]
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   200000BA           BLT      ??_GetNextCode_1
    158              int Count;
    159              if (pContext->GetDone) {
   \   00000048   080096E5           LDR      R0,[R6, #+8]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0100000A           BEQ      ??_GetNextCode_2
    160                return -1; /* Error */
   \                     ??_GetNextCode_3:
   \   00000054   0000E0E3           MVN      R0,#+0
   \   00000058   7080BDE8           POP      {R4-R6,PC}
    161              }
    162              pContext->aBuffer[0] = pContext->aBuffer[pContext->LastByte - 2];
   \                     ??_GetNextCode_2:
   \   0000005C   0C0096E5           LDR      R0,[R6, #+12]
    163              pContext->aBuffer[1] = pContext->aBuffer[pContext->LastByte - 1];
    164              if ((Count = _GetDataBlock(pContext, &pContext->aBuffer[2])) == 0) {
   \   00000060   161084E2           ADD      R1,R4,#+22
   \   00000064   040080E0           ADD      R0,R0,R4
   \   00000068   1200D0E5           LDRB     R0,[R0, #+18]
   \   0000006C   1400C4E5           STRB     R0,[R4, #+20]
   \   00000070   0C0096E5           LDR      R0,[R6, #+12]
   \   00000074   040080E0           ADD      R0,R0,R4
   \   00000078   1300D0E5           LDRB     R0,[R0, #+19]
   \   0000007C   1500C4E5           STRB     R0,[R4, #+21]
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _GetDataBlock
   \   00000088   000050E3           CMP      R0,#+0
    165                pContext->GetDone = 1;
   \   0000008C   0110A003           MOVEQ    R1,#+1
   \   00000090   08108605           STREQ    R1,[R6, #+8]
   \   00000094   0000000A           BEQ      ??_GetNextCode_4
    166              }
    167              if (Count < 0) {
   \   00000098   EDFFFF4A           BMI      ??_GetNextCode_3
    168                return -1; /* Error */
    169              }
    170              pContext->LastByte = 2 + Count;
   \                     ??_GetNextCode_4:
   \   0000009C   020080E2           ADD      R0,R0,#+2
   \   000000A0   0C0086E5           STR      R0,[R6, #+12]
    171              pContext->CurBit   = (pContext->CurBit - pContext->LastBit) + 16;
   \   000000A4   041095E7           LDR      R1,[R5, +R4]
   \   000000A8   042096E5           LDR      R2,[R6, #+4]
    172              pContext->LastBit  = (2 + Count) * 8 ;
   \   000000AC   8001A0E1           LSL      R0,R0,#+3
   \   000000B0   021041E0           SUB      R1,R1,R2
   \   000000B4   101081E2           ADD      R1,R1,#+16
   \   000000B8   041085E7           STR      R1,[R5, +R4]
   \   000000BC   040086E5           STR      R0,[R6, #+4]
    173              End                  = pContext->CurBit + pContext->CodeSize;
   \   000000C0   040095E7           LDR      R0,[R5, +R4]
   \   000000C4   141096E5           LDR      R1,[R6, #+20]
   \   000000C8   000081E0           ADD      R0,R1,R0
    174            }
    175            j = End >> 3;
    176            i = pContext->CurBit >> 3;
   \                     ??_GetNextCode_1:
   \   000000CC   041095E7           LDR      R1,[R5, +R4]
   \   000000D0   C111A0E1           ASR      R1,R1,#+3
    177            if (i == j) {
   \   000000D4   C00151E1           CMP      R1,R0, ASR #+3
    178              Result = (long)pContext->aBuffer[i];
   \   000000D8   04008100           ADDEQ    R0,R1,R4
   \   000000DC   1400D005           LDRBEQ   R0,[R0, #+20]
   \   000000E0   0E00000A           BEQ      ??_GetNextCode_5
    179            } else if (i + 1 == j) {
   \   000000E4   012081E2           ADD      R2,R1,#+1
   \   000000E8   C00152E1           CMP      R2,R0, ASR #+3
   \   000000EC   040081E0           ADD      R0,R1,R4
   \   000000F0   1400D0E5           LDRB     R0,[R0, #+20]
   \   000000F4   0300001A           BNE      ??_GetNextCode_6
    180              Result = (long)pContext->aBuffer[i] | ((long)pContext->aBuffer[i + 1] << 8);
   \   000000F8   041081E0           ADD      R1,R1,R4
   \   000000FC   1510D1E5           LDRB     R1,[R1, #+21]
   \   00000100   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000104   050000EA           B        ??_GetNextCode_5
    181            }  else {
    182              Result = (long)pContext->aBuffer[i] | ((long)pContext->aBuffer[i + 1] << 8) | ((long)pContext->aBuffer[i + 2] << 16);
   \                     ??_GetNextCode_6:
   \   00000108   042081E0           ADD      R2,R1,R4
   \   0000010C   1520D2E5           LDRB     R2,[R2, #+21]
   \   00000110   041081E0           ADD      R1,R1,R4
   \   00000114   1610D1E5           LDRB     R1,[R1, #+22]
   \   00000118   020480E1           ORR      R0,R0,R2, LSL #+8
   \   0000011C   010880E1           ORR      R0,R0,R1, LSL #+16
    183            }
    184            Result = (Result >> (pContext->CurBit & 0x7)) & _aMaskTbl[pContext->CodeSize];
   \                     ??_GetNextCode_5:
   \   00000120   0410D5E7           LDRB     R1,[R5, +R4]
   \   00000124   142096E5           LDR      R2,[R6, #+20]
   \   00000128   ............       ADRL     R3,_aMaskTbl
   \              ....        
   \   00000130   071001E2           AND      R1,R1,#0x7
   \   00000134   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   \   00000138   500102E0           AND      R0,R2,R0, ASR R1
    185            pContext->CurBit += pContext->CodeSize;
   \   0000013C   041095E7           LDR      R1,[R5, +R4]
   \   00000140   142096E5           LDR      R2,[R6, #+20]
   \   00000144   011082E0           ADD      R1,R2,R1
   \   00000148   041085E7           STR      R1,[R5, +R4]
    186            return (int)Result;
   \   0000014C   7080BDE8           POP      {R4-R6,PC}       ;; return
    187          }
    188          
    189          /*********************************************************************
    190          *
    191          *       _ReadExtension
    192          *
    193          * Purpose:
    194          *   Reads an extension block. One extension block can consist of several data blocks.
    195          *   If an unknown extension block occures, the routine failes.
    196          */

   \                                 In section .text, align 4, keep-with-next
    197          static int _ReadExtension(GUI_GIF_CONTEXT * pContext, int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
   \                     _ReadExtension:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    198            U8 Label;
    199            const U8 * pData;
    200            if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \   00000018   103094E5           LDR      R3,[R4, #+16]
   \   0000001C   0120A0E3           MOV      R2,#+1
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   08C094E5           LDR      R12,[R4, #+8]
   \   0000002C   3CFF2FE1           BLX      R12
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   0B00001A           BNE      ??_ReadExtension_0
   \   00000038   100094E5           LDR      R0,[R4, #+16]
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   100084E5           STR      R0,[R4, #+16]
    201              return 1; /* Error */
    202            }
    203            Label = *pData;
    204            switch (Label) {
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   010050E2           SUBS     R0,R0,#+1
   \   00000050   0700000A           BEQ      ??_ReadExtension_1
   \   00000054   F80050E2           SUBS     R0,R0,#+248
   \   00000058   0C00000A           BEQ      ??_ReadExtension_2
   \   0000005C   050040E2           SUB      R0,R0,#+5
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   0200009A           BLS      ??_ReadExtension_1
    205            case GIF_PLAINTEXT:
    206            case GIF_APPLICATION:
    207            case GIF_COMMENT:
    208              while (_GetDataBlock(pContext, _aBuffer) > 0);
    209              return 0;
    210            case GIF_GRAPHICCTL:
    211              if (_GetDataBlock(pContext, _aBuffer) != 4) { /* Length of a graphic control block must be 4 */
    212                return 1;
    213              }
    214              if (pInfo) {
    215                pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
    216              }
    217              if (pDisposal) {
    218                *pDisposal = (_aBuffer[0] >> 2) & 0x7;
    219              }
    220              if (pTransIndex) {
    221                if ((_aBuffer[0] & 0x1) != 0) {
    222                  *pTransIndex = _aBuffer[3];
    223                }
    224              }
    225              /* Skip block terminator, must be 0 */
    226              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
    227                return 1; /* Error */
    228              }
    229              if (*pData) {
    230                return 1; /* Error */
    231              }
    232              return 0;
    233            }
    234            return 1; /* Error */
   \                     ??_ReadExtension_0:
   \   00000068   0100A0E3           MOV      R0,#+1
   \                     ??_ReadExtension_3:
   \   0000006C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000070   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??_ReadExtension_1:
   \   00000074   ........           LDR      R1,??DataTable12
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       _GetDataBlock
   \   00000080   010050E3           CMP      R0,#+1
   \   00000084   FAFFFFAA           BGE      ??_ReadExtension_1
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   F6FFFFEA           B        ??_ReadExtension_3
   \                     ??_ReadExtension_2:
   \   00000090   ........           LDR      R8,??DataTable12
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   0810A0E1           MOV      R1,R8
   \   0000009C   ........           BL       _GetDataBlock
   \   000000A0   040050E3           CMP      R0,#+4
   \   000000A4   EFFFFF1A           BNE      ??_ReadExtension_0
   \   000000A8   000056E3           CMP      R6,#+0
   \   000000AC   0300000A           BEQ      ??_ReadExtension_4
   \   000000B0   0200D8E5           LDRB     R0,[R8, #+2]
   \   000000B4   0110D8E5           LDRB     R1,[R8, #+1]
   \   000000B8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000BC   100086E5           STR      R0,[R6, #+16]
   \                     ??_ReadExtension_4:
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   0300000A           BEQ      ??_ReadExtension_5
   \   000000C8   0000D8E5           LDRB     R0,[R8, #+0]
   \   000000CC   0710A0E3           MOV      R1,#+7
   \   000000D0   200101E0           AND      R0,R1,R0, LSR #+2
   \   000000D4   0000C7E5           STRB     R0,[R7, #+0]
   \                     ??_ReadExtension_5:
   \   000000D8   000055E3           CMP      R5,#+0
   \   000000DC   0000D815           LDRBNE   R0,[R8, #+0]
   \   000000E0   0120A0E3           MOV      R2,#+1
   \   000000E4   0D10A0E1           MOV      R1,SP
   \   000000E8   01001013           TSTNE    R0,#0x1
   \   000000EC   0300D815           LDRBNE   R0,[R8, #+3]
   \   000000F0   00008515           STRNE    R0,[R5, #+0]
   \   000000F4   103094E5           LDR      R3,[R4, #+16]
   \   000000F8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000FC   08C094E5           LDR      R12,[R4, #+8]
   \   00000100   3CFF2FE1           BLX      R12
   \   00000104   010050E3           CMP      R0,#+1
   \   00000108   D6FFFF1A           BNE      ??_ReadExtension_0
   \   0000010C   100094E5           LDR      R0,[R4, #+16]
   \   00000110   010080E2           ADD      R0,R0,#+1
   \   00000114   100084E5           STR      R0,[R4, #+16]
   \   00000118   00009DE5           LDR      R0,[SP, #+0]
   \   0000011C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   CFFFFF1A           BNE      ??_ReadExtension_0
   \   00000128   CFFFFFEA           B        ??_ReadExtension_3
    235          }
    236          
    237          /*********************************************************************
    238          *
    239          *       _ReadComment
    240          *
    241          * Purpose:
    242          *   Reads a comment from the extension block if available and returns the number
    243          *   of comment bytes.
    244          */

   \                                 In section .text, align 4, keep-with-next
    245          static int _ReadComment(GUI_GIF_CONTEXT * pContext, U8 * pBuffer, int MaxSize, int * pSize) {
   \                     _ReadComment:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    246            U8 Label;
    247            int Size;
    248            const U8 * pData;
    249            if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \   00000018   103094E5           LDR      R3,[R4, #+16]
   \   0000001C   0120A0E3           MOV      R2,#+1
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   08C094E5           LDR      R12,[R4, #+8]
   \   0000002C   3CFF2FE1           BLX      R12
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   0C00001A           BNE      ??_ReadComment_0
   \   00000038   100094E5           LDR      R0,[R4, #+16]
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   100084E5           STR      R0,[R4, #+16]
    250              return 1; /* Error */
    251            }
    252            Label = *pData;
    253            switch (Label) {
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   010050E2           SUBS     R0,R0,#+1
   \   00000050   0800000A           BEQ      ??_ReadComment_1
   \   00000054   F80050E2           SUBS     R0,R0,#+248
   \   00000058   1B00000A           BEQ      ??_ReadComment_2
   \   0000005C   050050E2           SUBS     R0,R0,#+5
   \   00000060   0B00000A           BEQ      ??_ReadComment_3
   \   00000064   010050E2           SUBS     R0,R0,#+1
   \   00000068   0200000A           BEQ      ??_ReadComment_1
    254            case GIF_PLAINTEXT:
    255            case GIF_APPLICATION:
    256              while (_GetDataBlock(pContext, _aBuffer) > 0);
    257              return 0;
    258            case GIF_COMMENT:
    259              Size = _GetDataBlock(pContext, _aBuffer);
    260              if (Size > MaxSize) {
    261                Size = MaxSize;
    262              }
    263              if (pBuffer) {
    264                *pSize = Size;
    265                GUI_MEMCPY(pBuffer, _aBuffer, Size);
    266              }
    267              return 0;
    268            case GIF_GRAPHICCTL:
    269              if (_GetDataBlock(pContext, _aBuffer) != 4) { /* Length of a graphic control block must be 4 */
    270                return 1;
    271              }
    272              /* Skip block terminator, must be 0 */
    273              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
    274                return 1; /* Error */
    275              }
    276              if (*pData) {
    277                return 1; /* Error */
    278              }
    279              return 0;
    280            }
    281            return 1; /* Error */
   \                     ??_ReadComment_0:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \                     ??_ReadComment_4:
   \   00000070   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000074   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??_ReadComment_1:
   \   00000078   ........           LDR      R1,??DataTable12
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       _GetDataBlock
   \   00000084   010050E3           CMP      R0,#+1
   \   00000088   FAFFFFAA           BGE      ??_ReadComment_1
   \                     ??_ReadComment_5:
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   F6FFFFEA           B        ??_ReadComment_4
   \                     ??_ReadComment_3:
   \   00000094   ........           LDR      R8,??DataTable12
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   0810A0E1           MOV      R1,R8
   \   000000A0   ........           BL       _GetDataBlock
   \   000000A4   000056E1           CMP      R6,R0
   \   000000A8   0060A0C1           MOVGT    R6,R0
   \   000000AC   000055E3           CMP      R5,#+0
   \   000000B0   F5FFFF0A           BEQ      ??_ReadComment_5
   \   000000B4   006087E5           STR      R6,[R7, #+0]
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0810A0E1           MOV      R1,R8
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       __aeabi_memcpy
   \   000000C8   EFFFFFEA           B        ??_ReadComment_5
   \                     ??_ReadComment_2:
   \   000000CC   ........           LDR      R1,??DataTable12
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       _GetDataBlock
   \   000000D8   040050E3           CMP      R0,#+4
   \   000000DC   E2FFFF1A           BNE      ??_ReadComment_0
   \   000000E0   103094E5           LDR      R3,[R4, #+16]
   \   000000E4   0120A0E3           MOV      R2,#+1
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0C0094E5           LDR      R0,[R4, #+12]
   \   000000F0   08C094E5           LDR      R12,[R4, #+8]
   \   000000F4   3CFF2FE1           BLX      R12
   \   000000F8   010050E3           CMP      R0,#+1
   \   000000FC   DAFFFF1A           BNE      ??_ReadComment_0
   \   00000100   100094E5           LDR      R0,[R4, #+16]
   \   00000104   010080E2           ADD      R0,R0,#+1
   \   00000108   100084E5           STR      R0,[R4, #+16]
   \   0000010C   00009DE5           LDR      R0,[SP, #+0]
   \   00000110   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   D3FFFF1A           BNE      ??_ReadComment_0
   \   0000011C   D3FFFFEA           B        ??_ReadComment_4
    282          }
    283          
    284          /*********************************************************************
    285          *
    286          *       _DrawFromDataBlock
    287          *
    288          * Purpose:
    289          *   This routine draws a GIF image from the current pointer which should point to a
    290          *   valid GIF data block. The size of the desired image is given in the image descriptor.
    291          *
    292          * Return value:
    293          *   0 if succeed
    294          *   1 if not succeed
    295          *
    296          * Parameters:
    297          *   pDescriptor  - Points to a IMAGE_DESCRIPTOR structure, which contains infos about size, colors and interlacing.
    298          *   x0, y0       - Obvious.
    299          *   Transparency - Color index which should be treated as transparent.
    300          *   Disposal     - Contains the disposal method of the previous image. If Disposal == 2, the transparent pixels
    301          *                  of the image are rendered with the background color.
    302          */

   \                                 In section .text, align 4, keep-with-next
    303          static int _DrawFromDataBlock(GUI_GIF_CONTEXT * pContext, IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal, int Num, int Denom) {
   \                     _DrawFromDataBlock:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
    304            int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
    305            int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
    306            LCD_LOGPALETTE LogPalette;
    307            const LCD_PIXELINDEX * pTrans;
    308            const U8 * pData;
    309            GUI_USE_PARA(Num);
    310            GUI_USE_PARA(Denom);
    311            x0 += pDescriptor->XPos;
   \   0000000C   000097E5           LDR      R0,[R7, #+0]
   \   00000010   38D04DE2           SUB      SP,SP,#+56
   \   00000014   020080E0           ADD      R0,R0,R2
   \   00000018   18008DE5           STR      R0,[SP, #+24]
    312            y0 += pDescriptor->YPos;
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   041097E5           LDR      R1,[R7, #+4]
   \   00000024   000081E0           ADD      R0,R1,R0
   \   00000028   10008DE5           STR      R0,[SP, #+16]
    313            Width     = pDescriptor->XSize;
    314            Height    = pDescriptor->YSize;
   \   0000002C   0C0097E5           LDR      R0,[R7, #+12]
    315            NumColors = pDescriptor->NumColors;
    316            XEnd      = Width + x0 - 1;
   \   00000030   18109DE5           LDR      R1,[SP, #+24]
   \   00000034   0C008DE5           STR      R0,[SP, #+12]
   \   00000038   140097E5           LDR      R0,[R7, #+20]
   \   0000003C   14008DE5           STR      R0,[SP, #+20]
   \   00000040   080097E5           LDR      R0,[R7, #+8]
   \   00000044   000081E0           ADD      R0,R1,R0
   \   00000048   010040E2           SUB      R0,R0,#+1
   \   0000004C   08008DE5           STR      R0,[SP, #+8]
    317            BkColorIndex = LCD_GetBkColorIndex();
   \   00000050   ........           BL       LCD_GetBkColorIndex
    318            /* Get color translation table  */
    319            LogPalette.NumEntries  = NumColors;
   \   00000054   14109DE5           LDR      R1,[SP, #+20]
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   28108DE5           STR      R1,[SP, #+40]
    320            LogPalette.HasTrans    = 0;
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   2C10CDE5           STRB     R1,[SP, #+44]
    321            LogPalette.pPalEntries = pContext->aColorTable;
   \   00000068   0810A0E3           MOV      R1,#+8
   \   0000006C   F41D81E3           ORR      R1,R1,#0x3D00
   \   00000070   041081E0           ADD      R1,R1,R4
   \   00000074   30108DE5           STR      R1,[SP, #+48]
    322            if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
   \   00000078   28008DE2           ADD      R0,SP,#+40
   \   0000007C   ........           BL       LCD_GetpPalConvTable
   \   00000080   0060B0E1           MOVS     R6,R0
   \   00000084   0200001A           BNE      ??_DrawFromDataBlock_0
    323              return 1; /* Error */
   \                     ??_DrawFromDataBlock_1:
   \   00000088   0100A0E3           MOV      R0,#+1
   \                     ??_DrawFromDataBlock_2:
   \   0000008C   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   00000090   F08FBDE8           POP      {R4-R11,PC}      ;; return
    324            }
    325            if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_DrawFromDataBlock_0:
   \   00000094   088084E2           ADD      R8,R4,#+8
   \   00000098   083098E5           LDR      R3,[R8, #+8]
   \   0000009C   0120A0E3           MOV      R2,#+1
   \   000000A0   1C108DE2           ADD      R1,SP,#+28
   \   000000A4   040098E5           LDR      R0,[R8, #+4]
   \   000000A8   08C094E5           LDR      R12,[R4, #+8]
   \   000000AC   3CFF2FE1           BLX      R12
   \   000000B0   010050E3           CMP      R0,#+1
   \   000000B4   F3FFFF1A           BNE      ??_DrawFromDataBlock_1
   \   000000B8   080098E5           LDR      R0,[R8, #+8]
    326              return 1; /* Error */
    327            }
    328            Codesize  = *pData;                    /* Read the LZW codesize */
    329            GUI_GIF__InitLZW(pContext, Codesize);                    /* Initialize the LZW stack with the LZW codesize */
   \   000000BC   D010A0E3           MOV      R1,#+208
   \   000000C0   010080E2           ADD      R0,R0,#+1
   \   000000C4   080088E5           STR      R0,[R8, #+8]
   \   000000C8   1C009DE5           LDR      R0,[SP, #+28]
   \   000000CC   F01D81E3           ORR      R1,R1,#0x3C00
   \   000000D0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000D4   041081E0           ADD      R1,R1,R4
   \   000000D8   1C0081E5           STR      R0,[R1, #+28]
   \   000000DC   012080E2           ADD      R2,R0,#+1
   \   000000E0   182081E5           STR      R2,[R1, #+24]
   \   000000E4   0120A0E3           MOV      R2,#+1
   \   000000E8   1200A0E1           LSL      R0,R2,R0
   \   000000EC   280081E5           STR      R0,[R1, #+40]
   \   000000F0   013080E2           ADD      R3,R0,#+1
   \   000000F4   2C3081E5           STR      R3,[R1, #+44]
   \   000000F8   023080E2           ADD      R3,R0,#+2
   \   000000FC   203081E5           STR      R3,[R1, #+32]
   \   00000100   8000A0E1           LSL      R0,R0,#+1
   \   00000104   240081E5           STR      R0,[R1, #+36]
   \   00000108   142081E5           STR      R2,[R1, #+20]
   \   0000010C   0200A0E3           MOV      R0,#+2
   \   00000110   100081E5           STR      R0,[R1, #+16]
   \   00000114   1600A0E3           MOV      R0,#+22
   \   00000118   C40D80E3           ORR      R0,R0,#0x3100
   \   0000011C   D010A0E3           MOV      R1,#+208
   \   00000120   040080E0           ADD      R0,R0,R4
   \   00000124   F01D81E3           ORR      R1,R1,#0x3C00
   \   00000128   040081E7           STR      R0,[R1, +R4]
    330            Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
   \   0000012C   1010D7E5           LDRB     R1,[R7, #+16]
    331            for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   10709DE5           LDR      R7,[SP, #+16]
   \   00000138   401001E2           AND      R1,R1,#0x40
   \   0000013C   24108DE5           STR      R1,[SP, #+36]
   \   00000140   0C109DE5           LDR      R1,[SP, #+12]
   \   00000144   00208DE5           STR      R2,[SP, #+0]
   \   00000148   010051E3           CMP      R1,#+1
   \   0000014C   180000BA           BLT      ??_DrawFromDataBlock_3
   \   00000150   04108DE5           STR      R1,[SP, #+4]
   \   00000154   20008DE5           STR      R0,[SP, #+32]
    332              Cnt      = 0;
    333              OldIndex = -1;    
    334              for (XPos = x0; XPos <= XEnd; XPos++) {
   \                     ??_DrawFromDataBlock_4:
   \   00000158   18A09DE5           LDR      R10,[SP, #+24]
   \   0000015C   08009DE5           LDR      R0,[SP, #+8]
   \   00000160   0080A0E3           MOV      R8,#+0
   \   00000164   0890E0E1           MVN      R9,R8
   \   00000168   0A0050E1           CMP      R0,R10
   \   0000016C   3E0000BA           BLT      ??_DrawFromDataBlock_5
    335                if (pContext->sp > pContext->aDecompBuffer) {
   \                     ??_DrawFromDataBlock_6:
   \   00000170   D000A0E3           MOV      R0,#+208
   \   00000174   F00D80E3           ORR      R0,R0,#0x3C00
   \   00000178   040090E7           LDR      R0,[R0, +R4]
   \   0000017C   20109DE5           LDR      R1,[SP, #+32]
   \   00000180   000051E1           CMP      R1,R0
   \   00000184   0500002A           BCS      ??_DrawFromDataBlock_7
    336                  Index = *--(pContext->sp);
   \   00000188   D010A0E3           MOV      R1,#+208
   \   0000018C   010040E2           SUB      R0,R0,#+1
   \   00000190   F01D81E3           ORR      R1,R1,#0x3C00
   \   00000194   040081E7           STR      R0,[R1, +R4]
   \   00000198   00B0D0E5           LDRB     R11,[R0, #+0]
   \   0000019C   020000EA           B        ??_DrawFromDataBlock_8
    337                } else {
    338                  Index = GUI_GIF__GetNextByte(pContext);
   \                     ??_DrawFromDataBlock_7:
   \   000001A0   0400A0E1           MOV      R0,R4
   \   000001A4   ........           BL       GUI_GIF__GetNextByte
   \   000001A8   00B0A0E1           MOV      R11,R0
    339                }
    340                if (Index == -2) {
   \                     ??_DrawFromDataBlock_8:
   \   000001AC   02007BE3           CMN      R11,#+2
   \   000001B0   0100001A           BNE      ??_DrawFromDataBlock_9
    341                  return 0; /* End code */
   \                     ??_DrawFromDataBlock_3:
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   B3FFFFEA           B        ??_DrawFromDataBlock_2
    342                }
    343                if ((Index < 0) || (Index >= NumColors)) {
   \                     ??_DrawFromDataBlock_9:
   \   000001BC   00005BE3           CMP      R11,#+0
   \   000001C0   B0FFFF4A           BMI      ??_DrawFromDataBlock_1
   \   000001C4   14009DE5           LDR      R0,[SP, #+20]
   \   000001C8   00005BE1           CMP      R11,R0
   \   000001CC   ADFFFFAA           BGE      ??_DrawFromDataBlock_1
    344                  return 1; /* If Index out of legal range stop decompressing, error */
    345                }
    346                /* If current index equals old index increment counter */
    347                if ((Index == OldIndex) && (XPos <= XEnd)) {
   \   000001D0   09005BE1           CMP      R11,R9
    348                  Cnt++;
   \   000001D4   01808802           ADDEQ    R8,R8,#+1
   \   000001D8   1E00000A           BEQ      ??_DrawFromDataBlock_10
    349                } else {
    350                  if (Cnt) {
   \   000001DC   000058E3           CMP      R8,#+0
   \   000001E0   0F00000A           BEQ      ??_DrawFromDataBlock_11
    351                    if (OldIndex != Transparency) {
   \   000001E4   60009DE5           LDR      R0,[SP, #+96]
   \   000001E8   000059E1           CMP      R9,R0
    352                      LCD_SetColorIndex(*(pTrans + OldIndex));
   \   000001EC   09019617           LDRNE    R0,[R6, +R9, LSL #+2]
   \   000001F0   0300001A           BNE      ??_DrawFromDataBlock_12
    353                      LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
    354                    } else if (Disposal == 2) {
   \   000001F4   64009DE5           LDR      R0,[SP, #+100]
   \   000001F8   020050E3           CMP      R0,#+2
   \   000001FC   0600001A           BNE      ??_DrawFromDataBlock_13
    355                      LCD_SetColorIndex(BkColorIndex);
   \   00000200   0500A0E1           MOV      R0,R5
   \                     ??_DrawFromDataBlock_12:
   \   00000204   ........           BL       LCD_SetColorIndex
    356                      LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
   \   00000208   08004AE0           SUB      R0,R10,R8
   \   0000020C   01204AE2           SUB      R2,R10,#+1
   \   00000210   0710A0E1           MOV      R1,R7
   \   00000214   010040E2           SUB      R0,R0,#+1
   \   00000218   ........           BL       LCD_DrawHLine
    357                    }
    358                    Cnt = 0;
   \                     ??_DrawFromDataBlock_13:
   \   0000021C   0080A0E3           MOV      R8,#+0
   \   00000220   0C0000EA           B        ??_DrawFromDataBlock_10
    359                  } else {
    360                    if (OldIndex >= 0) {
   \                     ??_DrawFromDataBlock_11:
   \   00000224   000059E3           CMP      R9,#+0
   \   00000228   0A00004A           BMI      ??_DrawFromDataBlock_10
    361                      if (OldIndex != Transparency) {
   \   0000022C   60009DE5           LDR      R0,[SP, #+96]
   \   00000230   000059E1           CMP      R9,R0
    362                        LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
   \   00000234   09219617           LDRNE    R2,[R6, +R9, LSL #+2]
   \   00000238   0300001A           BNE      ??_DrawFromDataBlock_14
    363                      } else if (Disposal == 2) {
   \   0000023C   64009DE5           LDR      R0,[SP, #+100]
   \   00000240   020050E3           CMP      R0,#+2
   \   00000244   0300001A           BNE      ??_DrawFromDataBlock_10
    364                        LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
   \   00000248   0520A0E1           MOV      R2,R5
   \                     ??_DrawFromDataBlock_14:
   \   0000024C   0710A0E1           MOV      R1,R7
   \   00000250   01004AE2           SUB      R0,R10,#+1
   \   00000254   ........           BL       LCD_SetPixelIndex
    365                      }
    366                    }
    367                  }
    368                }
    369                OldIndex = Index;
    370              }
   \                     ??_DrawFromDataBlock_10:
   \   00000258   08009DE5           LDR      R0,[SP, #+8]
   \   0000025C   01A08AE2           ADD      R10,R10,#+1
   \   00000260   0B90A0E1           MOV      R9,R11
   \   00000264   0A0050E1           CMP      R0,R10
   \   00000268   C0FFFFAA           BGE      ??_DrawFromDataBlock_6
    371              if ((OldIndex != Transparency) || (Disposal == 2)) {
   \                     ??_DrawFromDataBlock_5:
   \   0000026C   60009DE5           LDR      R0,[SP, #+96]
   \   00000270   000059E1           CMP      R9,R0
   \   00000274   0C00001A           BNE      ??_DrawFromDataBlock_15
   \   00000278   64009DE5           LDR      R0,[SP, #+100]
   \   0000027C   020050E3           CMP      R0,#+2
   \   00000280   0F00001A           BNE      ??_DrawFromDataBlock_16
    372                if (OldIndex != Transparency) {
    373                  ColorIndex = *(pTrans + OldIndex);
    374                } else {
    375                  ColorIndex = BkColorIndex;
   \   00000284   0500A0E1           MOV      R0,R5
    376                }
    377                if (Cnt) {
   \                     ??_DrawFromDataBlock_17:
   \   00000288   000058E3           CMP      R8,#+0
   \   0000028C   0800000A           BEQ      ??_DrawFromDataBlock_18
    378                  LCD_SetColorIndex(ColorIndex);
   \   00000290   ........           BL       LCD_SetColorIndex
    379                  LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
   \   00000294   08004AE0           SUB      R0,R10,R8
   \   00000298   01204AE2           SUB      R2,R10,#+1
   \   0000029C   0710A0E1           MOV      R1,R7
   \   000002A0   010040E2           SUB      R0,R0,#+1
   \   000002A4   ........           BL       LCD_DrawHLine
   \   000002A8   050000EA           B        ??_DrawFromDataBlock_16
    380                } else {
   \                     ??_DrawFromDataBlock_15:
   \   000002AC   090196E7           LDR      R0,[R6, +R9, LSL #+2]
   \   000002B0   F4FFFFEA           B        ??_DrawFromDataBlock_17
    381                  LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
   \                     ??_DrawFromDataBlock_18:
   \   000002B4   0020A0E1           MOV      R2,R0
   \   000002B8   0710A0E1           MOV      R1,R7
   \   000002BC   08009DE5           LDR      R0,[SP, #+8]
   \   000002C0   ........           BL       LCD_SetPixelIndex
    382                }
    383              }
    384              /* Adjust YPos if image is interlaced */
    385              if (Interlace) {
   \                     ??_DrawFromDataBlock_16:
   \   000002C4   24009DE5           LDR      R0,[SP, #+36]
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   1200000A           BEQ      ??_DrawFromDataBlock_19
    386                YPos += GUI_GIF__aInterlaceOffset[Pass];
   \   000002D0   00009DE5           LDR      R0,[SP, #+0]
   \   000002D4   ............       ADRL     R1,GUI_GIF__aInterlaceOffset
   \              ....        
   \   000002DC   000191E7           LDR      R0,[R1, +R0, LSL #+2]
    387                if ((YPos - y0) >= Height) {
   \   000002E0   0C109DE5           LDR      R1,[SP, #+12]
   \   000002E4   077080E0           ADD      R7,R0,R7
   \   000002E8   10009DE5           LDR      R0,[SP, #+16]
   \   000002EC   000047E0           SUB      R0,R7,R0
   \   000002F0   010050E1           CMP      R0,R1
   \   000002F4   090000BA           BLT      ??_DrawFromDataBlock_20
    388                  ++Pass;
   \   000002F8   00009DE5           LDR      R0,[SP, #+0]
    389                  YPos = GUI_GIF__aInterlaceYPos[Pass] + y0;
   \   000002FC   ............       ADRL     R1,GUI_GIF__aInterlaceYPos
   \              ....        
   \   00000304   010080E2           ADD      R0,R0,#+1
   \   00000308   00008DE5           STR      R0,[SP, #+0]
   \   0000030C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000310   10109DE5           LDR      R1,[SP, #+16]
   \   00000314   007081E0           ADD      R7,R1,R0
   \   00000318   000000EA           B        ??_DrawFromDataBlock_20
    390                }
    391              } else {
    392                YPos++;
   \                     ??_DrawFromDataBlock_19:
   \   0000031C   017087E2           ADD      R7,R7,#+1
    393              }
    394            }
   \                     ??_DrawFromDataBlock_20:
   \   00000320   04009DE5           LDR      R0,[SP, #+4]
   \   00000324   010040E2           SUB      R0,R0,#+1
   \   00000328   04008DE5           STR      R0,[SP, #+4]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   55FFFF0A           BEQ      ??_DrawFromDataBlock_2
   \   00000334   87FFFFEA           B        ??_DrawFromDataBlock_4
    395            return 0;
    396          }
    397          
    398          /*********************************************************************
    399          *
    400          *       _ReadColorMap
    401          */
    402          static int _ReadColorMap(GUI_GIF_CONTEXT * pContext, int NumColors) {
    403            int i;
    404            for (i = 0; i < NumColors; i++) {
    405              U8 r, g, b;
    406              const U8 * pData;
    407              if (GUI_GIF__ReadData(pContext, 3, &pData, 0)) {
    408                return 1; /* Error */
    409              }
    410              r = *(pData + 0);
    411              g = *(pData + 1);
    412              b = *(pData + 2);
    413              pContext->aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
    414            }
    415            return 0;
    416          }
    417          
    418          /*********************************************************************
    419          *
    420          *       _InitGIFDecoding
    421          *
    422          * Purpose:
    423          *   The routine initializes the static SOURCE structure and checks
    424          *   if the file is a legal GIF file.
    425          *
    426          * Return value:
    427          *   0 on success, 1 on error
    428          */
    429          static int _InitGIFDecoding(GUI_GIF_CONTEXT * pContext) {
    430            const U8 * pData;
    431            if (GUI_GIF__ReadData(pContext, 6, &pData, 1)) {
    432              return 1; /* Error */
    433            }
    434            /* Check if the file is a legal GIF file by checking the 6 byte file header */
    435            if ( (*(pData + 0) != 'G') || 
    436                 (*(pData + 1) != 'I') || 
    437                 (*(pData + 2) != 'F') || 
    438                 (*(pData + 3) != '8') ||
    439                ((*(pData + 4) != '7') && (*(pData + 4) != '9')) ||
    440                 (*(pData + 5) != 'a')) {
    441              return 1;
    442            }
    443            return 0;
    444          }
    445          
    446          /*********************************************************************
    447          *
    448          *       _GetImageDimension
    449          *
    450          * Purpose:
    451          *   Reads the image dimension from the logical screen descriptor
    452          *
    453          * Return value:
    454          *   0 on success, 1 on error
    455          */

   \                                 In section .text, align 4, keep-with-next
    456          static int _GetImageDimension(GUI_GIF_CONTEXT * pContext, int * pxSize, int * pySize) {
   \                     _GetImageDimension:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    457            int XSize, YSize;
    458            const U8 * pData;
    459            /* Initialize decoding */
    460            if (_InitGIFDecoding(pContext)) {
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   100086E5           STR      R0,[R6, #+16]
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   0620A0E3           MOV      R2,#+6
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0C0096E5           LDR      R0,[R6, #+12]
   \   0000002C   08C096E5           LDR      R12,[R6, #+8]
   \   00000030   3CFF2FE1           BLX      R12
   \   00000034   060050E3           CMP      R0,#+6
   \   00000038   2200001A           BNE      ??_GetImageDimension_0
   \   0000003C   100096E5           LDR      R0,[R6, #+16]
   \   00000040   063080E2           ADD      R3,R0,#+6
   \   00000044   103086E5           STR      R3,[R6, #+16]
   \   00000048   00009DE5           LDR      R0,[SP, #+0]
   \   0000004C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000050   470050E3           CMP      R0,#+71
   \   00000054   1B00001A           BNE      ??_GetImageDimension_0
   \   00000058   00009DE5           LDR      R0,[SP, #+0]
   \   0000005C   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000060   490050E3           CMP      R0,#+73
   \   00000064   1700001A           BNE      ??_GetImageDimension_0
   \   00000068   00009DE5           LDR      R0,[SP, #+0]
   \   0000006C   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000070   460050E3           CMP      R0,#+70
   \   00000074   1300001A           BNE      ??_GetImageDimension_0
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   0300D0E5           LDRB     R0,[R0, #+3]
   \   00000080   380050E3           CMP      R0,#+56
   \   00000084   0F00001A           BNE      ??_GetImageDimension_0
   \   00000088   00009DE5           LDR      R0,[SP, #+0]
   \   0000008C   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000090   370050E3           CMP      R0,#+55
   \   00000094   39005013           CMPNE    R0,#+57
   \   00000098   0A00001A           BNE      ??_GetImageDimension_0
   \   0000009C   00009DE5           LDR      R0,[SP, #+0]
   \   000000A0   0500D0E5           LDRB     R0,[R0, #+5]
   \   000000A4   610050E3           CMP      R0,#+97
   \   000000A8   0600001A           BNE      ??_GetImageDimension_0
    461              return 1; /* Error */
    462            }
    463            /* Get data */
    464            if (GUI_GIF__ReadData(pContext, 4, &pData, 0)) {
   \   000000AC   0420A0E3           MOV      R2,#+4
   \   000000B0   04108DE2           ADD      R1,SP,#+4
   \   000000B4   0C0096E5           LDR      R0,[R6, #+12]
   \   000000B8   08C096E5           LDR      R12,[R6, #+8]
   \   000000BC   3CFF2FE1           BLX      R12
   \   000000C0   040050E3           CMP      R0,#+4
   \   000000C4   0100000A           BEQ      ??_GetImageDimension_1
   \                     ??_GetImageDimension_0:
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   110000EA           B        ??_GetImageDimension_2
   \                     ??_GetImageDimension_1:
   \   000000D0   100096E5           LDR      R0,[R6, #+16]
   \   000000D4   040080E2           ADD      R0,R0,#+4
   \   000000D8   100086E5           STR      R0,[R6, #+16]
    465              return 1; /* Error */
    466            }
    467            /* Read image size */
    468            XSize = GUI__Read16(&pData);
   \   000000DC   04008DE2           ADD      R0,SP,#+4
   \   000000E0   ........           BL       GUI__Read16
   \   000000E4   0060A0E1           MOV      R6,R0
    469            YSize = GUI__Read16(&pData);
   \   000000E8   04008DE2           ADD      R0,SP,#+4
   \   000000EC   ........           BL       GUI__Read16
    470            if ((XSize > 2000) || (YSize > 2000)) {
   \   000000F0   D110A0E3           MOV      R1,#+209
   \   000000F4   701E81E3           ORR      R1,R1,#0x700
   \   000000F8   010056E1           CMP      R6,R1
   \   000000FC   010050B1           CMPLT    R0,R1
   \   00000100   F0FFFFAA           BGE      ??_GetImageDimension_0
    471              return 1; /* Error if image is too large */
    472            }
    473            if (pxSize) {
   \   00000104   000054E3           CMP      R4,#+0
    474              *pxSize = XSize;
   \   00000108   00608415           STRNE    R6,[R4, #+0]
    475            }
    476            if (pySize) {
   \   0000010C   000055E3           CMP      R5,#+0
    477              *pySize = YSize;
   \   00000110   00008515           STRNE    R0,[R5, #+0]
    478            }
    479            return 0;
   \   00000114   0000A0E3           MOV      R0,#+0
   \                     ??_GetImageDimension_2:
   \   00000118   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000011C   7080BDE8           POP      {R4-R6,PC}       ;; return
    480          }
    481          
    482          /*********************************************************************
    483          *
    484          *       _GetGlobalColorTable
    485          *
    486          * Purpose:
    487          *   Reads the global color table if there is one. Returns the number of
    488          *   available colors over the pointer pNumColors (can be NULL).
    489          *
    490          * Return value:
    491          *   0 on success, 1 on error
    492          */

   \                                 In section .text, align 4, keep-with-next
    493          static int _GetGlobalColorTable(GUI_GIF_CONTEXT * pContext, int * pNumColors) {
   \                     _GetGlobalColorTable:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    494            U8 Flags;
    495            int NumColors;
    496            const U8 * pData;
    497            if (GUI_GIF__ReadData(pContext, 3, &pData, 0)) {
   \   00000010   103094E5           LDR      R3,[R4, #+16]
   \   00000014   0320A0E3           MOV      R2,#+3
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000020   08C094E5           LDR      R12,[R4, #+8]
   \   00000024   3CFF2FE1           BLX      R12
   \   00000028   030050E3           CMP      R0,#+3
   \   0000002C   1700001A           BNE      ??_GetGlobalColorTable_0
   \   00000030   100094E5           LDR      R0,[R4, #+16]
    498              return 1; /* Error */
    499            }
    500            /* Read flags from logical screen descriptor */
    501            Flags = *pData;
    502            NumColors = 2 << (Flags & 0x7);
   \   00000034   0210A0E3           MOV      R1,#+2
   \   00000038   030080E2           ADD      R0,R0,#+3
   \   0000003C   100084E5           STR      R0,[R4, #+16]
   \   00000040   04009DE5           LDR      R0,[SP, #+4]
   \   00000044   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000048   072000E2           AND      R2,R0,#0x7
   \   0000004C   1162A0E1           LSL      R6,R1,R2
    503            if (Flags & 0x80) {
   \   00000050   800010E3           TST      R0,#0x80
   \   00000054   1E00000A           BEQ      ??_GetGlobalColorTable_1
    504              /* Read global color table */
    505              if (_ReadColorMap(pContext, NumColors)) {
   \   00000058   010056E3           CMP      R6,#+1
   \   0000005C   1C0000BA           BLT      ??_GetGlobalColorTable_1
   \   00000060   0890A0E3           MOV      R9,#+8
   \   00000064   0470A0E1           MOV      R7,R4
   \   00000068   0680A0E1           MOV      R8,R6
   \   0000006C   F49D89E3           ORR      R9,R9,#0x3D00
   \                     ??_GetGlobalColorTable_2:
   \   00000070   103094E5           LDR      R3,[R4, #+16]
   \   00000074   0320A0E3           MOV      R2,#+3
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000080   08C094E5           LDR      R12,[R4, #+8]
   \   00000084   3CFF2FE1           BLX      R12
   \   00000088   030050E3           CMP      R0,#+3
   \   0000008C   0100000A           BEQ      ??_GetGlobalColorTable_3
    506                return 1; /* Error */
    507              }
    508            }
   \                     ??_GetGlobalColorTable_0:
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   110000EA           B        ??_GetGlobalColorTable_4
   \                     ??_GetGlobalColorTable_3:
   \   00000098   100094E5           LDR      R0,[R4, #+16]
   \   0000009C   018058E2           SUBS     R8,R8,#+1
   \   000000A0   030080E2           ADD      R0,R0,#+3
   \   000000A4   100084E5           STR      R0,[R4, #+16]
   \   000000A8   00009DE5           LDR      R0,[SP, #+0]
   \   000000AC   00109DE5           LDR      R1,[SP, #+0]
   \   000000B0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B4   0110D1E5           LDRB     R1,[R1, #+1]
   \   000000B8   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   0210D1E5           LDRB     R1,[R1, #+2]
   \   000000C4   010880E1           ORR      R0,R0,R1, LSL #+16
   \   000000C8   070089E7           STR      R0,[R9, +R7]
   \   000000CC   047087E2           ADD      R7,R7,#+4
   \   000000D0   E6FFFF1A           BNE      ??_GetGlobalColorTable_2
    509            if (pNumColors) {
   \                     ??_GetGlobalColorTable_1:
   \   000000D4   000055E3           CMP      R5,#+0
    510              *pNumColors = NumColors;
   \   000000D8   00608515           STRNE    R6,[R5, #+0]
    511            }
    512            return 0;
   \   000000DC   0000A0E3           MOV      R0,#+0
   \                     ??_GetGlobalColorTable_4:
   \   000000E0   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000E4   F083BDE8           POP      {R4-R9,PC}       ;; return
    513          }
    514          
    515          /*********************************************************************
    516          *
    517          *       _GetSizeAndColorTable
    518          */
    519          static int _GetSizeAndColorTable(GUI_GIF_CONTEXT * pContext, int * pxSize, int * pySize, int * pNumColors) {
    520            /* Get image size */
    521            if (_GetImageDimension(pContext, pxSize, pySize)) {
    522              return 1; /* Error */
    523            }
    524            /* Get global color table (if available) */
    525            if (_GetGlobalColorTable(pContext, pNumColors)) {
    526              return 1; /* Error */
    527            }
    528            return 0;
    529          }
    530          
    531          /*********************************************************************
    532          *
    533          *       _SkipLocalColorTable
    534          */

   \                                 In section .text, align 4, keep-with-next
    535          static void _SkipLocalColorTable(GUI_GIF_CONTEXT * pContext) {
   \                     _SkipLocalColorTable:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    536            U8 Flags;
    537            const U8 * pData;
    538            if (GUI_GIF__ReadData(pContext, 9, &pData, 0)) {
   \   0000000C   103094E5           LDR      R3,[R4, #+16]
   \   00000010   0920A0E3           MOV      R2,#+9
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   0C0094E5           LDR      R0,[R4, #+12]
   \   0000001C   08C094E5           LDR      R12,[R4, #+8]
   \   00000020   3CFF2FE1           BLX      R12
   \   00000024   090050E3           CMP      R0,#+9
   \   00000028   2800001A           BNE      ??_SkipLocalColorTable_0
   \   0000002C   100094E5           LDR      R0,[R4, #+16]
   \   00000030   093080E2           ADD      R3,R0,#+9
   \   00000034   103084E5           STR      R3,[R4, #+16]
    539              return; /* Error */
    540            }
    541            Flags = *(pData + 8);           /* Skip the first 8 bytes of the image descriptor, only 'Flags' are intresting */
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   0800D0E5           LDRB     R0,[R0, #+8]
    542            if (Flags & 0x80) {
   \   00000040   800010E3           TST      R0,#0x80
   \   00000044   1800000A           BEQ      ??_SkipLocalColorTable_1
    543              /* Skip local color table */
    544              int NumBytes, RemBytes, NumColors;
    545              NumColors = 2 << (Flags & 0x7);
    546              RemBytes = NumColors * 3 + 1; /* Skip colors (Number of colors * 3) and the codesize byte */
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   070000E2           AND      R0,R0,#0x7
   \   00000050   1100A0E1           LSL      R0,R1,R0
   \   00000054   800080E0           ADD      R0,R0,R0, LSL #+1
   \   00000058   015080E2           ADD      R5,R0,#+1
   \   0000005C   FF6081E2           ADD      R6,R1,#+255
   \   00000060   0B0000EA           B        ??_SkipLocalColorTable_2
    547              while (RemBytes) {
    548                if (RemBytes > 256) {
    549                  NumBytes = 256;
    550                } else {
    551                  NumBytes = RemBytes;
    552                }
    553                if (GUI_GIF__ReadData(pContext, NumBytes, &pData, 0)) {
   \                     ??_SkipLocalColorTable_3:
   \   00000064   103094E5           LDR      R3,[R4, #+16]
   \   00000068   0720A0E1           MOV      R2,R7
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0C0094E5           LDR      R0,[R4, #+12]
   \   00000074   08C094E5           LDR      R12,[R4, #+8]
   \   00000078   3CFF2FE1           BLX      R12
   \   0000007C   070050E1           CMP      R0,R7
   \   00000080   1200001A           BNE      ??_SkipLocalColorTable_0
   \   00000084   100094E5           LDR      R0,[R4, #+16]
    554                  return; /* Error */
    555                }
    556                RemBytes -= NumBytes;
   \   00000088   075045E0           SUB      R5,R5,R7
   \   0000008C   000087E0           ADD      R0,R7,R0
   \   00000090   100084E5           STR      R0,[R4, #+16]
   \                     ??_SkipLocalColorTable_2:
   \   00000094   000055E3           CMP      R5,#+0
   \   00000098   0C00000A           BEQ      ??_SkipLocalColorTable_0
   \   0000009C   060055E1           CMP      R5,R6
   \   000000A0   407FA0A3           MOVGE    R7,#+256
   \   000000A4   0570A0B1           MOVLT    R7,R5
   \   000000A8   EDFFFFEA           B        ??_SkipLocalColorTable_3
    557              }
    558            } else {
    559              /* Skip codesize */
    560              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_SkipLocalColorTable_1:
   \   000000AC   0120A0E3           MOV      R2,#+1
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000B8   08C094E5           LDR      R12,[R4, #+8]
   \   000000BC   3CFF2FE1           BLX      R12
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   10009405           LDREQ    R0,[R4, #+16]
   \   000000C8   01008002           ADDEQ    R0,R0,#+1
   \   000000CC   10008405           STREQ    R0,[R4, #+16]
   \                     ??_SkipLocalColorTable_0:
   \   000000D0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000D4   F080BDE8           POP      {R4-R7,PC}       ;; return
    561                return; /* Error */
    562              }
    563            }
    564          }
    565          
    566          /*********************************************************************
    567          *
    568          *       _GetGIFInfo
    569          */

   \                                 In section .text, align 4, keep-with-next
    570          static int _GetGIFInfo(GUI_GIF_CONTEXT * pContext, GUI_GIF_INFO * pInfo) {
   \                     _GetGIFInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0040A0E1           MOV      R4,R0
    571            U8 Introducer;
    572            int NumColors, ImageCnt;
    573            const U8 * pData;
    574            /* Initialize decoding and get size and global color table */
    575            if (_GetSizeAndColorTable(pContext, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
   \   00000010   042085E2           ADD      R2,R5,#+4
   \   00000014   ........           BL       _GetImageDimension
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0400001A           BNE      ??_GetGIFInfo_0
   \   00000020   04108DE2           ADD      R1,SP,#+4
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       _GetGlobalColorTable
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100000A           BEQ      ??_GetGIFInfo_1
    576              return 1; /* Error */
   \                     ??_GetGIFInfo_0:
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   280000EA           B        ??_GetGIFInfo_2
    577            }
    578            ImageCnt = 0;
   \                     ??_GetGIFInfo_1:
   \   0000003C   0060A0E3           MOV      R6,#+0
    579            /* Iterate over the blocks */
    580            do {
    581              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_GetGIFInfo_3:
   \   00000040   103094E5           LDR      R3,[R4, #+16]
   \   00000044   0120A0E3           MOV      R2,#+1
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000050   08C094E5           LDR      R12,[R4, #+8]
   \   00000054   3CFF2FE1           BLX      R12
   \   00000058   010050E3           CMP      R0,#+1
   \   0000005C   F4FFFF1A           BNE      ??_GetGIFInfo_0
   \   00000060   100094E5           LDR      R0,[R4, #+16]
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   100084E5           STR      R0,[R4, #+16]
    582                return 1; /* Error */
    583              }
    584              Introducer = *pData;
   \   0000006C   00009DE5           LDR      R0,[SP, #+0]
   \   00000070   0070D0E5           LDRB     R7,[R0, #+0]
    585              switch (Introducer) {
   \   00000074   210057E2           SUBS     R0,R7,#+33
   \   00000078   0D00000A           BEQ      ??_GetGIFInfo_4
   \   0000007C   0B0050E2           SUBS     R0,R0,#+11
   \   00000080   0200000A           BEQ      ??_GetGIFInfo_5
   \   00000084   0F0050E2           SUBS     R0,R0,#+15
   \   00000088   1000000A           BEQ      ??_GetGIFInfo_6
   \   0000008C   E8FFFFEA           B        ??_GetGIFInfo_0
    586              case GIF_INTRO_IMAGE:
    587                _SkipLocalColorTable(pContext);
   \                     ??_GetGIFInfo_5:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       _SkipLocalColorTable
    588                while (_GetDataBlock(pContext, 0) > 0); /* Skip data blocks */
   \                     ??_GetGIFInfo_7:
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       _GetDataBlock
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   FAFFFFAA           BGE      ??_GetGIFInfo_7
    589                ImageCnt++;
   \   000000AC   016086E2           ADD      R6,R6,#+1
    590                break;
   \   000000B0   060000EA           B        ??_GetGIFInfo_6
    591              case GIF_INTRO_TERMINATOR:
    592                break;
    593              case GIF_INTRO_EXTENSION:
    594                if (_ReadExtension(pContext, NULL, NULL, NULL)) { /* Skip image extension */
   \                     ??_GetGIFInfo_4:
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       _ReadExtension
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   D8FFFF1A           BNE      ??_GetGIFInfo_0
    595                  return 1;
    596                }
    597                break;
    598              default:
    599                return 1;
    600              }
    601            } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
   \                     ??_GetGIFInfo_6:
   \   000000D0   3B0057E3           CMP      R7,#+59
   \   000000D4   D9FFFF1A           BNE      ??_GetGIFInfo_3
    602            pInfo->NumImages = ImageCnt;
   \   000000D8   086085E5           STR      R6,[R5, #+8]
    603            return 0;
   \   000000DC   0000A0E3           MOV      R0,#+0
   \                     ??_GetGIFInfo_2:
   \   000000E0   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000E4   F080BDE8           POP      {R4-R7,PC}       ;; return
    604          }
    605          
    606          /*********************************************************************
    607          *
    608          *       _GetImageInfo
    609          */

   \                                 In section .text, align 4, keep-with-next
    610          static int _GetImageInfo(GUI_GIF_CONTEXT * pContext, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
   \                     _GetImageInfo:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0040A0E1           MOV      R4,R0
    611            U8 Introducer;
    612            int NumColors, ImageCnt;
    613            const U8 * pData;
    614            /* Initialize decoding and get size and global color table */
    615            if (_GetSizeAndColorTable(pContext, NULL, NULL, &NumColors)) {
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           BL       _GetImageDimension
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100000A           BEQ      ??_GetImageInfo_0
    616              return 1; /* Error */
   \                     ??_GetImageInfo_1:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3D0000EA           B        ??_GetImageInfo_2
    617            }
   \                     ??_GetImageInfo_0:
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _GetGlobalColorTable
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F8FFFF1A           BNE      ??_GetImageInfo_1
    618            ImageCnt = 0;
   \   00000044   0070A0E3           MOV      R7,#+0
    619            /* Iterate over the blocks */
    620            do {
    621              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_GetImageInfo_3:
   \   00000048   103094E5           LDR      R3,[R4, #+16]
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0C0094E5           LDR      R0,[R4, #+12]
   \   00000058   08C094E5           LDR      R12,[R4, #+8]
   \   0000005C   3CFF2FE1           BLX      R12
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   EFFFFF1A           BNE      ??_GetImageInfo_1
   \   00000068   100094E5           LDR      R0,[R4, #+16]
   \   0000006C   013080E2           ADD      R3,R0,#+1
   \   00000070   103084E5           STR      R3,[R4, #+16]
    622                return 1; /* Error */
    623              }
    624              Introducer = *pData;
   \   00000074   00009DE5           LDR      R0,[SP, #+0]
   \   00000078   0080D0E5           LDRB     R8,[R0, #+0]
    625              switch (Introducer) {
   \   0000007C   210058E2           SUBS     R0,R8,#+33
   \   00000080   2A00000A           BEQ      ??_GetImageInfo_4
   \   00000084   0B0050E2           SUBS     R0,R0,#+11
   \   00000088   0200000A           BEQ      ??_GetImageInfo_5
   \   0000008C   0F0050E2           SUBS     R0,R0,#+15
   \                     ??_GetImageInfo_6:
   \   00000090   2100000A           BEQ      ??_GetImageInfo_7
    626              case GIF_INTRO_IMAGE:
    627                if (Index == ImageCnt) {
    628                  if (GUI_GIF__ReadData(pContext, 8, &pData, 0)) {
    629                    return 1; /* Error */
    630                  }
    631                  pInfo->xPos  = GUI__Read16(&pData);
    632                  pInfo->xPos  = GUI__Read16(&pData);
    633                  pInfo->xSize = GUI__Read16(&pData);
    634                  pInfo->ySize = GUI__Read16(&pData);
    635                  return 0;
    636                }
    637                _SkipLocalColorTable(pContext);
    638                while (_GetDataBlock(pContext, 0) > 0); /* Skip data blocks */
    639                ImageCnt++;
    640                break;
    641              case GIF_INTRO_TERMINATOR:
    642                break;
    643              case GIF_INTRO_EXTENSION:
    644                if (_ReadExtension(pContext, NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
    645                  return 1;
    646                }
    647                break;
    648              default:
    649                return 1;
   \   00000094   E3FFFFEA           B        ??_GetImageInfo_1
   \                     ??_GetImageInfo_5:
   \   00000098   070056E1           CMP      R6,R7
   \   0000009C   1600001A           BNE      ??_GetImageInfo_8
   \   000000A0   0820A0E3           MOV      R2,#+8
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000AC   08C094E5           LDR      R12,[R4, #+8]
   \   000000B0   3CFF2FE1           BLX      R12
   \   000000B4   080050E3           CMP      R0,#+8
   \   000000B8   DAFFFF1A           BNE      ??_GetImageInfo_1
   \   000000BC   100094E5           LDR      R0,[R4, #+16]
   \   000000C0   080080E2           ADD      R0,R0,#+8
   \   000000C4   100084E5           STR      R0,[R4, #+16]
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           BL       GUI__Read16
   \   000000D0   000085E5           STR      R0,[R5, #+0]
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           BL       GUI__Read16
   \   000000DC   000085E5           STR      R0,[R5, #+0]
   \   000000E0   0D00A0E1           MOV      R0,SP
   \   000000E4   ........           BL       GUI__Read16
   \   000000E8   080085E5           STR      R0,[R5, #+8]
   \   000000EC   0D00A0E1           MOV      R0,SP
   \   000000F0   ........           BL       GUI__Read16
   \   000000F4   0C0085E5           STR      R0,[R5, #+12]
   \   000000F8   090000EA           B        ??_GetImageInfo_9
   \                     ??_GetImageInfo_8:
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       _SkipLocalColorTable
   \                     ??_GetImageInfo_10:
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       _GetDataBlock
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   FAFFFFAA           BGE      ??_GetImageInfo_10
   \   00000118   017087E2           ADD      R7,R7,#+1
    650              }
    651            } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
   \                     ??_GetImageInfo_7:
   \   0000011C   3B0058E3           CMP      R8,#+59
   \   00000120   C8FFFF1A           BNE      ??_GetImageInfo_3
    652            return 0;
   \                     ??_GetImageInfo_9:
   \   00000124   0000A0E3           MOV      R0,#+0
   \                     ??_GetImageInfo_2:
   \   00000128   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000012C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??_GetImageInfo_4:
   \   00000130   070056E1           CMP      R6,R7
   \   00000134   0520A001           MOVEQ    R2,R5
   \   00000138   0020A013           MOVNE    R2,#+0
   \   0000013C   0030A0E3           MOV      R3,#+0
   \   00000140   0010A0E3           MOV      R1,#+0
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       _ReadExtension
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   CEFFFFEA           B        ??_GetImageInfo_6
    653          }
    654          
    655          /*********************************************************************
    656          *
    657          *       _GetGIFComment
    658          *
    659          * Purpose:
    660          *   Returns the given comment of the GIF image.
    661          *
    662          * Parameters:
    663          *   pData            - Pointer to start of the GIF file
    664          *   NumBytes         - Number of bytes in the file
    665          *   pBuffer          - Pointer to buffer to be filled by the routine
    666          *   MaxSize          - Number of bytes in buffer
    667          *   Index            - Index of the comment to be returned
    668          *
    669          * Return value:
    670          *   0 on success, 1 on error
    671          */

   \                                 In section .text, align 4, keep-with-next
    672          static int _GetGIFComment(GUI_GIF_CONTEXT * pContext, U8 * pBuffer, int MaxSize, int Index) {
   \                     _GetGIFComment:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0370A0E1           MOV      R7,R3
    673            U8 Introducer;
    674            int NumColors, CommentCnt, Size;
    675            const U8 * pData;
    676            /* Initialize decoding and skip size and global color table */
    677            if (_GetSizeAndColorTable(pContext, NULL, NULL, &NumColors)) {
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   ........           BL       _GetImageDimension
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400001A           BNE      ??_GetGIFComment_0
   \   0000002C   08108DE2           ADD      R1,SP,#+8
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       _GetGlobalColorTable
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0200000A           BEQ      ??_GetGIFComment_1
    678              return 1; /* Error */
   \                     ??_GetGIFComment_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \                     ??_GetGIFComment_2:
   \   00000044   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000048   F081BDE8           POP      {R4-R8,PC}       ;; return
    679            }
    680            CommentCnt = Size = 0;
   \                     ??_GetGIFComment_1:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   00108DE5           STR      R1,[SP, #+0]
    681            /* Iterate over the blocks */
    682            do {
    683              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_GetGIFComment_3:
   \   00000054   103094E5           LDR      R3,[R4, #+16]
   \   00000058   0120A0E3           MOV      R2,#+1
   \   0000005C   04108DE2           ADD      R1,SP,#+4
   \   00000060   0C0094E5           LDR      R0,[R4, #+12]
   \   00000064   08C094E5           LDR      R12,[R4, #+8]
   \   00000068   3CFF2FE1           BLX      R12
   \   0000006C   010050E3           CMP      R0,#+1
   \   00000070   F2FFFF1A           BNE      ??_GetGIFComment_0
   \   00000074   100094E5           LDR      R0,[R4, #+16]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   100084E5           STR      R0,[R4, #+16]
    684                return 1; /* Error */
    685              }
    686              Introducer = *pData;
   \   00000080   04009DE5           LDR      R0,[SP, #+4]
   \   00000084   0080D0E5           LDRB     R8,[R0, #+0]
    687              switch (Introducer) {
   \   00000088   210058E2           SUBS     R0,R8,#+33
   \   0000008C   0E00000A           BEQ      ??_GetGIFComment_4
   \   00000090   0B0050E2           SUBS     R0,R0,#+11
   \   00000094   0200000A           BEQ      ??_GetGIFComment_5
   \   00000098   0F0050E2           SUBS     R0,R0,#+15
   \   0000009C   0700000A           BEQ      ??_GetGIFComment_6
   \   000000A0   E6FFFFEA           B        ??_GetGIFComment_0
    688              case GIF_INTRO_IMAGE:
    689                _SkipLocalColorTable(pContext);
   \                     ??_GetGIFComment_5:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       _SkipLocalColorTable
    690                while (_GetDataBlock(pContext, 0) > 0); /* Skip data blocks */
   \                     ??_GetGIFComment_7:
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       _GetDataBlock
   \   000000B8   010050E3           CMP      R0,#+1
   \   000000BC   FAFFFFAA           BGE      ??_GetGIFComment_7
    691                break;
    692              case GIF_INTRO_TERMINATOR:
    693                break;
    694              case GIF_INTRO_EXTENSION:
    695                _ReadComment(pContext, (Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
    696                if ((Size) && (Index == CommentCnt)) {
    697                  return 0;
    698                }
    699                break;
    700              default:
    701                return 1;
    702              }
    703            } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
   \                     ??_GetGIFComment_6:
   \   000000C0   3B0058E3           CMP      R8,#+59
   \   000000C4   E2FFFF1A           BNE      ??_GetGIFComment_3
   \   000000C8   DCFFFFEA           B        ??_GetGIFComment_0
   \                     ??_GetGIFComment_4:
   \   000000CC   000057E3           CMP      R7,#+0
   \   000000D0   0510A001           MOVEQ    R1,R5
   \   000000D4   0010A013           MOVNE    R1,#+0
   \   000000D8   0D30A0E1           MOV      R3,SP
   \   000000DC   0620A0E1           MOV      R2,R6
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       _ReadComment
   \   000000E8   00009DE5           LDR      R0,[SP, #+0]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   F2FFFF0A           BEQ      ??_GetGIFComment_6
   \   000000F4   000057E3           CMP      R7,#+0
   \   000000F8   F0FFFF1A           BNE      ??_GetGIFComment_6
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   CFFFFFEA           B        ??_GetGIFComment_2
    704            return 1;
    705          }
    706          
    707          /*********************************************************************
    708          *
    709          *       _ClearUnusedPixels
    710          *
    711          * Purpose:
    712          *   Clears the pixels between the border of the previous drawn image and
    713          *   the current image.
    714          */

   \                                 In section .text, align 4, keep-with-next
    715          static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo, int Num, int Denom) {
   \                     _ClearUnusedPixels:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0350A0E1           MOV      R5,R3
    716            GUI_USE_PARA(Num);
    717            GUI_USE_PARA(Denom);
    718            LCD_SetColorIndex(LCD_GetBkColorIndex());
   \   00000018   ........           BL       LCD_GetBkColorIndex
   \   0000001C   ........           BL       LCD_SetColorIndex
    719            if (pDescriptor->YPos > pInfo->yPos) {
   \   00000020   041097E5           LDR      R1,[R7, #+4]
   \   00000024   04C095E5           LDR      R12,[R5, #+4]
   \   00000028   01005CE1           CMP      R12,R1
   \   0000002C   080000AA           BGE      ??_ClearUnusedPixels_0
    720              LCD_FillRect(x0 + pInfo->xPos,
    721                           y0 + pInfo->yPos,
    722                           x0 + pInfo->xPos + pInfo->xSize - 1,
    723                           y0 + pDescriptor->YPos - 1);
   \   00000030   061081E0           ADD      R1,R1,R6
   \   00000034   000095E5           LDR      R0,[R5, #+0]
   \   00000038   013041E2           SUB      R3,R1,#+1
   \   0000003C   081095E5           LDR      R1,[R5, #+8]
   \   00000040   040080E0           ADD      R0,R0,R4
   \   00000044   001081E0           ADD      R1,R1,R0
   \   00000048   012041E2           SUB      R2,R1,#+1
   \   0000004C   06108CE0           ADD      R1,R12,R6
   \   00000050   ........           BL       LCD_FillRect
    724            }
    725            if (pDescriptor->XPos > pInfo->xPos) {
   \                     ??_ClearUnusedPixels_0:
   \   00000054   000097E5           LDR      R0,[R7, #+0]
   \   00000058   00C095E5           LDR      R12,[R5, #+0]
   \   0000005C   00005CE1           CMP      R12,R0
   \   00000060   080000AA           BGE      ??_ClearUnusedPixels_1
    726              LCD_FillRect(x0 + pInfo->xPos,
    727                           y0 + pInfo->yPos,
    728                           x0 + pDescriptor->XPos - 1,
    729                           y0 + pInfo->yPos + pInfo->ySize - 1);
   \   00000064   041095E5           LDR      R1,[R5, #+4]
   \   00000068   0C2095E5           LDR      R2,[R5, #+12]
   \   0000006C   061081E0           ADD      R1,R1,R6
   \   00000070   012082E0           ADD      R2,R2,R1
   \   00000074   013042E2           SUB      R3,R2,#+1
   \   00000078   040080E0           ADD      R0,R0,R4
   \   0000007C   012040E2           SUB      R2,R0,#+1
   \   00000080   04008CE0           ADD      R0,R12,R4
   \   00000084   ........           BL       LCD_FillRect
    730            }
    731            if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
   \                     ??_ClearUnusedPixels_1:
   \   00000088   0C2095E5           LDR      R2,[R5, #+12]
   \   0000008C   043095E5           LDR      R3,[R5, #+4]
   \   00000090   0C1097E5           LDR      R1,[R7, #+12]
   \   00000094   04C097E5           LDR      R12,[R7, #+4]
   \   00000098   03E082E0           ADD      LR,R2,R3
   \   0000009C   0C0081E0           ADD      R0,R1,R12
   \   000000A0   0E0050E1           CMP      R0,LR
   \   000000A4   0B0000AA           BGE      ??_ClearUnusedPixels_2
    732              LCD_FillRect(x0 + pInfo->xPos,
    733                           y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
    734                           x0 + pInfo->xPos + pInfo->xSize - 1,
    735                           y0 + pInfo->yPos + pInfo->ySize - 1);
   \   000000A8   063083E0           ADD      R3,R3,R6
   \   000000AC   032082E0           ADD      R2,R2,R3
   \   000000B0   000095E5           LDR      R0,[R5, #+0]
   \   000000B4   013042E2           SUB      R3,R2,#+1
   \   000000B8   082095E5           LDR      R2,[R5, #+8]
   \   000000BC   040080E0           ADD      R0,R0,R4
   \   000000C0   06C08CE0           ADD      R12,R12,R6
   \   000000C4   002082E0           ADD      R2,R2,R0
   \   000000C8   0C1081E0           ADD      R1,R1,R12
   \   000000CC   012042E2           SUB      R2,R2,#+1
   \   000000D0   011041E2           SUB      R1,R1,#+1
   \   000000D4   ........           BL       LCD_FillRect
    736            }
    737            if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
   \                     ??_ClearUnusedPixels_2:
   \   000000D8   082095E5           LDR      R2,[R5, #+8]
   \   000000DC   080097E5           LDR      R0,[R7, #+8]
   \   000000E0   00E095E5           LDR      LR,[R5, #+0]
   \   000000E4   00C097E5           LDR      R12,[R7, #+0]
   \   000000E8   0E3082E0           ADD      R3,R2,LR
   \   000000EC   0C1080E0           ADD      R1,R0,R12
   \   000000F0   030051E1           CMP      R1,R3
   \   000000F4   0B0000AA           BGE      ??_ClearUnusedPixels_3
    738              LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
    739                           y0 + pInfo->yPos,
    740                           x0 + pInfo->xPos + pInfo->xSize - 1,
    741                           y0 + pInfo->yPos + pInfo->ySize - 1);
   \   000000F8   041095E5           LDR      R1,[R5, #+4]
   \   000000FC   0C3095E5           LDR      R3,[R5, #+12]
   \   00000100   061081E0           ADD      R1,R1,R6
   \   00000104   04E08EE0           ADD      LR,LR,R4
   \   00000108   04C08CE0           ADD      R12,R12,R4
   \   0000010C   013083E0           ADD      R3,R3,R1
   \   00000110   0E2082E0           ADD      R2,R2,LR
   \   00000114   0C0080E0           ADD      R0,R0,R12
   \   00000118   013043E2           SUB      R3,R3,#+1
   \   0000011C   012042E2           SUB      R2,R2,#+1
   \   00000120   010040E2           SUB      R0,R0,#+1
   \   00000124   ........           BL       LCD_FillRect
    742            }
    743          }
   \                     ??_ClearUnusedPixels_3:
   \   00000128   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000012C   F080BDE8           POP      {R4-R7,PC}       ;; return
    744          
    745          /*********************************************************************
    746          *
    747          *       GUI_GIF__DrawFromFilePointer
    748          *
    749          * Purpose:
    750          *   Draws the given sub image of a GIF file.
    751          *
    752          * Parameters:
    753          *   pContext - Pointer to GUI_GIF_CONTEXT
    754          *   x0       - Drawing position x
    755          *   y0       - Drawing position y
    756          *   Index    - Index of sub image to be drawn
    757          *
    758          * Return value:
    759          *   0 on success, 1 on error
    760          */

   \                                 In section .text, align 4, keep-with-next
    761          int GUI_GIF__DrawFromFilePointer(GUI_GIF_CONTEXT * pContext, int x0, int y0, int Index, int Num, int Denom, DRAW_FROM_DATABLOCK pfDrawFromDataBlock, CLEAR_UNUSED_PIXELS pfClearUnusedPixels) {
   \                     GUI_GIF__DrawFromFilePointer:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0350A0E1           MOV      R5,R3
    762            U8 Disposal = 0;
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   1060CDE5           STRB     R6,[SP, #+16]
    763            int XSize, YSize, TransIndex, ImageCnt;
    764            IMAGE_DESCRIPTOR Descriptor = {0};
   \   00000018   1C008DE2           ADD      R0,SP,#+28
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0E00A0E8           STM      R0!,{R1-R3}
   \   0000002C   0E00A0E8           STM      R0!,{R1-R3}
    765            GUI_GIF_IMAGE_INFO Info = {0};
   \   00000030   3C008DE2           ADD      R0,SP,#+60
   \   00000034   0E00A0E8           STM      R0!,{R1-R3}
   \   00000038   0600A0E8           STM      R0!,{R1,R2}
    766            U8 Introducer;
    767            const U8 * pData;
    768            ImageCnt   =  0;
    769            TransIndex = -1;
   \   0000003C   0110E0E1           MVN      R1,R1
   \   00000040   18108DE5           STR      R1,[SP, #+24]
   \   00000044   0070A0E3           MOV      R7,#+0
    770            /* Initialize decoding and get size and global color table */
    771            if (_GetSizeAndColorTable(pContext, &XSize, &YSize, &Descriptor.NumColors)) {
   \   00000048   34208DE2           ADD      R2,SP,#+52
   \   0000004C   38108DE2           ADD      R1,SP,#+56
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       _GetImageDimension
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0100000A           BEQ      ??GUI_GIF__DrawFromFilePointer_0
    772              return 1; /* Error */
   \                     ??GUI_GIF__DrawFromFilePointer_1:
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   9F0000EA           B        ??GUI_GIF__DrawFromFilePointer_2
    773            }
   \                     ??GUI_GIF__DrawFromFilePointer_0:
   \   00000068   30108DE2           ADD      R1,SP,#+48
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       _GetGlobalColorTable
   \   00000074   08B0A0E3           MOV      R11,#+8
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   F4BD8BE3           ORR      R11,R11,#0x3D00
   \   00000080   F6FFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
    774            /* Iterate over the blocks */
    775            do {
    776              if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??GUI_GIF__DrawFromFilePointer_3:
   \   00000084   103094E5           LDR      R3,[R4, #+16]
   \   00000088   0120A0E3           MOV      R2,#+1
   \   0000008C   14108DE2           ADD      R1,SP,#+20
   \   00000090   0C0094E5           LDR      R0,[R4, #+12]
   \   00000094   08C094E5           LDR      R12,[R4, #+8]
   \   00000098   3CFF2FE1           BLX      R12
   \   0000009C   010050E3           CMP      R0,#+1
   \   000000A0   EEFFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
   \   000000A4   100094E5           LDR      R0,[R4, #+16]
   \   000000A8   013080E2           ADD      R3,R0,#+1
   \   000000AC   103084E5           STR      R3,[R4, #+16]
    777                return 1; /* Error */
    778              }
    779              Introducer = *pData;
   \   000000B0   14009DE5           LDR      R0,[SP, #+20]
   \   000000B4   0080D0E5           LDRB     R8,[R0, #+0]
    780              switch (Introducer) {
   \   000000B8   210058E2           SUBS     R0,R8,#+33
   \   000000BC   8B00000A           BEQ      ??GUI_GIF__DrawFromFilePointer_4
   \   000000C0   0B0050E2           SUBS     R0,R0,#+11
   \   000000C4   0200000A           BEQ      ??GUI_GIF__DrawFromFilePointer_5
   \   000000C8   0F0050E2           SUBS     R0,R0,#+15
   \   000000CC   8200000A           BEQ      ??GUI_GIF__DrawFromFilePointer_6
    781              case GIF_INTRO_IMAGE:
    782                /* Read image descriptor */
    783                if (GUI_GIF__ReadData(pContext, 9, &pData, 0)) {
    784                  return 1; /* Error */
    785                }
    786                Descriptor.XPos  = GUI__Read16(&pData);
    787                Descriptor.YPos  = GUI__Read16(&pData);
    788                Descriptor.XSize = GUI__Read16(&pData);
    789                Descriptor.YSize = GUI__Read16(&pData);
    790                Descriptor.Flags = *pData;
    791                if (Descriptor.Flags & 0x80) {
    792                  /* Read local color table */
    793                  Descriptor.NumColors = 2 << (Descriptor.Flags & 0x7);
    794                  if (_ReadColorMap(pContext, Descriptor.NumColors)) {
    795                    return 1; /* Error */
    796                  }
    797                }
    798                if (ImageCnt == Index - 1) {
    799                  Info.xPos  = Descriptor.XPos;
    800                  Info.yPos  = Descriptor.YPos;
    801                  Info.xSize = Descriptor.XSize;
    802                  Info.ySize = Descriptor.YSize;
    803                }
    804                if (Index == ImageCnt) {
    805                  if (Disposal == 2) {
    806                    pfClearUnusedPixels(x0, y0, &Descriptor, &Info, Num, Denom);
    807                  }
    808                  if (pfDrawFromDataBlock(pContext, &Descriptor, x0, y0, TransIndex, Disposal, Num, Denom)) {
    809                    return 1; /* Error */
    810                  }
    811                  /* Skip block terminator, must be 0 */
    812                  if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
    813                    return 1; /* Error */
    814                  }
    815                  #if 0
    816                  if (*pData) {
    817                    return 1; /* Error */
    818                  }
    819                  #endif
    820                  return 0;
    821                } else {
    822                  /* Skip codesize */
    823                  if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
    824                    return 1; /* Error */
    825                  }
    826                  while (_GetDataBlock(pContext, 0) > 0); /* Skip data blocks */
    827                }
    828                ImageCnt++;
    829                break;
    830              case GIF_INTRO_TERMINATOR:
    831                break;
    832              case GIF_INTRO_EXTENSION:
    833                /* Read image extension */
    834                if (_ReadExtension(pContext, &TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
    835                  return 1;
    836                }
    837                break;
    838              default:
    839                return 1;
   \   000000D0   E2FFFFEA           B        ??GUI_GIF__DrawFromFilePointer_1
   \                     ??GUI_GIF__DrawFromFilePointer_5:
   \   000000D4   0920A0E3           MOV      R2,#+9
   \   000000D8   14108DE2           ADD      R1,SP,#+20
   \   000000DC   0C0094E5           LDR      R0,[R4, #+12]
   \   000000E0   08C094E5           LDR      R12,[R4, #+8]
   \   000000E4   3CFF2FE1           BLX      R12
   \   000000E8   090050E3           CMP      R0,#+9
   \   000000EC   DBFFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
   \   000000F0   100094E5           LDR      R0,[R4, #+16]
   \   000000F4   090080E2           ADD      R0,R0,#+9
   \   000000F8   100084E5           STR      R0,[R4, #+16]
   \   000000FC   14008DE2           ADD      R0,SP,#+20
   \   00000100   ........           BL       GUI__Read16
   \   00000104   1C008DE5           STR      R0,[SP, #+28]
   \   00000108   14008DE2           ADD      R0,SP,#+20
   \   0000010C   ........           BL       GUI__Read16
   \   00000110   20008DE5           STR      R0,[SP, #+32]
   \   00000114   14008DE2           ADD      R0,SP,#+20
   \   00000118   ........           BL       GUI__Read16
   \   0000011C   24008DE5           STR      R0,[SP, #+36]
   \   00000120   14008DE2           ADD      R0,SP,#+20
   \   00000124   ........           BL       GUI__Read16
   \   00000128   28008DE5           STR      R0,[SP, #+40]
   \   0000012C   14009DE5           LDR      R0,[SP, #+20]
   \   00000130   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000134   2C008DE5           STR      R0,[SP, #+44]
   \   00000138   800010E3           TST      R0,#0x80
   \   0000013C   2A00001A           BNE      ??GUI_GIF__DrawFromFilePointer_7
   \                     ??GUI_GIF__DrawFromFilePointer_8:
   \   00000140   010045E2           SUB      R0,R5,#+1
   \   00000144   000057E1           CMP      R7,R0
   \   00000148   0700001A           BNE      ??GUI_GIF__DrawFromFilePointer_9
   \   0000014C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000150   3C108DE5           STR      R1,[SP, #+60]
   \   00000154   20109DE5           LDR      R1,[SP, #+32]
   \   00000158   40108DE5           STR      R1,[SP, #+64]
   \   0000015C   24109DE5           LDR      R1,[SP, #+36]
   \   00000160   44108DE5           STR      R1,[SP, #+68]
   \   00000164   28109DE5           LDR      R1,[SP, #+40]
   \   00000168   48108DE5           STR      R1,[SP, #+72]
   \                     ??GUI_GIF__DrawFromFilePointer_9:
   \   0000016C   070055E1           CMP      R5,R7
   \   00000170   4800001A           BNE      ??GUI_GIF__DrawFromFilePointer_10
   \   00000174   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000178   020050E3           CMP      R0,#+2
   \   0000017C   0900001A           BNE      ??GUI_GIF__DrawFromFilePointer_11
   \   00000180   84009DE5           LDR      R0,[SP, #+132]
   \   00000184   3C308DE2           ADD      R3,SP,#+60
   \   00000188   04008DE5           STR      R0,[SP, #+4]
   \   0000018C   80009DE5           LDR      R0,[SP, #+128]
   \   00000190   1C208DE2           ADD      R2,SP,#+28
   \   00000194   00008DE5           STR      R0,[SP, #+0]
   \   00000198   58109DE5           LDR      R1,[SP, #+88]
   \   0000019C   54009DE5           LDR      R0,[SP, #+84]
   \   000001A0   8CC09DE5           LDR      R12,[SP, #+140]
   \   000001A4   3CFF2FE1           BLX      R12
   \                     ??GUI_GIF__DrawFromFilePointer_11:
   \   000001A8   84009DE5           LDR      R0,[SP, #+132]
   \   000001AC   58309DE5           LDR      R3,[SP, #+88]
   \   000001B0   0C008DE5           STR      R0,[SP, #+12]
   \   000001B4   80009DE5           LDR      R0,[SP, #+128]
   \   000001B8   54209DE5           LDR      R2,[SP, #+84]
   \   000001BC   08008DE5           STR      R0,[SP, #+8]
   \   000001C0   1000DDE5           LDRB     R0,[SP, #+16]
   \   000001C4   1C108DE2           ADD      R1,SP,#+28
   \   000001C8   88C09DE5           LDR      R12,[SP, #+136]
   \   000001CC   04008DE5           STR      R0,[SP, #+4]
   \   000001D0   18009DE5           LDR      R0,[SP, #+24]
   \   000001D4   00008DE5           STR      R0,[SP, #+0]
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   3CFF2FE1           BLX      R12
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   1F00000A           BEQ      ??GUI_GIF__DrawFromFilePointer_12
   \   000001E8   9CFFFFEA           B        ??GUI_GIF__DrawFromFilePointer_1
   \                     ??GUI_GIF__DrawFromFilePointer_7:
   \   000001EC   0210A0E3           MOV      R1,#+2
   \   000001F0   070000E2           AND      R0,R0,#0x7
   \   000001F4   11A0A0E1           LSL      R10,R1,R0
   \   000001F8   30A08DE5           STR      R10,[SP, #+48]
   \   000001FC   01005AE3           CMP      R10,#+1
   \   00000200   CEFFFFBA           BLT      ??GUI_GIF__DrawFromFilePointer_8
   \   00000204   0490A0E1           MOV      R9,R4
   \                     ??GUI_GIF__DrawFromFilePointer_13:
   \   00000208   103094E5           LDR      R3,[R4, #+16]
   \   0000020C   0320A0E3           MOV      R2,#+3
   \   00000210   0D10A0E1           MOV      R1,SP
   \   00000214   0C0094E5           LDR      R0,[R4, #+12]
   \   00000218   08C094E5           LDR      R12,[R4, #+8]
   \   0000021C   3CFF2FE1           BLX      R12
   \   00000220   030050E3           CMP      R0,#+3
   \   00000224   8DFFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
   \   00000228   100094E5           LDR      R0,[R4, #+16]
   \   0000022C   01A05AE2           SUBS     R10,R10,#+1
   \   00000230   030080E2           ADD      R0,R0,#+3
   \   00000234   100084E5           STR      R0,[R4, #+16]
   \   00000238   00009DE5           LDR      R0,[SP, #+0]
   \   0000023C   00109DE5           LDR      R1,[SP, #+0]
   \   00000240   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000244   0110D1E5           LDRB     R1,[R1, #+1]
   \   00000248   010480E1           ORR      R0,R0,R1, LSL #+8
   \   0000024C   00109DE5           LDR      R1,[SP, #+0]
   \   00000250   0210D1E5           LDRB     R1,[R1, #+2]
   \   00000254   010880E1           ORR      R0,R0,R1, LSL #+16
   \   00000258   09008BE7           STR      R0,[R11, +R9]
   \   0000025C   049089E2           ADD      R9,R9,#+4
   \   00000260   E8FFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_13
   \   00000264   B5FFFFEA           B        ??GUI_GIF__DrawFromFilePointer_8
   \                     ??GUI_GIF__DrawFromFilePointer_12:
   \   00000268   103094E5           LDR      R3,[R4, #+16]
   \   0000026C   0120A0E3           MOV      R2,#+1
   \   00000270   14108DE2           ADD      R1,SP,#+20
   \   00000274   0C0094E5           LDR      R0,[R4, #+12]
   \   00000278   08C094E5           LDR      R12,[R4, #+8]
   \   0000027C   3CFF2FE1           BLX      R12
   \   00000280   010050E3           CMP      R0,#+1
   \   00000284   75FFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
   \   00000288   100094E5           LDR      R0,[R4, #+16]
   \   0000028C   010080E2           ADD      R0,R0,#+1
   \   00000290   100084E5           STR      R0,[R4, #+16]
   \   00000294   120000EA           B        ??GUI_GIF__DrawFromFilePointer_14
   \                     ??GUI_GIF__DrawFromFilePointer_10:
   \   00000298   103094E5           LDR      R3,[R4, #+16]
   \   0000029C   0120A0E3           MOV      R2,#+1
   \   000002A0   14108DE2           ADD      R1,SP,#+20
   \   000002A4   0C0094E5           LDR      R0,[R4, #+12]
   \   000002A8   08C094E5           LDR      R12,[R4, #+8]
   \   000002AC   3CFF2FE1           BLX      R12
   \   000002B0   010050E3           CMP      R0,#+1
   \   000002B4   69FFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_1
   \   000002B8   100094E5           LDR      R0,[R4, #+16]
   \   000002BC   010080E2           ADD      R0,R0,#+1
   \   000002C0   100084E5           STR      R0,[R4, #+16]
   \                     ??GUI_GIF__DrawFromFilePointer_15:
   \   000002C4   0010A0E3           MOV      R1,#+0
   \   000002C8   0400A0E1           MOV      R0,R4
   \   000002CC   ........           BL       _GetDataBlock
   \   000002D0   010050E3           CMP      R0,#+1
   \   000002D4   FAFFFFAA           BGE      ??GUI_GIF__DrawFromFilePointer_15
   \   000002D8   017087E2           ADD      R7,R7,#+1
    840              }
    841            } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
   \                     ??GUI_GIF__DrawFromFilePointer_6:
   \   000002DC   3B0058E3           CMP      R8,#+59
   \   000002E0   67FFFF1A           BNE      ??GUI_GIF__DrawFromFilePointer_3
    842            return 0;
   \                     ??GUI_GIF__DrawFromFilePointer_14:
   \   000002E4   0000A0E3           MOV      R0,#+0
   \                     ??GUI_GIF__DrawFromFilePointer_2:
   \   000002E8   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   000002EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GUI_GIF__DrawFromFilePointer_4:
   \   000002F0   070055E1           CMP      R5,R7
   \   000002F4   10308D02           ADDEQ    R3,SP,#+16
   \   000002F8   3C208D02           ADDEQ    R2,SP,#+60
   \   000002FC   0030A013           MOVNE    R3,#+0
   \   00000300   0020A013           MOVNE    R2,#+0
   \   00000304   18108DE2           ADD      R1,SP,#+24
   \   00000308   0400A0E1           MOV      R0,R4
   \   0000030C   ........           BL       _ReadExtension
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   F0FFFF0A           BEQ      ??GUI_GIF__DrawFromFilePointer_6
   \   00000318   50FFFFEA           B        ??GUI_GIF__DrawFromFilePointer_1
    843          }
    844          
    845          /*********************************************************************
    846          *
    847          *       _GetValue
    848          */
    849          static U16 _GetValue(GUI_GET_DATA_FUNC * pfGetData, void * p, int Offset) {
    850            const U8        * pData;
    851            U16               r = 0;
    852            GUI_HMEM          hContext;
    853            GUI_GIF_CONTEXT * pContext;
    854          
    855            GUI_LOCK();
    856            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
    857            if (hContext) {
    858              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
    859              pContext->pfGetData = pfGetData;
    860              pContext->pParam    = p;
    861              if (GUI_GIF__ReadData(pContext, Offset + 2, &pData, 1)) {
    862                return 0; /* Error */
    863              }
    864              pData += Offset;
    865              r = GUI__Read16(&pData);
    866              GUI_ALLOC_Free(hContext);
    867            }
    868            GUI_UNLOCK();
    869            return r;
    870          }
    871          
    872          /*********************************************************************
    873          *
    874          *       Private code
    875          *
    876          **********************************************************************
    877          */
    878          /*********************************************************************
    879          *
    880          *       GUI_GIF__GetNextByte
    881          *
    882          * Purpose:
    883          *   Reads the next LZW code from the LZW stack and returns the first byte from the LZW code.
    884          *
    885          * Return value:
    886          *   >= 0 if succeed
    887          *   -1   if not succeed
    888          *   -2   if end code has been read
    889          */

   \                                 In section .text, align 4, keep-with-next
    890          int GUI_GIF__GetNextByte(GUI_GIF_CONTEXT * pContext) {
   \                     GUI_GIF__GetNextByte:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1600A0E3           MOV      R0,#+22
   \   0000000C   C40D80E3           ORR      R0,R0,#0x3100
   \   00000010   F450A0E3           MOV      R5,#+244
   \   00000014   1660A0E3           MOV      R6,#+22
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   040080E0           ADD      R0,R0,R4
   \   00000020   F05D85E3           ORR      R5,R5,#0x3C00
   \   00000024   406F86E3           ORR      R6,R6,#0x100
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   807D86E3           ORR      R7,R6,#0x2000
   \   00000030   F48DA0E3           MOV      R8,#+15616
   \   00000034   2490C5E3           BIC      R9,R5,#0x24
   \   00000038   04A0C5E3           BIC      R10,R5,#0x4
   \   0000003C   04B085E2           ADD      R11,R5,#+4
    891            int i, Code, Incode;
    892            while ((Code = _GetNextCode(pContext)) >= 0) {
   \                     ??GUI_GIF__GetNextByte_0:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       _GetNextCode
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   7900004A           BMI      ??GUI_GIF__GetNextByte_1
    893              if (Code == pContext->ClearCode) {
   \   00000050   04109BE7           LDR      R1,[R11, +R4]
   \   00000054   010050E1           CMP      R0,R1
   \   00000058   2900001A           BNE      ??GUI_GIF__GetNextByte_2
    894                /* Corrupt GIFs can make this happen */
    895                if (pContext->ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
   \   0000005C   400D51E3           CMP      R1,#+4096
    896                  return -1; /* Error */
   \   00000060   0000E0A3           MVNGE    R0,#+0
   \   00000064   730000AA           BGE      ??GUI_GIF__GetNextByte_1
    897                }
    898                /* Clear the tables */
    899                GUI__memset((U8 *)pContext->aCode, 0, sizeof(pContext->aCode));
   \   00000068   802DA0E3           MOV      R2,#+8192
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   040086E0           ADD      R0,R6,R4
   \   00000074   ........           BL       GUI__memset
    900                for (i = 0; i < pContext->ClearCode; ++i) {
   \   00000078   04209BE7           LDR      R2,[R11, +R4]
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   0410A0E1           MOV      R1,R4
   \   00000084   010052E3           CMP      R2,#+1
   \   00000088   050000BA           BLT      ??GUI_GIF__GetNextByte_3
    901                  pContext->aPrefix[i] = i;
   \                     ??GUI_GIF__GetNextByte_4:
   \   0000008C   0100C7E7           STRB     R0,[R7, +R1]
    902                }
   \   00000090   04209BE7           LDR      R2,[R11, +R4]
   \   00000094   010080E2           ADD      R0,R0,#+1
   \   00000098   011081E2           ADD      R1,R1,#+1
   \   0000009C   020050E1           CMP      R0,R2
   \   000000A0   F9FFFFBA           BLT      ??GUI_GIF__GetNextByte_4
    903                /* Calculate the 'special codes' in dependence of the initial code size
    904                   and initialize the stack pointer */
    905                pContext->CodeSize    = pContext->SetCodeSize + 1;
   \                     ??GUI_GIF__GetNextByte_3:
   \   000000A4   080045E2           SUB      R0,R5,#+8
   \   000000A8   040090E7           LDR      R0,[R0, +R4]
   \   000000AC   0C1045E2           SUB      R1,R5,#+12
   \   000000B0   010080E2           ADD      R0,R0,#+1
   \   000000B4   040081E7           STR      R0,[R1, +R4]
    906                pContext->MaxCodeSize = pContext->ClearCode << 1;
   \   000000B8   04009BE7           LDR      R0,[R11, +R4]
   \   000000BC   8000A0E1           LSL      R0,R0,#+1
   \   000000C0   040085E7           STR      R0,[R5, +R4]
    907                pContext->MaxCode     = pContext->ClearCode + 2;
   \   000000C4   04009BE7           LDR      R0,[R11, +R4]
   \   000000C8   020080E2           ADD      R0,R0,#+2
   \   000000CC   04008AE7           STR      R0,[R10, +R4]
    908                pContext->sp          = pContext->aDecompBuffer;
   \   000000D0   C00D86E3           ORR      R0,R6,#0x3000
   \   000000D4   040080E0           ADD      R0,R0,R4
   \   000000D8   040089E7           STR      R0,[R9, +R4]
    909                /* Read the first code from the stack after clearing and initializing */
    910                do {
    911                  pContext->FirstCode = _GetNextCode(pContext);
   \                     ??GUI_GIF__GetNextByte_5:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       _GetNextCode
   \   000000E4   040088E7           STR      R0,[R8, +R4]
    912                } while (pContext->FirstCode == pContext->ClearCode);
   \   000000E8   04109BE7           LDR      R1,[R11, +R4]
   \   000000EC   010050E1           CMP      R0,R1
   \   000000F0   F9FFFF0A           BEQ      ??GUI_GIF__GetNextByte_5
    913                pContext->OldCode = pContext->FirstCode;
   \   000000F4   101085E2           ADD      R1,R5,#+16
   \   000000F8   040081E7           STR      R0,[R1, +R4]
    914                return pContext->FirstCode;
   \   000000FC   040098E7           LDR      R0,[R8, +R4]
   \   00000100   4C0000EA           B        ??GUI_GIF__GetNextByte_1
    915              }
    916              if (Code == pContext->EndCode) {
   \                     ??GUI_GIF__GetNextByte_2:
   \   00000104   081085E3           ORR      R1,R5,#0x8
   \   00000108   041091E7           LDR      R1,[R1, +R4]
   \   0000010C   010050E1           CMP      R0,R1
    917                return -2; /* End code */
   \   00000110   0100E003           MVNEQ    R0,#+1
   \   00000114   4700000A           BEQ      ??GUI_GIF__GetNextByte_1
    918              }
    919              Incode = Code;
    920              if (Code >= pContext->MaxCode) {
   \   00000118   04209AE7           LDR      R2,[R10, +R4]
   \   0000011C   0010A0E1           MOV      R1,R0
   \   00000120   020050E1           CMP      R0,R2
   \   00000124   0E0000BA           BLT      ??GUI_GIF__GetNextByte_6
    921                *(pContext->sp)++ = pContext->FirstCode;
   \   00000128   040099E7           LDR      R0,[R9, +R4]
   \   0000012C   012080E2           ADD      R2,R0,#+1
   \   00000130   042089E7           STR      R2,[R9, +R4]
   \   00000134   042098E7           LDR      R2,[R8, +R4]
   \   00000138   0020C0E5           STRB     R2,[R0, #+0]
    922                Code = pContext->OldCode;
   \   0000013C   100085E2           ADD      R0,R5,#+16
   \   00000140   040090E7           LDR      R0,[R0, +R4]
   \   00000144   060000EA           B        ??GUI_GIF__GetNextByte_6
    923              }
    924              while (Code >= pContext->ClearCode) {
    925                *(pContext->sp)++ = pContext->aPrefix[Code];
    926                if (Code == pContext->aCode[Code]) {
    927                  return Code;
    928                }
    929                if ((pContext->sp - pContext->aDecompBuffer) >= sizeof(pContext->aDecompBuffer)) {
   \                     ??GUI_GIF__GetNextByte_7:
   \   00000148   043099E7           LDR      R3,[R9, +R4]
   \   0000014C   00C09DE5           LDR      R12,[SP, #+0]
   \   00000150   0C3043E0           SUB      R3,R3,R12
   \   00000154   C5CD4BE2           SUB      R12,R11,#+12608
   \   00000158   0C0053E1           CMP      R3,R12
   \   0000015C   3500002A           BCS      ??GUI_GIF__GetNextByte_1
    930                  return Code;
    931                }
    932                Code = pContext->aCode[Code];
   \   00000160   F20096E1           LDRSH    R0,[R6, +R2]
   \                     ??GUI_GIF__GetNextByte_6:
   \   00000164   04209BE7           LDR      R2,[R11, +R4]
   \   00000168   020050E1           CMP      R0,R2
   \   0000016C   042099E7           LDR      R2,[R9, +R4]
   \   00000170   013082E2           ADD      R3,R2,#+1
   \   00000174   043089E7           STR      R3,[R9, +R4]
   \   00000178   070000BA           BLT      ??GUI_GIF__GetNextByte_8
   \   0000017C   043080E0           ADD      R3,R0,R4
   \   00000180   0330D7E7           LDRB     R3,[R7, +R3]
   \   00000184   0030C2E5           STRB     R3,[R2, #+0]
   \   00000188   802084E0           ADD      R2,R4,R0, LSL #+1
   \   0000018C   F23096E1           LDRSH    R3,[R6, +R2]
   \   00000190   030050E1           CMP      R0,R3
   \   00000194   EBFFFF1A           BNE      ??GUI_GIF__GetNextByte_7
   \   00000198   260000EA           B        ??GUI_GIF__GetNextByte_1
    933              }
    934              *(pContext->sp)++ = pContext->FirstCode = pContext->aPrefix[Code];
   \                     ??GUI_GIF__GetNextByte_8:
   \   0000019C   040080E0           ADD      R0,R0,R4
   \   000001A0   0000D7E7           LDRB     R0,[R7, +R0]
   \   000001A4   040088E7           STR      R0,[R8, +R4]
   \   000001A8   0000C2E5           STRB     R0,[R2, #+0]
    935              if ((Code = pContext->MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
   \   000001AC   04009AE7           LDR      R0,[R10, +R4]
   \   000001B0   400D50E3           CMP      R0,#+4096
   \   000001B4   150000AA           BGE      ??GUI_GIF__GetNextByte_9
    936                pContext->aCode  [Code] = pContext->OldCode;
   \   000001B8   103085E2           ADD      R3,R5,#+16
   \   000001BC   043093E7           LDR      R3,[R3, +R4]
   \   000001C0   802084E0           ADD      R2,R4,R0, LSL #+1
   \   000001C4   B23086E1           STRH     R3,[R6, +R2]
    937                pContext->aPrefix[Code] = pContext->FirstCode;
   \   000001C8   042098E7           LDR      R2,[R8, +R4]
   \   000001CC   040080E0           ADD      R0,R0,R4
   \   000001D0   0020C7E7           STRB     R2,[R7, +R0]
    938                ++pContext->MaxCode;
   \   000001D4   04009AE7           LDR      R0,[R10, +R4]
   \   000001D8   010080E2           ADD      R0,R0,#+1
   \   000001DC   04008AE7           STR      R0,[R10, +R4]
    939                if ((pContext->MaxCode >= pContext->MaxCodeSize) && (pContext->MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
   \   000001E0   042095E7           LDR      R2,[R5, +R4]
   \   000001E4   020050E1           CMP      R0,R2
   \   000001E8   080000BA           BLT      ??GUI_GIF__GetNextByte_9
   \   000001EC   400D52E3           CMP      R2,#+4096
   \   000001F0   060000AA           BGE      ??GUI_GIF__GetNextByte_9
    940                  pContext->MaxCodeSize <<= 1;
   \   000001F4   8200A0E1           LSL      R0,R2,#+1
   \   000001F8   040085E7           STR      R0,[R5, +R4]
    941                  ++pContext->CodeSize;
   \   000001FC   0C0045E2           SUB      R0,R5,#+12
   \   00000200   040090E7           LDR      R0,[R0, +R4]
   \   00000204   0C2045E2           SUB      R2,R5,#+12
   \   00000208   010080E2           ADD      R0,R0,#+1
   \   0000020C   040082E7           STR      R0,[R2, +R4]
    942                }
    943              }
    944              pContext->OldCode = Incode;
   \                     ??GUI_GIF__GetNextByte_9:
   \   00000210   100085E2           ADD      R0,R5,#+16
   \   00000214   041080E7           STR      R1,[R0, +R4]
    945              if (pContext->sp > pContext->aDecompBuffer) {
   \   00000218   00009DE5           LDR      R0,[SP, #+0]
   \   0000021C   041099E7           LDR      R1,[R9, +R4]
   \   00000220   010050E1           CMP      R0,R1
   \   00000224   85FFFF2A           BCS      ??GUI_GIF__GetNextByte_0
    946                return *--(pContext->sp);
   \   00000228   040099E7           LDR      R0,[R9, +R4]
   \   0000022C   010040E2           SUB      R0,R0,#+1
   \   00000230   040089E7           STR      R0,[R9, +R4]
   \   00000234   0000D0E5           LDRB     R0,[R0, #+0]
   \                     ??GUI_GIF__GetNextByte_1:
   \   00000238   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000023C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    947              }
    948            }
    949            return Code;
    950          }
    951          
    952          /*********************************************************************
    953          *
    954          *       GUI_GIF__InitLZW
    955          *
    956          * Purpose:
    957          *   Initializes the given LZW with the input code size
    958          */

   \                                 In section .text, align 4, keep-with-next
    959          void GUI_GIF__InitLZW(GUI_GIF_CONTEXT * pContext, int InputCodeSize) {
    960            pContext->SetCodeSize  = InputCodeSize;
   \                     GUI_GIF__InitLZW:
   \   00000000   D020A0E3           MOV      R2,#+208
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   F02D82E3           ORR      R2,R2,#0x3C00
   \   0000000C   003082E0           ADD      R3,R2,R0
   \   00000010   1C1083E5           STR      R1,[R3, #+28]
    961            pContext->CodeSize     = InputCodeSize + 1;
   \   00000014   01C081E2           ADD      R12,R1,#+1
   \   00000018   18C083E5           STR      R12,[R3, #+24]
    962            pContext->ClearCode    = (1 << InputCodeSize);
   \   0000001C   01C0A0E3           MOV      R12,#+1
   \   00000020   1C11A0E1           LSL      R1,R12,R1
   \   00000024   281083E5           STR      R1,[R3, #+40]
    963            pContext->EndCode      = (1 << InputCodeSize) + 1;
   \   00000028   01E081E2           ADD      LR,R1,#+1
   \   0000002C   2CE083E5           STR      LR,[R3, #+44]
    964            pContext->MaxCode      = (1 << InputCodeSize) + 2;
   \   00000030   02E081E2           ADD      LR,R1,#+2
   \   00000034   20E083E5           STR      LR,[R3, #+32]
    965            pContext->MaxCodeSize  = (1 << InputCodeSize) << 1;
   \   00000038   8110A0E1           LSL      R1,R1,#+1
   \   0000003C   241083E5           STR      R1,[R3, #+36]
    966            pContext->ReturnClear  = 1;
   \   00000040   14C083E5           STR      R12,[R3, #+20]
    967            pContext->LastByte     = 2;
   \   00000044   0210A0E3           MOV      R1,#+2
   \   00000048   101083E5           STR      R1,[R3, #+16]
    968            pContext->sp           = pContext->aDecompBuffer;
   \   0000004C   1610A0E3           MOV      R1,#+22
   \   00000050   C41D81E3           ORR      R1,R1,#0x3100
   \   00000054   001081E0           ADD      R1,R1,R0
   \   00000058   001082E7           STR      R1,[R2, +R0]
    969          }
   \   0000005C   0080BDE8           POP      {PC}             ;; return
    970          
    971          /*********************************************************************
    972          *
    973          *       GUI_GIF__ReadData
    974          */

   \                                 In section .text, align 4, keep-with-next
    975          int GUI_GIF__ReadData(GUI_GIF_CONTEXT * pContext, unsigned NumBytesReq, const U8 ** ppData, unsigned StartOfFile) {
   \                     GUI_GIF__ReadData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    976          #if GUI_GIF_INPUT_BUFFER_SIZE
    977            if (StartOfFile) {
    978              pContext->NumBytesInBuffer = 0;
    979            }
    980            /* Check if there are sufficient bytes in buffer  */
    981            if (pContext->NumBytesInBuffer < NumBytesReq) {
    982              /* Fill up to maximum size */
    983              unsigned NumBytesRead;
    984              NumBytesRead = GUI_GIF_INPUT_BUFFER_SIZE - pContext->NumBytesInBuffer;
    985              if (pContext->NumBytesInBuffer) {
    986                memmove(_aInputBuffer, pContext->pBuffer, pContext->NumBytesInBuffer); /* Shift the remaining few bytes from top to bottom */
    987              }
    988              pContext->pBuffer = _aInputBuffer + pContext->NumBytesInBuffer;
    989              if ((pContext->NumBytesInBuffer += pContext->pfGetData(pContext->pParam, NumBytesRead, ppData, StartOfFile)) < NumBytesReq) {
    990                return 1;
    991              }
    992              GUI_MEMCPY((void *)pContext->pBuffer, (const void *)*ppData, NumBytesRead);
    993              pContext->pBuffer = _aInputBuffer;
    994            }
    995            *ppData = pContext->pBuffer;
    996            pContext->pBuffer          += NumBytesReq;
    997            pContext->NumBytesInBuffer -= NumBytesReq;
    998            return 0;
    999          #else
   1000            if (StartOfFile) {
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   0150A0E1           MOV      R5,R1
   1001              pContext->Off = 0;
   \   00000010   0000A013           MOVNE    R0,#+0
   \   00000014   0210A0E1           MOV      R1,R2
   \   00000018   10008415           STRNE    R0,[R4, #+16]
   \   0000001C   04D04DE2           SUB      SP,SP,#+4
   1002            }
   1003            if ((unsigned)pContext->pfGetData(pContext->pParam, ppData, NumBytesReq, pContext->Off) != NumBytesReq) {
   \   00000020   103094E5           LDR      R3,[R4, #+16]
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0C0094E5           LDR      R0,[R4, #+12]
   \   0000002C   08C094E5           LDR      R12,[R4, #+8]
   \   00000030   3CFF2FE1           BLX      R12
   \   00000034   050050E1           CMP      R0,R5
   1004              return 1;
   \   00000038   0100A013           MOVNE    R0,#+1
   \   0000003C   0300001A           BNE      ??GUI_GIF__ReadData_0
   1005            }
   1006            pContext->Off += NumBytesReq;
   \   00000040   100094E5           LDR      R0,[R4, #+16]
   \   00000044   000085E0           ADD      R0,R5,R0
   \   00000048   100084E5           STR      R0,[R4, #+16]
   1007            /*
   1008            if ((unsigned)pContext->pfGetData(pContext->pParam, NumBytesReq, ppData, StartOfFile) != NumBytesReq) {
   1009              return 1;
   1010            }
   1011            */
   1012            return 0;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \                     ??GUI_GIF__ReadData_0:
   \   00000050   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   1013          #endif
   1014          }
   1015          
   1016          /*********************************************************************
   1017          *
   1018          *       GUI_GIF__GetData
   1019          */

   \                                 In section .text, align 4, keep-with-next
   1020          int GUI_GIF__GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Off) {
   \                     GUI_GIF__GetData:
   \   00000000   00402DE9           PUSH     {LR}
   1021            int RemBytes, NumBytes;
   1022            GUI_GIF_PARAM * pParam;
   1023            pParam = (GUI_GIF_PARAM *)p;
   1024            RemBytes = pParam->FileSize - Off;
   \   00000004   04C090E5           LDR      R12,[R0, #+4]
   \   00000008   03E04CE0           SUB      LR,R12,R3
   1025            NumBytes = 0;
   \   0000000C   00C0A0E3           MOV      R12,#+0
   1026            if (RemBytes > 0) {
   \   00000010   01005EE3           CMP      LR,#+1
   \   00000014   050000BA           BLT      ??GUI_GIF__GetData_0
   1027              NumBytes = ((unsigned)RemBytes > NumBytesReq) ? NumBytesReq : RemBytes;
   1028              *ppData  = pParam->pFileData + Off;
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0E0052E1           CMP      R2,LR
   \   00000020   000083E0           ADD      R0,R3,R0
   \   00000024   02C0A031           MOVCC    R12,R2
   \   00000028   0EC0A021           MOVCS    R12,LR
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   1029            }
   1030            return NumBytes;
   \                     ??GUI_GIF__GetData_0:
   \   00000030   0C00A0E1           MOV      R0,R12
   \   00000034   0080BDE8           POP      {PC}             ;; return
   1031          }
   1032          /*
   1033          int GUI_GIF__GetData(void * p, int NumBytesReq, const U8 ** ppData, unsigned StartOfFile) {
   1034            int RemBytes, NumBytes;
   1035            GUI_GIF_PARAM * pParam;
   1036            pParam = (GUI_GIF_PARAM *)p;
   1037            if (StartOfFile) {
   1038              pParam->Off = 0;
   1039            }
   1040            RemBytes = pParam->FileSize - pParam->Off;
   1041            NumBytes = 0;
   1042            if (RemBytes > 0) {
   1043              NumBytes = (RemBytes > NumBytesReq) ? NumBytesReq : RemBytes;
   1044              *ppData  = pParam->pFileData + pParam->Off;
   1045              pParam->Off += NumBytes;
   1046            }
   1047            return NumBytes;
   1048          }
   1049          */
   1050          
   1051          /*********************************************************************
   1052          *
   1053          *       Public code
   1054          *
   1055          **********************************************************************
   1056          */
   1057          /*********************************************************************
   1058          *
   1059          *       GUI_GIF_GetXSizeEx
   1060          */

   \                                 In section .text, align 4, keep-with-next
   1061          int GUI_GIF_GetXSizeEx(GUI_GET_DATA_FUNC * pfGetData, void * p) {
   \                     GUI_GIF_GetXSizeEx:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   1062            return _GetValue(pfGetData, p, 6);
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   ........           BL       GUI_Lock
   \   0000001C   0800A0E3           MOV      R0,#+8
   \   00000020   410C80E3           ORR      R0,R0,#0x4100
   \   00000024   ........           BL       GUI_ALLOC_AllocZero
   \   00000028   0040B0E1           MOVS     R4,R0
   \   0000002C   1700000A           BEQ      ??GUI_GIF_GetXSizeEx_0
   \   00000030   ........           BL       GUI_ALLOC_h2p
   \   00000034   0080A0E1           MOV      R8,R0
   \   00000038   085088E5           STR      R5,[R8, #+8]
   \   0000003C   0C6088E5           STR      R6,[R8, #+12]
   \   00000040   107088E5           STR      R7,[R8, #+16]
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   0820A0E3           MOV      R2,#+8
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0C0098E5           LDR      R0,[R8, #+12]
   \   00000054   08C098E5           LDR      R12,[R8, #+8]
   \   00000058   3CFF2FE1           BLX      R12
   \   0000005C   080050E3           CMP      R0,#+8
   \   00000060   0C00001A           BNE      ??GUI_GIF_GetXSizeEx_1
   \   00000064   100098E5           LDR      R0,[R8, #+16]
   \   00000068   080080E2           ADD      R0,R0,#+8
   \   0000006C   100088E5           STR      R0,[R8, #+16]
   \   00000070   00009DE5           LDR      R0,[SP, #+0]
   \   00000074   060080E2           ADD      R0,R0,#+6
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           BL       GUI__Read16
   \   00000084   0080A0E1           MOV      R8,R0
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetXSizeEx_0:
   \   00000090   ........           BL       GUI_Unlock
   \   00000094   0870A0E1           MOV      R7,R8
   \                     ??GUI_GIF_GetXSizeEx_1:
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   \   000000A0   F081BDE8           POP      {R4-R8,PC}       ;; return
   1063          }
   1064          
   1065          /*********************************************************************
   1066          *
   1067          *       GUI_GIF_GetXSize
   1068          */

   \                                 In section .text, align 4, keep-with-next
   1069          int GUI_GIF_GetXSize(const void * pGIF) {
   \                     GUI_GIF_GetXSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1070            GUI_GIF_PARAM Param = {0};
   \   00000004   ............       ADRL     R2,`?<Constant {(unsigned char const *)0}>`
   \              ....        
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   004092E5           LDR      R4,[R2, #+0]
   \   00000014   045092E5           LDR      R5,[R2, #+4]
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   300081E8           STM      R1,{R4,R5}
   1071            Param.pFileData = (const U8 *)pGIF;
   1072            Param.FileSize  = 8;
   \   00000020   0810A0E3           MOV      R1,#+8
   \   00000024   04008DE5           STR      R0,[SP, #+4]
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   1073            return GUI_GIF_GetXSizeEx(GUI_GIF__GetData, &Param);
   \   0000002C   0050A0E3           MOV      R5,#+0
   \   00000030   0060A0E3           MOV      R6,#+0
   \   00000034   ........           BL       GUI_Lock
   \   00000038   0800A0E3           MOV      R0,#+8
   \   0000003C   410C80E3           ORR      R0,R0,#0x4100
   \   00000040   ........           BL       GUI_ALLOC_AllocZero
   \   00000044   0040B0E1           MOVS     R4,R0
   \   00000048   1700000A           BEQ      ??GUI_GIF_GetXSize_0
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   ........           LDR      R0,??DataTable20
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   080086E5           STR      R0,[R6, #+8]
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   0C0086E5           STR      R0,[R6, #+12]
   \   00000068   105086E5           STR      R5,[R6, #+16]
   \   0000006C   0820A0E3           MOV      R2,#+8
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   ........           BL       GUI_GIF__GetData
   \   00000078   080050E3           CMP      R0,#+8
   \   0000007C   0C00001A           BNE      ??GUI_GIF_GetXSize_1
   \   00000080   100096E5           LDR      R0,[R6, #+16]
   \   00000084   080080E2           ADD      R0,R0,#+8
   \   00000088   100086E5           STR      R0,[R6, #+16]
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   060080E2           ADD      R0,R0,#+6
   \   00000094   00008DE5           STR      R0,[SP, #+0]
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           BL       GUI__Read16
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetXSize_0:
   \   000000AC   ........           BL       GUI_Unlock
   \   000000B0   0650A0E1           MOV      R5,R6
   \                     ??GUI_GIF_GetXSize_1:
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   10D08DE2           ADD      SP,SP,#+16
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
   1074          }
   1075          
   1076          /*********************************************************************
   1077          *
   1078          *       GUI_GIF_GetYSizeEx
   1079          */

   \                                 In section .text, align 4, keep-with-next
   1080          int GUI_GIF_GetYSizeEx(GUI_GET_DATA_FUNC * pfGetData, void * p) {
   \                     GUI_GIF_GetYSizeEx:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   1081            return _GetValue(pfGetData, p, 8);
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   ........           BL       GUI_Lock
   \   0000001C   0800A0E3           MOV      R0,#+8
   \   00000020   410C80E3           ORR      R0,R0,#0x4100
   \   00000024   ........           BL       GUI_ALLOC_AllocZero
   \   00000028   0040B0E1           MOVS     R4,R0
   \   0000002C   1700000A           BEQ      ??GUI_GIF_GetYSizeEx_0
   \   00000030   ........           BL       GUI_ALLOC_h2p
   \   00000034   0080A0E1           MOV      R8,R0
   \   00000038   085088E5           STR      R5,[R8, #+8]
   \   0000003C   0C6088E5           STR      R6,[R8, #+12]
   \   00000040   107088E5           STR      R7,[R8, #+16]
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   0A20A0E3           MOV      R2,#+10
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0C0098E5           LDR      R0,[R8, #+12]
   \   00000054   08C098E5           LDR      R12,[R8, #+8]
   \   00000058   3CFF2FE1           BLX      R12
   \   0000005C   0A0050E3           CMP      R0,#+10
   \   00000060   0C00001A           BNE      ??GUI_GIF_GetYSizeEx_1
   \   00000064   100098E5           LDR      R0,[R8, #+16]
   \   00000068   0A0080E2           ADD      R0,R0,#+10
   \   0000006C   100088E5           STR      R0,[R8, #+16]
   \   00000070   00009DE5           LDR      R0,[SP, #+0]
   \   00000074   080080E2           ADD      R0,R0,#+8
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           BL       GUI__Read16
   \   00000084   0080A0E1           MOV      R8,R0
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetYSizeEx_0:
   \   00000090   ........           BL       GUI_Unlock
   \   00000094   0870A0E1           MOV      R7,R8
   \                     ??GUI_GIF_GetYSizeEx_1:
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   \   000000A0   F081BDE8           POP      {R4-R8,PC}       ;; return
   1082          }
   1083          
   1084          /*********************************************************************
   1085          *
   1086          *       GUI_GIF_GetYSize
   1087          */

   \                                 In section .text, align 4, keep-with-next
   1088          int GUI_GIF_GetYSize(const void * pGIF) {
   \                     GUI_GIF_GetYSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1089            GUI_GIF_PARAM Param = {0};
   \   00000004   ............       ADRL     R2,`?<Constant {(unsigned char const *)0}>_1`
   \              ....        
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   004092E5           LDR      R4,[R2, #+0]
   \   00000014   045092E5           LDR      R5,[R2, #+4]
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   300081E8           STM      R1,{R4,R5}
   1090            Param.pFileData = (const U8 *)pGIF;
   1091            Param.FileSize  = 10;
   \   00000020   0A10A0E3           MOV      R1,#+10
   \   00000024   04008DE5           STR      R0,[SP, #+4]
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   1092            return GUI_GIF_GetYSizeEx(GUI_GIF__GetData, &Param);
   \   0000002C   0050A0E3           MOV      R5,#+0
   \   00000030   0060A0E3           MOV      R6,#+0
   \   00000034   ........           BL       GUI_Lock
   \   00000038   0800A0E3           MOV      R0,#+8
   \   0000003C   410C80E3           ORR      R0,R0,#0x4100
   \   00000040   ........           BL       GUI_ALLOC_AllocZero
   \   00000044   0040B0E1           MOVS     R4,R0
   \   00000048   1700000A           BEQ      ??GUI_GIF_GetYSize_0
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   ........           LDR      R0,??DataTable20
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   080086E5           STR      R0,[R6, #+8]
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   0C0086E5           STR      R0,[R6, #+12]
   \   00000068   105086E5           STR      R5,[R6, #+16]
   \   0000006C   0A20A0E3           MOV      R2,#+10
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   ........           BL       GUI_GIF__GetData
   \   00000078   0A0050E3           CMP      R0,#+10
   \   0000007C   0C00001A           BNE      ??GUI_GIF_GetYSize_1
   \   00000080   100096E5           LDR      R0,[R6, #+16]
   \   00000084   0A0080E2           ADD      R0,R0,#+10
   \   00000088   100086E5           STR      R0,[R6, #+16]
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   080080E2           ADD      R0,R0,#+8
   \   00000094   00008DE5           STR      R0,[SP, #+0]
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           BL       GUI__Read16
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetYSize_0:
   \   000000AC   ........           BL       GUI_Unlock
   \   000000B0   0650A0E1           MOV      R5,R6
   \                     ??GUI_GIF_GetYSize_1:
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   10D08DE2           ADD      SP,SP,#+16
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
   1093          }
   1094          
   1095          /*********************************************************************
   1096          *
   1097          *       GUI_GIF_DrawSubEx
   1098          */

   \                                 In section .text, align 4, keep-with-next
   1099          int GUI_GIF_DrawSubEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0, int Index) {
   \                     GUI_GIF_DrawSubEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   00A0A0E1           MOV      R10,R0
   \   0000000C   01B0A0E1           MOV      R11,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   48609DE5           LDR      R6,[SP, #+72]
   1100            int OldColorIndex;
   1101            int Result = 1;
   \   0000001C   0170A0E3           MOV      R7,#+1
   1102            GUI_HMEM          hContext;
   1103            GUI_GIF_CONTEXT * pContext;
   1104            #if (GUI_WINSUPPORT)
   1105              GUI_RECT Rect;
   1106              int Width, Height;
   1107            #endif
   1108          
   1109            GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
   1110            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
   \   00000024   0800A0E3           MOV      R0,#+8
   \   00000028   410C80E3           ORR      R0,R0,#0x4100
   \   0000002C   ........           BL       GUI_ALLOC_AllocZero
   \   00000030   0080B0E1           MOVS     R8,R0
   1111            if (hContext) {
   \   00000034   3300000A           BEQ      ??GUI_GIF_DrawSubEx_0
   1112              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
   \   00000038   ........           BL       GUI_ALLOC_h2p
   \   0000003C   0090A0E1           MOV      R9,R0
   1113              pContext->pfGetData = pfGetData;
   \   00000040   08A089E5           STR      R10,[R9, #+8]
   1114              pContext->pParam    = p;
   \   00000044   0CB089E5           STR      R11,[R9, #+12]
   1115              #if (GUI_WINSUPPORT)
   1116              if (_GetImageDimension(pContext, &Width, &Height) == 0) {
   \   00000048   18208DE2           ADD      R2,SP,#+24
   \   0000004C   1C108DE2           ADD      R1,SP,#+28
   \   00000050   ........           BL       _GetImageDimension
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   2800001A           BNE      ??GUI_GIF_DrawSubEx_1
   1117              #else
   1118              {
   1119              #endif
   1120                OldColorIndex = LCD_GetColorIndex();
   \   0000005C   ........           BL       LCD_GetColorIndex
   \   00000060   00A0A0E1           MOV      R10,R0
   1121                #if (GUI_WINSUPPORT)
   1122                  WM_ADDORG(x0,y0);
   \   00000064   ........           LDR      R0,??DataTable20_1
   \   00000068   401090E5           LDR      R1,[R0, #+64]
   \   0000006C   440090E5           LDR      R0,[R0, #+68]
   \   00000070   044081E0           ADD      R4,R1,R4
   \   00000074   055080E0           ADD      R5,R0,R5
   1123                  Rect.x1 = (Rect.x0 = x0) + Width - 1;
   \   00000078   B041CDE1           STRH     R4,[SP, #+16]
   \   0000007C   F001DDE1           LDRSH    R0,[SP, #+16]
   \   00000080   1C109DE5           LDR      R1,[SP, #+28]
   1124                  Rect.y1 = (Rect.y0 = y0) + Height - 1;
   \   00000084   B251CDE1           STRH     R5,[SP, #+18]
   \   00000088   000081E0           ADD      R0,R1,R0
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   B401CDE1           STRH     R0,[SP, #+20]
   \   00000094   F201DDE1           LDRSH    R0,[SP, #+18]
   \   00000098   18109DE5           LDR      R1,[SP, #+24]
   \   0000009C   000081E0           ADD      R0,R1,R0
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   B601CDE1           STRH     R0,[SP, #+22]
   1125                  WM_ITERATE_START(&Rect) {
   \   000000A8   10008DE2           ADD      R0,SP,#+16
   \   000000AC   ........           BL       WM__InitIVRSearch
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0F00000A           BEQ      ??GUI_GIF_DrawSubEx_2
   1126                #endif
   1127                Result = GUI_GIF__DrawFromFilePointer(pContext, x0, y0, Index, 0, 0, _DrawFromDataBlock, _ClearUnusedPixels);
   \                     ??GUI_GIF_DrawSubEx_3:
   \   000000B8   ........           LDR      R0,??DataTable20_2
   \   000000BC   0630A0E1           MOV      R3,R6
   \   000000C0   0C008DE5           STR      R0,[SP, #+12]
   \   000000C4   ........           LDR      R0,??DataTable20_3
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   08008DE5           STR      R0,[SP, #+8]
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   04008DE5           STR      R0,[SP, #+4]
   \   000000D8   00008DE5           STR      R0,[SP, #+0]
   \   000000DC   0410A0E1           MOV      R1,R4
   \   000000E0   0900A0E1           MOV      R0,R9
   \   000000E4   ........           BL       GUI_GIF__DrawFromFilePointer
   \   000000E8   0070A0E1           MOV      R7,R0
   1128                #if (GUI_WINSUPPORT)
   1129                  } WM_ITERATE_END();
   \   000000EC   ........           BL       WM__GetNextIVR
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   EFFFFF1A           BNE      ??GUI_GIF_DrawSubEx_3
   1130                #endif
   1131                LCD_SetColorIndex(OldColorIndex);
   \                     ??GUI_GIF_DrawSubEx_2:
   \   000000F8   0A00A0E1           MOV      R0,R10
   \   000000FC   ........           BL       LCD_SetColorIndex
   1132              }
   1133              GUI_ALLOC_Free(hContext);
   \                     ??GUI_GIF_DrawSubEx_1:
   \   00000100   0800A0E1           MOV      R0,R8
   \   00000104   ........           BL       GUI_ALLOC_Free
   1134            }
   1135            GUI_UNLOCK();
   \                     ??GUI_GIF_DrawSubEx_0:
   \   00000108   ........           BL       GUI_Unlock
   1136            return Result;
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   24D08DE2           ADD      SP,SP,#+36
   \   00000114   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1137          }
   1138          
   1139          /*********************************************************************
   1140          *
   1141          *       GUI_GIF_DrawSub
   1142          */

   \                                 In section .text, align 4, keep-with-next
   1143          int GUI_GIF_DrawSub(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
   \                     GUI_GIF_DrawSub:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1144            GUI_GIF_PARAM Param = {0};
   \   00000004   ........           ADR      R6,`?<Constant {(unsigned char const *)0}>_2`
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   004096E5           LDR      R4,[R6, #+0]
   \   00000010   045096E5           LDR      R5,[R6, #+4]
   \   00000014   20C09DE5           LDR      R12,[SP, #+32]
   \   00000018   04E08DE2           ADD      LR,SP,#+4
   \   0000001C   30008EE8           STM      LR,{R4,R5}
   1145            Param.pFileData = (const U8 *)pGIF;
   \   00000020   04008DE5           STR      R0,[SP, #+4]
   1146            Param.FileSize  = NumBytes;
   \   00000024   08108DE5           STR      R1,[SP, #+8]
   1147            return GUI_GIF_DrawSubEx(GUI_GIF__GetData, &Param, x0, y0, Index);
   \   00000028   00C08DE5           STR      R12,[SP, #+0]
   \   0000002C   04108DE2           ADD      R1,SP,#+4
   \   00000030   ........           LDR      R0,??DataTable20
   \   00000034   ........           BL       GUI_GIF_DrawSubEx
   \   00000038   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
   1148          }
   1149          
   1150          /*********************************************************************
   1151          *
   1152          *       GUI_GIF_DrawEx
   1153          */

   \                                 In section .text, align 4, keep-with-next
   1154          int GUI_GIF_DrawEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0) {
   \                     GUI_GIF_DrawEx:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1155            return GUI_GIF_DrawSubEx(pfGetData, p, x0, y0, 0);
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   00C08DE5           STR      R12,[SP, #+0]
   \   00000010   ........           BL       GUI_GIF_DrawSubEx
   \   00000014   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000018   0080BDE8           POP      {PC}             ;; return
   1156          }
   1157          
   1158          /*********************************************************************
   1159          *
   1160          *       GUI_GIF_Draw
   1161          */

   \                                 In section .text, align 4, keep-with-next
   1162          int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
   \                     GUI_GIF_Draw:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1163            return GUI_GIF_DrawSub(pGIF, NumBytes, x0, y0, 0);
   \   00000004   ........           ADR      LR,`?<Constant {(unsigned char const *)0}>_2`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409EE5           LDR      R4,[LR, #+0]
   \   00000010   04509EE5           LDR      R5,[LR, #+4]
   \   00000014   04C08DE2           ADD      R12,SP,#+4
   \   00000018   30008CE8           STM      R12,{R4,R5}
   \   0000001C   04008DE5           STR      R0,[SP, #+4]
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   08108DE5           STR      R1,[SP, #+8]
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   04108DE2           ADD      R1,SP,#+4
   \   00000030   ........           LDR      R0,??DataTable20
   \   00000034   ........           BL       GUI_GIF_DrawSubEx
   \   00000038   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1164          }
   1165          
   1166          /*********************************************************************
   1167          *
   1168          *       GUI_GIF_GetInfoEx
   1169          */

   \                                 In section .text, align 4, keep-with-next
   1170          int GUI_GIF_GetInfoEx(GUI_GET_DATA_FUNC * pfGetData, void * p, GUI_GIF_INFO * pInfo) {
   \                     GUI_GIF_GetInfoEx:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   1171            GUI_HMEM          hContext;
   1172            GUI_GIF_CONTEXT * pContext;
   1173            int r = 1;
   \   00000010   0170A0E3           MOV      R7,#+1
   1174          
   1175            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1176            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
   \   00000018   0800A0E3           MOV      R0,#+8
   \   0000001C   410C80E3           ORR      R0,R0,#0x4100
   \   00000020   ........           BL       GUI_ALLOC_AllocZero
   \   00000024   0080B0E1           MOVS     R8,R0
   1177            if (hContext) {
   \   00000028   0700000A           BEQ      ??GUI_GIF_GetInfoEx_0
   1178              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
   \   0000002C   ........           BL       GUI_ALLOC_h2p
   1179              pContext->pfGetData = pfGetData;
   \   00000030   084080E5           STR      R4,[R0, #+8]
   1180              pContext->pParam    = p;
   \   00000034   0C5080E5           STR      R5,[R0, #+12]
   1181              r = _GetGIFInfo(pContext, pInfo);
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   ........           BL       _GetGIFInfo
   \   00000040   0070A0E1           MOV      R7,R0
   1182              GUI_ALLOC_Free(hContext);
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           BL       GUI_ALLOC_Free
   1183            }
   1184            GUI_UNLOCK();
   \                     ??GUI_GIF_GetInfoEx_0:
   \   0000004C   ........           BL       GUI_Unlock
   1185            return r;
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   F081BDE8           POP      {R4-R8,PC}       ;; return
   1186          }
   1187          
   1188          /*********************************************************************
   1189          *
   1190          *       GUI_GIF_GetInfo
   1191          */

   \                                 In section .text, align 4, keep-with-next
   1192          int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
   \                     GUI_GIF_GetInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1193            GUI_GIF_PARAM Param = {0};
   \   00000004   ........           ADR      R3,`?<Constant {(unsigned char const *)0}>_3`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   006093E5           LDR      R6,[R3, #+0]
   \   00000014   047093E5           LDR      R7,[R3, #+4]
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   C00082E8           STM      R2,{R6,R7}
   1194            Param.pFileData = (const U8 *)pGIF;
   \   00000020   00008DE5           STR      R0,[SP, #+0]
   1195            Param.FileSize  = NumBytes;
   \   00000024   04108DE5           STR      R1,[SP, #+4]
   1196            return GUI_GIF_GetInfoEx(GUI_GIF__GetData, &Param, pInfo);
   \   00000028   0150A0E3           MOV      R5,#+1
   \   0000002C   ........           BL       GUI_Lock
   \   00000030   0800A0E3           MOV      R0,#+8
   \   00000034   410C80E3           ORR      R0,R0,#0x4100
   \   00000038   ........           BL       GUI_ALLOC_AllocZero
   \   0000003C   0060B0E1           MOVS     R6,R0
   \   00000040   0800000A           BEQ      ??GUI_GIF_GetInfo_0
   \   00000044   ........           BL       GUI_ALLOC_h2p
   \   00000048   ........           LDR      R1,??DataTable20
   \   0000004C   081080E5           STR      R1,[R0, #+8]
   \   00000050   0CD080E5           STR      SP,[R0, #+12]
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   ........           BL       _GetGIFInfo
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetInfo_0:
   \   00000068   ........           BL       GUI_Unlock
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   0CD08DE2           ADD      SP,SP,#+12
   \   00000074   F080BDE8           POP      {R4-R7,PC}       ;; return
   1197          }
   1198          
   1199          /*********************************************************************
   1200          *
   1201          *       GUI_GIF_GetImageInfoEx
   1202          */

   \                                 In section .text, align 4, keep-with-next
   1203          int GUI_GIF_GetImageInfoEx(GUI_GET_DATA_FUNC * pfGetData, void * p, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
   \                     GUI_GIF_GetImageInfoEx:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   1204            GUI_HMEM          hContext;
   1205            GUI_GIF_CONTEXT * pContext;
   1206            int r = 1;
   \   00000018   0180A0E3           MOV      R8,#+1
   1207          
   1208            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
   1209            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   410C80E3           ORR      R0,R0,#0x4100
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   0090B0E1           MOVS     R9,R0
   1210            if (hContext) {
   \   00000030   0800000A           BEQ      ??GUI_GIF_GetImageInfoEx_0
   1211              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
   \   00000034   ........           BL       GUI_ALLOC_h2p
   1212              pContext->pfGetData = pfGetData;
   \   00000038   084080E5           STR      R4,[R0, #+8]
   1213              pContext->pParam    = p;
   \   0000003C   0C5080E5           STR      R5,[R0, #+12]
   1214              r = _GetImageInfo(pContext, pInfo, Index);
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   0610A0E1           MOV      R1,R6
   \   00000048   ........           BL       _GetImageInfo
   \   0000004C   0080A0E1           MOV      R8,R0
   1215              GUI_ALLOC_Free(hContext);
   \   00000050   0900A0E1           MOV      R0,R9
   \   00000054   ........           BL       GUI_ALLOC_Free
   1216            }
   1217            GUI_UNLOCK();
   \                     ??GUI_GIF_GetImageInfoEx_0:
   \   00000058   ........           BL       GUI_Unlock
   1218            return r;
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
   1219          }
   1220          
   1221          /*********************************************************************
   1222          *
   1223          *       GUI_GIF_GetImageInfo
   1224          */

   \                                 In section .text, align 4, keep-with-next
   1225          int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
   \                     GUI_GIF_GetImageInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1226            GUI_GIF_PARAM Param = {0};
   \   00000004   ........           ADR      LR,`?<Constant {(unsigned char const *)0}>_4`
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   0CD04DE2           SUB      SP,SP,#+12
   \   00000014   00209EE5           LDR      R2,[LR, #+0]
   \   00000018   04309EE5           LDR      R3,[LR, #+4]
   \   0000001C   0DC0A0E1           MOV      R12,SP
   \   00000020   0C008CE8           STM      R12,{R2,R3}
   1227            Param.pFileData = (const U8 *)pGIF;
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   1228            Param.FileSize  = NumBytes;
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   1229            return GUI_GIF_GetImageInfoEx(GUI_GIF__GetData, &Param, pInfo, Index);
   \   0000002C   0160A0E3           MOV      R6,#+1
   \   00000030   ........           BL       GUI_Lock
   \   00000034   0800A0E3           MOV      R0,#+8
   \   00000038   410C80E3           ORR      R0,R0,#0x4100
   \   0000003C   ........           BL       GUI_ALLOC_AllocZero
   \   00000040   0070B0E1           MOVS     R7,R0
   \   00000044   0900000A           BEQ      ??GUI_GIF_GetImageInfo_0
   \   00000048   ........           BL       GUI_ALLOC_h2p
   \   0000004C   ........           LDR      R1,??DataTable20
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   081080E5           STR      R1,[R0, #+8]
   \   00000058   0CD080E5           STR      SP,[R0, #+12]
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   ........           BL       _GetImageInfo
   \   00000064   0060A0E1           MOV      R6,R0
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetImageInfo_0:
   \   00000070   ........           BL       GUI_Unlock
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   0CD08DE2           ADD      SP,SP,#+12
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return
   1230          }
   1231          
   1232          /*********************************************************************
   1233          *
   1234          *       GUI_GIF_GetCommentEx
   1235          */

   \                                 In section .text, align 4, keep-with-next
   1236          int GUI_GIF_GetCommentEx(GUI_GET_DATA_FUNC * pfGetData, void * p, U8 * pBuffer, int MaxSize, int Index) {
   \                     GUI_GIF_GetCommentEx:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   1237            GUI_HMEM          hContext;
   1238            GUI_GIF_CONTEXT * pContext;
   1239            int r = 1;
   \   00000018   0190A0E3           MOV      R9,#+1
   1240          
   1241            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
   1242            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   410C80E3           ORR      R0,R0,#0x4100
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   00A0B0E1           MOVS     R10,R0
   1243            if (hContext) {
   \   00000030   0900000A           BEQ      ??GUI_GIF_GetCommentEx_0
   1244              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
   \   00000034   ........           BL       GUI_ALLOC_h2p
   1245              pContext->pfGetData = pfGetData;
   \   00000038   084080E5           STR      R4,[R0, #+8]
   1246              pContext->pParam    = p;
   \   0000003C   0C5080E5           STR      R5,[R0, #+12]
   1247              r = _GetGIFComment(pContext, pBuffer, MaxSize, Index);
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   ........           BL       _GetGIFComment
   \   00000050   0090A0E1           MOV      R9,R0
   1248              GUI_ALLOC_Free(hContext);
   \   00000054   0A00A0E1           MOV      R0,R10
   \   00000058   ........           BL       GUI_ALLOC_Free
   1249            }
   1250            GUI_UNLOCK();
   \                     ??GUI_GIF_GetCommentEx_0:
   \   0000005C   ........           BL       GUI_Unlock
   1251            return r;
   \   00000060   0900A0E1           MOV      R0,R9
   \   00000064   F087BDE8           POP      {R4-R10,PC}      ;; return
   1252          }
   1253          
   1254          /*********************************************************************
   1255          *
   1256          *       GUI_GIF_GetComment
   1257          */

   \                                 In section .text, align 4, keep-with-next
   1258          int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
   \                     GUI_GIF_GetComment:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1259            GUI_GIF_PARAM Param = {0};
   \   00000004   ........           ADR      LR,`?<Constant {(unsigned char const *)0}>_5`
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   00209EE5           LDR      R2,[LR, #+0]
   \   00000018   04309EE5           LDR      R3,[LR, #+4]
   \   0000001C   20609DE5           LDR      R6,[SP, #+32]
   \   00000020   0DC0A0E1           MOV      R12,SP
   \   00000024   0C008CE8           STM      R12,{R2,R3}
   1260            Param.pFileData = (const U8 *)pGIF;
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   1261            Param.FileSize  = NumBytes;
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   1262            return GUI_GIF_GetCommentEx(GUI_GIF__GetData, &Param, pBuffer, MaxSize, Index);
   \   00000030   0170A0E3           MOV      R7,#+1
   \   00000034   ........           BL       GUI_Lock
   \   00000038   0800A0E3           MOV      R0,#+8
   \   0000003C   410C80E3           ORR      R0,R0,#0x4100
   \   00000040   ........           BL       GUI_ALLOC_AllocZero
   \   00000044   0080B0E1           MOVS     R8,R0
   \   00000048   0A00000A           BEQ      ??GUI_GIF_GetComment_0
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   ........           LDR      R1,??DataTable20
   \   00000054   0630A0E1           MOV      R3,R6
   \   00000058   081080E5           STR      R1,[R0, #+8]
   \   0000005C   0CD080E5           STR      SP,[R0, #+12]
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0410A0E1           MOV      R1,R4
   \   00000068   ........           BL       _GetGIFComment
   \   0000006C   0070A0E1           MOV      R7,R0
   \   00000070   0800A0E1           MOV      R0,R8
   \   00000074   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_GIF_GetComment_0:
   \   00000078   ........           BL       GUI_Unlock
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   08D08DE2           ADD      SP,SP,#+8
   \   00000084   F081BDE8           POP      {R4-R8,PC}       ;; return
   1263          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     _aBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     GUI_GIF__GetData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   ........           DC32     _ClearUnusedPixels

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   ........           DC32     _DrawFromDataBlock

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>_3`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>_4`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(unsigned char const *)0}>_5`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0
   1264          
   1265          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     GUI_GIF_Draw                     24
     GUI_GIF_DrawEx                    8
     GUI_GIF_DrawSub                  32
     GUI_GIF_DrawSubEx                72
     GUI_GIF_GetComment               32
     GUI_GIF_GetCommentEx             32
     GUI_GIF_GetImageInfo             32
     GUI_GIF_GetImageInfoEx           32
     GUI_GIF_GetInfo                  32
     GUI_GIF_GetInfoEx                24
     GUI_GIF_GetXSize                 32
     GUI_GIF_GetXSizeEx               32
     GUI_GIF_GetYSize                 32
     GUI_GIF_GetYSizeEx               32
     GUI_GIF__DrawFromFilePointer    128
     GUI_GIF__GetData                  4
     GUI_GIF__GetNextByte             40
     GUI_GIF__InitLZW                  4
     GUI_GIF__ReadData                16
     _ClearUnusedPixels               24
     _DrawFromDataBlock               96
     _GetDataBlock                    32
     _GetGIFComment                   40
     _GetGIFInfo                      32
     _GetGlobalColorTable             40
     _GetImageDimension               24
     _GetImageInfo                    32
     _GetNextCode                     16
     _ReadComment                     32
     _ReadExtension                   32
     _SkipLocalColorTable             32


   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     _aMaskTbl                                  64
     _aBuffer                                  256
     GUI_GIF__aInterlaceOffset                  16
     GUI_GIF__aInterlaceYPos                    16
     _GetDataBlock                             192
     _GetNextCode                              336
     _ReadExtension                            300
     _ReadComment                              288
     _DrawFromDataBlock                        824
     _GetImageDimension                        288
     _GetGlobalColorTable                      232
     _SkipLocalColorTable                      216
     _GetGIFInfo                               232
     _GetImageInfo                             340
     _GetGIFComment                            260
     _ClearUnusedPixels                        304
     GUI_GIF__DrawFromFilePointer              796
     GUI_GIF__GetNextByte                      576
     GUI_GIF__InitLZW                           96
     GUI_GIF__ReadData                          88
     GUI_GIF__GetData                           56
     GUI_GIF_GetXSizeEx                        164
     GUI_GIF_GetXSize                          192
     GUI_GIF_GetYSizeEx                        164
     GUI_GIF_GetYSize                          192
     GUI_GIF_DrawSubEx                         280
     GUI_GIF_DrawSub                            64
     GUI_GIF_DrawEx                             28
     GUI_GIF_Draw                               64
     GUI_GIF_GetInfoEx                          88
     GUI_GIF_GetInfo                           120
     GUI_GIF_GetImageInfoEx                    104
     GUI_GIF_GetImageInfo                      128
     GUI_GIF_GetCommentEx                      104
     GUI_GIF_GetComment                        136
     ??DataTable12                               4
     ??DataTable20                               4
     ??DataTable20_1                             4
     ??DataTable20_2                             4
     ??DataTable20_3                             4
     ?<Constant {(unsigned char const *)0}>      8
     ?<Constant {(unsigned char const *)0}>_1    8
     ?<Constant {(unsigned char const *)0}>_2    8
     ?<Constant {(unsigned char const *)0}>_3    8
     ?<Constant {(unsigned char const *)0}>_4    8
     ?<Constant {(unsigned char const *)0}>_5    8
     ?<Constant {0}>                            24
     ?<Constant {0}>_1                          20

 
   256 bytes in section .bss
    44 bytes in section .rodata
 7 416 bytes in section .text
 
 7 416 bytes of CODE  memory
    44 bytes of CONST memory
   256 bytes of DATA  memory

Errors: none
Warnings: none
