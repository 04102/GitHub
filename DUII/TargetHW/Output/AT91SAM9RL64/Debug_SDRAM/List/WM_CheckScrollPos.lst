###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_CheckScrollPos.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\WM_CheckScrollPos.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\WM #
#                    _CheckScrollPos.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\WM_ #
#                    CheckScrollPos.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_CheckScrollPos.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_SetScrollPos.c
     19          Purpose     : Windows manager, optional routines
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          
     34          
     35          
     36          /*********************************************************************
     37          *
     38          *       WM_CheckScrollBounds
     39          *
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void WM_CheckScrollBounds(WM_SCROLL_STATE* pScrollState) {
     42            int Max;
     43            Max = pScrollState->NumItems - pScrollState->PageSize;
   \                     WM_CheckScrollBounds:
   \   00000000   001090E5           LDR      R1,[R0, #+0]
   \   00000004   082090E5           LDR      R2,[R0, #+8]
   \   00000008   021051E0           SUBS     R1,R1,R2
     44            if (Max < 0) {
     45              Max = 0;
     46            }
     47            /* Make sure scroll pos is in bounds */
     48            if (pScrollState->v < 0) {
   \   0000000C   042090E5           LDR      R2,[R0, #+4]
   \   00000010   0010A043           MOVMI    R1,#+0
   \   00000014   000052E3           CMP      R2,#+0
     49              pScrollState->v = 0;
   \   00000018   0020A043           MOVMI    R2,#+0
   \   0000001C   04208045           STRMI    R2,[R0, #+4]
     50            }
     51            if (pScrollState->v > Max) {
   \   00000020   042090E5           LDR      R2,[R0, #+4]
   \   00000024   020051E1           CMP      R1,R2
   \   00000028   0210A0C1           MOVGT    R1,R2
   \   0000002C   041080E5           STR      R1,[R0, #+4]
     52              pScrollState->v = Max;
     53            }
     54          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
     55          
     56          
     57          /*********************************************************************
     58          *
     59          *       WM_CheckScrollPos
     60          *
     61          * Return value: Difference between old an new Scroll value.
     62          *               Therefor 0 if settings have not changed.
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          int  WM_CheckScrollPos(WM_SCROLL_STATE* pScrollState, int Pos, int LowerDist, int UpperDist) {
   \                     WM_CheckScrollPos:
   \   00000000   10402DE9           PUSH     {R4,LR}
     65            int vOld;
     66            vOld = pScrollState->v;
   \   00000004   04C090E5           LDR      R12,[R0, #+4]
     67            /* Check upper limit */
     68            if (Pos > pScrollState->v + pScrollState->PageSize - 1) {
   \   00000008   08E090E5           LDR      LR,[R0, #+8]
   \   0000000C   0C408EE0           ADD      R4,LR,R12
   \   00000010   014044E2           SUB      R4,R4,#+1
   \   00000014   010054E1           CMP      R4,R1
   \   00000018   030000AA           BGE      ??WM_CheckScrollPos_0
     69              pScrollState->v = Pos - (pScrollState->PageSize - 1) + UpperDist;
   \   0000001C   0E4041E0           SUB      R4,R1,LR
   \   00000020   043083E0           ADD      R3,R3,R4
   \   00000024   013083E2           ADD      R3,R3,#+1
   \   00000028   043080E5           STR      R3,[R0, #+4]
     70            }
     71            /* Check lower limit */
     72            if (Pos < pScrollState->v) {
   \                     ??WM_CheckScrollPos_0:
   \   0000002C   043090E5           LDR      R3,[R0, #+4]
   \   00000030   030051E1           CMP      R1,R3
     73              pScrollState->v = Pos - LowerDist;
   \   00000034   021041B0           SUBLT    R1,R1,R2
   \   00000038   041080B5           STRLT    R1,[R0, #+4]
     74            }
     75            WM_CheckScrollBounds(pScrollState);
   \   0000003C   001090E5           LDR      R1,[R0, #+0]
   \   00000040   042090E5           LDR      R2,[R0, #+4]
   \   00000044   0E1051E0           SUBS     R1,R1,LR
   \   00000048   0010A043           MOVMI    R1,#+0
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   0020A043           MOVMI    R2,#+0
   \   00000054   04208045           STRMI    R2,[R0, #+4]
   \   00000058   042090E5           LDR      R2,[R0, #+4]
   \   0000005C   020051E1           CMP      R1,R2
   \   00000060   0210A0C1           MOVGT    R1,R2
   \   00000064   041080E5           STR      R1,[R0, #+4]
     76            return pScrollState->v - vOld;
   \   00000068   0C0041E0           SUB      R0,R1,R12
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
     77          }
     78          
     79          /*********************************************************************
     80          *
     81          *       WM_SetScrollValue
     82          *
     83          * Return value: Difference between old an new Scroll value.
     84          *               Therefor 0 if settings have not changed.
     85          */

   \                                 In section .text, align 4, keep-with-next
     86          int  WM_SetScrollValue(WM_SCROLL_STATE* pScrollState, int v) {
     87            int vOld;
     88            vOld = pScrollState->v;
   \                     WM_SetScrollValue:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
     89            pScrollState->v = v;
   \   00000004   041080E5           STR      R1,[R0, #+4]
     90            WM_CheckScrollBounds(pScrollState);
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   083090E5           LDR      R3,[R0, #+8]
   \   00000010   031051E0           SUBS     R1,R1,R3
   \   00000014   043090E5           LDR      R3,[R0, #+4]
   \   00000018   0010A043           MOVMI    R1,#+0
   \   0000001C   000053E3           CMP      R3,#+0
   \   00000020   0030A043           MOVMI    R3,#+0
   \   00000024   04308045           STRMI    R3,[R0, #+4]
   \   00000028   043090E5           LDR      R3,[R0, #+4]
   \   0000002C   030051E1           CMP      R1,R3
   \   00000030   0310A0C1           MOVGT    R1,R3
   \   00000034   041080E5           STR      R1,[R0, #+4]
     91            return pScrollState->v - vOld;
   \   00000038   020041E0           SUB      R0,R1,R2
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          #else
     95            void WM_CheckScrollPos_c(void) {} /* avoid empty object files */
     96          #endif
     97          
     98          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     WM_CheckScrollBounds      0
     WM_CheckScrollPos         8
     WM_SetScrollValue         0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     WM_CheckScrollBounds   52
     WM_CheckScrollPos     112
     WM_SetScrollValue      64

 
 228 bytes in section .text
 
 228 bytes of CODE memory

Errors: none
Warnings: none
