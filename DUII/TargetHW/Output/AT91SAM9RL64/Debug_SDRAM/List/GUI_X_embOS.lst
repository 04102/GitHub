###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Dec/2015  11:33:20 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_X_embOS.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_X_embOS.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_X_embOS.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _X_embOS.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_X_embOS.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_X.c
     19          Purpose     : Config / System dependent externals for GUI
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdio.h>
     24          #include "RTOS.h"               /* embOS include */
     25          #include "GUI.h"
     26          #if (GUI_VERSION < 50000)
     27          #include "GUI_X.h"
     28          #endif
     29          
     30          /*********************************************************************
     31          *
     32          *      Timing:
     33          *                 GUI_GetTime()
     34          *                 GUI_Delay(int)
     35          
     36            Some timing dependent routines require a GetTime
     37            and delay funtion. Default time unit (tick), normally is
     38            1 ms.
     39          */
     40          

   \                                 In section .text, align 4, keep-with-next
     41          int GUI_X_GetTime(void) {
     42            return OS_GetTime();
   \                     GUI_X_GetTime:
   \   00000000   ........           LDR      R0,??DataTable7
   \   00000004   1C0090E5           LDR      R0,[R0, #+28]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 4, keep-with-next
     45          void GUI_X_Delay(int Period) {
     46            OS_Delay(Period);
   \                     GUI_X_Delay:
   \   00000000   ........           B        OS_Delay         ;; tailcall
     47          }
     48          
     49          /*********************************************************************
     50          *
     51          *       GUI_X_ExecIdle()
     52          *
     53          */

   \                                 In section .text, align 4, keep-with-next
     54          void GUI_X_ExecIdle(void) {
     55            OS_Delay(1);
   \                     GUI_X_ExecIdle:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   ........           B        OS_Delay         ;; tailcall
     56          }
     57          
     58          /*********************************************************************
     59          *
     60          *      Multitasking:
     61          *
     62          *                 GUI_X_InitOS()
     63          *                 GUI_X_GetTaskId()
     64          *                 GUI_X_Lock()
     65          *                 GUI_X_Unlock()
     66          *
     67          * Note:
     68          *   The following routines are required only if emWin is used in a
     69          *   true multi task environment, which means you have more than one
     70          *   thread using the emWin API.
     71          *   In this case the
     72          *                       #define GUI_OS 1
     73          *  needs to be in GUIConf.h
     74          */
     75          
     76          

   \                                 In section .bss, align 4
     77          static OS_RSEMA RSema;
   \                     RSema:
   \   00000000                      DS8 20
     78          

   \                                 In section .text, align 4, keep-with-next
     79          void GUI_X_InitOS(void)    { OS_CreateRSema(&RSema);    }
   \                     GUI_X_InitOS:
   \   00000000   ........           LDR      R0,??DataTable7_1
   \   00000004   ........           B        OS_CreateRSema   ;; tailcall

   \                                 In section .text, align 4, keep-with-next
     80          void GUI_X_Unlock(void)    { OS_Unuse(&RSema); }
   \                     GUI_X_Unlock:
   \   00000000   ........           LDR      R0,??DataTable7_1
   \   00000004   ........           B        OS_Unuse         ;; tailcall

   \                                 In section .text, align 4, keep-with-next
     81          void GUI_X_Lock(void)      { OS_Use(&RSema);  }
   \                     GUI_X_Lock:
   \   00000000   ........           LDR      R0,??DataTable7_1
   \   00000004   ........           B        OS_Use           ;; tailcall

   \                                 In section .text, align 4, keep-with-next
     82          U32  GUI_X_GetTaskId(void) { return (U32)OS_GetTaskID(); }
   \                     GUI_X_GetTaskId:
   \   00000000   ........           LDR      R0,??DataTable7
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     83          
     84          
     85          /*********************************************************************
     86          *
     87          *      Event driving (optional with multitasking)
     88          *
     89          *                 GUI_X_WaitEvent()
     90          *                 GUI_X_SignalEvent()
     91          */
     92          
     93          

   \                                 In section .bss, align 4
     94          static OS_TASK* _pGUITask;
   \                     _pGUITask:
   \   00000000                      DS8 4
     95          

   \                                 In section .text, align 4, keep-with-next
     96          void GUI_X_WaitEvent(void)    {
     97            _pGUITask = OS_GetpCurrentTask();
   \                     GUI_X_WaitEvent:
   \   00000000   ........           LDR      R0,??DataTable7
   \   00000004   ........           LDR      R1,??DataTable7_2
   \   00000008   080090E5           LDR      R0,[R0, #+8]
   \   0000000C   000081E5           STR      R0,[R1, #+0]
     98            OS_WaitEvent(1);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   ........           B        OS_WaitEvent     ;; tailcall
     99          }
    100          

   \                                 In section .text, align 4, keep-with-next
    101          void GUI_X_SignalEvent(void)    {
    102            if (_pGUITask) {
   \                     GUI_X_SignalEvent:
   \   00000000   ........           LDR      R0,??DataTable7_2
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??GUI_X_SignalEvent_0
    103              OS_SignalEvent(1, _pGUITask);
   \   00000010   1EFF2FE1           BX       LR
    104            }
   \                     ??GUI_X_SignalEvent_0:
   \   00000014   00402DE9           PUSH     {LR}
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   ........           BL       OS_SignalEvent
    105          }
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   0080BDE8           POP      {PC}             ;; return
    106          
    107          /*********************************************************************
    108          *
    109          *      Keyboard input from serial input
    110          *
    111          * Note:
    112          *   If embOS is used, characters typed into the log window will be placed
    113          *   in the keyboard buffer. This is a neat feature which allows you to
    114          *   operate your target system without having to use or even to have
    115          *   a keyboard connected to it. (nice for demos !)
    116          */
    117          

   \                                 In section .text, align 4, keep-with-next
    118          static void _OnRx(OS_U8 Data) {
    119            #if 0
    120              int Key;
    121              switch (Data) {
    122              case 'y':
    123                Key = GUI_KEY_LEFT;
    124                break;
    125              case 'x':
    126                Key = GUI_KEY_RIGHT;
    127                break;
    128              case 'q':
    129                Key = GUI_KEY_UP;
    130                break;
    131              case 'a':
    132                Key = GUI_KEY_DOWN;
    133                break;
    134              case 'w':
    135                Key = GUI_KEY_BACKSPACE;
    136                break;
    137              default:
    138                Key = Data;
    139              }
    140              GUI_StoreKeyMsg(Key, 1);
    141            #else
    142              GUI_StoreKeyMsg(Data, 1);
   \                     _OnRx:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   ........           B        GUI_StoreKeyMsg  ;; tailcall
    143            #endif
    144          }
    145          

   \                                 In section .text, align 4, keep-with-next
    146          void GUI_X_Init(void) {
    147            OS_SetRxCallback(_OnRx);
   \                     GUI_X_Init:
   \   00000000   ........           LDR      R0,??DataTable7_3
   \   00000004   ........           B        OS_SetRxCallback  ;; tailcall
    148          }
    149          
    150          /*********************************************************************
    151          *
    152          *      Logging: OS dependent
    153          
    154          Note:
    155            Logging is used in higher debug levels only. The typical target
    156            build does not use logging and does therefor not require any of
    157            the logging routines below. For a release build without logging
    158            the routines below may be eliminated to save some space.
    159            (If the linker is not function aware and eliminates unreferenced
    160            functions automatically)
    161          
    162          */
    163          #define OS_SendString(s) GUI_USE_PARA(s)

   \                                 In section .text, align 4, keep-with-next
    164          void GUI_X_Log     (const char *s) { OS_SendString(s); }
   \                     GUI_X_Log:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    165          void GUI_X_Warn    (const char *s) { OS_SendString(s); }
   \                     GUI_X_Warn:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    166          void GUI_X_ErrorOut(const char *s) { OS_SendString(s); }
   \                     GUI_X_ErrorOut:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     RSema

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   ........           DC32     _pGUITask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     _OnRx
    167          
    168          
    169          
    170          
    171          
    172          
    173          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     GUI_X_Delay            8
     GUI_X_ErrorOut         0
     GUI_X_ExecIdle         8
     GUI_X_GetTaskId        0
     GUI_X_GetTime          0
     GUI_X_Init             8
     GUI_X_InitOS           8
     GUI_X_Lock             8
     GUI_X_Log              0
     GUI_X_SignalEvent      8
     GUI_X_Unlock           8
     GUI_X_WaitEvent        8
     GUI_X_Warn             0
     _OnRx                  8


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     GUI_X_GetTime       12
     GUI_X_Delay          4
     GUI_X_ExecIdle       8
     RSema               20
     GUI_X_InitOS         8
     GUI_X_Unlock         8
     GUI_X_Lock           8
     GUI_X_GetTaskId     12
     _pGUITask            4
     GUI_X_WaitEvent     24
     GUI_X_SignalEvent   44
     _OnRx                8
     GUI_X_Init           8
     GUI_X_Log            4
     GUI_X_Warn           4
     GUI_X_ErrorOut       4
     ??DataTable7         4
     ??DataTable7_1       4
     ??DataTable7_2       4
     ??DataTable7_3       4

 
  24 bytes in section .bss
 172 bytes in section .text
 
 172 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
