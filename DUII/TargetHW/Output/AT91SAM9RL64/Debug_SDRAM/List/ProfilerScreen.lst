###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:39 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\ProfilerScreen.c                            #
#    Command line =  C:\DUII\DUII\ProfilerScreen.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Pr #
#                    ofilerScreen.lst                                         #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Pro #
#                    filerScreen.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\ProfilerScreen.c
      1          
      2          #ifdef PROFILER
      3          
      4          #include <stdio.h>
      5          #include <stdlib.h>
      6          #include <string.h>
      7          #include "DUII.h"
      8          #include "GUI.h"
      9          #include "GeneralConfig.h"
     10          #include "commondefs.h"
     11          #include "ConfigScreens.h"
     12          #include "ProfilerScreen.h"
     13          #include "RunningGauges.h"
     14          #include "DataHandler.h"
     15          #ifndef _WINDOWS
     16          #include "profiler.h"
     17          #include "datadecode.h"
     18          #include "adc.h"
     19          #endif
     20          #include "SFScreens.h"
     21          #include "LEDHandler.h"
     22          
     23          /*********************************************************************
     24          *
     25          *       External data and code
     26          *
     27          **********************************************************************
     28          */
     29          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     30          extern char lockupSemaphore;
     31          
     32          /*********************************************************************
     33          *
     34          *       Public code
     35          *
     36          **********************************************************************
     37          */
     38          
     39          /*********************************************************************
     40          *
     41          *       Local Prototypes
     42          *
     43          **********************************************************************
     44          */
     45          
     46          /*********************************************************************
     47          *
     48          *       Local Defines and Constants
     49          *
     50          **********************************************************************
     51          */
     52          
     53          /*********************************************************************
     54          *
     55          *       Local Variables
     56          *
     57          **********************************************************************
     58          */
     59          #ifdef _WINDOWS
     60          static WM_HTIMER hScreenTimer;
     61          static char firsttimethrough;
     62          static GUI_MEMDEV_Handle memGPS;
     63          #endif

   \                                 In section .bss, align 4
     64          static WM_HTIMER hTestScreenTimer;
   \                     hTestScreenTimer:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 1
     65          static WM_HWIN hProfiler;
     66          static char testfirsttimethrough;
     67          static GUI_MEMDEV_Handle memTest;
     68          
     69          #define	TOP_LINE			40
     70          #define	COLUMN_ONE			5
     71          #define	COLUMN_TWO			130
     72          #define	COLUMN_THREE		300
     73          #define	COLUMN_FOUR			415
     74          #define	LINE_GAP			30
     75          
     76          /*********************************************************************
     77          *
     78          *       GPS Info Screen Callback
     79          */

   \                                 In section .text, align 4, keep-with-next
     80          void ProfilerCallback(WM_MESSAGE * pMsg)
     81          {
   \                     ProfilerCallback:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     82          	switch(pMsg->MsgId)
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0B1051E2           SUBS     R1,R1,#+11
   \   00000010   7000000A           BEQ      ??ProfilerCallback_0
   \   00000014   041051E2           SUBS     R1,R1,#+4
   \   00000018   0C00000A           BEQ      ??ProfilerCallback_1
   \   0000001C   411F51E2           SUBS     R1,R1,#+260
   \   00000020   7000001A           BNE      ??ProfilerCallback_2
     83          	{
     84          	case WM_TIMER:
     85          		if (pMsg->Data.v == hTestScreenTimer)
   \   00000024   ........           LDR      R4,??DataTable6_1
   \   00000028   0C0090E5           LDR      R0,[R0, #+12]
   \   0000002C   002094E5           LDR      R2,[R4, #+0]
   \   00000030   020050E1           CMP      R0,R2
   \   00000034   6C00001A           BNE      ??ProfilerCallback_3
     86          		{
     87          			WM_RestartTimer(hTestScreenTimer, GAUGE_SCREEN_REFRESH_TIME);
   \   00000038   1910A0E3           MOV      R1,#+25
   \   0000003C   0200A0E1           MOV      R0,R2
   \   00000040   ........           BL       WM_RestartTimer
     88          			WM_InvalidateWindow(hProfiler);
   \   00000044   040094E5           LDR      R0,[R4, #+4]
   \   00000048   ........           BL       WM_InvalidateWindow
   \   0000004C   660000EA           B        ??ProfilerCallback_3
     89          		}
     90          		break;
     91          
     92          	case WM_PAINT:
     93          		if (CS_IsVisible(PROFILER_SCREEN) || testfirsttimethrough)
   \                     ??ProfilerCallback_1:
   \   00000050   0A00A0E3           MOV      R0,#+10
   \   00000054   ........           BL       CS_IsVisible
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0300001A           BNE      ??ProfilerCallback_4
   \   00000060   ........           LDR      R0,??DataTable6_1
   \   00000064   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   5E00000A           BEQ      ??ProfilerCallback_3
     94          		{
     95          			char scratch[40];
     96          			char i;
     97          
     98          			if (lockupSemaphore)			// If main has not run since our last paint - exit!
   \                     ??ProfilerCallback_4:
   \   00000070   ........           LDR      R0,??DataTable6_2
   \   00000074   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   5A00001A           BNE      ??ProfilerCallback_3
     99          				break;
    100          			else lockupSemaphore = true;
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0010C0E5           STRB     R1,[R0, #+0]
    101          			
    102          			testfirsttimethrough = FALSE;
   \   00000088   ........           LDR      R4,??DataTable6_1
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   0C00C4E5           STRB     R0,[R4, #+12]
    103          
    104          			GUI_MEMDEV_Select(memTest);
   \   00000094   080094E5           LDR      R0,[R4, #+8]
   \   00000098   ........           BL       GUI_MEMDEV_Select
    105          			GUI_Clear();
   \   0000009C   ........           BL       GUI_Clear
    106          			GUI_SetColor(GUI_WHITE);
   \   000000A0   FF04E0E3           MVN      R0,#-16777216
   \   000000A4   ........           BL       GUI_SetColor
    107          			GUI_SetFont(&GUI_Font24_ASCII);
   \   000000A8   ........           LDR      R0,??DataTable6_3
   \   000000AC   ........           BL       GUI_SetFont
    108          
    109          			// Draw screen title
    110          			GUI_DispStringHCenterAt("Task Profiler", XSIZE_PHYS/2, 5);
   \   000000B0   0520A0E3           MOV      R2,#+5
   \   000000B4   F010A0E3           MOV      R1,#+240
   \   000000B8   ........           ADR      R0,`?<Constant "Task Profiler">`
   \   000000BC   ........           BL       GUI_DispStringHCenterAt
    111          
    112          			for (i = 0; i < NUMBER_OF_TASKS; i++)
   \   000000C0   ........           LDR      R5,??DataTable6_4
   \   000000C4   2860A0E3           MOV      R6,#+40
   \   000000C8   0770A0E3           MOV      R7,#+7
   \   000000CC   ........           ADR      R10,`?<Constant "Max: %d">`
   \   000000D0   ........           ADR      R9,`?<Constant "Starts: %d">`
   \   000000D4   ........           ADR      R8,??DataTable6  ;; 0x25, 0x73, 0x00, 0x00
    113          			{
    114          				sprintf(scratch, "%s", taskProfile[i].profileName);
   \                     ??ProfilerCallback_5:
   \   000000D8   102045E2           SUB      R2,R5,#+16
   \   000000DC   0810A0E1           MOV      R1,R8
   \   000000E0   04008DE2           ADD      R0,SP,#+4
   \   000000E4   ........           BL       sprintf
    115          				GUI_DispStringAt(scratch, COLUMN_ONE, TOP_LINE + (LINE_GAP * i));
   \   000000E8   0620A0E1           MOV      R2,R6
   \   000000EC   0510A0E3           MOV      R1,#+5
   \   000000F0   04008DE2           ADD      R0,SP,#+4
   \   000000F4   ........           BL       GUI_DispStringAt
    116          
    117          				sprintf(scratch, "Starts: %d", taskProfile[i].numberOfStarts);
   \   000000F8   002095E5           LDR      R2,[R5, #+0]
   \   000000FC   0910A0E1           MOV      R1,R9
   \   00000100   04008DE2           ADD      R0,SP,#+4
   \   00000104   ........           BL       sprintf
    118          				GUI_DispStringAt(scratch, COLUMN_TWO, TOP_LINE + (LINE_GAP * i));
   \   00000108   0620A0E1           MOV      R2,R6
   \   0000010C   8210A0E3           MOV      R1,#+130
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   ........           BL       GUI_DispStringAt
    119          
    120          				sprintf(scratch, "Max: %d", taskProfile[i].maxExecTime);
   \   00000118   042095E5           LDR      R2,[R5, #+4]
   \   0000011C   0A10A0E1           MOV      R1,R10
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   ........           BL       sprintf
    121          				GUI_DispStringAt(scratch, COLUMN_THREE, TOP_LINE + (LINE_GAP * i));
   \   00000128   0620A0E1           MOV      R2,R6
   \   0000012C   4B1FA0E3           MOV      R1,#+300
   \   00000130   04008DE2           ADD      R0,SP,#+4
   \   00000134   ........           BL       GUI_DispStringAt
    122          
    123          #ifdef _WINDOWS
    124          				sprintf(scratch, "Total: %d", taskProfile[i].totalExecTime);
    125          #else
    126          				{
    127          					long currentTime;
    128          					int percent;
    129          
    130          					currentTime = OS_GetTime32();
   \   00000138   ........           LDR      R0,??DataTable6_5
   \   0000013C   1CB090E5           LDR      R11,[R0, #+28]
    131          					percent = (int) (((float)taskProfile[i].totalExecTime / (float)currentTime) * 100.0);
    132          					sprintf(scratch, "%%: %d", percent);
   \   00000140   080095E5           LDR      R0,[R5, #+8]
   \   00000144   ........           BL       __aeabi_ui2f
   \   00000148   00008DE5           STR      R0,[SP, #+0]
   \   0000014C   0B00A0E1           MOV      R0,R11
   \   00000150   ........           BL       __aeabi_i2f
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
   \   0000015C   ........           BL       __aeabi_fdiv
   \   00000160   ........           BL       __aeabi_f2d
   \   00000164   0130A0E1           MOV      R3,R1
   \   00000168   0020A0E1           MOV      R2,R0
   \   0000016C   4014A0E3           MOV      R1,#+1073741824
   \   00000170   0000A0E3           MOV      R0,#+0
   \   00000174   591881E3           ORR      R1,R1,#0x590000
   \   00000178   ........           BL       __aeabi_dmul
   \   0000017C   ........           BL       __aeabi_d2iz
   \   00000180   0020A0E1           MOV      R2,R0
   \   00000184   ........           ADR      R1,`?<Constant "%%: %d">`
   \   00000188   04008DE2           ADD      R0,SP,#+4
   \   0000018C   ........           BL       sprintf
    133          				}
    134          #endif
    135          				GUI_DispStringAt(scratch, COLUMN_FOUR, TOP_LINE + (LINE_GAP * i));
   \   00000190   9F10A0E3           MOV      R1,#+159
   \   00000194   0620A0E1           MOV      R2,R6
   \   00000198   401F81E3           ORR      R1,R1,#0x100
   \   0000019C   04008DE2           ADD      R0,SP,#+4
   \   000001A0   ........           BL       GUI_DispStringAt
    136          			}
   \   000001A4   1E6086E2           ADD      R6,R6,#+30
   \   000001A8   1C5085E2           ADD      R5,R5,#+28
   \   000001AC   017057E2           SUBS     R7,R7,#+1
   \   000001B0   C8FFFF1A           BNE      ??ProfilerCallback_5
    137          
    138          #if 0
    139          			// Draw Light Level
    140          			sprintf(scratch, "Raw Light Level: %d       ", GetADC(ADC_LIGHT_LEVEL));
    141          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE);
    142          
    143          			// Draw LED Board Temperature
    144          			sprintf(scratch, "LED Temp: %d   ", GetADC(ADC_LED_BOARD_TEMP));
    145          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE + (LINE_GAP * 1));
    146          
    147          	//		// Draw Side LED
    148          	//		sprintf(scratch, "Side LED intensity: %d   ", warningLEDPWMSetting);
    149          			// Draw raw light reading
    150          			sprintf(scratch, "Normalized Light: %d       ", GetNormalizedLightIntensity());
    151          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE + (LINE_GAP * 2));
    152          
    153          			// Draw Tach LED
    154          			sprintf(scratch, "Tach LED intensity: %d   ", tachLEDPWMSetting);
    155          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE + (LINE_GAP * 3));
    156          
    157          			// Draw Backlight
    158          			sprintf(scratch, "Backlight intensity: %d   ", backlightPWMSetting);
    159          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE + (LINE_GAP * 4));
    160          
    161          			// Draw Vehicle Power
    162          			sprintf(scratch, "Battery voltage: %2.1f   ", GetValue(VEHICLE_12V).fVal));
    163          			GUI_DispStringAt(scratch, LEFT_COLUMN, TOP_LINE + (LINE_GAP * 5));
    164          
    165          #if LIGHTTEST			
    166          			// Draw Light level when adjustments made
    167          			sprintf(scratch, "Light set at: %d   ", sysData.lightLevelWhenIntensitySet);
    168          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE);
    169          
    170          			// Draw light correction
    171          			sprintf(scratch, "Light Correction: %d   ", lightCorrection);
    172          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 1));
    173          
    174          			// Draw temp correction
    175          			sprintf(scratch, "Temp Correction: %d   ", tempCorrection);
    176          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 2));
    177          
    178          			// Draw total correction
    179          			sprintf(scratch, "Total Correction: %d   ", totalCorrection);
    180          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 3));
    181          #else
    182          			// Show total distance
    183          			sprintf(scratch, "Distance Mi: %1.1f   ", (float) sysData.totalDistanceEver * (39.0 / 12.0 / 5280.0));
    184          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE);
    185          
    186          			// Draw total operating time
    187          			sprintf(scratch, "Operating Hrs: %1.1f   ", sysData.totalTimeEver / 3600.0);
    188          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 1));
    189          
    190          			// Draw Highest RPM
    191          			sprintf(scratch, "Highest Rev: %d   ", sysData.maxRpmEver);
    192          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 2));
    193          #endif
    194          			
    195          			// Draw SU, DU info
    196          			sprintf(scratch, "DF: %d, %d   ", unsavedSysData.dataflash[0].bytesPerPage, unsavedSysData.dataflash[1].bytesPerPage);
    197          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 4));
    198          			
    199          			// Draw SU, DU info
    200          			sprintf(scratch, "SU %d.%02d, DU %d.%02d  ", suData.suSwRev / 100, suData.suSwRev % 100, unsavedSysData.duSwRev / 100,  unsavedSysData.duSwRev % 100);
    201          			GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 5));
    202          
    203          			//// Draw X-G
    204          			//// If SU HW Rev < 200 display temp else display Z
    205          			//if (suData.su_hw_rev < 200)
    206          			//	sprintf(scratch, "Temp: %.1f %s   ", GetValue(SU_TEMPERATURE).fVal, sysData.units == METRIC ? "C" : "F");
    207          			//else sprintf(scratch, "Z - G: %.2f   ", GetValue(Z_G).fVal);
    208          			//GUI_DispStringAt(scratch, RIGHT_COLUMN, TOP_LINE + (LINE_GAP * 4));
    209          #endif
    210          
    211          			// Draw navigation arrow
    212          			GUI_DrawBitmap(&bmthreewayarrow, 0, 229);
   \   000001B4   E520A0E3           MOV      R2,#+229
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   ........           LDR      R0,??DataTable6_6
   \   000001C0   ........           BL       GUI_DrawBitmap
    213          			CheckWarningPopups();
   \   000001C4   ........           BL       CheckWarningPopups
    214          			GUI_MEMDEV_CopyToLCD(memTest);
   \   000001C8   080094E5           LDR      R0,[R4, #+8]
   \   000001CC   ........           BL       GUI_MEMDEV_CopyToLCD
    215          			GUI_SelectLCD();
   \   000001D0   ........           BL       GUI_SelectLCD
   \   000001D4   040000EA           B        ??ProfilerCallback_3
    216          		}
    217          		break;
    218          
    219          	case WM_DELETE:
    220          		GUI_MEMDEV_Delete(memTest);
   \                     ??ProfilerCallback_0:
   \   000001D8   ........           LDR      R0,??DataTable6_1
   \   000001DC   080090E5           LDR      R0,[R0, #+8]
   \   000001E0   ........           BL       GUI_MEMDEV_Delete
    221          		break;
   \   000001E4   000000EA           B        ??ProfilerCallback_3
    222          
    223          	default:
    224          		  WM_DefaultProc(pMsg);
   \                     ??ProfilerCallback_2:
   \   000001E8   ........           BL       WM_DefaultProc
    225          	};
    226          }
   \                     ??ProfilerCallback_3:
   \   000001EC   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000001F0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    227          
    228          /*********************************************************************
    229          *
    230          *       GPS Info Screen Create
    231          */

   \                                 In section .text, align 4, keep-with-next
    232          WM_HWIN DisplayProfilerScreen(WM_HWIN hParent)
    233          {
   \                     DisplayProfilerScreen:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    234          	testfirsttimethrough = true;
   \   00000008   ........           LDR      R5,??DataTable6_1
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0C00C5E5           STRB     R0,[R5, #+12]
   \   00000014   14D04DE2           SUB      SP,SP,#+20
    235          
    236          	// create a memory area to reduce flicker on paint.
    237          	memTest = GUI_MEMDEV_Create(0, 0, XSIZE_PHYS, YSIZE_PHYS);
   \   00000018   443FA0E3           MOV      R3,#+272
   \   0000001C   782FA0E3           MOV      R2,#+480
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           BL       GUI_MEMDEV_Create
   \   0000002C   080085E5           STR      R0,[R5, #+8]
    238          
    239          	if ((hProfiler = WM_CreateWindowAsChild(0, 0, XSIZE_PHYS, YSIZE_PHYS, hParent, WM_CF_SHOW, ProfilerCallback, 0)) <= 0)
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C008DE5           STR      R0,[SP, #+12]
   \   00000038   ........           LDR      R0,??DataTable6_7
   \   0000003C   00408DE5           STR      R4,[SP, #+0]
   \   00000040   08008DE5           STR      R0,[SP, #+8]
   \   00000044   0200A0E3           MOV      R0,#+2
   \   00000048   04008DE5           STR      R0,[SP, #+4]
   \   0000004C   443FA0E3           MOV      R3,#+272
   \   00000050   782FA0E3           MOV      R2,#+480
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       WM_CreateWindowAsChild
   \   00000060   040085E5           STR      R0,[R5, #+4]
   \   00000064   010050E3           CMP      R0,#+1
   \   00000068   000000AA           BGE      ??DisplayProfilerScreen_0
    240          		SystemError();
   \   0000006C   ........           BL       SystemError
    241          
    242          	WM_InvalidateWindow(hProfiler);
   \                     ??DisplayProfilerScreen_0:
   \   00000070   040095E5           LDR      R0,[R5, #+4]
   \   00000074   ........           BL       WM_InvalidateWindow
    243          
    244          	hTestScreenTimer = WM_CreateTimer(hProfiler, 0, GAUGE_SCREEN_REFRESH_TIME, 0);
   \   00000078   0030A0E3           MOV      R3,#+0
   \   0000007C   1920A0E3           MOV      R2,#+25
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   ........           BL       WM_CreateTimer
   \   0000008C   000085E5           STR      R0,[R5, #+0]
    245          
    246          	return hProfiler;
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   14D08DE2           ADD      SP,SP,#+20
   \   00000098   3080BDE8           POP      {R4,R5,PC}       ;; return
    247          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   25730000           DC8      0x25, 0x73, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     hTestScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     lockupSemaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     taskProfile+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   ........           DC32     bmthreewayarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   ........           DC32     ProfilerCallback

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25730000           DC8 37, 115, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Task Profiler">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   5461736B2050       DC8 84, 97, 115, 107, 32, 80, 114, 111, 102, 105
   \              726F6669    
   \   0000000A   6C6572000000       DC8 108, 101, 114, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Starts: %d">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   537461727473       DC8 83, 116, 97, 114, 116, 115, 58, 32, 37, 100
   \              3A202564    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Max: %d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4D61783A2025       DC8 77, 97, 120, 58, 32, 37, 100, 0
   \              6400        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%%: %d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25253A202564       DC8 37, 37, 58, 32, 37, 100, 0, 0
   \              0000        
    248          
    249          /*************************** End of file ****************************/
    250          
    251          // End ifdef PROFILER
    252          #endif

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     DisplayProfilerScreen     32
     ProfilerCallback          80


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     hTestScreenTimer              13
     hProfiler
     memTest
     testfirsttimethrough
     ProfilerCallback             500
     DisplayProfilerScreen        156
     ??DataTable6                   4
     ??DataTable6_1                 4
     ??DataTable6_2                 4
     ??DataTable6_3                 4
     ??DataTable6_4                 4
     ??DataTable6_5                 4
     ??DataTable6_6                 4
     ??DataTable6_7                 4
     ?<Constant "%s">               4
     ?<Constant "Task Profiler">   16
     ?<Constant "Starts: %d">      12
     ?<Constant "Max: %d">          8
     ?<Constant "%%: %d">           8

 
  13 bytes in section .bss
   4 bytes in section .rodata
 732 bytes in section .text
 
 732 bytes of CODE  memory
   4 bytes of CONST memory
  13 bytes of DATA  memory

Errors: none
Warnings: none
