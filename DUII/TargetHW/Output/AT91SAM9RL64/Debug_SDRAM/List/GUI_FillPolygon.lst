###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:53 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_FillPolygon.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_FillPolygon.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_FillPolygon.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _FillPolygon.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_FillPolygon.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_FillPolygon.C
     19          Purpose     : Fill polygon routine
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       defines, Configs
     30          *
     31          **********************************************************************
     32          */
     33          #ifndef GUI_FP_MAXCOUNT
     34            #define GUI_FP_MAXCOUNT 12
     35          #endif
     36          
     37          /*********************************************************************
     38          *
     39          *       static data
     40          *
     41          **********************************************************************
     42          */
     43          

   \                                 In section .bss, align 4
     44          static int GL_FP_Cnt;
     45          static I16 _aX[GUI_FP_MAXCOUNT];
   \                     _aX:
   \   00000000                      DS8 24
   \   00000018                      DS8 4
     46          
     47          /*********************************************************************
     48          *
     49          *       static code
     50          *
     51          **********************************************************************
     52          */
     53          /*********************************************************************
     54          *
     55          *       _DrawHLine
     56          */
     57          static void _DrawHLine(int x0, int y, int x1) {
     58            if (x0 < x1) {
     59              LCD_HL_DrawHLine(x0, y, x1);
     60            } else {
     61              LCD_HL_DrawHLine(x1, y, x0);
     62            }
     63          }
     64          
     65          /*********************************************************************
     66          *
     67          *       _CheckYInterSect
     68          *
     69          *  This function returns the x-coordinate of the intersection
     70          *  of the given line at the given y-coordinate.
     71          *  If there is no intersection, GUI_XMAX is returned.
     72          *  This routine does not work for horizontal lines, as there
     73          *  would be more than a single point as intersection. This situation
     74          *  needs to be checked prior to calling the routine.
     75          *  Returns:
     76          *    0 if no intersection
     77          *    1 if we have an intersection
     78          */

   \                                 In section .text, align 4, keep-with-next
     79          static int _CheckYInterSect(int y, int * px, const GUI_POINT * paPoint0, const GUI_POINT * paPoint1) {
   \                     _CheckYInterSect:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     80            int x0, y0, x1, y1;
     81            I32 Mul;
     82          
     83            if (paPoint0->y <= (paPoint1)->y) {
   \   00000004   F2C0D2E1           LDRSH    R12,[R2, #+2]
   \   00000008   F2E0D3E1           LDRSH    LR,[R3, #+2]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0C005EE1           CMP      LR,R12
   \   00000014   0A0000BA           BLT      ??_CheckYInterSect_0
     84              y0 = paPoint0->y;
   \   00000018   0C10A0E1           MOV      R1,R12
     85              if (y0 > y) {     // Check if there is an intersection ... (early out)
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   010000AA           BGE      ??_CheckYInterSect_1
     86                return 0;
   \                     ??_CheckYInterSect_2:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   3080BDE8           POP      {R4,R5,PC}
     87              }
     88              y1 = paPoint1->y;
   \                     ??_CheckYInterSect_1:
   \   0000002C   0EC0A0E1           MOV      R12,LR
     89              if (y1 < y) {     // Check if there is an intersection ... (early out)
   \   00000030   00005CE1           CMP      R12,R0
   \   00000034   FAFFFFBA           BLT      ??_CheckYInterSect_2
     90                return 0;
     91              }
     92              x0 = paPoint0->x;
   \   00000038   F050D2E1           LDRSH    R5,[R2, #+0]
     93              x1 = paPoint1->x;
   \   0000003C   F020D3E1           LDRSH    R2,[R3, #+0]
   \   00000040   050000EA           B        ??_CheckYInterSect_3
     94            } else {
     95              y0 = paPoint1->y;
   \                     ??_CheckYInterSect_0:
   \   00000044   0E10A0E1           MOV      R1,LR
     96              if (y0 > y) {     // Check if there is an intersection ... (early out)
   \   00000048   010050E1           CMP      R0,R1
     97                return 0;
     98              }
     99              y1 = paPoint0->y;
    100              if (y1 < y) {     // Check if there is an intersection ... (early out)
   \   0000004C   00005CA1           CMPGE    R12,R0
   \   00000050   F3FFFFBA           BLT      ??_CheckYInterSect_2
    101                return 0;
    102              }
    103              x0 = paPoint1->x;
   \   00000054   F050D3E1           LDRSH    R5,[R3, #+0]
    104              x1 = paPoint0->x;
   \   00000058   F020D2E1           LDRSH    R2,[R2, #+0]
    105            }
    106            //
    107            // Calculate intersection
    108            //
    109            {
    110              Mul = (I32)(x1 - x0) * (I32)(y - y0);
   \                     ??_CheckYInterSect_3:
   \   0000005C   052042E0           SUB      R2,R2,R5
   \   00000060   013040E0           SUB      R3,R0,R1
   \   00000064   930200E0           MUL      R0,R3,R2
    111              if (Mul > 0) {
   \   00000068   01104CE0           SUB      R1,R12,R1
   \   0000006C   010050E3           CMP      R0,#+1
    112                Mul += (y1 - y0) >> 1;	          // for proper rounding
    113              } else {
    114                Mul -= ((y1 - y0) >> 1) - 1;	    // for proper rounding
   \   00000070   C10040B0           SUBLT    R0,R0,R1, ASR #+1
   \   00000074   C10080A0           ADDGE    R0,R0,R1, ASR #+1
   \   00000078   010080B2           ADDLT    R0,R0,#+1
    115              }
    116              x0 += Mul / (y1 - y0);
    117            }
    118            *px = x0;
   \   0000007C   ........           BL       __aeabi_idiv
   \   00000080   050080E0           ADD      R0,R0,R5
   \   00000084   000084E5           STR      R0,[R4, #+0]
    119            return 1;
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
    120          } 
    121          
    122          /*********************************************************************
    123          *
    124          *       _Add
    125          *
    126          *  This function adds a point into the sorted array
    127          */
    128          static void _Add(int x) {
    129            if (GL_FP_Cnt < GUI_FP_MAXCOUNT) {
    130              int i;
    131              //
    132              // Move all entries to the right (bigger x-value)
    133              //
    134              for (i=GL_FP_Cnt; i ; i--) {
    135                if (_aX[i-1] < x) {
    136                  break;
    137                }
    138                _aX[i] = _aX[i-1];
    139              }
    140              //
    141              // Insert new entry
    142              //
    143              _aX[i]    = x;
    144              GL_FP_Cnt++;
    145            }
    146          }
    147          
    148          /*********************************************************************
    149          *
    150          *       _Init
    151          *
    152          *  This function initialise the sorted array
    153          */
    154          static void _Init(void) {
    155            GL_FP_Cnt = 0;
    156          }
    157          
    158          /*********************************************************************
    159          *
    160          *       _Flush
    161          *
    162          *  This function draw lines between points in the array
    163          */
    164          static void _Flush(int x0, int y) {
    165            int i, x, xNew;
    166            char On;
    167            
    168            x = 0;
    169            On = 0;
    170            for (i=0; i<GL_FP_Cnt; i++) {
    171              xNew = _aX[i];
    172              if (On) {
    173                LCD_HL_DrawHLine(x0 + x, y, x0 + xNew);
    174              }
    175              On ^= 1;
    176              x = xNew;
    177            }
    178          }
    179          
    180          /*********************************************************************
    181          *
    182          *       _AddPoint
    183          *
    184          *  This function decides either if there a V-point or a
    185          *  X-point. An X-point is added to the array, a V-point
    186          *  is drawn.
    187          */
    188          static void _AddPoint(int x, int y, int y0, int y1, int xOff, int yOff) {
    189            if ((y0 ^ y1) >= 0) {
    190              x += xOff;
    191              LCD_HL_DrawHLine(x, y + yOff, x);    // V-point, not crossing the polygon
    192            } else {
    193              _Add(x);
    194            }
    195          }
    196          
    197          /*********************************************************************
    198          *
    199          *       _GetPrevPointDiffy
    200          *
    201          *  Find previous point which is not on the same height
    202          */
    203          static int _GetPrevPointDiffy(const GUI_POINT * paPoint, int i,const int NumPoints, const int y0) {
    204            int j, y1;
    205            for (j = 0; j < (NumPoints - 1) ; j++) {
    206              i = (i != 0) ? i - 1 : NumPoints - 1;
    207              y1 = (paPoint + i)->y;
    208              if (y1 != y0) {
    209                return y1;
    210              }
    211            }
    212            return y0;
    213          }
    214          
    215          /*********************************************************************
    216          *
    217          *       Public code
    218          *
    219          **********************************************************************
    220          */
    221          /*********************************************************************
    222          *
    223          *       GL_FillPolygon
    224          *
    225          *  This function calculates the polygon
    226          */

   \                                 In section .text, align 4, keep-with-next
    227          void GL_FillPolygon  (const GUI_POINT*paPoint, int NumPoints, int xOff, int yOff) {
   \                     GL_FillPolygon:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0250A0E1           MOV      R5,R2
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   0040A0E1           MOV      R4,R0
    228            int i, y, i1, y0, y1, yMin, yMax, yPrev, xIntersect;
    229            
    230            yMin = GUI_YMAX;
   \   00000010   FF20A0E3           MOV      R2,#+255
   \   00000014   F02E82E3           ORR      R2,R2,#0xF00
    231            yMax = GUI_YMIN;
    232            //
    233            // First step : find uppermost and lowermost coordinates
    234            //
    235            for (i = 0; i < NumPoints; i++) {
   \   00000018   18009DE5           LDR      R0,[SP, #+24]
   \   0000001C   001062E2           RSB      R1,R2,#+0
   \   00000020   0260A0E1           MOV      R6,R2
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   260000BA           BLT      ??GL_FillPolygon_0
   \   00000030   18109DE5           LDR      R1,[SP, #+24]
   \   00000034   F200D4E1           LDRSH    R0,[R4, #+2]
   \   00000038   01C041E2           SUB      R12,R1,#+1
   \   0000003C   061084E2           ADD      R1,R4,#+6
   \   00000040   01001CE3           TST      R12,#0x1
   \   00000044   0600000A           BEQ      ??GL_FillPolygon_1
    236              y = (paPoint + i)->y;
    237              if (y < yMin) {
   \   00000048   020050E1           CMP      R0,R2
    238                yMin = y;
    239              }
    240              if (y > yMax) {
   \   0000004C   FD20E0E3           MVN      R2,#+253
   \   00000050   0060A0B1           MOVLT    R6,R0
   \   00000054   F02EC2E3           BIC      R2,R2,#0xF00
   \   00000058   020050E1           CMP      R0,R2
    241                yMax = y;
   \   0000005C   00008DA5           STRGE    R0,[SP, #+0]
   \   00000060   F400D1E0           LDRSH    R0,[R1], #+4
   \                     ??GL_FillPolygon_1:
   \   00000064   AC20B0E1           LSRS     R2,R12,#+1
   \   00000068   1100000A           BEQ      ??GL_FillPolygon_2
    242              }
   \                     ??GL_FillPolygon_3:
   \   0000006C   00C0A0E1           MOV      R12,R0
   \   00000070   060050E1           CMP      R0,R6
   \   00000074   00E09DE5           LDR      LR,[SP, #+0]
   \   00000078   06C0A0C1           MOVGT    R12,R6
   \   0000007C   00005EE1           CMP      LR,R0
   \   00000080   00E0A0B1           MOVLT    LR,R0
   \   00000084   F000D1E1           LDRSH    R0,[R1, #+0]
   \   00000088   0060A0E1           MOV      R6,R0
   \   0000008C   0C0050E1           CMP      R0,R12
   \   00000090   0C60A0C1           MOVGT    R6,R12
   \   00000094   00005EE1           CMP      LR,R0
   \   00000098   00E0A0B1           MOVLT    LR,R0
   \   0000009C   00E08DE5           STR      LR,[SP, #+0]
   \   000000A0   F400D1E1           LDRSH    R0,[R1, #+4]
   \   000000A4   012042E2           SUB      R2,R2,#+1
   \   000000A8   081081E2           ADD      R1,R1,#+8
   \   000000AC   000052E3           CMP      R2,#+0
   \   000000B0   EDFFFF1A           BNE      ??GL_FillPolygon_3
   \                     ??GL_FillPolygon_2:
   \   000000B4   060050E1           CMP      R0,R6
   \   000000B8   00109DE5           LDR      R1,[SP, #+0]
   \   000000BC   0060A0D1           MOVLE    R6,R0
   \   000000C0   000051E1           CMP      R1,R0
   \   000000C4   0010A0B1           MOVLT    R1,R0
   \   000000C8   00108DE5           STR      R1,[SP, #+0]
   \                     ??GL_FillPolygon_0:
   \   000000CC   ........           LDR      R0,??DataTable1
   \   000000D0   140090E5           LDR      R0,[R0, #+20]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0800000A           BEQ      ??GL_FillPolygon_4
    243            }
    244            //
    245            // Use Clipping rect to reduce calculation (if possible)
    246            //
    247            if (GUI_Context.pClipRect_HL) {
    248              if (yMax > (GUI_Context.pClipRect_HL->y1 - yOff)) {
   \   000000DC   F610D0E1           LDRSH    R1,[R0, #+6]
   \   000000E0   00209DE5           LDR      R2,[SP, #+0]
   \   000000E4   031041E0           SUB      R1,R1,R3
   \   000000E8   020051E1           CMP      R1,R2
    249                yMax = (GUI_Context.pClipRect_HL->y1 - yOff);
   \   000000EC   00108DB5           STRLT    R1,[SP, #+0]
    250              }
    251              if (yMin < (GUI_Context.pClipRect_HL->y0 - yOff)) {
   \   000000F0   F200D0E1           LDRSH    R0,[R0, #+2]
   \   000000F4   030040E0           SUB      R0,R0,R3
   \   000000F8   000056E1           CMP      R6,R0
    252                yMin = (GUI_Context.pClipRect_HL->y0 - yOff);
   \   000000FC   0060A0B1           MOVLT    R6,R0
    253              }
    254            }
    255            //
    256            // Second step: Calculate and draw horizontal lines
    257            //
    258            for (y = yMin; y <= yMax; y++) {
   \                     ??GL_FillPolygon_4:
   \   00000100   00009DE5           LDR      R0,[SP, #+0]
   \   00000104   060050E1           CMP      R0,R6
   \   00000108   740000BA           BLT      ??GL_FillPolygon_5
   \   0000010C   060083E0           ADD      R0,R3,R6
   \   00000110   04008DE5           STR      R0,[SP, #+4]
   \   00000114   18009DE5           LDR      R0,[SP, #+24]
   \   00000118   ........           LDR      R8,??DataTable1_1
   \   0000011C   017040E2           SUB      R7,R0,#+1
    259              _Init();
   \                     ??GL_FillPolygon_6:
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   180088E5           STR      R0,[R8, #+24]
    260              //
    261              // find next intersection and count line
    262              //
    263              for (i = 0; i<NumPoints; i++) {
   \   00000128   18009DE5           LDR      R0,[SP, #+24]
   \   0000012C   0090A0E3           MOV      R9,#+0
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   590000BA           BLT      ??GL_FillPolygon_7
   \   00000138   04A0A0E1           MOV      R10,R4
    264                i1 = (i < (NumPoints - 1)) ? i + 1 : 0;
   \                     ??GL_FillPolygon_8:
   \   0000013C   070059E1           CMP      R9,R7
    265                y0 = (paPoint + i )->y;
   \   00000140   F220DAE1           LDRSH    R2,[R10, #+2]
   \   00000144   010089B2           ADDLT    R0,R9,#+1
   \   00000148   0000A0A3           MOVGE    R0,#+0
    266                y1 = (paPoint + i1)->y;
   \   0000014C   003184E0           ADD      R3,R4,R0, LSL #+2
   \   00000150   F210D3E1           LDRSH    R1,[R3, #+2]
    267                //
    268                // Check if starting point is on line
    269                //
    270                if (y0 == y) {
   \   00000154   060052E1           CMP      R2,R6
   \   00000158   2B00001A           BNE      ??GL_FillPolygon_9
    271                  if (y1 == y) {  // Add the entire line
   \   0000015C   060051E1           CMP      R1,R6
   \   00000160   0E00001A           BNE      ??GL_FillPolygon_10
    272                    _DrawHLine((paPoint + i )->x + xOff , y + yOff, (paPoint + i1)->x + xOff);
   \   00000164   F020DAE1           LDRSH    R2,[R10, #+0]
   \   00000168   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000016C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000170   023085E0           ADD      R3,R5,R2
   \   00000174   ........           LDR      R2,??DataTable1
   \   00000178   000085E0           ADD      R0,R5,R0
   \   0000017C   942092E5           LDR      R2,[R2, #+148]
   \   00000180   000053E1           CMP      R3,R0
   \   00000184   00C092E5           LDR      R12,[R2, #+0]
   \   00000188   0020A0B1           MOVLT    R2,R0
   \   0000018C   04109DE5           LDR      R1,[SP, #+4]
   \   00000190   0320A0A1           MOVGE    R2,R3
   \   00000194   0300A0B1           MOVLT    R0,R3
   \   00000198   3CFF2FE1           BLX      R12
   \   0000019C   3A0000EA           B        ??GL_FillPolygon_11
    273                  } else {        // Add only one point
    274                    yPrev = _GetPrevPointDiffy(paPoint, i, NumPoints, y);
   \                     ??GL_FillPolygon_10:
   \   000001A0   0900A0E1           MOV      R0,R9
   \   000001A4   010057E3           CMP      R7,#+1
   \   000001A8   370000BA           BLT      ??GL_FillPolygon_11
   \   000001AC   0720A0E1           MOV      R2,R7
   \                     ??GL_FillPolygon_12:
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   01004012           SUBNE    R0,R0,#+1
   \   000001B8   0700A001           MOVEQ    R0,R7
   \   000001BC   003184E0           ADD      R3,R4,R0, LSL #+2
   \   000001C0   F230D3E1           LDRSH    R3,[R3, #+2]
   \   000001C4   060053E1           CMP      R3,R6
   \   000001C8   0200001A           BNE      ??GL_FillPolygon_13
   \   000001CC   012052E2           SUBS     R2,R2,#+1
   \   000001D0   F6FFFF1A           BNE      ??GL_FillPolygon_12
   \   000001D4   2C0000EA           B        ??GL_FillPolygon_11
    275                    if (yPrev != y) {
    276                      _AddPoint((paPoint + i)->x, y, yPrev - y, y1 - y, xOff, yOff);
   \                     ??GL_FillPolygon_13:
   \   000001D8   062043E0           SUB      R2,R3,R6
   \   000001DC   061041E0           SUB      R1,R1,R6
   \   000001E0   F000DAE1           LDRSH    R0,[R10, #+0]
   \   000001E4   021031E0           EORS     R1,R1,R2
   \   000001E8   1500004A           BMI      ??GL_FillPolygon_14
   \   000001EC   ........           LDR      R3,??DataTable1
   \   000001F0   000085E0           ADD      R0,R5,R0
   \   000001F4   943093E5           LDR      R3,[R3, #+148]
   \   000001F8   0020A0E1           MOV      R2,R0
   \   000001FC   04109DE5           LDR      R1,[SP, #+4]
   \   00000200   003093E5           LDR      R3,[R3, #+0]
   \   00000204   33FF2FE1           BLX      R3
   \   00000208   1F0000EA           B        ??GL_FillPolygon_11
    277                    } 
    278                  }
    279                } else if (y1 != y) {  // Ignore if end-point is on the line
   \                     ??GL_FillPolygon_9:
   \   0000020C   060051E1           CMP      R1,R6
   \   00000210   1D00000A           BEQ      ??GL_FillPolygon_11
    280                  if (((y1 >= y) && (y0 <= y)) || ((y0 >= y) && (y1 <= y))) {
   \   00000214   020056A1           CMPGE    R6,R2
   \   00000218   020000AA           BGE      ??GL_FillPolygon_15
   \   0000021C   060052E1           CMP      R2,R6
   \   00000220   010056A1           CMPGE    R6,R1
   \   00000224   180000BA           BLT      ??GL_FillPolygon_11
    281                    if (_CheckYInterSect(y, &xIntersect, paPoint + i, paPoint + i1)) {
   \                     ??GL_FillPolygon_15:
   \   00000228   0A20A0E1           MOV      R2,R10
   \   0000022C   0C108DE2           ADD      R1,SP,#+12
   \   00000230   0600A0E1           MOV      R0,R6
   \   00000234   ........           BL       _CheckYInterSect
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   1200000A           BEQ      ??GL_FillPolygon_11
    282                      _Add(xIntersect);
   \   00000240   0C009DE5           LDR      R0,[SP, #+12]
   \                     ??GL_FillPolygon_14:
   \   00000244   181098E5           LDR      R1,[R8, #+24]
   \   00000248   0C0051E3           CMP      R1,#+12
   \   0000024C   0E0000AA           BGE      ??GL_FillPolygon_11
   \   00000250   0120A0E1           MOV      R2,R1
   \   00000254   823088E0           ADD      R3,R8,R2, LSL #+1
   \   00000258   010000EA           B        ??GL_FillPolygon_16
   \                     ??GL_FillPolygon_17:
   \   0000025C   B2C043E0           STRH     R12,[R3], #-2
   \   00000260   012042E2           SUB      R2,R2,#+1
   \                     ??GL_FillPolygon_16:
   \   00000264   000052E3           CMP      R2,#+0
   \   00000268   0300000A           BEQ      ??GL_FillPolygon_18
   \   0000026C   F2C053E1           LDRSH    R12,[R3, #-2]
   \   00000270   0CE0A0E1           MOV      LR,R12
   \   00000274   00005EE1           CMP      LR,R0
   \   00000278   F7FFFFAA           BGE      ??GL_FillPolygon_17
   \                     ??GL_FillPolygon_18:
   \   0000027C   822088E0           ADD      R2,R8,R2, LSL #+1
   \   00000280   B000C2E1           STRH     R0,[R2, #+0]
   \   00000284   010081E2           ADD      R0,R1,#+1
   \   00000288   180088E5           STR      R0,[R8, #+24]
    283                    }
    284                  }
    285                }
    286              }
   \                     ??GL_FillPolygon_11:
   \   0000028C   18009DE5           LDR      R0,[SP, #+24]
   \   00000290   019089E2           ADD      R9,R9,#+1
   \   00000294   04A08AE2           ADD      R10,R10,#+4
   \   00000298   000059E1           CMP      R9,R0
   \   0000029C   A6FFFFBA           BLT      ??GL_FillPolygon_8
    287              _Flush(xOff, y + yOff);
   \                     ??GL_FillPolygon_7:
   \   000002A0   04109DE5           LDR      R1,[SP, #+4]
   \   000002A4   0000A0E3           MOV      R0,#+0
   \   000002A8   10108DE5           STR      R1,[SP, #+16]
   \   000002AC   181098E5           LDR      R1,[R8, #+24]
   \   000002B0   0090A0E3           MOV      R9,#+0
   \   000002B4   00A0A0E3           MOV      R10,#+0
   \   000002B8   08808DE5           STR      R8,[SP, #+8]
   \   000002BC   010051E3           CMP      R1,#+1
   \   000002C0   080000AA           BGE      ??GL_FillPolygon_19
   \                     ??GL_FillPolygon_20:
   \   000002C4   04009DE5           LDR      R0,[SP, #+4]
   \   000002C8   016086E2           ADD      R6,R6,#+1
   \   000002CC   010080E2           ADD      R0,R0,#+1
   \   000002D0   04008DE5           STR      R0,[SP, #+4]
   \   000002D4   00009DE5           LDR      R0,[SP, #+0]
   \   000002D8   060050E1           CMP      R0,R6
   \   000002DC   8FFFFFAA           BGE      ??GL_FillPolygon_6
    288            }  
    289          }
   \                     ??GL_FillPolygon_5:
   \   000002E0   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000002E4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GL_FillPolygon_19:
   \   000002E8   08109DE5           LDR      R1,[SP, #+8]
   \   000002EC   F0B0D1E1           LDRSH    R11,[R1, #+0]
   \   000002F0   0910B0E1           MOVS     R1,R9
   \   000002F4   0600000A           BEQ      ??GL_FillPolygon_21
   \   000002F8   ........           LDR      R3,??DataTable1
   \   000002FC   05208BE0           ADD      R2,R11,R5
   \   00000300   943093E5           LDR      R3,[R3, #+148]
   \   00000304   10109DE5           LDR      R1,[SP, #+16]
   \   00000308   050080E0           ADD      R0,R0,R5
   \   0000030C   003093E5           LDR      R3,[R3, #+0]
   \   00000310   33FF2FE1           BLX      R3
   \                     ??GL_FillPolygon_21:
   \   00000314   08109DE5           LDR      R1,[SP, #+8]
   \   00000318   01A08AE2           ADD      R10,R10,#+1
   \   0000031C   021081E2           ADD      R1,R1,#+2
   \   00000320   08108DE5           STR      R1,[SP, #+8]
   \   00000324   181098E5           LDR      R1,[R8, #+24]
   \   00000328   019029E2           EOR      R9,R9,#0x1
   \   0000032C   0B00A0E1           MOV      R0,R11
   \   00000330   01005AE1           CMP      R10,R1
   \   00000334   EBFFFFBA           BLT      ??GL_FillPolygon_19
   \   00000338   E1FFFFEA           B        ??GL_FillPolygon_20
    290          
    291          /*********************************************************************
    292          *
    293          *       GUI_FillPolygon
    294          */

   \                                 In section .text, align 4, keep-with-next
    295          void GUI_FillPolygon(const GUI_POINT* pPoints, int NumPoints, int x0, int y0) {
   \                     GUI_FillPolygon:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0380A0E1           MOV      R8,R3
    296            GUI_DEVICE * pDevice;
    297            void (* pfFillPolygon)(GUI_DEVICE *, const GUI_POINT *, int, int, int);
    298            
    299            GUI_LOCK();
   \   00000018   ........           BL       GUI_Lock
    300            #if (GUI_WINSUPPORT)
    301              WM_ADDORG(x0, y0);
   \   0000001C   ........           LDR      R6,??DataTable1
   \   00000020   400096E5           LDR      R0,[R6, #+64]
   \   00000024   077080E0           ADD      R7,R0,R7
   \   00000028   440096E5           LDR      R0,[R6, #+68]
   \   0000002C   088080E0           ADD      R8,R0,R8
    302              WM_ITERATE_START(NULL); {
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   ........           BL       WM__InitIVRSearch
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1A00000A           BEQ      ??GUI_FillPolygon_0
    303            #endif
    304            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
   \                     ??GUI_FillPolygon_1:
   \   00000040   1100D6E5           LDRB     R0,[R6, #+17]
    305            pfFillPolygon = (void (*)(GUI_DEVICE *, const GUI_POINT *, int, int, int))pDevice->pDeviceAPI->pfGetDevFunc(&pDevice, LCD_DEVFUNC_FILLPOLY);
   \   00000044   1110A0E3           MOV      R1,#+17
   \   00000048   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000004C   480090E5           LDR      R0,[R0, #+72]
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   04209DE5           LDR      R2,[SP, #+4]
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   0C2092E5           LDR      R2,[R2, #+12]
   \   00000060   242092E5           LDR      R2,[R2, #+36]
   \   00000064   32FF2FE1           BLX      R2
   \   00000068   00C0B0E1           MOVS     R12,R0
    306            if (pfFillPolygon) {
   \   0000006C   0600000A           BEQ      ??GUI_FillPolygon_2
    307              pfFillPolygon(pDevice, pPoints, NumPoints, x0, y0);
   \   00000070   00808DE5           STR      R8,[SP, #+0]
   \   00000074   0730A0E1           MOV      R3,R7
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   04009DE5           LDR      R0,[SP, #+4]
   \   00000084   3CFF2FE1           BLX      R12
   \   00000088   040000EA           B        ??GUI_FillPolygon_3
    308            } else {
    309              GL_FillPolygon(pPoints, NumPoints, x0, y0);
   \                     ??GUI_FillPolygon_2:
   \   0000008C   0830A0E1           MOV      R3,R8
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GL_FillPolygon
    310            }
    311            #if (GUI_WINSUPPORT)
    312              } WM_ITERATE_END();
   \                     ??GUI_FillPolygon_3:
   \   000000A0   ........           BL       WM__GetNextIVR
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   E4FFFF1A           BNE      ??GUI_FillPolygon_1
    313            #endif
    314            GUI_UNLOCK();
   \                     ??GUI_FillPolygon_0:
   \   000000AC   ........           BL       GUI_Unlock
    315          }
   \   000000B0   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000B4   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     _aX
    316          
    317          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     GL_FillPolygon       64
     GUI_FillPolygon      32
     _CheckYInterSect     12


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     _aX                28
     GL_FP_Cnt
     _CheckYInterSect  144
     GL_FillPolygon    828
     GUI_FillPolygon   184
     ??DataTable1        4
     ??DataTable1_1      4

 
    28 bytes in section .bss
 1 164 bytes in section .text
 
 1 164 bytes of CODE memory
    28 bytes of DATA memory

Errors: none
Warnings: none
