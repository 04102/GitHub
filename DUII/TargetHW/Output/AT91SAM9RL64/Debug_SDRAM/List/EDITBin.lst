###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:59 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\EDITBin.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\EDITBin.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\ED #
#                    ITBin.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\EDI #
#                    TBin.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\EDITBin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : EDITBin.c
     19          Purpose     : Support for binary editing for widgets
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "EDIT_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *             Helpers
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       _BinChar2Int
     39          */
     40          static int _BinChar2Int(int Char) {
     41            if ((Char >= '0') && (Char <= '1'))
     42              return Char - '0';
     43            return -1;
     44          }
     45          
     46          /*********************************************************************
     47          *
     48          *       _GetNumDigits
     49          */
     50          static int _GetNumDigits(U32 Value) {
     51            int Ret;
     52            for (Ret = 0; Value; Value >>= 1, Ret++);
     53            return Ret;
     54          }
     55          
     56          /*********************************************************************
     57          *
     58          *       _UpdateBuffer
     59          */

   \                                 In section .text, align 4, keep-with-next
     60          static void _UpdateBuffer(EDIT_Handle hObj) {
   \                     _UpdateBuffer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
     61            char * s;
     62            EDIT_Obj * pObj;
     63            pObj = EDIT_LOCK_H(hObj);
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   0040A0E1           MOV      R4,R0
     64            s = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000010   340094E5           LDR      R0,[R4, #+52]
   \   00000014   ........           BL       GUI_ALLOC_LockH
   \   00000018   00008DE5           STR      R0,[SP, #+0]
     65            GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
   \   0000001C   F813D4E1           LDRSH    R1,[R4, #+56]
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   480094E5           LDR      R0,[R4, #+72]
   \   00000028   FF1001E2           AND      R1,R1,#0xFF
   \   0000002C   ........           BL       GUI_AddBin
     66            GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     67            GUI_UNLOCK_H(s);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     68          }
   \   00000038   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
     69          
     70          /*********************************************************************
     71          *
     72          *       _EditBin
     73          */
     74          static void _EditBin(U8 Bit, EDIT_Obj * pObj, EDIT_Handle hObj) {
     75            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
     76            U32 AndMask = ~(1   << Pos);
     77            U32 OrMask  =   Bit << Pos;
     78            I32 Result  = pObj->CurrentValue & AndMask;
     79            Result     |= OrMask;
     80            EDIT_SetValue(hObj, Result);
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       _GetCurrentBit
     86          */
     87          static U8 _GetCurrentBit(EDIT_Obj * pObj) {
     88            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
     89            U32 AndMask = 1 << Pos;
     90            U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
     91            return Bit;
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *             Handle input
     97          *
     98          **********************************************************************
     99          */
    100          /*********************************************************************
    101          *
    102          *       _AddKeyBin
    103          */

   \                                 In section .text, align 4, keep-with-next
    104          static void _AddKeyBin(EDIT_Handle hObj, int Key) {
   \                     _AddKeyBin:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    105            EDIT_Obj * pObj;
    106            pObj = EDIT_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050B0E1           MOVS     R5,R0
    107            if (pObj) {
   \   00000018   4D00000A           BEQ      ??_AddKeyBin_1
    108              switch (Key) {
   \   0000001C   100046E2           SUB      R0,R6,#+16
   \   00000020   030050E3           CMP      R0,#+3
   \   00000024   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_AddKeyBin_0:
   \   00000028   2700008A           BHI      ??_AddKeyBin_2
   \   0000002C   230000EA           B        ??_AddKeyBin_3
   \   00000030   010000EA           B        ??_AddKeyBin_4
   \   00000034   350000EA           B        ??_AddKeyBin_5
   \   00000038   120000EA           B        ??_AddKeyBin_6
    109              case GUI_KEY_UP:
    110                {
    111                  int Bit = _GetCurrentBit(pObj) + 1;
   \                     ??_AddKeyBin_4:
   \   0000003C   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000040   4C0095E5           LDR      R0,[R5, #+76]
   \   00000044   482095E5           LDR      R2,[R5, #+72]
   \   00000048   000041E0           SUB      R0,R1,R0
   \   0000004C   010040E2           SUB      R0,R0,#+1
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   1110A0E1           LSL      R1,R1,R0
   \   00000058   023001E0           AND      R3,R1,R2
   \   0000005C   3330A0E1           LSR      R3,R3,R0
   \   00000060   FF3003E2           AND      R3,R3,#0xFF
   \   00000064   013083E2           ADD      R3,R3,#+1
    112                  if (Bit > 1) {
   \   00000068   020053E3           CMP      R3,#+2
    113                    Bit = 0;
   \   0000006C   0030A0A3           MOVGE    R3,#+0
    114                  }
    115                  _EditBin(Bit, pObj, hObj);
   \                     ??_AddKeyBin_7:
   \   00000070   0110C2E1           BIC      R1,R2,R1
   \   00000074   FF3003E2           AND      R3,R3,#0xFF
   \   00000078   131081E1           ORR      R1,R1,R3, LSL R0
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       EDIT_SetValue
    116                }
    117                break;
   \   00000084   250000EA           B        ??_AddKeyBin_8
    118              case GUI_KEY_DOWN:
    119                {
    120                  int Bit = _GetCurrentBit(pObj) - 1;
   \                     ??_AddKeyBin_6:
   \   00000088   F813D5E1           LDRSH    R1,[R5, #+56]
   \   0000008C   4C0095E5           LDR      R0,[R5, #+76]
   \   00000090   482095E5           LDR      R2,[R5, #+72]
   \   00000094   000041E0           SUB      R0,R1,R0
   \   00000098   010040E2           SUB      R0,R0,#+1
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   1110A0E1           LSL      R1,R1,R0
   \   000000A4   023001E0           AND      R3,R1,R2
   \   000000A8   3330A0E1           LSR      R3,R3,R0
   \   000000AC   FF3003E2           AND      R3,R3,#0xFF
   \   000000B0   013053E2           SUBS     R3,R3,#+1
    121                  if (Bit < 0) {
   \   000000B4   EDFFFF5A           BPL      ??_AddKeyBin_7
    122                    Bit = 1;
   \   000000B8   0130A0E3           MOV      R3,#+1
    123                  }
    124                  _EditBin(Bit, pObj, hObj);
   \   000000BC   EBFFFFEA           B        ??_AddKeyBin_7
    125                }
    126                break;
    127              case GUI_KEY_RIGHT:
    128                EDIT__SetCursorPos(hObj, pObj->CursorPos + 1);
    129                break;
    130              case GUI_KEY_LEFT:
    131                EDIT__SetCursorPos(hObj, pObj->CursorPos - 1);
   \                     ??_AddKeyBin_3:
   \   000000C0   4C0095E5           LDR      R0,[R5, #+76]
   \   000000C4   011040E2           SUB      R1,R0,#+1
   \   000000C8   120000EA           B        ??_AddKeyBin_9
    132                break;
    133              default:
    134                {
    135                  int Bit = _BinChar2Int(Key);
   \                     ??_AddKeyBin_2:
   \   000000CC   300046E2           SUB      R0,R6,#+48
   \   000000D0   020050E3           CMP      R0,#+2
   \   000000D4   1100002A           BCS      ??_AddKeyBin_8
   \   000000D8   300056E2           SUBS     R0,R6,#+48
    136                  if (Bit >= 0) {
   \   000000DC   0F00004A           BMI      ??_AddKeyBin_8
    137                    _EditBin(Bit, pObj, hObj);
   \   000000E0   F813D5E1           LDRSH    R1,[R5, #+56]
   \   000000E4   4C2095E5           LDR      R2,[R5, #+76]
   \   000000E8   0130A0E3           MOV      R3,#+1
   \   000000EC   021041E0           SUB      R1,R1,R2
   \   000000F0   011041E2           SUB      R1,R1,#+1
   \   000000F4   482095E5           LDR      R2,[R5, #+72]
   \   000000F8   1331E0E1           MVN      R3,R3, LSL R1
   \   000000FC   022003E0           AND      R2,R3,R2
   \   00000100   FF0000E2           AND      R0,R0,#0xFF
   \   00000104   101182E1           ORR      R1,R2,R0, LSL R1
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       EDIT_SetValue
    138                    EDIT__SetCursorPos(hObj, pObj->CursorPos + 1);
   \                     ??_AddKeyBin_5:
   \   00000110   4C0095E5           LDR      R0,[R5, #+76]
   \   00000114   011080E2           ADD      R1,R0,#+1
   \                     ??_AddKeyBin_9:
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       EDIT__SetCursorPos
    139                  }
    140                }
    141                break;
    142              }
    143              _UpdateBuffer(hObj);
   \                     ??_AddKeyBin_8:
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       GUI_ALLOC_LockH
   \   00000128   0040A0E1           MOV      R4,R0
   \   0000012C   340094E5           LDR      R0,[R4, #+52]
   \   00000130   ........           BL       GUI_ALLOC_LockH
   \   00000134   00008DE5           STR      R0,[SP, #+0]
   \   00000138   F813D4E1           LDRSH    R1,[R4, #+56]
   \   0000013C   0D20A0E1           MOV      R2,SP
   \   00000140   480094E5           LDR      R0,[R4, #+72]
   \   00000144   FF1001E2           AND      R1,R1,#0xFF
   \   00000148   ........           BL       GUI_AddBin
   \   0000014C   ........           BL       GUI_ALLOC_UnlockH
   \   00000150   ........           BL       GUI_ALLOC_UnlockH
    144            }
    145            GUI_UNLOCK_H(pObj);
   \                     ??_AddKeyBin_1:
   \   00000154   ........           BL       GUI_ALLOC_UnlockH
    146          }
   \   00000158   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000015C   7080BDE8           POP      {R4-R6,PC}       ;; return
    147          
    148          /*********************************************************************
    149          *
    150          *             Exported routines
    151          *
    152          **********************************************************************
    153          */
    154          /*********************************************************************
    155          *
    156          *       EDIT_SetBinMode
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
   \                     EDIT_SetBinMode:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
    159            EDIT_Obj * pObj;
    160            int MaxLen, MaxLenOld;
    161            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    162            if (hEdit) {
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   2E00000A           BEQ      ??EDIT_SetBinMode_0
    163              pObj = EDIT_LOCK_H(hEdit);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
    164              pObj->pfAddKeyEx    = _AddKeyBin;
   \   0000002C   ........           LDR      R1,??DataTable0
   \   00000030   581080E5           STR      R1,[R0, #+88]
    165              pObj->pfUpdateBuffer = _UpdateBuffer;
   \   00000034   ........           LDR      R1,??DataTable0_1
   \   00000038   5C1080E5           STR      R1,[R0, #+92]
    166              pObj->CurrentValue = Value;
   \   0000003C   487080E5           STR      R7,[R0, #+72]
    167              pObj->CursorPos = 0;
   \   00000040   0070A0E3           MOV      R7,#+0
   \   00000044   4C7080E5           STR      R7,[R0, #+76]
    168              MaxLen = pObj->MaxLen;
   \   00000048   F883D0E1           LDRSH    R8,[R0, #+56]
    169              if (MaxLen <= 0 ) {
   \   0000004C   010058E3           CMP      R8,#+1
   \   00000050   060000AA           BGE      ??EDIT_SetBinMode_1
    170                MaxLen = _GetNumDigits(Max);
   \   00000054   0610B0E1           MOVS     R1,R6
   \   00000058   0780A0E1           MOV      R8,R7
   \   0000005C   0300000A           BEQ      ??EDIT_SetBinMode_1
   \                     ??EDIT_SetBinMode_2:
   \   00000060   A110A0E1           LSR      R1,R1,#+1
   \   00000064   018088E2           ADD      R8,R8,#+1
   \   00000068   000051E3           CMP      R1,#+0
   \   0000006C   FBFFFF1A           BNE      ??EDIT_SetBinMode_2
    171              }
    172              if (MaxLen > 32) {
    173                MaxLen = 32;
    174              }
    175              pObj->Min = Min;
   \                     ??EDIT_SetBinMode_1:
   \   00000070   3C5080E5           STR      R5,[R0, #+60]
    176              pObj->Max = Max;
   \   00000074   406080E5           STR      R6,[R0, #+64]
    177              pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   210058E3           CMP      R8,#+33
   \   00000080   5410C0E5           STRB     R1,[R0, #+84]
   \   00000084   2080A0A3           MOVGE    R8,#+32
    178              MaxLenOld = pObj->MaxLen;
   \   00000088   F853D0E1           LDRSH    R5,[R0, #+56]
    179              GUI_UNLOCK_H(pObj);
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
    180              if (MaxLen != MaxLenOld) {
   \   00000090   050058E1           CMP      R8,R5
   \   00000094   0200000A           BEQ      ??EDIT_SetBinMode_3
    181                EDIT_SetMaxLen(hEdit, MaxLen);
   \   00000098   0810A0E1           MOV      R1,R8
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       EDIT_SetMaxLen
    182              }
    183              _UpdateBuffer(hEdit);
   \                     ??EDIT_SetBinMode_3:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       GUI_ALLOC_LockH
   \   000000AC   0050A0E1           MOV      R5,R0
   \   000000B0   340095E5           LDR      R0,[R5, #+52]
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   00008DE5           STR      R0,[SP, #+0]
   \   000000BC   F813D5E1           LDRSH    R1,[R5, #+56]
   \   000000C0   0D20A0E1           MOV      R2,SP
   \   000000C4   480095E5           LDR      R0,[R5, #+72]
   \   000000C8   FF1001E2           AND      R1,R1,#0xFF
   \   000000CC   ........           BL       GUI_AddBin
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   \   000000D4   ........           BL       GUI_ALLOC_UnlockH
    184              WM_Invalidate(hEdit);
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       WM_InvalidateWindow
    185            }
    186            WM_UNLOCK();
   \                     ??EDIT_SetBinMode_0:
   \   000000E0   ........           BL       GUI_Unlock
    187          }
   \   000000E4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     _AddKeyBin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     _UpdateBuffer
    188          
    189          #else  /* avoid empty object files */
    190          
    191          void EditBin_C(void);
    192          void EditBin_C(void){}
    193          
    194          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     EDIT_SetBinMode     32
     _AddKeyBin          24
     _UpdateBuffer       16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     _UpdateBuffer     64
     _AddKeyBin       352
     EDIT_SetBinMode  236
     ??DataTable0       4
     ??DataTable0_1     4

 
 660 bytes in section .text
 
 660 bytes of CODE memory

Errors: none
Warnings: none
