###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:09 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__SetPixelAlpha.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__SetPixelAlpha.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__SetPixelAlpha.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __SetPixelAlpha.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__SetPixelAlpha.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__SetPixelAlpha.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       GUI__MixColors
     28          */

   \                                 In section .text, align 4, keep-with-next
     29          LCD_COLOR GUI__MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens) {
     30            #if 1
     31          
     32            U32 r, g, b, a;
     33            U8 IntensBk;
     34          
     35            if ((BkColor & 0xFF000000) != 0xFF000000) {
   \                     GUI__MixColors:
   \   00000000   FF3401E2           AND      R3,R1,#0xFF000000
   \   00000004   FF0453E3           CMP      R3,#-16777216
   \   00000008   0000001A           BNE      ??GUI__MixColors_0
     36              //
     37              // Calculate Color separations for FgColor first
     38              //
     39              r = (Color & 0x000000ff) * Intens;
     40              g = (Color & 0x0000ff00) * Intens;
     41              b = (Color & 0x00ff0000) * Intens;
     42              a = ((Color & 0xff000000) >> 24) * Intens;
     43              //
     44              // Add Color separations for BkColor
     45              //
     46              IntensBk = 255 - Intens;
   \   0000000C   1EFF2FE1           BX       LR
   \                     ??GUI__MixColors_0:
   \   00000010   10402DE9           PUSH     {R4,LR}
   \   00000014   FF3062E2           RSB      R3,R2,#+255
   \   00000018   FF3003E2           AND      R3,R3,#0xFF
     47              r += (BkColor & 0x000000ff) * IntensBk;
     48              g += (BkColor & 0x0000ff00) * IntensBk;
     49              b += (BkColor & 0x00ff0000) * IntensBk;
     50              a += ((BkColor & 0xff000000) >> 24) * IntensBk;
     51              r = (r >> 8) & 0x000000ff;
     52              g = (g >> 8) & 0x0000ff00;
     53              b = (b >> 8) & 0x00ff0000;
     54              a = (a << (24 - 8)) & 0xff000000;
     55              Color = r | g | b | a;
   \   0000001C   FFE001E2           AND      LR,R1,#0xFF
   \   00000020   830E6EE1           SMULBB   LR,R3,LR
   \   00000024   FFC000E2           AND      R12,R0,#0xFF
   \   00000028   82EC0CE1           SMLABB   R12,R2,R12,LR
   \   0000002C   FFE0A0E3           MOV      LR,#+255
   \   00000030   FF4C01E2           AND      R4,R1,#0xFF00
   \   00000034   2CC40EE0           AND      R12,LR,R12, LSR #+8
   \   00000038   930404E0           MUL      R4,R3,R4
   \   0000003C   FFEC00E2           AND      LR,R0,#0xFF00
   \   00000040   924E2EE0           MLA      LR,R2,LR,R4
   \   00000044   FF4CA0E3           MOV      R4,#+65280
   \   00000048   2EE404E0           AND      LR,R4,LR, LSR #+8
   \   0000004C   FF4801E2           AND      R4,R1,#0xFF0000
   \   00000050   0CC08EE1           ORR      R12,LR,R12
   \   00000054   930404E0           MUL      R4,R3,R4
   \   00000058   FFE800E2           AND      LR,R0,#0xFF0000
   \   0000005C   211CA0E1           LSR      R1,R1,#+24
   \   00000060   924E2EE0           MLA      LR,R2,LR,R4
   \   00000064   830161E1           SMULBB   R1,R3,R1
   \   00000068   200CA0E1           LSR      R0,R0,#+24
   \   0000006C   FF48A0E3           MOV      R4,#+16711680
   \   00000070   821000E1           SMLABB   R0,R2,R0,R1
   \   00000074   2EE404E0           AND      LR,R4,LR, LSR #+8
   \   00000078   FF14A0E3           MOV      R1,#-16777216
   \   0000007C   0CC08EE1           ORR      R12,LR,R12
   \   00000080   000801E0           AND      R0,R1,R0, LSL #+16
   \   00000084   0C0080E1           ORR      R0,R0,R12
     56            }
     57            return Color;
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
     58          
     59            #else
     60          
     61            U32 r, g, b;
     62            U8 IntensBk;
     63          
     64            //
     65            // Calculate Color separations for FgColor first
     66            //
     67            r = (Color & 0x0000ff) * Intens;
     68            g = (Color & 0x00ff00) * Intens;
     69            b = (Color & 0xff0000) * Intens;
     70            //
     71            // Add Color separations for BkColor
     72            //
     73            IntensBk = 255 - Intens;
     74            //Intens = 255 - Intens;
     75            r += (BkColor & 0x0000ff) * IntensBk;
     76            g += (BkColor & 0x00ff00) * IntensBk;
     77            b += (BkColor & 0xff0000) * IntensBk;
     78            r = (r >> 8) & 0x0000ff;
     79            g = (g >> 8) & 0x00ff00;
     80            b = (b >> 8) & 0xff0000;
     81            #if 0
     82            {
     83              U8 Alpha;
     84          
     85              Color = r + g + b;
     86              Alpha = BkColor >> 24;
     87              if (Alpha == 0xFF) {
     88                Color |= (U32)IntensBk << 24;
     89              } else {
     90                Color |= (U32)((Alpha + IntensBk) >> 1) << 24;
     91              }
     92            }
     93            #else
     94              Color = r | g | b | (BkColor & 0xFF000000);
     95            #endif
     96            return Color;
     97          
     98            #endif
     99          }
    100          
    101          /*********************************************************************
    102          *
    103          *       GUI__SetPixelAlpha
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          void GUI__SetPixelAlpha(int x, int y, U8 Alpha, LCD_COLOR Color) {
   \                     GUI__SetPixelAlpha:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    106            LCD_COLOR BkColor;
    107            LCD_PIXELINDEX Index;
    108          
    109            if ((y >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \   00000004   ........           LDR      R8,??DataTable0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   FA00D8E1           LDRSH    R0,[R8, #+10]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   000055E1           CMP      R5,R0
   \   0000001C   FE00D8A1           LDRSHGE  R0,[R8, #+14]
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   050050A1           CMPGE    R0,R5
    110              if ((x >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
   \   00000028   F800D8A1           LDRSHGE  R0,[R8, #+8]
   \   0000002C   000054A1           CMPGE    R4,R0
   \   00000030   FC00D8A1           LDRSHGE  R0,[R8, #+12]
   \   00000034   040050A1           CMPGE    R0,R4
   \   00000038   2C0000BA           BLT      ??GUI__SetPixelAlpha_0
    111                BkColor = LCD_GetPixelColor(x, y);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       LCD_GetPixelColor
    112                Color   = GUI__MixColors(Color, BkColor, Alpha);
   \   00000044   FF1400E2           AND      R1,R0,#0xFF000000
   \   00000048   FF0451E3           CMP      R1,#-16777216
   \   0000004C   1C00000A           BEQ      ??GUI__SetPixelAlpha_1
   \   00000050   FF1066E2           RSB      R1,R6,#+255
   \   00000054   FF1001E2           AND      R1,R1,#0xFF
   \   00000058   FF3000E2           AND      R3,R0,#0xFF
   \   0000005C   810363E1           SMULBB   R3,R1,R3
   \   00000060   FF2007E2           AND      R2,R7,#0xFF
   \   00000064   863202E1           SMLABB   R2,R6,R2,R3
   \   00000068   FF30A0E3           MOV      R3,#+255
   \   0000006C   FFCC00E2           AND      R12,R0,#0xFF00
   \   00000070   222403E0           AND      R2,R3,R2, LSR #+8
   \   00000074   910C0CE0           MUL      R12,R1,R12
   \   00000078   FF3C07E2           AND      R3,R7,#0xFF00
   \   0000007C   96C323E0           MLA      R3,R6,R3,R12
   \   00000080   FFCCA0E3           MOV      R12,#+65280
   \   00000084   23340CE0           AND      R3,R12,R3, LSR #+8
   \   00000088   FFC800E2           AND      R12,R0,#0xFF0000
   \   0000008C   022083E1           ORR      R2,R3,R2
   \   00000090   910C0CE0           MUL      R12,R1,R12
   \   00000094   FF3807E2           AND      R3,R7,#0xFF0000
   \   00000098   96C323E0           MLA      R3,R6,R3,R12
   \   0000009C   FFC8A0E3           MOV      R12,#+16711680
   \   000000A0   23340CE0           AND      R3,R12,R3, LSR #+8
   \   000000A4   200CA0E1           LSR      R0,R0,#+24
   \   000000A8   022083E1           ORR      R2,R3,R2
   \   000000AC   810060E1           SMULBB   R0,R1,R0
   \   000000B0   273CA0E1           LSR      R3,R7,#+24
   \   000000B4   860300E1           SMLABB   R0,R6,R3,R0
   \   000000B8   FF14A0E3           MOV      R1,#-16777216
   \   000000BC   000801E0           AND      R0,R1,R0, LSL #+16
   \   000000C0   027080E1           ORR      R7,R0,R2
    113                Index   = LCD_Color2Index(Color);
   \                     ??GUI__SetPixelAlpha_1:
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   ........           BL       LCD_Color2Index
   \   000000CC   0030A0E1           MOV      R3,R0
   \   000000D0   1100D8E5           LDRB     R0,[R8, #+17]
   \   000000D4   0520A0E1           MOV      R2,R5
   \   000000D8   0410A0E1           MOV      R1,R4
   \   000000DC   000188E0           ADD      R0,R8,R0, LSL #+2
   \   000000E0   480090E5           LDR      R0,[R0, #+72]
   \   000000E4   0CC090E5           LDR      R12,[R0, #+12]
   \   000000E8   18C09CE5           LDR      R12,[R12, #+24]
    114                LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y, Index);
   \   000000EC   3CFF2FE1           BLX      R12
    115              }
    116            }
    117          }
   \                     ??GUI__SetPixelAlpha_0:
   \   000000F0   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     GUI_Context
    118          
    119          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GUI__MixColors          8
     GUI__SetPixelAlpha     24


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     GUI__MixColors      140
     GUI__SetPixelAlpha  244
     ??DataTable0          4

 
 388 bytes in section .text
 
 388 bytes of CODE memory

Errors: none
Warnings: none
