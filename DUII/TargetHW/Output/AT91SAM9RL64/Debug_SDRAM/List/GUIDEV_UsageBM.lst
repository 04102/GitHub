###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:31 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_UsageBM.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_UsageBM.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_UsageBM.lst                                         #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_UsageBM.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_UsageBM.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_UsageBM.C
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          /* Memory device capabilities are compiled only if support for them is enabled.*/ 
     29          #if GUI_SUPPORT_MEMDEV
     30          
     31          /*********************************************************************
     32          *
     33          *       GUI_USAGE_BM structure
     34          *
     35          **********************************************************************
     36          */
     37          
     38          typedef struct {
     39            GUI_USAGE Public;
     40            struct {
     41              int BytesPerLine;
     42            } Private;
     43          } GUI_USAGE_BM;
     44          
     45          /*********************************************************************
     46          *
     47          *       static code
     48          *
     49          **********************************************************************
     50          */
     51          /*********************************************************************
     52          *
     53          *       GUI_USAGE_BM_AddPixel
     54          */

   \                                 In section .text, align 4, keep-with-next
     55          static void GUI_USAGE_BM_AddPixel(GUI_USAGE* p, int x, int y) {
     56            U8* pData;
     57            GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
     58            #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
     59              if ((x >= pThis->Public.x0 + pThis->Public.XSize) | (x < pThis->Public.x0)
     60                | (y >= pThis->Public.y0 + pThis->Public.YSize) | (y < pThis->Public.y0))
     61              {
     62                GUI_DEBUG_ERROROUT2("GUI_USAGE_BM_AddPixel: parameters out of bounds",x,y);
     63              }
     64            #endif
     65            x -= pThis->Public.x0;
   \                     GUI_USAGE_BM_AddPixel:
   \   00000000   F030D0E1           LDRSH    R3,[R0, #+0]
   \   00000004   031041E0           SUB      R1,R1,R3
     66            pData =  (U8*)(pThis+1); 
     67            pData += (y-pThis->Public.y0) * pThis->Private.BytesPerLine;
     68            pData += x>>3;
   \   00000008   F230D0E1           LDRSH    R3,[R0, #+2]
   \   0000000C   032042E0           SUB      R2,R2,R3
   \   00000010   103090E5           LDR      R3,[R0, #+16]
   \   00000014   930220E0           MLA      R0,R3,R2,R0
     69            *pData|= 0x80>>(x&7);
   \   00000018   8030A0E3           MOV      R3,#+128
   \   0000001C   C10180E0           ADD      R0,R0,R1, ASR #+3
   \   00000020   1420F0E5           LDRB     R2,[R0, #+20]!
   \   00000024   071001E2           AND      R1,R1,#0x7
   \   00000028   331182E1           ORR      R1,R2,R3, LSR R1
   \   0000002C   0010C0E5           STRB     R1,[R0, #+0]
     70          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
     71          
     72          /*********************************************************************
     73          *
     74          *       GUI_USAGE_BM_AddHLine
     75          */

   \                                 In section .text, align 4, keep-with-next
     76          static void GUI_USAGE_BM_AddHLine(GUI_USAGE* p, int x, int y, int len) {
   \                     GUI_USAGE_BM_AddHLine:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     77          #if 0   /* Enable for the slower, but smaller version ... xxx*/
     78            while (len-- >0)
     79              GUI_USAGE_BM_AddPixel(h, x++,y);
     80          #else
     81            U8* pData;
     82            GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
     83            /* Asserts */
     84            GUI_DEBUG_ERROROUT3_IF( x<pThis->Public.x0, "GUIDEV.c: MarkPixels: negative x offset, Act= %d, Border= %d, Clip= %d"
     85                              ,x, pThis->Public.x0, GUI_Context.ClipRect.x0);
     86            /* Calculate pointers */
     87            x -= pThis->Public.x0;
     88            pData =  (U8*)(pThis+1); 
     89            pData += (y-pThis->Public.y0) * pThis->Private.BytesPerLine;
     90            pData += x>>3;
   \   00000004   F2E0D0E1           LDRSH    LR,[R0, #+2]
   \   00000008   F0C0D0E1           LDRSH    R12,[R0, #+0]
   \   0000000C   0E2042E0           SUB      R2,R2,LR
   \   00000010   10E090E5           LDR      LR,[R0, #+16]
   \   00000014   0C1041E0           SUB      R1,R1,R12
   \   00000018   9E0220E0           MLA      R0,LR,R2,R0
   \   0000001C   C1C1A0E1           ASR      R12,R1,#+3
   \   00000020   00008CE0           ADD      R0,R12,R0
   \   00000024   144080E2           ADD      R4,R0,#+20
     91            /* Set bits */
     92            {  
     93              int x1 = x+len-1;   /* last pixel */
   \   00000028   010083E0           ADD      R0,R3,R1
   \   0000002C   010040E2           SUB      R0,R0,#+1
     94              int NumBytes = (x1>>3) - (x>>3);
   \   00000030   C0516CE0           RSB      R5,R12,R0, ASR #+3
     95              U8 Mask0 = 0xff >> (x&7);
     96              U8 Mask1 = 0xff << (7-(x1&7));
   \   00000034   070000E2           AND      R0,R0,#0x7
   \   00000038   FF20A0E3           MOV      R2,#+255
   \   0000003C   070060E2           RSB      R0,R0,#+7
   \   00000040   071001E2           AND      R1,R1,#0x7
   \   00000044   1260A0E1           LSL      R6,R2,R0
   \   00000048   3211A0E1           LSR      R1,R2,R1
   \   0000004C   FF6006E2           AND      R6,R6,#0xFF
     97              if (NumBytes ==0) {
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0300001A           BNE      ??GUI_USAGE_BM_AddHLine_0
     98                *pData |= (Mask0&Mask1);
   \   00000058   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000005C   011006E0           AND      R1,R6,R1
   \   00000060   000081E1           ORR      R0,R1,R0
   \   00000064   0E0000EA           B        ??GUI_USAGE_BM_AddHLine_1
     99              } else {
    100                *pData++ |= Mask0;               /* Mark first byte */
   \                     ??GUI_USAGE_BM_AddHLine_0:
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0020D0E5           LDRB     R2,[R0, #+0]
    101                /* Mark middle bytes */
    102                if (--NumBytes > 0) {
   \   00000070   015045E2           SUB      R5,R5,#+1
   \   00000074   014080E2           ADD      R4,R0,#+1
   \   00000078   021081E1           ORR      R1,R1,R2
   \   0000007C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000080   010055E3           CMP      R5,#+1
   \   00000084   040000BA           BLT      ??GUI_USAGE_BM_AddHLine_2
    103                  memset (pData, 0xff, NumBytes);
   \   00000088   FF20A0E3           MOV      R2,#+255
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       __aeabi_memset
    104                  pData += NumBytes;
   \   00000098   044085E0           ADD      R4,R5,R4
    105                }
    106                *pData |= Mask1;                 /* Mark last bytes */
   \                     ??GUI_USAGE_BM_AddHLine_2:
   \   0000009C   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000A0   000086E1           ORR      R0,R6,R0
   \                     ??GUI_USAGE_BM_AddHLine_1:
   \   000000A4   0000C4E5           STRB     R0,[R4, #+0]
    107              }
    108            }
    109          #endif
    110          }
   \   000000A8   7080BDE8           POP      {R4-R6,PC}       ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       GUI_USAGE_BM_Clear
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          static void GUI_USAGE_BM_Clear(GUI_USAGE* p) {
    117            GUI_USAGE_BM * pThis = (GUI_USAGE_BM*) p;
    118            memset (pThis+1, 0, pThis->Public.YSize * pThis->Private.BytesPerLine);
   \                     GUI_USAGE_BM_Clear:
   \   00000000   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000004   102090E5           LDR      R2,[R0, #+16]
   \   00000008   140080E2           ADD      R0,R0,#+20
   \   0000000C   920101E0           MUL      R1,R2,R1
   \   00000010   ........           B        __aeabi_memclr4  ;; tailcall
    119          }
    120          
    121          /*********************************************************************
    122          *
    123          *       GUI_USAGE_BM_GetNextDirty
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static int GUI_USAGE_BM_GetNextDirty(GUI_USAGE* p, int *pxOff, int yOff) {
   \                     GUI_USAGE_BM_GetNextDirty:
   \   00000000   10402DE9           PUSH     {R4,LR}
    126            int x = *pxOff;
    127            int xEnd;
    128            GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
    129            int xSize = pThis->Public.XSize;
    130            U8* pData = (U8*)(pThis+1);
    131            if (yOff >= pThis->Public.YSize) {
   \   00000004   F6E0D0E1           LDRSH    LR,[R0, #+6]
   \   00000008   003091E5           LDR      R3,[R1, #+0]
   \   0000000C   F4C0D0E1           LDRSH    R12,[R0, #+4]
   \   00000010   0E0052E1           CMP      R2,LR
   \   00000014   010000BA           BLT      ??GUI_USAGE_BM_GetNextDirty_0
    132              return 0;
   \                     ??GUI_USAGE_BM_GetNextDirty_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1080BDE8           POP      {R4,PC}
    133            }
    134            pData += yOff * pThis->Private.BytesPerLine;
    135            pData += (x>>3);
   \                     ??GUI_USAGE_BM_GetNextDirty_0:
   \   00000020   104090E5           LDR      R4,[R0, #+16]
   \   00000024   C3E1A0E1           ASR      LR,R3,#+3
   \   00000028   940220E0           MLA      R0,R4,R2,R0
    136            if (x>=xSize)
   \   0000002C   0C0053E1           CMP      R3,R12
   \   00000030   00008EE0           ADD      R0,LR,R0
   \   00000034   140080E2           ADD      R0,R0,#+20
   \   00000038   F6FFFFAA           BGE      ??GUI_USAGE_BM_GetNextDirty_1
    137              return 0;
    138            {
    139          /* Find first bit */
    140              int BytesLeft = ((xSize-1) >>3) - (x>>3);
   \   0000003C   01204CE2           SUB      R2,R12,#+1
    141              /* Check first byte */
    142              U8 Data = (*pData++) << (x&7);
   \   00000040   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000044   C2216EE0           RSB      R2,LR,R2, ASR #+3
   \   00000048   07E003E2           AND      LR,R3,#0x7
   \   0000004C   1CCEA0E1           LSL      R12,R12,LR
   \   00000050   050000EA           B        ??GUI_USAGE_BM_GetNextDirty_2
    143              while (Data == 0) {
    144                if (BytesLeft ==0)
   \                     ??GUI_USAGE_BM_GetNextDirty_3:
   \   00000054   000052E3           CMP      R2,#+0
   \   00000058   EEFFFF0A           BEQ      ??GUI_USAGE_BM_GetNextDirty_1
    145                  return 0;
    146                Data = *pData++;
    147                BytesLeft--;
    148                x= (x+8) & ~7;
   \   0000005C   083083E2           ADD      R3,R3,#+8
   \   00000060   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000064   012042E2           SUB      R2,R2,#+1
   \   00000068   0730C3E3           BIC      R3,R3,#0x7
    149              }
   \                     ??GUI_USAGE_BM_GetNextDirty_2:
   \   0000006C   FFC01CE2           ANDS     R12,R12,#0xFF
   \   00000070   F7FFFF0A           BEQ      ??GUI_USAGE_BM_GetNextDirty_3
    150              while ((Data&0x80) ==0) {
   \   00000074   80001CE3           TST      R12,#0x80
   \   00000078   0300001A           BNE      ??GUI_USAGE_BM_GetNextDirty_4
    151                Data<<=1;
   \                     ??GUI_USAGE_BM_GetNextDirty_5:
   \   0000007C   8CC0A0E1           LSL      R12,R12,#+1
    152                x++;
   \   00000080   013083E2           ADD      R3,R3,#+1
   \   00000084   80001CE3           TST      R12,#0x80
   \   00000088   FBFFFF0A           BEQ      ??GUI_USAGE_BM_GetNextDirty_5
    153              }
    154          /* Find last cleared byte */
    155              if (Data != 0xff) {   /* This line is simply a speed-opt and may be eliminated */
   \                     ??GUI_USAGE_BM_GetNextDirty_4:
   \   0000008C   FFC00CE2           AND      R12,R12,#0xFF
   \   00000090   FF005CE3           CMP      R12,#+255
   \   00000094   0700000A           BEQ      ??GUI_USAGE_BM_GetNextDirty_6
    156                xEnd =x;
   \   00000098   03E0A0E1           MOV      LR,R3
    157                while (Data&0x40) {
   \   0000009C   40001CE3           TST      R12,#0x40
   \   000000A0   0500000A           BEQ      ??GUI_USAGE_BM_GetNextDirty_7
    158                  Data<<=1;
   \                     ??GUI_USAGE_BM_GetNextDirty_8:
   \   000000A4   8CC0A0E1           LSL      R12,R12,#+1
    159                  xEnd++;
   \   000000A8   01E08EE2           ADD      LR,LR,#+1
   \   000000AC   40001CE3           TST      R12,#0x40
   \   000000B0   FBFFFF1A           BNE      ??GUI_USAGE_BM_GetNextDirty_8
   \   000000B4   000000EA           B        ??GUI_USAGE_BM_GetNextDirty_7
    160                }
    161              } else {
    162                xEnd =x+7;
   \                     ??GUI_USAGE_BM_GetNextDirty_6:
   \   000000B8   07E083E2           ADD      LR,R3,#+7
    163              }
    164              if ((xEnd&7) ==7) {
   \                     ??GUI_USAGE_BM_GetNextDirty_7:
   \   000000BC   07C00EE2           AND      R12,LR,#0x7
   \   000000C0   07005CE3           CMP      R12,#+7
   \   000000C4   0E00001A           BNE      ??GUI_USAGE_BM_GetNextDirty_9
   \   000000C8   012052E2           SUBS     R2,R2,#+1
   \   000000CC   0C00004A           BMI      ??GUI_USAGE_BM_GetNextDirty_9
    165                while (--BytesLeft >= 0) {
    166                  if ((Data = *pData++) == 0xff) {
   \                     ??GUI_USAGE_BM_GetNextDirty_10:
   \   000000D0   01C0D0E4           LDRB     R12,[R0], #+1
   \   000000D4   FF005CE3           CMP      R12,#+255
   \   000000D8   0300001A           BNE      ??GUI_USAGE_BM_GetNextDirty_11
    167                    xEnd+=8;
   \   000000DC   08E08EE2           ADD      LR,LR,#+8
   \   000000E0   012052E2           SUBS     R2,R2,#+1
    168                  } else {
   \   000000E4   F9FFFF5A           BPL      ??GUI_USAGE_BM_GetNextDirty_10
   \   000000E8   050000EA           B        ??GUI_USAGE_BM_GetNextDirty_9
    169                    while (Data&0x80) {
   \                     ??GUI_USAGE_BM_GetNextDirty_11:
   \   000000EC   80001CE3           TST      R12,#0x80
   \   000000F0   0300000A           BEQ      ??GUI_USAGE_BM_GetNextDirty_9
    170                      Data<<=1;
   \                     ??GUI_USAGE_BM_GetNextDirty_12:
   \   000000F4   8CC0A0E1           LSL      R12,R12,#+1
    171                      xEnd++;
   \   000000F8   01E08EE2           ADD      LR,LR,#+1
   \   000000FC   80001CE3           TST      R12,#0x80
   \   00000100   FBFFFF1A           BNE      ??GUI_USAGE_BM_GetNextDirty_12
    172                    }
    173                    break;
    174                  }
    175                }
    176              }
    177          
    178            }
    179            *pxOff =x;
    180            return xEnd-x+1;
   \                     ??GUI_USAGE_BM_GetNextDirty_9:
   \   00000104   03004EE0           SUB      R0,LR,R3
   \   00000108   003081E5           STR      R3,[R1, #+0]
   \   0000010C   010080E2           ADD      R0,R0,#+1
   \   00000110   1080BDE8           POP      {R4,PC}          ;; return
    181          }
    182          
    183          /*********************************************************************
    184          *
    185          *       Delete
    186          */

   \                                 In section .text, align 4, keep-with-next
    187          static void _GUI_USAGE_BM_Delete(GUI_MEMDEV_Handle hDevUsage) {
    188            GUI_ALLOC_Free(hDevUsage);
   \                     _GUI_USAGE_BM_Delete:
   \   00000000   ........           B        GUI_ALLOC_Free   ;; tailcall
    189          }
    190          
    191          /*********************************************************************
    192          *
    193          *       API List
    194          */

   \                                 In section .text, align 4, keep-with-next
    195          static const tUSAGE_APIList API = {
   \                     API:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 GUI_USAGE_BM_AddPixel, GUI_USAGE_BM_AddHLine, GUI_USAGE_BM_Clear, 0, _GUI_USAGE_BM_Delete, GUI_USAGE_BM_GetNextDirty
   \              ............
   \              00000000....
   \              ............
    196            GUI_USAGE_BM_AddPixel,     /* tUSAGE_AddPixel*         */
    197            GUI_USAGE_BM_AddHLine,     /* tUSAGE_AddHLine*         */
    198            GUI_USAGE_BM_Clear,        /* tUSAGE_Clear*            */
    199            0,                         /* tUSAGE_CreateCompatible* */
    200            _GUI_USAGE_BM_Delete,       /* tUSAGE_Delete*           */
    201            GUI_USAGE_BM_GetNextDirty  /* tUSAGE_GetNextDirty*     */
    202          
    203          };
    204          
    205          /*********************************************************************
    206          *
    207          *       Exported routines
    208          *
    209          **********************************************************************
    210          */
    211          /*********************************************************************
    212          *
    213          *       GUI_USAGE_BM_Create
    214          */

   \                                 In section .text, align 4, keep-with-next
    215          GUI_USAGE_Handle GUI_USAGE_BM_Create(int x0, int y0, int xsize, int ysize, int Flags) {
   \                     GUI_USAGE_BM_Create:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0260A0E1           MOV      R6,R2
    216            int MemSize;
    217            int BytesPerLine;
    218            GUI_USAGE_Handle hMem;
    219            GUI_USE_PARA(Flags);
    220            BytesPerLine = ((xsize+15) >>4)<<1;  /* 2 byte alignment */
   \   0000000C   0F0086E2           ADD      R0,R6,#+15
   \   00000010   4002A0E1           ASR      R0,R0,#+4
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   8080A0E1           LSL      R8,R0,#+1
    221            MemSize = ysize*BytesPerLine +sizeof(GUI_USAGE_BM);
    222            hMem = GUI_ALLOC_AllocZero(MemSize);
   \   0000001C   980700E0           MUL      R0,R8,R7
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   0150A0E1           MOV      R5,R1
   \   00000028   140080E2           ADD      R0,R0,#+20
   \   0000002C   ........           BL       GUI_ALLOC_AllocZero
   \   00000030   0090B0E1           MOVS     R9,R0
    223            /* Check if we can alloc sufficient memory */
    224            if (!hMem) {
    225              GUI_DEBUG_ERROROUT("GUI_USAGE_BM_Create: Too little memory");
    226              return 0;    
   \   00000034   0000A003           MOVEQ    R0,#+0
   \   00000038   0D00000A           BEQ      ??GUI_USAGE_BM_Create_0
    227            }
    228            {
    229              GUI_USAGE_BM * pUsage;
    230              GUI_LOCK();
   \   0000003C   ........           BL       GUI_Lock
    231              pUsage = (GUI_USAGE_BM*)GUI_ALLOC_h2p(hMem);
   \   00000040   0900A0E1           MOV      R0,R9
   \   00000044   ........           BL       GUI_ALLOC_h2p
    232              pUsage->Public.x0    = x0;
   \   00000048   B040C0E1           STRH     R4,[R0, #+0]
    233              pUsage->Public.y0    = y0;
   \   0000004C   B250C0E1           STRH     R5,[R0, #+2]
    234              pUsage->Public.XSize = xsize;
   \   00000050   B460C0E1           STRH     R6,[R0, #+4]
    235              pUsage->Public.YSize = ysize;
    236              pUsage->Public.pAPI  = &API;
   \   00000054   ........           ADR      R1,API
   \   00000058   B670C0E1           STRH     R7,[R0, #+6]
   \   0000005C   081080E5           STR      R1,[R0, #+8]
    237              pUsage->Public.UseCnt= 1;
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   BC10C0E1           STRH     R1,[R0, #+12]
    238              pUsage->Private.BytesPerLine= BytesPerLine;
   \   00000068   108080E5           STR      R8,[R0, #+16]
    239              GUI_UNLOCK();
   \   0000006C   ........           BL       GUI_Unlock
    240            }
    241            return hMem;
   \   00000070   0900A0E1           MOV      R0,R9
   \                     ??GUI_USAGE_BM_Create_0:
   \   00000074   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000078   F083BDE8           POP      {R4-R9,PC}       ;; return
    242          }
    243          
    244          #else
    245          
    246          void GUIDEV_UsageBM(void);
    247          void GUIDEV_UsageBM(void) {} /* avoid empty object files */
    248          
    249          #endif /* GUI_SUPPORT_MEMDEV */
    250          
    251          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_USAGE_BM_AddHLine         16
     GUI_USAGE_BM_AddPixel          0
     GUI_USAGE_BM_Clear             4
     GUI_USAGE_BM_Create           32
     GUI_USAGE_BM_GetNextDirty      8
     _GUI_USAGE_BM_Delete           8


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GUI_USAGE_BM_AddPixel       52
     GUI_USAGE_BM_AddHLine      172
     GUI_USAGE_BM_Clear          20
     GUI_USAGE_BM_GetNextDirty  276
     _GUI_USAGE_BM_Delete         4
     API                         24
     GUI_USAGE_BM_Create        124

 
 672 bytes in section .text
 
 672 bytes of CODE memory

Errors: none
Warnings: none
