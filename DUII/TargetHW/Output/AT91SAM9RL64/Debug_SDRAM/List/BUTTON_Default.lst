###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:58:56 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_Default.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_Default.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\BU #
#                    TTON_Default.lst                                         #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\BUT #
#                    TON_Default.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_Default.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_Default.c
     19          Purpose     : Implementation of button widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "BUTTON_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Exported routines
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       BUTTON_SetDefaultFont
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void BUTTON_SetDefaultFont(const GUI_FONT GUI_UNI_PTR * pFont) {
     38            BUTTON__DefaultProps.pFont = pFont;
   \                     BUTTON_SetDefaultFont:
   \   00000000   ........           LDR      R1,??DataTable8
   \   00000004   200081E5           STR      R0,[R1, #+32]
     39          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     40          
     41          /*********************************************************************
     42          *
     43          *       BUTTON_SetDefaultFocusColor
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          GUI_COLOR BUTTON_SetDefaultFocusColor(GUI_COLOR Color) {
     46            GUI_COLOR OldColor;
     47            OldColor = BUTTON__DefaultProps.FocusColor;
   \                     BUTTON_SetDefaultFocusColor:
   \   00000000   ........           LDR      R2,??DataTable8
   \   00000004   181092E5           LDR      R1,[R2, #+24]
     48            BUTTON__DefaultProps.FocusColor = Color;
   \   00000008   180082E5           STR      R0,[R2, #+24]
     49            return OldColor;
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   1EFF2FE1           BX       LR               ;; return
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       BUTTON_SetDefaultTextColor
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          void BUTTON_SetDefaultTextColor(GUI_COLOR Color, unsigned Index) {
     57            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aTextColor)) {
   \                     BUTTON_SetDefaultTextColor:
   \   00000000   030051E3           CMP      R1,#+3
     58              BUTTON__DefaultProps.aTextColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable8
   \   00000008   01118230           ADDCC    R1,R2,R1, LSL #+2
   \   0000000C   0C008135           STRCC    R0,[R1, #+12]
     59            }
     60          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     61          
     62          /*********************************************************************
     63          *
     64          *       BUTTON_SetDefaultBkColor
     65          */

   \                                 In section .text, align 4, keep-with-next
     66          void BUTTON_SetDefaultBkColor(GUI_COLOR Color, unsigned Index) {
     67            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aBkColor)) {
   \                     BUTTON_SetDefaultBkColor:
   \   00000000   030051E3           CMP      R1,#+3
     68              BUTTON__DefaultProps.aBkColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable8
   \   00000008   01018237           STRCC    R0,[R2, +R1, LSL #+2]
     69            }
     70          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     71          
     72          /*********************************************************************
     73          *
     74          *       BUTTON_SetDefaultTextAlign
     75          */

   \                                 In section .text, align 4, keep-with-next
     76          void BUTTON_SetDefaultTextAlign(int Align) {
     77            BUTTON__DefaultProps.Align = Align;
   \                     BUTTON_SetDefaultTextAlign:
   \   00000000   ........           LDR      R1,??DataTable8
   \   00000004   B802C1E1           STRH     R0,[R1, #+40]
     78          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     79          
     80          /*********************************************************************
     81          *
     82          *       BUTTON_GetDefaultFont
     83          */

   \                                 In section .text, align 4, keep-with-next
     84          const GUI_FONT GUI_UNI_PTR * BUTTON_GetDefaultFont(void) {
     85            return BUTTON__DefaultProps.pFont;
   \                     BUTTON_GetDefaultFont:
   \   00000000   ........           LDR      R0,??DataTable8
   \   00000004   200090E5           LDR      R0,[R0, #+32]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       BUTTON_GetDefaultTextColor
     91          */

   \                                 In section .text, align 4, keep-with-next
     92          GUI_COLOR BUTTON_GetDefaultTextColor(unsigned Index) {
     93            GUI_COLOR Color = GUI_INVALID_COLOR;
   \                     BUTTON_GetDefaultTextColor:
   \   00000000   F014E0E3           MVN      R1,#-268435456
     94            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aTextColor)) {
   \   00000004   030050E3           CMP      R0,#+3
     95              Color = BUTTON__DefaultProps.aTextColor[Index];
   \   00000008   ........           LDRCC    R1,??DataTable8
   \   0000000C   00018130           ADDCC    R0,R1,R0, LSL #+2
   \   00000010   0C109035           LDRCC    R1,[R0, #+12]
     96            }
     97            return Color;
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
     98          }
     99          
    100          /*********************************************************************
    101          *
    102          *       BUTTON_GetDefaultBkColor
    103          */

   \                                 In section .text, align 4, keep-with-next
    104          GUI_COLOR BUTTON_GetDefaultBkColor(unsigned Index) {
    105            GUI_COLOR Color = GUI_INVALID_COLOR;
   \                     BUTTON_GetDefaultBkColor:
   \   00000000   F014E0E3           MVN      R1,#-268435456
    106            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aBkColor)) {
   \   00000004   030050E3           CMP      R0,#+3
    107              Color = BUTTON__DefaultProps.aBkColor[Index];
   \   00000008   ........           LDRCC    R1,??DataTable8
   \   0000000C   00119137           LDRCC    R1,[R1, +R0, LSL #+2]
    108            }
    109            return Color;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    110          }
    111          
    112          /*********************************************************************
    113          *
    114          *       BUTTON_GetDefaultTextAlign
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          int BUTTON_GetDefaultTextAlign(void) {
    117            return BUTTON__DefaultProps.Align;
   \                     BUTTON_GetDefaultTextAlign:
   \   00000000   ........           LDR      R0,??DataTable8
   \   00000004   F802D0E1           LDRSH    R0,[R0, #+40]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    118          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     BUTTON__DefaultProps
    119          
    120          #else                            /* Avoid problems with empty object modules */
    121            void BUTTON_Default_C(void);
    122            void BUTTON_Default_C(void) {}
    123          #endif
    124          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     BUTTON_GetDefaultBkColor         0
     BUTTON_GetDefaultFont            0
     BUTTON_GetDefaultTextAlign       0
     BUTTON_GetDefaultTextColor       0
     BUTTON_SetDefaultBkColor         0
     BUTTON_SetDefaultFocusColor      0
     BUTTON_SetDefaultFont            0
     BUTTON_SetDefaultTextAlign       0
     BUTTON_SetDefaultTextColor       0


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     BUTTON_SetDefaultFont         12
     BUTTON_SetDefaultFocusColor   20
     BUTTON_SetDefaultTextColor    20
     BUTTON_SetDefaultBkColor      16
     BUTTON_SetDefaultTextAlign    12
     BUTTON_GetDefaultFont         12
     BUTTON_GetDefaultTextColor    28
     BUTTON_GetDefaultBkColor      24
     BUTTON_GetDefaultTextAlign    12
     ??DataTable8                   4

 
 160 bytes in section .text
 
 160 bytes of CODE memory

Errors: none
Warnings: none
