###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_Font.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_Font.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_Font.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_Font.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_Font.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_Font.c
     19          Purpose     : Implementation of listbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          
     25          #include "LISTBOX_Private.h"
     26          #include "GUI_Debug.h"
     27          #include "GUI_Private.h"
     28          #include "WM_Intern.h"
     29          
     30          #if GUI_WINSUPPORT
     31          
     32          /*********************************************************************
     33          *
     34          *       Exported routines:  Various methods
     35          *
     36          **********************************************************************
     37          */
     38          /*********************************************************************
     39          *
     40          *       LISTBOX_SetFont
     41          */

   \                                 In section .text, align 4, keep-with-next
     42          void LISTBOX_SetFont(LISTBOX_Handle hObj, const GUI_FONT GUI_UNI_PTR * pFont) {
   \                     LISTBOX_SetFont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
     43            LISTBOX_Obj * pObj;
     44            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??LISTBOX_SetFont_0
     45              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     46              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     47              pObj->Props.pFont = pFont;
   \   00000024   545080E5           STR      R5,[R0, #+84]
     48              pObj->ContentSizeX = 0;
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   B619C0E1           STRH     R1,[R0, #+150]
     49              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     50              LISTBOX_InvalidateItem(hObj, LISTBOX_ALL_ITEMS);
   \   00000034   0010E0E3           MVN      R1,#+0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       LISTBOX_InvalidateItem
     51              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
     52            }
     53          }
   \                     ??LISTBOX_SetFont_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
     54          
     55          /*********************************************************************
     56          *
     57          *       LISTBOX_GetFont
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          const GUI_FONT GUI_UNI_PTR * LISTBOX_GetFont(LISTBOX_Handle hObj) {
   \                     LISTBOX_GetFont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
     60            const GUI_FONT GUI_UNI_PTR * pFont = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
     61            LISTBOX_Obj * pObj;
     62            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTBOX_GetFont_0
     63              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
     64              pObj = LISTBOX_LOCK_H(hObj);
     65              pFont = pObj->Props.pFont;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   545090E5           LDR      R5,[R0, #+84]
     66              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
     67              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
     68            }
     69            return pFont;
   \                     ??LISTBOX_GetFont_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
     70          }
     71          
     72          #else                            /* Avoid problems with empty object modules */
     73            void LISTBOX_Font_C(void) {}
     74          #endif

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     LISTBOX_GetFont     16
     LISTBOX_SetFont     16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     LISTBOX_SetFont   76
     LISTBOX_GetFont   56

 
 132 bytes in section .text
 
 132 bytes of CODE memory

Errors: none
Warnings: none
