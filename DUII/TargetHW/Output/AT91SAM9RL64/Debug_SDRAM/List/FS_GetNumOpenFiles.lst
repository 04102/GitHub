###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_GetNumOpenFiles.c                 #
#    Command line =  C:\DUII\TargetHW\FS\FS_GetNumOpenFiles.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _GetNumOpenFiles.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    GetNumOpenFiles.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_GetNumOpenFiles.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_GetNumOpenFiles.c
     19          Purpose     : Implementation of FS_GetNumOpenFiles
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          #include <stdio.h>
     30          
     31          #include "FS_Int.h"
     32          #include "FS_OS.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       FS_GetNumOpenFiles
     44          *
     45          *  Function description:
     46          *    Returns how many files are currently opened.
     47          *
     48          *  Parameters:
     49          *    None
     50          *
     51          *
     52          *  Return value:
     53          *      Number of files that are opened.
     54          *
     55          *
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          int FS_GetNumFilesOpen(void) {
   \                     FS_GetNumFilesOpen:
   \   00000000   10402DE9           PUSH     {R4,LR}
     58            int r;
     59            FS_FILE * pFile;
     60          
     61           
     62            FS_LOCK();
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           BL       FS_OS_Lock
     63            r = 0;
     64            pFile = FS_Global.pFirstFilehandle;
   \   0000000C   30009FE5           LDR      R0,??FS_GetNumFilesOpen_0
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   140090E5           LDR      R0,[R0, #+20]
     65            FS_LOCK_SYS();
     66            while (pFile) { /* While no free entry found. */
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500000A           BEQ      ??FS_GetNumFilesOpen_1
     67              if (pFile->InUse) {
   \                     ??FS_GetNumFilesOpen_2:
   \   00000020   0A10D0E5           LDRB     R1,[R0, #+10]
     68                r++;
     69              }
     70              pFile = pFile->pNext;
   \   00000024   0C0090E5           LDR      R0,[R0, #+12]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   01408412           ADDNE    R4,R4,#+1
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F9FFFF1A           BNE      ??FS_GetNumFilesOpen_2
   \                     ??FS_GetNumFilesOpen_1:
   \   00000038   ........           BL       FS_OS_Unlock
     71            }
     72            FS_UNLOCK_SYS();
     73            FS_UNLOCK();
     74            return r;
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??FS_GetNumFilesOpen_0:
   \   00000044   ........           DC32     FS_Global
     75          }
     76          
     77          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     FS_GetNumFilesOpen      8


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     FS_GetNumFilesOpen   72

 
 72 bytes in section .text
 
 72 bytes of CODE memory

Errors: none
Warnings: none
