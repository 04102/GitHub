###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:54 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\SCROLLBAR_Skin.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\SCROLLBAR_Skin.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\SC #
#                    ROLLBAR_Skin.lst                                         #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\SCR #
#                    OLLBAR_Skin.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\SCROLLBAR_Skin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : SCROLLBAR_Skin.c
     19          Purpose     : Implementation of framewindow widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "SCROLLBAR_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _CalcPositions
     38          *
     39          *  Calculates all positions required for drawing or for mouse / touch
     40          *  evaluation.
     41          */

   \                                 In section .text, align 4, keep-with-next
     42          static void _CalcPositions(SCROLLBAR_Handle hObj, SCROLLBAR_POSITIONS * pPos) {
   \                     _CalcPositions:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
     43            SCROLLBAR_OBJ * pObj;
     44            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
     45            SCROLLBAR_SKINFLEX_INFO SkinInfo;
     46            WIDGET_ITEM_DRAW_INFO ItemInfo;
     47            int xSizeButton, xSize, xSizeMoveable, ThumbSize, NumItems, xSizeThumbArea;
     48            WM_HWIN hWin;
     49            GUI_RECT r, rSub;
     50            int x0, y0;
     51            
     52            pObj = SCROLLBAR_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050A0E1           MOV      R5,R0
     53            r = pObj->Widget.Win.Rect;
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0820A0E3           MOV      R2,#+8
   \   00000024   ........           BL       __aeabi_memcpy
     54            x0 = r.x0;
     55            y0 = r.y0;
     56            pPos->x1  = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? r.y1 : r.x1;
   \   00000028   B2C3D5E1           LDRH     R12,[R5, #+50]
   \   0000002C   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000030   F630DDE1           LDRSH    R3,[SP, #+6]
   \   00000034   08001CE3           TST      R12,#0x8
   \   00000038   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000003C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000040   03E0A011           MOVNE    LR,R3
   \   00000044   02E0A001           MOVEQ    LR,R2
   \   00000048   18E084E5           STR      LR,[R4, #+24]
     57            //
     58            // Get button size
     59            //
     60            SkinInfo.IsVertical = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? 1 : 0;
   \   0000004C   FFC00CE2           AND      R12,R12,#0xFF
   \   00000050   01E0A0E3           MOV      LR,#+1
   \   00000054   ACC10EE0           AND      R12,LR,R12, LSR #+3
   \   00000058   10C08DE5           STR      R12,[SP, #+16]
     61            pfDrawSkin   = pObj->Props.SkinPrivate.pfDrawSkin;
   \   0000005C   40C095E5           LDR      R12,[R5, #+64]
   \   00000060   0180A0E1           MOV      R8,R1
     62            ItemInfo.Cmd = WIDGET_ITEM_GET_BUTTONSIZE;
     63            ItemInfo.hWin = hObj;
     64            ItemInfo.x0 = r.x0;
     65            ItemInfo.y0 = r.y0;
   \   00000064   28108DE5           STR      R1,[SP, #+40]
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   1790A0E3           MOV      R9,#+23
   \   00000070   24008DE5           STR      R0,[SP, #+36]
     66            ItemInfo.x1 = r.x1;
     67            ItemInfo.y1 = r.y1;
     68            ItemInfo.p = &SkinInfo;
   \   00000074   10108DE2           ADD      R1,SP,#+16
   \   00000078   1C908DE5           STR      R9,[SP, #+28]
   \   0000007C   18608DE5           STR      R6,[SP, #+24]
   \   00000080   2C208DE5           STR      R2,[SP, #+44]
   \   00000084   30308DE5           STR      R3,[SP, #+48]
   \   00000088   34108DE5           STR      R1,[SP, #+52]
     69            xSizeButton = pfDrawSkin(&ItemInfo);
   \   0000008C   18008DE2           ADD      R0,SP,#+24
   \   00000090   3CFF2FE1           BLX      R12
   \   00000094   0060A0E1           MOV      R6,R0
     70            //
     71            // Subtract the rectangle of the other scrollbar (if existing and visible)
     72            //
     73            if (pObj->Widget.Id == GUI_ID_HSCROLL) {
   \   00000098   F003D5E1           LDRSH    R0,[R5, #+48]
   \   0000009C   FF0050E3           CMP      R0,#+255
   \   000000A0   0B00001A           BNE      ??_CalcPositions_0
     74              hWin = WM_GetScrollbarV(pObj->Widget.Win.hParent);
   \   000000A4   180095E5           LDR      R0,[R5, #+24]
   \   000000A8   ........           BL       WM_GetScrollbarV
     75              if (hWin) {
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0700000A           BEQ      ??_CalcPositions_0
     76                WM_GetWindowRectEx(hWin, &rSub);
   \   000000B4   08108DE2           ADD      R1,SP,#+8
   \   000000B8   ........           BL       WM_GetWindowRectEx
     77                if (r.x1 == rSub.x1) {
   \   000000BC   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000C0   FC10DDE1           LDRSH    R1,[SP, #+12]
   \   000000C4   010050E1           CMP      R0,R1
     78                  r.x1 = rSub.x0 -1;
   \   000000C8   F810DD01           LDRSHEQ  R1,[SP, #+8]
   \   000000CC   01104102           SUBEQ    R1,R1,#+1
   \   000000D0   B410CD01           STRHEQ   R1,[SP, #+4]
     79                }
     80              }
     81            }
     82            if (pObj->Widget.Id == GUI_ID_VSCROLL) {
   \                     ??_CalcPositions_0:
   \   000000D4   F003D5E1           LDRSH    R0,[R5, #+48]
   \   000000D8   FE0050E3           CMP      R0,#+254
   \   000000DC   0B00001A           BNE      ??_CalcPositions_1
     83              hWin = WM_GetScrollbarH(pObj->Widget.Win.hParent);
   \   000000E0   180095E5           LDR      R0,[R5, #+24]
   \   000000E4   ........           BL       WM_GetScrollbarH
     84              if (hWin) {
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0700000A           BEQ      ??_CalcPositions_1
     85                WM_GetWindowRectEx(hWin, &rSub);
   \   000000F0   08108DE2           ADD      R1,SP,#+8
   \   000000F4   ........           BL       WM_GetWindowRectEx
     86                if (r.y1 == rSub.y1) {
   \   000000F8   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000FC   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   00000100   010050E1           CMP      R0,R1
     87                  r.y1 = rSub.y0 -1;
   \   00000104   FA00DD01           LDRSHEQ  R0,[SP, #+10]
   \   00000108   01004002           SUBEQ    R0,R0,#+1
   \   0000010C   B600CD01           STRHEQ   R0,[SP, #+6]
     88                }
     89              }
     90            }
     91            //
     92            // Convert coordinates of this window
     93            //
     94            GUI_MoveRect(&r, -x0, -y0);
   \                     ??_CalcPositions_1:
   \   00000110   002068E2           RSB      R2,R8,#+0
   \   00000114   001067E2           RSB      R1,R7,#+0
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           BL       GUI_MoveRect
     95            //
     96            // Convert real into virtual coordinates
     97            //
     98            SCROLLBAR__Rect2VRect(&pObj->Widget, &r);
   \   00000120   0D10A0E1           MOV      R1,SP
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           BL       SCROLLBAR__Rect2VRect
     99            NumItems      = pObj->NumItems;
    100            xSize         = r.x1 - r.x0 + 1;
   \   0000012C   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000130   F010DDE1           LDRSH    R1,[SP, #+0]
    101            xSizeThumbArea= xSize - 2 * xSizeButton;     // Number of pixels available for thumb and movement
    102            ThumbSize     = (int)GUI__DivideRound32((I32)xSizeThumbArea * pObj->PageSize, NumItems);
   \   00000134   542095E5           LDR      R2,[R5, #+84]
   \   00000138   4C7095E5           LDR      R7,[R5, #+76]
   \   0000013C   010040E0           SUB      R0,R0,R1
   \   00000140   018080E2           ADD      R8,R0,#+1
   \   00000144   86A048E0           SUB      R10,R8,R6, LSL #+1
   \   00000148   920A00E0           MUL      R0,R2,R10
   \   0000014C   0710A0E1           MOV      R1,R7
   \   00000150   ........           BL       GUI__DivideRound32
    103            if (ThumbSize < SCROLLBAR_THUMB_SIZE_MIN_DEFAULT + 2) {
   \   00000154   060050E3           CMP      R0,#+6
    104              ThumbSize = SCROLLBAR_THUMB_SIZE_MIN_DEFAULT + 2;
   \   00000158   0600A0B3           MOVLT    R0,#+6
    105            }
    106            if (ThumbSize > xSizeThumbArea) {
   \   0000015C   0A90A0E1           MOV      R9,R10
   \   00000160   00005AE1           CMP      R10,R0
   \   00000164   0090A0C1           MOVGT    R9,R0
    107              ThumbSize = xSizeThumbArea;
    108            }
    109            xSizeMoveable = xSizeThumbArea - ThumbSize;
    110            pPos->x0_LeftArrow  = r.x0;
   \   00000168   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000016C   09A04AE0           SUB      R10,R10,R9
   \   00000170   000084E5           STR      R0,[R4, #+0]
    111            pPos->x1_LeftArrow  = xSizeButton - 1;
   \   00000174   010046E2           SUB      R0,R6,#+1
   \   00000178   040084E5           STR      R0,[R4, #+4]
    112            pPos->x1_RightArrow = xSize - 1;
   \   0000017C   010048E2           SUB      R0,R8,#+1
   \   00000180   140084E5           STR      R0,[R4, #+20]
    113            pPos->x0_RightArrow = xSize - xSizeButton;
   \   00000184   060048E0           SUB      R0,R8,R6
   \   00000188   100084E5           STR      R0,[R4, #+16]
    114            pPos->x0_Thumb      = pPos->x1_LeftArrow + 1 + GUI__DivideRound32((I32)xSizeMoveable * pObj->v, NumItems - pObj->PageSize);
   \   0000018C   540095E5           LDR      R0,[R5, #+84]
   \   00000190   502095E5           LDR      R2,[R5, #+80]
   \   00000194   001047E0           SUB      R1,R7,R0
   \   00000198   920A00E0           MUL      R0,R2,R10
   \   0000019C   ........           BL       GUI__DivideRound32
   \   000001A0   041094E5           LDR      R1,[R4, #+4]
   \   000001A4   010080E0           ADD      R0,R0,R1
   \   000001A8   010080E2           ADD      R0,R0,#+1
   \   000001AC   080084E5           STR      R0,[R4, #+8]
    115            pPos->x1_Thumb      = pPos->x0_Thumb + ThumbSize - 1;
   \   000001B0   000089E0           ADD      R0,R9,R0
   \   000001B4   010040E2           SUB      R0,R0,#+1
   \   000001B8   0C0084E5           STR      R0,[R4, #+12]
    116            pPos->xSizeMoveable = xSizeMoveable;
   \   000001BC   1CA084E5           STR      R10,[R4, #+28]
    117            pPos->ThumbSize     = ThumbSize;
   \   000001C0   209084E5           STR      R9,[R4, #+32]
    118            GUI_UNLOCK_H(pObj);
   \   000001C4   ........           BL       GUI_ALLOC_UnlockH
    119          }
   \   000001C8   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   000001CC   F087BDE8           POP      {R4-R10,PC}      ;; return
    120          
    121          /*********************************************************************
    122          *
    123          *       _Paint
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static void _Paint(SCROLLBAR_Handle hObj) {
   \                     _Paint:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   0040A0E1           MOV      R4,R0
    126            SCROLLBAR_OBJ * pObj;
    127            GUI_RECT RectClient;
    128            SCROLLBAR_POSITIONS Pos;
    129            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
    130            SCROLLBAR_SKINFLEX_INFO SkinInfo;
    131            WIDGET_ITEM_DRAW_INFO ItemInfo;
    132            WIDGET * pWidget;
    133          
    134            //
    135            // Get properties
    136            //
    137            pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
    138            pWidget = &pObj->Widget;
    139            pfDrawSkin   = pObj->Props.SkinPrivate.pfDrawSkin;
    140            SkinInfo.State = pObj->State;
   \   00000014   581095E5           LDR      R1,[R5, #+88]
   \   00000018   406095E5           LDR      R6,[R5, #+64]
   \   0000001C   24108DE5           STR      R1,[SP, #+36]
    141            SkinInfo.IsVertical = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? 1 : 0;
   \   00000020   B203D5E1           LDRH     R0,[R5, #+50]
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   FF0000E2           AND      R0,R0,#0xFF
   \   0000002C   A00101E0           AND      R0,R1,R0, LSR #+3
   \   00000030   20008DE5           STR      R0,[SP, #+32]
    142            _CalcPositions(hObj, &Pos);
   \   00000034   30108DE2           ADD      R1,SP,#+48
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       _CalcPositions
    143            GUI_UNLOCK_H(pObj);
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
    144            //
    145            // Get size
    146            //
    147            WIDGET__GetClientRect(pWidget, &RectClient);
   \   00000044   28108DE2           ADD      R1,SP,#+40
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           BL       WIDGET__GetClientRect
    148            //
    149            // Fill item info structure
    150            //
    151            ItemInfo.hWin = hObj;
    152            ItemInfo.y0 = RectClient.y0;
   \   00000050   FA12DDE1           LDRSH    R1,[SP, #+42]
   \   00000054   00408DE5           STR      R4,[SP, #+0]
    153            ItemInfo.y1 = RectClient.y1;
    154            ItemInfo.p  = &SkinInfo;
    155            //
    156            // Draw left button
    157            //
    158            ItemInfo.Cmd = WIDGET_ITEM_DRAW_BUTTON_L;
    159            ItemInfo.x0 = Pos.x0_LeftArrow;
    160            ItemInfo.x1 = Pos.x1_LeftArrow;
    161            pfDrawSkin(&ItemInfo);
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   10108DE5           STR      R1,[SP, #+16]
   \   00000060   FE12DDE1           LDRSH    R1,[SP, #+46]
   \   00000064   18108DE5           STR      R1,[SP, #+24]
   \   00000068   20108DE2           ADD      R1,SP,#+32
   \   0000006C   1C108DE5           STR      R1,[SP, #+28]
   \   00000070   0610A0E3           MOV      R1,#+6
   \   00000074   04108DE5           STR      R1,[SP, #+4]
   \   00000078   30109DE5           LDR      R1,[SP, #+48]
   \   0000007C   0C108DE5           STR      R1,[SP, #+12]
   \   00000080   34109DE5           LDR      R1,[SP, #+52]
   \   00000084   14108DE5           STR      R1,[SP, #+20]
   \   00000088   36FF2FE1           BLX      R6
    162            //
    163            // Draw shaft
    164            //
    165            ItemInfo.Cmd = WIDGET_ITEM_DRAW_SHAFT_L;
    166            ItemInfo.x0 = Pos.x1_LeftArrow + 1;
   \   0000008C   34009DE5           LDR      R0,[SP, #+52]
   \   00000090   0E10A0E3           MOV      R1,#+14
   \   00000094   010080E2           ADD      R0,R0,#+1
   \   00000098   0C008DE5           STR      R0,[SP, #+12]
    167            ItemInfo.x1 = Pos.x0_Thumb - 1;
   \   0000009C   38009DE5           LDR      R0,[SP, #+56]
   \   000000A0   04108DE5           STR      R1,[SP, #+4]
   \   000000A4   010040E2           SUB      R0,R0,#+1
   \   000000A8   14008DE5           STR      R0,[SP, #+20]
    168            pfDrawSkin(&ItemInfo);
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   36FF2FE1           BLX      R6
    169            ItemInfo.Cmd = WIDGET_ITEM_DRAW_SHAFT_R;
    170            ItemInfo.x0 = Pos.x1_Thumb + 1;
   \   000000B4   3C009DE5           LDR      R0,[SP, #+60]
   \   000000B8   0F10A0E3           MOV      R1,#+15
   \   000000BC   010080E2           ADD      R0,R0,#+1
   \   000000C0   0C008DE5           STR      R0,[SP, #+12]
    171            ItemInfo.x1 = Pos.x0_RightArrow - 1;
   \   000000C4   40009DE5           LDR      R0,[SP, #+64]
   \   000000C8   04108DE5           STR      R1,[SP, #+4]
   \   000000CC   010040E2           SUB      R0,R0,#+1
   \   000000D0   14008DE5           STR      R0,[SP, #+20]
    172            pfDrawSkin(&ItemInfo);
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   36FF2FE1           BLX      R6
    173            //
    174            // Draw thumb
    175            //
    176            ItemInfo.Cmd = WIDGET_ITEM_DRAW_THUMB;
   \   000000DC   1110A0E3           MOV      R1,#+17
   \   000000E0   04108DE5           STR      R1,[SP, #+4]
    177            ItemInfo.x0 = Pos.x0_Thumb;
   \   000000E4   38109DE5           LDR      R1,[SP, #+56]
    178            ItemInfo.x1 = Pos.x1_Thumb;
    179            pfDrawSkin(&ItemInfo);
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   0C108DE5           STR      R1,[SP, #+12]
   \   000000F0   3C109DE5           LDR      R1,[SP, #+60]
   \   000000F4   14108DE5           STR      R1,[SP, #+20]
   \   000000F8   36FF2FE1           BLX      R6
    180            //
    181            // Draw right button
    182            //
    183            ItemInfo.Cmd = WIDGET_ITEM_DRAW_BUTTON_R;
   \   000000FC   0710A0E3           MOV      R1,#+7
   \   00000100   04108DE5           STR      R1,[SP, #+4]
    184            ItemInfo.x0 = Pos.x0_RightArrow;
   \   00000104   40109DE5           LDR      R1,[SP, #+64]
    185            ItemInfo.x1 = Pos.x1_RightArrow;
    186            pfDrawSkin(&ItemInfo);
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   0C108DE5           STR      R1,[SP, #+12]
   \   00000110   44109DE5           LDR      R1,[SP, #+68]
   \   00000114   14108DE5           STR      R1,[SP, #+20]
   \   00000118   36FF2FE1           BLX      R6
    187            //
    188            // Draw overlapping area
    189            //
    190            if (Pos.x1_RightArrow != Pos.x1) {
   \   0000011C   44009DE5           LDR      R0,[SP, #+68]
   \   00000120   48109DE5           LDR      R1,[SP, #+72]
   \   00000124   010050E1           CMP      R0,R1
   \   00000128   0800000A           BEQ      ??_Paint_0
    191              ItemInfo.Cmd = WIDGET_ITEM_DRAW_OVERLAP;
   \   0000012C   0A10A0E3           MOV      R1,#+10
    192              ItemInfo.x0 = Pos.x1_RightArrow + 1;
   \   00000130   44009DE5           LDR      R0,[SP, #+68]
   \   00000134   04108DE5           STR      R1,[SP, #+4]
   \   00000138   010080E2           ADD      R0,R0,#+1
    193              ItemInfo.x1 = Pos.x1;
   \   0000013C   48109DE5           LDR      R1,[SP, #+72]
   \   00000140   0C008DE5           STR      R0,[SP, #+12]
   \   00000144   14108DE5           STR      R1,[SP, #+20]
    194              pfDrawSkin(&ItemInfo);
   \   00000148   0D00A0E1           MOV      R0,SP
   \   0000014C   36FF2FE1           BLX      R6
    195            }
    196          }
   \                     ??_Paint_0:
   \   00000150   58D08DE2           ADD      SP,SP,#+88       ;; stack cleaning
   \   00000154   7080BDE8           POP      {R4-R6,PC}       ;; return
    197          
    198          /*********************************************************************
    199          *
    200          *       _Create
    201          */

   \                                 In section .text, align 4, keep-with-next
    202          static void _Create(SCROLLBAR_Handle hObj) {
   \                     _Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
    203            SCROLLBAR_SKINFLEX_INFO SkinInfo;
    204            SCROLLBAR_OBJ * pObj;
    205            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
    206            WIDGET_ITEM_DRAW_INFO ItemInfo;
    207          
    208            //
    209            // Get properties
    210            //
    211            pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
    212            pfDrawSkin   = pObj->Props.SkinPrivate.pfDrawSkin;
    213            SkinInfo.IsVertical = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? 1 : 0;
   \   00000010   3210D0E5           LDRB     R1,[R0, #+50]
   \   00000014   405090E5           LDR      R5,[R0, #+64]
   \   00000018   080011E3           TST      R1,#0x8
   \   0000001C   0120A013           MOVNE    R2,#+1
   \   00000020   0020A003           MOVEQ    R2,#+0
    214            pObj->pfCalcPositions = _CalcPositions;
   \   00000024   ........           LDR      R1,??DataTable2
   \   00000028   00208DE5           STR      R2,[SP, #+0]
   \   0000002C   481080E5           STR      R1,[R0, #+72]
    215            GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    216            //
    217            // Create
    218            //
    219            ItemInfo.Cmd = WIDGET_ITEM_CREATE;
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0C108DE5           STR      R1,[SP, #+12]
    220            ItemInfo.hWin = hObj;
   \   0000003C   08408DE5           STR      R4,[SP, #+8]
    221            ItemInfo.p  = &SkinInfo;
   \   00000040   24D08DE5           STR      SP,[SP, #+36]
    222            pfDrawSkin(&ItemInfo);
   \   00000044   08008DE2           ADD      R0,SP,#+8
   \   00000048   35FF2FE1           BLX      R5
    223          }
   \   0000004C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    224          
    225          /*********************************************************************
    226          *
    227          *        Private data
    228          *
    229          **********************************************************************
    230          */
    231          /*********************************************************************
    232          *
    233          *       _Skin
    234          */

   \                                 In section .data, align 4
    235          static WIDGET_SKIN _Skin = {
   \                     _Skin:
   \   00000000   ............       DC32 _Paint, _Create, SCROLLBAR__DefaultProps + 0CH
   \              ............
    236            _Paint,
    237            _Create,
    238            &SCROLLBAR__DefaultProps.SkinPrivate,
    239          };
    240          
    241          /*********************************************************************
    242          *
    243          *        Public code
    244          *
    245          **********************************************************************
    246          */
    247          /*********************************************************************
    248          *
    249          *       SCROLLBAR_SetSkin
    250          */

   \                                 In section .text, align 4, keep-with-next
    251          void SCROLLBAR_SetSkin(SCROLLBAR_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
   \                     SCROLLBAR_SetSkin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    252            SCROLLBAR_OBJ * pObj;
    253          
    254            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    255            pObj = SCROLLBAR_LOCK_H(hObj);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
    256            //
    257            // Enable skinning
    258            //
    259            pObj->pWidgetSkin = &_Skin;
   \   0000001C   ........           LDR      R1,??DataTable2_1
   \   00000020   441080E5           STR      R1,[R0, #+68]
    260            pObj->pfCalcPositions = _CalcPositions;
   \   00000024   ........           LDR      R1,??DataTable2
   \   00000028   481080E5           STR      R1,[R0, #+72]
    261            //
    262            // Set private callback function
    263            //
    264            pObj->Props.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000002C   405080E5           STR      R5,[R0, #+64]
    265            GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    266            //
    267            // Invalidate widget
    268            //
    269            WM_SetHasTrans(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_SetHasTrans
    270            WM_InvalidateWindow(hObj);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       WM_InvalidateWindow
    271            WM_UNLOCK();
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3040BDE8           POP      {R4,R5,LR}
   \   0000004C   ........           B        GUI_Unlock       ;; tailcall
    272          }
    273          
    274          /*********************************************************************
    275          *
    276          *       SCROLLBAR_SetDefaultSkin
    277          */

   \                                 In section .text, align 4, keep-with-next
    278          void SCROLLBAR_SetDefaultSkin(WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
    279            SCROLLBAR__pSkinDefault = &_Skin;
   \                     SCROLLBAR_SetDefaultSkin:
   \   00000000   ........           LDR      R1,??DataTable2_2
   \   00000004   ........           LDR      R2,??DataTable2_1
   \   00000008   002081E5           STR      R2,[R1, #+0]
    280            SCROLLBAR__DefaultProps.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000000C   ........           LDR      R1,??DataTable2_3
   \   00000010   0C0081E5           STR      R0,[R1, #+12]
    281          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     _CalcPositions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     _Skin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     SCROLLBAR__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     SCROLLBAR__DefaultProps
    282          
    283          #else
    284            void SCROLLBAR_Skin_C(void);
    285            void SCROLLBAR_Skin_C(void) {} /* avoid empty object files */
    286          #endif /* GUI_WINSUPPORT */
    287          
    288          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     SCROLLBAR_SetDefaultSkin      0
     SCROLLBAR_SetSkin            16
     _CalcPositions               88
     _Create                      56
     _Paint                      104


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _CalcPositions            464
     _Paint                    344
     _Create                    84
     _Skin                      12
     SCROLLBAR_SetSkin          80
     SCROLLBAR_SetDefaultSkin   24
     ??DataTable2                4
     ??DataTable2_1              4
     ??DataTable2_2              4
     ??DataTable2_3              4

 
    12 bytes in section .data
 1 012 bytes in section .text
 
 1 012 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
