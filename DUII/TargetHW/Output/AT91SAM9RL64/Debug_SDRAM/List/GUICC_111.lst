###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_111.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_111.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    ICC_111.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    CC_111.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_111.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_111.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code, LCD_FIXEDPALETTE == 111, 8 basic colors
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _Color2Index_111
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static unsigned _Color2Index_111(LCD_COLOR Color) {
     36            int r, g, b;
     37            r = (Color >> (0  + 7)) & 1;
     38            g = (Color >> (8  + 7)) & 1;
     39            b = (Color >> (16 + 7)) & 1;
     40            return r + (g << 1) + (b << 2);
   \                     _Color2Index_111:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   A01301E0           AND      R1,R1,R0, LSR #+7
   \   0000000C   A02702E0           AND      R2,R2,R0, LSR #+15
   \   00000010   821081E0           ADD      R1,R1,R2, LSL #+1
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   A00B02E0           AND      R0,R2,R0, LSR #+23
   \   0000001C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000020   1EFF2FE1           BX       LR               ;; return
     41          }
     42          
     43          /*********************************************************************
     44          *
     45          *       _Index2Color_111
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          static LCD_COLOR _Index2Color_111(unsigned Index) {
     48            U16 r, g, b;
     49            r = (((Index >> 0) & 1) * 0xff);
     50            g = (((Index >> 1) & 1) * 0xff);
     51            b =   (Index >> 2)      * 0xff;
     52            return r | (g << 8) | ((U32)b << 16);
   \                     _Index2Color_111:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   011000E2           AND      R1,R0,#0x1
   \   00000008   A02002E0           AND      R2,R2,R0, LSR #+1
   \   0000000C   011461E0           RSB      R1,R1,R1, LSL #+8
   \   00000010   022462E0           RSB      R2,R2,R2, LSL #+8
   \   00000014   2001A0E1           LSR      R0,R0,#+2
   \   00000018   0118A0E1           LSL      R1,R1,#+16
   \   0000001C   0228A0E1           LSL      R2,R2,#+16
   \   00000020   000460E0           RSB      R0,R0,R0, LSL #+8
   \   00000024   2118A0E1           LSR      R1,R1,#+16
   \   00000028   2228A0E1           LSR      R2,R2,#+16
   \   0000002C   0008A0E1           LSL      R0,R0,#+16
   \   00000030   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000034   2008A0E1           LSR      R0,R0,#+16
   \   00000038   000881E1           ORR      R0,R1,R0, LSL #+16
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     53          }
     54          
     55          /*********************************************************************
     56          *
     57          *       _GetIndexMask_111
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          static unsigned _GetIndexMask_111(void) {
     60            return 0x0007;
   \                     _GetIndexMask_111:
   \   00000000   0700A0E3           MOV      R0,#+7
   \   00000004   1EFF2FE1           BX       LR               ;; return
     61          }
     62          
     63          /*********************************************************************
     64          *
     65          *       Public data
     66          *
     67          **********************************************************************
     68          */
     69          /*********************************************************************
     70          *
     71          *       LCD_API_ColorConv_111
     72          *
     73          * Purpose
     74          *   API table for this color conversion mode. Only used by memory
     75          *   devices in this mode.
     76          */

   \                                 In section .rodata, align 4, keep-with-next
     77          const LCD_API_COLOR_CONV LCD_API_ColorConv_111 = {
   \                     LCD_API_ColorConv_111:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_111, _Index2Color_111, _GetIndexMask_111
   \              ............
     78            _Color2Index_111,
     79            _Index2Color_111,
     80            _GetIndexMask_111
     81          };
     82          
     83          /*********************************************************************
     84          *
     85          *       Static code, LCD_FIXEDPALETTE == 111, 8 basic colors, SWAP_RB
     86          *
     87          **********************************************************************
     88          */
     89          /*********************************************************************
     90          *
     91          *       _Color2Index_M111
     92          */

   \                                 In section .text, align 4, keep-with-next
     93          static unsigned _Color2Index_M111(LCD_COLOR Color) {
     94            int r,g,b;
     95            r = (Color >> ( 0 + 7)) & 1;
     96            g = (Color >> ( 8 + 7)) & 1;
     97            b = (Color >> (16 + 7)) & 1;
     98            return b + (g << 1) + (r << 2);
   \                     _Color2Index_M111:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   A01B01E0           AND      R1,R1,R0, LSR #+23
   \   0000000C   A02702E0           AND      R2,R2,R0, LSR #+15
   \   00000010   821081E0           ADD      R1,R1,R2, LSL #+1
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   A00302E0           AND      R0,R2,R0, LSR #+7
   \   0000001C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000020   1EFF2FE1           BX       LR               ;; return
     99          }
    100          
    101          /*********************************************************************
    102          *
    103          *       _Index2Color_M111
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          static LCD_COLOR _Index2Color_M111(unsigned Index) {
    106            U16 r, g, b;
    107            r = (((Index >> 0) & 1) * 0xff);
    108            g = (((Index >> 1) & 1) * 0xff);
    109            b =   (Index >> 2)      * 0xff;
    110            return b | (g << 8) | ((U32)r << 16);
   \                     _Index2Color_M111:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   2011A0E1           LSR      R1,R0,#+2
   \   00000008   A02002E0           AND      R2,R2,R0, LSR #+1
   \   0000000C   011461E0           RSB      R1,R1,R1, LSL #+8
   \   00000010   022462E0           RSB      R2,R2,R2, LSL #+8
   \   00000014   010000E2           AND      R0,R0,#0x1
   \   00000018   0118A0E1           LSL      R1,R1,#+16
   \   0000001C   0228A0E1           LSL      R2,R2,#+16
   \   00000020   000460E0           RSB      R0,R0,R0, LSL #+8
   \   00000024   2118A0E1           LSR      R1,R1,#+16
   \   00000028   2228A0E1           LSR      R2,R2,#+16
   \   0000002C   0008A0E1           LSL      R0,R0,#+16
   \   00000030   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000034   2008A0E1           LSR      R0,R0,#+16
   \   00000038   000881E1           ORR      R0,R1,R0, LSL #+16
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    111          }
    112          
    113          /*********************************************************************
    114          *
    115          *       _GetIndexMask_M111
    116          */

   \                                 In section .text, align 4, keep-with-next
    117          static unsigned _GetIndexMask_M111(void) {
    118            return 0x0007;
   \                     _GetIndexMask_M111:
   \   00000000   0700A0E3           MOV      R0,#+7
   \   00000004   1EFF2FE1           BX       LR               ;; return
    119          }
    120          
    121          /*********************************************************************
    122          *
    123          *       Public data
    124          *
    125          **********************************************************************
    126          */
    127          /*********************************************************************
    128          *
    129          *       LCD_API_ColorConv_M111
    130          *
    131          * Purpose
    132          *   API table for this color conversion mode. Only used by memory
    133          *   devices in this mode.
    134          */

   \                                 In section .rodata, align 4, keep-with-next
    135          const LCD_API_COLOR_CONV LCD_API_ColorConv_M111 = {
   \                     LCD_API_ColorConv_M111:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_M111, _Index2Color_M111, _GetIndexMask_M111
   \              ............
    136            _Color2Index_M111,
    137            _Index2Color_M111,
    138            _GetIndexMask_M111
    139          };
    140          
    141          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _Color2Index_111        0
     _Color2Index_M111       0
     _GetIndexMask_111       0
     _GetIndexMask_M111      0
     _Index2Color_111        0
     _Index2Color_M111       0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Color2Index_111         36
     _Index2Color_111         64
     _GetIndexMask_111         8
     LCD_API_ColorConv_111    12
     _Color2Index_M111        36
     _Index2Color_M111        64
     _GetIndexMask_M111        8
     LCD_API_ColorConv_M111   12

 
  24 bytes in section .rodata
 216 bytes in section .text
 
 216 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
