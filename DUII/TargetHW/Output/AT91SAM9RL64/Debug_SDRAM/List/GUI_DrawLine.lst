###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:51 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawLine.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawLine.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_DrawLine.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _DrawLine.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawLine.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawLine.c
     19          Purpose     : Implementation of line drawing routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          
     32          #define ABS(v) ((v>0) ? v : -v)
     33          
     34          /*********************************************************************
     35          *
     36          *       Static code
     37          *
     38          **********************************************************************
     39          */
     40          /*********************************************************************
     41          *
     42          *       _SwapInt
     43          */
     44          static void _SwapInt(int* pa, int* pb) {
     45            int t;
     46            t = *pa;
     47            *pa = *pb;
     48            *pb = t;
     49          }
     50          
     51          /*********************************************************************
     52          *
     53          *       Abs
     54          */
     55          static int Abs(int v) {
     56            return ABS(v);
     57          }
     58          
     59          /*********************************************************************
     60          *
     61          *       trigonometric functions
     62          *
     63          *  NOTE:
     64          *   All trigonometric functions are for internal usage only and
     65          *   use the following conventions:
     66          *
     67          *      Angles: 4096 <==> 360°
     68          *
     69          **********************************************************************
     70          */
     71          
     72          #if GUI_45DEG != 512
     73            #error Wrong define for this library !
     74          #endif
     75          
     76          /*********************************************************************
     77          *
     78          *       sin / cos (internal)
     79          *
     80          *  Angle : 90/1024°
     81          *  Data  : 1/1024
     82          */

   \                                 In section .text, align 4, keep-with-next
     83          static const U16 aSin[] = {
   \                     aSin:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   00006400C800       DC16 0, 100, 200, 297, 392, 483, 569, 650, 724, 792
   \              29018801E301
   \              39028A02D402
   \              1803        
   \   00000014   53038703B203       DC16 851, 903, 946, 980, 1004, 1019, 1024
   \              D403EC03FB03
   \              0004        
   \   00000022   0000               DC8 0, 0
     84            0,       /*  1/16 *90° */
     85            100,     /*  1/16 *90° */
     86            200,     /*  2/16 *90° */
     87            297,     /*  3/16 *90° */
     88            392,     /*  4/16 *90° */
     89            483,     /*  5/16 *90° */
     90            569,     /*  6/16 *90° */
     91            650,     /*  7/16 *90° */
     92            724,     /*  8/16 *90° */
     93            792,     /*  9/16 *90° */
     94            851,     /* 10/16 *90° */
     95            903,     /* 11/16 *90° */
     96            946,     /* 12/16 *90° */
     97            980,     /* 13/16 *90° */
     98            1004,    /* 14/16 *90° */
     99            1019,    /* 15/16 *90° */
    100            1024     /* 16/16 *90° */
    101          };
    102          
    103          /*********************************************************************
    104          *
    105          *       GUI_sin
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          int GUI_sin(int angle) {
    108            char IsNeg =0;
    109            int i;
    110          	U16 Faktor;
    111            U32 t;
    112            angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
   \                     GUI_sin:
   \   00000000   000AA0E1           LSL      R0,R0,#+20
    113            if (angle> 2* GUI_90DEG) {
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   200AA0E1           LSR      R0,R0,#+20
   \   0000000C   802E82E3           ORR      R2,R2,#0x800
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   020050E1           CMP      R0,R2
   \   00000018   030000BA           BLT      ??GUI_sin_0
    114              angle -= 2* GUI_90DEG;
   \   0000001C   FF10E0E3           MVN      R1,#+255
   \   00000020   701EC1E3           BIC      R1,R1,#0x700
   \   00000024   000081E0           ADD      R0,R1,R0
    115              IsNeg =1;
   \   00000028   0110A0E3           MOV      R1,#+1
    116            }
    117            if (angle> GUI_90DEG) {  /* between 90-180 */
   \                     ??GUI_sin_0:
   \   0000002C   402E42E2           SUB      R2,R2,#+1024
   \   00000030   020050E1           CMP      R0,R2
    118              angle = 2*GUI_90DEG-angle;   /* use sine symetry */
   \   00000034   800E60A2           RSBGE    R0,R0,#+2048
    119            }
    120            /* Now angle is reduced to 0° <= <= 90° */
    121            i = angle>>6;
    122            {
    123              Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
    124              t = aSin[i]*(U32)Faktor;
   \   00000038   ............       ADRL     R3,aSin
   \              ....        
   \   00000040   4023A0E1           ASR      R2,R0,#+6
   \   00000044   3F0000E2           AND      R0,R0,#0x3F
   \   00000048   82C083E0           ADD      R12,R3,R2, LSL #+1
   \   0000004C   400060E2           RSB      R0,R0,#+64
   \   00000050   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000054   0008A0E1           LSL      R0,R0,#+16
   \   00000058   2008A0E1           LSR      R0,R0,#+16
   \   0000005C   900C0CE0           MUL      R12,R0,R12
    125              if (Faktor !=(1<<6)) {
   \   00000060   400050E3           CMP      R0,#+64
   \   00000064   0300000A           BEQ      ??GUI_sin_1
    126                t += aSin[i+1]*((1<<6)-Faktor);
   \   00000068   822083E0           ADD      R2,R3,R2, LSL #+1
   \   0000006C   B220D2E1           LDRH     R2,[R2, #+2]
   \   00000070   400060E2           RSB      R0,R0,#+64
   \   00000074   90C22CE0           MLA      R12,R0,R2,R12
    127              }
    128          	}
    129            t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
   \                     ??GUI_sin_1:
   \   00000078   20008CE2           ADD      R0,R12,#+32
   \   0000007C   2003A0E1           LSR      R0,R0,#+6
    130            return (IsNeg) ? 0-t : t;
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   00006012           RSBNE    R0,R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    131          }
    132          
    133          /*********************************************************************
    134          *
    135          *       GUI_cos
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          int GUI_cos(int angle) {
    138            return GUI_sin(angle+GUI_90DEG);
   \                     GUI_cos:
   \   00000000   400E80E2           ADD      R0,R0,#+1024
   \   00000004   000AA0E1           LSL      R0,R0,#+20
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   200AA0E1           LSR      R0,R0,#+20
   \   00000010   802E82E3           ORR      R2,R2,#0x800
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   020050E1           CMP      R0,R2
   \   0000001C   030000BA           BLT      ??GUI_cos_0
   \   00000020   FF10E0E3           MVN      R1,#+255
   \   00000024   701EC1E3           BIC      R1,R1,#0x700
   \   00000028   000081E0           ADD      R0,R1,R0
   \   0000002C   0110A0E3           MOV      R1,#+1
   \                     ??GUI_cos_0:
   \   00000030   402E42E2           SUB      R2,R2,#+1024
   \   00000034   020050E1           CMP      R0,R2
   \   00000038   800E60A2           RSBGE    R0,R0,#+2048
   \   0000003C   ............       ADRL     R3,aSin
   \              ....        
   \   00000044   4023A0E1           ASR      R2,R0,#+6
   \   00000048   3F0000E2           AND      R0,R0,#0x3F
   \   0000004C   82C083E0           ADD      R12,R3,R2, LSL #+1
   \   00000050   400060E2           RSB      R0,R0,#+64
   \   00000054   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000058   0008A0E1           LSL      R0,R0,#+16
   \   0000005C   2008A0E1           LSR      R0,R0,#+16
   \   00000060   900C0CE0           MUL      R12,R0,R12
   \   00000064   400050E3           CMP      R0,#+64
   \   00000068   0300000A           BEQ      ??GUI_cos_1
   \   0000006C   822083E0           ADD      R2,R3,R2, LSL #+1
   \   00000070   B220D2E1           LDRH     R2,[R2, #+2]
   \   00000074   400060E2           RSB      R0,R0,#+64
   \   00000078   90C22CE0           MLA      R12,R0,R2,R12
   \                     ??GUI_cos_1:
   \   0000007C   20008CE2           ADD      R0,R12,#+32
   \   00000080   2003A0E1           LSR      R0,R0,#+6
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   00006012           RSBNE    R0,R0,#+0
   \   0000008C   1EFF2FE1           BX       LR               ;; return
    139          }
    140          
    141          /*********************************************************************
    142          *
    143          *       atan() (internal)
    144          *
    145          *  Angle : 360/4096°
    146          */

   \                                 In section .text, align 4, keep-with-next
    147          const I16 aTan[] = {
   \                     aTan:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   000029005100       DC16 0, 41, 81, 121, 160, 197, 234, 269, 302, 334
   \              7900A000C500
   \              EA000D012E01
   \              4E01        
   \   00000014   6C018901A301       DC16 364, 393, 419, 445, 469, 491, 512
   \              BD01D501EB01
   \              0002        
   \   00000022   0000               DC8 0, 0
    148            0,       /* atan(0/16) */
    149            41,      /* atan(1/16) */
    150            81,      /* atan(2/16) */
    151            121,     /* atan(3/16) */
    152            160,     /* atan(4/16) */
    153            197,     /* atan(5/16) */
    154            234,     /* atan(6/16) */
    155            269,     /* atan(7/16) */
    156            302,     /* atan(8/16) */
    157            334,     /* atan(9/16) */
    158            364,     /* atan(10/16) */
    159            393,     /* atan(11/16) */
    160            419,     /* atan(12/16) */
    161            445,     /* atan(13/16) */
    162            469,     /* atan(14/16) */
    163            491,     /* atan(15/16) */
    164            512      /* atan(1) = 45° = 512/1024 */
    165          };
    166          
    167          /*********************************************************************
    168          *
    169          *       _atan0_45
    170          *
    171          * Calculate arctan of q, where q is any where between 0 and 1024
    172          */
    173          static int _atan0_45(int q) {
    174            int r;
    175            int i, Faktor;
    176            /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
    177            q >>=2;    /* make sure we do not exceed 16 bits in calculations */
    178            i = q>>4;
    179            Faktor = (1<<4)-(q&((1<<4)-1));
    180            r = aTan[i]*Faktor;
    181            if (Faktor !=(1<<4)) {
    182              r += aTan[i+1]*((1<<4)-Faktor);
    183            }
    184            r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
    185            return r;
    186          }
    187          
    188          /*********************************************************************
    189          *
    190          *       _atan2
    191          */

   \                                 In section .text, align 4, keep-with-next
    192          static int _atan2(I32 x, I32 y) {
   \                     _atan2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0020B0E1           MOVS     R2,R0
    193            U8 q =0;
   \   00000008   0040A0E3           MOV      R4,#+0
    194            int angle;
    195          /* first make sure we are in angle between 0 and 45° */
    196            if (x<0) {
    197              q=1;
   \   0000000C   0140A043           MOVMI    R4,#+1
    198              x=-x;
   \   00000010   00206242           RSBMI    R2,R2,#+0
    199            }
    200            if (y<0) {
   \   00000014   000051E3           CMP      R1,#+0
    201              q |= (1<<1);
   \   00000018   02408443           ORRMI    R4,R4,#0x2
    202              y=-y;
   \   0000001C   00106142           RSBMI    R1,R1,#+0
    203            }
    204            if (y>x) {
   \   00000020   010052E1           CMP      R2,R1
   \   00000024   030000AA           BGE      ??_atan2_0
    205              int t = y;
   \   00000028   0100A0E1           MOV      R0,R1
    206              y=x;
   \   0000002C   0210A0E1           MOV      R1,R2
    207              x=t;
   \   00000030   0020A0E1           MOV      R2,R0
    208              q |= (1<<2);
   \   00000034   044084E3           ORR      R4,R4,#0x4
    209            }
    210            y <<=10;
    211            y += (x/2);
    212            y /= x;
    213            angle = _atan0_45(y);
   \                     ??_atan2_0:
   \   00000038   A20F82E0           ADD      R0,R2,R2, LSR #+31
   \   0000003C   C000A0E1           ASR      R0,R0,#+1
   \   00000040   010580E0           ADD      R0,R0,R1, LSL #+10
   \   00000044   0210A0E1           MOV      R1,R2
   \   00000048   ........           BL       __aeabi_idiv
   \   0000004C   4001A0E1           ASR      R0,R0,#+2
   \   00000050   ............       ADRL     R2,aTan
   \              ....        
   \   00000058   4012A0E1           ASR      R1,R0,#+4
   \   0000005C   813082E0           ADD      R3,R2,R1, LSL #+1
   \   00000060   F030D3E1           LDRSH    R3,[R3, #+0]
   \   00000064   0F0000E2           AND      R0,R0,#0xF
   \   00000068   100060E2           RSB      R0,R0,#+16
   \   0000006C   800363E1           SMULBB   R3,R0,R3
   \   00000070   100050E3           CMP      R0,#+16
   \   00000074   0300000A           BEQ      ??_atan2_1
   \   00000078   811082E0           ADD      R1,R2,R1, LSL #+1
   \   0000007C   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000080   100060E2           RSB      R0,R0,#+16
   \   00000084   803103E1           SMLABB   R3,R0,R1,R3
   \                     ??_atan2_1:
   \   00000088   080083E2           ADD      R0,R3,#+8
   \   0000008C   C011A0E1           ASR      R1,R0,#+3
   \   00000090   210E80E0           ADD      R0,R0,R1, LSR #+28
   \   00000094   4002A0E1           ASR      R0,R0,#+4
    214            if (q&(1<<2)) { /* y/x reverse ? */
   \   00000098   040014E3           TST      R4,#0x4
    215              angle = GUI_90DEG-angle;
   \   0000009C   400E6012           RSBNE    R0,R0,#+1024
    216            }
    217            if (q&1) {  /* xreverse ? */
   \   000000A0   010014E3           TST      R4,#0x1
    218              angle = GUI_180DEG-angle;
   \   000000A4   800E6012           RSBNE    R0,R0,#+2048
    219            }
    220            if (q&(1<<1)) { /* y-reverse ? */
   \   000000A8   020014E3           TST      R4,#0x2
    221              angle = GUI_360DEG-angle;
   \   000000AC   400D6012           RSBNE    R0,R0,#+4096
    222            }
    223            return angle;
   \   000000B0   1080BDE8           POP      {R4,PC}          ;; return
    224          }
    225          
    226          /*********************************************************************
    227          *
    228          *       _SetLineColor
    229          */
    230          static int _SetLineColor(int i) {
    231            switch (GUI_Context.LineStyle) {
    232            case GUI_LS_DASH:
    233              i = (i + 6) % 16;
    234              return (i < 12);
    235            case GUI_LS_DOT:
    236              i %= 4;
    237              return (i < 2);
    238            case GUI_LS_DASHDOT:
    239              i %= 20;
    240              if (i < 12) {
    241                return 1;
    242              } else if ((i >= 16) && (i < 18)) {
    243                return 1;
    244              }
    245              return 0;
    246            case GUI_LS_DASHDOTDOT:
    247              i %= 24;
    248              if (i < 12) {
    249                return 1;
    250              } else if ((i >= 16) && (i < 18)) {
    251                return 1;
    252              } else if ((i >= 20) && (i < 22)) {
    253                return 1;
    254              } else {
    255                return 0;
    256              }
    257            }
    258            return 0;
    259          }
    260          
    261          /*********************************************************************
    262          *
    263          *       _CalcOrto
    264          */

   \                                 In section .text, align 4, keep-with-next
    265          static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
   \                     _CalcOrto:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0240A0E1           MOV      R4,R2
   \   00000008   0350A0E1           MOV      R5,R3
   \   0000000C   20609DE5           LDR      R6,[SP, #+32]
    266            I32 x,y;
    267            int Angle = _atan2(xDiff, yDiff);
   \   00000010   ........           BL       _atan2
    268            Angle+= GUI_90DEG;
   \   00000014   400E80E2           ADD      R0,R0,#+1024
    269            x = ( r*(I32)GUI_cos(Angle));
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   F02E82E3           ORR      R2,R2,#0xF00
   \   00000020   403E80E2           ADD      R3,R0,#+1024
   \   00000024   037002E0           AND      R7,R2,R3
   \   00000028   0130A0E3           MOV      R3,#+1
   \   0000002C   803E83E3           ORR      R3,R3,#0x800
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   00E0A0E3           MOV      LR,#+0
   \   00000038   030057E1           CMP      R7,R3
   \   0000003C   030000BA           BLT      ??_CalcOrto_0
   \   00000040   FFC0E0E3           MVN      R12,#+255
   \   00000044   70CECCE3           BIC      R12,R12,#0x700
   \   00000048   07708CE0           ADD      R7,R12,R7
   \   0000004C   01E0A0E3           MOV      LR,#+1
   \                     ??_CalcOrto_0:
   \   00000050   40CE43E2           SUB      R12,R3,#+1024
   \   00000054   0C0057E1           CMP      R7,R12
   \   00000058   807E67A2           RSBGE    R7,R7,#+2048
   \   0000005C   4783A0E1           ASR      R8,R7,#+6
   \   00000060   3F7007E2           AND      R7,R7,#0x3F
   \   00000064   409067E2           RSB      R9,R7,#+64
   \   00000068   ............       ADRL     R7,aSin
   \              ....        
   \   00000070   0998A0E1           LSL      R9,R9,#+16
   \   00000074   88A087E0           ADD      R10,R7,R8, LSL #+1
   \   00000078   B0A0DAE1           LDRH     R10,[R10, #+0]
   \   0000007C   2998A0E1           LSR      R9,R9,#+16
   \   00000080   400059E3           CMP      R9,#+64
   \   00000084   990A0AE0           MUL      R10,R9,R10
   \   00000088   0300000A           BEQ      ??_CalcOrto_1
   \   0000008C   888087E0           ADD      R8,R7,R8, LSL #+1
   \   00000090   B280D8E1           LDRH     R8,[R8, #+2]
   \   00000094   409069E2           RSB      R9,R9,#+64
   \   00000098   99A82AE0           MLA      R10,R9,R8,R10
   \                     ??_CalcOrto_1:
   \   0000009C   20808AE2           ADD      R8,R10,#+32
   \   000000A0   2883A0E1           LSR      R8,R8,#+6
   \   000000A4   00005EE3           CMP      LR,#+0
   \   000000A8   00806812           RSBNE    R8,R8,#+0
   \   000000AC   98040EE0           MUL      LR,R8,R4
    270            y = ( r*(I32)GUI_sin(Angle));
   \   000000B0   000002E0           AND      R0,R2,R0
   \   000000B4   030050E1           CMP      R0,R3
   \   000000B8   030000BA           BLT      ??_CalcOrto_2
   \   000000BC   FF10E0E3           MVN      R1,#+255
   \   000000C0   701EC1E3           BIC      R1,R1,#0x700
   \   000000C4   000081E0           ADD      R0,R1,R0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \                     ??_CalcOrto_2:
   \   000000CC   0C0050E1           CMP      R0,R12
   \   000000D0   800E60A2           RSBGE    R0,R0,#+2048
   \   000000D4   4023A0E1           ASR      R2,R0,#+6
   \   000000D8   3F0000E2           AND      R0,R0,#0x3F
   \   000000DC   823087E0           ADD      R3,R7,R2, LSL #+1
   \   000000E0   400060E2           RSB      R0,R0,#+64
   \   000000E4   B030D3E1           LDRH     R3,[R3, #+0]
   \   000000E8   0008A0E1           LSL      R0,R0,#+16
   \   000000EC   2008A0E1           LSR      R0,R0,#+16
   \   000000F0   900303E0           MUL      R3,R0,R3
   \   000000F4   400050E3           CMP      R0,#+64
   \   000000F8   0300000A           BEQ      ??_CalcOrto_3
   \   000000FC   822087E0           ADD      R2,R7,R2, LSL #+1
   \   00000100   B220D2E1           LDRH     R2,[R2, #+2]
   \   00000104   400060E2           RSB      R0,R0,#+64
   \   00000108   903223E0           MLA      R3,R0,R2,R3
   \                     ??_CalcOrto_3:
   \   0000010C   200083E2           ADD      R0,R3,#+32
   \   00000110   2003A0E1           LSR      R0,R0,#+6
   \   00000114   000051E3           CMP      R1,#+0
   \   00000118   00006012           RSBNE    R0,R0,#+0
   \   0000011C   900401E0           MUL      R1,R0,R4
    271            x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
   \   00000120   00005EE3           CMP      LR,#+0
   \   00000124   0300005A           BPL      ??_CalcOrto_4
   \   00000128   800F6EE2           RSB      R0,LR,#+512
   \   0000012C   4005A0E1           ASR      R0,R0,#+10
   \   00000130   000060E2           RSB      R0,R0,#+0
   \   00000134   010000EA           B        ??_CalcOrto_5
   \                     ??_CalcOrto_4:
   \   00000138   800F8EE2           ADD      R0,LR,#+512
   \   0000013C   4005A0E1           ASR      R0,R0,#+10
    272            y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
   \                     ??_CalcOrto_5:
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   0300005A           BPL      ??_CalcOrto_6
   \   00000148   801F61E2           RSB      R1,R1,#+512
   \   0000014C   4115A0E1           ASR      R1,R1,#+10
   \   00000150   001061E2           RSB      R1,R1,#+0
   \   00000154   010000EA           B        ??_CalcOrto_7
   \                     ??_CalcOrto_6:
   \   00000158   801F81E2           ADD      R1,R1,#+512
   \   0000015C   4115A0E1           ASR      R1,R1,#+10
    273            *px = x;
   \                     ??_CalcOrto_7:
   \   00000160   000085E5           STR      R0,[R5, #+0]
    274            *py = y;
   \   00000164   001086E5           STR      R1,[R6, #+0]
    275          }
   \   00000168   F087BDE8           POP      {R4-R10,PC}      ;; return
    276          
    277          /*********************************************************************
    278          *
    279          *       _DrawLineEnd
    280          */
    281          static void _DrawLineEnd(int x0, int y0) {
    282            switch (GUI_Context.PenShape) {
    283            case GUI_PS_ROUND:
    284              GL_DrawPoint(x0,y0);
    285              break;
    286            case GUI_PS_FLAT:
    287              break;
    288            }
    289          }
    290          
    291          /*********************************************************************
    292          *
    293          *       Public code
    294          *
    295          **********************************************************************
    296          */
    297          /*********************************************************************
    298          *
    299          *       GL_DrawLine1Ex
    300          */

   \                                 In section .text, align 4, keep-with-next
    301          void GL_DrawLine1Ex(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
   \                     GL_DrawLine1Ex:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0150A0E1           MOV      R5,R1
    302            int xdiff = x1 - x0;
    303            int ydiff = y1 - y0;
    304            int xdiffby2;
    305            int i;
    306            char XYSwapped = 0;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    307            int Dir;
    308            int PixelCnt = * pPixelCnt;
   \   00000010   30109DE5           LDR      R1,[SP, #+48]
   \   00000014   08C08DE5           STR      R12,[SP, #+8]
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   006042E0           SUB      R6,R2,R0
   \   00000020   057043E0           SUB      R7,R3,R5
   \   00000024   0140A0E1           MOV      R4,R1
    309          /* check if no line */
    310            if (!(xdiff | ydiff)) {
   \   00000028   06C097E1           ORRS     R12,R7,R6
   \   0000002C   0200001A           BNE      ??GL_DrawLine1Ex_3
    311              GL_DrawPoint(x0, y0);
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   ........           BL       GL_DrawPoint
    312              return;
   \   00000038   3C0100EA           B        ??GL_DrawLine1Ex_4
    313            }
    314          /* check if we swap x and y for calculation */
    315            if (Abs(xdiff) < Abs(ydiff)) {
   \                     ??GL_DrawLine1Ex_3:
   \   0000003C   06C0B0E1           MOVS     R12,R6
   \   00000040   00C06C42           RSBMI    R12,R12,#+0
   \   00000044   07E0B0E1           MOVS     LR,R7
   \   00000048   00E06E42           RSBMI    LR,LR,#+0
   \   0000004C   0E005CE1           CMP      R12,LR
   \   00000050   0A0000AA           BGE      ??GL_DrawLine1Ex_5
    316              _SwapInt(&xdiff, &ydiff);
   \   00000054   06C0A0E1           MOV      R12,R6
   \   00000058   0760A0E1           MOV      R6,R7
   \   0000005C   0C70A0E1           MOV      R7,R12
    317              _SwapInt(&x0, &y0);
   \   00000060   00C0A0E1           MOV      R12,R0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   0C50A0E1           MOV      R5,R12
    318              _SwapInt(&x1, &y1);
   \   0000006C   02C0A0E1           MOV      R12,R2
   \   00000070   0320A0E1           MOV      R2,R3
    319              XYSwapped = 1;
   \   00000074   01E0A0E3           MOV      LR,#+1
   \   00000078   0C30A0E1           MOV      R3,R12
   \   0000007C   08E08DE5           STR      LR,[SP, #+8]
    320            }
    321          /* make sure line direction is positive */
    322            if (xdiff != Abs(xdiff)) {
   \                     ??GL_DrawLine1Ex_5:
   \   00000080   06C0B0E1           MOVS     R12,R6
   \   00000084   00C06C42           RSBMI    R12,R12,#+0
   \   00000088   0C0056E1           CMP      R6,R12
   \   0000008C   0700000A           BEQ      ??GL_DrawLine1Ex_6
    323              xdiff = -xdiff;
    324              ydiff = -ydiff;
    325              _SwapInt(&x0, &x1);
   \   00000090   00C0A0E1           MOV      R12,R0
   \   00000094   0200A0E1           MOV      R0,R2
   \   00000098   0C20A0E1           MOV      R2,R12
   \   0000009C   006066E2           RSB      R6,R6,#+0
   \   000000A0   007067E2           RSB      R7,R7,#+0
    326              _SwapInt(&y0, &y1);
   \   000000A4   0350A0E1           MOV      R5,R3
    327              Dir = -1;
   \   000000A8   00C0E0E3           MVN      R12,#+0
   \   000000AC   000000EA           B        ??GL_DrawLine1Ex_7
    328            } else {
    329              Dir = 1;
   \                     ??GL_DrawLine1Ex_6:
   \   000000B0   01C0A0E3           MOV      R12,#+1
   \                     ??GL_DrawLine1Ex_7:
   \   000000B4   00C08DE5           STR      R12,[SP, #+0]
    330            }
    331          /* Draw horizontal or vertical line if possible */
    332            if (ydiff == 0) {
   \   000000B8   000057E3           CMP      R7,#+0
   \   000000BC   9A00001A           BNE      ??GL_DrawLine1Ex_8
    333              if (XYSwapped) {
   \   000000C0   ........           LDR      R8,??DataTable8
   \   000000C4   08309DE5           LDR      R3,[SP, #+8]
   \   000000C8   1A10D8E5           LDRB     R1,[R8, #+26]
   \   000000CC   000053E3           CMP      R3,#+0
   \   000000D0   4A00000A           BEQ      ??GL_DrawLine1Ex_9
    334                if (GUI_Context.LineStyle == GUI_LS_SOLID) {
   \   000000D4   000051E3           CMP      R1,#+0
   \   000000D8   0300001A           BNE      ??GL_DrawLine1Ex_10
    335                  LCD_DrawVLine(y0, x0, x1);
   \   000000DC   0010A0E1           MOV      R1,R0
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           BL       LCD_DrawVLine
   \   000000E8   100100EA           B        ??GL_DrawLine1Ex_4
    336                } else {
    337                  for (i = 0; i <= xdiff; i++) {
   \                     ??GL_DrawLine1Ex_10:
   \   000000EC   0090A0E3           MOV      R9,#+0
   \   000000F0   000056E3           CMP      R6,#+0
   \   000000F4   1A00004A           BMI      ??GL_DrawLine1Ex_11
   \   000000F8   0070A0E1           MOV      R7,R0
   \   000000FC   18A0A0E3           MOV      R10,#+24
    338                    if (!_SetLineColor(PixelCnt++)) {
   \                     ??GL_DrawLine1Ex_12:
   \   00000100   1A00D8E5           LDRB     R0,[R8, #+26]
   \   00000104   010040E2           SUB      R0,R0,#+1
   \   00000108   030050E3           CMP      R0,#+3
   \   0000010C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GL_DrawLine1Ex_0:
   \   00000110   1800008A           BHI      ??GL_DrawLine1Ex_13
   \   00000114   320000EA           B        ??GL_DrawLine1Ex_14
   \   00000118   2A0000EA           B        ??GL_DrawLine1Ex_15
   \   0000011C   1C0000EA           B        ??GL_DrawLine1Ex_16
   \   00000120   FFFFFFEA           B        ??GL_DrawLine1Ex_17
   \                     ??GL_DrawLine1Ex_17:
   \   00000124   ........           LDR      R0,??DataTable8_1  ;; 0x2aaaaaab
   \   00000128   9410C0E0           SMULL    R1,R0,R4,R0
   \   0000012C   4001B0E1           ASRS     R0,R0,#+2
   \   00000130   01008042           ADDMI    R0,R0,#+1
   \   00000134   9A0000E0           MUL      R0,R10,R0
   \   00000138   000044E0           SUB      R0,R4,R0
   \   0000013C   0C0050E3           CMP      R0,#+12
   \   00000140   020000BA           BLT      ??GL_DrawLine1Ex_18
   \   00000144   101040E2           SUB      R1,R0,#+16
   \   00000148   020051E3           CMP      R1,#+2
   \   0000014C   0600002A           BCS      ??GL_DrawLine1Ex_19
   \                     ??GL_DrawLine1Ex_18:
   \   00000150   014084E2           ADD      R4,R4,#+1
   \                     ??GL_DrawLine1Ex_20:
   \   00000154   019089E2           ADD      R9,R9,#+1
   \   00000158   017087E2           ADD      R7,R7,#+1
   \   0000015C   090056E1           CMP      R6,R9
   \   00000160   E6FFFFAA           BGE      ??GL_DrawLine1Ex_12
    339                      LCD_HL_DrawPixel(y0, x0 + i);
    340                    }
    341                  }
    342                  *pPixelCnt = PixelCnt - 1;
   \                     ??GL_DrawLine1Ex_11:
   \   00000164   010044E2           SUB      R0,R4,#+1
   \   00000168   EE0000EA           B        ??GL_DrawLine1Ex_21
   \                     ??GL_DrawLine1Ex_19:
   \   0000016C   140040E2           SUB      R0,R0,#+20
   \   00000170   020050E3           CMP      R0,#+2
   \   00000174   F5FFFF3A           BCC      ??GL_DrawLine1Ex_18
   \                     ??GL_DrawLine1Ex_13:
   \   00000178   942098E5           LDR      R2,[R8, #+148]
   \   0000017C   014084E2           ADD      R4,R4,#+1
   \   00000180   0710A0E1           MOV      R1,R7
   \   00000184   0500A0E1           MOV      R0,R5
   \   00000188   042092E5           LDR      R2,[R2, #+4]
   \   0000018C   32FF2FE1           BLX      R2
   \   00000190   EFFFFFEA           B        ??GL_DrawLine1Ex_20
    343                }
    344              } else {
   \                     ??GL_DrawLine1Ex_16:
   \   00000194   ........           LDR      R0,??DataTable8_2  ;; 0x66666667
   \   00000198   9410C0E0           SMULL    R1,R0,R4,R0
   \   0000019C   1410A0E3           MOV      R1,#+20
   \   000001A0   C001B0E1           ASRS     R0,R0,#+3
   \   000001A4   01008042           ADDMI    R0,R0,#+1
   \   000001A8   910000E0           MUL      R0,R1,R0
   \   000001AC   000044E0           SUB      R0,R4,R0
   \   000001B0   0C0050E3           CMP      R0,#+12
   \   000001B4   E5FFFFBA           BLT      ??GL_DrawLine1Ex_18
   \   000001B8   100040E2           SUB      R0,R0,#+16
   \   000001BC   020050E3           CMP      R0,#+2
   \   000001C0   E2FFFF3A           BCC      ??GL_DrawLine1Ex_18
   \   000001C4   EBFFFFEA           B        ??GL_DrawLine1Ex_13
   \                     ??GL_DrawLine1Ex_15:
   \   000001C8   C400A0E1           ASR      R0,R4,#+1
   \   000001CC   200F84E0           ADD      R0,R4,R0, LSR #+30
   \   000001D0   4001A0E1           ASR      R0,R0,#+2
   \   000001D4   000144E0           SUB      R0,R4,R0, LSL #+2
   \   000001D8   020050E3           CMP      R0,#+2
   \                     ??GL_DrawLine1Ex_22:
   \   000001DC   E5FFFFAA           BGE      ??GL_DrawLine1Ex_13
   \   000001E0   DAFFFFEA           B        ??GL_DrawLine1Ex_18
   \                     ??GL_DrawLine1Ex_14:
   \   000001E4   060084E2           ADD      R0,R4,#+6
   \   000001E8   C011A0E1           ASR      R1,R0,#+3
   \   000001EC   211E80E0           ADD      R1,R0,R1, LSR #+28
   \   000001F0   4112A0E1           ASR      R1,R1,#+4
   \   000001F4   010240E0           SUB      R0,R0,R1, LSL #+4
   \   000001F8   0C0050E3           CMP      R0,#+12
   \   000001FC   F6FFFFEA           B        ??GL_DrawLine1Ex_22
    345                if (GUI_Context.LineStyle == GUI_LS_SOLID) {
   \                     ??GL_DrawLine1Ex_9:
   \   00000200   000051E3           CMP      R1,#+0
   \   00000204   0400001A           BNE      ??GL_DrawLine1Ex_23
    346                  LCD_HL_DrawHLine(x0, y0, x1);
   \   00000208   943098E5           LDR      R3,[R8, #+148]
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   003093E5           LDR      R3,[R3, #+0]
   \   00000214   33FF2FE1           BLX      R3
   \   00000218   C40000EA           B        ??GL_DrawLine1Ex_4
    347                } else {
    348                  for (i = 0; i <= xdiff; i++) {
   \                     ??GL_DrawLine1Ex_23:
   \   0000021C   0090A0E3           MOV      R9,#+0
   \   00000220   000056E3           CMP      R6,#+0
   \   00000224   CEFFFF4A           BMI      ??GL_DrawLine1Ex_11
   \   00000228   0070A0E1           MOV      R7,R0
   \   0000022C   18A0A0E3           MOV      R10,#+24
    349                    if (!_SetLineColor(PixelCnt++)) {
   \                     ??GL_DrawLine1Ex_24:
   \   00000230   1A00D8E5           LDRB     R0,[R8, #+26]
   \   00000234   010040E2           SUB      R0,R0,#+1
   \   00000238   030050E3           CMP      R0,#+3
   \   0000023C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GL_DrawLine1Ex_1:
   \   00000240   1700008A           BHI      ??GL_DrawLine1Ex_25
   \   00000244   310000EA           B        ??GL_DrawLine1Ex_26
   \   00000248   290000EA           B        ??GL_DrawLine1Ex_27
   \   0000024C   1B0000EA           B        ??GL_DrawLine1Ex_28
   \   00000250   FFFFFFEA           B        ??GL_DrawLine1Ex_29
   \                     ??GL_DrawLine1Ex_29:
   \   00000254   ........           LDR      R0,??DataTable8_1  ;; 0x2aaaaaab
   \   00000258   9410C0E0           SMULL    R1,R0,R4,R0
   \   0000025C   4001B0E1           ASRS     R0,R0,#+2
   \   00000260   01008042           ADDMI    R0,R0,#+1
   \   00000264   9A0000E0           MUL      R0,R10,R0
   \   00000268   000044E0           SUB      R0,R4,R0
   \   0000026C   0C0050E3           CMP      R0,#+12
   \   00000270   020000BA           BLT      ??GL_DrawLine1Ex_30
   \   00000274   101040E2           SUB      R1,R0,#+16
   \   00000278   020051E3           CMP      R1,#+2
   \   0000027C   0500002A           BCS      ??GL_DrawLine1Ex_31
   \                     ??GL_DrawLine1Ex_30:
   \   00000280   014084E2           ADD      R4,R4,#+1
   \                     ??GL_DrawLine1Ex_32:
   \   00000284   019089E2           ADD      R9,R9,#+1
   \   00000288   017087E2           ADD      R7,R7,#+1
   \   0000028C   090056E1           CMP      R6,R9
   \   00000290   E6FFFFAA           BGE      ??GL_DrawLine1Ex_24
   \   00000294   B2FFFFEA           B        ??GL_DrawLine1Ex_11
   \                     ??GL_DrawLine1Ex_31:
   \   00000298   140040E2           SUB      R0,R0,#+20
   \   0000029C   020050E3           CMP      R0,#+2
   \   000002A0   F6FFFF3A           BCC      ??GL_DrawLine1Ex_30
    350                      LCD_HL_DrawPixel(x0 + i, y0);
   \                     ??GL_DrawLine1Ex_25:
   \   000002A4   942098E5           LDR      R2,[R8, #+148]
   \   000002A8   014084E2           ADD      R4,R4,#+1
   \   000002AC   0510A0E1           MOV      R1,R5
   \   000002B0   0700A0E1           MOV      R0,R7
   \   000002B4   042092E5           LDR      R2,[R2, #+4]
   \   000002B8   32FF2FE1           BLX      R2
   \   000002BC   F0FFFFEA           B        ??GL_DrawLine1Ex_32
    351                    }
    352                  }
    353                  *pPixelCnt = PixelCnt - 1;
    354                }
    355              }
    356              return;
    357            }
   \                     ??GL_DrawLine1Ex_28:
   \   000002C0   ........           LDR      R0,??DataTable8_2  ;; 0x66666667
   \   000002C4   9410C0E0           SMULL    R1,R0,R4,R0
   \   000002C8   1410A0E3           MOV      R1,#+20
   \   000002CC   C001B0E1           ASRS     R0,R0,#+3
   \   000002D0   01008042           ADDMI    R0,R0,#+1
   \   000002D4   910000E0           MUL      R0,R1,R0
   \   000002D8   000044E0           SUB      R0,R4,R0
   \   000002DC   0C0050E3           CMP      R0,#+12
   \   000002E0   E6FFFFBA           BLT      ??GL_DrawLine1Ex_30
   \   000002E4   100040E2           SUB      R0,R0,#+16
   \   000002E8   020050E3           CMP      R0,#+2
   \   000002EC   E3FFFF3A           BCC      ??GL_DrawLine1Ex_30
   \   000002F0   EBFFFFEA           B        ??GL_DrawLine1Ex_25
   \                     ??GL_DrawLine1Ex_27:
   \   000002F4   C400A0E1           ASR      R0,R4,#+1
   \   000002F8   200F84E0           ADD      R0,R4,R0, LSR #+30
   \   000002FC   4001A0E1           ASR      R0,R0,#+2
   \   00000300   000144E0           SUB      R0,R4,R0, LSL #+2
   \   00000304   020050E3           CMP      R0,#+2
   \                     ??GL_DrawLine1Ex_33:
   \   00000308   E5FFFFAA           BGE      ??GL_DrawLine1Ex_25
   \   0000030C   DBFFFFEA           B        ??GL_DrawLine1Ex_30
   \                     ??GL_DrawLine1Ex_26:
   \   00000310   060084E2           ADD      R0,R4,#+6
   \   00000314   C011A0E1           ASR      R1,R0,#+3
   \   00000318   211E80E0           ADD      R1,R0,R1, LSR #+28
   \   0000031C   4112A0E1           ASR      R1,R1,#+4
   \   00000320   010240E0           SUB      R0,R0,R1, LSL #+4
   \   00000324   0C0050E3           CMP      R0,#+12
   \   00000328   F6FFFFEA           B        ??GL_DrawLine1Ex_33
    358            xdiffby2 = xdiff / 2;
   \                     ??GL_DrawLine1Ex_8:
   \   0000032C   A62F86E0           ADD      R2,R6,R6, LSR #+31
   \   00000330   C220A0E1           ASR      R2,R2,#+1
    359            if (ydiff < 0) {
    360              xdiffby2 = -xdiffby2;
    361            }
    362          /* Draw pixel by pixel solid*/
    363            if (GUI_Context.LineStyle == GUI_LS_SOLID) {
   \   00000334   ........           LDR      R8,??DataTable8
   \   00000338   04208DE5           STR      R2,[SP, #+4]
   \   0000033C   0230A041           MOVMI    R3,R2
   \   00000340   1A20D8E5           LDRB     R2,[R8, #+26]
   \   00000344   00306342           RSBMI    R3,R3,#+0
   \   00000348   04308D45           STRMI    R3,[SP, #+4]
   \   0000034C   000052E3           CMP      R2,#+0
   \   00000350   1500001A           BNE      ??GL_DrawLine1Ex_34
    364              for (i = 0; i <= xdiff; i++) {
   \   00000354   0090A0E3           MOV      R9,#+0
   \   00000358   000056E3           CMP      R6,#+0
   \   0000035C   7300004A           BMI      ??GL_DrawLine1Ex_4
   \   00000360   0040A0E1           MOV      R4,R0
    365                I32 l = ((I32)ydiff) * i + xdiffby2;
   \                     ??GL_DrawLine1Ex_35:
   \   00000364   04009DE5           LDR      R0,[SP, #+4]
   \   00000368   990720E0           MLA      R0,R9,R7,R0
    366                int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
   \   0000036C   0610A0E1           MOV      R1,R6
   \   00000370   ........           BL       __aeabi_idiv
   \   00000374   941098E5           LDR      R1,[R8, #+148]
   \   00000378   050080E0           ADD      R0,R0,R5
   \   0000037C   042091E5           LDR      R2,[R1, #+4]
   \   00000380   08109DE5           LDR      R1,[SP, #+8]
   \   00000384   000051E3           CMP      R1,#+0
    367                if (!XYSwapped) {
    368                  LCD_HL_DrawPixel(x0+ i , y);
   \   00000388   0010A001           MOVEQ    R1,R0
   \   0000038C   0400A001           MOVEQ    R0,R4
    369                } else {
    370                  LCD_HL_DrawPixel(y, x0 + i);
   \   00000390   0410A011           MOVNE    R1,R4
   \   00000394   32FF2FE1           BLX      R2
    371                }
    372              }
   \   00000398   019089E2           ADD      R9,R9,#+1
   \   0000039C   014084E2           ADD      R4,R4,#+1
   \   000003A0   090056E1           CMP      R6,R9
   \   000003A4   EEFFFFAA           BGE      ??GL_DrawLine1Ex_35
   \   000003A8   600000EA           B        ??GL_DrawLine1Ex_4
    373          /* Draw pixel by pixel with fill style */
    374            } else {
    375              if (Dir < 0) {
   \                     ??GL_DrawLine1Ex_34:
   \   000003AC   00209DE5           LDR      R2,[SP, #+0]
    376                *pPixelCnt += xdiff;
    377              }
    378              for (i = 0; i <= xdiff; i++) {
   \   000003B0   0090A0E3           MOV      R9,#+0
   \   000003B4   000052E3           CMP      R2,#+0
   \   000003B8   30209D45           LDRMI    R2,[SP, #+48]
   \   000003BC   01108640           ADDMI    R1,R6,R1
   \   000003C0   00108245           STRMI    R1,[R2, #+0]
   \   000003C4   000056E3           CMP      R6,#+0
   \   000003C8   4A00004A           BMI      ??GL_DrawLine1Ex_36
   \   000003CC   0040A0E1           MOV      R4,R0
   \   000003D0   18A0A0E3           MOV      R10,#+24
    379                long l = ((long)ydiff) * i + xdiffby2;
   \                     ??GL_DrawLine1Ex_37:
   \   000003D4   04009DE5           LDR      R0,[SP, #+4]
   \   000003D8   990720E0           MLA      R0,R9,R7,R0
    380                int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
   \   000003DC   0610A0E1           MOV      R1,R6
   \   000003E0   ........           BL       __aeabi_idiv
    381                if (!_SetLineColor((*pPixelCnt) += Dir)) {
   \   000003E4   30109DE5           LDR      R1,[SP, #+48]
   \   000003E8   00209DE5           LDR      R2,[SP, #+0]
   \   000003EC   001091E5           LDR      R1,[R1, #+0]
   \   000003F0   050080E0           ADD      R0,R0,R5
   \   000003F4   011082E0           ADD      R1,R2,R1
   \   000003F8   30209DE5           LDR      R2,[SP, #+48]
   \   000003FC   001082E5           STR      R1,[R2, #+0]
   \   00000400   1A20D8E5           LDRB     R2,[R8, #+26]
   \   00000404   012042E2           SUB      R2,R2,#+1
   \   00000408   030052E3           CMP      R2,#+3
   \   0000040C   02F18F90           ADDLS    PC,PC,R2, LSL #+2
   \                     ??GL_DrawLine1Ex_2:
   \   00000410   1000008A           BHI      ??GL_DrawLine1Ex_38
   \   00000414   2B0000EA           B        ??GL_DrawLine1Ex_39
   \   00000418   230000EA           B        ??GL_DrawLine1Ex_40
   \   0000041C   150000EA           B        ??GL_DrawLine1Ex_41
   \   00000420   FFFFFFEA           B        ??GL_DrawLine1Ex_42
   \                     ??GL_DrawLine1Ex_42:
   \   00000424   ........           LDR      R2,??DataTable8_1  ;; 0x2aaaaaab
   \   00000428   9132C2E0           SMULL    R3,R2,R1,R2
   \   0000042C   4221B0E1           ASRS     R2,R2,#+2
   \   00000430   01208242           ADDMI    R2,R2,#+1
   \   00000434   9A0202E0           MUL      R2,R10,R2
   \   00000438   021041E0           SUB      R1,R1,R2
   \   0000043C   0C0051E3           CMP      R1,#+12
   \   00000440   280000BA           BLT      ??GL_DrawLine1Ex_43
   \   00000444   102041E2           SUB      R2,R1,#+16
   \   00000448   020052E3           CMP      R2,#+2
   \   0000044C   14104122           SUBCS    R1,R1,#+20
   \   00000450   02005123           CMPCS    R1,#+2
   \   00000454   2300003A           BCC      ??GL_DrawLine1Ex_43
   \                     ??GL_DrawLine1Ex_38:
   \   00000458   941098E5           LDR      R1,[R8, #+148]
   \   0000045C   042091E5           LDR      R2,[R1, #+4]
   \   00000460   08109DE5           LDR      R1,[SP, #+8]
   \   00000464   000051E3           CMP      R1,#+0
    382                  if (!XYSwapped) {
    383                    LCD_HL_DrawPixel(x0 + i, y);
   \   00000468   0010A001           MOVEQ    R1,R0
   \   0000046C   0400A001           MOVEQ    R0,R4
   \   00000470   0410A011           MOVNE    R1,R4
   \   00000474   1A0000EA           B        ??GL_DrawLine1Ex_44
    384                  } else {
    385                    LCD_HL_DrawPixel(y, x0 + i);
    386                  }
    387                }
    388              }
   \                     ??GL_DrawLine1Ex_41:
   \   00000478   ........           LDR      R2,??DataTable8_2  ;; 0x66666667
   \   0000047C   9132C2E0           SMULL    R3,R2,R1,R2
   \   00000480   1430A0E3           MOV      R3,#+20
   \   00000484   C221B0E1           ASRS     R2,R2,#+3
   \   00000488   01208242           ADDMI    R2,R2,#+1
   \   0000048C   930202E0           MUL      R2,R3,R2
   \   00000490   021041E0           SUB      R1,R1,R2
   \   00000494   0C0051E3           CMP      R1,#+12
   \   00000498   120000BA           BLT      ??GL_DrawLine1Ex_43
   \   0000049C   101041E2           SUB      R1,R1,#+16
   \   000004A0   020051E3           CMP      R1,#+2
   \   000004A4   0F00003A           BCC      ??GL_DrawLine1Ex_43
   \   000004A8   EAFFFFEA           B        ??GL_DrawLine1Ex_38
   \                     ??GL_DrawLine1Ex_40:
   \   000004AC   C120A0E1           ASR      R2,R1,#+1
   \   000004B0   222F81E0           ADD      R2,R1,R2, LSR #+30
   \   000004B4   4221A0E1           ASR      R2,R2,#+2
   \   000004B8   021141E0           SUB      R1,R1,R2, LSL #+2
   \   000004BC   020051E3           CMP      R1,#+2
   \                     ??GL_DrawLine1Ex_45:
   \   000004C0   E4FFFFAA           BGE      ??GL_DrawLine1Ex_38
   \   000004C4   070000EA           B        ??GL_DrawLine1Ex_43
   \                     ??GL_DrawLine1Ex_39:
   \   000004C8   061081E2           ADD      R1,R1,#+6
   \   000004CC   C121A0E1           ASR      R2,R1,#+3
   \   000004D0   222E81E0           ADD      R2,R1,R2, LSR #+28
   \   000004D4   4222A0E1           ASR      R2,R2,#+4
   \   000004D8   021241E0           SUB      R1,R1,R2, LSL #+4
   \   000004DC   0C0051E3           CMP      R1,#+12
   \   000004E0   F6FFFFEA           B        ??GL_DrawLine1Ex_45
   \                     ??GL_DrawLine1Ex_44:
   \   000004E4   32FF2FE1           BLX      R2
   \                     ??GL_DrawLine1Ex_43:
   \   000004E8   019089E2           ADD      R9,R9,#+1
   \   000004EC   014084E2           ADD      R4,R4,#+1
   \   000004F0   090056E1           CMP      R6,R9
   \   000004F4   B6FFFFAA           BGE      ??GL_DrawLine1Ex_37
    389              if (Dir < 0) {
   \                     ??GL_DrawLine1Ex_36:
   \   000004F8   00009DE5           LDR      R0,[SP, #+0]
   \   000004FC   000050E3           CMP      R0,#+0
   \   00000500   0400005A           BPL      ??GL_DrawLine1Ex_46
    390                *pPixelCnt += xdiff;
   \   00000504   30009DE5           LDR      R0,[SP, #+48]
   \   00000508   30109DE5           LDR      R1,[SP, #+48]
   \   0000050C   000090E5           LDR      R0,[R0, #+0]
   \   00000510   000086E0           ADD      R0,R6,R0
   \   00000514   000081E5           STR      R0,[R1, #+0]
    391              }
    392              *pPixelCnt -= Dir;
   \                     ??GL_DrawLine1Ex_46:
   \   00000518   30009DE5           LDR      R0,[SP, #+48]
   \   0000051C   00109DE5           LDR      R1,[SP, #+0]
   \   00000520   000090E5           LDR      R0,[R0, #+0]
   \   00000524   010040E0           SUB      R0,R0,R1
   \                     ??GL_DrawLine1Ex_21:
   \   00000528   30109DE5           LDR      R1,[SP, #+48]
   \   0000052C   000081E5           STR      R0,[R1, #+0]
   \                     ??GL_DrawLine1Ex_4:
   \   00000530   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000534   F087BDE8           POP      {R4-R10,PC}      ;; return
    393            }
    394          }
    395          
    396          /*********************************************************************
    397          *
    398          *       GL_DrawLine1
    399          */

   \                                 In section .text, align 4, keep-with-next
    400          void GL_DrawLine1(int x0, int y0, int x1, int y1) {
   \                     GL_DrawLine1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    401            unsigned PixelCnt;
    402            PixelCnt = 0;
   \   00000008   00E0A0E3           MOV      LR,#+0
    403            GL_DrawLine1Ex(x0, y0, x1, y1, &PixelCnt);
   \   0000000C   04C08DE2           ADD      R12,SP,#+4
   \   00000010   04E08DE5           STR      LR,[SP, #+4]
   \   00000014   00C08DE5           STR      R12,[SP, #+0]
   \   00000018   ........           BL       GL_DrawLine1Ex
    404          }
   \   0000001C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    405          
    406          /*********************************************************************
    407          *
    408          *       GL_DrawLineEx
    409          */

   \                                 In section .text, align 4, keep-with-next
    410          void GL_DrawLineEx(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
   \                     GL_DrawLineEx:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    411            if (GUI_Context.PenSize ==1) {
   \   00000004   ........           LDR      R8,??DataTable8
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   1820D8E5           LDRB     R2,[R8, #+24]
   \   00000010   20D04DE2           SUB      SP,SP,#+32
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   0370A0E1           MOV      R7,R3
   \   00000020   38009DE5           LDR      R0,[SP, #+56]
   \   00000024   010052E3           CMP      R2,#+1
   \   00000028   0400001A           BNE      ??GL_DrawLineEx_0
    412              GL_DrawLine1Ex(x0,y0,x1,y1,pPixelCnt);
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       GL_DrawLine1Ex
   \   0000003C   470000EA           B        ??GL_DrawLineEx_1
    413            } else {
    414              int xdiff, ydiff;
    415              xdiff = x0-x1;
    416              ydiff = y0-y1;
    417              if (xdiff | ydiff) {
   \                     ??GL_DrawLineEx_0:
   \   00000040   071045E0           SUB      R1,R5,R7
   \   00000044   060044E0           SUB      R0,R4,R6
   \   00000048   003091E1           ORRS     R3,R1,R0
   \   0000004C   4300000A           BEQ      ??GL_DrawLineEx_1
    418                GUI_POINT Poly[4];
    419                int xOff, yOff;
    420                int xOffP, yOffP, xOffM, yOffM;
    421                _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
   \   00000050   04308DE2           ADD      R3,SP,#+4
   \   00000054   00308DE5           STR      R3,[SP, #+0]
   \   00000058   08308DE2           ADD      R3,SP,#+8
   \   0000005C   012042E2           SUB      R2,R2,#+1
   \   00000060   ........           BL       _CalcOrto
    422            /* Do rounding for offsets */
    423                if (xOff >0) {
   \   00000064   08009DE5           LDR      R0,[SP, #+8]
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   A00F81E0           ADD      R0,R1,R0, LSR #+31
   \   00000070   C000A0E1           ASR      R0,R0,#+1
   \   00000074   010051E3           CMP      R1,#+1
   \   00000078   030000BA           BLT      ??GL_DrawLineEx_2
    424                  xOffP = (xOff+1)/2;
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000084   C110A0E1           ASR      R1,R1,#+1
    425                  xOffM =  xOff   /2;
   \   00000088   040000EA           B        ??GL_DrawLineEx_3
    426                } else {
    427                  xOffP =   xOff/2;
   \                     ??GL_DrawLineEx_2:
   \   0000008C   0010A0E1           MOV      R1,R0
    428                  xOffM =  (xOff-1)   /2;
   \   00000090   08009DE5           LDR      R0,[SP, #+8]
   \   00000094   010040E2           SUB      R0,R0,#+1
   \   00000098   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000009C   C000A0E1           ASR      R0,R0,#+1
    429                }
    430                if (yOff >0) {
   \                     ??GL_DrawLineEx_3:
   \   000000A0   04209DE5           LDR      R2,[SP, #+4]
   \   000000A4   0230A0E1           MOV      R3,R2
   \   000000A8   A22F83E0           ADD      R2,R3,R2, LSR #+31
   \   000000AC   C220A0E1           ASR      R2,R2,#+1
   \   000000B0   010053E3           CMP      R3,#+1
   \   000000B4   030000BA           BLT      ??GL_DrawLineEx_4
    431                  yOffP = (yOff+1)/2;
   \   000000B8   013083E2           ADD      R3,R3,#+1
   \   000000BC   A33F83E0           ADD      R3,R3,R3, LSR #+31
   \   000000C0   C330A0E1           ASR      R3,R3,#+1
    432                  yOffM =  yOff   /2;
   \   000000C4   040000EA           B        ??GL_DrawLineEx_5
    433                } else {
    434                  yOffP =   yOff/2;
   \                     ??GL_DrawLineEx_4:
   \   000000C8   0230A0E1           MOV      R3,R2
    435                  yOffM =  (yOff-1)   /2;
   \   000000CC   04209DE5           LDR      R2,[SP, #+4]
   \   000000D0   012042E2           SUB      R2,R2,#+1
   \   000000D4   A22F82E0           ADD      R2,R2,R2, LSR #+31
   \   000000D8   C220A0E1           ASR      R2,R2,#+1
    436                }
    437                Poly[0].x = x0+xOffP;
   \                     ??GL_DrawLineEx_5:
   \   000000DC   04C081E0           ADD      R12,R1,R4
   \   000000E0   BCC0CDE1           STRH     R12,[SP, #+12]
    438                Poly[0].y = y0+yOffP;
   \   000000E4   05C083E0           ADD      R12,R3,R5
   \   000000E8   BEC0CDE1           STRH     R12,[SP, #+14]
    439                Poly[1].x = x0-xOffM;
   \   000000EC   00C044E0           SUB      R12,R4,R0
    440                Poly[1].y = y0-yOffM;
    441                Poly[2].x = x1-xOffM;
   \   000000F0   000046E0           SUB      R0,R6,R0
   \   000000F4   B401CDE1           STRH     R0,[SP, #+20]
    442                Poly[2].y = y1-yOffM;
   \   000000F8   020047E0           SUB      R0,R7,R2
   \   000000FC   B601CDE1           STRH     R0,[SP, #+22]
    443                Poly[3].x = x1+xOffP;
   \   00000100   060081E0           ADD      R0,R1,R6
   \   00000104   B801CDE1           STRH     R0,[SP, #+24]
   \   00000108   B0C1CDE1           STRH     R12,[SP, #+16]
    444                Poly[3].y = y1+yOffP;
   \   0000010C   070083E0           ADD      R0,R3,R7
   \   00000110   02C045E0           SUB      R12,R5,R2
   \   00000114   BA01CDE1           STRH     R0,[SP, #+26]
   \   00000118   B2C1CDE1           STRH     R12,[SP, #+18]
    445                GL_FillPolygon(&Poly[0], 4, 0,0);
   \   0000011C   0030A0E3           MOV      R3,#+0
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0410A0E3           MOV      R1,#+4
   \   00000128   0C008DE2           ADD      R0,SP,#+12
   \   0000012C   ........           BL       GL_FillPolygon
    446                _DrawLineEnd(x0,y0);
   \   00000130   1900D8E5           LDRB     R0,[R8, #+25]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0200001A           BNE      ??GL_DrawLineEx_6
   \   0000013C   0510A0E1           MOV      R1,R5
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       GL_DrawPoint
    447                _DrawLineEnd(x1,y1);
   \                     ??GL_DrawLineEx_6:
   \   00000148   1900D8E5           LDRB     R0,[R8, #+25]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0200001A           BNE      ??GL_DrawLineEx_1
   \   00000154   0710A0E1           MOV      R1,R7
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   ........           BL       GL_DrawPoint
    448              }
    449            }
    450          }
   \                     ??GL_DrawLineEx_1:
   \   00000160   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   00000164   F081BDE8           POP      {R4-R8,PC}       ;; return
    451          
    452          /*********************************************************************
    453          *
    454          *       GL_DrawLine
    455          */

   \                                 In section .text, align 4, keep-with-next
    456          void GL_DrawLine(int x0, int y0, int x1, int y1) {
   \                     GL_DrawLine:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    457            unsigned PixelCnt;
    458            PixelCnt = 0;
   \   00000008   00E0A0E3           MOV      LR,#+0
    459            GL_DrawLineEx(x0, y0, x1, y1, &PixelCnt);
   \   0000000C   04C08DE2           ADD      R12,SP,#+4
   \   00000010   04E08DE5           STR      LR,[SP, #+4]
   \   00000014   00C08DE5           STR      R12,[SP, #+0]
   \   00000018   ........           BL       GL_DrawLineEx
    460          }
   \   0000001C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    461          
    462          /*********************************************************************
    463          *
    464          *       GUI_DrawLine
    465          */

   \                                 In section .text, align 4, keep-with-next
    466          void GUI_DrawLine(int x0, int y0, int x1, int y1) {
   \                     GUI_DrawLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0340A0E1           MOV      R4,R3
    467            GUI_LOCK();
   \   00000018   ........           BL       GUI_Lock
    468            #if (GUI_WINSUPPORT)
    469              WM_ADDORG(x0,y0);
   \   0000001C   ........           LDR      R0,??DataTable8
   \   00000020   401090E5           LDR      R1,[R0, #+64]
   \   00000024   440090E5           LDR      R0,[R0, #+68]
   \   00000028   077080E0           ADD      R7,R0,R7
    470              WM_ADDORG(x1,y1);
   \   0000002C   044080E0           ADD      R4,R0,R4
   \   00000030   066081E0           ADD      R6,R1,R6
   \   00000034   055081E0           ADD      R5,R1,R5
    471              WM_ITERATE_START(NULL); {
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   ........           BL       WM__InitIVRSearch
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00000A           BEQ      ??GUI_DrawLine_0
    472            #endif
    473            GL_DrawLine (x0, y0, x1, y1);
   \                     ??GUI_DrawLine_1:
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   04108DE5           STR      R1,[SP, #+4]
   \   00000054   00008DE5           STR      R0,[SP, #+0]
   \   00000058   0430A0E1           MOV      R3,R4
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   ........           BL       GL_DrawLineEx
    474            #if (GUI_WINSUPPORT)
    475              } WM_ITERATE_END();
   \   0000006C   ........           BL       WM__GetNextIVR
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   F3FFFF1A           BNE      ??GUI_DrawLine_1
    476            #endif
    477            GUI_UNLOCK();
   \                     ??GUI_DrawLine_0:
   \   00000078   ........           BL       GUI_Unlock
    478          }
   \   0000007C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000080   F080BDE8           POP      {R4-R7,PC}       ;; return
    479          
    480          /*********************************************************************
    481          *
    482          *       Draw Line to group
    483          *
    484          **********************************************************************
    485          */
    486          /*********************************************************************
    487          *
    488          *       GUI_DrawLineRel
    489          */

   \                                 In section .text, align 4, keep-with-next
    490          void GUI_DrawLineRel(int dx, int dy) {
   \                     GUI_DrawLineRel:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    491            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    492            #if (GUI_WINSUPPORT)
    493              WM_ITERATE_START(NULL); {
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       WM__InitIVRSearch
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0C00000A           BEQ      ??GUI_DrawLineRel_0
    494            #endif
    495            GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY,
    496                         GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy);
   \                     ??GUI_DrawLineRel_1:
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   ........           LDR      R1,??DataTable8
   \   00000030   04208DE2           ADD      R2,SP,#+4
   \   00000034   F602D1E1           LDRSH    R0,[R1, #+38]
   \   00000038   F812D1E1           LDRSH    R1,[R1, #+40]
   \   0000003C   00208DE5           STR      R2,[SP, #+0]
   \   00000040   002084E0           ADD      R2,R4,R0
   \   00000044   013085E0           ADD      R3,R5,R1
   \   00000048   ........           BL       GL_DrawLineEx
    497            #if (GUI_WINSUPPORT)
    498              } WM_ITERATE_END();
   \   0000004C   ........           BL       WM__GetNextIVR
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F2FFFF1A           BNE      ??GUI_DrawLineRel_1
    499            #endif
    500            GUI_MoveRel(dx,dy);
   \                     ??GUI_DrawLineRel_0:
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       GUI_MoveRel
    501            GUI_UNLOCK();
   \   00000064   ........           BL       GUI_Unlock
    502          }
   \   00000068   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    503          
    504          /*********************************************************************
    505          *
    506          *       GL_DrawLineToEx
    507          */

   \                                 In section .text, align 4, keep-with-next
    508          void GL_DrawLineToEx(int x, int y, unsigned * pPixelCnt) {
   \                     GL_DrawLineToEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    509            GL_DrawLineEx(GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y, pPixelCnt);
   \   00000008   ........           LDR      R6,??DataTable8
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   00208DE5           STR      R2,[SP, #+0]
   \   00000018   0530A0E1           MOV      R3,R5
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   F812D6E1           LDRSH    R1,[R6, #+40]
   \   00000024   F602D6E1           LDRSH    R0,[R6, #+38]
   \   00000028   ........           BL       GL_DrawLineEx
    510            GUI_Context.DrawPosX = x;
   \   0000002C   B642C6E1           STRH     R4,[R6, #+38]
    511            GUI_Context.DrawPosY = y;
   \   00000030   B852C6E1           STRH     R5,[R6, #+40]
    512          }
   \   00000034   08D08DE2           ADD      SP,SP,#+8
   \   00000038   7080BDE8           POP      {R4-R6,PC}       ;; return
    513          
    514          /*********************************************************************
    515          *
    516          *       GL_DrawLineTo
    517          */

   \                                 In section .text, align 4, keep-with-next
    518          void GL_DrawLineTo(int x, int y) {
   \                     GL_DrawLineTo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    519            unsigned PixelCnt;
    520            PixelCnt = 0;
   \   00000010   0010A0E3           MOV      R1,#+0
    521            GL_DrawLineToEx(x, y, &PixelCnt);
   \   00000014   ........           LDR      R6,??DataTable8
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   04108DE5           STR      R1,[SP, #+4]
   \   00000020   00008DE5           STR      R0,[SP, #+0]
   \   00000024   0530A0E1           MOV      R3,R5
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   F812D6E1           LDRSH    R1,[R6, #+40]
   \   00000030   F602D6E1           LDRSH    R0,[R6, #+38]
   \   00000034   ........           BL       GL_DrawLineEx
   \   00000038   B642C6E1           STRH     R4,[R6, #+38]
   \   0000003C   B852C6E1           STRH     R5,[R6, #+40]
    522          }
   \   00000040   08D08DE2           ADD      SP,SP,#+8
   \   00000044   7080BDE8           POP      {R4-R6,PC}       ;; return
    523          
    524          /*********************************************************************
    525          *
    526          *       GUI_DrawLineTo
    527          */

   \                                 In section .text, align 4, keep-with-next
    528          void GUI_DrawLineTo(int x, int y) {
   \                     GUI_DrawLineTo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    529            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    530            #if (GUI_WINSUPPORT)
    531              WM_ADDORG(x,y);
   \   00000014   ........           LDR      R4,??DataTable8
   \   00000018   400094E5           LDR      R0,[R4, #+64]
   \   0000001C   055080E0           ADD      R5,R0,R5
   \   00000020   440094E5           LDR      R0,[R4, #+68]
   \   00000024   066080E0           ADD      R6,R0,R6
    532              WM_ITERATE_START(NULL); {
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   ........           BL       WM__InitIVRSearch
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0B00000A           BEQ      ??GUI_DrawLineTo_0
    533            #endif
    534            GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y);
   \                     ??GUI_DrawLineTo_1:
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   0630A0E1           MOV      R3,R6
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   F812D4E1           LDRSH    R1,[R4, #+40]
   \   00000054   F602D4E1           LDRSH    R0,[R4, #+38]
   \   00000058   ........           BL       GL_DrawLineEx
    535            #if (GUI_WINSUPPORT)
    536              } WM_ITERATE_END();
   \   0000005C   ........           BL       WM__GetNextIVR
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   F3FFFF1A           BNE      ??GUI_DrawLineTo_1
    537            #endif
    538            GL_MoveTo(x,y);
   \                     ??GUI_DrawLineTo_0:
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       GL_MoveTo
    539            GUI_UNLOCK();
   \   00000074   ........           BL       GUI_Unlock
    540          }
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   ABAAAA2A           DC32     0x2aaaaaab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   67666666           DC32     0x66666667
    541          
    542          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     GL_DrawLine         16
     GL_DrawLine1        16
     GL_DrawLine1Ex      48
     GL_DrawLineEx       56
     GL_DrawLineTo       24
     GL_DrawLineToEx     24
     GUI_DrawLine        32
     GUI_DrawLineRel     24
     GUI_DrawLineTo      24
     GUI_cos              0
     GUI_sin              0
     _CalcOrto           32
     _atan2               8


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     aSin              36
     GUI_sin          140
     GUI_cos          144
     aTan              36
     _atan2           180
     _CalcOrto        364
     GL_DrawLine1Ex  1336
     GL_DrawLine1      36
     GL_DrawLineEx    360
     GL_DrawLine       36
     GUI_DrawLine     132
     GUI_DrawLineRel  112
     GL_DrawLineToEx   60
     GL_DrawLineTo     72
     GUI_DrawLineTo   128
     ??DataTable8       4
     ??DataTable8_1     4
     ??DataTable8_2     4

 
 3 184 bytes in section .text
 
 3 184 bytes of CODE memory

Errors: none
Warnings: none
