###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:50 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_888.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_888.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_DrawBitmap_888.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _DrawBitmap_888.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawBitmap_888.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCD_DrawBitmap_888.c
     19          Purpose     : Drawing routine for drawing a 16bpp bitmap
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DrawBitmap
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _DrawBitmap(int x0,int y0,int xSize, int ySize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag, int Swap) {
   \                     _DrawBitmap:
   \   00000000   F54F2DE9           PUSH     {R0,R2,R4-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable2
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   0380A0E1           MOV      R8,R3
   \   00000014   40709DE5           LDR      R7,[SP, #+64]
   \   00000018   4C409DE5           LDR      R4,[SP, #+76]
   \   0000001C   1100D0E5           LDRB     R0,[R0, #+17]
     36            const U32 * pSrc;
     37            U32 Color;
     38            LCD_PIXELINDEX Index;
     39            int BytesPerLine;
     40            tLCDDEV_Color2Index * pfColor2Index;
     41            /* 
     42             * Get function pointer for color conversion 
     43             */
     44            pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   00000020   ........           BL       GUI_GetpfColor2IndexEx
   \   00000024   0050A0E1           MOV      R5,R0
     45            BytesPerLine = xSize * 4;
   \   00000028   18009DE5           LDR      R0,[SP, #+24]
     46            if ((xMag | yMag) == 1) {
   \   0000002C   48109DE5           LDR      R1,[SP, #+72]
   \   00000030   0001A0E1           LSL      R0,R0,#+2
   \   00000034   04008DE5           STR      R0,[SP, #+4]
   \   00000038   44009DE5           LDR      R0,[SP, #+68]
   \   0000003C   000081E1           ORR      R0,R1,R0
   \   00000040   010050E3           CMP      R0,#+1
   \   00000044   7F00001A           BNE      ??_DrawBitmap_0
     47              int x1, y1, Diff;
     48              int x;//, y;
     49              LCD_API_NEXT_PIXEL * pNextPixel_API;
     50              y1 = y0 + ySize - 1;
   \   00000048   090088E0           ADD      R0,R8,R9
   \   0000004C   01A040E2           SUB      R10,R0,#+1
     51              x1 = x0 + xSize - 1;
   \   00000050   14009DE5           LDR      R0,[SP, #+20]
   \   00000054   18109DE5           LDR      R1,[SP, #+24]
   \   00000058   000081E0           ADD      R0,R1,R0
   \   0000005C   01B040E2           SUB      R11,R0,#+1
   \   00000060   ........           LDR      R0,??DataTable2
   \   00000064   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000068   000059E1           CMP      R9,R0
   \   0000006C   040000AA           BGE      ??_DrawBitmap_1
     52              /*
     53               * Clip Y
     54               */
     55              if (y0 < GUI_Context.ClipRect.y0) {
     56                Diff = GUI_Context.ClipRect.y0 - y0;
   \   00000070   091040E0           SUB      R1,R0,R9
     57                y0   = GUI_Context.ClipRect.y0;
   \   00000074   0090A0E1           MOV      R9,R0
     58                #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     59                  pPixel += (U32)Diff * (U32)BytesPerLine;
   \   00000078   04009DE5           LDR      R0,[SP, #+4]
     60                #else
     61                  pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
     62                #endif
     63                ySize -= Diff;
   \   0000007C   018048E0           SUB      R8,R8,R1
   \   00000080   907127E0           MLA      R7,R0,R1,R7
     64              }
     65              Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??_DrawBitmap_1:
   \   00000084   ........           LDR      R0,??DataTable2
   \   00000088   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   0000008C   00004AE0           SUB      R0,R10,R0
     66              if (Diff > 0) {
   \   00000090   010050E3           CMP      R0,#+1
     67                ySize -= Diff;
   \   00000094   008048A0           SUBGE    R8,R8,R0
     68              }
     69              if (ySize <=0) {
   \   00000098   010058E3           CMP      R8,#+1
   \   0000009C   A50000BA           BLT      ??_DrawBitmap_2
     70          		  return;
     71              }
     72              /* 
     73               * Clip right side 
     74               */
     75              Diff = x1 - GUI_Context.ClipRect.x1;
   \   000000A0   ........           LDR      R0,??DataTable2
   \   000000A4   FC00D0E1           LDRSH    R0,[R0, #+12]
   \   000000A8   00004BE0           SUB      R0,R11,R0
     76              if (Diff > 0) {
   \   000000AC   010050E3           CMP      R0,#+1
     77                xSize -= Diff;
   \   000000B0   18109DA5           LDRGE    R1,[SP, #+24]
   \   000000B4   000041A0           SUBGE    R0,R1,R0
   \   000000B8   18008DA5           STRGE    R0,[SP, #+24]
   \   000000BC   ........           LDR      R0,??DataTable2
   \   000000C0   14109DE5           LDR      R1,[SP, #+20]
   \   000000C4   F800D0E1           LDRSH    R0,[R0, #+8]
   \   000000C8   000051E1           CMP      R1,R0
   \   000000CC   070000AA           BGE      ??_DrawBitmap_3
     78              }
     79              /*
     80               * Clip left side 
     81               */
     82              if (x0 < GUI_Context.ClipRect.x0) {
     83                Diff = GUI_Context.ClipRect.x0 - x0;
   \   000000D0   010040E0           SUB      R0,R0,R1
     84          			xSize -= Diff;
   \   000000D4   18109DE5           LDR      R1,[SP, #+24]
     85                pPixel += Diff * 4; 
   \   000000D8   007187E0           ADD      R7,R7,R0, LSL #+2
   \   000000DC   001041E0           SUB      R1,R1,R0
   \   000000E0   18108DE5           STR      R1,[SP, #+24]
     86                x0 += Diff; 
   \   000000E4   14109DE5           LDR      R1,[SP, #+20]
   \   000000E8   010080E0           ADD      R0,R0,R1
   \   000000EC   14008DE5           STR      R0,[SP, #+20]
     87              }
     88              if (xSize <=0) {
   \                     ??_DrawBitmap_3:
   \   000000F0   18009DE5           LDR      R0,[SP, #+24]
   \   000000F4   010050E3           CMP      R0,#+1
   \   000000F8   8E0000BA           BLT      ??_DrawBitmap_2
     89          		  return;
     90              }
     91              /*
     92               * Rectangle filling with index values
     93               */
     94              pNextPixel_API = LCD_GetNextPixelAPI();
   \   000000FC   ........           BL       LCD_GetNextPixelAPI
   \   00000100   0060A0E1           MOV      R6,R0
     95              pNextPixel_API->pfStart(x0, y0, x1, y1); /* Initialize drawing routine of the driver */
   \   00000104   0A30A0E1           MOV      R3,R10
   \   00000108   0B20A0E1           MOV      R2,R11
   \   0000010C   0910A0E1           MOV      R1,R9
   \   00000110   14009DE5           LDR      R0,[SP, #+20]
   \   00000114   00C096E5           LDR      R12,[R6, #+0]
   \   00000118   3CFF2FE1           BLX      R12
   \   0000011C   030000EA           B        ??_DrawBitmap_4
     96              while (ySize--) {
     97                pSrc = (const U32 *)pPixel;
     98                for (x = 0; x < xSize; x++) {
     99                  /*
    100                   * Get RGB and calculate index value
    101                   */
    102                  Color = *pSrc++;
    103                  if (Swap) {
    104                    Color = (Color & 0x00ff00) | ((Color & 0xff0000) >> 16) | ((Color & 0x0000ff) << 16);
    105                  }
    106                  Index = pfColor2Index(Color);
    107                  pNextPixel_API->pfSetPixel(Index); /* Send index value to the driver */
    108                }
    109                if (ySize) {
    110                  pNextPixel_API->pfNextLine(); /* Increment line */
   \                     ??_DrawBitmap_5:
   \   00000120   080096E5           LDR      R0,[R6, #+8]
   \   00000124   30FF2FE1           BLX      R0
    111                  pPixel += BytesPerLine;
   \   00000128   04009DE5           LDR      R0,[SP, #+4]
   \   0000012C   077080E0           ADD      R7,R0,R7
    112                }
   \                     ??_DrawBitmap_4:
   \   00000130   18109DE5           LDR      R1,[SP, #+24]
   \   00000134   0790A0E1           MOV      R9,R7
   \   00000138   01B041E2           SUB      R11,R1,#+1
   \   0000013C   018048E2           SUB      R8,R8,#+1
   \   00000140   000099E5           LDR      R0,[R9, #+0]
   \   00000144   01001BE3           TST      R11,#0x1
   \   00000148   0E00000A           BEQ      ??_DrawBitmap_6
   \   0000014C   00A0A0E1           MOV      R10,R0
   \   00000150   049089E2           ADD      R9,R9,#+4
   \   00000154   000054E3           CMP      R4,#+0
   \   00000158   0500000A           BEQ      ??_DrawBitmap_7
   \   0000015C   FF10A0E3           MOV      R1,#+255
   \   00000160   FF0C0AE2           AND      R0,R10,#0xFF00
   \   00000164   2A1801E0           AND      R1,R1,R10, LSR #+16
   \   00000168   000081E1           ORR      R0,R1,R0
   \   0000016C   FF100AE2           AND      R1,R10,#0xFF
   \   00000170   01A880E1           ORR      R10,R0,R1, LSL #+16
   \                     ??_DrawBitmap_7:
   \   00000174   0A00A0E1           MOV      R0,R10
   \   00000178   35FF2FE1           BLX      R5
   \   0000017C   041096E5           LDR      R1,[R6, #+4]
   \   00000180   31FF2FE1           BLX      R1
   \   00000184   000099E5           LDR      R0,[R9, #+0]
   \                     ??_DrawBitmap_6:
   \   00000188   ABB0B0E1           LSRS     R11,R11,#+1
   \   0000018C   1B00000A           BEQ      ??_DrawBitmap_8
   \                     ??_DrawBitmap_9:
   \   00000190   049089E2           ADD      R9,R9,#+4
   \   00000194   000054E3           CMP      R4,#+0
   \   00000198   0500000A           BEQ      ??_DrawBitmap_10
   \   0000019C   FF20A0E3           MOV      R2,#+255
   \   000001A0   FF1C00E2           AND      R1,R0,#0xFF00
   \   000001A4   202802E0           AND      R2,R2,R0, LSR #+16
   \   000001A8   011082E1           ORR      R1,R2,R1
   \   000001AC   FF0000E2           AND      R0,R0,#0xFF
   \   000001B0   000881E1           ORR      R0,R1,R0, LSL #+16
   \                     ??_DrawBitmap_10:
   \   000001B4   35FF2FE1           BLX      R5
   \   000001B8   041096E5           LDR      R1,[R6, #+4]
   \   000001BC   31FF2FE1           BLX      R1
   \   000001C0   04A099E4           LDR      R10,[R9], #+4
   \   000001C4   000054E3           CMP      R4,#+0
   \   000001C8   0500000A           BEQ      ??_DrawBitmap_11
   \   000001CC   FF10A0E3           MOV      R1,#+255
   \   000001D0   FF0C0AE2           AND      R0,R10,#0xFF00
   \   000001D4   2A1801E0           AND      R1,R1,R10, LSR #+16
   \   000001D8   000081E1           ORR      R0,R1,R0
   \   000001DC   FF100AE2           AND      R1,R10,#0xFF
   \   000001E0   01A880E1           ORR      R10,R0,R1, LSL #+16
   \                     ??_DrawBitmap_11:
   \   000001E4   0A00A0E1           MOV      R0,R10
   \   000001E8   35FF2FE1           BLX      R5
   \   000001EC   041096E5           LDR      R1,[R6, #+4]
   \   000001F0   31FF2FE1           BLX      R1
   \   000001F4   000099E5           LDR      R0,[R9, #+0]
   \   000001F8   01B05BE2           SUBS     R11,R11,#+1
   \   000001FC   E3FFFF1A           BNE      ??_DrawBitmap_9
   \                     ??_DrawBitmap_8:
   \   00000200   00A0A0E1           MOV      R10,R0
   \   00000204   000054E3           CMP      R4,#+0
   \   00000208   0500000A           BEQ      ??_DrawBitmap_12
   \   0000020C   FF10A0E3           MOV      R1,#+255
   \   00000210   FF0C0AE2           AND      R0,R10,#0xFF00
   \   00000214   2A1801E0           AND      R1,R1,R10, LSR #+16
   \   00000218   000081E1           ORR      R0,R1,R0
   \   0000021C   FF100AE2           AND      R1,R10,#0xFF
   \   00000220   01A880E1           ORR      R10,R0,R1, LSL #+16
   \                     ??_DrawBitmap_12:
   \   00000224   0A00A0E1           MOV      R0,R10
   \   00000228   35FF2FE1           BLX      R5
   \   0000022C   041096E5           LDR      R1,[R6, #+4]
   \   00000230   31FF2FE1           BLX      R1
   \   00000234   000058E3           CMP      R8,#+0
   \   00000238   B8FFFF1A           BNE      ??_DrawBitmap_5
    113              }
    114              pNextPixel_API->pfEnd(); /* Done */
   \   0000023C   0C0096E5           LDR      R0,[R6, #+12]
   \   00000240   30FF2FE1           BLX      R0
   \   00000244   3B0000EA           B        ??_DrawBitmap_2
    115            } else {
    116              /*
    117               * Magnified output
    118               */
    119              U32 PrevColor;
    120              int x, y, yi;
    121              PrevColor = GUI_INVALID_COLOR;
   \                     ??_DrawBitmap_0:
   \   00000248   F014E0E3           MVN      R1,#-268435456
   \   0000024C   0C108DE5           STR      R1,[SP, #+12]
    122              for (y = y0, yi = 0; yi < ySize; yi++, y += yMag, pPixel += BytesPerLine) {
   \   00000250   0960A0E1           MOV      R6,R9
   \   00000254   010058E3           CMP      R8,#+1
   \   00000258   360000BA           BLT      ??_DrawBitmap_2
   \   0000025C   00808DE5           STR      R8,[SP, #+0]
    123                int yMax;
    124                yMax = y + yMag - 1;
    125                pSrc = (const U32 *)pPixel;
    126                /* Draw if within clip area */
    127                if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \                     ??_DrawBitmap_13:
   \   00000260   ........           LDR      R1,??DataTable2
   \   00000264   48009DE5           LDR      R0,[SP, #+72]
   \   00000268   FA10D1E1           LDRSH    R1,[R1, #+10]
   \   0000026C   000086E0           ADD      R0,R6,R0
   \   00000270   010040E2           SUB      R0,R0,#+1
   \   00000274   08008DE5           STR      R0,[SP, #+8]
   \   00000278   0790A0E1           MOV      R9,R7
   \   0000027C   010050E1           CMP      R0,R1
   \   00000280   230000BA           BLT      ??_DrawBitmap_14
   \   00000284   ........           LDR      R0,??DataTable2
   \   00000288   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   0000028C   060050E1           CMP      R0,R6
   \   00000290   1F0000BA           BLT      ??_DrawBitmap_14
    128                  int xi;
    129                  for (x = x0, xi = 0; xi < xSize; xi++, x += xMag) {
   \   00000294   18009DE5           LDR      R0,[SP, #+24]
   \   00000298   14809DE5           LDR      R8,[SP, #+20]
   \   0000029C   010050E3           CMP      R0,#+1
   \   000002A0   1B0000BA           BLT      ??_DrawBitmap_14
   \   000002A4   00B0A0E1           MOV      R11,R0
    130                    /*
    131                     * Get RGB and calculate index value
    132                     */
    133                    Color = *pSrc++;
   \                     ??_DrawBitmap_15:
   \   000002A8   04A099E4           LDR      R10,[R9], #+4
    134                    if (Swap) {
   \   000002AC   000054E3           CMP      R4,#+0
   \   000002B0   0500000A           BEQ      ??_DrawBitmap_16
    135                      Color = (Color & 0x00ff00) | ((Color & 0xff0000) >> 16) | ((Color & 0x0000ff) << 16);
   \   000002B4   FF10A0E3           MOV      R1,#+255
   \   000002B8   FF0C0AE2           AND      R0,R10,#0xFF00
   \   000002BC   2A1801E0           AND      R1,R1,R10, LSR #+16
   \   000002C0   000081E1           ORR      R0,R1,R0
   \   000002C4   FF100AE2           AND      R1,R10,#0xFF
   \   000002C8   01A880E1           ORR      R10,R0,R1, LSL #+16
    136                    }
    137                    if (Color != PrevColor) {
   \                     ??_DrawBitmap_16:
   \   000002CC   0C009DE5           LDR      R0,[SP, #+12]
   \   000002D0   00005AE1           CMP      R10,R0
   \   000002D4   0300000A           BEQ      ??_DrawBitmap_17
    138                      LCD_SetColorIndex(pfColor2Index(Color));
   \   000002D8   0A00A0E1           MOV      R0,R10
   \   000002DC   35FF2FE1           BLX      R5
   \   000002E0   ........           BL       LCD_SetColorIndex
    139                      PrevColor = Color;
   \   000002E4   0CA08DE5           STR      R10,[SP, #+12]
    140                    }
    141                    LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_17:
   \   000002E8   44009DE5           LDR      R0,[SP, #+68]
   \   000002EC   08309DE5           LDR      R3,[SP, #+8]
   \   000002F0   000088E0           ADD      R0,R8,R0
   \   000002F4   012040E2           SUB      R2,R0,#+1
   \   000002F8   0610A0E1           MOV      R1,R6
   \   000002FC   0800A0E1           MOV      R0,R8
   \   00000300   ........           BL       LCD_FillRect
    142                  }
   \   00000304   44009DE5           LDR      R0,[SP, #+68]
   \   00000308   01B05BE2           SUBS     R11,R11,#+1
   \   0000030C   088080E0           ADD      R8,R0,R8
   \   00000310   E4FFFF1A           BNE      ??_DrawBitmap_15
    143                }
    144              }
   \                     ??_DrawBitmap_14:
   \   00000314   48009DE5           LDR      R0,[SP, #+72]
   \   00000318   066080E0           ADD      R6,R0,R6
   \   0000031C   04009DE5           LDR      R0,[SP, #+4]
   \   00000320   077080E0           ADD      R7,R0,R7
   \   00000324   00009DE5           LDR      R0,[SP, #+0]
   \   00000328   010040E2           SUB      R0,R0,#+1
   \   0000032C   00008DE5           STR      R0,[SP, #+0]
   \   00000330   000050E3           CMP      R0,#+0
   \   00000334   C9FFFF1A           BNE      ??_DrawBitmap_13
   \                     ??_DrawBitmap_2:
   \   00000338   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000033C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    145            }
    146          }
    147          
    148          /*********************************************************************
    149          *
    150          *       _DrawBitmap_888
    151          */

   \                                 In section .text, align 4, keep-with-next
    152          static void _DrawBitmap_888(int x0, int y0, int xSize, int ySize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_888:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   28E09DE5           LDR      LR,[SP, #+40]
   \   00000010   2C409DE5           LDR      R4,[SP, #+44]
    153            GUI_USE_PARA(pLogPal);
    154            _DrawBitmap(x0, y0, xSize, ySize, pPixel, xMag, yMag, 0);
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   0C508DE5           STR      R5,[SP, #+12]
   \   0000001C   08408DE5           STR      R4,[SP, #+8]
   \   00000020   04E08DE5           STR      LR,[SP, #+4]
   \   00000024   00C08DE5           STR      R12,[SP, #+0]
   \   00000028   ........           BL       _DrawBitmap
    155          }
   \   0000002C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    156          
    157          /*********************************************************************
    158          *
    159          *       _DrawBitmap_M888
    160          */

   \                                 In section .text, align 4, keep-with-next
    161          static void _DrawBitmap_M888(int x0, int y0, int xSize, int ySize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_M888:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   28E09DE5           LDR      LR,[SP, #+40]
   \   00000010   2C409DE5           LDR      R4,[SP, #+44]
    162            GUI_USE_PARA(pLogPal);
    163            _DrawBitmap(x0, y0, xSize, ySize, pPixel, xMag, yMag, 1);
   \   00000014   0150A0E3           MOV      R5,#+1
   \   00000018   0C508DE5           STR      R5,[SP, #+12]
   \   0000001C   08408DE5           STR      R4,[SP, #+8]
   \   00000020   04E08DE5           STR      LR,[SP, #+4]
   \   00000024   00C08DE5           STR      R12,[SP, #+0]
   \   00000028   ........           BL       _DrawBitmap
    164          }
   \   0000002C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    165          
    166          /*********************************************************************
    167          *
    168          *       Public data
    169          *
    170          **********************************************************************
    171          */
    172          /*********************************************************************
    173          *
    174          *       GUI_BitmapMethods888
    175          */

   \                                 In section .rodata, align 4, keep-with-next
    176          const GUI_BITMAP_METHODS GUI_BitmapMethods888 = {
   \                     GUI_BitmapMethods888:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _DrawBitmap_888, LCD_Index2Color_888
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0
    177            _DrawBitmap_888,
    178            LCD_Index2Color_888
    179          };
    180          
    181          /*********************************************************************
    182          *
    183          *       GUI_BitmapMethodsM888
    184          */

   \                                 In section .rodata, align 4, keep-with-next
    185          const GUI_BITMAP_METHODS GUI_BitmapMethodsM888 = {
   \                     GUI_BitmapMethodsM888:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _DrawBitmap_M888, LCD_Index2Color_M888
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Context
    186            _DrawBitmap_M888,
    187            LCD_Index2Color_M888
    188          };
    189          
    190          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitmap          64
     _DrawBitmap_888      32
     _DrawBitmap_M888     32


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _DrawBitmap            832
     _DrawBitmap_888         52
     _DrawBitmap_M888        52
     GUI_BitmapMethods888    12
     GUI_BitmapMethodsM888   12
     ??DataTable2             4

 
  24 bytes in section .rodata
 940 bytes in section .text
 
 940 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
