###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_Color.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_Color.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LC #
#                    D_Color.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LCD #
#                    _Color.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_Color.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDColor.C
     19          Purpose     : Color conversion routines for LCD-drivers
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Defines, config defaults
     30          *
     31          **********************************************************************
     32          */
     33          
     34          #ifndef  LCD_SIZEOF_COLORCACHE
     35            #define LCD_SIZEOF_COLORCACHE 0
     36          #endif
     37          
     38          #if  LCD_SIZEOF_COLORCACHE
     39            static  const LCD_LOGPALETTE * pLogPalCache;
     40          #endif
     41          
     42          /*********************************************************************
     43          *
     44          *       Public data
     45          *
     46          **********************************************************************
     47          */

   \                                 In section .bss, align 4
     48          LCD_PIXELINDEX LCD__aConvTable[LCD_MAX_LOG_COLORS];
   \                     LCD__aConvTable:
   \   00000000                      DS8 1024
     49          

   \                                 In section .data, align 4
     50          LCD_PIXELINDEX * LCD_pBkColorIndex = &GUI_Context.LCD.aColorIndex32[0];
   \                     LCD_pBkColorIndex:
   \   00000000   ........           DC32 GUI_Context

   \                                 In section .data, align 4
     51          LCD_PIXELINDEX * LCD_pColorIndex   = &GUI_Context.LCD.aColorIndex32[1];
   \                     LCD_pColorIndex:
   \   00000000   ........           DC32 GUI_Context + 4H

   \                                 In section .data, align 4
     52          LCD_PIXELINDEX * LCD_pAColorIndex  =  GUI_Context.LCD.aColorIndex32;
   \                     LCD_pAColorIndex:
   \   00000000   ........           DC32 GUI_Context
     53          
     54          /*********************************************************************
     55          *
     56          *       Public code
     57          *
     58          **********************************************************************
     59          */
     60          /*********************************************************************
     61          *
     62          *       LCD_GetpPalConvTableUncached
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          LCD_PIXELINDEX * LCD_GetpPalConvTableUncached(const LCD_LOGPALETTE GUI_UNI_PTR *  pLogPal) {
   \                     LCD_GetpPalConvTableUncached:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     65            if (pLogPal == NULL) {
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0100001A           BNE      ??LCD_GetpPalConvTableUncached_0
     66              return NULL;
   \                     ??LCD_GetpPalConvTableUncached_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1B0000EA           B        ??LCD_GetpPalConvTableUncached_2
     67            }
     68            if (!pLogPal->pPalEntries) {
   \                     ??LCD_GetpPalConvTableUncached_0:
   \   00000018   084090E5           LDR      R4,[R0, #+8]
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   FAFFFF0A           BEQ      ??LCD_GetpPalConvTableUncached_1
     69              return NULL;
     70            }
     71            //
     72            // Check if sufficient space is available
     73            //
     74            if (pLogPal->NumEntries > LCD_MAX_LOG_COLORS) {
   \   00000024   005090E5           LDR      R5,[R0, #+0]
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   400F80E3           ORR      R0,R0,#0x100
   \   00000030   000055E1           CMP      R5,R0
   \   00000034   F5FFFFAA           BGE      ??LCD_GetpPalConvTableUncached_1
     75              return NULL;
     76            }
     77            //
     78            // Build conversion table
     79            //
     80            {
     81              int i;
     82              int NumEntries = pLogPal->NumEntries;
     83              const LCD_COLOR GUI_UNI_PTR * pPalEntry = &pLogPal->pPalEntries[0];
     84              for (i=0; i< NumEntries; i++) {
   \   00000038   ........           LDR      R6,??DataTable2
   \   0000003C   010055E3           CMP      R5,#+1
   \   00000040   0F0000BA           BLT      ??LCD_GetpPalConvTableUncached_3
   \   00000044   0670A0E1           MOV      R7,R6
   \   00000048   010015E3           TST      R5,#0x1
   \   0000004C   0200000A           BEQ      ??LCD_GetpPalConvTableUncached_4
     85                LCD__aConvTable[i] = (unsigned)LCD_Color2Index(*(pPalEntry+i));
   \   00000050   040094E4           LDR      R0,[R4], #+4
   \   00000054   ........           BL       LCD_Color2Index
   \   00000058   040087E4           STR      R0,[R7], #+4
   \                     ??LCD_GetpPalConvTableUncached_4:
   \   0000005C   A550B0E1           LSRS     R5,R5,#+1
   \   00000060   0700000A           BEQ      ??LCD_GetpPalConvTableUncached_3
   \                     ??LCD_GetpPalConvTableUncached_5:
   \   00000064   040094E4           LDR      R0,[R4], #+4
   \   00000068   ........           BL       LCD_Color2Index
   \   0000006C   040087E4           STR      R0,[R7], #+4
   \   00000070   040094E4           LDR      R0,[R4], #+4
   \   00000074   ........           BL       LCD_Color2Index
   \   00000078   040087E4           STR      R0,[R7], #+4
     86              }
   \   0000007C   015055E2           SUBS     R5,R5,#+1
   \   00000080   F7FFFF1A           BNE      ??LCD_GetpPalConvTableUncached_5
     87            }
     88            return &LCD__aConvTable[0];
   \                     ??LCD_GetpPalConvTableUncached_3:
   \   00000084   0600A0E1           MOV      R0,R6
   \                     ??LCD_GetpPalConvTableUncached_2:
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
     89          }
     90          
     91          /*********************************************************************
     92          *
     93          *       LCD_GetpPalConvTable
     94          */

   \                                 In section .text, align 4, keep-with-next
     95          LCD_PIXELINDEX * LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR *  pLogPal) {
   \                     LCD_GetpPalConvTable:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     96          //
     97          // Check cache
     98          //
     99            #if  LCD_SIZEOF_COLORCACHE
    100              if (pLogPalCache == pLogPal) {
    101                return &LCD__aConvTable[0];
    102              }
    103              pLogPalCache = pLogPal;
    104            #endif
    105            return LCD_GetpPalConvTableUncached(pLogPal);
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   08409015           LDRNE    R4,[R0, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   00005413           CMPNE    R4,#+0
   \   00000014   1800000A           BEQ      ??LCD_GetpPalConvTable_0
   \   00000018   005090E5           LDR      R5,[R0, #+0]
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   400F80E3           ORR      R0,R0,#0x100
   \   00000024   000055E1           CMP      R5,R0
   \   00000028   130000AA           BGE      ??LCD_GetpPalConvTable_0
   \   0000002C   ........           LDR      R6,??DataTable2
   \   00000030   010055E3           CMP      R5,#+1
   \   00000034   110000BA           BLT      ??LCD_GetpPalConvTable_1
   \   00000038   0670A0E1           MOV      R7,R6
   \   0000003C   010015E3           TST      R5,#0x1
   \   00000040   0200000A           BEQ      ??LCD_GetpPalConvTable_2
   \   00000044   040094E4           LDR      R0,[R4], #+4
   \   00000048   ........           BL       LCD_Color2Index
   \   0000004C   040087E4           STR      R0,[R7], #+4
   \                     ??LCD_GetpPalConvTable_2:
   \   00000050   A550B0E1           LSRS     R5,R5,#+1
   \   00000054   0900000A           BEQ      ??LCD_GetpPalConvTable_1
   \                     ??LCD_GetpPalConvTable_3:
   \   00000058   040094E4           LDR      R0,[R4], #+4
   \   0000005C   ........           BL       LCD_Color2Index
   \   00000060   040087E4           STR      R0,[R7], #+4
   \   00000064   040094E4           LDR      R0,[R4], #+4
   \   00000068   ........           BL       LCD_Color2Index
   \   0000006C   040087E4           STR      R0,[R7], #+4
   \   00000070   015055E2           SUBS     R5,R5,#+1
   \   00000074   F7FFFF1A           BNE      ??LCD_GetpPalConvTable_3
   \   00000078   000000EA           B        ??LCD_GetpPalConvTable_1
   \                     ??LCD_GetpPalConvTable_0:
   \   0000007C   0060A0E3           MOV      R6,#+0
   \                     ??LCD_GetpPalConvTable_1:
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   F080BDE8           POP      {R4-R7,PC}       ;; return
    106          }
    107          
    108          /*********************************************************************
    109          *
    110          *       LCD_InitLUT
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          void LCD_InitLUT(void) {
   \                     LCD_InitLUT:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    113            GUI_DEVICE * pDevice;
    114            int DisplayOld, NumLayers, i, j;
    115            I32 NumColors;
    116            LCD_COLOR Color;
    117          
    118            NumLayers = LCD_GetNumLayers();
   \   00000004   ........           BL       LCD_GetNumLayers
   \   00000008   0040A0E1           MOV      R4,R0
    119            //
    120            // Iterate over all layers
    121            //
    122            for (i = 0; i < NumLayers; i++) {
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   010054E3           CMP      R4,#+1
   \   00000014   370000BA           BLT      ??LCD_InitLUT_0
   \   00000018   ........           LDR      R6,??DataTable2_1
   \   0000001C   ........           LDR      R7,??DataTable2_2
    123              pDevice = GUI_DEVICE__GetpDriver(i);
    124              if (pDevice) {
   \                     ??LCD_InitLUT_1:
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       GUI_DEVICE__GetpDriver
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   2D00000A           BEQ      ??LCD_InitLUT_2
    125                //
    126                // Initialize LUT only if color depth is <= 8
    127                //
    128                DisplayOld = GUI_SelectLayer(i);
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       GUI_SelectLayer
   \   00000038   0080A0E1           MOV      R8,R0
    129                if (LCD_GetBitsPerPixelEx(i) <= 8) {
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           BL       LCD_GetBitsPerPixelEx
   \   00000044   090050E3           CMP      R0,#+9
   \   00000048   240000AA           BGE      ??LCD_InitLUT_3
    130                  if (GUI_Context.apDevice[i]->pColorConvAPI != GUICC_0) {
   \   0000004C   480096E5           LDR      R0,[R6, #+72]
   \   00000050   100090E5           LDR      R0,[R0, #+16]
   \   00000054   070050E1           CMP      R0,R7
   \   00000058   2000000A           BEQ      ??LCD_InitLUT_3
    131                    //
    132                    // Iterate over colors
    133                    //
    134                    NumColors = LCD_GetNumColorsEx(i);
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       LCD_GetNumColorsEx
   \   00000064   0090A0E1           MOV      R9,R0
    135                    for (j = 0; j < NumColors; j++) {
   \   00000068   00A0A0E3           MOV      R10,#+0
   \   0000006C   010059E3           CMP      R9,#+1
   \   00000070   1A0000BA           BLT      ??LCD_InitLUT_3
   \   00000074   010019E3           TST      R9,#0x1
   \   00000078   0600000A           BEQ      ??LCD_InitLUT_4
    136                      Color = LCD_Index2Color((U8)j);
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   ........           BL       LCD_Index2Color
    137                      LCD_SetLUTEntryEx(i, (U8)j, Color);
   \   00000084   0020A0E1           MOV      R2,R0
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       LCD_SetLUTEntryEx
   \   00000094   01A0A0E3           MOV      R10,#+1
   \                     ??LCD_InitLUT_4:
   \   00000098   A990B0E1           LSRS     R9,R9,#+1
   \   0000009C   0F00000A           BEQ      ??LCD_InitLUT_3
   \                     ??LCD_InitLUT_5:
   \   000000A0   FF000AE2           AND      R0,R10,#0xFF
   \   000000A4   ........           BL       LCD_Index2Color
   \   000000A8   0020A0E1           MOV      R2,R0
   \   000000AC   FF100AE2           AND      R1,R10,#0xFF
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           BL       LCD_SetLUTEntryEx
   \   000000B8   01A08AE2           ADD      R10,R10,#+1
   \   000000BC   FF000AE2           AND      R0,R10,#0xFF
   \   000000C0   ........           BL       LCD_Index2Color
   \   000000C4   0020A0E1           MOV      R2,R0
   \   000000C8   FF100AE2           AND      R1,R10,#0xFF
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           BL       LCD_SetLUTEntryEx
    138                    }
   \   000000D4   01A08AE2           ADD      R10,R10,#+1
   \   000000D8   019059E2           SUBS     R9,R9,#+1
   \   000000DC   EFFFFF1A           BNE      ??LCD_InitLUT_5
    139                  }
    140                }
    141                GUI_SelectLayer(DisplayOld);
   \                     ??LCD_InitLUT_3:
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   ........           BL       GUI_SelectLayer
    142              }
    143            }
   \                     ??LCD_InitLUT_2:
   \   000000E8   015085E2           ADD      R5,R5,#+1
   \   000000EC   046086E2           ADD      R6,R6,#+4
   \   000000F0   040055E1           CMP      R5,R4
   \   000000F4   C9FFFFBA           BLT      ??LCD_InitLUT_1
    144          }
   \                     ??LCD_InitLUT_0:
   \   000000F8   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     LCD__aConvTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     LCD_API_ColorConv_0
    145          
    146          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     LCD_GetpPalConvTable             24
     LCD_GetpPalConvTableUncached     24
     LCD_InitLUT                      32


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     LCD__aConvTable              1024
     LCD_pBkColorIndex               4
     LCD_pColorIndex                 4
     LCD_pAColorIndex                4
     LCD_GetpPalConvTableUncached  144
     LCD_GetpPalConvTable          140
     LCD_InitLUT                   252
     ??DataTable2                    4
     ??DataTable2_1                  4
     ??DataTable2_2                  4

 
 1 024 bytes in section .bss
    12 bytes in section .data
   548 bytes in section .text
 
   548 bytes of CODE memory
 1 036 bytes of DATA memory

Errors: none
Warnings: none
