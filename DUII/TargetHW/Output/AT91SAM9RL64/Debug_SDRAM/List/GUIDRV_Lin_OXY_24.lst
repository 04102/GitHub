###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:40 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OXY_24.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OXY_24.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDRV_Lin_OXY_24.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DRV_Lin_OXY_24.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OXY_24.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OXY_24.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF32(vxSizePhys, x, y)      (((U32)(y * (vxSizePhys + vxSizePhys + vxSizePhys)) + ((unsigned)(x + x + x))) >> 2)
     91          
     92          /*********************************************************************
     93          *
     94          *       Types
     95          *
     96          **********************************************************************
     97          */
     98          typedef struct {
     99            U32 VRAMAddr;
    100            int xSize, ySize;
    101            int vxSize, vySize;
    102            int vxSizePhys;
    103            int xPos, yPos;
    104            int Alpha;
    105            int IsVisible;
    106            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    107          } DRIVER_CONTEXT;
    108          
    109          /*********************************************************************
    110          *
    111          *       Static functions
    112          *
    113          **********************************************************************
    114          */
    115          /*********************************************************************
    116          *
    117          *       _SetPixelIndex
    118          *
    119          * Purpose:
    120          *   Sets the index of the given pixel. The upper layers
    121          *   calling this routine make sure that the coordinates are in range, so
    122          *   that no check on the parameters needs to be performed.
    123          */

   \                                 In section .text, align 4, keep-with-next
    124          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   00402DE9           PUSH     {LR}
    125            DRIVER_CONTEXT * pContext;
    126            U32 Off, Data;
    127          
    128            //
    129            // Get context
    130            //
    131            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    132            //
    133            // Mirror x
    134            //
    135            x = (pContext->vxSize - 1 - (x));
    136            //
    137            // Mirror y
    138            //
    139            y = (pContext->vySize - 1 - (y));
    140            //
    141            // Write into hardware
    142            //
    143            Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    144            Data     = READ_MEM32(pContext->VRAMAddr, Off);
    145            PixelIndex &= 0xFFFFFF;
   \   00000008   0334A0E1           LSL      R3,R3,#+8
   \   0000000C   0CC090E5           LDR      R12,[R0, #+12]
   \   00000010   2334A0E1           LSR      R3,R3,#+8
   \   00000014   01C04CE2           SUB      R12,R12,#+1
   \   00000018   01104CE0           SUB      R1,R12,R1
   \   0000001C   10C090E5           LDR      R12,[R0, #+16]
   \   00000020   01C04CE2           SUB      R12,R12,#+1
   \   00000024   02204CE0           SUB      R2,R12,R2
   \   00000028   14C090E5           LDR      R12,[R0, #+20]
   \   0000002C   9C0202E0           MUL      R2,R12,R2
   \   00000030   81C081E0           ADD      R12,R1,R1, LSL #+1
   \   00000034   822082E0           ADD      R2,R2,R2, LSL #+1
   \   00000038   02208CE0           ADD      R2,R12,R2
   \   0000003C   00C090E5           LDR      R12,[R0, #+0]
   \   00000040   2221A0E1           LSR      R2,R2,#+2
    146            switch (x & 3) {
   \   00000044   031001E2           AND      R1,R1,#0x3
   \   00000048   02E19CE7           LDR      LR,[R12, +R2, LSL #+2]
   \   0000004C   030051E3           CMP      R1,#+3
   \   00000050   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_SetPixelIndex_0:
   \   00000054   1D00008A           BHI      ??_SetPixelIndex_1
   \   00000058   020000EA           B        ??_SetPixelIndex_2
   \   0000005C   040000EA           B        ??_SetPixelIndex_3
   \   00000060   0E0000EA           B        ??_SetPixelIndex_4
   \   00000064   170000EA           B        ??_SetPixelIndex_5
    147            case 0:
    148              Data &= 0xFF000000;
    149              Data |= PixelIndex;
   \                     ??_SetPixelIndex_2:
   \   00000068   FF140EE2           AND      R1,LR,#0xFF000000
   \   0000006C   01E083E1           ORR      LR,R3,R1
    150              break;
   \   00000070   160000EA           B        ??_SetPixelIndex_1
    151            case 1:
    152              Data &= 0x00FFFFFF;
    153              Data |= (PixelIndex << 24);
    154              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_3:
   \   00000074   0E14A0E1           LSL      R1,LR,#+8
   \   00000078   03ECA0E1           LSL      LR,R3,#+24
   \   0000007C   21148EE1           ORR      R1,LR,R1, LSR #+8
   \   00000080   02118CE7           STR      R1,[R12, +R2, LSL #+2]
    155              Off++;
    156              Data = READ_MEM32(pContext->VRAMAddr, Off);
    157              Data &= 0xFFFF0000;
    158              Data |= (PixelIndex >> 8);
   \   00000084   001090E5           LDR      R1,[R0, #+0]
   \   00000088   012082E2           ADD      R2,R2,#+1
   \   0000008C   021191E7           LDR      R1,[R1, +R2, LSL #+2]
   \   00000090   4334A0E1           ASR      R3,R3,#+8
   \   00000094   2118A0E1           LSR      R1,R1,#+16
   \   00000098   01E883E1           ORR      LR,R3,R1, LSL #+16
    159              break;
   \   0000009C   0B0000EA           B        ??_SetPixelIndex_1
    160            case 2:
    161              Data &= 0x0000FFFF;
    162              Data |= (PixelIndex << 16);
    163              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_4:
   \   000000A0   0E18A0E1           LSL      R1,LR,#+16
   \   000000A4   03E8A0E1           LSL      LR,R3,#+16
   \   000000A8   21188EE1           ORR      R1,LR,R1, LSR #+16
   \   000000AC   02118CE7           STR      R1,[R12, +R2, LSL #+2]
    164              Off++;
    165              Data = READ_MEM32(pContext->VRAMAddr, Off);
    166              Data &= 0xFFFFFF00;
    167              Data |= (PixelIndex >> 16);
   \   000000B0   001090E5           LDR      R1,[R0, #+0]
   \   000000B4   012082E2           ADD      R2,R2,#+1
   \   000000B8   021191E7           LDR      R1,[R1, +R2, LSL #+2]
   \   000000BC   FF10C1E3           BIC      R1,R1,#0xFF
   \   000000C0   43E881E1           ORR      LR,R1,R3, ASR #+16
    168              break;
   \   000000C4   010000EA           B        ??_SetPixelIndex_1
    169            case 3:
    170              Data &= 0x000000FF;
    171              Data |= (PixelIndex << 8);
   \                     ??_SetPixelIndex_5:
   \   000000C8   FF100EE2           AND      R1,LR,#0xFF
   \   000000CC   03E481E1           ORR      LR,R1,R3, LSL #+8
    172              break;
    173            }
    174            WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_1:
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   02E180E7           STR      LR,[R0, +R2, LSL #+2]
    175          }
   \   000000D8   0080BDE8           POP      {PC}             ;; return
    176          
    177          /*********************************************************************
    178          *
    179          *       _GetPixelIndex
    180          *
    181          * Purpose:
    182          *   Returns the index of the given pixel. The upper layers
    183          *   calling this routine make sure that the coordinates are in range, so
    184          *   that no check on the parameters needs to be performed.
    185          */

   \                                 In section .text, align 4, keep-with-next
    186          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    187            DRIVER_CONTEXT * pContext;
    188            U32 Off, Data, PixelIndex;
    189          
    190            //
    191            // Get context
    192            //
    193            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    194            //
    195            // Mirror x
    196            //
    197            x = (pContext->vxSize - 1 - (x));
   \   00000004   0CC090E5           LDR      R12,[R0, #+12]
   \   00000008   01C04CE2           SUB      R12,R12,#+1
   \   0000000C   01104CE0           SUB      R1,R12,R1
    198            //
    199            // Mirror y
    200            //
    201            y = (pContext->vySize - 1 - (y));
    202            //
    203            // Read from hardware
    204            //
    205            Off      = XY2OFF32(pContext->vxSizePhys, x, y);
   \   00000010   10C090E5           LDR      R12,[R0, #+16]
   \   00000014   01C04CE2           SUB      R12,R12,#+1
   \   00000018   02304CE0           SUB      R3,R12,R2
   \   0000001C   14C090E5           LDR      R12,[R0, #+20]
   \   00000020   9C0303E0           MUL      R3,R12,R3
   \   00000024   81C081E0           ADD      R12,R1,R1, LSL #+1
   \   00000028   833083E0           ADD      R3,R3,R3, LSL #+1
   \   0000002C   03308CE0           ADD      R3,R12,R3
    206            Data     = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000030   00C090E5           LDR      R12,[R0, #+0]
   \   00000034   2331A0E1           LSR      R3,R3,#+2
    207            switch (x & 3) {
   \   00000038   031001E2           AND      R1,R1,#0x3
   \   0000003C   03019CE7           LDR      R0,[R12, +R3, LSL #+2]
   \   00000040   030051E3           CMP      R1,#+3
   \   00000044   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetPixelIndex_0:
   \   00000048   1200008A           BHI      ??_GetPixelIndex_1
   \   0000004C   020000EA           B        ??_GetPixelIndex_2
   \   00000050   030000EA           B        ??_GetPixelIndex_3
   \   00000054   090000EA           B        ??_GetPixelIndex_4
   \   00000058   0D0000EA           B        ??_GetPixelIndex_5
    208            case 0:
    209              PixelIndex  = (Data & 0x00FFFFFF);
   \                     ??_GetPixelIndex_2:
   \   0000005C   0004A0E1           LSL      R0,R0,#+8
   \   00000060   0B0000EA           B        ??_GetPixelIndex_5
    210              break;
    211            case 1:
    212              PixelIndex  = (Data & 0xFF000000) >> 24;
    213              Off++;
    214              Data        = READ_MEM32(pContext->VRAMAddr, Off);
    215              PixelIndex |= (Data & 0x0000FFFF) << 8;
   \                     ??_GetPixelIndex_3:
   \   00000064   03118CE0           ADD      R1,R12,R3, LSL #+2
   \   00000068   B410D1E1           LDRH     R1,[R1, #+4]
   \   0000006C   0118A0E1           LSL      R1,R1,#+16
   \   00000070   2118A0E1           LSR      R1,R1,#+16
   \   00000074   0114A0E1           LSL      R1,R1,#+8
   \   00000078   202C81E1           ORR      R2,R1,R0, LSR #+24
    216              break;
   \   0000007C   050000EA           B        ??_GetPixelIndex_1
    217            case 2:
    218              PixelIndex  = (Data & 0xFFFF0000) >> 16;
    219              Off++;
    220              Data        = READ_MEM32(pContext->VRAMAddr, Off);
    221              PixelIndex |= (Data & 0x000000FF) << 16;
   \                     ??_GetPixelIndex_4:
   \   00000080   03118CE0           ADD      R1,R12,R3, LSL #+2
   \   00000084   0410D1E5           LDRB     R1,[R1, #+4]
   \   00000088   0118A0E1           LSL      R1,R1,#+16
   \   0000008C   202881E1           ORR      R2,R1,R0, LSR #+16
    222              break;
   \   00000090   000000EA           B        ??_GetPixelIndex_1
    223            case 3:
    224              PixelIndex  = (Data & 0xFFFFFF00) >> 8;
   \                     ??_GetPixelIndex_5:
   \   00000094   2024A0E1           LSR      R2,R0,#+8
    225              break;
    226            }
    227            return PixelIndex;
   \                     ??_GetPixelIndex_1:
   \   00000098   0200A0E1           MOV      R0,R2
   \   0000009C   1EFF2FE1           BX       LR               ;; return
    228          }
    229          
    230          /*********************************************************************
    231          *
    232          *       _XorPixel
    233          */

   \                                 In section .text, align 4, keep-with-next
    234          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    235            LCD_PIXELINDEX PixelIndex;
    236            LCD_PIXELINDEX IndexMask;
    237          
    238            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   102090E5           LDR      R2,[R0, #+16]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   012042E2           SUB      R2,R2,#+1
   \   0000001C   143090E5           LDR      R3,[R0, #+20]
   \   00000020   0C1090E5           LDR      R1,[R0, #+12]
   \   00000024   062042E0           SUB      R2,R2,R6
   \   00000028   930202E0           MUL      R2,R3,R2
   \   0000002C   011041E2           SUB      R1,R1,#+1
   \   00000030   051041E0           SUB      R1,R1,R5
   \   00000034   822082E0           ADD      R2,R2,R2, LSL #+1
   \   00000038   813081E0           ADD      R3,R1,R1, LSL #+1
   \   0000003C   022083E0           ADD      R2,R3,R2
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   2221A0E1           LSR      R2,R2,#+2
   \   00000048   031001E2           AND      R1,R1,#0x3
   \   0000004C   04D04DE2           SUB      SP,SP,#+4
   \   00000050   020193E7           LDR      R0,[R3, +R2, LSL #+2]
   \   00000054   030051E3           CMP      R1,#+3
   \   00000058   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_XorPixel_0:
   \   0000005C   1100008A           BHI      ??_XorPixel_1
   \   00000060   0E0000EA           B        ??_XorPixel_2
   \   00000064   060000EA           B        ??_XorPixel_3
   \   00000068   000000EA           B        ??_XorPixel_4
   \   0000006C   0C0000EA           B        ??_XorPixel_5
   \                     ??_XorPixel_4:
   \   00000070   021183E0           ADD      R1,R3,R2, LSL #+2
   \   00000074   0410D1E5           LDRB     R1,[R1, #+4]
   \   00000078   0118A0E1           LSL      R1,R1,#+16
   \   0000007C   207881E1           ORR      R7,R1,R0, LSR #+16
   \   00000080   080000EA           B        ??_XorPixel_1
   \                     ??_XorPixel_3:
   \   00000084   021183E0           ADD      R1,R3,R2, LSL #+2
   \   00000088   B410D1E1           LDRH     R1,[R1, #+4]
   \   0000008C   0118A0E1           LSL      R1,R1,#+16
   \   00000090   2118A0E1           LSR      R1,R1,#+16
   \   00000094   0114A0E1           LSL      R1,R1,#+8
   \   00000098   207C81E1           ORR      R7,R1,R0, LSR #+24
   \   0000009C   010000EA           B        ??_XorPixel_1
   \                     ??_XorPixel_2:
   \   000000A0   0004A0E1           LSL      R0,R0,#+8
   \                     ??_XorPixel_5:
   \   000000A4   2074A0E1           LSR      R7,R0,#+8
    239            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_XorPixel_1:
   \   000000A8   100094E5           LDR      R0,[R4, #+16]
   \   000000AC   080090E5           LDR      R0,[R0, #+8]
   \   000000B0   30FF2FE1           BLX      R0
    240            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   000000B4   073020E0           EOR      R3,R0,R7
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   04D08DE2           ADD      SP,SP,#+4
   \   000000C8   F040BDE8           POP      {R4-R7,LR}
   \   000000CC   ........           B        _SetPixelIndex   ;; tailcall
    241          }
    242          
    243          /*********************************************************************
    244          *
    245          *       _DrawHLine
    246          */

   \                                 In section .text, align 4, keep-with-next
    247          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    248            DRIVER_CONTEXT * pContext;
    249            int Off, RemPixels, Odd, temp;
    250            U32 Data;
    251            LCD_PIXELINDEX ColorIndex;
    252          
    253            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable12
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   010010E3           TST      R0,#0x1
   \   00000024   0900000A           BEQ      ??_DrawHLine_0
   \   00000028   040056E1           CMP      R6,R4
   \   0000002C   7B0000BA           BLT      ??_DrawHLine_1
    254              for (; x0 <= x1; x0++) {
    255                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   00000030   0520A0E1           MOV      R2,R5
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           BL       _XorPixel
    256              }
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   040056E1           CMP      R6,R4
   \   00000048   F8FFFFAA           BGE      ??_DrawHLine_2
   \   0000004C   730000EA           B        ??_DrawHLine_1
    257            } else {
    258              ColorIndex = LCD__GetColorIndex();
    259              //
    260              // Get context
    261              //
    262              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawHLine_0:
   \   00000050   081097E5           LDR      R1,[R7, #+8]
   \   00000054   ........           LDR      R0,??DataTable13
    263              //
    264              // Mirror x
    265              //
    266              temp = x0;
   \   00000058   0C2091E5           LDR      R2,[R1, #+12]
    267              x0 = (pContext->vxSize - 1 - x1);
    268              x1 = (pContext->vxSize - 1 - temp);
    269              //
    270              // Mirror y
    271              //
    272              y = (pContext->vySize - 1 - y);
    273              //
    274              // Draw...
    275              //
    276              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
   \   0000005C   14E091E5           LDR      LR,[R1, #+20]
   \   00000060   01C042E2           SUB      R12,R2,#+1
   \   00000064   102091E5           LDR      R2,[R1, #+16]
   \   00000068   0430A0E1           MOV      R3,R4
   \   0000006C   012042E2           SUB      R2,R2,#+1
   \   00000070   052042E0           SUB      R2,R2,R5
   \   00000074   9E0202E0           MUL      R2,LR,R2
   \   00000078   06404CE0           SUB      R4,R12,R6
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   822082E0           ADD      R2,R2,R2, LSL #+1
   \   00000084   84E084E0           ADD      LR,R4,R4, LSL #+1
    277              RemPixels = x1 - x0 + 1;
   \   00000088   03304CE0           SUB      R3,R12,R3
   \   0000008C   02208EE0           ADD      R2,LR,R2
   \   00000090   043043E0           SUB      R3,R3,R4
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   2221A0E1           LSR      R2,R2,#+2
   \   0000009C   013083E2           ADD      R3,R3,#+1
    278              //
    279              // First triple DWORD
    280              //
    281              Odd = x0 & 3;
   \   000000A0   03C014E2           ANDS     R12,R4,#0x3
    282              if (Odd) {
   \   000000A4   2900000A           BEQ      ??_DrawHLine_3
    283                Data  = READ_MEM32(pContext->VRAMAddr, Off);
   \   000000A8   00E091E5           LDR      LR,[R1, #+0]
    284                switch (Odd) {
   \   000000AC   01005CE3           CMP      R12,#+1
   \   000000B0   02419EE7           LDR      R4,[LR, +R2, LSL #+2]
   \   000000B4   0400000A           BEQ      ??_DrawHLine_4
   \   000000B8   2400003A           BCC      ??_DrawHLine_3
   \   000000BC   03005CE3           CMP      R12,#+3
   \   000000C0   1C00000A           BEQ      ??_DrawHLine_5
   \   000000C4   0F00003A           BCC      ??_DrawHLine_6
   \   000000C8   200000EA           B        ??_DrawHLine_3
    285                case 1:
    286                  Data &= 0x00FFFFFF;
    287                  Data |= ColorIndex << 24;
    288                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_4:
   \   000000CC   04C4A0E1           LSL      R12,R4,#+8
   \   000000D0   004CA0E1           LSL      R4,R0,#+24
   \   000000D4   2CC484E1           ORR      R12,R4,R12, LSR #+8
   \   000000D8   02C18EE7           STR      R12,[LR, +R2, LSL #+2]
    289                  Off++;
    290                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    291                  Data &= 0xFFFF0000;
    292                  Data |= ColorIndex >> 8;
   \   000000DC   00C091E5           LDR      R12,[R1, #+0]
   \   000000E0   012082E2           ADD      R2,R2,#+1
   \   000000E4   02C19CE7           LDR      R12,[R12, +R2, LSL #+2]
   \   000000E8   20E4A0E1           LSR      LR,R0,#+8
   \   000000EC   2CC8A0E1           LSR      R12,R12,#+16
   \   000000F0   0C488EE1           ORR      R4,LR,R12, LSL #+16
    293                  RemPixels--;
   \   000000F4   013053E2           SUBS     R3,R3,#+1
    294                  if (!RemPixels) {
   \   000000F8   0200001A           BNE      ??_DrawHLine_6
    295                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_7:
   \   000000FC   00C091E5           LDR      R12,[R1, #+0]
   \   00000100   02418CE7           STR      R4,[R12, +R2, LSL #+2]
    296                    break;
   \   00000104   110000EA           B        ??_DrawHLine_3
    297                  }
    298                  //
    299                  // no break at this position required...
    300                  //
    301                case 2:
    302                  Data &= 0x0000FFFF;
    303                  Data |= ColorIndex << 16;
    304                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_6:
   \   00000108   04C8A0E1           LSL      R12,R4,#+16
   \   0000010C   00E8A0E1           LSL      LR,R0,#+16
   \   00000110   2CC88EE1           ORR      R12,LR,R12, LSR #+16
   \   00000114   00E091E5           LDR      LR,[R1, #+0]
    305                  Off++;
    306                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    307                  Data &= 0xFFFFFF00;
    308                  Data |= ColorIndex >> 16;
    309                  RemPixels--;
   \   00000118   013053E2           SUBS     R3,R3,#+1
   \   0000011C   02C18EE7           STR      R12,[LR, +R2, LSL #+2]
   \   00000120   00C091E5           LDR      R12,[R1, #+0]
   \   00000124   012082E2           ADD      R2,R2,#+1
   \   00000128   02C19CE7           LDR      R12,[R12, +R2, LSL #+2]
   \   0000012C   FFC0CCE3           BIC      R12,R12,#0xFF
   \   00000130   20488CE1           ORR      R4,R12,R0, LSR #+16
    310                  if (!RemPixels) {
   \   00000134   F0FFFF0A           BEQ      ??_DrawHLine_7
    311                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    312                    break;
    313                  }
    314                  //
    315                  // no break at this position required...
    316                  //
    317                case 3:
    318                  Data &= 0x000000FF;
    319                  Data |= ColorIndex << 8;
    320                  RemPixels--;
    321                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_5:
   \   00000138   FFC004E2           AND      R12,R4,#0xFF
   \   0000013C   00E091E5           LDR      LR,[R1, #+0]
   \   00000140   00C48CE1           ORR      R12,R12,R0, LSL #+8
   \   00000144   02C18EE7           STR      R12,[LR, +R2, LSL #+2]
   \   00000148   013043E2           SUB      R3,R3,#+1
    322                  Off++;
   \   0000014C   012082E2           ADD      R2,R2,#+1
    323                }
    324              }
    325              //
    326              // Complete triple DWORDS
    327              //
    328              if (RemPixels >= 4) {
   \                     ??_DrawHLine_3:
   \   00000150   040053E3           CMP      R3,#+4
   \   00000154   100000BA           BLT      ??_DrawHLine_8
    329                U32 Data0, Data1, Data2;
    330                Data0 = (ColorIndex      ) | (ColorIndex << 24);
    331                Data1 = (ColorIndex >>  8) | (ColorIndex << 16);
   \   00000158   00E8A0E1           LSL      LR,R0,#+16
    332                Data2 = (ColorIndex >> 16) | (ColorIndex <<  8);
   \   0000015C   0044A0E1           LSL      R4,R0,#+8
   \   00000160   00CC80E1           ORR      R12,R0,R0, LSL #+24
   \   00000164   20E48EE1           ORR      LR,LR,R0, LSR #+8
   \   00000168   204884E1           ORR      R4,R4,R0, LSR #+16
    333                do {
    334                  WRITE_MEM32(pContext->VRAMAddr, Off + 0, Data0);
   \                     ??_DrawHLine_9:
   \   0000016C   005091E5           LDR      R5,[R1, #+0]
    335                  WRITE_MEM32(pContext->VRAMAddr, Off + 1, Data1);
    336                  WRITE_MEM32(pContext->VRAMAddr, Off + 2, Data2);
    337                  Off += 3;
    338                } while ((RemPixels -= 4) >= 4);
   \   00000170   043043E2           SUB      R3,R3,#+4
   \   00000174   02C185E7           STR      R12,[R5, +R2, LSL #+2]
   \   00000178   005091E5           LDR      R5,[R1, #+0]
   \   0000017C   040053E3           CMP      R3,#+4
   \   00000180   025185E0           ADD      R5,R5,R2, LSL #+2
   \   00000184   04E085E5           STR      LR,[R5, #+4]
   \   00000188   005091E5           LDR      R5,[R1, #+0]
   \   0000018C   025185E0           ADD      R5,R5,R2, LSL #+2
   \   00000190   084085E5           STR      R4,[R5, #+8]
   \   00000194   032082E2           ADD      R2,R2,#+3
   \   00000198   F3FFFFAA           BGE      ??_DrawHLine_9
    339              }
    340              //
    341              // Last triple DWORD
    342              //
    343              if (RemPixels) {
   \                     ??_DrawHLine_8:
   \   0000019C   000053E3           CMP      R3,#+0
   \   000001A0   1E00000A           BEQ      ??_DrawHLine_1
    344                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    345                Data &= 0xFF000000;
    346                Data |= ColorIndex;
   \   000001A4   00C091E5           LDR      R12,[R1, #+0]
    347                RemPixels--;
   \   000001A8   013053E2           SUBS     R3,R3,#+1
   \   000001AC   02E19CE7           LDR      LR,[R12, +R2, LSL #+2]
   \   000001B0   FFE40EE2           AND      LR,LR,#0xFF000000
   \   000001B4   0E4080E1           ORR      R4,R0,LR
    348                if (!RemPixels) {
   \   000001B8   0200001A           BNE      ??_DrawHLine_10
    349                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_11:
   \   000001BC   000091E5           LDR      R0,[R1, #+0]
   \   000001C0   024180E7           STR      R4,[R0, +R2, LSL #+2]
    350                  return;
   \   000001C4   150000EA           B        ??_DrawHLine_1
    351                }
    352                Data &= 0x00FFFFFF;
    353                Data |= ColorIndex << 24;
    354                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawHLine_10:
   \   000001C8   04E4A0E1           LSL      LR,R4,#+8
   \   000001CC   004CA0E1           LSL      R4,R0,#+24
   \   000001D0   2EE484E1           ORR      LR,R4,LR, LSR #+8
   \   000001D4   02E18CE7           STR      LR,[R12, +R2, LSL #+2]
    355                Off++;
    356                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    357                Data &= 0xFFFF0000;
    358                Data |= ColorIndex >> 8;
   \   000001D8   00C091E5           LDR      R12,[R1, #+0]
   \   000001DC   012082E2           ADD      R2,R2,#+1
   \   000001E0   02E19CE7           LDR      LR,[R12, +R2, LSL #+2]
   \   000001E4   2044A0E1           LSR      R4,R0,#+8
   \   000001E8   2EE8A0E1           LSR      LR,LR,#+16
   \   000001EC   0E4884E1           ORR      R4,R4,LR, LSL #+16
    359                RemPixels--;
    360                if (!RemPixels) {
   \   000001F0   013053E2           SUBS     R3,R3,#+1
   \   000001F4   F0FFFF0A           BEQ      ??_DrawHLine_11
    361                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    362                  return;
    363                }
    364                Data &= 0x0000FFFF;
    365                Data |= ColorIndex << 16;
    366                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000001F8   0438A0E1           LSL      R3,R4,#+16
   \   000001FC   00E8A0E1           LSL      LR,R0,#+16
   \   00000200   23388EE1           ORR      R3,LR,R3, LSR #+16
   \   00000204   02318CE7           STR      R3,[R12, +R2, LSL #+2]
    367                Off++;
    368                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    369                Data &= 0xFFFFFF00;
    370                Data |= ColorIndex >> 16;
    371                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   00000208   001091E5           LDR      R1,[R1, #+0]
   \   0000020C   012082E2           ADD      R2,R2,#+1
   \   00000210   023191E7           LDR      R3,[R1, +R2, LSL #+2]
   \   00000214   FF30C3E3           BIC      R3,R3,#0xFF
   \   00000218   200883E1           ORR      R0,R3,R0, LSR #+16
   \   0000021C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \                     ??_DrawHLine_1:
   \   00000220   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000224   F080BDE8           POP      {R4-R7,PC}       ;; return
    372              }
    373            }
    374          }
    375          
    376          /*********************************************************************
    377          *
    378          *       _DrawVLine
    379          */

   \                                 In section .text, align 4, keep-with-next
    380          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    381            LCD_PIXELINDEX ColorIndex;
    382          
    383            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable12
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   0900000A           BEQ      ??_DrawVLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   140000BA           BLT      ??_DrawVLine_1
    384              for (; y0 <= y1; y0++) {
    385                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   0720A0E1           MOV      R2,R7
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _XorPixel
    386              }
   \   0000003C   017087E2           ADD      R7,R7,#+1
   \   00000040   070056E1           CMP      R6,R7
   \   00000044   F8FFFFAA           BGE      ??_DrawVLine_2
   \   00000048   F081BDE8           POP      {R4-R8,PC}
    387            } else {
    388              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   0000004C   ........           LDR      R0,??DataTable13
   \   00000050   070056E1           CMP      R6,R7
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   008090E5           LDR      R8,[R0, #+0]
   \   0000005C   070000BA           BLT      ??_DrawVLine_1
    389              for (; y0 <= y1; y0++) {
    390                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   00000060   0830A0E1           MOV      R3,R8
   \   00000064   0720A0E1           MOV      R2,R7
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       _SetPixelIndex
    391              }
   \   00000074   017087E2           ADD      R7,R7,#+1
   \   00000078   070056E1           CMP      R6,R7
   \   0000007C   F7FFFFAA           BGE      ??_DrawVLine_3
    392            }
    393          }
   \                     ??_DrawVLine_1:
   \   00000080   F081BDE8           POP      {R4-R8,PC}       ;; return
    394          
    395          /*********************************************************************
    396          *
    397          *       _FillRect
    398          */

   \                                 In section .text, align 4, keep-with-next
    399          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    400            DRIVER_CONTEXT * pContext;
    401            int Off, RemPixels, Odd, temp;
    402            U32 Data;
    403            LCD_PIXELINDEX ColorIndex;
    404          
    405            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable12
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0350A0E1           MOV      R5,R3
   \   00000020   010010E3           TST      R0,#0x1
   \   00000024   0C00000A           BEQ      ??_FillRect_0
   \   00000028   38009DE5           LDR      R0,[SP, #+56]
   \   0000002C   060050E1           CMP      R0,R6
   \   00000030   8A0000BA           BLT      ??_FillRect_1
    406              for (; y0 <= y1; y0++) {
    407                _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_2:
   \   00000034   0530A0E1           MOV      R3,R5
   \   00000038   0620A0E1           MOV      R2,R6
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           BL       _DrawHLine
    408              }
   \   00000048   38009DE5           LDR      R0,[SP, #+56]
   \   0000004C   016086E2           ADD      R6,R6,#+1
   \   00000050   060050E1           CMP      R0,R6
   \   00000054   F6FFFFAA           BGE      ??_FillRect_2
   \   00000058   800000EA           B        ??_FillRect_1
    409            } else {
    410              ColorIndex = LCD__GetColorIndex();
    411              //
    412              // Get context
    413              //
    414              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_FillRect_0:
   \   0000005C   081097E5           LDR      R1,[R7, #+8]
    415              //
    416              // Mirror x
    417              //
    418              temp = x0;
   \   00000060   0420A0E1           MOV      R2,R4
   \   00000064   0C3091E5           LDR      R3,[R1, #+12]
   \   00000068   ........           LDR      R0,??DataTable13
   \   0000006C   013043E2           SUB      R3,R3,#+1
   \   00000070   054043E0           SUB      R4,R3,R5
    419              x0 = (pContext->vxSize - 1 - x1);
    420              x1 = (pContext->vxSize - 1 - temp);
   \   00000074   025043E0           SUB      R5,R3,R2
    421              //
    422              // Mirror y
    423              //
    424              temp = y0;
   \   00000078   103091E5           LDR      R3,[R1, #+16]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   0620A0E1           MOV      R2,R6
   \   00000084   013043E2           SUB      R3,R3,#+1
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   38C09DE5           LDR      R12,[SP, #+56]
    425              y0 = (pContext->vySize - 1 - y1);
    426              y1 = (pContext->vySize - 1 - temp);
   \   00000090   022043E0           SUB      R2,R3,R2
   \   00000094   38208DE5           STR      R2,[SP, #+56]
    427              //
    428              // Draw...
    429              //
    430              Odd = x0 & 3;
   \   00000098   032004E2           AND      R2,R4,#0x3
   \   0000009C   00208DE5           STR      R2,[SP, #+0]
   \   000000A0   0024A0E1           LSL      R2,R0,#+8
   \   000000A4   202882E1           ORR      R2,R2,R0, LSR #+16
   \   000000A8   0C6043E0           SUB      R6,R3,R12
   \   000000AC   0C208DE5           STR      R2,[SP, #+12]
   \   000000B0   0028A0E1           LSL      R2,R0,#+16
   \   000000B4   2034A0E1           LSR      R3,R0,#+8
   \   000000B8   03C082E1           ORR      R12,R2,R3
   \   000000BC   08C08DE5           STR      R12,[SP, #+8]
   \   000000C0   00CCA0E1           LSL      R12,R0,#+24
   \   000000C4   00E08CE1           ORR      LR,R12,R0
   \   000000C8   04E08DE5           STR      LR,[SP, #+4]
    431              do {
    432                Off = XY2OFF32(pContext->vxSizePhys, x0, y0);
   \                     ??_FillRect_3:
   \   000000CC   14E091E5           LDR      LR,[R1, #+20]
   \   000000D0   847084E0           ADD      R7,R4,R4, LSL #+1
   \   000000D4   960E0EE0           MUL      LR,R6,LR
    433                RemPixels = x1 - x0 + 1;
    434                //
    435                // First triple DWORD
    436                //
    437                if (Odd) {
   \   000000D8   00809DE5           LDR      R8,[SP, #+0]
   \   000000DC   8EE08EE0           ADD      LR,LR,LR, LSL #+1
   \   000000E0   0EE087E0           ADD      LR,R7,LR
   \   000000E4   2E71A0E1           LSR      R7,LR,#+2
   \   000000E8   04E045E0           SUB      LR,R5,R4
   \   000000EC   01E08EE2           ADD      LR,LR,#+1
   \   000000F0   000058E3           CMP      R8,#+0
   \   000000F4   2700000A           BEQ      ??_FillRect_4
    438                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
   \   000000F8   009091E5           LDR      R9,[R1, #+0]
    439                  switch (Odd) {
   \   000000FC   00A09DE5           LDR      R10,[SP, #+0]
   \   00000100   078199E7           LDR      R8,[R9, +R7, LSL #+2]
   \   00000104   01005AE3           CMP      R10,#+1
   \   00000108   0400000A           BEQ      ??_FillRect_5
   \   0000010C   2100003A           BCC      ??_FillRect_4
   \   00000110   03005AE3           CMP      R10,#+3
   \   00000114   1900000A           BEQ      ??_FillRect_6
   \   00000118   0D00003A           BCC      ??_FillRect_7
   \   0000011C   1D0000EA           B        ??_FillRect_4
    440                  case 1:
    441                    Data &= 0x00FFFFFF;
    442                    Data |= ColorIndex << 24;
    443                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_5:
   \   00000120   0884A0E1           LSL      R8,R8,#+8
   \   00000124   28848CE1           ORR      R8,R12,R8, LSR #+8
   \   00000128   078189E7           STR      R8,[R9, +R7, LSL #+2]
    444                    Off++;
    445                    Data  = READ_MEM32(pContext->VRAMAddr, Off);
    446                    Data &= 0xFFFF0000;
    447                    Data |= ColorIndex >> 8;
   \   0000012C   008091E5           LDR      R8,[R1, #+0]
   \   00000130   017087E2           ADD      R7,R7,#+1
   \   00000134   078198E7           LDR      R8,[R8, +R7, LSL #+2]
    448                    RemPixels--;
   \   00000138   01E05EE2           SUBS     LR,LR,#+1
   \   0000013C   2888A0E1           LSR      R8,R8,#+16
   \   00000140   088883E1           ORR      R8,R3,R8, LSL #+16
    449                    if (!RemPixels) {
   \   00000144   0200001A           BNE      ??_FillRect_7
    450                      WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_8:
   \   00000148   009091E5           LDR      R9,[R1, #+0]
   \   0000014C   078189E7           STR      R8,[R9, +R7, LSL #+2]
    451                      break;
   \   00000150   100000EA           B        ??_FillRect_4
    452                    }
    453                    //
    454                    // no break at this position required...
    455                    //
    456                  case 2:
    457                    Data &= 0x0000FFFF;
    458                    Data |= ColorIndex << 16;
    459                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_7:
   \   00000154   0888A0E1           LSL      R8,R8,#+16
   \   00000158   009091E5           LDR      R9,[R1, #+0]
   \   0000015C   288882E1           ORR      R8,R2,R8, LSR #+16
   \   00000160   078189E7           STR      R8,[R9, +R7, LSL #+2]
    460                    Off++;
    461                    Data  = READ_MEM32(pContext->VRAMAddr, Off);
    462                    Data &= 0xFFFFFF00;
    463                    Data |= ColorIndex >> 16;
   \   00000164   008091E5           LDR      R8,[R1, #+0]
   \   00000168   017087E2           ADD      R7,R7,#+1
   \   0000016C   078198E7           LDR      R8,[R8, +R7, LSL #+2]
    464                    RemPixels--;
   \   00000170   01E05EE2           SUBS     LR,LR,#+1
   \   00000174   FF80C8E3           BIC      R8,R8,#0xFF
   \   00000178   208888E1           ORR      R8,R8,R0, LSR #+16
    465                    if (!RemPixels) {
   \   0000017C   F1FFFF0A           BEQ      ??_FillRect_8
    466                      WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    467                      break;
    468                    }
    469                    //
    470                    // no break at this position required...
    471                    //
    472                  case 3:
    473                    Data &= 0x000000FF;
    474                    Data |= ColorIndex << 8;
    475                    RemPixels--;
    476                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_6:
   \   00000180   FF8008E2           AND      R8,R8,#0xFF
   \   00000184   009091E5           LDR      R9,[R1, #+0]
   \   00000188   008488E1           ORR      R8,R8,R0, LSL #+8
   \   0000018C   078189E7           STR      R8,[R9, +R7, LSL #+2]
   \   00000190   01E04EE2           SUB      LR,LR,#+1
    477                    Off++;
   \   00000194   017087E2           ADD      R7,R7,#+1
    478                  }
    479                }
    480                //
    481                // Complete triple DWORDS
    482                //
    483                if (RemPixels >= 4) {
   \                     ??_FillRect_4:
   \   00000198   04005EE3           CMP      LR,#+4
   \   0000019C   0E0000BA           BLT      ??_FillRect_9
    484                  U32 Data0, Data1, Data2;
    485                  Data0 = (ColorIndex      ) | (ColorIndex << 24);
   \   000001A0   04809DE5           LDR      R8,[SP, #+4]
    486                  Data1 = (ColorIndex >>  8) | (ColorIndex << 16);
   \   000001A4   08909DE5           LDR      R9,[SP, #+8]
    487                  Data2 = (ColorIndex >> 16) | (ColorIndex <<  8);
   \   000001A8   0CA09DE5           LDR      R10,[SP, #+12]
    488                  do {
    489                    WRITE_MEM32(pContext->VRAMAddr, Off + 0, Data0);
   \                     ??_FillRect_10:
   \   000001AC   00B091E5           LDR      R11,[R1, #+0]
    490                    WRITE_MEM32(pContext->VRAMAddr, Off + 1, Data1);
    491                    WRITE_MEM32(pContext->VRAMAddr, Off + 2, Data2);
    492                    Off += 3;
    493                  } while ((RemPixels -= 4) >= 4);
   \   000001B0   04E04EE2           SUB      LR,LR,#+4
   \   000001B4   07818BE7           STR      R8,[R11, +R7, LSL #+2]
   \   000001B8   00B091E5           LDR      R11,[R1, #+0]
   \   000001BC   04005EE3           CMP      LR,#+4
   \   000001C0   07B18BE0           ADD      R11,R11,R7, LSL #+2
   \   000001C4   04908BE5           STR      R9,[R11, #+4]
   \   000001C8   00B091E5           LDR      R11,[R1, #+0]
   \   000001CC   07B18BE0           ADD      R11,R11,R7, LSL #+2
   \   000001D0   08A08BE5           STR      R10,[R11, #+8]
   \   000001D4   037087E2           ADD      R7,R7,#+3
   \   000001D8   F3FFFFAA           BGE      ??_FillRect_10
    494                }
    495                //
    496                // Last triple DWORD
    497                //
    498                if (RemPixels) {
   \                     ??_FillRect_9:
   \   000001DC   00005EE3           CMP      LR,#+0
   \   000001E0   1A00000A           BEQ      ??_FillRect_11
    499                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    500                  Data &= 0xFF000000;
    501                  Data |= ColorIndex;
   \   000001E4   009091E5           LDR      R9,[R1, #+0]
    502                  RemPixels--;
   \   000001E8   01E05EE2           SUBS     LR,LR,#+1
   \   000001EC   078199E7           LDR      R8,[R9, +R7, LSL #+2]
   \   000001F0   FF8408E2           AND      R8,R8,#0xFF000000
   \   000001F4   088080E1           ORR      R8,R0,R8
    503                  if (!RemPixels) {
   \   000001F8   0100001A           BNE      ??_FillRect_12
    504                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_13:
   \   000001FC   00E091E5           LDR      LR,[R1, #+0]
   \   00000200   110000EA           B        ??_FillRect_14
    505                    continue;
    506                  }
    507                  Data &= 0x00FFFFFF;
    508                  Data |= ColorIndex << 24;
    509                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_FillRect_12:
   \   00000204   0884A0E1           LSL      R8,R8,#+8
   \   00000208   28848CE1           ORR      R8,R12,R8, LSR #+8
   \   0000020C   078189E7           STR      R8,[R9, +R7, LSL #+2]
    510                  Off++;
    511                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    512                  Data &= 0xFFFF0000;
    513                  Data |= ColorIndex >> 8;
   \   00000210   009091E5           LDR      R9,[R1, #+0]
   \   00000214   017087E2           ADD      R7,R7,#+1
   \   00000218   078199E7           LDR      R8,[R9, +R7, LSL #+2]
    514                  RemPixels--;
    515                  if (!RemPixels) {
   \   0000021C   01E05EE2           SUBS     LR,LR,#+1
   \   00000220   2888A0E1           LSR      R8,R8,#+16
   \   00000224   088883E1           ORR      R8,R3,R8, LSL #+16
   \   00000228   F3FFFF0A           BEQ      ??_FillRect_13
    516                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    517                    continue;
    518                  }
    519                  Data &= 0x0000FFFF;
    520                  Data |= ColorIndex << 16;
    521                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000022C   08E8A0E1           LSL      LR,R8,#+16
   \   00000230   2EE882E1           ORR      LR,R2,LR, LSR #+16
   \   00000234   07E189E7           STR      LR,[R9, +R7, LSL #+2]
    522                  Off++;
    523                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    524                  Data &= 0xFFFFFF00;
    525                  Data |= ColorIndex >> 16;
    526                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   00000238   00E091E5           LDR      LR,[R1, #+0]
   \   0000023C   017087E2           ADD      R7,R7,#+1
   \   00000240   07819EE7           LDR      R8,[LR, +R7, LSL #+2]
   \   00000244   FF80C8E3           BIC      R8,R8,#0xFF
   \   00000248   208888E1           ORR      R8,R8,R0, LSR #+16
   \                     ??_FillRect_14:
   \   0000024C   07818EE7           STR      R8,[LR, +R7, LSL #+2]
    527                }
    528              } while (++y0 <= y1);
   \                     ??_FillRect_11:
   \   00000250   38E09DE5           LDR      LR,[SP, #+56]
   \   00000254   016086E2           ADD      R6,R6,#+1
   \   00000258   06005EE1           CMP      LR,R6
   \   0000025C   9AFFFFAA           BGE      ??_FillRect_3
    529            }
    530          }
   \                     ??_FillRect_1:
   \   00000260   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000264   F08FBDE8           POP      {R4-R11,PC}      ;; return
    531          
    532          /*********************************************************************
    533          *
    534          *       Draw Bitmap 1 BPP
    535          */

   \                                 In section .text, align 4, keep-with-next
    536          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0360A0E1           MOV      R6,R3
    537            #define GET_PIXEL_INDEX(Index) {               \
    538              Index = ((Pixels & 1) ? Index1 : Index0);    \
    539              PixelCnt--;                                  \
    540              Pixels >>= 1;                                \
    541              if (PixelCnt == 0) {                         \
    542                Pixels |= LCD_aMirror[*(++p)] << PixelCnt; \
    543                PixelCnt += 8;                             \
    544              }                                            \
    545            }
    546            #define GET_PIXEL_INDEX_TRANS(Index, Bit) {    \
    547              Bit = Pixels & 1;                            \
    548              GET_PIXEL_INDEX(Index);                      \
    549            }
    550            DRIVER_CONTEXT * pContext;
    551            LCD_PIXELINDEX Index0, Index1;
    552            LCD_PIXELINDEX IndexMask;
    553            U32 Off, Data, Data0, Data1, Data2, Index;
    554            unsigned Pixels, PixelCnt, Odd, Bit;
    555          
    556            Index0 = *(pTrans + 0);
    557            Index1 = *(pTrans + 1);
    558            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    559            x += Diff;
    560            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R3,??DataTable12
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   01C0A0E1           MOV      R12,R1
   \   00000014   1030D3E5           LDRB     R3,[R3, #+16]
   \   00000018   38109DE5           LDR      R1,[SP, #+56]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   30709DE5           LDR      R7,[SP, #+48]
   \   00000024   0250A0E1           MOV      R5,R2
   \   00000028   000091E5           LDR      R0,[R1, #+0]
   \   0000002C   033003E2           AND      R3,R3,#0x3
   \   00000030   34809DE5           LDR      R8,[SP, #+52]
   \   00000034   041091E5           LDR      R1,[R1, #+4]
   \   00000038   082094E5           LDR      R2,[R4, #+8]
   \   0000003C   0C9087E0           ADD      R9,R7,R12
   \   00000040   030053E3           CMP      R3,#+3
   \   00000044   03F18F90           ADDLS    PC,PC,R3, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000048   2502008A           BHI      ??_DrawBitLine1BPP_2
   \   0000004C   020000EA           B        ??_DrawBitLine1BPP_3
   \   00000050   E80100EA           B        ??_DrawBitLine1BPP_4
   \   00000054   D60000EA           B        ??_DrawBitLine1BPP_5
   \   00000058   E60100EA           B        ??_DrawBitLine1BPP_4
    561            case 0:
    562              //
    563              // Mirror x
    564              //
    565              x = (pContext->vxSize - 1 - x);
   \                     ??_DrawBitLine1BPP_3:
   \   0000005C   0C3092E5           LDR      R3,[R2, #+12]
    566              //
    567              // Mirror y
    568              //
    569              y = (pContext->vySize - 1 - y);
    570              PixelCnt = 8 - Diff;
    571              Pixels   = LCD_aMirror[*p] >> Diff;
   \   00000060   00E0D6E5           LDRB     LR,[R6, #+0]
   \   00000064   013043E2           SUB      R3,R3,#+1
   \   00000068   099043E0           SUB      R9,R3,R9
   \   0000006C   ........           LDR      R3,??DataTable15
    572              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
   \   00000070   104092E5           LDR      R4,[R2, #+16]
   \   00000074   03E0DEE7           LDRB     LR,[LR, +R3]
   \   00000078   014044E2           SUB      R4,R4,#+1
   \   0000007C   054044E0           SUB      R4,R4,R5
   \   00000080   145092E5           LDR      R5,[R2, #+20]
   \   00000084   08C067E2           RSB      R12,R7,#+8
   \   00000088   5EE7A0E1           ASR      LR,LR,R7
   \   0000008C   855085E0           ADD      R5,R5,R5, LSL #+1
   \   00000090   897089E0           ADD      R7,R9,R9, LSL #+1
   \   00000094   957424E0           MLA      R4,R5,R4,R7
    573              //
    574              // First triple DWORD
    575              //
    576              Odd = x & 3;
   \   00000098   039009E2           AND      R9,R9,#0x3
   \   0000009C   2441A0E1           LSR      R4,R4,#+2
    577              if (Odd != 3) {
   \   000000A0   030059E3           CMP      R9,#+3
   \   000000A4   4B00000A           BEQ      ??_DrawBitLine1BPP_6
    578                if (Odd != 0) {
   \   000000A8   000059E3           CMP      R9,#+0
    579                  Off++;
    580                }
    581                Data = READ_MEM32(pContext->VRAMAddr, Off);
   \   000000AC   007092E5           LDR      R7,[R2, #+0]
   \   000000B0   01408412           ADDNE    R4,R4,#+1
   \   000000B4   045197E7           LDR      R5,[R7, +R4, LSL #+2]
    582                switch (Odd) {
   \   000000B8   3500000A           BEQ      ??_DrawBitLine1BPP_7
   \   000000BC   020059E3           CMP      R9,#+2
   \   000000C0   0100000A           BEQ      ??_DrawBitLine1BPP_8
   \   000000C4   1A00003A           BCC      ??_DrawBitLine1BPP_9
   \   000000C8   420000EA           B        ??_DrawBitLine1BPP_6
    583                case 2:
    584                  GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine1BPP_8:
   \   000000CC   01001EE3           TST      LR,#0x1
   \   000000D0   01B0A011           MOVNE    R11,R1
   \   000000D4   00B0A001           MOVEQ    R11,R0
   \   000000D8   01C04CE2           SUB      R12,R12,#+1
   \   000000DC   AEE0A0E1           LSR      LR,LR,#+1
   \   000000E0   00005CE3           CMP      R12,#+0
   \   000000E4   0300001A           BNE      ??_DrawBitLine1BPP_10
   \   000000E8   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   000000EC   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000000F0   0EE08CE1           ORR      LR,R12,LR
   \   000000F4   08C0A0E3           MOV      R12,#+8
    585                  Data &= 0xFFFFFF00;
    586                  Data |= Index >> 16;
    587                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_10:
   \   000000F8   FF50C5E3           BIC      R5,R5,#0xFF
   \   000000FC   2B5885E1           ORR      R5,R5,R11, LSR #+16
   \   00000100   045187E7           STR      R5,[R7, +R4, LSL #+2]
    588                  Off--;
    589                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    590                  Data &= 0x0000FFFF;
    591                  Data |= Index << 16;
   \   00000104   005092E5           LDR      R5,[R2, #+0]
   \   00000108   014044E2           SUB      R4,R4,#+1
   \   0000010C   045185E0           ADD      R5,R5,R4, LSL #+2
   \   00000110   B050D5E1           LDRH     R5,[R5, #+0]
   \   00000114   0B78A0E1           LSL      R7,R11,#+16
    592                  xsize--;                  
   \   00000118   018058E2           SUBS     R8,R8,#+1
   \   0000011C   0558A0E1           LSL      R5,R5,#+16
   \   00000120   255887E1           ORR      R5,R7,R5, LSR #+16
    593                  if (!xsize) {
   \   00000124   0200001A           BNE      ??_DrawBitLine1BPP_9
    594                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
   \                     ??_DrawBitLine1BPP_11:
   \   00000128   007092E5           LDR      R7,[R2, #+0]
   \   0000012C   045187E7           STR      R5,[R7, +R4, LSL #+2]
    595                    break;
   \   00000130   280000EA           B        ??_DrawBitLine1BPP_6
    596                  }
    597                case 1:
    598                  GET_PIXEL_INDEX(Index);   
   \                     ??_DrawBitLine1BPP_9:
   \   00000134   01001EE3           TST      LR,#0x1
   \   00000138   01B0A011           MOVNE    R11,R1
   \   0000013C   00B0A001           MOVEQ    R11,R0
   \   00000140   01C04CE2           SUB      R12,R12,#+1
   \   00000144   AEE0A0E1           LSR      LR,LR,#+1
   \   00000148   00005CE3           CMP      R12,#+0
   \   0000014C   0300001A           BNE      ??_DrawBitLine1BPP_12
   \   00000150   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000154   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000158   0EE08CE1           ORR      LR,R12,LR
   \   0000015C   08C0A0E3           MOV      R12,#+8
    599                  Data &= 0xFFFF0000;
    600                  Data |= Index >> 8;
    601                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_12:
   \   00000160   2558A0E1           LSR      R5,R5,#+16
   \   00000164   2B74A0E1           LSR      R7,R11,#+8
   \   00000168   055887E1           ORR      R5,R7,R5, LSL #+16
   \   0000016C   007092E5           LDR      R7,[R2, #+0]
    602                  Off--;
    603                  Data = READ_MEM32(pContext->VRAMAddr, Off);
    604                  Data &= 0x00FFFFFF;
    605                  Data |= Index << 24;
    606                  xsize--;                  
   \   00000170   018058E2           SUBS     R8,R8,#+1
   \   00000174   045187E7           STR      R5,[R7, +R4, LSL #+2]
   \   00000178   005092E5           LDR      R5,[R2, #+0]
   \   0000017C   014044E2           SUB      R4,R4,#+1
   \   00000180   045195E7           LDR      R5,[R5, +R4, LSL #+2]
   \   00000184   0B7CA0E1           LSL      R7,R11,#+24
   \   00000188   0554A0E1           LSL      R5,R5,#+8
   \   0000018C   255487E1           ORR      R5,R7,R5, LSR #+8
    607                  if (!xsize) {
   \   00000190   E4FFFF0A           BEQ      ??_DrawBitLine1BPP_11
    608                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
    609                    break;
    610                  }
    611                case 0:
    612                  GET_PIXEL_INDEX(Index);   
   \                     ??_DrawBitLine1BPP_7:
   \   00000194   01001EE3           TST      LR,#0x1
   \   00000198   01B0A011           MOVNE    R11,R1
   \   0000019C   00B0A001           MOVEQ    R11,R0
   \   000001A0   01C04CE2           SUB      R12,R12,#+1
   \   000001A4   AEE0A0E1           LSR      LR,LR,#+1
   \   000001A8   00005CE3           CMP      R12,#+0
   \   000001AC   0300001A           BNE      ??_DrawBitLine1BPP_13
   \   000001B0   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   000001B4   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000001B8   0EE08CE1           ORR      LR,R12,LR
   \   000001BC   08C0A0E3           MOV      R12,#+8
    613                  Data &= 0xFF000000;
    614                  Data |= Index;
    615                  xsize--;                  
    616                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);     
   \                     ??_DrawBitLine1BPP_13:
   \   000001C0   007092E5           LDR      R7,[R2, #+0]
   \   000001C4   FF5405E2           AND      R5,R5,#0xFF000000
   \   000001C8   05508BE1           ORR      R5,R11,R5
   \   000001CC   045187E7           STR      R5,[R7, +R4, LSL #+2]
   \   000001D0   018048E2           SUB      R8,R8,#+1
    617                  Off--;
   \   000001D4   014044E2           SUB      R4,R4,#+1
    618                }
    619              }
    620              //
    621              // Complete triple DWORDS
    622              //
    623              if (xsize >= 4) {
   \                     ??_DrawBitLine1BPP_6:
   \   000001D8   040058E3           CMP      R8,#+4
   \   000001DC   3C0000BA           BLT      ??_DrawBitLine1BPP_14
    624                do {
    625                  /* OK */
    626                  GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine1BPP_15:
   \   000001E0   01001EE3           TST      LR,#0x1
   \   000001E4   0150A011           MOVNE    R5,R1
   \   000001E8   0050A001           MOVEQ    R5,R0
   \   000001EC   01C04CE2           SUB      R12,R12,#+1
   \   000001F0   AEE0A0E1           LSR      LR,LR,#+1
   \   000001F4   00005CE3           CMP      R12,#+0
   \   000001F8   0300001A           BNE      ??_DrawBitLine1BPP_16
   \   000001FC   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000200   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000204   0EE08CE1           ORR      LR,R12,LR
   \   00000208   08C0A0E3           MOV      R12,#+8
    627                  Data0  = (Index <<  8);
   \                     ??_DrawBitLine1BPP_16:
   \   0000020C   0574A0E1           LSL      R7,R5,#+8
    628                  GET_PIXEL_INDEX(Index);
   \   00000210   01001EE3           TST      LR,#0x1
   \   00000214   0150A011           MOVNE    R5,R1
   \   00000218   0050A001           MOVEQ    R5,R0
   \   0000021C   01C04CE2           SUB      R12,R12,#+1
   \   00000220   AEE0A0E1           LSR      LR,LR,#+1
   \   00000224   00005CE3           CMP      R12,#+0
   \   00000228   0300001A           BNE      ??_DrawBitLine1BPP_17
   \   0000022C   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000230   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000234   0EE08CE1           ORR      LR,R12,LR
   \   00000238   08C0A0E3           MOV      R12,#+8
    629                  Data0 |= (Index >> 16);
   \                     ??_DrawBitLine1BPP_17:
   \   0000023C   257887E1           ORR      R7,R7,R5, LSR #+16
    630                  Data1  = (Index << 16);
   \   00000240   0598A0E1           LSL      R9,R5,#+16
    631                  GET_PIXEL_INDEX(Index);
   \   00000244   01001EE3           TST      LR,#0x1
   \   00000248   0150A011           MOVNE    R5,R1
   \   0000024C   0050A001           MOVEQ    R5,R0
   \   00000250   01C04CE2           SUB      R12,R12,#+1
   \   00000254   AEE0A0E1           LSR      LR,LR,#+1
   \   00000258   00005CE3           CMP      R12,#+0
   \   0000025C   0300001A           BNE      ??_DrawBitLine1BPP_18
   \   00000260   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000264   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000268   0EE08CE1           ORR      LR,R12,LR
   \   0000026C   08C0A0E3           MOV      R12,#+8
    632                  Data1 |= (Index >>  8);
    633                  Data2  = (Index << 24);
    634                  GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine1BPP_18:
   \   00000270   01001EE3           TST      LR,#0x1
   \   00000274   01B0A011           MOVNE    R11,R1
   \   00000278   00B0A001           MOVEQ    R11,R0
   \   0000027C   01C04CE2           SUB      R12,R12,#+1
   \   00000280   259489E1           ORR      R9,R9,R5, LSR #+8
   \   00000284   AEE0A0E1           LSR      LR,LR,#+1
   \   00000288   00005CE3           CMP      R12,#+0
   \   0000028C   0300001A           BNE      ??_DrawBitLine1BPP_19
   \   00000290   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000294   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000298   0EE08CE1           ORR      LR,R12,LR
   \   0000029C   08C0A0E3           MOV      R12,#+8
    635                  Data2 |= (Index      );
    636                  WRITE_MEM32(pContext->VRAMAddr, Off - 0, Data0);
   \                     ??_DrawBitLine1BPP_19:
   \   000002A0   00A092E5           LDR      R10,[R2, #+0]
    637                  WRITE_MEM32(pContext->VRAMAddr, Off - 1, Data1);
    638                  WRITE_MEM32(pContext->VRAMAddr, Off - 2, Data2);
   \   000002A4   055C8BE1           ORR      R5,R11,R5, LSL #+24
   \   000002A8   04718AE7           STR      R7,[R10, +R4, LSL #+2]
   \   000002AC   007092E5           LDR      R7,[R2, #+0]
    639                  Off -= 3;
    640                } while ((xsize -= 4) >= 4);
   \   000002B0   048048E2           SUB      R8,R8,#+4
   \   000002B4   047187E0           ADD      R7,R7,R4, LSL #+2
   \   000002B8   049007E5           STR      R9,[R7, #-4]
   \   000002BC   007092E5           LDR      R7,[R2, #+0]
   \   000002C0   040058E3           CMP      R8,#+4
   \   000002C4   047187E0           ADD      R7,R7,R4, LSL #+2
   \   000002C8   085007E5           STR      R5,[R7, #-8]
   \   000002CC   034044E2           SUB      R4,R4,#+3
   \   000002D0   C2FFFFAA           BGE      ??_DrawBitLine1BPP_15
    641              }
    642              //
    643              // Last triple DWORD
    644              //
    645              if (xsize) {
   \                     ??_DrawBitLine1BPP_14:
   \   000002D4   000058E3           CMP      R8,#+0
   \   000002D8   8101000A           BEQ      ??_DrawBitLine1BPP_2
    646                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    647                Data &= 0x000000FF;
   \   000002DC   007092E5           LDR      R7,[R2, #+0]
    648                GET_PIXEL_INDEX(Index);
   \   000002E0   01001EE3           TST      LR,#0x1
   \   000002E4   01B0A011           MOVNE    R11,R1
   \   000002E8   00B0A001           MOVEQ    R11,R0
   \   000002EC   01C04CE2           SUB      R12,R12,#+1
   \   000002F0   0451D7E7           LDRB     R5,[R7, +R4, LSL #+2]
   \   000002F4   AEE0A0E1           LSR      LR,LR,#+1
   \   000002F8   00005CE3           CMP      R12,#+0
   \   000002FC   0300001A           BNE      ??_DrawBitLine1BPP_20
   \   00000300   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000304   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000308   0EE08CE1           ORR      LR,R12,LR
   \   0000030C   08C0A0E3           MOV      R12,#+8
    649                Data |= (Index << 8);
   \                     ??_DrawBitLine1BPP_20:
   \   00000310   0B5485E1           ORR      R5,R5,R11, LSL #+8
    650                xsize--;
   \   00000314   018058E2           SUBS     R8,R8,#+1
    651                if (!xsize) {
   \   00000318   0200001A           BNE      ??_DrawBitLine1BPP_21
    652                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_22:
   \   0000031C   000092E5           LDR      R0,[R2, #+0]
   \   00000320   045180E7           STR      R5,[R0, +R4, LSL #+2]
    653                  return;
   \   00000324   6E0100EA           B        ??_DrawBitLine1BPP_2
    654                }
    655                Data &= 0xFFFFFF00;
    656                GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine1BPP_21:
   \   00000328   01001EE3           TST      LR,#0x1
   \   0000032C   01B0A011           MOVNE    R11,R1
   \   00000330   00B0A001           MOVEQ    R11,R0
   \   00000334   01C05CE2           SUBS     R12,R12,#+1
   \   00000338   01C0D605           LDRBEQ   R12,[R6, #+1]
   \   0000033C   AEE0A0E1           LSR      LR,LR,#+1
   \   00000340   FF50C5E3           BIC      R5,R5,#0xFF
   \   00000344   0330DC07           LDRBEQ   R3,[R12, +R3]
   \   00000348   0EE08301           ORREQ    LR,R3,LR
    657                Data |= Index >> 16;
    658                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000034C   2B3885E1           ORR      R3,R5,R11, LSR #+16
   \   00000350   043187E7           STR      R3,[R7, +R4, LSL #+2]
    659                Off--;
    660                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    661                Data &= 0x0000FFFF;
    662                Data |= Index << 16;
   \   00000354   003092E5           LDR      R3,[R2, #+0]
   \   00000358   014044E2           SUB      R4,R4,#+1
   \   0000035C   04C183E0           ADD      R12,R3,R4, LSL #+2
   \   00000360   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000364   0B58A0E1           LSL      R5,R11,#+16
   \   00000368   0CC8A0E1           LSL      R12,R12,#+16
   \   0000036C   2C5885E1           ORR      R5,R5,R12, LSR #+16
    663                xsize--;
    664                if (!xsize) {
   \   00000370   01C058E2           SUBS     R12,R8,#+1
   \   00000374   E8FFFF0A           BEQ      ??_DrawBitLine1BPP_22
    665                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    666                  return;
    667                }
    668                Data &= 0xFFFF0000;
   \   00000378   25C8A0E1           LSR      R12,R5,#+16
    669                GET_PIXEL_INDEX(Index);
   \   0000037C   01001EE3           TST      LR,#0x1
   \   00000380   0C58A0E1           LSL      R5,R12,#+16
   \   00000384   01B0A011           MOVNE    R11,R1
   \   00000388   00B0A001           MOVEQ    R11,R0
    670                Data |= Index >> 8;
    671                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000038C   2B0485E1           ORR      R0,R5,R11, LSR #+8
   \   00000390   040183E7           STR      R0,[R3, +R4, LSL #+2]
    672                Off--;
    673                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    674                Data &= 0x00FFFFFF;
    675                Data |= Index << 24;
    676                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_23:
   \   00000394   000092E5           LDR      R0,[R2, #+0]
   \   00000398   014044E2           SUB      R4,R4,#+1
   \   0000039C   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \   000003A0   0B2CA0E1           LSL      R2,R11,#+24
   \   000003A4   0114A0E1           LSL      R1,R1,#+8
   \   000003A8   211482E1           ORR      R1,R2,R1, LSR #+8
   \   000003AC   041180E7           STR      R1,[R0, +R4, LSL #+2]
   \   000003B0   4B0100EA           B        ??_DrawBitLine1BPP_2
    677              }
    678              break;
    679            case LCD_DRAWMODE_TRANS:
    680              //
    681              // Mirror x
    682              //
    683              x = (pContext->vxSize - 1 - x);
   \                     ??_DrawBitLine1BPP_5:
   \   000003B4   0C3092E5           LDR      R3,[R2, #+12]
    684              //
    685              // Mirror y
    686              //
    687              y = (pContext->vySize - 1 - y);
    688              PixelCnt = 8 - Diff;
    689              Pixels   = LCD_aMirror[*p] >> Diff;
   \   000003B8   00E0D6E5           LDRB     LR,[R6, #+0]
   \   000003BC   013043E2           SUB      R3,R3,#+1
   \   000003C0   099043E0           SUB      R9,R3,R9
   \   000003C4   ........           LDR      R3,??DataTable15
    690              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
   \   000003C8   104092E5           LDR      R4,[R2, #+16]
   \   000003CC   03E0DEE7           LDRB     LR,[LR, +R3]
   \   000003D0   014044E2           SUB      R4,R4,#+1
   \   000003D4   054044E0           SUB      R4,R4,R5
   \   000003D8   145092E5           LDR      R5,[R2, #+20]
   \   000003DC   08C067E2           RSB      R12,R7,#+8
   \   000003E0   5EE7A0E1           ASR      LR,LR,R7
   \   000003E4   855085E0           ADD      R5,R5,R5, LSL #+1
   \   000003E8   897089E0           ADD      R7,R9,R9, LSL #+1
   \   000003EC   957424E0           MLA      R4,R5,R4,R7
    691              //
    692              // First triple DWORD
    693              //
    694              Odd = x & 3;
   \   000003F0   039009E2           AND      R9,R9,#0x3
   \   000003F4   2441A0E1           LSR      R4,R4,#+2
    695              if (Odd != 3) {
   \   000003F8   030059E3           CMP      R9,#+3
   \   000003FC   5F00000A           BEQ      ??_DrawBitLine1BPP_24
    696                if (Odd != 0) {
   \   00000400   000059E3           CMP      R9,#+0
    697                  Off++;
    698                }
    699                Data = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000404   007092E5           LDR      R7,[R2, #+0]
   \   00000408   01408412           ADDNE    R4,R4,#+1
   \   0000040C   045197E7           LDR      R5,[R7, +R4, LSL #+2]
    700                switch (Odd) {
   \   00000410   4800000A           BEQ      ??_DrawBitLine1BPP_25
   \   00000414   020059E3           CMP      R9,#+2
   \   00000418   0100000A           BEQ      ??_DrawBitLine1BPP_26
   \   0000041C   2200003A           BCC      ??_DrawBitLine1BPP_27
   \   00000420   560000EA           B        ??_DrawBitLine1BPP_24
    701                case 2:
    702                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_26:
   \   00000424   01A01EE2           ANDS     R10,LR,#0x1
   \   00000428   01B0A011           MOVNE    R11,R1
   \   0000042C   00B0A001           MOVEQ    R11,R0
   \   00000430   01C04CE2           SUB      R12,R12,#+1
   \   00000434   AEE0A0E1           LSR      LR,LR,#+1
   \   00000438   00005CE3           CMP      R12,#+0
   \   0000043C   0300001A           BNE      ??_DrawBitLine1BPP_28
   \   00000440   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000444   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000448   0EE08CE1           ORR      LR,R12,LR
   \   0000044C   08C0A0E3           MOV      R12,#+8
    703                  if (Bit) {
   \                     ??_DrawBitLine1BPP_28:
   \   00000450   018048E2           SUB      R8,R8,#+1
   \   00000454   019044E2           SUB      R9,R4,#+1
   \   00000458   00005AE3           CMP      R10,#+0
   \   0000045C   0E00000A           BEQ      ??_DrawBitLine1BPP_29
    704                    Data &= 0xFFFFFF00;
    705                    Data |= Index >> 16;
    706                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   00000460   FF50C5E3           BIC      R5,R5,#0xFF
   \   00000464   2B5885E1           ORR      R5,R5,R11, LSR #+16
   \   00000468   045187E7           STR      R5,[R7, +R4, LSL #+2]
    707                    Off--;
    708                    Data = READ_MEM32(pContext->VRAMAddr, Off);
    709                    Data &= 0x0000FFFF;
    710                    Data |= Index << 16;
   \   0000046C   005092E5           LDR      R5,[R2, #+0]
   \   00000470   0940A0E1           MOV      R4,R9
   \   00000474   045185E0           ADD      R5,R5,R4, LSL #+2
   \   00000478   B050D5E1           LDRH     R5,[R5, #+0]
   \   0000047C   0B78A0E1           LSL      R7,R11,#+16
    711                    xsize--;                  
    712                    if (!xsize) {
   \   00000480   000058E3           CMP      R8,#+0
   \   00000484   0558A0E1           LSL      R5,R5,#+16
   \   00000488   255887E1           ORR      R5,R7,R5, LSR #+16
   \   0000048C   0600001A           BNE      ??_DrawBitLine1BPP_27
    713                      WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
   \                     ??_DrawBitLine1BPP_30:
   \   00000490   007092E5           LDR      R7,[R2, #+0]
   \   00000494   045187E7           STR      R5,[R7, +R4, LSL #+2]
    714                      break;
   \   00000498   380000EA           B        ??_DrawBitLine1BPP_24
    715                    }
    716                  } else {
    717                    Off--;
   \                     ??_DrawBitLine1BPP_29:
   \   0000049C   0940A0E1           MOV      R4,R9
    718                    xsize--;
    719                    if (!xsize) {
   \   000004A0   000058E3           CMP      R8,#+0
   \   000004A4   0E01000A           BEQ      ??_DrawBitLine1BPP_2
    720                      break;
    721                    }
    722                    Data = READ_MEM32(pContext->VRAMAddr, Off);
   \   000004A8   045197E7           LDR      R5,[R7, +R4, LSL #+2]
    723                  }
    724                case 1:
    725                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_27:
   \   000004AC   01A01EE2           ANDS     R10,LR,#0x1
   \   000004B0   01B0A011           MOVNE    R11,R1
   \   000004B4   00B0A001           MOVEQ    R11,R0
   \   000004B8   01C04CE2           SUB      R12,R12,#+1
   \   000004BC   AEE0A0E1           LSR      LR,LR,#+1
   \   000004C0   00005CE3           CMP      R12,#+0
   \   000004C4   0300001A           BNE      ??_DrawBitLine1BPP_31
   \   000004C8   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   000004CC   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000004D0   0EE08CE1           ORR      LR,R12,LR
   \   000004D4   08C0A0E3           MOV      R12,#+8
    726                  if (Bit) {
   \                     ??_DrawBitLine1BPP_31:
   \   000004D8   007092E5           LDR      R7,[R2, #+0]
   \   000004DC   018048E2           SUB      R8,R8,#+1
   \   000004E0   019044E2           SUB      R9,R4,#+1
   \   000004E4   00005AE3           CMP      R10,#+0
   \   000004E8   0C00000A           BEQ      ??_DrawBitLine1BPP_32
    727                    Data &= 0xFFFF0000;
    728                    Data |= Index >> 8;
    729                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000004EC   2558A0E1           LSR      R5,R5,#+16
   \   000004F0   2BA4A0E1           LSR      R10,R11,#+8
   \   000004F4   05588AE1           ORR      R5,R10,R5, LSL #+16
   \   000004F8   045187E7           STR      R5,[R7, +R4, LSL #+2]
    730                    Off--;
    731                    Data = READ_MEM32(pContext->VRAMAddr, Off);
    732                    Data &= 0x00FFFFFF;
    733                    Data |= Index << 24;
   \   000004FC   005092E5           LDR      R5,[R2, #+0]
   \   00000500   0940A0E1           MOV      R4,R9
   \   00000504   045195E7           LDR      R5,[R5, +R4, LSL #+2]
   \   00000508   0B7CA0E1           LSL      R7,R11,#+24
   \   0000050C   0554A0E1           LSL      R5,R5,#+8
   \   00000510   255487E1           ORR      R5,R7,R5, LSR #+8
    734                    xsize--;                  
    735                    if (!xsize) {
   \   00000514   000058E3           CMP      R8,#+0
   \   00000518   0600001A           BNE      ??_DrawBitLine1BPP_25
   \   0000051C   DBFFFFEA           B        ??_DrawBitLine1BPP_30
    736                      WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
    737                      break;
    738                    }
    739                  } else {
    740                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_32:
   \   00000520   045187E7           STR      R5,[R7, +R4, LSL #+2]
    741                    Off--;
   \   00000524   0940A0E1           MOV      R4,R9
    742                    xsize--;
    743                    if (!xsize) {
   \   00000528   000058E3           CMP      R8,#+0
   \   0000052C   EC00000A           BEQ      ??_DrawBitLine1BPP_2
    744                      break;
    745                    }
    746                    Data = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000530   005092E5           LDR      R5,[R2, #+0]
   \   00000534   045195E7           LDR      R5,[R5, +R4, LSL #+2]
    747                  }
    748                case 0:
    749                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_25:
   \   00000538   01A01EE2           ANDS     R10,LR,#0x1
   \   0000053C   01B0A011           MOVNE    R11,R1
   \   00000540   00B0A001           MOVEQ    R11,R0
   \   00000544   01C04CE2           SUB      R12,R12,#+1
   \   00000548   AEE0A0E1           LSR      LR,LR,#+1
   \   0000054C   00005CE3           CMP      R12,#+0
   \   00000550   0300001A           BNE      ??_DrawBitLine1BPP_33
   \   00000554   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000558   03C0DCE7           LDRB     R12,[R12, +R3]
   \   0000055C   0EE08CE1           ORR      LR,R12,LR
   \   00000560   08C0A0E3           MOV      R12,#+8
    750                  if (Bit) {
   \                     ??_DrawBitLine1BPP_33:
   \   00000564   00005AE3           CMP      R10,#+0
    751                    Data &= 0xFF000000;
    752                    Data |= Index;
   \   00000568   FF540512           ANDNE    R5,R5,#0xFF000000
    753                  }
    754                  xsize--;                  
    755                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);     
   \   0000056C   007092E5           LDR      R7,[R2, #+0]
   \   00000570   05508B11           ORRNE    R5,R11,R5
   \   00000574   045187E7           STR      R5,[R7, +R4, LSL #+2]
   \   00000578   018048E2           SUB      R8,R8,#+1
    756                  Off--;
   \   0000057C   014044E2           SUB      R4,R4,#+1
    757                }
    758              }
    759              //
    760              // Complete triple DWORDS
    761              //
    762              if (xsize >= 4) {
   \                     ??_DrawBitLine1BPP_24:
   \   00000580   040058E3           CMP      R8,#+4
   \   00000584   590000BA           BLT      ??_DrawBitLine1BPP_34
    763                do {
    764                  Data0  = READ_MEM32(pContext->VRAMAddr, Off - 0);
   \                     ??_DrawBitLine1BPP_35:
   \   00000588   007092E5           LDR      R7,[R2, #+0]
   \   0000058C   04708DE5           STR      R7,[SP, #+4]
   \   00000590   0750A0E1           MOV      R5,R7
   \   00000594   047195E7           LDR      R7,[R5, +R4, LSL #+2]
    765                  Data1  = READ_MEM32(pContext->VRAMAddr, Off - 1);
   \   00000598   045185E0           ADD      R5,R5,R4, LSL #+2
   \   0000059C   049015E5           LDR      R9,[R5, #-4]
    766                  Data2  = READ_MEM32(pContext->VRAMAddr, Off - 2);
   \   000005A0   085015E5           LDR      R5,[R5, #-8]
    767                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \   000005A4   01A01EE2           ANDS     R10,LR,#0x1
   \   000005A8   00A08DE5           STR      R10,[SP, #+0]
   \   000005AC   01B0A011           MOVNE    R11,R1
   \   000005B0   00B0A001           MOVEQ    R11,R0
   \   000005B4   01A04CE2           SUB      R10,R12,#+1
   \   000005B8   AEE0A0E1           LSR      LR,LR,#+1
   \   000005BC   00005AE3           CMP      R10,#+0
   \   000005C0   0300001A           BNE      ??_DrawBitLine1BPP_36
   \   000005C4   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   000005C8   08A0A0E3           MOV      R10,#+8
   \   000005CC   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000005D0   0EE08CE1           ORR      LR,R12,LR
    768                  if (Bit) {
   \                     ??_DrawBitLine1BPP_36:
   \   000005D4   00C09DE5           LDR      R12,[SP, #+0]
   \   000005D8   00005CE3           CMP      R12,#+0
    769                    Data0 &= 0x000000FF;
    770                    Data0 |= (Index <<  8);
   \   000005DC   FFC00712           ANDNE    R12,R7,#0xFF
   \   000005E0   0B748C11           ORRNE    R7,R12,R11, LSL #+8
    771                  }
    772                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \   000005E4   01C01EE2           ANDS     R12,LR,#0x1
   \   000005E8   00C08DE5           STR      R12,[SP, #+0]
   \   000005EC   01C0A011           MOVNE    R12,R1
   \   000005F0   00C0A001           MOVEQ    R12,R0
   \   000005F4   01B04AE2           SUB      R11,R10,#+1
   \   000005F8   AEE0A0E1           LSR      LR,LR,#+1
   \   000005FC   00005BE3           CMP      R11,#+0
   \   00000600   0300001A           BNE      ??_DrawBitLine1BPP_37
   \   00000604   01A0F6E5           LDRB     R10,[R6, #+1]!
   \   00000608   08B0A0E3           MOV      R11,#+8
   \   0000060C   03A0DAE7           LDRB     R10,[R10, +R3]
   \   00000610   0EE08AE1           ORR      LR,R10,LR
    773                  if (Bit) {
   \                     ??_DrawBitLine1BPP_37:
   \   00000614   00A09DE5           LDR      R10,[SP, #+0]
   \   00000618   00005AE3           CMP      R10,#+0
   \   0000061C   0400000A           BEQ      ??_DrawBitLine1BPP_38
    774                    Data0 &= 0xFFFFFF00;
    775                    Data0 |= (Index >> 16);
   \   00000620   FF70C7E3           BIC      R7,R7,#0xFF
   \   00000624   2C7887E1           ORR      R7,R7,R12, LSR #+16
    776                    Data1 &= 0x0000FFFF;
    777                    Data1 |= (Index << 16);
   \   00000628   0998A0E1           LSL      R9,R9,#+16
   \   0000062C   0CC8A0E1           LSL      R12,R12,#+16
   \   00000630   29988CE1           ORR      R9,R12,R9, LSR #+16
    778                  }
    779                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_38:
   \   00000634   01C01EE2           ANDS     R12,LR,#0x1
   \   00000638   00C08DE5           STR      R12,[SP, #+0]
   \   0000063C   01A0A011           MOVNE    R10,R1
   \   00000640   00A0A001           MOVEQ    R10,R0
   \   00000644   01C04BE2           SUB      R12,R11,#+1
   \   00000648   AEE0A0E1           LSR      LR,LR,#+1
   \   0000064C   00005CE3           CMP      R12,#+0
   \   00000650   0300001A           BNE      ??_DrawBitLine1BPP_39
   \   00000654   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000658   03C0DCE7           LDRB     R12,[R12, +R3]
   \   0000065C   0EE08CE1           ORR      LR,R12,LR
   \   00000660   08C0A0E3           MOV      R12,#+8
    780                  if (Bit) {
   \                     ??_DrawBitLine1BPP_39:
   \   00000664   00B09DE5           LDR      R11,[SP, #+0]
   \   00000668   00005BE3           CMP      R11,#+0
   \   0000066C   0500000A           BEQ      ??_DrawBitLine1BPP_40
    781                    Data1 &= 0xFFFF0000;
    782                    Data1 |= (Index >>  8);
   \   00000670   2AB4A0E1           LSR      R11,R10,#+8
   \   00000674   2998A0E1           LSR      R9,R9,#+16
    783                    Data2 &= 0x00FFFFFF;
    784                    Data2 |= (Index << 24);
   \   00000678   0554A0E1           LSL      R5,R5,#+8
   \   0000067C   0AACA0E1           LSL      R10,R10,#+24
   \   00000680   09988BE1           ORR      R9,R11,R9, LSL #+16
   \   00000684   25548AE1           ORR      R5,R10,R5, LSR #+8
    785                  }
    786                  GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_40:
   \   00000688   01A01EE2           ANDS     R10,LR,#0x1
   \   0000068C   01B0A011           MOVNE    R11,R1
   \   00000690   00B0A001           MOVEQ    R11,R0
   \   00000694   01C04CE2           SUB      R12,R12,#+1
   \   00000698   AEE0A0E1           LSR      LR,LR,#+1
   \   0000069C   00005CE3           CMP      R12,#+0
   \   000006A0   0300001A           BNE      ??_DrawBitLine1BPP_41
   \   000006A4   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   000006A8   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000006AC   0EE08CE1           ORR      LR,R12,LR
   \   000006B0   08C0A0E3           MOV      R12,#+8
    787                  if (Bit) {
   \                     ??_DrawBitLine1BPP_41:
   \   000006B4   00005AE3           CMP      R10,#+0
    788                    Data2 &= 0xFF000000;
    789                    Data2 |= (Index      );
    790                  }
    791                  WRITE_MEM32(pContext->VRAMAddr, Off - 0, Data0);
   \   000006B8   04A09DE5           LDR      R10,[SP, #+4]
   \   000006BC   FF540512           ANDNE    R5,R5,#0xFF000000
   \   000006C0   04718AE7           STR      R7,[R10, +R4, LSL #+2]
    792                  WRITE_MEM32(pContext->VRAMAddr, Off - 1, Data1);
   \   000006C4   007092E5           LDR      R7,[R2, #+0]
   \   000006C8   05508B11           ORRNE    R5,R11,R5
   \   000006CC   047187E0           ADD      R7,R7,R4, LSL #+2
   \   000006D0   049007E5           STR      R9,[R7, #-4]
    793                  WRITE_MEM32(pContext->VRAMAddr, Off - 2, Data2);
   \   000006D4   007092E5           LDR      R7,[R2, #+0]
    794                  Off -= 3;
    795                } while ((xsize -= 4) >= 4);
   \   000006D8   048048E2           SUB      R8,R8,#+4
   \   000006DC   047187E0           ADD      R7,R7,R4, LSL #+2
   \   000006E0   085007E5           STR      R5,[R7, #-8]
   \   000006E4   034044E2           SUB      R4,R4,#+3
   \   000006E8   040058E3           CMP      R8,#+4
   \   000006EC   A5FFFFAA           BGE      ??_DrawBitLine1BPP_35
    796              }
    797              //
    798              // Last triple DWORD
    799              //
    800              if (xsize) {
   \                     ??_DrawBitLine1BPP_34:
   \   000006F0   000058E3           CMP      R8,#+0
   \   000006F4   7A00000A           BEQ      ??_DrawBitLine1BPP_2
    801                Data  = READ_MEM32(pContext->VRAMAddr, Off);
   \   000006F8   007092E5           LDR      R7,[R2, #+0]
    802                GET_PIXEL_INDEX_TRANS(Index, Bit);
   \   000006FC   01A01EE2           ANDS     R10,LR,#0x1
   \   00000700   01B0A011           MOVNE    R11,R1
   \   00000704   00B0A001           MOVEQ    R11,R0
   \   00000708   01C04CE2           SUB      R12,R12,#+1
   \   0000070C   045197E7           LDR      R5,[R7, +R4, LSL #+2]
   \   00000710   AEE0A0E1           LSR      LR,LR,#+1
   \   00000714   00005CE3           CMP      R12,#+0
   \   00000718   0300001A           BNE      ??_DrawBitLine1BPP_42
   \   0000071C   01C0F6E5           LDRB     R12,[R6, #+1]!
   \   00000720   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000724   0EE08CE1           ORR      LR,R12,LR
   \   00000728   08C0A0E3           MOV      R12,#+8
    803                if (Bit) {
   \                     ??_DrawBitLine1BPP_42:
   \   0000072C   018048E2           SUB      R8,R8,#+1
   \   00000730   00005AE3           CMP      R10,#+0
   \   00000734   0400000A           BEQ      ??_DrawBitLine1BPP_43
    804                  Data &= 0x000000FF;
    805                  Data |= (Index << 8);
   \   00000738   FF5005E2           AND      R5,R5,#0xFF
   \   0000073C   0B5485E1           ORR      R5,R5,R11, LSL #+8
    806                  xsize--;
    807                  if (!xsize) {
   \   00000740   000058E3           CMP      R8,#+0
   \   00000744   0200001A           BNE      ??_DrawBitLine1BPP_44
   \   00000748   F3FEFFEA           B        ??_DrawBitLine1BPP_22
    808                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    809                    return;
    810                  }
    811                } else {
    812                  xsize--;
    813                  if (!xsize) {
   \                     ??_DrawBitLine1BPP_43:
   \   0000074C   000058E3           CMP      R8,#+0
   \   00000750   6300000A           BEQ      ??_DrawBitLine1BPP_2
    814                    return;
    815                  }
    816                }
    817                GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_44:
   \   00000754   01A01EE2           ANDS     R10,LR,#0x1
   \   00000758   01B0A011           MOVNE    R11,R1
   \   0000075C   00B0A001           MOVEQ    R11,R0
   \   00000760   01C05CE2           SUBS     R12,R12,#+1
   \   00000764   01C0D605           LDRBEQ   R12,[R6, #+1]
   \   00000768   AEE0A0E1           LSR      LR,LR,#+1
   \   0000076C   0330DC07           LDRBEQ   R3,[R12, +R3]
    818                if (Bit) {
   \   00000770   01C044E2           SUB      R12,R4,#+1
   \   00000774   0EE08301           ORREQ    LR,R3,LR
   \   00000778   013048E2           SUB      R3,R8,#+1
   \   0000077C   00005AE3           CMP      R10,#+0
   \   00000780   0C00000A           BEQ      ??_DrawBitLine1BPP_45
    819                  Data &= 0xFFFFFF00;
    820                  Data |= Index >> 16;
    821                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   00000784   FF50C5E3           BIC      R5,R5,#0xFF
   \   00000788   2B5885E1           ORR      R5,R5,R11, LSR #+16
   \   0000078C   045187E7           STR      R5,[R7, +R4, LSL #+2]
    822                  Off--;
   \   00000790   0C40A0E1           MOV      R4,R12
    823                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    824                  Data &= 0x0000FFFF;
    825                  Data |= Index << 16;
   \   00000794   00C092E5           LDR      R12,[R2, #+0]
   \   00000798   0B58A0E1           LSL      R5,R11,#+16
   \   0000079C   04C18CE0           ADD      R12,R12,R4, LSL #+2
   \   000007A0   B0C0DCE1           LDRH     R12,[R12, #+0]
    826                  xsize--;
    827                  if (!xsize) {
   \   000007A4   000053E3           CMP      R3,#+0
   \   000007A8   0CC8A0E1           LSL      R12,R12,#+16
   \   000007AC   2C5885E1           ORR      R5,R5,R12, LSR #+16
   \   000007B0   0600001A           BNE      ??_DrawBitLine1BPP_46
   \   000007B4   D8FEFFEA           B        ??_DrawBitLine1BPP_22
    828                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    829                    return;
    830                  }
    831                } else {
    832                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine1BPP_45:
   \   000007B8   045187E7           STR      R5,[R7, +R4, LSL #+2]
    833                  Off--;
   \   000007BC   0C40A0E1           MOV      R4,R12
    834                  xsize--;
    835                  if (!xsize) {
   \   000007C0   000053E3           CMP      R3,#+0
   \   000007C4   4600000A           BEQ      ??_DrawBitLine1BPP_2
    836                    return;
    837                  }
    838                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
   \   000007C8   003092E5           LDR      R3,[R2, #+0]
   \   000007CC   045193E7           LDR      R5,[R3, +R4, LSL #+2]
    839                }
    840                GET_PIXEL_INDEX_TRANS(Index, Bit);
   \                     ??_DrawBitLine1BPP_46:
   \   000007D0   01A01EE2           ANDS     R10,LR,#0x1
   \   000007D4   01B0A011           MOVNE    R11,R1
   \   000007D8   00B0A001           MOVEQ    R11,R0
    841                if (Bit) {
   \   000007DC   CEFEFF0A           BEQ      ??_DrawBitLine1BPP_22
    842                  Data &= 0xFFFF0000;
    843                  Data |= Index >> 8;
    844                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000007E0   2508A0E1           LSR      R0,R5,#+16
   \   000007E4   2B14A0E1           LSR      R1,R11,#+8
   \   000007E8   000881E1           ORR      R0,R1,R0, LSL #+16
   \   000007EC   001092E5           LDR      R1,[R2, #+0]
   \   000007F0   040181E7           STR      R0,[R1, +R4, LSL #+2]
    845                  Off--;
   \   000007F4   E6FEFFEA           B        ??_DrawBitLine1BPP_23
    846                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    847                  Data &= 0x00FFFFFF;
    848                  Data |= Index << 24;
    849                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    850                } else {
    851                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    852                }
    853              }
    854              break;
    855            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    856            case LCD_DRAWMODE_XOR:
    857              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_4:
   \   000007F8   100094E5           LDR      R0,[R4, #+16]
   \   000007FC   080090E5           LDR      R0,[R0, #+8]
   \   00000800   30FF2FE1           BLX      R0
   \   00000804   00A0A0E1           MOV      R10,R0
   \   00000808   80B0A0E3           MOV      R11,#+128
    858              do {
    859                if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_47:
   \   0000080C   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000810   5B0710E1           TST      R0,R11, ASR R7
   \   00000814   2B00000A           BEQ      ??_DrawBitLine1BPP_48
    860                  int Pixel = _GetPixelIndex(pDevice, x, y);
   \   00000818   082094E5           LDR      R2,[R4, #+8]
   \   0000081C   10C092E5           LDR      R12,[R2, #+16]
   \   00000820   143092E5           LDR      R3,[R2, #+20]
   \   00000824   01C04CE2           SUB      R12,R12,#+1
   \   00000828   0C1092E5           LDR      R1,[R2, #+12]
   \   0000082C   05C04CE0           SUB      R12,R12,R5
   \   00000830   9C0303E0           MUL      R3,R12,R3
   \   00000834   011041E2           SUB      R1,R1,#+1
   \   00000838   091041E0           SUB      R1,R1,R9
   \   0000083C   833083E0           ADD      R3,R3,R3, LSL #+1
   \   00000840   81C081E0           ADD      R12,R1,R1, LSL #+1
   \   00000844   03308CE0           ADD      R3,R12,R3
   \   00000848   002092E5           LDR      R2,[R2, #+0]
   \   0000084C   2331A0E1           LSR      R3,R3,#+2
   \   00000850   031001E2           AND      R1,R1,#0x3
   \   00000854   03C192E7           LDR      R12,[R2, +R3, LSL #+2]
   \   00000858   030051E3           CMP      R1,#+3
   \   0000085C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_1:
   \   00000860   1300008A           BHI      ??_DrawBitLine1BPP_49
   \   00000864   100000EA           B        ??_DrawBitLine1BPP_50
   \   00000868   080000EA           B        ??_DrawBitLine1BPP_51
   \   0000086C   020000EA           B        ??_DrawBitLine1BPP_52
   \   00000870   FFFFFFEA           B        ??_DrawBitLine1BPP_53
   \                     ??_DrawBitLine1BPP_53:
   \   00000874   2C04A0E1           LSR      R0,R12,#+8
   \   00000878   0D0000EA           B        ??_DrawBitLine1BPP_49
   \                     ??_DrawBitLine1BPP_52:
   \   0000087C   030182E0           ADD      R0,R2,R3, LSL #+2
   \   00000880   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000884   0008A0E1           LSL      R0,R0,#+16
   \   00000888   2C0880E1           ORR      R0,R0,R12, LSR #+16
   \   0000088C   080000EA           B        ??_DrawBitLine1BPP_49
   \                     ??_DrawBitLine1BPP_51:
   \   00000890   030182E0           ADD      R0,R2,R3, LSL #+2
   \   00000894   B400D0E1           LDRH     R0,[R0, #+4]
   \   00000898   0008A0E1           LSL      R0,R0,#+16
   \   0000089C   2008A0E1           LSR      R0,R0,#+16
   \   000008A0   0004A0E1           LSL      R0,R0,#+8
   \   000008A4   2C0C80E1           ORR      R0,R0,R12, LSR #+24
   \   000008A8   010000EA           B        ??_DrawBitLine1BPP_49
   \                     ??_DrawBitLine1BPP_50:
   \   000008AC   0C04A0E1           LSL      R0,R12,#+8
   \   000008B0   2004A0E1           LSR      R0,R0,#+8
    861                  _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
   \                     ??_DrawBitLine1BPP_49:
   \   000008B4   00302AE0           EOR      R3,R10,R0
   \   000008B8   0520A0E1           MOV      R2,R5
   \   000008BC   0910A0E1           MOV      R1,R9
   \   000008C0   0400A0E1           MOV      R0,R4
   \   000008C4   ........           BL       _SetPixelIndex
    862                }
    863                x++;
    864                if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_48:
   \   000008C8   017087E2           ADD      R7,R7,#+1
   \   000008CC   080057E3           CMP      R7,#+8
    865                  Diff = 0;
   \   000008D0   0070A003           MOVEQ    R7,#+0
    866                  p++;
   \   000008D4   01608602           ADDEQ    R6,R6,#+1
   \   000008D8   019089E2           ADD      R9,R9,#+1
    867                }
    868              } while (--xsize);
   \   000008DC   018058E2           SUBS     R8,R8,#+1
   \   000008E0   C9FFFF1A           BNE      ??_DrawBitLine1BPP_47
   \                     ??_DrawBitLine1BPP_2:
   \   000008E4   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000008E8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    869              break;
    870            }
    871            #undef GET_PIXEL_INDEX
    872            #undef GET_PIXEL_INDEX_TRANS
    873          }
    874          
    875          /*********************************************************************
    876          *
    877          *       Draw Bitmap 2 BPP
    878          */

   \                                 In section .text, align 4, keep-with-next
    879          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    880            LCD_PIXELINDEX Pixels, PixelIndex;
    881            int CurrentPixel, Shift, Index;
    882          
    883            Pixels = *p;
    884            CurrentPixel = Diff;
    885            x += Diff;
    886            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   28409DE5           LDR      R4,[SP, #+40]
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   2C809DE5           LDR      R8,[SP, #+44]
   \   00000024   0090D7E5           LDRB     R9,[R7, #+0]
   \   00000028   01A084E0           ADD      R10,R4,R1
   \   0000002C   030010E2           ANDS     R0,R0,#0x3
   \   00000030   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000034   020050E2           SUBS     R0,R0,#+2
   \   00000038   2A00000A           BEQ      ??_DrawBitLine2BPP_1
   \   0000003C   540000EA           B        ??_DrawBitLine2BPP_2
    887            case 0:
    888              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000040   30009DE5           LDR      R0,[SP, #+48]
   \   00000044   C0B0A0E3           MOV      R11,#+192
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1300000A           BEQ      ??_DrawBitLine2BPP_3
    889                do {
    890                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   00000050   030064E2           RSB      R0,R4,#+3
   \   00000054   8000A0E1           LSL      R0,R0,#+1
    891                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    892                  PixelIndex = *(pTrans + Index);
    893                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   061061E2           RSB      R1,R1,#+6
   \   00000060   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000064   3100A0E1           LSR      R0,R1,R0
   \   00000068   30109DE5           LDR      R1,[SP, #+48]
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   00000074   0A10A0E1           MOV      R1,R10
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       _SetPixelIndex
    894                  if (++CurrentPixel == 4) {
   \   00000080   014084E2           ADD      R4,R4,#+1
   \   00000084   040054E3           CMP      R4,#+4
    895                    CurrentPixel = 0;
   \   00000088   0040A003           MOVEQ    R4,#+0
    896                    Pixels = *(++p);
   \   0000008C   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000090   01A08AE2           ADD      R10,R10,#+1
    897                  }
    898                } while (--xsize);
   \   00000094   018058E2           SUBS     R8,R8,#+1
   \   00000098   ECFFFF1A           BNE      ??_DrawBitLine2BPP_4
   \   0000009C   3C0000EA           B        ??_DrawBitLine2BPP_2
    899              } else {
    900                do {
    901                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_3:
   \   000000A0   030064E2           RSB      R0,R4,#+3
   \   000000A4   8000A0E1           LSL      R0,R0,#+1
    902                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    903                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   0010A0E1           MOV      R1,R0
   \   000000AC   061061E2           RSB      R1,R1,#+6
   \   000000B0   5B1109E0           AND      R1,R9,R11, ASR R1
   \   000000B4   3130A0E1           LSR      R3,R1,R0
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0A10A0E1           MOV      R1,R10
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       _SetPixelIndex
    904                  if (++CurrentPixel == 4) {
   \   000000C8   014084E2           ADD      R4,R4,#+1
   \   000000CC   040054E3           CMP      R4,#+4
    905                    CurrentPixel = 0;
   \   000000D0   0040A003           MOVEQ    R4,#+0
    906                    Pixels = *(++p);
   \   000000D4   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   000000D8   01A08AE2           ADD      R10,R10,#+1
    907                  }
    908                } while (--xsize);
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   EEFFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   000000E4   2A0000EA           B        ??_DrawBitLine2BPP_2
    909              }
    910              break;
    911            case LCD_DRAWMODE_TRANS:
    912              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   000000E8   30009DE5           LDR      R0,[SP, #+48]
   \   000000EC   C0B0A0E3           MOV      R11,#+192
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??_DrawBitLine2BPP_5
    913                do {
    914                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_6:
   \   000000F8   030064E2           RSB      R0,R4,#+3
   \   000000FC   8000A0E1           LSL      R0,R0,#+1
    915                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000100   0010A0E1           MOV      R1,R0
   \   00000104   061061E2           RSB      R1,R1,#+6
   \   00000108   5B1109E0           AND      R1,R9,R11, ASR R1
   \   0000010C   3130B0E1           LSRS     R3,R1,R0
    916                  if (Index) {
   \   00000110   0500000A           BEQ      ??_DrawBitLine2BPP_7
    917                    PixelIndex = *(pTrans + Index);
    918                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000114   30009DE5           LDR      R0,[SP, #+48]
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   033190E7           LDR      R3,[R0, +R3, LSL #+2]
   \   00000120   0A10A0E1           MOV      R1,R10
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           BL       _SetPixelIndex
    919                  }
    920                  x++;
    921                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   0000012C   014084E2           ADD      R4,R4,#+1
   \   00000130   040054E3           CMP      R4,#+4
    922                    CurrentPixel = 0;
   \   00000134   0040A003           MOVEQ    R4,#+0
    923                    Pixels = *(++p);
   \   00000138   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   0000013C   01A08AE2           ADD      R10,R10,#+1
    924                  }
    925                } while (--xsize);
   \   00000140   018058E2           SUBS     R8,R8,#+1
   \   00000144   EBFFFF1A           BNE      ??_DrawBitLine2BPP_6
   \   00000148   110000EA           B        ??_DrawBitLine2BPP_2
    926              } else {
    927                do {
    928                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   0000014C   030064E2           RSB      R0,R4,#+3
   \   00000150   8000A0E1           LSL      R0,R0,#+1
    929                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   061061E2           RSB      R1,R1,#+6
   \   0000015C   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000160   3130B0E1           LSRS     R3,R1,R0
    930                  if (Index) {
   \   00000164   0300000A           BEQ      ??_DrawBitLine2BPP_8
    931                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000168   0620A0E1           MOV      R2,R6
   \   0000016C   0A10A0E1           MOV      R1,R10
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       _SetPixelIndex
    932                  }
    933                  x++;
    934                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_8:
   \   00000178   014084E2           ADD      R4,R4,#+1
   \   0000017C   040054E3           CMP      R4,#+4
    935                    CurrentPixel = 0;
   \   00000180   0040A003           MOVEQ    R4,#+0
    936                    Pixels = *(++p);
   \   00000184   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000188   01A08AE2           ADD      R10,R10,#+1
    937                  }
    938                } while (--xsize);
   \   0000018C   018058E2           SUBS     R8,R8,#+1
   \   00000190   EDFFFF1A           BNE      ??_DrawBitLine2BPP_5
    939              }
    940              break;
    941            }
    942          }
   \                     ??_DrawBitLine2BPP_2:
   \   00000194   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000198   F08FBDE8           POP      {R4-R11,PC}      ;; return
    943          
    944          /*********************************************************************
    945          *
    946          *       Draw Bitmap 4 BPP
    947          */

   \                                 In section .text, align 4, keep-with-next
    948          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    949            LCD_PIXELINDEX Pixels, PixelIndex;
    950            int CurrentPixel, Shift, Index;
    951          
    952            Pixels = *p;
    953            CurrentPixel = Diff;
    954            x += Diff;
    955            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   28409DE5           LDR      R4,[SP, #+40]
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   2C809DE5           LDR      R8,[SP, #+44]
   \   00000024   0090D7E5           LDRB     R9,[R7, #+0]
   \   00000028   01A084E0           ADD      R10,R4,R1
   \   0000002C   030010E2           ANDS     R0,R0,#0x3
   \   00000030   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000034   020050E2           SUBS     R0,R0,#+2
   \   00000038   2A00000A           BEQ      ??_DrawBitLine4BPP_1
   \   0000003C   540000EA           B        ??_DrawBitLine4BPP_2
    956            case 0:
    957              if (pTrans) {
   \                     ??_DrawBitLine4BPP_0:
   \   00000040   30009DE5           LDR      R0,[SP, #+48]
   \   00000044   F0B0A0E3           MOV      R11,#+240
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1300000A           BEQ      ??_DrawBitLine4BPP_3
    958                do {
    959                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   00000050   010064E2           RSB      R0,R4,#+1
   \   00000054   0001A0E1           LSL      R0,R0,#+2
    960                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    961                  PixelIndex = *(pTrans + Index);
    962                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   041061E2           RSB      R1,R1,#+4
   \   00000060   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000064   3100A0E1           LSR      R0,R1,R0
   \   00000068   30109DE5           LDR      R1,[SP, #+48]
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   00000074   0A10A0E1           MOV      R1,R10
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       _SetPixelIndex
    963                  if (++CurrentPixel == 2) {
   \   00000080   014084E2           ADD      R4,R4,#+1
   \   00000084   020054E3           CMP      R4,#+2
    964                    CurrentPixel = 0;
   \   00000088   0040A003           MOVEQ    R4,#+0
    965                    Pixels = *(++p);
   \   0000008C   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000090   01A08AE2           ADD      R10,R10,#+1
    966                  }
    967                } while (--xsize);
   \   00000094   018058E2           SUBS     R8,R8,#+1
   \   00000098   ECFFFF1A           BNE      ??_DrawBitLine4BPP_4
   \   0000009C   3C0000EA           B        ??_DrawBitLine4BPP_2
    968              } else {
    969                do {
    970                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_3:
   \   000000A0   010064E2           RSB      R0,R4,#+1
   \   000000A4   0001A0E1           LSL      R0,R0,#+2
    971                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    972                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   0010A0E1           MOV      R1,R0
   \   000000AC   041061E2           RSB      R1,R1,#+4
   \   000000B0   5B1109E0           AND      R1,R9,R11, ASR R1
   \   000000B4   3130A0E1           LSR      R3,R1,R0
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0A10A0E1           MOV      R1,R10
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       _SetPixelIndex
    973                  if (++CurrentPixel == 2) {
   \   000000C8   014084E2           ADD      R4,R4,#+1
   \   000000CC   020054E3           CMP      R4,#+2
    974                    CurrentPixel = 0;
   \   000000D0   0040A003           MOVEQ    R4,#+0
    975                    Pixels = *(++p);
   \   000000D4   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   000000D8   01A08AE2           ADD      R10,R10,#+1
    976                  }
    977                } while (--xsize);
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   EEFFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   000000E4   2A0000EA           B        ??_DrawBitLine4BPP_2
    978              }
    979              break;
    980            case LCD_DRAWMODE_TRANS:
    981              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   000000E8   30009DE5           LDR      R0,[SP, #+48]
   \   000000EC   F0B0A0E3           MOV      R11,#+240
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??_DrawBitLine4BPP_5
    982                do {
    983                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_6:
   \   000000F8   010064E2           RSB      R0,R4,#+1
   \   000000FC   0001A0E1           LSL      R0,R0,#+2
    984                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000100   0010A0E1           MOV      R1,R0
   \   00000104   041061E2           RSB      R1,R1,#+4
   \   00000108   5B1109E0           AND      R1,R9,R11, ASR R1
   \   0000010C   3130B0E1           LSRS     R3,R1,R0
    985                  if (Index) {
   \   00000110   0500000A           BEQ      ??_DrawBitLine4BPP_7
    986                    PixelIndex = *(pTrans + Index);
    987                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000114   30009DE5           LDR      R0,[SP, #+48]
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   033190E7           LDR      R3,[R0, +R3, LSL #+2]
   \   00000120   0A10A0E1           MOV      R1,R10
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           BL       _SetPixelIndex
    988                  }
    989                  x++;
    990                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   0000012C   014084E2           ADD      R4,R4,#+1
   \   00000130   020054E3           CMP      R4,#+2
    991                    CurrentPixel = 0;
   \   00000134   0040A003           MOVEQ    R4,#+0
    992                    Pixels = *(++p);
   \   00000138   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   0000013C   01A08AE2           ADD      R10,R10,#+1
    993                  }
    994                } while (--xsize);
   \   00000140   018058E2           SUBS     R8,R8,#+1
   \   00000144   EBFFFF1A           BNE      ??_DrawBitLine4BPP_6
   \   00000148   110000EA           B        ??_DrawBitLine4BPP_2
    995              } else {
    996                do {
    997                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   0000014C   010064E2           RSB      R0,R4,#+1
   \   00000150   0001A0E1           LSL      R0,R0,#+2
    998                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   041061E2           RSB      R1,R1,#+4
   \   0000015C   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000160   3130B0E1           LSRS     R3,R1,R0
    999                  if (Index) {
   \   00000164   0300000A           BEQ      ??_DrawBitLine4BPP_8
   1000                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000168   0620A0E1           MOV      R2,R6
   \   0000016C   0A10A0E1           MOV      R1,R10
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       _SetPixelIndex
   1001                  }
   1002                  x++;
   1003                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_8:
   \   00000178   014084E2           ADD      R4,R4,#+1
   \   0000017C   020054E3           CMP      R4,#+2
   1004                    CurrentPixel = 0;
   \   00000180   0040A003           MOVEQ    R4,#+0
   1005                    Pixels = *(++p);
   \   00000184   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000188   01A08AE2           ADD      R10,R10,#+1
   1006                  }
   1007                } while (--xsize);
   \   0000018C   018058E2           SUBS     R8,R8,#+1
   \   00000190   EDFFFF1A           BNE      ??_DrawBitLine4BPP_5
   1008              }
   1009              break;
   1010            }
   1011          }
   \                     ??_DrawBitLine4BPP_2:
   \   00000194   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000198   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1012          
   1013          /*********************************************************************
   1014          *
   1015          *       Draw Bitmap 8 BPP
   1016          */

   \                                 In section .text, align 4, keep-with-next
   1017          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1018            LCD_PIXELINDEX Pixel;
   1019          
   1020            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   20909DE5           LDR      R9,[SP, #+32]
   \   00000024   24809DE5           LDR      R8,[SP, #+36]
   \   00000028   030010E2           ANDS     R0,R0,#0x3
   \   0000002C   0200000A           BEQ      ??_DrawBitLine8BPP_0
   \   00000030   020050E2           SUBS     R0,R0,#+2
   \   00000034   3700000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000038   850000EA           B        ??_DrawBitLine8BPP_2
   1021            case 0:
   1022              if (pTrans) {
   \                     ??_DrawBitLine8BPP_0:
   \   0000003C   000058E3           CMP      R8,#+0
   \   00000040   1B00000A           BEQ      ??_DrawBitLine8BPP_3
   \   00000044   010059E3           CMP      R9,#+1
   \   00000048   810000BA           BLT      ??_DrawBitLine8BPP_2
   \   0000004C   010019E3           TST      R9,#0x1
   \   00000050   0400000A           BEQ      ??_DrawBitLine8BPP_4
   1023                for (; xsize > 0; xsize--, x++, p++) {
   1024                  Pixel = *p;
   1025                  _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
   \   00000054   0100D6E4           LDRB     R0,[R6], #+1
   \   00000058   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       _SetPixelIndex
   \   00000064   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitLine8BPP_4:
   \   00000068   A990B0E1           LSRS     R9,R9,#+1
   \   0000006C   7800000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_5:
   \   00000070   0100D6E4           LDRB     R0,[R6], #+1
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0710A0E1           MOV      R1,R7
   \   0000007C   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _SetPixelIndex
   \   00000088   0100D6E4           LDRB     R0,[R6], #+1
   \   0000008C   017087E2           ADD      R7,R7,#+1
   \   00000090   0520A0E1           MOV      R2,R5
   \   00000094   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   00000098   0710A0E1           MOV      R1,R7
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       _SetPixelIndex
   1026                }
   \   000000A4   017087E2           ADD      R7,R7,#+1
   \   000000A8   019059E2           SUBS     R9,R9,#+1
   \   000000AC   EFFFFF1A           BNE      ??_DrawBitLine8BPP_5
   \   000000B0   670000EA           B        ??_DrawBitLine8BPP_2
   1027              } else {
   \                     ??_DrawBitLine8BPP_3:
   \   000000B4   010059E3           CMP      R9,#+1
   \   000000B8   650000BA           BLT      ??_DrawBitLine8BPP_2
   \   000000BC   010019E3           TST      R9,#0x1
   \   000000C0   0300000A           BEQ      ??_DrawBitLine8BPP_6
   1028                for (; xsize > 0; xsize--, x++, p++) {
   1029                  _SetPixelIndex(pDevice, x, y, *p);
   \   000000C4   0130D6E4           LDRB     R3,[R6], #+1
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           BL       _SetPixelIndex
   \   000000D0   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitLine8BPP_6:
   \   000000D4   A980B0E1           LSRS     R8,R9,#+1
   \   000000D8   5D00000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_7:
   \   000000DC   0130D6E4           LDRB     R3,[R6], #+1
   \   000000E0   0520A0E1           MOV      R2,R5
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       _SetPixelIndex
   \   000000F0   017087E2           ADD      R7,R7,#+1
   \   000000F4   0130D6E4           LDRB     R3,[R6], #+1
   \   000000F8   0520A0E1           MOV      R2,R5
   \   000000FC   0710A0E1           MOV      R1,R7
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _SetPixelIndex
   1030                }
   \   00000108   017087E2           ADD      R7,R7,#+1
   \   0000010C   018058E2           SUBS     R8,R8,#+1
   \   00000110   F1FFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   00000114   4E0000EA           B        ??_DrawBitLine8BPP_2
   1031              }
   1032              break;
   1033            case LCD_DRAWMODE_TRANS:
   1034              if (pTrans) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000118   000058E3           CMP      R8,#+0
   \   0000011C   2600000A           BEQ      ??_DrawBitLine8BPP_8
   \   00000120   010059E3           CMP      R9,#+1
   \   00000124   4A0000BA           BLT      ??_DrawBitLine8BPP_2
   \   00000128   019049E2           SUB      R9,R9,#+1
   \   0000012C   0030D6E5           LDRB     R3,[R6, #+0]
   \   00000130   010019E3           TST      R9,#0x1
   \   00000134   0600000A           BEQ      ??_DrawBitLine8BPP_9
   1035                for (; xsize > 0; xsize--, x++, p++) {
   1036                  Pixel = *p;
   1037                  if (Pixel) {
   \   00000138   000053E3           CMP      R3,#+0
   \   0000013C   0200000A           BEQ      ??_DrawBitLine8BPP_10
   1038                    _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
   \   00000140   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_10:
   \   0000014C   017087E2           ADD      R7,R7,#+1
   \   00000150   0130F6E5           LDRB     R3,[R6, #+1]!
   \                     ??_DrawBitLine8BPP_9:
   \   00000154   A990B0E1           LSRS     R9,R9,#+1
   \   00000158   1300000A           BEQ      ??_DrawBitLine8BPP_11
   \                     ??_DrawBitLine8BPP_12:
   \   0000015C   000053E3           CMP      R3,#+0
   \   00000160   0400000A           BEQ      ??_DrawBitLine8BPP_13
   \   00000164   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   00000168   0520A0E1           MOV      R2,R5
   \   0000016C   0710A0E1           MOV      R1,R7
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_13:
   \   00000178   0130F6E5           LDRB     R3,[R6, #+1]!
   \   0000017C   017087E2           ADD      R7,R7,#+1
   \   00000180   000053E3           CMP      R3,#+0
   \   00000184   0400000A           BEQ      ??_DrawBitLine8BPP_14
   \   00000188   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   0000018C   0520A0E1           MOV      R2,R5
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_14:
   \   0000019C   017087E2           ADD      R7,R7,#+1
   \   000001A0   0130F6E5           LDRB     R3,[R6, #+1]!
   \   000001A4   019059E2           SUBS     R9,R9,#+1
   \   000001A8   EBFFFF1A           BNE      ??_DrawBitLine8BPP_12
   \                     ??_DrawBitLine8BPP_11:
   \   000001AC   000053E3           CMP      R3,#+0
   \   000001B0   2700000A           BEQ      ??_DrawBitLine8BPP_2
   \   000001B4   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   000001B8   210000EA           B        ??_DrawBitLine8BPP_15
   1039                  }
   1040                }
   1041              } else {
   \                     ??_DrawBitLine8BPP_8:
   \   000001BC   010059E3           CMP      R9,#+1
   \   000001C0   230000BA           BLT      ??_DrawBitLine8BPP_2
   \   000001C4   018049E2           SUB      R8,R9,#+1
   \   000001C8   0030D6E5           LDRB     R3,[R6, #+0]
   \   000001CC   010018E3           TST      R8,#0x1
   \   000001D0   0500000A           BEQ      ??_DrawBitLine8BPP_16
   1042                for (; xsize > 0; xsize--, x++, p++) {
   1043                  Pixel = *p;
   1044                  if (Pixel) {
   \   000001D4   000053E3           CMP      R3,#+0
   \   000001D8   0100000A           BEQ      ??_DrawBitLine8BPP_17
   1045                    _SetPixelIndex(pDevice, x, y, Pixel);
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_17:
   \   000001E4   017087E2           ADD      R7,R7,#+1
   \   000001E8   0130F6E5           LDRB     R3,[R6, #+1]!
   \                     ??_DrawBitLine8BPP_16:
   \   000001EC   A880B0E1           LSRS     R8,R8,#+1
   \   000001F0   1100000A           BEQ      ??_DrawBitLine8BPP_18
   \                     ??_DrawBitLine8BPP_19:
   \   000001F4   000053E3           CMP      R3,#+0
   \   000001F8   0300000A           BEQ      ??_DrawBitLine8BPP_20
   \   000001FC   0520A0E1           MOV      R2,R5
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_20:
   \   0000020C   0130F6E5           LDRB     R3,[R6, #+1]!
   \   00000210   017087E2           ADD      R7,R7,#+1
   \   00000214   000053E3           CMP      R3,#+0
   \   00000218   0300000A           BEQ      ??_DrawBitLine8BPP_21
   \   0000021C   0520A0E1           MOV      R2,R5
   \   00000220   0710A0E1           MOV      R1,R7
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_21:
   \   0000022C   017087E2           ADD      R7,R7,#+1
   \   00000230   0130F6E5           LDRB     R3,[R6, #+1]!
   \   00000234   018058E2           SUBS     R8,R8,#+1
   \   00000238   EDFFFF1A           BNE      ??_DrawBitLine8BPP_19
   \                     ??_DrawBitLine8BPP_18:
   \   0000023C   000053E3           CMP      R3,#+0
   \   00000240   0300000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_15:
   \   00000244   0520A0E1           MOV      R2,R5
   \   00000248   0710A0E1           MOV      R1,R7
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       _SetPixelIndex
   1046                  }
   1047                }
   1048              }
   1049              break;
   1050            }
   1051          }
   \                     ??_DrawBitLine8BPP_2:
   \   00000254   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000258   F083BDE8           POP      {R4-R9,PC}       ;; return
   1052          
   1053          /*********************************************************************
   1054          *
   1055          *       Draw Bitmap 32 BPP
   1056          */

   \                                 In section .text, align 4, keep-with-next
   1057          static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const GUI_UNI_PTR * p, int xsize) {
   \                     _DrawBitLine32BPP:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1058            #define GET_PIXEL_INDEX(Index) Index = *p++
   1059            DRIVER_CONTEXT * pContext;
   1060            U32 Data, Data0, Data1, Data2, Index;
   1061            unsigned Off, Odd;
   1062          
   1063            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   1064            //
   1065            // Mirror x
   1066            //
   1067            x = (pContext->vxSizePhys - 1 - x);
   \   0000000C   14E090E5           LDR      LR,[R0, #+20]
   \   00000010   01404EE2           SUB      R4,LR,#+1
   \   00000014   014044E0           SUB      R4,R4,R1
   1068            //
   1069            // Mirror y
   1070            //
   1071            y = (pContext->vySize - 1 - y);
   1072            //
   1073            // First triple DWORD
   1074            //
   1075            Off = XY2OFF32(pContext->vxSizePhys, x, y);
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   011041E2           SUB      R1,R1,#+1
   \   00000020   021041E0           SUB      R1,R1,R2
   \   00000024   9E0101E0           MUL      R1,LR,R1
   \   00000028   842084E0           ADD      R2,R4,R4, LSL #+1
   \   0000002C   811081E0           ADD      R1,R1,R1, LSL #+1
   \   00000030   011082E0           ADD      R1,R2,R1
   1076            Odd = x & 3;
   \   00000034   032004E2           AND      R2,R4,#0x3
   \   00000038   2111A0E1           LSR      R1,R1,#+2
   1077            if (Odd != 3) {
   \   0000003C   030052E3           CMP      R2,#+3
   \   00000040   2D00000A           BEQ      ??_DrawBitLine32BPP_0
   1078              if (Odd != 0) {
   \   00000044   000052E3           CMP      R2,#+0
   1079                Off++;
   1080              }
   1081              Data    = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000048   00E090E5           LDR      LR,[R0, #+0]
   \   0000004C   01108112           ADDNE    R1,R1,#+1
   \   00000050   01419EE7           LDR      R4,[LR, +R1, LSL #+2]
   1082              switch (Odd) {
   \   00000054   2100000A           BEQ      ??_DrawBitLine32BPP_1
   \   00000058   020052E3           CMP      R2,#+2
   \   0000005C   0100000A           BEQ      ??_DrawBitLine32BPP_2
   \   00000060   1000003A           BCC      ??_DrawBitLine32BPP_3
   \   00000064   240000EA           B        ??_DrawBitLine32BPP_0
   1083              case 2:
   1084                GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine32BPP_2:
   \   00000068   042093E4           LDR      R2,[R3], #+4
   1085                Data &= 0xFFFFFF00;
   1086                Data |= Index >> 16;
   1087                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000006C   FF40C4E3           BIC      R4,R4,#0xFF
   \   00000070   224884E1           ORR      R4,R4,R2, LSR #+16
   \   00000074   01418EE7           STR      R4,[LR, +R1, LSL #+2]
   1088                Off--;
   1089                Data = READ_MEM32(pContext->VRAMAddr, Off);
   1090                Data &= 0x0000FFFF;
   1091                Data |= Index << 16;
   \   00000078   00E090E5           LDR      LR,[R0, #+0]
   \   0000007C   011041E2           SUB      R1,R1,#+1
   \   00000080   01E18EE0           ADD      LR,LR,R1, LSL #+2
   \   00000084   B0E0DEE1           LDRH     LR,[LR, #+0]
   \   00000088   0228A0E1           LSL      R2,R2,#+16
   1092                xsize--;                  
   \   0000008C   01C05CE2           SUBS     R12,R12,#+1
   \   00000090   0EE8A0E1           LSL      LR,LR,#+16
   \   00000094   2E4882E1           ORR      R4,R2,LR, LSR #+16
   1093                if (!xsize) {
   \   00000098   0200001A           BNE      ??_DrawBitLine32BPP_3
   1094                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
   \                     ??_DrawBitLine32BPP_4:
   \   0000009C   002090E5           LDR      R2,[R0, #+0]
   \   000000A0   014182E7           STR      R4,[R2, +R1, LSL #+2]
   1095                  break;
   \   000000A4   140000EA           B        ??_DrawBitLine32BPP_0
   1096                }
   1097              case 1:
   1098                GET_PIXEL_INDEX(Index);   
   \                     ??_DrawBitLine32BPP_3:
   \   000000A8   042093E4           LDR      R2,[R3], #+4
   1099                Data &= 0xFFFF0000;
   1100                Data |= Index >> 8;
   1101                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000000AC   24E8A0E1           LSR      LR,R4,#+16
   \   000000B0   2244A0E1           LSR      R4,R2,#+8
   \   000000B4   0EE884E1           ORR      LR,R4,LR, LSL #+16
   \   000000B8   004090E5           LDR      R4,[R0, #+0]
   1102                Off--;
   1103                Data = READ_MEM32(pContext->VRAMAddr, Off);
   1104                Data &= 0x00FFFFFF;
   1105                Data |= Index << 24;
   \   000000BC   022CA0E1           LSL      R2,R2,#+24
   \   000000C0   01E184E7           STR      LR,[R4, +R1, LSL #+2]
   \   000000C4   00E090E5           LDR      LR,[R0, #+0]
   \   000000C8   011041E2           SUB      R1,R1,#+1
   \   000000CC   01E19EE7           LDR      LR,[LR, +R1, LSL #+2]
   1106                xsize--;                  
   \   000000D0   01C05CE2           SUBS     R12,R12,#+1
   \   000000D4   0EE4A0E1           LSL      LR,LR,#+8
   \   000000D8   2E4482E1           ORR      R4,R2,LR, LSR #+8
   1107                if (!xsize) {
   \   000000DC   EEFFFF0A           BEQ      ??_DrawBitLine32BPP_4
   1108                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);   
   1109                  break;
   1110                }
   1111              case 0:
   1112                GET_PIXEL_INDEX(Index);   
   \                     ??_DrawBitLine32BPP_1:
   \   000000E0   042093E4           LDR      R2,[R3], #+4
   1113                Data &= 0xFF000000;
   1114                Data |= Index;
   1115                xsize--;                  
   1116                WRITE_MEM32(pContext->VRAMAddr, Off, Data);     
   \   000000E4   00E090E5           LDR      LR,[R0, #+0]
   \   000000E8   FF4404E2           AND      R4,R4,#0xFF000000
   \   000000EC   042082E1           ORR      R2,R2,R4
   \   000000F0   01218EE7           STR      R2,[LR, +R1, LSL #+2]
   \   000000F4   01C04CE2           SUB      R12,R12,#+1
   1117                Off--;
   \   000000F8   011041E2           SUB      R1,R1,#+1
   1118              }
   1119            }
   1120            //
   1121            // Complete triple DWORDS
   1122            //
   1123            if (xsize >= 4) {
   \                     ??_DrawBitLine32BPP_0:
   \   000000FC   04005CE3           CMP      R12,#+4
   \   00000100   150000BA           BLT      ??_DrawBitLine32BPP_5
   1124              do {
   1125                GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine32BPP_6:
   \   00000104   042093E4           LDR      R2,[R3], #+4
   1126                Data0  = (Index <<  8);
   1127                GET_PIXEL_INDEX(Index);
   \   00000108   04E093E4           LDR      LR,[R3], #+4
   \   0000010C   0224A0E1           LSL      R2,R2,#+8
   1128                Data0 |= (Index >> 16);
   \   00000110   2E4882E1           ORR      R4,R2,LR, LSR #+16
   1129                Data1  = (Index << 16);
   \   00000114   0E28A0E1           LSL      R2,LR,#+16
   1130                GET_PIXEL_INDEX(Index);
   \   00000118   04E093E4           LDR      LR,[R3], #+4
   1131                Data1 |= (Index >>  8);
   1132                Data2  = (Index << 24);
   1133                GET_PIXEL_INDEX(Index);
   1134                Data2 |= (Index      );
   1135                WRITE_MEM32(pContext->VRAMAddr, Off - 0, Data0);
   \   0000011C   006090E5           LDR      R6,[R0, #+0]
   \   00000120   2E5482E1           ORR      R5,R2,LR, LSR #+8
   \   00000124   042093E4           LDR      R2,[R3], #+4
   \   00000128   014186E7           STR      R4,[R6, +R1, LSL #+2]
   1136                WRITE_MEM32(pContext->VRAMAddr, Off - 1, Data1);
   \   0000012C   004090E5           LDR      R4,[R0, #+0]
   \   00000130   0EECA0E1           LSL      LR,LR,#+24
   \   00000134   014184E0           ADD      R4,R4,R1, LSL #+2
   \   00000138   045004E5           STR      R5,[R4, #-4]
   1137                WRITE_MEM32(pContext->VRAMAddr, Off - 2, Data2);
   \   0000013C   004090E5           LDR      R4,[R0, #+0]
   \   00000140   0E2082E1           ORR      R2,R2,LR
   \   00000144   014184E0           ADD      R4,R4,R1, LSL #+2
   1138                Off -= 3;
   1139              } while ((xsize -= 4) >= 4);
   \   00000148   04C04CE2           SUB      R12,R12,#+4
   \   0000014C   082004E5           STR      R2,[R4, #-8]
   \   00000150   031041E2           SUB      R1,R1,#+3
   \   00000154   04005CE3           CMP      R12,#+4
   \   00000158   E9FFFFAA           BGE      ??_DrawBitLine32BPP_6
   1140            }
   1141            //
   1142            // Last triple DWORD
   1143            //
   1144            if (xsize) {
   \                     ??_DrawBitLine32BPP_5:
   \   0000015C   00005CE3           CMP      R12,#+0
   \   00000160   2100000A           BEQ      ??_DrawBitLine32BPP_7
   1145              Data  = READ_MEM32(pContext->VRAMAddr, Off);
   1146              Data &= 0x000000FF;
   1147              GET_PIXEL_INDEX(Index);
   1148              Data |= (Index << 8);
   \   00000164   00E090E5           LDR      LR,[R0, #+0]
   \   00000168   042093E4           LDR      R2,[R3], #+4
   \   0000016C   0141DEE7           LDRB     R4,[LR, +R1, LSL #+2]
   1149              xsize--;
   \   00000170   01C05CE2           SUBS     R12,R12,#+1
   \   00000174   024484E1           ORR      R4,R4,R2, LSL #+8
   1150              if (!xsize) {
   \   00000178   0200001A           BNE      ??_DrawBitLine32BPP_8
   1151                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine32BPP_9:
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   014180E7           STR      R4,[R0, +R1, LSL #+2]
   1152                return;
   \   00000184   7080BDE8           POP      {R4-R6,PC}
   1153              }
   1154              Data &= 0xFFFFFF00;
   1155              GET_PIXEL_INDEX(Index);
   \                     ??_DrawBitLine32BPP_8:
   \   00000188   042093E4           LDR      R2,[R3], #+4
   1156              Data |= Index >> 16;
   1157              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   0000018C   FF40C4E3           BIC      R4,R4,#0xFF
   \   00000190   224884E1           ORR      R4,R4,R2, LSR #+16
   \   00000194   01418EE7           STR      R4,[LR, +R1, LSL #+2]
   1158              Off--;
   1159              Data  = READ_MEM32(pContext->VRAMAddr, Off);
   1160              Data &= 0x0000FFFF;
   1161              Data |= Index << 16;
   \   00000198   00E090E5           LDR      LR,[R0, #+0]
   \   0000019C   011041E2           SUB      R1,R1,#+1
   \   000001A0   01418EE0           ADD      R4,LR,R1, LSL #+2
   \   000001A4   B040D4E1           LDRH     R4,[R4, #+0]
   \   000001A8   0228A0E1           LSL      R2,R2,#+16
   \   000001AC   0448A0E1           LSL      R4,R4,#+16
   \   000001B0   244882E1           ORR      R4,R2,R4, LSR #+16
   1162              xsize--;
   1163              if (!xsize) {
   \   000001B4   01205CE2           SUBS     R2,R12,#+1
   \   000001B8   EFFFFF0A           BEQ      ??_DrawBitLine32BPP_9
   1164                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   1165                return;
   1166              }
   1167              Data &= 0xFFFF0000;
   1168              GET_PIXEL_INDEX(Index);
   \   000001BC   002093E5           LDR      R2,[R3, #+0]
   1169              Data |= Index >> 8;
   1170              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000001C0   2438A0E1           LSR      R3,R4,#+16
   \   000001C4   22C4A0E1           LSR      R12,R2,#+8
   \   000001C8   03388CE1           ORR      R3,R12,R3, LSL #+16
   \   000001CC   01318EE7           STR      R3,[LR, +R1, LSL #+2]
   1171              Off--;
   1172              Data  = READ_MEM32(pContext->VRAMAddr, Off);
   1173              Data &= 0x00FFFFFF;
   1174              Data |= Index << 24;
   1175              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000001D0   000090E5           LDR      R0,[R0, #+0]
   \   000001D4   011041E2           SUB      R1,R1,#+1
   \   000001D8   013190E7           LDR      R3,[R0, +R1, LSL #+2]
   \   000001DC   022CA0E1           LSL      R2,R2,#+24
   \   000001E0   0334A0E1           LSL      R3,R3,#+8
   \   000001E4   232482E1           ORR      R2,R2,R3, LSR #+8
   \   000001E8   012180E7           STR      R2,[R0, +R1, LSL #+2]
   \                     ??_DrawBitLine32BPP_7:
   \   000001EC   7080BDE8           POP      {R4-R6,PC}       ;; return
   1176            }
   1177            #undef GET_PIXEL_INDEX
   1178          }
   1179          
   1180          /*********************************************************************
   1181          *
   1182          *       _DrawBitmap
   1183          */

   \                                 In section .text, align 4, keep-with-next
   1184          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
   1185                                 int xSize, int ySize,
   1186                                 int BitsPerPixel, 
   1187                                 int BytesPerLine,
   1188                                 const U8 GUI_UNI_PTR * pData, int Diff,
   1189                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   1190            int i;
   1191          
   1192            //
   1193            // Use _DrawBitLineXBPP and _DrawBitLineXBPP_Swap
   1194            //
   1195            switch (BitsPerPixel) {
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   1F0051E3           CMP      R1,#+31
   \   00000034   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   EC00008A           BHI      ??_DrawBitmap_1
   \   0000003C   1E0000EA           B        ??_DrawBitmap_2
   \   00000040   4A0000EA           B        ??_DrawBitmap_3
   \   00000044   E90000EA           B        ??_DrawBitmap_1
   \   00000048   750000EA           B        ??_DrawBitmap_4
   \   0000004C   E70000EA           B        ??_DrawBitmap_1
   \   00000050   E60000EA           B        ??_DrawBitmap_1
   \   00000054   E50000EA           B        ??_DrawBitmap_1
   \   00000058   9E0000EA           B        ??_DrawBitmap_5
   \   0000005C   E30000EA           B        ??_DrawBitmap_1
   \   00000060   E20000EA           B        ??_DrawBitmap_1
   \   00000064   E10000EA           B        ??_DrawBitmap_1
   \   00000068   E00000EA           B        ??_DrawBitmap_1
   \   0000006C   DF0000EA           B        ??_DrawBitmap_1
   \   00000070   DE0000EA           B        ??_DrawBitmap_1
   \   00000074   DD0000EA           B        ??_DrawBitmap_1
   \   00000078   DC0000EA           B        ??_DrawBitmap_1
   \   0000007C   DB0000EA           B        ??_DrawBitmap_1
   \   00000080   DA0000EA           B        ??_DrawBitmap_1
   \   00000084   D90000EA           B        ??_DrawBitmap_1
   \   00000088   D80000EA           B        ??_DrawBitmap_1
   \   0000008C   D70000EA           B        ??_DrawBitmap_1
   \   00000090   D60000EA           B        ??_DrawBitmap_1
   \   00000094   D50000EA           B        ??_DrawBitmap_1
   \   00000098   D40000EA           B        ??_DrawBitmap_1
   \   0000009C   D30000EA           B        ??_DrawBitmap_1
   \   000000A0   D20000EA           B        ??_DrawBitmap_1
   \   000000A4   D10000EA           B        ??_DrawBitmap_1
   \   000000A8   D00000EA           B        ??_DrawBitmap_1
   \   000000AC   CF0000EA           B        ??_DrawBitmap_1
   \   000000B0   CE0000EA           B        ??_DrawBitmap_1
   \   000000B4   CD0000EA           B        ??_DrawBitmap_1
   \   000000B8   AB0000EA           B        ??_DrawBitmap_6
   1196            case 1:
   1197              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   CA0000BA           BLT      ??_DrawBitmap_1
   \   000000C4   02B0A0E1           MOV      R11,R2
   \   000000C8   10008DE5           STR      R0,[SP, #+16]
   \   000000CC   010010E3           TST      R0,#0x1
   \   000000D0   0800000A           BEQ      ??_DrawBitmap_7
   1198                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000000D4   08A08DE5           STR      R10,[SP, #+8]
   \   000000D8   04608DE5           STR      R6,[SP, #+4]
   \   000000DC   00908DE5           STR      R9,[SP, #+0]
   \   000000E0   0830A0E1           MOV      R3,R8
   \   000000E4   0510A0E1           MOV      R1,R5
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       _DrawBitLine1BPP
   1199                pData += BytesPerLine;
   \   000000F0   088087E0           ADD      R8,R7,R8
   \   000000F4   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_7:
   \   000000F8   10109DE5           LDR      R1,[SP, #+16]
   \   000000FC   A110A0E1           LSR      R1,R1,#+1
   \   00000100   0C108DE5           STR      R1,[SP, #+12]
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   B800000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   0000010C   08A08DE5           STR      R10,[SP, #+8]
   \   00000110   04608DE5           STR      R6,[SP, #+4]
   \   00000114   00908DE5           STR      R9,[SP, #+0]
   \   00000118   0830A0E1           MOV      R3,R8
   \   0000011C   0B20A0E1           MOV      R2,R11
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       _DrawBitLine1BPP
   \   0000012C   088087E0           ADD      R8,R7,R8
   \   00000130   08A08DE5           STR      R10,[SP, #+8]
   \   00000134   04608DE5           STR      R6,[SP, #+4]
   \   00000138   00908DE5           STR      R9,[SP, #+0]
   \   0000013C   0830A0E1           MOV      R3,R8
   \   00000140   01208BE2           ADD      R2,R11,#+1
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           BL       _DrawBitLine1BPP
   1200              }
   \   00000150   0C109DE5           LDR      R1,[SP, #+12]
   \   00000154   088087E0           ADD      R8,R7,R8
   \   00000158   011041E2           SUB      R1,R1,#+1
   \   0000015C   0C108DE5           STR      R1,[SP, #+12]
   \   00000160   02B08BE2           ADD      R11,R11,#+2
   \   00000164   000051E3           CMP      R1,#+0
   \   00000168   E7FFFF1A           BNE      ??_DrawBitmap_8
   \   0000016C   9F0000EA           B        ??_DrawBitmap_1
   1201              break;
   1202            case 2:
   1203              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000170   010050E3           CMP      R0,#+1
   \   00000174   9D0000BA           BLT      ??_DrawBitmap_1
   \   00000178   02B0A0E1           MOV      R11,R2
   \   0000017C   10008DE5           STR      R0,[SP, #+16]
   \   00000180   010010E3           TST      R0,#0x1
   \   00000184   0800000A           BEQ      ??_DrawBitmap_9
   1204                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000188   08A08DE5           STR      R10,[SP, #+8]
   \   0000018C   04608DE5           STR      R6,[SP, #+4]
   \   00000190   00908DE5           STR      R9,[SP, #+0]
   \   00000194   0830A0E1           MOV      R3,R8
   \   00000198   0510A0E1           MOV      R1,R5
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       _DrawBitLine2BPP
   1205                pData += BytesPerLine;
   \   000001A4   088087E0           ADD      R8,R7,R8
   \   000001A8   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_9:
   \   000001AC   10109DE5           LDR      R1,[SP, #+16]
   \   000001B0   A110A0E1           LSR      R1,R1,#+1
   \   000001B4   0C108DE5           STR      R1,[SP, #+12]
   \   000001B8   000051E3           CMP      R1,#+0
   \   000001BC   8B00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   000001C0   08A08DE5           STR      R10,[SP, #+8]
   \   000001C4   04608DE5           STR      R6,[SP, #+4]
   \   000001C8   00908DE5           STR      R9,[SP, #+0]
   \   000001CC   0830A0E1           MOV      R3,R8
   \   000001D0   0B20A0E1           MOV      R2,R11
   \   000001D4   0510A0E1           MOV      R1,R5
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   ........           BL       _DrawBitLine2BPP
   \   000001E0   088087E0           ADD      R8,R7,R8
   \   000001E4   08A08DE5           STR      R10,[SP, #+8]
   \   000001E8   04608DE5           STR      R6,[SP, #+4]
   \   000001EC   00908DE5           STR      R9,[SP, #+0]
   \   000001F0   0830A0E1           MOV      R3,R8
   \   000001F4   01208BE2           ADD      R2,R11,#+1
   \   000001F8   0510A0E1           MOV      R1,R5
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       _DrawBitLine2BPP
   1206              }
   \   00000204   0C109DE5           LDR      R1,[SP, #+12]
   \   00000208   088087E0           ADD      R8,R7,R8
   \   0000020C   011041E2           SUB      R1,R1,#+1
   \   00000210   0C108DE5           STR      R1,[SP, #+12]
   \   00000214   02B08BE2           ADD      R11,R11,#+2
   \   00000218   000051E3           CMP      R1,#+0
   \   0000021C   E7FFFF1A           BNE      ??_DrawBitmap_10
   \   00000220   720000EA           B        ??_DrawBitmap_1
   1207              break;
   1208            case 4:
   1209              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   700000BA           BLT      ??_DrawBitmap_1
   \   0000022C   02B0A0E1           MOV      R11,R2
   \   00000230   10008DE5           STR      R0,[SP, #+16]
   \   00000234   010010E3           TST      R0,#0x1
   \   00000238   0800000A           BEQ      ??_DrawBitmap_11
   1210                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   0000023C   08A08DE5           STR      R10,[SP, #+8]
   \   00000240   04608DE5           STR      R6,[SP, #+4]
   \   00000244   00908DE5           STR      R9,[SP, #+0]
   \   00000248   0830A0E1           MOV      R3,R8
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _DrawBitLine4BPP
   1211                pData += BytesPerLine;
   \   00000258   088087E0           ADD      R8,R7,R8
   \   0000025C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_11:
   \   00000260   10109DE5           LDR      R1,[SP, #+16]
   \   00000264   A110A0E1           LSR      R1,R1,#+1
   \   00000268   0C108DE5           STR      R1,[SP, #+12]
   \   0000026C   000051E3           CMP      R1,#+0
   \   00000270   5E00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000274   08A08DE5           STR      R10,[SP, #+8]
   \   00000278   04608DE5           STR      R6,[SP, #+4]
   \   0000027C   00908DE5           STR      R9,[SP, #+0]
   \   00000280   0830A0E1           MOV      R3,R8
   \   00000284   0B20A0E1           MOV      R2,R11
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0400A0E1           MOV      R0,R4
   \   00000290   ........           BL       _DrawBitLine4BPP
   \   00000294   088087E0           ADD      R8,R7,R8
   \   00000298   08A08DE5           STR      R10,[SP, #+8]
   \   0000029C   04608DE5           STR      R6,[SP, #+4]
   \   000002A0   00908DE5           STR      R9,[SP, #+0]
   \   000002A4   0830A0E1           MOV      R3,R8
   \   000002A8   01208BE2           ADD      R2,R11,#+1
   \   000002AC   0510A0E1           MOV      R1,R5
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           BL       _DrawBitLine4BPP
   1212              }
   \   000002B8   0C109DE5           LDR      R1,[SP, #+12]
   \   000002BC   088087E0           ADD      R8,R7,R8
   \   000002C0   011041E2           SUB      R1,R1,#+1
   \   000002C4   0C108DE5           STR      R1,[SP, #+12]
   \   000002C8   02B08BE2           ADD      R11,R11,#+2
   \   000002CC   000051E3           CMP      R1,#+0
   \   000002D0   E7FFFF1A           BNE      ??_DrawBitmap_12
   \   000002D4   450000EA           B        ??_DrawBitmap_1
   1213              break;
   1214            case 8:
   1215              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_5:
   \   000002D8   010050E3           CMP      R0,#+1
   \   000002DC   430000BA           BLT      ??_DrawBitmap_1
   \   000002E0   00B0A0E1           MOV      R11,R0
   \   000002E4   0290A0E1           MOV      R9,R2
   \   000002E8   01001BE3           TST      R11,#0x1
   \   000002EC   0700000A           BEQ      ??_DrawBitmap_13
   1216                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
   \   000002F0   04A08DE5           STR      R10,[SP, #+4]
   \   000002F4   00608DE5           STR      R6,[SP, #+0]
   \   000002F8   0830A0E1           MOV      R3,R8
   \   000002FC   0510A0E1           MOV      R1,R5
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   ........           BL       _DrawBitLine8BPP
   1217                pData += BytesPerLine;
   \   00000308   088087E0           ADD      R8,R7,R8
   \   0000030C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_13:
   \   00000310   ABB0B0E1           LSRS     R11,R11,#+1
   \   00000314   3500000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   00000318   04A08DE5           STR      R10,[SP, #+4]
   \   0000031C   00608DE5           STR      R6,[SP, #+0]
   \   00000320   0830A0E1           MOV      R3,R8
   \   00000324   0920A0E1           MOV      R2,R9
   \   00000328   0510A0E1           MOV      R1,R5
   \   0000032C   0400A0E1           MOV      R0,R4
   \   00000330   ........           BL       _DrawBitLine8BPP
   \   00000334   088087E0           ADD      R8,R7,R8
   \   00000338   04A08DE5           STR      R10,[SP, #+4]
   \   0000033C   00608DE5           STR      R6,[SP, #+0]
   \   00000340   0830A0E1           MOV      R3,R8
   \   00000344   012089E2           ADD      R2,R9,#+1
   \   00000348   0510A0E1           MOV      R1,R5
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   ........           BL       _DrawBitLine8BPP
   1218              }
   \   00000354   01B04BE2           SUB      R11,R11,#+1
   \   00000358   088087E0           ADD      R8,R7,R8
   \   0000035C   029089E2           ADD      R9,R9,#+2
   \   00000360   00005BE3           CMP      R11,#+0
   \   00000364   EBFFFF1A           BNE      ??_DrawBitmap_14
   \   00000368   200000EA           B        ??_DrawBitmap_1
   1219              break;
   1220            case 32:
   1221              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_6:
   \   0000036C   010050E3           CMP      R0,#+1
   \   00000370   1E0000BA           BLT      ??_DrawBitmap_1
   \   00000374   00A0A0E1           MOV      R10,R0
   \   00000378   0290A0E1           MOV      R9,R2
   \   0000037C   01001AE3           TST      R10,#0x1
   \   00000380   0600000A           BEQ      ??_DrawBitmap_15
   1222                _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
   \   00000384   00608DE5           STR      R6,[SP, #+0]
   \   00000388   0830A0E1           MOV      R3,R8
   \   0000038C   0510A0E1           MOV      R1,R5
   \   00000390   0400A0E1           MOV      R0,R4
   \   00000394   ........           BL       _DrawBitLine32BPP
   1223                pData += BytesPerLine;
   \   00000398   088087E0           ADD      R8,R7,R8
   \   0000039C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_15:
   \   000003A0   AAA0B0E1           LSRS     R10,R10,#+1
   \   000003A4   1100000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   000003A8   00608DE5           STR      R6,[SP, #+0]
   \   000003AC   0830A0E1           MOV      R3,R8
   \   000003B0   0920A0E1           MOV      R2,R9
   \   000003B4   0510A0E1           MOV      R1,R5
   \   000003B8   0400A0E1           MOV      R0,R4
   \   000003BC   ........           BL       _DrawBitLine32BPP
   \   000003C0   088087E0           ADD      R8,R7,R8
   \   000003C4   00608DE5           STR      R6,[SP, #+0]
   \   000003C8   0830A0E1           MOV      R3,R8
   \   000003CC   012089E2           ADD      R2,R9,#+1
   \   000003D0   0510A0E1           MOV      R1,R5
   \   000003D4   0400A0E1           MOV      R0,R4
   \   000003D8   ........           BL       _DrawBitLine32BPP
   1224              }
   \   000003DC   01A04AE2           SUB      R10,R10,#+1
   \   000003E0   088087E0           ADD      R8,R7,R8
   \   000003E4   029089E2           ADD      R9,R9,#+2
   \   000003E8   00005AE3           CMP      R10,#+0
   \   000003EC   EDFFFF1A           BNE      ??_DrawBitmap_16
   1225              break;
   1226            }
   1227          }
   \                     ??_DrawBitmap_1:
   \   000003F0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000003F4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1228          
   1229          /*********************************************************************
   1230          *
   1231          *       _SetOrg
   1232          */

   \                                 In section .text, align 4, keep-with-next
   1233          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1234            #ifndef WIN32
   1235              DRIVER_CONTEXT * pContext;
   1236            #endif
   1237            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
   1238          
   1239            #ifdef WIN32
   1240              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
   1241            #else
   1242              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
   1243              Data.xPos = pContext->vxSize - pContext->xSize - x;
   \   00000024   0CC093E5           LDR      R12,[R3, #+12]
   \   00000028   04E093E5           LDR      LR,[R3, #+4]
   \   0000002C   0EC04CE0           SUB      R12,R12,LR
   \   00000030   01104CE0           SUB      R1,R12,R1
   \   00000034   00108DE5           STR      R1,[SP, #+0]
   1244              Data.yPos = pContext->vySize - pContext->ySize - y;
   \   00000038   101093E5           LDR      R1,[R3, #+16]
   \   0000003C   083093E5           LDR      R3,[R3, #+8]
   \   00000040   031041E0           SUB      R1,R1,R3
   \   00000044   021041E0           SUB      R1,R1,R2
   \   00000048   04108DE5           STR      R1,[SP, #+4]
   1245              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   0310A0E3           MOV      R1,#+3
   \   00000054   180090E5           LDR      R0,[R0, #+24]
   \   00000058   ........           BL       LCD_X_DisplayDriver
   1246            #endif
   1247          }
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   1248          
   1249          /*********************************************************************
   1250          *
   1251          *       _InitOnce
   1252          *
   1253          * Purpose:
   1254          *   Allocates a fixed block for the context of the driver
   1255          *
   1256          * Return value:
   1257          *   0 on success, 1 on error
   1258          */
   1259          static int _InitOnce(GUI_DEVICE * pDevice) {
   1260            if (pDevice->u.pContext == NULL) {
   1261              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
   1262              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
   1263            }
   1264            return pDevice->u.pContext ? 0 : 1;
   1265          }
   1266          
   1267          /*********************************************************************
   1268          *
   1269          *       _GetRect
   1270          */

   \                                 In section .text, align 4, keep-with-next
   1271          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
   1272            DRIVER_CONTEXT * pContext;
   1273          
   1274            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   1275            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
   1276            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
   1277            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
   1278            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
   1279          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
   1280          
   1281          /*********************************************************************
   1282          *
   1283          *       _GetDevProp
   1284          */

   \                                 In section .text, align 4, keep-with-next
   1285          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
   1286            DRIVER_CONTEXT * pContext;
   1287          
   1288            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1289            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0D0000EA           B        ??_GetDevProp_8
   \   00000044   0C0000EA           B        ??_GetDevProp_8
   \   00000048   090000EA           B        ??_GetDevProp_7
   1290            case LCD_DEVCAP_XSIZE:
   1291              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
   1292            case LCD_DEVCAP_YSIZE:
   1293              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
   1294            case LCD_DEVCAP_VXSIZE:
   1295              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
   1296            case LCD_DEVCAP_VYSIZE:
   1297              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
   1298            case LCD_DEVCAP_BITSPERPIXEL:
   1299              return 24;
   \                     ??_GetDevProp_6:
   \   0000006C   1800A0E3           MOV      R0,#+24
   \   00000070   1EFF2FE1           BX       LR
   1300            case LCD_DEVCAP_NUMCOLORS:
   1301              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
   1302            case LCD_DEVCAP_XMAG:
   1303              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
   1304            case LCD_DEVCAP_YMAG:
   1305              return 1;
   1306            case LCD_DEVCAP_MIRROR_X:
   1307              return 1;
   1308            case LCD_DEVCAP_MIRROR_Y:
   1309              return 1;
   1310            case LCD_DEVCAP_SWAP_XY:
   1311              return 0;
   1312            }
   1313            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
   1314          }
   1315          
   1316          /*********************************************************************
   1317          *
   1318          *       _GetDevData
   1319          */

   \                                 In section .text, align 4, keep-with-next
   1320          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
   1321            GUI_USE_PARA(pDevice);
   1322            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
   1323            #if GUI_SUPPORT_MEMDEV
   1324              case LCD_DEVDATA_MEMDEV:
   1325                return (void *)&GUI_MEMDEV_DEVICE_32;
   \   00000008   ........           LDR      R0,??DataTable17
   \   0000000C   1EFF2FE1           BX       LR
   1326            #endif
   1327            }
   1328            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
   1329          }
   1330          
   1331          /*********************************************************************
   1332          *
   1333          *       Static code: Functions available by _GetDevFunc()
   1334          *
   1335          **********************************************************************
   1336          */
   1337          /*********************************************************************
   1338          *
   1339          *       _SetVRAMAddr
   1340          */

   \                                 In section .text, align 4, keep-with-next
   1341          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1342            DRIVER_CONTEXT * pContext;
   1343            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1344          
   1345            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
   1346            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
   1347              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1348              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
   1349              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
   1350              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
   1351            }
   1352            #ifdef WIN32
   1353              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
   1354            #endif
   1355          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1356          
   1357          /*********************************************************************
   1358          *
   1359          *       _SetVSize
   1360          */

   \                                 In section .text, align 4, keep-with-next
   1361          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1362            DRIVER_CONTEXT * pContext;
   1363          
   1364            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1365            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   1366              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1367              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
   1368              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
   1369              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
   1370            }
   1371            #ifdef WIN32
   1372              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
   1373            #endif
   1374          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1375          
   1376          /*********************************************************************
   1377          *
   1378          *       _SetSize
   1379          */

   \                                 In section .text, align 4, keep-with-next
   1380          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1381            DRIVER_CONTEXT * pContext;
   1382            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
   1383          
   1384            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
   1385            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
   1386              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1387              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
   1388                pContext->vxSizePhys = xSize;
   1389              }
   1390              pContext->xSize = xSize;
   1391              pContext->ySize = ySize;
   1392              Data.xSize = xSize;
   1393              Data.ySize = ySize;
   1394              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
   1395            }
   1396          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   1397          
   1398          /*********************************************************************
   1399          *
   1400          *       _SetPos
   1401          */

   \                                 In section .text, align 4, keep-with-next
   1402          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1403            DRIVER_CONTEXT * pContext;
   1404            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
   1405          
   1406            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
   1407            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
   1408              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1409              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
   1410              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
   1411              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
   1412              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
   1413              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
   1414            }
   1415          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
   1416          
   1417          /*********************************************************************
   1418          *
   1419          *       _GetPos
   1420          */

   \                                 In section .text, align 4, keep-with-next
   1421          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1422            DRIVER_CONTEXT * pContext;
   1423          
   1424            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1425            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
   1426              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1427              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
   1428              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
   1429            }
   1430          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
   1431          
   1432          /*********************************************************************
   1433          *
   1434          *       _SetAlpha
   1435          */

   \                                 In section .text, align 4, keep-with-next
   1436          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1437            DRIVER_CONTEXT * pContext;
   1438            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   1439          
   1440            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
   1441            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
   1442              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1443              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
   1444              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
   1445              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
   1446            }
   1447          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   1448          
   1449          /*********************************************************************
   1450          *
   1451          *       _SetVis
   1452          */

   \                                 In section .text, align 4, keep-with-next
   1453          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   1454            DRIVER_CONTEXT * pContext;
   1455            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   1456          
   1457            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
   1458            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
   1459              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1460              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
   1461              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
   1462              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
   1463            }
   1464          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   1465          
   1466          /*********************************************************************
   1467          *
   1468          *       _Init
   1469          */

   \                                 In section .text, align 4, keep-with-next
   1470          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1471            int r;
   1472          
   1473            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
   1474            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
   1475            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
   1476          }
   1477          
   1478          /*********************************************************************
   1479          *
   1480          *       _On
   1481          */

   \                                 In section .text, align 4, keep-with-next
   1482          static void _On (GUI_DEVICE * pDevice) {
   1483            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
   1484          }
   1485          
   1486          /*********************************************************************
   1487          *
   1488          *       _Off
   1489          */

   \                                 In section .text, align 4, keep-with-next
   1490          static void _Off (GUI_DEVICE * pDevice) {
   1491            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
   1492          }
   1493          
   1494          /*********************************************************************
   1495          *
   1496          *       _SetLUTEntry
   1497          */

   \                                 In section .text, align 4, keep-with-next
   1498          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1499            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1500          
   1501            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
   1502            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
   1503            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1504          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1505          
   1506          /*********************************************************************
   1507          *
   1508          *       _SetAlphaMode
   1509          */

   \                                 In section .text, align 4, keep-with-next
   1510          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1511            LCD_X_SETALPHAMODE_INFO Data = {0};
   1512          
   1513            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1514            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1515          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1516          
   1517          /*********************************************************************
   1518          *
   1519          *       _SetChromaMode
   1520          */

   \                                 In section .text, align 4, keep-with-next
   1521          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1522            LCD_X_SETCHROMAMODE_INFO Data = {0};
   1523          
   1524            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1525            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1526          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1527          
   1528          /*********************************************************************
   1529          *
   1530          *       _SetChroma
   1531          */

   \                                 In section .text, align 4, keep-with-next
   1532          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1533            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1534          
   1535            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1536            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   1537            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1538          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1539          
   1540          /*********************************************************************
   1541          *
   1542          *       _SetFunc
   1543          */

   \                                 In section .text, align 4, keep-with-next
   1544          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1545            DRIVER_CONTEXT * pContext;
   1546          
   1547            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1548            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
   1549              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1550              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
   1551              case LCD_DEVFUNC_FILLRECT:
   1552                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
   1553                break;
   1554              }
   1555            }
   1556          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1557          
   1558          /*********************************************************************
   1559          *
   1560          *       _GetDevFunc
   1561          */

   \                                 In section .text, align 4, keep-with-next
   1562          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
   1563            GUI_USE_PARA(ppDevice);
   1564            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   021041E2           SUB      R1,R1,#+2
   \   00000004   140051E3           CMP      R1,#+20
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3200008A           BHI      ??_GetDevFunc_1
   \   00000010   1D0000EA           B        ??_GetDevFunc_2
   \   00000014   180000EA           B        ??_GetDevFunc_3
   \   00000018   190000EA           B        ??_GetDevFunc_4
   \   0000001C   2E0000EA           B        ??_GetDevFunc_1
   \   00000020   1B0000EA           B        ??_GetDevFunc_5
   \   00000024   2C0000EA           B        ??_GetDevFunc_1
   \   00000028   2B0000EA           B        ??_GetDevFunc_1
   \   0000002C   0C0000EA           B        ??_GetDevFunc_6
   \   00000030   0D0000EA           B        ??_GetDevFunc_7
   \   00000034   0E0000EA           B        ??_GetDevFunc_8
   \   00000038   170000EA           B        ??_GetDevFunc_9
   \   0000003C   260000EA           B        ??_GetDevFunc_1
   \   00000040   170000EA           B        ??_GetDevFunc_10
   \   00000044   180000EA           B        ??_GetDevFunc_11
   \   00000048   190000EA           B        ??_GetDevFunc_12
   \   0000004C   220000EA           B        ??_GetDevFunc_1
   \   00000050   210000EA           B        ??_GetDevFunc_1
   \   00000054   180000EA           B        ??_GetDevFunc_13
   \   00000058   190000EA           B        ??_GetDevFunc_14
   \   0000005C   1A0000EA           B        ??_GetDevFunc_15
   \   00000060   1B0000EA           B        ??_GetDevFunc_16
   1565            case LCD_DEVFUNC_SET_VRAM_ADDR:
   1566              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_6:
   \   00000064   ........           LDR      R0,??DataTable17_1
   \   00000068   1EFF2FE1           BX       LR
   1567            case LCD_DEVFUNC_SET_VSIZE:
   1568              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_7:
   \   0000006C   ........           LDR      R0,??DataTable17_2
   \   00000070   1EFF2FE1           BX       LR
   1569            case LCD_DEVFUNC_SET_SIZE:
   1570              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_8:
   \   00000074   ........           LDR      R0,??DataTable17_3
   \   00000078   1EFF2FE1           BX       LR
   1571            case LCD_DEVFUNC_SETPOS:
   1572              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_3:
   \   0000007C   ........           LDR      R0,??DataTable17_4
   \   00000080   1EFF2FE1           BX       LR
   1573            case LCD_DEVFUNC_GETPOS:
   1574              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_4:
   \   00000084   ........           LDR      R0,??DataTable17_5
   \   00000088   1EFF2FE1           BX       LR
   1575            case LCD_DEVFUNC_SETALPHA:
   1576              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_2:
   \   0000008C   ........           LDR      R0,??DataTable17_6
   \   00000090   1EFF2FE1           BX       LR
   1577            case LCD_DEVFUNC_SETVIS:
   1578              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_5:
   \   00000094   ........           LDR      R0,??DataTable17_7
   \   00000098   1EFF2FE1           BX       LR
   1579            case LCD_DEVFUNC_INIT:
   1580              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_9:
   \   0000009C   ........           LDR      R0,??DataTable17_8
   \   000000A0   1EFF2FE1           BX       LR
   1581            case LCD_DEVFUNC_ON:
   1582              return (void (*)(void))_On;
   \                     ??_GetDevFunc_10:
   \   000000A4   ........           LDR      R0,??DataTable17_9
   \   000000A8   1EFF2FE1           BX       LR
   1583            case LCD_DEVFUNC_OFF:
   1584              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_11:
   \   000000AC   ........           LDR      R0,??DataTable17_10
   \   000000B0   1EFF2FE1           BX       LR
   1585            case LCD_DEVFUNC_SETLUTENTRY:
   1586              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_12:
   \   000000B4   ........           LDR      R0,??DataTable17_11
   \   000000B8   1EFF2FE1           BX       LR
   1587          
   1588            case LCD_DEVFUNC_ALPHAMODE:
   1589              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_13:
   \   000000BC   ........           LDR      R0,??DataTable17_12
   \   000000C0   1EFF2FE1           BX       LR
   1590            case LCD_DEVFUNC_CHROMAMODE:
   1591              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_14:
   \   000000C4   ........           LDR      R0,??DataTable17_13
   \   000000C8   1EFF2FE1           BX       LR
   1592            case LCD_DEVFUNC_CHROMA:
   1593              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_15:
   \   000000CC   ........           LDR      R0,??DataTable17_14
   \   000000D0   1EFF2FE1           BX       LR
   1594            
   1595            case LCD_DEVFUNC_SETFUNC:
   1596              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_16:
   \   000000D4   ........           LDR      R0,??DataTable17_15
   \   000000D8   1EFF2FE1           BX       LR
   1597            }
   1598            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   1EFF2FE1           BX       LR               ;; return
   1599          }
   1600          
   1601          /*********************************************************************
   1602          *
   1603          *       Public data
   1604          *
   1605          **********************************************************************
   1606          */
   1607          /*********************************************************************
   1608          *
   1609          *       GUI_DEVICE_API structure
   1610          */

   \                                 In section .rodata, align 4, keep-with-next
   1611          const GUI_DEVICE_API GUIDRV_Lin_OXY_24_API = {
   \                     GUIDRV_Lin_OXY_24_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1612            //
   1613            // Data
   1614            //
   1615            DEVICE_CLASS_DRIVER,
   1616            //
   1617            // Drawing functions
   1618            //
   1619            _DrawBitmap,
   1620            _DrawHLine,
   1621            _DrawVLine,
   1622            _FillRect,
   1623            _GetPixelIndex,
   1624            _SetPixelIndex,
   1625            _XorPixel,
   1626            //
   1627            // Set origin
   1628            //
   1629            _SetOrg,
   1630            //
   1631            // Request information
   1632            //
   1633            _GetDevFunc,
   1634            _GetDevProp,
   1635            _GetDevData,
   1636            _GetRect,
   1637          };
   1638          
   1639          #else
   1640          
   1641          void GUIDRV_Lin_OXY_24_C(void);   // Avoid empty object files
   1642          void GUIDRV_Lin_OXY_24_C(void) {}
   1643          
   1644          #endif
   1645          
   1646          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _DrawBitLine1BPP      48
     _DrawBitLine2BPP      40
     _DrawBitLine32BPP     16
     _DrawBitLine4BPP      40
     _DrawBitLine8BPP      32
     _DrawBitmap           56
     _DrawHLine            24
     _DrawVLine            24
     _FillRect             56
     _GetDevData            0
     _GetDevFunc            0
     _GetDevProp            0
     _GetPixelIndex         4
     _GetPos               16
     _GetRect               0
     _Init                 16
     _Off                   8
     _On                    8
     _SetAlpha             16
     _SetAlphaMode          8
     _SetChroma            24
     _SetChromaMode         8
     _SetFunc              16
     _SetLUTEntry          24
     _SetOrg               24
     _SetPixelIndex         8
     _SetPos               24
     _SetSize              24
     _SetVRAMAddr          16
     _SetVSize             16
     _SetVis               16
     _XorPixel             24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex           220
     _GetPixelIndex           160
     _XorPixel                208
     _DrawHLine               552
     _DrawVLine               132
     _FillRect                616
     _DrawBitLine1BPP        2284
     _DrawBitLine2BPP         412
     _DrawBitLine4BPP         412
     _DrawBitLine8BPP         604
     _DrawBitLine32BPP        496
     _DrawBitmap             1016
     _SetOrg                  100
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              228
     GUIDRV_Lin_OXY_24_API     52
     ??DataTable12              4
     ??DataTable13              4
     ??DataTable15              4
     ??DataTable16              4
     ??DataTable17              4
     ??DataTable17_1            4
     ??DataTable17_2            4
     ??DataTable17_3            4
     ??DataTable17_4            4
     ??DataTable17_5            4
     ??DataTable17_6            4
     ??DataTable17_7            4
     ??DataTable17_8            4
     ??DataTable17_9            4
     ??DataTable17_10           4
     ??DataTable17_11           4
     ??DataTable17_12           4
     ??DataTable17_13           4
     ??DataTable17_14           4
     ??DataTable17_15           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 8 936 bytes in section .text
 
 8 936 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
