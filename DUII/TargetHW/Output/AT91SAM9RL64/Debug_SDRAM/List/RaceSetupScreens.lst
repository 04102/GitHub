###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:48 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\RaceSetupScreens.c                          #
#    Command line =  C:\DUII\DUII\RaceSetupScreens.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Ra #
#                    ceSetupScreens.lst                                       #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Rac #
#                    eSetupScreens.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\RaceSetupScreens.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <ctype.h>
     25          #include <string.h>
     26          #include "DUII.h"
     27          #include "GUI.h"
     28          #include "commondefs.h"
     29          #include "DIALOG.h"
     30          #include "ConfigScreens.h"
     31          #include "GeneralConfig.h"
     32          #include "GaugeScreen.h"
     33          #include "FlashReadWrite.h"
     34          #include "GMeterScreen.h"
     35          #include "RunningGauges.h"
     36          #include "RaceSetupScreens.h"
     37          #include "DataHandler.h"
     38          #include "StandardList.h"
     39          #include "VehicleSettingsScreens.h"
     40          #include "TrackSettingsScreens.h"
     41          #include <string.h>
     42          #ifdef _WINDOWS
     43          #include "..\Application\dirent.h"
     44          #else
     45          #include "FS.h"
     46          #endif
     47          #include "KeyboardAccess.h"
     48          #include "TrackDetect.h"
     49          #include "Utilities.h"
     50          
     51          // tmtypes required for some session data definitions.  HOWEVER, including this will screw up
     52          // structure definitions in TrackDetect.h so INCLUDE THIS LAST!!
     53          #include "tmtypes.h"
     54          #include "SFScreens.h"
     55          
     56          
     57          /*********************************************************************
     58          *
     59          *       Constants and Defines
     60          *
     61          **********************************************************************
     62          */
     63          #define	NEW_DRIVER_BUTTON			GUI_ID_USER + 1
     64          #define	NEW_VEHICLE_BUTTON			GUI_ID_USER + 2
     65          #define	EDIT_VEHICLE_NAME_BUTTON	GUI_ID_USER + 3
     66          #define	VEHICLE_SETTINGS_BUTTON		GUI_ID_USER + 4
     67          #define	NEW_TRACK_BUTTON			GUI_ID_USER + 5
     68          #define	EDIT_TRACK_NAME_BUTTON		GUI_ID_USER + 6
     69          #define	TRACK_SETTINGS_BUTTON		GUI_ID_USER + 7
     70          #define	EDIT_DRIVER_NAME_BUTTON		GUI_ID_USER + 8
     71          #define	LAPS_BUTTON					GUI_ID_USER + 9
     72          #define	QUALIFYING_BUTTON			GUI_ID_USER + 10
     73          #define	CONFIRM_TRACK_BUTTON		GUI_ID_USER + 11
     74          #define	SELECT_RADIUS_BUTTON		GUI_ID_USER + 12
     75          #define	DELETE_DRIVER_BUTTON		GUI_ID_USER + 13
     76          #define	DELETE_VEHICLE_BUTTON		GUI_ID_USER + 14
     77          #define	DELETE_TRACK_BUTTON			GUI_ID_USER + 15
     78          #define	CANT_DELETE_TRACK			GUI_ID_USER + 16
     79          #define	TRACK_TYPE_BUTTON			GUI_ID_USER + 17
     80          #define	AUTO_CREATE_TRACK_BUTTON	GUI_ID_USER + 18
     81          #define	FILE_ALREADY_EXISTS			GUI_ID_USER + 19
     82          #define	TRACK_ALREADY_EXISTS		GUI_ID_USER + 20
     83          
     84          #define DRIVERLIST					GUI_ID_LISTVIEW1
     85          #define VEHICLELIST					GUI_ID_LISTVIEW2
     86          #define	TRACKLIST					GUI_ID_LISTVIEW3
     87          
     88          enum MODES {
     89          	EDIT,
     90          	NEW
     91          };
     92          
     93          enum TYPES {
     94          	DRIVER,
     95          	VEHICLE,
     96          	TRACK
     97          };
     98          
     99          
    100          #define MAX_NUM_FILES_IN_DIRECTORY	200
    101          #define	MAX_SESSION_FILES			MAX_NUM_FILES_IN_DIRECTORY
    102          #define	MAX_NUM_LAPS_IN_FILE		200
    103          #define	MAX_NUM_DRIVERS				50
    104          #define	MAX_NUM_VEHICLES			150
    105          
    106          #define	POSITION_ONE	51
    107          #define	POSITION_TWO	93
    108          #define	POSITION_THREE	135
    109          #define	POSITION_FOUR	177
    110          #define	POSITION_FIVE	219
    111          #define LISTWIDTH		220
    112          #define LISTHEIGHT		210
    113          #define	LISTXOFFSET		30
    114          #define	LISTYOFFSET		48
    115          

   \                                 In section .rodata, align 1, keep-with-next
    116          const char NullEntry[] = "";
   \                     NullEntry:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
    117          const char NotAvailable[] = "Older File Format.\n\nData Not Available.";
   \                     NotAvailable:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   4F6C64657220       DC8 79, 108, 100, 101, 114, 32, 70, 105, 108, 101
   \              46696C65    
   \   0000000A   20466F726D61       DC8 32, 70, 111, 114, 109, 97, 116, 46, 10, 10
   \              742E0A0A    
   \   00000014   44617461204E       DC8 68, 97, 116, 97, 32, 78, 111, 116, 32, 65
   \              6F742041    
   \   0000001E   7661696C6162       DC8 118, 97, 105, 108, 97, 98, 108, 101, 46, 0
   \              6C652E00    
    118          
    119          /* The following chart provides an overview of the tables, lists, pointers and indexs associated with track selection
    120          table name		description						format			index			sorted by	pointer			max size				actual size
    121          trackTable		complete list of ALL tracks		TRACK_LIST_TYPE	trackTableIndex	name						NUM_TOTAL_TRACKS		numberOfTracks
    122          trackShortList	index to track table of list	integer							distance					NUM_TOTAL_TRACKS		numberOfShortListTracks
    123          				of ALL track types that are
    124          				within range
    125          							
    126          				list of track names of all 		char **										pTracksFull		numberOfTracks			numberOfTracks
    127          				types and all distances
    128          				list of track names of SELECTED char **										pTracksShort	numberOfShortListTracks	numberOfShortListTracksUser
    129          				track type and within range
    130          							
    131          				copy of either pTracksFull or												pTracks									numTracks (number of tracks currently being presented to the user)
    132          				pTracksShort
    133          */
    134          
    135          /*********************************************************************
    136          *
    137          *       Public Variables
    138          *
    139          **********************************************************************
    140          */
    141          char **pTracksShort = 0;			// Pointer to list of names of tracks of the correct type AND within range
    142          int numberOfShortListTracksUser;	// Number of tracks of the correct type AND within range (numberOfShortListTracksUser <= numberOfShortListTracks)
    143          //char **pTracksFull = 0;
    144          char *pDrivers[MAX_NUM_DRIVERS + 1];
    145          char DriverList[MAX_NUM_DRIVERS + 1][NORMAL_FILENAME_SIZE];
    146          char *pVehicles[MAX_NUM_VEHICLES + 1];
    147          char VehicleList[MAX_NUM_VEHICLES + 1][NORMAL_FILENAME_SIZE];
    148          // KMC 4/1/12 - Changed from dynamic list to static lists for drivers, vehicles and sessions
    149          //char *pSessions[MAX_SESSION_FILES + 1];
    150          //char SessionList[MAX_SESSION_FILES + 1][NORMAL_FILENAME_SIZE];
    151          char **pLaps = 0;
    152          int numLaps;
    153          char sessionName[NORMAL_FILENAME_SIZE];
    154          char fullSessionName[NORMAL_FILENAME_SIZE];
    155          struct NAMESTRUCT NameStruct;

   \                                 In section .bss, align 4
    156          struct NAMESTRUCT SessionNameData[MAX_SESSION_FILES];
   \                     SessionNameData:
   \   00000000                      DS8 15000

   \                                 In section .data, align 4
    157          long BestLaps[MAX_SESSION_FILES];
    158          tqmheaderstructtype SessionData;	// All Session Data
    159          char vehicleSelectionChanged;
    160          char tempVehicleName[NAMELEN+1];
    161          
    162          
    163          /*********************************************************************
    164          *
    165          *       External data and code
    166          *
    167          **********************************************************************
    168          */
    169          // Note that the button bitmaps must be encoded for the appropriate color
    170          // conversion selected in LCDConf.c
    171          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
    172          extern GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
    173          extern GUI_CONST_STORAGE GUI_BITMAP bmDrive;
    174          extern GUI_CONST_STORAGE GUI_BITMAP bmDisplayText;
    175          extern GUI_CONST_STORAGE GUI_BITMAP bmDriverText;
    176          extern GUI_CONST_STORAGE GUI_BITMAP bmInputText;
    177          extern GUI_CONST_STORAGE GUI_BITMAP bmRaceReview;
    178          extern GUI_CONST_STORAGE GUI_BITMAP bmRaceSetupText;
    179          extern GUI_CONST_STORAGE GUI_BITMAP bmStorage;
    180          extern GUI_CONST_STORAGE GUI_BITMAP bmStorageText;
    181          extern GUI_CONST_STORAGE GUI_BITMAP bmSystemSetup;
    182          extern GUI_CONST_STORAGE GUI_BITMAP bmSystemSetupText;
    183          extern GUI_CONST_STORAGE GUI_BITMAP bmTime;
    184          extern GUI_CONST_STORAGE GUI_BITMAP bmTimeText;
    185          extern GUI_CONST_STORAGE GUI_BITMAP bmTrackText;
    186          extern GUI_CONST_STORAGE GUI_BITMAP bmChooseTrack;
    187          extern GUI_CONST_STORAGE GUI_BITMAP bmUnits;
    188          extern GUI_CONST_STORAGE GUI_BITMAP bmUnitsText;
    189          extern GUI_CONST_STORAGE GUI_BITMAP bmVehicleText;
    190          extern GUI_CONST_STORAGE GUI_BITMAP bmDisplay;
    191          extern GUI_CONST_STORAGE GUI_BITMAP bmTraqmateLogo;
    192          extern GUI_CONST_STORAGE GUI_BITMAP bmBackground;
    193          extern GUI_CONST_STORAGE GUI_BITMAP bmAutoxRally;
    194          extern GUI_CONST_STORAGE GUI_BITMAP bmRace;
    195          extern GUI_CONST_STORAGE GUI_BITMAP bmBlackButton;
    196          extern GUI_CONST_STORAGE GUI_BITMAP bmGrayButton;
    197          extern GUI_CONST_STORAGE GUI_BITMAP bmDoubleBlueButton;
    198          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenButton;
    199          extern GUI_CONST_STORAGE GUI_BITMAP bmRedButton;
    200          extern GUI_CONST_STORAGE GUI_BITMAP bmSingleSpinner;
    201          extern GUI_CONST_STORAGE GUI_BITMAP bmBackgroundWithPanel;
    202          extern GUI_CONST_STORAGE GUI_BITMAP bmLapsQualifyText;
    203          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenCheck;
    204          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
    205          extern GUI_CONST_STORAGE GUI_BITMAP bmYellowButton;
    206          extern GUI_CONST_STORAGE GUI_BITMAP bmOrangeButton;
    207          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenButton;
    208          extern GUI_CONST_STORAGE GUI_BITMAP bmRedButton;
    209          extern GUI_CONST_STORAGE GUI_BITMAP bmMediumBlueButton;
    210          extern GUI_CONST_STORAGE GUI_BITMAP bmTopBar;
    211          extern GUI_CONST_STORAGE GUI_BITMAP bmBottomBar;
    212          extern GUI_CONST_STORAGE GUI_BITMAP bmShortTopBar;
    213          extern GUI_CONST_STORAGE GUI_BITMAP bmShortBottomBar;
    214          extern GUI_CONST_STORAGE GUI_BITMAP bmListBoxSmall;
    215          extern GUI_CONST_STORAGE GUI_BITMAP bmBlackBlankButton;
    216          extern GUI_CONST_STORAGE GUI_BITMAP bmBlueButton;
    217          extern GUI_CONST_STORAGE GUI_BITMAP bmTopFakeButton;
    218          
    219          extern GUI_HWIN hDisplayClosestTracks;
    220          extern int modalWindowUp;
    221          #ifndef _WINDOWS
    222          extern char OkToUseSDCard(void);
    223          #endif
    224          
    225          /*********************************************************************
    226          *
    227          *       Local Prototypes
    228          *
    229          **********************************************************************
    230          */
    231          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen);
    232          void DisplayDriverSelection(WM_HWIN);
    233          void DisplayVehicleSelection(WM_HWIN);
    234          void DriverSelectionPaint(WM_HWIN);
    235          void VehicleSelectionPaint(WM_HWIN);
    236          void TrackSelectionPaint(WM_HWIN);
    237          void LapsSelectionPaint(WM_HWIN);
    238          void parseName(char *pDest, char *pSource, enum DATATYPES sel);
    239          int FindSelection(enum DATATYPES sel);
    240          void RSSKillKeyboard(void);
    241          void DisplayKeyboard(int Id);
    242          void TryAgainKeyboard(void);
    243          int CreateNewEntry(void);
    244          int RenameCurrentEntry(void);
    245          int CheckForDuplicateName(void);
    246          enum DATATYPES EditTypeToFileType(enum TYPES editType);
    247          void UpdateList(void);
    248          void SaveBestLap(int index, char *pName);
    249          void ReadAllSessionData(char *pName);
    250          void CreateDummyLapList(void);
    251          void DeleteBestLaps(void);
    252          void InvalidName(void);
    253          char SelectThisTrack(int selection);
    254          int FindFile(char *defaultTrack);
    255          char *GetRadiusText(char *pText);
    256          //char SessionIsRoadRace(char *pName);
    257          #ifdef _WINDOWS
    258          enum SESSION_TYPE parseSessionName(char *pName, struct NAMESTRUCT *NameStruct);
    259          #else
    260          enum SESSION_TYPE parseSessionName(FS_FIND_DATA *fd, struct NAMESTRUCT *NameStruct);
    261          #endif
    262          char *GetNextString(char *pDest, char *pSource);
    263          char *GetNextChar(enum SESSION_TYPE *pDest, char *pSource);
    264          char *GetNextNum(char *pDest, char *pSource);
    265          char ValidSessionType(char ch);
    266          char ValidRaceSession(enum SESSION_TYPE type, char *pName);
    267          char GetSessionCharacter(enum SESSION_TYPE type);
    268          void TooManySessionsPopup(WM_HWIN hParent, char primary);
    269          int RaceSetupPopup(int screen);
    270          void RSDeleteDriver(void);
    271          void RSDeleteVehicle(void);
    272          char RSDeleteTrack(void);
    273          void RSDeleteFile(enum DATATYPES type, char *pName);
    274          void SetTrackTypeButtonText(void);
    275          void UpdateTrackList(WM_HWIN hParent);
    276          void DisplayAlphaList(LISTVIEW_Handle *hList, unsigned int id, char **pList, unsigned int sel);
    277          void AutoCreateNewTrack(void);
    278          void CreateNewTrack(void);
    279          int GetTrackNumber(char *pName, int offset);
    280          int FindLastTrackOfCurrentType(void);
    281          void ValidateName(char *pName);
    282          void DeleteFileList(enum DATATYPES type);
    283          void FinishLoadingTrackData(void);
    284          void CreateSprites(const GUI_BITMAP *pTopBar, const GUI_BITMAP *pBottomBar);
    285          void DeleteSprites(void);
    286          WM_HWIN GetTrackSelectionWindowHandle(void);
    287          
    288          /*********************************************************************
    289          *
    290          *       Tables
    291          *
    292          **********************************************************************
    293          */
    294          struct SCREEN_LIST RaceSetupScreenList[NUM_RACE_SETUP_SCREENS+1] = {
   \                     RaceSetupScreenList:
   \   00000000   00000000....       DC32 0, DisplayDriverSelection, DriverSelectionPaint, 1
   \              ............
   \              01000000    
   \   00000010   ............       DC32 DisplayVehicleSelection, VehicleSelectionPaint, 2
   \              ....02000000
   \   0000001C   ............       DC32 DisplayTrackSelection, TrackSelectionPaint, 3
   \              ....03000000
   \   00000028   ............       DC32 DisplayLapsSelection, LapsSelectionPaint, -1, 0H, 0H
   \              ....FFFFFFFF
   \              000000000000
   \              0000        
   \                     pTracksShort:
   \   0000003C   00000000           DC32 0H
   \                     numberOfShortListTracksUser:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     pDrivers:
   \   00000044   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000054   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000104   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     pVehicles:
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   0000036C   00000000           DC8 0, 0, 0, 0
   \   00000370   00000000           DC8 0, 0, 0, 0
    295          	{ DRIVER_SELECTION, DisplayDriverSelection, DriverSelectionPaint },
    296          	{ VEHICLE_SELECTION, DisplayVehicleSelection, VehicleSelectionPaint },
    297          	{ TRACK_SELECTION, DisplayTrackSelection, TrackSelectionPaint },
    298          	{ LAPSQUALIFYING_SELECTION, DisplayLapsSelection, LapsSelectionPaint },
    299          	{ -1, NULL, NULL }
    300          };
    301          
    302          
    303          /*********************************************************************
    304          *
    305          *       Local Variables
    306          *
    307          **********************************************************************
    308          */
    309          static WM_HWIN hRaceSetupScreens;
    310          static int clickedOnThisScreen;
    311          LISTVIEW_Handle hDriverList;
   \                     hDriverList:
   \   00000374   00000000           DC8 0, 0, 0, 0
    312          LISTVIEW_Handle hVehicleList;
   \                     hVehicleList:
   \   00000378   00000000           DC8 0, 0, 0, 0
    313          LISTVIEW_Handle hTrackList = 0;
   \                     hTrackList:
   \   0000037C   00000000           DC32 0
    314          BUTTON_Handle hLapsCheck, hQualifyingCheck;
   \                     hLapsCheck:
   \   00000380   00000000           DC8 0, 0, 0, 0
   \                     hQualifyingCheck:
   \   00000384   00000000           DC8 0, 0, 0, 0
    315          BUTTON_Handle hTrackTypeBtn;
   \                     hTrackTypeBtn:
   \   00000388   00000000           DC8 0, 0, 0, 0
    316          int numDrivers, numVehicles, numTracks, button;
   \                     numDrivers:
   \   0000038C   00000000           DC8 0, 0, 0, 0
   \                     numVehicles:
   \   00000390   00000000           DC8 0, 0, 0, 0
   \                     numTracks:
   \   00000394   00000000           DC8 0, 0, 0, 0
   \                     button:
   \   00000398   00000000           DC8 0, 0, 0, 0
   \   0000039C   00000000           DC32 0H
    317          static void *pEntryKeyboard = 0;
    318          enum MODES mode;
    319          enum TYPES editType;
    320          char newName[NAMELEN+1];
    321          static int BestLapNumber[MAX_SESSION_FILES];
    322          int trackTableIndex;		// Global index to the track table of the currently selected track
   \                     trackTableIndex:
   \   000003A0   00000000           DC8 0, 0, 0, 0
    323          enum CHOOSE_TRACK_SCREEN_TYPE ctType;
    324          char selectedTrackName[NAMELEN+1];
    325          GUI_HWIN hRSDeleteButton;
   \                     hRSDeleteButton:
   \   000003A4   00000000           DC8 0, 0, 0, 0
    326          GUI_HSPRITE hTop, hBottom;
   \                     hTop:
   \   000003A8   00000000           DC8 0, 0, 0, 0
   \                     hBottom:
   \   000003AC   00000000           DC8 0, 0, 0, 0
    327          int hideLevel = 0;
   \                     hideLevel:
   \   000003B0   00000000           DC32 0
   \                     vehicleSelectionChanged:
   \   000003B4   00                 DC8 0
   \                     mode:
   \   000003B5   00                 DC8 0
   \                     editType:
   \   000003B6   00                 DC8 0
   \                     ctType:
   \   000003B7   00                 DC8 0
   \                     newName:
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     selectedTrackName:
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     DriverList:
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     VehicleList:
   \   000013D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000019F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000020F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000021F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000022F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000023F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000024F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000025F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000026F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000027F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000028F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000029F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00002FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000030F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000031F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000032F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000033F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000034F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000035F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000036F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000037F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000038F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000039F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00003FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000040F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000041F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00004290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000042F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     tempVehicleName:
   \   00004300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
    328          
    329          
    330          /*********************************************************************
    331          *
    332          *       Public code
    333          *
    334          **********************************************************************
    335          */
    336          
    337          
    338          
    339          

   \                                 In section .text, align 4, keep-with-next
    340          WM_HWIN GetRaceSetupScreensWindowHandle(void)
    341          {
    342          	return hRaceSetupScreens;
   \                     GetRaceSetupScreensWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable104
   \   00000004   6C0390E5           LDR      R0,[R0, #+876]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    343          }
    344          

   \                                 In section .text, align 4, keep-with-next
    345          void SetRaceSetupScreensWindowHandle(WM_HWIN hWin)
    346          {
    347          	hRaceSetupScreens = hWin;
   \                     SetRaceSetupScreensWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable104
   \   00000004   6C0381E5           STR      R0,[R1, #+876]
    348          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    349          

   \                                 In section .text, align 4, keep-with-next
    350          void RSSKillKeyboard(void)
    351          {
   \                     RSSKillKeyboard:
   \   00000000   10402DE9           PUSH     {R4,LR}
    352          	if (pEntryKeyboard)		// Should alwaye be there - but just in case!
   \   00000004   ........           LDR      R4,??DataTable104
   \   00000008   9C0394E5           LDR      R0,[R4, #+924]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??RSSKillKeyboard_0
    353          	{
    354          		DestroyKeyboard(pEntryKeyboard);
   \   00000014   ........           BL       DestroyKeyboard
    355          		pEntryKeyboard = 0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   9C0384E5           STR      R0,[R4, #+924]
    356          	}
    357          	ResumeScreenScrolling();
   \                     ??RSSKillKeyboard_0:
   \   00000020   ........           LDR      R0,??DataTable104_1
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
    358          	
    359          	if (ctType == CT_NORMAL_MODE)
   \   0000002C   B703D4E5           LDRB     R0,[R4, #+951]
   \   00000030   000050E3           CMP      R0,#+0
    360          		SetScreenType(RACE_SETUP_SCREENS_TYPE);
   \   00000034   0500A003           MOVEQ    R0,#+5
    361          	else SetScreenType(DISPLAY_CLOSEST_TRACKS_SCREEN_TYPE);
   \   00000038   1800A013           MOVNE    R0,#+24
   \   0000003C   ........           BL       SetScreenType
    362          	WM_InvalidateWindow(GetTrackSelectionWindowHandle());
   \   00000040   ........           BL       GetScreenType
   \   00000044   050050E3           CMP      R0,#+5
   \   00000048   6C039405           LDREQ    R0,[R4, #+876]
   \   0000004C   ........           LDRNE    R0,??DataTable104_3
   \   00000050   1040BDE8           POP      {R4,LR}
   \   00000054   00009015           LDRNE    R0,[R0, #+0]
   \   00000058   ........           B        WM_InvalidateWindow  ;; tailcall
    363          }
    364          

   \                                 In section .text, align 4, keep-with-next
    365          WM_HWIN GetTrackSelectionWindowHandle(void)
    366          {
   \                     GetTrackSelectionWindowHandle:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    367          	if (GetScreenType() == RACE_SETUP_SCREENS_TYPE)	// Note: This test is equivelant to if (ctType == CT_NORMAL_MODE) but testing ScreenType seems safer
   \   00000008   ........           BL       GetScreenType
   \   0000000C   050050E3           CMP      R0,#+5
    368          		return hRaceSetupScreens;
   \   00000010   ........           LDREQ    R0,??DataTable104
    369          	else return hDisplayClosestTracks;
   \   00000014   ........           LDRNE    R0,??DataTable104_3
   \   00000018   6C039005           LDREQ    R0,[R0, #+876]
   \   0000001C   00009015           LDRNE    R0,[R0, #+0]
   \   00000020   04D08DE2           ADD      SP,SP,#+4
   \   00000024   0080BDE8           POP      {PC}             ;; return
    370          }
    371          
    372          //
    373          // Using the current text display the former keyboard again to ask for another shot at the name
    374          //
    375          // Input:	none
    376          // Globals already set:
    377          //			newName	pointer to current text
    378          //			editType	VEHICLE/DRIVER/TRACK
    379          //			button		type of keyboard to display
    380          //

   \                                 In section .text, align 4, keep-with-next
    381          void TryAgainKeyboard(void)
    382          {
   \                     TryAgainKeyboard:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    383          	char *pTitle;
    384          	char *pName;
    385          
    386          	switch (button)
   \   00000004   ........           LDR      R4,??DataTable104
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   980394E5           LDR      R0,[R4, #+920]
   \   00000010   020040E2           SUB      R0,R0,#+2
   \   00000014   800E40E2           SUB      R0,R0,#+2048
   \   00000018   060050E3           CMP      R0,#+6
   \   0000001C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??TryAgainKeyboard_0:
   \   00000020   0600008A           BHI      ??TryAgainKeyboard_1
   \   00000024   080000EA           B        ??TryAgainKeyboard_2
   \   00000028   100000EA           B        ??TryAgainKeyboard_3
   \   0000002C   030000EA           B        ??TryAgainKeyboard_1
   \   00000030   080000EA           B        ??TryAgainKeyboard_4
   \   00000034   100000EA           B        ??TryAgainKeyboard_5
   \   00000038   000000EA           B        ??TryAgainKeyboard_1
   \   0000003C   080000EA           B        ??TryAgainKeyboard_6
    387          	{
    388          		default:
    389          		case NEW_DRIVER_BUTTON:
    390          			pTitle = "Enter New Driver Name";
   \                     ??TryAgainKeyboard_1:
   \   00000040   ............       ADRL     R5,`?<Constant "Enter New Driver Name">`
   \              ....        
    391          			break;
   \   00000048   0D0000EA           B        ??TryAgainKeyboard_7
    392          		case NEW_VEHICLE_BUTTON:
    393          			pTitle = "Enter New Vehicle Name";
   \                     ??TryAgainKeyboard_2:
   \   0000004C   ............       ADRL     R5,`?<Constant "Enter New Vehicle Name">`
   \              ....        
    394          			break;
   \   00000054   0A0000EA           B        ??TryAgainKeyboard_7
    395          		case NEW_TRACK_BUTTON:
    396          			pTitle = "Enter New Track Name";
   \                     ??TryAgainKeyboard_4:
   \   00000058   ............       ADRL     R5,`?<Constant "Enter New Track Name">`
   \              ....        
    397          			break;
   \   00000060   070000EA           B        ??TryAgainKeyboard_7
    398          		case EDIT_DRIVER_NAME_BUTTON:
    399          			pTitle = "Edit Driver Name";
   \                     ??TryAgainKeyboard_6:
   \   00000064   ............       ADRL     R5,`?<Constant "Edit Driver Name">`
   \              ....        
    400          			break;
   \   0000006C   040000EA           B        ??TryAgainKeyboard_7
    401          		case EDIT_VEHICLE_NAME_BUTTON:
    402          			pTitle = "Edit Vehicle Name";
   \                     ??TryAgainKeyboard_3:
   \   00000070   ............       ADRL     R5,`?<Constant "Edit Vehicle Name">`
   \              ....        
    403          			break;
   \   00000078   010000EA           B        ??TryAgainKeyboard_7
    404          		case EDIT_TRACK_NAME_BUTTON:
    405          			pTitle = "Edit Track Name";
   \                     ??TryAgainKeyboard_5:
   \   0000007C   ............       ADRL     R5,`?<Constant "Edit Track Name">`
   \              ....        
    406          			break;
    407          	}
    408          	pName = newName;
    409          
    410          	if (pEntryKeyboard)
   \                     ??TryAgainKeyboard_7:
   \   00000084   9C0394E5           LDR      R0,[R4, #+924]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0000000A           BEQ      ??TryAgainKeyboard_8
    411          		DestroyKeyboard(pEntryKeyboard);
   \   00000090   ........           BL       DestroyKeyboard
    412          	pEntryKeyboard = CreateKeyboard(pTitle, pName, ALPHA, false, NAMELEN, 0, GetTrackSelectionWindowHandle(), false);
   \                     ??TryAgainKeyboard_8:
   \   00000094   ........           BL       GetScreenType
   \   00000098   050050E3           CMP      R0,#+5
   \   0000009C   ........           LDRNE    R0,??DataTable104_3
   \   000000A0   6C039405           LDREQ    R0,[R4, #+876]
   \   000000A4   00009015           LDRNE    R0,[R0, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   08008DE5           STR      R0,[SP, #+8]
   \   000000B0   1000A0E3           MOV      R0,#+16
   \   000000B4   0C108DE5           STR      R1,[SP, #+12]
   \   000000B8   04108DE5           STR      R1,[SP, #+4]
   \   000000BC   00008DE5           STR      R0,[SP, #+0]
   \   000000C0   0030A0E3           MOV      R3,#+0
   \   000000C4   0120A0E3           MOV      R2,#+1
   \   000000C8   EE1F84E2           ADD      R1,R4,#+952
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           BL       CreateKeyboard
   \   000000D4   9C0384E5           STR      R0,[R4, #+924]
    413          	PauseScreenScrolling();
   \   000000D8   ........           LDR      R0,??DataTable104_1
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   001080E5           STR      R1,[R0, #+0]
    414          	SetScreenType(RACE_SETUP_STANDALONE);
   \   000000E4   14D08DE2           ADD      SP,SP,#+20
   \   000000E8   3040BDE8           POP      {R4,R5,LR}
   \   000000EC   1400A0E3           MOV      R0,#+20
   \   000000F0   ........           B        SetScreenType    ;; tailcall
    415          }
    416          

   \                                 In section .text, align 4, keep-with-next
    417          void DisplayKeyboard(int Id)
    418          {
   \                     DisplayKeyboard:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    419          	char *pTitle;
    420          	char *pName;
    421          
    422          	switch (Id)
   \   00000004   020040E2           SUB      R0,R0,#+2
   \   00000008   800E40E2           SUB      R0,R0,#+2048
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   060050E3           CMP      R0,#+6
   \   00000014   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??DisplayKeyboard_0:
   \   00000018   0600008A           BHI      ??DisplayKeyboard_1
   \   0000001C   0B0000EA           B        ??DisplayKeyboard_2
   \   00000020   1E0000EA           B        ??DisplayKeyboard_3
   \   00000024   030000EA           B        ??DisplayKeyboard_1
   \   00000028   0F0000EA           B        ??DisplayKeyboard_4
   \   0000002C   210000EA           B        ??DisplayKeyboard_5
   \   00000030   000000EA           B        ??DisplayKeyboard_1
   \   00000034   120000EA           B        ??DisplayKeyboard_6
    423          	{
    424          		default:
    425          		case NEW_DRIVER_BUTTON:
    426          			pTitle = "Enter New Driver Name";
    427          			newName[0] = 0;				// Be sure newName string in blank
   \                     ??DisplayKeyboard_1:
   \   00000038   ........           LDR      R1,??DataTable104
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ............       ADRL     R4,`?<Constant "Enter New Driver Name">`
   \              ....        
   \   00000048   B803C1E5           STRB     R0,[R1, #+952]
    428          			editType = DRIVER;
    429          			break;
   \   0000004C   1F0000EA           B        ??DisplayKeyboard_7
    430          		case NEW_VEHICLE_BUTTON:
    431          			pTitle = "Enter New Vehicle Name";
    432          			newName[0] = 0;				// Be sure newName string in blank
   \                     ??DisplayKeyboard_2:
   \   00000050   ........           LDR      R0,??DataTable104
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ............       ADRL     R4,`?<Constant "Enter New Vehicle Name">`
   \              ....        
   \   00000060   B813C0E5           STRB     R1,[R0, #+952]
    433          			editType = VEHICLE;
   \                     ??DisplayKeyboard_8:
   \   00000064   0100A0E3           MOV      R0,#+1
    434          			break;
   \   00000068   180000EA           B        ??DisplayKeyboard_7
    435          		case NEW_TRACK_BUTTON:
    436          			pTitle = "Enter New Track Name";
    437          			newName[0] = 0;				// Be sure newName string in blank
   \                     ??DisplayKeyboard_4:
   \   0000006C   ........           LDR      R0,??DataTable104
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   ............       ADRL     R4,`?<Constant "Enter New Track Name">`
   \              ....        
   \   0000007C   B813C0E5           STRB     R1,[R0, #+952]
    438          			editType = TRACK;
   \   00000080   110000EA           B        ??DisplayKeyboard_9
    439          			break;
    440          		case EDIT_DRIVER_NAME_BUTTON:
    441          			pTitle = "Edit Driver Name";
   \                     ??DisplayKeyboard_6:
   \   00000084   ............       ADRL     R4,`?<Constant "Edit Driver Name">`
   \              ....        
    442          			strcpy(newName, sysData.driver);
   \   0000008C   ........           LDR      R1,??DataTable104_4
   \   00000090   ........           LDR      R0,??DataTable104_5
   \   00000094   ........           BL       strcpy
    443          			editType = DRIVER;
   \   00000098   0000A0E3           MOV      R0,#+0
    444          			break;
   \   0000009C   0B0000EA           B        ??DisplayKeyboard_7
    445          		case EDIT_VEHICLE_NAME_BUTTON:
    446          			pTitle = "Edit Vehicle Name";
   \                     ??DisplayKeyboard_3:
   \   000000A0   ............       ADRL     R4,`?<Constant "Edit Vehicle Name">`
   \              ....        
    447          			strcpy(newName, sysData.vehicle);
   \   000000A8   ........           LDR      R1,??DataTable104_6
   \   000000AC   ........           LDR      R0,??DataTable104_5
   \   000000B0   ........           BL       strcpy
    448          			editType = VEHICLE;
   \   000000B4   EAFFFFEA           B        ??DisplayKeyboard_8
    449          			break;
    450          		case EDIT_TRACK_NAME_BUTTON:
    451          			pTitle = "Edit Track Name";
   \                     ??DisplayKeyboard_5:
   \   000000B8   ............       ADRL     R4,`?<Constant "Edit Track Name">`
   \              ....        
    452          			strcpy(newName, sysData.track);
   \   000000C0   ........           LDR      R1,??DataTable104_7
   \   000000C4   ........           LDR      R0,??DataTable104_5
   \   000000C8   ........           BL       strcpy
    453          			editType = TRACK;
   \                     ??DisplayKeyboard_9:
   \   000000CC   0200A0E3           MOV      R0,#+2
    454          			break;
   \                     ??DisplayKeyboard_7:
   \   000000D0   ........           LDR      R5,??DataTable104
   \   000000D4   B603C5E5           STRB     R0,[R5, #+950]
    455          	}
    456          	pName = newName;
    457          
    458          	if (pEntryKeyboard)
   \   000000D8   9C0395E5           LDR      R0,[R5, #+924]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0000000A           BEQ      ??DisplayKeyboard_10
    459          		DestroyKeyboard(pEntryKeyboard);
   \   000000E4   ........           BL       DestroyKeyboard
    460          	pEntryKeyboard = CreateKeyboard(pTitle, pName, ALPHA, false, NAMELEN, 0, GetTrackSelectionWindowHandle(), false);
   \                     ??DisplayKeyboard_10:
   \   000000E8   ........           BL       GetScreenType
   \   000000EC   050050E3           CMP      R0,#+5
   \   000000F0   ........           LDRNE    R0,??DataTable104_3
   \   000000F4   6C039505           LDREQ    R0,[R5, #+876]
   \   000000F8   00009015           LDRNE    R0,[R0, #+0]
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   08008DE5           STR      R0,[SP, #+8]
   \   00000104   1000A0E3           MOV      R0,#+16
   \   00000108   0C108DE5           STR      R1,[SP, #+12]
   \   0000010C   04108DE5           STR      R1,[SP, #+4]
   \   00000110   00008DE5           STR      R0,[SP, #+0]
   \   00000114   0030A0E3           MOV      R3,#+0
   \   00000118   0120A0E3           MOV      R2,#+1
   \   0000011C   EE1F85E2           ADD      R1,R5,#+952
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       CreateKeyboard
   \   00000128   9C0385E5           STR      R0,[R5, #+924]
    461          	PauseScreenScrolling();
   \   0000012C   ........           LDR      R0,??DataTable104_1
   \   00000130   0010A0E3           MOV      R1,#+0
   \   00000134   001080E5           STR      R1,[R0, #+0]
    462          	SetScreenType(RACE_SETUP_STANDALONE);
   \   00000138   14D08DE2           ADD      SP,SP,#+20
   \   0000013C   3040BDE8           POP      {R4,R5,LR}
   \   00000140   1400A0E3           MOV      R0,#+20
   \   00000144   ........           B        SetScreenType    ;; tailcall
    463          }
    464          
    465          //
    466          // Create new file of editType type
    467          //
    468          // Returns: false = file not created
    469          //			true = file created
    470          // Return:	0 if not a duplicate file name
    471          //			1 if a dulpicate file name and OK to proceed
    472          //			-1 if a duplicate file name and NOT OK to proceed
    473          //			-2 duplicate TRACK file name and want to change name and try again
    474          //

   \                                 In section .text, align 4, keep-with-next
    475          int CreateNewEntry(void)
    476          {
   \                     CreateNewEntry:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
    477          	int retval;
    478          
    479          	if ((retval = CheckForDuplicateName()) != 0)
   \   00000008   ........           BL       CheckForDuplicateName
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1300000A           BEQ      ??CreateNewEntry_0
    480          	{
    481          		if (retval == 1)
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   2300001A           BNE      ??CreateNewEntry_1
    482          		{
    483          			// Duplicate file name and the user has oked us to delete it
    484          			char fileName[256];
    485          
    486          			ConvertToFilename(fileName, newName, EditTypeToFileType(editType));
   \   0000001C   ........           LDR      R4,??DataTable104
   \   00000020   B603D4E5           LDRB     R0,[R4, #+950]
   \   00000024   020050E3           CMP      R0,#+2
   \   00000028   0700000A           BEQ      ??CreateNewEntry_2
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   0300000A           BEQ      ??CreateNewEntry_3
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0020A013           MOVNE    R2,#+0
   \   0000003C   0320A003           MOVEQ    R2,#+3
   \   00000040   020000EA           B        ??CreateNewEntry_4
   \                     ??CreateNewEntry_3:
   \   00000044   0220A0E3           MOV      R2,#+2
   \   00000048   000000EA           B        ??CreateNewEntry_4
   \                     ??CreateNewEntry_2:
   \   0000004C   0120A0E3           MOV      R2,#+1
   \                     ??CreateNewEntry_4:
   \   00000050   EE1F84E2           ADD      R1,R4,#+952
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           BL       ConvertToFilename
    487          #ifdef _WINDOWS
    488          			remove(fileName);
    489          #else
    490          			FS_Remove(fileName);
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           BL       FS_Remove
    491          #endif
    492          			// now fall through to create new item
    493          		}
    494          		else return retval;	// Duplicate file name and NOT okay to proceed - exit
    495          	}
    496          
    497          	if (editType == DRIVER)
   \                     ??CreateNewEntry_0:
   \   00000064   ........           LDR      R4,??DataTable104
   \   00000068   B603D4E5           LDRB     R0,[R4, #+950]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0F00001A           BNE      ??CreateNewEntry_5
    498          	{
    499          		SetDefaultDriverData();			// Optionally reset all data to defaults or leave as a copy of the current structure
   \   00000074   ........           BL       SetDefaultDriverData
    500          		UpdateList();
   \   00000078   ........           BL       UpdateList
    501          
    502          		if (numDrivers > 1)
   \   0000007C   8C0394E5           LDR      R0,[R4, #+908]
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   070000BA           BLT      ??CreateNewEntry_6
    503          		{
    504          			BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \                     ??CreateNewEntry_7:
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   A40394E5           LDR      R0,[R4, #+932]
   \   00000094   ........           BL       BUTTON_SetTextColor
    505          			BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_BLACK);
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   A40394E5           LDR      R0,[R4, #+932]
   \   000000A4   ........           BL       BUTTON_SetTextColor
    506          		}
    507          	}
    508          	else if (editType == VEHICLE)
    509          	{
    510          		SetDefaultVehicleData(false);		// Optionally reset all data to defaults or leave as a copy of the current structure
    511          		UpdateList();
    512          
    513          		if (numVehicles > 1)
    514          		{
    515          			BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
    516          			BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_BLACK);
    517          		}
    518          	}
    519          	else if (editType == TRACK)
    520          	{
    521          		CreateNewTrack();
    522          		UpdateList();
    523          	}
    524          	else return false;
    525          
    526          	return true;
   \                     ??CreateNewEntry_6:
   \   000000A8   0100A0E3           MOV      R0,#+1
   \                     ??CreateNewEntry_1:
   \   000000AC   40DF8DE2           ADD      SP,SP,#+256      ;; stack cleaning
   \   000000B0   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??CreateNewEntry_5:
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   0600001A           BNE      ??CreateNewEntry_8
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   ........           BL       SetDefaultVehicleData
   \   000000C4   ........           BL       UpdateList
   \   000000C8   900394E5           LDR      R0,[R4, #+912]
   \   000000CC   020050E3           CMP      R0,#+2
   \   000000D0   F4FFFFBA           BLT      ??CreateNewEntry_6
   \   000000D4   EBFFFFEA           B        ??CreateNewEntry_7
   \                     ??CreateNewEntry_8:
   \   000000D8   020050E3           CMP      R0,#+2
   \   000000DC   0200001A           BNE      ??CreateNewEntry_9
   \   000000E0   ........           BL       CreateNewTrack
   \   000000E4   ........           BL       UpdateList
   \   000000E8   EEFFFFEA           B        ??CreateNewEntry_6
   \                     ??CreateNewEntry_9:
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   EDFFFFEA           B        ??CreateNewEntry_1
    527          }
    528          
    529          //
    530          // See if a file of this name and this type already exists - if so, ask if they want to proceed.
    531          // Note that this will be a case insensitive check
    532          //
    533          // Return:	0 if not a duplicate file name
    534          //			1 if a dulpicate file name and OK to proceed
    535          //			-1 if a duplicate file name and NOT OK to proceed
    536          //			-2 duplicate TRACK file name and want to change name and try again
    537          //

   \                                 In section .text, align 4, keep-with-next
    538          int CheckForDuplicateName(void)
    539          {
   \                     CheckForDuplicateName:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    540          	char fileName[256];
    541          #ifdef _WINDOWS
    542          	FILE *pFile;
    543          #else
    544          	FS_FILE *pFile;
    545          #endif
    546          	
    547          	ConvertToFilename(fileName, newName, EditTypeToFileType(editType));		// Add full path and file extension
   \   00000004   ........           LDR      R4,??DataTable104
   \   00000008   41DF4DE2           SUB      SP,SP,#+260
   \   0000000C   B603D4E5           LDRB     R0,[R4, #+950]
   \   00000010   020050E3           CMP      R0,#+2
   \   00000014   0700000A           BEQ      ??CheckForDuplicateName_0
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   0300000A           BEQ      ??CheckForDuplicateName_1
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0020A013           MOVNE    R2,#+0
   \   00000028   0320A003           MOVEQ    R2,#+3
   \   0000002C   020000EA           B        ??CheckForDuplicateName_2
   \                     ??CheckForDuplicateName_1:
   \   00000030   0220A0E3           MOV      R2,#+2
   \   00000034   000000EA           B        ??CheckForDuplicateName_2
   \                     ??CheckForDuplicateName_0:
   \   00000038   0120A0E3           MOV      R2,#+1
   \                     ??CheckForDuplicateName_2:
   \   0000003C   EE1F84E2           ADD      R1,R4,#+952
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           BL       ConvertToFilename
    548          
    549          	// If this is a track type see if this name is one of the predefined tracks
    550          	if (editType == TRACK)
   \   00000048   B603D4E5           LDRB     R0,[R4, #+950]
   \   0000004C   020050E3           CMP      R0,#+2
   \   00000050   1700001A           BNE      ??CheckForDuplicateName_3
    551          	{
    552          		int i;
    553          
    554          		// See if this name exists in the track tape - case INSENSITIVE
    555          		for (i = 0; i < numberOfTracks; i++)
   \   00000054   0050A0E3           MOV      R5,#+0
   \   00000058   ........           LDR      R6,??DataTable104_8
   \   0000005C   ........           LDR      R7,??DataTable104_9
   \   00000060   010000EA           B        ??CheckForDuplicateName_4
   \                     ??CheckForDuplicateName_5:
   \   00000064   015085E2           ADD      R5,R5,#+1
   \   00000068   486086E2           ADD      R6,R6,#+72
   \                     ??CheckForDuplicateName_4:
   \   0000006C   000097E5           LDR      R0,[R7, #+0]
   \   00000070   000055E1           CMP      R5,R0
   \   00000074   0C0000AA           BGE      ??CheckForDuplicateName_6
    556          		{
    557          #ifdef _WINDOWS
    558          			if (_stricmp(newName, trackTable[i].trackName) == 0)
    559          #else
    560          			if (kmc_stricmp(newName, trackTable[i].trackName) == 0)
   \   00000078   0610A0E1           MOV      R1,R6
   \   0000007C   EE0F84E2           ADD      R0,R4,#+952
   \   00000080   ........           BL       kmc_stricmp
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   F5FFFF1A           BNE      ??CheckForDuplicateName_5
    561          #endif
    562          			{
    563          				if (RaceSetupPopup(TRACK_ALREADY_EXISTS))	// true = ok to try new name, false = not ok - abort
   \   0000008C   1400A0E3           MOV      R0,#+20
   \   00000090   800E80E3           ORR      R0,R0,#0x800
   \   00000094   ........           BL       RaceSetupPopup
   \   00000098   000050E3           CMP      R0,#+0
    564          					return -2;				// duplicate name - want to try different name
   \   0000009C   0100E013           MVNNE    R0,#+1
   \   000000A0   0F00001A           BNE      ??CheckForDuplicateName_7
    565          				else return -1;				// duplicate name - don't want to bother
   \                     ??CheckForDuplicateName_8:
   \   000000A4   0000E0E3           MVN      R0,#+0
   \   000000A8   0D0000EA           B        ??CheckForDuplicateName_7
    566          			}
    567          		}
    568          		return 0;					// Else name not found - good to go
   \                     ??CheckForDuplicateName_6:
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   0B0000EA           B        ??CheckForDuplicateName_7
    569          	}
    570          
    571          #ifdef _WINDOWS
    572          	if (pFile = fopen(fileName, "r"))		// See if the file can be opened - i.e. if it exists
    573          	{
    574          		// File already exists - see if the user really wants to do this
    575          		fclose(pFile);
    576          #else
    577          	if (pFile = FS_FOpen(fileName, "rb"))	// See if the file can be opened - i.e. if it exists
   \                     ??CheckForDuplicateName_3:
   \   000000B4   ........           ADR      R1,??DataTable101  ;; 0x72, 0x62, 0x00, 0x00
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       FS_FOpen
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0600000A           BEQ      ??CheckForDuplicateName_7
    578          	{
    579          		// File already exists - see if the user really wants to do this
    580          		FS_FClose(pFile);
   \   000000C8   ........           BL       FS_FClose
    581          #endif
    582          		if (!RaceSetupPopup(FILE_ALREADY_EXISTS))	// true = ok to replace, false = not ok
   \   000000CC   1300A0E3           MOV      R0,#+19
   \   000000D0   800E80E3           ORR      R0,R0,#0x800
   \   000000D4   ........           BL       RaceSetupPopup
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   F0FFFF0A           BEQ      ??CheckForDuplicateName_8
    583          			return -1;				// Do not rename/create
    584          		else return 1;				// OK to rename/overwrite
   \   000000E0   0100A0E3           MOV      R0,#+1
   \                     ??CheckForDuplicateName_7:
   \   000000E4   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   000000E8   F080BDE8           POP      {R4-R7,PC}       ;; return
    585          	}
    586          	else return 0;					// File does not exist - good to go
    587          }
    588          

   \                                 In section .text, align 4, keep-with-next
    589          enum DATATYPES EditTypeToFileType(enum TYPES editType)
    590          {
    591          	if (editType == TRACK)
   \                     EditTypeToFileType:
   \   00000000   020050E3           CMP      R0,#+2
   \   00000004   0100001A           BNE      ??EditTypeToFileType_0
    592          		return TRACK_DATA;
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   1EFF2FE1           BX       LR
    593          	else if (editType == VEHICLE)
   \                     ??EditTypeToFileType_0:
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   0100001A           BNE      ??EditTypeToFileType_1
    594          		return VEHICLE_DATA;
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   1EFF2FE1           BX       LR
    595          	else if (editType == DRIVER)
   \                     ??EditTypeToFileType_1:
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100001A           BNE      ??EditTypeToFileType_2
    596          		return DRIVER_DATA;
   \   00000028   0300A0E3           MOV      R0,#+3
   \   0000002C   1EFF2FE1           BX       LR
    597          	else return SYSTEM_DATA;
   \                     ??EditTypeToFileType_2:
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   1EFF2FE1           BX       LR               ;; return
    598          }
    599          
    600          
    601          //
    602          // Extract the "track number" from this file name
    603          //

   \                                 In section .text, align 4, keep-with-next
    604          int GetTrackNumber(char *pName, int offset)
    605          {
    606          	int temp = 0;
   \                     GetTrackNumber:
   \   00000000   000081E0           ADD      R0,R1,R0
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0A10A0E3           MOV      R1,#+10
   \   0000000C   010000EA           B        ??GetTrackNumber_0
    607          	char ch;
    608          
    609          	while (isdigit(ch = *(pName + offset++)))
    610          	{
    611          		temp *= 10;
    612          		temp += ch - '0';
   \                     ??GetTrackNumber_1:
   \   00000010   913222E0           MLA      R2,R1,R2,R3
   \   00000014   302042E2           SUB      R2,R2,#+48
    613          	}
   \                     ??GetTrackNumber_0:
   \   00000018   0130D0E4           LDRB     R3,[R0], #+1
   \   0000001C   30C043E2           SUB      R12,R3,#+48
   \   00000020   0A005CE3           CMP      R12,#+10
   \   00000024   F9FFFF3A           BCC      ??GetTrackNumber_1
    614          	return temp;
   \   00000028   0200A0E1           MOV      R0,R2
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    615          }
    616          
    617          //
    618          // Find the last track number for this track type
    619          //

   \                                 In section .text, align 4, keep-with-next
    620          int FindLastTrackOfCurrentType(void)
    621          {
   \                     FindLastTrackOfCurrentType:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    622          	int trackNumber = 0;
    623          	char *pTrackType;
    624          	int trackTypeLen;
    625          
    626          #ifdef _WINDOWS
    627          	DIR *dir;
    628          	struct dirent *ent;
    629          #else
    630          	FS_FIND_DATA fd;
    631          	char acFilename[NORMAL_FILENAME_SIZE];
    632          #endif
    633          
    634          	pTrackType = GetSelectedReviewModeText();
   \   00000004   ........           LDR      R0,??DataTable104_10
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   410040E2           SUB      R0,R0,#+65
   \   00000018   130050E3           CMP      R0,#+19
   \   0000001C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??FindLastTrackOfCurrentType_0:
   \   00000020   1F00008A           BHI      ??FindLastTrackOfCurrentType_1
   \   00000024   180000EA           B        ??FindLastTrackOfCurrentType_2
   \   00000028   1D0000EA           B        ??FindLastTrackOfCurrentType_1
   \   0000002C   1C0000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000030   180000EA           B        ??FindLastTrackOfCurrentType_3
   \   00000034   110000EA           B        ??FindLastTrackOfCurrentType_4
   \   00000038   190000EA           B        ??FindLastTrackOfCurrentType_1
   \   0000003C   180000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000040   0B0000EA           B        ??FindLastTrackOfCurrentType_5
   \   00000044   160000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000048   150000EA           B        ??FindLastTrackOfCurrentType_1
   \   0000004C   140000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000050   130000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000054   120000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000058   110000EA           B        ??FindLastTrackOfCurrentType_1
   \   0000005C   100000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000060   0F0000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000064   050000EA           B        ??FindLastTrackOfCurrentType_4
   \   00000068   0D0000EA           B        ??FindLastTrackOfCurrentType_1
   \   0000006C   0C0000EA           B        ??FindLastTrackOfCurrentType_1
   \   00000070   020000EA           B        ??FindLastTrackOfCurrentType_4
   \                     ??FindLastTrackOfCurrentType_5:
   \   00000074   ............       ADRL     R5,`?<Constant "Hill">`
   \              ....        
   \   0000007C   0A0000EA           B        ??FindLastTrackOfCurrentType_6
   \                     ??FindLastTrackOfCurrentType_4:
   \   00000080   ............       ADRL     R5,`?<Constant "Drag">`
   \              ....        
   \   00000088   070000EA           B        ??FindLastTrackOfCurrentType_6
   \                     ??FindLastTrackOfCurrentType_2:
   \   0000008C   ............       ADRL     R5,`?<Constant "AutoX">`
   \              ....        
   \   00000094   040000EA           B        ??FindLastTrackOfCurrentType_6
   \                     ??FindLastTrackOfCurrentType_3:
   \   00000098   ............       ADRL     R5,`?<Constant "Drive">`
   \              ....        
   \   000000A0   010000EA           B        ??FindLastTrackOfCurrentType_6
   \                     ??FindLastTrackOfCurrentType_1:
   \   000000A4   ............       ADRL     R5,`?<Constant "Race">`
   \              ....        
    635          	trackTypeLen = strlen(pTrackType);
   \                     ??FindLastTrackOfCurrentType_6:
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   ........           BL       strlen
   \   000000B4   0060A0E1           MOV      R6,R0
    636          
    637          #ifdef _WINDOWS
    638          	dir = opendir(TRACK_PATH);
    639          	if (dir != NULL)
    640          	{
    641          		while ((ent = readdir(dir)) != NULL) {
    642          			if (ValidFileName(ent->d_name))
    643          			{
    644          				if (strncmp(ent->d_name, pTrackType, trackTypeLen) == 0)
    645          				{
    646          					int temp = GetTrackNumber(ent->d_name, trackTypeLen);
    647          					if (temp > trackNumber)
    648          						trackNumber = temp;
    649          				}
    650          			}
    651          		}
    652          		closedir(dir);
    653          	}
    654          #else
    655          	if (FS_FindFirstFile(&fd, TRACK_PATH, acFilename, sizeof(acFilename)) == 0) {
   \   000000B8   5030A0E3           MOV      R3,#+80
   \   000000BC   0D20A0E1           MOV      R2,SP
   \   000000C0   ........           LDR      R1,??DataTable104_11
   \   000000C4   50008DE2           ADD      R0,SP,#+80
   \   000000C8   ........           BL       FS_FindFirstFile
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   1800001A           BNE      ??FindLastTrackOfCurrentType_7
    656          		do {
    657          			if (ValidFileName(acFilename))
   \                     ??FindLastTrackOfCurrentType_8:
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           BL       ValidFileName
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   1000000A           BEQ      ??FindLastTrackOfCurrentType_9
    658          			{
    659          				if (strncmp(acFilename, pTrackType, trackTypeLen) == 0)
   \   000000E4   0620A0E1           MOV      R2,R6
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   0D00A0E1           MOV      R0,SP
   \   000000F0   ........           BL       strncmp
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0A00001A           BNE      ??FindLastTrackOfCurrentType_9
    660          				{
    661          					int temp = GetTrackNumber(acFilename, trackTypeLen);
   \   000000FC   0D1086E0           ADD      R1,R6,SP
   \   00000100   0A20A0E3           MOV      R2,#+10
   \   00000104   010000EA           B        ??FindLastTrackOfCurrentType_10
   \                     ??FindLastTrackOfCurrentType_11:
   \   00000108   923020E0           MLA      R0,R2,R0,R3
   \   0000010C   300040E2           SUB      R0,R0,#+48
   \                     ??FindLastTrackOfCurrentType_10:
   \   00000110   0130D1E4           LDRB     R3,[R1], #+1
   \   00000114   30C043E2           SUB      R12,R3,#+48
   \   00000118   0A005CE3           CMP      R12,#+10
   \   0000011C   F9FFFF3A           BCC      ??FindLastTrackOfCurrentType_11
    662          					if (temp > trackNumber)
   \   00000120   000054E1           CMP      R4,R0
   \   00000124   0040A0B1           MOVLT    R4,R0
    663          						trackNumber = temp;
    664          				}
    665          			}
    666          		} while (FS_FindNextFile (&fd));
   \                     ??FindLastTrackOfCurrentType_9:
   \   00000128   50008DE2           ADD      R0,SP,#+80
   \   0000012C   ........           BL       FS_FindNextFile
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   E6FFFF1A           BNE      ??FindLastTrackOfCurrentType_8
    667          	}
    668          	FS_FindClose(&fd);
   \                     ??FindLastTrackOfCurrentType_7:
   \   00000138   50008DE2           ADD      R0,SP,#+80
   \   0000013C   ........           BL       FS_FindClose
    669          #endif
    670          
    671          	return trackNumber;
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   90D08DE2           ADD      SP,SP,#+144
   \   00000148   7080BDE8           POP      {R4-R6,PC}       ;; return
    672          }
    673          
    674          //
    675          // Create a new track of the current track type with the next track number in the sequence
    676          //

   \                                 In section .text, align 4, keep-with-next
    677          void AutoCreateNewTrack(void)
    678          {
   \                     AutoCreateNewTrack:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    679          	int last = FindLastTrackOfCurrentType();
    680          	sprintf(newName, "%s%d", GetSelectedReviewModeText(), ++last);
   \   00000008   ........           BL       FindLastTrackOfCurrentType
   \   0000000C   013080E2           ADD      R3,R0,#+1
   \   00000010   ........           LDR      R0,??DataTable104_10
   \   00000014   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000018   410040E2           SUB      R0,R0,#+65
   \   0000001C   130050E3           CMP      R0,#+19
   \   00000020   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??AutoCreateNewTrack_0:
   \   00000024   1F00008A           BHI      ??AutoCreateNewTrack_1
   \   00000028   180000EA           B        ??AutoCreateNewTrack_2
   \   0000002C   1D0000EA           B        ??AutoCreateNewTrack_1
   \   00000030   1C0000EA           B        ??AutoCreateNewTrack_1
   \   00000034   180000EA           B        ??AutoCreateNewTrack_3
   \   00000038   110000EA           B        ??AutoCreateNewTrack_4
   \   0000003C   190000EA           B        ??AutoCreateNewTrack_1
   \   00000040   180000EA           B        ??AutoCreateNewTrack_1
   \   00000044   0B0000EA           B        ??AutoCreateNewTrack_5
   \   00000048   160000EA           B        ??AutoCreateNewTrack_1
   \   0000004C   150000EA           B        ??AutoCreateNewTrack_1
   \   00000050   140000EA           B        ??AutoCreateNewTrack_1
   \   00000054   130000EA           B        ??AutoCreateNewTrack_1
   \   00000058   120000EA           B        ??AutoCreateNewTrack_1
   \   0000005C   110000EA           B        ??AutoCreateNewTrack_1
   \   00000060   100000EA           B        ??AutoCreateNewTrack_1
   \   00000064   0F0000EA           B        ??AutoCreateNewTrack_1
   \   00000068   050000EA           B        ??AutoCreateNewTrack_4
   \   0000006C   0D0000EA           B        ??AutoCreateNewTrack_1
   \   00000070   0C0000EA           B        ??AutoCreateNewTrack_1
   \   00000074   020000EA           B        ??AutoCreateNewTrack_4
   \                     ??AutoCreateNewTrack_5:
   \   00000078   ............       ADRL     R2,`?<Constant "Hill">`
   \              ....        
   \   00000080   0A0000EA           B        ??AutoCreateNewTrack_6
   \                     ??AutoCreateNewTrack_4:
   \   00000084   ............       ADRL     R2,`?<Constant "Drag">`
   \              ....        
   \   0000008C   070000EA           B        ??AutoCreateNewTrack_6
   \                     ??AutoCreateNewTrack_2:
   \   00000090   ............       ADRL     R2,`?<Constant "AutoX">`
   \              ....        
   \   00000098   040000EA           B        ??AutoCreateNewTrack_6
   \                     ??AutoCreateNewTrack_3:
   \   0000009C   ............       ADRL     R2,`?<Constant "Drive">`
   \              ....        
   \   000000A4   010000EA           B        ??AutoCreateNewTrack_6
   \                     ??AutoCreateNewTrack_1:
   \   000000A8   ............       ADRL     R2,`?<Constant "Race">`
   \              ....        
   \                     ??AutoCreateNewTrack_6:
   \   000000B0   ............       ADRL     R1,`?<Constant "%s%d">`
   \              ....        
   \   000000B8   ........           LDR      R0,??DataTable104_5
   \   000000BC   ........           BL       sprintf
    681          	CreateNewTrack();
   \   000000C0   04D08DE2           ADD      SP,SP,#+4
   \   000000C4   0040BDE8           POP      {LR}
   \   000000C8   ........           B        CreateNewTrack   ;; tailcall
    682          }
    683          

   \                                 In section .text, align 4, keep-with-next
    684          void CreateNewTrack(void)
    685          {
   \                     CreateNewTrack:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   4ADE4DE2           SUB      SP,SP,#+1184
   \   00000008   40DD4DE2           SUB      SP,SP,#+4096
    686          	TRACK_DATA_STRUCTURE newTrack;
    687          
    688          	memset(&newTrack, 0, sizeof(newTrack));
   \   0000000C   A010A0E3           MOV      R1,#+160
   \   00000010   501D81E3           ORR      R1,R1,#0x1400
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   ........           BL       __aeabi_memclr4
    689          	newTrack.courseType = SessionTypeToTrackType((enum SESSION_TYPE)sysData.selectedSessionType);
   \   0000001C   ........           LDR      R4,??DataTable104_10
   \   00000020   D000D4E5           LDRB     R0,[R4, #+208]
   \   00000024   410040E2           SUB      R0,R0,#+65
   \   00000028   130050E3           CMP      R0,#+19
   \   0000002C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??CreateNewTrack_0:
   \   00000030   1F00008A           BHI      ??CreateNewTrack_1
   \   00000034   1A0000EA           B        ??CreateNewTrack_2
   \   00000038   1D0000EA           B        ??CreateNewTrack_1
   \   0000003C   1C0000EA           B        ??CreateNewTrack_1
   \   00000040   190000EA           B        ??CreateNewTrack_3
   \   00000044   120000EA           B        ??CreateNewTrack_4
   \   00000048   190000EA           B        ??CreateNewTrack_1
   \   0000004C   180000EA           B        ??CreateNewTrack_1
   \   00000050   0B0000EA           B        ??CreateNewTrack_5
   \   00000054   160000EA           B        ??CreateNewTrack_1
   \   00000058   150000EA           B        ??CreateNewTrack_1
   \   0000005C   140000EA           B        ??CreateNewTrack_1
   \   00000060   130000EA           B        ??CreateNewTrack_1
   \   00000064   120000EA           B        ??CreateNewTrack_1
   \   00000068   110000EA           B        ??CreateNewTrack_1
   \   0000006C   100000EA           B        ??CreateNewTrack_1
   \   00000070   0F0000EA           B        ??CreateNewTrack_1
   \   00000074   080000EA           B        ??CreateNewTrack_6
   \   00000078   0D0000EA           B        ??CreateNewTrack_1
   \   0000007C   0C0000EA           B        ??CreateNewTrack_1
   \   00000080   010000EA           B        ??CreateNewTrack_7
   \                     ??CreateNewTrack_5:
   \   00000084   0600A0E3           MOV      R0,#+6
   \   00000088   0A0000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_7:
   \   0000008C   0400A0E3           MOV      R0,#+4
   \   00000090   080000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_4:
   \   00000094   0300A0E3           MOV      R0,#+3
   \   00000098   060000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_6:
   \   0000009C   0500A0E3           MOV      R0,#+5
   \   000000A0   040000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_2:
   \   000000A4   0200A0E3           MOV      R0,#+2
   \   000000A8   020000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_3:
   \   000000AC   0700A0E3           MOV      R0,#+7
   \   000000B0   000000EA           B        ??CreateNewTrack_8
   \                     ??CreateNewTrack_1:
   \   000000B4   0000A0E3           MOV      R0,#+0
    690          	AddTrack(newName, &newTrack);
   \                     ??CreateNewTrack_8:
   \   000000B8   ........           LDR      R5,??DataTable104
   \   000000BC   4000CDE5           STRB     R0,[SP, #+64]
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   EE0F85E2           ADD      R0,R5,#+952
   \   000000C8   ........           BL       AddTrack
    691          	strcpy(selectedTrackName, newName);
   \   000000CC   EE1F85E2           ADD      R1,R5,#+952
   \   000000D0   F30F85E2           ADD      R0,R5,#+972
   \   000000D4   ........           BL       strcpy
    692          	trackTableIndex = -1;		// force SetTrackTableDefaultData to create new default track
   \   000000D8   0000E0E3           MVN      R0,#+0
   \   000000DC   A00385E5           STR      R0,[R5, #+928]
    693          	CheckWorkingTrackName();		// Initialize data and save new file to disk
   \   000000E0   F31F85E2           ADD      R1,R5,#+972
   \   000000E4   A00084E2           ADD      R0,R4,#+160
   \   000000E8   ........           BL       strcpy
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   ........           BL       ReloadData
    694          	trackTableIndex = FindFile(sysData.track);	// Reset trackTableIndex
   \   000000F4   0060A0E3           MOV      R6,#+0
   \   000000F8   ........           LDR      R7,??DataTable104_8
   \   000000FC   ........           LDR      R8,??DataTable104_9
   \   00000100   010000EA           B        ??CreateNewTrack_9
   \                     ??CreateNewTrack_10:
   \   00000104   016086E2           ADD      R6,R6,#+1
   \   00000108   487087E2           ADD      R7,R7,#+72
   \                     ??CreateNewTrack_9:
   \   0000010C   000098E5           LDR      R0,[R8, #+0]
   \   00000110   010040E2           SUB      R0,R0,#+1
   \   00000114   000056E1           CMP      R6,R0
   \   00000118   0060E0A3           MVNGE    R6,#+0
   \   0000011C   050000AA           BGE      ??CreateNewTrack_11
   \   00000120   1020A0E3           MOV      R2,#+16
   \   00000124   A01084E2           ADD      R1,R4,#+160
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   ........           BL       strncmp
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   F2FFFF1A           BNE      ??CreateNewTrack_10
   \                     ??CreateNewTrack_11:
   \   00000138   A06385E5           STR      R6,[R5, #+928]
    695          
    696          	GetClosestTracks(sysData.radius);		// Added a new track - update the closest tracks list
   \   0000013C   B40094E5           LDR      R0,[R4, #+180]
   \   00000140   ........           BL       GetClosestTracks
    697          	WriteUserDataEvent(TRACK_DATA);			// Call routine to synchronously write the data to the SD card
   \   00000144   0100A0E3           MOV      R0,#+1
   \   00000148   ........           BL       WriteUserDataEvent
    698          }
   \   0000014C   4ADE8DE2           ADD      SP,SP,#+1184
   \   00000150   40DD8DE2           ADD      SP,SP,#+4096
   \   00000154   F081BDE8           POP      {R4-R8,PC}       ;; return
    699          
    700          //
    701          // Rename this entry to the name specified in newName
    702          //
    703          // Input:	newName = just the bare new file name with no path or extension
    704          //			editType = type of file to be renamed
    705          //			sysData.d/v/t = current file name  * - note that this might not always be right!!!
    706          //
    707          // Output:	0 = name change successful
    708          //			-1 = rename failed
    709          //			selectedTrackName updated with bare file name in case of renaming tracks
    710          //			sysData.d/v/t = new file name along with all data loaded
    711          //

   \                                 In section .text, align 4, keep-with-next
    712          int RenameCurrentEntry(void)
    713          {
   \                     RenameCurrentEntry:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
    714          	int retval;
    715          #ifdef _WINDOWS
    716          	char fileName[256], OldName[256];
    717          #else
    718          	char fileName[256], OldName[256];
    719          	char fileName2[256];
    720          	char compareName[256];
    721          #endif
    722          	
    723          	if ((retval = CheckForDuplicateName()) < 0)		// If duplicate file name and NOT OK to proceed
   \   0000000C   ........           BL       CheckForDuplicateName
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   8200004A           BMI      ??RenameCurrentEntry_0
    724          		return retval;							// exit
    725          
    726          	if (editType == TRACK)
   \   00000018   ........           LDR      R4,??DataTable104
   \   0000001C   B603D4E5           LDRB     R0,[R4, #+950]
   \   00000020   020050E3           CMP      R0,#+2
   \   00000024   2600001A           BNE      ??RenameCurrentEntry_1
    727          	{
    728          #ifdef _WINDOWS
    729          		ConvertToFilename(fileName, newName, TRACK_DATA);
    730          #else
    731          		strcpy(fileName, newName);
   \   00000028   EE1F84E2           ADD      R1,R4,#+952
   \   0000002C   C00F8DE2           ADD      R0,SP,#+768
   \   00000030   ........           BL       strcpy
    732          		strcat(fileName, DAT_EXT);
   \   00000034   ............       ADRL     R1,`?<Constant ".dat">`
   \              ....        
   \   0000003C   C00F8DE2           ADD      R0,SP,#+768
   \   00000040   ........           BL       strcat
    733          #endif
    734          		ConvertToFilename(OldName, sysData.track, TRACK_DATA);
   \   00000044   ........           LDR      R7,??DataTable104_10
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   A01087E2           ADD      R1,R7,#+160
   \   00000050   800F8DE2           ADD      R0,SP,#+512
   \   00000054   ........           BL       ConvertToFilename
    735          		strcpy(selectedTrackName, newName);
   \   00000058   EE1F84E2           ADD      R1,R4,#+952
   \   0000005C   F30F84E2           ADD      R0,R4,#+972
   \   00000060   ........           BL       strcpy
    736          		strcpy(trackTable[trackTableIndex].trackName, newName);
   \   00000064   A00394E5           LDR      R0,[R4, #+928]
   \   00000068   4850A0E3           MOV      R5,#+72
   \   0000006C   ........           LDR      R6,??DataTable104_8
   \   00000070   956020E0           MLA      R0,R5,R0,R6
   \   00000074   EE1F84E2           ADD      R1,R4,#+952
   \   00000078   ........           BL       strcpy
    737          
    738          		if (!trackTable[trackTableIndex].sdCardEntry)	// If this is not an SD card entry
   \   0000007C   A00394E5           LDR      R0,[R4, #+928]
   \   00000080   956020E0           MLA      R0,R5,R0,R6
   \   00000084   140090E5           LDR      R0,[R0, #+20]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   2500001A           BNE      ??RenameCurrentEntry_2
    739          		{
    740          			// Create the new SD card file
    741          			ReloadData(TRACK_DATA);			// Be sure trackData actually contains the data for this track (if we just selected this track but have not edited yet it will not!)
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   ........           BL       ReloadData
    742          			strcpy(sysData.track, newName);			// Set new files track name for write to disk
   \   00000098   EE1F84E2           ADD      R1,R4,#+952
   \   0000009C   A00087E2           ADD      R0,R7,#+160
   \   000000A0   ........           BL       strcpy
    743          			WriteUserDataEvent(TRACK_DATA);			// Call routine to synchronously write the data to the SD card
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   ........           BL       WriteUserDataEvent
    744          			UpdateList();
   \   000000AC   ........           BL       UpdateList
    745          			trackTable[trackTableIndex].sdCardEntry = true;	// KMC TODO - is this necessary?
   \   000000B0   A00394E5           LDR      R0,[R4, #+928]
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   956020E0           MLA      R0,R5,R0,R6
   \   000000BC   141080E5           STR      R1,[R0, #+20]
    746          			return 0;
   \   000000C0   560000EA           B        ??RenameCurrentEntry_3
    747          		}
    748          	}
    749          	else if (editType == VEHICLE)
   \                     ??RenameCurrentEntry_1:
   \   000000C4   010050E3           CMP      R0,#+1
   \   000000C8   0900001A           BNE      ??RenameCurrentEntry_4
    750          	{
    751          #ifdef _WINDOWS
    752          		ConvertToFilename(fileName, newName, VEHICLE_DATA);
    753          #else
    754          		strcpy(fileName, newName);
   \   000000CC   EE1F84E2           ADD      R1,R4,#+952
   \   000000D0   C00F8DE2           ADD      R0,SP,#+768
   \   000000D4   ........           BL       strcpy
    755          		strcat(fileName, DAT_EXT);
   \   000000D8   ............       ADRL     R1,`?<Constant ".dat">`
   \              ....        
   \   000000E0   C00F8DE2           ADD      R0,SP,#+768
   \   000000E4   ........           BL       strcat
    756          #endif
    757          		ConvertToFilename(OldName, sysData.vehicle, VEHICLE_DATA);
   \   000000E8   0220A0E3           MOV      R2,#+2
   \   000000EC   ........           LDR      R1,??DataTable104_6
   \   000000F0   0A0000EA           B        ??RenameCurrentEntry_5
    758          	}
    759          	else if (editType == DRIVER)
   \                     ??RenameCurrentEntry_4:
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0A00001A           BNE      ??RenameCurrentEntry_2
    760          	{
    761          #ifdef _WINDOWS
    762          		ConvertToFilename(fileName, newName, DRIVER_DATA);
    763          #else
    764          		strcpy(fileName, newName);
   \   000000FC   EE1F84E2           ADD      R1,R4,#+952
   \   00000100   C00F8DE2           ADD      R0,SP,#+768
   \   00000104   ........           BL       strcpy
    765          		strcat(fileName, DAT_EXT);
   \   00000108   ............       ADRL     R1,`?<Constant ".dat">`
   \              ....        
   \   00000110   C00F8DE2           ADD      R0,SP,#+768
   \   00000114   ........           BL       strcat
    766          #endif
    767          		ConvertToFilename(OldName, sysData.driver, DRIVER_DATA);
   \   00000118   0320A0E3           MOV      R2,#+3
   \   0000011C   ........           LDR      R1,??DataTable104_4
   \                     ??RenameCurrentEntry_5:
   \   00000120   800F8DE2           ADD      R0,SP,#+512
   \   00000124   ........           BL       ConvertToFilename
    768          	}
    769          
    770          	// Before renaming see if this file already exists
    771          #ifdef _WINDOWS
    772          	// If OldName and fileName are DIFFERENT files (ie not just different case versions of the same name)
    773          	if (_stricmp(OldName, fileName) != 0)
    774          		remove(fileName);		// Delete the "target" file name
    775          
    776          	if (rename(OldName, fileName) < 0)		// syntax: old name, new name
    777          		return -1;
    778          #else
    779          	if (!unsavedSysData.sdCardInserted)
   \                     ??RenameCurrentEntry_2:
   \   00000128   ........           LDR      R0,??DataTable105
   \   0000012C   C00090E5           LDR      R0,[R0, #+192]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0100001A           BNE      ??RenameCurrentEntry_6
    780          		return -1;
   \                     ??RenameCurrentEntry_7:
   \   00000138   0000E0E3           MVN      R0,#+0
   \   0000013C   380000EA           B        ??RenameCurrentEntry_0
    781          	
    782          	ConvertToFilename(compareName, newName, EditTypeToFileType(editType));
   \                     ??RenameCurrentEntry_6:
   \   00000140   B603D4E5           LDRB     R0,[R4, #+950]
   \   00000144   020050E3           CMP      R0,#+2
   \   00000148   0700000A           BEQ      ??RenameCurrentEntry_8
   \   0000014C   010050E3           CMP      R0,#+1
   \   00000150   0300000A           BEQ      ??RenameCurrentEntry_9
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   0020A013           MOVNE    R2,#+0
   \   0000015C   0320A003           MOVEQ    R2,#+3
   \   00000160   020000EA           B        ??RenameCurrentEntry_10
   \                     ??RenameCurrentEntry_9:
   \   00000164   0220A0E3           MOV      R2,#+2
   \   00000168   000000EA           B        ??RenameCurrentEntry_10
   \                     ??RenameCurrentEntry_8:
   \   0000016C   0120A0E3           MOV      R2,#+1
   \                     ??RenameCurrentEntry_10:
   \   00000170   EE1F84E2           ADD      R1,R4,#+952
   \   00000174   0D00A0E1           MOV      R0,SP
   \   00000178   ........           BL       ConvertToFilename
    783          
    784          	if (kmc_stricmp(OldName, compareName) != 0)
   \   0000017C   0D10A0E1           MOV      R1,SP
   \   00000180   800F8DE2           ADD      R0,SP,#+512
   \   00000184   ........           BL       kmc_stricmp
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   0100000A           BEQ      ??RenameCurrentEntry_11
    785          		FS_Remove(fileName);	// Delete the "target" file name
   \   00000190   C00F8DE2           ADD      R0,SP,#+768
   \   00000194   ........           BL       FS_Remove
    786          	
    787          	// Rename the file - note that in the case of the files differing only in case Segger OS cannot directly
    788          	// rename the file!  You must go through an intermediate file name to change and then rename again to the
    789          	// new name.
    790          	strcpy(fileName2, newName);		// create temporary intermediate file name
   \                     ??RenameCurrentEntry_11:
   \   00000198   EE1F84E2           ADD      R1,R4,#+952
   \   0000019C   400F8DE2           ADD      R0,SP,#+256
   \   000001A0   ........           BL       strcpy
    791          	strcat(fileName2, ".tmp");
   \   000001A4   ............       ADRL     R1,`?<Constant ".tmp">`
   \              ....        
   \   000001AC   400F8DE2           ADD      R0,SP,#+256
   \   000001B0   ........           BL       strcat
    792          	if (FS_Rename(OldName, fileName2) < 0)	// rename to intermediate name
   \   000001B4   401F8DE2           ADD      R1,SP,#+256
   \   000001B8   800F8DE2           ADD      R0,SP,#+512
   \   000001BC   ........           BL       FS_Rename
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   DBFFFF4A           BMI      ??RenameCurrentEntry_7
    793          		return -1;
    794          	AddPath(compareName, fileName2, EditTypeToFileType(editType));	// Add full path to intermediate file name
   \   000001C8   B603D4E5           LDRB     R0,[R4, #+950]
   \   000001CC   020050E3           CMP      R0,#+2
   \   000001D0   0700000A           BEQ      ??RenameCurrentEntry_12
   \   000001D4   010050E3           CMP      R0,#+1
   \   000001D8   0300000A           BEQ      ??RenameCurrentEntry_13
   \   000001DC   000050E3           CMP      R0,#+0
   \   000001E0   0020A013           MOVNE    R2,#+0
   \   000001E4   0320A003           MOVEQ    R2,#+3
   \   000001E8   020000EA           B        ??RenameCurrentEntry_14
   \                     ??RenameCurrentEntry_13:
   \   000001EC   0220A0E3           MOV      R2,#+2
   \   000001F0   000000EA           B        ??RenameCurrentEntry_14
   \                     ??RenameCurrentEntry_12:
   \   000001F4   0120A0E3           MOV      R2,#+1
   \                     ??RenameCurrentEntry_14:
   \   000001F8   401F8DE2           ADD      R1,SP,#+256
   \   000001FC   0D00A0E1           MOV      R0,SP
   \   00000200   ........           BL       AddPath
    795          	if (FS_Rename(compareName, fileName) < 0)	// Rename to final file name
   \   00000204   C01F8DE2           ADD      R1,SP,#+768
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           BL       FS_Rename
   \   00000210   000050E3           CMP      R0,#+0
    796          		return -1;
   \   00000214   0000E043           MVNMI    R0,#+0
   \   00000218   0100004A           BMI      ??RenameCurrentEntry_0
    797          #endif
    798          
    799          	UpdateList();
   \   0000021C   ........           BL       UpdateList
    800          	return 0;
   \                     ??RenameCurrentEntry_3:
   \   00000220   0000A0E3           MOV      R0,#+0
   \                     ??RenameCurrentEntry_0:
   \   00000224   04D08DE2           ADD      SP,SP,#+4
   \   00000228   40DE8DE2           ADD      SP,SP,#+1024
   \   0000022C   F080BDE8           POP      {R4-R7,PC}       ;; return
    801          }
    802          
    803          //
    804          // Be sure there are no periods ('.') in name, change them to spaces (' ')
    805          //

   \                                 In section .text, align 4, keep-with-next
    806          void ValidateName(char *pName)
    807          {
   \                     ValidateName:
   \   00000000   020000EA           B        ??ValidateName_0
    808          	char ch;
    809          
    810          	while (ch = *pName)
    811          	{
    812          		if (ch == '.')
   \                     ??ValidateName_1:
   \   00000004   2E0051E3           CMP      R1,#+46
    813          			ch = ' ';
   \   00000008   2010A003           MOVEQ    R1,#+32
    814          		*pName++ = ch;
   \   0000000C   0110C0E4           STRB     R1,[R0], #+1
    815          	}
   \                     ??ValidateName_0:
   \   00000010   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   F9FFFF1A           BNE      ??ValidateName_1
    816          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    817          
    818          
    819          //
    820          // Note: this routine had to be heavily modified to compensate for Segger's bug.
    821          // You can only add entried to the LISTWHEEL up to a total of 6 entries using the
    822          // normal LISTWHEEL_SetText function.  After that the list wheel craps out and
    823          // gets lost so you must destroy the old list and recreate a new one from scratch!!!
    824          // (I'm not joking!)
    825          //

   \                                 In section .text, align 4, keep-with-next
    826          void UpdateList(void)
    827          {
   \                     UpdateList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    828          	unsigned int sel;
    829          	LISTVIEW_Handle *hList;
    830          	char **pList;
    831          	int id;
    832          
    833          	ValidateName(newName);					// Be sure there are no periods ('.') in name, change them to spaces (' ')
   \   00000004   ........           LDR      R4,??DataTable104
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   EE0F84E2           ADD      R0,R4,#+952
   \   00000010   020000EA           B        ??UpdateList_0
   \                     ??UpdateList_1:
   \   00000014   2E0051E3           CMP      R1,#+46
   \   00000018   2010A003           MOVEQ    R1,#+32
   \   0000001C   0110C0E4           STRB     R1,[R0], #+1
   \                     ??UpdateList_0:
   \   00000020   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   F9FFFF1A           BNE      ??UpdateList_1
    834          
    835          	if (editType == DRIVER)
   \   0000002C   B603D4E5           LDRB     R0,[R4, #+950]
   \   00000030   ........           LDR      R5,??DataTable104_10
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   2400001A           BNE      ??UpdateList_2
    836          	{
    837          		strcpy(sysData.driver, newName);
   \   0000003C   EE1F84E2           ADD      R1,R4,#+952
   \   00000040   7E0085E2           ADD      R0,R5,#+126
   \   00000044   ........           BL       strcpy
    838          		if (strcmp(newName, ""))			// As long as the new name is not blank
   \   00000048   ........           ADR      R1,??DataTable104_2  ;; ""
   \   0000004C   EE0F84E2           ADD      R0,R4,#+952
   \   00000050   ........           BL       strcmp
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0100000A           BEQ      ??UpdateList_3
    839          			WriteUserDataEvent(DRIVER_DATA);		// Call routine to synchronously write the data to the SD card
   \   0000005C   0300A0E3           MOV      R0,#+3
   \   00000060   ........           BL       WriteUserDataEvent
    840          		CreateFileList(DRIVER_DATA);
   \                     ??UpdateList_3:
   \   00000064   0300A0E3           MOV      R0,#+3
   \   00000068   ........           BL       CreateFileList
    841          		sel = FindSelection(DRIVER_DATA);
   \   0000006C   7E00D5E5           LDRB     R0,[R5, #+126]
   \   00000070   446084E2           ADD      R6,R4,#+68
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0B00000A           BEQ      ??UpdateList_4
   \   0000007C   0070A0E3           MOV      R7,#+0
   \   00000080   000000EA           B        ??UpdateList_5
   \                     ??UpdateList_6:
   \   00000084   017087E2           ADD      R7,R7,#+1
   \                     ??UpdateList_5:
   \   00000088   000096E5           LDR      R0,[R6, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0500000A           BEQ      ??UpdateList_4
   \   00000094   7E1085E2           ADD      R1,R5,#+126
   \   00000098   040096E4           LDR      R0,[R6], #+4
   \   0000009C   ........           BL       strcmp
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   F6FFFF1A           BNE      ??UpdateList_6
   \   000000A8   000000EA           B        ??UpdateList_7
   \                     ??UpdateList_4:
   \   000000AC   0070A0E3           MOV      R7,#+0
    842          		hList = &hDriverList;
    843          		id = DRIVERLIST;
   \                     ??UpdateList_7:
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   DD0F84E2           ADD      R0,R4,#+884
   \   000000B8   801F81E3           ORR      R1,R1,#0x200
    844          		pList = pDrivers;
   \   000000BC   442084E2           ADD      R2,R4,#+68
    845          	}
    846          	else if (editType == VEHICLE)
    847          	{
    848          		strcpy(sysData.vehicle, newName);
    849          		if (strcmp(newName, ""))			// As long as the new name is not blank
    850          			WriteUserDataEvent(VEHICLE_DATA);		// Call routine to synchronously write the data to the SD card
    851          		SetGear(GEAR_RESET);					// recalculate gear tables
    852          		CreateFileList(VEHICLE_DATA);
    853          		sel = FindSelection(VEHICLE_DATA);
    854          		hList = &hVehicleList;
    855          		id = VEHICLELIST;
    856          		pList = pVehicles;
    857          	}
    858          //	else if (editType == TRACK)
    859          	else
    860          	{
    861          		strcpy(sysData.track, newName);
    862          		GetClosestTracks(sysData.radius);
    863          		CreateFileList(TRACK_DATA);
    864          		//if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
    865          		//	pList = pTracksFull;
    866          		//else pList = pTracksShort;
    867          		pList = pTracksShort;
    868          		sel = FindSelection(TRACK_DATA);
    869          		UpdateTrackList(GetTrackSelectionWindowHandle());
    870          		return;
    871          	}
    872          
    873          	// Display alphabetically sorted list control
    874          	DisplayAlphaList(hList, id, pList, sel);
   \                     ??UpdateList_8:
   \   000000C0   0730A0E1           MOV      R3,R7
   \   000000C4   ........           BL       DisplayAlphaList
    875          }
   \                     ??UpdateList_9:
   \   000000C8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000CC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??UpdateList_2:
   \   000000D0   010050E3           CMP      R0,#+1
   \   000000D4   EE1F84E2           ADD      R1,R4,#+952
   \   000000D8   2200001A           BNE      ??UpdateList_10
   \   000000DC   8F0085E2           ADD      R0,R5,#+143
   \   000000E0   ........           BL       strcpy
   \   000000E4   ........           ADR      R1,??DataTable104_2  ;; ""
   \   000000E8   EE0F84E2           ADD      R0,R4,#+952
   \   000000EC   ........           BL       strcmp
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0200000A           BEQ      ??UpdateList_11
   \   000000F8   0200A0E3           MOV      R0,#+2
   \   000000FC   ........           BL       WriteUserDataEvent
   \   00000100   0000A0E3           MOV      R0,#+0
   \                     ??UpdateList_11:
   \   00000104   ........           BL       SetGear
   \   00000108   0200A0E3           MOV      R0,#+2
   \   0000010C   ........           BL       CreateFileList
   \   00000110   8F00D5E5           LDRB     R0,[R5, #+143]
   \   00000114   446F84E2           ADD      R6,R4,#+272
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0B00000A           BEQ      ??UpdateList_12
   \   00000120   0070A0E3           MOV      R7,#+0
   \   00000124   000000EA           B        ??UpdateList_13
   \                     ??UpdateList_14:
   \   00000128   017087E2           ADD      R7,R7,#+1
   \                     ??UpdateList_13:
   \   0000012C   000096E5           LDR      R0,[R6, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0500000A           BEQ      ??UpdateList_12
   \   00000138   8F1085E2           ADD      R1,R5,#+143
   \   0000013C   040096E4           LDR      R0,[R6], #+4
   \   00000140   ........           BL       strcmp
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   F6FFFF1A           BNE      ??UpdateList_14
   \   0000014C   000000EA           B        ??UpdateList_15
   \                     ??UpdateList_12:
   \   00000150   0070A0E3           MOV      R7,#+0
   \                     ??UpdateList_15:
   \   00000154   0210A0E3           MOV      R1,#+2
   \   00000158   DE0F84E2           ADD      R0,R4,#+888
   \   0000015C   801F81E3           ORR      R1,R1,#0x200
   \   00000160   442F84E2           ADD      R2,R4,#+272
   \   00000164   D5FFFFEA           B        ??UpdateList_8
   \                     ??UpdateList_10:
   \   00000168   A00085E2           ADD      R0,R5,#+160
   \   0000016C   ........           BL       strcpy
   \   00000170   B40095E5           LDR      R0,[R5, #+180]
   \   00000174   ........           BL       GetClosestTracks
   \   00000178   0100A0E3           MOV      R0,#+1
   \   0000017C   ........           BL       CreateFileList
   \   00000180   A000D5E5           LDRB     R0,[R5, #+160]
   \   00000184   3C6094E5           LDR      R6,[R4, #+60]
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   0700000A           BEQ      ??UpdateList_16
   \                     ??UpdateList_17:
   \   00000190   000096E5           LDR      R0,[R6, #+0]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   0400000A           BEQ      ??UpdateList_16
   \   0000019C   A01085E2           ADD      R1,R5,#+160
   \   000001A0   040096E4           LDR      R0,[R6], #+4
   \   000001A4   ........           BL       strcmp
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   F7FFFF1A           BNE      ??UpdateList_17
   \                     ??UpdateList_16:
   \   000001B0   ........           BL       GetScreenType
   \   000001B4   050050E3           CMP      R0,#+5
   \   000001B8   ........           LDRNE    R0,??DataTable104_3
   \   000001BC   6C039405           LDREQ    R0,[R4, #+876]
   \   000001C0   00009015           LDRNE    R0,[R0, #+0]
   \   000001C4   ........           BL       UpdateTrackList
   \   000001C8   BEFFFFEA           B        ??UpdateList_9
    876          

   \                                 In section .text, align 4, keep-with-next
    877          void RaceSetupScreensCallback(WM_MESSAGE * pMsg)
    878          {
   \                     RaceSetupScreensCallback:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    879          	int NCode, Id, Sel;
    880          
    881          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   3CD04DE2           SUB      SP,SP,#+60
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   5F00000A           BEQ      ??RaceSetupScreensCallback_2
   \   00000018   0A0050E2           SUBS     R0,R0,#+10
   \   0000001C   6200000A           BEQ      ??RaceSetupScreensCallback_3
   \   00000020   040050E2           SUBS     R0,R0,#+4
   \   00000024   7100000A           BEQ      ??RaceSetupScreensCallback_4
   \   00000028   0C0050E2           SUBS     R0,R0,#+12
   \   0000002C   0600000A           BEQ      ??RaceSetupScreensCallback_5
   \   00000030   010050E2           SUBS     R0,R0,#+1
   \   00000034   0E00000A           BEQ      ??RaceSetupScreensCallback_6
   \   00000038   0A0050E2           SUBS     R0,R0,#+10
   \   0000003C   A100000A           BEQ      ??RaceSetupScreensCallback_7
   \   00000040   ED0050E2           SUBS     R0,R0,#+237
   \   00000044   4800000A           BEQ      ??RaceSetupScreensCallback_8
   \   00000048   EE0200EA           B        ??RaceSetupScreensCallback_9
    882          	{
    883          		case KB_CANCEL_MSG:
    884          			if (pMsg->Data.p == pEntryKeyboard)
   \                     ??RaceSetupScreensCallback_5:
   \   0000004C   ........           LDR      R5,??DataTable113
   \   00000050   0C0094E5           LDR      R0,[R4, #+12]
   \   00000054   9C1395E5           LDR      R1,[R5, #+924]
   \   00000058   010050E1           CMP      R0,R1
   \   0000005C   EB02001A           BNE      ??RaceSetupScreensCallback_10
    885          			{
    886          				RSSKillKeyboard();
   \   00000060   ........           BL       RSSKillKeyboard
    887          				UnhideSprites();
   \   00000064   A80395E5           LDR      R0,[R5, #+936]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1E00001A           BNE      ??RaceSetupScreensCallback_11
   \   00000070   E60200EA           B        ??RaceSetupScreensCallback_10
    888          			}
    889          			break;
    890          
    891          		case KB_SAVE_AND_EXIT_MSG:
    892          			if (pMsg->Data.p == pEntryKeyboard)
   \                     ??RaceSetupScreensCallback_6:
   \   00000074   ........           LDR      R5,??DataTable113
   \   00000078   0C0094E5           LDR      R0,[R4, #+12]
   \   0000007C   9C1395E5           LDR      R1,[R5, #+924]
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   E102001A           BNE      ??RaceSetupScreensCallback_10
    893          			{
    894          				if ((strcmp(newName, "") == 0) || (newName[0] == '.'))	// Validate name.  If we want more detailed testing make this a routine and call it here
   \   00000088   E51F8FE2           ADR      R1,??RaceSetupScreensCallback_12  ;; ""
   \   0000008C   EE0F85E2           ADD      R0,R5,#+952
   \   00000090   ........           BL       strcmp
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   B803D515           LDRBNE   R0,[R5, #+952]
   \   0000009C   2E005013           CMPNE    R0,#+46
   \   000000A0   1D00001A           BNE      ??RaceSetupScreensCallback_13
    895          					InvalidName();
   \   000000A4   0200A0E3           MOV      R0,#+2
   \   000000A8   ........           BL       SetPopupDefaults
   \   000000AC   1A00A0E3           MOV      R0,#+26
   \   000000B0   400F80E3           ORR      R0,R0,#0x100
   \   000000B4   04008DE5           STR      R0,[SP, #+4]
   \   000000B8   0A00A0E3           MOV      R0,#+10
   \   000000BC   00008DE5           STR      R0,[SP, #+0]
   \   000000C0   6C3395E5           LDR      R3,[R5, #+876]
   \   000000C4   ........           LDR      R2,??DataTable113_1
   \   000000C8   0410A0E3           MOV      R1,#+4
   \   000000CC   ............       ADRL     R0,BadNameDialog
   \              ....        
   \   000000D4   ........           BL       GUI_ExecDialogBox
   \   000000D8   980395E5           LDR      R0,[R5, #+920]
   \   000000DC   ........           BL       DisplayKeyboard
    896          				else
    897          				{
    898          					int retval;
    899          
    900          					RSSKillKeyboard();
    901          					if (mode == NEW)
    902          						retval = CreateNewEntry();
    903          					else retval = RenameCurrentEntry();
    904          					
    905          					if (retval == 1)
    906          					{
    907          						// Just created a new track - if "going racing" then exit to go racing screens
    908          						if (ctType == CT_RACE_ENTRY)
    909          						{
    910          							ReloadData(TRACK_DATA);		// Load data for newly created track
    911          							GoRacingStateMachine(pMsg->hWin);
    912          						}
    913          					}
    914          					else if (retval == -2)
    915          					{
    916          						// get new name - put up keyboard
    917          						TryAgainKeyboard();
    918          						break;			// DO NOT UnhideSprites as the keyboard is going right back up
    919          					}
    920          				}
    921          				UnhideSprites();
   \                     ??RaceSetupScreensCallback_14:
   \   000000E0   A80395E5           LDR      R0,[R5, #+936]
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   C802000A           BEQ      ??RaceSetupScreensCallback_10
   \                     ??RaceSetupScreensCallback_11:
   \   000000EC   B00395E5           LDR      R0,[R5, #+944]
   \   000000F0   010040E2           SUB      R0,R0,#+1
   \   000000F4   B00385E5           STR      R0,[R5, #+944]
   \   000000F8   010050E3           CMP      R0,#+1
   \   000000FC   C30200AA           BGE      ??RaceSetupScreensCallback_10
   \   00000100   A80395E5           LDR      R0,[R5, #+936]
   \   00000104   ........           BL       GUI_SPRITE_Show
   \   00000108   AC0395E5           LDR      R0,[R5, #+940]
   \   0000010C   ........           BL       GUI_SPRITE_Show
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   B00385E5           STR      R0,[R5, #+944]
   \   00000118   BC0200EA           B        ??RaceSetupScreensCallback_10
   \                     ??RaceSetupScreensCallback_13:
   \   0000011C   ........           BL       RSSKillKeyboard
   \   00000120   B503D5E5           LDRB     R0,[R5, #+949]
   \   00000124   010050E3           CMP      R0,#+1
   \   00000128   0100001A           BNE      ??RaceSetupScreensCallback_15
   \   0000012C   ........           BL       CreateNewEntry
   \   00000130   000000EA           B        ??RaceSetupScreensCallback_16
   \                     ??RaceSetupScreensCallback_15:
   \   00000134   ........           BL       RenameCurrentEntry
   \                     ??RaceSetupScreensCallback_16:
   \   00000138   010050E3           CMP      R0,#+1
   \   0000013C   0600001A           BNE      ??RaceSetupScreensCallback_17
   \   00000140   B703D5E5           LDRB     R0,[R5, #+951]
   \   00000144   010050E3           CMP      R0,#+1
   \   00000148   E4FFFF1A           BNE      ??RaceSetupScreensCallback_14
   \   0000014C   ........           BL       ReloadData
   \   00000150   040094E5           LDR      R0,[R4, #+4]
   \   00000154   ........           BL       GoRacingStateMachine
   \   00000158   E0FFFFEA           B        ??RaceSetupScreensCallback_14
   \                     ??RaceSetupScreensCallback_17:
   \   0000015C   020070E3           CMN      R0,#+2
   \   00000160   DEFFFF1A           BNE      ??RaceSetupScreensCallback_14
   \   00000164   ........           BL       TryAgainKeyboard
   \   00000168   A80200EA           B        ??RaceSetupScreensCallback_10
    922          				// KMC TODO - now go racing if this was the new create new track button when entering race mode!
    923          			}
    924          			break;
    925          
    926          		case WM_TIMER:
    927          			if (pMsg->Data.v == hScreenTimer)
   \                     ??RaceSetupScreensCallback_8:
   \   0000016C   ........           LDR      R0,??DataTable113_2
   \   00000170   0C1094E5           LDR      R1,[R4, #+12]
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   000051E1           CMP      R1,R0
   \   0000017C   A302001A           BNE      ??RaceSetupScreensCallback_10
    928          			{
    929          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000180   7D10A0E3           MOV      R1,#+125
   \   00000184   ........           BL       WM_RestartTimer
    930          				WM_InvalidateRect(pMsg->hWin, &BannerRect);
   \   00000188   ........           LDR      R1,??DataTable113_3
   \   0000018C   040094E5           LDR      R0,[R4, #+4]
   \   00000190   ........           BL       WM_InvalidateRect
   \   00000194   9D0200EA           B        ??RaceSetupScreensCallback_10
    931          			}
    932          			break;
    933          
    934          		case WM_CREATE:
    935          			RaceSetupIgnoreNextKeyRelease();
   \                     ??RaceSetupScreensCallback_2:
   \   00000198   ........           LDR      R5,??DataTable113
   \   0000019C   0060A0E3           MOV      R6,#+0
   \   000001A0   706385E5           STR      R6,[R5, #+880]
    936          			vehicleSelectionChanged = false;		// Initially mark the vehicle as not changed
   \   000001A4   B463C5E5           STRB     R6,[R5, #+948]
    937          			break;
   \   000001A8   980200EA           B        ??RaceSetupScreensCallback_10
    938          
    939          		case WM_DELETE:
    940          			hTrackList = hDriverList = hVehicleList = 0;
   \                     ??RaceSetupScreensCallback_3:
   \   000001AC   ........           LDR      R5,??DataTable113
   \   000001B0   0060A0E3           MOV      R6,#+0
    941          			DeleteSprites();
   \   000001B4   A80395E5           LDR      R0,[R5, #+936]
   \   000001B8   786385E5           STR      R6,[R5, #+888]
   \   000001BC   746385E5           STR      R6,[R5, #+884]
   \   000001C0   7C6385E5           STR      R6,[R5, #+892]
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   0100000A           BEQ      ??RaceSetupScreensCallback_18
   \   000001CC   ........           BL       GUI_SPRITE_Delete
   \   000001D0   A86385E5           STR      R6,[R5, #+936]
   \                     ??RaceSetupScreensCallback_18:
   \   000001D4   AC0395E5           LDR      R0,[R5, #+940]
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   0100000A           BEQ      ??RaceSetupScreensCallback_19
   \   000001E0   ........           BL       GUI_SPRITE_Delete
   \   000001E4   AC6385E5           STR      R6,[R5, #+940]
   \                     ??RaceSetupScreensCallback_19:
   \   000001E8   B06385E5           STR      R6,[R5, #+944]
    942          			break;
   \   000001EC   870200EA           B        ??RaceSetupScreensCallback_10
    943          
    944          		case WM_PAINT:
    945          			if (ctType == CT_NORMAL_MODE)
   \                     ??RaceSetupScreensCallback_4:
   \   000001F0   ........           LDR      R5,??DataTable113
   \   000001F4   B703D5E5           LDRB     R0,[R5, #+951]
   \   000001F8   000050E3           CMP      R0,#+0
   \   000001FC   0D00001A           BNE      ??RaceSetupScreensCallback_20
    946          			{
    947          				GUI_SetColor(GUI_WHITE);
   \   00000200   FF04E0E3           MVN      R0,#-16777216
   \   00000204   ........           BL       GUI_SetColor
    948          				GUI_SetFont(&GUI_Font24_ASCII);
   \   00000208   ........           LDR      R0,??DataTable113_4
   \   0000020C   ........           BL       GUI_SetFont
    949          
    950          				// Call paint method of center screen
    951          				RaceSetupScreenList[GetLastScreen(RACE_SETUP_SCREENS_TYPE)].paint(hRaceSetupScreens);
   \   00000210   0500A0E3           MOV      R0,#+5
   \   00000214   ........           BL       GetLastScreen
   \   00000218   0010A0E1           MOV      R1,R0
   \   0000021C   0C20A0E3           MOV      R2,#+12
   \   00000220   925121E0           MLA      R1,R2,R1,R5
   \   00000224   6C0395E5           LDR      R0,[R5, #+876]
   \   00000228   081091E5           LDR      R1,[R1, #+8]
   \   0000022C   31FF2FE1           BLX      R1
    952          				DrawSignalStrength();
   \                     ??RaceSetupScreensCallback_21:
   \   00000230   ........           BL       DrawSignalStrength
   \   00000234   750200EA           B        ??RaceSetupScreensCallback_10
    953          			}
    954          			else if (ctType == CT_RACE_ENTRY)
   \                     ??RaceSetupScreensCallback_20:
   \   00000238   010050E3           CMP      R0,#+1
   \   0000023C   7302001A           BNE      ??RaceSetupScreensCallback_10
    955          			{
    956          				GUI_SetColor(GUI_WHITE);
   \   00000240   FF04E0E3           MVN      R0,#-16777216
   \   00000244   ........           BL       GUI_SetColor
    957          				GUI_SetFont(&GUI_Font24_ASCII);
   \   00000248   ........           LDR      R0,??DataTable113_4
   \   0000024C   ........           BL       GUI_SetFont
    958          
    959          				TrackSelectionPaint(hDisplayClosestTracks);
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0010A0E3           MOV      R1,#+0
   \   00000258   ........           LDR      R0,??DataTable114
   \   0000025C   ........           BL       GUI_DrawBitmap
   \   00000260   B703D5E5           LDRB     R0,[R5, #+951]
   \   00000264   010050E3           CMP      R0,#+1
   \   00000268   0300000A           BEQ      ??RaceSetupScreensCallback_22
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   3C10A0E3           MOV      R1,#+60
   \   00000274   ........           LDR      R0,??DataTable114_1
   \   00000278   0C0000EA           B        ??RaceSetupScreensCallback_23
   \                     ??RaceSetupScreensCallback_22:
   \   0000027C   0200A0E3           MOV      R0,#+2
   \   00000280   ........           BL       GUI_SetTextMode
   \   00000284   940395E5           LDR      R0,[R5, #+916]
   \   00000288   000050E3           CMP      R0,#+0
   \   0000028C   0400001A           BNE      ??RaceSetupScreensCallback_24
   \   00000290   3B20A0E3           MOV      R2,#+59
   \   00000294   5A1FA0E3           MOV      R1,#+360
   \   00000298   ............       ADRL     R0,`?<Constant "Track out of range">`
   \              ....        
   \   000002A0   ........           BL       GUI_DispStringHCenterAt
   \                     ??RaceSetupScreensCallback_24:
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   3C10A0E3           MOV      R1,#+60
   \   000002AC   ........           LDR      R0,??DataTable114_2
   \                     ??RaceSetupScreensCallback_23:
   \   000002B0   ........           BL       GUI_DrawBitmap
   \   000002B4   E520A0E3           MOV      R2,#+229
   \   000002B8   0010A0E3           MOV      R1,#+0
   \   000002BC   ........           LDR      R0,??DataTable114_3
   \   000002C0   ........           BL       GUI_DrawBitmap
    960          
    961          				DrawSignalStrength();
   \   000002C4   D9FFFFEA           B        ??RaceSetupScreensCallback_21
    962          			}
    963          			break;
    964          
    965          		case WM_NOTIFY_PARENT:
    966          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??RaceSetupScreensCallback_7:
   \   000002C8   080094E5           LDR      R0,[R4, #+8]
   \   000002CC   ........           BL       WM_GetId
   \   000002D0   0070A0E1           MOV      R7,R0
    967          			NCode = pMsg->Data.v;				// Notification code
    968          			switch (NCode)
   \   000002D4   0C0094E5           LDR      R0,[R4, #+12]
   \   000002D8   010050E2           SUBS     R0,R0,#+1
   \   000002DC   4C00000A           BEQ      ??RaceSetupScreensCallback_25
   \   000002E0   010050E2           SUBS     R0,R0,#+1
   \   000002E4   4F00000A           BEQ      ??RaceSetupScreensCallback_26
   \   000002E8   020050E2           SUBS     R0,R0,#+2
   \   000002EC   4702001A           BNE      ??RaceSetupScreensCallback_10
    969          			{
    970          				case WM_NOTIFICATION_SEL_CHANGED:
    971          					if (Id == TRACKLIST)
   \   000002F0   0300A0E3           MOV      R0,#+3
   \   000002F4   800F80E3           ORR      R0,R0,#0x200
   \   000002F8   000057E1           CMP      R7,R0
   \   000002FC   2900001A           BNE      ??RaceSetupScreensCallback_27
    972          						SelectThisTrack(LISTVIEW_GetSel(hTrackList));
   \   00000300   ........           LDR      R5,??DataTable113
   \   00000304   7C0395E5           LDR      R0,[R5, #+892]
   \   00000308   ........           BL       LISTVIEW_GetSel
   \   0000030C   0040B0E1           MOVS     R4,R0
   \   00000310   3E02004A           BMI      ??RaceSetupScreensCallback_10
   \   00000314   1000A0E3           MOV      R0,#+16
   \   00000318   00008DE5           STR      R0,[SP, #+0]
   \   0000031C   04308DE2           ADD      R3,SP,#+4
   \   00000320   0420A0E1           MOV      R2,R4
   \   00000324   0010A0E3           MOV      R1,#+0
   \   00000328   7C0395E5           LDR      R0,[R5, #+892]
   \   0000032C   ........           BL       LISTVIEW_GetItemText
   \   00000330   ........           LDR      R10,??DataTable114_4
   \   00000334   00B0A0E3           MOV      R11,#+0
   \   00000338   0A60A0E1           MOV      R6,R10
   \   0000033C   4870A0E3           MOV      R7,#+72
   \   00000340   ........           LDR      R8,??DataTable114_5
   \   00000344   ........           LDR      R9,??DataTable114_6
   \   00000348   000000EA           B        ??RaceSetupScreensCallback_28
   \                     ??RaceSetupScreensCallback_29:
   \   0000034C   01B08BE2           ADD      R11,R11,#+1
   \                     ??RaceSetupScreensCallback_28:
   \   00000350   000099E5           LDR      R0,[R9, #+0]
   \   00000354   00005BE1           CMP      R11,R0
   \   00000358   050000AA           BGE      ??RaceSetupScreensCallback_30
   \   0000035C   040096E4           LDR      R0,[R6], #+4
   \   00000360   04108DE2           ADD      R1,SP,#+4
   \   00000364   978020E0           MLA      R0,R7,R0,R8
   \   00000368   ........           BL       strcmp
   \   0000036C   000050E3           CMP      R0,#+0
   \   00000370   F5FFFF1A           BNE      ??RaceSetupScreensCallback_29
   \                     ??RaceSetupScreensCallback_30:
   \   00000374   000099E5           LDR      R0,[R9, #+0]
   \   00000378   00005BE1           CMP      R11,R0
   \   0000037C   2302000A           BEQ      ??RaceSetupScreensCallback_10
   \   00000380   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   00000384   A00385E5           STR      R0,[R5, #+928]
   \   00000388   3C0095E5           LDR      R0,[R5, #+60]
   \   0000038C   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \                     ??RaceSetupScreensCallback_31:
   \   00000390   F30F85E2           ADD      R0,R5,#+972
   \   00000394   ........           BL       strcpy
   \   00000398   F31F85E2           ADD      R1,R5,#+972
   \   0000039C   ........           LDR      R0,??DataTable114_7
   \                     ??RaceSetupScreensCallback_32:
   \   000003A0   ........           BL       strcpy
   \   000003A4   190200EA           B        ??RaceSetupScreensCallback_10
    973          					else
    974          					{
    975          						switch(Id)
   \                     ??RaceSetupScreensCallback_27:
   \   000003A8   018047E2           SUB      R8,R7,#+1
   \   000003AC   808F58E2           SUBS     R8,R8,#+512
   \   000003B0   0200000A           BEQ      ??RaceSetupScreensCallback_33
   \   000003B4   018058E2           SUBS     R8,R8,#+1
   \   000003B8   0B00000A           BEQ      ??RaceSetupScreensCallback_34
   \   000003BC   130200EA           B        ??RaceSetupScreensCallback_10
    976          						{
    977          						case DRIVERLIST:
    978          							Sel = LISTVIEW_GetSelUnsorted(pMsg->hWinSrc);
   \                     ??RaceSetupScreensCallback_33:
   \   000003C0   080094E5           LDR      R0,[R4, #+8]
   \   000003C4   ........           BL       LISTVIEW_GetSelUnsorted
   \   000003C8   0040A0E1           MOV      R4,R0
    979          							strcpy(sysData.driver, pDrivers[Sel]);	// Set new driver name in sysData structure
   \   000003CC   ........           LDR      R0,??DataTable113
   \   000003D0   040180E0           ADD      R0,R0,R4, LSL #+2
   \   000003D4   441090E5           LDR      R1,[R0, #+68]
   \   000003D8   ........           LDR      R0,??DataTable114_8
   \   000003DC   ........           BL       strcpy
    980          							ReloadData(DRIVER_DATA);				// Load new driver data
   \   000003E0   0300A0E3           MOV      R0,#+3
   \   000003E4   ........           BL       ReloadData
    981          							break;
   \   000003E8   080200EA           B        ??RaceSetupScreensCallback_10
    982          						case VEHICLELIST:
    983          							Sel = LISTVIEW_GetSelUnsorted(pMsg->hWinSrc);	// Get current selection
   \                     ??RaceSetupScreensCallback_34:
   \   000003EC   080094E5           LDR      R0,[R4, #+8]
   \   000003F0   ........           BL       LISTVIEW_GetSelUnsorted
    984          							strcpy(tempVehicleName, pVehicles[Sel]);	// Temporarily save the name of the new vahicle
   \   000003F4   ........           LDR      R5,??DataTable113
   \   000003F8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000003FC   101190E5           LDR      R1,[R0, #+272]
   \   00000400   430C85E2           ADD      R0,R5,#+17152
   \   00000404   ........           BL       strcpy
    985          							vehicleSelectionChanged = true;				// Mark the vehicle as changed to process at screen exit
   \   00000408   0100A0E3           MOV      R0,#+1
   \   0000040C   B403C5E5           STRB     R0,[R5, #+948]
    986          							break;
   \   00000410   FE0100EA           B        ??RaceSetupScreensCallback_10
    987          						}
    988          					}
    989          					break;
    990          
    991          				case WM_NOTIFICATION_CLICKED:
    992          					clickedOnThisScreen = true;
   \                     ??RaceSetupScreensCallback_25:
   \   00000414   ........           LDR      R0,??DataTable113
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   701380E5           STR      R1,[R0, #+880]
    993          					break;
   \   00000420   FA0100EA           B        ??RaceSetupScreensCallback_10
   \                     ??RaceSetupScreensCallback_12:
   \   00000424   00000000           DC8      "",0x0,0x0,0x0
    994          
    995          				case WM_NOTIFICATION_RELEASED:
    996          					pressingbutton_semaphore = 0;
   \                     ??RaceSetupScreensCallback_26:
   \   00000428   ........           LDR      R0,??DataTable114_9
   \   0000042C   0060A0E3           MOV      R6,#+0
    997          					if (!clickedOnThisScreen)
   \   00000430   ........           LDR      R5,??DataTable113
   \   00000434   006080E5           STR      R6,[R0, #+0]
   \   00000438   700395E5           LDR      R0,[R5, #+880]
   \   0000043C   000050E3           CMP      R0,#+0
   \   00000440   F201000A           BEQ      ??RaceSetupScreensCallback_10
    998          						break;
    999          					{
   1000          						char scratch[30];
   1001          
   1002          						switch (Id)
   \   00000444   010047E2           SUB      R0,R7,#+1
   \   00000448   800E40E2           SUB      R0,R0,#+2048
   \   0000044C   110050E3           CMP      R0,#+17
   \   00000450   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??RaceSetupScreensCallback_0:
   \   00000454   ED01008A           BHI      ??RaceSetupScreensCallback_10
   \   00000458   EB0000EA           B        ??RaceSetupScreensCallback_35
   \   0000045C   EA0000EA           B        ??RaceSetupScreensCallback_35
   \   00000460   340100EA           B        ??RaceSetupScreensCallback_36
   \   00000464   950000EA           B        ??RaceSetupScreensCallback_37
   \   00000468   E70000EA           B        ??RaceSetupScreensCallback_35
   \   0000046C   520100EA           B        ??RaceSetupScreensCallback_38
   \   00000470   B00000EA           B        ??RaceSetupScreensCallback_39
   \   00000474   3F0100EA           B        ??RaceSetupScreensCallback_40
   \   00000478   C30100EA           B        ??RaceSetupScreensCallback_41
   \   0000047C   D30100EA           B        ??RaceSetupScreensCallback_42
   \   00000480   980100EA           B        ??RaceSetupScreensCallback_43
   \   00000484   050000EA           B        ??RaceSetupScreensCallback_44
   \   00000488   F40000EA           B        ??RaceSetupScreensCallback_45
   \   0000048C   FD0000EA           B        ??RaceSetupScreensCallback_46
   \   00000490   1A0100EA           B        ??RaceSetupScreensCallback_47
   \   00000494   DD0100EA           B        ??RaceSetupScreensCallback_10
   \   00000498   B80000EA           B        ??RaceSetupScreensCallback_48
   \   0000049C   590100EA           B        ??RaceSetupScreensCallback_49
   1003          						{
   1004          						case SELECT_RADIUS_BUTTON:
   1005          							if (sysData.radius == 3219)
   \                     ??RaceSetupScreensCallback_44:
   \   000004A0   ........           LDR      R6,??DataTable114_10
   \   000004A4   9370A0E3           MOV      R7,#+147
   \   000004A8   B40096E5           LDR      R0,[R6, #+180]
   \   000004AC   C07E87E3           ORR      R7,R7,#0xC00
   \   000004B0   070050E1           CMP      R0,R7
   \   000004B4   0200001A           BNE      ??RaceSetupScreensCallback_50
   1006          								sysData.radius = WHOLE_WORLD;
   \                     ??RaceSetupScreensCallback_51:
   \   000004B8   5070A0E3           MOV      R7,#+80
   \   000004BC   C37C87E3           ORR      R7,R7,#0xC300
   \   000004C0   1D0000EA           B        ??RaceSetupScreensCallback_52
   1007          							else
   1008          							{
   1009          								if (!HaveSatelliteReception())
   \                     ??RaceSetupScreensCallback_50:
   \   000004C4   ........           BL       HaveSatelliteReception
   \   000004C8   000050E3           CMP      R0,#+0
   \   000004CC   B40096E5           LDR      R0,[R6, #+180]
   \   000004D0   0400001A           BNE      ??RaceSetupScreensCallback_53
   1010          								{
   1011          									if (sysData.radius >= OLD_WORLD)
   \   000004D4   2010A0E3           MOV      R1,#+32
   \   000004D8   4E1C81E3           ORR      R1,R1,#0x4E00
   \   000004DC   010050E1           CMP      R0,R1
   \   000004E0   F4FFFFBA           BLT      ??RaceSetupScreensCallback_51
   \   000004E4   C90100EA           B        ??RaceSetupScreensCallback_10
   1012          										break;
   1013          									else sysData.radius = WHOLE_WORLD;
   1014          								}
   1015          								else
   1016          								{
   1017          									switch (sysData.radius)
   \                     ??RaceSetupScreensCallback_53:
   \   000004E8   A10050E2           SUBS     R0,R0,#+161
   \   000004EC   0800000A           BEQ      ??RaceSetupScreensCallback_54
   \   000004F0   A10050E2           SUBS     R0,R0,#+161
   \   000004F4   0900000A           BEQ      ??RaceSetupScreensCallback_55
   \   000004F8   E30040E2           SUB      R0,R0,#+227
   \   000004FC   400F50E2           SUBS     R0,R0,#+256
   \   00000500   0900000A           BEQ      ??RaceSetupScreensCallback_56
   \   00000504   250040E2           SUB      R0,R0,#+37
   \   00000508   C00F50E2           SUBS     R0,R0,#+768
   \   0000050C   0A00000A           BEQ      ??RaceSetupScreensCallback_52
   \   00000510   080000EA           B        ??RaceSetupScreensCallback_57
   1018          									{
   1019          									case DEFAULT_RADIUS:	sysData.radius = 322;				break;
   \                     ??RaceSetupScreensCallback_54:
   \   00000514   4270A0E3           MOV      R7,#+66
   \   00000518   407F87E3           ORR      R7,R7,#0x100
   \   0000051C   060000EA           B        ??RaceSetupScreensCallback_52
   1020          									case 322:				sysData.radius = 805;				break;
   \                     ??RaceSetupScreensCallback_55:
   \   00000520   2570A0E3           MOV      R7,#+37
   \   00000524   C07F87E3           ORR      R7,R7,#0x300
   \   00000528   030000EA           B        ??RaceSetupScreensCallback_52
   1021          									case 805:				sysData.radius = 1610;				break;
   \                     ??RaceSetupScreensCallback_56:
   \   0000052C   4A70A0E3           MOV      R7,#+74
   \   00000530   607E87E3           ORR      R7,R7,#0x600
   \   00000534   000000EA           B        ??RaceSetupScreensCallback_52
   1022          									case 1610:				sysData.radius = 3219;				break;
   1023          									default:
   1024          									case WHOLE_WORLD:		sysData.radius = DEFAULT_RADIUS;	break;
   \                     ??RaceSetupScreensCallback_57:
   \   00000538   A170A0E3           MOV      R7,#+161
   1025          									}
   1026          								}
   1027          							}
   1028          							BUTTON_SetText(pMsg->hWinSrc, GetRadiusText(scratch));
   \                     ??RaceSetupScreensCallback_52:
   \   0000053C   2000A0E3           MOV      R0,#+32
   \   00000540   0720A0E1           MOV      R2,R7
   \   00000544   4E0C80E3           ORR      R0,R0,#0x4E00
   \   00000548   B47086E5           STR      R7,[R6, #+180]
   \   0000054C   000052E1           CMP      R2,R0
   \   00000550   100000AA           BGE      ??RaceSetupScreensCallback_58
   \   00000554   640096E5           LDR      R0,[R6, #+100]
   \   00000558   010050E3           CMP      R0,#+1
   \   0000055C   0A00000A           BEQ      ??RaceSetupScreensCallback_59
   \   00000560   0200A0E1           MOV      R0,R2
   \   00000564   ........           BL       __aeabi_i2f
   \   00000568   ........           LDR      R1,??DataTable115  ;; 0x3f1f122f
   \   0000056C   ........           BL       __aeabi_fmul
   \   00000570   ........           BL       __aeabi_f2iz
   \   00000574   0020A0E1           MOV      R2,R0
   \   00000578   ............       ADRL     R1,`?<Constant "Within %d miles">`
   \              ....        
   \                     ??RaceSetupScreensCallback_60:
   \   00000580   18008DE2           ADD      R0,SP,#+24
   \   00000584   ........           BL       sprintf
   \   00000588   070000EA           B        ??RaceSetupScreensCallback_61
   \                     ??RaceSetupScreensCallback_59:
   \   0000058C   ............       ADRL     R1,`?<Constant "Within %d km">`
   \              ....        
   \   00000594   F9FFFFEA           B        ??RaceSetupScreensCallback_60
   \                     ??RaceSetupScreensCallback_58:
   \   00000598   1320A0E3           MOV      R2,#+19
   \   0000059C   ............       ADRL     R1,`?<Constant "All Tracks - World">`
   \              ....        
   \   000005A4   18008DE2           ADD      R0,SP,#+24
   \   000005A8   ........           BL       __aeabi_memcpy4
   \                     ??RaceSetupScreensCallback_61:
   \   000005AC   18108DE2           ADD      R1,SP,#+24
   \   000005B0   080094E5           LDR      R0,[R4, #+8]
   \   000005B4   ........           BL       BUTTON_SetText
   1029          
   1030          							UpdateTrackList(GetTrackSelectionWindowHandle());
   \   000005B8   ........           BL       GetScreenType
   \   000005BC   050050E3           CMP      R0,#+5
   \   000005C0   ........           LDRNE    R0,??DataTable116
   \   000005C4   6C039505           LDREQ    R0,[R5, #+876]
   \   000005C8   00009015           LDRNE    R0,[R0, #+0]
   \   000005CC   ........           BL       UpdateTrackList
   1031          
   1032          							Sel = FindSelection(TRACK_DATA);
   \   000005D0   A000D6E5           LDRB     R0,[R6, #+160]
   \   000005D4   3C7095E5           LDR      R7,[R5, #+60]
   \   000005D8   000050E3           CMP      R0,#+0
   \   000005DC   0B00000A           BEQ      ??RaceSetupScreensCallback_62
   \   000005E0   0040A0E3           MOV      R4,#+0
   \   000005E4   000000EA           B        ??RaceSetupScreensCallback_63
   \                     ??RaceSetupScreensCallback_64:
   \   000005E8   014084E2           ADD      R4,R4,#+1
   \                     ??RaceSetupScreensCallback_63:
   \   000005EC   000097E5           LDR      R0,[R7, #+0]
   \   000005F0   000050E3           CMP      R0,#+0
   \   000005F4   0500000A           BEQ      ??RaceSetupScreensCallback_62
   \   000005F8   A01086E2           ADD      R1,R6,#+160
   \   000005FC   040097E4           LDR      R0,[R7], #+4
   \   00000600   ........           BL       strcmp
   \   00000604   000050E3           CMP      R0,#+0
   \   00000608   F6FFFF1A           BNE      ??RaceSetupScreensCallback_64
   \   0000060C   000000EA           B        ??RaceSetupScreensCallback_65
   \                     ??RaceSetupScreensCallback_62:
   \   00000610   0040A0E3           MOV      R4,#+0
   1033          							LISTVIEW_SetSel(hTrackList, Sel);
   \                     ??RaceSetupScreensCallback_65:
   \   00000614   0410A0E1           MOV      R1,R4
   \   00000618   7C0395E5           LDR      R0,[R5, #+892]
   \   0000061C   ........           BL       LISTVIEW_SetSel
   1034          
   1035          							SelectThisTrack(Sel);
   \   00000620   000054E3           CMP      R4,#+0
   \   00000624   7901004A           BMI      ??RaceSetupScreensCallback_10
   \   00000628   1000A0E3           MOV      R0,#+16
   \   0000062C   00008DE5           STR      R0,[SP, #+0]
   \   00000630   04308DE2           ADD      R3,SP,#+4
   \   00000634   0420A0E1           MOV      R2,R4
   \   00000638   0010A0E3           MOV      R1,#+0
   \   0000063C   7C0395E5           LDR      R0,[R5, #+892]
   \   00000640   ........           BL       LISTVIEW_GetItemText
   \   00000644   ........           LDR      R10,??DataTable114_4
   \   00000648   00B0A0E3           MOV      R11,#+0
   \   0000064C   00A08DE5           STR      R10,[SP, #+0]
   \   00000650   4870A0E3           MOV      R7,#+72
   \   00000654   ........           LDR      R8,??DataTable114_5
   \   00000658   ........           LDR      R9,??DataTable114_6
   \   0000065C   000000EA           B        ??RaceSetupScreensCallback_66
   \                     ??RaceSetupScreensCallback_67:
   \   00000660   01B08BE2           ADD      R11,R11,#+1
   \                     ??RaceSetupScreensCallback_66:
   \   00000664   000099E5           LDR      R0,[R9, #+0]
   \   00000668   00005BE1           CMP      R11,R0
   \   0000066C   070000AA           BGE      ??RaceSetupScreensCallback_68
   \   00000670   00209DE5           LDR      R2,[SP, #+0]
   \   00000674   04108DE2           ADD      R1,SP,#+4
   \   00000678   043092E4           LDR      R3,[R2], #+4
   \   0000067C   00208DE5           STR      R2,[SP, #+0]
   \   00000680   978320E0           MLA      R0,R7,R3,R8
   \   00000684   ........           BL       strcmp
   \   00000688   000050E3           CMP      R0,#+0
   \   0000068C   F3FFFF1A           BNE      ??RaceSetupScreensCallback_67
   \                     ??RaceSetupScreensCallback_68:
   \   00000690   000099E5           LDR      R0,[R9, #+0]
   \   00000694   00005BE1           CMP      R11,R0
   \   00000698   5C01000A           BEQ      ??RaceSetupScreensCallback_10
   \   0000069C   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   000006A0   A00385E5           STR      R0,[R5, #+928]
   \   000006A4   3C0095E5           LDR      R0,[R5, #+60]
   \   000006A8   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \   000006AC   F30F85E2           ADD      R0,R5,#+972
   \   000006B0   ........           BL       strcpy
   \   000006B4   F31F85E2           ADD      R1,R5,#+972
   \   000006B8   A00086E2           ADD      R0,R6,#+160
   \   000006BC   37FFFFEA           B        ??RaceSetupScreensCallback_32
   1036          							break;
   1037          
   1038          						case VEHICLE_SETTINGS_BUTTON:
   1039          							if (vehicleSelectionChanged == true)	// If the vehicle selection has changed on this screen
   \                     ??RaceSetupScreensCallback_37:
   \   000006C0   B403D5E5           LDRB     R0,[R5, #+948]
   \   000006C4   010050E3           CMP      R0,#+1
   \   000006C8   0C00001A           BNE      ??RaceSetupScreensCallback_69
   1040          								ChangeVehicle();					// Validate and make the change in the database
   \   000006CC   434C85E2           ADD      R4,R5,#+17152
   \   000006D0   0410A0E1           MOV      R1,R4
   \   000006D4   ........           LDR      R0,??DataTable116_1
   \   000006D8   ........           BL       strcpy
   \   000006DC   0410A0E1           MOV      R1,R4
   \   000006E0   EE0F85E2           ADD      R0,R5,#+952
   \   000006E4   ........           BL       strcpy
   \   000006E8   0200A0E3           MOV      R0,#+2
   \   000006EC   ........           BL       ReloadData
   \   000006F0   0000A0E3           MOV      R0,#+0
   \   000006F4   ........           BL       SetGear
   \   000006F8   B463C5E5           STRB     R6,[R5, #+948]
   \   000006FC   ........           BL       ValidateCameraData
   1041          							HideSprites();
   \                     ??RaceSetupScreensCallback_69:
   \   00000700   A80395E5           LDR      R0,[R5, #+936]
   \   00000704   000050E3           CMP      R0,#+0
   \   00000708   0700000A           BEQ      ??RaceSetupScreensCallback_70
   \   0000070C   B01395E5           LDR      R1,[R5, #+944]
   \   00000710   012081E2           ADD      R2,R1,#+1
   \   00000714   B02385E5           STR      R2,[R5, #+944]
   \   00000718   000051E3           CMP      R1,#+0
   \   0000071C   0200001A           BNE      ??RaceSetupScreensCallback_70
   \   00000720   ........           BL       GUI_SPRITE_Hide
   \   00000724   AC0395E5           LDR      R0,[R5, #+940]
   \   00000728   ........           BL       GUI_SPRITE_Hide
   1042          							Display_VehicleSettingMainScreen(hRaceSetupScreens);
   \                     ??RaceSetupScreensCallback_70:
   \   0000072C   6C0395E5           LDR      R0,[R5, #+876]
   \   00000730   ........           BL       Display_VehicleSettingMainScreen
   1043          							break;
   \   00000734   350100EA           B        ??RaceSetupScreensCallback_10
   1044          
   1045          						case TRACK_SETTINGS_BUTTON:
   1046          							if (numTracks != 0)
   \                     ??RaceSetupScreensCallback_39:
   \   00000738   940395E5           LDR      R0,[R5, #+916]
   \   0000073C   000050E3           CMP      R0,#+0
   \   00000740   3201000A           BEQ      ??RaceSetupScreensCallback_10
   1047          							{
   1048          #ifdef _WINDOWS
   1049          								CheckWorkingTrackName();
   1050          								Display_TrackSettingMainScreen(hRaceSetupScreens);
   1051          #else
   1052          								if (unsavedSysData.sdCardInserted)
   \   00000744   ........           LDR      R0,??DataTable105
   \   00000748   C00090E5           LDR      R0,[R0, #+192]
   \   0000074C   000050E3           CMP      R0,#+0
   \   00000750   0700000A           BEQ      ??RaceSetupScreensCallback_71
   1053          								{
   1054          									CheckWorkingTrackName();
   \   00000754   F31F85E2           ADD      R1,R5,#+972
   \   00000758   ........           LDR      R0,??DataTable114_7
   \   0000075C   ........           BL       strcpy
   \   00000760   0100A0E3           MOV      R0,#+1
   \   00000764   ........           BL       ReloadData
   1055          									Display_TrackSettingMainScreen(hRaceSetupScreens);
   \   00000768   6C0395E5           LDR      R0,[R5, #+876]
   \   0000076C   ........           BL       Display_TrackSettingMainScreen
   \   00000770   260100EA           B        ??RaceSetupScreensCallback_10
   1056          								}
   1057          								else NotSupportedPopup(hRaceSetupScreens);
   \                     ??RaceSetupScreensCallback_71:
   \   00000774   6C0395E5           LDR      R0,[R5, #+876]
   \   00000778   ........           BL       NotSupportedPopup
   \   0000077C   230100EA           B        ??RaceSetupScreensCallback_10
   1058          #endif
   1059          							}
   1060          							break;
   1061          
   1062          						case TRACK_TYPE_BUTTON:
   1063          							IncrementSessionType();
   \                     ??RaceSetupScreensCallback_48:
   \   00000780   ........           BL       IncrementSessionType
   1064          							SetTrackTypeButtonText();
   \   00000784   ........           BL       SetTrackTypeButtonText
   1065          							UpdateTrackList(hRaceSetupScreens);		// TRACK_TYPE_BUTTON only exists on the Race Setup Screen (not display closest tracks screen)
   \   00000788   6C0395E5           LDR      R0,[R5, #+876]
   \   0000078C   ........           BL       UpdateTrackList
   1066          							SelectThisTrack(0);				// When cycling through track types always reselect the first track in the list (closest)
   \   00000790   1000A0E3           MOV      R0,#+16
   \   00000794   00008DE5           STR      R0,[SP, #+0]
   \   00000798   04308DE2           ADD      R3,SP,#+4
   \   0000079C   0020A0E3           MOV      R2,#+0
   \   000007A0   0010A0E3           MOV      R1,#+0
   \   000007A4   7C0395E5           LDR      R0,[R5, #+892]
   \   000007A8   ........           BL       LISTVIEW_GetItemText
   \   000007AC   ........           LDR      R10,??DataTable114_4
   \   000007B0   4870A0E3           MOV      R7,#+72
   \   000007B4   0A40A0E1           MOV      R4,R10
   \   000007B8   ........           LDR      R8,??DataTable114_5
   \   000007BC   ........           LDR      R9,??DataTable114_6
   \   000007C0   000000EA           B        ??RaceSetupScreensCallback_72
   \                     ??RaceSetupScreensCallback_73:
   \   000007C4   016086E2           ADD      R6,R6,#+1
   \                     ??RaceSetupScreensCallback_72:
   \   000007C8   000099E5           LDR      R0,[R9, #+0]
   \   000007CC   000056E1           CMP      R6,R0
   \   000007D0   050000AA           BGE      ??RaceSetupScreensCallback_74
   \   000007D4   040094E4           LDR      R0,[R4], #+4
   \   000007D8   04108DE2           ADD      R1,SP,#+4
   \   000007DC   978020E0           MLA      R0,R7,R0,R8
   \   000007E0   ........           BL       strcmp
   \   000007E4   000050E3           CMP      R0,#+0
   \   000007E8   F5FFFF1A           BNE      ??RaceSetupScreensCallback_73
   \                     ??RaceSetupScreensCallback_74:
   \   000007EC   000099E5           LDR      R0,[R9, #+0]
   \   000007F0   000056E1           CMP      R6,R0
   \   000007F4   0501000A           BEQ      ??RaceSetupScreensCallback_10
   \   000007F8   06019AE7           LDR      R0,[R10, +R6, LSL #+2]
   \   000007FC   A00385E5           STR      R0,[R5, #+928]
   \   00000800   3C0095E5           LDR      R0,[R5, #+60]
   \   00000804   001090E5           LDR      R1,[R0, #+0]
   \   00000808   E0FEFFEA           B        ??RaceSetupScreensCallback_31
   1067          							break;
   1068          
   1069          						case NEW_DRIVER_BUTTON:
   1070          						case NEW_VEHICLE_BUTTON:
   1071          						case NEW_TRACK_BUTTON:
   1072          							HideSprites();
   \                     ??RaceSetupScreensCallback_35:
   \   0000080C   A80395E5           LDR      R0,[R5, #+936]
   \   00000810   000050E3           CMP      R0,#+0
   \   00000814   0700000A           BEQ      ??RaceSetupScreensCallback_75
   \   00000818   B01395E5           LDR      R1,[R5, #+944]
   \   0000081C   012081E2           ADD      R2,R1,#+1
   \   00000820   B02385E5           STR      R2,[R5, #+944]
   \   00000824   000051E3           CMP      R1,#+0
   \   00000828   0200001A           BNE      ??RaceSetupScreensCallback_75
   \   0000082C   ........           BL       GUI_SPRITE_Hide
   \   00000830   AC0395E5           LDR      R0,[R5, #+940]
   \   00000834   ........           BL       GUI_SPRITE_Hide
   1073          #ifdef _WINDOWS
   1074          							mode = NEW;
   1075          							DisplayKeyboard(button = Id);
   1076          #else
   1077          							if (unsavedSysData.sdCardInserted)
   \                     ??RaceSetupScreensCallback_75:
   \   00000838   ........           LDR      R0,??DataTable105
   \   0000083C   C00090E5           LDR      R0,[R0, #+192]
   \   00000840   000050E3           CMP      R0,#+0
   \   00000844   CAFFFF0A           BEQ      ??RaceSetupScreensCallback_71
   1078          							{
   1079          								mode = NEW;
   \   00000848   0100A0E3           MOV      R0,#+1
   \   0000084C   B503C5E5           STRB     R0,[R5, #+949]
   1080          								DisplayKeyboard(button = Id);
   \                     ??RaceSetupScreensCallback_76:
   \   00000850   987385E5           STR      R7,[R5, #+920]
   \   00000854   0700A0E1           MOV      R0,R7
   \   00000858   ........           BL       DisplayKeyboard
   \   0000085C   EB0000EA           B        ??RaceSetupScreensCallback_10
   1081          							}
   1082          							else NotSupportedPopup(hRaceSetupScreens);
   1083          #endif
   1084          							break;
   1085          
   1086          						case DELETE_DRIVER_BUTTON:
   1087          							if (numDrivers > 1)
   \                     ??RaceSetupScreensCallback_45:
   \   00000860   8C0395E5           LDR      R0,[R5, #+908]
   \   00000864   020050E3           CMP      R0,#+2
   \   00000868   E80000BA           BLT      ??RaceSetupScreensCallback_10
   1088          							{
   1089          								if (RaceSetupPopup(DELETE_DRIVER_BUTTON))
   \   0000086C   0D00A0E3           MOV      R0,#+13
   \   00000870   800E80E3           ORR      R0,R0,#0x800
   \   00000874   ........           BL       RaceSetupPopup
   \   00000878   000050E3           CMP      R0,#+0
   \   0000087C   E300000A           BEQ      ??RaceSetupScreensCallback_10
   1090          									RSDeleteDriver();
   \   00000880   ........           BL       RSDeleteDriver
   \   00000884   E10000EA           B        ??RaceSetupScreensCallback_10
   1091          							}
   1092          							break;
   1093          
   1094          						case DELETE_VEHICLE_BUTTON:
   1095          							if (vehicleSelectionChanged == true)	// If the vehicle selection has changed on this screen
   \                     ??RaceSetupScreensCallback_46:
   \   00000888   B403D5E5           LDRB     R0,[R5, #+948]
   \   0000088C   010050E3           CMP      R0,#+1
   \   00000890   0C00001A           BNE      ??RaceSetupScreensCallback_77
   1096          								ChangeVehicle();					// Validate and make the change in the database
   \   00000894   434C85E2           ADD      R4,R5,#+17152
   \   00000898   0410A0E1           MOV      R1,R4
   \   0000089C   ........           LDR      R0,??DataTable116_1
   \   000008A0   ........           BL       strcpy
   \   000008A4   0410A0E1           MOV      R1,R4
   \   000008A8   EE0F85E2           ADD      R0,R5,#+952
   \   000008AC   ........           BL       strcpy
   \   000008B0   0200A0E3           MOV      R0,#+2
   \   000008B4   ........           BL       ReloadData
   \   000008B8   0000A0E3           MOV      R0,#+0
   \   000008BC   ........           BL       SetGear
   \   000008C0   B463C5E5           STRB     R6,[R5, #+948]
   \   000008C4   ........           BL       ValidateCameraData
   1097          #ifndef _WINDOWS
   1098          							if (!unsavedSysData.sdCardInserted)
   \                     ??RaceSetupScreensCallback_77:
   \   000008C8   ........           LDR      R0,??DataTable105
   \   000008CC   C00090E5           LDR      R0,[R0, #+192]
   \   000008D0   000050E3           CMP      R0,#+0
   \   000008D4   A6FFFF0A           BEQ      ??RaceSetupScreensCallback_71
   1099          							{
   1100          								NotSupportedPopup(hRaceSetupScreens);
   1101          								break;
   1102          							}
   1103          #endif
   1104          							if (numVehicles > 1)
   \   000008D8   900395E5           LDR      R0,[R5, #+912]
   \   000008DC   020050E3           CMP      R0,#+2
   \   000008E0   CA0000BA           BLT      ??RaceSetupScreensCallback_10
   1105          							{
   1106          								if (RaceSetupPopup(DELETE_VEHICLE_BUTTON))
   \   000008E4   0E00A0E3           MOV      R0,#+14
   \   000008E8   800E80E3           ORR      R0,R0,#0x800
   \   000008EC   ........           BL       RaceSetupPopup
   \   000008F0   000050E3           CMP      R0,#+0
   \   000008F4   C500000A           BEQ      ??RaceSetupScreensCallback_10
   1107          									RSDeleteVehicle();
   \   000008F8   ........           BL       RSDeleteVehicle
   \   000008FC   C30000EA           B        ??RaceSetupScreensCallback_10
   1108          							}
   1109          							break;
   1110          
   1111          						case DELETE_TRACK_BUTTON:
   1112          							if (numTracks != 0)
   \                     ??RaceSetupScreensCallback_47:
   \   00000900   940395E5           LDR      R0,[R5, #+916]
   \   00000904   000050E3           CMP      R0,#+0
   \   00000908   C000000A           BEQ      ??RaceSetupScreensCallback_10
   1113          							{
   1114          								if (RaceSetupPopup(DELETE_TRACK_BUTTON))
   \   0000090C   0F00A0E3           MOV      R0,#+15
   \   00000910   800E80E3           ORR      R0,R0,#0x800
   \   00000914   ........           BL       RaceSetupPopup
   \   00000918   000050E3           CMP      R0,#+0
   \   0000091C   BB00000A           BEQ      ??RaceSetupScreensCallback_10
   1115          								{
   1116          									if (!RSDeleteTrack())
   \   00000920   ........           BL       RSDeleteTrack
   \   00000924   000050E3           CMP      R0,#+0
   \   00000928   B800001A           BNE      ??RaceSetupScreensCallback_10
   1117          										RaceSetupPopup(CANT_DELETE_TRACK);
   \   0000092C   810EA0E3           MOV      R0,#+2064
   \   00000930   ........           BL       RaceSetupPopup
   \   00000934   B50000EA           B        ??RaceSetupScreensCallback_10
   1118          								}
   1119          							}
   1120          							break;
   1121          
   1122          						case EDIT_VEHICLE_NAME_BUTTON:
   1123          							if (vehicleSelectionChanged == true)	// If the vehicle selection has changed on this screen
   \                     ??RaceSetupScreensCallback_36:
   \   00000938   B403D5E5           LDRB     R0,[R5, #+948]
   \   0000093C   010050E3           CMP      R0,#+1
   \   00000940   0C00001A           BNE      ??RaceSetupScreensCallback_40
   1124          								ChangeVehicle();					// Validate and make the change in the database
   \   00000944   434C85E2           ADD      R4,R5,#+17152
   \   00000948   0410A0E1           MOV      R1,R4
   \   0000094C   ........           LDR      R0,??DataTable116_1
   \   00000950   ........           BL       strcpy
   \   00000954   0410A0E1           MOV      R1,R4
   \   00000958   EE0F85E2           ADD      R0,R5,#+952
   \   0000095C   ........           BL       strcpy
   \   00000960   0200A0E3           MOV      R0,#+2
   \   00000964   ........           BL       ReloadData
   \   00000968   0000A0E3           MOV      R0,#+0
   \   0000096C   ........           BL       SetGear
   \   00000970   B463C5E5           STRB     R6,[R5, #+948]
   \   00000974   ........           BL       ValidateCameraData
   1125          							// fall through...
   1126          
   1127          						case EDIT_DRIVER_NAME_BUTTON:
   1128          							HideSprites();
   \                     ??RaceSetupScreensCallback_40:
   \   00000978   A80395E5           LDR      R0,[R5, #+936]
   \   0000097C   000050E3           CMP      R0,#+0
   \   00000980   0700000A           BEQ      ??RaceSetupScreensCallback_78
   \   00000984   B01395E5           LDR      R1,[R5, #+944]
   \   00000988   012081E2           ADD      R2,R1,#+1
   \   0000098C   B02385E5           STR      R2,[R5, #+944]
   \   00000990   000051E3           CMP      R1,#+0
   \   00000994   0200001A           BNE      ??RaceSetupScreensCallback_78
   \   00000998   ........           BL       GUI_SPRITE_Hide
   \   0000099C   AC0395E5           LDR      R0,[R5, #+940]
   \   000009A0   ........           BL       GUI_SPRITE_Hide
   1129          #ifdef _WINDOWS
   1130          							mode = EDIT;
   1131          							DisplayKeyboard(button = Id);
   1132          #else
   1133          							if (unsavedSysData.sdCardInserted)
   \                     ??RaceSetupScreensCallback_78:
   \   000009A4   ........           LDR      R0,??DataTable105
   \   000009A8   C00090E5           LDR      R0,[R0, #+192]
   \   000009AC   000050E3           CMP      R0,#+0
   \   000009B0   6FFFFF0A           BEQ      ??RaceSetupScreensCallback_71
   1134          							{
   1135          								mode = EDIT;
   \                     ??RaceSetupScreensCallback_79:
   \   000009B4   B563C5E5           STRB     R6,[R5, #+949]
   1136          								DisplayKeyboard(button = Id);
   \   000009B8   A4FFFFEA           B        ??RaceSetupScreensCallback_76
   1137          							}
   1138          							else NotSupportedPopup(hRaceSetupScreens);
   1139          #endif
   1140          							break;
   1141          							
   1142          						case EDIT_TRACK_NAME_BUTTON:
   1143          							if (numTracks != 0)
   \                     ??RaceSetupScreensCallback_38:
   \   000009BC   940395E5           LDR      R0,[R5, #+916]
   \   000009C0   000050E3           CMP      R0,#+0
   \   000009C4   9100000A           BEQ      ??RaceSetupScreensCallback_10
   1144          							{
   1145          								HideSprites();
   \   000009C8   A80395E5           LDR      R0,[R5, #+936]
   \   000009CC   000050E3           CMP      R0,#+0
   \   000009D0   0700000A           BEQ      ??RaceSetupScreensCallback_80
   \   000009D4   B01395E5           LDR      R1,[R5, #+944]
   \   000009D8   012081E2           ADD      R2,R1,#+1
   \   000009DC   B02385E5           STR      R2,[R5, #+944]
   \   000009E0   000051E3           CMP      R1,#+0
   \   000009E4   0200001A           BNE      ??RaceSetupScreensCallback_80
   \   000009E8   ........           BL       GUI_SPRITE_Hide
   \   000009EC   AC0395E5           LDR      R0,[R5, #+940]
   \   000009F0   ........           BL       GUI_SPRITE_Hide
   1146          #ifdef _WINDOWS
   1147          								mode = EDIT;
   1148          								DisplayKeyboard(button = Id);
   1149          #else
   1150          								if (unsavedSysData.sdCardInserted)
   \                     ??RaceSetupScreensCallback_80:
   \   000009F4   ........           LDR      R0,??DataTable105
   \   000009F8   C00090E5           LDR      R0,[R0, #+192]
   \   000009FC   000050E3           CMP      R0,#+0
   \   00000A00   EBFFFF1A           BNE      ??RaceSetupScreensCallback_79
   1151          								{
   1152          									mode = EDIT;
   1153          									DisplayKeyboard(button = Id);
   1154          								}
   1155          								else NotSupportedPopup(hRaceSetupScreens);
   \   00000A04   5AFFFFEA           B        ??RaceSetupScreensCallback_71
   1156          #endif
   1157          							}
   1158          							break;
   1159          
   1160          						case AUTO_CREATE_TRACK_BUTTON:
   1161          							AutoCreateNewTrack();
   \                     ??RaceSetupScreensCallback_49:
   \   00000A08   ........           BL       FindLastTrackOfCurrentType
   \   00000A0C   013080E2           ADD      R3,R0,#+1
   \   00000A10   ........           LDR      R0,??DataTable114_10
   \   00000A14   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000A18   410040E2           SUB      R0,R0,#+65
   \   00000A1C   130050E3           CMP      R0,#+19
   \   00000A20   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??RaceSetupScreensCallback_1:
   \   00000A24   1F00008A           BHI      ??RaceSetupScreensCallback_81
   \   00000A28   180000EA           B        ??RaceSetupScreensCallback_82
   \   00000A2C   1D0000EA           B        ??RaceSetupScreensCallback_81
   \   00000A30   1C0000EA           B        ??RaceSetupScreensCallback_81
   \   00000A34   180000EA           B        ??RaceSetupScreensCallback_83
   \   00000A38   110000EA           B        ??RaceSetupScreensCallback_84
   \   00000A3C   190000EA           B        ??RaceSetupScreensCallback_81
   \   00000A40   180000EA           B        ??RaceSetupScreensCallback_81
   \   00000A44   0B0000EA           B        ??RaceSetupScreensCallback_85
   \   00000A48   160000EA           B        ??RaceSetupScreensCallback_81
   \   00000A4C   150000EA           B        ??RaceSetupScreensCallback_81
   \   00000A50   140000EA           B        ??RaceSetupScreensCallback_81
   \   00000A54   130000EA           B        ??RaceSetupScreensCallback_81
   \   00000A58   120000EA           B        ??RaceSetupScreensCallback_81
   \   00000A5C   110000EA           B        ??RaceSetupScreensCallback_81
   \   00000A60   100000EA           B        ??RaceSetupScreensCallback_81
   \   00000A64   0F0000EA           B        ??RaceSetupScreensCallback_81
   \   00000A68   050000EA           B        ??RaceSetupScreensCallback_84
   \   00000A6C   0D0000EA           B        ??RaceSetupScreensCallback_81
   \   00000A70   0C0000EA           B        ??RaceSetupScreensCallback_81
   \   00000A74   020000EA           B        ??RaceSetupScreensCallback_84
   \                     ??RaceSetupScreensCallback_85:
   \   00000A78   ............       ADRL     R2,`?<Constant "Hill">`
   \              ....        
   \   00000A80   0A0000EA           B        ??RaceSetupScreensCallback_86
   \                     ??RaceSetupScreensCallback_84:
   \   00000A84   ............       ADRL     R2,`?<Constant "Drag">`
   \              ....        
   \   00000A8C   070000EA           B        ??RaceSetupScreensCallback_86
   \                     ??RaceSetupScreensCallback_82:
   \   00000A90   ............       ADRL     R2,`?<Constant "AutoX">`
   \              ....        
   \   00000A98   040000EA           B        ??RaceSetupScreensCallback_86
   \                     ??RaceSetupScreensCallback_83:
   \   00000A9C   ............       ADRL     R2,`?<Constant "Drive">`
   \              ....        
   \   00000AA4   010000EA           B        ??RaceSetupScreensCallback_86
   \                     ??RaceSetupScreensCallback_81:
   \   00000AA8   ............       ADRL     R2,`?<Constant "Race">`
   \              ....        
   \                     ??RaceSetupScreensCallback_86:
   \   00000AB0   ............       ADRL     R1,`?<Constant "%s%d">`
   \              ....        
   \   00000AB8   EE0F85E2           ADD      R0,R5,#+952
   \   00000ABC   ........           BL       sprintf
   \   00000AC0   ........           BL       CreateNewTrack
   1162          							FinishLoadingTrackData();
   \                     ??RaceSetupScreensCallback_87:
   \   00000AC4   0100A0E3           MOV      R0,#+1
   \   00000AC8   ........           BL       ReloadData
   \   00000ACC   ........           LDR      R0,??DataTable117
   \   00000AD0   0310A0E3           MOV      R1,#+3
   \   00000AD4   0010C0E5           STRB     R1,[R0, #+0]
   \   00000AD8   ........           LDR      R0,??DataTable116
   \   00000ADC   000090E5           LDR      R0,[R0, #+0]
   \   00000AE0   ........           BL       GoRacingStateMachine
   1163          							break;
   \   00000AE4   490000EA           B        ??RaceSetupScreensCallback_10
   1164          
   1165          						case CONFIRM_TRACK_BUTTON:
   1166          							SelectThisTrack(LISTVIEW_GetSel(hTrackList));
   \                     ??RaceSetupScreensCallback_43:
   \   00000AE8   7C0395E5           LDR      R0,[R5, #+892]
   \   00000AEC   ........           BL       LISTVIEW_GetSel
   \   00000AF0   0040B0E1           MOVS     R4,R0
   \   00000AF4   F2FFFF4A           BMI      ??RaceSetupScreensCallback_87
   \   00000AF8   1000A0E3           MOV      R0,#+16
   \   00000AFC   00008DE5           STR      R0,[SP, #+0]
   \   00000B00   04308DE2           ADD      R3,SP,#+4
   \   00000B04   0420A0E1           MOV      R2,R4
   \   00000B08   0010A0E3           MOV      R1,#+0
   \   00000B0C   7C0395E5           LDR      R0,[R5, #+892]
   \   00000B10   ........           BL       LISTVIEW_GetItemText
   \   00000B14   ........           LDR      R10,??DataTable114_4
   \   00000B18   00B0A0E3           MOV      R11,#+0
   \   00000B1C   0A60A0E1           MOV      R6,R10
   \   00000B20   4870A0E3           MOV      R7,#+72
   \   00000B24   ........           LDR      R8,??DataTable114_5
   \   00000B28   ........           LDR      R9,??DataTable114_6
   \   00000B2C   000000EA           B        ??RaceSetupScreensCallback_88
   \                     ??RaceSetupScreensCallback_89:
   \   00000B30   01B08BE2           ADD      R11,R11,#+1
   \                     ??RaceSetupScreensCallback_88:
   \   00000B34   000099E5           LDR      R0,[R9, #+0]
   \   00000B38   00005BE1           CMP      R11,R0
   \   00000B3C   050000AA           BGE      ??RaceSetupScreensCallback_90
   \   00000B40   040096E4           LDR      R0,[R6], #+4
   \   00000B44   04108DE2           ADD      R1,SP,#+4
   \   00000B48   978020E0           MLA      R0,R7,R0,R8
   \   00000B4C   ........           BL       strcmp
   \   00000B50   000050E3           CMP      R0,#+0
   \   00000B54   F5FFFF1A           BNE      ??RaceSetupScreensCallback_89
   \                     ??RaceSetupScreensCallback_90:
   \   00000B58   000099E5           LDR      R0,[R9, #+0]
   \   00000B5C   00005BE1           CMP      R11,R0
   \   00000B60   D7FFFF0A           BEQ      ??RaceSetupScreensCallback_87
   \   00000B64   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   00000B68   A00385E5           STR      R0,[R5, #+928]
   \   00000B6C   3C0095E5           LDR      R0,[R5, #+60]
   \   00000B70   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \   00000B74   F30F85E2           ADD      R0,R5,#+972
   \   00000B78   ........           BL       strcpy
   \   00000B7C   F31F85E2           ADD      R1,R5,#+972
   \   00000B80   ........           LDR      R0,??DataTable114_7
   \   00000B84   ........           BL       strcpy
   1167          							FinishLoadingTrackData();
   \   00000B88   CDFFFFEA           B        ??RaceSetupScreensCallback_87
   1168          							break;
   1169          
   1170          						case LAPS_BUTTON:
   1171          							sysData.lappingMode = true;
   \                     ??RaceSetupScreensCallback_41:
   \   00000B8C   ........           LDR      R0,??DataTable114_10
   \   00000B90   0110A0E3           MOV      R1,#+1
   \   00000B94   B210C0E5           STRB     R1,[R0, #+178]
   1172          							BUTTON_SetBitmapEx(hLapsCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   00000B98   0F00A0E3           MOV      R0,#+15
   \   00000B9C   00008DE5           STR      R0,[SP, #+0]
   \   00000BA0   0F30A0E3           MOV      R3,#+15
   \   00000BA4   ........           LDR      R2,??DataTable121
   \   00000BA8   0010A0E3           MOV      R1,#+0
   \   00000BAC   800395E5           LDR      R0,[R5, #+896]
   \   00000BB0   ........           BL       BUTTON_SetBitmapEx
   1173          							BUTTON_SetBitmap(hQualifyingCheck, BUTTON_CI_UNPRESSED, NULL);
   \   00000BB4   0020A0E3           MOV      R2,#+0
   \   00000BB8   0010A0E3           MOV      R1,#+0
   \   00000BBC   840395E5           LDR      R0,[R5, #+900]
   \   00000BC0   ........           BL       BUTTON_SetBitmap
   1174          							WM_InvalidateWindow(hRaceSetupScreens);
   \                     ??RaceSetupScreensCallback_91:
   \   00000BC4   6C0395E5           LDR      R0,[R5, #+876]
   \   00000BC8   ........           BL       WM_InvalidateWindow
   1175          							break;
   \   00000BCC   0F0000EA           B        ??RaceSetupScreensCallback_10
   1176          
   1177          						case QUALIFYING_BUTTON:
   1178          							sysData.lappingMode = false;
   \                     ??RaceSetupScreensCallback_42:
   \   00000BD0   ........           LDR      R0,??DataTable114_10
   1179          							BUTTON_SetBitmap(hLapsCheck, BUTTON_CI_UNPRESSED, NULL);
   \   00000BD4   0020A0E3           MOV      R2,#+0
   \   00000BD8   B260C0E5           STRB     R6,[R0, #+178]
   \   00000BDC   0010A0E3           MOV      R1,#+0
   \   00000BE0   800395E5           LDR      R0,[R5, #+896]
   \   00000BE4   ........           BL       BUTTON_SetBitmap
   1180          							BUTTON_SetBitmapEx(hQualifyingCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   00000BE8   0F00A0E3           MOV      R0,#+15
   \   00000BEC   00008DE5           STR      R0,[SP, #+0]
   \   00000BF0   0F30A0E3           MOV      R3,#+15
   \   00000BF4   ........           LDR      R2,??DataTable121
   \   00000BF8   0010A0E3           MOV      R1,#+0
   \   00000BFC   840395E5           LDR      R0,[R5, #+900]
   \   00000C00   ........           BL       BUTTON_SetBitmapEx
   1181          							WM_InvalidateWindow(hRaceSetupScreens);
   \   00000C04   EEFFFFEA           B        ??RaceSetupScreensCallback_91
   1182          							break;
   1183          						}
   1184          					}
   1185          					break;
   1186          			}
   1187          			break;
   1188          
   1189          		default:
   1190          			WM_DefaultProc(pMsg);
   \                     ??RaceSetupScreensCallback_9:
   \   00000C08   0400A0E1           MOV      R0,R4
   \   00000C0C   ........           BL       WM_DefaultProc
   1191          	}
   1192          }
   \                     ??RaceSetupScreensCallback_10:
   \   00000C10   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   00000C14   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1193          
   1194          //
   1195          // Exiting vehicle selection screen and vehicle selection has changed.  Validate and
   1196          // change the vehicle.
   1197          //

   \                                 In section .text, align 4, keep-with-next
   1198          void ChangeVehicle(void)
   1199          {
   \                     ChangeVehicle:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1200          	if (vehicleSelectionChanged == true)
   \   00000004   ........           LDR      R4,??DataTable113
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   B403D4E5           LDRB     R0,[R4, #+948]
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   0D00001A           BNE      ??ChangeVehicle_0
   1201          	{
   1202          		strcpy(sysData.vehicle, tempVehicleName);	// Set new Vehicle name in sysData structure
   \   00000018   435C84E2           ADD      R5,R4,#+17152
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   ........           LDR      R0,??DataTable116_1
   \   00000024   ........           BL       strcpy
   1203          		strcpy(newName, tempVehicleName);		// Be sure working variable string "newName" is up to date for exit from some subsequent screens
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   EE0F84E2           ADD      R0,R4,#+952
   \   00000030   ........           BL       strcpy
   1204          		ReloadData(VEHICLE_DATA);				// Load new Vehicle data
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   ........           BL       ReloadData
   1205          		SetGear(GEAR_RESET);					// Calculate gear table for new vehicle
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           BL       SetGear
   1206          		vehicleSelectionChanged = false;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   B403C4E5           STRB     R0,[R4, #+948]
   1207          		ValidateCameraData();					// Configure camera settings for this vehicle
   \   0000004C   ........           BL       ValidateCameraData
   1208          	}
   1209          }
   \                     ??ChangeVehicle_0:
   \   00000050   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   1210          

   \                                 In section .text, align 4, keep-with-next
   1211          void FinishLoadingTrackData(void)
   1212          {
   \                     FinishLoadingTrackData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1213          	ReloadData(TRACK_DATA);		// Be sure track loaded
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   ........           BL       ReloadData
   1214          	raceModeState = RM_SELECTED_TRACK;
   \   00000010   ........           LDR      R0,??DataTable117
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   0010C0E5           STRB     R1,[R0, #+0]
   1215          	GoRacingStateMachine(hDisplayClosestTracks);
   \   0000001C   ........           LDR      R0,??DataTable116
   \   00000020   04D08DE2           ADD      SP,SP,#+4
   \   00000024   0040BDE8           POP      {LR}
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   ........           B        GoRacingStateMachine  ;; tailcall
   1216          }
   1217          

   \                                 In section .text, align 4, keep-with-next
   1218          void ExitTrackSelectionScreen(void)
   1219          {
   \                     ExitTrackSelectionScreen:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1220          	CheckWorkingTrackName();
   \   00000008   ........           LDR      R1,??DataTable121_1
   \   0000000C   ........           LDR      R0,??DataTable114_7
   \   00000010   ........           BL       strcpy
   \   00000014   04D08DE2           ADD      SP,SP,#+4
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   ........           B        ReloadData       ;; tailcall
   1221          }
   1222          

   \                                 In section .text, align 4, keep-with-next
   1223          char *GetRadiusText(char *pText)
   1224          {
   \                     GetRadiusText:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1225          	if (sysData.radius >= OLD_WORLD)
   \   00000004   ........           LDR      R1,??DataTable114_10
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   B40091E5           LDR      R0,[R1, #+180]
   \   00000010   2020A0E3           MOV      R2,#+32
   \   00000014   4E2C82E3           ORR      R2,R2,#0x4E00
   \   00000018   020050E1           CMP      R0,R2
   \   0000001C   050000BA           BLT      ??GetRadiusText_0
   1226          		strcpy(pText, "All Tracks - World");
   \   00000020   1320A0E3           MOV      R2,#+19
   \   00000024   ............       ADRL     R1,`?<Constant "All Tracks - World">`
   \              ....        
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       __aeabi_memcpy
   \   00000034   0E0000EA           B        ??GetRadiusText_1
   1227          	else if (sysData.units == METRIC)
   \                     ??GetRadiusText_0:
   \   00000038   641091E5           LDR      R1,[R1, #+100]
   \   0000003C   010051E3           CMP      R1,#+1
   1228          		sprintf(pText, "Within %d km", sysData.radius);
   \   00000040   0020A001           MOVEQ    R2,R0
   \   00000044   ............       ADRLEQ   R1,`?<Constant "Within %d km">`
   \              ....        
   \   0000004C   0600000A           BEQ      ??GetRadiusText_2
   1229          	else sprintf(pText, "Within %d miles", (int)(sysData.radius * KILOMETERS_TO_MILES));
   \   00000050   ........           BL       __aeabi_i2f
   \   00000054   ........           LDR      R1,??DataTable115  ;; 0x3f1f122f
   \   00000058   ........           BL       __aeabi_fmul
   \   0000005C   ........           BL       __aeabi_f2iz
   \   00000060   0020A0E1           MOV      R2,R0
   \   00000064   ............       ADRL     R1,`?<Constant "Within %d miles">`
   \              ....        
   \                     ??GetRadiusText_2:
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       sprintf
   1230          	return pText;
   \                     ??GetRadiusText_1:
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
   1231          }
   1232          

   \                                 In section .text, align 4, keep-with-next
   1233          char SelectThisTrack(int selection)
   1234          {
   \                     SelectThisTrack:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   1235          	if (selection < 0)
   \   0000000C   0100005A           BPL      ??SelectThisTrack_0
   1236          		return 0;				// Not a valid index
   \                     ??SelectThisTrack_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   270000EA           B        ??SelectThisTrack_2
   1237          
   1238          	// Determine index into trackTable and set 'global' index
   1239          	//if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
   1240          	//{
   1241          	//	trackTableIndex = selection;
   1242          	//	strcpy(selectedTrackName, pTracksFull[selection]);		// Set new Track name in temporary location
   1243          	//}
   1244          	//else
   1245          	{
   1246          		char ThisName[NAMELEN+1];
   1247          		int i;
   1248          
   1249          		// Find this track in trackShortList to look up its index number in trackTable
   1250          		LISTVIEW_GetItemText(hTrackList, 0, selection, ThisName, NAMELEN);
   \                     ??SelectThisTrack_0:
   \   00000018   ........           LDR      R5,??DataTable113
   \   0000001C   1000A0E3           MOV      R0,#+16
   \   00000020   00008DE5           STR      R0,[SP, #+0]
   \   00000024   04308DE2           ADD      R3,SP,#+4
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   7C0395E5           LDR      R0,[R5, #+892]
   \   00000034   ........           BL       LISTVIEW_GetItemText
   1251          		for (i = 0; i < numberOfShortListTracks; i++)
   \   00000038   ........           LDR      R6,??DataTable114_4
   \   0000003C   00B0A0E3           MOV      R11,#+0
   \   00000040   0670A0E1           MOV      R7,R6
   \   00000044   4880A0E3           MOV      R8,#+72
   \   00000048   ........           LDR      R9,??DataTable114_5
   \   0000004C   ........           LDR      R10,??DataTable114_6
   \   00000050   000000EA           B        ??SelectThisTrack_3
   \                     ??SelectThisTrack_4:
   \   00000054   01B08BE2           ADD      R11,R11,#+1
   \                     ??SelectThisTrack_3:
   \   00000058   00009AE5           LDR      R0,[R10, #+0]
   \   0000005C   00005BE1           CMP      R11,R0
   \   00000060   050000AA           BGE      ??SelectThisTrack_5
   1252          		{
   1253          			if (strcmp(trackTable[trackShortList[i]].trackName, ThisName) == 0)
   \   00000064   040097E4           LDR      R0,[R7], #+4
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   989020E0           MLA      R0,R8,R0,R9
   \   00000070   ........           BL       strcmp
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   F5FFFF1A           BNE      ??SelectThisTrack_4
   1254          				break;
   1255          		}
   1256          		if (i == numberOfShortListTracks)
   \                     ??SelectThisTrack_5:
   \   0000007C   00009AE5           LDR      R0,[R10, #+0]
   \   00000080   00005BE1           CMP      R11,R0
   \   00000084   E1FFFF0A           BEQ      ??SelectThisTrack_1
   1257          			return 0;											// Error condition
   1258          
   1259          		trackTableIndex = trackShortList[i];
   \   00000088   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   0000008C   A00385E5           STR      R0,[R5, #+928]
   1260          		strcpy(selectedTrackName, pTracksShort[selection]);		// Set new Track name in temporary location
   \   00000090   3C0095E5           LDR      R0,[R5, #+60]
   \   00000094   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \   00000098   F30F85E2           ADD      R0,R5,#+972
   \   0000009C   ........           BL       strcpy
   1261          	}
   1262          
   1263          	strcpy(sysData.track, selectedTrackName);					// Set new Track name in sysData structure
   \   000000A0   F31F85E2           ADD      R1,R5,#+972
   \   000000A4   ........           LDR      R0,??DataTable114_7
   \   000000A8   ........           BL       strcpy
   1264          	if (selectedTrackName[0] == 0)								// If there is not really a track in the table at this position
   \   000000AC   CC03D5E5           LDRB     R0,[R5, #+972]
   \   000000B0   000050E3           CMP      R0,#+0
   1265          		return 0;												// Error condition
   1266          	else return 1;												// else okay
   \   000000B4   0100A013           MOVNE    R0,#+1
   \                     ??SelectThisTrack_2:
   \   000000B8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1267          }
   1268          
   1269          

   \                                 In section .text, align 4, keep-with-next
   1270          void CheckWorkingTrackName(void)
   1271          {
   \                     CheckWorkingTrackName:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1272          //	if (strcmp(selectedTrackName, sysData.track))
   1273          	{
   1274          		strcpy(sysData.track, selectedTrackName);
   \   00000008   ........           LDR      R1,??DataTable121_1
   \   0000000C   ........           LDR      R0,??DataTable114_7
   \   00000010   ........           BL       strcpy
   1275          		ReloadData(TRACK_DATA);				// Load new Track data
   \   00000014   04D08DE2           ADD      SP,SP,#+4
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   ........           B        ReloadData       ;; tailcall
   1276          	}
   1277          }
   1278          

   \                                 In section .text, align 4, keep-with-next
   1279          void SetWorkingTrackName(void)
   1280          {
   1281          	strcpy(selectedTrackName, sysData.track);
   \                     SetWorkingTrackName:
   \   00000000   ........           LDR      R1,??DataTable114_7
   \   00000004   ........           LDR      R0,??DataTable121_1
   \   00000008   ........           B        strcpy           ;; tailcall
   1282          }
   1283          
   1284          // KMC added 6/6/12 to allow GoRacing to display CLOSEST track first, not currently selected track

   \                                 In section .text, align 4, keep-with-next
   1285          void ClearWorkingTrackName(void)
   1286          {
   1287          	selectedTrackName[0] = 0;
   \                     ClearWorkingTrackName:
   \   00000000   ........           LDR      R1,??DataTable113
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   CC03C1E5           STRB     R0,[R1, #+972]
   1288          	sysData.track[0] = 0;
   \   0000000C   ........           LDR      R1,??DataTable114_10
   \   00000010   A000C1E5           STRB     R0,[R1, #+160]
   1289          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
   1290          
   1291          #define	LIST_POSITION_ONE	topPosition + (2 * (gap + BUTTON_HEIGHT))
   1292          #define	LIST_POSITION_TWO	topPosition + (3 * (gap + BUTTON_HEIGHT))
   1293          #define	LIST_POSITION_THREE	topPosition + (4 * (gap + BUTTON_HEIGHT))
   1294          #define	LIST_POSITION_FOUR	topPosition + gap + BUTTON_HEIGHT
   1295          

   \                                 In section .text, align 4, keep-with-next
   1296          void DisplayDriverSelection(WM_HWIN hParent)
   1297          {
   \                     DisplayDriverSelection:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   1298          	BUTTON_Handle hButton;
   1299          	int topPosition, gap;
   1300          
   1301          	editType = DRIVER;
   \   00000008   ........           LDR      R7,??DisplayAlphaList_0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   B603C7E5           STRB     R0,[R7, #+950]
   \   00000014   10D04DE2           SUB      SP,SP,#+16
   1302          	strcpy(newName, sysData.driver);		// Be sure working driver name string is initialized on screen entry
   \   00000018   ........           LDR      R1,??DataTable114_8
   \   0000001C   EE0F87E2           ADD      R0,R7,#+952
   \   00000020   ........           BL       strcpy
   1303          	UpdateList();		// This creates and displays the list of items on the screen - in this case Drivers
   \   00000024   ........           BL       UpdateList
   1304          
   1305          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000028   ........           LDR      R0,??DataTable122
   \   0000002C   ........           BL       BUTTON_SetDefaultFont
   1306          
   1307          	topPosition = 38;
   1308          	gap = 6;
   1309          
   1310          	hRSDeleteButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_THREE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, DELETE_DRIVER_BUTTON);
   \   00000030   0D00A0E3           MOV      R0,#+13
   \   00000034   800E80E3           ORR      R0,R0,#0x800
   \   00000038   0C008DE5           STR      R0,[SP, #+12]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   08008DE5           STR      R0,[SP, #+8]
   \   00000044   0260A0E3           MOV      R6,#+2
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   406F86E3           ORR      R6,R6,#0x100
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   00508DE5           STR      R5,[SP, #+0]
   \   00000058   2730A0E3           MOV      R3,#+39
   \   0000005C   CA20A0E3           MOV      R2,#+202
   \   00000060   DA10A0E3           MOV      R1,#+218
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   ........           BL       BUTTON_CreateEx
   \   0000006C   A40387E5           STR      R0,[R7, #+932]
   1311          	BUTTON_SetBitmap(hRSDeleteButton, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000070   ........           LDR      R2,??DataTable122_1
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           BL       BUTTON_SetBitmap
   1312          	BUTTON_SetText(hRSDeleteButton, "Delete Driver");
   \   0000007C   ............       ADRL     R1,`?<Constant "Delete Driver">`
   \              ....        
   \   00000084   A40397E5           LDR      R0,[R7, #+932]
   \   00000088   ........           BL       BUTTON_SetText
   1313          	if (numDrivers > 1)
   \   0000008C   8C1397E5           LDR      R1,[R7, #+908]
   \   00000090   A40397E5           LDR      R0,[R7, #+932]
   \   00000094   FF44E0E3           MVN      R4,#-16777216
   \   00000098   020051E3           CMP      R1,#+2
   \   0000009C   040000BA           BLT      ??DisplayDriverSelection_0
   1314          	{
   1315          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   ........           BL       BUTTON_SetTextColor
   1316          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000000AC   0420A0E1           MOV      R2,R4
   \   000000B0   040000EA           B        ??DisplayDriverSelection_1
   1317          	}
   1318          	else
   1319          	{
   1320          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_GRAY);
   \                     ??DisplayDriverSelection_0:
   \   000000B4   ........           LDR      R8,??DataTable122_2  ;; 0x808080
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   0820A0E1           MOV      R2,R8
   \   000000C0   ........           BL       BUTTON_SetTextColor
   1321          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_GRAY);
   \   000000C4   0820A0E1           MOV      R2,R8
   \                     ??DisplayDriverSelection_1:
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   A40397E5           LDR      R0,[R7, #+932]
   \   000000D0   ........           BL       BUTTON_SetTextColor
   1322          	}
   1323          	BUTTON_SetFocussable(hRSDeleteButton, 0);
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   A40397E5           LDR      R0,[R7, #+932]
   \   000000DC   ........           BL       BUTTON_SetFocussable
   1324          
   1325          	hButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_TWO, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_DRIVER_NAME_BUTTON);
   \   000000E0   0800A0E3           MOV      R0,#+8
   \   000000E4   800E80E3           ORR      R0,R0,#0x800
   \   000000E8   0C008DE5           STR      R0,[SP, #+12]
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   08008DE5           STR      R0,[SP, #+8]
   \   000000F4   0200A0E3           MOV      R0,#+2
   \   000000F8   04008DE5           STR      R0,[SP, #+4]
   \   000000FC   00508DE5           STR      R5,[SP, #+0]
   \   00000100   2730A0E3           MOV      R3,#+39
   \   00000104   CA20A0E3           MOV      R2,#+202
   \   00000108   AD10A0E3           MOV      R1,#+173
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110   ........           BL       BUTTON_CreateEx
   \   00000114   0070A0E1           MOV      R7,R0
   1326          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmYellowButton);
   \   00000118   ........           LDR      R2,??DataTable122_3
   \   0000011C   0010A0E3           MOV      R1,#+0
   \   00000120   ........           BL       BUTTON_SetBitmap
   1327          	BUTTON_SetText(hButton, "Edit Name");
   \   00000124   ............       ADRL     R1,`?<Constant "Edit Name">`
   \              ....        
   \   0000012C   0700A0E1           MOV      R0,R7
   \   00000130   ........           BL       BUTTON_SetText
   1328          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   0700A0E1           MOV      R0,R7
   \   00000140   ........           BL       BUTTON_SetTextColor
   1329          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000144   0420A0E1           MOV      R2,R4
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   0700A0E1           MOV      R0,R7
   \   00000150   ........           BL       BUTTON_SetTextColor
   1330          	BUTTON_SetFocussable(hButton, 0);
   \   00000154   0010A0E3           MOV      R1,#+0
   \   00000158   0700A0E1           MOV      R0,R7
   \   0000015C   ........           BL       BUTTON_SetFocussable
   1331          
   1332          	hButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_ONE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, NEW_DRIVER_BUTTON);
   \   00000160   0100A0E3           MOV      R0,#+1
   \   00000164   800E80E3           ORR      R0,R0,#0x800
   \   00000168   0C008DE5           STR      R0,[SP, #+12]
   \   0000016C   0000A0E3           MOV      R0,#+0
   \   00000170   08008DE5           STR      R0,[SP, #+8]
   \   00000174   0200A0E3           MOV      R0,#+2
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   00508DE5           STR      R5,[SP, #+0]
   \   00000180   2730A0E3           MOV      R3,#+39
   \   00000184   CA20A0E3           MOV      R2,#+202
   \   00000188   8010A0E3           MOV      R1,#+128
   \   0000018C   0600A0E1           MOV      R0,R6
   \   00000190   ........           BL       BUTTON_CreateEx
   \   00000194   0070A0E1           MOV      R7,R0
   1333          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   00000198   ........           LDR      R2,??DataTable122_5
   \   0000019C   0010A0E3           MOV      R1,#+0
   \   000001A0   ........           BL       BUTTON_SetBitmap
   1334          	BUTTON_SetText(hButton, "New Driver");
   \   000001A4   ............       ADRL     R1,`?<Constant "New Driver">`
   \              ....        
   \   000001AC   0700A0E1           MOV      R0,R7
   \   000001B0   ........           BL       BUTTON_SetText
   1335          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   0700A0E1           MOV      R0,R7
   \   000001C0   ........           BL       BUTTON_SetTextColor
   1336          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000001C4   0420A0E1           MOV      R2,R4
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   0700A0E1           MOV      R0,R7
   \   000001D0   ........           BL       BUTTON_SetTextColor
   1337          	BUTTON_SetFocussable(hButton, 0);
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   0700A0E1           MOV      R0,R7
   \   000001DC   ........           BL       BUTTON_SetFocussable
   1338          
   1339          	// Display static text
   1340          	hButton = BUTTON_CreateEx(BUTTON_LEFT,  83, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
   \   000001E0   0000A0E3           MOV      R0,#+0
   \   000001E4   0C008DE5           STR      R0,[SP, #+12]
   \   000001E8   08008DE5           STR      R0,[SP, #+8]
   \   000001EC   0200A0E3           MOV      R0,#+2
   \   000001F0   04008DE5           STR      R0,[SP, #+4]
   \   000001F4   00508DE5           STR      R5,[SP, #+0]
   \   000001F8   2730A0E3           MOV      R3,#+39
   \   000001FC   CA20A0E3           MOV      R2,#+202
   \   00000200   5310A0E3           MOV      R1,#+83
   \   00000204   0600A0E1           MOV      R0,R6
   \   00000208   ........           BL       BUTTON_CreateEx
   \   0000020C   0050A0E1           MOV      R5,R0
   1341          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmBlackBlankButton);
   \   00000210   ........           LDR      R2,??DataTable124
   \   00000214   0010A0E3           MOV      R1,#+0
   \   00000218   ........           BL       BUTTON_SetBitmap
   1342          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   0000021C   0420A0E1           MOV      R2,R4
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   ........           BL       BUTTON_SetTextColor
   1343          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   0000022C   0420A0E1           MOV      R2,R4
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   ........           BL       BUTTON_SetTextColor
   1344          	BUTTON_SetTextColor(hButton, BUTTON_BI_DISABLED, GUI_WHITE);
   \   0000023C   0420A0E1           MOV      R2,R4
   \   00000240   0210A0E3           MOV      R1,#+2
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   ........           BL       BUTTON_SetTextColor
   1345          	BUTTON_SetText(hButton, "Select Driver");
   \   0000024C   0500A0E1           MOV      R0,R5
   \   00000250   10D08DE2           ADD      SP,SP,#+16
   \   00000254   F041BDE8           POP      {R4-R8,LR}
   \   00000258   ............       ADRL     R1,`?<Constant "Select Driver">`
   \              ....        
   \   00000260   ........           B        BUTTON_SetText   ;; tailcall
   1346          }
   1347          

   \                                 In section .text, align 4, keep-with-next
   1348          void DisplayVehicleSelection(WM_HWIN hParent)
   1349          {
   \                     DisplayVehicleSelection:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1350          	BUTTON_Handle hButton;
   1351          	int topPosition, gap;
   1352          
   1353          	editType = VEHICLE;
   \   00000008   ........           LDR      R7,??DisplayAlphaList_0
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   B603C7E5           STRB     R0,[R7, #+950]
   \   00000014   10D04DE2           SUB      SP,SP,#+16
   1354          	strcpy(newName, sysData.vehicle);		// Be sure working vehicle name string is initialized on screen entry
   \   00000018   ........           LDR      R1,??DataTable116_1
   \   0000001C   EE0F87E2           ADD      R0,R7,#+952
   \   00000020   ........           BL       strcpy
   1355          	UpdateList();		// This creates and displays the list of items on the screen - in this case Vehicles
   \   00000024   ........           BL       UpdateList
   1356          
   1357          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000028   ........           LDR      R0,??DataTable122
   \   0000002C   ........           BL       BUTTON_SetDefaultFont
   1358          
   1359          	topPosition = 38;
   1360          	gap = 6;
   1361          
   1362          	hButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_FOUR, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, VEHICLE_SETTINGS_BUTTON);
   \   00000030   0400A0E3           MOV      R0,#+4
   \   00000034   800E80E3           ORR      R0,R0,#0x800
   \   00000038   0C008DE5           STR      R0,[SP, #+12]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   08008DE5           STR      R0,[SP, #+8]
   \   00000044   0250A0E3           MOV      R5,#+2
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   405F85E3           ORR      R5,R5,#0x100
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   00408DE5           STR      R4,[SP, #+0]
   \   00000058   2730A0E3           MOV      R3,#+39
   \   0000005C   CA20A0E3           MOV      R2,#+202
   \   00000060   5310A0E3           MOV      R1,#+83
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       BUTTON_CreateEx
   \   0000006C   0080A0E1           MOV      R8,R0
   1363          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmBlueButton);
   \   00000070   ........           LDR      R2,??DataTable125
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           BL       BUTTON_SetBitmap
   1364          	BUTTON_SetText(hButton, "Vehicle Settings");
   \   0000007C   ............       ADRL     R1,`?<Constant "Vehicle Settings">`
   \              ....        
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   ........           BL       BUTTON_SetText
   1365          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   0000008C   FF64E0E3           MVN      R6,#-16777216
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   ........           BL       BUTTON_SetTextColor
   1366          	BUTTON_SetFocussable(hButton, 0);
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   0800A0E1           MOV      R0,R8
   \   000000A8   ........           BL       BUTTON_SetFocussable
   1367          
   1368          	hRSDeleteButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_THREE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, DELETE_VEHICLE_BUTTON);
   \   000000AC   0E00A0E3           MOV      R0,#+14
   \   000000B0   800E80E3           ORR      R0,R0,#0x800
   \   000000B4   0C008DE5           STR      R0,[SP, #+12]
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   08008DE5           STR      R0,[SP, #+8]
   \   000000C0   0200A0E3           MOV      R0,#+2
   \   000000C4   04008DE5           STR      R0,[SP, #+4]
   \   000000C8   00408DE5           STR      R4,[SP, #+0]
   \   000000CC   2730A0E3           MOV      R3,#+39
   \   000000D0   CA20A0E3           MOV      R2,#+202
   \   000000D4   DA10A0E3           MOV      R1,#+218
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           BL       BUTTON_CreateEx
   \   000000E0   A40387E5           STR      R0,[R7, #+932]
   1369          	BUTTON_SetBitmap(hRSDeleteButton, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   000000E4   ........           LDR      R2,??DataTable122_1
   \   000000E8   0010A0E3           MOV      R1,#+0
   \   000000EC   ........           BL       BUTTON_SetBitmap
   1370          	BUTTON_SetText(hRSDeleteButton, "Delete Vehicle");
   \   000000F0   ............       ADRL     R1,`?<Constant "Delete Vehicle">`
   \              ....        
   \   000000F8   A40397E5           LDR      R0,[R7, #+932]
   \   000000FC   ........           BL       BUTTON_SetText
   1371          	if (numVehicles <= 1)
   \   00000100   901397E5           LDR      R1,[R7, #+912]
   \   00000104   A40397E5           LDR      R0,[R7, #+932]
   \   00000108   020051E3           CMP      R1,#+2
   \   0000010C   050000AA           BGE      ??DisplayVehicleSelection_0
   1372          	{
   1373          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_GRAY);
   \   00000110   ........           LDR      R8,??DataTable122_2  ;; 0x808080
   \   00000114   0010A0E3           MOV      R1,#+0
   \   00000118   0820A0E1           MOV      R2,R8
   \   0000011C   ........           BL       BUTTON_SetTextColor
   1374          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_GRAY);
   \   00000120   0820A0E1           MOV      R2,R8
   \   00000124   030000EA           B        ??DisplayVehicleSelection_1
   1375          	}
   1376          	else
   1377          	{
   1378          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \                     ??DisplayVehicleSelection_0:
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   ........           BL       BUTTON_SetTextColor
   1379          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000134   0620A0E1           MOV      R2,R6
   \                     ??DisplayVehicleSelection_1:
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   A40397E5           LDR      R0,[R7, #+932]
   \   00000140   ........           BL       BUTTON_SetTextColor
   1380          	}
   1381          	BUTTON_SetFocussable(hRSDeleteButton, 0);
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   A40397E5           LDR      R0,[R7, #+932]
   \   0000014C   ........           BL       BUTTON_SetFocussable
   1382          
   1383          	hButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_TWO, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_VEHICLE_NAME_BUTTON);
   \   00000150   0300A0E3           MOV      R0,#+3
   \   00000154   800E80E3           ORR      R0,R0,#0x800
   \   00000158   0C008DE5           STR      R0,[SP, #+12]
   \   0000015C   0000A0E3           MOV      R0,#+0
   \   00000160   08008DE5           STR      R0,[SP, #+8]
   \   00000164   0200A0E3           MOV      R0,#+2
   \   00000168   04008DE5           STR      R0,[SP, #+4]
   \   0000016C   00408DE5           STR      R4,[SP, #+0]
   \   00000170   2730A0E3           MOV      R3,#+39
   \   00000174   CA20A0E3           MOV      R2,#+202
   \   00000178   AD10A0E3           MOV      R1,#+173
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           BL       BUTTON_CreateEx
   \   00000184   0070A0E1           MOV      R7,R0
   1384          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmYellowButton);
   \   00000188   ........           LDR      R2,??DataTable122_3
   \   0000018C   0010A0E3           MOV      R1,#+0
   \   00000190   ........           BL       BUTTON_SetBitmap
   1385          	BUTTON_SetText(hButton, "Edit Name");
   \   00000194   ............       ADRL     R1,`?<Constant "Edit Name">`
   \              ....        
   \   0000019C   0700A0E1           MOV      R0,R7
   \   000001A0   ........           BL       BUTTON_SetText
   1386          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0010A0E3           MOV      R1,#+0
   \   000001AC   0700A0E1           MOV      R0,R7
   \   000001B0   ........           BL       BUTTON_SetTextColor
   1387          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000001B4   0620A0E1           MOV      R2,R6
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   0700A0E1           MOV      R0,R7
   \   000001C0   ........           BL       BUTTON_SetTextColor
   1388          	BUTTON_SetFocussable(hButton, 0);
   \   000001C4   0010A0E3           MOV      R1,#+0
   \   000001C8   0700A0E1           MOV      R0,R7
   \   000001CC   ........           BL       BUTTON_SetFocussable
   1389          
   1390          	hButton = BUTTON_CreateEx(BUTTON_LEFT, LIST_POSITION_ONE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, NEW_VEHICLE_BUTTON);
   \   000001D0   700E85E2           ADD      R0,R5,#+1792
   \   000001D4   0C008DE5           STR      R0,[SP, #+12]
   \   000001D8   0000A0E3           MOV      R0,#+0
   \   000001DC   08008DE5           STR      R0,[SP, #+8]
   \   000001E0   0200A0E3           MOV      R0,#+2
   \   000001E4   04008DE5           STR      R0,[SP, #+4]
   \   000001E8   00408DE5           STR      R4,[SP, #+0]
   \   000001EC   2730A0E3           MOV      R3,#+39
   \   000001F0   CA20A0E3           MOV      R2,#+202
   \   000001F4   8010A0E3           MOV      R1,#+128
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           BL       BUTTON_CreateEx
   \   00000200   0070A0E1           MOV      R7,R0
   1391          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   00000204   ........           LDR      R2,??DataTable122_5
   \   00000208   0010A0E3           MOV      R1,#+0
   \   0000020C   ........           BL       BUTTON_SetBitmap
   1392          	BUTTON_SetText(hButton, "New Vehicle");
   \   00000210   ............       ADRL     R1,`?<Constant "New Vehicle">`
   \              ....        
   \   00000218   0700A0E1           MOV      R0,R7
   \   0000021C   ........           BL       BUTTON_SetText
   1393          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0010A0E3           MOV      R1,#+0
   \   00000228   0700A0E1           MOV      R0,R7
   \   0000022C   ........           BL       BUTTON_SetTextColor
   1394          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000230   0620A0E1           MOV      R2,R6
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   0700A0E1           MOV      R0,R7
   \   0000023C   ........           BL       BUTTON_SetTextColor
   1395          	BUTTON_SetFocussable(hButton, 0);
   \   00000240   0010A0E3           MOV      R1,#+0
   \   00000244   0700A0E1           MOV      R0,R7
   \   00000248   ........           BL       BUTTON_SetFocussable
   1396          
   1397          	// Display static text
   1398          	hButton = BUTTON_CreateEx(BUTTON_LEFT,  45, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   0C008DE5           STR      R0,[SP, #+12]
   \   00000254   08008DE5           STR      R0,[SP, #+8]
   \   00000258   0200A0E3           MOV      R0,#+2
   \   0000025C   04008DE5           STR      R0,[SP, #+4]
   \   00000260   00408DE5           STR      R4,[SP, #+0]
   \   00000264   2730A0E3           MOV      R3,#+39
   \   00000268   CA20A0E3           MOV      R2,#+202
   \   0000026C   2D10A0E3           MOV      R1,#+45
   \   00000270   0500A0E1           MOV      R0,R5
   \   00000274   ........           BL       BUTTON_CreateEx
   \   00000278   0040A0E1           MOV      R4,R0
   1399          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmTopFakeButton);
   \   0000027C   ........           LDR      R2,??DataTable127
   \   00000280   0010A0E3           MOV      R1,#+0
   \   00000284   ........           BL       BUTTON_SetBitmap
   1400          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000288   0620A0E1           MOV      R2,R6
   \   0000028C   0010A0E3           MOV      R1,#+0
   \   00000290   0400A0E1           MOV      R0,R4
   \   00000294   ........           BL       BUTTON_SetTextColor
   1401          	BUTTON_SetTextColor(hButton, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000298   0620A0E1           MOV      R2,R6
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   ........           BL       BUTTON_SetTextColor
   1402          	BUTTON_SetTextColor(hButton, BUTTON_BI_DISABLED, GUI_WHITE);
   \   000002A8   0620A0E1           MOV      R2,R6
   \   000002AC   0210A0E3           MOV      R1,#+2
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           BL       BUTTON_SetTextColor
   1403          	BUTTON_SetText(hButton, "Select Vehicle");
   \   000002B8   0400A0E1           MOV      R0,R4
   \   000002BC   10D08DE2           ADD      SP,SP,#+16
   \   000002C0   F041BDE8           POP      {R4-R8,LR}
   \   000002C4   ............       ADRL     R1,`?<Constant "Select Vehicle">`
   \              ....        
   \   000002CC   ........           B        BUTTON_SetText   ;; tailcall
   1404          }
   1405          

   \                                 In section .text, align 4, keep-with-next
   1406          void DisplayTrackSelection(WM_HWIN hParent)
   1407          {
   \                     DisplayTrackSelection:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1408          // KMC - ??? what was this for ???	////if (ctType == CT_NORMAL_MODE)
   1409          	////	return;
   1410          
   1411          	if (!HaveSatelliteReception() && (sysData.radius < OLD_WORLD))
   \   00000008   ........           BL       HaveSatelliteReception
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0A00001A           BNE      ??DisplayTrackSelection_0
   \   00000014   ........           LDR      R0,??DataTable127_1
   \   00000018   2010A0E3           MOV      R1,#+32
   \   0000001C   B40090E5           LDR      R0,[R0, #+180]
   \   00000020   4E1C81E3           ORR      R1,R1,#0x4E00
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   040000AA           BGE      ??DisplayTrackSelection_0
   1412          	{
   1413          		DisplayWaitingForSatellites(DISPLAY_TRACKLIST_TYPE, (enum GUI_RACE_MODES)0, hParent);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   1040BDE8           POP      {R4,LR}
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   ........           B        DisplayWaitingForSatellites  ;; tailcall
   1414          		return;
   1415          	}
   1416          	else FinishDisplayTrackSelection(hParent);
   \                     ??DisplayTrackSelection_0:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   1040BDE8           POP      {R4,LR}
   \   00000048   ........           B        FinishDisplayTrackSelection  ;; tailcall
   1417          }
   1418          

   \                                 In section .text, align 4, keep-with-next
   1419          void FinishDisplayTrackSelection(WM_HWIN hParent)
   1420          {
   \                     FinishDisplayTrackSelection:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
   1421          	char scratch[30];
   1422          	BUTTON_Handle hBtn;
   1423          
   1424          	UpdateTrackList(hParent);		// Note this routine sets global variable numTracks
   \   0000000C   ........           BL       UpdateTrackList
   1425          
   1426          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000010   ........           LDR      R0,??DataTable122
   \   00000014   ........           BL       BUTTON_SetDefaultFont
   1427          
   1428          	if (ctType == CT_RACE_ENTRY)
   \   00000018   ........           LDR      R7,??DisplayAlphaList_0
   \   0000001C   0250A0E3           MOV      R5,#+2
   \   00000020   B703D7E5           LDRB     R0,[R7, #+951]
   \   00000024   405F85E3           ORR      R5,R5,#0x100
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   5D00001A           BNE      ??FinishDisplayTrackSelection_0
   1429          	{
   1430          		if (numTracks != 0)
   \   00000030   940397E5           LDR      R0,[R7, #+916]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   4000000A           BEQ      ??FinishDisplayTrackSelection_1
   1431          		{
   1432          			hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_ONE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, DELETE_TRACK_BUTTON);
   \   0000003C   0F00A0E3           MOV      R0,#+15
   \   00000040   800E80E3           ORR      R0,R0,#0x800
   \   00000044   0C008DE5           STR      R0,[SP, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   08008DE5           STR      R0,[SP, #+8]
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   04008DE5           STR      R0,[SP, #+4]
   \   00000058   00408DE5           STR      R4,[SP, #+0]
   \   0000005C   2730A0E3           MOV      R3,#+39
   \   00000060   CA20A0E3           MOV      R2,#+202
   \   00000064   3310A0E3           MOV      R1,#+51
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       BUTTON_CreateEx
   \   00000070   0070A0E1           MOV      R7,R0
   1433          			BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000074   ........           LDR      R2,??DataTable122_1
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   ........           BL       BUTTON_SetBitmap
   1434          			BUTTON_SetText(hBtn, "Delete Track");
   \   00000080   ............       ADRL     R1,`?<Constant "Delete Track">`
   \              ....        
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           BL       BUTTON_SetText
   1435          			BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           BL       BUTTON_SetTextColor
   1436          			BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000000A0   FF64E0E3           MVN      R6,#-16777216
   \   000000A4   0620A0E1           MOV      R2,R6
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           BL       BUTTON_SetTextColor
   1437          			BUTTON_SetFocussable(hBtn, 0);
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0700A0E1           MOV      R0,R7
   \   000000BC   ........           BL       BUTTON_SetFocussable
   1438          
   1439          			hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_FOUR, BUTTON_WIDTH, BUTTON_HEIGHT * 2, hParent, WM_CF_SHOW, 0, CONFIRM_TRACK_BUTTON);
   \   000000C0   0B00A0E3           MOV      R0,#+11
   \   000000C4   800E80E3           ORR      R0,R0,#0x800
   \   000000C8   0C008DE5           STR      R0,[SP, #+12]
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   08008DE5           STR      R0,[SP, #+8]
   \   000000D4   0200A0E3           MOV      R0,#+2
   \   000000D8   04008DE5           STR      R0,[SP, #+4]
   \   000000DC   00408DE5           STR      R4,[SP, #+0]
   \   000000E0   4E30A0E3           MOV      R3,#+78
   \   000000E4   CA20A0E3           MOV      R2,#+202
   \   000000E8   B110A0E3           MOV      R1,#+177
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           BL       BUTTON_CreateEx
   \   000000F4   0070A0E1           MOV      R7,R0
   1440          			BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmDoubleBlueButton);
   \   000000F8   ........           LDR      R2,??DataTable129
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   ........           BL       BUTTON_SetBitmap
   1441          			BUTTON_SetText(hBtn, "Confirm Track");
   \   00000104   ............       ADRL     R1,`?<Constant "Confirm Track">`
   \              ....        
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   ........           BL       BUTTON_SetText
   1442          			BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000114   0620A0E1           MOV      R2,R6
   \   00000118   0010A0E3           MOV      R1,#+0
   \   0000011C   0700A0E1           MOV      R0,R7
   \   00000120   ........           BL       BUTTON_SetTextColor
   1443          			BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000124   0620A0E1           MOV      R2,R6
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   0700A0E1           MOV      R0,R7
   \   00000130   ........           BL       BUTTON_SetTextColor
   1444          			BUTTON_SetFocussable(hBtn, 0);
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   0700A0E1           MOV      R0,R7
   \   0000013C   ........           BL       BUTTON_SetFocussable
   1445          		}
   1446          
   1447          		hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_TWO, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, AUTO_CREATE_TRACK_BUTTON);
   \                     ??FinishDisplayTrackSelection_1:
   \   00000140   710E85E2           ADD      R0,R5,#+1808
   \   00000144   0C008DE5           STR      R0,[SP, #+12]
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   08008DE5           STR      R0,[SP, #+8]
   \   00000150   0200A0E3           MOV      R0,#+2
   \   00000154   04008DE5           STR      R0,[SP, #+4]
   \   00000158   00408DE5           STR      R4,[SP, #+0]
   \   0000015C   2730A0E3           MOV      R3,#+39
   \   00000160   CA20A0E3           MOV      R2,#+202
   \   00000164   5D10A0E3           MOV      R1,#+93
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       BUTTON_CreateEx
   \   00000170   0070A0E1           MOV      R7,R0
   1448          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmOrangeButton);
   \   00000174   ........           LDR      R2,??DataTable131
   \   00000178   0010A0E3           MOV      R1,#+0
   \   0000017C   ........           BL       BUTTON_SetBitmap
   1449          		BUTTON_SetText(hBtn, "Auto-Create Track");
   \   00000180   ............       ADRL     R1,`?<Constant "Auto-Create Track">`
   \              ....        
   \   00000188   0700A0E1           MOV      R0,R7
   \   0000018C   ........           BL       BUTTON_SetText
   1450          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0010A0E3           MOV      R1,#+0
   \   00000198   0700A0E1           MOV      R0,R7
   \   0000019C   ........           BL       BUTTON_SetTextColor
   1451          		BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_BLACK);
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   AB0000EA           B        ??FinishDisplayTrackSelection_2
   1452          		BUTTON_SetFocussable(hBtn, 0);
   1453          	}
   1454          	else
   1455          	{
   1456          		hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_ONE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, SELECT_RADIUS_BUTTON);
   \                     ??FinishDisplayTrackSelection_0:
   \   000001A8   0C00A0E3           MOV      R0,#+12
   \   000001AC   800E80E3           ORR      R0,R0,#0x800
   \   000001B0   0C008DE5           STR      R0,[SP, #+12]
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   08008DE5           STR      R0,[SP, #+8]
   \   000001BC   0200A0E3           MOV      R0,#+2
   \   000001C0   04008DE5           STR      R0,[SP, #+4]
   \   000001C4   00408DE5           STR      R4,[SP, #+0]
   \   000001C8   2730A0E3           MOV      R3,#+39
   \   000001CC   CA20A0E3           MOV      R2,#+202
   \   000001D0   3310A0E3           MOV      R1,#+51
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   ........           BL       BUTTON_CreateEx
   \   000001DC   0060A0E1           MOV      R6,R0
   1457          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmOrangeButton);
   \   000001E0   ........           LDR      R2,??DataTable131
   \   000001E4   0010A0E3           MOV      R1,#+0
   \   000001E8   ........           BL       BUTTON_SetBitmap
   1458          		BUTTON_SetText(hBtn, GetRadiusText(scratch));
   \   000001EC   ........           LDR      R1,??DataTable127_1
   \   000001F0   2020A0E3           MOV      R2,#+32
   \   000001F4   B40091E5           LDR      R0,[R1, #+180]
   \   000001F8   4E2C82E3           ORR      R2,R2,#0x4E00
   \   000001FC   020050E1           CMP      R0,R2
   \   00000200   100000AA           BGE      ??FinishDisplayTrackSelection_3
   \   00000204   641091E5           LDR      R1,[R1, #+100]
   \   00000208   010051E3           CMP      R1,#+1
   \   0000020C   0900000A           BEQ      ??FinishDisplayTrackSelection_4
   \   00000210   ........           BL       __aeabi_i2f
   \   00000214   ........           LDR      R1,??DataTable131_1  ;; 0x3f1f122f
   \   00000218   ........           BL       __aeabi_fmul
   \   0000021C   ........           BL       __aeabi_f2iz
   \   00000220   0020A0E1           MOV      R2,R0
   \   00000224   ............       ADRL     R1,`?<Constant "Within %d miles">`
   \              ....        
   \                     ??FinishDisplayTrackSelection_5:
   \   0000022C   10008DE2           ADD      R0,SP,#+16
   \   00000230   ........           BL       sprintf
   \   00000234   080000EA           B        ??FinishDisplayTrackSelection_6
   \                     ??FinishDisplayTrackSelection_4:
   \   00000238   0020A0E1           MOV      R2,R0
   \   0000023C   ............       ADRL     R1,`?<Constant "Within %d km">`
   \              ....        
   \   00000244   F8FFFFEA           B        ??FinishDisplayTrackSelection_5
   \                     ??FinishDisplayTrackSelection_3:
   \   00000248   1320A0E3           MOV      R2,#+19
   \   0000024C   ............       ADRL     R1,`?<Constant "All Tracks - World">`
   \              ....        
   \   00000254   10008DE2           ADD      R0,SP,#+16
   \   00000258   ........           BL       __aeabi_memcpy4
   \                     ??FinishDisplayTrackSelection_6:
   \   0000025C   10108DE2           ADD      R1,SP,#+16
   \   00000260   0600A0E1           MOV      R0,R6
   \   00000264   ........           BL       BUTTON_SetText
   1459          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   0010A0E3           MOV      R1,#+0
   \   00000270   0600A0E1           MOV      R0,R6
   \   00000274   ........           BL       BUTTON_SetTextColor
   1460          		BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_BLACK);
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   0110A0E3           MOV      R1,#+1
   \   00000280   0600A0E1           MOV      R0,R6
   \   00000284   ........           BL       BUTTON_SetTextColor
   1461          		BUTTON_SetFocussable(hBtn, 0);
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   0600A0E1           MOV      R0,R6
   \   00000290   ........           BL       BUTTON_SetFocussable
   1462          
   1463          		hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_TWO, 97, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, TRACK_SETTINGS_BUTTON);
   \   00000294   0700A0E3           MOV      R0,#+7
   \   00000298   800E80E3           ORR      R0,R0,#0x800
   \   0000029C   0C008DE5           STR      R0,[SP, #+12]
   \   000002A0   0000A0E3           MOV      R0,#+0
   \   000002A4   08008DE5           STR      R0,[SP, #+8]
   \   000002A8   0200A0E3           MOV      R0,#+2
   \   000002AC   04008DE5           STR      R0,[SP, #+4]
   \   000002B0   00408DE5           STR      R4,[SP, #+0]
   \   000002B4   2730A0E3           MOV      R3,#+39
   \   000002B8   6120A0E3           MOV      R2,#+97
   \   000002BC   5D10A0E3           MOV      R1,#+93
   \   000002C0   0500A0E1           MOV      R0,R5
   \   000002C4   ........           BL       BUTTON_CreateEx
   \   000002C8   0080A0E1           MOV      R8,R0
   1464          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmMediumBlueButton);
   \   000002CC   ........           LDR      R2,??DataTable133
   \   000002D0   0010A0E3           MOV      R1,#+0
   \   000002D4   ........           BL       BUTTON_SetBitmap
   1465          		BUTTON_SetText(hBtn, "Settings");
   \   000002D8   ............       ADRL     R1,`?<Constant "Settings">`
   \              ....        
   \   000002E0   0800A0E1           MOV      R0,R8
   \   000002E4   ........           BL       BUTTON_SetText
   1466          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000002E8   FF64E0E3           MVN      R6,#-16777216
   \   000002EC   0620A0E1           MOV      R2,R6
   \   000002F0   0010A0E3           MOV      R1,#+0
   \   000002F4   0800A0E1           MOV      R0,R8
   \   000002F8   ........           BL       BUTTON_SetTextColor
   1467          		BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000002FC   0620A0E1           MOV      R2,R6
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   0800A0E1           MOV      R0,R8
   \   00000308   ........           BL       BUTTON_SetTextColor
   1468          		BUTTON_SetFocussable(hBtn, 0);
   \   0000030C   0010A0E3           MOV      R1,#+0
   \   00000310   0800A0E1           MOV      R0,R8
   \   00000314   ........           BL       BUTTON_SetFocussable
   1469          
   1470          		hTrackTypeBtn = BUTTON_CreateEx(BUTTON_LEFT + 103, POSITION_TWO, 97, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, TRACK_TYPE_BUTTON);
   \   00000318   1100A0E3           MOV      R0,#+17
   \   0000031C   800E80E3           ORR      R0,R0,#0x800
   \   00000320   0C008DE5           STR      R0,[SP, #+12]
   \   00000324   0000A0E3           MOV      R0,#+0
   \   00000328   08008DE5           STR      R0,[SP, #+8]
   \   0000032C   0200A0E3           MOV      R0,#+2
   \   00000330   04008DE5           STR      R0,[SP, #+4]
   \   00000334   5D10A0E3           MOV      R1,#+93
   \   00000338   00408DE5           STR      R4,[SP, #+0]
   \   0000033C   2730A0E3           MOV      R3,#+39
   \   00000340   6120A0E3           MOV      R2,#+97
   \   00000344   430F81E2           ADD      R0,R1,#+268
   \   00000348   ........           BL       BUTTON_CreateEx
   \   0000034C   880387E5           STR      R0,[R7, #+904]
   1471          	//	BUTTON_SetBitmap(hTrackTypeBtn, BUTTON_BI_UNPRESSED, &bmBlueButton);
   1472          		SetTrackTypeButtonText();
   \   00000350   ........           BL       SetTrackTypeButtonText
   1473          		BUTTON_SetTextColor(hTrackTypeBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   0010A0E3           MOV      R1,#+0
   \   0000035C   880397E5           LDR      R0,[R7, #+904]
   \   00000360   ........           BL       BUTTON_SetTextColor
   1474          		BUTTON_SetFocussable(hTrackTypeBtn, 0);
   \   00000364   0010A0E3           MOV      R1,#+0
   \   00000368   880397E5           LDR      R0,[R7, #+904]
   \   0000036C   ........           BL       BUTTON_SetFocussable
   1475          
   1476          		hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_FOUR, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, EDIT_TRACK_NAME_BUTTON);
   \   00000370   0600A0E3           MOV      R0,#+6
   \   00000374   800E80E3           ORR      R0,R0,#0x800
   \   00000378   0C008DE5           STR      R0,[SP, #+12]
   \   0000037C   0000A0E3           MOV      R0,#+0
   \   00000380   08008DE5           STR      R0,[SP, #+8]
   \   00000384   0200A0E3           MOV      R0,#+2
   \   00000388   04008DE5           STR      R0,[SP, #+4]
   \   0000038C   00408DE5           STR      R4,[SP, #+0]
   \   00000390   2730A0E3           MOV      R3,#+39
   \   00000394   CA20A0E3           MOV      R2,#+202
   \   00000398   B110A0E3           MOV      R1,#+177
   \   0000039C   0500A0E1           MOV      R0,R5
   \   000003A0   ........           BL       BUTTON_CreateEx
   \   000003A4   0070A0E1           MOV      R7,R0
   1477          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmYellowButton);
   \   000003A8   ........           LDR      R2,??DataTable122_3
   \   000003AC   0010A0E3           MOV      R1,#+0
   \   000003B0   ........           BL       BUTTON_SetBitmap
   1478          		BUTTON_SetText(hBtn, "Edit Name");
   \   000003B4   ............       ADRL     R1,`?<Constant "Edit Name">`
   \              ....        
   \   000003BC   0700A0E1           MOV      R0,R7
   \   000003C0   ........           BL       BUTTON_SetText
   1479          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000003C4   0020A0E3           MOV      R2,#+0
   \   000003C8   0010A0E3           MOV      R1,#+0
   \   000003CC   0700A0E1           MOV      R0,R7
   \   000003D0   ........           BL       BUTTON_SetTextColor
   1480          		BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000003D4   0620A0E1           MOV      R2,R6
   \   000003D8   0110A0E3           MOV      R1,#+1
   \   000003DC   0700A0E1           MOV      R0,R7
   \   000003E0   ........           BL       BUTTON_SetTextColor
   1481          		BUTTON_SetFocussable(hBtn, 0);
   \   000003E4   0010A0E3           MOV      R1,#+0
   \   000003E8   0700A0E1           MOV      R0,R7
   \   000003EC   ........           BL       BUTTON_SetFocussable
   1482          
   1483          		hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_FIVE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, DELETE_TRACK_BUTTON);
   \   000003F0   0F00A0E3           MOV      R0,#+15
   \   000003F4   800E80E3           ORR      R0,R0,#0x800
   \   000003F8   0C008DE5           STR      R0,[SP, #+12]
   \   000003FC   0000A0E3           MOV      R0,#+0
   \   00000400   08008DE5           STR      R0,[SP, #+8]
   \   00000404   0200A0E3           MOV      R0,#+2
   \   00000408   04008DE5           STR      R0,[SP, #+4]
   \   0000040C   00408DE5           STR      R4,[SP, #+0]
   \   00000410   2730A0E3           MOV      R3,#+39
   \   00000414   CA20A0E3           MOV      R2,#+202
   \   00000418   DB10A0E3           MOV      R1,#+219
   \   0000041C   0500A0E1           MOV      R0,R5
   \   00000420   ........           BL       BUTTON_CreateEx
   \   00000424   0070A0E1           MOV      R7,R0
   1484          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000428   ........           LDR      R2,??DataTable122_1
   \   0000042C   0010A0E3           MOV      R1,#+0
   \   00000430   ........           BL       BUTTON_SetBitmap
   1485          		BUTTON_SetText(hBtn, "Delete Track");
   \   00000434   ............       ADRL     R1,`?<Constant "Delete Track">`
   \              ....        
   \   0000043C   0700A0E1           MOV      R0,R7
   \   00000440   ........           BL       BUTTON_SetText
   1486          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   0010A0E3           MOV      R1,#+0
   \   0000044C   0700A0E1           MOV      R0,R7
   \   00000450   ........           BL       BUTTON_SetTextColor
   1487          		BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000454   0620A0E1           MOV      R2,R6
   \                     ??FinishDisplayTrackSelection_2:
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   0700A0E1           MOV      R0,R7
   \   00000460   ........           BL       BUTTON_SetTextColor
   1488          		BUTTON_SetFocussable(hBtn, 0);
   \   00000464   0010A0E3           MOV      R1,#+0
   \   00000468   0700A0E1           MOV      R0,R7
   \   0000046C   ........           BL       BUTTON_SetFocussable
   1489          	}
   1490          
   1491          	hBtn = BUTTON_CreateEx(BUTTON_LEFT, POSITION_THREE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, NEW_TRACK_BUTTON);
   \   00000470   0500A0E3           MOV      R0,#+5
   \   00000474   800E80E3           ORR      R0,R0,#0x800
   \   00000478   0C008DE5           STR      R0,[SP, #+12]
   \   0000047C   0000A0E3           MOV      R0,#+0
   \   00000480   08008DE5           STR      R0,[SP, #+8]
   \   00000484   0200A0E3           MOV      R0,#+2
   \   00000488   04008DE5           STR      R0,[SP, #+4]
   \   0000048C   00408DE5           STR      R4,[SP, #+0]
   \   00000490   2730A0E3           MOV      R3,#+39
   \   00000494   CA20A0E3           MOV      R2,#+202
   \   00000498   8710A0E3           MOV      R1,#+135
   \   0000049C   0500A0E1           MOV      R0,R5
   \   000004A0   ........           BL       BUTTON_CreateEx
   \   000004A4   0040A0E1           MOV      R4,R0
   1492          	BUTTON_SetText(hBtn, "New Track");
   \   000004A8   ............       ADRL     R1,`?<Constant "New Track">`
   \              ....        
   \   000004B0   ........           BL       BUTTON_SetText
   1493          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   000004B4   ........           LDR      R2,??DataTable122_5
   \   000004B8   0010A0E3           MOV      R1,#+0
   \   000004BC   0400A0E1           MOV      R0,R4
   \   000004C0   ........           BL       BUTTON_SetBitmap
   1494          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000004C4   0020A0E3           MOV      R2,#+0
   \   000004C8   0010A0E3           MOV      R1,#+0
   \   000004CC   0400A0E1           MOV      R0,R4
   \   000004D0   ........           BL       BUTTON_SetTextColor
   1495          	BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000004D4   FF24E0E3           MVN      R2,#-16777216
   \   000004D8   0110A0E3           MOV      R1,#+1
   \   000004DC   0400A0E1           MOV      R0,R4
   \   000004E0   ........           BL       BUTTON_SetTextColor
   1496          	BUTTON_SetFocussable(hBtn, 0);
   \   000004E4   0010A0E3           MOV      R1,#+0
   \   000004E8   0400A0E1           MOV      R0,R4
   \   000004EC   ........           BL       BUTTON_SetFocussable
   1497          }
   \   000004F0   30D08DE2           ADD      SP,SP,#+48       ;; stack cleaning
   \   000004F4   F081BDE8           POP      {R4-R8,PC}       ;; return
   1498          

   \                                 In section .text, align 4, keep-with-next
   1499          void CreateSprites(const GUI_BITMAP *pTopBar, const GUI_BITMAP *pBottomBar)
   1500          {
   \                     CreateSprites:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1501          	if ((hTop != 0) || (hBottom != 0))
   \   00000004   ........           LDR      R6,??DisplayAlphaList_0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   A80396E5           LDR      R0,[R6, #+936]
   \   00000014   AC1396E5           LDR      R1,[R6, #+940]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   001091E1           ORRS     R1,R1,R0
   \   00000020   0A00000A           BEQ      ??CreateSprites_0
   1502          		DeleteSprites();
   \   00000024   0070A0E3           MOV      R7,#+0
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??CreateSprites_1
   \   00000030   ........           BL       GUI_SPRITE_Delete
   \   00000034   A87386E5           STR      R7,[R6, #+936]
   \                     ??CreateSprites_1:
   \   00000038   AC0396E5           LDR      R0,[R6, #+940]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??CreateSprites_2
   \   00000044   ........           BL       GUI_SPRITE_Delete
   \   00000048   AC7386E5           STR      R7,[R6, #+940]
   \                     ??CreateSprites_2:
   \   0000004C   B07386E5           STR      R7,[R6, #+944]
   1503          
   1504          	hTop = GUI_SPRITE_Create(pTopBar, LISTXOFFSET, LISTYOFFSET);
   \                     ??CreateSprites_0:
   \   00000050   3020A0E3           MOV      R2,#+48
   \   00000054   1E10A0E3           MOV      R1,#+30
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       GUI_SPRITE_Create
   \   00000060   A80386E5           STR      R0,[R6, #+936]
   1505          	hBottom = GUI_SPRITE_Create(pBottomBar, LISTXOFFSET, LISTYOFFSET + LISTHEIGHT - 7);
   \   00000064   FB20A0E3           MOV      R2,#+251
   \   00000068   1E10A0E3           MOV      R1,#+30
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       GUI_SPRITE_Create
   \   00000074   AC0386E5           STR      R0,[R6, #+940]
   1506          }
   \   00000078   04D08DE2           ADD      SP,SP,#+4
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return
   1507          

   \                                 In section .text, align 4, keep-with-next
   1508          void DeleteSprites(void)
   1509          {
   \                     DeleteSprites:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1510          	if (hTop)
   \   00000004   ........           LDR      R4,??DisplayAlphaList_0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   A80394E5           LDR      R0,[R4, #+936]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100000A           BEQ      ??DeleteSprites_0
   1511          	{
   1512          		GUI_SPRITE_Delete(hTop);
   \   0000001C   ........           BL       GUI_SPRITE_Delete
   1513          		hTop = 0;
   \   00000020   A85384E5           STR      R5,[R4, #+936]
   1514          	}
   1515          	if (hBottom)
   \                     ??DeleteSprites_0:
   \   00000024   AC0394E5           LDR      R0,[R4, #+940]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??DeleteSprites_1
   1516          	{
   1517          		GUI_SPRITE_Delete(hBottom);
   \   00000030   ........           BL       GUI_SPRITE_Delete
   1518          		hBottom = 0;
   \   00000034   AC5384E5           STR      R5,[R4, #+940]
   1519          	}
   1520          	hideLevel = 0;
   \                     ??DeleteSprites_1:
   \   00000038   B05384E5           STR      R5,[R4, #+944]
   1521          }
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
   1522          

   \                                 In section .text, align 4, keep-with-next
   1523          void HideSprites(void)
   1524          {
   \                     HideSprites:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1525          	if (hTop)
   \   00000004   ........           LDR      R4,??DisplayAlphaList_0
   \   00000008   A80394E5           LDR      R0,[R4, #+936]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0700000A           BEQ      ??HideSprites_0
   1526          	{
   1527          		if (hideLevel++ == 0)
   \   00000014   B01394E5           LDR      R1,[R4, #+944]
   \   00000018   012081E2           ADD      R2,R1,#+1
   \   0000001C   B02384E5           STR      R2,[R4, #+944]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0200001A           BNE      ??HideSprites_0
   1528          		{
   1529          			GUI_SPRITE_Hide(hTop);
   \   00000028   ........           BL       GUI_SPRITE_Hide
   1530          			GUI_SPRITE_Hide(hBottom);
   \   0000002C   AC0394E5           LDR      R0,[R4, #+940]
   \   00000030   ........           BL       GUI_SPRITE_Hide
   1531          		}
   1532          	}
   1533          }
   \                     ??HideSprites_0:
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   1534          
   1535          

   \                                 In section .text, align 4, keep-with-next
   1536          void UnhideSprites(void)
   1537          {
   \                     UnhideSprites:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1538          	if (hTop)
   \   00000004   ........           LDR      R4,??DisplayAlphaList_0
   \   00000008   A80394E5           LDR      R0,[R4, #+936]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0900000A           BEQ      ??UnhideSprites_0
   1539          	{
   1540          		if (--hideLevel <= 0)
   \   00000014   B01394E5           LDR      R1,[R4, #+944]
   \   00000018   011041E2           SUB      R1,R1,#+1
   \   0000001C   B01384E5           STR      R1,[R4, #+944]
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   040000AA           BGE      ??UnhideSprites_0
   1541          		{
   1542          			GUI_SPRITE_Show(hTop);
   \   00000028   ........           BL       GUI_SPRITE_Show
   1543          			GUI_SPRITE_Show(hBottom);
   \   0000002C   AC0394E5           LDR      R0,[R4, #+940]
   \   00000030   ........           BL       GUI_SPRITE_Show
   1544          			hideLevel = 0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   B00384E5           STR      R0,[R4, #+944]
   1545          		}
   1546          	}
   1547          }
   \                     ??UnhideSprites_0:
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   1548          

   \                                 In section .text, align 4, keep-with-next
   1549          void UpdateTrackList(WM_HWIN hParent)
   1550          {
   \                     UpdateTrackList:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1551          	char **pTracks;
   1552          	int sel, i;
   1553          	HEADER_Handle hHeader;
   1554          	const GUI_BITMAP *pTopBar, *pBottomBar;
   1555          
   1556          	if (hTrackList)
   \   00000004   ........           LDR      R4,??DisplayAlphaList_0
   \   00000008   0080A0E1           MOV      R8,R0
   \   0000000C   7C0394E5           LDR      R0,[R4, #+892]
   \   00000010   10D04DE2           SUB      SP,SP,#+16
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000000A           BEQ      ??UpdateTrackList_0
   1557          		WM_DeleteWindow(hTrackList);
   \   0000001C   ........           BL       WM_DeleteWindow
   1558          	DeleteSprites();
   \                     ??UpdateTrackList_0:
   \   00000020   A80394E5           LDR      R0,[R4, #+936]
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??UpdateTrackList_1
   \   00000030   ........           BL       GUI_SPRITE_Delete
   \   00000034   A85384E5           STR      R5,[R4, #+936]
   \                     ??UpdateTrackList_1:
   \   00000038   AC0394E5           LDR      R0,[R4, #+940]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??UpdateTrackList_2
   \   00000044   ........           BL       GUI_SPRITE_Delete
   \   00000048   AC5384E5           STR      R5,[R4, #+940]
   \                     ??UpdateTrackList_2:
   \   0000004C   B05384E5           STR      R5,[R4, #+944]
   1559          
   1560          	CreateTracks();				// Completely update all track data as the track type may have changed
   \   00000050   ........           BL       CreateTracks
   1561          
   1562          	if (ctType == CT_RACE_ENTRY)
   \   00000054   B703D4E5           LDRB     R0,[R4, #+951]
   \   00000058   ........           LDR      R9,??DataTable127_1
   \   0000005C   010050E3           CMP      R0,#+1
   1563          		GetClosestTracks(161);
   \   00000060   A100A003           MOVEQ    R0,#+161
   1564          	else GetClosestTracks(sysData.radius);
   \   00000064   B4009915           LDRNE    R0,[R9, #+180]
   \   00000068   ........           BL       GetClosestTracks
   1565          
   1566          	CreateTrackList();			// Note, this routine sets global variable numTracks
   \   0000006C   ........           BL       CreateTrackList
   1567          
   1568          	//if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
   1569          	//{
   1570          	//	pTracks = pTracksFull;
   1571          	//	numTracks = numberOfTracks;
   1572          	//}
   1573          	//else
   1574          	{
   1575          		pTracks = pTracksShort;
   1576          		numTracks = numberOfShortListTracksUser;
   \   00000070   400094E5           LDR      R0,[R4, #+64]
   \   00000074   3CA094E5           LDR      R10,[R4, #+60]
   \   00000078   940384E5           STR      R0,[R4, #+916]
   1577          	}
   1578          
   1579          	sel = FindSelection(TRACK_DATA);
   \   0000007C   A000D9E5           LDRB     R0,[R9, #+160]
   \   00000080   0A60A0E1           MOV      R6,R10
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0B00000A           BEQ      ??UpdateTrackList_3
   \   0000008C   0070A0E3           MOV      R7,#+0
   \   00000090   000000EA           B        ??UpdateTrackList_4
   \                     ??UpdateTrackList_5:
   \   00000094   017087E2           ADD      R7,R7,#+1
   \                     ??UpdateTrackList_4:
   \   00000098   00009AE5           LDR      R0,[R10, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0500000A           BEQ      ??UpdateTrackList_3
   \   000000A4   A01089E2           ADD      R1,R9,#+160
   \   000000A8   04009AE4           LDR      R0,[R10], #+4
   \   000000AC   ........           BL       strcmp
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   F6FFFF1A           BNE      ??UpdateTrackList_5
   \   000000B8   000000EA           B        ??UpdateTrackList_6
   \                     ??UpdateTrackList_3:
   \   000000BC   0070A0E3           MOV      R7,#+0
   1580          
   1581          	// Display track list
   1582          	hTrackList = LISTVIEW_CreateEx(LISTXOFFSET, LISTYOFFSET, LISTWIDTH, LISTHEIGHT, hParent, WM_CF_SHOW, 0, TRACKLIST);
   \                     ??UpdateTrackList_6:
   \   000000C0   0300A0E3           MOV      R0,#+3
   \   000000C4   800F80E3           ORR      R0,R0,#0x200
   \   000000C8   0C008DE5           STR      R0,[SP, #+12]
   \   000000CC   0200A0E3           MOV      R0,#+2
   \   000000D0   04008DE5           STR      R0,[SP, #+4]
   \   000000D4   08508DE5           STR      R5,[SP, #+8]
   \   000000D8   00808DE5           STR      R8,[SP, #+0]
   \   000000DC   D230A0E3           MOV      R3,#+210
   \   000000E0   DC20A0E3           MOV      R2,#+220
   \   000000E4   3010A0E3           MOV      R1,#+48
   \   000000E8   1E00A0E3           MOV      R0,#+30
   \   000000EC   ........           BL       LISTVIEW_CreateEx
   \   000000F0   7C0384E5           STR      R0,[R4, #+892]
   1583          	LISTVIEW_AddColumn(hTrackList, LISTWIDTH - FINGER_WIDTH, "", GUI_TA_VCENTER);
   \   000000F4   0C30A0E3           MOV      R3,#+12
   \   000000F8   ........           ADR      R2,??DataTable122_4  ;; ""
   \   000000FC   B910A0E3           MOV      R1,#+185
   \   00000100   ........           BL       LISTVIEW_AddColumn
   1584          	LISTVIEW_SetLBorder(hTrackList, 10);
   \   00000104   0A10A0E3           MOV      R1,#+10
   \   00000108   7C0394E5           LDR      R0,[R4, #+892]
   \   0000010C   ........           BL       LISTVIEW_SetLBorder
   1585          
   1586          	LISTVIEW_SetAutoScrollV(hTrackList, 1);
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   7C0394E5           LDR      R0,[R4, #+892]
   \   00000118   ........           BL       LISTVIEW_SetAutoScrollV
   1587          	LISTVIEW_SetFont(hTrackList, &GUI_Font24B_ASCII);
   \   0000011C   ........           LDR      R1,??DataTable136
   \   00000120   7C0394E5           LDR      R0,[R4, #+892]
   \   00000124   ........           BL       LISTVIEW_SetFont
   1588          	hHeader = LISTVIEW_GetHeader(hTrackList);
   \   00000128   7C0394E5           LDR      R0,[R4, #+892]
   \   0000012C   ........           BL       LISTVIEW_GetHeader
   1589          	HEADER_SetHeight(hHeader, 0);
   \   00000130   0010A0E3           MOV      R1,#+0
   \   00000134   ........           BL       HEADER_SetHeight
   1590          	LISTVIEW_SetRowHeight(hTrackList, FINGER_WIDTH);
   \   00000138   2310A0E3           MOV      R1,#+35
   \   0000013C   7C0394E5           LDR      R0,[R4, #+892]
   \   00000140   ........           BL       LISTVIEW_SetRowHeight
   1591          	//LISTVIEW_SetCompareFunc(hTrackList, 0, &LISTVIEW_CompareDec);
   1592          	//LISTVIEW_SetCompareFunc(hTrackList, 1, &LISTVIEW_CompareText);
   1593          	//LISTVIEW_EnableSort(hTrackList);
   1594          
   1595          	if (numTracks == 0)		// Watch for special case where no tracks in range - allow display of "0-th" entry of "None in range"
   \   00000144   940394E5           LDR      R0,[R4, #+916]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0300001A           BNE      ??UpdateTrackList_7
   1596          		LISTVIEW_AddRow(hTrackList, (const GUI_ConstString *)&pTracks[0]);
   \   00000150   0610A0E1           MOV      R1,R6
   \   00000154   7C0394E5           LDR      R0,[R4, #+892]
   \   00000158   ........           BL       LISTVIEW_AddRow
   \   0000015C   0A0000EA           B        ??UpdateTrackList_8
   1597          	else for (i = 0; i < numTracks; i++)
   \                     ??UpdateTrackList_7:
   \   00000160   0080A0E3           MOV      R8,#+0
   \   00000164   010050E3           CMP      R0,#+1
   \   00000168   070000BA           BLT      ??UpdateTrackList_8
   1598          	{
   1599          		LISTVIEW_AddRow(hTrackList, (const GUI_ConstString *)&pTracks[i]);
   \                     ??UpdateTrackList_9:
   \   0000016C   0610A0E1           MOV      R1,R6
   \   00000170   7C0394E5           LDR      R0,[R4, #+892]
   \   00000174   ........           BL       LISTVIEW_AddRow
   1600          	}
   \   00000178   940394E5           LDR      R0,[R4, #+916]
   \   0000017C   018088E2           ADD      R8,R8,#+1
   \   00000180   046086E2           ADD      R6,R6,#+4
   \   00000184   000058E1           CMP      R8,R0
   \   00000188   F7FFFFBA           BLT      ??UpdateTrackList_9
   1601          	LISTVIEW_SetSel(hTrackList, sel);
   \                     ??UpdateTrackList_8:
   \   0000018C   0710A0E1           MOV      R1,R7
   \   00000190   7C0394E5           LDR      R0,[R4, #+892]
   \   00000194   ........           BL       LISTVIEW_SetSel
   1602          	LISTVIEW_SetBkColor(hTrackList, LISTVIEW_CI_SELFOCUS, GUI_LISTBLUE);
   \   00000198   ........           LDR      R2,??DataTable137_2  ;; 0xff5480
   \   0000019C   0210A0E3           MOV      R1,#+2
   \   000001A0   7C0394E5           LDR      R0,[R4, #+892]
   \   000001A4   ........           BL       LISTVIEW_SetBkColor
   1603          
   1604          	if (numTracks > 6)
   \   000001A8   941394E5           LDR      R1,[R4, #+916]
   \   000001AC   7C0394E5           LDR      R0,[R4, #+892]
   \   000001B0   070051E3           CMP      R1,#+7
   \   000001B4   090000BA           BLT      ??UpdateTrackList_10
   1605          	{
   1606          		LISTVIEW_SetColumnWidth(hTrackList, 0, LISTWIDTH - FINGER_WIDTH);
   \   000001B8   B920A0E3           MOV      R2,#+185
   \   000001BC   0010A0E3           MOV      R1,#+0
   \   000001C0   ........           BL       LISTVIEW_SetColumnWidth
   1607          		SCROLLBAR_SetWidth(WM_GetScrollbarV(hTrackList), FINGER_WIDTH);
   \   000001C4   7C0394E5           LDR      R0,[R4, #+892]
   \   000001C8   ........           BL       WM_GetScrollbarV
   \   000001CC   2310A0E3           MOV      R1,#+35
   \   000001D0   ........           BL       SCROLLBAR_SetWidth
   1608          		pTopBar = &bmShortTopBar;
   \   000001D4   ........           LDR      R6,??DataTable137_3
   1609          		pBottomBar = &bmShortBottomBar;
   \   000001D8   ........           LDR      R7,??DataTable137_4
   \   000001DC   080000EA           B        ??UpdateTrackList_11
   1610          	}
   1611          	else
   1612          	{
   1613          		LISTVIEW_SetColumnWidth(hTrackList, 0, LISTWIDTH);
   \                     ??UpdateTrackList_10:
   \   000001E0   DC20A0E3           MOV      R2,#+220
   \   000001E4   0010A0E3           MOV      R1,#+0
   \   000001E8   ........           BL       LISTVIEW_SetColumnWidth
   1614          		SCROLLBAR_SetWidth(WM_GetScrollbarV(hTrackList), 0);
   \   000001EC   7C0394E5           LDR      R0,[R4, #+892]
   \   000001F0   ........           BL       WM_GetScrollbarV
   \   000001F4   0010A0E3           MOV      R1,#+0
   \   000001F8   ........           BL       SCROLLBAR_SetWidth
   1615          		pTopBar = &bmTopBar;
   \   000001FC   ........           LDR      R6,??DataTable137_5
   1616          		pBottomBar = &bmBottomBar;
   \   00000200   ........           LDR      R7,??DataTable138
   1617          	}
   1618          
   1619          	// Set "ignore region" of list area to prevent interference with BACK button
   1620          	LISTVIEW_SetLFreeBorder(hTrackList, 30);
   \                     ??UpdateTrackList_11:
   \   00000204   1E10A0E3           MOV      R1,#+30
   \   00000208   7C0394E5           LDR      R0,[R4, #+892]
   \   0000020C   ........           BL       LISTVIEW_SetLFreeBorder
   1621          
   1622          	CreateSprites(pTopBar, pBottomBar);
   \   00000210   A80394E5           LDR      R0,[R4, #+936]
   \   00000214   AC1394E5           LDR      R1,[R4, #+940]
   \   00000218   001091E1           ORRS     R1,R1,R0
   \   0000021C   0900000A           BEQ      ??UpdateTrackList_12
   \   00000220   000050E3           CMP      R0,#+0
   \   00000224   0100000A           BEQ      ??UpdateTrackList_13
   \   00000228   ........           BL       GUI_SPRITE_Delete
   \   0000022C   A85384E5           STR      R5,[R4, #+936]
   \                     ??UpdateTrackList_13:
   \   00000230   AC0394E5           LDR      R0,[R4, #+940]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   0100000A           BEQ      ??UpdateTrackList_14
   \   0000023C   ........           BL       GUI_SPRITE_Delete
   \   00000240   AC5384E5           STR      R5,[R4, #+940]
   \                     ??UpdateTrackList_14:
   \   00000244   B05384E5           STR      R5,[R4, #+944]
   \                     ??UpdateTrackList_12:
   \   00000248   3020A0E3           MOV      R2,#+48
   \   0000024C   1E10A0E3           MOV      R1,#+30
   \   00000250   0600A0E1           MOV      R0,R6
   \   00000254   ........           BL       GUI_SPRITE_Create
   \   00000258   A80384E5           STR      R0,[R4, #+936]
   \   0000025C   FB20A0E3           MOV      R2,#+251
   \   00000260   1E10A0E3           MOV      R1,#+30
   \   00000264   0700A0E1           MOV      R0,R7
   \   00000268   ........           BL       GUI_SPRITE_Create
   \   0000026C   AC0384E5           STR      R0,[R4, #+940]
   1623          
   1624          	WM_SetFocus(hTrackList);
   \   00000270   7C0394E5           LDR      R0,[R4, #+892]
   \   00000274   10D08DE2           ADD      SP,SP,#+16
   \   00000278   F047BDE8           POP      {R4-R10,LR}
   \   0000027C   ........           B        WM_SetFocus      ;; tailcall
   1625          }
   1626          

   \                                 In section .text, align 4, keep-with-next
   1627          void DisplayAlphaList(LISTVIEW_Handle *hList, unsigned int id, char **pList, unsigned int sel)
   1628          {
   \                     DisplayAlphaList:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   1629          	char *pItem;
   1630          	HEADER_Handle hHeader;
   1631          	LISTVIEW_Handle hListLocal;
   1632          	int numItems;
   1633          	const GUI_BITMAP *pTopBar, *pBottomBar;
   1634          
   1635          //	WM_DeleteWindow(*hList);
   1636          	if (!*hList)
   \   00000008   004096E5           LDR      R4,[R6, #+0]
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0380A0E1           MOV      R8,R3
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   2A00001A           BNE      ??DisplayAlphaList_1
   1637          	{
   1638          		*hList = hListLocal = LISTVIEW_CreateEx(LISTXOFFSET, LISTYOFFSET, LISTWIDTH, LISTHEIGHT, hRaceSetupScreens, WM_CF_SHOW, 0, id);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   08008DE5           STR      R0,[SP, #+8]
   \   00000028   0200A0E3           MOV      R0,#+2
   \   0000002C   04008DE5           STR      R0,[SP, #+4]
   \   00000030   90009FE5           LDR      R0,??DisplayAlphaList_0
   \   00000034   0C108DE5           STR      R1,[SP, #+12]
   \   00000038   6C0390E5           LDR      R0,[R0, #+876]
   \   0000003C   D230A0E3           MOV      R3,#+210
   \   00000040   00008DE5           STR      R0,[SP, #+0]
   \   00000044   DC20A0E3           MOV      R2,#+220
   \   00000048   3010A0E3           MOV      R1,#+48
   \   0000004C   1E00A0E3           MOV      R0,#+30
   \   00000050   ........           BL       LISTVIEW_CreateEx
   \   00000054   0040A0E1           MOV      R4,R0
   \   00000058   000086E5           STR      R0,[R6, #+0]
   1639          
   1640          		LISTVIEW_AddColumn(hListLocal, LISTWIDTH - FINGER_WIDTH, "", GUI_TA_VCENTER);
   \   0000005C   0C30A0E3           MOV      R3,#+12
   \   00000060   ........           ADR      R2,??DataTable126  ;; ""
   \   00000064   B910A0E3           MOV      R1,#+185
   \   00000068   ........           BL       LISTVIEW_AddColumn
   1641          		LISTVIEW_SetLBorder(hListLocal, 10);
   \   0000006C   0A10A0E3           MOV      R1,#+10
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       LISTVIEW_SetLBorder
   1642          
   1643          		LISTVIEW_SetAutoScrollV(hListLocal, 1);
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       LISTVIEW_SetAutoScrollV
   1644          		LISTVIEW_SetFont(hListLocal, &GUI_Font24B_ASCII);
   \   00000084   ........           LDR      R1,??DataTable136
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       LISTVIEW_SetFont
   1645          		hHeader = LISTVIEW_GetHeader(hListLocal);
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       LISTVIEW_GetHeader
   1646          		HEADER_SetHeight(hHeader, 0);
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   ........           BL       HEADER_SetHeight
   1647          		LISTVIEW_SetRowHeight(hListLocal, FINGER_WIDTH);
   \   000000A0   2310A0E3           MOV      R1,#+35
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       LISTVIEW_SetRowHeight
   1648          		LISTVIEW_SetCompareFunc(hListLocal, 0, &LISTVIEW_CompareText);
   \   000000AC   ........           LDR      R2,??DataTable138_1
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       LISTVIEW_SetCompareFunc
   1649          		LISTVIEW_EnableSort(hListLocal);
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       LISTVIEW_EnableSort
   \   000000C4   130000EA           B        ??DisplayAlphaList_2
   \                     ??DisplayAlphaList_0:
   \   000000C8   ........           DC32     RaceSetupScreenList
   1650          	}
   1651          	else
   1652          	{
   1653          		int count;
   1654          
   1655          		hListLocal = *hList;
   1656          		// Delete the contents of the old list
   1657          		count = LISTVIEW_GetNumRows(hListLocal);
   \                     ??DisplayAlphaList_1:
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       LISTVIEW_GetNumRows
   \   000000D4   0050B0E1           MOVS     R5,R0
   \   000000D8   0F00000A           BEQ      ??DisplayAlphaList_3
   \   000000DC   010015E3           TST      R5,#0x1
   \   000000E0   0200000A           BEQ      ??DisplayAlphaList_4
   1658          		while (count--)
   1659          			LISTVIEW_DeleteRow(hListLocal, 0);
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       LISTVIEW_DeleteRow
   \                     ??DisplayAlphaList_4:
   \   000000F0   A550B0E1           LSRS     R5,R5,#+1
   \   000000F4   0800000A           BEQ      ??DisplayAlphaList_3
   \                     ??DisplayAlphaList_5:
   \   000000F8   0010A0E3           MOV      R1,#+0
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       LISTVIEW_DeleteRow
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       LISTVIEW_DeleteRow
   \   00000110   015055E2           SUBS     R5,R5,#+1
   \   00000114   F7FFFF1A           BNE      ??DisplayAlphaList_5
   1660          	}
   1661          
   1662          	numItems = 0;
   \                     ??DisplayAlphaList_2:
   \   00000118   0050A0E3           MOV      R5,#+0
   \                     ??DisplayAlphaList_3:
   \   0000011C   0590A0E1           MOV      R9,R5
   \   00000120   030000EA           B        ??DisplayAlphaList_6
   1663          	while ((pItem = *pList++) != 0)
   1664          	{
   1665          		LISTVIEW_AddRow(*hList, (const GUI_ConstString *)&pItem);
   \                     ??DisplayAlphaList_7:
   \   00000124   10108DE2           ADD      R1,SP,#+16
   \   00000128   000096E5           LDR      R0,[R6, #+0]
   \   0000012C   ........           BL       LISTVIEW_AddRow
   1666          		numItems++;
   \   00000130   019089E2           ADD      R9,R9,#+1
   1667          	}
   \                     ??DisplayAlphaList_6:
   \   00000134   040097E4           LDR      R0,[R7], #+4
   \   00000138   10008DE5           STR      R0,[SP, #+16]
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   F7FFFF1A           BNE      ??DisplayAlphaList_7
   1668          
   1669          	LISTVIEW_SetSort(hListLocal, 0, 1);			// Sort the list in ascending alphabetical order
   \   00000144   0120A0E3           MOV      R2,#+1
   \   00000148   0010A0E3           MOV      R1,#+0
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           BL       LISTVIEW_SetSort
   1670          	LISTVIEW_SetSelUnsorted(hListLocal, sel);	// Set selection AFTER sorting using the unsorted method - trying to set sorted was causing race conditions
   \   00000154   0810A0E1           MOV      R1,R8
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           BL       LISTVIEW_SetSelUnsorted
   1671          	LISTVIEW_SetBkColor(hListLocal, LISTVIEW_CI_SELFOCUS, GUI_LISTBLUE);
   \   00000160   ........           LDR      R2,??DataTable137_2  ;; 0xff5480
   \   00000164   0210A0E3           MOV      R1,#+2
   \   00000168   0400A0E1           MOV      R0,R4
   \   0000016C   ........           BL       LISTVIEW_SetBkColor
   1672          
   1673          	if (numItems > 6)
   \   00000170   070059E3           CMP      R9,#+7
   \   00000174   0A0000BA           BLT      ??DisplayAlphaList_8
   1674          	{
   1675          		LISTVIEW_SetColumnWidth(hListLocal, 0, LISTWIDTH - FINGER_WIDTH);
   \   00000178   B920A0E3           MOV      R2,#+185
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   ........           BL       LISTVIEW_SetColumnWidth
   1676          		SCROLLBAR_SetWidth(WM_GetScrollbarV(hListLocal), FINGER_WIDTH);
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   ........           BL       WM_GetScrollbarV
   \   00000190   2310A0E3           MOV      R1,#+35
   \   00000194   ........           BL       SCROLLBAR_SetWidth
   1677          		pTopBar = &bmShortTopBar;
   \   00000198   ........           LDR      R6,??DataTable137_3
   1678          		pBottomBar = &bmShortBottomBar;
   \   0000019C   ........           LDR      R7,??DataTable137_4
   \   000001A0   090000EA           B        ??DisplayAlphaList_9
   1679          	}
   1680          	else
   1681          	{
   1682          		LISTVIEW_SetColumnWidth(hListLocal, 0, LISTWIDTH);
   \                     ??DisplayAlphaList_8:
   \   000001A4   DC20A0E3           MOV      R2,#+220
   \   000001A8   0010A0E3           MOV      R1,#+0
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   ........           BL       LISTVIEW_SetColumnWidth
   1683          		SCROLLBAR_SetWidth(WM_GetScrollbarV(hListLocal), 0);
   \   000001B4   0400A0E1           MOV      R0,R4
   \   000001B8   ........           BL       WM_GetScrollbarV
   \   000001BC   0010A0E3           MOV      R1,#+0
   \   000001C0   ........           BL       SCROLLBAR_SetWidth
   1684          		pTopBar = &bmTopBar;
   \   000001C4   ........           LDR      R6,??DataTable137_5
   1685          		pBottomBar = &bmBottomBar;
   \   000001C8   ........           LDR      R7,??DataTable138
   1686          	}
   1687          
   1688          	// Set "ignore region" of list area to prevent interference with BACK button
   1689          	LISTVIEW_SetLFreeBorder(hListLocal, 30);
   \                     ??DisplayAlphaList_9:
   \   000001CC   1E10A0E3           MOV      R1,#+30
   \   000001D0   0400A0E1           MOV      R0,R4
   \   000001D4   ........           BL       LISTVIEW_SetLFreeBorder
   1690          
   1691          	CreateSprites(pTopBar, pBottomBar);
   \   000001D8   ........           LDR      R8,??DataTable141
   \   000001DC   A80398E5           LDR      R0,[R8, #+936]
   \   000001E0   AC1398E5           LDR      R1,[R8, #+940]
   \   000001E4   001091E1           ORRS     R1,R1,R0
   \   000001E8   0900000A           BEQ      ??DisplayAlphaList_10
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0100000A           BEQ      ??DisplayAlphaList_11
   \   000001F4   ........           BL       GUI_SPRITE_Delete
   \   000001F8   A85388E5           STR      R5,[R8, #+936]
   \                     ??DisplayAlphaList_11:
   \   000001FC   AC0398E5           LDR      R0,[R8, #+940]
   \   00000200   000050E3           CMP      R0,#+0
   \   00000204   0100000A           BEQ      ??DisplayAlphaList_12
   \   00000208   ........           BL       GUI_SPRITE_Delete
   \   0000020C   AC5388E5           STR      R5,[R8, #+940]
   \                     ??DisplayAlphaList_12:
   \   00000210   B05388E5           STR      R5,[R8, #+944]
   \                     ??DisplayAlphaList_10:
   \   00000214   3020A0E3           MOV      R2,#+48
   \   00000218   1E10A0E3           MOV      R1,#+30
   \   0000021C   0600A0E1           MOV      R0,R6
   \   00000220   ........           BL       GUI_SPRITE_Create
   \   00000224   A80388E5           STR      R0,[R8, #+936]
   \   00000228   FB20A0E3           MOV      R2,#+251
   \   0000022C   1E10A0E3           MOV      R1,#+30
   \   00000230   0700A0E1           MOV      R0,R7
   \   00000234   ........           BL       GUI_SPRITE_Create
   \   00000238   AC0388E5           STR      R0,[R8, #+940]
   1692          
   1693          	WM_SetFocus(hListLocal);
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           BL       WM_SetFocus
   1694          }
   \   00000244   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000248   F083BDE8           POP      {R4-R9,PC}       ;; return
   1695          

   \                                 In section .text, align 4, keep-with-next
   1696          int GetNumTracks(void)
   1697          {
   1698          	return numTracks;
   \                     GetNumTracks:
   \   00000000   ........           LDR      R0,??DataTable141
   \   00000004   940390E5           LDR      R0,[R0, #+916]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1699          }
   1700          

   \                                 In section .text, align 4, keep-with-next
   1701          void SetTrackTypeButtonText(void)
   1702          {
   \                     SetTrackTypeButtonText:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1703          	BUTTON_SetText(hTrackTypeBtn, "Type");
   \   00000004   ........           LDR      R4,??DataTable141
   \   00000008   ............       ADRL     R1,`?<Constant "Type">`
   \              ....        
   \   00000010   880394E5           LDR      R0,[R4, #+904]
   \   00000014   ........           BL       BUTTON_SetText
   1704          	switch (sysData.selectedSessionType)
   \   00000018   ........           LDR      R0,??DataTable127_1
   \   0000001C   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000020   410040E2           SUB      R0,R0,#+65
   \   00000024   130050E3           CMP      R0,#+19
   \   00000028   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SetTrackTypeButtonText_0:
   \   0000002C   1F00008A           BHI      ??SetTrackTypeButtonText_1
   \   00000030   150000EA           B        ??SetTrackTypeButtonText_2
   \   00000034   1D0000EA           B        ??SetTrackTypeButtonText_1
   \   00000038   1C0000EA           B        ??SetTrackTypeButtonText_1
   \   0000003C   0F0000EA           B        ??SetTrackTypeButtonText_3
   \   00000040   140000EA           B        ??SetTrackTypeButtonText_4
   \   00000044   190000EA           B        ??SetTrackTypeButtonText_1
   \   00000048   180000EA           B        ??SetTrackTypeButtonText_1
   \   0000004C   140000EA           B        ??SetTrackTypeButtonText_5
   \   00000050   160000EA           B        ??SetTrackTypeButtonText_1
   \   00000054   150000EA           B        ??SetTrackTypeButtonText_1
   \   00000058   140000EA           B        ??SetTrackTypeButtonText_1
   \   0000005C   130000EA           B        ??SetTrackTypeButtonText_1
   \   00000060   120000EA           B        ??SetTrackTypeButtonText_1
   \   00000064   110000EA           B        ??SetTrackTypeButtonText_1
   \   00000068   100000EA           B        ??SetTrackTypeButtonText_1
   \   0000006C   0F0000EA           B        ??SetTrackTypeButtonText_1
   \   00000070   080000EA           B        ??SetTrackTypeButtonText_4
   \   00000074   0D0000EA           B        ??SetTrackTypeButtonText_1
   \   00000078   0C0000EA           B        ??SetTrackTypeButtonText_1
   \   0000007C   050000EA           B        ??SetTrackTypeButtonText_4
   1705          	{
   1706          	case DRIVE_TYPE:		BUTTON_SetText(hTrackTypeBtn, "Drive");	break;
   \                     ??SetTrackTypeButtonText_3:
   \   00000080   ............       ADRL     R1,`?<Constant "Drive">`
   \              ....        
   \   00000088   0A0000EA           B        ??SetTrackTypeButtonText_6
   1707          	case AUTOCROSS_TYPE:	BUTTON_SetText(hTrackTypeBtn, "AutoX");	break;
   \                     ??SetTrackTypeButtonText_2:
   \   0000008C   ............       ADRL     R1,`?<Constant "AutoX">`
   \              ....        
   \   00000094   070000EA           B        ??SetTrackTypeButtonText_6
   1708          	case QUARTERMILE_TYPE:
   1709          	case EIGHTHMILE_TYPE:
   1710          	case THOUSANDFOOT_TYPE:	BUTTON_SetText(hTrackTypeBtn, "Drag");	break;
   \                     ??SetTrackTypeButtonText_4:
   \   00000098   ............       ADRL     R1,`?<Constant "Drag">`
   \              ....        
   \   000000A0   040000EA           B        ??SetTrackTypeButtonText_6
   1711          	case HILLCLIMB_TYPE:	BUTTON_SetText(hTrackTypeBtn, "Hill");	break;
   \                     ??SetTrackTypeButtonText_5:
   \   000000A4   ............       ADRL     R1,`?<Constant "Hill">`
   \              ....        
   \   000000AC   010000EA           B        ??SetTrackTypeButtonText_6
   1712          	case NOT_VALID:
   1713          	default:
   1714          	case ROADRACE_TYPE:		BUTTON_SetText(hTrackTypeBtn, "Road");	break;
   \                     ??SetTrackTypeButtonText_1:
   \   000000B0   ............       ADRL     R1,`?<Constant "Road">`
   \              ....        
   \                     ??SetTrackTypeButtonText_6:
   \   000000B8   880394E5           LDR      R0,[R4, #+904]
   \   000000BC   1040BDE8           POP      {R4,LR}
   \   000000C0   ........           B        BUTTON_SetText   ;; tailcall
   1715          	}
   1716          }
   1717          

   \                                 In section .text, align 4, keep-with-next
   1718          void TrackSelectionPaint(WM_HWIN hParent)
   1719          {
   \                     TrackSelectionPaint:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1720          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           LDR      R0,??DataTable141_1
   \   00000010   ........           BL       GUI_DrawBitmap
   1721          	if (ctType == CT_RACE_ENTRY)
   \   00000014   ........           LDR      R4,??DataTable141
   \   00000018   B703D4E5           LDRB     R0,[R4, #+951]
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   0D00001A           BNE      ??TrackSelectionPaint_0
   1722          	{
   1723          		GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   ........           BL       GUI_SetTextMode
   1724          
   1725          		if (numTracks == 0)
   \   0000002C   940394E5           LDR      R0,[R4, #+916]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400001A           BNE      ??TrackSelectionPaint_1
   1726          			GUI_DispStringHCenterAt("Track out of range", 360, 59);
   \   00000038   3B20A0E3           MOV      R2,#+59
   \   0000003C   5A1FA0E3           MOV      R1,#+360
   \   00000040   ............       ADRL     R0,`?<Constant "Track out of range">`
   \              ....        
   \   00000048   ........           BL       GUI_DispStringHCenterAt
   1727          
   1728          		GUI_DrawBitmap(&bmChooseTrack, 60, 0);
   \                     ??TrackSelectionPaint_1:
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   3C10A0E3           MOV      R1,#+60
   \   00000054   ........           LDR      R0,??DataTable142
   \   00000058   020000EA           B        ??TrackSelectionPaint_2
   1729          	}
   1730          	else GUI_DrawBitmap(&bmTrackText, 60, 0);
   \                     ??TrackSelectionPaint_0:
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   3C10A0E3           MOV      R1,#+60
   \   00000064   ........           LDR      R0,??DataTable143_1
   \                     ??TrackSelectionPaint_2:
   \   00000068   ........           BL       GUI_DrawBitmap
   1731          
   1732          	GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   0000006C   1040BDE8           POP      {R4,LR}
   \   00000070   E520A0E3           MOV      R2,#+229
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           LDR      R0,??DataTable145
   \   0000007C   ........           B        GUI_DrawBitmap   ;; tailcall
   1733          }
   1734          
   1735          

   \                                 In section .text, align 4, keep-with-next
   1736          void DisplayLapsSelection(WM_HWIN hParent)
   1737          {
   \                     DisplayLapsSelection:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   1738          	BUTTON_Handle hBtn;
   1739          
   1740          	hBtn = BUTTON_CreateEx(155,  43, 300, 100, hParent, WM_CF_SHOW, 0, LAPS_BUTTON);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   08008DE5           STR      R0,[SP, #+8]
   \   00000014   0960A0E3           MOV      R6,#+9
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   806E86E3           ORR      R6,R6,#0x800
   \   00000020   04008DE5           STR      R0,[SP, #+4]
   \   00000024   0C608DE5           STR      R6,[SP, #+12]
   \   00000028   00508DE5           STR      R5,[SP, #+0]
   \   0000002C   6430A0E3           MOV      R3,#+100
   \   00000030   4B2FA0E3           MOV      R2,#+300
   \   00000034   2B10A0E3           MOV      R1,#+43
   \   00000038   9B00A0E3           MOV      R0,#+155
   \   0000003C   ........           BL       BUTTON_CreateEx
   1741          	BUTTON_SetBkColor(hBtn, BUTTON_CI_UNPRESSED, GUI_WHITE);
   \   00000040   FF44E0E3           MVN      R4,#-16777216
   \   00000044   0080A0E1           MOV      R8,R0
   \   00000048   0420A0E1           MOV      R2,R4
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   ........           BL       BUTTON_SetBkColor
   1742          	BUTTON_SetFont(hBtn, &GUI_Font24B_ASCII);
   \   00000054   ........           LDR      R7,??DataTable136
   \   00000058   0800A0E1           MOV      R0,R8
   \   0000005C   0710A0E1           MOV      R1,R7
   \   00000060   ........           BL       BUTTON_SetFont
   1743          	BUTTON_SetTextColor(hBtn, BUTTON_CI_UNPRESSED, GUI_BLACK);
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0800A0E1           MOV      R0,R8
   \   00000070   ........           BL       BUTTON_SetTextColor
   1744          	BUTTON_SetTextColor(hBtn, BUTTON_CI_PRESSED, GUI_RED);
   \   00000074   FF20A0E3           MOV      R2,#+255
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   ........           BL       BUTTON_SetTextColor
   1745          	BUTTON_SetTextAlign(hBtn, GUI_TA_HCENTER | GUI_TA_VCENTER);
   \   00000084   0E10A0E3           MOV      R1,#+14
   \   00000088   0800A0E1           MOV      R0,R8
   \   0000008C   ........           BL       BUTTON_SetTextAlign
   1746          	BUTTON_SetText(hBtn, "LAPPING MODE\nPredictive lap timer\ncompares against Best Lap\never recorded");
   \   00000090   ............       ADRL     R1,`?<Constant "LAPPING MODE\\nPredicti...">`
   \              ....        
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   ........           BL       BUTTON_SetText
   1747          	BUTTON_SetSkinClassic(hBtn);
   \   000000A0   0800A0E1           MOV      R0,R8
   \   000000A4   ........           BL       BUTTON_SetSkinClassic
   1748          
   1749          	hBtn = BUTTON_CreateEx(155,  149, 300, 100, hParent, WM_CF_SHOW, 0, QUALIFYING_BUTTON);
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   08008DE5           STR      R0,[SP, #+8]
   \   000000B0   0200A0E3           MOV      R0,#+2
   \   000000B4   018086E2           ADD      R8,R6,#+1
   \   000000B8   04008DE5           STR      R0,[SP, #+4]
   \   000000BC   0C808DE5           STR      R8,[SP, #+12]
   \   000000C0   00508DE5           STR      R5,[SP, #+0]
   \   000000C4   6430A0E3           MOV      R3,#+100
   \   000000C8   4B2FA0E3           MOV      R2,#+300
   \   000000CC   9510A0E3           MOV      R1,#+149
   \   000000D0   9B00A0E3           MOV      R0,#+155
   \   000000D4   ........           BL       BUTTON_CreateEx
   \   000000D8   0090A0E1           MOV      R9,R0
   1750          	BUTTON_SetBkColor(hBtn, BUTTON_CI_UNPRESSED, GUI_WHITE);
   \   000000DC   0420A0E1           MOV      R2,R4
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   ........           BL       BUTTON_SetBkColor
   1751          	BUTTON_SetFont(hBtn, &GUI_Font24B_ASCII);
   \   000000E8   0710A0E1           MOV      R1,R7
   \   000000EC   0900A0E1           MOV      R0,R9
   \   000000F0   ........           BL       BUTTON_SetFont
   1752          	BUTTON_SetTextColor(hBtn, BUTTON_CI_UNPRESSED, GUI_BLACK);
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0010A0E3           MOV      R1,#+0
   \   000000FC   0900A0E1           MOV      R0,R9
   \   00000100   ........           BL       BUTTON_SetTextColor
   1753          	BUTTON_SetTextColor(hBtn, BUTTON_CI_PRESSED, GUI_RED);
   \   00000104   FF20A0E3           MOV      R2,#+255
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   ........           BL       BUTTON_SetTextColor
   1754          	BUTTON_SetTextAlign(hBtn, GUI_TA_HCENTER | GUI_TA_VCENTER);
   \   00000114   0E10A0E3           MOV      R1,#+14
   \   00000118   0900A0E1           MOV      R0,R9
   \   0000011C   ........           BL       BUTTON_SetTextAlign
   1755          	BUTTON_SetText(hBtn, "QUALIFYING MODE\nPredictive lap timer\ncompares against Current\nSession lap time only");
   \   00000120   ............       ADRL     R1,`?<Constant "QUALIFYING MODE\\nPredi...">`
   \              ....        
   \   00000128   0900A0E1           MOV      R0,R9
   \   0000012C   ........           BL       BUTTON_SetText
   1756          	BUTTON_SetSkinClassic(hBtn);
   \   00000130   0900A0E1           MOV      R0,R9
   \   00000134   ........           BL       BUTTON_SetSkinClassic
   1757          
   1758          	hLapsCheck = BUTTON_CreateEx(30,  43, 115, 100, hParent, WM_CF_SHOW, 0, LAPS_BUTTON);
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   08008DE5           STR      R0,[SP, #+8]
   \   00000140   0200A0E3           MOV      R0,#+2
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   0C608DE5           STR      R6,[SP, #+12]
   \   0000014C   00508DE5           STR      R5,[SP, #+0]
   \   00000150   6430A0E3           MOV      R3,#+100
   \   00000154   7320A0E3           MOV      R2,#+115
   \   00000158   2B10A0E3           MOV      R1,#+43
   \   0000015C   1E00A0E3           MOV      R0,#+30
   \   00000160   ........           BL       BUTTON_CreateEx
   \   00000164   ........           LDR      R6,??DataTable141
   1759          	BUTTON_SetBkColor(hLapsCheck, BUTTON_CI_UNPRESSED, GUI_WHITE);
   \   00000168   0420A0E1           MOV      R2,R4
   \   0000016C   800386E5           STR      R0,[R6, #+896]
   \   00000170   0010A0E3           MOV      R1,#+0
   \   00000174   ........           BL       BUTTON_SetBkColor
   1760          	BUTTON_SetSkinClassic(hLapsCheck);
   \   00000178   800396E5           LDR      R0,[R6, #+896]
   \   0000017C   ........           BL       BUTTON_SetSkinClassic
   1761          
   1762          	hQualifyingCheck = BUTTON_CreateEx(30,  149, 115, 100, hParent, WM_CF_SHOW, 0, QUALIFYING_BUTTON);
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   08008DE5           STR      R0,[SP, #+8]
   \   00000188   0200A0E3           MOV      R0,#+2
   \   0000018C   04008DE5           STR      R0,[SP, #+4]
   \   00000190   0C808DE5           STR      R8,[SP, #+12]
   \   00000194   00508DE5           STR      R5,[SP, #+0]
   \   00000198   6430A0E3           MOV      R3,#+100
   \   0000019C   7320A0E3           MOV      R2,#+115
   \   000001A0   9510A0E3           MOV      R1,#+149
   \   000001A4   1E00A0E3           MOV      R0,#+30
   \   000001A8   ........           BL       BUTTON_CreateEx
   \   000001AC   840386E5           STR      R0,[R6, #+900]
   1763          	BUTTON_SetBkColor(hQualifyingCheck, BUTTON_CI_UNPRESSED, GUI_WHITE);
   \   000001B0   0420A0E1           MOV      R2,R4
   \   000001B4   0010A0E3           MOV      R1,#+0
   \   000001B8   ........           BL       BUTTON_SetBkColor
   1764          	BUTTON_SetSkinClassic(hQualifyingCheck);
   \   000001BC   840396E5           LDR      R0,[R6, #+900]
   \   000001C0   ........           BL       BUTTON_SetSkinClassic
   1765          
   1766          	if (sysData.lappingMode)
   \   000001C4   ........           LDR      R0,??DataTable127_1
   \   000001C8   ........           LDR      R2,??DataTable145_2
   \   000001CC   B200D0E5           LDRB     R0,[R0, #+178]
   \   000001D0   0010A0E3           MOV      R1,#+0
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   0F00A0E3           MOV      R0,#+15
   \   000001DC   00008DE5           STR      R0,[SP, #+0]
   \   000001E0   0030A0E1           MOV      R3,R0
   1767          		BUTTON_SetBitmapEx(hLapsCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   000001E4   80039615           LDRNE    R0,[R6, #+896]
   1768          	else BUTTON_SetBitmapEx(hQualifyingCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   000001E8   84039605           LDREQ    R0,[R6, #+900]
   \   000001EC   ........           BL       BUTTON_SetBitmapEx
   1769          }
   \   000001F0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000001F4   F083BDE8           POP      {R4-R9,PC}       ;; return
   1770          

   \                                 In section .text, align 4, keep-with-next
   1771          void LapsSelectionPaint(WM_HWIN hParent)
   1772          {
   \                     LapsSelectionPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1773          	GUI_SetColor(GUI_WHITE);
   \   00000008   FF04E0E3           MVN      R0,#-16777216
   \   0000000C   ........           BL       GUI_SetColor
   1774          	GUI_DrawBitmap(&bmBackground, 0, 0);
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           LDR      R0,??DataTable145_3
   \   0000001C   ........           BL       GUI_DrawBitmap
   1775          	GUI_DrawBitmap(&bmLapsQualifyText, 60, 0);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   3C10A0E3           MOV      R1,#+60
   \   00000028   ........           LDR      R0,??DataTable145_4
   \   0000002C   ........           BL       GUI_DrawBitmap
   1776          
   1777          	GUI_DrawRoundedRect(10, 40, 460, 250, 5);
   \   00000030   0500A0E3           MOV      R0,#+5
   \   00000034   00008DE5           STR      R0,[SP, #+0]
   \   00000038   FA30A0E3           MOV      R3,#+250
   \   0000003C   732FA0E3           MOV      R2,#+460
   \   00000040   2810A0E3           MOV      R1,#+40
   \   00000044   0A00A0E3           MOV      R0,#+10
   \   00000048   ........           BL       GUI_DrawRoundedRect
   1778          	GUI_FillRoundedRect(10, 40, 460, 250, 5);
   \   0000004C   0500A0E3           MOV      R0,#+5
   \   00000050   00008DE5           STR      R0,[SP, #+0]
   \   00000054   FA30A0E3           MOV      R3,#+250
   \   00000058   732FA0E3           MOV      R2,#+460
   \   0000005C   2810A0E3           MOV      R1,#+40
   \   00000060   0A00A0E3           MOV      R0,#+10
   \   00000064   ........           BL       GUI_FillRoundedRect
   1779          
   1780          	GUI_SetPenSize(3);
   \   00000068   0300A0E3           MOV      R0,#+3
   \   0000006C   ........           BL       GUI_SetPenSize
   1781          	GUI_SetColor(GUI_GRAY);
   \   00000070   ........           LDR      R0,??DataTable145_5  ;; 0x808080
   \   00000074   ........           BL       GUI_SetColor
   1782          	GUI_DrawLine(150, 40, 150, 250);
   \   00000078   FA30A0E3           MOV      R3,#+250
   \   0000007C   9620A0E3           MOV      R2,#+150
   \   00000080   2810A0E3           MOV      R1,#+40
   \   00000084   9600A0E3           MOV      R0,#+150
   \   00000088   ........           BL       GUI_DrawLine
   1783          	GUI_DrawLine(10, 145, 460, 145);
   \   0000008C   9130A0E3           MOV      R3,#+145
   \   00000090   732FA0E3           MOV      R2,#+460
   \   00000094   9110A0E3           MOV      R1,#+145
   \   00000098   0A00A0E3           MOV      R0,#+10
   \   0000009C   ........           BL       GUI_DrawLine
   1784          
   1785          	GUI_DrawBitmap(GetNavigationArrow(LAPSQUALIFYING_SELECTION), 0, 229);
   \   000000A0   04D08DE2           ADD      SP,SP,#+4
   \   000000A4   0040BDE8           POP      {LR}
   \   000000A8   E520A0E3           MOV      R2,#+229
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   ........           LDR      R0,??DataTable145
   \   000000B4   ........           B        GUI_DrawBitmap   ;; tailcall
   1786          }
   1787          
   1788          

   \                                 In section .text, align 4, keep-with-next
   1789          void DriverSelectionPaint(WM_HWIN hParent)
   1790          {
   \                     DriverSelectionPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1791          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable141_1
   \   00000014   ........           BL       GUI_DrawBitmap
   1792          	GUI_DrawBitmap(&bmDriverText, 60, 0);
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   3C10A0E3           MOV      R1,#+60
   \   00000020   ........           LDR      R0,??DataTable145_6
   \   00000024   ........           BL       GUI_DrawBitmap
   1793          	GUI_DrawBitmap(GetNavigationArrow(DRIVER_SELECTION), 0, 229);
   \   00000028   04D08DE2           ADD      SP,SP,#+4
   \   0000002C   0040BDE8           POP      {LR}
   \   00000030   E520A0E3           MOV      R2,#+229
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   ........           LDR      R0,??DataTable145
   \   0000003C   ........           B        GUI_DrawBitmap   ;; tailcall
   1794          }
   1795          

   \                                 In section .text, align 4, keep-with-next
   1796          void VehicleSelectionPaint(WM_HWIN hParent)
   1797          {
   \                     VehicleSelectionPaint:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1798          	GUI_DrawBitmap(&bmBackgroundWithPanel, 0, 0);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable141_1
   \   00000014   ........           BL       GUI_DrawBitmap
   1799          	GUI_DrawBitmap(&bmVehicleText, 60, 0);
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   3C10A0E3           MOV      R1,#+60
   \   00000020   ........           LDR      R0,??DataTable145_7
   \   00000024   ........           BL       GUI_DrawBitmap
   1800          	GUI_DrawBitmap(GetNavigationArrow(VEHICLE_SELECTION), 0, 229);
   \   00000028   04D08DE2           ADD      SP,SP,#+4
   \   0000002C   0040BDE8           POP      {LR}
   \   00000030   E520A0E3           MOV      R2,#+229
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   ........           LDR      R0,??DataTable145
   \   0000003C   ........           B        GUI_DrawBitmap   ;; tailcall
   1801          }
   1802          
   1803          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen)
   1804          {
   1805          	switch (screen)
   1806          	{
   1807          		default:
   1808          		case DRIVER_SELECTION:
   1809          		case VEHICLE_SELECTION:
   1810          		case TRACK_SELECTION:
   1811          		case LAPSQUALIFYING_SELECTION:
   1812          			return &bmleftarrow;
   1813          	}
   1814          }
   1815          

   \                                 In section .text, align 4, keep-with-next
   1816          void RaceSetupIgnoreNextKeyRelease(void)
   1817          {
   1818          	clickedOnThisScreen = false;
   \                     RaceSetupIgnoreNextKeyRelease:
   \   00000000   ........           LDR      R0,??DataTable141
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   701380E5           STR      R1,[R0, #+880]
   1819          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   1820          
   1821          //
   1822          // Get the name of the currently selected session
   1823          //

   \                                 In section .text, align 4, keep-with-next
   1824          char *GetSessionName(void)
   1825          {
   \                     GetSessionName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   8CD04DE2           SUB      SP,SP,#+140
   1826          	char count = 0;
   \   00000008   0040A0E3           MOV      R4,#+0
   1827          #ifdef _WINDOWS
   1828          	DIR *dir;
   1829          	struct dirent *ent;
   1830          #else
   1831          	FS_FIND_DATA fd;
   1832          	char acFilename[NORMAL_FILENAME_SIZE];
   1833          #endif
   1834          
   1835          #ifdef _WINDOWS
   1836          	dir = opendir(MY_SESSIONS_PATH);
   1837          	if (dir != NULL)
   1838          	{
   1839          		// find the selected session file
   1840          		while ((ent = readdir(dir)) != NULL)
   1841          		{
   1842          			if (ValidRaceSession(sysData.selectedSessionType, ent->d_name))
   1843          				if (count++ == selectedSessionUnsorted)
   1844          				{
   1845          					parseSessionName(ent->d_name, &NameStruct);
   1846          					strcpy(fullSessionName, ent->d_name);		// Save full name for file delete
   1847          					parseName(sessionName, ent->d_name, SESSION_DATA);
   1848          					closedir(dir);
   1849          					return sessionName;
   1850          				}
   1851          		}
   1852          		closedir(dir);
   1853          	}
   1854          #else
   1855          	if (FS_FindFirstFile(&fd, MY_SESSIONS_PATH, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \   0000000C   5030A0E3           MOV      R3,#+80
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   ........           LDR      R1,??DataTable146
   \   00000018   50008DE2           ADD      R0,SP,#+80
   \   0000001C   ........           BL       FS_FindFirstFile
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2500001A           BNE      ??GetSessionName_0
   1856          		do {
   1857          			if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, acFilename))
   \                     ??GetSessionName_1:
   \   00000028   ........           LDR      R0,??DataTable145_8
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000034   ........           BL       ValidRaceSession
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1B00000A           BEQ      ??GetSessionName_2
   1858          				if (count++ == selectedSessionUnsorted)
   \   00000040   ........           LDR      R1,??DataTable147
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   014080E2           ADD      R4,R0,#+1
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   000CA0E1           MOV      R0,R0, LSL #+24
   \   00000054   200C51E1           CMP      R1,R0, LSR #+24
   \   00000058   1400001A           BNE      ??GetSessionName_2
   1859          				{
   1860          					parseSessionName(&fd, &NameStruct);
   \   0000005C   ........           LDR      R4,??DataTable147_1
   \   00000060   0C00A0E3           MOV      R0,#+12
   \   00000064   700E80E3           ORR      R0,R0,#0x700
   \   00000068   041080E0           ADD      R1,R0,R4
   \   0000006C   50008DE2           ADD      R0,SP,#+80
   \   00000070   ........           BL       parseSessionName
   1861          					strcpy(fullSessionName, acFilename);		// Save full name for file delete
   \   00000074   BC00A0E3           MOV      R0,#+188
   \   00000078   600E80E3           ORR      R0,R0,#0x600
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   040080E0           ADD      R0,R0,R4
   \   00000084   ........           BL       strcpy
   1862          					parseName(sessionName, acFilename, SESSION_DATA);
   \   00000088   6C50A0E3           MOV      R5,#+108
   \   0000008C   605E85E3           ORR      R5,R5,#0x600
   \   00000090   0420A0E3           MOV      R2,#+4
   \   00000094   0D10A0E1           MOV      R1,SP
   \   00000098   040085E0           ADD      R0,R5,R4
   \   0000009C   ........           BL       parseName
   1863          					FS_FindClose(&fd);
   \   000000A0   50008DE2           ADD      R0,SP,#+80
   \   000000A4   ........           BL       FS_FindClose
   1864          					return sessionName;
   \   000000A8   040085E0           ADD      R0,R5,R4
   \   000000AC   060000EA           B        ??GetSessionName_3
   1865          				}
   1866          		} while (FS_FindNextFile (&fd));
   \                     ??GetSessionName_2:
   \   000000B0   50008DE2           ADD      R0,SP,#+80
   \   000000B4   ........           BL       FS_FindNextFile
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   D9FFFF1A           BNE      ??GetSessionName_1
   1867          	}
   1868          	FS_FindClose(&fd);
   \                     ??GetSessionName_0:
   \   000000C0   50008DE2           ADD      R0,SP,#+80
   \   000000C4   ........           BL       FS_FindClose
   1869          #endif
   1870          
   1871          	return "";
   \   000000C8   ........           ADR      R0,??DataTable135  ;; ""
   \                     ??GetSessionName_3:
   \   000000CC   8CD08DE2           ADD      SP,SP,#+140      ;; stack cleaning
   \   000000D0   3080BDE8           POP      {R4,R5,PC}       ;; return
   1872          }
   1873          
   1874          //
   1875          // Delete session file indicated by fullSessionName
   1876          //

   \                                 In section .text, align 4, keep-with-next
   1877          void DeleteSession(void)
   1878          {
   \                     DeleteSession:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   9CD04DE2           SUB      SP,SP,#+156
   1879          	char fullFileName[MAX_FILENAME_SIZE];
   1880          
   1881          	// Prepend directoy name
   1882          	strcpy(fullFileName, MY_SESSIONS_PATH);
   \   00000008   ........           LDR      R1,??DataTable146
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       strcpy
   1883          	strcat(fullFileName, "\\");
   \   00000014   ........           ADR      R1,??DataTable135_1  ;; "\\"
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       strcat
   1884          	strcat(fullFileName, fullSessionName);
   \   00000020   ........           LDR      R1,??DataTable148
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           BL       strcat
   1885          
   1886          #ifndef _WINDOWS
   1887          	FS_Remove(fullFileName);
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       FS_Remove
   1888          #else
   1889          	remove(fullFileName);
   1890          #endif
   1891          }
   \   00000034   9CD08DE2           ADD      SP,SP,#+156      ;; stack cleaning
   \   00000038   0080BDE8           POP      {PC}             ;; return
   1892          
   1893          
   1894          //
   1895          // Create list of all laps in the session
   1896          //
   1897          // If a previous list exists - delete that one and create a new one
   1898          //

   \                                 In section .text, align 4, keep-with-next
   1899          char **CreateLapsList(void)
   1900          {
   \                     CreateLapsList:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1901          	char count = 0;
   1902          #ifdef _WINDOWS
   1903          	DIR *dir;
   1904          	struct dirent *ent;
   1905          #else
   1906          	FS_FIND_DATA fd;
   1907          	char acFilename[NORMAL_FILENAME_SIZE];
   1908          #endif
   1909          
   1910          	// Delete any previous list of this type
   1911          	DeleteFileList(LAP_DATA);
   \   00000004   ........           LDR      R5,??DataTable147_1
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   007095E5           LDR      R7,[R5, #+0]
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   000057E3           CMP      R7,#+0
   \   0000001C   0700000A           BEQ      ??CreateLapsList_0
   \   00000020   0780A0E1           MOV      R8,R7
   \   00000024   000000EA           B        ??CreateLapsList_1
   \                     ??CreateLapsList_2:
   \   00000028   ........           BL       free
   \                     ??CreateLapsList_1:
   \   0000002C   040098E4           LDR      R0,[R8], #+4
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FBFFFF1A           BNE      ??CreateLapsList_2
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           BL       free
   \                     ??CreateLapsList_0:
   \   00000040   004085E5           STR      R4,[R5, #+0]
   1912          
   1913          #ifndef _WINDOWS
   1914          
   1915          	if (FS_FindFirstFile(&fd, MY_SESSIONS_PATH, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \   00000044   5030A0E3           MOV      R3,#+80
   \   00000048   0D20A0E1           MOV      R2,SP
   \   0000004C   ........           LDR      R1,??DataTable146
   \   00000050   50008DE2           ADD      R0,SP,#+80
   \   00000054   ........           BL       FS_FindFirstFile
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   1B00001A           BNE      ??CreateLapsList_3
   1916          		do {
   1917          			if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, acFilename))
   \                     ??CreateLapsList_4:
   \   00000060   ........           LDR      R0,??DataTable145_8
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   D000D0E5           LDRB     R0,[R0, #+208]
   \   0000006C   ........           BL       ValidRaceSession
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   1100000A           BEQ      ??CreateLapsList_5
   1918          				if (count++ == selectedSessionUnsorted)
   \   00000078   ........           LDR      R1,??DataTable147
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   016080E2           ADD      R6,R0,#+1
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   000CA0E1           MOV      R0,R0, LSL #+24
   \   0000008C   200C51E1           CMP      R1,R0, LSR #+24
   \   00000090   0A00001A           BNE      ??CreateLapsList_5
   1919          				{
   1920          					parseSessionName(&fd, &NameStruct);
   \   00000094   0C00A0E3           MOV      R0,#+12
   \   00000098   700E80E3           ORR      R0,R0,#0x700
   \   0000009C   051080E0           ADD      R1,R0,R5
   \   000000A0   50008DE2           ADD      R0,SP,#+80
   \   000000A4   ........           BL       parseSessionName
   1921          					ReadAllSessionData(acFilename);
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   ........           BL       ReadAllSessionData
   1922          					FS_FindClose(&fd);
   \   000000B0   50008DE2           ADD      R0,SP,#+80
   \   000000B4   ........           BL       FS_FindClose
   1923          					return pLaps;
   \   000000B8   000095E5           LDR      R0,[R5, #+0]
   \   000000BC   090000EA           B        ??CreateLapsList_6
   1924          				}
   1925          		} while (FS_FindNextFile (&fd));
   \                     ??CreateLapsList_5:
   \   000000C0   50008DE2           ADD      R0,SP,#+80
   \   000000C4   ........           BL       FS_FindNextFile
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   E3FFFF1A           BNE      ??CreateLapsList_4
   1926          	}
   1927          	FS_FindClose(&fd);
   \                     ??CreateLapsList_3:
   \   000000D0   50008DE2           ADD      R0,SP,#+80
   \   000000D4   ........           BL       FS_FindClose
   1928          
   1929          #else
   1930          
   1931          	dir = opendir(MY_SESSIONS_PATH);
   1932          	if (dir != NULL)
   1933          	{
   1934          		// find the selected session file
   1935          		while ((ent = readdir(dir)) != NULL)
   1936          		{
   1937          			if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, ent->d_name))
   1938          				if (count++ == selectedSessionUnsorted)
   1939          				{
   1940          					parseSessionName(ent->d_name, &NameStruct);
   1941          					ReadAllSessionData(ent->d_name);
   1942          					closedir(dir);
   1943          					return pLaps;
   1944          				}
   1945          		}
   1946          		closedir(dir);
   1947          	}
   1948          
   1949          #endif
   1950          
   1951          	// Else failed somewhere along the line - create a dummy list
   1952          	CreateDummyLapList();
   \   000000D8   C90FA0E3           MOV      R0,#+804
   \   000000DC   ........           BL       malloc
   \   000000E0   000085E5           STR      R0,[R5, #+0]
   \   000000E4   004080E5           STR      R4,[R0, #+0]
   1953          	return pLaps;
   \                     ??CreateLapsList_6:
   \   000000E8   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   000000EC   F081BDE8           POP      {R4-R8,PC}       ;; return
   1954          }
   1955          

   \                                 In section .text, align 4, keep-with-next
   1956          void CreateDummyLapList(void)
   1957          {
   \                     CreateDummyLapList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1958          	char **pNextLink;
   1959          
   1960          	// Create dummy list
   1961          	pNextLink = pLaps = (char **)(malloc((MAX_NUM_LAPS_IN_FILE + 1) * sizeof(char *)));
   \   00000004   ........           LDR      R4,??DataTable147_1
   \   00000008   C90FA0E3           MOV      R0,#+804
   \   0000000C   ........           BL       malloc
   \   00000010   000084E5           STR      R0,[R4, #+0]
   1962          	*pNextLink = 0;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   001080E5           STR      R1,[R0, #+0]
   1963          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   1964          
   1965          //
   1966          // Create a list of all the laps of this session
   1967          //
   1968          // Input: name of session file
   1969          //

   \                                 In section .text, align 4, keep-with-next
   1970          void ReadAllSessionData(char *pName)
   1971          {
   \                     ReadAllSessionData:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   9CD04DE2           SUB      SP,SP,#+156
   1972          	int i;
   1973          	char fileName[MAX_FILENAME_SIZE];
   1974          	int count = 0;
   \   0000000C   0070A0E3           MOV      R7,#+0
   1975          	char **pNextLink, *pData;
   1976          #ifdef _WINDOWS
   1977          	FILE *pFile;
   1978          	size_t results;
   1979          #else
   1980          	FS_FILE *pFile;
   1981          	unsigned long results;
   1982          #endif
   1983          
   1984          	// Create new list
   1985          	pNextLink = pLaps = (char **)(malloc((MAX_NUM_LAPS_IN_FILE + 1) * sizeof(char *)));
   \   00000010   ........           LDR      R4,??DataTable147_1
   \   00000014   C90FA0E3           MOV      R0,#+804
   \   00000018   ........           BL       malloc
   \   0000001C   000084E5           STR      R0,[R4, #+0]
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   007085E5           STR      R7,[R5, #+0]
   1986          	*pNextLink = 0;		// Be sure next link is 0 in case there is no more data
   1987          
   1988          	strcpy(fileName, MY_SESSIONS_PATH);
   \   00000028   ........           LDR      R1,??DataTable146
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           BL       strcpy
   1989          	strcat(fileName, "\\");
   \   00000034   ........           ADR      R1,??DataTable137  ;; "\\"
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   ........           BL       strcat
   1990          	strcat(fileName, pName);
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           BL       strcat
   1991          
   1992          #ifdef _WINDOWS
   1993          	if ((pFile = fopen(fileName, "rb")) != 0)
   1994          	{
   1995          		unsigned char numberOfFields;
   1996          
   1997          		// Check for valid fields
   1998          		fseek(pFile, TQM_NUMBER_USER_FIELDS, SEEK_SET);
   1999          		results = fread(&numberOfFields, sizeof(numberOfFields), 1, pFile);
   2000          
   2001          		if (results != 1)
   2002          		{
   2003          			fclose(pFile);
   2004          			return;
   2005          		}
   2006          
   2007          		if (numberOfFields == TQM_USER_FIELDS)		// If new-style file
   2008          		{
   2009          			fseek(pFile, 0, SEEK_SET);			// Return to point to the beginning of the file
   2010          			results = fread(&SessionData, sizeof(tqmheaderstructtype), 1, pFile);
   2011          			fclose(pFile);
   2012          
   2013          			if (results == 1)
   2014          #else
   2015          	if (OkToUseSDCard())
   \   0000004C   ........           BL       OkToUseSDCard
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   C100000A           BEQ      ??ReadAllSessionData_0
   2016          		if (pFile = FS_FOpen(fileName, "rb"))
   \   00000058   ........           ADR      R1,??DataTable137_1  ;; 0x72, 0x62, 0x00, 0x00
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           BL       FS_FOpen
   \   00000064   0080B0E1           MOVS     R8,R0
   \   00000068   BC00000A           BEQ      ??ReadAllSessionData_0
   2017          		{
   2018          			unsigned char numberOfFields;
   2019          	
   2020          			FS_FSeek(pFile, TQM_NUMBER_USER_FIELDS, FS_SEEK_SET);
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   A71FA0E3           MOV      R1,#+668
   \   00000074   ........           BL       FS_FSeek
   2021          			results = FS_Read(pFile, &numberOfFields, sizeof(numberOfFields));
   2022          	
   2023          			if (results != sizeof(numberOfFields))
   \   00000078   0120A0E3           MOV      R2,#+1
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   0800A0E1           MOV      R0,R8
   \   00000084   ........           BL       FS_Read
   \   00000088   010050E3           CMP      R0,#+1
   \   0000008C   0200000A           BEQ      ??ReadAllSessionData_1
   2024          			{
   2025          				FS_FClose(pFile);
   \                     ??ReadAllSessionData_2:
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           BL       FS_FClose
   2026          				return;
   \   00000098   B30000EA           B        ??ReadAllSessionData_3
   2027          			}
   2028          			
   2029          			if (numberOfFields == TQM_USER_FIELDS)
   \                     ??ReadAllSessionData_1:
   \   0000009C   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000A0   050050E3           CMP      R0,#+5
   \   000000A4   4C00001A           BNE      ??ReadAllSessionData_4
   2030          			{
   2031          				FS_FSeek(pFile, 0, FS_SEEK_SET);
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0800A0E1           MOV      R0,R8
   \   000000B4   ........           BL       FS_FSeek
   2032          				results = FS_Read(pFile, &SessionData, sizeof(tqmheaderstructtype));
   \   000000B8   5860A0E3           MOV      R6,#+88
   \   000000BC   2AA0A0E3           MOV      R10,#+42
   \   000000C0   706E86E3           ORR      R6,R6,#0x700
   \   000000C4   48AD8AE3           ORR      R10,R10,#0x1200
   \   000000C8   0A20A0E1           MOV      R2,R10
   \   000000CC   041086E0           ADD      R1,R6,R4
   \   000000D0   0800A0E1           MOV      R0,R8
   \   000000D4   ........           BL       FS_Read
   \   000000D8   0090A0E1           MOV      R9,R0
   2033          				FS_FClose(pFile);
   \   000000DC   0800A0E1           MOV      R0,R8
   \   000000E0   ........           BL       FS_FClose
   2034          	
   2035          				if (results == sizeof(tqmheaderstructtype))
   \   000000E4   0A0059E1           CMP      R9,R10
   \   000000E8   9C00001A           BNE      ??ReadAllSessionData_0
   2036          #endif
   2037          				{
   2038          					// Copy Lap Data
   2039          					count = SessionData.lapInfo.numberOfLaps;
   \   000000EC   BE00A0E3           MOV      R0,#+190
   \   000000F0   D00E80E3           ORR      R0,R0,#0xD00
   \   000000F4   040080E0           ADD      R0,R0,R4
   \   000000F8   ........           BL       __aeabi_uread4
   \   000000FC   0070A0E1           MOV      R7,R0
   2040          					for (i = 0; i < count; i++)
   \   00000100   010057E3           CMP      R7,#+1
   \   00000104   950000BA           BLT      ??ReadAllSessionData_0
   \   00000108   049086E0           ADD      R9,R6,R4
   \   0000010C   ........           ADR      R8,??DataTable137_6  ;; 0x25, 0x73, 0x00, 0x00
   \   00000110   010017E3           TST      R7,#0x1
   \   00000114   0D00000A           BEQ      ??ReadAllSessionData_5
   2041          					{
   2042          						*pNextLink++ = pData = (char *)malloc(20);
   \   00000118   1400A0E3           MOV      R0,#+20
   \   0000011C   ........           BL       malloc
   \   00000120   00A0A0E1           MOV      R10,R0
   2043          						sprintf(pData, "%s", formatLapTime(SessionData.lapInfo.lapTime[i], true));
   \   00000124   E60046E2           SUB      R0,R6,#+230
   \   00000128   04A085E4           STR      R10,[R5], #+4
   \   0000012C   090080E0           ADD      R0,R0,R9
   \   00000130   ........           BL       __aeabi_uread4
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   ........           BL       formatLapTime
   \   0000013C   0020A0E1           MOV      R2,R0
   \   00000140   ........           ADR      R1,??DataTable137_6  ;; 0x25, 0x73, 0x00, 0x00
   \   00000144   0A00A0E1           MOV      R0,R10
   \   00000148   ........           BL       sprintf
   \   0000014C   049089E2           ADD      R9,R9,#+4
   \                     ??ReadAllSessionData_5:
   \   00000150   A760B0E1           LSRS     R6,R7,#+1
   \   00000154   8100000A           BEQ      ??ReadAllSessionData_0
   \                     ??ReadAllSessionData_6:
   \   00000158   1400A0E3           MOV      R0,#+20
   \   0000015C   ........           BL       malloc
   \   00000160   00A0A0E1           MOV      R10,R0
   \   00000164   7200A0E3           MOV      R0,#+114
   \   00000168   600E80E3           ORR      R0,R0,#0x600
   \   0000016C   04A085E4           STR      R10,[R5], #+4
   \   00000170   090080E0           ADD      R0,R0,R9
   \   00000174   ........           BL       __aeabi_uread4
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   ........           BL       formatLapTime
   \   00000180   0020A0E1           MOV      R2,R0
   \   00000184   0810A0E1           MOV      R1,R8
   \   00000188   0A00A0E1           MOV      R0,R10
   \   0000018C   ........           BL       sprintf
   \   00000190   1400A0E3           MOV      R0,#+20
   \   00000194   ........           BL       malloc
   \   00000198   00A0A0E1           MOV      R10,R0
   \   0000019C   7600A0E3           MOV      R0,#+118
   \   000001A0   600E80E3           ORR      R0,R0,#0x600
   \   000001A4   04A085E4           STR      R10,[R5], #+4
   \   000001A8   090080E0           ADD      R0,R0,R9
   \   000001AC   ........           BL       __aeabi_uread4
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   ........           BL       formatLapTime
   \   000001B8   0020A0E1           MOV      R2,R0
   \   000001BC   0810A0E1           MOV      R1,R8
   \   000001C0   0A00A0E1           MOV      R0,R10
   \   000001C4   ........           BL       sprintf
   2044          					}
   \   000001C8   016046E2           SUB      R6,R6,#+1
   \   000001CC   089089E2           ADD      R9,R9,#+8
   \   000001D0   000056E3           CMP      R6,#+0
   \   000001D4   DFFFFF1A           BNE      ??ReadAllSessionData_6
   \   000001D8   600000EA           B        ??ReadAllSessionData_0
   2045          				}
   2046          			}
   2047          			else	// Old style file
   2048          			{
   2049          				LAP_LIST_TYPE *LapList;
   2050          	
   2051          				LapList = malloc(sizeof(LAP_LIST_TYPE));
   \                     ??ReadAllSessionData_4:
   \   000001DC   C4A0A0E3           MOV      R10,#+196
   \   000001E0   B0AE8AE3           ORR      R10,R10,#0xB00
   \   000001E4   0A00A0E1           MOV      R0,R10
   \   000001E8   ........           BL       malloc
   \   000001EC   0060B0E1           MOVS     R6,R0
   2052          				if (!LapList)
   \   000001F0   A6FFFF0A           BEQ      ??ReadAllSessionData_2
   2053          				{
   2054          #ifdef _WINDOWS
   2055          					fclose(pFile);
   2056          #else
   2057          					FS_FClose(pFile);
   2058          #endif
   2059          					return;
   2060          				}
   2061          				// older tqm file so session descriptions not supported
   2062          				strcpy(SessionData.UserFieldDescConfig, NotAvailable);
   \   000001F4   ............       ADRL     R9,NotAvailable
   \              ....        
   \   000001FC   22008AE3           ORR      R0,R10,#0x22
   \   00000200   0910A0E1           MOV      R1,R9
   \   00000204   040080E0           ADD      R0,R0,R4
   \   00000208   ........           BL       strcpy
   2063          				strcpy(SessionData.UserFieldDescGeneral, NotAvailable);
   \   0000020C   5600A0E3           MOV      R0,#+86
   \   00000210   A00E80E3           ORR      R0,R0,#0xA00
   \   00000214   0910A0E1           MOV      R1,R9
   \   00000218   040080E0           ADD      R0,R0,R4
   \   0000021C   ........           BL       strcpy
   2064          				strcpy(SessionData.UserFieldDescInputs, NotAvailable);
   \   00000220   A6004AE2           SUB      R0,R10,#+166
   \   00000224   0910A0E1           MOV      R1,R9
   \   00000228   040080E0           ADD      R0,R0,R4
   \   0000022C   ........           BL       strcpy
   2065          				strcpy(SessionData.UserFieldDescPerformance, NotAvailable);
   \   00000230   EA008AE2           ADD      R0,R10,#+234
   \   00000234   0910A0E1           MOV      R1,R9
   \   00000238   040080E0           ADD      R0,R0,R4
   \   0000023C   ........           BL       strcpy
   2066          
   2067          #ifdef _WINDOWS
   2068          				fseek(pFile, TQM_LAP_OFFSET_OLD, SEEK_SET);
   2069          				results = fread(LapList, sizeof(LAP_LIST_TYPE), 1, pFile);
   2070          				fclose(pFile);
   2071          				if (results == 1)
   2072          #else
   2073          				FS_FSeek(pFile, TQM_LAP_OFFSET_OLD, FS_SEEK_SET);
   \   00000240   4610A0E3           MOV      R1,#+70
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   C01F81E3           ORR      R1,R1,#0x300
   \   0000024C   0800A0E1           MOV      R0,R8
   \   00000250   ........           BL       FS_FSeek
   2074          				results = FS_Read(pFile, LapList, sizeof(LAP_LIST_TYPE));
   \   00000254   0A20A0E1           MOV      R2,R10
   \   00000258   0610A0E1           MOV      R1,R6
   \   0000025C   0800A0E1           MOV      R0,R8
   \   00000260   ........           BL       FS_Read
   \   00000264   0090A0E1           MOV      R9,R0
   2075          				FS_FClose(pFile);
   \   00000268   0800A0E1           MOV      R0,R8
   \   0000026C   ........           BL       FS_FClose
   2076          	
   2077          				if (results == sizeof(LAP_LIST_TYPE))
   \   00000270   0A0059E1           CMP      R9,R10
   \   00000274   3700001A           BNE      ??ReadAllSessionData_7
   2078          #endif
   2079          				{
   2080          					count = LapList->numberOfLaps;
   \   00000278   0600A0E1           MOV      R0,R6
   \   0000027C   ........           BL       __aeabi_uread4
   \   00000280   0070A0E1           MOV      R7,R0
   2081          					if (count > NUMLAPS)		// safety check
   \   00000284   EF00A0E3           MOV      R0,#+239
   \   00000288   800F80E3           ORR      R0,R0,#0x200
   \   0000028C   000057E1           CMP      R7,R0
   2082          						count = NUMLAPS;
   \   00000290   0170C0A3           BICGE    R7,R0,#0x1
   2083          					for (i = 0; i < count; i++)
   \   00000294   010057B3           CMPLT    R7,#+1
   \   00000298   2E0000BA           BLT      ??ReadAllSessionData_7
   \   0000029C   06A0A0E1           MOV      R10,R6
   \   000002A0   ........           ADR      R8,??DataTable137_6  ;; 0x25, 0x73, 0x00, 0x00
   \   000002A4   010017E3           TST      R7,#0x1
   \   000002A8   0C00000A           BEQ      ??ReadAllSessionData_8
   2084          					{
   2085          						*pNextLink++ = pData = (char *)malloc(20);
   \   000002AC   1400A0E3           MOV      R0,#+20
   \   000002B0   ........           BL       malloc
   \   000002B4   00B0A0E1           MOV      R11,R0
   \   000002B8   04B085E4           STR      R11,[R5], #+4
   2086          						sprintf(pData, "%s", formatLapTime(LapList->lapTime[i], true));
   \   000002BC   0C008AE2           ADD      R0,R10,#+12
   \   000002C0   ........           BL       __aeabi_uread4
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   ........           BL       formatLapTime
   \   000002CC   0020A0E1           MOV      R2,R0
   \   000002D0   ........           ADR      R1,??DataTable137_6  ;; 0x25, 0x73, 0x00, 0x00
   \   000002D4   0B00A0E1           MOV      R0,R11
   \   000002D8   ........           BL       sprintf
   \   000002DC   04A08AE2           ADD      R10,R10,#+4
   \                     ??ReadAllSessionData_8:
   \   000002E0   A790B0E1           LSRS     R9,R7,#+1
   \   000002E4   1B00000A           BEQ      ??ReadAllSessionData_7
   \                     ??ReadAllSessionData_9:
   \   000002E8   1400A0E3           MOV      R0,#+20
   \   000002EC   ........           BL       malloc
   \   000002F0   00B0A0E1           MOV      R11,R0
   \   000002F4   04B085E4           STR      R11,[R5], #+4
   \   000002F8   0C008AE2           ADD      R0,R10,#+12
   \   000002FC   ........           BL       __aeabi_uread4
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   ........           BL       formatLapTime
   \   00000308   0020A0E1           MOV      R2,R0
   \   0000030C   0810A0E1           MOV      R1,R8
   \   00000310   0B00A0E1           MOV      R0,R11
   \   00000314   ........           BL       sprintf
   \   00000318   1400A0E3           MOV      R0,#+20
   \   0000031C   ........           BL       malloc
   \   00000320   00B0A0E1           MOV      R11,R0
   \   00000324   04B085E4           STR      R11,[R5], #+4
   \   00000328   10008AE2           ADD      R0,R10,#+16
   \   0000032C   ........           BL       __aeabi_uread4
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   ........           BL       formatLapTime
   \   00000338   0020A0E1           MOV      R2,R0
   \   0000033C   0810A0E1           MOV      R1,R8
   \   00000340   0B00A0E1           MOV      R0,R11
   \   00000344   ........           BL       sprintf
   2087          					}
   \   00000348   019049E2           SUB      R9,R9,#+1
   \   0000034C   08A08AE2           ADD      R10,R10,#+8
   \   00000350   000059E3           CMP      R9,#+0
   \   00000354   E3FFFF1A           BNE      ??ReadAllSessionData_9
   2088          				}
   2089          				free(LapList);
   \                     ??ReadAllSessionData_7:
   \   00000358   0600A0E1           MOV      R0,R6
   \   0000035C   ........           BL       free
   2090          			}
   2091          		}
   2092          
   2093          	numLaps = count;
   \                     ??ReadAllSessionData_0:
   \   00000360   047084E5           STR      R7,[R4, #+4]
   2094          
   2095          	*pNextLink = 0;
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   000085E5           STR      R0,[R5, #+0]
   2096          }
   \                     ??ReadAllSessionData_3:
   \   0000036C   9CD08DE2           ADD      SP,SP,#+156      ;; stack cleaning
   \   00000370   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2097          

   \                                 In section .text, align 4, keep-with-next
   2098          char *GetBestLapAutocross(char *pDest)
   2099          {
   \                     GetBestLapAutocross:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2100          	sprintf(pDest, "%s", formatLapTime(SessionData.lapInfo.bestLapTime, true));
   \   00000008   ........           LDR      R0,??DataTable150
   \   0000000C   ........           BL       __aeabi_uread4
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ........           BL       formatLapTime
   \   00000018   0020A0E1           MOV      R2,R0
   \   0000001C   ........           ADR      R1,??DataTable137_6  ;; 0x25, 0x73, 0x00, 0x00
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       sprintf
   2101          	return pDest;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   2102          }
   2103          

   \                                 In section .text, align 4, keep-with-next
   2104          int CreateFileList(enum DATATYPES type)
   2105          {
   \                     CreateFileList:
   \   00000000   B04F2DE9           PUSH     {R4,R5,R7-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   2106          	int count = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   2107          	char **pList = 0;
   \   00000010   0070A0E3           MOV      R7,#+0
   2108          	char *pData;
   2109          	const char *pDirectory;
   2110          	int limit;
   2111          #ifdef _WINDOWS
   2112          	DIR *dir;
   2113          	struct dirent *ent;
   2114          #else
   2115          	FS_FIND_DATA fd;
   2116          	char acFilename[NORMAL_FILENAME_SIZE];
   2117          #endif
   2118          
   2119          	// Create new list
   2120          	// Point to directory as well as clar out old list
   2121          	switch (type)
   \   00000014   020054E3           CMP      R4,#+2
   \   00000018   2500000A           BEQ      ??CreateFileList_0
   \   0000001C   4E00003A           BCC      ??CreateFileList_1
   \   00000020   040054E3           CMP      R4,#+4
   \   00000024   3000000A           BEQ      ??CreateFileList_2
   \   00000028   4B00002A           BCS      ??CreateFileList_1
   2122          	{
   2123          		case DRIVER_DATA:	pDirectory = DRIVER_PATH;
   2124          			memset(pList = pDrivers, 0, sizeof(pDrivers));
   \   0000002C   ........           LDR      R11,??DataTable141
   \   00000030   ........           LDR      R10,??DataTable151
   \   00000034   44708BE2           ADD      R7,R11,#+68
   \   00000038   CC10A0E3           MOV      R1,#+204
   \   0000003C   44008BE2           ADD      R0,R11,#+68
   \   00000040   ........           BL       __aeabi_memclr4
   2125          			limit = MAX_NUM_DRIVERS;
   \   00000044   3280A0E3           MOV      R8,#+50
   2126          			memset(pData = &DriverList[0][0], 0, sizeof(DriverList));
   \   00000048   F89F8BE2           ADD      R9,R11,#+992
   \   0000004C   FF1EA0E3           MOV      R1,#+4080
   \   00000050   F80F8BE2           ADD      R0,R11,#+992
   \                     ??CreateFileList_3:
   \   00000054   ........           BL       __aeabi_memclr4
   2127          			break;
   2128          		case VEHICLE_DATA:	pDirectory = VEHICLE_PATH;
   2129          			memset(pList = pVehicles, 0, sizeof(pVehicles));
   2130          			limit = MAX_NUM_VEHICLES;
   2131          			memset(pData = &VehicleList[0][0], 0, sizeof(VehicleList));
   2132          			break;
   2133          		case SESSION_DATA:	pDirectory = MY_SESSIONS_PATH;
   2134          			limit = MAX_SESSION_FILES;
   2135          			break;
   2136          
   2137          		default:
   2138          			return 0;
   2139          	}
   2140          
   2141          #ifndef _WINDOWS
   2142          
   2143          	if (FS_FindFirstFile(&fd, pDirectory, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \                     ??CreateFileList_4:
   \   00000058   5030A0E3           MOV      R3,#+80
   \   0000005C   0D20A0E1           MOV      R2,SP
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   50008DE2           ADD      R0,SP,#+80
   \   00000068   ........           BL       FS_FindFirstFile
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   2D00001A           BNE      ??CreateFileList_5
   2144          		do {
   2145          			if (ValidFileName(acFilename))		// KMC ?  Shouldn't this be fd->something
   \                     ??CreateFileList_6:
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           BL       ValidFileName
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   2300000A           BEQ      ??CreateFileList_7
   2146          			{
   2147          
   2148          				unsigned char processFile = true;
   2149          				
   2150          				if (type == SESSION_DATA) {
   \   00000084   040054E3           CMP      R4,#+4
   \   00000088   1A00001A           BNE      ??CreateFileList_8
   2151          					// only show files collected in race mode
   2152          					if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, acFilename))
   \   0000008C   ........           LDR      R0,??DataTable145_8
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000098   ........           BL       ValidRaceSession
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   1B00000A           BEQ      ??CreateFileList_7
   2153          					{
   2154          						SaveBestLap(count, acFilename);
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       SaveBestLap
   2155          						count++;
   \   000000B0   160000EA           B        ??CreateFileList_9
   2156          					}
   2157          					else
   2158          						processFile = false;
   2159          				}
   \                     ??CreateFileList_0:
   \   000000B4   ........           LDR      R11,??DataTable141
   \   000000B8   ........           LDR      R10,??DataTable151_1
   \   000000BC   447F8BE2           ADD      R7,R11,#+272
   \   000000C0   971FA0E3           MOV      R1,#+604
   \   000000C4   440F8BE2           ADD      R0,R11,#+272
   \   000000C8   ........           BL       __aeabi_memclr4
   \   000000CC   D000A0E3           MOV      R0,#+208
   \   000000D0   4C0D80E3           ORR      R0,R0,#0x1300
   \   000000D4   0B9080E0           ADD      R9,R0,R11
   \   000000D8   3010A0E3           MOV      R1,#+48
   \   000000DC   9680A0E3           MOV      R8,#+150
   \   000000E0   BC1D81E3           ORR      R1,R1,#0x2F00
   \   000000E4   0900A0E1           MOV      R0,R9
   \   000000E8   D9FFFFEA           B        ??CreateFileList_3
   \                     ??CreateFileList_2:
   \   000000EC   ........           LDR      R10,??DataTable146
   \   000000F0   C880A0E3           MOV      R8,#+200
   \   000000F4   D7FFFFEA           B        ??CreateFileList_4
   2160          				// KMC now only use CreateFileList to update BestLaps list so no longer need to add to list
   2161          				else if (processFile) {
   2162          					parseName(pData, acFilename, type);		// Truncate ".dat" off the file name and put in allocated buffer
   \                     ??CreateFileList_8:
   \   000000F8   0420A0E1           MOV      R2,R4
   \   000000FC   0D10A0E1           MOV      R1,SP
   \   00000100   0900A0E1           MOV      R0,R9
   \   00000104   ........           BL       parseName
   2163          					*pList++ = pData;
   \   00000108   049087E4           STR      R9,[R7], #+4
   2164          					pData += NORMAL_FILENAME_SIZE;
   \   0000010C   509089E2           ADD      R9,R9,#+80
   2165          					count++;
   \                     ??CreateFileList_9:
   \   00000110   015085E2           ADD      R5,R5,#+1
   2166          				}
   2167          			}
   2168          		} while (FS_FindNextFile(&fd) && (count < limit));
   \                     ??CreateFileList_7:
   \   00000114   50008DE2           ADD      R0,SP,#+80
   \   00000118   ........           BL       FS_FindNextFile
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0100000A           BEQ      ??CreateFileList_5
   \   00000124   080055E1           CMP      R5,R8
   \   00000128   D1FFFFBA           BLT      ??CreateFileList_6
   2169          	}
   2170          	FS_FindClose(&fd);
   \                     ??CreateFileList_5:
   \   0000012C   50008DE2           ADD      R0,SP,#+80
   \   00000130   ........           BL       FS_FindClose
   2171          
   2172          #else
   2173          
   2174          	dir = opendir(pDirectory);
   2175          	if (dir != NULL)
   2176          	{
   2177          		/* print all the files and directories within directory */
   2178          		while (((ent = readdir(dir)) != NULL) && (count < limit)) {
   2179          			if (ValidFileName(ent->d_name))
   2180          			{
   2181          				unsigned char processFile = true;
   2182          				
   2183          				if (type == SESSION_DATA)
   2184          				{
   2185          					// only show files collected in race mode
   2186          					if (parseSessionName(ent->d_name, &NameStruct) == sysData.selectedSessionType)
   2187          					{
   2188          						SaveBestLap(count, ent->d_name);
   2189          						count++;
   2190          					}
   2191          					else processFile = false;
   2192          				}
   2193          
   2194          				// KMC now only use CreateFileList to update BestLaps list so no longer need to add to list
   2195          				else if (processFile) {
   2196          					parseName(pData, ent->d_name, type);		// Truncate ".dat" off the file name and put in allocated buffer
   2197          					*pList++ = pData;
   2198          					pData += NORMAL_FILENAME_SIZE;
   2199          					count++;
   2200          				}
   2201          			}
   2202          		}
   2203          		closedir(dir);
   2204          	}
   2205          
   2206          #endif
   2207          
   2208          	switch (type)
   \   00000134   020054E3           CMP      R4,#+2
   \   00000138   0500000A           BEQ      ??CreateFileList_10
   \   0000013C   0600003A           BCC      ??CreateFileList_1
   \   00000140   030054E3           CMP      R4,#+3
   \   00000144   0400001A           BNE      ??CreateFileList_1
   2209          	{
   2210          		case DRIVER_DATA:
   2211          			numDrivers = count;
   \   00000148   ........           LDR      R0,??DataTable141
   \   0000014C   8C5380E5           STR      R5,[R0, #+908]
   2212          			break;
   \   00000150   010000EA           B        ??CreateFileList_1
   2213          		case VEHICLE_DATA:	
   2214          			numVehicles = count;
   \                     ??CreateFileList_10:
   \   00000154   ........           LDR      R0,??DataTable141
   \   00000158   905380E5           STR      R5,[R0, #+912]
   2215          			break;
   2216          	}
   2217          	
   2218          	return count;
   \                     ??CreateFileList_1:
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   90D08DE2           ADD      SP,SP,#+144
   \   00000164   B08FBDE8           POP      {R4,R5,R7-R11,PC}  ;; return
   2219          }
   2220          
   2221          //char SessionIsRoadRace(char *pName)
   2222          //{
   2223          //	int namelen = strlen(pName);
   2224          //
   2225          //	if (*(pName + namelen - 7) == 'R' || *(pName + namelen - 8) == 'R')
   2226          //		return true;
   2227          //	else return false;
   2228          //}
   2229          

   \                                 In section .text, align 4, keep-with-next
   2230          void SaveBestLap(int index, char *pName)
   2231          {
   \                     SaveBestLap:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   64D04DE2           SUB      SP,SP,#+100
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   C0DE4DE2           SUB      SP,SP,#+3072
   \   00000010   0150A0E1           MOV      R5,R1
   2232          	LAP_LIST_TYPE LapList;
   2233          	char fileName[MAX_FILENAME_SIZE];
   2234          
   2235          #ifdef _WINDOWS
   2236          	FILE *pFile;
   2237          	size_t results;
   2238          #else
   2239          	FS_FILE *pFile;
   2240          	unsigned long results;
   2241          #endif
   2242          
   2243          	if (index >= MAX_SESSION_FILES)
   \   00000014   C80054E3           CMP      R4,#+200
   \   00000018   400000AA           BGE      ??SaveBestLap_0
   2244          		return;
   2245          
   2246          	strcpy(fileName, MY_SESSIONS_PATH);
   \   0000001C   ........           LDR      R1,??DataTable146
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   ........           BL       strcpy
   2247          	strcat(fileName, "\\");
   \   00000028   ........           ADR      R1,??DataTable143  ;; "\\"
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           BL       strcat
   2248          	strcat(fileName, pName);
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   ........           BL       strcat
   2249          
   2250          #ifdef _WINDOWS
   2251          	if ((pFile = fopen(fileName, "rb")) != 0)
   2252          	{
   2253          		char numberOfFields;
   2254          
   2255          		fseek(pFile, TQM_NUMBER_USER_FIELDS, SEEK_SET);
   2256          		results = fread(&numberOfFields, sizeof(numberOfFields), 1, pFile);
   2257          		fseek(pFile, 0, SEEK_SET);			// Return to point to the beginning of the file
   2258          
   2259          		if (results != 1)
   2260          		{
   2261          			fclose(pFile);
   2262          			return;
   2263          		}
   2264          
   2265          		if (numberOfFields == TQM_USER_FIELDS)		// If new-style file
   2266          			fseek(pFile, TQM_LAP_OFFSET, SEEK_SET);
   2267          		else fseek(pFile, TQM_LAP_OFFSET_OLD, SEEK_SET);
   2268          		results = fread(&LapList, sizeof(LAP_LIST_TYPE), 1, pFile);
   2269          		fclose(pFile);
   2270          
   2271          		if (results == 1)
   2272          		{
   2273          			BestLaps[index] = LapList.bestLapTime;
   2274          			BestLapNumber[index] = LapList.bestLapNumber;
   2275          		}
   2276          		else
   2277          		{
   2278          			BestLaps[index] = 0;
   2279          		}
   2280          	}
   2281          	else BestLaps[index] = 0;
   2282          #else
   2283          	if (OkToUseSDCard())
   \   00000040   ........           BL       OkToUseSDCard
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   3000000A           BEQ      ??SaveBestLap_1
   2284          	{
   2285          		if (pFile = FS_FOpen(fileName, "rb"))
   \   0000004C   ........           ADR      R1,??DataTable144  ;; 0x72, 0x62, 0x00, 0x00
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           BL       FS_FOpen
   \   00000058   0050B0E1           MOVS     R5,R0
   \   0000005C   2B00000A           BEQ      ??SaveBestLap_1
   2286          		{
   2287          			char numberOfFields;
   2288          	
   2289          			FS_FSeek(pFile, TQM_NUMBER_USER_FIELDS, FS_SEEK_SET);
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   A71FA0E3           MOV      R1,#+668
   \   00000068   ........           BL       FS_FSeek
   2290          			results = FS_Read(pFile, &numberOfFields, sizeof(numberOfFields));
   \   0000006C   0120A0E3           MOV      R2,#+1
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           BL       FS_Read
   \   0000007C   0060A0E1           MOV      R6,R0
   2291          			FS_FSeek(pFile, 0, FS_SEEK_SET);
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       FS_FSeek
   2292          	
   2293          			if (results != sizeof(numberOfFields))
   \   00000090   010056E3           CMP      R6,#+1
   \   00000094   0200000A           BEQ      ??SaveBestLap_2
   2294          			{
   2295          				FS_FClose(pFile);
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           BL       FS_FClose
   2296          				return;
   \   000000A0   1E0000EA           B        ??SaveBestLap_0
   2297          			}
   2298          	
   2299          			if (numberOfFields == TQM_USER_FIELDS)		// If new-style file
   \                     ??SaveBestLap_2:
   \   000000A4   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   050050E3           CMP      R0,#+5
   2300          				FS_FSeek(pFile, TQM_LAP_OFFSET, FS_SEEK_SET);
   \   000000B0   6610A003           MOVEQ    R1,#+102
   2301          			else FS_FSeek(pFile, TQM_LAP_OFFSET_OLD, FS_SEEK_SET);
   \   000000B4   4610A013           MOVNE    R1,#+70
   \   000000B8   601E8103           ORREQ    R1,R1,#0x600
   \   000000BC   C01F8113           ORRNE    R1,R1,#0x300
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       FS_FSeek
   2302          			results = FS_Read(pFile, &LapList, sizeof(LAP_LIST_TYPE));
   \   000000C8   C470A0E3           MOV      R7,#+196
   \   000000CC   B07E87E3           ORR      R7,R7,#0xB00
   \   000000D0   0720A0E1           MOV      R2,R7
   \   000000D4   9C108DE2           ADD      R1,SP,#+156
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           BL       FS_Read
   \   000000E0   0060A0E1           MOV      R6,R0
   2303          			FS_FClose(pFile);
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       FS_FClose
   2304          			
   2305          			if (results == sizeof(LAP_LIST_TYPE))
   \   000000EC   ........           LDR      R0,??DataTable147_1
   \   000000F0   070056E1           CMP      R6,R7
   \   000000F4   040180E0           ADD      R0,R0,R4, LSL #+2
   \   000000F8   0600001A           BNE      ??SaveBestLap_3
   2306          			{
   2307          				BestLaps[index] = LapList.bestLapTime;
   \   000000FC   A4109DE5           LDR      R1,[SP, #+164]
   \   00000100   081080E5           STR      R1,[R0, #+8]
   2308          				BestLapNumber[index] = LapList.bestLapNumber;
   \   00000104   A0109DE5           LDR      R1,[SP, #+160]
   \   00000108   281380E5           STR      R1,[R0, #+808]
   \   0000010C   030000EA           B        ??SaveBestLap_0
   2309          			}
   2310          			else
   2311          			{
   2312          				BestLaps[index] = 0;
   2313          			}
   2314          		}
   2315          		else BestLaps[index] = 0;
   2316          	}
   2317          	else BestLaps[index] = 0;
   \                     ??SaveBestLap_1:
   \   00000110   ........           LDR      R0,??DataTable147_1
   \   00000114   040180E0           ADD      R0,R0,R4, LSL #+2
   \                     ??SaveBestLap_3:
   \   00000118   0010A0E3           MOV      R1,#+0
   \   0000011C   081080E5           STR      R1,[R0, #+8]
   \                     ??SaveBestLap_0:
   \   00000120   64D08DE2           ADD      SP,SP,#+100
   \   00000124   C0DE8DE2           ADD      SP,SP,#+3072
   \   00000128   F080BDE8           POP      {R4-R7,PC}       ;; return
   2318          #endif
   2319          }
   2320          

   \                                 In section .text, align 4, keep-with-next
   2321          char *GetBestLap(int displayLapNumber, int index, char *pStr)
   2322          {
   \                     GetBestLap:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0240A0E1           MOV      R4,R2
   2323          	switch (displayLapNumber) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0300000A           BEQ      ??GetBestLap_0
   \   00000018   020050E3           CMP      R0,#+2
   \   0000001C   2200000A           BEQ      ??GetBestLap_1
   \   00000020   1200003A           BCC      ??GetBestLap_2
   \   00000024   2B0000EA           B        ??GetBestLap_3
   2324          	case 0:			// Best Lap: 1:35.2
   2325          			strcpy(pStr, "Best Lap: ");
   \                     ??GetBestLap_0:
   \   00000028   0B20A0E3           MOV      R2,#+11
   \   0000002C   ............       ADRL     R1,`?<Constant "Best Lap: ">`
   \              ....        
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       __aeabi_memcpy
   2326          			strcat(pStr, ((index < MAX_SESSION_FILES) && (index >= 0)) ? formatLapTime(BestLaps[index], false) : "");
   \   0000003C   C80055E3           CMP      R5,#+200
   \   00000040   0600002A           BCS      ??GetBestLap_4
   \   00000044   ........           LDR      R0,??DataTable147_1
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   ........           BL       formatLapTime
   \                     ??GetBestLap_5:
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   000000EA           B        ??GetBestLap_6
   \                     ??GetBestLap_4:
   \   00000060   ........           ADR      R1,??DataTable145_1  ;; ""
   \                     ??GetBestLap_6:
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       strcat
   2327          			break;
   \   0000006C   190000EA           B        ??GetBestLap_3
   2328          	case 1:			// Time: 1:35.21
   2329          			strcpy(pStr, "Time: ");
   \                     ??GetBestLap_2:
   \   00000070   0720A0E3           MOV      R2,#+7
   \   00000074   ............       ADRL     R1,`?<Constant "Time: ">`
   \              ....        
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       __aeabi_memcpy
   2330          			strcat(pStr, ((index < MAX_SESSION_FILES) && (index >= 0)) ? formatLapTime(BestLaps[index], true) : "");
   \   00000084   C80055E3           CMP      R5,#+200
   \   00000088   0500002A           BCS      ??GetBestLap_7
   \   0000008C   ........           LDR      R0,??DataTable147_1
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000098   080090E5           LDR      R0,[R0, #+8]
   \   0000009C   ........           BL       formatLapTime
   \   000000A0   ECFFFFEA           B        ??GetBestLap_5
   \                     ??GetBestLap_7:
   \   000000A4   ........           ADR      R0,??DataTable145_1  ;; ""
   \   000000A8   EAFFFFEA           B        ??GetBestLap_5
   2331          			break;
   2332          	case 2:			// Best Lap: 4
   2333          		sprintf(pStr, "Best Lap: %d", ((index < MAX_SESSION_FILES) && (index >= 0)) ? BestLapNumber[index] : 0);
   \                     ??GetBestLap_1:
   \   000000AC   C80055E3           CMP      R5,#+200
   \   000000B0   0300002A           BCS      ??GetBestLap_8
   \   000000B4   ........           LDR      R0,??DataTable147_1
   \   000000B8   050180E0           ADD      R0,R0,R5, LSL #+2
   \   000000BC   282390E5           LDR      R2,[R0, #+808]
   \   000000C0   000000EA           B        ??GetBestLap_9
   \                     ??GetBestLap_8:
   \   000000C4   0020A0E3           MOV      R2,#+0
   \                     ??GetBestLap_9:
   \   000000C8   ............       ADRL     R1,`?<Constant "Best Lap: %d">`
   \              ....        
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       sprintf
   2334          			break;
   2335          	} // switch
   2336          	return pStr;
   \                     ??GetBestLap_3:
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   04D08DE2           ADD      SP,SP,#+4
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   2337          }
   2338          

   \                                 In section .text, align 4, keep-with-next
   2339          char *GetAutoxTime(int index, char *pStr)
   2340          {
   \                     GetAutoxTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   2341          	strcpy(pStr, "Run Time: ");
   \   00000010   0B20A0E3           MOV      R2,#+11
   \   00000014   ............       ADRL     R1,`?<Constant "Run Time: ">`
   \              ....        
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       __aeabi_memcpy
   2342          
   2343          	strcat(pStr, ((index < MAX_SESSION_FILES) && (index >= 0)) ? formatLapTime(BestLaps[index], false) : "");
   \   00000024   C80054E3           CMP      R4,#+200
   \   00000028   0500002A           BCS      ??GetAutoxTime_0
   \   0000002C   ........           LDR      R0,??DataTable147_1
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   ........           BL       formatLapTime
   \   00000040   000000EA           B        ??GetAutoxTime_1
   \                     ??GetAutoxTime_0:
   \   00000044   ........           ADR      R0,??DataTable145_1  ;; ""
   \                     ??GetAutoxTime_1:
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       strcat
   2344          	return pStr;
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   04D08DE2           ADD      SP,SP,#+4
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
   2345          }
   2346          

   \                                 In section .text, align 4, keep-with-next
   2347          char *GetDragTime(int index, char *pStr)
   2348          {
   \                     GetDragTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2349          	if (selectedSessionUnsorted >= 0)
   \   00000008   ........           LDR      R0,??DataTable147
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2800004A           BMI      ??GetDragTime_0
   2350          	{
   2351          		switch (SessionNameData[selectedSessionUnsorted].dragTrackType) {
   \   00000020   4B10A0E3           MOV      R1,#+75
   \   00000024   ........           LDR      R2,??DataTable151_2
   \   00000028   912020E0           MLA      R0,R1,R0,R2
   \   0000002C   4900D0E5           LDRB     R0,[R0, #+73]
   \   00000030   450050E2           SUBS     R0,R0,#+69
   \   00000034   0800000A           BEQ      ??GetDragTime_1
   \   00000038   0C0050E2           SUBS     R0,R0,#+12
   \   0000003C   0200000A           BEQ      ??GetDragTime_2
   \   00000040   030050E2           SUBS     R0,R0,#+3
   \   00000044   0800000A           BEQ      ??GetDragTime_3
   \   00000048   0B0000EA           B        ??GetDragTime_4
   2352          			case QUARTERMILE_TYPE:
   2353          				strcpy(pStr, "1/4mi ET: ");
   \                     ??GetDragTime_2:
   \   0000004C   0B20A0E3           MOV      R2,#+11
   \   00000050   ............       ADRL     R1,`?<Constant "1/4mi ET: ">`
   \              ....        
   \   00000058   0A0000EA           B        ??GetDragTime_5
   2354          				break;
   2355          			case EIGHTHMILE_TYPE:
   2356          				strcpy(pStr, "1/8mi ET: ");
   \                     ??GetDragTime_1:
   \   0000005C   0B20A0E3           MOV      R2,#+11
   \   00000060   ............       ADRL     R1,`?<Constant "1/8mi ET: ">`
   \              ....        
   \   00000068   060000EA           B        ??GetDragTime_5
   2357          				break;
   2358          			case THOUSANDFOOT_TYPE:
   2359          				strcpy(pStr, "1000' ET: ");
   \                     ??GetDragTime_3:
   \   0000006C   0B20A0E3           MOV      R2,#+11
   \   00000070   ............       ADRL     R1,`?<Constant "1000\\' ET: ">`
   \              ....        
   \   00000078   020000EA           B        ??GetDragTime_5
   2360          				break;
   2361          			default:
   2362          				strcpy(pStr, "Elapsed: ");
   \                     ??GetDragTime_4:
   \   0000007C   0A20A0E3           MOV      R2,#+10
   \   00000080   ............       ADRL     R1,`?<Constant "Elapsed: ">`
   \              ....        
   \                     ??GetDragTime_5:
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       __aeabi_memcpy
   2363          				break;
   2364          		} // switch
   2365          
   2366          		strcat(pStr, ((index < MAX_SESSION_FILES) && (index >= 0)) ? formatLapTime(BestLaps[index], false) : "");
   \   00000090   C80054E3           CMP      R4,#+200
   \   00000094   0500002A           BCS      ??GetDragTime_6
   \   00000098   ........           LDR      R0,??DataTable147_1
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   040180E0           ADD      R0,R0,R4, LSL #+2
   \   000000A4   080090E5           LDR      R0,[R0, #+8]
   \   000000A8   ........           BL       formatLapTime
   \   000000AC   000000EA           B        ??GetDragTime_7
   \                     ??GetDragTime_6:
   \   000000B0   ........           ADR      R0,??DataTable145_1  ;; ""
   \                     ??GetDragTime_7:
   \   000000B4   0010A0E1           MOV      R1,R0
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           BL       strcat
   \   000000C0   040000EA           B        ??GetDragTime_8
   2367          	}
   2368          	else strcpy(pStr, "Elapsed:");
   \                     ??GetDragTime_0:
   \   000000C4   0920A0E3           MOV      R2,#+9
   \   000000C8   ............       ADRL     R1,`?<Constant "Elapsed:">`
   \              ....        
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   ........           BL       __aeabi_memcpy
   2369          	return pStr;
   \                     ??GetDragTime_8:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   04D08DE2           ADD      SP,SP,#+4
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   2370          }
   2371          

   \                                 In section .text, align 4, keep-with-next
   2372          void DeleteFileList(enum DATATYPES type)
   2373          {
   \                     DeleteFileList:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   2374          	char **pList, ***ppList;
   2375          
   2376          	switch (type)
   \   00000004   050050E3           CMP      R0,#+5
   2377          	{
   2378          		//case DRIVER_DATA:
   2379          		//	pList = pDrivers;
   2380          		//	ppList = &pDrivers;
   2381          		//	break;
   2382          		//case VEHICLE_DATA:
   2383          		//	pList = pVehicles;
   2384          		//	ppList = &pVehicles;
   2385          		//	break;
   2386          		//case TRACK_DATA:
   2387          		//	if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
   2388          		//	{
   2389          		//		if (pTracksFull)
   2390          		//		{
   2391          		//			free(pTracksFull);
   2392          		//			pTracksFull = 0;
   2393          		//		}
   2394          		//	}
   2395          		//	else
   2396          		//	{
   2397          		//		if (pTracksShort)
   2398          		//		{
   2399          		//			free(pTracksShort);
   2400          		//			pTracksShort = 0;
   2401          		//		}
   2402          		//	}
   2403          		//	return;
   2404          		//default:
   2405          		//case SESSION_DATA:	
   2406          		//	pList = pSessions;
   2407          		//	ppList = &pSessions;
   2408          		//	DeleteBestLaps();
   2409          		//	break;
   2410          		case LAP_DATA:
   2411          			pList = pLaps;
   \   00000008   ........           LDREQ    R5,??DataTable147_1
   \   0000000C   00409505           LDREQ    R4,[R5, #+0]
   2412          			ppList = &pLaps;
   2413          			break;
   2414          	}
   2415          
   2416          	if (pList)
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0700000A           BEQ      ??DeleteFileList_0
   2417          	{
   2418          		char *pNext, **pData;
   2419          
   2420          		pData = pList;
   \   00000018   0460A0E1           MOV      R6,R4
   \   0000001C   000000EA           B        ??DeleteFileList_1
   2421          		while (pNext = *pData++)
   2422          			free(pNext);
   \                     ??DeleteFileList_2:
   \   00000020   ........           BL       free
   \                     ??DeleteFileList_1:
   \   00000024   040096E4           LDR      R0,[R6], #+4
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   FBFFFF1A           BNE      ??DeleteFileList_2
   2423          		free(pList);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       free
   2424          		pList = 0;
   2425          	}
   2426          
   2427          	*ppList = 0;		// zero out the original list pointer
   \                     ??DeleteFileList_0:
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   000085E5           STR      R0,[R5, #+0]
   2428          }
   \   00000040   7080BDE8           POP      {R4-R6,PC}       ;; return
   2429          

   \                                 In section .text, align 4, keep-with-next
   2430          void DeleteBestLaps(void)
   2431          {
   2432          	int i;
   2433          
   2434          	for (i = 0; i < MAX_SESSION_FILES; i++)
   \                     DeleteBestLaps:
   \   00000000   ........           LDR      R0,??DataTable147_1
   \   00000004   2820A0E3           MOV      R2,#+40
   \   00000008   081080E2           ADD      R1,R0,#+8
   \   0000000C   CA0F80E2           ADD      R0,R0,#+808
   \   00000010   0030A0E3           MOV      R3,#+0
   2435          	{
   2436          		BestLaps[i] = 0;
   \                     ??DeleteBestLaps_0:
   \   00000014   043081E4           STR      R3,[R1], #+4
   2437          		BestLapNumber[i] = 0;
   \   00000018   043080E4           STR      R3,[R0], #+4
   \   0000001C   043081E4           STR      R3,[R1], #+4
   \   00000020   043080E4           STR      R3,[R0], #+4
   \   00000024   043081E4           STR      R3,[R1], #+4
   \   00000028   043080E4           STR      R3,[R0], #+4
   \   0000002C   043081E4           STR      R3,[R1], #+4
   \   00000030   043080E4           STR      R3,[R0], #+4
   \   00000034   043081E4           STR      R3,[R1], #+4
   \   00000038   043080E4           STR      R3,[R0], #+4
   2438          	}
   \   0000003C   012052E2           SUBS     R2,R2,#+1
   \   00000040   F3FFFF1A           BNE      ??DeleteBestLaps_0
   2439          }
   \   00000044   1EFF2FE1           BX       LR               ;; return
   2440          

   \                                 In section .text, align 4, keep-with-next
   2441          int GetBestLapNumber(int session)
   2442          {
   2443          	return BestLapNumber[session];
   \                     GetBestLapNumber:
   \   00000000   ........           LDR      R1,??DataTable147_1
   \   00000004   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000008   280390E5           LDR      R0,[R0, #+808]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   2444          }
   2445          

   \                                 In section .text, align 4, keep-with-next
   2446          void parseName(char *pDest, char *pSource, enum DATATYPES type)
   2447          {
   2448          	char ch;
   2449          	int i;
   2450          
   2451          	if (type == SESSION_DATA)
   \                     parseName:
   \   00000000   040052E3           CMP      R2,#+4
   \   00000004   1B00001A           BNE      ??parseName_0
   2452          	{
   2453          		// take the date (first 10 characters)
   2454          		for (i = 0; i < 10; i++)
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   2455          			*pDest++ = *pSource++;
   \   0000000C   0130C0E4           STRB     R3,[R0], #+1
   \   00000010   0130F1E5           LDRB     R3,[R1, #+1]!
   \                     ??parseName_1:
   \   00000014   0130C0E4           STRB     R3,[R0], #+1
   \   00000018   01C0F1E5           LDRB     R12,[R1, #+1]!
   \   0000001C   012052E2           SUBS     R2,R2,#+1
   \   00000020   01C0C0E4           STRB     R12,[R0], #+1
   \   00000024   0130F1E5           LDRB     R3,[R1, #+1]!
   \   00000028   F9FFFF1A           BNE      ??parseName_1
   \   0000002C   0130C0E4           STRB     R3,[R0], #+1
   2456          
   2457          		// Search for the '.'
   2458          		while (*pSource++ != '.')
   \   00000030   0120F1E5           LDRB     R2,[R1, #+1]!
   \   00000034   2E0052E3           CMP      R2,#+46
   \   00000038   0200000A           BEQ      ??parseName_2
   \                     ??parseName_3:
   \   0000003C   0120F1E5           LDRB     R2,[R1, #+1]!
   \   00000040   2E0052E3           CMP      R2,#+46
   \   00000044   FCFFFF1A           BNE      ??parseName_3
   2459          			;
   2460          
   2461          		// Back up and get the session number
   2462          		pSource -= 4;
   2463          		*pDest++ = ' ';
   \                     ??parseName_2:
   \   00000048   2020A0E3           MOV      R2,#+32
   \   0000004C   0020C0E5           STRB     R2,[R0, #+0]
   2464          		*pDest++ = *pSource++;
   \   00000050   032071E5           LDRB     R2,[R1, #-3]!
   \   00000054   0120E0E5           STRB     R2,[R0, #+1]!
   2465          		*pDest++ = *pSource++;
   \   00000058   0120F1E5           LDRB     R2,[R1, #+1]!
   \   0000005C   0120E0E5           STRB     R2,[R0, #+1]!
   2466          		*pDest++ = *pSource++;
   \   00000060   0120F1E5           LDRB     R2,[R1, #+1]!
   2467          		*pDest = '\0';
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0120E0E5           STRB     R2,[R0, #+1]!
   \   0000006C   0110E0E5           STRB     R1,[R0, #+1]!
   \   00000070   1EFF2FE1           BX       LR
   2468          	}
   2469          	else
   2470          	{
   2471          		while (((ch = *pSource++) != '.') && (ch != '\0'))
   2472          			*pDest++ = ch;
   \                     ??parseName_4:
   \   00000074   0120C0E4           STRB     R2,[R0], #+1
   \                     ??parseName_0:
   \   00000078   0120D1E4           LDRB     R2,[R1], #+1
   \   0000007C   2E0052E3           CMP      R2,#+46
   \   00000080   00005213           CMPNE    R2,#+0
   \   00000084   FAFFFF1A           BNE      ??parseName_4
   2473          		*pDest = '\0';
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   0010C0E5           STRB     R1,[R0, #+0]
   2474          	}
   2475          }
   \   00000090   1EFF2FE1           BX       LR               ;; return
   2476          
   2477          //
   2478          // Make sure this is a valid file name ending in ".dat" or ".tqm"
   2479          //

   \                                 In section .text, align 4, keep-with-next
   2480          char ValidFileName(char *pName)
   2481          {
   \                     ValidFileName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2482          	char ch;
   2483          
   2484          	// check to make sure we have a letter or number to start the name
   2485          	if (!isalnum(pName[0]))
   \   00000008   0050D4E5           LDRB     R5,[R4, #+0]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           BL       isalpha
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500001A           BNE      ??ValidFileName_0
   \   00000020   300045E2           SUB      R0,R5,#+48
   \   00000024   0A0050E3           CMP      R0,#+10
   \   00000028   0200003A           BCC      ??ValidFileName_0
   2486          		return false;
   \                     ??ValidFileName_1:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \                     ??ValidFileName_2:
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   2487          
   2488          	// get to file extension
   2489          	while (((ch = *pName++) != '.') && (ch != '\0'))
   \                     ??ValidFileName_0:
   \   00000038   0100D4E4           LDRB     R0,[R4], #+1
   \   0000003C   2E0050E3           CMP      R0,#+46
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   FBFFFF1A           BNE      ??ValidFileName_0
   2490          		;
   2491          
   2492          	if ((ch == '.') && (tolower(*pName) == 'd') && (tolower(*(pName + 1)) == 'a') && (tolower(*(pName + 2)) == 't'))
   \   00000048   2E0050E3           CMP      R0,#+46
   \   0000004C   F6FFFF1A           BNE      ??ValidFileName_1
   \   00000050   0050D4E5           LDRB     R5,[R4, #+0]
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           BL       tolower
   \   0000005C   640050E3           CMP      R0,#+100
   \   00000060   0900001A           BNE      ??ValidFileName_3
   \   00000064   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000068   ........           BL       tolower
   \   0000006C   610050E3           CMP      R0,#+97
   \   00000070   0500001A           BNE      ??ValidFileName_3
   \   00000074   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000078   ........           BL       tolower
   \   0000007C   740050E3           CMP      R0,#+116
   \   00000080   0100001A           BNE      ??ValidFileName_3
   2493          		return true;
   \                     ??ValidFileName_4:
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   E8FFFFEA           B        ??ValidFileName_2
   \                     ??ValidFileName_3:
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       tolower
   \   00000094   740050E3           CMP      R0,#+116
   \   00000098   E3FFFF1A           BNE      ??ValidFileName_1
   \   0000009C   0100D4E5           LDRB     R0,[R4, #+1]
   \   000000A0   ........           BL       tolower
   \   000000A4   710050E3           CMP      R0,#+113
   \   000000A8   DFFFFF1A           BNE      ??ValidFileName_1
   \   000000AC   0200D4E5           LDRB     R0,[R4, #+2]
   \   000000B0   ........           BL       tolower
   \   000000B4   6D0050E3           CMP      R0,#+109
   \   000000B8   DBFFFF1A           BNE      ??ValidFileName_1
   \   000000BC   F0FFFFEA           B        ??ValidFileName_4
   2494          	else if ((ch == '.') && (tolower(*pName) == 't') && (tolower(*(pName + 1)) == 'q') && (tolower(*(pName + 2)) == 'm'))
   2495          		return true;
   2496          	else return false;
   2497          }
   2498          

   \                                 In section .text, align 4, keep-with-next
   2499          char ValidRaceSession(enum SESSION_TYPE type, char *pName)
   2500          {
   \                     ValidRaceSession:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   2501          	char len, sessionChar;
   2502          
   2503          	// check to make sure we have a letter or number to start the name
   2504          	if (!isalnum(pName[0]))
   \   00000008   0060D5E5           LDRB     R6,[R5, #+0]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           BL       isalpha
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1E00000A           BEQ      ??ValidRaceSession_1
   2505          		return false;
   2506          
   2507          	// get to file extension
   2508          	len = strlen(pName);
   \                     ??ValidRaceSession_2:
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       strlen
   \   00000028   FF0000E2           AND      R0,R0,#0xFF
   2509          
   2510          	if ((*(pName + len - 4) == '.') && (tolower(*(pName + len - 3)) == 't') && (tolower(*(pName + len - 2)) == 'q') && (tolower(*(pName + len - 1)) == 'm'))
   \   0000002C   055080E0           ADD      R5,R0,R5
   \   00000030   076045E2           SUB      R6,R5,#+7
   \   00000034   0300D6E5           LDRB     R0,[R6, #+3]
   \   00000038   2E0050E3           CMP      R0,#+46
   \   0000003C   4300001A           BNE      ??ValidRaceSession_3
   \   00000040   0400D6E5           LDRB     R0,[R6, #+4]
   \   00000044   ........           BL       tolower
   \   00000048   740050E3           CMP      R0,#+116
   \   0000004C   3F00001A           BNE      ??ValidRaceSession_3
   \   00000050   0500D6E5           LDRB     R0,[R6, #+5]
   \   00000054   ........           BL       tolower
   \   00000058   710050E3           CMP      R0,#+113
   \   0000005C   3B00001A           BNE      ??ValidRaceSession_3
   \   00000060   0600D6E5           LDRB     R0,[R6, #+6]
   \   00000064   ........           BL       tolower
   \   00000068   6D0050E3           CMP      R0,#+109
   \   0000006C   3700001A           BNE      ??ValidRaceSession_3
   2511          	{
   2512          		sessionChar = toupper(*(pName + len - 7));
   \   00000070   070055E5           LDRB     R0,[R5, #-7]
   \   00000074   ........           BL       toupper
   \   00000078   FF0000E2           AND      R0,R0,#0xFF
   2513          		// If we are looking for drag race session files there are three valid drag race characters
   2514          		if (GetSessionCharacter(type) == QUARTERMILE_TYPE)
   \   0000007C   510054E3           CMP      R4,#+81
   \   00000080   0900001A           BNE      ??ValidRaceSession_4
   2515          		{
   2516          			if ((sessionChar == QUARTERMILE_TYPE) || (sessionChar == EIGHTHMILE_TYPE) || (sessionChar == THOUSANDFOOT_TYPE))
   \   00000084   510050E3           CMP      R0,#+81
   \   00000088   45005013           CMPNE    R0,#+69
   \   0000008C   54005013           CMPNE    R0,#+84
   \   00000090   2E00001A           BNE      ??ValidRaceSession_3
   2517          				return true;
   \                     ??ValidRaceSession_5:
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   7080BDE8           POP      {R4-R6,PC}
   2518          			else return false;
   2519          		}
   \                     ??ValidRaceSession_1:
   \   0000009C   300046E2           SUB      R0,R6,#+48
   \   000000A0   0A0050E3           CMP      R0,#+10
   \   000000A4   DDFFFF3A           BCC      ??ValidRaceSession_2
   \   000000A8   280000EA           B        ??ValidRaceSession_3
   2520          		// Otherwise other race session types - handle normally
   2521          		else if (sessionChar == GetSessionCharacter(type))
   \                     ??ValidRaceSession_4:
   \   000000AC   414044E2           SUB      R4,R4,#+65
   \   000000B0   130054E3           CMP      R4,#+19
   \   000000B4   04F18F90           ADDLS    PC,PC,R4, LSL #+2
   \                     ??ValidRaceSession_0:
   \   000000B8   2100008A           BHI      ??ValidRaceSession_6
   \   000000BC   1A0000EA           B        ??ValidRaceSession_7
   \   000000C0   1F0000EA           B        ??ValidRaceSession_6
   \   000000C4   1E0000EA           B        ??ValidRaceSession_6
   \   000000C8   190000EA           B        ??ValidRaceSession_8
   \   000000CC   120000EA           B        ??ValidRaceSession_9
   \   000000D0   1B0000EA           B        ??ValidRaceSession_6
   \   000000D4   1A0000EA           B        ??ValidRaceSession_6
   \   000000D8   0B0000EA           B        ??ValidRaceSession_10
   \   000000DC   180000EA           B        ??ValidRaceSession_6
   \   000000E0   170000EA           B        ??ValidRaceSession_6
   \   000000E4   160000EA           B        ??ValidRaceSession_6
   \   000000E8   150000EA           B        ??ValidRaceSession_6
   \   000000EC   140000EA           B        ??ValidRaceSession_6
   \   000000F0   130000EA           B        ??ValidRaceSession_6
   \   000000F4   120000EA           B        ??ValidRaceSession_6
   \   000000F8   110000EA           B        ??ValidRaceSession_6
   \   000000FC   080000EA           B        ??ValidRaceSession_11
   \   00000100   0D0000EA           B        ??ValidRaceSession_12
   \   00000104   0E0000EA           B        ??ValidRaceSession_6
   \   00000108   010000EA           B        ??ValidRaceSession_13
   \                     ??ValidRaceSession_10:
   \   0000010C   4810A0E3           MOV      R1,#+72
   \   00000110   0C0000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_13:
   \   00000114   5410A0E3           MOV      R1,#+84
   \   00000118   0A0000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_9:
   \   0000011C   4510A0E3           MOV      R1,#+69
   \   00000120   080000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_11:
   \   00000124   5110A0E3           MOV      R1,#+81
   \   00000128   060000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_7:
   \   0000012C   4110A0E3           MOV      R1,#+65
   \   00000130   040000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_8:
   \   00000134   4410A0E3           MOV      R1,#+68
   \   00000138   020000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_12:
   \   0000013C   5210A0E3           MOV      R1,#+82
   \   00000140   000000EA           B        ??ValidRaceSession_14
   \                     ??ValidRaceSession_6:
   \   00000144   0010A0E3           MOV      R1,#+0
   2522          			return true;
   2523          		else return false;
   2524          	}
   \                     ??ValidRaceSession_14:
   \   00000148   010050E1           CMP      R0,R1
   \   0000014C   D0FFFF0A           BEQ      ??ValidRaceSession_5
   2525          	else return false;
   \                     ??ValidRaceSession_3:
   \   00000150   0000A0E3           MOV      R0,#+0
   \   00000154   7080BDE8           POP      {R4-R6,PC}       ;; return
   2526          }
   2527          
   2528          

   \                                 In section .text, align 4, keep-with-next
   2529          int FindSelection(enum DATATYPES sel)
   2530          {
   \                     FindSelection:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   2531          	char *pSelection, **pList;
   2532          	int count;
   2533          
   2534          	switch (sel)
   \   00000004   020050E3           CMP      R0,#+2
   \   00000008   0500000A           BEQ      ??FindSelection_0
   \   0000000C   0700003A           BCC      ??FindSelection_1
   \   00000010   030050E3           CMP      R0,#+3
   \   00000014   0500001A           BNE      ??FindSelection_1
   2535          	{
   2536          		case DRIVER_DATA:
   2537          			pList = pDrivers;
   \   00000018   ........           LDR      R4,??DataTable156
   2538          			pSelection = sysData.driver;
   \   0000001C   ........           LDR      R5,??DataTable156_1
   2539          			break;
   \   00000020   050000EA           B        ??FindSelection_2
   2540          		case VEHICLE_DATA:
   2541          			pList = pVehicles;
   \                     ??FindSelection_0:
   \   00000024   ........           LDR      R4,??DataTable156_2
   2542          			pSelection = sysData.vehicle;
   \   00000028   ........           LDR      R5,??DataTable156_3
   2543          			break;
   \   0000002C   020000EA           B        ??FindSelection_2
   2544          		default:
   2545          		case TRACK_DATA:
   2546          			//if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
   2547          			//	pList = pTracksFull;
   2548          			//else pList = pTracksShort;
   2549          			pList = pTracksShort;
   \                     ??FindSelection_1:
   \   00000030   ........           LDR      R0,??DataTable156_4
   2550          			pSelection = sysData.track;
   \   00000034   ........           LDR      R5,??DataTable157
   \   00000038   3C4090E5           LDR      R4,[R0, #+60]
   2551          			break;
   2552          	}
   2553          
   2554          	if (*pSelection == 0)
   \                     ??FindSelection_2:
   \   0000003C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00000A           BEQ      ??FindSelection_3
   2555          		return 0;
   2556          	
   2557          	count = 0;
   \   00000048   0060A0E3           MOV      R6,#+0
   \   0000004C   000000EA           B        ??FindSelection_4
   2558          	while (*pList)
   2559          	{
   2560          		if (strcmp(*pList, pSelection))
   2561          		{
   2562          			pList++;
   2563          			count++;
   \                     ??FindSelection_5:
   \   00000050   016086E2           ADD      R6,R6,#+1
   2564          		}
   \                     ??FindSelection_4:
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0500000A           BEQ      ??FindSelection_3
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   040094E4           LDR      R0,[R4], #+4
   \   00000068   ........           BL       strcmp
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F6FFFF1A           BNE      ??FindSelection_5
   2565          		else return count;
   \   00000074   0600A0E1           MOV      R0,R6
   \                     ??FindSelection_3:
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   2566          	}
   2567          	return 0;
   2568          }
   2569          
   2570          

   \                                 In section .text, align 4, keep-with-next
   2571          static const GUI_WIDGET_CREATE_INFO BadNameDialog[] = {
   \                     BadNameDialog:
   \   00000000                      ; Initializer data, 96 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "ERROR!">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "Not a valid name.">`
   \              ............
   \   00000020   000000001900       DC16 0, 0, 25, 360, 50, 2
   \              680132000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Please enter a valid ...">`
   \              ....        
   \   00000038   000000004100       DC16 0, 0, 65, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000050   010082007300       DC16 1, 130, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   2572          	{ FRAMEWIN_CreateIndirect, "ERROR!", 0, 50, 20, 360, 220, 0, 0 },
   2573          	{ TEXT_CreateIndirect, "Not a valid name.", 0, 0, 25, 360, 50, TEXT_CF_HCENTER },
   2574          	{ TEXT_CreateIndirect, "Please enter a valid name.", 0, 0, 65, 360, 30, TEXT_CF_HCENTER },
   2575          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 130, 115, 100, 60 }
   2576          };
   2577          
   2578          //
   2579          // Display a modal dialog box to tell the user he entered a bad name
   2580          //

   \                                 In section .text, align 4, keep-with-next
   2581          void InvalidName(void)
   2582          {
   \                     InvalidName:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   2583          	SetPopupDefaults(ERROR_POPUP);
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   ........           BL       SetPopupDefaults
   2584          
   2585          	GUI_ExecDialogBox(BadNameDialog, GUI_COUNTOF(BadNameDialog), &popupCallback, hRaceSetupScreens, 10, YSIZE_PHYS + 10);
   \   00000010   1A00A0E3           MOV      R0,#+26
   \   00000014   400F80E3           ORR      R0,R0,#0x100
   \   00000018   04008DE5           STR      R0,[SP, #+4]
   \   0000001C   ........           LDR      R4,??DataTable156_4
   \   00000020   0A00A0E3           MOV      R0,#+10
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   6C3394E5           LDR      R3,[R4, #+876]
   \   0000002C   ........           LDR      R2,??DataTable158
   \   00000030   0410A0E3           MOV      R1,#+4
   \   00000034   ............       ADRL     R0,BadNameDialog
   \              ....        
   \   0000003C   ........           BL       GUI_ExecDialogBox
   2586          
   2587          	DisplayKeyboard(button);	// Must kill old screen and dislpay new one - keyboard cannot be repainted properly
   \   00000040   980394E5           LDR      R0,[R4, #+920]
   \   00000044   08D08DE2           ADD      SP,SP,#+8
   \   00000048   1040BDE8           POP      {R4,LR}
   \   0000004C   ........           B        DisplayKeyboard  ;; tailcall
   2588          }
   2589          
   2590          //
   2591          // System just initializing or SD card was formatted - reset all file lists
   2592          //

   \                                 In section .text, align 4, keep-with-next
   2593          void ResetAllFileLists(char doCreateTracks)
   2594          {
   \                     ResetAllFileLists:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   2595          	if (doCreateTracks)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??ResetAllFileLists_0
   2596          		CreateTracks();				// read any new ones from the SD card
   \   00000010   ........           BL       CreateTracks
   2597          
   2598          	if (sysData.radius < OLD_WORLD)
   \                     ??ResetAllFileLists_0:
   \   00000014   ........           LDR      R4,??DataTable158_1
   \   00000018   2010A0E3           MOV      R1,#+32
   \   0000001C   B40094E5           LDR      R0,[R4, #+180]
   \   00000020   4E1C81E3           ORR      R1,R1,#0x4E00
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   000000AA           BGE      ??ResetAllFileLists_1
   2599          		GetClosestTracks(sysData.radius);
   \   0000002C   ........           BL       GetClosestTracks
   2600          	
   2601          	trackTableIndex = FindFile(sysData.track);	// Initialize global track table index
   \                     ??ResetAllFileLists_1:
   \   00000030   0050A0E3           MOV      R5,#+0
   \   00000034   ........           LDR      R6,??DataTable158_2
   \   00000038   ........           LDR      R7,??DataTable158_3
   \   0000003C   010000EA           B        ??ResetAllFileLists_2
   \                     ??ResetAllFileLists_3:
   \   00000040   015085E2           ADD      R5,R5,#+1
   \   00000044   486086E2           ADD      R6,R6,#+72
   \                     ??ResetAllFileLists_2:
   \   00000048   000097E5           LDR      R0,[R7, #+0]
   \   0000004C   010040E2           SUB      R0,R0,#+1
   \   00000050   000055E1           CMP      R5,R0
   \   00000054   0050E0A3           MVNGE    R5,#+0
   \   00000058   050000AA           BGE      ??ResetAllFileLists_4
   \   0000005C   1020A0E3           MOV      R2,#+16
   \   00000060   A01084E2           ADD      R1,R4,#+160
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   ........           BL       strncmp
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F2FFFF1A           BNE      ??ResetAllFileLists_3
   \                     ??ResetAllFileLists_4:
   \   00000074   ........           LDR      R0,??DataTable156_4
   \   00000078   A05380E5           STR      R5,[R0, #+928]
   2602          
   2603          	CreateFileList(TRACK_DATA);
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   ........           BL       CreateFileList
   2604          	CreateFileList(DRIVER_DATA);
   \   00000084   0300A0E3           MOV      R0,#+3
   \   00000088   ........           BL       CreateFileList
   2605          	CreateFileList(VEHICLE_DATA);
   \   0000008C   0200A0E3           MOV      R0,#+2
   \   00000090   ........           BL       CreateFileList
   2606          	CreateFileList(SESSION_DATA);				// Get best lap information out of session files
   \   00000094   0400A0E3           MOV      R0,#+4
   \   00000098   ........           BL       CreateFileList
   2607          
   2608          	selectedSessionUnsorted = FindNewestFile((enum SESSION_TYPE)sysData.selectedSessionType);
   \   0000009C   D000D4E5           LDRB     R0,[R4, #+208]
   \   000000A0   ........           BL       FindNewestFile
   \   000000A4   ........           LDR      R1,??DataTable159
   2609          }
   \   000000A8   04D08DE2           ADD      SP,SP,#+4
   \   000000AC   000081E5           STR      R0,[R1, #+0]
   \   000000B0   F080BDE8           POP      {R4-R7,PC}       ;; return
   2610          

   \                                 In section .text, align 4, keep-with-next
   2611          const char NoneInRange[NAMELEN+1] = "None in range";
   \                     NoneInRange:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4E6F6E652069       DC8 78, 111, 110, 101, 32, 105, 110, 32, 114, 97
   \              6E207261    
   \   0000000A   6E6765000000       DC8 110, 103, 101, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   2612          

   \                                 In section .text, align 4, keep-with-next
   2613          void CreateTrackList(void)
   2614          {
   \                     CreateTrackList:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2615          	int count = 0;
   2616          	int temp, loopCount;
   2617          //	char **pList = 0;
   2618          	char **pNextLink;
   2619          	char sortByDistance;
   2620          
   2621          	if ((ctType == CT_NORMAL_MODE) && (sysData.radius >= OLD_WORLD))
   \   00000004   ........           LDR      R5,??DataTable156_4
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   B703D5E5           LDRB     R0,[R5, #+951]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0600001A           BNE      ??CreateTrackList_1
   \   00000018   ........           LDR      R0,??DataTable158_1
   \   0000001C   2010A0E3           MOV      R1,#+32
   \   00000020   B40090E5           LDR      R0,[R0, #+180]
   \   00000024   4E1C81E3           ORR      R1,R1,#0x4E00
   \   00000028   010050E1           CMP      R0,R1
   2622          		sortByDistance = false;
   \   0000002C   0060A0A3           MOVGE    R6,#+0
   \   00000030   000000AA           BGE      ??CreateTrackList_2
   2623          	else sortByDistance = true;
   \                     ??CreateTrackList_1:
   \   00000034   0160A0E3           MOV      R6,#+1
   2624          
   2625          
   2626          	//if ((ctType == CT_NORMAL_MODE) && (sysData.radius == WHOLE_WORLD))
   2627          	//{
   2628          	//	if (pTracksFull)
   2629          	//		free(pTracksFull);
   2630          
   2631          	//	temp = numTracks = numberOfTracks;
   2632          	//	if (temp < 5)
   2633          	//		temp = 5;
   2634          
   2635          	//	// Create new list
   2636          	//	pNextLink = pTracksFull = (char **)(malloc((temp + 1) * sizeof(char *)));
   2637          
   2638          	//	while (count < numberOfTracks)
   2639          	//	{
   2640          	//		*pNextLink++ = trackTable[count].trackName;
   2641          	//		count++;
   2642          	//	}
   2643          	//}
   2644          	////else if (type == SHORT_LIST)
   2645          	//else		// type == SHORT_LIST
   2646          	{
   2647          		enum TRACK_TYPES currentCourseType;
   2648          
   2649          		if (pTracksShort)
   \                     ??CreateTrackList_2:
   \   00000038   3C0095E5           LDR      R0,[R5, #+60]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0000000A           BEQ      ??CreateTrackList_3
   2650          			free(pTracksShort);
   \   00000044   ........           BL       free
   2651          
   2652          		numTracks = 0;
   2653          
   2654          		if (sortByDistance)
   \                     ??CreateTrackList_3:
   \   00000048   000056E3           CMP      R6,#+0
   2655          			temp = numberOfShortListTracks;
   \   0000004C   ........           LDRNE    R0,??DataTable159_1
   2656          		else temp = numberOfTracks;
   \   00000050   ........           LDREQ    R0,??DataTable158_3
   \   00000054   0070A0E3           MOV      R7,#+0
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   2657          		loopCount = temp;
   \   0000005C   0080A0E1           MOV      R8,R0
   2658          
   2659          		if (temp < 5)
   \   00000060   050050E3           CMP      R0,#+5
   2660          			temp = 5;
   \   00000064   0500A0B3           MOVLT    R0,#+5
   2661          		
   2662          		// Create new list
   2663          		pNextLink = pTracksShort = (char **)(malloc((temp + 1) * sizeof(char *)));
   \   00000068   010080E2           ADD      R0,R0,#+1
   \   0000006C   947385E5           STR      R7,[R5, #+916]
   \   00000070   0001A0E1           LSL      R0,R0,#+2
   \   00000074   ........           BL       malloc
   2664          		currentCourseType = SessionTypeToTrackType((enum SESSION_TYPE)sysData.selectedSessionType);
   \   00000078   ........           LDR      R1,??DataTable158_1
   \   0000007C   3C0085E5           STR      R0,[R5, #+60]
   \   00000080   D010D1E5           LDRB     R1,[R1, #+208]
   \   00000084   411041E2           SUB      R1,R1,#+65
   \   00000088   130051E3           CMP      R1,#+19
   \   0000008C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??CreateTrackList_0:
   \   00000090   2600008A           BHI      ??CreateTrackList_4
   \   00000094   210000EA           B        ??CreateTrackList_5
   \   00000098   240000EA           B        ??CreateTrackList_4
   \   0000009C   230000EA           B        ??CreateTrackList_4
   \   000000A0   200000EA           B        ??CreateTrackList_6
   \   000000A4   120000EA           B        ??CreateTrackList_7
   \   000000A8   200000EA           B        ??CreateTrackList_4
   \   000000AC   1F0000EA           B        ??CreateTrackList_4
   \   000000B0   0B0000EA           B        ??CreateTrackList_8
   \   000000B4   1D0000EA           B        ??CreateTrackList_4
   \   000000B8   1C0000EA           B        ??CreateTrackList_4
   \   000000BC   1B0000EA           B        ??CreateTrackList_4
   \   000000C0   1A0000EA           B        ??CreateTrackList_4
   \   000000C4   190000EA           B        ??CreateTrackList_4
   \   000000C8   180000EA           B        ??CreateTrackList_4
   \   000000CC   170000EA           B        ??CreateTrackList_4
   \   000000D0   160000EA           B        ??CreateTrackList_4
   \   000000D4   060000EA           B        ??CreateTrackList_7
   \   000000D8   140000EA           B        ??CreateTrackList_4
   \   000000DC   130000EA           B        ??CreateTrackList_4
   \   000000E0   030000EA           B        ??CreateTrackList_7
   \                     ??CreateTrackList_8:
   \   000000E4   0610A0E3           MOV      R1,#+6
   2665          		if ((currentCourseType == DRAG_1_8) || (currentCourseType == DRAG_1000))	// List ALL types of Drag strips
   \                     ??CreateTrackList_9:
   \   000000E8   030051E3           CMP      R1,#+3
   \   000000EC   04005113           CMPNE    R1,#+4
   \   000000F0   0000001A           BNE      ??CreateTrackList_10
   2666          			currentCourseType = DRAG;
   \                     ??CreateTrackList_7:
   \   000000F4   0510A0E3           MOV      R1,#+5
   2667          
   2668          		while (count < loopCount)
   \                     ??CreateTrackList_10:
   \   000000F8   010058E3           CMP      R8,#+1
   \   000000FC   250000BA           BLT      ??CreateTrackList_11
   2669          		{
   2670          			int courseType;
   2671          
   2672          			// Get course type of this course
   2673          			if (sortByDistance)
   \                     ??CreateTrackList_12:
   \   00000100   4820A0E3           MOV      R2,#+72
   \   00000104   ........           LDR      R3,??DataTable158_2
   \   00000108   000056E3           CMP      R6,#+0
   \   0000010C   0900000A           BEQ      ??CreateTrackList_13
   2674          				courseType = trackTable[trackShortList[count]].courseType;
   \   00000110   ........           LDR      R12,??DataTable160
   \   00000114   04C19CE7           LDR      R12,[R12, +R4, LSL #+2]
   \   00000118   923C2CE0           MLA      R12,R2,R12,R3
   \   0000011C   060000EA           B        ??CreateTrackList_14
   \                     ??CreateTrackList_5:
   \   00000120   0210A0E3           MOV      R1,#+2
   \   00000124   EFFFFFEA           B        ??CreateTrackList_9
   \                     ??CreateTrackList_6:
   \   00000128   0710A0E3           MOV      R1,#+7
   \   0000012C   EDFFFFEA           B        ??CreateTrackList_9
   \                     ??CreateTrackList_4:
   \   00000130   0010A0E3           MOV      R1,#+0
   \   00000134   EFFFFFEA           B        ??CreateTrackList_10
   2675          			else courseType = trackTable[count].courseType;
   \                     ??CreateTrackList_13:
   \   00000138   92342CE0           MLA      R12,R2,R4,R3
   \                     ??CreateTrackList_14:
   \   0000013C   44C09CE5           LDR      R12,[R12, #+68]
   2676          
   2677          			// "Normalize" course types to standard search types (DRAG, ROAD_COURSE, AUTOXRALLY, DRIVE_COURSE)
   2678          			if ((courseType == DRAG_1_8) || (courseType == DRAG_1000))	// Be 100% certain we 'normalize' all drag types to DRAG
   \   00000140   03005CE3           CMP      R12,#+3
   \   00000144   04005C13           CMPNE    R12,#+4
   2679          				courseType = DRAG;
   \   00000148   05C0A003           MOVEQ    R12,#+5
   \   0000014C   0100000A           BEQ      ??CreateTrackList_15
   2680          			else if (courseType == OVAL)
   \   00000150   01005CE3           CMP      R12,#+1
   2681          				courseType = ROAD_COURSE;
   \   00000154   00C0A003           MOVEQ    R12,#+0
   2682          
   2683          			if (courseType == currentCourseType)
   \                     ??CreateTrackList_15:
   \   00000158   01005CE1           CMP      R12,R1
   \   0000015C   0A00001A           BNE      ??CreateTrackList_16
   2684          			{
   2685          				if (sortByDistance)
   \   00000160   000056E3           CMP      R6,#+0
   \   00000164   0300000A           BEQ      ??CreateTrackList_17
   2686          					*pNextLink++ = trackTable[trackShortList[count]].trackName;
   \   00000168   ........           LDR      R12,??DataTable160
   \   0000016C   04C19CE7           LDR      R12,[R12, +R4, LSL #+2]
   \   00000170   923C23E0           MLA      R3,R2,R12,R3
   \   00000174   000000EA           B        ??CreateTrackList_18
   2687          				else *pNextLink++ = trackTable[count].trackName;
   \                     ??CreateTrackList_17:
   \   00000178   923423E0           MLA      R3,R2,R4,R3
   \                     ??CreateTrackList_18:
   \   0000017C   043080E4           STR      R3,[R0], #+4
   2688          
   2689          				numTracks++;
   \   00000180   942395E5           LDR      R2,[R5, #+916]
   \   00000184   012082E2           ADD      R2,R2,#+1
   \   00000188   942385E5           STR      R2,[R5, #+916]
   2690          			}
   2691          			count++;
   \                     ??CreateTrackList_16:
   \   0000018C   014084E2           ADD      R4,R4,#+1
   \   00000190   080054E1           CMP      R4,R8
   \   00000194   D9FFFFBA           BLT      ??CreateTrackList_12
   2692          		}
   2693          		numberOfShortListTracksUser = count = numTracks;	// Reset the number of short list tracks to reflect
   \                     ??CreateTrackList_11:
   \   00000198   941395E5           LDR      R1,[R5, #+916]
   \   0000019C   401085E5           STR      R1,[R5, #+64]
   2694          										// the number that are BOTH within range AND of the correct track type.
   2695          	}
   2696          
   2697          	if (count == 0)
   \   000001A0   000051E3           CMP      R1,#+0
   2698          	{
   2699          		// Add indication to no tracks are within range
   2700          		*pNextLink++ = (char *)NoneInRange;
   \   000001A4   ............       ADRLEQ   R1,NoneInRange
   \              ....        
   \   000001AC   04108004           STREQ    R1,[R0], #+4
   2701          	}
   2702          
   2703          	*pNextLink = 0;
   \   000001B0   007080E5           STR      R7,[R0, #+0]
   2704          }
   \   000001B4   F081BDE8           POP      {R4-R8,PC}       ;; return
   2705          

   \                                 In section .text, align 4, keep-with-next
   2706          void SetTrackTableDefaultData(void)
   2707          {
   \                     SetTrackTableDefaultData:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2708          //	if ((trackTableIndex = FindFile(sysData.track)) >= 0)		// trackTableIndex shuold now be a persistant global variable
   2709          	if (trackTableIndex == 0)
   \   00000004   ........           LDR      R4,??DataTable156_4
   \   00000008   A00394E5           LDR      R0,[R4, #+928]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1200001A           BNE      ??SetTrackTableDefaultData_1
   2710          		trackTableIndex = FindFile(sysData.track);
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   ........           LDR      R6,??DataTable158_2
   \   0000001C   ........           LDR      R7,??DataTable158_1
   \   00000020   ........           LDR      R8,??DataTable158_3
   \   00000024   010000EA           B        ??SetTrackTableDefaultData_2
   \                     ??SetTrackTableDefaultData_3:
   \   00000028   015085E2           ADD      R5,R5,#+1
   \   0000002C   486086E2           ADD      R6,R6,#+72
   \                     ??SetTrackTableDefaultData_2:
   \   00000030   000098E5           LDR      R0,[R8, #+0]
   \   00000034   010040E2           SUB      R0,R0,#+1
   \   00000038   000055E1           CMP      R5,R0
   \   0000003C   0050E0A3           MVNGE    R5,#+0
   \   00000040   050000AA           BGE      ??SetTrackTableDefaultData_4
   \   00000044   1020A0E3           MOV      R2,#+16
   \   00000048   A01087E2           ADD      R1,R7,#+160
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           BL       strncmp
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F2FFFF1A           BNE      ??SetTrackTableDefaultData_3
   \                     ??SetTrackTableDefaultData_4:
   \   0000005C   A05384E5           STR      R5,[R4, #+928]
   2711          
   2712          	if (trackTableIndex >= 0)
   \                     ??SetTrackTableDefaultData_1:
   \   00000060   A01394E5           LDR      R1,[R4, #+928]
   \   00000064   ........           LDR      R0,??DataTable161
   \   00000068   000051E3           CMP      R1,#+0
   \   0000006C   1000004A           BMI      ??SetTrackTableDefaultData_5
   \   00000070   4820A0E3           MOV      R2,#+72
   \   00000074   ........           LDR      R3,??DataTable158_2
   \   00000078   923121E0           MLA      R1,R2,R1,R3
   \   0000007C   D821C1E1           LDRD     R2,R3,[R1, #+24]
   \   00000080   F021C0E1           STRD     R2,R3,[R0, #+16]
   2713          	{
   2714          		trackData.startLineLat = trackTable[trackTableIndex].startLineLat;
   2715          		trackData.startLineLong = trackTable[trackTableIndex].startLineLon;
   \   00000084   D022C1E1           LDRD     R2,R3,[R1, #+32]
   \   00000088   F821C0E1           STRD     R2,R3,[R0, #+24]
   2716          		trackData.startLineHeading = trackTable[trackTableIndex].startLineHeading;
   \   0000008C   282091E5           LDR      R2,[R1, #+40]
   \   00000090   242080E5           STR      R2,[R0, #+36]
   2717          		trackData.finishLineLat = trackTable[trackTableIndex].finishLineLat;
   \   00000094   D023C1E1           LDRD     R2,R3,[R1, #+48]
   \   00000098   F822C0E1           STRD     R2,R3,[R0, #+40]
   2718          		trackData.finishLineLong = trackTable[trackTableIndex].finishLineLon;
   \   0000009C   D823C1E1           LDRD     R2,R3,[R1, #+56]
   \   000000A0   F023C0E1           STRD     R2,R3,[R0, #+48]
   2719          		trackData.finishLineHeading = trackTable[trackTableIndex].finishLineHeading;
   \   000000A4   402091E5           LDR      R2,[R1, #+64]
   \   000000A8   3C2080E5           STR      R2,[R0, #+60]
   2720          		trackData.courseType = trackTable[trackTableIndex].courseType;
   \   000000AC   441091E5           LDR      R1,[R1, #+68]
   \   000000B0   2E0000EA           B        ??SetTrackTableDefaultData_6
   2721          	}
   2722          	else
   2723          	{
   2724          		trackData.startLineLat = 0;
   \                     ??SetTrackTableDefaultData_5:
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   F021C0E1           STRD     R2,R3,[R0, #+16]
   2725          		trackData.startLineLong = 0;
   \   000000C0   F821C0E1           STRD     R2,R3,[R0, #+24]
   2726          		trackData.startLineHeading = 0;
   \   000000C4   242080E5           STR      R2,[R0, #+36]
   2727          		trackData.finishLineLat = 0;
   \   000000C8   F822C0E1           STRD     R2,R3,[R0, #+40]
   2728          		trackData.finishLineLong = 0;
   2729          		trackData.finishLineHeading = 0;
   2730          		trackData.courseType = SessionTypeToTrackType((enum SESSION_TYPE)sysData.selectedSessionType);
   \   000000CC   ........           LDR      R1,??DataTable158_1
   \   000000D0   F023C0E1           STRD     R2,R3,[R0, #+48]
   \   000000D4   D010D1E5           LDRB     R1,[R1, #+208]
   \   000000D8   3C2080E5           STR      R2,[R0, #+60]
   \   000000DC   411041E2           SUB      R1,R1,#+65
   \   000000E0   130051E3           CMP      R1,#+19
   \   000000E4   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??SetTrackTableDefaultData_0:
   \   000000E8   1F00008A           BHI      ??SetTrackTableDefaultData_7
   \   000000EC   1A0000EA           B        ??SetTrackTableDefaultData_8
   \   000000F0   1D0000EA           B        ??SetTrackTableDefaultData_7
   \   000000F4   1C0000EA           B        ??SetTrackTableDefaultData_7
   \   000000F8   190000EA           B        ??SetTrackTableDefaultData_9
   \   000000FC   120000EA           B        ??SetTrackTableDefaultData_10
   \   00000100   190000EA           B        ??SetTrackTableDefaultData_7
   \   00000104   180000EA           B        ??SetTrackTableDefaultData_7
   \   00000108   0B0000EA           B        ??SetTrackTableDefaultData_11
   \   0000010C   160000EA           B        ??SetTrackTableDefaultData_7
   \   00000110   150000EA           B        ??SetTrackTableDefaultData_7
   \   00000114   140000EA           B        ??SetTrackTableDefaultData_7
   \   00000118   130000EA           B        ??SetTrackTableDefaultData_7
   \   0000011C   120000EA           B        ??SetTrackTableDefaultData_7
   \   00000120   110000EA           B        ??SetTrackTableDefaultData_7
   \   00000124   100000EA           B        ??SetTrackTableDefaultData_7
   \   00000128   0F0000EA           B        ??SetTrackTableDefaultData_7
   \   0000012C   080000EA           B        ??SetTrackTableDefaultData_12
   \   00000130   0D0000EA           B        ??SetTrackTableDefaultData_7
   \   00000134   0C0000EA           B        ??SetTrackTableDefaultData_7
   \   00000138   010000EA           B        ??SetTrackTableDefaultData_13
   \                     ??SetTrackTableDefaultData_11:
   \   0000013C   0610A0E3           MOV      R1,#+6
   \   00000140   0A0000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_13:
   \   00000144   0410A0E3           MOV      R1,#+4
   \   00000148   080000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_10:
   \   0000014C   0310A0E3           MOV      R1,#+3
   \   00000150   060000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_12:
   \   00000154   0510A0E3           MOV      R1,#+5
   \   00000158   040000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_8:
   \   0000015C   0210A0E3           MOV      R1,#+2
   \   00000160   020000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_9:
   \   00000164   0710A0E3           MOV      R1,#+7
   \   00000168   000000EA           B        ??SetTrackTableDefaultData_6
   \                     ??SetTrackTableDefaultData_7:
   \   0000016C   0010A0E3           MOV      R1,#+0
   2731          	}
   \                     ??SetTrackTableDefaultData_6:
   \   00000170   4010C0E5           STRB     R1,[R0, #+64]
   2732          }
   \   00000174   F081BDE8           POP      {R4-R8,PC}       ;; return
   2733          

   \                                 In section .text, align 4, keep-with-next
   2734          enum TRACK_TYPES SessionTypeToTrackType(enum SESSION_TYPE type)
   2735          {
   2736          	switch (type)
   \                     SessionTypeToTrackType:
   \   00000000   410040E2           SUB      R0,R0,#+65
   \   00000004   130050E3           CMP      R0,#+19
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SessionTypeToTrackType_0:
   \   0000000C   1F00008A           BHI      ??SessionTypeToTrackType_1
   \   00000010   140000EA           B        ??SessionTypeToTrackType_2
   \   00000014   1D0000EA           B        ??SessionTypeToTrackType_1
   \   00000018   1C0000EA           B        ??SessionTypeToTrackType_1
   \   0000001C   0F0000EA           B        ??SessionTypeToTrackType_3
   \   00000020   140000EA           B        ??SessionTypeToTrackType_4
   \   00000024   190000EA           B        ??SessionTypeToTrackType_1
   \   00000028   180000EA           B        ??SessionTypeToTrackType_1
   \   0000002C   150000EA           B        ??SessionTypeToTrackType_5
   \   00000030   160000EA           B        ??SessionTypeToTrackType_1
   \   00000034   150000EA           B        ??SessionTypeToTrackType_1
   \   00000038   140000EA           B        ??SessionTypeToTrackType_1
   \   0000003C   130000EA           B        ??SessionTypeToTrackType_1
   \   00000040   120000EA           B        ??SessionTypeToTrackType_1
   \   00000044   110000EA           B        ??SessionTypeToTrackType_1
   \   00000048   100000EA           B        ??SessionTypeToTrackType_1
   \   0000004C   0F0000EA           B        ??SessionTypeToTrackType_1
   \   00000050   060000EA           B        ??SessionTypeToTrackType_6
   \   00000054   0D0000EA           B        ??SessionTypeToTrackType_1
   \   00000058   0C0000EA           B        ??SessionTypeToTrackType_1
   \   0000005C   070000EA           B        ??SessionTypeToTrackType_7
   2737          	{
   2738          	case DRIVE_TYPE:		return DRIVE_COURSE;
   \                     ??SessionTypeToTrackType_3:
   \   00000060   0700A0E3           MOV      R0,#+7
   \   00000064   1EFF2FE1           BX       LR
   2739          	case AUTOCROSS_TYPE:	return AUTOXRALLY;
   \                     ??SessionTypeToTrackType_2:
   \   00000068   0200A0E3           MOV      R0,#+2
   \   0000006C   1EFF2FE1           BX       LR
   2740          	case QUARTERMILE_TYPE:	return DRAG;
   \                     ??SessionTypeToTrackType_6:
   \   00000070   0500A0E3           MOV      R0,#+5
   \   00000074   1EFF2FE1           BX       LR
   2741          	case EIGHTHMILE_TYPE:	return DRAG_1_8;
   \                     ??SessionTypeToTrackType_4:
   \   00000078   0300A0E3           MOV      R0,#+3
   \   0000007C   1EFF2FE1           BX       LR
   2742          	case THOUSANDFOOT_TYPE:	return DRAG_1000;
   \                     ??SessionTypeToTrackType_7:
   \   00000080   0400A0E3           MOV      R0,#+4
   \   00000084   1EFF2FE1           BX       LR
   2743          	case HILLCLIMB_TYPE:	return HILL_CLIMB;
   \                     ??SessionTypeToTrackType_5:
   \   00000088   0600A0E3           MOV      R0,#+6
   \   0000008C   1EFF2FE1           BX       LR
   2744          	default:
   2745          	case ROADRACE_TYPE:		return ROAD_COURSE;
   \                     ??SessionTypeToTrackType_1:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   1EFF2FE1           BX       LR               ;; return
   2746          	}
   2747          }
   2748          

   \                                 In section .text, align 4, keep-with-next
   2749          enum SESSION_TYPE TrackTypeToSessionType(enum TRACK_TYPES type)
   2750          {
   2751          	switch (type)
   \                     TrackTypeToSessionType:
   \   00000000   020040E2           SUB      R0,R0,#+2
   \   00000004   050050E3           CMP      R0,#+5
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??TrackTypeToSessionType_0:
   \   0000000C   1100008A           BHI      ??TrackTypeToSessionType_1
   \   00000010   060000EA           B        ??TrackTypeToSessionType_2
   \   00000014   090000EA           B        ??TrackTypeToSessionType_3
   \   00000018   0A0000EA           B        ??TrackTypeToSessionType_4
   \   0000001C   050000EA           B        ??TrackTypeToSessionType_5
   \   00000020   0A0000EA           B        ??TrackTypeToSessionType_6
   \   00000024   FFFFFFEA           B        ??TrackTypeToSessionType_7
   2752          	{
   2753          	case DRIVE_COURSE:	return DRIVE_TYPE;
   \                     ??TrackTypeToSessionType_7:
   \   00000028   4400A0E3           MOV      R0,#+68
   \   0000002C   1EFF2FE1           BX       LR
   2754          	case AUTOXRALLY:	return AUTOCROSS_TYPE;
   \                     ??TrackTypeToSessionType_2:
   \   00000030   4100A0E3           MOV      R0,#+65
   \   00000034   1EFF2FE1           BX       LR
   2755          	case DRAG:			return QUARTERMILE_TYPE;
   \                     ??TrackTypeToSessionType_5:
   \   00000038   5100A0E3           MOV      R0,#+81
   \   0000003C   1EFF2FE1           BX       LR
   2756          	case DRAG_1_8:		return EIGHTHMILE_TYPE;
   \                     ??TrackTypeToSessionType_3:
   \   00000040   4500A0E3           MOV      R0,#+69
   \   00000044   1EFF2FE1           BX       LR
   2757          	case DRAG_1000:		return THOUSANDFOOT_TYPE;
   \                     ??TrackTypeToSessionType_4:
   \   00000048   5400A0E3           MOV      R0,#+84
   \   0000004C   1EFF2FE1           BX       LR
   2758          	case HILL_CLIMB:	return HILLCLIMB_TYPE;
   \                     ??TrackTypeToSessionType_6:
   \   00000050   4800A0E3           MOV      R0,#+72
   \   00000054   1EFF2FE1           BX       LR
   2759          	default:
   2760          	case ROAD_COURSE:	return ROADRACE_TYPE;
   \                     ??TrackTypeToSessionType_1:
   \   00000058   5200A0E3           MOV      R0,#+82
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   2761          	}
   2762          }
   2763          
   2764          

   \                                 In section .text, align 4, keep-with-next
   2765          int FindFile(char *defaultTrack)
   2766          {
   \                     FindFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   2767          	int i;
   2768          
   2769          	for (i=0; i < numberOfTracks-1; i++)
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   ........           LDR      R6,??DataTable158_2
   \   00000014   ........           LDR      R7,??DataTable158_3
   \   00000018   010000EA           B        ??FindFile_0
   \                     ??FindFile_1:
   \   0000001C   015085E2           ADD      R5,R5,#+1
   \   00000020   486086E2           ADD      R6,R6,#+72
   \                     ??FindFile_0:
   \   00000024   000097E5           LDR      R0,[R7, #+0]
   \   00000028   010040E2           SUB      R0,R0,#+1
   \   0000002C   000055E1           CMP      R5,R0
   \   00000030   070000AA           BGE      ??FindFile_2
   2770          		if (strncmp(trackTable[i].trackName, defaultTrack, NAMELEN) == 0)
   \   00000034   1020A0E3           MOV      R2,#+16
   \   00000038   0410A0E1           MOV      R1,R4
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       strncmp
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   F3FFFF1A           BNE      ??FindFile_1
   2771          			return i;
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   000000EA           B        ??FindFile_3
   2772          
   2773          	return -1;
   \                     ??FindFile_2:
   \   00000054   0000E0E3           MVN      R0,#+0
   \                     ??FindFile_3:
   \   00000058   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000005C   F080BDE8           POP      {R4-R7,PC}       ;; return
   2774          }
   2775          
   2776          #ifdef _WINDOWS
   2777          enum SESSION_TYPE parseSessionName(char *pName, struct NAMESTRUCT *NameStruct)
   2778          {
   2779          	char scratch[5];
   2780          	char fullFileName[MAX_FILENAME_SIZE];
   2781          	HANDLE hFile;
   2782          	FILETIME lastWriteTime;
   2783          
   2784          	strcpy(fullFileName, MY_SESSIONS_PATH);
   2785          	strcat(fullFileName, "\\");
   2786          	strcat(fullFileName, pName);
   2787          
   2788          	if ((hFile = CreateFile(fullFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)) != INVALID_HANDLE_VALUE)
   2789          	{
   2790          		if (GetFileTime(hFile, NULL, NULL, &lastWriteTime))
   2791          		{
   2792          			SYSTEMTIME stUTC, stLocal;
   2793          			// Convert the last-write time to local time.
   2794          			FileTimeToSystemTime(&lastWriteTime, &stUTC);
   2795          			SystemTimeToTzSpecificLocalTime(NULL, &stUTC, &stLocal);
   2796          
   2797          			if (stLocal.wHour == 0)
   2798          				sprintf(NameStruct->time, "12:%02d am", stLocal.wMinute);
   2799          			else if (stLocal.wHour < 12)
   2800          				sprintf(NameStruct->time, "%d:%02d am", stLocal.wHour, stLocal.wMinute);
   2801          			else if (stLocal.wHour == 12)
   2802          				sprintf(NameStruct->time, "12:%02d pm", stLocal.wMinute);
   2803          			else sprintf(NameStruct->time, "%d:%02d pm", stLocal.wHour - 12, stLocal.wMinute);
   2804          		}
   2805          		else NameStruct->time[0] = 0;
   2806          
   2807          		CloseHandle(hFile);
   2808          	}
   2809          	else NameStruct->time[0] = 0;
   2810          #else

   \                                 In section .text, align 4, keep-with-next
   2811          enum SESSION_TYPE parseSessionName(FS_FIND_DATA *fd, struct NAMESTRUCT *NameStruct)
   2812          {
   \                     parseSessionName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0140A0E1           MOV      R4,R1
   2813          	char scratch[5];
   2814          	FS_FILETIME FileTime;
   2815          	char *pName;
   2816          	
   2817          	if (fd)
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   1C00000A           BEQ      ??parseSessionName_1
   2818          	{
   2819          		FS_TimeStampToFileTime(fd->LastWriteTime, &FileTime);
   \   00000018   08108DE2           ADD      R1,SP,#+8
   \   0000001C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000020   ........           BL       FS_TimeStampToFileTime
   2820          		if (FileTime.Hour == 0)
   \   00000024   BE00DDE1           LDRH     R0,[SP, #+14]
   \   00000028   B021DDE1           LDRH     R2,[SP, #+16]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0400001A           BNE      ??parseSessionName_2
   2821          			sprintf(NameStruct->time, "12:%02d am", FileTime.Minute);
   \   00000034   ............       ADRL     R1,`?<Constant "12:%02d am">`
   \              ....        
   \                     ??parseSessionName_3:
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       sprintf
   \   00000044   110000EA           B        ??parseSessionName_4
   2822          		else if (FileTime.Hour < 12)
   \                     ??parseSessionName_2:
   \   00000048   0C0050E3           CMP      R0,#+12
   \   0000004C   0600002A           BCS      ??parseSessionName_5
   2823          			sprintf(NameStruct->time, "%d:%02d am", FileTime.Hour, FileTime.Minute);
   \   00000050   0230A0E1           MOV      R3,R2
   \   00000054   0020A0E1           MOV      R2,R0
   \   00000058   ............       ADRL     R1,`?<Constant "%d:%02d am">`
   \              ....        
   \                     ??parseSessionName_6:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       sprintf
   \   00000068   080000EA           B        ??parseSessionName_4
   2824          		else if (FileTime.Hour == 12)
   2825          			sprintf(NameStruct->time, "12:%02d pm", FileTime.Minute);
   \                     ??parseSessionName_5:
   \   0000006C   ............       ADRLEQ   R1,`?<Constant "12:%02d pm">`
   \              ....        
   \   00000074   F0FFFF0A           BEQ      ??parseSessionName_3
   2826          		else sprintf(NameStruct->time, "%d:%02d pm", FileTime.Hour - 12, FileTime.Minute);
   \   00000078   0230A0E1           MOV      R3,R2
   \   0000007C   0C2040E2           SUB      R2,R0,#+12
   \   00000080   ............       ADRL     R1,`?<Constant "%d:%02d pm">`
   \              ....        
   \   00000088   F4FFFFEA           B        ??parseSessionName_6
   2827          	}
   2828          	else NameStruct->time[0] = 0;
   \                     ??parseSessionName_1:
   \   0000008C   0000C4E5           STRB     R0,[R4, #+0]
   2829          	
   2830          	pName = fd->sFileName;
   2831          #endif
   2832          	pName = GetNextString(NameStruct->date, pName);
   \                     ??parseSessionName_4:
   \   00000090   140095E5           LDR      R0,[R5, #+20]
   \   00000094   0A2084E2           ADD      R2,R4,#+10
   \   00000098   000000EA           B        ??parseSessionName_7
   \                     ??parseSessionName_8:
   \   0000009C   0110C2E4           STRB     R1,[R2], #+1
   \                     ??parseSessionName_7:
   \   000000A0   0010D0E5           LDRB     R1,[R0, #+0]
   \   000000A4   000051E3           CMP      R1,#+0
   \   000000A8   0300000A           BEQ      ??parseSessionName_9
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   5F0051E3           CMP      R1,#+95
   \   000000B4   F8FFFF1A           BNE      ??parseSessionName_8
   \   000000B8   0010A0E3           MOV      R1,#+0
   \                     ??parseSessionName_9:
   \   000000BC   0010C2E5           STRB     R1,[R2, #+0]
   2833          	pName = GetNextString(NameStruct->track, pName);
   \   000000C0   152084E2           ADD      R2,R4,#+21
   \   000000C4   000000EA           B        ??parseSessionName_10
   \                     ??parseSessionName_11:
   \   000000C8   0130C2E4           STRB     R3,[R2], #+1
   \                     ??parseSessionName_10:
   \   000000CC   0030D0E5           LDRB     R3,[R0, #+0]
   \   000000D0   000053E3           CMP      R3,#+0
   \   000000D4   01008012           ADDNE    R0,R0,#+1
   \   000000D8   5F005313           CMPNE    R3,#+95
   \   000000DC   F9FFFF1A           BNE      ??parseSessionName_11
   \   000000E0   0010C2E5           STRB     R1,[R2, #+0]
   2834          	pName = GetNextString(NameStruct->vehicle, pName);
   \   000000E4   262084E2           ADD      R2,R4,#+38
   \   000000E8   000000EA           B        ??parseSessionName_12
   \                     ??parseSessionName_13:
   \   000000EC   0130C2E4           STRB     R3,[R2], #+1
   \                     ??parseSessionName_12:
   \   000000F0   0030D0E5           LDRB     R3,[R0, #+0]
   \   000000F4   000053E3           CMP      R3,#+0
   \   000000F8   01008012           ADDNE    R0,R0,#+1
   \   000000FC   5F005313           CMPNE    R3,#+95
   \   00000100   F9FFFF1A           BNE      ??parseSessionName_13
   \   00000104   0010C2E5           STRB     R1,[R2, #+0]
   2835          	pName = GetNextString(NameStruct->driver, pName);
   \   00000108   372084E2           ADD      R2,R4,#+55
   \   0000010C   000000EA           B        ??parseSessionName_14
   \                     ??parseSessionName_15:
   \   00000110   0130C2E4           STRB     R3,[R2], #+1
   \                     ??parseSessionName_14:
   \   00000114   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000118   000053E3           CMP      R3,#+0
   \   0000011C   01008012           ADDNE    R0,R0,#+1
   \   00000120   5F005313           CMPNE    R3,#+95
   \   00000124   F9FFFF1A           BNE      ??parseSessionName_15
   \   00000128   0010C2E5           STRB     R1,[R2, #+0]
   2836          	pName = GetNextChar(&NameStruct->sessionType, pName);
   \   0000012C   482084E2           ADD      R2,R4,#+72
   \   00000130   0010C2E5           STRB     R1,[R2, #+0]
   \   00000134   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000138   000053E3           CMP      R3,#+0
   \   0000013C   1900000A           BEQ      ??parseSessionName_16
   \   00000140   41C043E2           SUB      R12,R3,#+65
   \   00000144   010080E2           ADD      R0,R0,#+1
   \   00000148   13005CE3           CMP      R12,#+19
   \   0000014C   0CF18F90           ADDLS    PC,PC,R12, LSL #+2
   \                     ??parseSessionName_0:
   \   00000150   1400008A           BHI      ??parseSessionName_16
   \   00000154   120000EA           B        ??parseSessionName_17
   \   00000158   120000EA           B        ??parseSessionName_16
   \   0000015C   110000EA           B        ??parseSessionName_16
   \   00000160   0F0000EA           B        ??parseSessionName_17
   \   00000164   0E0000EA           B        ??parseSessionName_17
   \   00000168   0E0000EA           B        ??parseSessionName_16
   \   0000016C   0D0000EA           B        ??parseSessionName_16
   \   00000170   0B0000EA           B        ??parseSessionName_17
   \   00000174   0B0000EA           B        ??parseSessionName_16
   \   00000178   0A0000EA           B        ??parseSessionName_16
   \   0000017C   090000EA           B        ??parseSessionName_16
   \   00000180   080000EA           B        ??parseSessionName_16
   \   00000184   070000EA           B        ??parseSessionName_16
   \   00000188   060000EA           B        ??parseSessionName_16
   \   0000018C   050000EA           B        ??parseSessionName_16
   \   00000190   040000EA           B        ??parseSessionName_16
   \   00000194   020000EA           B        ??parseSessionName_17
   \   00000198   010000EA           B        ??parseSessionName_17
   \   0000019C   010000EA           B        ??parseSessionName_16
   \   000001A0   FFFFFFEA           B        ??parseSessionName_17
   \                     ??parseSessionName_17:
   \   000001A4   0030C2E5           STRB     R3,[R2, #+0]
   2837          	GetNextNum(scratch, pName);
   \                     ??parseSessionName_16:
   \   000001A8   0D20A0E1           MOV      R2,SP
   \   000001AC   000000EA           B        ??parseSessionName_18
   \                     ??parseSessionName_19:
   \   000001B0   0130C2E4           STRB     R3,[R2], #+1
   \                     ??parseSessionName_18:
   \   000001B4   0130D0E4           LDRB     R3,[R0], #+1
   \   000001B8   000053E3           CMP      R3,#+0
   \   000001BC   0200000A           BEQ      ??parseSessionName_20
   \   000001C0   30C043E2           SUB      R12,R3,#+48
   \   000001C4   0A005CE3           CMP      R12,#+10
   \   000001C8   F8FFFF3A           BCC      ??parseSessionName_19
   \                     ??parseSessionName_20:
   \   000001CC   0010C2E5           STRB     R1,[R2, #+0]
   2838          	NameStruct->sessionNumber = atoi(scratch);
   \   000001D0   0A20A0E3           MOV      R2,#+10
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   0D00A0E1           MOV      R0,SP
   \   000001DC   ........           BL       __iar_Stoul
   \   000001E0   4A00C4E5           STRB     R0,[R4, #+74]
   2839          	if ((NameStruct->sessionType == EIGHTHMILE_TYPE) || (NameStruct->sessionType == THOUSANDFOOT_TYPE) || (NameStruct->sessionType == QUARTERMILE_TYPE))
   \   000001E4   4800D4E5           LDRB     R0,[R4, #+72]
   2840          	{
   2841          		NameStruct->dragTrackType = NameStruct->sessionType;
   2842          		NameStruct->sessionType = QUARTERMILE_TYPE;
   2843          	}
   2844          	return NameStruct->sessionType;
   \   000001E8   14D08DE2           ADD      SP,SP,#+20
   \   000001EC   450050E3           CMP      R0,#+69
   \   000001F0   54005013           CMPNE    R0,#+84
   \   000001F4   51005013           CMPNE    R0,#+81
   \   000001F8   4900C405           STRBEQ   R0,[R4, #+73]
   \   000001FC   5100A003           MOVEQ    R0,#+81
   \   00000200   4800C405           STRBEQ   R0,[R4, #+72]
   \   00000204   4800D4E5           LDRB     R0,[R4, #+72]
   \   00000208   3080BDE8           POP      {R4,R5,PC}       ;; return
   2845          }
   2846          

   \                                 In section .text, align 4, keep-with-next
   2847          char *GetNextString(char *pDest, char *pSource)
   2848          {
   \                     GetNextString:
   \   00000000   000000EA           B        ??GetNextString_0
   2849          	char ch;
   2850          
   2851          	while ((ch = *pSource) != 0)
   2852          	{
   2853          		pSource++;
   2854          		if (ch == '_')
   2855          			break;
   2856          		*pDest++ = ch;
   \                     ??GetNextString_1:
   \   00000004   0120C0E4           STRB     R2,[R0], #+1
   \                     ??GetNextString_0:
   \   00000008   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0300000A           BEQ      ??GetNextString_2
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   5F0052E3           CMP      R2,#+95
   \   0000001C   F8FFFF1A           BNE      ??GetNextString_1
   2857          	}
   2858          	*pDest = 0;		// Be sure to null-terminate the strings
   \   00000020   0020A0E3           MOV      R2,#+0
   \                     ??GetNextString_2:
   \   00000024   0020C0E5           STRB     R2,[R0, #+0]
   2859          	return pSource;
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   2860          }
   2861          

   \                                 In section .text, align 4, keep-with-next
   2862          char *GetNextChar(enum SESSION_TYPE *pDest, char *pSource)
   2863          {
   2864          	char ch;
   2865          
   2866          	*pDest = NOT_VALID;
   \                     GetNextChar:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0020C0E5           STRB     R2,[R0, #+0]
   2867          
   2868          	if ((ch = *pSource) != 0)
   \   00000008   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   1900000A           BEQ      ??GetNextChar_1
   2869          	{
   2870          		pSource++;
   2871          		if (ValidSessionType(ch))
   \   00000014   413042E2           SUB      R3,R2,#+65
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   130053E3           CMP      R3,#+19
   \   00000020   03F18F90           ADDLS    PC,PC,R3, LSL #+2
   \                     ??GetNextChar_0:
   \   00000024   1400008A           BHI      ??GetNextChar_1
   \   00000028   120000EA           B        ??GetNextChar_2
   \   0000002C   120000EA           B        ??GetNextChar_1
   \   00000030   110000EA           B        ??GetNextChar_1
   \   00000034   0F0000EA           B        ??GetNextChar_2
   \   00000038   0E0000EA           B        ??GetNextChar_2
   \   0000003C   0E0000EA           B        ??GetNextChar_1
   \   00000040   0D0000EA           B        ??GetNextChar_1
   \   00000044   0B0000EA           B        ??GetNextChar_2
   \   00000048   0B0000EA           B        ??GetNextChar_1
   \   0000004C   0A0000EA           B        ??GetNextChar_1
   \   00000050   090000EA           B        ??GetNextChar_1
   \   00000054   080000EA           B        ??GetNextChar_1
   \   00000058   070000EA           B        ??GetNextChar_1
   \   0000005C   060000EA           B        ??GetNextChar_1
   \   00000060   050000EA           B        ??GetNextChar_1
   \   00000064   040000EA           B        ??GetNextChar_1
   \   00000068   020000EA           B        ??GetNextChar_2
   \   0000006C   010000EA           B        ??GetNextChar_2
   \   00000070   010000EA           B        ??GetNextChar_1
   \   00000074   FFFFFFEA           B        ??GetNextChar_2
   2872          			*pDest = (enum SESSION_TYPE)ch;
   \                     ??GetNextChar_2:
   \   00000078   0020C0E5           STRB     R2,[R0, #+0]
   2873          	}
   2874          
   2875          	return pSource;
   \                     ??GetNextChar_1:
   \   0000007C   0100A0E1           MOV      R0,R1
   \   00000080   1EFF2FE1           BX       LR               ;; return
   2876          }
   2877          

   \                                 In section .text, align 4, keep-with-next
   2878          char *GetNextNum(char *pDest, char *pSource)
   2879          {
   \                     GetNextNum:
   \   00000000   000000EA           B        ??GetNextNum_0
   2880          	char ch;
   2881          
   2882          	while ((ch = *pSource) != 0)
   2883          	{
   2884          		pSource++;
   2885          		if (!isdigit(ch))
   2886          			break;
   2887          		*pDest++ = ch;
   \                     ??GetNextNum_1:
   \   00000004   0120C0E4           STRB     R2,[R0], #+1
   \                     ??GetNextNum_0:
   \   00000008   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0400000A           BEQ      ??GetNextNum_2
   \   00000014   303042E2           SUB      R3,R2,#+48
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   0A0053E3           CMP      R3,#+10
   \   00000020   F7FFFF3A           BCC      ??GetNextNum_1
   2888          	}
   2889          	*pDest = 0;		// Be sure to null-terminate the strings
   \   00000024   0020A0E3           MOV      R2,#+0
   \                     ??GetNextNum_2:
   \   00000028   0020C0E5           STRB     R2,[R0, #+0]
   2890          	return pSource;
   \   0000002C   0100A0E1           MOV      R0,R1
   \   00000030   1EFF2FE1           BX       LR               ;; return
   2891          }
   2892          
   2893          

   \                                 In section .text, align 4, keep-with-next
   2894          char ValidSessionType(char ch)
   2895          {
   2896          	switch (ch)
   \                     ValidSessionType:
   \   00000000   410040E2           SUB      R0,R0,#+65
   \   00000004   130050E3           CMP      R0,#+19
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??ValidSessionType_0:
   \   0000000C   1500008A           BHI      ??ValidSessionType_1
   \   00000010   120000EA           B        ??ValidSessionType_2
   \   00000014   130000EA           B        ??ValidSessionType_1
   \   00000018   120000EA           B        ??ValidSessionType_1
   \   0000001C   0F0000EA           B        ??ValidSessionType_2
   \   00000020   0E0000EA           B        ??ValidSessionType_2
   \   00000024   0F0000EA           B        ??ValidSessionType_1
   \   00000028   0E0000EA           B        ??ValidSessionType_1
   \   0000002C   0B0000EA           B        ??ValidSessionType_2
   \   00000030   0C0000EA           B        ??ValidSessionType_1
   \   00000034   0B0000EA           B        ??ValidSessionType_1
   \   00000038   0A0000EA           B        ??ValidSessionType_1
   \   0000003C   090000EA           B        ??ValidSessionType_1
   \   00000040   080000EA           B        ??ValidSessionType_1
   \   00000044   070000EA           B        ??ValidSessionType_1
   \   00000048   060000EA           B        ??ValidSessionType_1
   \   0000004C   050000EA           B        ??ValidSessionType_1
   \   00000050   020000EA           B        ??ValidSessionType_2
   \   00000054   010000EA           B        ??ValidSessionType_2
   \   00000058   020000EA           B        ??ValidSessionType_1
   \   0000005C   FFFFFFEA           B        ??ValidSessionType_2
   2897          	{
   2898          	case 'R':
   2899          	case 'D':
   2900          	case 'A':
   2901          	case 'Q':
   2902          	case 'E':
   2903          	case 'T':
   2904          	case 'H':
   2905          		return true;
   \                     ??ValidSessionType_2:
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   1EFF2FE1           BX       LR
   2906          	default:
   2907          		return false;
   \                     ??ValidSessionType_1:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   1EFF2FE1           BX       LR               ;; return
   2908          	}
   2909          }
   2910          

   \                                 In section .text, align 4, keep-with-next
   2911          char GetSessionCharacter(enum SESSION_TYPE type)
   2912          {
   2913          	switch (type)
   \                     GetSessionCharacter:
   \   00000000   410040E2           SUB      R0,R0,#+65
   \   00000004   130050E3           CMP      R0,#+19
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GetSessionCharacter_0:
   \   0000000C   2100008A           BHI      ??GetSessionCharacter_1
   \   00000010   160000EA           B        ??GetSessionCharacter_2
   \   00000014   1F0000EA           B        ??GetSessionCharacter_1
   \   00000018   1E0000EA           B        ??GetSessionCharacter_1
   \   0000001C   110000EA           B        ??GetSessionCharacter_3
   \   00000020   160000EA           B        ??GetSessionCharacter_4
   \   00000024   1B0000EA           B        ??GetSessionCharacter_1
   \   00000028   1A0000EA           B        ??GetSessionCharacter_1
   \   0000002C   170000EA           B        ??GetSessionCharacter_5
   \   00000030   180000EA           B        ??GetSessionCharacter_1
   \   00000034   170000EA           B        ??GetSessionCharacter_1
   \   00000038   160000EA           B        ??GetSessionCharacter_1
   \   0000003C   150000EA           B        ??GetSessionCharacter_1
   \   00000040   140000EA           B        ??GetSessionCharacter_1
   \   00000044   130000EA           B        ??GetSessionCharacter_1
   \   00000048   120000EA           B        ??GetSessionCharacter_1
   \   0000004C   110000EA           B        ??GetSessionCharacter_1
   \   00000050   080000EA           B        ??GetSessionCharacter_6
   \   00000054   010000EA           B        ??GetSessionCharacter_7
   \   00000058   0E0000EA           B        ??GetSessionCharacter_1
   \   0000005C   090000EA           B        ??GetSessionCharacter_8
   2914          	{
   2915          	case ROADRACE_TYPE:		return 'R';
   \                     ??GetSessionCharacter_7:
   \   00000060   5200A0E3           MOV      R0,#+82
   \   00000064   1EFF2FE1           BX       LR
   2916          	case DRIVE_TYPE:		return 'D';
   \                     ??GetSessionCharacter_3:
   \   00000068   4400A0E3           MOV      R0,#+68
   \   0000006C   1EFF2FE1           BX       LR
   2917          	case AUTOCROSS_TYPE:	return 'A';
   \                     ??GetSessionCharacter_2:
   \   00000070   4100A0E3           MOV      R0,#+65
   \   00000074   1EFF2FE1           BX       LR
   2918          	case QUARTERMILE_TYPE:	return 'Q';
   \                     ??GetSessionCharacter_6:
   \   00000078   5100A0E3           MOV      R0,#+81
   \   0000007C   1EFF2FE1           BX       LR
   2919          	case EIGHTHMILE_TYPE:	return 'E';
   \                     ??GetSessionCharacter_4:
   \   00000080   4500A0E3           MOV      R0,#+69
   \   00000084   1EFF2FE1           BX       LR
   2920          	case THOUSANDFOOT_TYPE:	return 'T';
   \                     ??GetSessionCharacter_8:
   \   00000088   5400A0E3           MOV      R0,#+84
   \   0000008C   1EFF2FE1           BX       LR
   2921          	case HILLCLIMB_TYPE:	return 'H';
   \                     ??GetSessionCharacter_5:
   \   00000090   4800A0E3           MOV      R0,#+72
   \   00000094   1EFF2FE1           BX       LR
   2922          	default:
   2923          	case NOT_VALID:			return 0;
   \                     ??GetSessionCharacter_1:
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   1EFF2FE1           BX       LR               ;; return
   2924          	}
   2925          }
   2926          

   \                                 In section .text, align 4, keep-with-next
   2927          void GetSessionData(void)
   2928          {
   \                     GetSessionData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   2929          	char count = 0;
   \   00000008   0040A0E3           MOV      R4,#+0
   2930          #ifdef _WINDOWS
   2931          	DIR *dir;
   2932          	struct dirent *ent;
   2933          
   2934          	dir = opendir(MY_SESSIONS_PATH);
   2935          	if (dir != NULL)
   2936          	{
   2937          		// find the selected session file
   2938          		while ((ent = readdir(dir)) != NULL)
   2939          		{
   2940          			if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, ent->d_name))
   2941          				if (count++ == selectedSessionUnsorted)
   2942          				{
   2943          					parseSessionName(ent->d_name, &NameStruct);		// Get full session info
   2944          					ReadAllSessionData(ent->d_name);
   2945          					closedir(dir);
   2946          					return;
   2947          				}
   2948          		}
   2949          		closedir(dir);
   2950          	}
   2951          #else
   2952          	FS_FIND_DATA fd;
   2953          	char acFilename[NORMAL_FILENAME_SIZE];
   2954          
   2955          	if (FS_FindFirstFile(&fd, MY_SESSIONS_PATH, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \   0000000C   5030A0E3           MOV      R3,#+80
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   ........           LDR      R1,??DataTable164
   \   00000018   50008DE2           ADD      R0,SP,#+80
   \   0000001C   ........           BL       FS_FindFirstFile
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1600001A           BNE      ??GetSessionData_0
   2956          		do {
   2957          			if (ValidRaceSession((enum SESSION_TYPE)sysData.selectedSessionType, acFilename))
   \                     ??GetSessionData_1:
   \   00000028   ........           LDR      R0,??DataTable158_1
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000034   ........           BL       ValidRaceSession
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0C00000A           BEQ      ??GetSessionData_2
   2958          				if (count++ == selectedSessionUnsorted)
   \   00000040   ........           LDR      R1,??DataTable159
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   014080E2           ADD      R4,R0,#+1
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   000CA0E1           MOV      R0,R0, LSL #+24
   \   00000054   200C51E1           CMP      R1,R0, LSR #+24
   \   00000058   0500001A           BNE      ??GetSessionData_2
   2959          				{
   2960          					parseSessionName(&fd, &NameStruct);
   \   0000005C   ........           LDR      R1,??DataTable166
   \   00000060   50008DE2           ADD      R0,SP,#+80
   \   00000064   ........           BL       parseSessionName
   2961          					ReadAllSessionData(acFilename);
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           BL       ReadAllSessionData
   2962          					FS_FindClose(&fd);
   \   00000070   030000EA           B        ??GetSessionData_0
   2963          					return;
   2964          				}
   2965          		} while (FS_FindNextFile (&fd));
   \                     ??GetSessionData_2:
   \   00000074   50008DE2           ADD      R0,SP,#+80
   \   00000078   ........           BL       FS_FindNextFile
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   E8FFFF1A           BNE      ??GetSessionData_1
   2966          	}
   2967          	FS_FindClose(&fd);
   \                     ??GetSessionData_0:
   \   00000084   50008DE2           ADD      R0,SP,#+80
   \   00000088   ........           BL       FS_FindClose
   2968          #endif
   2969          }
   \   0000008C   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   00000090   1080BDE8           POP      {R4,PC}          ;; return
   2970          
   2971          //
   2972          // Populate SeesionNameData structure with the data for all sessions.
   2973          // Note that if parent == NULL do not bother to tell the user that there are too many
   2974          // sessions
   2975          //

   \                                 In section .text, align 4, keep-with-next
   2976          void GetSessionNameData(WM_HWIN hParent, char primary, enum SESSION_TYPE type)
   2977          {
   \                     GetSessionNameData:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   2978          #ifdef _WINDOWS
   2979          	char count = 0;
   2980          	DIR *dir;
   2981          	struct dirent *ent;
   2982          #else
   2983          	char count = 0;
   2984          	FS_FIND_DATA fd;
   2985          	char acFilename[NORMAL_FILENAME_SIZE];
   2986          #endif
   2987          
   2988          	ClearSessionNameData();
   \   00000008   ........           LDR      R9,??DataTable165
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   9810A0E3           MOV      R1,#+152
   \   00000014   94D04DE2           SUB      SP,SP,#+148
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   E81D81E3           ORR      R1,R1,#0x3A00
   \   00000028   0900A0E1           MOV      R0,R9
   \   0000002C   ........           BL       __aeabi_memclr4
   2989          
   2990          #ifdef _WINDOWS
   2991          	dir = opendir(MY_SESSIONS_PATH);
   2992          	if (dir != NULL)
   2993          	{
   2994          		// find the selected session file
   2995          		while ((ent = readdir(dir)) != NULL)
   2996          		{
   2997          			if (ValidRaceSession(type, ent->d_name))
   2998          			{
   2999          				parseSessionName(ent->d_name, &SessionNameData[count++]);		// Get full session info
   3000          
   3001          				if (count >= MAX_SESSION_FILES)
   3002          				{
   3003          					closedir(dir);
   3004          					if (hParent)
   3005          					{
   3006          						// Display warning popup
   3007          						TooManySessionsPopup(hParent, primary);
   3008          					}
   3009          					return;
   3010          				}
   3011          			}
   3012          		}
   3013          		closedir(dir);
   3014          	}
   3015          #else
   3016          	if (FS_FindFirstFile(&fd, MY_SESSIONS_PATH, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \   00000030   5030A0E3           MOV      R3,#+80
   \   00000034   08208DE2           ADD      R2,SP,#+8
   \   00000038   ........           LDR      R1,??DataTable164
   \   0000003C   58008DE2           ADD      R0,SP,#+88
   \   00000040   ........           BL       FS_FindFirstFile
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   2C00001A           BNE      ??GetSessionNameData_0
   3017          		do {
   3018          			if (ValidRaceSession(type, acFilename))
   \                     ??GetSessionNameData_1:
   \   0000004C   08108DE2           ADD      R1,SP,#+8
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           BL       ValidRaceSession
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   2300000A           BEQ      ??GetSessionNameData_2
   3019          			{
   3020          				parseSessionName(&fd, &SessionNameData[count++]);
   \   00000060   4B20A0E3           MOV      R2,#+75
   \   00000064   929821E0           MLA      R1,R2,R8,R9
   \   00000068   58008DE2           ADD      R0,SP,#+88
   \   0000006C   ........           BL       parseSessionName
   \   00000070   018088E2           ADD      R8,R8,#+1
   3021          				
   3022          				if (count >= MAX_SESSION_FILES)
   \   00000074   FF8008E2           AND      R8,R8,#0xFF
   \   00000078   C80058E3           CMP      R8,#+200
   \   0000007C   1B00003A           BCC      ??GetSessionNameData_2
   3023          				{
   3024          					FS_FindClose(&fd);
   \   00000080   58008DE2           ADD      R0,SP,#+88
   \   00000084   ........           BL       FS_FindClose
   3025          					if (hParent)
   \   00000088   000054E3           CMP      R4,#+0
   \   0000008C   1D00000A           BEQ      ??GetSessionNameData_3
   3026          					{
   3027          						// Display warning popup
   3028          						TooManySessionsPopup(hParent, primary);
   \   00000090   ........           LDR      R7,??DataTable166_1
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   000087E5           STR      R0,[R7, #+0]
   \   0000009C   ........           BL       SetPopupDefaults
   \   000000A0   ........           LDR      R2,??DataTable158
   \   000000A4   000055E3           CMP      R5,#+0
   \   000000A8   0700000A           BEQ      ??GetSessionNameData_4
   \   000000AC   0A00A0E3           MOV      R0,#+10
   \   000000B0   04008DE5           STR      R0,[SP, #+4]
   \   000000B4   00008DE5           STR      R0,[SP, #+0]
   \   000000B8   0430A0E1           MOV      R3,R4
   \   000000BC   0510A0E3           MOV      R1,#+5
   \   000000C0   ............       ADRL     R0,TooManyTracksResourcesPrim
   \              ....        
   \   000000C8   050000EA           B        ??GetSessionNameData_5
   \                     ??GetSessionNameData_4:
   \   000000CC   04608DE5           STR      R6,[SP, #+4]
   \   000000D0   00608DE5           STR      R6,[SP, #+0]
   \   000000D4   0430A0E1           MOV      R3,R4
   \   000000D8   0510A0E3           MOV      R1,#+5
   \   000000DC   ............       ADRL     R0,TooManyTracksResourcesSub
   \              ....        
   \                     ??GetSessionNameData_5:
   \   000000E4   ........           BL       GUI_ExecDialogBox
   \   000000E8   006087E5           STR      R6,[R7, #+0]
   3029          					}
   3030          					return;
   3031          				}
   3032          			}
   3033          		} while (FS_FindNextFile (&fd));
   \   000000EC   050000EA           B        ??GetSessionNameData_3
   \                     ??GetSessionNameData_2:
   \   000000F0   58008DE2           ADD      R0,SP,#+88
   \   000000F4   ........           BL       FS_FindNextFile
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   D2FFFF1A           BNE      ??GetSessionNameData_1
   3034          	}
   3035          	FS_FindClose(&fd);
   \                     ??GetSessionNameData_0:
   \   00000100   58008DE2           ADD      R0,SP,#+88
   \   00000104   ........           BL       FS_FindClose
   3036          #endif
   3037          }
   \                     ??GetSessionNameData_3:
   \   00000108   94D08DE2           ADD      SP,SP,#+148      ;; stack cleaning
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
   3038          

   \                                 In section .text, align 4, keep-with-next
   3039          void ClearSessionNameData(void)
   3040          {
   3041          	memset(SessionNameData, 0, sizeof(SessionNameData));
   \                     ClearSessionNameData:
   \   00000000   9810A0E3           MOV      R1,#+152
   \   00000004   E81D81E3           ORR      R1,R1,#0x3A00
   \   00000008   ........           LDR      R0,??DataTable165
   \   0000000C   ........           B        __aeabi_memclr4  ;; tailcall
   3042          }
   3043          

   \                                 In section .text, align 4, keep-with-next
   3044          int FindNewestFile(enum SESSION_TYPE type)
   3045          {
   \                     FindNewestFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   8CD04DE2           SUB      SP,SP,#+140
   \   00000008   0040A0E1           MOV      R4,R0
   3046          	int index = -1;
   \   0000000C   0050E0E3           MVN      R5,#+0
   3047          	int tempIndex = 0;
   \   00000010   0060A0E3           MOV      R6,#+0
   3048          	
   3049          #ifdef _WINDOWS
   3050          	char fullFileName[MAX_FILENAME_SIZE];
   3051          	HANDLE hFile;
   3052          	DIR *dir;
   3053          	struct dirent *ent;
   3054          	FILETIME lastWriteTime;
   3055          	FILETIME date;
   3056          
   3057          	date.dwHighDateTime = 0;
   3058          	date.dwLowDateTime = 0;
   3059          	dir = opendir(MY_SESSIONS_PATH);
   3060          	if (dir != NULL)
   3061          	{
   3062          		// find the selected session file
   3063          		while ((ent = readdir(dir)) != NULL)
   3064          		{
   3065          			if (ValidRaceSession(type, ent->d_name))
   3066          			{
   3067          				strcpy(fullFileName, MY_SESSIONS_PATH);
   3068          				strcat(fullFileName, "\\");
   3069          				strcat(fullFileName, ent->d_name);
   3070          
   3071          				if ((hFile = CreateFile(fullFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)) != INVALID_HANDLE_VALUE)
   3072          				{
   3073          					if (GetFileTime(hFile, NULL, NULL, &lastWriteTime))
   3074          					{
   3075          						if (CompareFileTime(&date, &lastWriteTime) == -1)
   3076          						{
   3077          							date = lastWriteTime;
   3078          							index = tempIndex;
   3079          						}
   3080          					}
   3081          					CloseHandle(hFile);
   3082          				}
   3083          
   3084          				tempIndex++;
   3085          			}
   3086          		}
   3087          		closedir(dir);
   3088          	}
   3089          #else
   3090          	U32 date = 0;
   \   00000014   0070A0E3           MOV      R7,#+0
   3091          	FS_FIND_DATA fd;
   3092          	char acFilename[NORMAL_FILENAME_SIZE];
   3093          
   3094          	if (FS_FindFirstFile(&fd, MY_SESSIONS_PATH, acFilename, NORMAL_FILENAME_SIZE) == 0) {
   \   00000018   5030A0E3           MOV      R3,#+80
   \   0000001C   0D20A0E1           MOV      R2,SP
   \   00000020   ........           LDR      R1,??DataTable164
   \   00000024   50008DE2           ADD      R0,SP,#+80
   \   00000028   ........           BL       FS_FindFirstFile
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0D00001A           BNE      ??FindNewestFile_0
   3095          		do {
   3096          			if (ValidRaceSession(type, acFilename))
   \                     ??FindNewestFile_1:
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       ValidRaceSession
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0400000A           BEQ      ??FindNewestFile_2
   3097          			{
   3098          				if (date < fd.LastWriteTime)
   \   00000048   5C009DE5           LDR      R0,[SP, #+92]
   \   0000004C   000057E1           CMP      R7,R0
   3099          				{
   3100          					date = fd.LastWriteTime;
   3101          					index = tempIndex;
   \   00000050   0650A031           MOVCC    R5,R6
   \   00000054   0070A031           MOVCC    R7,R0
   3102          				}
   3103          				tempIndex++;
   \   00000058   016086E2           ADD      R6,R6,#+1
   3104          			}
   3105          		} while (FS_FindNextFile (&fd));
   \                     ??FindNewestFile_2:
   \   0000005C   50008DE2           ADD      R0,SP,#+80
   \   00000060   ........           BL       FS_FindNextFile
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F1FFFF1A           BNE      ??FindNewestFile_1
   3106          	}
   3107          	FS_FindClose(&fd);
   \                     ??FindNewestFile_0:
   \   0000006C   50008DE2           ADD      R0,SP,#+80
   \   00000070   ........           BL       FS_FindClose
   3108          #endif
   3109          	
   3110          	return index;
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   8CD08DE2           ADD      SP,SP,#+140
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return
   3111          }
   3112          

   \                                 In section .text, align 4, keep-with-next
   3113          static const GUI_WIDGET_CREATE_INFO DeleteDriverResources[] = {
   \                     DeleteDriverResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "About to Delete Driver!">`
   \              ............
   \   00000020   000000001900       DC16 0, 0, 25, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Are you sure?">`
   \              ....        
   \   00000038   000000004100       DC16 0, 0, 65, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "YES">`
   \              ....        
   \   00000050   01003C007300       DC16 1, 60, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "CANCEL">`
   \              ....        
   \   00000068   0200C8007300       DC16 2, 200, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3114          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 50, 20, 360, 220, 0, 0 },
   3115          	{ TEXT_CreateIndirect, "About to Delete Driver!", 0, 0, 25, 360, 30, TEXT_CF_HCENTER },
   3116          	{ TEXT_CreateIndirect, "Are you sure?", 0, 0, 65, 360, 30, TEXT_CF_HCENTER },
   3117          	{ BUTTON_CreateIndirect, "YES", GUI_ID_OK, 60, 115, 100, 60 },
   3118          	{ BUTTON_CreateIndirect, "CANCEL", GUI_ID_CANCEL, 200, 115, 100, 60 },
   3119          };
   3120          

   \                                 In section .text, align 4, keep-with-next
   3121          static const GUI_WIDGET_CREATE_INFO DeleteVehicleResources[] = {
   \                     DeleteVehicleResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "About to Delete Vehicle!">`
   \              ............
   \   00000020   000000001900       DC16 0, 0, 25, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Are you sure?">`
   \              ....        
   \   00000038   000000004100       DC16 0, 0, 65, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "YES">`
   \              ....        
   \   00000050   01003C007300       DC16 1, 60, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "CANCEL">`
   \              ....        
   \   00000068   0200C8007300       DC16 2, 200, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3122          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 50, 20, 360, 220, 0, 0 },
   3123          	{ TEXT_CreateIndirect, "About to Delete Vehicle!", 0, 0, 25, 360, 30, TEXT_CF_HCENTER },
   3124          	{ TEXT_CreateIndirect, "Are you sure?", 0, 0, 65, 360, 30, TEXT_CF_HCENTER },
   3125          	{ BUTTON_CreateIndirect, "YES", GUI_ID_OK, 60, 115, 100, 60 },
   3126          	{ BUTTON_CreateIndirect, "CANCEL", GUI_ID_CANCEL, 200, 115, 100, 60 },
   3127          };
   3128          

   \                                 In section .text, align 4, keep-with-next
   3129          static const GUI_WIDGET_CREATE_INFO DeleteTrackResources[] = {
   \                     DeleteTrackResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "About to Delete Track!">`
   \              ............
   \   00000020   000000001900       DC16 0, 0, 25, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Are you sure?">`
   \              ....        
   \   00000038   000000004100       DC16 0, 0, 65, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "YES">`
   \              ....        
   \   00000050   01003C007300       DC16 1, 60, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "CANCEL">`
   \              ....        
   \   00000068   0200C8007300       DC16 2, 200, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3130          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 50, 20, 360, 220, 0, 0 },
   3131          	{ TEXT_CreateIndirect, "About to Delete Track!", 0, 0, 25, 360, 30, TEXT_CF_HCENTER },
   3132          	{ TEXT_CreateIndirect, "Are you sure?", 0, 0, 65, 360, 30, TEXT_CF_HCENTER },
   3133          	{ BUTTON_CreateIndirect, "YES", GUI_ID_OK, 60, 115, 100, 60 },
   3134          	{ BUTTON_CreateIndirect, "CANCEL", GUI_ID_CANCEL, 200, 115, 100, 60 },
   3135          };
   3136          

   \                                 In section .text, align 4, keep-with-next
   3137          static const GUI_WIDGET_CREATE_INFO FileAlreadyExistsResources[] = {
   \                     FileAlreadyExistsResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "A file of this name a...">`
   \              ............
   \   00000020   000000001900       DC16 0, 0, 25, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Replace?">`
   \              ....        
   \   00000038   000000004100       DC16 0, 0, 65, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "YES">`
   \              ....        
   \   00000050   03003C007300       DC16 3, 60, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "NO">`
   \              ....        
   \   00000068   0400C8007300       DC16 4, 200, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3138          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 50, 20, 360, 220, 0, 0 },
   3139          	{ TEXT_CreateIndirect, "A file of this name already exists!", 0, 0, 25, 360, 30, TEXT_CF_HCENTER },
   3140          	{ TEXT_CreateIndirect, "Replace?", 0, 0, 65, 360, 30, TEXT_CF_HCENTER },
   3141          	{ BUTTON_CreateIndirect, "YES", GUI_ID_YES, 60, 115, 100, 60 },
   3142          	{ BUTTON_CreateIndirect, "NO", GUI_ID_NO, 200, 115, 100, 60 },
   3143          };
   3144          

   \                                 In section .text, align 4, keep-with-next
   3145          static const GUI_WIDGET_CREATE_INFO TrackAlreadyExistsResources[] = {
   \                     TrackAlreadyExistsResources:
   \   00000000                      ; Initializer data, 144 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "ERROR">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "This is the name of a...">`
   \              ............
   \   00000020   000000000F00       DC16 0, 0, 15, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "track or this name is...">`
   \              ....        
   \   00000038   000000002D00       DC16 0, 0, 45, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Please change the name.">`
   \              ....        
   \   00000050   000000004B00       DC16 0, 0, 75, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000068   01003C007300       DC16 1, 60, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000078   ............       DC32 BUTTON_CreateIndirect, `?<Constant "CANCEL">`
   \              ....        
   \   00000080   0200C8007300       DC16 2, 200, 115, 100, 60
   \              64003C00    
   \   0000008A   000000000000       DC8 0, 0, 0, 0, 0, 0
   3146          	{ FRAMEWIN_CreateIndirect, "ERROR", 0, 50, 20, 360, 220, 0, 0 },
   3147          	{ TEXT_CreateIndirect, "This is the name of a predefined", 0, 0, 15, 360, 30, TEXT_CF_HCENTER },
   3148          	{ TEXT_CreateIndirect, "track or this name is already in use!", 0, 0, 45, 360, 30, TEXT_CF_HCENTER },
   3149          	{ TEXT_CreateIndirect, "Please change the name.", 0, 0, 75, 360, 30, TEXT_CF_HCENTER },
   3150          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 60, 115, 100, 60 },
   3151          	{ BUTTON_CreateIndirect, "CANCEL", GUI_ID_CANCEL, 200, 115, 100, 60 },
   3152          };
   3153          

   \                                 In section .text, align 4, keep-with-next
   3154          static const GUI_WIDGET_CREATE_INFO CantDeleteResources[] = {
   \                     CantDeleteResources:
   \   00000000                      ; Initializer data, 72 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "ERROR">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "Cannot delete this tr...">`
   \              ............
   \   00000020   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000038   010082007300       DC16 1, 130, 115, 100, 60
   \              64003C00    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0
   3155          	{ FRAMEWIN_CreateIndirect, "ERROR", 0, 50, 20, 360, 220, 0, 0 },
   3156          	{ TEXT_CreateIndirect, "Cannot delete this track!", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
   3157          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 130, 115, 100, 60 },
   3158          };
   3159          
   3160          //
   3161          // Display a modal dialog box to see if the user wants to stop recording to exit this screen
   3162          //
   3163          // Returns	YES - proceed to exit record mode
   3164          //				NO - abort and stay
   3165          //

   \                                 In section .text, align 4, keep-with-next
   3166          int RaceSetupPopup(int screen)
   3167          {
   \                     RaceSetupPopup:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
   3168          	int retval;
   3169          	WM_HWIN owner;
   3170          
   3171          	retval = false;
   3172          	modalWindowUp = true;
   \   00000008   ........           LDR      R6,??DataTable166_1
   \   0000000C   0100A0E3           MOV      R0,#+1
   3173          
   3174          	HideSprites();
   \   00000010   ........           LDR      R4,??DataTable156_4
   \   00000014   000086E5           STR      R0,[R6, #+0]
   \   00000018   A80394E5           LDR      R0,[R4, #+936]
   \   0000001C   08D04DE2           SUB      SP,SP,#+8
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0700000A           BEQ      ??RaceSetupPopup_1
   \   0000002C   B01394E5           LDR      R1,[R4, #+944]
   \   00000030   012081E2           ADD      R2,R1,#+1
   \   00000034   B02384E5           STR      R2,[R4, #+944]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0200001A           BNE      ??RaceSetupPopup_1
   \   00000040   ........           BL       GUI_SPRITE_Hide
   \   00000044   AC0394E5           LDR      R0,[R4, #+940]
   \   00000048   ........           BL       GUI_SPRITE_Hide
   3175          
   3176          	owner = WM_GetDesktopWindow();		// Get the desktop window - that is the owner
   \                     ??RaceSetupPopup_1:
   \   0000004C   ........           BL       WM_GetDesktopWindow
   3177          
   3178          	switch (screen)
   \   00000050   0D7047E2           SUB      R7,R7,#+13
   \   00000054   807E47E2           SUB      R7,R7,#+2048
   \   00000058   0080A0E1           MOV      R8,R0
   \   0000005C   070057E3           CMP      R7,#+7
   \   00000060   07F18F90           ADDLS    PC,PC,R7, LSL #+2
   \                     ??RaceSetupPopup_0:
   \   00000064   4D00008A           BHI      ??RaceSetupPopup_2
   \   00000068   060000EA           B        ??RaceSetupPopup_3
   \   0000006C   100000EA           B        ??RaceSetupPopup_4
   \   00000070   1A0000EA           B        ??RaceSetupPopup_5
   \   00000074   240000EA           B        ??RaceSetupPopup_6
   \   00000078   480000EA           B        ??RaceSetupPopup_2
   \   0000007C   470000EA           B        ??RaceSetupPopup_2
   \   00000080   2C0000EA           B        ??RaceSetupPopup_7
   \   00000084   380000EA           B        ??RaceSetupPopup_8
   3179          	{
   3180          		case DELETE_DRIVER_BUTTON:
   3181          			SetPopupDefaults(WARNING_POPUP);
   \                     ??RaceSetupPopup_3:
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   ........           BL       SetPopupDefaults
   3182          			if (GUI_ExecDialogBox(DeleteDriverResources, GUI_COUNTOF(DeleteDriverResources), &popupCallback, owner, 10, 10) == GUI_ID_OK)
   \   00000090   0A00A0E3           MOV      R0,#+10
   \   00000094   04008DE5           STR      R0,[SP, #+4]
   \   00000098   00008DE5           STR      R0,[SP, #+0]
   \   0000009C   0830A0E1           MOV      R3,R8
   \   000000A0   ........           LDR      R2,??DataTable158
   \   000000A4   0510A0E3           MOV      R1,#+5
   \   000000A8   ............       ADRL     R0,DeleteDriverResources
   \              ....        
   \   000000B0   370000EA           B        ??RaceSetupPopup_9
   3183          				retval = true;
   3184          			else retval = false;
   3185          			break;
   3186          
   3187          		case DELETE_VEHICLE_BUTTON:
   3188          			SetPopupDefaults(WARNING_POPUP);
   \                     ??RaceSetupPopup_4:
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   ........           BL       SetPopupDefaults
   3189          			if (GUI_ExecDialogBox(DeleteVehicleResources, GUI_COUNTOF(DeleteVehicleResources), &popupCallback, owner, 10, 10) == GUI_ID_OK)
   \   000000BC   0A00A0E3           MOV      R0,#+10
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
   \   000000C4   00008DE5           STR      R0,[SP, #+0]
   \   000000C8   0830A0E1           MOV      R3,R8
   \   000000CC   ........           LDR      R2,??DataTable158
   \   000000D0   0510A0E3           MOV      R1,#+5
   \   000000D4   ............       ADRL     R0,DeleteVehicleResources
   \              ....        
   \   000000DC   2C0000EA           B        ??RaceSetupPopup_9
   3190          				retval = true;
   3191          			else retval = false;
   3192          			break;
   3193          
   3194          		case DELETE_TRACK_BUTTON:
   3195          			SetPopupDefaults(WARNING_POPUP);
   \                     ??RaceSetupPopup_5:
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   ........           BL       SetPopupDefaults
   3196          			if (GUI_ExecDialogBox(DeleteTrackResources, GUI_COUNTOF(DeleteTrackResources), &popupCallback, owner, 10, 10) == GUI_ID_OK)
   \   000000E8   0A00A0E3           MOV      R0,#+10
   \   000000EC   04008DE5           STR      R0,[SP, #+4]
   \   000000F0   00008DE5           STR      R0,[SP, #+0]
   \   000000F4   0830A0E1           MOV      R3,R8
   \   000000F8   ........           LDR      R2,??DataTable158
   \   000000FC   0510A0E3           MOV      R1,#+5
   \   00000100   ............       ADRL     R0,DeleteTrackResources
   \              ....        
   \   00000108   210000EA           B        ??RaceSetupPopup_9
   3197          				retval = true;
   3198          			else retval = false;
   3199          			break;
   3200          
   3201          		case CANT_DELETE_TRACK:
   3202          			SetPopupDefaults(ERROR_POPUP);
   \                     ??RaceSetupPopup_6:
   \   0000010C   0200A0E3           MOV      R0,#+2
   \   00000110   ........           BL       SetPopupDefaults
   3203          			if (GUI_ExecDialogBox(CantDeleteResources, GUI_COUNTOF(CantDeleteResources), &popupCallback, owner, 10, 10) == GUI_ID_OK)
   \   00000114   0A00A0E3           MOV      R0,#+10
   \   00000118   04008DE5           STR      R0,[SP, #+4]
   \   0000011C   00008DE5           STR      R0,[SP, #+0]
   \   00000120   0830A0E1           MOV      R3,R8
   \   00000124   ........           LDR      R2,??DataTable158
   \   00000128   0310A0E3           MOV      R1,#+3
   \   0000012C   ............       ADRL     R0,CantDeleteResources
   \              ....        
   \   00000134   160000EA           B        ??RaceSetupPopup_9
   3204          				retval = true;
   3205          			else retval = false;
   3206          			break;
   3207          
   3208          		case FILE_ALREADY_EXISTS:
   3209          			SetPopupDefaults(WARNING_POPUP);
   \                     ??RaceSetupPopup_7:
   \   00000138   0100A0E3           MOV      R0,#+1
   \   0000013C   ........           BL       SetPopupDefaults
   3210          			if (GUI_ExecDialogBox(FileAlreadyExistsResources, GUI_COUNTOF(FileAlreadyExistsResources), &popupCallback, owner, 10, 10) == GUI_ID_YES)
   \   00000140   0A00A0E3           MOV      R0,#+10
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   00008DE5           STR      R0,[SP, #+0]
   \   0000014C   0830A0E1           MOV      R3,R8
   \   00000150   ........           LDR      R2,??DataTable158
   \   00000154   0510A0E3           MOV      R1,#+5
   \   00000158   ............       ADRL     R0,FileAlreadyExistsResources
   \              ....        
   \   00000160   ........           BL       GUI_ExecDialogBox
   \   00000164   030050E3           CMP      R0,#+3
   \   00000168   0B0000EA           B        ??RaceSetupPopup_10
   3211          				retval = true;
   3212          			else retval = false;
   3213          			break;
   3214          
   3215          		case TRACK_ALREADY_EXISTS:
   3216          			SetPopupDefaults(ERROR_POPUP);
   \                     ??RaceSetupPopup_8:
   \   0000016C   0200A0E3           MOV      R0,#+2
   \   00000170   ........           BL       SetPopupDefaults
   3217          			if (GUI_ExecDialogBox(TrackAlreadyExistsResources, GUI_COUNTOF(TrackAlreadyExistsResources), &popupCallback, owner, 10, 10) == GUI_ID_OK)
   \   00000174   0A00A0E3           MOV      R0,#+10
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   00008DE5           STR      R0,[SP, #+0]
   \   00000180   0830A0E1           MOV      R3,R8
   \   00000184   ........           LDR      R2,??DataTable158
   \   00000188   0610A0E3           MOV      R1,#+6
   \   0000018C   ............       ADRL     R0,TrackAlreadyExistsResources
   \              ....        
   \                     ??RaceSetupPopup_9:
   \   00000194   ........           BL       GUI_ExecDialogBox
   \   00000198   010050E3           CMP      R0,#+1
   3218          				retval = true;
   \                     ??RaceSetupPopup_10:
   \   0000019C   0150A003           MOVEQ    R5,#+1
   3219          			else retval = false;
   3220          			break;
   3221          	}
   3222          	
   3223          	modalWindowUp = false;
   3224          
   3225          	UnhideSprites();
   \                     ??RaceSetupPopup_2:
   \   000001A0   A80394E5           LDR      R0,[R4, #+936]
   \   000001A4   0070A0E3           MOV      R7,#+0
   \   000001A8   007086E5           STR      R7,[R6, #+0]
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   0800000A           BEQ      ??RaceSetupPopup_11
   \   000001B4   B01394E5           LDR      R1,[R4, #+944]
   \   000001B8   011041E2           SUB      R1,R1,#+1
   \   000001BC   B01384E5           STR      R1,[R4, #+944]
   \   000001C0   010051E3           CMP      R1,#+1
   \   000001C4   030000AA           BGE      ??RaceSetupPopup_11
   \   000001C8   ........           BL       GUI_SPRITE_Show
   \   000001CC   AC0394E5           LDR      R0,[R4, #+940]
   \   000001D0   ........           BL       GUI_SPRITE_Show
   \   000001D4   B07384E5           STR      R7,[R4, #+944]
   3226          
   3227          	return retval;
   \                     ??RaceSetupPopup_11:
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   08D08DE2           ADD      SP,SP,#+8
   \   000001E0   F081BDE8           POP      {R4-R8,PC}       ;; return
   3228          }
   3229          

   \                                 In section .text, align 4, keep-with-next
   3230          static const GUI_WIDGET_CREATE_INFO TooManyTracksResourcesPrim[] = {
   \                     TooManyTracksResourcesPrim:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "There are too many se...">`
   \              ............
   \   00000020   000000000F00       DC16 0, 0, 15, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Some sessions might n...">`
   \              ....        
   \   00000038   000000002D00       DC16 0, 0, 45, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Delete some sessions ...">`
   \              ....        
   \   00000050   000000004B00       DC16 0, 0, 75, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000068   010082007300       DC16 1, 130, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3231          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 50, 20, 360, 220, 0, 0 },
   3232          	{ TEXT_CreateIndirect, "There are too many session files!", 0, 0, 15, 360, 30, TEXT_CF_HCENTER },
   3233          	{ TEXT_CreateIndirect, "Some sessions might not be listed", 0, 0, 45, 360, 30, TEXT_CF_HCENTER },
   3234          	{ TEXT_CreateIndirect, "Delete some sessions to make room", 0, 0, 75, 360, 30, TEXT_CF_HCENTER },
   3235          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 130, 115, 100, 60 },
   3236          };
   3237          

   \                                 In section .text, align 4, keep-with-next
   3238          static const GUI_WIDGET_CREATE_INFO TooManyTracksResourcesSub[] = {
   \                     TooManyTracksResourcesSub:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "WARNING">`
   \              ....        
   \   00000008   000000000000       DC16 0, 0, 0, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "There are too many se...">`
   \              ............
   \   00000020   000000000F00       DC16 0, 0, 15, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Some sessions might n...">`
   \              ....        
   \   00000038   000000002D00       DC16 0, 0, 45, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Delete some sessions ...">`
   \              ....        
   \   00000050   000000004B00       DC16 0, 0, 75, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000068   010082007300       DC16 1, 130, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   3239          	{ FRAMEWIN_CreateIndirect, "WARNING", 0, 0, 0, 360, 220, 0, 0 },
   3240          	{ TEXT_CreateIndirect, "There are too many session files!", 0, 0, 15, 360, 30, TEXT_CF_HCENTER },
   3241          	{ TEXT_CreateIndirect, "Some sessions might not be listed", 0, 0, 45, 360, 30, TEXT_CF_HCENTER },
   3242          	{ TEXT_CreateIndirect, "Delete some sessions to make room", 0, 0, 75, 360, 30, TEXT_CF_HCENTER },
   3243          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 130, 115, 100, 60 },
   3244          };
   3245          

   \                                 In section .text, align 4, keep-with-next
   3246          void TooManySessionsPopup(WM_HWIN hParent, char primary)
   3247          {
   \                     TooManySessionsPopup:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   3248          	modalWindowUp = true;
   \   00000008   ........           LDR      R4,??DataTable166_1
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   000084E5           STR      R0,[R4, #+0]
   3249          
   3250          	SetPopupDefaults(WARNING_POPUP);
   \   0000001C   ........           BL       SetPopupDefaults
   3251          	if (primary)
   \   00000020   ........           LDR      R2,??DataTable158
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   0700000A           BEQ      ??TooManySessionsPopup_0
   3252          		GUI_ExecDialogBox(TooManyTracksResourcesPrim, GUI_COUNTOF(TooManyTracksResourcesPrim), &popupCallback, hParent, 10, 10);
   \   0000002C   0A00A0E3           MOV      R0,#+10
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   00008DE5           STR      R0,[SP, #+0]
   \   00000038   0530A0E1           MOV      R3,R5
   \   0000003C   0510A0E3           MOV      R1,#+5
   \   00000040   ............       ADRL     R0,TooManyTracksResourcesPrim
   \              ....        
   \   00000048   060000EA           B        ??TooManySessionsPopup_1
   3253          	else GUI_ExecDialogBox(TooManyTracksResourcesSub, GUI_COUNTOF(TooManyTracksResourcesSub), &popupCallback, hParent, 0, 0);
   \                     ??TooManySessionsPopup_0:
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   00008DE5           STR      R0,[SP, #+0]
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   0510A0E3           MOV      R1,#+5
   \   00000060   ............       ADRL     R0,TooManyTracksResourcesSub
   \              ....        
   \                     ??TooManySessionsPopup_1:
   \   00000068   ........           BL       GUI_ExecDialogBox
   3254          
   3255          	modalWindowUp = false;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   000084E5           STR      R0,[R4, #+0]
   3256          }
   \   00000074   08D08DE2           ADD      SP,SP,#+8
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   3257          

   \                                 In section .text, align 4, keep-with-next
   3258          void RSDeleteDriver(void)
   3259          {
   \                     RSDeleteDriver:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   3260          	int Sel;
   3261          
   3262          	editType = DRIVER;
   \   00000004   ........           LDR      R4,??DataTable167_1
   \   00000008   0000A0E3           MOV      R0,#+0
   3263          
   3264          	RSDeleteFile(DRIVER_DATA, sysData.driver);
   \   0000000C   ........           LDR      R5,??DataTable158_1
   \   00000010   B603C4E5           STRB     R0,[R4, #+950]
   \   00000014   7E1085E2           ADD      R1,R5,#+126
   \   00000018   0300A0E3           MOV      R0,#+3
   \   0000001C   ........           BL       RSDeleteFile
   3265          
   3266          	Sel = LISTVIEW_GetSelUnsorted(hDriverList);		// Get current selection
   \   00000020   740394E5           LDR      R0,[R4, #+884]
   \   00000024   ........           BL       LISTVIEW_GetSelUnsorted
   3267          	if (Sel == 0)
   \   00000028   000050E3           CMP      R0,#+0
   3268          		Sel = 1;
   \   0000002C   0100A003           MOVEQ    R0,#+1
   3269          	else Sel--;
   \   00000030   01004012           SUBNE    R0,R0,#+1
   3270          	strcpy(newName, pDrivers[Sel]);					// Set new driver name in newName structure for reloading
   \   00000034   006184E0           ADD      R6,R4,R0, LSL #+2
   \   00000038   441096E5           LDR      R1,[R6, #+68]
   \   0000003C   EE0F84E2           ADD      R0,R4,#+952
   \   00000040   ........           BL       strcpy
   3271          	strcpy(sysData.driver, pDrivers[Sel]);
   \   00000044   441096E5           LDR      R1,[R6, #+68]
   \   00000048   7E0085E2           ADD      R0,R5,#+126
   \   0000004C   ........           BL       strcpy
   3272          	ReloadData(DRIVER_DATA);
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   ........           BL       ReloadData
   3273          	strcpy(newName, sysData.driver);				// If we just deleted the last driver then we reset to the default list
   \   00000058   7E1085E2           ADD      R1,R5,#+126
   \   0000005C   EE0F84E2           ADD      R0,R4,#+952
   \   00000060   ........           BL       strcpy
   3274          													// update the newName field before calling UpdateList
   3275          	UpdateList();
   \   00000064   ........           BL       UpdateList
   3276          	if (numDrivers <= 1)
   \   00000068   8C0394E5           LDR      R0,[R4, #+908]
   \   0000006C   020050E3           CMP      R0,#+2
   \   00000070   080000AA           BGE      ??RSDeleteDriver_0
   3277          	{
   3278          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_GRAY);
   \   00000074   ........           LDR      R5,??DataTable167_2  ;; 0x808080
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0520A0E1           MOV      R2,R5
   \   00000080   A40394E5           LDR      R0,[R4, #+932]
   \   00000084   ........           BL       BUTTON_SetTextColor
   3279          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_GRAY);
   \   00000088   0520A0E1           MOV      R2,R5
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   A40394E5           LDR      R0,[R4, #+932]
   \   00000094   ........           BL       BUTTON_SetTextColor
   3280          	}
   3281          }
   \                     ??RSDeleteDriver_0:
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
   3282          

   \                                 In section .text, align 4, keep-with-next
   3283          void RSDeleteVehicle(void)
   3284          {
   \                     RSDeleteVehicle:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   3285          	int Sel;
   3286          
   3287          	editType = VEHICLE;
   \   00000004   ........           LDR      R4,??DataTable167_1
   \   00000008   0100A0E3           MOV      R0,#+1
   3288          
   3289          	RSDeleteFile(VEHICLE_DATA, sysData.vehicle);
   \   0000000C   ........           LDR      R5,??DataTable167_3
   \   00000010   B603C4E5           STRB     R0,[R4, #+950]
   \   00000014   8F1085E2           ADD      R1,R5,#+143
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   ........           BL       RSDeleteFile
   3290          
   3291          	Sel = LISTVIEW_GetSelUnsorted(hVehicleList);	// Get current selection
   \   00000020   780394E5           LDR      R0,[R4, #+888]
   \   00000024   ........           BL       LISTVIEW_GetSelUnsorted
   3292          	if (Sel == 0)
   \   00000028   000050E3           CMP      R0,#+0
   3293          		Sel = 1;
   \   0000002C   0100A003           MOVEQ    R0,#+1
   3294          	else Sel--;
   \   00000030   01004012           SUBNE    R0,R0,#+1
   3295          	strcpy(newName, pVehicles[Sel]);				// Set new Vehicle name in newName structure for reloading
   \   00000034   006184E0           ADD      R6,R4,R0, LSL #+2
   \   00000038   101196E5           LDR      R1,[R6, #+272]
   \   0000003C   EE0F84E2           ADD      R0,R4,#+952
   \   00000040   ........           BL       strcpy
   3296          	strcpy(sysData.vehicle, pVehicles[Sel]);
   \   00000044   101196E5           LDR      R1,[R6, #+272]
   \   00000048   8F0085E2           ADD      R0,R5,#+143
   \   0000004C   ........           BL       strcpy
   3297          	ReloadData(VEHICLE_DATA);
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   ........           BL       ReloadData
   3298          	strcpy(newName, sysData.vehicle);				// If we just deleted the last vehicle then we reset to the default list
   \   00000058   8F1085E2           ADD      R1,R5,#+143
   \   0000005C   EE0F84E2           ADD      R0,R4,#+952
   \   00000060   ........           BL       strcpy
   3299          													// update the newName field before calling UpdateList
   3300          	UpdateList();
   \   00000064   ........           BL       UpdateList
   3301          	if (numVehicles <= 1)
   \   00000068   900394E5           LDR      R0,[R4, #+912]
   \   0000006C   020050E3           CMP      R0,#+2
   \   00000070   080000AA           BGE      ??RSDeleteVehicle_0
   3302          	{
   3303          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_UNPRESSED, GUI_GRAY);
   \   00000074   ........           LDR      R5,??DataTable167_2  ;; 0x808080
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0520A0E1           MOV      R2,R5
   \   00000080   A40394E5           LDR      R0,[R4, #+932]
   \   00000084   ........           BL       BUTTON_SetTextColor
   3304          		BUTTON_SetTextColor(hRSDeleteButton, BUTTON_BI_PRESSED, GUI_GRAY);
   \   00000088   0520A0E1           MOV      R2,R5
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   A40394E5           LDR      R0,[R4, #+932]
   \   00000094   ........           BL       BUTTON_SetTextColor
   3305          	}
   3306          }
   \                     ??RSDeleteVehicle_0:
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
   3307          

   \                                 In section .text, align 4, keep-with-next
   3308          char RSDeleteTrack(void)
   3309          {
   \                     RSDeleteTrack:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   3310          	// Start KMC 2/11/12 - fix to allow delete track when showing whole world list (not the short list)
   3311          	int testNumTracks;
   3312          
   3313          	if (sysData.radius >= OLD_WORLD)
   \   00000004   ........           LDR      R5,??DataTable167_3
   \   00000008   2010A0E3           MOV      R1,#+32
   \   0000000C   B40095E5           LDR      R0,[R5, #+180]
   \   00000010   ........           LDR      R4,??DataTable167_1
   \   00000014   4E1C81E3           ORR      R1,R1,#0x4E00
   \   00000018   010050E1           CMP      R0,R1
   3314          		testNumTracks = numTracks;
   3315          	else testNumTracks = numberOfShortListTracksUser;
   3316          
   3317          	if (!trackTable[trackTableIndex].sdCardEntry)		// If this is not an SD card entry
   \   0000001C   A00394E5           LDR      R0,[R4, #+928]
   \   00000020   4860A0E3           MOV      R6,#+72
   \   00000024   ........           LDR      R7,??DataTable167_4
   \   00000028   967020E0           MLA      R0,R6,R0,R7
   \   0000002C   948394A5           LDRGE    R8,[R4, #+916]
   \   00000030   140090E5           LDR      R0,[R0, #+20]
   \   00000034   408094B5           LDRLT    R8,[R4, #+64]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100001A           BNE      ??RSDeleteTrack_0
   3318          		return false;									// cannot delete this track
   \                     ??RSDeleteTrack_1:
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   F087BDE8           POP      {R4-R10,PC}
   3319          	else if (testNumTracks != 0)
   \                     ??RSDeleteTrack_0:
   \   00000048   000058E3           CMP      R8,#+0
   \   0000004C   FBFFFF0A           BEQ      ??RSDeleteTrack_1
   3320          //	else if (numberOfShortListTracksUser != 0)
   3321          	// End KMC 2/11/12 fix
   3322          	{
   3323          		editType = TRACK;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   B603C4E5           STRB     R0,[R4, #+950]
   3324          
   3325          		DeleteTrack(sysData.track);
   \   00000058   A00085E2           ADD      R0,R5,#+160
   \   0000005C   ........           BL       DeleteTrack
   3326          		RSDeleteFile(TRACK_DATA, sysData.track);
   \   00000060   A01085E2           ADD      R1,R5,#+160
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   ........           BL       RSDeleteFile
   3327          		CreateTracks();									// Re-evaluate all tracks on both SD card and flash
   \   0000006C   ........           BL       CreateTracks
   3328          
   3329          		GetClosestTracks(sysData.radius);				// Update the closest tracks list
   \   00000070   B40095E5           LDR      R0,[R5, #+180]
   \   00000074   ........           BL       GetClosestTracks
   3330          		CreateTrackList();
   \   00000078   ........           BL       CreateTrackList
   3331          
   3332          		//if (pTracksShort)
   3333          		//	strcpy(selectedTrackName, pTracksShort[0]);	// Set selection to closest track
   3334          		//else strcpy(selectedTrackName, pTracksFull[trackTableIndex]);		// or the next track in the alpha list
   3335          		strcpy(selectedTrackName, pTracksShort[0]);	// Set selection to closest track
   \   0000007C   3C0094E5           LDR      R0,[R4, #+60]
   \   00000080   001090E5           LDR      R1,[R0, #+0]
   \   00000084   F30F84E2           ADD      R0,R4,#+972
   \   00000088   ........           BL       strcpy
   3336          
   3337          // KMC 9/10/12 - fix to prevent creating a new track called "None in range" when deleting the last available track and
   3338          // "None in range" gets shown in the track list.  When this happens numTracks is actually set to one for the spinner
   3339          // even though there are actually no tracks.  There might be other or perhaps better ways to solve this - this was the
   3340          // first attempt.
   3341          		if ((testNumTracks == 1) && (strcmp(selectedTrackName, NoneInRange) == 0))
   \   0000008C   010058E3           CMP      R8,#+1
   \   00000090   1000001A           BNE      ??RSDeleteTrack_2
   \   00000094   ............       ADRL     R1,NoneInRange
   \              ....        
   \   0000009C   F30F84E2           ADD      R0,R4,#+972
   \   000000A0   ........           BL       strcmp
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0A00001A           BNE      ??RSDeleteTrack_2
   3342          		{
   3343          			strcpy(sysData.track, "");
   \   000000AC   ........           ADR      R0,??DataTable163  ;; ""
   \   000000B0   0020D0E5           LDRB     R2,[R0, #0]
   \   000000B4   A01085E2           ADD      R1,R5,#+160
   \   000000B8   0020C1E5           STRB     R2,[R1, #+0]
   3344          			strcpy(selectedTrackName, "");
   \   000000BC   0020D0E5           LDRB     R2,[R0, #0]
   \   000000C0   F31F84E2           ADD      R1,R4,#+972
   \   000000C4   0020C1E5           STRB     R2,[R1, #+0]
   3345          			strcpy(newName, "");
   \   000000C8   0020D0E5           LDRB     R2,[R0, #0]
   \   000000CC   EE1F84E2           ADD      R1,R4,#+952
   \   000000D0   0020C1E5           STRB     R2,[R1, #+0]
   \   000000D4   1E0000EA           B        ??RSDeleteTrack_3
   3346          		}
   3347          		else
   3348          		{
   3349          			strcpy(sysData.track, selectedTrackName);
   \                     ??RSDeleteTrack_2:
   \   000000D8   F31F84E2           ADD      R1,R4,#+972
   \   000000DC   A00085E2           ADD      R0,R5,#+160
   \   000000E0   ........           BL       strcpy
   3350          			trackTableIndex = FindFile(sysData.track);		// Reset trackTableIndex
   \   000000E4   0090A0E3           MOV      R9,#+0
   \   000000E8   07A0A0E1           MOV      R10,R7
   \   000000EC   ........           LDR      R8,??DataTable167_5
   \   000000F0   010000EA           B        ??RSDeleteTrack_4
   \                     ??RSDeleteTrack_5:
   \   000000F4   019089E2           ADD      R9,R9,#+1
   \   000000F8   48A08AE2           ADD      R10,R10,#+72
   \                     ??RSDeleteTrack_4:
   \   000000FC   000098E5           LDR      R0,[R8, #+0]
   \   00000100   010040E2           SUB      R0,R0,#+1
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   0090E0A3           MVNGE    R9,#+0
   \   0000010C   050000AA           BGE      ??RSDeleteTrack_6
   \   00000110   1020A0E3           MOV      R2,#+16
   \   00000114   A01085E2           ADD      R1,R5,#+160
   \   00000118   0A00A0E1           MOV      R0,R10
   \   0000011C   ........           BL       strncmp
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   F2FFFF1A           BNE      ??RSDeleteTrack_5
   3351          			if (trackTable[trackTableIndex].sdCardEntry)	// If this is not an SD card entry
   \                     ??RSDeleteTrack_6:
   \   00000128   0900A0E1           MOV      R0,R9
   \   0000012C   967020E0           MLA      R0,R6,R0,R7
   \   00000130   A09384E5           STR      R9,[R4, #+928]
   \   00000134   140090E5           LDR      R0,[R0, #+20]
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0100000A           BEQ      ??RSDeleteTrack_7
   3352          				ReloadData(TRACK_DATA);						// Load new Track data
   \   00000140   0100A0E3           MOV      R0,#+1
   \   00000144   ........           BL       ReloadData
   3353          
   3354          
   3355          			strcpy(newName, sysData.track);					// If we just deleted the last vehicle then we reset to the default list
   \                     ??RSDeleteTrack_7:
   \   00000148   A01085E2           ADD      R1,R5,#+160
   \   0000014C   EE0F84E2           ADD      R0,R4,#+952
   \   00000150   ........           BL       strcpy
   3356          															// update the newName field before calling UpdateList
   3357          		}
   3358          		UpdateList();
   \                     ??RSDeleteTrack_3:
   \   00000154   ........           BL       UpdateList
   3359          		return true;
   \   00000158   0100A0E3           MOV      R0,#+1
   \   0000015C   F087BDE8           POP      {R4-R10,PC}      ;; return
   3360          	}
   3361          	else return false;
   3362          }
   3363          
   3364          

   \                                 In section .text, align 4, keep-with-next
   3365          void RSDeleteFile(enum DATATYPES fileType, char *pName)
   3366          {
   \                     RSDeleteFile:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   9CD04DE2           SUB      SP,SP,#+156
   3367          	char fullFileName[MAX_FILENAME_SIZE];
   3368          
   3369          	ConvertToFilename(fullFileName, pName, fileType);
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       ConvertToFilename
   3370          #ifdef _WINDOWS
   3371          	remove(fullFileName);
   3372          #else
   3373          	FS_Remove(fullFileName);
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   ........           BL       FS_Remove
   3374          #endif
   3375          }
   \   0000001C   9CD08DE2           ADD      SP,SP,#+156      ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   3376          
   3377          

   \                                 In section .text, align 4, keep-with-next
   3378          char *GetSessionText(enum SESSION_TEXT_TYPE type)
   3379          {
   3380          	switch (type)
   \                     GetSessionText:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0300000A           BEQ      ??GetSessionText_0
   \   00000008   020050E3           CMP      R0,#+2
   \   0000000C   0500000A           BEQ      ??GetSessionText_1
   \   00000010   0200003A           BCC      ??GetSessionText_2
   \   00000014   050000EA           B        ??GetSessionText_3
   3381          	{
   3382          	case ST_GENERAL:		return SessionData.UserFieldDescGeneral;
   \                     ??GetSessionText_0:
   \   00000018   ........           LDR      R0,??DataTable167_6
   \   0000001C   1EFF2FE1           BX       LR
   3383          	case ST_PERFORMANCE:	return SessionData.UserFieldDescPerformance;
   \                     ??GetSessionText_2:
   \   00000020   ........           LDR      R0,??DataTable167_7
   \   00000024   1EFF2FE1           BX       LR
   3384          	case ST_INPUTS:			return SessionData.UserFieldDescInputs;
   \                     ??GetSessionText_1:
   \   00000028   ........           LDR      R0,??DataTable167_8
   \   0000002C   1EFF2FE1           BX       LR
   3385          	default:
   3386          	case ST_CONFIG:			return SessionData.UserFieldDescConfig;
   \                     ??GetSessionText_3:
   \   00000030   ........           LDR      R0,??DataTable167_9
   \   00000034   1EFF2FE1           BX       LR               ;; return
   3387          	}
   3388          }
   3389          
   3390          
   3391          
   3392          
   3393          
   3394          
   3395          

   \                                 In section .text, align 4, keep-with-next
   3396          char *GetSelectedReviewModeText(void)
   3397          {
   3398          	switch (sysData.selectedSessionType)
   \                     GetSelectedReviewModeText:
   \   00000000   ........           LDR      R0,??DataTable167_3
   \   00000004   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000008   410040E2           SUB      R0,R0,#+65
   \   0000000C   130050E3           CMP      R0,#+19
   \   00000010   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GetSelectedReviewModeText_0:
   \   00000014   1300008A           BHI      ??GetSelectedReviewModeText_1
   \   00000018   180000EA           B        ??GetSelectedReviewModeText_2
   \   0000001C   110000EA           B        ??GetSelectedReviewModeText_1
   \   00000020   100000EA           B        ??GetSelectedReviewModeText_1
   \   00000024   120000EA           B        ??GetSelectedReviewModeText_3
   \   00000028   170000EA           B        ??GetSelectedReviewModeText_4
   \   0000002C   0D0000EA           B        ??GetSelectedReviewModeText_1
   \   00000030   0C0000EA           B        ??GetSelectedReviewModeText_1
   \   00000034   170000EA           B        ??GetSelectedReviewModeText_5
   \   00000038   0A0000EA           B        ??GetSelectedReviewModeText_1
   \   0000003C   090000EA           B        ??GetSelectedReviewModeText_1
   \   00000040   080000EA           B        ??GetSelectedReviewModeText_1
   \   00000044   070000EA           B        ??GetSelectedReviewModeText_1
   \   00000048   060000EA           B        ??GetSelectedReviewModeText_1
   \   0000004C   050000EA           B        ??GetSelectedReviewModeText_1
   \   00000050   040000EA           B        ??GetSelectedReviewModeText_1
   \   00000054   030000EA           B        ??GetSelectedReviewModeText_1
   \   00000058   0B0000EA           B        ??GetSelectedReviewModeText_4
   \   0000005C   010000EA           B        ??GetSelectedReviewModeText_1
   \   00000060   000000EA           B        ??GetSelectedReviewModeText_1
   \   00000064   080000EA           B        ??GetSelectedReviewModeText_4
   3399          	{
   3400          	default:
   3401          	case NOT_VALID:		
   3402          	case ROADRACE_TYPE:		return "Race";
   \                     ??GetSelectedReviewModeText_1:
   \   00000068   ............       ADRL     R0,`?<Constant "Race">`
   \              ....        
   \   00000070   1EFF2FE1           BX       LR
   3403          	case DRIVE_TYPE:		return "Drive";
   \                     ??GetSelectedReviewModeText_3:
   \   00000074   ............       ADRL     R0,`?<Constant "Drive">`
   \              ....        
   \   0000007C   1EFF2FE1           BX       LR
   3404          	case AUTOCROSS_TYPE:	return "AutoX";
   \                     ??GetSelectedReviewModeText_2:
   \   00000080   ............       ADRL     R0,`?<Constant "AutoX">`
   \              ....        
   \   00000088   1EFF2FE1           BX       LR
   3405          	case QUARTERMILE_TYPE:
   3406          	case EIGHTHMILE_TYPE:
   3407          	case THOUSANDFOOT_TYPE:	return "Drag";
   \                     ??GetSelectedReviewModeText_4:
   \   0000008C   ............       ADRL     R0,`?<Constant "Drag">`
   \              ....        
   \   00000094   1EFF2FE1           BX       LR
   3408          	case HILLCLIMB_TYPE:	return "Hill";
   \                     ??GetSelectedReviewModeText_5:
   \   00000098   ............       ADRL     R0,`?<Constant "Hill">`
   \              ....        
   \   000000A0   1EFF2FE1           BX       LR               ;; return
   3409          	}
   3410          }

   \                                 In section .data, align 4
   \                     pLaps:
   \   00000000   00000000           DC32 0H
   \                     numLaps:
   \   00000004   00000000           DC8 0, 0, 0, 0
   \                     BestLaps:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000478   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000488   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000498   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000508   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000518   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000528   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000538   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000548   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000558   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000568   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000578   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000588   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000598   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000608   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000618   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000628   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   3411          
   3412          enum DISPLAY_TYPES {
   3413          	DT_END = 0,
   3414          	DT_BEST_LAP,
   3415          	DT_DRIVER,
   3416          	DT_VEHICLE,
   3417          	DT_DRIVE_DURATION,
   3418          	DT_DRIVE_DISTANCE,
   3419          	DT_ET,
   3420          	DT_TOP_SPEED,
   3421          	DT_TIME
   3422          };
   3423          
   3424          enum DISPLAY_TYPES RoadRaceDisplayTypes[] = { DT_BEST_LAP, DT_DRIVER, DT_VEHICLE, DT_END };
   3425          enum DISPLAY_TYPES DriveDisplayTypes[] = { DT_DRIVE_DURATION, DT_DRIVE_DISTANCE, DT_DRIVER, DT_VEHICLE, DT_END };
   3426          enum DISPLAY_TYPES DragDisplayTypes[] = { DT_ET, DT_TOP_SPEED, DT_DRIVER, DT_VEHICLE, DT_END };
   3427          enum DISPLAY_TYPES AutoXDisplayTypes[] = { DT_TIME, DT_DRIVER, DT_VEHICLE, DT_END };
   3428          enum DISPLAY_TYPES HillDisplayTypes[] = { DT_TIME, DT_DRIVER, DT_VEHICLE, DT_END };
   3429          
   3430          char reviewRaceDisplay = 0;
   \                     reviewRaceDisplay:
   \   00000648   00                 DC8 0
   3431          char reviewDriveDisplay = 0;
   \                     reviewDriveDisplay:
   \   00000649   00                 DC8 0
   3432          char reviewAutoXDisplay = 0;
   \                     reviewAutoXDisplay:
   \   0000064A   00                 DC8 0
   3433          char reviewDragDisplay = 0;
   \                     reviewDragDisplay:
   \   0000064B   00                 DC8 0
   3434          char reviewHillDisplay = 0;
   \                     reviewHillDisplay:
   \   0000064C   00                 DC8 0
   \   0000064D   000000             DC8 0, 0, 0
   \                     RoadRaceDisplayTypes:
   \   00000650   01020300           DC8 1, 2, 3, 0
   \                     DriveDisplayTypes:
   \   00000654   040502030000       DC8 4, 5, 2, 3, 0, 0, 0, 0
   \              0000        
   \                     DragDisplayTypes:
   \   0000065C   060702030000       DC8 6, 7, 2, 3, 0, 0, 0, 0
   \              0000        
   \                     AutoXDisplayTypes:
   \   00000664   08020300           DC8 8, 2, 3, 0
   \                     HillDisplayTypes:
   \   00000668   08020300           DC8 8, 2, 3, 0
   \                     sessionName:
   \   0000066C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000067C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000068C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000069C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     fullSessionName:
   \   000006BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     NameStruct:
   \   0000070C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000071C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000072C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000073C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000074C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     SessionData:
   \   00000758   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000768   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000778   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000788   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000798   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000808   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000818   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000828   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000838   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000858   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000868   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000878   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000888   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000898   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000908   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000918   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000928   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000938   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000948   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000958   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000968   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000978   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000988   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000998   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001478   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001488   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001498   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001508   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001518   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001528   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001538   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001548   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001558   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001568   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001578   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001588   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001598   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001608   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001618   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001628   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001648   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001658   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001668   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001678   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001688   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001698   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000016F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001708   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001718   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001728   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001738   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001748   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001758   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001768   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001778   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001788   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001798   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000017F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001808   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001818   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001828   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001838   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001858   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001868   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001878   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001888   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001898   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000018F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001908   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001918   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001928   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001938   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001948   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001958   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001968   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001978   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   3435          
   3436          extern BUTTON_Handle hBestTime;
   3437          

   \                                 In section .text, align 4, keep-with-next
   3438          void InitReviewDisplayTypes(void)
   3439          {
   3440          	reviewRaceDisplay = 0;
   \                     InitReviewDisplayTypes:
   \   00000000   ........           LDR      R0,??DataTable167_10
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   481680E5           STR      R1,[R0, #+1608]
   3441          	reviewDriveDisplay = 0;
   3442          	reviewAutoXDisplay = 0;
   3443          	reviewDragDisplay = 0;
   3444          	reviewHillDisplay = 0;
   \   0000000C   4C16C0E5           STRB     R1,[R0, #+1612]
   3445          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   3446          

   \                                 In section .text, align 4, keep-with-next
   3447          void SetBestTimeButtonText(void)
   3448          {
   \                     SetBestTimeButtonText:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   3449          	enum DISPLAY_TYPES nextDisplay;
   3450          	char scratch[50], scratch2[50];;
   3451          
   3452          	switch (sysData.selectedSessionType)
   \   00000004   ........           LDR      R0,??DataTable167_3
   \   00000008   6CD04DE2           SUB      SP,SP,#+108
   \   0000000C   D000D0E5           LDRB     R0,[R0, #+208]
   \   00000010   410040E2           SUB      R0,R0,#+65
   \   00000014   130050E3           CMP      R0,#+19
   \   00000018   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SetBestTimeButtonText_0:
   \   0000001C   1300008A           BHI      ??SetBestTimeButtonText_2
   \   00000020   1C0000EA           B        ??SetBestTimeButtonText_3
   \   00000024   110000EA           B        ??SetBestTimeButtonText_2
   \   00000028   100000EA           B        ??SetBestTimeButtonText_2
   \   0000002C   140000EA           B        ??SetBestTimeButtonText_4
   \   00000030   1D0000EA           B        ??SetBestTimeButtonText_5
   \   00000034   0D0000EA           B        ??SetBestTimeButtonText_2
   \   00000038   0C0000EA           B        ??SetBestTimeButtonText_2
   \   0000003C   1F0000EA           B        ??SetBestTimeButtonText_6
   \   00000040   0A0000EA           B        ??SetBestTimeButtonText_2
   \   00000044   090000EA           B        ??SetBestTimeButtonText_2
   \   00000048   080000EA           B        ??SetBestTimeButtonText_2
   \   0000004C   070000EA           B        ??SetBestTimeButtonText_2
   \   00000050   060000EA           B        ??SetBestTimeButtonText_2
   \   00000054   050000EA           B        ??SetBestTimeButtonText_2
   \   00000058   040000EA           B        ??SetBestTimeButtonText_2
   \   0000005C   030000EA           B        ??SetBestTimeButtonText_2
   \   00000060   110000EA           B        ??SetBestTimeButtonText_5
   \   00000064   010000EA           B        ??SetBestTimeButtonText_2
   \   00000068   000000EA           B        ??SetBestTimeButtonText_2
   \   0000006C   0E0000EA           B        ??SetBestTimeButtonText_5
   3453          	{
   3454          	default:
   3455          	case NOT_VALID:		
   3456          	case ROADRACE_TYPE:
   3457          		nextDisplay = RoadRaceDisplayTypes[reviewRaceDisplay];
   \                     ??SetBestTimeButtonText_2:
   \   00000070   ........           LDR      R0,??DataTable167_10
   \   00000074   4816D0E5           LDRB     R1,[R0, #+1608]
   \   00000078   000081E0           ADD      R0,R1,R0
   \   0000007C   5006D0E5           LDRB     R0,[R0, #+1616]
   3458          		break;
   \   00000080   120000EA           B        ??SetBestTimeButtonText_7
   3459          	case DRIVE_TYPE:
   3460          		nextDisplay = DriveDisplayTypes[reviewDriveDisplay];
   \                     ??SetBestTimeButtonText_4:
   \   00000084   ........           LDR      R0,??DataTable167_10
   \   00000088   4916D0E5           LDRB     R1,[R0, #+1609]
   \   0000008C   000081E0           ADD      R0,R1,R0
   \   00000090   5406D0E5           LDRB     R0,[R0, #+1620]
   3461          		break;
   \   00000094   0D0000EA           B        ??SetBestTimeButtonText_7
   3462          	case AUTOCROSS_TYPE:
   3463          		nextDisplay = AutoXDisplayTypes[reviewAutoXDisplay];
   \                     ??SetBestTimeButtonText_3:
   \   00000098   ........           LDR      R0,??DataTable167_10
   \   0000009C   4A16D0E5           LDRB     R1,[R0, #+1610]
   \   000000A0   000081E0           ADD      R0,R1,R0
   \   000000A4   6406D0E5           LDRB     R0,[R0, #+1636]
   3464          		break;
   \   000000A8   080000EA           B        ??SetBestTimeButtonText_7
   3465          	case QUARTERMILE_TYPE:
   3466          	case EIGHTHMILE_TYPE:
   3467          	case THOUSANDFOOT_TYPE:
   3468          		nextDisplay = DragDisplayTypes[reviewDragDisplay];
   \                     ??SetBestTimeButtonText_5:
   \   000000AC   ........           LDR      R0,??DataTable167_10
   \   000000B0   4B16D0E5           LDRB     R1,[R0, #+1611]
   \   000000B4   000081E0           ADD      R0,R1,R0
   \   000000B8   5C06D0E5           LDRB     R0,[R0, #+1628]
   3469          		break;
   \   000000BC   030000EA           B        ??SetBestTimeButtonText_7
   3470          	case HILLCLIMB_TYPE:
   3471          		nextDisplay = HillDisplayTypes[reviewHillDisplay];
   \                     ??SetBestTimeButtonText_6:
   \   000000C0   ........           LDR      R0,??DataTable167_10
   \   000000C4   4C16D0E5           LDRB     R1,[R0, #+1612]
   \   000000C8   000081E0           ADD      R0,R1,R0
   \   000000CC   6806D0E5           LDRB     R0,[R0, #+1640]
   3472          		break;
   3473          	}
   3474          
   3475          	switch (nextDisplay)
   \                     ??SetBestTimeButtonText_7:
   \   000000D0   010040E2           SUB      R0,R0,#+1
   \   000000D4   070050E3           CMP      R0,#+7
   \   000000D8   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SetBestTimeButtonText_1:
   \   000000DC   0700008A           BHI      ??SetBestTimeButtonText_8
   \   000000E0   1D0000EA           B        ??SetBestTimeButtonText_9
   \   000000E4   050000EA           B        ??SetBestTimeButtonText_8
   \   000000E8   320000EA           B        ??SetBestTimeButtonText_10
   \   000000EC   3E0000EA           B        ??SetBestTimeButtonText_11
   \   000000F0   DA0000EA           B        ??SetBestTimeButtonText_12
   \   000000F4   7C0000EA           B        ??SetBestTimeButtonText_13
   \   000000F8   AB0000EA           B        ??SetBestTimeButtonText_14
   \   000000FC   690000EA           B        ??SetBestTimeButtonText_15
   3476          	{
   3477          	default:
   3478          	case DT_DRIVER:		
   3479          		sprintf(scratch, "Drv: %s", (selectedSessionUnsorted >= 0) ? SessionNameData[selectedSessionUnsorted].driver : "");
   \                     ??SetBestTimeButtonText_8:
   \   00000100   ........           LDR      R0,??DataTable165_1
   \   00000104   000090E5           LDR      R0,[R0, #+0]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0400004A           BMI      ??SetBestTimeButtonText_16
   \   00000110   4B10A0E3           MOV      R1,#+75
   \   00000114   ........           LDR      R2,??DataTable165
   \   00000118   912020E0           MLA      R0,R1,R0,R2
   \   0000011C   372080E2           ADD      R2,R0,#+55
   \   00000120   000000EA           B        ??SetBestTimeButtonText_17
   \                     ??SetBestTimeButtonText_16:
   \   00000124   EE2F8FE2           ADR      R2,??SetBestTimeButtonText_18  ;; ""
   \                     ??SetBestTimeButtonText_17:
   \   00000128   ............       ADRL     R1,`?<Constant "Drv: %s">`
   \              ....        
   \                     ??SetBestTimeButtonText_19:
   \   00000130   0D00A0E1           MOV      R0,SP
   \   00000134   ........           BL       sprintf
   3480          		break;
   3481          
   3482          	case DT_BEST_LAP:
   3483          		strcpy(scratch, GetBestLap(false, selectedSessionUnsorted, scratch));
   3484          		break;
   3485          
   3486          	case DT_VEHICLE:
   3487          		sprintf(scratch, "Veh: %s", (selectedSessionUnsorted >= 0) ? SessionNameData[selectedSessionUnsorted].vehicle : "");
   3488          		break;
   3489          
   3490          	case DT_DRIVE_DURATION:
   3491          		strcpy(scratch, "Time: ");
   3492          		if (selectedSessionUnsorted >= 0)
   3493          		{
   3494          			GetStringNumber(1, scratch2, SessionData.UserFieldDescGeneral);
   3495          			if (scratch2[0] == 'D')					// If this is a real Duration
   3496          				strcat(scratch, &scratch2[10]);		// Replace the word "Duration: " with "Time: "
   3497          			else strcat(scratch, scratch2);			// else copy over whatever it says
   3498          		}
   3499          		break;
   3500          
   3501          	case DT_TIME:
   3502          		strcpy(scratch, GetAutoxTime(selectedSessionUnsorted, scratch));
   3503          		break;
   3504          
   3505          	case DT_ET:
   3506          		strcpy(scratch, GetDragTime(selectedSessionUnsorted, scratch));
   3507          		break;
   3508          
   3509          	case DT_TOP_SPEED:
   3510          		strcpy(scratch, "Max: ");
   3511          		if (selectedSessionUnsorted >= 0)
   3512          		{
   3513          			GetStringNumber(1, scratch2, SessionData.UserFieldDescPerformance);
   3514          			if (scratch2[0] == 'M')					// If this is a real Max speed
   3515          				strcat(scratch, &scratch2[11]);		// Replace the word "Max Speed: " with "Max: "
   3516          			else strcat(scratch, scratch2);			// else copy over whatever it says
   3517          		}
   3518          		break;
   3519          
   3520          	case DT_DRIVE_DISTANCE:
   3521          		strcpy(scratch, "Dst: ");			
   3522          		if (selectedSessionUnsorted >= 0)
   3523          		{
   3524          			GetStringNumber(2, scratch2, SessionData.UserFieldDescGeneral);
   3525          			if (scratch2[0] == 'D')					// If this is a real distance
   3526          				strcat(scratch, &scratch2[10]);		// Replace word "Distance: " with "Dst: "
   3527          			else strcat(scratch, scratch2);			// else copy over whatever it says
   3528          		}
   3529          		break;
   3530          	}
   3531          	BUTTON_SetTextAlign(hBestTime, GUI_TA_LEFT | GUI_TA_VCENTER);
   \                     ??SetBestTimeButtonText_20:
   \   00000138   ........           LDR      R4,??DataTable167_11
   \   0000013C   0C10A0E3           MOV      R1,#+12
   \   00000140   000094E5           LDR      R0,[R4, #+0]
   \   00000144   ........           BL       BUTTON_SetTextAlign
   3532          	BUTTON_SetText(hBestTime, scratch);
   \   00000148   0D10A0E1           MOV      R1,SP
   \   0000014C   000094E5           LDR      R0,[R4, #+0]
   \   00000150   ........           BL       BUTTON_SetText
   3533          }
   \   00000154   6CD08DE2           ADD      SP,SP,#+108      ;; stack cleaning
   \   00000158   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??SetBestTimeButtonText_9:
   \   0000015C   ........           LDR      R0,??DataTable165_1
   \   00000160   0B20A0E3           MOV      R2,#+11
   \   00000164   004090E5           LDR      R4,[R0, #+0]
   \   00000168   ............       ADRL     R1,`?<Constant "Best Lap: ">`
   \              ....        
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           BL       __aeabi_memcpy4
   \   00000178   C80054E3           CMP      R4,#+200
   \   0000017C   0600002A           BCS      ??SetBestTimeButtonText_21
   \   00000180   ........           LDR      R0,??DataTable167_10
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   040180E0           ADD      R0,R0,R4, LSL #+2
   \   0000018C   080090E5           LDR      R0,[R0, #+8]
   \   00000190   ........           BL       formatLapTime
   \                     ??SetBestTimeButtonText_22:
   \   00000194   0010A0E1           MOV      R1,R0
   \   00000198   000000EA           B        ??SetBestTimeButtonText_23
   \                     ??SetBestTimeButtonText_21:
   \   0000019C   D01F8FE2           ADR      R1,??SetBestTimeButtonText_18  ;; ""
   \                     ??SetBestTimeButtonText_23:
   \   000001A0   0D00A0E1           MOV      R0,SP
   \   000001A4   ........           BL       strcat
   \                     ??SetBestTimeButtonText_24:
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   0D00A0E1           MOV      R0,SP
   \   000001B0   ........           BL       strcpy
   \   000001B4   DFFFFFEA           B        ??SetBestTimeButtonText_20
   \                     ??SetBestTimeButtonText_10:
   \   000001B8   ........           LDR      R0,??DataTable165_1
   \   000001BC   000090E5           LDR      R0,[R0, #+0]
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   0400004A           BMI      ??SetBestTimeButtonText_25
   \   000001C8   4B10A0E3           MOV      R1,#+75
   \   000001CC   ........           LDR      R2,??DataTable165
   \   000001D0   912020E0           MLA      R0,R1,R0,R2
   \   000001D4   262080E2           ADD      R2,R0,#+38
   \   000001D8   000000EA           B        ??SetBestTimeButtonText_26
   \                     ??SetBestTimeButtonText_25:
   \   000001DC   C02F8FE2           ADR      R2,??SetBestTimeButtonText_18  ;; ""
   \                     ??SetBestTimeButtonText_26:
   \   000001E0   ............       ADRL     R1,`?<Constant "Veh: %s">`
   \              ....        
   \   000001E8   D0FFFFEA           B        ??SetBestTimeButtonText_19
   \                     ??SetBestTimeButtonText_11:
   \   000001EC   0720A0E3           MOV      R2,#+7
   \   000001F0   ............       ADRL     R1,`?<Constant "Time: ">`
   \              ....        
   \   000001F8   0D00A0E1           MOV      R0,SP
   \   000001FC   ........           BL       __aeabi_memcpy4
   \   00000200   ........           LDR      R0,??DataTable165_1
   \   00000204   000090E5           LDR      R0,[R0, #+0]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   C9FFFF4A           BMI      ??SetBestTimeButtonText_20
   \   00000210   ........           LDR      R0,??DataTable167_10
   \   00000214   5610A0E3           MOV      R1,#+86
   \   00000218   A01E81E3           ORR      R1,R1,#0xA00
   \   0000021C   005081E0           ADD      R5,R1,R0
   \   00000220   0040A0E3           MOV      R4,#+0
   \   00000224   001081E0           ADD      R1,R1,R0
   \   00000228   34608DE2           ADD      R6,SP,#+52
   \   0000022C   0170A0E3           MOV      R7,#+1
   \   00000230   3440CDE5           STRB     R4,[SP, #+52]
   \   00000234   1120A0E3           MOV      R2,#+17
   \   00000238   ............       ADRL     R0,`?<Constant "Older File Format">`
   \              ....        
   \   00000240   ........           BL       strncmp
   \   00000244   000050E3           CMP      R0,#+0
   \   00000248   AD00000A           BEQ      ??SetBestTimeButtonText_27
   \                     ??SetBestTimeButtonText_28:
   \   0000024C   017047E2           SUB      R7,R7,#+1
   \   00000250   FF7017E2           ANDS     R7,R7,#0xFF
   \   00000254   0E00000A           BEQ      ??SetBestTimeButtonText_29
   \                     ??SetBestTimeButtonText_30:
   \   00000258   0100D5E4           LDRB     R0,[R5], #+1
   \   0000025C   0A0050E3           CMP      R0,#+10
   \   00000260   F9FFFF0A           BEQ      ??SetBestTimeButtonText_28
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   FAFFFF1A           BNE      ??SetBestTimeButtonText_30
   \                     ??SetBestTimeButtonText_31:
   \   0000026C   3400DDE5           LDRB     R0,[SP, #+52]
   \   00000270   440050E3           CMP      R0,#+68
   \   00000274   A600001A           BNE      ??SetBestTimeButtonText_32
   \   00000278   3E108DE2           ADD      R1,SP,#+62
   \                     ??SetBestTimeButtonText_33:
   \   0000027C   0D00A0E1           MOV      R0,SP
   \   00000280   ........           BL       strcat
   \   00000284   ABFFFFEA           B        ??SetBestTimeButtonText_20
   \                     ??SetBestTimeButtonText_34:
   \   00000288   000051E3           CMP      R1,#+0
   \   0000028C   F6FFFF0A           BEQ      ??SetBestTimeButtonText_31
   \   00000290   0110C6E4           STRB     R1,[R6], #+1
   \                     ??SetBestTimeButtonText_29:
   \   00000294   0110D5E4           LDRB     R1,[R5], #+1
   \   00000298   0A0051E3           CMP      R1,#+10
   \   0000029C   F9FFFF1A           BNE      ??SetBestTimeButtonText_34
   \                     ??SetBestTimeButtonText_35:
   \   000002A0   0040C6E5           STRB     R4,[R6, #+0]
   \   000002A4   F0FFFFEA           B        ??SetBestTimeButtonText_31
   \                     ??SetBestTimeButtonText_15:
   \   000002A8   ........           LDR      R0,??DataTable165_1
   \   000002AC   0B20A0E3           MOV      R2,#+11
   \   000002B0   004090E5           LDR      R4,[R0, #+0]
   \   000002B4   ............       ADRL     R1,`?<Constant "Run Time: ">`
   \              ....        
   \   000002BC   0D00A0E1           MOV      R0,SP
   \   000002C0   ........           BL       __aeabi_memcpy4
   \   000002C4   C80054E3           CMP      R4,#+200
   \   000002C8   0500002A           BCS      ??SetBestTimeButtonText_36
   \   000002CC   ........           LDR      R0,??DataTable167_10
   \   000002D0   0010A0E3           MOV      R1,#+0
   \   000002D4   040180E0           ADD      R0,R0,R4, LSL #+2
   \   000002D8   080090E5           LDR      R0,[R0, #+8]
   \   000002DC   ........           BL       formatLapTime
   \   000002E0   ABFFFFEA           B        ??SetBestTimeButtonText_22
   \                     ??SetBestTimeButtonText_36:
   \   000002E4   7E0F8FE2           ADR      R0,??SetBestTimeButtonText_18  ;; ""
   \   000002E8   A9FFFFEA           B        ??SetBestTimeButtonText_22
   \                     ??SetBestTimeButtonText_13:
   \   000002EC   ........           LDR      R0,??DataTable165_1
   \   000002F0   000090E5           LDR      R0,[R0, #+0]
   \   000002F4   0040B0E1           MOVS     R4,R0
   \   000002F8   0500005A           BPL      ??SetBestTimeButtonText_37
   \   000002FC   0920A0E3           MOV      R2,#+9
   \   00000300   ............       ADRL     R1,`?<Constant "Elapsed:">`
   \              ....        
   \   00000308   0D00A0E1           MOV      R0,SP
   \   0000030C   ........           BL       __aeabi_memcpy4
   \   00000310   A4FFFFEA           B        ??SetBestTimeButtonText_24
   \                     ??SetBestTimeButtonText_37:
   \   00000314   4B10A0E3           MOV      R1,#+75
   \   00000318   ........           LDR      R2,??DataTable165
   \   0000031C   912020E0           MLA      R0,R1,R0,R2
   \   00000320   4900D0E5           LDRB     R0,[R0, #+73]
   \   00000324   450050E2           SUBS     R0,R0,#+69
   \   00000328   0900000A           BEQ      ??SetBestTimeButtonText_38
   \   0000032C   0C0050E2           SUBS     R0,R0,#+12
   \   00000330   0B00000A           BEQ      ??SetBestTimeButtonText_39
   \   00000334   030050E2           SUBS     R0,R0,#+3
   \   00000338   0B20A003           MOVEQ    R2,#+11
   \   0000033C   ............       ADRLEQ   R1,`?<Constant "1000\\' ET: ">`
   \              ....        
   \   00000344   0A20A013           MOVNE    R2,#+10
   \   00000348   ............       ADRLNE   R1,`?<Constant "Elapsed: ">`
   \              ....        
   \   00000350   060000EA           B        ??SetBestTimeButtonText_40
   \                     ??SetBestTimeButtonText_38:
   \   00000354   0B20A0E3           MOV      R2,#+11
   \   00000358   ............       ADRL     R1,`?<Constant "1/8mi ET: ">`
   \              ....        
   \   00000360   020000EA           B        ??SetBestTimeButtonText_40
   \                     ??SetBestTimeButtonText_39:
   \   00000364   0B20A0E3           MOV      R2,#+11
   \   00000368   ............       ADRL     R1,`?<Constant "1/4mi ET: ">`
   \              ....        
   \                     ??SetBestTimeButtonText_40:
   \   00000370   0D00A0E1           MOV      R0,SP
   \   00000374   ........           BL       __aeabi_memcpy4
   \   00000378   C80054E3           CMP      R4,#+200
   \   0000037C   0500002A           BCS      ??SetBestTimeButtonText_41
   \   00000380   ........           LDR      R0,??DataTable167_10
   \   00000384   0010A0E3           MOV      R1,#+0
   \   00000388   040180E0           ADD      R0,R0,R4, LSL #+2
   \   0000038C   080090E5           LDR      R0,[R0, #+8]
   \   00000390   ........           BL       formatLapTime
   \   00000394   000000EA           B        ??SetBestTimeButtonText_42
   \                     ??SetBestTimeButtonText_41:
   \   00000398   510F8FE2           ADR      R0,??SetBestTimeButtonText_18  ;; ""
   \                     ??SetBestTimeButtonText_42:
   \   0000039C   0010A0E1           MOV      R1,R0
   \   000003A0   0D00A0E1           MOV      R0,SP
   \   000003A4   ........           BL       strcat
   \   000003A8   7EFFFFEA           B        ??SetBestTimeButtonText_24
   \                     ??SetBestTimeButtonText_14:
   \   000003AC   0620A0E3           MOV      R2,#+6
   \   000003B0   ............       ADRL     R1,`?<Constant "Max: ">`
   \              ....        
   \   000003B8   0D00A0E1           MOV      R0,SP
   \   000003BC   ........           BL       __aeabi_memcpy4
   \   000003C0   ........           LDR      R0,??DataTable165_1
   \   000003C4   000090E5           LDR      R0,[R0, #+0]
   \   000003C8   000050E3           CMP      R0,#+0
   \   000003CC   59FFFF4A           BMI      ??SetBestTimeButtonText_20
   \   000003D0   ........           LDR      R0,??DataTable167_10
   \   000003D4   AE10A0E3           MOV      R1,#+174
   \   000003D8   C01E81E3           ORR      R1,R1,#0xC00
   \   000003DC   005081E0           ADD      R5,R1,R0
   \   000003E0   0040A0E3           MOV      R4,#+0
   \   000003E4   001081E0           ADD      R1,R1,R0
   \   000003E8   34608DE2           ADD      R6,SP,#+52
   \   000003EC   0170A0E3           MOV      R7,#+1
   \   000003F0   3440CDE5           STRB     R4,[SP, #+52]
   \   000003F4   1120A0E3           MOV      R2,#+17
   \   000003F8   ............       ADRL     R0,`?<Constant "Older File Format">`
   \              ....        
   \   00000400   ........           BL       strncmp
   \   00000404   000050E3           CMP      R0,#+0
   \   00000408   3D00000A           BEQ      ??SetBestTimeButtonText_27
   \                     ??SetBestTimeButtonText_43:
   \   0000040C   017047E2           SUB      R7,R7,#+1
   \   00000410   FF7017E2           ANDS     R7,R7,#0xFF
   \   00000414   0800000A           BEQ      ??SetBestTimeButtonText_44
   \                     ??SetBestTimeButtonText_45:
   \   00000418   0100D5E4           LDRB     R0,[R5], #+1
   \   0000041C   0A0050E3           CMP      R0,#+10
   \   00000420   F9FFFF0A           BEQ      ??SetBestTimeButtonText_43
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   FAFFFF1A           BNE      ??SetBestTimeButtonText_45
   \   0000042C   060000EA           B        ??SetBestTimeButtonText_46
   \                     ??SetBestTimeButtonText_47:
   \   00000430   000051E3           CMP      R1,#+0
   \   00000434   0400000A           BEQ      ??SetBestTimeButtonText_46
   \   00000438   0110C6E4           STRB     R1,[R6], #+1
   \                     ??SetBestTimeButtonText_44:
   \   0000043C   0110D5E4           LDRB     R1,[R5], #+1
   \   00000440   0A0051E3           CMP      R1,#+10
   \   00000444   F9FFFF1A           BNE      ??SetBestTimeButtonText_47
   \   00000448   0040C6E5           STRB     R4,[R6, #+0]
   \                     ??SetBestTimeButtonText_46:
   \   0000044C   3400DDE5           LDRB     R0,[SP, #+52]
   \   00000450   4D0050E3           CMP      R0,#+77
   \   00000454   2E00001A           BNE      ??SetBestTimeButtonText_32
   \   00000458   3F108DE2           ADD      R1,SP,#+63
   \   0000045C   86FFFFEA           B        ??SetBestTimeButtonText_33
   \                     ??SetBestTimeButtonText_12:
   \   00000460   0620A0E3           MOV      R2,#+6
   \   00000464   ............       ADRL     R1,`?<Constant "Dst: ">`
   \              ....        
   \   0000046C   0D00A0E1           MOV      R0,SP
   \   00000470   ........           BL       __aeabi_memcpy4
   \   00000474   ........           LDR      R0,??DataTable165_1
   \   00000478   000090E5           LDR      R0,[R0, #+0]
   \   0000047C   000050E3           CMP      R0,#+0
   \   00000480   2CFFFF4A           BMI      ??SetBestTimeButtonText_20
   \   00000484   ........           LDR      R0,??DataTable167_10
   \   00000488   5610A0E3           MOV      R1,#+86
   \   0000048C   A01E81E3           ORR      R1,R1,#0xA00
   \   00000490   005081E0           ADD      R5,R1,R0
   \   00000494   0040A0E3           MOV      R4,#+0
   \   00000498   001081E0           ADD      R1,R1,R0
   \   0000049C   34608DE2           ADD      R6,SP,#+52
   \   000004A0   0270A0E3           MOV      R7,#+2
   \   000004A4   3440CDE5           STRB     R4,[SP, #+52]
   \   000004A8   1120A0E3           MOV      R2,#+17
   \   000004AC   ............       ADRL     R0,`?<Constant "Older File Format">`
   \              ....        
   \   000004B4   ........           BL       strncmp
   \   000004B8   000050E3           CMP      R0,#+0
   \   000004BC   1000000A           BEQ      ??SetBestTimeButtonText_27
   \                     ??SetBestTimeButtonText_48:
   \   000004C0   017047E2           SUB      R7,R7,#+1
   \   000004C4   FF7017E2           ANDS     R7,R7,#0xFF
   \   000004C8   0900000A           BEQ      ??SetBestTimeButtonText_49
   \                     ??SetBestTimeButtonText_50:
   \   000004CC   0100D5E4           LDRB     R0,[R5], #+1
   \   000004D0   0A0050E3           CMP      R0,#+10
   \   000004D4   F9FFFF0A           BEQ      ??SetBestTimeButtonText_48
   \   000004D8   000050E3           CMP      R0,#+0
   \   000004DC   FAFFFF1A           BNE      ??SetBestTimeButtonText_50
   \   000004E0   61FFFFEA           B        ??SetBestTimeButtonText_31
   \                     ??SetBestTimeButtonText_18:
   \   000004E4   00000000           DC8      "",0x0,0x0,0x0
   \                     ??SetBestTimeButtonText_51:
   \   000004E8   000051E3           CMP      R1,#+0
   \   000004EC   5EFFFF0A           BEQ      ??SetBestTimeButtonText_31
   \   000004F0   0110C6E4           STRB     R1,[R6], #+1
   \                     ??SetBestTimeButtonText_49:
   \   000004F4   0110D5E4           LDRB     R1,[R5], #+1
   \   000004F8   0A0051E3           CMP      R1,#+10
   \   000004FC   F9FFFF1A           BNE      ??SetBestTimeButtonText_51
   \   00000500   66FFFFEA           B        ??SetBestTimeButtonText_35
   \                     ??SetBestTimeButtonText_27:
   \   00000504   ........           ADR      R0,??DataTable167  ;; "N/A"
   \   00000508   002090E5           LDR      R2,[R0, #0]
   \   0000050C   34108DE2           ADD      R1,SP,#+52
   \   00000510   002081E5           STR      R2,[R1, #+0]
   \                     ??SetBestTimeButtonText_32:
   \   00000514   34108DE2           ADD      R1,SP,#+52
   \   00000518   57FFFFEA           B        ??SetBestTimeButtonText_33
   3534          

   \                                 In section .text, align 4, keep-with-next
   3535          char *GetSessionDataString(char index, enum SESSION_TEXT_TYPE type, char *pDest)
   3536          {
   \                     GetSessionDataString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0250A0E1           MOV      R5,R2
   3537          	switch (type)
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0300000A           BEQ      ??GetSessionDataString_0
   \   00000010   020051E3           CMP      R1,#+2
   \   00000014   1900000A           BEQ      ??GetSessionDataString_1
   \   00000018   0C00003A           BCC      ??GetSessionDataString_2
   \   0000001C   200000EA           B        ??GetSessionDataString_3
   3538          	{
   3539          	case ST_GENERAL:		GetStringNumber(index, pDest, SessionData.UserFieldDescGeneral);		break;
   \                     ??GetSessionDataString_0:
   \   00000020   ........           LDR      R1,??DataTable167_10
   \   00000024   5620A0E3           MOV      R2,#+86
   \   00000028   A02E82E3           ORR      R2,R2,#0xA00
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   017082E0           ADD      R7,R2,R1
   \   00000034   0580A0E1           MOV      R8,R5
   \   00000038   0060A0E3           MOV      R6,#+0
   \   0000003C   5600A0E3           MOV      R0,#+86
   \   00000040   0060C8E5           STRB     R6,[R8, #+0]
   \   00000044   1120A0E3           MOV      R2,#+17
   \   00000048   A00E80E3           ORR      R0,R0,#0xA00
   \   0000004C   1F0000EA           B        ??GetSessionDataString_4
   3540          	case ST_PERFORMANCE:	GetStringNumber(index, pDest, SessionData.UserFieldDescPerformance);	break;
   \                     ??GetSessionDataString_2:
   \   00000050   ........           LDR      R1,??DataTable167_10
   \   00000054   AE20A0E3           MOV      R2,#+174
   \   00000058   C02E82E3           ORR      R2,R2,#0xC00
   \   0000005C   0040A0E1           MOV      R4,R0
   \   00000060   017082E0           ADD      R7,R2,R1
   \   00000064   0580A0E1           MOV      R8,R5
   \   00000068   0060A0E3           MOV      R6,#+0
   \   0000006C   AE00A0E3           MOV      R0,#+174
   \   00000070   0060C8E5           STRB     R6,[R8, #+0]
   \   00000074   1120A0E3           MOV      R2,#+17
   \   00000078   C00E80E3           ORR      R0,R0,#0xC00
   \   0000007C   130000EA           B        ??GetSessionDataString_4
   3541          	case ST_INPUTS:			GetStringNumber(index, pDest, SessionData.UserFieldDescInputs);			break;
   \                     ??GetSessionDataString_1:
   \   00000080   ........           LDR      R1,??DataTable167_10
   \   00000084   1E20A0E3           MOV      R2,#+30
   \   00000088   B02E82E3           ORR      R2,R2,#0xB00
   \   0000008C   0040A0E1           MOV      R4,R0
   \   00000090   017082E0           ADD      R7,R2,R1
   \   00000094   0580A0E1           MOV      R8,R5
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   1E00A0E3           MOV      R0,#+30
   \   000000A0   070000EA           B        ??GetSessionDataString_5
   3542          	default:
   3543          	case ST_CONFIG:			GetStringNumber(index, pDest, SessionData.UserFieldDescConfig);			break;
   \                     ??GetSessionDataString_3:
   \   000000A4   ........           LDR      R1,??DataTable167_10
   \   000000A8   E620A0E3           MOV      R2,#+230
   \   000000AC   B02E82E3           ORR      R2,R2,#0xB00
   \   000000B0   0040A0E1           MOV      R4,R0
   \   000000B4   017082E0           ADD      R7,R2,R1
   \   000000B8   0580A0E1           MOV      R8,R5
   \   000000BC   0060A0E3           MOV      R6,#+0
   \   000000C0   E600A0E3           MOV      R0,#+230
   \                     ??GetSessionDataString_5:
   \   000000C4   0060C8E5           STRB     R6,[R8, #+0]
   \   000000C8   1120A0E3           MOV      R2,#+17
   \   000000CC   B00E80E3           ORR      R0,R0,#0xB00
   \                     ??GetSessionDataString_4:
   \   000000D0   011080E0           ADD      R1,R0,R1
   \   000000D4   ............       ADRL     R0,`?<Constant "Older File Format">`
   \              ....        
   \   000000DC   ........           BL       strncmp
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   1000000A           BEQ      ??GetSessionDataString_6
   \                     ??GetSessionDataString_7:
   \   000000E8   014044E2           SUB      R4,R4,#+1
   \   000000EC   FF4014E2           ANDS     R4,R4,#0xFF
   \   000000F0   0800000A           BEQ      ??GetSessionDataString_8
   \                     ??GetSessionDataString_9:
   \   000000F4   0100D7E4           LDRB     R0,[R7], #+1
   \   000000F8   0A0050E3           CMP      R0,#+10
   \   000000FC   F9FFFF0A           BEQ      ??GetSessionDataString_7
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   FAFFFF1A           BNE      ??GetSessionDataString_9
   \   00000108   0B0000EA           B        ??GetSessionDataString_10
   \                     ??GetSessionDataString_11:
   \   0000010C   000051E3           CMP      R1,#+0
   \   00000110   0900000A           BEQ      ??GetSessionDataString_10
   \   00000114   0110C8E4           STRB     R1,[R8], #+1
   \                     ??GetSessionDataString_8:
   \   00000118   0110D7E4           LDRB     R1,[R7], #+1
   \   0000011C   0A0051E3           CMP      R1,#+10
   \   00000120   F9FFFF1A           BNE      ??GetSessionDataString_11
   \   00000124   0060C8E5           STRB     R6,[R8, #+0]
   \   00000128   030000EA           B        ??GetSessionDataString_10
   \                     ??GetSessionDataString_6:
   \   0000012C   0420A0E3           MOV      R2,#+4
   \   00000130   ........           ADR      R1,??DataTable167  ;; "N/A"
   \   00000134   0800A0E1           MOV      R0,R8
   \   00000138   ........           BL       __aeabi_memcpy
   3544          	}
   3545          	return pDest;
   \                     ??GetSessionDataString_10:
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   F081BDE8           POP      {R4-R8,PC}       ;; return
   3546          }
   3547          

   \                                 In section .text, align 4, keep-with-next
   3548          void GetStringNumber(char index, char *pDest, char *pSource)
   3549          {
   \                     GetStringNumber:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   3550          	char ch;
   3551          
   3552          	*pDest = 0;
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0070C5E5           STRB     R7,[R5, #+0]
   3553          
   3554          	if (strncmp("Older File Format", pSource, 17) == 0)
   \   0000001C   1120A0E3           MOV      R2,#+17
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   ............       ADRL     R0,`?<Constant "Older File Format">`
   \              ....        
   \   0000002C   ........           BL       strncmp
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400001A           BNE      ??GetStringNumber_0
   3555          	{
   3556          		strcpy(pDest, "N/A");
   \   00000038   0420A0E3           MOV      R2,#+4
   \   0000003C   ........           ADR      R1,??DataTable167  ;; "N/A"
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       __aeabi_memcpy
   3557          		return;
   \   00000048   0F0000EA           B        ??GetStringNumber_1
   3558          	}
   3559          	while (--index)
   \                     ??GetStringNumber_0:
   \   0000004C   014044E2           SUB      R4,R4,#+1
   \   00000050   FF4014E2           ANDS     R4,R4,#0xFF
   \   00000054   0800000A           BEQ      ??GetStringNumber_2
   3560          	{
   3561          		while ((ch = *pSource++) != '\n')
   \                     ??GetStringNumber_3:
   \   00000058   0100D6E4           LDRB     R0,[R6], #+1
   \   0000005C   0A0050E3           CMP      R0,#+10
   \   00000060   F9FFFF0A           BEQ      ??GetStringNumber_0
   3562          			if (ch == 0)
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   FAFFFF1A           BNE      ??GetStringNumber_3
   \   0000006C   060000EA           B        ??GetStringNumber_1
   3563          				return;
   3564          	}
   3565          
   3566          	while ((ch = *pSource++) != '\n')
   3567          	{
   3568          		if (ch == 0)
   \                     ??GetStringNumber_4:
   \   00000070   000051E3           CMP      R1,#+0
   \   00000074   0400000A           BEQ      ??GetStringNumber_1
   3569          			return;
   3570          		else *pDest++ = ch;
   \   00000078   0110C5E4           STRB     R1,[R5], #+1
   3571          	}
   \                     ??GetStringNumber_2:
   \   0000007C   0110D6E4           LDRB     R1,[R6], #+1
   \   00000080   0A0051E3           CMP      R1,#+10
   \   00000084   F9FFFF1A           BNE      ??GetStringNumber_4
   3572          
   3573          	*pDest = 0;
   \   00000088   0070C5E5           STRB     R7,[R5, #+0]
   3574          }
   \                     ??GetStringNumber_1:
   \   0000008C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000090   F080BDE8           POP      {R4-R7,PC}       ;; return
   3575          

   \                                 In section .text, align 4, keep-with-next
   3576          void IncrementDisplayType(void)
   3577          {
   \                     IncrementDisplayType:
   \   00000000   10402DE9           PUSH     {R4,LR}
   3578          	switch (sysData.selectedSessionType)
   \   00000004   ........           LDR      R4,??DataTable167_3
   \   00000008   ........           LDR      R0,??DataTable167_10
   \   0000000C   D040D4E5           LDRB     R4,[R4, #+208]
   \   00000010   48C6D0E5           LDRB     R12,[R0, #+1608]
   \   00000014   49E6D0E5           LDRB     LR,[R0, #+1609]
   \   00000018   414044E2           SUB      R4,R4,#+65
   \   0000001C   4A16D0E5           LDRB     R1,[R0, #+1610]
   \   00000020   4B26D0E5           LDRB     R2,[R0, #+1611]
   \   00000024   4C36D0E5           LDRB     R3,[R0, #+1612]
   \   00000028   130054E3           CMP      R4,#+19
   \   0000002C   04F18F90           ADDLS    PC,PC,R4, LSL #+2
   \                     ??IncrementDisplayType_0:
   \   00000030   1300008A           BHI      ??IncrementDisplayType_1
   \   00000034   220000EA           B        ??IncrementDisplayType_2
   \   00000038   110000EA           B        ??IncrementDisplayType_1
   \   0000003C   100000EA           B        ??IncrementDisplayType_1
   \   00000040   170000EA           B        ??IncrementDisplayType_3
   \   00000044   260000EA           B        ??IncrementDisplayType_4
   \   00000048   0D0000EA           B        ??IncrementDisplayType_1
   \   0000004C   0C0000EA           B        ??IncrementDisplayType_1
   \   00000050   2B0000EA           B        ??IncrementDisplayType_5
   \   00000054   0A0000EA           B        ??IncrementDisplayType_1
   \   00000058   090000EA           B        ??IncrementDisplayType_1
   \   0000005C   080000EA           B        ??IncrementDisplayType_1
   \   00000060   070000EA           B        ??IncrementDisplayType_1
   \   00000064   060000EA           B        ??IncrementDisplayType_1
   \   00000068   050000EA           B        ??IncrementDisplayType_1
   \   0000006C   040000EA           B        ??IncrementDisplayType_1
   \   00000070   030000EA           B        ??IncrementDisplayType_1
   \   00000074   1A0000EA           B        ??IncrementDisplayType_4
   \   00000078   010000EA           B        ??IncrementDisplayType_1
   \   0000007C   000000EA           B        ??IncrementDisplayType_1
   \   00000080   170000EA           B        ??IncrementDisplayType_4
   3579          	{
   3580          	default:
   3581          	case NOT_VALID:		
   3582          	case ROADRACE_TYPE:
   3583          		if (RoadRaceDisplayTypes[++reviewRaceDisplay] == DT_END)
   \                     ??IncrementDisplayType_1:
   \   00000084   01C08CE2           ADD      R12,R12,#+1
   \   00000088   FF400CE2           AND      R4,R12,#0xFF
   \   0000008C   004084E0           ADD      R4,R4,R0
   \   00000090   5046D4E5           LDRB     R4,[R4, #+1616]
   \   00000094   000054E3           CMP      R4,#+0
   \   00000098   1F00001A           BNE      ??IncrementDisplayType_6
   3584          			reviewRaceDisplay = 0;
   \   0000009C   00C0A0E3           MOV      R12,#+0
   \   000000A0   1D0000EA           B        ??IncrementDisplayType_6
   3585          		break;
   3586          	case DRIVE_TYPE:
   3587          		if (DriveDisplayTypes[++reviewDriveDisplay] == DT_END)
   \                     ??IncrementDisplayType_3:
   \   000000A4   01E08EE2           ADD      LR,LR,#+1
   \   000000A8   FF400EE2           AND      R4,LR,#0xFF
   \   000000AC   004084E0           ADD      R4,R4,R0
   \   000000B0   5446D4E5           LDRB     R4,[R4, #+1620]
   \   000000B4   000054E3           CMP      R4,#+0
   \   000000B8   1700001A           BNE      ??IncrementDisplayType_6
   3588          			reviewDriveDisplay = 0;
   \   000000BC   00E0A0E3           MOV      LR,#+0
   \   000000C0   150000EA           B        ??IncrementDisplayType_6
   3589          		break;
   3590          	case AUTOCROSS_TYPE:
   3591          		if (AutoXDisplayTypes[++reviewAutoXDisplay] == DT_END)
   \                     ??IncrementDisplayType_2:
   \   000000C4   011081E2           ADD      R1,R1,#+1
   \   000000C8   FF4001E2           AND      R4,R1,#0xFF
   \   000000CC   004084E0           ADD      R4,R4,R0
   \   000000D0   6446D4E5           LDRB     R4,[R4, #+1636]
   \   000000D4   000054E3           CMP      R4,#+0
   \   000000D8   0F00001A           BNE      ??IncrementDisplayType_6
   3592          			reviewAutoXDisplay = 0;
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   0D0000EA           B        ??IncrementDisplayType_6
   3593          		break;
   3594          	case QUARTERMILE_TYPE:
   3595          	case EIGHTHMILE_TYPE:
   3596          	case THOUSANDFOOT_TYPE:
   3597          		if (DragDisplayTypes[++reviewDragDisplay] == DT_END)
   \                     ??IncrementDisplayType_4:
   \   000000E4   012082E2           ADD      R2,R2,#+1
   \   000000E8   FF4002E2           AND      R4,R2,#0xFF
   \   000000EC   004084E0           ADD      R4,R4,R0
   \   000000F0   5C46D4E5           LDRB     R4,[R4, #+1628]
   \   000000F4   000054E3           CMP      R4,#+0
   \   000000F8   0700001A           BNE      ??IncrementDisplayType_6
   3598          			reviewDragDisplay = 0;
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   050000EA           B        ??IncrementDisplayType_6
   3599          		break;
   3600          	case HILLCLIMB_TYPE:
   3601          		if (HillDisplayTypes[++reviewHillDisplay] == DT_END)
   \                     ??IncrementDisplayType_5:
   \   00000104   013083E2           ADD      R3,R3,#+1
   \   00000108   FF4003E2           AND      R4,R3,#0xFF
   \   0000010C   004084E0           ADD      R4,R4,R0
   \   00000110   6846D4E5           LDRB     R4,[R4, #+1640]
   \   00000114   000054E3           CMP      R4,#+0
   3602          			reviewHillDisplay = 0;
   \   00000118   0030A003           MOVEQ    R3,#+0
   \                     ??IncrementDisplayType_6:
   \   0000011C   4C36C0E5           STRB     R3,[R0, #+1612]
   \   00000120   4B26C0E5           STRB     R2,[R0, #+1611]
   \   00000124   4A16C0E5           STRB     R1,[R0, #+1610]
   \   00000128   49E6C0E5           STRB     LR,[R0, #+1609]
   \   0000012C   48C6C0E5           STRB     R12,[R0, #+1608]
   3603          		break;
   3604          	}
   3605          }
   \   00000130   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   72620000           DC8      0x72, 0x62, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   ........           DC32     RaceSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_1:
   \   00000000   ........           DC32     screen_scrolling

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_2:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_3:
   \   00000000   ........           DC32     hDisplayClosestTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_4:
   \   00000000   ........           DC32     sysData+0x7E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_5:
   \   00000000   ........           DC32     RaceSetupScreenList+0x3B8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_6:
   \   00000000   ........           DC32     sysData+0x8F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_7:
   \   00000000   ........           DC32     sysData+0xA0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_8:
   \   00000000   ........           DC32     trackTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_9:
   \   00000000   ........           DC32     numberOfTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_10:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_11:
   \   00000000   ........           DC32     TRACK_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113:
   \   00000000   ........           DC32     RaceSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_1:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_2:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_3:
   \   00000000   ........           DC32     BannerRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_4:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_1:
   \   00000000   ........           DC32     bmTrackText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_2:
   \   00000000   ........           DC32     bmChooseTrack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_3:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_4:
   \   00000000   ........           DC32     trackShortList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_5:
   \   00000000   ........           DC32     trackTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_6:
   \   00000000   ........           DC32     numberOfShortListTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_7:
   \   00000000   ........           DC32     sysData+0xA0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_8:
   \   00000000   ........           DC32     sysData+0x7E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_9:
   \   00000000   ........           DC32     pressingbutton_semaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_10:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115:
   \   00000000   2F121F3F           DC32     0x3f1f122f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116:
   \   00000000   ........           DC32     hDisplayClosestTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116_1:
   \   00000000   ........           DC32     sysData+0x8F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable117:
   \   00000000   ........           DC32     raceModeState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121:
   \   00000000   ........           DC32     bmGreenCheck

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121_1:
   \   00000000   ........           DC32     RaceSetupScreenList+0x3CC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_1:
   \   00000000   ........           DC32     bmRedButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_2:
   \   00000000   80808000           DC32     0x808080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_3:
   \   00000000   ........           DC32     bmYellowButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_4:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122_5:
   \   00000000   ........           DC32     bmGreenButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   ........           DC32     bmBlackBlankButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable125:
   \   00000000   ........           DC32     bmBlueButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable126:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   ........           DC32     bmTopFakeButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_1:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   ........           DC32     bmDoubleBlueButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable131:
   \   00000000   ........           DC32     bmOrangeButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable131_1:
   \   00000000   2F121F3F           DC32     0x3f1f122f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable133:
   \   00000000   ........           DC32     bmMediumBlueButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable135:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable135_1:
   \   00000000   5C000000           DC8      "\\",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136:
   \   00000000   ........           DC32     GUI_Font24B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137:
   \   00000000   5C000000           DC8      "\\",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_1:
   \   00000000   72620000           DC8      0x72, 0x62, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_2:
   \   00000000   8054FF00           DC32     0xff5480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_3:
   \   00000000   ........           DC32     bmShortTopBar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_4:
   \   00000000   ........           DC32     bmShortBottomBar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_5:
   \   00000000   ........           DC32     bmTopBar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_6:
   \   00000000   25730000           DC8      0x25, 0x73, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable138:
   \   00000000   ........           DC32     bmBottomBar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable138_1:
   \   00000000   ........           DC32     LISTVIEW_CompareText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable141:
   \   00000000   ........           DC32     RaceSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable141_1:
   \   00000000   ........           DC32     bmBackgroundWithPanel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142:
   \   00000000   ........           DC32     bmChooseTrack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable143:
   \   00000000   5C000000           DC8      "\\",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable143_1:
   \   00000000   ........           DC32     bmTrackText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable144:
   \   00000000   72620000           DC8      0x72, 0x62, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_1:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_2:
   \   00000000   ........           DC32     bmGreenCheck

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_3:
   \   00000000   ........           DC32     bmBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_4:
   \   00000000   ........           DC32     bmLapsQualifyText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_5:
   \   00000000   80808000           DC32     0x808080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_6:
   \   00000000   ........           DC32     bmDriverText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_7:
   \   00000000   ........           DC32     bmVehicleText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145_8:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146:
   \   00000000   ........           DC32     MY_SESSIONS_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   ........           DC32     selectedSessionUnsorted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable147_1:
   \   00000000   ........           DC32     pLaps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148:
   \   00000000   ........           DC32     pLaps+0x6BC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable150:
   \   00000000   ........           DC32     pLaps+0xDC6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable151:
   \   00000000   ........           DC32     DRIVER_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable151_1:
   \   00000000   ........           DC32     VEHICLE_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable151_2:
   \   00000000   ........           DC32     SessionNameData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable156:
   \   00000000   ........           DC32     RaceSetupScreenList+0x44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable156_1:
   \   00000000   ........           DC32     sysData+0x7E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable156_2:
   \   00000000   ........           DC32     RaceSetupScreenList+0x110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable156_3:
   \   00000000   ........           DC32     sysData+0x8F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable156_4:
   \   00000000   ........           DC32     RaceSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable157:
   \   00000000   ........           DC32     sysData+0xA0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158_1:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158_2:
   \   00000000   ........           DC32     trackTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158_3:
   \   00000000   ........           DC32     numberOfTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable159:
   \   00000000   ........           DC32     selectedSessionUnsorted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable159_1:
   \   00000000   ........           DC32     numberOfShortListTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160:
   \   00000000   ........           DC32     trackShortList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161:
   \   00000000   ........           DC32     trackData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable163:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable164:
   \   00000000   ........           DC32     MY_SESSIONS_PATH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable165:
   \   00000000   ........           DC32     SessionNameData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable165_1:
   \   00000000   ........           DC32     selectedSessionUnsorted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable166:
   \   00000000   ........           DC32     pLaps+0x70C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable166_1:
   \   00000000   ........           DC32     modalWindowUp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167:
   \   00000000   4E2F4100           DC8      "N/A"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_1:
   \   00000000   ........           DC32     RaceSetupScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_2:
   \   00000000   80808000           DC32     0x808080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_3:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_4:
   \   00000000   ........           DC32     trackTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_5:
   \   00000000   ........           DC32     numberOfTracks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_6:
   \   00000000   ........           DC32     pLaps+0xA56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_7:
   \   00000000   ........           DC32     pLaps+0xCAE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_8:
   \   00000000   ........           DC32     pLaps+0xB1E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_9:
   \   00000000   ........           DC32     pLaps+0xBE6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_10:
   \   00000000   ........           DC32     pLaps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167_11:
   \   00000000   ........           DC32     hBestTime

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR!">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4552524F5221       DC8 69, 82, 82, 79, 82, 33, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter New Driver Name">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 78, 101, 119, 32
   \              4E657720    
   \   0000000A   447269766572       DC8 68, 114, 105, 118, 101, 114, 32, 78, 97, 109
   \              204E616D    
   \   00000014   65000000           DC8 101, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter New Vehicle Name">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 78, 101, 119, 32
   \              4E657720    
   \   0000000A   56656869636C       DC8 86, 101, 104, 105, 99, 108, 101, 32, 78, 97
   \              65204E61    
   \   00000014   6D650000           DC8 109, 101, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter New Track Name">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 78, 101, 119, 32
   \              4E657720    
   \   0000000A   547261636B20       DC8 84, 114, 97, 99, 107, 32, 78, 97, 109, 101
   \              4E616D65    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Driver Name">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   456469742044       DC8 69, 100, 105, 116, 32, 68, 114, 105, 118, 101
   \              72697665    
   \   0000000A   72204E616D65       DC8 114, 32, 78, 97, 109, 101, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Vehicle Name">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   456469742056       DC8 69, 100, 105, 116, 32, 86, 101, 104, 105, 99
   \              65686963    
   \   0000000A   6C65204E616D       DC8 108, 101, 32, 78, 97, 109, 101, 0, 0, 0
   \              65000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Track Name">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   456469742054       DC8 69, 100, 105, 116, 32, 84, 114, 97, 99, 107
   \              7261636B    
   \   0000000A   204E616D6500       DC8 32, 78, 97, 109, 101, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s%d">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   257325640000       DC8 37, 115, 37, 100, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ".dat">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   2E6461740000       DC8 46, 100, 97, 116, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ".tmp">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   2E746D700000       DC8 46, 116, 109, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "All Tracks - World">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   416C6C205472       DC8 65, 108, 108, 32, 84, 114, 97, 99, 107, 115
   \              61636B73    
   \   0000000A   202D20576F72       DC8 32, 45, 32, 87, 111, 114, 108, 100, 0, 0
   \              6C640000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Not a valid name.">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4E6F74206120       DC8 78, 111, 116, 32, 97, 32, 118, 97, 108, 105
   \              76616C69    
   \   0000000A   64206E616D65       DC8 100, 32, 110, 97, 109, 101, 46, 0, 0, 0
   \              2E000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Please enter a valid ...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   506C65617365       DC8 80, 108, 101, 97, 115, 101, 32, 101, 110, 116
   \              20656E74    
   \   0000000A   657220612076       DC8 101, 114, 32, 97, 32, 118, 97, 108, 105, 100
   \              616C6964    
   \   00000014   206E616D652E       DC8 32, 110, 97, 109, 101, 46, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F4B0000           DC8 79, 75, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "WARNING">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   5741524E494E       DC8 87, 65, 82, 78, 73, 78, 71, 0
   \              4700        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "About to Delete Driver!">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   41626F757420       DC8 65, 98, 111, 117, 116, 32, 116, 111, 32, 68
   \              746F2044    
   \   0000000A   656C65746520       DC8 101, 108, 101, 116, 101, 32, 68, 114, 105, 118
   \              44726976    
   \   00000014   65722100           DC8 101, 114, 33, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Are you sure?">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   41726520796F       DC8 65, 114, 101, 32, 121, 111, 117, 32, 115, 117
   \              75207375    
   \   0000000A   72653F000000       DC8 114, 101, 63, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Within %d km">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   57697468696E       DC8 87, 105, 116, 104, 105, 110, 32, 37, 100, 32
   \              20256420    
   \   0000000A   6B6D00000000       DC8 107, 109, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Within %d miles">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   57697468696E       DC8 87, 105, 116, 104, 105, 110, 32, 37, 100, 32
   \              20256420    
   \   0000000A   6D696C657300       DC8 109, 105, 108, 101, 115, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Delete Driver">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   44656C657465       DC8 68, 101, 108, 101, 116, 101, 32, 68, 114, 105
   \              20447269    
   \   0000000A   766572000000       DC8 118, 101, 114, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Edit Name">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   45646974204E       DC8 69, 100, 105, 116, 32, 78, 97, 109, 101, 0
   \              616D6500    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "New Driver">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4E6577204472       DC8 78, 101, 119, 32, 68, 114, 105, 118, 101, 114
   \              69766572    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Select Driver">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   53656C656374       DC8 83, 101, 108, 101, 99, 116, 32, 68, 114, 105
   \              20447269    
   \   0000000A   766572000000       DC8 118, 101, 114, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Vehicle Settings">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   56656869636C       DC8 86, 101, 104, 105, 99, 108, 101, 32, 83, 101
   \              65205365    
   \   0000000A   7474696E6773       DC8 116, 116, 105, 110, 103, 115, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Delete Vehicle">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   44656C657465       DC8 68, 101, 108, 101, 116, 101, 32, 86, 101, 104
   \              20566568    
   \   0000000A   69636C650000       DC8 105, 99, 108, 101, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "New Vehicle">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4E6577205665       DC8 78, 101, 119, 32, 86, 101, 104, 105, 99, 108
   \              6869636C    
   \   0000000A   6500               DC8 101, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Select Vehicle">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   53656C656374       DC8 83, 101, 108, 101, 99, 116, 32, 86, 101, 104
   \              20566568    
   \   0000000A   69636C650000       DC8 105, 99, 108, 101, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Delete Track">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   44656C657465       DC8 68, 101, 108, 101, 116, 101, 32, 84, 114, 97
   \              20547261    
   \   0000000A   636B00000000       DC8 99, 107, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Confirm Track">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   436F6E666972       DC8 67, 111, 110, 102, 105, 114, 109, 32, 84, 114
   \              6D205472    
   \   0000000A   61636B000000       DC8 97, 99, 107, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Auto-Create Track">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4175746F2D43       DC8 65, 117, 116, 111, 45, 67, 114, 101, 97, 116
   \              72656174    
   \   0000000A   652054726163       DC8 101, 32, 84, 114, 97, 99, 107, 0, 0, 0
   \              6B000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Settings">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53657474696E       DC8 83, 101, 116, 116, 105, 110, 103, 115, 0, 0
   \              67730000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "New Track">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4E6577205472       DC8 78, 101, 119, 32, 84, 114, 97, 99, 107, 0
   \              61636B00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Type">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   547970650000       DC8 84, 121, 112, 101, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Drive">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   447269766500       DC8 68, 114, 105, 118, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AutoX">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4175746F5800       DC8 65, 117, 116, 111, 88, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Drag">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   447261670000       DC8 68, 114, 97, 103, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Hill">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   48696C6C0000       DC8 72, 105, 108, 108, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Road">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   526F61640000       DC8 82, 111, 97, 100, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Track out of range">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   547261636B20       DC8 84, 114, 97, 99, 107, 32, 111, 117, 116, 32
   \              6F757420    
   \   0000000A   6F662072616E       DC8 111, 102, 32, 114, 97, 110, 103, 101, 0, 0
   \              67650000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LAPPING MODE\\nPredicti...">`:
   \   00000000                      ; Initializer data, 76 bytes
   \   00000000   4C415050494E       DC8 76, 65, 80, 80, 73, 78, 71, 32, 77, 79
   \              47204D4F    
   \   0000000A   44450A507265       DC8 68, 69, 10, 80, 114, 101, 100, 105, 99, 116
   \              64696374    
   \   00000014   697665206C61       DC8 105, 118, 101, 32, 108, 97, 112, 32, 116, 105
   \              70207469    
   \   0000001E   6D65720A636F       DC8 109, 101, 114, 10, 99, 111, 109, 112, 97, 114
   \              6D706172    
   \   00000028   657320616761       DC8 101, 115, 32, 97, 103, 97, 105, 110, 115, 116
   \              696E7374    
   \   00000032   204265737420       DC8 32, 66, 101, 115, 116, 32, 76, 97, 112, 10
   \              4C61700A    
   \   0000003C   657665722072       DC8 101, 118, 101, 114, 32, 114, 101, 99, 111, 114
   \              65636F72    
   \   00000046   646564000000       DC8 100, 101, 100, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "QUALIFYING MODE\\nPredi...">`:
   \   00000000                      ; Initializer data, 84 bytes
   \   00000000   5155414C4946       DC8 81, 85, 65, 76, 73, 70, 89, 73, 78, 71
   \              59494E47    
   \   0000000A   204D4F44450A       DC8 32, 77, 79, 68, 69, 10, 80, 114, 101, 100
   \              50726564    
   \   00000014   696374697665       DC8 105, 99, 116, 105, 118, 101, 32, 108, 97, 112
   \              206C6170    
   \   0000001E   2074696D6572       DC8 32, 116, 105, 109, 101, 114, 10, 99, 111, 109
   \              0A636F6D    
   \   00000028   706172657320       DC8 112, 97, 114, 101, 115, 32, 97, 103, 97, 105
   \              61676169    
   \   00000032   6E7374204375       DC8 110, 115, 116, 32, 67, 117, 114, 114, 101, 110
   \              7272656E    
   \   0000003C   740A53657373       DC8 116, 10, 83, 101, 115, 115, 105, 111, 110, 32
   \              696F6E20    
   \   00000046   6C6170207469       DC8 108, 97, 112, 32, 116, 105, 109, 101, 32, 111
   \              6D65206F    
   \   00000050   6E6C7900           DC8 110, 108, 121, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Best Lap: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   42657374204C       DC8 66, 101, 115, 116, 32, 76, 97, 112, 58, 32
   \              61703A20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Time: ">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   54696D653A20       DC8 84, 105, 109, 101, 58, 32, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Best Lap: %d">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   42657374204C       DC8 66, 101, 115, 116, 32, 76, 97, 112, 58, 32
   \              61703A20    
   \   0000000A   256400000000       DC8 37, 100, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Run Time: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   52756E205469       DC8 82, 117, 110, 32, 84, 105, 109, 101, 58, 32
   \              6D653A20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1/4mi ET: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   312F346D6920       DC8 49, 47, 52, 109, 105, 32, 69, 84, 58, 32
   \              45543A20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1/8mi ET: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   312F386D6920       DC8 49, 47, 56, 109, 105, 32, 69, 84, 58, 32
   \              45543A20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1000\\' ET: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   313030302720       DC8 49, 48, 48, 48, 39, 32, 69, 84, 58, 32
   \              45543A20    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Elapsed: ">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   456C61707365       DC8 69, 108, 97, 112, 115, 101, 100, 58, 32, 0
   \              643A2000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Elapsed:">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   456C61707365       DC8 69, 108, 97, 112, 115, 101, 100, 58, 0, 0
   \              643A0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12:%02d am">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   31323A253032       DC8 49, 50, 58, 37, 48, 50, 100, 32, 97, 109
   \              6420616D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d:%02d am">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   25643A253032       DC8 37, 100, 58, 37, 48, 50, 100, 32, 97, 109
   \              6420616D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12:%02d pm">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   31323A253032       DC8 49, 50, 58, 37, 48, 50, 100, 32, 112, 109
   \              6420706D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d:%02d pm">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   25643A253032       DC8 37, 100, 58, 37, 48, 50, 100, 32, 112, 109
   \              6420706D    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Race">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   526163650000       DC8 82, 97, 99, 101, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Drv: %s">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4472763A2025       DC8 68, 114, 118, 58, 32, 37, 115, 0
   \              7300        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Veh: %s">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   5665683A2025       DC8 86, 101, 104, 58, 32, 37, 115, 0
   \              7300        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Max: ">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4D61783A2000       DC8 77, 97, 120, 58, 32, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Dst: ">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4473743A2000       DC8 68, 115, 116, 58, 32, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Older File Format">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4F6C64657220       DC8 79, 108, 100, 101, 114, 32, 70, 105, 108, 101
   \              46696C65    
   \   0000000A   20466F726D61       DC8 32, 70, 111, 114, 109, 97, 116, 0, 0, 0
   \              74000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "YES">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   59455300           DC8 89, 69, 83, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CANCEL">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   43414E43454C       DC8 67, 65, 78, 67, 69, 76, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "About to Delete Vehicle!">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   41626F757420       DC8 65, 98, 111, 117, 116, 32, 116, 111, 32, 68
   \              746F2044    
   \   0000000A   656C65746520       DC8 101, 108, 101, 116, 101, 32, 86, 101, 104, 105
   \              56656869    
   \   00000014   636C65210000       DC8 99, 108, 101, 33, 0, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "About to Delete Track!">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   41626F757420       DC8 65, 98, 111, 117, 116, 32, 116, 111, 32, 68
   \              746F2044    
   \   0000000A   656C65746520       DC8 101, 108, 101, 116, 101, 32, 84, 114, 97, 99
   \              54726163    
   \   00000014   6B210000           DC8 107, 33, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "A file of this name a...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   412066696C65       DC8 65, 32, 102, 105, 108, 101, 32, 111, 102, 32
   \              206F6620    
   \   0000000A   74686973206E       DC8 116, 104, 105, 115, 32, 110, 97, 109, 101, 32
   \              616D6520    
   \   00000014   616C72656164       DC8 97, 108, 114, 101, 97, 100, 121, 32, 101, 120
   \              79206578    
   \   0000001E   697374732100       DC8 105, 115, 116, 115, 33, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Replace?">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5265706C6163       DC8 82, 101, 112, 108, 97, 99, 101, 63, 0, 0
   \              653F0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4E4F0000           DC8 78, 79, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4552524F5200       DC8 69, 82, 82, 79, 82, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "This is the name of a...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   546869732069       DC8 84, 104, 105, 115, 32, 105, 115, 32, 116, 104
   \              73207468    
   \   0000000A   65206E616D65       DC8 101, 32, 110, 97, 109, 101, 32, 111, 102, 32
   \              206F6620    
   \   00000014   612070726564       DC8 97, 32, 112, 114, 101, 100, 101, 102, 105, 110
   \              6566696E    
   \   0000001E   656400000000       DC8 101, 100, 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "track or this name is...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   747261636B20       DC8 116, 114, 97, 99, 107, 32, 111, 114, 32, 116
   \              6F722074    
   \   0000000A   686973206E61       DC8 104, 105, 115, 32, 110, 97, 109, 101, 32, 105
   \              6D652069    
   \   00000014   7320616C7265       DC8 115, 32, 97, 108, 114, 101, 97, 100, 121, 32
   \              61647920    
   \   0000001E   696E20757365       DC8 105, 110, 32, 117, 115, 101, 33, 0, 0, 0
   \              21000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Please change the name.">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   506C65617365       DC8 80, 108, 101, 97, 115, 101, 32, 99, 104, 97
   \              20636861    
   \   0000000A   6E6765207468       DC8 110, 103, 101, 32, 116, 104, 101, 32, 110, 97
   \              65206E61    
   \   00000014   6D652E00           DC8 109, 101, 46, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Cannot delete this tr...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   43616E6E6F74       DC8 67, 97, 110, 110, 111, 116, 32, 100, 101, 108
   \              2064656C    
   \   0000000A   657465207468       DC8 101, 116, 101, 32, 116, 104, 105, 115, 32, 116
   \              69732074    
   \   00000014   7261636B2100       DC8 114, 97, 99, 107, 33, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "There are too many se...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   546865726520       DC8 84, 104, 101, 114, 101, 32, 97, 114, 101, 32
   \              61726520    
   \   0000000A   746F6F206D61       DC8 116, 111, 111, 32, 109, 97, 110, 121, 32, 115
   \              6E792073    
   \   00000014   657373696F6E       DC8 101, 115, 115, 105, 111, 110, 32, 102, 105, 108
   \              2066696C    
   \   0000001E   657321000000       DC8 101, 115, 33, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Some sessions might n...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   536F6D652073       DC8 83, 111, 109, 101, 32, 115, 101, 115, 115, 105
   \              65737369    
   \   0000000A   6F6E73206D69       DC8 111, 110, 115, 32, 109, 105, 103, 104, 116, 32
   \              67687420    
   \   00000014   6E6F74206265       DC8 110, 111, 116, 32, 98, 101, 32, 108, 105, 115
   \              206C6973    
   \   0000001E   746564000000       DC8 116, 101, 100, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Delete some sessions ...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   44656C657465       DC8 68, 101, 108, 101, 116, 101, 32, 115, 111, 109
   \              20736F6D    
   \   0000000A   652073657373       DC8 101, 32, 115, 101, 115, 115, 105, 111, 110, 115
   \              696F6E73    
   \   00000014   20746F206D61       DC8 32, 116, 111, 32, 109, 97, 107, 101, 32, 114
   \              6B652072    
   \   0000001E   6F6F6D000000       DC8 111, 111, 109, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "rb">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   72620000           DC8 114, 98, 0, 0

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\\\">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5C00               DC8 92, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25730000           DC8 37, 115, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "N/A">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4E2F4100           DC8 78, 47, 65, 0
   3606          
   3607          /*************************** End of file ****************************/
   3608          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AutoCreateNewTrack                  8
     ChangeVehicle                      16
     CheckForDuplicateName             280
     CheckWorkingTrackName               8
     ClearSessionNameData                4
     ClearWorkingTrackName               0
     CreateDummyLapList                  8
     CreateFileList                    176
     CreateLapsList                    168
     CreateNewEntry                    264
     CreateNewTrack                   5304
     CreateSprites                      24
     CreateTrackList                    24
     DeleteBestLaps                      0
     DeleteFileList                     16
     DeleteSession                     160
     DeleteSprites                      16
     DisplayAlphaList                   48
     DisplayDriverSelection             40
     DisplayKeyboard                    32
     DisplayLapsSelection               48
     DisplayTrackSelection               8
     DisplayVehicleSelection            40
     DriverSelectionPaint                8
     EditTypeToFileType                  0
     ExitTrackSelectionScreen            8
     FindFile                           24
     FindLastTrackOfCurrentType        160
     FindNewestFile                    160
     FindSelection                      16
     FinishDisplayTrackSelection        72
     FinishLoadingTrackData              8
     GetAutoxTime                       16
     GetBestLap                         16
     GetBestLapAutocross                 8
     GetBestLapNumber                    0
     GetDragTime                        16
     GetNextChar                         0
     GetNextNum                          0
     GetNextString                       0
     GetNumTracks                        0
     GetRaceSetupScreensWindowHandle
                                         0
     GetRadiusText                       8
     GetSelectedReviewModeText           0
     GetSessionCharacter                 0
     GetSessionData                    152
     GetSessionDataString               24
     GetSessionName                    152
     GetSessionNameData                176
     GetSessionText                      0
     GetStringNumber                    24
     GetTrackNumber                      0
     GetTrackSelectionWindowHandle       8
     HideSprites                         8
     IncrementDisplayType               12
     InitReviewDisplayTypes              0
     InvalidName                        16
     LapsSelectionPaint                  8
     RSDeleteDriver                     16
     RSDeleteFile                      160
     RSDeleteTrack                      32
     RSDeleteVehicle                    16
     RSSKillKeyboard                     8
     RaceSetupIgnoreNextKeyRelease       0
     RaceSetupPopup                     32
     RaceSetupScreensCallback           96
     ReadAllSessionData                192
     RenameCurrentEntry               1048
     ResetAllFileLists                  24
     SaveBestLap                      3192
     SelectThisTrack                    64
     SessionTypeToTrackType              0
     SetBestTimeButtonText             128
     SetRaceSetupScreensWindowHandle
                                         0
     SetTrackTableDefaultData           24
     SetTrackTypeButtonText              8
     SetWorkingTrackName                 8
     TooManySessionsPopup               24
     TrackSelectionPaint                 8
     TrackTypeToSessionType              0
     TryAgainKeyboard                   32
     UnhideSprites                       8
     UpdateList                         24
     UpdateTrackList                    48
     ValidFileName                      16
     ValidRaceSession                   16
     ValidSessionType                    0
     ValidateName                        0
     VehicleSelectionPaint               8
     parseName                           0
     parseSessionName                   32


   Section sizes:

     Function/Label                          Bytes
     --------------                          -----
     NullEntry                                   1
     NotAvailable                               40
     SessionNameData                         15000
     RaceSetupScreenList                     17172
     pTracksShort
     numberOfShortListTracksUser
     pDrivers
     pVehicles
     hRaceSetupScreens
     clickedOnThisScreen
     hDriverList
     hVehicleList
     hTrackList
     hLapsCheck
     hQualifyingCheck
     hTrackTypeBtn
     numDrivers
     numVehicles
     numTracks
     button
     pEntryKeyboard
     trackTableIndex
     hRSDeleteButton
     hTop
     hBottom
     hideLevel
     vehicleSelectionChanged
     mode
     editType
     ctType
     newName
     selectedTrackName
     DriverList
     VehicleList
     tempVehicleName
     GetRaceSetupScreensWindowHandle
                                                12
     SetRaceSetupScreensWindowHandle
                                                12
     RSSKillKeyboard                            92
     GetTrackSelectionWindowHandle              40
     TryAgainKeyboard                          244
     DisplayKeyboard                           328
     CreateNewEntry                            244
     CheckForDuplicateName                     236
     EditTypeToFileType                         56
     GetTrackNumber                             48
     FindLastTrackOfCurrentType                332
     AutoCreateNewTrack                        204
     CreateNewTrack                            344
     RenameCurrentEntry                        560
     ValidateName                               32
     UpdateList                                460
     RaceSetupScreensCallback                 3096
     ChangeVehicle                              88
     FinishLoadingTrackData                     48
     ExitTrackSelectionScreen                   36
     GetRadiusText                             124
     SelectThisTrack                           192
     CheckWorkingTrackName                      36
     SetWorkingTrackName                        12
     ClearWorkingTrackName                      24
     DisplayDriverSelection                    612
     DisplayVehicleSelection                   720
     DisplayTrackSelection                      76
     FinishDisplayTrackSelection              1272
     CreateSprites                             128
     DeleteSprites                              68
     HideSprites                                56
     UnhideSprites                              64
     UpdateTrackList                           640
     DisplayAlphaList                          588
     GetNumTracks                               12
     SetTrackTypeButtonText                    196
     TrackSelectionPaint                       128
     DisplayLapsSelection                      504
     LapsSelectionPaint                        184
     DriverSelectionPaint                       64
     VehicleSelectionPaint                      64
     RaceSetupIgnoreNextKeyRelease              16
     GetSessionName                            212
     DeleteSession                              60
     CreateLapsList                            240
     CreateDummyLapList                         32
     ReadAllSessionData                        884
     GetBestLapAutocross                        48
     CreateFileList                            360
     SaveBestLap                               300
     GetBestLap                                228
     GetAutoxTime                               96
     GetDragTime                               228
     DeleteFileList                             68
     DeleteBestLaps                             72
     GetBestLapNumber                           16
     parseName                                 148
     ValidFileName                             192
     ValidRaceSession                          344
     FindSelection                             124
     BadNameDialog                              96
     InvalidName                                80
     ResetAllFileLists                         180
     NoneInRange                                20
     CreateTrackList                           440
     SetTrackTableDefaultData                  376
     SessionTypeToTrackType                    152
     TrackTypeToSessionType                     96
     FindFile                                   96
     parseSessionName                          524
     GetNextString                              48
     GetNextChar                               132
     GetNextNum                                 52
     ValidSessionType                          112
     GetSessionCharacter                       160
     GetSessionData                            148
     GetSessionNameData                        272
     ClearSessionNameData                       16
     FindNewestFile                            128
     DeleteDriverResources                     120
     DeleteVehicleResources                    120
     DeleteTrackResources                      120
     FileAlreadyExistsResources                120
     TrackAlreadyExistsResources               144
     CantDeleteResources                        72
     RaceSetupPopup                            484
     TooManyTracksResourcesPrim                120
     TooManyTracksResourcesSub                 120
     TooManySessionsPopup                      124
     RSDeleteDriver                            156
     RSDeleteVehicle                           156
     RSDeleteTrack                             352
     RSDeleteFile                               36
     GetSessionText                             56
     GetSelectedReviewModeText                 164
     pLaps                                    6532
     numLaps
     BestLaps
     BestLapNumber
     reviewRaceDisplay
     reviewDriveDisplay
     reviewAutoXDisplay
     reviewDragDisplay
     reviewHillDisplay
     RoadRaceDisplayTypes
     DriveDisplayTypes
     DragDisplayTypes
     AutoXDisplayTypes
     HillDisplayTypes
     sessionName
     fullSessionName
     NameStruct
     SessionData
     InitReviewDisplayTypes                     20
     SetBestTimeButtonText                    1308
     GetSessionDataString                      324
     GetStringNumber                           148
     IncrementDisplayType                      308
     ??DataTable101                              4
     ??DataTable104                              4
     ??DataTable104_1                            4
     ??DataTable104_2                            4
     ??DataTable104_3                            4
     ??DataTable104_4                            4
     ??DataTable104_5                            4
     ??DataTable104_6                            4
     ??DataTable104_7                            4
     ??DataTable104_8                            4
     ??DataTable104_9                            4
     ??DataTable104_10                           4
     ??DataTable104_11                           4
     ??DataTable105                              4
     ??DataTable113                              4
     ??DataTable113_1                            4
     ??DataTable113_2                            4
     ??DataTable113_3                            4
     ??DataTable113_4                            4
     ??DataTable114                              4
     ??DataTable114_1                            4
     ??DataTable114_2                            4
     ??DataTable114_3                            4
     ??DataTable114_4                            4
     ??DataTable114_5                            4
     ??DataTable114_6                            4
     ??DataTable114_7                            4
     ??DataTable114_8                            4
     ??DataTable114_9                            4
     ??DataTable114_10                           4
     ??DataTable115                              4
     ??DataTable116                              4
     ??DataTable116_1                            4
     ??DataTable117                              4
     ??DataTable121                              4
     ??DataTable121_1                            4
     ??DataTable122                              4
     ??DataTable122_1                            4
     ??DataTable122_2                            4
     ??DataTable122_3                            4
     ??DataTable122_4                            4
     ??DataTable122_5                            4
     ??DataTable124                              4
     ??DataTable125                              4
     ??DataTable126                              4
     ??DataTable127                              4
     ??DataTable127_1                            4
     ??DataTable129                              4
     ??DataTable131                              4
     ??DataTable131_1                            4
     ??DataTable133                              4
     ??DataTable135                              4
     ??DataTable135_1                            4
     ??DataTable136                              4
     ??DataTable137                              4
     ??DataTable137_1                            4
     ??DataTable137_2                            4
     ??DataTable137_3                            4
     ??DataTable137_4                            4
     ??DataTable137_5                            4
     ??DataTable137_6                            4
     ??DataTable138                              4
     ??DataTable138_1                            4
     ??DataTable141                              4
     ??DataTable141_1                            4
     ??DataTable142                              4
     ??DataTable143                              4
     ??DataTable143_1                            4
     ??DataTable144                              4
     ??DataTable145                              4
     ??DataTable145_1                            4
     ??DataTable145_2                            4
     ??DataTable145_3                            4
     ??DataTable145_4                            4
     ??DataTable145_5                            4
     ??DataTable145_6                            4
     ??DataTable145_7                            4
     ??DataTable145_8                            4
     ??DataTable146                              4
     ??DataTable147                              4
     ??DataTable147_1                            4
     ??DataTable148                              4
     ??DataTable150                              4
     ??DataTable151                              4
     ??DataTable151_1                            4
     ??DataTable151_2                            4
     ??DataTable156                              4
     ??DataTable156_1                            4
     ??DataTable156_2                            4
     ??DataTable156_3                            4
     ??DataTable156_4                            4
     ??DataTable157                              4
     ??DataTable158                              4
     ??DataTable158_1                            4
     ??DataTable158_2                            4
     ??DataTable158_3                            4
     ??DataTable159                              4
     ??DataTable159_1                            4
     ??DataTable160                              4
     ??DataTable161                              4
     ??DataTable163                              4
     ??DataTable164                              4
     ??DataTable165                              4
     ??DataTable165_1                            4
     ??DataTable166                              4
     ??DataTable166_1                            4
     ??DataTable167                              4
     ??DataTable167_1                            4
     ??DataTable167_2                            4
     ??DataTable167_3                            4
     ??DataTable167_4                            4
     ??DataTable167_5                            4
     ??DataTable167_6                            4
     ??DataTable167_7                            4
     ??DataTable167_8                            4
     ??DataTable167_9                            4
     ??DataTable167_10                           4
     ??DataTable167_11                           4
     ?<Constant "ERROR!">                        8
     ?<Constant "Enter New Driver Name">        24
     ?<Constant "Enter New Vehicle Name">       24
     ?<Constant "Enter New Track Name">         24
     ?<Constant "Edit Driver Name">             20
     ?<Constant "Edit Vehicle Name">            20
     ?<Constant "Edit Track Name">              16
     ?<Constant "%s%d">                          8
     ?<Constant ".dat">                          8
     ?<Constant ".tmp">                          8
     ?<Constant "All Tracks - World">           20
     ?<Constant "Not a valid name.">            20
     ?<Constant "Please enter a valid ...">     28
     ?<Constant "OK">                            4
     ?<Constant "WARNING">                       8
     ?<Constant "About to Delete Driver!">      24
     ?<Constant "Are you sure?">                16
     ?<Constant "Within %d km">                 16
     ?<Constant "Within %d miles">              16
     ?<Constant "Delete Driver">                16
     ?<Constant "Edit Name">                    12
     ?<Constant "New Driver">                   12
     ?<Constant "Select Driver">                16
     ?<Constant "Vehicle Settings">             20
     ?<Constant "Delete Vehicle">               16
     ?<Constant "New Vehicle">                  12
     ?<Constant "Select Vehicle">               16
     ?<Constant "Delete Track">                 16
     ?<Constant "Confirm Track">                16
     ?<Constant "Auto-Create Track">            20
     ?<Constant "Settings">                     12
     ?<Constant "New Track">                    12
     ?<Constant "Type">                          8
     ?<Constant "Drive">                         8
     ?<Constant "AutoX">                         8
     ?<Constant "Drag">                          8
     ?<Constant "Hill">                          8
     ?<Constant "Road">                          8
     ?<Constant "Track out of range">           20
     ?<Constant "LAPPING MODE\nPredicti...">    76
     ?<Constant "QUALIFYING MODE\nPredi...">    84
     ?<Constant "Best Lap: ">                   12
     ?<Constant "Time: ">                        8
     ?<Constant "Best Lap: %d">                 16
     ?<Constant "Run Time: ">                   12
     ?<Constant "1/4mi ET: ">                   12
     ?<Constant "1/8mi ET: ">                   12
     ?<Constant "1000\' ET: ">                  12
     ?<Constant "Elapsed: ">                    12
     ?<Constant "Elapsed:">                     12
     ?<Constant "12:%02d am">                   12
     ?<Constant "%d:%02d am">                   12
     ?<Constant "12:%02d pm">                   12
     ?<Constant "%d:%02d pm">                   12
     ?<Constant "Race">                          8
     ?<Constant "Drv: %s">                       8
     ?<Constant "Veh: %s">                       8
     ?<Constant "Max: ">                         8
     ?<Constant "Dst: ">                         8
     ?<Constant "Older File Format">            20
     ?<Constant "YES">                           4
     ?<Constant "CANCEL">                        8
     ?<Constant "About to Delete Vehicle!">     28
     ?<Constant "About to Delete Track!">       24
     ?<Constant "A file of this name a...">     36
     ?<Constant "Replace?">                     12
     ?<Constant "NO">                            4
     ?<Constant "ERROR">                         8
     ?<Constant "This is the name of a...">     36
     ?<Constant "track or this name is...">     40
     ?<Constant "Please change the name.">      24
     ?<Constant "Cannot delete this tr...">     28
     ?<Constant "There are too many se...">     36
     ?<Constant "Some sessions might n...">     36
     ?<Constant "Delete some sessions ...">     36
     ?<Constant "rb">                            4
     ?<Constant "">                              1
     ?<Constant "\\">                            2
     ?<Constant "%s">                            4
     ?<Constant "N/A">                           4

 
 15 000 bytes in section .bss
 23 704 bytes in section .data
    484 bytes in section .rodata
 25 000 bytes in section .text
 
 25 000 bytes of CODE  memory
    484 bytes of CONST memory
 38 704 bytes of DATA  memory

Errors: none
Warnings: none
