###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:27 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_16.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_16.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_16.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_16.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_16.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_16.c
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29            #include "WM.h"
     30          #endif
     31          
     32          /* Memory device capabilities are compiled only if support for them is enabled.*/ 
     33          #if GUI_SUPPORT_MEMDEV
     34          
     35          /*********************************************************************
     36          *
     37          *       Macros
     38          *
     39          **********************************************************************
     40          */
     41          
     42          #define PIXELINDEX                      U16
     43          #define BITSPERPIXEL                     16
     44          #define API_LIST      GUI_MEMDEV__APIList16
     45          #define DEVICE_API     GUI_MEMDEV_DEVICE_16
     46          
     47          /*********************************************************************
     48          *
     49          *       _DrawBitLine16BPP_DDB
     50          */
     51          static void _DrawBitLine16BPP_DDB(GUI_DEVICE * pDevice, GUI_USAGE * pUsage, int x, int y, const U16 * pSrc, int xsize, PIXELINDEX * pDest) {
     52            GUI_USE_PARA(pDevice);
     53            if (pSrc && pDest) {
     54              GUI_MEMCPY(pDest, pSrc, xsize * 2);
     55              if (pUsage) {
     56                GUI_USAGE_AddHLine(pUsage, x, y, xsize);
     57              }
     58            }
     59          }
     60          
     61          /*********************************************************************
     62          *
     63          *       _DrawBitLine32BPP
     64          */
     65          /**///TBD!!!
     66          static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, GUI_USAGE * pUsage, int x, int y, const U32 * pSrc, int xsize, PIXELINDEX * pDest) {
     67            if (pSrc && pDest) {
     68              if (pUsage) {
     69                GUI_USAGE_AddHLine(pUsage, x, y, xsize);
     70              }
     71              do {
     72                U32 Color;
     73                U16 Index;
     74                
     75                Color = *pSrc;
     76                Index = pDevice->pColorConvAPI->pfColor2Index(Color); //GUI_MEMDEV__APIList16.pfColor2Index(Color);
     77                *pDest = Index;
     78                if (pUsage) {
     79                  GUI_USAGE_AddPixel(pUsage, x, y);
     80                }
     81                x++;
     82                pDest++;
     83                pSrc++;
     84              } while (--xsize);
     85            }
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       #include GUIDev code
     91          *
     92          **********************************************************************
     93          *
     94          * The main code is in an other "C" file.
     95          * This has been done to avoid duplication of code.
     96          */
     97          #include "GUIDEV_8.c"

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned long const aID[16]
   \                     aID:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   000000000100       DC32 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
   \              000002000000
   \              030000000400
   \              000005000000
   \              060000000700
   \              000008000000
   \              09000000    
   \   00000028   0A0000000B00       DC32 10, 11, 12, 13, 14, 15
   \              00000C000000
   \              0D0000000E00
   \              00000F000000

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine1BPP(struct GUI_DEVICE *, GUI_USAGE *, int, int, unsigned char const *, int, unsigned int, unsigned long const *, GUI_MEMDEV *, unsigned short *)
   \                     _DrawBitLine1BPP:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   28609DE5           LDR      R6,[SP, #+40]
   \   00000008   ........           LDR      R12,??DataTable11
   \   0000000C   0030D6E5           LDRB     R3,[R6, #+0]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   2C109DE5           LDR      R1,[SP, #+44]
   \   00000018   0C30D3E7           LDRB     R3,[R3, +R12]
   \   0000001C   089061E2           RSB      R9,R1,#+8
   \   00000020   0250A0E1           MOV      R5,R2
   \   00000024   53A1A0E1           ASR      R10,R3,R1
   \   00000028   ........           LDR      R1,??DataTable11_1
   \   0000002C   30709DE5           LDR      R7,[SP, #+48]
   \   00000030   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000034   34209DE5           LDR      R2,[SP, #+52]
   \   00000038   3C809DE5           LDR      R8,[SP, #+60]
   \   0000003C   031001E2           AND      R1,R1,#0x3
   \   00000040   030051E3           CMP      R1,#+3
   \   00000044   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000048   5200008A           BHI      ??_DrawBitLine1BPP_1
   \   0000004C   020000EA           B        ??_DrawBitLine1BPP_2
   \   00000050   3B0000EA           B        ??_DrawBitLine1BPP_3
   \   00000054   0F0000EA           B        ??_DrawBitLine1BPP_4
   \   00000058   390000EA           B        ??_DrawBitLine1BPP_3
   \                     ??_DrawBitLine1BPP_2:
   \   0000005C   090057E1           CMP      R7,R9
   \   00000060   0790A091           MOVLS    R9,R7
   \   00000064   097047E0           SUB      R7,R7,R9
   \                     ??_DrawBitLine1BPP_5:
   \   00000068   01000AE2           AND      R0,R10,#0x1
   \   0000006C   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000070   AAA0A0E1           LSR      R10,R10,#+1
   \   00000074   B200C8E0           STRH     R0,[R8], #+2
   \   00000078   019059E2           SUBS     R9,R9,#+1
   \   0000007C   F9FFFF1A           BNE      ??_DrawBitLine1BPP_5
   \   00000080   000057E3           CMP      R7,#+0
   \   00000084   4300000A           BEQ      ??_DrawBitLine1BPP_1
   \   00000088   0100F6E5           LDRB     R0,[R6, #+1]!
   \   0000008C   0890A0E3           MOV      R9,#+8
   \   00000090   0CA0D0E7           LDRB     R10,[R0, +R12]
   \   00000094   F0FFFFEA           B        ??_DrawBitLine1BPP_2
   \                     ??_DrawBitLine1BPP_4:
   \   00000098   04B092E5           LDR      R11,[R2, #+4]
   \   0000009C   0A0000EA           B        ??_DrawBitLine1BPP_6
   \                     ??_DrawBitLine1BPP_7:
   \   000000A0   01001AE3           TST      R10,#0x1
   \   000000A4   B0B0C811           STRHNE   R11,[R8, #+0]
   \   000000A8   028088E2           ADD      R8,R8,#+2
   \   000000AC   019059E2           SUBS     R9,R9,#+1
   \   000000B0   1E00001A           BNE      ??_DrawBitLine1BPP_8
   \                     ??_DrawBitLine1BPP_9:
   \   000000B4   000057E3           CMP      R7,#+0
   \   000000B8   3600000A           BEQ      ??_DrawBitLine1BPP_1
   \   000000BC   0100F6E5           LDRB     R0,[R6, #+1]!
   \   000000C0   ........           LDR      R1,??DataTable11
   \   000000C4   0890A0E3           MOV      R9,#+8
   \   000000C8   01A0D0E7           LDRB     R10,[R0, +R1]
   \                     ??_DrawBitLine1BPP_6:
   \   000000CC   090057E1           CMP      R7,R9
   \   000000D0   0790A091           MOVLS    R9,R7
   \   000000D4   097047E0           SUB      R7,R7,R9
   \   000000D8   000054E3           CMP      R4,#+0
   \   000000DC   1400000A           BEQ      ??_DrawBitLine1BPP_10
   \   000000E0   0D0000EA           B        ??_DrawBitLine1BPP_11
   \                     ??_DrawBitLine1BPP_12:
   \   000000E4   01001AE3           TST      R10,#0x1
   \   000000E8   0600000A           BEQ      ??_DrawBitLine1BPP_13
   \   000000EC   083094E5           LDR      R3,[R4, #+8]
   \   000000F0   00209DE5           LDR      R2,[SP, #+0]
   \   000000F4   0510A0E1           MOV      R1,R5
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   003093E5           LDR      R3,[R3, #+0]
   \   00000100   33FF2FE1           BLX      R3
   \   00000104   B0B0C8E1           STRH     R11,[R8, #+0]
   \                     ??_DrawBitLine1BPP_13:
   \   00000108   015085E2           ADD      R5,R5,#+1
   \   0000010C   028088E2           ADD      R8,R8,#+2
   \   00000110   019059E2           SUBS     R9,R9,#+1
   \   00000114   E6FFFF0A           BEQ      ??_DrawBitLine1BPP_9
   \   00000118   AAA0A0E1           LSR      R10,R10,#+1
   \                     ??_DrawBitLine1BPP_11:
   \   0000011C   00005AE3           CMP      R10,#+0
   \   00000120   EFFFFF1A           BNE      ??_DrawBitLine1BPP_12
   \   00000124   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000128   055089E0           ADD      R5,R9,R5
   \   0000012C   E0FFFFEA           B        ??_DrawBitLine1BPP_9
   \                     ??_DrawBitLine1BPP_8:
   \   00000130   AAA0A0E1           LSR      R10,R10,#+1
   \                     ??_DrawBitLine1BPP_10:
   \   00000134   00005AE3           CMP      R10,#+0
   \   00000138   D8FFFF1A           BNE      ??_DrawBitLine1BPP_7
   \   0000013C   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000140   DBFFFFEA           B        ??_DrawBitLine1BPP_9
   \                     ??_DrawBitLine1BPP_3:
   \   00000144   100090E5           LDR      R0,[R0, #+16]
   \   00000148   080090E5           LDR      R0,[R0, #+8]
   \   0000014C   30FF2FE1           BLX      R0
   \   00000150   030000EA           B        ??_DrawBitLine1BPP_14
   \                     ??_DrawBitLine1BPP_15:
   \   00000154   0110F6E5           LDRB     R1,[R6, #+1]!
   \   00000158   ........           LDR      R2,??DataTable11
   \   0000015C   0890A0E3           MOV      R9,#+8
   \   00000160   02A0D1E7           LDRB     R10,[R1, +R2]
   \                     ??_DrawBitLine1BPP_14:
   \   00000164   090057E1           CMP      R7,R9
   \   00000168   0790A091           MOVLS    R9,R7
   \   0000016C   097047E0           SUB      R7,R7,R9
   \                     ??_DrawBitLine1BPP_16:
   \   00000170   01001AE3           TST      R10,#0x1
   \   00000174   B010D811           LDRHNE   R1,[R8, #+0]
   \   00000178   AAA0A0E1           LSR      R10,R10,#+1
   \   0000017C   01102010           EORNE    R1,R0,R1
   \   00000180   B010C811           STRHNE   R1,[R8, #+0]
   \   00000184   028088E2           ADD      R8,R8,#+2
   \   00000188   019059E2           SUBS     R9,R9,#+1
   \   0000018C   F7FFFF1A           BNE      ??_DrawBitLine1BPP_16
   \   00000190   000057E3           CMP      R7,#+0
   \   00000194   EEFFFF1A           BNE      ??_DrawBitLine1BPP_15
   \                     ??_DrawBitLine1BPP_1:
   \   00000198   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000019C   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine2BPP(struct GUI_DEVICE *, GUI_USAGE *, int, int, unsigned char const *, int, int, unsigned long const *, unsigned short *)
   \                     _DrawBitLine2BPP:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   28609DE5           LDR      R6,[SP, #+40]
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000010   0010D6E5           LDRB     R1,[R6, #+0]
   \   00000014   04A060E2           RSB      R10,R0,#+4
   \   00000018   8000A0E1           LSL      R0,R0,#+1
   \   0000001C   11B0A0E1           LSL      R11,R1,R0
   \   00000020   ........           LDR      R0,??DataTable11_1
   \   00000024   0250A0E1           MOV      R5,R2
   \   00000028   1000D0E5           LDRB     R0,[R0, #+16]
   \   0000002C   30709DE5           LDR      R7,[SP, #+48]
   \   00000030   34809DE5           LDR      R8,[SP, #+52]
   \   00000034   38909DE5           LDR      R9,[SP, #+56]
   \   00000038   030010E2           ANDS     R0,R0,#0x3
   \   0000003C   0300000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   1300000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000048   3200003A           BCC      ??_DrawBitLine2BPP_2
   \   0000004C   410000EA           B        ??_DrawBitLine2BPP_3
   \                     ??_DrawBitLine2BPP_0:
   \   00000050   0A0CA0E1           MOV      R0,R10, LSL #+24
   \   00000054   200C57E1           CMP      R7,R0, LSR #+24
   \   00000058   07A0A0B1           MOVLT    R10,R7
   \   0000005C   FF000AE2           AND      R0,R10,#0xFF
   \   00000060   007047E0           SUB      R7,R7,R0
   \                     ??_DrawBitLine2BPP_4:
   \   00000064   FF000BE2           AND      R0,R11,#0xFF
   \   00000068   4003A0E1           ASR      R0,R0,#+6
   \   0000006C   000198E7           LDR      R0,[R8, +R0, LSL #+2]
   \   00000070   01A04AE2           SUB      R10,R10,#+1
   \   00000074   B200C9E0           STRH     R0,[R9], #+2
   \   00000078   0BB1A0E1           LSL      R11,R11,#+2
   \   0000007C   FFA01AE2           ANDS     R10,R10,#0xFF
   \   00000080   F7FFFF1A           BNE      ??_DrawBitLine2BPP_4
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   3200000A           BEQ      ??_DrawBitLine2BPP_3
   \   0000008C   04A0A0E3           MOV      R10,#+4
   \   00000090   01B0F6E5           LDRB     R11,[R6, #+1]!
   \   00000094   EDFFFFEA           B        ??_DrawBitLine2BPP_0
   \                     ??_DrawBitLine2BPP_1:
   \   00000098   0A0CA0E1           MOV      R0,R10, LSL #+24
   \   0000009C   200C57E1           CMP      R7,R0, LSR #+24
   \   000000A0   07A0A0B1           MOVLT    R10,R7
   \   000000A4   FF000AE2           AND      R0,R10,#0xFF
   \   000000A8   007047E0           SUB      R7,R7,R0
   \                     ??_DrawBitLine2BPP_5:
   \   000000AC   C0001BE3           TST      R11,#0xC0
   \   000000B0   0B00000A           BEQ      ??_DrawBitLine2BPP_6
   \   000000B4   FF000BE2           AND      R0,R11,#0xFF
   \   000000B8   4003A0E1           ASR      R0,R0,#+6
   \   000000BC   000198E7           LDR      R0,[R8, +R0, LSL #+2]
   \   000000C0   000054E3           CMP      R4,#+0
   \   000000C4   B000C9E1           STRH     R0,[R9, #+0]
   \   000000C8   0500000A           BEQ      ??_DrawBitLine2BPP_6
   \   000000CC   083094E5           LDR      R3,[R4, #+8]
   \   000000D0   00209DE5           LDR      R2,[SP, #+0]
   \   000000D4   0510A0E1           MOV      R1,R5
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   003093E5           LDR      R3,[R3, #+0]
   \   000000E0   33FF2FE1           BLX      R3
   \                     ??_DrawBitLine2BPP_6:
   \   000000E4   01A04AE2           SUB      R10,R10,#+1
   \   000000E8   029089E2           ADD      R9,R9,#+2
   \   000000EC   015085E2           ADD      R5,R5,#+1
   \   000000F0   0BB1A0E1           LSL      R11,R11,#+2
   \   000000F4   FFA01AE2           ANDS     R10,R10,#0xFF
   \   000000F8   EBFFFF1A           BNE      ??_DrawBitLine2BPP_5
   \   000000FC   000057E3           CMP      R7,#+0
   \   00000100   1400000A           BEQ      ??_DrawBitLine2BPP_3
   \   00000104   04A0A0E3           MOV      R10,#+4
   \   00000108   01B0F6E5           LDRB     R11,[R6, #+1]!
   \   0000010C   E1FFFFEA           B        ??_DrawBitLine2BPP_1
   \                     ??_DrawBitLine2BPP_7:
   \   00000110   04A0A0E3           MOV      R10,#+4
   \   00000114   01B0F6E5           LDRB     R11,[R6, #+1]!
   \                     ??_DrawBitLine2BPP_2:
   \   00000118   0A0CA0E1           MOV      R0,R10, LSL #+24
   \   0000011C   200C57E1           CMP      R7,R0, LSR #+24
   \   00000120   07A0A0B1           MOVLT    R10,R7
   \   00000124   FF000AE2           AND      R0,R10,#0xFF
   \   00000128   007047E0           SUB      R7,R7,R0
   \                     ??_DrawBitLine2BPP_8:
   \   0000012C   C0001BE3           TST      R11,#0xC0
   \   00000130   B000D911           LDRHNE   R0,[R9, #+0]
   \   00000134   01A04AE2           SUB      R10,R10,#+1
   \   00000138   0BB1A0E1           LSL      R11,R11,#+2
   \   0000013C   FF002012           EORNE    R0,R0,#0xFF
   \   00000140   B000C911           STRHNE   R0,[R9, #+0]
   \   00000144   029089E2           ADD      R9,R9,#+2
   \   00000148   FFA01AE2           ANDS     R10,R10,#0xFF
   \   0000014C   F6FFFF1A           BNE      ??_DrawBitLine2BPP_8
   \   00000150   000057E3           CMP      R7,#+0
   \   00000154   EDFFFF1A           BNE      ??_DrawBitLine2BPP_7
   \                     ??_DrawBitLine2BPP_3:
   \   00000158   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000015C   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine4BPP(struct GUI_DEVICE *, GUI_USAGE *, int, int, unsigned char const *, int, int, unsigned long const *, unsigned short *)
   \                     _DrawBitLine4BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   28509DE5           LDR      R5,[SP, #+40]
   \   0000000C   02A0A0E1           MOV      R10,R2
   \   00000010   2C009DE5           LDR      R0,[SP, #+44]
   \   00000014   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000018   03B0A0E1           MOV      R11,R3
   \   0000001C   0031A0E1           LSL      R3,R0,#+2
   \   00000020   1243A0E1           LSL      R4,R2,R3
   \   00000024   ........           LDR      R2,??DataTable11_1
   \   00000028   0190A0E1           MOV      R9,R1
   \   0000002C   1020D2E5           LDRB     R2,[R2, #+16]
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   30609DE5           LDR      R6,[SP, #+48]
   \   00000038   34709DE5           LDR      R7,[SP, #+52]
   \   0000003C   38809DE5           LDR      R8,[SP, #+56]
   \   00000040   021061E2           RSB      R1,R1,#+2
   \   00000044   032012E2           ANDS     R2,R2,#0x3
   \   00000048   0300000A           BEQ      ??_DrawBitLine4BPP_0
   \   0000004C   020052E3           CMP      R2,#+2
   \   00000050   1E00000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000054   6400003A           BCC      ??_DrawBitLine4BPP_2
   \   00000058   730000EA           B        ??_DrawBitLine4BPP_3
   \                     ??_DrawBitLine4BPP_0:
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0500000A           BEQ      ??_DrawBitLine4BPP_4
   \   00000064   FF4004E2           AND      R4,R4,#0xFF
   \   00000068   4402A0E1           ASR      R0,R4,#+4
   \   0000006C   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   00000070   016046E2           SUB      R6,R6,#+1
   \   00000074   B200C8E0           STRH     R0,[R8], #+2
   \   00000078   0140F5E5           LDRB     R4,[R5, #+1]!
   \                     ??_DrawBitLine4BPP_4:
   \   0000007C   020056E3           CMP      R6,#+2
   \   00000080   0B0000BA           BLT      ??_DrawBitLine4BPP_5
   \   00000084   C600A0E1           ASR      R0,R6,#+1
   \   00000088   016006E2           AND      R6,R6,#0x1
   \                     ??_DrawBitLine4BPP_6:
   \   0000008C   FF4004E2           AND      R4,R4,#0xFF
   \   00000090   4412A0E1           ASR      R1,R4,#+4
   \   00000094   011197E7           LDR      R1,[R7, +R1, LSL #+2]
   \   00000098   010050E2           SUBS     R0,R0,#+1
   \   0000009C   B210C8E0           STRH     R1,[R8], #+2
   \   000000A0   0F1004E2           AND      R1,R4,#0xF
   \   000000A4   011197E7           LDR      R1,[R7, +R1, LSL #+2]
   \   000000A8   B210C8E0           STRH     R1,[R8], #+2
   \   000000AC   0140F5E5           LDRB     R4,[R5, #+1]!
   \   000000B0   F5FFFF1A           BNE      ??_DrawBitLine4BPP_6
   \                     ??_DrawBitLine4BPP_5:
   \   000000B4   000056E3           CMP      R6,#+0
   \   000000B8   5B00000A           BEQ      ??_DrawBitLine4BPP_3
   \   000000BC   FF4004E2           AND      R4,R4,#0xFF
   \   000000C0   4402A0E1           ASR      R0,R4,#+4
   \   000000C4   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   000000C8   B000C8E1           STRH     R0,[R8, #+0]
   \   000000CC   560000EA           B        ??_DrawBitLine4BPP_3
   \                     ??_DrawBitLine4BPP_1:
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   1100000A           BEQ      ??_DrawBitLine4BPP_7
   \   000000D8   F00014E3           TST      R4,#0xF0
   \   000000DC   0B00000A           BEQ      ??_DrawBitLine4BPP_8
   \   000000E0   FF4004E2           AND      R4,R4,#0xFF
   \   000000E4   4402A0E1           ASR      R0,R4,#+4
   \   000000E8   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   000000EC   000059E3           CMP      R9,#+0
   \   000000F0   B000C8E1           STRH     R0,[R8, #+0]
   \   000000F4   0500000A           BEQ      ??_DrawBitLine4BPP_8
   \   000000F8   083099E5           LDR      R3,[R9, #+8]
   \   000000FC   0B20A0E1           MOV      R2,R11
   \   00000100   0A10A0E1           MOV      R1,R10
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   003093E5           LDR      R3,[R3, #+0]
   \   0000010C   33FF2FE1           BLX      R3
   \                     ??_DrawBitLine4BPP_8:
   \   00000110   028088E2           ADD      R8,R8,#+2
   \   00000114   01A08AE2           ADD      R10,R10,#+1
   \   00000118   016046E2           SUB      R6,R6,#+1
   \   0000011C   0140F5E5           LDRB     R4,[R5, #+1]!
   \                     ??_DrawBitLine4BPP_7:
   \   00000120   020056E3           CMP      R6,#+2
   \   00000124   1F0000BA           BLT      ??_DrawBitLine4BPP_9
   \                     ??_DrawBitLine4BPP_10:
   \   00000128   F00014E3           TST      R4,#0xF0
   \   0000012C   0B00000A           BEQ      ??_DrawBitLine4BPP_11
   \   00000130   FF0004E2           AND      R0,R4,#0xFF
   \   00000134   4002A0E1           ASR      R0,R0,#+4
   \   00000138   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   0000013C   000059E3           CMP      R9,#+0
   \   00000140   B000C8E1           STRH     R0,[R8, #+0]
   \   00000144   0500000A           BEQ      ??_DrawBitLine4BPP_11
   \   00000148   083099E5           LDR      R3,[R9, #+8]
   \   0000014C   0B20A0E1           MOV      R2,R11
   \   00000150   0A10A0E1           MOV      R1,R10
   \   00000154   0900A0E1           MOV      R0,R9
   \   00000158   003093E5           LDR      R3,[R3, #+0]
   \   0000015C   33FF2FE1           BLX      R3
   \                     ??_DrawBitLine4BPP_11:
   \   00000160   0F0014E2           ANDS     R0,R4,#0xF
   \   00000164   0900000A           BEQ      ??_DrawBitLine4BPP_12
   \   00000168   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   0000016C   000059E3           CMP      R9,#+0
   \   00000170   B200C8E1           STRH     R0,[R8, #+2]
   \   00000174   0500000A           BEQ      ??_DrawBitLine4BPP_12
   \   00000178   083099E5           LDR      R3,[R9, #+8]
   \   0000017C   0B20A0E1           MOV      R2,R11
   \   00000180   01108AE2           ADD      R1,R10,#+1
   \   00000184   0900A0E1           MOV      R0,R9
   \   00000188   003093E5           LDR      R3,[R3, #+0]
   \   0000018C   33FF2FE1           BLX      R3
   \                     ??_DrawBitLine4BPP_12:
   \   00000190   026046E2           SUB      R6,R6,#+2
   \   00000194   048088E2           ADD      R8,R8,#+4
   \   00000198   02A08AE2           ADD      R10,R10,#+2
   \   0000019C   0140F5E5           LDRB     R4,[R5, #+1]!
   \   000001A0   020056E3           CMP      R6,#+2
   \   000001A4   DFFFFFAA           BGE      ??_DrawBitLine4BPP_10
   \                     ??_DrawBitLine4BPP_9:
   \   000001A8   000056E3           CMP      R6,#+0
   \   000001AC   044CA011           LSLNE    R4,R4,#+24
   \   000001B0   244EB011           LSRSNE   R4,R4,#+28
   \   000001B4   1C00000A           BEQ      ??_DrawBitLine4BPP_3
   \   000001B8   040197E7           LDR      R0,[R7, +R4, LSL #+2]
   \   000001BC   000059E3           CMP      R9,#+0
   \   000001C0   B000C8E1           STRH     R0,[R8, #+0]
   \   000001C4   1800000A           BEQ      ??_DrawBitLine4BPP_3
   \   000001C8   083099E5           LDR      R3,[R9, #+8]
   \   000001CC   0B20A0E1           MOV      R2,R11
   \   000001D0   0A10A0E1           MOV      R1,R10
   \   000001D4   0900A0E1           MOV      R0,R9
   \   000001D8   003093E5           LDR      R3,[R3, #+0]
   \   000001DC   33FF2FE1           BLX      R3
   \   000001E0   110000EA           B        ??_DrawBitLine4BPP_3
   \                     ??_DrawBitLine4BPP_13:
   \   000001E4   0210A0E3           MOV      R1,#+2
   \   000001E8   0140F5E5           LDRB     R4,[R5, #+1]!
   \                     ??_DrawBitLine4BPP_2:
   \   000001EC   010CA0E1           MOV      R0,R1, LSL #+24
   \   000001F0   200C56E1           CMP      R6,R0, LSR #+24
   \   000001F4   0610A0B1           MOVLT    R1,R6
   \   000001F8   FF0001E2           AND      R0,R1,#0xFF
   \   000001FC   006046E0           SUB      R6,R6,R0
   \                     ??_DrawBitLine4BPP_14:
   \   00000200   C00014E3           TST      R4,#0xC0
   \   00000204   B000D811           LDRHNE   R0,[R8, #+0]
   \   00000208   011041E2           SUB      R1,R1,#+1
   \   0000020C   0442A0E1           LSL      R4,R4,#+4
   \   00000210   FF002012           EORNE    R0,R0,#0xFF
   \   00000214   B000C811           STRHNE   R0,[R8, #+0]
   \   00000218   028088E2           ADD      R8,R8,#+2
   \   0000021C   FF1011E2           ANDS     R1,R1,#0xFF
   \   00000220   F6FFFF1A           BNE      ??_DrawBitLine4BPP_14
   \   00000224   000056E3           CMP      R6,#+0
   \   00000228   EDFFFF1A           BNE      ??_DrawBitLine4BPP_13
   \                     ??_DrawBitLine4BPP_3:
   \   0000022C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000230   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitmap(struct GUI_DEVICE *, int, int, int, int, int, int, unsigned char const *, int, unsigned long const *)
   \                     _DrawBitmap:
   \   00000000   F94F2DE9           PUSH     {R0,R3-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable11_1
   \   00000008   24D04DE2           SUB      SP,SP,#+36
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   5C509DE5           LDR      R5,[SP, #+92]
   \   00000018   60809DE5           LDR      R8,[SP, #+96]
   \   0000001C   64909DE5           LDR      R9,[SP, #+100]
   \   00000020   880090E5           LDR      R0,[R0, #+136]
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   00A0A0E1           MOV      R10,R0
   \   0000002C   14009AE5           LDR      R0,[R10, #+20]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0200000A           BEQ      ??_DrawBitmap_0
   \   00000038   ........           BL       GUI_ALLOC_h2p
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   000000EA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_0:
   \   00000044   0040A0E3           MOV      R4,#+0
   \                     ??_DrawBitmap_1:
   \   00000048   0C009AE5           LDR      R0,[R10, #+12]
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   1C008DE5           STR      R0,[SP, #+28]
   \   00000054   060088E0           ADD      R0,R8,R6
   \   00000058   18008DE5           STR      R0,[SP, #+24]
   \   0000005C   0A00000A           BEQ      ??_DrawBitmap_2
   \   00000060   ........           LDR      R0,??DataTable11_1
   \   00000064   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000068   020010E3           TST      R0,#0x2
   \   0000006C   0600001A           BNE      ??_DrawBitmap_2
   \   00000070   50009DE5           LDR      R0,[SP, #+80]
   \   00000074   28309DE5           LDR      R3,[SP, #+40]
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0720A0E1           MOV      R2,R7
   \   00000080   18109DE5           LDR      R1,[SP, #+24]
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       GUI_USAGE_AddRect
   \                     ??_DrawBitmap_2:
   \   0000008C   ........           LDR      R0,??DataTable11_1
   \   00000090   880090E5           LDR      R0,[R0, #+136]
   \   00000094   ........           BL       GUI_ALLOC_h2p
   \   00000098   F630D0E1           LDRSH    R3,[R0, #+6]
   \   0000009C   0CC090E5           LDR      R12,[R0, #+12]
   \   000000A0   F410D0E1           LDRSH    R1,[R0, #+4]
   \   000000A4   033047E0           SUB      R3,R7,R3
   \   000000A8   9C0320E0           MLA      R0,R12,R3,R0
   \   000000AC   18209DE5           LDR      R2,[SP, #+24]
   \   000000B0   8110A0E1           LSL      R1,R1,#+1
   \   000000B4   001061E2           RSB      R1,R1,#+0
   \   000000B8   820080E0           ADD      R0,R0,R2, LSL #+1
   \   000000BC   000081E0           ADD      R0,R1,R0
   \   000000C0   186080E2           ADD      R6,R0,#+24
   \   000000C4   54009DE5           LDR      R0,[SP, #+84]
   \   000000C8   100050E3           CMP      R0,#+16
   \   000000CC   2200001A           BNE      ??_DrawBitmap_3
   \   000000D0   50009DE5           LDR      R0,[SP, #+80]
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   00108DE5           STR      R1,[SP, #+0]
   \   000000DC   010050E3           CMP      R0,#+1
   \   000000E0   E80000BA           BLT      ??_DrawBitmap_4
   \   000000E4   28009DE5           LDR      R0,[SP, #+40]
   \   000000E8   8080A0E1           LSL      R8,R0,#+1
   \                     ??_DrawBitmap_5:
   \   000000EC   000055E3           CMP      R5,#+0
   \   000000F0   00005613           CMPNE    R6,#+0
   \   000000F4   0C00000A           BEQ      ??_DrawBitmap_6
   \   000000F8   0820A0E1           MOV      R2,R8
   \   000000FC   0510A0E1           MOV      R1,R5
   \   00000100   0600A0E1           MOV      R0,R6
   \   00000104   ........           BL       __aeabi_memcpy
   \   00000108   000054E3           CMP      R4,#+0
   \   0000010C   0600000A           BEQ      ??_DrawBitmap_6
   \   00000110   08C094E5           LDR      R12,[R4, #+8]
   \   00000114   28309DE5           LDR      R3,[SP, #+40]
   \   00000118   0720A0E1           MOV      R2,R7
   \   0000011C   18109DE5           LDR      R1,[SP, #+24]
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   04C09CE5           LDR      R12,[R12, #+4]
   \   00000128   3CFF2FE1           BLX      R12
   \                     ??_DrawBitmap_6:
   \   0000012C   58009DE5           LDR      R0,[SP, #+88]
   \   00000130   50109DE5           LDR      R1,[SP, #+80]
   \   00000134   055080E0           ADD      R5,R0,R5
   \   00000138   1C009DE5           LDR      R0,[SP, #+28]
   \   0000013C   017087E2           ADD      R7,R7,#+1
   \   00000140   066080E0           ADD      R6,R0,R6
   \   00000144   00009DE5           LDR      R0,[SP, #+0]
   \   00000148   010080E2           ADD      R0,R0,#+1
   \   0000014C   00008DE5           STR      R0,[SP, #+0]
   \   00000150   010050E1           CMP      R0,R1
   \   00000154   E4FFFFBA           BLT      ??_DrawBitmap_5
   \   00000158   CA0000EA           B        ??_DrawBitmap_4
   \                     ??_DrawBitmap_3:
   \   0000015C   180050E3           CMP      R0,#+24
   \   00000160   370000BA           BLT      ??_DrawBitmap_7
   \   00000164   50009DE5           LDR      R0,[SP, #+80]
   \   00000168   0010A0E3           MOV      R1,#+0
   \   0000016C   00108DE5           STR      R1,[SP, #+0]
   \   00000170   010050E3           CMP      R0,#+1
   \   00000174   C30000BA           BLT      ??_DrawBitmap_4
   \   00000178   04708DE5           STR      R7,[SP, #+4]
   \                     ??_DrawBitmap_8:
   \   0000017C   0670A0E1           MOV      R7,R6
   \   00000180   0590B0E1           MOVS     R9,R5
   \   00000184   28809DE5           LDR      R8,[SP, #+40]
   \   00000188   04A09DE5           LDR      R10,[SP, #+4]
   \   0000018C   18B09DE5           LDR      R11,[SP, #+24]
   \   00000190   00005713           CMPNE    R7,#+0
   \   00000194   1B00000A           BEQ      ??_DrawBitmap_9
   \   00000198   000054E3           CMP      R4,#+0
   \   0000019C   0600000A           BEQ      ??_DrawBitmap_10
   \   000001A0   08C094E5           LDR      R12,[R4, #+8]
   \   000001A4   0830A0E1           MOV      R3,R8
   \   000001A8   0A20A0E1           MOV      R2,R10
   \   000001AC   0B10A0E1           MOV      R1,R11
   \   000001B0   0400A0E1           MOV      R0,R4
   \   000001B4   04C09CE5           LDR      R12,[R12, #+4]
   \   000001B8   3CFF2FE1           BLX      R12
   \                     ??_DrawBitmap_10:
   \   000001BC   24109DE5           LDR      R1,[SP, #+36]
   \   000001C0   000099E5           LDR      R0,[R9, #+0]
   \   000001C4   101091E5           LDR      R1,[R1, #+16]
   \   000001C8   001091E5           LDR      R1,[R1, #+0]
   \   000001CC   31FF2FE1           BLX      R1
   \   000001D0   B000C7E1           STRH     R0,[R7, #+0]
   \   000001D4   000054E3           CMP      R4,#+0
   \   000001D8   0500000A           BEQ      ??_DrawBitmap_11
   \   000001DC   083094E5           LDR      R3,[R4, #+8]
   \   000001E0   0A20A0E1           MOV      R2,R10
   \   000001E4   0B10A0E1           MOV      R1,R11
   \   000001E8   0400A0E1           MOV      R0,R4
   \   000001EC   003093E5           LDR      R3,[R3, #+0]
   \   000001F0   33FF2FE1           BLX      R3
   \                     ??_DrawBitmap_11:
   \   000001F4   01B08BE2           ADD      R11,R11,#+1
   \   000001F8   027087E2           ADD      R7,R7,#+2
   \   000001FC   049089E2           ADD      R9,R9,#+4
   \   00000200   018058E2           SUBS     R8,R8,#+1
   \   00000204   ECFFFF1A           BNE      ??_DrawBitmap_10
   \                     ??_DrawBitmap_9:
   \   00000208   58009DE5           LDR      R0,[SP, #+88]
   \   0000020C   50109DE5           LDR      R1,[SP, #+80]
   \   00000210   055080E0           ADD      R5,R0,R5
   \   00000214   1C009DE5           LDR      R0,[SP, #+28]
   \   00000218   066080E0           ADD      R6,R0,R6
   \   0000021C   00009DE5           LDR      R0,[SP, #+0]
   \   00000220   010080E2           ADD      R0,R0,#+1
   \   00000224   00008DE5           STR      R0,[SP, #+0]
   \   00000228   04009DE5           LDR      R0,[SP, #+4]
   \   0000022C   010080E2           ADD      R0,R0,#+1
   \   00000230   04008DE5           STR      R0,[SP, #+4]
   \   00000234   00009DE5           LDR      R0,[SP, #+0]
   \   00000238   010050E1           CMP      R0,R1
   \   0000023C   910000AA           BGE      ??_DrawBitmap_4
   \   00000240   CDFFFFEA           B        ??_DrawBitmap_8
   \                     ??_DrawBitmap_7:
   \   00000244   080050E3           CMP      R0,#+8
   \   00000248   5400001A           BNE      ??_DrawBitmap_12
   \   0000024C   50009DE5           LDR      R0,[SP, #+80]
   \   00000250   0010A0E3           MOV      R1,#+0
   \   00000254   00108DE5           STR      R1,[SP, #+0]
   \   00000258   010050E3           CMP      R0,#+1
   \   0000025C   890000BA           BLT      ??_DrawBitmap_4
   \   00000260   04708DE5           STR      R7,[SP, #+4]
   \                     ??_DrawBitmap_13:
   \   00000264   04109DE5           LDR      R1,[SP, #+4]
   \   00000268   ........           LDR      R0,??DataTable11_1
   \   0000026C   000059E3           CMP      R9,#+0
   \   00000270   0670A0E1           MOV      R7,R6
   \   00000274   28809DE5           LDR      R8,[SP, #+40]
   \   00000278   05A0A0E1           MOV      R10,R5
   \   0000027C   08108DE5           STR      R1,[SP, #+8]
   \   00000280   18B09DE5           LDR      R11,[SP, #+24]
   \   00000284   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000288   1C00000A           BEQ      ??_DrawBitmap_14
   \   0000028C   030010E2           ANDS     R0,R0,#0x3
   \   00000290   1400000A           BEQ      ??_DrawBitmap_15
   \   00000294   020050E2           SUBS     R0,R0,#+2
   \   00000298   3100001A           BNE      ??_DrawBitmap_16
   \                     ??_DrawBitmap_17:
   \   0000029C   0000DAE5           LDRB     R0,[R10, #+0]
   \   000002A0   000050E3           CMP      R0,#+0
   \   000002A4   0900000A           BEQ      ??_DrawBitmap_18
   \   000002A8   000199E7           LDR      R0,[R9, +R0, LSL #+2]
   \   000002AC   000054E3           CMP      R4,#+0
   \   000002B0   B000C7E1           STRH     R0,[R7, #+0]
   \   000002B4   0500000A           BEQ      ??_DrawBitmap_18
   \   000002B8   083094E5           LDR      R3,[R4, #+8]
   \   000002BC   08209DE5           LDR      R2,[SP, #+8]
   \   000002C0   0B10A0E1           MOV      R1,R11
   \   000002C4   0400A0E1           MOV      R0,R4
   \   000002C8   003093E5           LDR      R3,[R3, #+0]
   \   000002CC   33FF2FE1           BLX      R3
   \                     ??_DrawBitmap_18:
   \   000002D0   01B08BE2           ADD      R11,R11,#+1
   \   000002D4   027087E2           ADD      R7,R7,#+2
   \   000002D8   01A08AE2           ADD      R10,R10,#+1
   \   000002DC   018058E2           SUBS     R8,R8,#+1
   \   000002E0   EDFFFF1A           BNE      ??_DrawBitmap_17
   \   000002E4   1E0000EA           B        ??_DrawBitmap_16
   \                     ??_DrawBitmap_15:
   \   000002E8   0100DAE4           LDRB     R0,[R10], #+1
   \   000002EC   018058E2           SUBS     R8,R8,#+1
   \   000002F0   000199E7           LDR      R0,[R9, +R0, LSL #+2]
   \   000002F4   B200C7E0           STRH     R0,[R7], #+2
   \   000002F8   FAFFFF1A           BNE      ??_DrawBitmap_15
   \   000002FC   180000EA           B        ??_DrawBitmap_16
   \                     ??_DrawBitmap_14:
   \   00000300   030010E2           ANDS     R0,R0,#0x3
   \   00000304   1200000A           BEQ      ??_DrawBitmap_19
   \   00000308   020050E2           SUBS     R0,R0,#+2
   \   0000030C   1400001A           BNE      ??_DrawBitmap_16
   \                     ??_DrawBitmap_20:
   \   00000310   0000DAE5           LDRB     R0,[R10, #+0]
   \   00000314   000050E3           CMP      R0,#+0
   \   00000318   B000C711           STRHNE   R0,[R7, #+0]
   \   0000031C   00005413           CMPNE    R4,#+0
   \   00000320   0500000A           BEQ      ??_DrawBitmap_21
   \   00000324   083094E5           LDR      R3,[R4, #+8]
   \   00000328   08209DE5           LDR      R2,[SP, #+8]
   \   0000032C   0B10A0E1           MOV      R1,R11
   \   00000330   0400A0E1           MOV      R0,R4
   \   00000334   003093E5           LDR      R3,[R3, #+0]
   \   00000338   33FF2FE1           BLX      R3
   \                     ??_DrawBitmap_21:
   \   0000033C   01B08BE2           ADD      R11,R11,#+1
   \   00000340   027087E2           ADD      R7,R7,#+2
   \   00000344   01A08AE2           ADD      R10,R10,#+1
   \   00000348   018058E2           SUBS     R8,R8,#+1
   \   0000034C   EFFFFF1A           BNE      ??_DrawBitmap_20
   \   00000350   030000EA           B        ??_DrawBitmap_16
   \                     ??_DrawBitmap_19:
   \   00000354   0820A0E1           MOV      R2,R8
   \   00000358   0A10A0E1           MOV      R1,R10
   \   0000035C   0700A0E1           MOV      R0,R7
   \   00000360   ........           BL       __aeabi_memcpy
   \                     ??_DrawBitmap_16:
   \   00000364   58009DE5           LDR      R0,[SP, #+88]
   \   00000368   50109DE5           LDR      R1,[SP, #+80]
   \   0000036C   055080E0           ADD      R5,R0,R5
   \   00000370   1C009DE5           LDR      R0,[SP, #+28]
   \   00000374   066080E0           ADD      R6,R0,R6
   \   00000378   00009DE5           LDR      R0,[SP, #+0]
   \   0000037C   010080E2           ADD      R0,R0,#+1
   \   00000380   00008DE5           STR      R0,[SP, #+0]
   \   00000384   04009DE5           LDR      R0,[SP, #+4]
   \   00000388   010080E2           ADD      R0,R0,#+1
   \   0000038C   04008DE5           STR      R0,[SP, #+4]
   \   00000390   00009DE5           LDR      R0,[SP, #+0]
   \   00000394   010050E1           CMP      R0,R1
   \   00000398   3A0000AA           BGE      ??_DrawBitmap_4
   \   0000039C   B0FFFFEA           B        ??_DrawBitmap_13
   \                     ??_DrawBitmap_12:
   \   000003A0   000059E3           CMP      R9,#+0
   \   000003A4   50009DE5           LDR      R0,[SP, #+80]
   \   000003A8   ............       ADRLEQ   R9,aID
   \              ....        
   \   000003B0   010050E3           CMP      R0,#+1
   \   000003B4   330000BA           BLT      ??_DrawBitmap_4
   \   000003B8   00B0A0E1           MOV      R11,R0
   \                     ??_DrawBitmap_22:
   \   000003BC   54009DE5           LDR      R0,[SP, #+84]
   \   000003C0   010050E2           SUBS     R0,R0,#+1
   \   000003C4   0400000A           BEQ      ??_DrawBitmap_23
   \   000003C8   010050E2           SUBS     R0,R0,#+1
   \   000003CC   0F00000A           BEQ      ??_DrawBitmap_24
   \   000003D0   020050E2           SUBS     R0,R0,#+2
   \   000003D4   1900000A           BEQ      ??_DrawBitmap_25
   \   000003D8   230000EA           B        ??_DrawBitmap_26
   \                     ??_DrawBitmap_23:
   \   000003DC   28009DE5           LDR      R0,[SP, #+40]
   \   000003E0   14608DE5           STR      R6,[SP, #+20]
   \   000003E4   08008DE5           STR      R0,[SP, #+8]
   \   000003E8   10A08DE5           STR      R10,[SP, #+16]
   \   000003EC   0C908DE5           STR      R9,[SP, #+12]
   \   000003F0   04808DE5           STR      R8,[SP, #+4]
   \   000003F4   00508DE5           STR      R5,[SP, #+0]
   \   000003F8   0730A0E1           MOV      R3,R7
   \   000003FC   18209DE5           LDR      R2,[SP, #+24]
   \   00000400   0410A0E1           MOV      R1,R4
   \   00000404   24009DE5           LDR      R0,[SP, #+36]
   \   00000408   ........           BL       _DrawBitLine1BPP
   \   0000040C   160000EA           B        ??_DrawBitmap_26
   \                     ??_DrawBitmap_24:
   \   00000410   28009DE5           LDR      R0,[SP, #+40]
   \   00000414   10608DE5           STR      R6,[SP, #+16]
   \   00000418   08008DE5           STR      R0,[SP, #+8]
   \   0000041C   0C908DE5           STR      R9,[SP, #+12]
   \   00000420   04808DE5           STR      R8,[SP, #+4]
   \   00000424   00508DE5           STR      R5,[SP, #+0]
   \   00000428   0730A0E1           MOV      R3,R7
   \   0000042C   18209DE5           LDR      R2,[SP, #+24]
   \   00000430   0410A0E1           MOV      R1,R4
   \   00000434   24009DE5           LDR      R0,[SP, #+36]
   \   00000438   ........           BL       _DrawBitLine2BPP
   \   0000043C   0A0000EA           B        ??_DrawBitmap_26
   \                     ??_DrawBitmap_25:
   \   00000440   28009DE5           LDR      R0,[SP, #+40]
   \   00000444   10608DE5           STR      R6,[SP, #+16]
   \   00000448   08008DE5           STR      R0,[SP, #+8]
   \   0000044C   0C908DE5           STR      R9,[SP, #+12]
   \   00000450   04808DE5           STR      R8,[SP, #+4]
   \   00000454   00508DE5           STR      R5,[SP, #+0]
   \   00000458   0730A0E1           MOV      R3,R7
   \   0000045C   18209DE5           LDR      R2,[SP, #+24]
   \   00000460   0410A0E1           MOV      R1,R4
   \   00000464   24009DE5           LDR      R0,[SP, #+36]
   \   00000468   ........           BL       _DrawBitLine4BPP
   \                     ??_DrawBitmap_26:
   \   0000046C   58009DE5           LDR      R0,[SP, #+88]
   \   00000470   017087E2           ADD      R7,R7,#+1
   \   00000474   055080E0           ADD      R5,R0,R5
   \   00000478   1C009DE5           LDR      R0,[SP, #+28]
   \   0000047C   01B05BE2           SUBS     R11,R11,#+1
   \   00000480   066080E0           ADD      R6,R0,R6
   \   00000484   CCFFFF1A           BNE      ??_DrawBitmap_22
   \                     ??_DrawBitmap_4:
   \   00000488   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   0000048C   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _FillRect(struct GUI_DEVICE *, int, int, int, int)
   \                     _FillRect:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   ........           LDR      R1,??DataTable11_2
   \   0000000C   ........           LDR      R7,??DataTable11_1
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   0250A0E1           MOV      R5,R2
   \   00000020   03A0A0E1           MOV      R10,R3
   \   00000024   30609DE5           LDR      R6,[SP, #+48]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   880097E5           LDR      R0,[R7, #+136]
   \   00000030   ........           BL       GUI_ALLOC_h2p
   \   00000034   00B0A0E1           MOV      R11,R0
   \   00000038   880097E5           LDR      R0,[R7, #+136]
   \   0000003C   ........           BL       GUI_ALLOC_h2p
   \   00000040   F620D0E1           LDRSH    R2,[R0, #+6]
   \   00000044   0C3090E5           LDR      R3,[R0, #+12]
   \   00000048   F410D0E1           LDRSH    R1,[R0, #+4]
   \   0000004C   022045E0           SUB      R2,R5,R2
   \   00000050   930220E0           MLA      R0,R3,R2,R0
   \   00000054   8110A0E1           LSL      R1,R1,#+1
   \   00000058   001061E2           RSB      R1,R1,#+0
   \   0000005C   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000060   000081E0           ADD      R0,R1,R0
   \   00000064   188080E2           ADD      R8,R0,#+24
   \   00000068   04004AE0           SUB      R0,R10,R4
   \   0000006C   01A080E2           ADD      R10,R0,#+1
   \   00000070   14009BE5           LDR      R0,[R11, #+20]
   \   00000074   0C909BE5           LDR      R9,[R11, #+12]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0700000A           BEQ      ??_FillRect_0
   \   00000080   ........           BL       GUI_ALLOC_h2p
   \   00000084   051046E0           SUB      R1,R6,R5
   \   00000088   011081E2           ADD      R1,R1,#+1
   \   0000008C   00108DE5           STR      R1,[SP, #+0]
   \   00000090   0A30A0E1           MOV      R3,R10
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0410A0E1           MOV      R1,R4
   \   0000009C   ........           BL       GUI_USAGE_AddRect
   \                     ??_FillRect_0:
   \   000000A0   050056E1           CMP      R6,R5
   \   000000A4   180000BA           BLT      ??_FillRect_1
   \                     ??_FillRect_2:
   \   000000A8   1000D7E5           LDRB     R0,[R7, #+16]
   \   000000AC   010010E3           TST      R0,#0x1
   \   000000B0   0B00000A           BEQ      ??_FillRect_3
   \   000000B4   08009DE5           LDR      R0,[SP, #+8]
   \   000000B8   0A40A0E1           MOV      R4,R10
   \   000000BC   100090E5           LDR      R0,[R0, #+16]
   \   000000C0   08B0A0E1           MOV      R11,R8
   \   000000C4   080090E5           LDR      R0,[R0, #+8]
   \   000000C8   30FF2FE1           BLX      R0
   \                     ??_FillRect_4:
   \   000000CC   B010DBE1           LDRH     R1,[R11, #+0]
   \   000000D0   014054E2           SUBS     R4,R4,#+1
   \   000000D4   011020E0           EOR      R1,R0,R1
   \   000000D8   B210CBE0           STRH     R1,[R11], #+2
   \   000000DC   FAFFFF1A           BNE      ??_FillRect_4
   \   000000E0   050000EA           B        ??_FillRect_5
   \                     ??_FillRect_3:
   \   000000E4   04109DE5           LDR      R1,[SP, #+4]
   \   000000E8   0A20A0E1           MOV      R2,R10
   \   000000EC   0118A0E1           LSL      R1,R1,#+16
   \   000000F0   2118A0E1           LSR      R1,R1,#+16
   \   000000F4   0800A0E1           MOV      R0,R8
   \   000000F8   ........           BL       GUI__memset16
   \                     ??_FillRect_5:
   \   000000FC   015085E2           ADD      R5,R5,#+1
   \   00000100   088089E0           ADD      R8,R9,R8
   \   00000104   050056E1           CMP      R6,R5
   \   00000108   E6FFFFAA           BGE      ??_FillRect_2
   \                     ??_FillRect_1:
   \   0000010C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000110   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawHLine(struct GUI_DEVICE *, int, int, int)
   \                     _DrawHLine:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   00208DE5           STR      R2,[SP, #+0]
   \   0000000C   ........           BL       _FillRect
   \   00000010   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000014   0080BDE8           POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawVLine(struct GUI_DEVICE *, int, int, int)
   \                     _DrawVLine:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable11_1
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0290A0E1           MOV      R9,R2
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   880090E5           LDR      R0,[R0, #+136]
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   00B0A0E1           MOV      R11,R0
   \   00000020   14609BE5           LDR      R6,[R11, #+20]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   0300000A           BEQ      ??_DrawVLine_0
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           BL       GUI_ALLOC_h2p
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   000000EA           B        ??_DrawVLine_1
   \                     ??_DrawVLine_0:
   \   0000003C   0070A0E3           MOV      R7,#+0
   \                     ??_DrawVLine_1:
   \   00000040   ........           LDR      R0,??DataTable11_1
   \   00000044   880090E5           LDR      R0,[R0, #+136]
   \   00000048   ........           BL       GUI_ALLOC_h2p
   \   0000004C   F620D0E1           LDRSH    R2,[R0, #+6]
   \   00000050   0C3090E5           LDR      R3,[R0, #+12]
   \   00000054   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000058   022049E0           SUB      R2,R9,R2
   \   0000005C   930220E0           MLA      R0,R3,R2,R0
   \   00000060   8110A0E1           LSL      R1,R1,#+1
   \   00000064   001061E2           RSB      R1,R1,#+0
   \   00000068   840080E0           ADD      R0,R0,R4, LSL #+1
   \   0000006C   000081E0           ADD      R0,R1,R0
   \   00000070   188080E2           ADD      R8,R0,#+24
   \   00000074   ........           LDR      R0,??DataTable11_1
   \   00000078   0CA09BE5           LDR      R10,[R11, #+12]
   \   0000007C   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000080   010010E3           TST      R0,#0x1
   \   00000084   1500000A           BEQ      ??_DrawVLine_2
   \   00000088   00009DE5           LDR      R0,[SP, #+0]
   \   0000008C   100090E5           LDR      R0,[R0, #+16]
   \   00000090   080090E5           LDR      R0,[R0, #+8]
   \   00000094   30FF2FE1           BLX      R0
   \   00000098   00A0A0E1           MOV      R10,R0
   \                     ??_DrawVLine_3:
   \   0000009C   000056E3           CMP      R6,#+0
   \   000000A0   0500000A           BEQ      ??_DrawVLine_4
   \   000000A4   083097E5           LDR      R3,[R7, #+8]
   \   000000A8   0920A0E1           MOV      R2,R9
   \   000000AC   0410A0E1           MOV      R1,R4
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   003093E5           LDR      R3,[R3, #+0]
   \   000000B8   33FF2FE1           BLX      R3
   \                     ??_DrawVLine_4:
   \   000000BC   B000D8E1           LDRH     R0,[R8, #+0]
   \   000000C0   019089E2           ADD      R9,R9,#+1
   \   000000C4   090055E1           CMP      R5,R9
   \   000000C8   00002AE0           EOR      R0,R10,R0
   \   000000CC   B000C8E1           STRH     R0,[R8, #+0]
   \   000000D0   0C009BE5           LDR      R0,[R11, #+12]
   \   000000D4   088080E0           ADD      R8,R0,R8
   \   000000D8   EFFFFFAA           BGE      ??_DrawVLine_3
   \   000000DC   160000EA           B        ??_DrawVLine_5
   \                     ??_DrawVLine_2:
   \   000000E0   ........           LDR      R0,??DataTable11_2
   \   000000E4   000056E3           CMP      R6,#+0
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   00B090E5           LDR      R11,[R0, #+0]
   \   000000F0   0B00000A           BEQ      ??_DrawVLine_6
   \                     ??_DrawVLine_7:
   \   000000F4   083097E5           LDR      R3,[R7, #+8]
   \   000000F8   0920A0E1           MOV      R2,R9
   \   000000FC   0410A0E1           MOV      R1,R4
   \   00000100   0700A0E1           MOV      R0,R7
   \   00000104   003093E5           LDR      R3,[R3, #+0]
   \   00000108   33FF2FE1           BLX      R3
   \   0000010C   B0B0C8E1           STRH     R11,[R8, #+0]
   \   00000110   019089E2           ADD      R9,R9,#+1
   \   00000114   08808AE0           ADD      R8,R10,R8
   \   00000118   090055E1           CMP      R5,R9
   \   0000011C   F4FFFFAA           BGE      ??_DrawVLine_7
   \   00000120   050000EA           B        ??_DrawVLine_5
   \                     ??_DrawVLine_6:
   \   00000124   090045E0           SUB      R0,R5,R9
   \   00000128   010080E2           ADD      R0,R0,#+1
   \                     ??_DrawVLine_8:
   \   0000012C   B0B0C8E1           STRH     R11,[R8, #+0]
   \   00000130   08808AE0           ADD      R8,R10,R8
   \   00000134   010050E2           SUBS     R0,R0,#+1
   \   00000138   FBFFFF1A           BNE      ??_DrawVLine_8
   \                     ??_DrawVLine_5:
   \   0000013C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000140   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _SetPixelIndex(struct GUI_DEVICE *, int, int, int)
   \                     _SetPixelIndex:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   ........           LDR      R8,??DataTable11_1
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   880098E5           LDR      R0,[R8, #+136]
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   146090E5           LDR      R6,[R0, #+20]
   \   00000020   880098E5           LDR      R0,[R8, #+136]
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   F620D0E1           LDRSH    R2,[R0, #+6]
   \   0000002C   0C3090E5           LDR      R3,[R0, #+12]
   \   00000030   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000034   022045E0           SUB      R2,R5,R2
   \   00000038   930220E0           MLA      R0,R3,R2,R0
   \   0000003C   8110A0E1           LSL      R1,R1,#+1
   \   00000040   001061E2           RSB      R1,R1,#+0
   \   00000044   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000048   000081E0           ADD      R0,R1,R0
   \   0000004C   B871C0E1           STRH     R7,[R0, #+24]
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   0B00000A           BEQ      ??_SetPixelIndex_0
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           BL       GUI_ALLOC_h2p
   \   00000060   0070A0E1           MOV      R7,R0
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   ........           BL       GUI_ALLOC_h2p
   \   0000006C   0030A0E1           MOV      R3,R0
   \   00000070   083093E5           LDR      R3,[R3, #+8]
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0410A0E1           MOV      R1,R4
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   003093E5           LDR      R3,[R3, #+0]
   \   00000084   33FF2FE1           BLX      R3
   \                     ??_SetPixelIndex_0:
   \   00000088   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _XorPixel(struct GUI_DEVICE *, int, int)
   \                     _XorPixel:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   ........           LDR      R8,??DataTable11_1
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   880098E5           LDR      R0,[R8, #+136]
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   146090E5           LDR      R6,[R0, #+20]
   \   00000020   880098E5           LDR      R0,[R8, #+136]
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   F620D0E1           LDRSH    R2,[R0, #+6]
   \   0000002C   0C3090E5           LDR      R3,[R0, #+12]
   \   00000030   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000034   022045E0           SUB      R2,R5,R2
   \   00000038   930220E0           MLA      R0,R3,R2,R0
   \   0000003C   8110A0E1           LSL      R1,R1,#+1
   \   00000040   001061E2           RSB      R1,R1,#+0
   \   00000044   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000048   000081E0           ADD      R0,R1,R0
   \   0000004C   188080E2           ADD      R8,R0,#+24
   \   00000050   100097E5           LDR      R0,[R7, #+16]
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   30FF2FE1           BLX      R0
   \   0000005C   B010D8E1           LDRH     R1,[R8, #+0]
   \   00000060   000056E3           CMP      R6,#+0
   \   00000064   010020E0           EOR      R0,R0,R1
   \   00000068   B000C8E1           STRH     R0,[R8, #+0]
   \   0000006C   0B00000A           BEQ      ??_XorPixel_0
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       GUI_ALLOC_h2p
   \   00000078   0070A0E1           MOV      R7,R0
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       GUI_ALLOC_h2p
   \   00000084   0030A0E1           MOV      R3,R0
   \   00000088   083093E5           LDR      R3,[R3, #+8]
   \   0000008C   0520A0E1           MOV      R2,R5
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   003093E5           LDR      R3,[R3, #+0]
   \   0000009C   33FF2FE1           BLX      R3
   \                     ??_XorPixel_0:
   \   000000A0   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp unsigned int _GetPixelIndex(struct GUI_DEVICE *, int, int)
   \                     _GetPixelIndex:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R0,??DataTable11_1
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   880090E5           LDR      R0,[R0, #+136]
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   F620D0E1           LDRSH    R2,[R0, #+6]
   \   00000020   0C3090E5           LDR      R3,[R0, #+12]
   \   00000024   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000028   022045E0           SUB      R2,R5,R2
   \   0000002C   930220E0           MLA      R0,R3,R2,R0
   \   00000030   8110A0E1           LSL      R1,R1,#+1
   \   00000034   001061E2           RSB      R1,R1,#+0
   \   00000038   840080E0           ADD      R0,R0,R4, LSL #+1
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   B801D0E1           LDRH     R0,[R0, #+24]
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _GetRect(struct GUI_DEVICE *, LCD_RECT *)
   \                     _GetRect:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   080090E5           LDR      R0,[R0, #+8]
   \   0000000C   ........           BL       GUI_ALLOC_h2p
   \   00000010   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000014   B010C4E1           STRH     R1,[R4, #+0]
   \   00000018   F610D0E1           LDRSH    R1,[R0, #+6]
   \   0000001C   B210C4E1           STRH     R1,[R4, #+2]
   \   00000020   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000024   F820D0E1           LDRSH    R2,[R0, #+8]
   \   00000028   011082E0           ADD      R1,R2,R1
   \   0000002C   011041E2           SUB      R1,R1,#+1
   \   00000030   B410C4E1           STRH     R1,[R4, #+4]
   \   00000034   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000038   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   0000003C   010080E0           ADD      R0,R0,R1
   \   00000040   010040E2           SUB      R0,R0,#+1
   \   00000044   B600C4E1           STRH     R0,[R4, #+6]
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void *_GetDevData(struct GUI_DEVICE *, int)
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
   \   00000008   ........           ADR      R0,GUI_MEMDEV_DEVICE_16
   \   0000000C   1EFF2FE1           BX       LR
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void (*_GetDevFunc(struct GUI_DEVICE **, int))(void)
   \                     _GetDevFunc:
   \   00000000   160051E3           CMP      R1,#+22
   \   00000004   0100001A           BNE      ??_GetDevFunc_0
   \   00000008   ........           LDR      R0,??DataTable11_3
   \   0000000C   1EFF2FE1           BX       LR
   \                     ??_GetDevFunc_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _SetOrg(struct GUI_DEVICE *, int, int)
   \                     _SetOrg:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   0C3090E5           LDR      R3,[R0, #+12]
   \   00000008   203093E5           LDR      R3,[R3, #+32]
   \   0000000C   13FF2FE1           BX       R3               ;; tailcall

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp signed long _GetDevProp(struct GUI_DEVICE *, int)
   \                     _GetDevProp:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   0C2090E5           LDR      R2,[R0, #+12]
   \   00000008   282092E5           LDR      R2,[R2, #+40]
   \   0000000C   12FF2FE1           BX       R2               ;; tailcall

   \                                 In section .text, align 4, keep-with-next
   \   __absolute GUI_DEVICE_API const GUI_MEMDEV_DEVICE_16
   \                     GUI_MEMDEV_DEVICE_16:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   04000000....       DC32 4, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   ........           DC32     GUI_MEMDEV__WriteToActiveOpaque
     98          
     99          #else
    100          
    101          void GUIDEV16_C(void);
    102          void GUIDEV16_C(void) {}
    103          
    104          #endif /* GUI_SUPPORT_MEMDEV */
    105          
    106          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitLine1BPP     40
     _DrawBitLine2BPP     40
     _DrawBitLine4BPP     40
     _DrawBitmap          80
     _DrawHLine            8
     _DrawVLine           40
     _FillRect            48
     _GetDevData           0
     _GetDevFunc           0
     _GetDevProp           8
     _GetPixelIndex       16
     _GetRect              8
     _SetOrg               8
     _SetPixelIndex       24
     _XorPixel            24


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     aID                    64
     _DrawBitLine1BPP      416
     _DrawBitLine2BPP      352
     _DrawBitLine4BPP      564
     _DrawBitmap          1168
     _FillRect             276
     _DrawHLine             24
     _DrawVLine            324
     _SetPixelIndex        140
     _XorPixel             164
     _GetPixelIndex         76
     _GetRect               76
     _GetDevData            24
     _GetDevFunc            24
     _SetOrg                16
     _GetDevProp            16
     GUI_MEMDEV_DEVICE_16   52
     ??DataTable11           4
     ??DataTable11_1         4
     ??DataTable11_2         4
     ??DataTable11_3         4

 
 3 792 bytes in section .text
 
 3 792 bytes of CODE memory

Errors: none
Warnings: none
