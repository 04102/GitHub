###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX.c
     19          Purpose     : Implementation of listbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "GUI_ARRAY.h"
     27          #include "LISTBOX_Private.h"
     28          #include "SCROLLBAR.h"
     29          #include "GUI_Debug.h"
     30          #include "GUI_Private.h"
     31          #include "WM_Intern.h"
     32          
     33          #if GUI_WINSUPPORT
     34          
     35          /*********************************************************************
     36          *
     37          *       Private config defaults
     38          *
     39          **********************************************************************
     40          */
     41          
     42          /* Define default fonts */
     43          #ifndef LISTBOX_FONT_DEFAULT
     44            #if   WIDGET_USE_SCHEME_SMALL
     45              #define LISTBOX_FONT_DEFAULT &GUI_Font13_1
     46            #elif WIDGET_USE_SCHEME_MEDIUM
     47              #define LISTBOX_FONT_DEFAULT &GUI_Font16_1
     48            #elif WIDGET_USE_SCHEME_LARGE
     49              #define LISTBOX_FONT_DEFAULT &GUI_Font24_1
     50            #endif
     51          #endif
     52          
     53          
     54          /* Define colors */
     55          #ifndef LISTBOX_BKCOLOR0_DEFAULT
     56            #define LISTBOX_BKCOLOR0_DEFAULT GUI_WHITE     /* Not selected */
     57          #endif
     58          
     59          #ifndef LISTBOX_BKCOLOR1_DEFAULT
     60            #define LISTBOX_BKCOLOR1_DEFAULT GUI_GRAY      /* Selected, no focus */
     61          #endif
     62          
     63          #ifndef LISTBOX_BKCOLOR2_DEFAULT
     64            #define LISTBOX_BKCOLOR2_DEFAULT GUI_BLUE      /* Selected, focus */
     65          #endif
     66          
     67          #ifndef LISTBOX_BKCOLOR3_DEFAULT
     68            #define LISTBOX_BKCOLOR3_DEFAULT 0xC0C0C0      /* Disabled */
     69          #endif
     70          
     71          
     72          #ifndef LISTBOX_TEXTCOLOR0_DEFAULT
     73            #define LISTBOX_TEXTCOLOR0_DEFAULT GUI_BLACK   /* Not selected */
     74          #endif
     75          
     76          #ifndef LISTBOX_TEXTCOLOR1_DEFAULT
     77            #define LISTBOX_TEXTCOLOR1_DEFAULT GUI_WHITE   /* Selected, no focus */
     78          #endif
     79          
     80          #ifndef LISTBOX_TEXTCOLOR2_DEFAULT
     81            #define LISTBOX_TEXTCOLOR2_DEFAULT GUI_WHITE   /* Selected, focus */
     82          #endif
     83          
     84          #ifndef LISTBOX_TEXTCOLOR3_DEFAULT
     85            #define LISTBOX_TEXTCOLOR3_DEFAULT GUI_GRAY    /* Disabled */
     86          #endif
     87          
     88          #ifndef LISTBOX_TEXTALIGN_DEFAULT
     89            #define LISTBOX_TEXTALIGN_DEFAULT GUI_TA_LEFT  /* Left aligned */
     90          #endif
     91          
     92          #ifndef LISTBOX_SCROLLSTEP_H_DEFAULT
     93            #define LISTBOX_SCROLLSTEP_H_DEFAULT 10
     94          #endif
     95          
     96          /*********************************************************************
     97          *
     98          *       Static data
     99          *
    100          **********************************************************************
    101          */
    102          
    103          

   \                                 In section .data, align 4
    104          LISTBOX_PROPS LISTBOX_DefaultProps = {
   \                     LISTBOX_DefaultProps:
   \   00000000   ........           DC32 GUI_Font13_1
   \   00000004   0A00               DC16 10
   \   00000006   0000               DC8 0, 0
   \   00000008   FFFFFF008080       DC32 16777215, 8421504, 16711680, 12632256, 0, 16777215, 16777215
   \              80000000FF00
   \              C0C0C0000000
   \              0000FFFFFF00
   \              FFFFFF00    
   \   00000024   80808000FFFF       DC32 8421504, 268435455, 268435455, 268435455
   \              FF0FFFFFFF0F
   \              FFFFFF0F    
   \   00000034   0000               DC16 0
   \   00000036   0000               DC8 0, 0
    105            LISTBOX_FONT_DEFAULT,
    106            LISTBOX_SCROLLSTEP_H_DEFAULT,
    107            {
    108              LISTBOX_BKCOLOR0_DEFAULT,
    109              LISTBOX_BKCOLOR1_DEFAULT,
    110              LISTBOX_BKCOLOR2_DEFAULT,
    111              LISTBOX_BKCOLOR3_DEFAULT,
    112            },
    113            {
    114              LISTBOX_TEXTCOLOR0_DEFAULT,
    115              LISTBOX_TEXTCOLOR1_DEFAULT,
    116              LISTBOX_TEXTCOLOR2_DEFAULT,
    117              LISTBOX_TEXTCOLOR3_DEFAULT,
    118            },
    119            {
    120              GUI_INVALID_COLOR,
    121              GUI_INVALID_COLOR,
    122              GUI_INVALID_COLOR,
    123            },
    124            LISTBOX_TEXTALIGN_DEFAULT
    125          };
    126          
    127          
    128          /*********************************************************************
    129          *
    130          *       Static routines
    131          *
    132          **********************************************************************
    133          */
    134          /*********************************************************************
    135          *
    136          *       _CallOwnerDraw
    137          */
    138          static int _CallOwnerDraw(LISTBOX_Handle hObj, int Cmd, int ItemIndex) {
    139            WIDGET_ITEM_DRAW_INFO ItemInfo;
    140            LISTBOX_Obj * pObj;
    141            WIDGET_DRAW_ITEM_FUNC * pfDrawItem;
    142            int r;
    143            ItemInfo.Cmd       = Cmd;
    144            ItemInfo.hWin      = hObj;
    145            ItemInfo.ItemIndex = ItemIndex;
    146            pObj = LISTBOX_LOCK_H(hObj);
    147            pfDrawItem = pObj->pfDrawItem;
    148            GUI_UNLOCK_H(pObj);
    149            if (pfDrawItem) {
    150              r = pfDrawItem(&ItemInfo);
    151            }
    152            return r;
    153          }
    154          
    155          /*********************************************************************
    156          *
    157          *       _GetYSize
    158          */
    159          static int _GetYSize(LISTBOX_Handle hObj) {
    160            GUI_RECT Rect;
    161            WM_GetInsideRectExScrollbar(hObj, &Rect);
    162            return (Rect.y1 - Rect.y0 + 1);
    163          }
    164          
    165          /*********************************************************************
    166          *
    167          *       _GetItemSizeY
    168          */

   \                                 In section .text, align 4, keep-with-next
    169          static int _GetItemSizeY(LISTBOX_Handle hObj, unsigned Index) {
   \                     _GetItemSizeY:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    170            int ySize;
    171            LISTBOX_Obj * pObj;
    172            LISTBOX_ITEM * pItem;
    173            GUI_ARRAY ItemArray;
    174            const GUI_FONT GUI_UNI_PTR * pFont;
    175            pObj = LISTBOX_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
    176            pFont = pObj->Props.pFont;
   \   00000014   548090E5           LDR      R8,[R0, #+84]
    177            ItemArray = pObj->ItemArray;
   \   00000018   345090E5           LDR      R5,[R0, #+52]
    178            GUI_UNLOCK_H(pObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
    179            pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index);
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       GUI_ARRAY_GetpItemLocked
    180            if (pItem == NULL) {
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1D00000A           BEQ      ??_GetItemSizeY_0
    181              return 0;
    182            }
    183            ySize = pItem->ySize;
   \   00000034   B270D0E1           LDRH     R7,[R0, #+2]
    184            if (ySize == 0) {
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   1800001A           BNE      ??_GetItemSizeY_1
    185              const GUI_FONT GUI_UNI_PTR * pOldFont;
    186              pOldFont = GUI_SetFont(pFont);
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   ........           BL       GUI_SetFont
   \   00000048   0080A0E1           MOV      R8,R0
    187              GUI_UNLOCK_H(pItem);
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    188              ySize    = _CallOwnerDraw(hObj, WIDGET_ITEM_GET_YSIZE, Index);
   \   00000050   1910A0E3           MOV      R1,#+25
   \   00000054   04108DE5           STR      R1,[SP, #+4]
   \   00000058   00608DE5           STR      R6,[SP, #+0]
   \   0000005C   08408DE5           STR      R4,[SP, #+8]
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       GUI_ALLOC_LockH
   \   00000068   386090E5           LDR      R6,[R0, #+56]
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   0200000A           BEQ      ??_GetItemSizeY_2
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   36FF2FE1           BLX      R6
   \   00000080   0070A0E1           MOV      R7,R0
    189              GUI_SetFont(pOldFont);
   \                     ??_GetItemSizeY_2:
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   ........           BL       GUI_SetFont
    190              if (ySize) {
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   0400000A           BEQ      ??_GetItemSizeY_3
    191                pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index);
    192                pItem->ySize = ySize;
   \   00000094   0410A0E1           MOV      R1,R4
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000A0   B270C0E1           STRH     R7,[R0, #+2]
    193                GUI_UNLOCK_H(pItem);
    194              }
    195            } else {
    196              GUI_UNLOCK_H(pItem);
   \                     ??_GetItemSizeY_1:
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
    197            }
    198            return ySize;
   \                     ??_GetItemSizeY_3:
   \   000000A8   0700A0E1           MOV      R0,R7
   \                     ??_GetItemSizeY_0:
   \   000000AC   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000B0   F081BDE8           POP      {R4-R8,PC}       ;; return
    199          }
    200          
    201          /*********************************************************************
    202          *
    203          *       _GetContentsSizeX
    204          */

   \                                 In section .text, align 4, keep-with-next
    205          static int _GetContentsSizeX(LISTBOX_Handle hObj) {
   \                     _GetContentsSizeX:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    206            int ContentSizeX;
    207            LISTBOX_Obj  * pObj;
    208            LISTBOX_ITEM * pItem;
    209            int i, NumItems, xSize;
    210            GUI_ARRAY ItemArray;
    211            const GUI_FONT GUI_UNI_PTR * pFont;
    212          
    213            pObj = LISTBOX_LOCK_H(hObj); {
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0070A0E1           MOV      R7,R0
    214              pFont = pObj->Props.pFont;
   \   00000014   540097E5           LDR      R0,[R7, #+84]
   \   00000018   00008DE5           STR      R0,[SP, #+0]
    215              NumItems = LISTBOX__GetNumItems(pObj);
   \   0000001C   340097E5           LDR      R0,[R7, #+52]
   \   00000020   ........           BL       GUI_ARRAY_GetNumItems
    216              ItemArray = pObj->ItemArray;
   \   00000024   346097E5           LDR      R6,[R7, #+52]
   \   00000028   0050A0E1           MOV      R5,R0
    217              ContentSizeX = pObj->ContentSizeX;
   \   0000002C   B679D7E1           LDRH     R7,[R7, #+150]
    218            } GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    219            if (ContentSizeX == 0) {
   \   00000034   000057E3           CMP      R7,#+0
   \   00000038   2900001A           BNE      ??_GetContentsSizeX_0
    220              for (i = 0; i < NumItems; i++) {
   \   0000003C   0080A0E3           MOV      R8,#+0
   \   00000040   010055E3           CMP      R5,#+1
   \   00000044   260000BA           BLT      ??_GetContentsSizeX_0
    221                pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, i);
   \                     ??_GetContentsSizeX_1:
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           BL       GUI_ARRAY_GetpItemLocked
    222                if (pItem == NULL) {
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1E00000A           BEQ      ??_GetContentsSizeX_2
    223                  continue;
    224                }
    225                xSize = pItem->xSize;
   \   0000005C   B0A0D0E1           LDRH     R10,[R0, #+0]
    226                if (xSize == 0) {
   \   00000060   00005AE3           CMP      R10,#+0
   \   00000064   1800001A           BNE      ??_GetContentsSizeX_3
    227                  const GUI_FONT GUI_UNI_PTR * pOldFont;
    228                  pOldFont = GUI_SetFont(pFont);
   \   00000068   00009DE5           LDR      R0,[SP, #+0]
   \   0000006C   ........           BL       GUI_SetFont
   \   00000070   0090A0E1           MOV      R9,R0
    229                  GUI_UNLOCK_H(pItem);
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
    230                  xSize    = _CallOwnerDraw(hObj, WIDGET_ITEM_GET_XSIZE, i);
   \   00000078   1810A0E3           MOV      R1,#+24
   \   0000007C   08108DE5           STR      R1,[SP, #+8]
   \   00000080   04408DE5           STR      R4,[SP, #+4]
   \   00000084   0C808DE5           STR      R8,[SP, #+12]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       GUI_ALLOC_LockH
   \   00000090   38B090E5           LDR      R11,[R0, #+56]
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
   \   00000098   00005BE3           CMP      R11,#+0
   \   0000009C   0200000A           BEQ      ??_GetContentsSizeX_4
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   3BFF2FE1           BLX      R11
   \   000000A8   00A0A0E1           MOV      R10,R0
    231                  GUI_SetFont(pOldFont);
   \                     ??_GetContentsSizeX_4:
   \   000000AC   0900A0E1           MOV      R0,R9
   \   000000B0   ........           BL       GUI_SetFont
    232                  if (xSize) {
   \   000000B4   00005AE3           CMP      R10,#+0
   \   000000B8   0400000A           BEQ      ??_GetContentsSizeX_5
    233                    pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, i);
    234                    pItem->xSize = xSize;
   \   000000BC   0810A0E1           MOV      R1,R8
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000C8   B0A0C0E1           STRH     R10,[R0, #+0]
    235                    GUI_UNLOCK_H(pItem);
    236                  }
    237                } else {
    238                  GUI_UNLOCK_H(pItem);
   \                     ??_GetContentsSizeX_3:
   \   000000CC   ........           BL       GUI_ALLOC_UnlockH
    239                }
    240                if (ContentSizeX < xSize) {
   \                     ??_GetContentsSizeX_5:
   \   000000D0   0A0057E1           CMP      R7,R10
   \   000000D4   0A70A0B1           MOVLT    R7,R10
    241                  ContentSizeX = xSize;
    242                }
    243              }
   \                     ??_GetContentsSizeX_2:
   \   000000D8   018088E2           ADD      R8,R8,#+1
   \   000000DC   050058E1           CMP      R8,R5
   \   000000E0   D8FFFFBA           BLT      ??_GetContentsSizeX_1
    244            }
    245            return ContentSizeX;
   \                     ??_GetContentsSizeX_0:
   \   000000E4   0700A0E1           MOV      R0,R7
   \   000000E8   24D08DE2           ADD      SP,SP,#+36
   \   000000EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    246          }
    247          
    248          /*********************************************************************
    249          *
    250          *       _GetItemPosY
    251          */

   \                                 In section .text, align 4, keep-with-next
    252          static int _GetItemPosY(LISTBOX_Handle hObj, unsigned Index) {
   \                     _GetItemPosY:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    253            int ScrollPosV;
    254            LISTBOX_Obj * pObj;
    255            unsigned NumItems;
    256            int i;
    257            int PosY;
    258            LISTBOX_ITEM * pItem;
    259            GUI_ARRAY ItemArray;
    260              
    261            //
    262            // Get properties of object
    263            //
    264            pObj = LISTBOX_LOCK_H(hObj); {
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0060A0E1           MOV      R6,R0
    265              ScrollPosV = pObj->ScrollStateV.v;
   \   00000014   407096E5           LDR      R7,[R6, #+64]
    266              NumItems   = LISTBOX__GetNumItems(pObj);
   \   00000018   340096E5           LDR      R0,[R6, #+52]
   \   0000001C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000020   0080A0E1           MOV      R8,R0
    267              ItemArray  = pObj->ItemArray;
   \   00000024   346096E5           LDR      R6,[R6, #+52]
    268            } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    269            if (Index < NumItems) {
   \   0000002C   080055E1           CMP      R5,R8
   \   00000030   2500002A           BCS      ??_GetItemPosY_0
    270              if ((int)Index >= ScrollPosV) {
   \   00000034   070055E1           CMP      R5,R7
   \   00000038   230000BA           BLT      ??_GetItemPosY_0
    271                //
    272                // Get position from item
    273                //
    274                pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index); {
    275                  PosY = pItem->ItemPosY;
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000048   047090E5           LDR      R7,[R0, #+4]
    276                } GUI_UNLOCK_H(pItem);
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    277                //
    278                // Calculate position only if not initialized
    279                //
    280                if (PosY < 0) {
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   1A00005A           BPL      ??_GetItemPosY_1
    281                  //
    282                  // Get latest valid y-position
    283                  //
    284                  i = Index;
   \   00000058   0580A0E1           MOV      R8,R5
    285                  while (--i >= 0) {
   \                     ??_GetItemPosY_2:
   \   0000005C   018058E2           SUBS     R8,R8,#+1
   \   00000060   0600004A           BMI      ??_GetItemPosY_3
    286                    pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, i); {
    287                      PosY = pItem->ItemPosY;
   \   00000064   0810A0E1           MOV      R1,R8
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000070   047090E5           LDR      R7,[R0, #+4]
    288                    } GUI_UNLOCK_H(pItem);
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
    289                    if (PosY >= 0) {
   \   00000078   000057E3           CMP      R7,#+0
   \   0000007C   F6FFFF4A           BMI      ??_GetItemPosY_2
    290                      break;
    291                    }
    292                  }
    293                  //
    294                  // Add sizes from elements above
    295                  //
    296                  if (PosY < 0) {
   \                     ??_GetItemPosY_3:
   \   00000080   000057E3           CMP      R7,#+0
    297                    PosY = i = 0;
   \   00000084   0080A043           MOVMI    R8,#+0
   \   00000088   0070A043           MOVMI    R7,#+0
    298                  }
    299                  if (Index) {
   \   0000008C   000055E3           CMP      R5,#+0
   \   00000090   0600000A           BEQ      ??_GetItemPosY_4
    300                    do {
    301                      PosY += _GetItemSizeY(hObj, i);
   \                     ??_GetItemPosY_5:
   \   00000094   0810A0E1           MOV      R1,R8
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       _GetItemSizeY
    302                    } while ((unsigned)++i < Index);
   \   000000A0   018088E2           ADD      R8,R8,#+1
   \   000000A4   077080E0           ADD      R7,R0,R7
   \   000000A8   050058E1           CMP      R8,R5
   \   000000AC   F8FFFF3A           BCC      ??_GetItemPosY_5
    303                  }
    304                  //
    305                  // Save value
    306                  //
    307                  pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index); {
    308                    pItem->ItemPosY = PosY;
   \                     ??_GetItemPosY_4:
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0600A0E1           MOV      R0,R6
   \   000000B8   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000BC   047080E5           STR      R7,[R0, #+4]
    309                  } GUI_UNLOCK_H(pItem);
   \   000000C0   ........           BL       GUI_ALLOC_UnlockH
    310                }
    311                return PosY;
   \                     ??_GetItemPosY_1:
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   F081BDE8           POP      {R4-R8,PC}
    312              }
    313            }
    314            return -1;
   \                     ??_GetItemPosY_0:
   \   000000CC   0000E0E3           MVN      R0,#+0
   \   000000D0   F081BDE8           POP      {R4-R8,PC}       ;; return
    315          }
    316          
    317          /*********************************************************************
    318          *
    319          *       _IsPartiallyVis
    320          */
    321          static int _IsPartiallyVis(LISTBOX_Handle hObj) {
    322            LISTBOX_Obj * pObj;
    323            int Index, NumItems, ScrollPosV, y;
    324            pObj = LISTBOX_LOCK_H(hObj);
    325            Index = pObj->Sel;
    326            NumItems = (int)LISTBOX__GetNumItems(pObj);
    327            ScrollPosV = pObj->ScrollStateV.v;
    328            GUI_UNLOCK_H(pObj);
    329            if (Index < NumItems) {
    330              if (Index >= ScrollPosV) {
    331                y  = _GetItemPosY (hObj, Index);
    332                y += _GetItemSizeY(hObj, Index);
    333                y -= _GetItemPosY (hObj, ScrollPosV);
    334                if (y > _GetYSize(hObj)) {
    335                  return 1;
    336                }
    337              }
    338            }
    339            return 0;
    340          }
    341          
    342          /*********************************************************************
    343          *
    344          *       _GetNumVisItems
    345          *
    346          *  Returns:
    347          *   Number of fully or partially visible items
    348          */
    349          static unsigned _GetNumVisItems(LISTBOX_Handle hObj) {
    350            LISTBOX_Obj * pObj;
    351            int NumItems, r = 1;
    352            pObj = LISTBOX_LOCK_H(hObj);
    353            NumItems = LISTBOX__GetNumItems(pObj);
    354            GUI_UNLOCK_H(pObj);
    355            if (NumItems > 1) {
    356              int i, ySize, DistY = 0;
    357              ySize = _GetYSize(hObj);
    358              for (i = NumItems - 1; i >= 0; i--) {
    359                DistY += _GetItemSizeY(hObj, i);
    360                if (DistY > ySize) {
    361                  break;
    362                }
    363              }
    364              r = NumItems - i - 1;
    365              if (r < 1) {
    366                return 1;
    367              }
    368            }
    369            return r;
    370          }
    371          
    372          /*********************************************************************
    373          *
    374          *       _NotifyOwner
    375          *
    376          * Purpose:
    377          *   Notify owner of the window by sending a WM_NOTIFY_PARENT message.
    378          *   If no owner is registered, the parent is considered owner.
    379          */
    380          static void _NotifyOwner(WM_HWIN hObj, int Notification) {
    381            WM_MESSAGE Msg = {0};
    382            WM_HWIN hOwner;
    383            LISTBOX_Obj * pObj;
    384            pObj = LISTBOX_LOCK_H(hObj);
    385            hOwner = pObj->hOwner ? pObj->hOwner : WM_GetParent(hObj);
    386            Msg.MsgId  = WM_NOTIFY_PARENT;
    387            Msg.Data.v = Notification;
    388            Msg.hWinSrc= hObj;
    389            GUI_UNLOCK_H(pObj);
    390            WM__SendMessage(hOwner, &Msg);
    391          }
    392          
    393          /*********************************************************************
    394          *
    395          *       _SendToOwner
    396          *
    397          * Purpose:
    398          *   Sends the given emssage to the owner of the window.
    399          *   If no owner is registered, the parent is considered owner.
    400          */
    401          static void _SendToOwner(WM_HWIN hObj, WM_MESSAGE * pMsg) {
    402            WM_HWIN hOwner;
    403            LISTBOX_Obj * pObj;
    404            pObj = LISTBOX_LOCK_H(hObj);
    405            hOwner = pObj->hOwner ? pObj->hOwner : WM_GetParent(hObj);
    406            pMsg->hWinSrc= hObj;
    407            GUI_UNLOCK_H(pObj);
    408            WM__SendMessage(hOwner, pMsg);
    409          }
    410          
    411          /*********************************************************************
    412          *
    413          *       _UpdateScrollPos
    414          *
    415          * Purpose:
    416          *   Checks whether if we must scroll up or scroll down to ensure
    417          *   that selection is in the visible area. This function also
    418          *   makes sure that scroll positions are in valid ranges.
    419          *
    420          * Return value:
    421          *   Difference between old and new vertical scroll pos.
    422          */

   \                                 In section .text, align 4, keep-with-next
    423          static int _UpdateScrollPos(LISTBOX_Handle hObj) {
   \                     _UpdateScrollPos:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
    424            WM_SCROLL_STATE ScrollStateV, ScrollStateH;
    425            LISTBOX_Obj * pObj;
    426            int PrevScrollStateV;
    427            int IsPartiallyVis;
    428            int r;
    429            IsPartiallyVis = _IsPartiallyVis(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   F069D5E1           LDRSH    R6,[R5, #+144]
   \   00000018   340095E5           LDR      R0,[R5, #+52]
   \   0000001C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000020   0070A0E1           MOV      R7,R0
   \   00000024   408095E5           LDR      R8,[R5, #+64]
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   \   0000002C   070056E1           CMP      R6,R7
   \   00000030   180000AA           BGE      ??_UpdateScrollPos_0
   \   00000034   080056E1           CMP      R6,R8
   \   00000038   160000BA           BLT      ??_UpdateScrollPos_0
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       _GetItemPosY
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       _GetItemSizeY
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       _GetItemPosY
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       WM_GetInsideRectExScrollbar
   \   00000078   F600DDE1           LDRSH    R0,[SP, #+6]
   \   0000007C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000080   010040E0           SUB      R0,R0,R1
   \   00000084   051086E0           ADD      R1,R6,R5
   \   00000088   010080E2           ADD      R0,R0,#+1
   \   0000008C   071041E0           SUB      R1,R1,R7
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   010000BA           BLT      ??_UpdateScrollPos_1
   \                     ??_UpdateScrollPos_0:
   \   00000098   0070A0E3           MOV      R7,#+0
   \   0000009C   000000EA           B        ??_UpdateScrollPos_2
   \                     ??_UpdateScrollPos_1:
   \   000000A0   0170A0E3           MOV      R7,#+1
    430            pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_UpdateScrollPos_2:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       GUI_ALLOC_LockH
   \   000000AC   0060A0E1           MOV      R6,R0
    431            PrevScrollStateV = pObj->ScrollStateV.v;
    432            if (pObj->Sel >= 0) {
   \   000000B0   F009D6E1           LDRSH    R0,[R6, #+144]
   \   000000B4   405096E5           LDR      R5,[R6, #+64]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0800004A           BMI      ??_UpdateScrollPos_3
    433              /* Check upper limit */
    434              if (IsPartiallyVis) {
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   0300000A           BEQ      ??_UpdateScrollPos_4
    435                pObj->ScrollStateV.v = pObj->Sel - (pObj->ScrollStateV.PageSize - 1);
   \   000000C8   441096E5           LDR      R1,[R6, #+68]
   \   000000CC   011040E0           SUB      R1,R0,R1
   \   000000D0   011081E2           ADD      R1,R1,#+1
   \   000000D4   401086E5           STR      R1,[R6, #+64]
    436              }
    437              /* Check lower limit */
    438              if (pObj->Sel < pObj->ScrollStateV.v) {
   \                     ??_UpdateScrollPos_4:
   \   000000D8   401096E5           LDR      R1,[R6, #+64]
   \   000000DC   010050E1           CMP      R0,R1
    439                pObj->ScrollStateV.v = pObj->Sel;
   \   000000E0   400086B5           STRLT    R0,[R6, #+64]
    440              }
    441            }
    442            WM_CheckScrollBounds(&pObj->ScrollStateV);
   \                     ??_UpdateScrollPos_3:
   \   000000E4   3C0086E2           ADD      R0,R6,#+60
   \   000000E8   ........           BL       WM_CheckScrollBounds
    443            WM_CheckScrollBounds(&pObj->ScrollStateH);
   \   000000EC   480086E2           ADD      R0,R6,#+72
   \   000000F0   ........           BL       WM_CheckScrollBounds
    444            ScrollStateV = pObj->ScrollStateV;
   \   000000F4   3C1086E2           ADD      R1,R6,#+60
   \   000000F8   0C10B1E8           LDM      R1!,{R2,R3,R12}
   \   000000FC   14008DE2           ADD      R0,SP,#+20
   \   00000100   0C10A0E8           STM      R0!,{R2,R3,R12}
    445            ScrollStateH = pObj->ScrollStateH;
   \   00000104   0C10B1E8           LDM      R1!,{R2,R3,R12}
   \   00000108   08008DE2           ADD      R0,SP,#+8
   \   0000010C   0C10A0E8           STM      R0!,{R2,R3,R12}
    446            GUI_UNLOCK_H(pObj);
   \   00000110   ........           BL       GUI_ALLOC_UnlockH
    447            WIDGET__SetScrollState(hObj, &ScrollStateV, &ScrollStateH);
   \   00000114   08208DE2           ADD      R2,SP,#+8
   \   00000118   14108DE2           ADD      R1,SP,#+20
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       WIDGET__SetScrollState
    448            r = ScrollStateV.v - PrevScrollStateV;
    449            return r;
   \   00000124   18009DE5           LDR      R0,[SP, #+24]
   \   00000128   20D08DE2           ADD      SP,SP,#+32
   \   0000012C   050040E0           SUB      R0,R0,R5
   \   00000130   F081BDE8           POP      {R4-R8,PC}       ;; return
    450          }
    451          
    452          /*********************************************************************
    453          *
    454          *       _CalcScrollParas
    455          */

   \                                 In section .text, align 4, keep-with-next
    456          static int _CalcScrollParas(LISTBOX_Handle hObj) {
   \                     _CalcScrollParas:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
    457            int r;
    458            GUI_RECT Rect;
    459            LISTBOX_Obj * pObj;
    460            pObj = LISTBOX_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
    461            /* Calc vertical scroll parameters */
    462            pObj->ScrollStateV.NumItems = LISTBOX__GetNumItems(pObj);
   \   00000014   340095E5           LDR      R0,[R5, #+52]
   \   00000018   ........           BL       GUI_ARRAY_GetNumItems
   \   0000001C   3C0085E5           STR      R0,[R5, #+60]
    463            pObj->ScrollStateV.PageSize = _GetNumVisItems(hObj);
   \   00000020   0170A0E3           MOV      R7,#+1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   340090E5           LDR      R0,[R0, #+52]
   \   00000030   ........           BL       GUI_ARRAY_GetNumItems
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   \   0000003C   020056E3           CMP      R6,#+2
   \   00000040   150000BA           BLT      ??_CalcScrollParas_0
   \   00000044   0070A0E3           MOV      R7,#+0
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       WM_GetInsideRectExScrollbar
   \   00000054   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000058   F210DDE1           LDRSH    R1,[SP, #+2]
   \   0000005C   019056E2           SUBS     R9,R6,#+1
   \   00000060   010040E0           SUB      R0,R0,R1
   \   00000064   018080E2           ADD      R8,R0,#+1
   \   00000068   0700004A           BMI      ??_CalcScrollParas_1
   \                     ??_CalcScrollParas_2:
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       _GetItemSizeY
   \   00000078   077080E0           ADD      R7,R0,R7
   \   0000007C   070058E1           CMP      R8,R7
   \   00000080   010000BA           BLT      ??_CalcScrollParas_1
   \   00000084   019059E2           SUBS     R9,R9,#+1
   \   00000088   F7FFFF5A           BPL      ??_CalcScrollParas_2
   \                     ??_CalcScrollParas_1:
   \   0000008C   090046E0           SUB      R0,R6,R9
   \   00000090   017040E2           SUB      R7,R0,#+1
   \   00000094   010057E3           CMP      R7,#+1
   \   00000098   0170A0B3           MOVLT    R7,#+1
   \                     ??_CalcScrollParas_0:
   \   0000009C   447085E5           STR      R7,[R5, #+68]
    464            /* Calc horizontal scroll parameters */
    465            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   000000A0   08108DE2           ADD      R1,SP,#+8
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       WM_GetInsideRectExScrollbar
    466            pObj->ScrollStateH.NumItems = _GetContentsSizeX(hObj);
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       _GetContentsSizeX
   \   000000B4   480085E5           STR      R0,[R5, #+72]
    467            pObj->ScrollStateH.PageSize = Rect.x1 - Rect.x0 + 1;
   \   000000B8   FC00DDE1           LDRSH    R0,[SP, #+12]
   \   000000BC   F810DDE1           LDRSH    R1,[SP, #+8]
   \   000000C0   010040E0           SUB      R0,R0,R1
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   500085E5           STR      R0,[R5, #+80]
    468            r = _UpdateScrollPos(hObj);
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       _UpdateScrollPos
   \   000000D4   0040A0E1           MOV      R4,R0
    469            GUI_UNLOCK_H(pObj);
   \   000000D8   ........           BL       GUI_ALLOC_UnlockH
    470            return r;
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   14D08DE2           ADD      SP,SP,#+20
   \   000000E4   F083BDE8           POP      {R4-R9,PC}       ;; return
    471          }
    472          
    473          /*********************************************************************
    474          *
    475          *       _ManageAutoScroll
    476          */

   \                                 In section .text, align 4, keep-with-next
    477          static void _ManageAutoScroll(LISTBOX_Handle hObj) {
   \                     _ManageAutoScroll:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0050A0E1           MOV      R5,R0
    478            char IsRequired;
    479            LISTBOX_Obj * pObj;
    480            pObj = LISTBOX_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0040A0E1           MOV      R4,R0
    481            if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_V) {
   \   00000014   9200D4E5           LDRB     R0,[R4, #+146]
   \   00000018   020010E3           TST      R0,#0x2
   \   0000001C   2A00000A           BEQ      ??_ManageAutoScroll_0
    482              IsRequired = (_GetNumVisItems(hObj) < LISTBOX__GetNumItems(pObj));
   \   00000020   0170A0E3           MOV      R7,#+1
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   340090E5           LDR      R0,[R0, #+52]
   \   00000030   ........           BL       GUI_ARRAY_GetNumItems
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   \   0000003C   020056E3           CMP      R6,#+2
   \   00000040   150000BA           BLT      ??_ManageAutoScroll_1
   \   00000044   0070A0E3           MOV      R7,#+0
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       WM_GetInsideRectExScrollbar
   \   00000054   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000058   F210DDE1           LDRSH    R1,[SP, #+2]
   \   0000005C   019056E2           SUBS     R9,R6,#+1
   \   00000060   010040E0           SUB      R0,R0,R1
   \   00000064   018080E2           ADD      R8,R0,#+1
   \   00000068   0700004A           BMI      ??_ManageAutoScroll_2
   \                     ??_ManageAutoScroll_3:
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       _GetItemSizeY
   \   00000078   077080E0           ADD      R7,R0,R7
   \   0000007C   070058E1           CMP      R8,R7
   \   00000080   010000BA           BLT      ??_ManageAutoScroll_2
   \   00000084   019059E2           SUBS     R9,R9,#+1
   \   00000088   F7FFFF5A           BPL      ??_ManageAutoScroll_3
   \                     ??_ManageAutoScroll_2:
   \   0000008C   090046E0           SUB      R0,R6,R9
   \   00000090   017040E2           SUB      R7,R0,#+1
   \   00000094   010057E3           CMP      R7,#+1
   \   00000098   0170A0B3           MOVLT    R7,#+1
   \                     ??_ManageAutoScroll_1:
   \   0000009C   340094E5           LDR      R0,[R4, #+52]
   \   000000A0   ........           BL       GUI_ARRAY_GetNumItems
   \   000000A4   000057E1           CMP      R7,R0
   \   000000A8   0140A033           MOVCC    R4,#+1
   \   000000AC   0040A023           MOVCS    R4,#+0
    483              GUI_UNLOCK_H(pObj);
   \   000000B0   ........           BL       GUI_ALLOC_UnlockH
    484              WM_SetScrollbarV(hObj, IsRequired);
   \   000000B4   0410A0E1           MOV      R1,R4
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           BL       WM_SetScrollbarV
    485              pObj = LISTBOX_LOCK_H(hObj);
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       GUI_ALLOC_LockH
   \   000000C8   0040A0E1           MOV      R4,R0
    486            }
    487            if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_H) {
   \                     ??_ManageAutoScroll_0:
   \   000000CC   9200D4E5           LDRB     R0,[R4, #+146]
   \   000000D0   010010E3           TST      R0,#0x1
   \   000000D4   1300000A           BEQ      ??_ManageAutoScroll_4
    488              GUI_RECT Rect;
    489              int xSize, xSizeContents;
    490              xSizeContents = _GetContentsSizeX(hObj);
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           BL       _GetContentsSizeX
   \   000000E0   0040A0E1           MOV      R4,R0
    491              WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   000000E4   0D10A0E1           MOV      R1,SP
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   ........           BL       WM_GetInsideRectExScrollbar
    492              xSize = Rect.x1 - Rect.x0 + 1;
    493              IsRequired = (xSizeContents > xSize);
   \   000000F0   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000F4   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000000F8   010040E0           SUB      R0,R0,R1
   \   000000FC   010080E2           ADD      R0,R0,#+1
   \   00000100   040050E1           CMP      R0,R4
   \   00000104   0140A0B3           MOVLT    R4,#+1
   \   00000108   0040A0A3           MOVGE    R4,#+0
    494              GUI_UNLOCK_H(pObj);
   \   0000010C   ........           BL       GUI_ALLOC_UnlockH
    495              WM_SetScrollbarH(hObj, IsRequired);
   \   00000110   0410A0E1           MOV      R1,R4
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   ........           BL       WM_SetScrollbarH
    496              pObj = LISTBOX_LOCK_H(hObj);
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           BL       GUI_ALLOC_LockH
   \   00000124   0040A0E1           MOV      R4,R0
    497            }
    498            if (pObj->ScrollbarWidth) {
   \                     ??_ManageAutoScroll_4:
   \   00000128   9360D4E5           LDRB     R6,[R4, #+147]
   \   0000012C   000056E3           CMP      R6,#+0
   \   00000130   1000000A           BEQ      ??_ManageAutoScroll_5
    499              LISTBOX__SetScrollbarWidth(hObj, pObj);
   \   00000134   0100001A           BNE      ??_ManageAutoScroll_6
   \   00000138   ........           BL       SCROLLBAR_GetDefaultWidth
   \   0000013C   0060A0E1           MOV      R6,R0
   \                     ??_ManageAutoScroll_6:
   \   00000140   FF10A0E3           MOV      R1,#+255
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           BL       WM_GetDialogItem
   \   0000014C   0070A0E1           MOV      R7,R0
   \   00000150   FE10A0E3           MOV      R1,#+254
   \   00000154   0500A0E1           MOV      R0,R5
   \   00000158   ........           BL       WM_GetDialogItem
   \   0000015C   0080A0E1           MOV      R8,R0
   \   00000160   0610A0E1           MOV      R1,R6
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   ........           BL       SCROLLBAR_SetWidth
   \   0000016C   0610A0E1           MOV      R1,R6
   \   00000170   0800A0E1           MOV      R0,R8
   \   00000174   ........           BL       SCROLLBAR_SetWidth
    500            }
    501            LISTBOX__SetScrollbarColor(hObj, pObj);
   \                     ??_ManageAutoScroll_5:
   \   00000178   FF10A0E3           MOV      R1,#+255
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           BL       WM_GetDialogItem
   \   00000184   0060A0E1           MOV      R6,R0
   \   00000188   FE10A0E3           MOV      R1,#+254
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           BL       WM_GetDialogItem
   \   00000194   0050A0E1           MOV      R5,R0
   \   00000198   060095E1           ORRS     R0,R5,R6
   \   0000019C   1000000A           BEQ      ??_ManageAutoScroll_7
   \   000001A0   0070A0E3           MOV      R7,#+0
   \   000001A4   F084E0E3           MVN      R8,#-268435456
   \                     ??_ManageAutoScroll_8:
   \   000001A8   7C0094E5           LDR      R0,[R4, #+124]
   \   000001AC   080050E1           CMP      R0,R8
   \   000001B0   0700000A           BEQ      ??_ManageAutoScroll_9
   \   000001B4   0020A0E1           MOV      R2,R0
   \   000001B8   0710A0E1           MOV      R1,R7
   \   000001BC   0600A0E1           MOV      R0,R6
   \   000001C0   ........           BL       SCROLLBAR_SetColor
   \   000001C4   7C2094E5           LDR      R2,[R4, #+124]
   \   000001C8   0710A0E1           MOV      R1,R7
   \   000001CC   0500A0E1           MOV      R0,R5
   \   000001D0   ........           BL       SCROLLBAR_SetColor
   \                     ??_ManageAutoScroll_9:
   \   000001D4   017087E2           ADD      R7,R7,#+1
   \   000001D8   044084E2           ADD      R4,R4,#+4
   \   000001DC   030057E3           CMP      R7,#+3
   \   000001E0   F0FFFF3A           BCC      ??_ManageAutoScroll_8
    502            GUI_UNLOCK_H(pObj);
   \                     ??_ManageAutoScroll_7:
   \   000001E4   ........           BL       GUI_ALLOC_UnlockH
    503          }
   \   000001E8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000001EC   F083BDE8           POP      {R4-R9,PC}       ;; return
    504          
    505          /*********************************************************************
    506          *
    507          *       LISTBOX_UpdateScrollers
    508          */

   \                                 In section .text, align 4, keep-with-next
    509          int LISTBOX_UpdateScrollers(LISTBOX_Handle hObj) {
   \                     LISTBOX_UpdateScrollers:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    510            _ManageAutoScroll(hObj);
   \   00000008   ........           BL       _ManageAutoScroll
    511            return _CalcScrollParas(hObj);
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   ........           B        _CalcScrollParas  ;; tailcall
    512          }
    513          
    514          /*********************************************************************
    515          *
    516          *       _Tolower
    517          */
    518          static int _Tolower(int Key) {
    519            if ((Key >= 0x41) && (Key <= 0x5a)) {
    520              Key += 0x20;
    521            }
    522            return Key;
    523          }
    524          
    525          /*********************************************************************
    526          *
    527          *       _IsAlphaNum
    528          */
    529          static int _IsAlphaNum(int Key) {
    530            Key = _Tolower(Key);
    531            if (Key >= 'a' && Key <= 'z') {
    532              return 1;
    533            }
    534            if (Key >= '0' && Key <= '9') {
    535              return 1;
    536            }
    537            return 0;
    538          }
    539          
    540          /*********************************************************************
    541          *
    542          *       _SelectByKey
    543          */
    544          static void _SelectByKey(LISTBOX_Handle hObj, int Key) {
    545            int i, NumItems;
    546            LISTBOX_Obj * pObj;
    547            pObj = LISTBOX_LOCK_H(hObj);
    548            Key = _Tolower(Key);
    549            NumItems = LISTBOX__GetNumItems(pObj);
    550            GUI_UNLOCK_H(pObj);
    551            for (i = 0; i < NumItems; i++) {
    552              const char * s;
    553              int FirstChar;
    554              s = LISTBOX__GetpStringLocked(hObj, i);
    555              FirstChar = _Tolower(*s);
    556              GUI_UNLOCK_H(s);
    557              if (FirstChar == Key) {
    558                LISTBOX_SetSel(hObj, i);
    559                break;
    560              }
    561            }
    562          }
    563          
    564          /*********************************************************************
    565          *
    566          *       _FreeAttached
    567          */
    568          static void _FreeAttached(LISTBOX_Handle hObj) {
    569            LISTBOX_Obj * pObj;
    570            pObj = LISTBOX_LOCK_H(hObj);
    571            GUI_ARRAY_Delete(pObj->ItemArray);
    572            GUI_UNLOCK_H(pObj);
    573          }
    574          
    575          /*********************************************************************
    576          *
    577          *       _OnPaint
    578          */

   \                                 In section .text, align 4, keep-with-next
    579          static void _OnPaint(LISTBOX_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnPaint:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   01A0A0E1           MOV      R10,R1
    580            LISTBOX_Obj * pObj;
    581            WIDGET_ITEM_DRAW_INFO ItemInfo;
    582            GUI_RECT RectInside, RectItem, ClipRect;
    583            int ItemDistY, NumItems, i, ScrollStateV;
    584            WIDGET_DRAW_ITEM_FUNC* pfDrawItem;
    585            GUI_COLOR BackColor;
    586          
    587            pObj = LISTBOX_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0090A0E1           MOV      R9,R0
    588            BackColor = pObj->Props.aBackColor[0];
   \   00000018   5C5099E5           LDR      R5,[R9, #+92]
    589            pfDrawItem = pObj->pfDrawItem;
   \   0000001C   386099E5           LDR      R6,[R9, #+56]
    590            ScrollStateV = pObj->ScrollStateV.v;
   \   00000020   408099E5           LDR      R8,[R9, #+64]
    591            NumItems = LISTBOX__GetNumItems(pObj);
   \   00000024   340099E5           LDR      R0,[R9, #+52]
   \   00000028   ........           BL       GUI_ARRAY_GetNumItems
   \   0000002C   0070A0E1           MOV      R7,R0
    592            GUI_SetFont(pObj->Props.pFont);
   \   00000030   540099E5           LDR      R0,[R9, #+84]
   \   00000034   ........           BL       GUI_SetFont
    593            /* Calculate clipping rectangle */
    594            ClipRect = *(const GUI_RECT*)pMsg->Data.p;
   \   00000038   08008DE2           ADD      R0,SP,#+8
   \   0000003C   0C109AE5           LDR      R1,[R10, #+12]
   \   00000040   0820A0E3           MOV      R2,#+8
   \   00000044   ........           BL       __aeabi_memcpy
    595            GUI_MoveRect(&ClipRect, -pObj->Widget.Win.Rect.x0, -pObj->Widget.Win.Rect.y0);
   \   00000048   F200D9E1           LDRSH    R0,[R9, #+2]
   \   0000004C   002060E2           RSB      R2,R0,#+0
   \   00000050   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000054   001060E2           RSB      R1,R0,#+0
   \   00000058   08008DE2           ADD      R0,SP,#+8
   \   0000005C   ........           BL       GUI_MoveRect
    596            WM_GetInsideRectExScrollbar(hObj, &RectInside);
   \   00000060   10108DE2           ADD      R1,SP,#+16
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       WM_GetInsideRectExScrollbar
    597            GUI__IntersectRect(&ClipRect, &RectInside);
   \   0000006C   10108DE2           ADD      R1,SP,#+16
   \   00000070   08008DE2           ADD      R0,SP,#+8
   \   00000074   ........           BL       GUI__IntersectRect
    598            RectItem.x0 = ClipRect.x0;
   \   00000078   F810DDE1           LDRSH    R1,[SP, #+8]
    599            RectItem.x1 = ClipRect.x1;
    600            /* Fill item info structure */
    601            ItemInfo.Cmd  = WIDGET_ITEM_DRAW;
    602            ItemInfo.hWin = hObj;
   \   0000007C   18408DE5           STR      R4,[SP, #+24]
    603            ItemInfo.x0   = RectInside.x0 - pObj->ScrollStateH.v;
   \   00000080   F001DDE1           LDRSH    R0,[SP, #+16]
   \   00000084   B010CDE1           STRH     R1,[SP, #+0]
   \   00000088   FC10DDE1           LDRSH    R1,[SP, #+12]
   \   0000008C   B410CDE1           STRH     R1,[SP, #+4]
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   1C108DE5           STR      R1,[SP, #+28]
   \   00000098   4C1099E5           LDR      R1,[R9, #+76]
   \   0000009C   010040E0           SUB      R0,R0,R1
    604            ItemInfo.y0   = RectInside.y0;
   \   000000A0   F211DDE1           LDRSH    R1,[SP, #+18]
   \   000000A4   24008DE5           STR      R0,[SP, #+36]
   \   000000A8   28108DE5           STR      R1,[SP, #+40]
    605            GUI_UNLOCK_H(pObj);
   \   000000AC   ........           BL       GUI_ALLOC_UnlockH
    606            /* Do the drawing */
    607            for (i = ScrollStateV; i < NumItems; i++) {
   \   000000B0   070058E1           CMP      R8,R7
   \   000000B4   1E0000AA           BGE      ??_OnPaint_0
    608              RectItem.y0 = ItemInfo.y0;
   \                     ??_OnPaint_1:
   \   000000B8   28109DE5           LDR      R1,[SP, #+40]
    609              /* Break when all other rows are outside the drawing area */
    610              if (RectItem.y0 > ClipRect.y1) {
   \   000000BC   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   000000C0   B210CDE1           STRH     R1,[SP, #+2]
   \   000000C4   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000C8   010050E1           CMP      R0,R1
   \   000000CC   180000BA           BLT      ??_OnPaint_0
    611                break;
    612              }
    613              ItemDistY = _GetItemSizeY(hObj, i);
   \   000000D0   0810A0E1           MOV      R1,R8
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       _GetItemSizeY
    614              RectItem.y1 = RectItem.y0 + ItemDistY - 1;
   \   000000DC   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000E0   0090A0E1           MOV      R9,R0
   \   000000E4   000081E0           ADD      R0,R1,R0
   \   000000E8   010040E2           SUB      R0,R0,#+1
    615              /* Make sure that we draw only when row is in drawing area */
    616              if (RectItem.y1 >= ClipRect.y0) {
   \   000000EC   FA10DDE1           LDRSH    R1,[SP, #+10]
   \   000000F0   B600CDE1           STRH     R0,[SP, #+6]
   \   000000F4   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000F8   400851E1           CMP      R1,R0, ASR #+16
   \   000000FC   060000CA           BGT      ??_OnPaint_2
    617                /* Set user clip rect */
    618                WM_SetUserClipArea(&RectItem);
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           BL       WM_SetUserClipRect
    619                /* Fill item info structure */
    620                ItemInfo.ItemIndex = i;
   \   00000108   20808DE5           STR      R8,[SP, #+32]
    621                /* Draw item */
    622                if (pfDrawItem) {
   \   0000010C   000056E3           CMP      R6,#+0
   \   00000110   0100000A           BEQ      ??_OnPaint_2
    623                  pfDrawItem(&ItemInfo);
   \   00000114   18008DE2           ADD      R0,SP,#+24
   \   00000118   36FF2FE1           BLX      R6
    624                }
    625              }
    626              ItemInfo.y0 += ItemDistY;
   \                     ??_OnPaint_2:
   \   0000011C   28009DE5           LDR      R0,[SP, #+40]
    627            }
   \   00000120   018088E2           ADD      R8,R8,#+1
   \   00000124   000089E0           ADD      R0,R9,R0
   \   00000128   28008DE5           STR      R0,[SP, #+40]
   \   0000012C   070058E1           CMP      R8,R7
   \   00000130   E0FFFFBA           BLT      ??_OnPaint_1
    628            WM_SetUserClipArea(NULL);
   \                     ??_OnPaint_0:
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   ........           BL       WM_SetUserClipRect
    629            /* Calculate & clear 'data free' area */
    630            #if WM_SUPPORT_TRANSPARENCY
    631            if (!WM_GetHasTrans(hObj)) {
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       WM_GetHasTrans
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0700001A           BNE      ??_OnPaint_3
    632            #else
    633            {
    634            #endif
    635              RectItem.y0 = ItemInfo.y0;
   \   0000014C   28109DE5           LDR      R1,[SP, #+40]
    636              RectItem.y1 = RectInside.y1;
    637              LCD_SetBkColor(BackColor);
   \   00000150   0500A0E1           MOV      R0,R5
   \   00000154   B210CDE1           STRH     R1,[SP, #+2]
   \   00000158   F611DDE1           LDRSH    R1,[SP, #+22]
   \   0000015C   B610CDE1           STRH     R1,[SP, #+6]
   \   00000160   ........           BL       LCD_SetBkColor
    638              GUI_ClearRectEx(&RectItem);
   \   00000164   0D00A0E1           MOV      R0,SP
   \   00000168   ........           BL       GUI_ClearRectEx
    639            }
    640            /* Draw the 3D effect (if configured) */
    641            pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_OnPaint_3:
   \   0000016C   0400A0E1           MOV      R0,R4
   \   00000170   ........           BL       GUI_ALLOC_LockH
    642            WIDGET__EFFECT_DrawDown(&pObj->Widget);
   \   00000174   ........           BL       WIDGET__EFFECT_DrawDown
    643            GUI_UNLOCK_H(pObj);
   \   00000178   ........           BL       GUI_ALLOC_UnlockH
    644          }
   \   0000017C   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000180   F087BDE8           POP      {R4-R10,PC}      ;; return
    645          
    646          /*********************************************************************
    647          *
    648          *       _ToggleMultiSel
    649          */

   \                                 In section .text, align 4, keep-with-next
    650          static void _ToggleMultiSel(LISTBOX_Handle hObj, int Sel) {
   \                     _ToggleMultiSel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    651            LISTBOX_Obj * pObj;
    652            U8 Flags;
    653            GUI_ARRAY ItemArray;
    654            pObj = LISTBOX_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
    655            ItemArray = pObj->ItemArray;
   \   00000014   346090E5           LDR      R6,[R0, #+52]
    656            Flags = pObj->Flags;
   \   00000018   9270D0E5           LDRB     R7,[R0, #+146]
    657            GUI_UNLOCK_H(pObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
    658            if (Flags & LISTBOX_SF_MULTISEL) {
   \   00000020   040017E3           TST      R7,#0x4
   \   00000024   4400000A           BEQ      ??_ToggleMultiSel_0
    659              WM_HMEM hItem = GUI_ARRAY_GethItem(ItemArray, Sel);
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           BL       GUI_ARRAY_GethItem
    660              if (hItem) {
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   3F00000A           BEQ      ??_ToggleMultiSel_0
    661                LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
   \   0000003C   ........           BL       GUI_ALLOC_LockH
    662                if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
   \   00000040   0810D0E5           LDRB     R1,[R0, #+8]
   \   00000044   020011E3           TST      R1,#0x2
   \   00000048   3A00001A           BNE      ??_ToggleMultiSel_1
    663                  pItem->Status ^= LISTBOX_ITEM_SELECTED;
   \   0000004C   011021E2           EOR      R1,R1,#0x1
   \   00000050   0810C0E5           STRB     R1,[R0, #+8]
    664                  GUI_UNLOCK_H(pItem);
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
    665                  _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \   00000058   08008DE2           ADD      R0,SP,#+8
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   00C0A0E3           MOV      R12,#+0
   \   0000006C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       GUI_ALLOC_LockH
   \   00000078   8C7090E5           LDR      R7,[R0, #+140]
   \   0000007C   000057E3           CMP      R7,#+0
   \   00000080   0200001A           BNE      ??_ToggleMultiSel_2
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       WM_GetParent
   \   0000008C   0070A0E1           MOV      R7,R0
   \                     ??_ToggleMultiSel_2:
   \   00000090   2610A0E3           MOV      R1,#+38
   \   00000094   08108DE5           STR      R1,[SP, #+8]
   \   00000098   0410A0E3           MOV      R1,#+4
   \   0000009C   14108DE5           STR      R1,[SP, #+20]
   \   000000A0   10408DE5           STR      R4,[SP, #+16]
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
   \   000000A8   08108DE2           ADD      R1,SP,#+8
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           BL       WM__SendMessage
    666                  LISTBOX__InvalidateItem(hObj, Sel);
   \   000000B4   000055E3           CMP      R5,#+0
   \   000000B8   1F00004A           BMI      ??_ToggleMultiSel_0
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       _GetItemPosY
   \   000000C8   0060B0E1           MOVS     R6,R0
   \   000000CC   1A00004A           BMI      ??_ToggleMultiSel_0
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       GUI_ALLOC_LockH
   \   000000D8   407090E5           LDR      R7,[R0, #+64]
   \   000000DC   ........           BL       GUI_ALLOC_UnlockH
   \   000000E0   0710A0E1           MOV      R1,R7
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       _GetItemPosY
   \   000000EC   0070A0E1           MOV      R7,R0
   \   000000F0   0510A0E1           MOV      R1,R5
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       _GetItemSizeY
   \   000000FC   0050A0E1           MOV      R5,R0
   \   00000100   0D10A0E1           MOV      R1,SP
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       WM_GetInsideRectExScrollbar
   \   0000010C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000110   0D10A0E1           MOV      R1,SP
   \   00000114   000086E0           ADD      R0,R6,R0
   \   00000118   070040E0           SUB      R0,R0,R7
   \   0000011C   B200CDE1           STRH     R0,[SP, #+2]
   \   00000120   000085E0           ADD      R0,R5,R0
   \   00000124   010040E2           SUB      R0,R0,#+1
   \   00000128   B600CDE1           STRH     R0,[SP, #+6]
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       WM_InvalidateRect
   \   00000134   000000EA           B        ??_ToggleMultiSel_0
    667                } else {
    668                  GUI_UNLOCK_H(pItem);
   \                     ??_ToggleMultiSel_1:
   \   00000138   ........           BL       GUI_ALLOC_UnlockH
    669                }
    670              }
    671            }
    672          }
   \                     ??_ToggleMultiSel_0:
   \   0000013C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000140   F080BDE8           POP      {R4-R7,PC}       ;; return
    673          
    674          /*********************************************************************
    675          *
    676          *       _GetItemFromPos
    677          */
    678          static int _GetItemFromPos(LISTBOX_Handle hObj, int x, int y) {
    679            LISTBOX_Obj * pObj;
    680            int Sel = -1;
    681            int NumItems, ScrollStateV, ItemSize;
    682            GUI_RECT Rect;
    683          
    684            pObj = LISTBOX_LOCK_H(hObj);
    685            ScrollStateV = pObj->ScrollStateV.v; 
    686            NumItems = LISTBOX__GetNumItems(pObj);
    687            GUI_UNLOCK_H(pObj);
    688            WM_GetInsideRectExScrollbar(hObj, &Rect);
    689            if ((x >= Rect.x0) && (y >= Rect.y0)) {
    690              if ((x <= Rect.x1) && (y <= Rect.y1)) {
    691                int i, y0 = Rect.y0;
    692                for (i = ScrollStateV; i < NumItems; i++) {
    693                  if (y >= y0) {
    694                    Sel = i;
    695                  }
    696                  ItemSize = _GetItemSizeY(hObj, i);
    697                  y0 += ItemSize;
    698                }
    699              }
    700            }
    701            return Sel;
    702          }
    703          
    704          /*********************************************************************
    705          *
    706          *       _OnTouch
    707          */
    708          static void _OnTouch(LISTBOX_Handle hObj, WM_MESSAGE * pMsg) {
    709            const GUI_PID_STATE * pState = (const GUI_PID_STATE *)pMsg->Data.p;
    710            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
    711              if (pState->Pressed == 0) {
    712                _NotifyOwner(hObj, WM_NOTIFICATION_RELEASED);
    713              }
    714            } else {     /* Mouse moved out */
    715              _NotifyOwner(hObj, WM_NOTIFICATION_MOVED_OUT);
    716            }
    717          }
    718          
    719          /*********************************************************************
    720          *
    721          *       _OnMouseOver
    722          */
    723          #if GUI_SUPPORT_MOUSE

   \                                 In section .text, align 4, keep-with-next
    724          static int _OnMouseOver(LISTBOX_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnMouseOver:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0050A0E1           MOV      R5,R0
    725            int ScrollStateV, Sel, NumVisItems;
    726            LISTBOX_Obj * pObj;
    727            WM_HWIN hOwner;
    728            const GUI_PID_STATE * pState;
    729            
    730            pState = (const GUI_PID_STATE *)pMsg->Data.p;
   \   0000000C   0C4091E5           LDR      R4,[R1, #+12]
    731            pObj = LISTBOX_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
    732            ScrollStateV = pObj->ScrollStateV.v;
   \   00000014   406090E5           LDR      R6,[R0, #+64]
    733            hOwner = pObj->hOwner;
   \   00000018   8C7090E5           LDR      R7,[R0, #+140]
    734            GUI_UNLOCK_H(pObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
    735            if (hOwner) {
   \   00000020   000057E3           CMP      R7,#+0
    736              if (pState) {  /* Something happened in our area (pressed or released) */
   \   00000024   00005413           CMPNE    R4,#+0
   \   00000028   5A00000A           BEQ      ??_OnMouseOver_0
    737                Sel = _GetItemFromPos(hObj, pState->x, pState->y);
   \   0000002C   047094E5           LDR      R7,[R4, #+4]
   \   00000030   00B094E5           LDR      R11,[R4, #+0]
   \   00000034   0080E0E3           MVN      R8,#+0
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_ALLOC_LockH
   \   00000040   409090E5           LDR      R9,[R0, #+64]
   \   00000044   340090E5           LDR      R0,[R0, #+52]
   \   00000048   ........           BL       GUI_ARRAY_GetNumItems
   \   0000004C   00A0A0E1           MOV      R10,R0
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           BL       WM_GetInsideRectExScrollbar
   \   00000060   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000064   00005BE1           CMP      R11,R0
   \   00000068   F240DDA1           LDRSHGE  R4,[SP, #+2]
   \   0000006C   040057A1           CMPGE    R7,R4
   \   00000070   F400DDA1           LDRSHGE  R0,[SP, #+4]
   \   00000074   0B0050A1           CMPGE    R0,R11
   \   00000078   F600DDA1           LDRSHGE  R0,[SP, #+6]
   \   0000007C   070050A1           CMPGE    R0,R7
   \   00000080   440000BA           BLT      ??_OnMouseOver_0
   \   00000084   09B0A0E1           MOV      R11,R9
   \   00000088   0A0059E1           CMP      R9,R10
   \   0000008C   410000AA           BGE      ??_OnMouseOver_0
   \   00000090   09904AE0           SUB      R9,R10,R9
   \   00000094   010019E3           TST      R9,#0x1
   \   00000098   0500000A           BEQ      ??_OnMouseOver_1
   \   0000009C   0B80A0E1           MOV      R8,R11
   \   000000A0   0B10A0E1           MOV      R1,R11
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       _GetItemSizeY
   \   000000AC   044080E0           ADD      R4,R0,R4
   \   000000B0   01B08BE2           ADD      R11,R11,#+1
   \                     ??_OnMouseOver_1:
   \   000000B4   A990B0E1           LSRS     R9,R9,#+1
   \   000000B8   0F00000A           BEQ      ??_OnMouseOver_2
   \                     ??_OnMouseOver_3:
   \   000000BC   040057E1           CMP      R7,R4
   \   000000C0   0B80A0A1           MOVGE    R8,R11
   \   000000C4   0B10A0E1           MOV      R1,R11
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           BL       _GetItemSizeY
   \   000000D0   044080E0           ADD      R4,R0,R4
   \   000000D4   01A08BE2           ADD      R10,R11,#+1
   \   000000D8   040057E1           CMP      R7,R4
   \   000000DC   0A80A0A1           MOVGE    R8,R10
   \   000000E0   0A10A0E1           MOV      R1,R10
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       _GetItemSizeY
   \   000000EC   044080E0           ADD      R4,R0,R4
   \   000000F0   01B08AE2           ADD      R11,R10,#+1
   \   000000F4   019059E2           SUBS     R9,R9,#+1
   \   000000F8   EFFFFF1A           BNE      ??_OnMouseOver_3
    738                if (Sel >= 0) {
   \                     ??_OnMouseOver_2:
   \   000000FC   000058E3           CMP      R8,#+0
   \   00000100   2400004A           BMI      ??_OnMouseOver_0
    739                  NumVisItems = _GetNumVisItems(hObj);
   \   00000104   0170A0E3           MOV      R7,#+1
   \   00000108   0500A0E1           MOV      R0,R5
   \   0000010C   ........           BL       GUI_ALLOC_LockH
   \   00000110   340090E5           LDR      R0,[R0, #+52]
   \   00000114   ........           BL       GUI_ARRAY_GetNumItems
   \   00000118   0040A0E1           MOV      R4,R0
   \   0000011C   ........           BL       GUI_ALLOC_UnlockH
   \   00000120   020054E3           CMP      R4,#+2
   \   00000124   150000BA           BLT      ??_OnMouseOver_4
   \   00000128   0070A0E3           MOV      R7,#+0
   \   0000012C   0D10A0E1           MOV      R1,SP
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           BL       WM_GetInsideRectExScrollbar
   \   00000138   F600DDE1           LDRSH    R0,[SP, #+6]
   \   0000013C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000140   01A054E2           SUBS     R10,R4,#+1
   \   00000144   010040E0           SUB      R0,R0,R1
   \   00000148   019080E2           ADD      R9,R0,#+1
   \   0000014C   0700004A           BMI      ??_OnMouseOver_5
   \                     ??_OnMouseOver_6:
   \   00000150   0A10A0E1           MOV      R1,R10
   \   00000154   0500A0E1           MOV      R0,R5
   \   00000158   ........           BL       _GetItemSizeY
   \   0000015C   077080E0           ADD      R7,R0,R7
   \   00000160   070059E1           CMP      R9,R7
   \   00000164   010000BA           BLT      ??_OnMouseOver_5
   \   00000168   01A05AE2           SUBS     R10,R10,#+1
   \   0000016C   F7FFFF5A           BPL      ??_OnMouseOver_6
   \                     ??_OnMouseOver_5:
   \   00000170   0A0044E0           SUB      R0,R4,R10
   \   00000174   017040E2           SUB      R7,R0,#+1
   \   00000178   010057E3           CMP      R7,#+1
   \   0000017C   0170A0B3           MOVLT    R7,#+1
    740                  if (Sel < (int)(ScrollStateV + NumVisItems)) {
   \                     ??_OnMouseOver_4:
   \   00000180   060087E0           ADD      R0,R7,R6
   \   00000184   000058E1           CMP      R8,R0
   \   00000188   020000AA           BGE      ??_OnMouseOver_0
    741                    LISTBOX_SetSel(hObj, Sel);
   \   0000018C   0810A0E1           MOV      R1,R8
   \   00000190   0500A0E1           MOV      R0,R5
   \   00000194   ........           BL       LISTBOX_SetSel
    742                  }
    743                }
    744              }
    745            }
    746            return 0;                        /* Message handled */
   \                     ??_OnMouseOver_0:
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   0CD08DE2           ADD      SP,SP,#+12
   \   000001A0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    747          }
    748          #endif
    749          
    750          /*********************************************************************
    751          *
    752          *       _MoveSel
    753          *
    754          *  Moves the selection/focus to the next valid item
    755          */

   \                                 In section .text, align 4, keep-with-next
    756          static void _MoveSel(LISTBOX_Handle hObj, int Dir) {
   \                     _MoveSel:
   \   00000000   B0472DE9           PUSH     {R4,R5,R7-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    757            int Index, NewSel = -1, NumItems;
   \   00000008   0070E0E3           MVN      R7,#+0
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   0150A0E1           MOV      R5,R1
    758            LISTBOX_Obj * pObj;
    759            GUI_ARRAY ItemArray;
    760            Index = LISTBOX_GetSel(hObj);
   \   00000014   0780A0E1           MOV      R8,R7
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0500000A           BEQ      ??_MoveSel_0
   \   00000020   ........           BL       GUI_Lock
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   F089D0E1           LDRSH    R8,[R0, #+144]
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
   \   00000034   ........           BL       GUI_Unlock
    761            pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_MoveSel_0:
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       GUI_ALLOC_LockH
    762            ItemArray = pObj->ItemArray;
   \   00000040   34A090E5           LDR      R10,[R0, #+52]
    763            NumItems = LISTBOX__GetNumItems(pObj);
   \   00000044   0A00A0E1           MOV      R0,R10
   \   00000048   ........           BL       GUI_ARRAY_GetNumItems
   \   0000004C   0090A0E1           MOV      R9,R0
    764            GUI_UNLOCK_H(pObj);
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
    765            do {
    766              WM_HMEM hItem;
    767              Index += Dir;
   \                     ??_MoveSel_1:
   \   00000054   088095E0           ADDS     R8,R5,R8
    768              if ((Index < 0) || (Index >= NumItems)) {
   \   00000058   0D00004A           BMI      ??_MoveSel_2
   \   0000005C   090058E1           CMP      R8,R9
   \   00000060   0B0000AA           BGE      ??_MoveSel_2
    769                break;
    770              }
    771              hItem = GUI_ARRAY_GethItem(ItemArray, Index);
   \   00000064   0810A0E1           MOV      R1,R8
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   ........           BL       GUI_ARRAY_GethItem
    772              if (hItem) {
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0400000A           BEQ      ??_MoveSel_3
    773                LISTBOX_ITEM * pItem;
    774                pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
    775                if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
   \   00000078   ........           BL       GUI_ALLOC_LockH
   \   0000007C   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000080   020010E3           TST      R0,#0x2
    776                  NewSel = Index;
   \   00000084   0870A001           MOVEQ    R7,R8
    777                }
    778                GUI_UNLOCK_H(pItem);
   \   00000088   ........           BL       GUI_ALLOC_UnlockH
    779              }
    780            } while(NewSel < 0);
   \                     ??_MoveSel_3:
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   EFFFFF4A           BMI      ??_MoveSel_1
    781            if (NewSel >= 0) {
   \                     ??_MoveSel_2:
   \   00000094   000057E3           CMP      R7,#+0
   \   00000098   0300004A           BMI      ??_MoveSel_4
    782              LISTBOX_SetSel(hObj, NewSel);
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       LISTBOX_SetSel
   \   000000A8   150000EA           B        ??_MoveSel_5
    783            } else {
    784              int PrevScrollStateV;
    785              pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_MoveSel_4:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       GUI_ALLOC_LockH
   \   000000B4   0070A0E1           MOV      R7,R0
    786              PrevScrollStateV = pObj->ScrollStateV.v;
   \   000000B8   408097E5           LDR      R8,[R7, #+64]
    787              pObj->ScrollStateV.v += Dir;
   \   000000BC   080085E0           ADD      R0,R5,R8
   \   000000C0   400087E5           STR      R0,[R7, #+64]
    788              WM_CheckScrollBounds(&pObj->ScrollStateV);
   \   000000C4   3C0087E2           ADD      R0,R7,#+60
   \   000000C8   ........           BL       WM_CheckScrollBounds
    789              if (PrevScrollStateV != pObj->ScrollStateV.v) {
   \   000000CC   400097E5           LDR      R0,[R7, #+64]
   \   000000D0   000058E1           CMP      R8,R0
   \   000000D4   0500000A           BEQ      ??_MoveSel_6
    790                LISTBOX__InvalidateInsideArea(hObj);
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       WM_GetInsideRectExScrollbar
   \   000000E4   0D10A0E1           MOV      R1,SP
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       WM_InvalidateRect
    791              }
    792              GUI_UNLOCK_H(pObj);
   \                     ??_MoveSel_6:
   \   000000F0   ........           BL       GUI_ALLOC_UnlockH
    793              LISTBOX_UpdateScrollers(hObj);
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       _ManageAutoScroll
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       _CalcScrollParas
    794            }
    795          }
   \                     ??_MoveSel_5:
   \   00000104   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000108   B087BDE8           POP      {R4,R5,R7-R10,PC}  ;; return
    796          
    797          /*********************************************************************
    798          *
    799          *       _AddKey
    800          *
    801          * Returns: 1 if Key has been consumed
    802          *          0 else 
    803          */

   \                                 In section .text, align 4, keep-with-next
    804          static int _AddKey(LISTBOX_Handle hObj, int Key) {
   \                     _AddKey:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    805            LISTBOX_Obj * pObj;
    806            int r;
    807            switch (Key) {
   \   0000000C   100045E2           SUB      R0,R5,#+16
   \   00000010   0CD04DE2           SUB      SP,SP,#+12
   \   00000014   100050E3           CMP      R0,#+16
   \   00000018   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_AddKey_0:
   \   0000001C   4800008A           BHI      ??_AddKey_1
   \   00000020   340000EA           B        ??_AddKey_2
   \   00000024   410000EA           B        ??_AddKey_3
   \   00000028   1C0000EA           B        ??_AddKey_4
   \   0000002C   370000EA           B        ??_AddKey_5
   \   00000030   430000EA           B        ??_AddKey_1
   \   00000034   420000EA           B        ??_AddKey_1
   \   00000038   410000EA           B        ??_AddKey_1
   \   0000003C   400000EA           B        ??_AddKey_1
   \   00000040   3F0000EA           B        ??_AddKey_1
   \   00000044   3E0000EA           B        ??_AddKey_1
   \   00000048   3D0000EA           B        ??_AddKey_1
   \   0000004C   3C0000EA           B        ??_AddKey_1
   \   00000050   3B0000EA           B        ??_AddKey_1
   \   00000054   3A0000EA           B        ??_AddKey_1
   \   00000058   390000EA           B        ??_AddKey_1
   \   0000005C   380000EA           B        ??_AddKey_1
   \   00000060   FFFFFFEA           B        ??_AddKey_6
    808            case GUI_KEY_SPACE:
    809              _ToggleMultiSel(hObj, LISTBOX_GetSel(hObj));
   \                     ??_AddKey_6:
   \   00000064   0050E0E3           MVN      R5,#+0
   \   00000068   000054E3           CMP      R4,#+0
   \   0000006C   0500000A           BEQ      ??_AddKey_7
   \   00000070   ........           BL       GUI_Lock
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       GUI_ALLOC_LockH
   \   0000007C   F059D0E1           LDRSH    R5,[R0, #+144]
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
   \   00000084   ........           BL       GUI_Unlock
   \                     ??_AddKey_7:
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       _ToggleMultiSel
    810              return 1;               /* Key has been consumed */
   \                     ??_AddKey_8:
   \   00000094   0100A0E3           MOV      R0,#+1
   \                     ??_AddKey_9:
   \   00000098   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000009C   F083BDE8           POP      {R4-R9,PC}       ;; return
    811            case GUI_KEY_RIGHT:
    812              pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_AddKey_4:
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       GUI_ALLOC_LockH
    813              r = WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v + pObj->Props.ScrollStepH);
   \   000000A8   B825D0E1           LDRH     R2,[R0, #+88]
   \   000000AC   4C1090E5           LDR      R1,[R0, #+76]
   \   000000B0   011082E0           ADD      R1,R2,R1
   \                     ??_AddKey_10:
   \   000000B4   480080E2           ADD      R0,R0,#+72
   \   000000B8   ........           BL       WM_SetScrollValue
   \   000000BC   0050A0E1           MOV      R5,R0
    814              GUI_UNLOCK_H(pObj);
   \   000000C0   ........           BL       GUI_ALLOC_UnlockH
    815              if (r) {
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   F1FFFF0A           BEQ      ??_AddKey_8
    816                LISTBOX_UpdateScrollers(hObj);
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       _ManageAutoScroll
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       _CalcScrollParas
    817                LISTBOX__InvalidateInsideArea(hObj);
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       WM_GetInsideRectExScrollbar
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       WM_InvalidateRect
    818              }
    819              return 1;               /* Key has been consumed */
   \   000000F4   E6FFFFEA           B        ??_AddKey_8
    820            case GUI_KEY_LEFT:
    821              pObj = LISTBOX_LOCK_H(hObj);
   \                     ??_AddKey_2:
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           BL       GUI_ALLOC_LockH
    822              r = WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v - pObj->Props.ScrollStepH);
   \   00000100   B825D0E1           LDRH     R2,[R0, #+88]
   \   00000104   4C1090E5           LDR      R1,[R0, #+76]
   \   00000108   021041E0           SUB      R1,R1,R2
   \   0000010C   E8FFFFEA           B        ??_AddKey_10
    823              GUI_UNLOCK_H(pObj);
    824              if (r) {
    825                LISTBOX_UpdateScrollers(hObj);
    826                LISTBOX__InvalidateInsideArea(hObj);
    827              }
    828              return 1;               /* Key has been consumed */
    829            case GUI_KEY_DOWN:
    830              LISTBOX_IncSel(hObj);
   \                     ??_AddKey_5:
   \   00000110   000054E3           CMP      R4,#+0
   \   00000114   DEFFFF0A           BEQ      ??_AddKey_8
   \   00000118   ........           BL       GUI_Lock
   \   0000011C   0110A0E3           MOV      R1,#+1
   \                     ??_AddKey_11:
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       _MoveSel
   \   00000128   ........           BL       GUI_Unlock
   \   0000012C   D8FFFFEA           B        ??_AddKey_8
    831              return 1;               /* Key has been consumed */
    832            case GUI_KEY_UP:
    833              LISTBOX_DecSel(hObj);
   \                     ??_AddKey_3:
   \   00000130   000054E3           CMP      R4,#+0
   \   00000134   D6FFFF0A           BEQ      ??_AddKey_8
   \   00000138   ........           BL       GUI_Lock
   \   0000013C   0010E0E3           MVN      R1,#+0
   \   00000140   F6FFFFEA           B        ??_AddKey_11
    834              return 1;               /* Key has been consumed */
    835            default:
    836              if(_IsAlphaNum(Key)) {
   \                     ??_AddKey_1:
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   416040E2           SUB      R6,R0,#+65
   \   0000014C   1A0056E3           CMP      R6,#+26
   \   00000150   20008032           ADDCC    R0,R0,#+32
   \   00000154   611040E2           SUB      R1,R0,#+97
   \   00000158   1A0051E3           CMP      R1,#+26
   \   0000015C   1F00002A           BCS      ??_AddKey_12
    837                _SelectByKey(hObj, Key);
   \                     ??_AddKey_13:
   \   00000160   0400A0E1           MOV      R0,R4
   \   00000164   ........           BL       GUI_ALLOC_LockH
   \   00000168   1A0056E3           CMP      R6,#+26
   \   0000016C   20508532           ADDCC    R5,R5,#+32
   \   00000170   340090E5           LDR      R0,[R0, #+52]
   \   00000174   ........           BL       GUI_ARRAY_GetNumItems
   \   00000178   0060A0E1           MOV      R6,R0
   \   0000017C   ........           BL       GUI_ALLOC_UnlockH
   \   00000180   0070A0E3           MOV      R7,#+0
   \   00000184   010056E3           CMP      R6,#+1
   \   00000188   C1FFFFBA           BLT      ??_AddKey_8
   \                     ??_AddKey_14:
   \   0000018C   0080A0E3           MOV      R8,#+0
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   ........           BL       GUI_ALLOC_LockH
   \   00000198   0710A0E1           MOV      R1,R7
   \   0000019C   340090E5           LDR      R0,[R0, #+52]
   \   000001A0   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000001A4   0090A0E1           MOV      R9,R0
   \   000001A8   ........           BL       GUI_ALLOC_UnlockH
   \   000001AC   000059E3           CMP      R9,#+0
   \   000001B0   09808912           ADDNE    R8,R9,#+9
   \   000001B4   0080D8E5           LDRB     R8,[R8, #+0]
   \   000001B8   410048E2           SUB      R0,R8,#+65
   \   000001BC   1A0050E3           CMP      R0,#+26
   \   000001C0   20808832           ADDCC    R8,R8,#+32
   \   000001C4   ........           BL       GUI_ALLOC_UnlockH
   \   000001C8   050058E1           CMP      R8,R5
   \   000001CC   0800000A           BEQ      ??_AddKey_15
   \   000001D0   017087E2           ADD      R7,R7,#+1
   \   000001D4   060057E1           CMP      R7,R6
   \   000001D8   EBFFFFBA           BLT      ??_AddKey_14
   \   000001DC   ACFFFFEA           B        ??_AddKey_8
    838                return 1;               /* Key has been consumed */
    839              }
    840            }
   \                     ??_AddKey_12:
   \   000001E0   300040E2           SUB      R0,R0,#+48
   \   000001E4   0A0050E3           CMP      R0,#+10
   \   000001E8   DCFFFF3A           BCC      ??_AddKey_13
    841            return 0;
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   A8FFFFEA           B        ??_AddKey_9
   \                     ??_AddKey_15:
   \   000001F4   0710A0E1           MOV      R1,R7
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           BL       LISTBOX_SetSel
   \   00000200   A3FFFFEA           B        ??_AddKey_8
    842          }
    843          
    844          /*********************************************************************
    845          *
    846          *       Private routines
    847          *
    848          **********************************************************************
    849          */
    850          /*********************************************************************
    851          *
    852          *       LISTBOX_LockH
    853          */
    854          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    855          LISTBOX_Obj * LISTBOX_LockH(LISTBOX_Handle h) {
    856            LISTBOX_Obj * p = (LISTBOX_Obj *)GUI_LOCK_H(h);
    857            if (p) {
    858              if (p->DebugId != LISTBOX_ID) {
    859                GUI_DEBUG_ERROROUT("LISTBOX.c: Wrong handle type or Object not init'ed");
    860                return 0;
    861              }
    862            }
    863            return p;
    864          }
    865          #endif
    866          
    867          /*********************************************************************
    868          *
    869          *       LISTBOX__GetNumItems
    870          *
    871          *  Returns:
    872          *    Number of items
    873          */

   \                                 In section .text, align 4, keep-with-next
    874          unsigned LISTBOX__GetNumItems(const LISTBOX_Obj * pObj) {
    875            return GUI_ARRAY_GetNumItems(pObj->ItemArray);
   \                     LISTBOX__GetNumItems:
   \   00000000   340090E5           LDR      R0,[R0, #+52]
   \   00000004   ........           B        GUI_ARRAY_GetNumItems  ;; tailcall
    876          }
    877          
    878          /*********************************************************************
    879          *
    880          *       LISTBOX__GetpStringLocked
    881          *
    882          *  Returns:
    883          *    Pointer to the specified item
    884          */

   \                                 In section .text, align 4, keep-with-next
    885          const char * LISTBOX__GetpStringLocked(LISTBOX_Handle hObj, int Index) {
   \                     LISTBOX__GetpStringLocked:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
    886            LISTBOX_Obj * pObj;
    887            const char * s = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
    888            LISTBOX_ITEM * pItem;
    889            pObj = LISTBOX_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
    890            pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(pObj->ItemArray, Index);
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   340090E5           LDR      R0,[R0, #+52]
   \   0000001C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000020   0040A0E1           MOV      R4,R0
    891            GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    892            if (pItem) {
   \   00000028   000054E3           CMP      R4,#+0
    893              s = pItem->acText;
   \   0000002C   09508412           ADDNE    R5,R4,#+9
    894            }
    895            return s;
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    896          }
    897          
    898          /*********************************************************************
    899          *
    900          *       LISTBOX__InvalidateItemSize
    901          */

   \                                 In section .text, align 4, keep-with-next
    902          void LISTBOX__InvalidateItemSize(const LISTBOX_Obj * pObj, unsigned Index) {
   \                     LISTBOX__InvalidateItemSize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    903            LISTBOX_ITEM * pItem;
    904            pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(pObj->ItemArray, Index);
   \   00000008   340090E5           LDR      R0,[R0, #+52]
   \   0000000C   ........           BL       GUI_ARRAY_GetpItemLocked
    905            if (pItem) {
   \   00000010   000050E3           CMP      R0,#+0
    906              pItem->xSize = 0;
   \   00000014   0010A013           MOVNE    R1,#+0
   \   00000018   B010C011           STRHNE   R1,[R0, #+0]
    907              pItem->ySize = 0;
   \   0000001C   B210C011           STRHNE   R1,[R0, #+2]
    908            }
    909            GUI_UNLOCK_H(pItem);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
    910          }
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   0080BDE8           POP      {PC}             ;; return
    911          
    912          /*********************************************************************
    913          *
    914          *       LISTBOX__InvalidateInsideArea
    915          */

   \                                 In section .text, align 4, keep-with-next
    916          void LISTBOX__InvalidateInsideArea(LISTBOX_Handle hObj) {
   \                     LISTBOX__InvalidateInsideArea:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    917            GUI_RECT Rect;
    918            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   ........           BL       WM_GetInsideRectExScrollbar
    919            WM_InvalidateRect(hObj, &Rect);
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       WM_InvalidateRect
    920          }
   \   00000020   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    921          
    922          /*********************************************************************
    923          *
    924          *       LISTBOX__InvalidateItem
    925          */

   \                                 In section .text, align 4, keep-with-next
    926          void LISTBOX__InvalidateItem(LISTBOX_Handle hObj, int Sel) {
   \                     LISTBOX__InvalidateItem:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    927            int ItemDistY, ItemPosY, ScrollPosV;
    928            GUI_RECT Rect;
    929            LISTBOX_Obj * pObj;
    930            
    931            if (Sel >= 0) {
   \   00000010   1B00004A           BMI      ??LISTBOX__InvalidateItem_0
    932              ItemPosY = _GetItemPosY(hObj, Sel);
   \   00000014   ........           BL       _GetItemPosY
   \   00000018   0060B0E1           MOVS     R6,R0
    933              if (ItemPosY >= 0) {
   \   0000001C   1800004A           BMI      ??LISTBOX__InvalidateItem_0
    934                pObj = LISTBOX_LOCK_H(hObj); {
    935                  ScrollPosV = pObj->ScrollStateV.v;
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   407090E5           LDR      R7,[R0, #+64]
    936                } GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
    937                ScrollPosV = _GetItemPosY(hObj, ScrollPosV);
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _GetItemPosY
   \   0000003C   0070A0E1           MOV      R7,R0
    938                ItemPosY -= ScrollPosV;
    939                ItemDistY = _GetItemSizeY(hObj, Sel);
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       _GetItemSizeY
   \   0000004C   0050A0E1           MOV      R5,R0
    940                WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_GetInsideRectExScrollbar
    941                Rect.y0 += ItemPosY;
   \   0000005C   F200DDE1           LDRSH    R0,[SP, #+2]
    942                Rect.y1  = Rect.y0 + ItemDistY - 1;
    943                WM_InvalidateRect(hObj, &Rect);
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   000086E0           ADD      R0,R6,R0
   \   00000068   070040E0           SUB      R0,R0,R7
   \   0000006C   B200CDE1           STRH     R0,[SP, #+2]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   010040E2           SUB      R0,R0,#+1
   \   00000078   B600CDE1           STRH     R0,[SP, #+6]
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       WM_InvalidateRect
    944              }
    945            }
    946          }
   \                     ??LISTBOX__InvalidateItem_0:
   \   00000084   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000088   F080BDE8           POP      {R4-R7,PC}       ;; return
    947          
    948          /*********************************************************************
    949          *
    950          *       LISTBOX__InvalidateItemAndBelow
    951          */

   \                                 In section .text, align 4, keep-with-next
    952          void LISTBOX__InvalidateItemAndBelow(LISTBOX_Handle hObj, int Sel) {
   \                     LISTBOX__InvalidateItemAndBelow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    953            int ItemPosY, ScrollPosV;
    954            GUI_RECT Rect;
    955            LISTBOX_Obj * pObj;
    956          
    957            if (Sel >= 0) {
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   1200004A           BMI      ??LISTBOX__InvalidateItemAndBelow_0
    958              ItemPosY = _GetItemPosY(hObj, Sel);
   \   00000014   ........           BL       _GetItemPosY
   \   00000018   0050B0E1           MOVS     R5,R0
    959              if (ItemPosY >= 0) {
   \   0000001C   0F00004A           BMI      ??LISTBOX__InvalidateItemAndBelow_0
    960                pObj = LISTBOX_LOCK_H(hObj); {
    961                  ScrollPosV = pObj->ScrollStateV.v;
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   406090E5           LDR      R6,[R0, #+64]
    962                } GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
    963                ScrollPosV = _GetItemPosY(hObj, ScrollPosV);
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _GetItemPosY
    964                WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       WM_GetInsideRectExScrollbar
    965                Rect.y0 += ItemPosY;
   \   00000048   F200DDE1           LDRSH    R0,[SP, #+2]
    966                WM_InvalidateRect(hObj, &Rect);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   000085E0           ADD      R0,R5,R0
   \   00000054   B200CDE1           STRH     R0,[SP, #+2]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       WM_InvalidateRect
    967              }
    968            }
    969          }
   \                     ??LISTBOX__InvalidateItemAndBelow_0:
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
    970          
    971          /*********************************************************************
    972          *
    973          *       LISTBOX__SetScrollbarWidth
    974          */

   \                                 In section .text, align 4, keep-with-next
    975          void LISTBOX__SetScrollbarWidth(LISTBOX_Handle hObj, const LISTBOX_Obj * pObj) {
   \                     LISTBOX__SetScrollbarWidth:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    976            WM_HWIN hBarH, hBarV;
    977            int Width;
    978            Width = pObj->ScrollbarWidth;
   \   00000004   9350D1E5           LDRB     R5,[R1, #+147]
   \   00000008   0040A0E1           MOV      R4,R0
    979            if (Width == 0) {
   \   0000000C   000055E3           CMP      R5,#+0
   \   00000010   0100001A           BNE      ??LISTBOX__SetScrollbarWidth_0
    980              Width = SCROLLBAR_GetDefaultWidth();
   \   00000014   ........           BL       SCROLLBAR_GetDefaultWidth
   \   00000018   0050A0E1           MOV      R5,R0
    981            }
    982            hBarH = WM_GetDialogItem(hObj, GUI_ID_HSCROLL);
   \                     ??LISTBOX__SetScrollbarWidth_0:
   \   0000001C   FF10A0E3           MOV      R1,#+255
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       WM_GetDialogItem
   \   00000028   0060A0E1           MOV      R6,R0
    983            hBarV = WM_GetDialogItem(hObj, GUI_ID_VSCROLL);
   \   0000002C   FE10A0E3           MOV      R1,#+254
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_GetDialogItem
   \   00000038   0040A0E1           MOV      R4,R0
    984            SCROLLBAR_SetWidth(hBarH, Width);
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           BL       SCROLLBAR_SetWidth
    985            SCROLLBAR_SetWidth(hBarV, Width);
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   7040BDE8           POP      {R4-R6,LR}
   \   00000054   ........           B        SCROLLBAR_SetWidth  ;; tailcall
    986          }
    987          
    988          /*********************************************************************
    989          *
    990          *       LISTBOX__SetScrollbarColor
    991          */

   \                                 In section .text, align 4, keep-with-next
    992          void LISTBOX__SetScrollbarColor(LISTBOX_Handle hObj, const LISTBOX_Obj * pObj) {
   \                     LISTBOX__SetScrollbarColor:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0040A0E1           MOV      R4,R0
    993            WM_HWIN hBarH, hBarV;
    994            int i;
    995            hBarH = WM_GetDialogItem(hObj, GUI_ID_HSCROLL);
   \   0000000C   FF10A0E3           MOV      R1,#+255
   \   00000010   ........           BL       WM_GetDialogItem
   \   00000014   0060A0E1           MOV      R6,R0
    996            hBarV = WM_GetDialogItem(hObj, GUI_ID_VSCROLL);
   \   00000018   FE10A0E3           MOV      R1,#+254
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       WM_GetDialogItem
   \   00000024   0040A0E1           MOV      R4,R0
    997            if (hBarH || hBarV) {
   \   00000028   060094E1           ORRS     R0,R4,R6
   \   0000002C   1000000A           BEQ      ??LISTBOX__SetScrollbarColor_0
    998              for (i = 0; i < GUI_COUNTOF(pObj->Props.aScrollbarColor); i++) {
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   F084E0E3           MVN      R8,#-268435456
    999                if (pObj->Props.aScrollbarColor[i] != GUI_INVALID_COLOR) {
   \                     ??LISTBOX__SetScrollbarColor_1:
   \   00000038   7C0095E5           LDR      R0,[R5, #+124]
   \   0000003C   080050E1           CMP      R0,R8
   \   00000040   0700000A           BEQ      ??LISTBOX__SetScrollbarColor_2
   1000                  SCROLLBAR_SetColor(hBarH, i, pObj->Props.aScrollbarColor[i]);
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           BL       SCROLLBAR_SetColor
   1001                  SCROLLBAR_SetColor(hBarV, i, pObj->Props.aScrollbarColor[i]);
   \   00000054   7C2095E5           LDR      R2,[R5, #+124]
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       SCROLLBAR_SetColor
   1002                }
   1003              }
   \                     ??LISTBOX__SetScrollbarColor_2:
   \   00000064   017087E2           ADD      R7,R7,#+1
   \   00000068   045085E2           ADD      R5,R5,#+4
   \   0000006C   030057E3           CMP      R7,#+3
   \   00000070   F0FFFF3A           BCC      ??LISTBOX__SetScrollbarColor_1
   1004            }
   1005          }
   \                     ??LISTBOX__SetScrollbarColor_0:
   \   00000074   F081BDE8           POP      {R4-R8,PC}       ;; return
   1006          
   1007          /*********************************************************************
   1008          *
   1009          *       LISTBOX__AddSize
   1010          */

   \                                 In section .text, align 4, keep-with-next
   1011          void LISTBOX__AddSize(LISTBOX_Obj * pObj, int Index) {
   \                     LISTBOX__AddSize:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   1012            const GUI_FONT GUI_UNI_PTR * pOldFont;
   1013            LISTBOX_ITEM * pItem;
   1014            int SizeX;
   1015          
   1016            pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(pObj->ItemArray, Index); {
   \   0000000C   340094E5           LDR      R0,[R4, #+52]
   \   00000010   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000014   0050A0E1           MOV      R5,R0
   1017              pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000018   540094E5           LDR      R0,[R4, #+84]
   \   0000001C   ........           BL       GUI_SetFont
   \   00000020   0060A0E1           MOV      R6,R0
   1018              SizeX = GUI_GetStringDistX(pItem->acText);
   \   00000024   090085E2           ADD      R0,R5,#+9
   \   00000028   ........           BL       GUI_GetStringDistX
   \   0000002C   0070A0E1           MOV      R7,R0
   1019              GUI_SetFont(pOldFont);
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           BL       GUI_SetFont
   1020              pItem->xSize = SizeX;
   \   00000038   B070C5E1           STRH     R7,[R5, #+0]
   1021            } GUI_UNLOCK_H(pItem);
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   1022            if (pObj->ContentSizeX < SizeX) {
   \   00000040   B609D4E1           LDRH     R0,[R4, #+150]
   1023              pObj->ContentSizeX = SizeX;
   1024            }
   1025          }
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   070050E1           CMP      R0,R7
   \   0000004C   B679C4B1           STRHLT   R7,[R4, #+150]
   \   00000050   F080BDE8           POP      {R4-R7,PC}       ;; return
   1026          
   1027          /*********************************************************************
   1028          *
   1029          *       Exported routines
   1030          *
   1031          **********************************************************************
   1032          */
   1033          /*********************************************************************
   1034          *
   1035          *       LISTBOX_OwnerDraw
   1036          */

   \                                 In section .text, align 4, keep-with-next
   1037          int LISTBOX_OwnerDraw(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo) {
   \                     LISTBOX_OwnerDraw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1038            switch (pDrawItemInfo->Cmd) {
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   2600000A           BEQ      ??LISTBOX_OwnerDraw_0
   \   00000018   170050E2           SUBS     R0,R0,#+23
   \   0000001C   0200000A           BEQ      ??LISTBOX_OwnerDraw_1
   \   00000020   010050E2           SUBS     R0,R0,#+1
   \   00000024   1900000A           BEQ      ??LISTBOX_OwnerDraw_2
   \   00000028   B30000EA           B        ??LISTBOX_OwnerDraw_3
   1039              case WIDGET_ITEM_GET_XSIZE: {
   1040                LISTBOX_Obj * pObj;
   1041                const GUI_FONT GUI_UNI_PTR* pOldFont;
   1042                const char * s;
   1043                int DistX;
   1044                pObj = LISTBOX_LOCK_H(pDrawItemInfo->hWin);
   \                     ??LISTBOX_OwnerDraw_1:
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   ........           BL       GUI_ALLOC_LockH
   1045                pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000034   540090E5           LDR      R0,[R0, #+84]
   \   00000038   ........           BL       GUI_SetFont
   \   0000003C   0050A0E1           MOV      R5,R0
   1046                GUI_UNLOCK_H(pObj);
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
   1047                s = LISTBOX__GetpStringLocked(pDrawItemInfo->hWin, pDrawItemInfo->ItemIndex);
   \   00000044   086094E5           LDR      R6,[R4, #+8]
   \   00000048   0070A0E3           MOV      R7,#+0
   \   0000004C   000094E5           LDR      R0,[R4, #+0]
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   340090E5           LDR      R0,[R0, #+52]
   \   0000005C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000060   0040A0E1           MOV      R4,R0
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
   \   00000068   000054E3           CMP      R4,#+0
   \   0000006C   09708412           ADDNE    R7,R4,#+9
   1048                DistX = GUI_GetStringDistX(s);
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   ........           BL       GUI_GetStringDistX
   \   00000078   0040A0E1           MOV      R4,R0
   1049                GUI_UNLOCK_H(s);
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
   1050                GUI_SetFont(pOldFont);
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           BL       GUI_SetFont
   1051                return DistX;
   \                     ??LISTBOX_OwnerDraw_4:
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   9B0000EA           B        ??LISTBOX_OwnerDraw_5
   1052              }
   1053              case WIDGET_ITEM_GET_YSIZE: {
   1054                int r;
   1055                LISTBOX_Obj * pObj;
   1056                pObj = LISTBOX_LOCK_H(pDrawItemInfo->hWin);
   \                     ??LISTBOX_OwnerDraw_2:
   \   00000090   000094E5           LDR      R0,[R4, #+0]
   \   00000094   ........           BL       GUI_ALLOC_LockH
   \   00000098   0040A0E1           MOV      R4,R0
   1057                r = GUI_GetYDistOfFont(pObj->Props.pFont) + pObj->ItemSpacing;
   \   0000009C   540094E5           LDR      R0,[R4, #+84]
   \   000000A0   ........           BL       GUI_GetYDistOfFont
   \   000000A4   B419D4E1           LDRH     R1,[R4, #+148]
   \   000000A8   004081E0           ADD      R4,R1,R0
   1058                GUI_UNLOCK_H(pObj);
   \   000000AC   ........           BL       GUI_ALLOC_UnlockH
   1059                return r;
   \   000000B0   F4FFFFEA           B        ??LISTBOX_OwnerDraw_4
   1060              }
   1061              case WIDGET_ITEM_DRAW: {
   1062                LISTBOX_Obj * pObj;
   1063                LISTBOX_ITEM * pItem;
   1064                WM_HMEM hItem;
   1065                GUI_RECT r, rText;
   1066                int FontDistY;
   1067                int ItemIndex;
   1068                const char * s;
   1069                int ColorIndex;
   1070                char IsDisabled;
   1071                char IsSelected;
   1072                ItemIndex = pDrawItemInfo->ItemIndex;
   \                     ??LISTBOX_OwnerDraw_0:
   \   000000B4   085094E5           LDR      R5,[R4, #+8]
   1073                pObj = LISTBOX_LOCK_H(pDrawItemInfo->hWin);
   \   000000B8   000094E5           LDR      R0,[R4, #+0]
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   0060A0E1           MOV      R6,R0
   1074                hItem = GUI_ARRAY_GethItem(pObj->ItemArray, ItemIndex);
   \   000000C4   0510A0E1           MOV      R1,R5
   \   000000C8   340096E5           LDR      R0,[R6, #+52]
   \   000000CC   ........           BL       GUI_ARRAY_GethItem
   1075                pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
   \   000000D0   ........           BL       GUI_ALLOC_LockH
   \   000000D4   0080A0E1           MOV      R8,R0
   1076                WM_GetInsideRect(&r);
   \   000000D8   10008DE2           ADD      R0,SP,#+16
   \   000000DC   ........           BL       WM_GetInsideRect
   1077                FontDistY = GUI_GetFontDistY();
   \   000000E0   ........           BL       GUI_GetFontDistY
   \   000000E4   0070A0E1           MOV      R7,R0
   1078                /* Calculate color index */
   1079                IsDisabled = (pItem->Status & LISTBOX_ITEM_DISABLED) ? 1 : 0;
   \   000000E8   0800D8E5           LDRB     R0,[R8, #+8]
   1080                IsSelected = (pItem->Status & LISTBOX_ITEM_SELECTED) ? 1 : 0;
   1081                if (pObj->Flags & LISTBOX_SF_MULTISEL) {
   \   000000EC   9220D6E5           LDRB     R2,[R6, #+146]
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   A01001E0           AND      R1,R1,R0, LSR #+1
   \   000000F8   010000E2           AND      R0,R0,#0x1
   \   000000FC   040012E3           TST      R2,#0x4
   \   00000100   0700000A           BEQ      ??LISTBOX_OwnerDraw_6
   1082                  if (IsDisabled) {
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   0100000A           BEQ      ??LISTBOX_OwnerDraw_7
   1083                    ColorIndex = LISTBOX_CI_DISABLED;
   \                     ??LISTBOX_OwnerDraw_8:
   \   0000010C   0300A0E3           MOV      R0,#+3
   \   00000110   0E0000EA           B        ??LISTBOX_OwnerDraw_9
   1084                  } else {
   1085                    ColorIndex = (IsSelected) ? LISTBOX_CI_SELFOCUS : LISTBOX_CI_UNSEL;
   \                     ??LISTBOX_OwnerDraw_7:
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   0C00000A           BEQ      ??LISTBOX_OwnerDraw_9
   \                     ??LISTBOX_OwnerDraw_10:
   \   0000011C   0200A0E3           MOV      R0,#+2
   \   00000120   0A0000EA           B        ??LISTBOX_OwnerDraw_9
   1086                  }
   1087                } else {
   1088                  if (IsDisabled) {
   \                     ??LISTBOX_OwnerDraw_6:
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   F7FFFF1A           BNE      ??LISTBOX_OwnerDraw_8
   1089                    ColorIndex = LISTBOX_CI_DISABLED;
   1090                  } else {
   1091                    if (ItemIndex == pObj->Sel) {
   \   0000012C   F009D6E1           LDRSH    R0,[R6, #+144]
   \   00000130   000055E1           CMP      R5,R0
   \   00000134   0400001A           BNE      ??LISTBOX_OwnerDraw_11
   1092                      ColorIndex = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? LISTBOX_CI_SELFOCUS : LISTBOX_CI_SEL;
   \   00000138   3200D6E5           LDRB     R0,[R6, #+50]
   \   0000013C   010010E3           TST      R0,#0x1
   \   00000140   F5FFFF1A           BNE      ??LISTBOX_OwnerDraw_10
   \   00000144   0100A0E3           MOV      R0,#+1
   \   00000148   000000EA           B        ??LISTBOX_OwnerDraw_9
   1093                    } else {
   1094                      ColorIndex = LISTBOX_CI_UNSEL;
   \                     ??LISTBOX_OwnerDraw_11:
   \   0000014C   0000A0E3           MOV      R0,#+0
   1095                    }
   1096                  }
   1097                }
   1098                /* Display item */
   1099                LCD_SetBkColor(pObj->Props.aBackColor[ColorIndex]);
   \                     ??LISTBOX_OwnerDraw_9:
   \   00000150   009186E0           ADD      R9,R6,R0, LSL #+2
   \   00000154   5C0099E5           LDR      R0,[R9, #+92]
   \   00000158   ........           BL       LCD_SetBkColor
   1100                LCD_SetColor  (pObj->Props.aTextColor[ColorIndex]);
   \   0000015C   6C0099E5           LDR      R0,[R9, #+108]
   \   00000160   ........           BL       LCD_SetColor
   1101                GUI_SetTextMode(GUI_TM_TRANS);
   \   00000164   0200A0E3           MOV      R0,#+2
   \   00000168   ........           BL       GUI_SetTextMode
   1102                GUI_Clear();
   \   0000016C   ........           BL       GUI_Clear
   1103                rText.y0 = pDrawItemInfo->y0;
   \   00000170   100094E5           LDR      R0,[R4, #+16]
   \   00000174   BA00CDE1           STRH     R0,[SP, #+10]
   1104                rText.x0 = pDrawItemInfo->x0 + 1;
   \   00000178   0C0094E5           LDR      R0,[R4, #+12]
   \   0000017C   010080E2           ADD      R0,R0,#+1
   \   00000180   B800CDE1           STRH     R0,[SP, #+8]
   1105                rText.y1 = rText.y0 + pItem->ySize - 1;
   \   00000184   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   00000188   F210D8E1           LDRSH    R1,[R8, #+2]
   \   0000018C   000081E0           ADD      R0,R1,R0
   \   00000190   010040E2           SUB      R0,R0,#+1
   \   00000194   BE00CDE1           STRH     R0,[SP, #+14]
   1106                if (pObj->Props.Align & (GUI_TA_RIGHT | GUI_TA_CENTER)) {
   \   00000198   8800D6E5           LDRB     R0,[R6, #+136]
   \   0000019C   030010E3           TST      R0,#0x3
   \   000001A0   0B00000A           BEQ      ??LISTBOX_OwnerDraw_12
   1107                  GUI_RECT Rect;
   1108                  WM_GetInsideRectExScrollbar(pDrawItemInfo->hWin, &Rect);
   \   000001A4   0D10A0E1           MOV      R1,SP
   \   000001A8   000094E5           LDR      R0,[R4, #+0]
   \   000001AC   ........           BL       WM_GetInsideRectExScrollbar
   1109                  rText.x1 = rText.x0 + Rect.x1 - Rect.x0 - pObj->Widget.pEffect->EffectSize;
   \   000001B0   F800DDE1           LDRSH    R0,[SP, #+8]
   \   000001B4   F410DDE1           LDRSH    R1,[SP, #+4]
   \   000001B8   000081E0           ADD      R0,R1,R0
   \   000001BC   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000001C0   010040E0           SUB      R0,R0,R1
   \   000001C4   2C1096E5           LDR      R1,[R6, #+44]
   \   000001C8   001091E5           LDR      R1,[R1, #+0]
   \   000001CC   010040E0           SUB      R0,R0,R1
   \   000001D0   030000EA           B        ??LISTBOX_OwnerDraw_13
   1110                } else {
   1111                  rText.x1 = rText.x0 + pItem->xSize - 1;
   \                     ??LISTBOX_OwnerDraw_12:
   \   000001D4   F800DDE1           LDRSH    R0,[SP, #+8]
   \   000001D8   F010D8E1           LDRSH    R1,[R8, #+0]
   \   000001DC   000081E0           ADD      R0,R1,R0
   \   000001E0   010040E2           SUB      R0,R0,#+1
   \                     ??LISTBOX_OwnerDraw_13:
   \   000001E4   BC00CDE1           STRH     R0,[SP, #+12]
   1112                }
   1113                s = LISTBOX__GetpStringLocked(pDrawItemInfo->hWin, ItemIndex);
   \   000001E8   0080A0E3           MOV      R8,#+0
   \   000001EC   000094E5           LDR      R0,[R4, #+0]
   \   000001F0   ........           BL       GUI_ALLOC_LockH
   \   000001F4   0510A0E1           MOV      R1,R5
   \   000001F8   340090E5           LDR      R0,[R0, #+52]
   \   000001FC   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000200   00A0A0E1           MOV      R10,R0
   \   00000204   ........           BL       GUI_ALLOC_UnlockH
   \   00000208   00005AE3           CMP      R10,#+0
   \   0000020C   09808A12           ADDNE    R8,R10,#+9
   1114                GUI_UNLOCK_H(pItem);
   \   00000210   ........           BL       GUI_ALLOC_UnlockH
   1115                GUI_DispStringInRect(s, &rText, pObj->Props.Align);
   \   00000214   F828D6E1           LDRSH    R2,[R6, #+136]
   \   00000218   08108DE2           ADD      R1,SP,#+8
   \   0000021C   0800A0E1           MOV      R0,R8
   \   00000220   ........           BL       GUI_DispStringInRect
   1116                GUI_UNLOCK_H(s);
   \   00000224   ........           BL       GUI_ALLOC_UnlockH
   1117                /* Display focus rectangle */
   1118                if ((pObj->Flags & LISTBOX_SF_MULTISEL) && (ItemIndex == pObj->Sel)) {
   \   00000228   9200D6E5           LDRB     R0,[R6, #+146]
   \   0000022C   040010E3           TST      R0,#0x4
   \   00000230   3000000A           BEQ      ??LISTBOX_OwnerDraw_14
   \   00000234   F009D6E1           LDRSH    R0,[R6, #+144]
   \   00000238   000055E1           CMP      R5,R0
   \   0000023C   2D00001A           BNE      ??LISTBOX_OwnerDraw_14
   1119                  GUI_RECT rFocus;
   1120                  rFocus.x0 = pDrawItemInfo->x0;
   1121                  rFocus.x1 = r.x1;
   \   00000240   F411DDE1           LDRSH    R1,[SP, #+20]
   \   00000244   0C0094E5           LDR      R0,[R4, #+12]
   \   00000248   B000CDE1           STRH     R0,[SP, #+0]
   \   0000024C   B410CDE1           STRH     R1,[SP, #+4]
   1122                  switch (pObj->Props.Align & GUI_TA_VERTICAL) {
   \   00000250   8800D6E5           LDRB     R0,[R6, #+136]
   \   00000254   0C0010E2           ANDS     R0,R0,#0xC
   \   00000258   0400000A           BEQ      ??LISTBOX_OwnerDraw_15
   \   0000025C   040050E2           SUBS     R0,R0,#+4
   \   00000260   1200000A           BEQ      ??LISTBOX_OwnerDraw_16
   \   00000264   080050E2           SUBS     R0,R0,#+8
   \   00000268   0600000A           BEQ      ??LISTBOX_OwnerDraw_17
   \   0000026C   1A0000EA           B        ??LISTBOX_OwnerDraw_18
   1123                  case GUI_TA_TOP:
   1124                    rFocus.y0 = pDrawItemInfo->y0;
   \                     ??LISTBOX_OwnerDraw_15:
   \   00000270   100094E5           LDR      R0,[R4, #+16]
   \                     ??LISTBOX_OwnerDraw_19:
   \   00000274   B200CDE1           STRH     R0,[SP, #+2]
   1125                    rFocus.y1 = pDrawItemInfo->y0 + FontDistY - 1;
   \   00000278   000087E0           ADD      R0,R7,R0
   \   0000027C   010040E2           SUB      R0,R0,#+1
   \   00000280   B600CDE1           STRH     R0,[SP, #+6]
   1126                    break;
   \   00000284   140000EA           B        ??LISTBOX_OwnerDraw_18
   1127                  case GUI_TA_VCENTER:
   1128                    rFocus.y0 = pDrawItemInfo->y0 + (GUI_Context.WM__pUserClipRect->y1 - GUI_Context.WM__pUserClipRect->y0 - FontDistY) / 2;
   \                     ??LISTBOX_OwnerDraw_17:
   \   00000288   ........           LDR      R0,??DataTable3
   \   0000028C   381090E5           LDR      R1,[R0, #+56]
   \   00000290   F600D1E1           LDRSH    R0,[R1, #+6]
   \   00000294   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000298   010040E0           SUB      R0,R0,R1
   \   0000029C   071040E0           SUB      R1,R0,R7
   \   000002A0   100094E5           LDR      R0,[R4, #+16]
   \   000002A4   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000002A8   C10080E0           ADD      R0,R0,R1, ASR #+1
   \   000002AC   F0FFFFEA           B        ??LISTBOX_OwnerDraw_19
   1129                    rFocus.y1 = rFocus.y0 + FontDistY - 1;
   1130                    break;
   1131                  case GUI_TA_BOTTOM:
   1132                    rFocus.y1 = pDrawItemInfo->y0 + (GUI_Context.WM__pUserClipRect->y1 - GUI_Context.WM__pUserClipRect->y0);
   \                     ??LISTBOX_OwnerDraw_16:
   \   000002B0   ........           LDR      R0,??DataTable3
   \   000002B4   381090E5           LDR      R1,[R0, #+56]
   \   000002B8   100094E5           LDR      R0,[R4, #+16]
   \   000002BC   F620D1E1           LDRSH    R2,[R1, #+6]
   \   000002C0   F210D1E1           LDRSH    R1,[R1, #+2]
   \   000002C4   000082E0           ADD      R0,R2,R0
   \   000002C8   010040E0           SUB      R0,R0,R1
   \   000002CC   B600CDE1           STRH     R0,[SP, #+6]
   1133                    rFocus.y0 = rFocus.y1 - FontDistY + 1;
   \   000002D0   070040E0           SUB      R0,R0,R7
   \   000002D4   010080E2           ADD      R0,R0,#+1
   \   000002D8   B200CDE1           STRH     R0,[SP, #+2]
   1134                    break;
   1135                  }
   1136                  LCD_SetColor(GUI_WHITE - pObj->Props.aBackColor[ColorIndex]);
   \                     ??LISTBOX_OwnerDraw_18:
   \   000002DC   5C1099E5           LDR      R1,[R9, #+92]
   \   000002E0   FF04E0E3           MVN      R0,#-16777216
   \   000002E4   010040E0           SUB      R0,R0,R1
   \   000002E8   ........           BL       LCD_SetColor
   1137                  GUI_DrawFocusRect(&rFocus, 0);
   \   000002EC   0010A0E3           MOV      R1,#+0
   \   000002F0   0D00A0E1           MOV      R0,SP
   \   000002F4   ........           BL       GUI_DrawFocusRect
   1138                }
   1139                GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_OwnerDraw_14:
   \   000002F8   ........           BL       GUI_ALLOC_UnlockH
   1140                return 0;
   1141              }
   1142            }
   1143            return 0;
   \                     ??LISTBOX_OwnerDraw_3:
   \   000002FC   0000A0E3           MOV      R0,#+0
   \                     ??LISTBOX_OwnerDraw_5:
   \   00000300   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000304   F087BDE8           POP      {R4-R10,PC}      ;; return
   1144          }
   1145          
   1146          /*********************************************************************
   1147          *
   1148          *       LISTBOX_Callback
   1149          */

   \                                 In section .text, align 4, keep-with-next
   1150          void LISTBOX_Callback(WM_MESSAGE * pMsg) {
   \                     LISTBOX_Callback:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1151            LISTBOX_Handle hObj;
   1152            LISTBOX_Obj * pObj;
   1153            WM_SCROLL_STATE ScrollState;
   1154            WM_MESSAGE Msg;
   1155            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   38D04DE2           SUB      SP,SP,#+56
   1156            /* Let widget handle the standard messages */
   1157            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   1B00001A           BNE      ??LISTBOX_Callback_1
   1158              /* Owner needs to be informed about focus change */
   1159              if (pMsg->MsgId == WM_SET_FOCUS) {
   \   00000028   1E0050E3           CMP      R0,#+30
   1160                if (pMsg->Data.v == 0) {            /* Lost focus ? */
   \   0000002C   0C009405           LDREQ    R0,[R4, #+12]
   \   00000030   00005003           CMPEQ    R0,#+0
   \   00000034   3A01001A           BNE      ??LISTBOX_Callback_2
   1161                  _NotifyOwner(hObj, LISTBOX_NOTIFICATION_LOST_FOCUS);
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   00C0A0E3           MOV      R12,#+0
   \   0000004C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       GUI_ALLOC_LockH
   \   00000058   8C4090E5           LDR      R4,[R0, #+140]
   \   0000005C   000054E3           CMP      R4,#+0
   \   00000060   0200001A           BNE      ??LISTBOX_Callback_3
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       WM_GetParent
   \   0000006C   0040A0E1           MOV      R4,R0
   \                     ??LISTBOX_Callback_3:
   \   00000070   2610A0E3           MOV      R1,#+38
   \   00000074   00108DE5           STR      R1,[SP, #+0]
   \   00000078   0B10A0E3           MOV      R1,#+11
   \                     ??LISTBOX_Callback_4:
   \   0000007C   0C108DE5           STR      R1,[SP, #+12]
   \   00000080   08508DE5           STR      R5,[SP, #+8]
   \   00000084   ........           BL       GUI_ALLOC_UnlockH
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       WM__SendMessage
   1162                }
   1163              }
   1164              return;
   1165            }
   \   00000094   220100EA           B        ??LISTBOX_Callback_2
   1166            switch (pMsg->MsgId) {
   \                     ??LISTBOX_Callback_1:
   \   00000098   050040E2           SUB      R0,R0,#+5
   \   0000009C   210050E3           CMP      R0,#+33
   \   000000A0   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??LISTBOX_Callback_0:
   \   000000A4   1C01008A           BHI      ??LISTBOX_Callback_5
   \   000000A8   150100EA           B        ??LISTBOX_Callback_6
   \   000000AC   1A0100EA           B        ??LISTBOX_Callback_5
   \   000000B0   190100EA           B        ??LISTBOX_Callback_5
   \   000000B4   180100EA           B        ??LISTBOX_Callback_5
   \   000000B8   170100EA           B        ??LISTBOX_Callback_5
   \   000000BC   160100EA           B        ??LISTBOX_Callback_5
   \   000000C0   E40000EA           B        ??LISTBOX_Callback_7
   \   000000C4   B30000EA           B        ??LISTBOX_Callback_8
   \   000000C8   130100EA           B        ??LISTBOX_Callback_5
   \   000000CC   E70000EA           B        ??LISTBOX_Callback_9
   \   000000D0   5A0000EA           B        ??LISTBOX_Callback_10
   \   000000D4   D90000EA           B        ??LISTBOX_Callback_11
   \   000000D8   5C0000EA           B        ??LISTBOX_Callback_12
   \   000000DC   0E0100EA           B        ??LISTBOX_Callback_5
   \   000000E0   0D0100EA           B        ??LISTBOX_Callback_5
   \   000000E4   0C0100EA           B        ??LISTBOX_Callback_5
   \   000000E8   0B0100EA           B        ??LISTBOX_Callback_5
   \   000000EC   0A0100EA           B        ??LISTBOX_Callback_5
   \   000000F0   090100EA           B        ??LISTBOX_Callback_5
   \   000000F4   080100EA           B        ??LISTBOX_Callback_5
   \   000000F8   070100EA           B        ??LISTBOX_Callback_5
   \   000000FC   060100EA           B        ??LISTBOX_Callback_5
   \   00000100   050100EA           B        ??LISTBOX_Callback_5
   \   00000104   040100EA           B        ??LISTBOX_Callback_5
   \   00000108   030100EA           B        ??LISTBOX_Callback_5
   \   0000010C   020100EA           B        ??LISTBOX_Callback_5
   \   00000110   010100EA           B        ??LISTBOX_Callback_5
   \   00000114   000100EA           B        ??LISTBOX_Callback_5
   \   00000118   FF0000EA           B        ??LISTBOX_Callback_5
   \   0000011C   FE0000EA           B        ??LISTBOX_Callback_5
   \   00000120   FD0000EA           B        ??LISTBOX_Callback_5
   \   00000124   FC0000EA           B        ??LISTBOX_Callback_5
   \   00000128   FB0000EA           B        ??LISTBOX_Callback_5
   \   0000012C   FFFFFFEA           B        ??LISTBOX_Callback_13
   1167            case WM_NOTIFY_PARENT:
   1168              switch (pMsg->Data.v) {
   \                     ??LISTBOX_Callback_13:
   \   00000130   0C0094E5           LDR      R0,[R4, #+12]
   \   00000134   050050E3           CMP      R0,#+5
   \   00000138   0300000A           BEQ      ??LISTBOX_Callback_14
   \   0000013C   F600003A           BCC      ??LISTBOX_Callback_5
   \   00000140   060050E3           CMP      R0,#+6
   \   00000144   3800000A           BEQ      ??LISTBOX_Callback_15
   \   00000148   F30000EA           B        ??LISTBOX_Callback_5
   1169              case WM_NOTIFICATION_VALUE_CHANGED:
   1170                if (pMsg->hWinSrc  == WM_GetScrollbarV(hObj)) {
   \                     ??LISTBOX_Callback_14:
   \   0000014C   0500A0E1           MOV      R0,R5
   \   00000150   ........           BL       WM_GetScrollbarV
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   080094E5           LDR      R0,[R4, #+8]
   \   0000015C   010050E1           CMP      R0,R1
   \   00000160   2400001A           BNE      ??LISTBOX_Callback_16
   1171                  WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
   \   00000164   18108DE2           ADD      R1,SP,#+24
   \   00000168   ........           BL       WM_GetScrollState
   1172                  pObj = LISTBOX_LOCK_H(hObj);
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   ........           BL       GUI_ALLOC_LockH
   1173                  pObj->ScrollStateV.v = ScrollState.v;
   \   00000174   1C109DE5           LDR      R1,[SP, #+28]
   \   00000178   401080E5           STR      R1,[R0, #+64]
   1174                  GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_Callback_17:
   \   0000017C   ........           BL       GUI_ALLOC_UnlockH
   1175                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000180   10108DE2           ADD      R1,SP,#+16
   \   00000184   0500A0E1           MOV      R0,R5
   \   00000188   ........           BL       WM_GetInsideRectExScrollbar
   \   0000018C   10108DE2           ADD      R1,SP,#+16
   \   00000190   0500A0E1           MOV      R0,R5
   \   00000194   ........           BL       WM_InvalidateRect
   1176                  _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   0010A0E3           MOV      R1,#+0
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0030A0E3           MOV      R3,#+0
   \   000001A8   00C0A0E3           MOV      R12,#+0
   \   000001AC   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   ........           BL       GUI_ALLOC_LockH
   \   000001B8   8C6090E5           LDR      R6,[R0, #+140]
   \   000001BC   000056E3           CMP      R6,#+0
   \   000001C0   0200001A           BNE      ??LISTBOX_Callback_18
   \   000001C4   0500A0E1           MOV      R0,R5
   \   000001C8   ........           BL       WM_GetParent
   \   000001CC   0060A0E1           MOV      R6,R0
   \                     ??LISTBOX_Callback_18:
   \   000001D0   2610A0E3           MOV      R1,#+38
   \   000001D4   00108DE5           STR      R1,[SP, #+0]
   \   000001D8   0A10A0E3           MOV      R1,#+10
   \   000001DC   0C108DE5           STR      R1,[SP, #+12]
   \   000001E0   08508DE5           STR      R5,[SP, #+8]
   \   000001E4   ........           BL       GUI_ALLOC_UnlockH
   \   000001E8   0D10A0E1           MOV      R1,SP
   \   000001EC   0600A0E1           MOV      R0,R6
   \   000001F0   ........           BL       WM__SendMessage
   1177                } else if (pMsg->hWinSrc == WM_GetScrollbarH(hObj)) {
   \   000001F4   C80000EA           B        ??LISTBOX_Callback_5
   \                     ??LISTBOX_Callback_16:
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           BL       WM_GetScrollbarH
   \   00000200   0010A0E1           MOV      R1,R0
   \   00000204   080094E5           LDR      R0,[R4, #+8]
   \   00000208   010050E1           CMP      R0,R1
   \   0000020C   C200001A           BNE      ??LISTBOX_Callback_5
   1178                  WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
   \   00000210   18108DE2           ADD      R1,SP,#+24
   \   00000214   ........           BL       WM_GetScrollState
   1179                  pObj = LISTBOX_LOCK_H(hObj);
   \   00000218   0500A0E1           MOV      R0,R5
   \   0000021C   ........           BL       GUI_ALLOC_LockH
   1180                  pObj->ScrollStateH.v = ScrollState.v;
   \   00000220   1C109DE5           LDR      R1,[SP, #+28]
   \   00000224   4C1080E5           STR      R1,[R0, #+76]
   1181                  GUI_UNLOCK_H(pObj);
   \   00000228   D3FFFFEA           B        ??LISTBOX_Callback_17
   1182                  LISTBOX__InvalidateInsideArea(hObj);
   1183                  _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
   1184                }
   1185                break;
   1186              case WM_NOTIFICATION_SCROLLBAR_ADDED:
   1187                #if WIDGET_USE_PARENT_EFFECT
   1188                  pObj = LISTBOX_LOCK_H(hObj);
   1189                  WIDGET_SetEffect(pMsg->hWinSrc, pObj->Widget.pEffect);
   1190                  GUI_UNLOCK_H(pObj);
   1191                #endif
   1192                LISTBOX_UpdateScrollers(hObj);
   \                     ??LISTBOX_Callback_15:
   \   0000022C   0500A0E1           MOV      R0,R5
   \   00000230   ........           BL       _ManageAutoScroll
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   ........           BL       _CalcScrollParas
   1193                break;
   \   0000023C   B60000EA           B        ??LISTBOX_Callback_5
   1194              }
   1195              break;
   1196            case WM_PAINT:
   1197              _OnPaint(hObj, pMsg);
   \                     ??LISTBOX_Callback_10:
   \   00000240   0410A0E1           MOV      R1,R4
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   ........           BL       _OnPaint
   1198              break;
   \   0000024C   B20000EA           B        ??LISTBOX_Callback_5
   1199            case WM_PID_STATE_CHANGED:
   1200              {
   1201                const WM_PID_STATE_CHANGED_INFO * pInfo = (const WM_PID_STATE_CHANGED_INFO *)pMsg->Data.p;
   \                     ??LISTBOX_Callback_12:
   \   00000250   0C0094E5           LDR      R0,[R4, #+12]
   1202                if (pInfo->State) {
   \   00000254   0810D0E5           LDRB     R1,[R0, #+8]
   \   00000258   000051E3           CMP      R1,#+0
   \   0000025C   AE00000A           BEQ      ??LISTBOX_Callback_5
   1203                  int Sel;
   1204                  Sel = _GetItemFromPos(hObj, pInfo->x, pInfo->y);
   \   00000260   046090E5           LDR      R6,[R0, #+4]
   \   00000264   00A090E5           LDR      R10,[R0, #+0]
   \   00000268   0070E0E3           MVN      R7,#+0
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   ........           BL       GUI_ALLOC_LockH
   \   00000274   408090E5           LDR      R8,[R0, #+64]
   \   00000278   340090E5           LDR      R0,[R0, #+52]
   \   0000027C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000280   0090A0E1           MOV      R9,R0
   \   00000284   ........           BL       GUI_ALLOC_UnlockH
   \   00000288   10108DE2           ADD      R1,SP,#+16
   \   0000028C   0500A0E1           MOV      R0,R5
   \   00000290   ........           BL       WM_GetInsideRectExScrollbar
   \   00000294   F001DDE1           LDRSH    R0,[SP, #+16]
   \   00000298   00005AE1           CMP      R10,R0
   \   0000029C   F241DDA1           LDRSHGE  R4,[SP, #+18]
   \   000002A0   040056A1           CMPGE    R6,R4
   \   000002A4   F401DDA1           LDRSHGE  R0,[SP, #+20]
   \   000002A8   0A0050A1           CMPGE    R0,R10
   \   000002AC   F601DDA1           LDRSHGE  R0,[SP, #+22]
   \   000002B0   060050A1           CMPGE    R0,R6
   \   000002B4   9A0000BA           BLT      ??LISTBOX_Callback_2
   \   000002B8   08A0A0E1           MOV      R10,R8
   \   000002BC   090058E1           CMP      R8,R9
   \   000002C0   970000AA           BGE      ??LISTBOX_Callback_2
   \   000002C4   088049E0           SUB      R8,R9,R8
   \   000002C8   010018E3           TST      R8,#0x1
   \   000002CC   0500000A           BEQ      ??LISTBOX_Callback_19
   \   000002D0   0A70A0E1           MOV      R7,R10
   \   000002D4   0A10A0E1           MOV      R1,R10
   \   000002D8   0500A0E1           MOV      R0,R5
   \   000002DC   ........           BL       _GetItemSizeY
   \   000002E0   044080E0           ADD      R4,R0,R4
   \   000002E4   01A08AE2           ADD      R10,R10,#+1
   \                     ??LISTBOX_Callback_19:
   \   000002E8   A880B0E1           LSRS     R8,R8,#+1
   \   000002EC   0F00000A           BEQ      ??LISTBOX_Callback_20
   \                     ??LISTBOX_Callback_21:
   \   000002F0   040056E1           CMP      R6,R4
   \   000002F4   0A70A0A1           MOVGE    R7,R10
   \   000002F8   0A10A0E1           MOV      R1,R10
   \   000002FC   0500A0E1           MOV      R0,R5
   \   00000300   ........           BL       _GetItemSizeY
   \   00000304   044080E0           ADD      R4,R0,R4
   \   00000308   01908AE2           ADD      R9,R10,#+1
   \   0000030C   040056E1           CMP      R6,R4
   \   00000310   0970A0A1           MOVGE    R7,R9
   \   00000314   0910A0E1           MOV      R1,R9
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           BL       _GetItemSizeY
   \   00000320   044080E0           ADD      R4,R0,R4
   \   00000324   01A089E2           ADD      R10,R9,#+1
   \   00000328   018058E2           SUBS     R8,R8,#+1
   \   0000032C   EFFFFF1A           BNE      ??LISTBOX_Callback_21
   1205                  if (Sel >= 0) {
   \                     ??LISTBOX_Callback_20:
   \   00000330   000057E3           CMP      R7,#+0
   \   00000334   7A00004A           BMI      ??LISTBOX_Callback_2
   1206                    _ToggleMultiSel(hObj, Sel);
   \   00000338   0710A0E1           MOV      R1,R7
   \   0000033C   0500A0E1           MOV      R0,R5
   \   00000340   ........           BL       _ToggleMultiSel
   1207                    LISTBOX_SetSel(hObj, Sel);
   \   00000344   0710A0E1           MOV      R1,R7
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           BL       LISTBOX_SetSel
   1208                    _NotifyOwner(hObj, WM_NOTIFICATION_CLICKED);
   \   00000350   0D00A0E1           MOV      R0,SP
   \   00000354   0010A0E3           MOV      R1,#+0
   \   00000358   0020A0E3           MOV      R2,#+0
   \   0000035C   0030A0E3           MOV      R3,#+0
   \   00000360   00C0A0E3           MOV      R12,#+0
   \   00000364   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000368   0500A0E1           MOV      R0,R5
   \   0000036C   ........           BL       GUI_ALLOC_LockH
   \   00000370   8C4090E5           LDR      R4,[R0, #+140]
   \   00000374   000054E3           CMP      R4,#+0
   \   00000378   0200001A           BNE      ??LISTBOX_Callback_22
   \   0000037C   0500A0E1           MOV      R0,R5
   \   00000380   ........           BL       WM_GetParent
   \   00000384   0040A0E1           MOV      R4,R0
   \                     ??LISTBOX_Callback_22:
   \   00000388   2610A0E3           MOV      R1,#+38
   \   0000038C   00108DE5           STR      R1,[SP, #+0]
   \   00000390   0110A0E3           MOV      R1,#+1
   \   00000394   38FFFFEA           B        ??LISTBOX_Callback_4
   1209                  }
   1210                  return;
   1211                }
   1212              }
   1213              break;
   1214            case WM_TOUCH:
   1215              _OnTouch(hObj, pMsg);
   \                     ??LISTBOX_Callback_8:
   \   00000398   0C0094E5           LDR      R0,[R4, #+12]
   \   0000039C   000050E3           CMP      R0,#+0
   \   000003A0   1100001A           BNE      ??LISTBOX_Callback_23
   \   000003A4   0D00A0E1           MOV      R0,SP
   \   000003A8   0010A0E3           MOV      R1,#+0
   \   000003AC   0020A0E3           MOV      R2,#+0
   \   000003B0   0030A0E3           MOV      R3,#+0
   \   000003B4   00C0A0E3           MOV      R12,#+0
   \   000003B8   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   000003BC   0500A0E1           MOV      R0,R5
   \   000003C0   ........           BL       GUI_ALLOC_LockH
   \   000003C4   8C4090E5           LDR      R4,[R0, #+140]
   \   000003C8   000054E3           CMP      R4,#+0
   \   000003CC   0200001A           BNE      ??LISTBOX_Callback_24
   \   000003D0   0500A0E1           MOV      R0,R5
   \   000003D4   ........           BL       WM_GetParent
   \   000003D8   0040A0E1           MOV      R4,R0
   \                     ??LISTBOX_Callback_24:
   \   000003DC   2610A0E3           MOV      R1,#+38
   \   000003E0   00108DE5           STR      R1,[SP, #+0]
   \   000003E4   0310A0E3           MOV      R1,#+3
   \   000003E8   23FFFFEA           B        ??LISTBOX_Callback_4
   \                     ??LISTBOX_Callback_23:
   \   000003EC   0800D0E5           LDRB     R0,[R0, #+8]
   \   000003F0   000050E3           CMP      R0,#+0
   \   000003F4   4A00001A           BNE      ??LISTBOX_Callback_2
   \   000003F8   0D00A0E1           MOV      R0,SP
   \   000003FC   0010A0E3           MOV      R1,#+0
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0030A0E3           MOV      R3,#+0
   \   00000408   00C0A0E3           MOV      R12,#+0
   \   0000040C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000410   0500A0E1           MOV      R0,R5
   \   00000414   ........           BL       GUI_ALLOC_LockH
   \   00000418   8C4090E5           LDR      R4,[R0, #+140]
   \   0000041C   000054E3           CMP      R4,#+0
   \   00000420   0200001A           BNE      ??LISTBOX_Callback_25
   \   00000424   0500A0E1           MOV      R0,R5
   \   00000428   ........           BL       WM_GetParent
   \   0000042C   0040A0E1           MOV      R4,R0
   \                     ??LISTBOX_Callback_25:
   \   00000430   2610A0E3           MOV      R1,#+38
   \   00000434   00108DE5           STR      R1,[SP, #+0]
   \   00000438   0210A0E3           MOV      R1,#+2
   \   0000043C   0EFFFFEA           B        ??LISTBOX_Callback_4
   1216              return;
   1217          #if GUI_SUPPORT_MOUSE
   1218            case WM_MOUSEOVER:
   1219              if (_OnMouseOver(hObj, pMsg) == 0)
   \                     ??LISTBOX_Callback_11:
   \   00000440   0410A0E1           MOV      R1,R4
   \   00000444   0500A0E1           MOV      R0,R5
   \   00000448   ........           BL       _OnMouseOver
   \                     ??LISTBOX_Callback_26:
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   3100001A           BNE      ??LISTBOX_Callback_5
   \   00000454   320000EA           B        ??LISTBOX_Callback_2
   1220                return;
   1221              break;
   1222          #endif
   1223            case WM_DELETE:
   1224              _FreeAttached(hObj);
   \                     ??LISTBOX_Callback_7:
   \   00000458   0500A0E1           MOV      R0,R5
   \   0000045C   ........           BL       GUI_ALLOC_LockH
   \   00000460   340090E5           LDR      R0,[R0, #+52]
   \   00000464   ........           BL       GUI_ARRAY_Delete
   \   00000468   ........           BL       GUI_ALLOC_UnlockH
   1225              break;       /* No return here ... WM_DefaultProc needs to be called */
   \   0000046C   2A0000EA           B        ??LISTBOX_Callback_5
   1226            case WM_KEY:
   1227              if (((const WM_KEY_INFO *)(pMsg->Data.p))->PressedCnt > 0) {
   \                     ??LISTBOX_Callback_9:
   \   00000470   0C0094E5           LDR      R0,[R4, #+12]
   \   00000474   041090E5           LDR      R1,[R0, #+4]
   \   00000478   010051E3           CMP      R1,#+1
   \   0000047C   0A0000BA           BLT      ??LISTBOX_Callback_27
   1228                int Key;
   1229                Key = ((const WM_KEY_INFO *)(pMsg->Data.p))->Key;
   1230                if (LISTBOX_AddKey(hObj, Key)) {
   \   00000480   006090E5           LDR      R6,[R0, #+0]
   \   00000484   000055E3           CMP      R5,#+0
   \   00000488   0700000A           BEQ      ??LISTBOX_Callback_27
   \   0000048C   ........           BL       GUI_Lock
   \   00000490   0610A0E1           MOV      R1,R6
   \   00000494   0500A0E1           MOV      R0,R5
   \   00000498   ........           BL       _AddKey
   \   0000049C   0060A0E1           MOV      R6,R0
   \   000004A0   ........           BL       GUI_Unlock
   1231                  return;
   1232                }
   1233              }
   \   000004A4   000056E3           CMP      R6,#+0
   \   000004A8   1D00001A           BNE      ??LISTBOX_Callback_2
   1234              /* Send a WM_NOTIFY_OWNER_KEY message with the key information to the owner window */
   1235              Msg = *pMsg;
   \                     ??LISTBOX_Callback_27:
   \   000004AC   0E10B4E8           LDM      R4!,{R1-R3,R12}
   \   000004B0   24008DE2           ADD      R0,SP,#+36
   \   000004B4   0E10A0E8           STM      R0!,{R1-R3,R12}
   1236              Msg.MsgId = WM_NOTIFY_OWNER_KEY;
   \   000004B8   2110A0E3           MOV      R1,#+33
   \   000004BC   104044E2           SUB      R4,R4,#+16
   \   000004C0   24108DE5           STR      R1,[SP, #+36]
   1237              _SendToOwner(hObj, &Msg);
   \   000004C4   0500A0E1           MOV      R0,R5
   \   000004C8   ........           BL       GUI_ALLOC_LockH
   \   000004CC   8C6090E5           LDR      R6,[R0, #+140]
   \   000004D0   000056E3           CMP      R6,#+0
   \   000004D4   0200001A           BNE      ??LISTBOX_Callback_28
   \   000004D8   0500A0E1           MOV      R0,R5
   \   000004DC   ........           BL       WM_GetParent
   \   000004E0   0060A0E1           MOV      R6,R0
   \                     ??LISTBOX_Callback_28:
   \   000004E4   2C508DE5           STR      R5,[SP, #+44]
   \   000004E8   ........           BL       GUI_ALLOC_UnlockH
   \   000004EC   24108DE2           ADD      R1,SP,#+36
   \   000004F0   0600A0E1           MOV      R0,R6
   \   000004F4   ........           BL       WM__SendMessage
   1238              if (!WM_IsWindow(hObj)) {
   \   000004F8   0500A0E1           MOV      R0,R5
   \   000004FC   ........           BL       WM_IsWindow
   \   00000500   D1FFFFEA           B        ??LISTBOX_Callback_26
   1239                return;
   1240              }
   1241              break;
   1242            case WM_SIZE:
   1243              LISTBOX_UpdateScrollers(hObj);
   \                     ??LISTBOX_Callback_6:
   \   00000504   0500A0E1           MOV      R0,R5
   \   00000508   ........           BL       _ManageAutoScroll
   \   0000050C   0500A0E1           MOV      R0,R5
   \   00000510   ........           BL       _CalcScrollParas
   1244              WM_InvalidateWindow(hObj);
   \   00000514   0500A0E1           MOV      R0,R5
   \   00000518   ........           BL       WM_InvalidateWindow
   1245              break;
   1246            }
   1247            WM_DefaultProc(pMsg);
   \                     ??LISTBOX_Callback_5:
   \   0000051C   0400A0E1           MOV      R0,R4
   \   00000520   ........           BL       WM_DefaultProc
   1248          }
   \                     ??LISTBOX_Callback_2:
   \   00000524   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000528   F087BDE8           POP      {R4-R10,PC}      ;; return
   1249          
   1250          /*********************************************************************
   1251          *
   1252          *       LISTBOX_CreateEx
   1253          */

   \                                 In section .text, align 4, keep-with-next
   1254          LISTBOX_Handle LISTBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
   1255                                          int WinFlags, int ExFlags, int Id, const GUI_ConstString * ppText)
   1256          {
   \                     LISTBOX_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   44509DE5           LDR      R5,[SP, #+68]
   \   00000024   48409DE5           LDR      R4,[SP, #+72]
   1257            LISTBOX_Handle hObj;
   1258            GUI_USE_PARA(ExFlags);
   1259            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
   1260            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, LISTBOX_Callback,
   1261                                          sizeof(LISTBOX_Obj) - sizeof(WM_Obj));
   \   0000002C   6C00A0E3           MOV      R0,#+108
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable3_1
   \   00000038   04B08DE5           STR      R11,[SP, #+4]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   00A08DE5           STR      R10,[SP, #+0]
   \   00000044   0930A0E1           MOV      R3,R9
   \   00000048   0820A0E1           MOV      R2,R8
   \   0000004C   0710A0E1           MOV      R1,R7
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   0060B0E1           MOVS     R6,R0
   1262            if (hObj) {
   \   0000005C   2500000A           BEQ      ??LISTBOX_CreateEx_0
   1263              GUI_ARRAY ItemArray;
   1264              LISTBOX_Obj * pObj;
   1265              ItemArray = GUI_ARRAY_Create();
   \   00000060   ........           BL       GUI_ARRAY_Create
   \   00000064   0080B0E1           MOVS     R8,R0
   1266              if (ItemArray) {
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   2000000A           BEQ      ??LISTBOX_CreateEx_1
   1267                pObj = (LISTBOX_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   00000070   ........           BL       GUI_ALLOC_LockH
   \   00000074   0070A0E1           MOV      R7,R0
   1268                 /* Init sub-classes */
   1269                pObj->ItemArray = ItemArray;
   \   00000078   348087E5           STR      R8,[R7, #+52]
   1270               /* init widget specific variables */
   1271                WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   0000007C   1020A0E3           MOV      R2,#+16
   \   00000080   0510A0E1           MOV      R1,R5
   \   00000084   ........           BL       WIDGET__Init
   1272                LISTBOX_INIT_ID(pObj);
   1273                pObj->Props = LISTBOX_DefaultProps;
   \   00000088   ........           LDR      R1,??DataTable3_2
   \   0000008C   540087E2           ADD      R0,R7,#+84
   \   00000090   2C53B1E8           LDM      R1!,{R2,R3,R5,R8,R9,R12,LR}
   \   00000094   2C53A0E8           STM      R0!,{R2,R3,R5,R8,R9,R12,LR}
   \   00000098   2C53B1E8           LDM      R1!,{R2,R3,R5,R8,R9,R12,LR}
   \   0000009C   2C53A0E8           STM      R0!,{R2,R3,R5,R8,R9,R12,LR}
   1274                pObj->pfDrawItem = LISTBOX_OwnerDraw;
   \   000000A0   ........           LDR      R0,??DataTable3_3
   \   000000A4   380087E5           STR      R0,[R7, #+56]
   1275                GUI_UNLOCK_H(pObj);
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
   1276                if (ppText) {
   \   000000AC   000054E3           CMP      R4,#+0
   \   000000B0   0A00000A           BEQ      ??LISTBOX_CreateEx_2
   \   000000B4   ........           BL       GUI_Lock
   \   000000B8   0010E0E3           MVN      R1,#+0
   \   000000BC   0600A0E1           MOV      R0,R6
   \   000000C0   ........           BL       LISTBOX_InvalidateItem
   \   000000C4   010000EA           B        ??LISTBOX_CreateEx_3
   \                     ??LISTBOX_CreateEx_4:
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   ........           BL       LISTBOX_AddString
   \                     ??LISTBOX_CreateEx_3:
   \   000000D0   041094E4           LDR      R1,[R4], #+4
   \   000000D4   000051E3           CMP      R1,#+0
   \   000000D8   FAFFFF1A           BNE      ??LISTBOX_CreateEx_4
   \   000000DC   ........           BL       GUI_Unlock
   1277                  /* init member variables */
   1278                  /* Set non-zero attributes */
   1279                  LISTBOX_SetText(hObj, ppText);
   1280                }
   1281                LISTBOX_UpdateScrollers(hObj);
   \                     ??LISTBOX_CreateEx_2:
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           BL       _ManageAutoScroll
   \   000000E8   0600A0E1           MOV      R0,R6
   \   000000EC   ........           BL       _CalcScrollParas
   1282              } else {
   \   000000F0   000000EA           B        ??LISTBOX_CreateEx_0
   1283                WM_DeleteWindow(hObj);
   \                     ??LISTBOX_CreateEx_1:
   \   000000F4   ........           BL       WM_DeleteWindow
   1284              }
   1285            }
   1286            WM_UNLOCK();
   \                     ??LISTBOX_CreateEx_0:
   \   000000F8   ........           BL       GUI_Unlock
   1287            return hObj;
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   14D08DE2           ADD      SP,SP,#+20
   \   00000104   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1288          }
   1289          
   1290          /*********************************************************************
   1291          *
   1292          *       LISTBOX_InvalidateItem
   1293          */

   \                                 In section .text, align 4, keep-with-next
   1294          void LISTBOX_InvalidateItem(LISTBOX_Handle hObj, int Index) {
   \                     LISTBOX_InvalidateItem:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0160A0E1           MOV      R6,R1
   1295            LISTBOX_ITEM * pItem;
   1296            LISTBOX_Obj * pObj;
   1297            int i, NumItems;
   1298          
   1299            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   4E00000A           BEQ      ??LISTBOX_InvalidateItem_0
   1300              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1301              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0070A0E1           MOV      R7,R0
   1302              NumItems = LISTBOX__GetNumItems(pObj);
   \   00000028   340097E5           LDR      R0,[R7, #+52]
   \   0000002C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000030   0080A0E1           MOV      R8,R0
   1303              if (Index < NumItems) {
   \   00000034   080056E1           CMP      R6,R8
   \   00000038   430000AA           BGE      ??LISTBOX_InvalidateItem_1
   1304                if (Index < 0) {
   \   0000003C   000056E3           CMP      R6,#+0
   \   00000040   2100005A           BPL      ??LISTBOX_InvalidateItem_2
   1305                  for (i = 0; i < NumItems; i++) {
   \   00000044   0060A0E3           MOV      R6,#+0
   \   00000048   010058E3           CMP      R8,#+1
   \   0000004C   100000BA           BLT      ??LISTBOX_InvalidateItem_3
   \   00000050   0690E0E1           MVN      R9,R6
   \   00000054   0050A0E3           MOV      R5,#+0
   1306                    LISTBOX__InvalidateItemSize(pObj, i);
   \                     ??LISTBOX_InvalidateItem_4:
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   340097E5           LDR      R0,[R7, #+52]
   \   00000060   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   B050C011           STRHNE   R5,[R0, #+0]
   \   0000006C   B250C011           STRHNE   R5,[R0, #+2]
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
   1307                    pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(pObj->ItemArray, i); {
   1308                      pItem->ItemPosY = -1;
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   340097E5           LDR      R0,[R7, #+52]
   \   0000007C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000080   049080E5           STR      R9,[R0, #+4]
   1309                    } GUI_UNLOCK_H(pItem);
   \   00000084   ........           BL       GUI_ALLOC_UnlockH
   1310                  }
   \   00000088   016086E2           ADD      R6,R6,#+1
   \   0000008C   080056E1           CMP      R6,R8
   \   00000090   F0FFFFBA           BLT      ??LISTBOX_InvalidateItem_4
   1311                  pObj->ContentSizeX = 0;
   \                     ??LISTBOX_InvalidateItem_3:
   \   00000094   0050A0E3           MOV      R5,#+0
   \   00000098   B659C7E1           STRH     R5,[R7, #+150]
   1312                  GUI_UNLOCK_H(pObj);
   \   0000009C   ........           BL       GUI_ALLOC_UnlockH
   1313                  LISTBOX_UpdateScrollers(hObj);
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       _ManageAutoScroll
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       _CalcScrollParas
   1314                  LISTBOX__InvalidateInsideArea(hObj);
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       WM_GetInsideRectExScrollbar
   \                     ??LISTBOX_InvalidateItem_5:
   \   000000BC   0D10A0E1           MOV      R1,SP
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       WM_InvalidateRect
   1315                } else {
   \   000000C8   200000EA           B        ??LISTBOX_InvalidateItem_6
   1316                  LISTBOX__InvalidateItemSize(pObj, Index);
   \                     ??LISTBOX_InvalidateItem_2:
   \   000000CC   0610A0E1           MOV      R1,R6
   \   000000D0   340097E5           LDR      R0,[R7, #+52]
   \   000000D4   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000D8   0050A0E3           MOV      R5,#+0
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   B050C011           STRHNE   R5,[R0, #+0]
   \   000000E4   B250C011           STRHNE   R5,[R0, #+2]
   \   000000E8   ........           BL       GUI_ALLOC_UnlockH
   1317                  GUI_UNLOCK_H(pObj);
   \   000000EC   ........           BL       GUI_ALLOC_UnlockH
   1318                  LISTBOX_UpdateScrollers(hObj);
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       _ManageAutoScroll
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           BL       _CalcScrollParas
   1319                  LISTBOX__InvalidateItemAndBelow(hObj, Index);
   \   00000100   0610A0E1           MOV      R1,R6
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       _GetItemPosY
   \   0000010C   0060B0E1           MOVS     R6,R0
   \   00000110   0E00004A           BMI      ??LISTBOX_InvalidateItem_6
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       GUI_ALLOC_LockH
   \   0000011C   405090E5           LDR      R5,[R0, #+64]
   \   00000120   ........           BL       GUI_ALLOC_UnlockH
   \   00000124   0510A0E1           MOV      R1,R5
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       _GetItemPosY
   \   00000130   0D10A0E1           MOV      R1,SP
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       WM_GetInsideRectExScrollbar
   \   0000013C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000140   000086E0           ADD      R0,R6,R0
   \   00000144   B200CDE1           STRH     R0,[SP, #+2]
   \   00000148   DBFFFFEA           B        ??LISTBOX_InvalidateItem_5
   1320                }
   1321              } else {
   1322                GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_InvalidateItem_1:
   \   0000014C   ........           BL       GUI_ALLOC_UnlockH
   1323              }
   1324              WM_UNLOCK();
   \                     ??LISTBOX_InvalidateItem_6:
   \   00000150   ........           BL       GUI_Unlock
   1325            }
   1326          }
   \                     ??LISTBOX_InvalidateItem_0:
   \   00000154   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000158   F083BDE8           POP      {R4-R9,PC}       ;; return
   1327          
   1328          /*********************************************************************
   1329          *
   1330          *       LISTBOX_AddKey
   1331          *
   1332          * Returns: 1 if Key has been consumed
   1333          *          0 else 
   1334          */

   \                                 In section .text, align 4, keep-with-next
   1335          int LISTBOX_AddKey(LISTBOX_Handle hObj, int Key) {
   \                     LISTBOX_AddKey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1336            int r = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
   1337            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0500000A           BEQ      ??LISTBOX_AddKey_0
   1338              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1339              r = _AddKey(hObj, Key);
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       _AddKey
   \   00000028   0060A0E1           MOV      R6,R0
   1340              WM_UNLOCK();
   \   0000002C   ........           BL       GUI_Unlock
   1341            }
   1342            return r;
   \                     ??LISTBOX_AddKey_0:
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
   1343          }
   1344          
   1345          /*********************************************************************
   1346          *
   1347          *       LISTBOX_AddString
   1348          */

   \                                 In section .text, align 4, keep-with-next
   1349          void LISTBOX_AddString(LISTBOX_Handle hObj, const char * s) {
   \                     LISTBOX_AddString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   1350            GUI_ARRAY ItemArray;
   1351            LISTBOX_Obj  * pObj;
   1352            LISTBOX_ITEM * pItem;
   1353            LISTBOX_ITEM Item = {0, 0};
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   0E00A0E8           STM      R0!,{R1-R3}
   1354            unsigned ItemIndex;
   1355          
   1356            if (hObj && s) {
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   00005613           CMPNE    R6,#+0
   \   0000002C   5A00000A           BEQ      ??LISTBOX_AddString_0
   1357              WM_LOCK();
   \   00000030   ........           BL       GUI_Lock
   1358              pObj = LISTBOX_LOCK_H(hObj);
   1359              ItemArray = pObj->ItemArray;
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       GUI_ALLOC_LockH
   \   0000003C   347090E5           LDR      R7,[R0, #+52]
   1360              GUI_UNLOCK_H(pObj);
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
   1361              if (GUI_ARRAY_AddItem(ItemArray, &Item, sizeof(LISTBOX_ITEM) + strlen(s)) == 0) {
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           BL       strlen
   \   0000004C   0C2080E2           ADD      R2,R0,#+12
   \   00000050   08108DE2           ADD      R1,SP,#+8
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   ........           BL       GUI_ARRAY_AddItem
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   4C00001A           BNE      ??LISTBOX_AddString_1
   1362                ItemIndex = GUI_ARRAY_GetNumItems(ItemArray) - 1;
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           BL       GUI_ARRAY_GetNumItems
   \   0000006C   015040E2           SUB      R5,R0,#+1
   1363                pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, ItemIndex);
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   ........           BL       GUI_ARRAY_GetpItemLocked
   1364                pItem->ItemPosY = -1;
   \   0000007C   0010E0E3           MVN      R1,#+0
   \   00000080   041080E5           STR      R1,[R0, #+4]
   1365                strcpy(pItem->acText, s);
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   090080E2           ADD      R0,R0,#+9
   \   0000008C   ........           BL       strcpy
   1366                GUI_UNLOCK_H(pItem);
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
   1367                pObj = LISTBOX_LOCK_H(hObj);
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       GUI_ALLOC_LockH
   \   0000009C   0060A0E1           MOV      R6,R0
   1368                LISTBOX__InvalidateItemSize(pObj, ItemIndex);
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   340096E5           LDR      R0,[R6, #+52]
   \   000000A8   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0010A013           MOVNE    R1,#+0
   \   000000B4   B010C011           STRHNE   R1,[R0, #+0]
   \   000000B8   B210C011           STRHNE   R1,[R0, #+2]
   \   000000BC   ........           BL       GUI_ALLOC_UnlockH
   1369                LISTBOX__AddSize(pObj, ItemIndex);
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   340096E5           LDR      R0,[R6, #+52]
   \   000000C8   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000CC   0070A0E1           MOV      R7,R0
   \   000000D0   540096E5           LDR      R0,[R6, #+84]
   \   000000D4   ........           BL       GUI_SetFont
   \   000000D8   0080A0E1           MOV      R8,R0
   \   000000DC   090087E2           ADD      R0,R7,#+9
   \   000000E0   ........           BL       GUI_GetStringDistX
   \   000000E4   0090A0E1           MOV      R9,R0
   \   000000E8   0800A0E1           MOV      R0,R8
   \   000000EC   ........           BL       GUI_SetFont
   \   000000F0   B090C7E1           STRH     R9,[R7, #+0]
   \   000000F4   ........           BL       GUI_ALLOC_UnlockH
   \   000000F8   B609D6E1           LDRH     R0,[R6, #+150]
   \   000000FC   090050E1           CMP      R0,R9
   \   00000100   B699C6B1           STRHLT   R9,[R6, #+150]
   1370                GUI_UNLOCK_H(pObj);
   \   00000104   ........           BL       GUI_ALLOC_UnlockH
   1371                LISTBOX_UpdateScrollers(hObj);
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       _ManageAutoScroll
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       _CalcScrollParas
   1372                LISTBOX__InvalidateItem(hObj, ItemIndex);
   \   00000118   000055E3           CMP      R5,#+0
   \   0000011C   1D00004A           BMI      ??LISTBOX_AddString_1
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       _GetItemPosY
   \   0000012C   0060B0E1           MOVS     R6,R0
   \   00000130   1800004A           BMI      ??LISTBOX_AddString_1
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       GUI_ALLOC_LockH
   \   0000013C   407090E5           LDR      R7,[R0, #+64]
   \   00000140   ........           BL       GUI_ALLOC_UnlockH
   \   00000144   0710A0E1           MOV      R1,R7
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           BL       _GetItemPosY
   \   00000150   0070A0E1           MOV      R7,R0
   \   00000154   0510A0E1           MOV      R1,R5
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           BL       _GetItemSizeY
   \   00000160   0050A0E1           MOV      R5,R0
   \   00000164   0D10A0E1           MOV      R1,SP
   \   00000168   0400A0E1           MOV      R0,R4
   \   0000016C   ........           BL       WM_GetInsideRectExScrollbar
   \   00000170   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000174   0D10A0E1           MOV      R1,SP
   \   00000178   000086E0           ADD      R0,R6,R0
   \   0000017C   070040E0           SUB      R0,R0,R7
   \   00000180   B200CDE1           STRH     R0,[SP, #+2]
   \   00000184   000085E0           ADD      R0,R5,R0
   \   00000188   010040E2           SUB      R0,R0,#+1
   \   0000018C   B600CDE1           STRH     R0,[SP, #+6]
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   ........           BL       WM_InvalidateRect
   1373              }
   1374              WM_UNLOCK();
   \                     ??LISTBOX_AddString_1:
   \   00000198   ........           BL       GUI_Unlock
   1375            }
   1376          }
   \                     ??LISTBOX_AddString_0:
   \   0000019C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000001A0   F083BDE8           POP      {R4-R9,PC}       ;; return
   1377          
   1378          /*********************************************************************
   1379          *
   1380          *       LISTBOX_SetText
   1381          */

   \                                 In section .text, align 4, keep-with-next
   1382          void LISTBOX_SetText(LISTBOX_Handle hObj, const GUI_ConstString * ppText) {
   \                     LISTBOX_SetText:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1383            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0C00000A           BEQ      ??LISTBOX_SetText_0
   1384              int i;
   1385              const char * s;
   1386              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1387              LISTBOX_InvalidateItem(hObj, LISTBOX_ALL_ITEMS);
   \   0000001C   0010E0E3           MVN      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       LISTBOX_InvalidateItem
   1388              if (ppText) {
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0500000A           BEQ      ??LISTBOX_SetText_1
   1389                for (i = 0; (s = *(ppText + i)) != 0; i++) {
   \   00000030   010000EA           B        ??LISTBOX_SetText_2
   1390                  LISTBOX_AddString(hObj, s);
   \                     ??LISTBOX_SetText_3:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       LISTBOX_AddString
   1391                }
   \                     ??LISTBOX_SetText_2:
   \   0000003C   041095E4           LDR      R1,[R5], #+4
   \   00000040   000051E3           CMP      R1,#+0
   \   00000044   FAFFFF1A           BNE      ??LISTBOX_SetText_3
   1392              }
   1393              WM_UNLOCK();
   \                     ??LISTBOX_SetText_1:
   \   00000048   ........           BL       GUI_Unlock
   1394            }
   1395          }
   \                     ??LISTBOX_SetText_0:
   \   0000004C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
   1396          
   1397          /*********************************************************************
   1398          *
   1399          *       LISTBOX_SetSel
   1400          */

   \                                 In section .text, align 4, keep-with-next
   1401          void LISTBOX_SetSel (LISTBOX_Handle hObj, int NewSel) {
   \                     LISTBOX_SetSel:
   \   00000000   E0432DE9           PUSH     {R5-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   0160A0E1           MOV      R6,R1
   1402            if (hObj) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   7D00000A           BEQ      ??LISTBOX_SetSel_0
   1403              LISTBOX_Obj * pObj;
   1404              int MaxSel;
   1405              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1406              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0080A0E1           MOV      R8,R0
   1407              MaxSel = LISTBOX__GetNumItems(pObj);
   \   00000028   340098E5           LDR      R0,[R8, #+52]
   \   0000002C   ........           BL       GUI_ARRAY_GetNumItems
   1408              MaxSel = MaxSel ? MaxSel - 1 : 0;
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   01004012           SUBNE    R0,R0,#+1
   1409              if (NewSel > MaxSel) {
   \   00000038   060050E1           CMP      R0,R6
   \   0000003C   0060A0D1           MOVLE    R6,R0
   1410                NewSel = MaxSel;
   1411              }
   1412              if (NewSel < 0) {
   \   00000040   000056E3           CMP      R6,#+0
   1413                NewSel = -1;
   \   00000044   0060E043           MVNMI    R6,#+0
   \   00000048   0900004A           BMI      ??LISTBOX_SetSel_1
   1414              } else {
   1415                WM_HMEM hItem = GUI_ARRAY_GethItem(pObj->ItemArray, NewSel);
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   340098E5           LDR      R0,[R8, #+52]
   \   00000054   ........           BL       GUI_ARRAY_GethItem
   1416                if (hItem) {
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0400000A           BEQ      ??LISTBOX_SetSel_1
   1417                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
   1418                  if (pItem->Status & LISTBOX_ITEM_DISABLED) {
   \   00000060   ........           BL       GUI_ALLOC_LockH
   \   00000064   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000068   020010E3           TST      R0,#0x2
   1419                    NewSel = -1;
   \   0000006C   0060E013           MVNNE    R6,#+0
   1420                  }
   1421                  GUI_UNLOCK_H(pItem);
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
   \                     ??LISTBOX_SetSel_1:
   \   00000074   F079D8E1           LDRSH    R7,[R8, #+144]
   \   00000078   070056E1           CMP      R6,R7
   \   0000007C   6100000A           BEQ      ??LISTBOX_SetSel_2
   1422                }
   1423              }
   1424              if (NewSel != pObj->Sel) {
   1425                int OldSel;
   1426                OldSel    = pObj->Sel;
   1427                pObj->Sel = NewSel;
   \   00000080   B069C8E1           STRH     R6,[R8, #+144]
   1428                GUI_UNLOCK_H(pObj);
   \   00000084   ........           BL       GUI_ALLOC_UnlockH
   1429                if (_UpdateScrollPos(hObj)) {
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       _UpdateScrollPos
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0300000A           BEQ      ??LISTBOX_SetSel_3
   1430                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           BL       WM_GetInsideRectExScrollbar
   \   000000A4   3C0000EA           B        ??LISTBOX_SetSel_4
   1431                } else {
   1432                  LISTBOX__InvalidateItem(hObj, OldSel);
   \                     ??LISTBOX_SetSel_3:
   \   000000A8   000057E3           CMP      R7,#+0
   \   000000AC   1D00004A           BMI      ??LISTBOX_SetSel_5
   \   000000B0   0710A0E1           MOV      R1,R7
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   ........           BL       _GetItemPosY
   \   000000BC   0080B0E1           MOVS     R8,R0
   \   000000C0   1800004A           BMI      ??LISTBOX_SetSel_5
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   409090E5           LDR      R9,[R0, #+64]
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   \   000000D4   0910A0E1           MOV      R1,R9
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           BL       _GetItemPosY
   \   000000E0   0090A0E1           MOV      R9,R0
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   ........           BL       _GetItemSizeY
   \   000000F0   0070A0E1           MOV      R7,R0
   \   000000F4   0D10A0E1           MOV      R1,SP
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   ........           BL       WM_GetInsideRectExScrollbar
   \   00000100   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000104   0D10A0E1           MOV      R1,SP
   \   00000108   000088E0           ADD      R0,R8,R0
   \   0000010C   090040E0           SUB      R0,R0,R9
   \   00000110   B200CDE1           STRH     R0,[SP, #+2]
   \   00000114   000087E0           ADD      R0,R7,R0
   \   00000118   010040E2           SUB      R0,R0,#+1
   \   0000011C   B600CDE1           STRH     R0,[SP, #+6]
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           BL       WM_InvalidateRect
   1433                  LISTBOX__InvalidateItem(hObj, NewSel);
   \                     ??LISTBOX_SetSel_5:
   \   00000128   000056E3           CMP      R6,#+0
   \   0000012C   1D00004A           BMI      ??LISTBOX_SetSel_6
   \   00000130   0610A0E1           MOV      R1,R6
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   ........           BL       _GetItemPosY
   \   0000013C   0070B0E1           MOVS     R7,R0
   \   00000140   1800004A           BMI      ??LISTBOX_SetSel_6
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           BL       GUI_ALLOC_LockH
   \   0000014C   408090E5           LDR      R8,[R0, #+64]
   \   00000150   ........           BL       GUI_ALLOC_UnlockH
   \   00000154   0810A0E1           MOV      R1,R8
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           BL       _GetItemPosY
   \   00000160   0080A0E1           MOV      R8,R0
   \   00000164   0610A0E1           MOV      R1,R6
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       _GetItemSizeY
   \   00000170   0060A0E1           MOV      R6,R0
   \   00000174   0D10A0E1           MOV      R1,SP
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   ........           BL       WM_GetInsideRectExScrollbar
   \   00000180   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000184   000087E0           ADD      R0,R7,R0
   \   00000188   080040E0           SUB      R0,R0,R8
   \   0000018C   B200CDE1           STRH     R0,[SP, #+2]
   \   00000190   000086E0           ADD      R0,R6,R0
   \   00000194   010040E2           SUB      R0,R0,#+1
   \   00000198   B600CDE1           STRH     R0,[SP, #+6]
   \                     ??LISTBOX_SetSel_4:
   \   0000019C   0D10A0E1           MOV      R1,SP
   \   000001A0   0500A0E1           MOV      R0,R5
   \   000001A4   ........           BL       WM_InvalidateRect
   1434                }
   1435                _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \                     ??LISTBOX_SetSel_6:
   \   000001A8   08008DE2           ADD      R0,SP,#+8
   \   000001AC   0010A0E3           MOV      R1,#+0
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0030A0E3           MOV      R3,#+0
   \   000001B8   00C0A0E3           MOV      R12,#+0
   \   000001BC   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   ........           BL       GUI_ALLOC_LockH
   \   000001C8   8C6090E5           LDR      R6,[R0, #+140]
   \   000001CC   000056E3           CMP      R6,#+0
   \   000001D0   0200001A           BNE      ??LISTBOX_SetSel_7
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   ........           BL       WM_GetParent
   \   000001DC   0060A0E1           MOV      R6,R0
   \                     ??LISTBOX_SetSel_7:
   \   000001E0   2610A0E3           MOV      R1,#+38
   \   000001E4   08108DE5           STR      R1,[SP, #+8]
   \   000001E8   0410A0E3           MOV      R1,#+4
   \   000001EC   14108DE5           STR      R1,[SP, #+20]
   \   000001F0   10508DE5           STR      R5,[SP, #+16]
   \   000001F4   ........           BL       GUI_ALLOC_UnlockH
   \   000001F8   08108DE2           ADD      R1,SP,#+8
   \   000001FC   0600A0E1           MOV      R0,R6
   \   00000200   ........           BL       WM__SendMessage
   1436              } else {
   \   00000204   000000EA           B        ??LISTBOX_SetSel_8
   1437                GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_SetSel_2:
   \   00000208   ........           BL       GUI_ALLOC_UnlockH
   1438              }
   1439              WM_UNLOCK();
   \                     ??LISTBOX_SetSel_8:
   \   0000020C   ........           BL       GUI_Unlock
   1440            }
   1441          }
   \                     ??LISTBOX_SetSel_0:
   \   00000210   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000214   E083BDE8           POP      {R5-R9,PC}       ;; return
   1442          
   1443          /*********************************************************************
   1444          *
   1445          *       LISTBOX_GetSel
   1446          */

   \                                 In section .text, align 4, keep-with-next
   1447          int  LISTBOX_GetSel (LISTBOX_Handle hObj) {
   \                     LISTBOX_GetSel:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1448            int r = -1;
   \   0000000C   0050E0E3           MVN      R5,#+0
   1449            LISTBOX_Obj * pObj;
   1450            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTBOX_GetSel_0
   1451              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1452              pObj = LISTBOX_LOCK_H(hObj);
   1453              r = pObj->Sel;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   F059D0E1           LDRSH    R5,[R0, #+144]
   1454              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1455              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1456            }
   1457            return r;
   \                     ??LISTBOX_GetSel_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1458          }
   1459          
   1460          /*********************************************************************
   1461          *
   1462          *       LISTBOX_IncSel
   1463          */

   \                                 In section .text, align 4, keep-with-next
   1464          void LISTBOX_IncSel      (LISTBOX_Handle hObj) {
   \                     LISTBOX_IncSel:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   1465            if (hObj) {
   \   00000008   0400000A           BEQ      ??LISTBOX_IncSel_0
   1466              WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
   1467              _MoveSel(hObj, 1);
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       _MoveSel
   1468              WM_UNLOCK();
   \   0000001C   ........           BL       GUI_Unlock
   1469            }
   1470          }
   \                     ??LISTBOX_IncSel_0:
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
   1471          
   1472          /*********************************************************************
   1473          *
   1474          *       LISTBOX_DecSel
   1475          */

   \                                 In section .text, align 4, keep-with-next
   1476          void LISTBOX_DecSel      (LISTBOX_Handle hObj) {
   \                     LISTBOX_DecSel:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   1477            if (hObj) {
   \   00000008   0400000A           BEQ      ??LISTBOX_DecSel_0
   1478              WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
   1479              _MoveSel(hObj, -1);
   \   00000010   0010E0E3           MVN      R1,#+0
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       _MoveSel
   1480              WM_UNLOCK();
   \   0000001C   ........           BL       GUI_Unlock
   1481            }
   1482          }
   \                     ??LISTBOX_DecSel_0:
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     LISTBOX_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     LISTBOX_DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     LISTBOX_OwnerDraw

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0}>`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   00000000           DC16 0, 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   1483          
   1484          #else                            /* Avoid problems with empty object modules */
   1485            void LISTBOX_C(void) {}
   1486          #endif
   1487          
   1488          /*************************** End of file ****************************/
   1489          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     LISTBOX_AddKey                     16
     LISTBOX_AddString                  48
     LISTBOX_Callback                   88
     LISTBOX_CreateEx                   56
     LISTBOX_DecSel                      8
     LISTBOX_GetSel                     16
     LISTBOX_IncSel                      8
     LISTBOX_InvalidateItem             40
     LISTBOX_OwnerDraw                  56
     LISTBOX_SetSel                     56
     LISTBOX_SetText                    16
     LISTBOX_UpdateScrollers             8
     LISTBOX__AddSize                   24
     LISTBOX__GetNumItems                8
     LISTBOX__GetpStringLocked          16
     LISTBOX__InvalidateInsideArea      16
     LISTBOX__InvalidateItem            32
     LISTBOX__InvalidateItemAndBelow
                                        24
     LISTBOX__InvalidateItemSize         8
     LISTBOX__SetScrollbarColor         24
     LISTBOX__SetScrollbarWidth         16
     _AddKey                            40
     _CalcScrollParas                   48
     _GetContentsSizeX                  72
     _GetItemPosY                       24
     _GetItemSizeY                      56
     _ManageAutoScroll                  40
     _MoveSel                           40
     _OnMouseOver                       48
     _OnPaint                           88
     _ToggleMultiSel                    48
     _UpdateScrollPos                   56


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     LISTBOX_DefaultProps             56
     _GetItemSizeY                   180
     _GetContentsSizeX               240
     _GetItemPosY                    212
     _UpdateScrollPos                308
     _CalcScrollParas                232
     _ManageAutoScroll               496
     LISTBOX_UpdateScrollers          24
     _OnPaint                        388
     _ToggleMultiSel                 324
     _OnMouseOver                    420
     _MoveSel                        268
     _AddKey                         516
     LISTBOX__GetNumItems              8
     LISTBOX__GetpStringLocked        60
     LISTBOX__InvalidateItemSize      44
     LISTBOX__InvalidateInsideArea    40
     LISTBOX__InvalidateItem         140
     LISTBOX__InvalidateItemAndBelow
                                     104
     LISTBOX__SetScrollbarWidth       88
     LISTBOX__SetScrollbarColor      120
     LISTBOX__AddSize                 84
     LISTBOX_OwnerDraw               776
     LISTBOX_Callback               1324
     LISTBOX_CreateEx                264
     LISTBOX_InvalidateItem          348
     LISTBOX_AddKey                   56
     LISTBOX_AddString               420
     LISTBOX_SetText                  84
     LISTBOX_SetSel                  536
     LISTBOX_GetSel                   56
     LISTBOX_IncSel                   36
     LISTBOX_DecSel                   36
     ??DataTable3                      4
     ??DataTable3_1                    4
     ??DataTable3_2                    4
     ??DataTable3_3                    4
     ?<Constant {0}>                  16
     ?<Constant {0, 0}>               12

 
    56 bytes in section .data
    28 bytes in section .rodata
 8 248 bytes in section .text
 
 8 248 bytes of CODE  memory
    28 bytes of CONST memory
    56 bytes of DATA  memory

Errors: none
Warnings: none
