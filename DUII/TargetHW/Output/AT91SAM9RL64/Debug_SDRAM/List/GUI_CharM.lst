###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_CharM.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_CharM.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_CharM.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _CharM.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_CharM.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICharM.C
     19          Purpose     : Implementation of monospaced fonts
     20          ----------------------------------------------------------------------
     21          Version-Date---Author-Explanation
     22          ----------------------------------------------------------------------
     23          */
     24          
     25          #include "GUI_Private.h"
     26           
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUIMONO_DispChar
     36          *
     37          * Purpose:
     38          *   This is the routine that displays a character. It is used by all
     39          *   other routines which display characters as a subroutine.
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void GUIMONO_DispChar(U16P c) {
   \                     GUIMONO_DispChar:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     42            int c0, c1;
     43            const unsigned char GUI_UNI_PTR * pd;
     44            int x = GUI_Context.DispPosX;
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
     45            int y = GUI_Context.DispPosY;
     46            /* do some checking if drawing is actually necessary ... */
     47            const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
   \   0000000C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000010   F252D4E1           LDRSH    R5,[R4, #+34]
   \   00000014   1C7091E5           LDR      R7,[R1, #+28]
   \   00000018   F462D4E1           LDRSH    R6,[R4, #+36]
     48            unsigned int FirstChar = pMono->FirstChar;
   \   0000001C   BC20D7E1           LDRH     R2,[R7, #+12]
     49            /* translate character into 2 characters to display : c0,c1 */
     50            /* Check if regular character first. */
     51            if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
   \   00000020   020050E1           CMP      R0,R2
   \   00000024   BE30D721           LDRHCS   R3,[R7, #+14]
   \   00000028   00005321           CMPCS    R3,R0
   \   0000002C   0400003A           BCC      ??GUIMONO_DispChar_0
     52              pd = pMono->pData;
   \   00000030   00C097E5           LDR      R12,[R7, #+0]
     53              c0 = ((int)c) - FirstChar;
   \   00000034   028040E0           SUB      R8,R0,R2
   \   00000038   1CC08DE5           STR      R12,[SP, #+28]
     54              c1 = -1;
   \   0000003C   0090E0E3           MVN      R9,#+0
   \   00000040   100000EA           B        ??GUIMONO_DispChar_1
     55            } else {
     56              /* Check if character is in translation table */
     57              GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti = pMono->pTrans;
   \                     ??GUIMONO_DispChar_0:
   \   00000044   082097E5           LDR      R2,[R7, #+8]
     58              pd = pMono->pTransData;
   \   00000048   043097E5           LDR      R3,[R7, #+4]
     59              if (pti) {
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   1C308DE5           STR      R3,[SP, #+28]
   \   00000054   5A00000A           BEQ      ??GUIMONO_DispChar_2
     60                FirstChar = pti->FirstChar;
     61                if ((c >= (U16P)FirstChar) && (c <= (U16P)pti->LastChar)) {
   \   00000058   B030D2E1           LDRH     R3,[R2, #+0]
   \   0000005C   030050E1           CMP      R0,R3
   \   00000060   B2C0D221           LDRHCS   R12,[R2, #+2]
   \   00000064   00005C21           CMPCS    R12,R0
   \   00000068   5500003A           BCC      ??GUIMONO_DispChar_2
     62                  GUI_FONT_TRANSLIST const GUI_UNI_PTR * ptl;
     63                  c -= pti->FirstChar;
     64                  ptl = pti->pList;
     65                  ptl += c;
   \   0000006C   030040E0           SUB      R0,R0,R3
   \   00000070   0008A0E1           LSL      R0,R0,#+16
   \   00000074   042092E5           LDR      R2,[R2, #+4]
   \   00000078   2008A0E1           LSR      R0,R0,#+16
   \   0000007C   000182E0           ADD      R0,R2,R0, LSL #+2
     66                  c0  = ptl->c0;
   \   00000080   F080D0E1           LDRSH    R8,[R0, #+0]
     67                  c1  = ptl->c1;
   \   00000084   F290D0E1           LDRSH    R9,[R0, #+2]
   \                     ??GUIMONO_DispChar_1:
   \   00000088   010078E3           CMN      R8,#+1
   \   0000008C   4C00000A           BEQ      ??GUIMONO_DispChar_2
   \   00000090   1800D1E5           LDRB     R0,[R1, #+24]
   \   00000094   1210D7E5           LDRB     R1,[R7, #+18]
     68                } else {
     69                  c0 = c1 = -1;
     70                }
     71              } else {
     72                c0 = c1 = -1;
     73              }
     74            }
     75            /* Draw first character if it is valid */
     76            if (c0!=-1) {
     77              int BytesPerChar = GUI_Context.pAFont->YSize*pMono->BytesPerLine;
     78              GUI_DRAWMODE DrawMode;
     79              int XSize = pMono->XSize;
     80              int YSize = GUI_Context.pAFont->YSize;
     81              /* Select the right drawing mode */
     82              DrawMode = GUI_Context.TextMode;
   \   00000098   FAB2D4E1           LDRSH    R11,[R4, #+42]
   \   0000009C   810062E1           SMULBB   R2,R1,R0
   \   000000A0   24208DE5           STR      R2,[SP, #+36]
   \   000000A4   10A0D7E5           LDRB     R10,[R7, #+16]
   \   000000A8   20008DE5           STR      R0,[SP, #+32]
     83              /* call drawing routine */
     84              {
     85                U8 OldMode = LCD_SetDrawMode(DrawMode);
   \   000000AC   0B00A0E1           MOV      R0,R11
   \   000000B0   ........           BL       LCD_SetDrawMode
     86                LCD_DrawBitmap( x, y,
     87                                   XSize, YSize,
     88                                   GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
     89                                   1,     /* Bits per Pixel */
     90                                   pMono->BytesPerLine,
     91                                   pd + c0* BytesPerChar,
     92                                   LCD_pBkColorIndex
     93                                   );
   \   000000B4   ........           LDR      R1,??DataTable1_1
   \   000000B8   1C209DE5           LDR      R2,[SP, #+28]
   \   000000BC   001091E5           LDR      R1,[R1, #+0]
   \   000000C0   1800CDE5           STRB     R0,[SP, #+24]
   \   000000C4   14108DE5           STR      R1,[SP, #+20]
   \   000000C8   24109DE5           LDR      R1,[SP, #+36]
   \   000000CC   1C0094E5           LDR      R0,[R4, #+28]
   \   000000D0   912822E0           MLA      R2,R1,R8,R2
   \   000000D4   20309DE5           LDR      R3,[SP, #+32]
   \   000000D8   10208DE5           STR      R2,[SP, #+16]
   \   000000DC   1210D7E5           LDRB     R1,[R7, #+18]
   \   000000E0   0A20A0E1           MOV      R2,R10
   \   000000E4   0C108DE5           STR      R1,[SP, #+12]
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   08108DE5           STR      R1,[SP, #+8]
   \   000000F0   1B10D0E5           LDRB     R1,[R0, #+27]
   \   000000F4   04108DE5           STR      R1,[SP, #+4]
   \   000000F8   1A00D0E5           LDRB     R0,[R0, #+26]
   \   000000FC   0610A0E1           MOV      R1,R6
   \   00000100   00008DE5           STR      R0,[SP, #+0]
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           BL       LCD_DrawBitmap
     94                if (c1 != -1) {
   \   0000010C   010079E3           CMN      R9,#+1
   \   00000110   1600000A           BEQ      ??GUIMONO_DispChar_3
     95                  LCD_SetDrawMode(DrawMode | LCD_DRAWMODE_TRANS);
   \   00000114   02008BE3           ORR      R0,R11,#0x2
   \   00000118   ........           BL       LCD_SetDrawMode
     96                  LCD_DrawBitmap( x, y,
     97                                     XSize, YSize,
     98                                     GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
     99                                     1,     /* Bits per Pixel */
    100                                     pMono->BytesPerLine,
    101                                     pd + c1* BytesPerChar,
    102                                     LCD_pBkColorIndex
    103                                     );
   \   0000011C   ........           LDR      R1,??DataTable1_1
   \   00000120   1C209DE5           LDR      R2,[SP, #+28]
   \   00000124   001091E5           LDR      R1,[R1, #+0]
   \   00000128   1C0094E5           LDR      R0,[R4, #+28]
   \   0000012C   14108DE5           STR      R1,[SP, #+20]
   \   00000130   24109DE5           LDR      R1,[SP, #+36]
   \   00000134   20309DE5           LDR      R3,[SP, #+32]
   \   00000138   912922E0           MLA      R2,R1,R9,R2
   \   0000013C   10208DE5           STR      R2,[SP, #+16]
   \   00000140   1210D7E5           LDRB     R1,[R7, #+18]
   \   00000144   0A20A0E1           MOV      R2,R10
   \   00000148   0C108DE5           STR      R1,[SP, #+12]
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   08108DE5           STR      R1,[SP, #+8]
   \   00000154   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000158   04108DE5           STR      R1,[SP, #+4]
   \   0000015C   1A00D0E5           LDRB     R0,[R0, #+26]
   \   00000160   0610A0E1           MOV      R1,R6
   \   00000164   00008DE5           STR      R0,[SP, #+0]
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       LCD_DrawBitmap
    104                }
    105                /* Fill empty pixel lines */
    106                if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \                     ??GUIMONO_DispChar_3:
   \   00000170   1C0094E5           LDR      R0,[R4, #+28]
   \   00000174   1810D0E5           LDRB     R1,[R0, #+24]
   \   00000178   1900D0E5           LDRB     R0,[R0, #+25]
   \   0000017C   000051E1           CMP      R1,R0
   \   00000180   0D00002A           BCS      ??GUIMONO_DispChar_4
    107                  if (DrawMode != LCD_DRAWMODE_TRANS) {
   \   00000184   02005BE3           CMP      R11,#+2
   \   00000188   0B00000A           BEQ      ??GUIMONO_DispChar_4
    108                    LCD_SetDrawMode(DrawMode ^ LCD_DRAWMODE_REV);  /* Reverse so we can fill with BkColor */
   \   0000018C   04002BE2           EOR      R0,R11,#0x4
   \   00000190   ........           BL       LCD_SetDrawMode
    109                    LCD_FillRect(x, 
    110                                 y + GUI_Context.pAFont->YSize * GUI_Context.pAFont->YMag,
    111                                 x + XSize * GUI_Context.pAFont->XMag, 
    112                                 y + GUI_Context.pAFont->YDist);
   \   00000194   1C0094E5           LDR      R0,[R4, #+28]
   \   00000198   1910D0E5           LDRB     R1,[R0, #+25]
   \   0000019C   063081E0           ADD      R3,R1,R6
   \   000001A0   1A10D0E5           LDRB     R1,[R0, #+26]
   \   000001A4   815A02E1           SMLABB   R2,R1,R10,R5
   \   000001A8   1810D0E5           LDRB     R1,[R0, #+24]
   \   000001AC   1B00D0E5           LDRB     R0,[R0, #+27]
   \   000001B0   806101E1           SMLABB   R1,R0,R1,R6
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   ........           BL       LCD_FillRect
    113                  }
    114                }
    115                LCD_SetDrawMode(OldMode);
   \                     ??GUIMONO_DispChar_4:
   \   000001BC   1800DDE5           LDRB     R0,[SP, #+24]
   \   000001C0   ........           BL       LCD_SetDrawMode
    116              } 
    117            }
    118            GUI_Context.DispPosX+=pMono->XDist;
   \                     ??GUIMONO_DispChar_2:
   \   000001C4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000001C8   1110D7E5           LDRB     R1,[R7, #+17]
    119          }
   \   000001CC   2CD08DE2           ADD      SP,SP,#+44
   \   000001D0   000081E0           ADD      R0,R1,R0
   \   000001D4   B202C4E1           STRH     R0,[R4, #+34]
   \   000001D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    120          
    121          /*********************************************************************
    122          *
    123          *       GUIMONO_GetCharDistX
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          int GUIMONO_GetCharDistX(U16P c) {
    126            const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
    127            GUI_USE_PARA(c);
    128            return pMono->XDist;
   \                     GUIMONO_GetCharDistX:
   \   00000000   ........           LDR      R0,??DataTable1
   \   00000004   1C0090E5           LDR      R0,[R0, #+28]
   \   00000008   1C0090E5           LDR      R0,[R0, #+28]
   \   0000000C   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000010   1EFF2FE1           BX       LR               ;; return
    129          }
    130          
    131          /*********************************************************************
    132          *
    133          *       GUIMONO_GetFontInfo
    134          */

   \                                 In section .text, align 4, keep-with-next
    135          void GUIMONO_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
    136            GUI_USE_PARA(pFont);
    137            pfi->Flags = GUI_FONTINFO_FLAG_MONO;
   \                     GUIMONO_GetFontInfo:
   \   00000000   0200A0E3           MOV      R0,#+2
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    138          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    139          
    140          /*********************************************************************
    141          *
    142          *       GUIMONO_IsInFont
    143          */

   \                                 In section .text, align 4, keep-with-next
    144          char GUIMONO_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
    145            const GUI_FONT_MONO GUI_UNI_PTR * pMono = pFont->p.pMono;
   \                     GUIMONO_IsInFont:
   \   00000000   1C0090E5           LDR      R0,[R0, #+28]
    146            unsigned int FirstChar = pMono->FirstChar;
    147            /* Check if regular character first. */
    148            if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
   \   00000004   BC20D0E1           LDRH     R2,[R0, #+12]
   \   00000008   020051E1           CMP      R1,R2
   \   0000000C   BE20D021           LDRHCS   R2,[R0, #+14]
   \   00000010   01005221           CMPCS    R2,R1
   \   00000014   0100003A           BCC      ??GUIMONO_IsInFont_0
    149              return 1;  /* Yes, we have it ! */
   \                     ??GUIMONO_IsInFont_1:
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   1EFF2FE1           BX       LR
    150            } else {
    151             /* Check if character is in translation table */
    152              GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti;
    153              pti = pMono->pTrans;
   \                     ??GUIMONO_IsInFont_0:
   \   00000020   080090E5           LDR      R0,[R0, #+8]
    154              if (pti) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0C00000A           BEQ      ??GUIMONO_IsInFont_2
    155                if ((c >= pti->FirstChar) && (c <= pti->LastChar)) {
   \   0000002C   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000030   020051E1           CMP      R1,R2
   \   00000034   B230D021           LDRHCS   R3,[R0, #+2]
   \   00000038   01005321           CMPCS    R3,R1
   \   0000003C   0600003A           BCC      ??GUIMONO_IsInFont_3
    156                  const GUI_FONT_TRANSLIST GUI_UNI_PTR * pList;
    157                  pList = pti->pList + c - pti->FirstChar;
    158                  if (pList->c0 >= 0) {
   \   00000040   040090E5           LDR      R0,[R0, #+4]
   \   00000044   0221A0E1           LSL      R2,R2,#+2
   \   00000048   002062E2           RSB      R2,R2,#+0
   \   0000004C   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000050   F00092E1           LDRSH    R0,[R2, +R0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   EEFFFF5A           BPL      ??GUIMONO_IsInFont_1
    159                    return 1;  /* Yes, we have it ! */
    160                  }
    161                }
    162              }
    163            }
    164            return 0;  /* No, we can not display this character */
   \                     ??GUIMONO_IsInFont_3:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \                     ??GUIMONO_IsInFont_2:
   \   00000060   1EFF2FE1           BX       LR               ;; return
    165          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    166          
    167          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUIMONO_DispChar         80
     GUIMONO_GetCharDistX      0
     GUIMONO_GetFontInfo       0
     GUIMONO_IsInFont          0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     GUIMONO_DispChar      476
     GUIMONO_GetCharDistX   20
     GUIMONO_GetFontInfo    12
     GUIMONO_IsInFont      100
     ??DataTable1            4
     ??DataTable1_1          4

 
 616 bytes in section .text
 
 616 bytes of CODE memory

Errors: none
Warnings: none
