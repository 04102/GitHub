###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:31 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveAlpha.c         #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveAlpha.c -D      #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_WriteToActiveAlpha.lst                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_WriteToActiveAlpha.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveAlpha.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV__WriteToActiveAlpha.c
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29            #include "WM.h"
     30          #endif
     31          
     32          //
     33          // Memory device capabilities are compiled only if support for them is enabled.
     34          //
     35          #if GUI_SUPPORT_MEMDEV
     36          
     37          /*********************************************************************
     38          *
     39          *       Static data
     40          *
     41          **********************************************************************
     42          */
     43          static U32 * pCurrent; // Buffer for background
     44          static U32 * pConvert; // Buffer for result
     45          
     46          /*********************************************************************
     47          *
     48          *       Static code
     49          *
     50          **********************************************************************
     51          */
     52          /*********************************************************************
     53          *
     54          *       _DoAlphaBlending
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          static void _DoAlphaBlending(int x, int y, int yOff, GUI_MEMDEV_Handle hMem, int xSize, int ConversionRequired, tLCDDEV_Index2Color * pfIndex2Color) {
   \                     _DoAlphaBlending:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   00B0A0E1           MOV      R11,R0
   \   0000000C   48609DE5           LDR      R6,[SP, #+72]
     57            U32 * pData;
     58            U32 Color;
     59            U8 Alpha;
     60            int BitsPerPixelCurrent, x0, Off, xOff, xSizeOrg;
     61            int Read = 0;
     62            int Index = 0;
     63            static int VXSizeMax;
     64            GUI_DEVICE * pDevice;
     65          
     66            GUI_USE_PARA(ConversionRequired);
     67            pData = (U32 *)GUI_MEMDEV_GetDataPtr(hMem) + xSize * yOff;
   \   00000010   1C009DE5           LDR      R0,[SP, #+28]
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   900605E0           MUL      R5,R0,R6
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0040A0E3           MOV      R4,#+0
   \   00000024   20009DE5           LDR      R0,[SP, #+32]
   \   00000028   ........           BL       GUI_MEMDEV_GetDataPtr
   \   0000002C   05A180E0           ADD      R10,R0,R5, LSL #+2
     68            //
     69            // Allocate destination buffer
     70            //
     71            if (pConvert == NULL) {
   \   00000030   ........           LDR      R5,??DataTable1
   \   00000034   040095E5           LDR      R0,[R5, #+4]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0400001A           BNE      ??_DoAlphaBlending_0
     72              VXSizeMax = LCD_GetVXSizeMax();
   \   00000040   ........           BL       LCD_GetVXSizeMax
   \   00000044   080085E5           STR      R0,[R5, #+8]
     73              pConvert  = (U32 *)GUI_ALLOC_GetFixedBlock(VXSizeMax << 2);
   \   00000048   0001A0E1           LSL      R0,R0,#+2
   \   0000004C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000050   040085E5           STR      R0,[R5, #+4]
     74            }
     75            if (xSize > VXSizeMax) {
   \                     ??_DoAlphaBlending_0:
   \   00000054   080095E5           LDR      R0,[R5, #+8]
     76              xSize = VXSizeMax;
     77            }
     78            xSizeOrg = xSize;
   \   00000058   ........           LDR      R1,??DataTable1_1
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   0060A0B1           MOVLT    R6,R0
   \   00000064   ........           LDR      R0,??DataTable1_1
   \   00000068   0C608DE5           STR      R6,[SP, #+12]
   \   0000006C   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000070   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000074   480090E5           LDR      R0,[R0, #+72]
   \   00000078   14008DE5           STR      R0,[SP, #+20]
     79            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
     80            BitsPerPixelCurrent = LCD_GetBitsPerPixel();
   \   0000007C   ........           BL       LCD_GetBitsPerPixel
     81            xOff = 0;
   \   00000080   0C109DE5           LDR      R1,[SP, #+12]
   \   00000084   08008DE5           STR      R0,[SP, #+8]
   \   00000088   0B1081E0           ADD      R1,R1,R11
   \   0000008C   0080A0E3           MOV      R8,#+0
   \   00000090   10108DE5           STR      R1,[SP, #+16]
     82            do {
     83              Color = *pData++;
   \                     ??_DoAlphaBlending_1:
   \   00000094   04709AE4           LDR      R7,[R10], #+4
     84              xOff++;
   \   00000098   018088E2           ADD      R8,R8,#+1
     85              Alpha = Color >> 24;
   \   0000009C   279CB0E1           LSRS     R9,R7,#+24
     86              if (Alpha) {
   \   000000A0   3B00000A           BEQ      ??_DoAlphaBlending_2
     87                //
     88                // Allocate background buffer
     89                //
     90                if (pCurrent == NULL) {
   \   000000A4   000095E5           LDR      R0,[R5, #+0]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0A00001A           BNE      ??_DoAlphaBlending_3
     91                  pCurrent = (U32 *)GUI_ALLOC_GetFixedBlock(VXSizeMax << 2);
   \   000000B0   080095E5           LDR      R0,[R5, #+8]
   \   000000B4   0001A0E1           LSL      R0,R0,#+2
   \   000000B8   ........           BL       GUI_ALLOC_GetFixedBlock
   \   000000BC   000085E5           STR      R0,[R5, #+0]
     92                  pData = (U32 *)GUI_MEMDEV_GetDataPtr(hMem) + (xSizeOrg * yOff) + xOff;
   \   000000C0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000C4   1C109DE5           LDR      R1,[SP, #+28]
   \   000000C8   91000AE0           MUL      R10,R1,R0
   \   000000CC   20009DE5           LDR      R0,[SP, #+32]
   \   000000D0   ........           BL       GUI_MEMDEV_GetDataPtr
   \   000000D4   0A0180E0           ADD      R0,R0,R10, LSL #+2
   \   000000D8   08A180E0           ADD      R10,R0,R8, LSL #+2
     93                }
     94                //
     95                // Read background data of whole line if not already done
     96                //
     97                if (Read == 0) {
   \                     ??_DoAlphaBlending_3:
   \   000000DC   00009DE5           LDR      R0,[SP, #+0]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   1C00001A           BNE      ??_DoAlphaBlending_4
     98                  x0 = x + Index;
     99                  if (GUI_Context.ClipRect.x0 > x0) { 
   \   000000E8   ........           LDR      R1,??DataTable1_1
   \   000000EC   0B00A0E1           MOV      R0,R11
   \   000000F0   F820D1E1           LDRSH    R2,[R1, #+8]
    100                    Off = GUI_Context.ClipRect.x0 - x0;
    101                    x0  = GUI_Context.ClipRect.x0;
    102                  } else {
    103                    Off = 0;
    104                  }
    105                  GUI_ReadRectEx(x0, y, x + xSizeOrg - 1, y, pCurrent + Index + Off, pDevice);
   \   000000F4   18309DE5           LDR      R3,[SP, #+24]
   \   000000F8   020050E1           CMP      R0,R2
   \   000000FC   001042B0           SUBLT    R1,R2,R0
   \   00000100   0200A0B1           MOVLT    R0,R2
   \   00000104   14209DE5           LDR      R2,[SP, #+20]
   \   00000108   0010A0A3           MOVGE    R1,#+0
   \   0000010C   04208DE5           STR      R2,[SP, #+4]
   \   00000110   002095E5           LDR      R2,[R5, #+0]
   \   00000114   042182E0           ADD      R2,R2,R4, LSL #+2
   \   00000118   011182E0           ADD      R1,R2,R1, LSL #+2
   \   0000011C   00108DE5           STR      R1,[SP, #+0]
   \   00000120   10109DE5           LDR      R1,[SP, #+16]
   \   00000124   012041E2           SUB      R2,R1,#+1
   \   00000128   0310A0E1           MOV      R1,R3
   \   0000012C   ........           BL       GUI_ReadRectEx
    106                  Read = 1;
    107                  //if (ConversionRequired) {
    108                  if (BitsPerPixelCurrent < 24) {
   \   00000130   08009DE5           LDR      R0,[SP, #+8]
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   00108DE5           STR      R1,[SP, #+0]
   \   0000013C   180050E3           CMP      R0,#+24
   \   00000140   050000AA           BGE      ??_DoAlphaBlending_4
    109                    GUI__ExpandPixelIndicesEx(pCurrent + Index, xSize, BitsPerPixelCurrent, pfIndex2Color);
   \   00000144   0020A0E1           MOV      R2,R0
   \   00000148   000095E5           LDR      R0,[R5, #+0]
   \   0000014C   50309DE5           LDR      R3,[SP, #+80]
   \   00000150   0610A0E1           MOV      R1,R6
   \   00000154   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000158   ........           BL       GUI__ExpandPixelIndicesEx
    110                  }
    111                }
    112                if (Alpha == 255) {
   \                     ??_DoAlphaBlending_4:
   \   0000015C   000095E5           LDR      R0,[R5, #+0]
   \   00000160   FF0059E3           CMP      R9,#+255
   \   00000164   0300001A           BNE      ??_DoAlphaBlending_5
    113                  //
    114                  // Use background
    115                  //
    116                  *(pConvert + Index) = *(pCurrent + Index);
   \   00000168   041095E5           LDR      R1,[R5, #+4]
   \   0000016C   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \                     ??_DoAlphaBlending_6:
   \   00000170   040181E7           STR      R0,[R1, +R4, LSL #+2]
   \   00000174   080000EA           B        ??_DoAlphaBlending_7
    117                } else {
    118                  //
    119                  // Mix colors
    120                  //
    121                  *(pConvert + Index) = GUI__MixColors(Color, *(pCurrent + Index), 255 - Alpha);
   \                     ??_DoAlphaBlending_5:
   \   00000178   FF2069E2           RSB      R2,R9,#+255
   \   0000017C   041190E7           LDR      R1,[R0, +R4, LSL #+2]
   \   00000180   FF2002E2           AND      R2,R2,#0xFF
   \   00000184   0700A0E1           MOV      R0,R7
   \   00000188   ........           BL       GUI__MixColors
   \   0000018C   041095E5           LDR      R1,[R5, #+4]
   \   00000190   F6FFFFEA           B        ??_DoAlphaBlending_6
    122                }
    123              } else {
    124                *(pConvert + Index) = Color;
   \                     ??_DoAlphaBlending_2:
   \   00000194   040095E5           LDR      R0,[R5, #+4]
   \   00000198   047180E7           STR      R7,[R0, +R4, LSL #+2]
    125              }
    126              Index++;
    127            } while (--xSize);
   \                     ??_DoAlphaBlending_7:
   \   0000019C   016046E2           SUB      R6,R6,#+1
   \   000001A0   014084E2           ADD      R4,R4,#+1
   \   000001A4   01B08BE2           ADD      R11,R11,#+1
   \   000001A8   000056E3           CMP      R6,#+0
   \   000001AC   B8FFFF1A           BNE      ??_DoAlphaBlending_1
    128          }
   \   000001B0   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000001B4   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 4
   \                     pCurrent:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
    129          
    130          /*********************************************************************
    131          *
    132          *       Private code
    133          *
    134          **********************************************************************
    135          */
    136          /*********************************************************************
    137          *
    138          *       GUI_MEMDEV__WriteToActiveAlpha
    139          */

   \                                 In section .text, align 4, keep-with-next
    140          void GUI_MEMDEV__WriteToActiveAlpha(GUI_MEMDEV_Handle hMem,int x, int y) {
   \                     GUI_MEMDEV__WriteToActiveAlpha:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    141            GUI_DEVICE          * pDevice;
    142            GUI_MEMDEV          * pDev;
    143            int                   ySizeDevice, xSizeDevice, i, ConversionRequired;
    144            unsigned              BitsPerPixel_DST;
    145            unsigned              BytesPerPixel_DST;
    146            tLCDDEV_Index2Color * pfIndex2Color_DEV;
    147            tLCDDEV_Index2Color * pfIndex2Color_DST;
    148            tLCDDEV_Color2Index * pfColor2Index_DST;
    149          
    150            //
    151            // Get memory device properties
    152            //
    153            pDev = (GUI_MEMDEV *)GUI_LOCK_H(hMem); {
   \   00000010   ........           BL       GUI_ALLOC_LockH
    154              xSizeDevice       = pDev->XSize;
   \   00000014   F860D0E1           LDRSH    R6,[R0, #+8]
    155              ySizeDevice       = pDev->YSize;
   \   00000018   FA70D0E1           LDRSH    R7,[R0, #+10]
    156              pfIndex2Color_DEV = pDev->pDevice->pColorConvAPI->pfIndex2Color;
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   100090E5           LDR      R0,[R0, #+16]
   \   00000024   049090E5           LDR      R9,[R0, #+4]
    157            } GUI_UNLOCK_H(pDev);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    158            //
    159            // Calculate bytes per pixel of current layer
    160            //
    161            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
   \   0000002C   ........           LDR      R10,??DataTable1_1
    162            BitsPerPixel_DST = pDevice->pDeviceAPI->pfGetDevProp(pDevice, LCD_DEVCAP_BITSPERPIXEL);
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   1100DAE5           LDRB     R0,[R10, #+17]
   \   00000038   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   0000003C   480090E5           LDR      R0,[R0, #+72]
   \   00000040   0C2090E5           LDR      R2,[R0, #+12]
   \   00000044   282092E5           LDR      R2,[R2, #+40]
   \   00000048   32FF2FE1           BLX      R2
   \   0000004C   0080A0E1           MOV      R8,R0
    163            if (BitsPerPixel_DST <= 8) {
   \   00000050   090058E3           CMP      R8,#+9
    164              BytesPerPixel_DST = 1;
   \   00000054   0110A033           MOVCC    R1,#+1
   \   00000058   0200003A           BCC      ??GUI_MEMDEV__WriteToActiveAlpha_0
    165            } else if (BitsPerPixel_DST <= 16) {
   \   0000005C   110058E3           CMP      R8,#+17
    166              BytesPerPixel_DST = 2;
   \   00000060   0210A033           MOVCC    R1,#+2
    167            } else {
    168              BytesPerPixel_DST = 4;
   \   00000064   0410A023           MOVCS    R1,#+4
   \                     ??GUI_MEMDEV__WriteToActiveAlpha_0:
   \   00000068   18108DE5           STR      R1,[SP, #+24]
    169            }
    170            //
    171            // Get API pointer of destination device
    172            //
    173            pfIndex2Color_DST = GUI_GetpfIndex2ColorEx(GUI_Context.SelLayer);
   \   0000006C   1100DAE5           LDRB     R0,[R10, #+17]
   \   00000070   ........           BL       GUI_GetpfIndex2ColorEx
   \   00000074   1C008DE5           STR      R0,[SP, #+28]
    174            pfColor2Index_DST = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   00000078   1100DAE5           LDRB     R0,[R10, #+17]
   \   0000007C   ........           BL       GUI_GetpfColor2IndexEx
   \   00000080   20008DE5           STR      R0,[SP, #+32]
    175            ConversionRequired = (pfIndex2Color_DEV == pfIndex2Color_DST) ? 0 : 1;
   \   00000084   1C009DE5           LDR      R0,[SP, #+28]
    176            //
    177            // Iterate over all lines
    178            //
    179            i = 0;
   \   00000088   00A0A0E3           MOV      R10,#+0
   \   0000008C   000059E1           CMP      R9,R0
   \   00000090   0090A003           MOVEQ    R9,#+0
   \   00000094   0190A013           MOVNE    R9,#+1
   \   00000098   ........           LDR      R11,??DataTable1
    180            do {
    181              //
    182              // Do alpha blending (if required)
    183              //
    184              _DoAlphaBlending(x, y, i++, hMem, xSizeDevice, ConversionRequired, pfIndex2Color_DST);
   \                     ??GUI_MEMDEV__WriteToActiveAlpha_1:
   \   0000009C   1C009DE5           LDR      R0,[SP, #+28]
   \   000000A0   04908DE5           STR      R9,[SP, #+4]
   \   000000A4   08008DE5           STR      R0,[SP, #+8]
   \   000000A8   00608DE5           STR      R6,[SP, #+0]
   \   000000AC   28309DE5           LDR      R3,[SP, #+40]
   \   000000B0   0A20A0E1           MOV      R2,R10
   \   000000B4   0510A0E1           MOV      R1,R5
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       _DoAlphaBlending
   \   000000C0   01A08AE2           ADD      R10,R10,#+1
    185              //
    186              // Compact result (if required)
    187              //
    188              if (ConversionRequired) {
   \   000000C4   000059E3           CMP      R9,#+0
   \   000000C8   0400000A           BEQ      ??GUI_MEMDEV__WriteToActiveAlpha_2
    189                GUI__CompactPixelIndicesEx(pConvert, xSizeDevice, BitsPerPixel_DST, pfColor2Index_DST);
   \   000000CC   20309DE5           LDR      R3,[SP, #+32]
   \   000000D0   0820A0E1           MOV      R2,R8
   \   000000D4   0610A0E1           MOV      R1,R6
   \   000000D8   04009BE5           LDR      R0,[R11, #+4]
   \   000000DC   ........           BL       GUI__CompactPixelIndicesEx
    190              }
    191              //
    192              // Draw result with current device
    193              //
    194              LCD_DrawBitmap(x, y++, xSizeDevice, 1, 1, 1, BytesPerPixel_DST << 3, 0, (U8 *)pConvert, NULL);
   \                     ??GUI_MEMDEV__WriteToActiveAlpha_2:
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   14008DE5           STR      R0,[SP, #+20]
   \   000000E8   04009BE5           LDR      R0,[R11, #+4]
   \   000000EC   0130A0E3           MOV      R3,#+1
   \   000000F0   10008DE5           STR      R0,[SP, #+16]
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   0C008DE5           STR      R0,[SP, #+12]
   \   000000FC   18009DE5           LDR      R0,[SP, #+24]
   \   00000100   0620A0E1           MOV      R2,R6
   \   00000104   8001A0E1           LSL      R0,R0,#+3
   \   00000108   08008DE5           STR      R0,[SP, #+8]
   \   0000010C   0100A0E3           MOV      R0,#+1
   \   00000110   04008DE5           STR      R0,[SP, #+4]
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   0510A0E1           MOV      R1,R5
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       LCD_DrawBitmap
   \   00000124   015085E2           ADD      R5,R5,#+1
    195            } while (--ySizeDevice);
   \   00000128   017057E2           SUBS     R7,R7,#+1
   \   0000012C   DAFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveAlpha_1
    196          }
   \   00000130   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000134   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     pCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     GUI_Context
    197          
    198          #else
    199          
    200          void GUIDEV__WriteToActiveAlpha(void);
    201          void GUIDEV__WriteToActiveAlpha(void) {}
    202          
    203          #endif /* GUI_SUPPORT_MEMDEV */
    204          
    205          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GUI_MEMDEV__WriteToActiveAlpha     80
     _DoAlphaBlending                   72


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _DoAlphaBlending                440
     pCurrent                         12
     pConvert
     VXSizeMax
     GUI_MEMDEV__WriteToActiveAlpha  312
     ??DataTable1                      4
     ??DataTable1_1                    4

 
  12 bytes in section .bss
 760 bytes in section .text
 
 760 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
