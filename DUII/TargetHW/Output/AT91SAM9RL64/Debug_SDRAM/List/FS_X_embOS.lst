###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Dec/2015  11:33:11 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_X_embOS.c                         #
#    Command line =  C:\DUII\TargetHW\FS\FS_X_embOS.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _X_embOS.lst                                             #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    X_embOS.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_X_embOS.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2009     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          ----------------------------------------------------------------------
     19          File        : FS_X_embOS.c
     20          Purpose     : embOS OS Layer for the file system
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          /*********************************************************************
     25          *
     26          *             #include Section
     27          *
     28          **********************************************************************
     29          */
     30          
     31          #include <stdio.h>
     32          #include "FS_Int.h"
     33          #include "FS_OS.h"
     34          
     35          #include "RTOS.h"
     36          
     37          /*********************************************************************
     38          *
     39          *       Static data
     40          *
     41          **********************************************************************
     42          */

   \                                 In section .bss, align 4
     43          static OS_RSEMA * _paSema;
   \                     _paSema:
   \   00000000                      DS8 4
   \   00000004                      DS8 1
   \   00000005                      DS8 3
   \   00000008                      DS8 8
     44          static char       _NumLocks;
     45          static OS_EVENT   _Event;
     46          /*********************************************************************
     47          *
     48          *       Public code
     49          *
     50          **********************************************************************
     51          */
     52          
     53          /*********************************************************************
     54          *
     55          *       FS_X_OS_Lock
     56          *
     57          */

   \                                 In section .text, align 4, keep-with-next
     58          void FS_X_OS_Lock(unsigned LockIndex) {
     59            OS_RSEMA * pSema;
     60          
     61            pSema = _paSema + LockIndex;
   \                     FS_X_OS_Lock:
   \   00000000   ........           LDR      R2,??DataTable6
   \   00000004   1410A0E3           MOV      R1,#+20
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   912020E0           MLA      R0,R1,R0,R2
     62            if (pSema) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000001A           BNE      ??FS_X_OS_Lock_0
     63              OS_Use(pSema);
   \   00000018   1EFF2FE1           BX       LR
     64            }
   \                     ??FS_X_OS_Lock_0:
   \   0000001C   00402DE9           PUSH     {LR}
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   ........           BL       OS_Use
     65          }
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   0080BDE8           POP      {PC}             ;; return
     66          
     67          /*********************************************************************
     68          *
     69          *       FS_X_OS_Unlock
     70          *
     71          */

   \                                 In section .text, align 4, keep-with-next
     72          void FS_X_OS_Unlock(unsigned LockIndex) {
     73            OS_RSEMA * pSema;
     74          
     75            pSema = _paSema + LockIndex;
   \                     FS_X_OS_Unlock:
   \   00000000   ........           LDR      R2,??DataTable6
   \   00000004   1410A0E3           MOV      R1,#+20
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   912020E0           MLA      R0,R1,R0,R2
     76            if (pSema) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000001A           BNE      ??FS_X_OS_Unlock_0
     77              OS_Unuse(pSema);
   \   00000018   1EFF2FE1           BX       LR
     78            }
   \                     ??FS_X_OS_Unlock_0:
   \   0000001C   00402DE9           PUSH     {LR}
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   ........           BL       OS_Unuse
     79          }
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   0080BDE8           POP      {PC}             ;; return
     80          
     81          /*********************************************************************
     82          *
     83          *       FS_X_OS_Init
     84          *
     85          *  Description:
     86          *    Initializes the OS resources. Specifically, you will need to
     87          *    create four binary semaphores. This function is called by
     88          *    FS_Init(). You should create all resources required by the
     89          *    OS to support multi threading of the file system.
     90          *
     91          *  Parameters:
     92          *    None.
     93          *
     94          *  Return value:
     95          *    0    - on success
     96          *    -1   - on failure.
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          void FS_X_OS_Init(unsigned NumLocks) {
   \                     FS_X_OS_Init:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     99            unsigned i;
    100            OS_RSEMA * pSema;
    101          
    102            _paSema = (OS_RSEMA *)FS_AllocZeroed(NumLocks* sizeof(OS_RSEMA));
   \   00000008   1410A0E3           MOV      R1,#+20
   \   0000000C   910400E0           MUL      R0,R1,R4
   \   00000010   ........           LDR      R5,??DataTable6
   \   00000014   ........           BL       FS_AllocZeroed
   \   00000018   000085E5           STR      R0,[R5, #+0]
    103            pSema =_paSema;
   \   0000001C   0060A0E1           MOV      R6,R0
    104            for (i = 0; i < NumLocks; i++) {
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   0D00000A           BEQ      ??FS_X_OS_Init_0
   \   00000028   010014E3           TST      R4,#0x1
   \   0000002C   0100000A           BEQ      ??FS_X_OS_Init_1
    105              OS_CREATERSEMA(pSema++);
   \   00000030   ........           BL       OS_CreateRSema
   \   00000034   146086E2           ADD      R6,R6,#+20
   \                     ??FS_X_OS_Init_1:
   \   00000038   A440B0E1           LSRS     R4,R4,#+1
   \   0000003C   0700000A           BEQ      ??FS_X_OS_Init_0
   \                     ??FS_X_OS_Init_2:
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           BL       OS_CreateRSema
   \   00000048   146086E2           ADD      R6,R6,#+20
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           BL       OS_CreateRSema
   \   00000054   146086E2           ADD      R6,R6,#+20
    106            }
   \   00000058   014054E2           SUBS     R4,R4,#+1
   \   0000005C   F7FFFF1A           BNE      ??FS_X_OS_Init_2
    107            OS_EVENT_Create(&_Event);
   \                     ??FS_X_OS_Init_0:
   \   00000060   080085E2           ADD      R0,R5,#+8
   \   00000064   7040BDE8           POP      {R4-R6,LR}
   \   00000068   ........           B        OS_EVENT_Create  ;; tailcall
    108          }
    109          
    110          
    111          /*********************************************************************
    112          *
    113          *       FS_X_OS_DeInit
    114          *
    115          *  Description:
    116          *    Delete all locks that have been created by FS_X_OS_Init().
    117          *    This makes sure that a
    118          *
    119          *  Parameters:
    120          *    None.
    121          *
    122          */

   \                                 In section .text, align 4, keep-with-next
    123          void FS_X_OS_DeInit(void) {
   \                     FS_X_OS_DeInit:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    124            unsigned i;
    125            OS_RSEMA  * pSema;
    126            unsigned    NumLocks;
    127          
    128            NumLocks = _NumLocks;
   \   00000004   ........           LDR      R4,??DataTable6
   \   00000008   0450D4E5           LDRB     R5,[R4, #+4]
    129            pSema   = &_paSema[0];
   \   0000000C   006094E5           LDR      R6,[R4, #+0]
    130            for (i = 0; i < NumLocks; i++) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0E00000A           BEQ      ??FS_X_OS_DeInit_0
   \   00000018   010015E3           TST      R5,#0x1
   \   0000001C   0200000A           BEQ      ??FS_X_OS_DeInit_1
    131              OS_DeleteRSema(pSema);
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           BL       OS_DeleteRSema
    132              pSema++;
   \   00000028   146086E2           ADD      R6,R6,#+20
   \                     ??FS_X_OS_DeInit_1:
   \   0000002C   A550B0E1           LSRS     R5,R5,#+1
   \   00000030   0700000A           BEQ      ??FS_X_OS_DeInit_0
   \                     ??FS_X_OS_DeInit_2:
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           BL       OS_DeleteRSema
   \   0000003C   146086E2           ADD      R6,R6,#+20
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           BL       OS_DeleteRSema
   \   00000048   146086E2           ADD      R6,R6,#+20
    133            }
   \   0000004C   015055E2           SUBS     R5,R5,#+1
   \   00000050   F7FFFF1A           BNE      ??FS_X_OS_DeInit_2
    134            OS_EVENT_Delete(&_Event);
   \                     ??FS_X_OS_DeInit_0:
   \   00000054   080084E2           ADD      R0,R4,#+8
   \   00000058   ........           BL       OS_EVENT_Delete
    135            FS_Free(_paSema);
   \   0000005C   000094E5           LDR      R0,[R4, #+0]
   \   00000060   ........           BL       FS_Free
    136            _paSema  = NULL;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   000084E5           STR      R0,[R4, #+0]
    137            _NumLocks = 0;
   \   0000006C   0400C4E5           STRB     R0,[R4, #+4]
    138          }
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    139          
    140          /*********************************************************************
    141          *
    142          *       FS_X_OS_GetTime
    143          *
    144          */

   \                                 In section .text, align 4, keep-with-next
    145          U32  FS_X_OS_GetTime(void) {
    146            return (U32)OS_GetTime32();
   \                     FS_X_OS_GetTime:
   \   00000000   ........           LDR      R0,??DataTable6_1
   \   00000004   1C0090E5           LDR      R0,[R0, #+28]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    147          }
    148          
    149          /*********************************************************************
    150          *
    151          *       FS_X_OS_Wait
    152          *
    153          *  Function description:
    154          *    Wait for an event to be signaled.
    155          *
    156          *  Parameters:
    157          *    Timeout    - Time to be wait for the event object.
    158          *
    159          *  Return value:
    160          *    0       - Event object was signaled within the timeout value
    161          *   -1       - An error or a timeout occurred.
    162          */

   \                                 In section .text, align 4, keep-with-next
    163          int FS_X_OS_Wait(int Timeout) {
   \                     FS_X_OS_Wait:
   \   00000000   00402DE9           PUSH     {LR}
    164          
    165          	if (0 == OS_EVENT_WaitTimed(&_Event, Timeout))
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   ........           LDR      R0,??DataTable6_2
   \   00000010   ........           BL       OS_EVENT_WaitTimed
   \   00000014   000050E3           CMP      R0,#+0
    166          		return 0;
    167          	else
    168          		return -1;
   \   00000018   0000E013           MVNNE    R0,#+0
   \   0000001C   04D08DE2           ADD      SP,SP,#+4
   \   00000020   0080BDE8           POP      {PC}             ;; return
    169          
    170          }
    171          
    172          /*********************************************************************
    173          *
    174          *       FS_X_OS_Signal
    175          *
    176          *  Function description:
    177          *    Signals a event
    178          *
    179          */

   \                                 In section .text, align 4, keep-with-next
    180          void FS_X_OS_Signal(void) {
    181            OS_EVENT_Pulse(&_Event);
   \                     FS_X_OS_Signal:
   \   00000000   ........           LDR      R0,??DataTable6_2
   \   00000004   ........           B        OS_EVENT_Pulse   ;; tailcall
    182          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     _paSema

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     _paSema+0x8
    183          
    184          
    185          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     FS_X_OS_DeInit      16
     FS_X_OS_GetTime      0
     FS_X_OS_Init        16
     FS_X_OS_Lock         8
     FS_X_OS_Signal       8
     FS_X_OS_Unlock       8
     FS_X_OS_Wait         8


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     _paSema           16
     _NumLocks
     _Event
     FS_X_OS_Lock      48
     FS_X_OS_Unlock    48
     FS_X_OS_Init     108
     FS_X_OS_DeInit   116
     FS_X_OS_GetTime   12
     FS_X_OS_Wait      36
     FS_X_OS_Signal     8
     ??DataTable6       4
     ??DataTable6_1     4
     ??DataTable6_2     4

 
  16 bytes in section .bss
 388 bytes in section .text
 
 388 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
