###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D1L.c                #
#    Command line =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D1L.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\WI #
#                    DGET_Effect_3D1L.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\WID #
#                    GET_Effect_3D1L.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WIDGET_Effect_3D1L.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WIDGET_Effect_3D1L.c
     19          Purpose     : Effect routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "WIDGET.h"
     27          #include "GUI_Debug.h"
     28          #include "GUI.h"
     29          #include "GUI_Private.h"
     30          #include "WM_Intern.h"
     31          
     32          #if GUI_WINSUPPORT
     33          
     34          /*********************************************************************
     35          *
     36          *       Static data
     37          *
     38          **********************************************************************
     39          */

   \                                 In section .data, align 4
     40          static GUI_COLOR _aColor[] = {
   \                     _aColor:
   \   00000000   60606000E7E7       DC32 6316128, 15198183
   \              E700        
     41            0x606060, 0xe7e7e7
     42          };
     43          
     44          /*********************************************************************
     45          *
     46          *       Static routines
     47          *
     48          **********************************************************************
     49          */
     50          /*********************************************************************
     51          *
     52          *       _DrawUpRect
     53          *
     54          *  Function description
     55          *    Draws an "Up" effect arround a given rectangle.
     56          *    This effect is used in different situations, but typically for an unpressed button
     57          *    which is supposed to "stick out".
     58          *
     59          * Add. info:
     60          *   This routine does not preserve the drawing colors for speed
     61          *   reasons. If this is required, it should be done in the calling
     62          *   routine.
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static void _DrawUpRect(const GUI_RECT* pRect) {
   \                     _DrawUpRect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     65            GUI_RECT r;
     66            r = *pRect;
     67            /* Draw the upper left sides */
     68            LCD_SetColor(_aColor[1]);
   \   00000004   ........           LDR      R8,??DataTable6
   \   00000008   F040D0E1           LDRSH    R4,[R0, #+0]
   \   0000000C   F250D0E1           LDRSH    R5,[R0, #+2]
   \   00000010   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000014   F670D0E1           LDRSH    R7,[R0, #+6]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   040098E5           LDR      R0,[R8, #+4]
   \   00000020   ........           BL       LCD_SetColor
     69            GUI_DrawHLine(r.y0, r.x0, r.x1 - 1);
   \   00000024   012046E2           SUB      R2,R6,#+1
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       GUI_DrawHLine
     70            GUI_DrawVLine(r.x0, r.y0 + 1, r.y1 - 1);
   \   00000034   019047E2           SUB      R9,R7,#+1
   \   00000038   0920A0E1           MOV      R2,R9
   \   0000003C   011085E2           ADD      R1,R5,#+1
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GUI_DrawVLine
     71            /* Draw the lower right sides */
     72            LCD_SetColor(_aColor[0]);
   \   00000048   000098E5           LDR      R0,[R8, #+0]
   \   0000004C   ........           BL       LCD_SetColor
     73            GUI_DrawHLine(r.y1, r.x0, r.x1);
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI_DrawHLine
     74            GUI_DrawVLine(r.x1, r.y0, r.y1 - 1);
   \   00000060   0920A0E1           MOV      R2,R9
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   F043BDE8           POP      {R4-R9,LR}
   \   00000074   ........           B        GUI_DrawVLine    ;; tailcall
     75          }
     76          
     77          /*********************************************************************
     78          *
     79          *       _DrawUp
     80          *
     81          * Function description
     82          *   Gets the rectangle of the current window and uses _DrawUpRect()
     83          *   for drawing the effect.
     84          */

   \                                 In section .text, align 4, keep-with-next
     85          static void _DrawUp(void) {
   \                     _DrawUp:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     86            GUI_RECT r;
     87            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
     88            _DrawUpRect(&r);
   \   00000010   ........           LDR      R8,??DataTable6
   \   00000014   F040DDE1           LDRSH    R4,[SP, #+0]
   \   00000018   F250DDE1           LDRSH    R5,[SP, #+2]
   \   0000001C   F460DDE1           LDRSH    R6,[SP, #+4]
   \   00000020   F670DDE1           LDRSH    R7,[SP, #+6]
   \   00000024   040098E5           LDR      R0,[R8, #+4]
   \   00000028   ........           BL       LCD_SetColor
   \   0000002C   012046E2           SUB      R2,R6,#+1
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       GUI_DrawHLine
   \   0000003C   019047E2           SUB      R9,R7,#+1
   \   00000040   0920A0E1           MOV      R2,R9
   \   00000044   011085E2           ADD      R1,R5,#+1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_DrawVLine
   \   00000050   000098E5           LDR      R0,[R8, #+0]
   \   00000054   ........           BL       LCD_SetColor
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           BL       GUI_DrawHLine
   \   00000068   0920A0E1           MOV      R2,R9
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       GUI_DrawVLine
     89          }
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   F083BDE8           POP      {R4-R9,PC}       ;; return
     90          
     91          /*********************************************************************
     92          *
     93          *       _DrawDownRect
     94          *
     95          * Function description
     96          *   Draws an "Down" effect arround a given rectangle.
     97          *   This effect is used in different situations, but typically for an edit widget
     98          *   which is supposed to "sunken".
     99          *
    100          * Add. info:
    101          *   This routine does not preserve the drawing colors for speed
    102          *   reasons. If this is required, it should be done in the calling
    103          *   routine.
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          static void _DrawDownRect(const GUI_RECT* pRect) {
   \                     _DrawDownRect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    106            GUI_RECT r;
    107            r = *pRect;
    108            /* Draw the upper left sides */
    109            LCD_SetColor(_aColor[0]);
   \   00000004   ........           LDR      R8,??DataTable6
   \   00000008   F040D0E1           LDRSH    R4,[R0, #+0]
   \   0000000C   F250D0E1           LDRSH    R5,[R0, #+2]
   \   00000010   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000014   F670D0E1           LDRSH    R7,[R0, #+6]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   000098E5           LDR      R0,[R8, #+0]
   \   00000020   ........           BL       LCD_SetColor
    110            GUI_DrawHLine(r.y0, r.x0, r.x1 - 1);
   \   00000024   012046E2           SUB      R2,R6,#+1
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       GUI_DrawHLine
    111            GUI_DrawVLine(r.x0, r.y0 + 1, r.y1 - 1);
   \   00000034   019047E2           SUB      R9,R7,#+1
   \   00000038   0920A0E1           MOV      R2,R9
   \   0000003C   011085E2           ADD      R1,R5,#+1
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GUI_DrawVLine
    112            /* Draw the lower right sides */
    113            LCD_SetColor(_aColor[1]);
   \   00000048   040098E5           LDR      R0,[R8, #+4]
   \   0000004C   ........           BL       LCD_SetColor
    114            GUI_DrawHLine(r.y1, r.x0, r.x1);
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI_DrawHLine
    115            GUI_DrawVLine(r.x1, r.y0, r.y1 - 1);
   \   00000060   0920A0E1           MOV      R2,R9
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   F043BDE8           POP      {R4-R9,LR}
   \   00000074   ........           B        GUI_DrawVLine    ;; tailcall
    116          }
    117          
    118          /*********************************************************************
    119          *
    120          *       _DrawDown
    121          *
    122          * Function description
    123          *   Gets the rectangle of the current window and uses _DrawDownRect()
    124          *   for drawing the effect.
    125          */

   \                                 In section .text, align 4, keep-with-next
    126          static void _DrawDown(void) {
   \                     _DrawDown:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    127            GUI_RECT r;
    128            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
    129            _DrawDownRect(&r);
   \   00000010   ........           LDR      R8,??DataTable6
   \   00000014   F040DDE1           LDRSH    R4,[SP, #+0]
   \   00000018   F250DDE1           LDRSH    R5,[SP, #+2]
   \   0000001C   F460DDE1           LDRSH    R6,[SP, #+4]
   \   00000020   F670DDE1           LDRSH    R7,[SP, #+6]
   \   00000024   000098E5           LDR      R0,[R8, #+0]
   \   00000028   ........           BL       LCD_SetColor
   \   0000002C   012046E2           SUB      R2,R6,#+1
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       GUI_DrawHLine
   \   0000003C   019047E2           SUB      R9,R7,#+1
   \   00000040   0920A0E1           MOV      R2,R9
   \   00000044   011085E2           ADD      R1,R5,#+1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_DrawVLine
   \   00000050   040098E5           LDR      R0,[R8, #+4]
   \   00000054   ........           BL       LCD_SetColor
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           BL       GUI_DrawHLine
   \   00000068   0920A0E1           MOV      R2,R9
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       GUI_DrawVLine
    130          }
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   F083BDE8           POP      {R4-R9,PC}       ;; return
    131          
    132          /*********************************************************************
    133          *
    134          *       Public routines
    135          *
    136          **********************************************************************
    137          */
    138          /*********************************************************************
    139          *
    140          *       WIDGET_EFFECT_3D1L_SetColor
    141          */

   \                                 In section .text, align 4, keep-with-next
    142          void WIDGET_EFFECT_3D1L_SetColor(unsigned Index, GUI_COLOR Color) {
    143            if (Index < GUI_COUNTOF(_aColor)) {
   \                     WIDGET_EFFECT_3D1L_SetColor:
   \   00000000   020050E3           CMP      R0,#+2
    144              _aColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable6
   \   00000008   00118237           STRCC    R1,[R2, +R0, LSL #+2]
    145            }
    146          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    147          
    148          /*********************************************************************
    149          *
    150          *       WIDGET_EFFECT_3D1L_GetColor
    151          */

   \                                 In section .text, align 4, keep-with-next
    152          GUI_COLOR WIDGET_EFFECT_3D1L_GetColor(unsigned Index) {
    153            GUI_COLOR r;
    154            r = 0;
   \                     WIDGET_EFFECT_3D1L_GetColor:
   \   00000000   0010A0E3           MOV      R1,#+0
    155            if (Index < GUI_COUNTOF(_aColor)) {
   \   00000004   020050E3           CMP      R0,#+2
    156              r = _aColor[Index];
   \   00000008   ........           LDRCC    R1,??DataTable6
   \   0000000C   00119137           LDRCC    R1,[R1, +R0, LSL #+2]
    157            }
    158            return r;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       WIDGET_EFFECT_3D1L_GetNumColors
    164          */

   \                                 In section .text, align 4, keep-with-next
    165          int WIDGET_EFFECT_3D1L_GetNumColors(void) {
    166            return GUI_COUNTOF(_aColor);
   \                     WIDGET_EFFECT_3D1L_GetNumColors:
   \   00000000   0200A0E3           MOV      R0,#+2
   \   00000004   1EFF2FE1           BX       LR               ;; return
    167          }
    168          
    169          /*********************************************************************
    170          *
    171          *       WIDGET_Effect_3D1L
    172          *
    173          * Purpose:
    174          *   Structure of type WIDGET_EFFECT which contains the function pointers
    175          *   used to draw the effect. It also contains the effect size
    176          *   which specifies the number of pixels used by the effect frame.
    177          */

   \                                 In section .rodata, align 4, keep-with-next
    178          const WIDGET_EFFECT WIDGET_Effect_3D1L = {
   \                     WIDGET_Effect_3D1L:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   01000000....       DC32 1, _DrawUp, _DrawUpRect, _DrawDown, _DrawDownRect
   \              ............
   \              ............
   \              ....        
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     _aColor
    179            1,
    180            _DrawUp,
    181            _DrawUpRect,
    182            _DrawDown,
    183            _DrawDownRect,
    184          };
    185          
    186          #else                            /* Avoid problems with empty object modules */
    187            void WIDGET_Effect_3D1L_C(void) {}
    188          #endif /* GUI_WINSUPPORT */
    189          
    190          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     WIDGET_EFFECT_3D1L_GetColor         0
     WIDGET_EFFECT_3D1L_GetNumColors
                                         0
     WIDGET_EFFECT_3D1L_SetColor         0
     _DrawDown                          40
     _DrawDownRect                      32
     _DrawUp                            40
     _DrawUpRect                        32


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _aColor                           8
     _DrawUpRect                     120
     _DrawUp                         128
     _DrawDownRect                   120
     _DrawDown                       128
     WIDGET_EFFECT_3D1L_SetColor      16
     WIDGET_EFFECT_3D1L_GetColor      24
     WIDGET_EFFECT_3D1L_GetNumColors
                                       8
     WIDGET_Effect_3D1L               28
     ??DataTable6                      4

 
   8 bytes in section .data
  28 bytes in section .rodata
 548 bytes in section .text
 
 548 bytes of CODE  memory
  28 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
