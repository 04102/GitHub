###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:46 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\DUII_Main.c                                 #
#    Command line =  C:\DUII\DUII\DUII_Main.c -D DEBUG=1 -D SDRAM_TARGET=1    #
#                    -D USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D           #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\DU #
#                    II_Main.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\DUI #
#                    I_Main.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\DUII_Main.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2008  SEGGER Microcontroller GmbH & Co. KG        *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.52e                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : GUI_DUII_Main.c
     31          Purpose : emWin and embOS demo application
     32          --------  END-OF-HEADER  ---------------------------------------------
     33          */
     34          
     35          #ifndef _WINDOWS
     36          #ifdef PROFILER
     37          #include "profiler.h"
     38          #define THIS_TASK	MAINTASK_NUM
     39          #endif
     40          #endif
     41          
     42          #include "GUI.h"
     43          #include "DUII.h"
     44          #include "commondefs.h"
     45          #include "DIALOG.h"
     46          #include "ConfigScreens.h"
     47          #include "GeneralConfig.h"
     48          #include "FlashReadWrite.h"
     49          #if	_WINDOWS
     50          #include "windows.h"
     51          #include "SIMConf.h"
     52          #else
     53          #include "RTOS.H"
     54          #include "FS.h"
     55          #include "MMC_MCI_HW.h"
     56          #include "SPI_API.h"
     57          #include "LCDConf.h"
     58          #include "FlashLights.h"
     59          #include "FactoryCheckout.h"
     60          #include "dataflash.h"
     61          #include "CommTask.h"
     62          #include "adc.h"
     63          #include "WiFiFunctions.h"
     64          #endif
     65          #include "LEDHandler.h"
     66          #include "GaugeScreen.h"
     67          #include <stdio.h>
     68          #include <string.h>
     69          #include "RunningGauges.h"
     70          #include "CalibrateTouchScreen.h"
     71          #include "DataHandler.h"
     72          #include "RaceSetupScreens.h"
     73          #include "TrackDetect.h"
     74          #include "SystemSettingsScreens.h"
     75          #include "SFScreens.h"
     76          #include "TrackSettingsScreens.h"
     77          #include "ReviewSessionsScreens.h"
     78          #include "VehicleSettingsScreens.h"
     79          #include "Archive.h"
     80          #include "PersonalizeScreens.h"
     81          #include "HelpScreens.h"
     82          
     83          
     84          //
     85          // External Declarations
     86          //
     87          extern GUI_CONST_STORAGE GUI_BITMAP bmSplashScreen;
     88          extern GUI_CONST_STORAGE GUI_BITMAP bmSonyIcon;
     89          extern GUI_CONST_STORAGE GUI_BITMAP bmChaseCamIcon;
     90          extern GUI_CONST_STORAGE GUI_BITMAP bmRaceCamIcon;
     91          extern GUI_CONST_STORAGE GUI_BITMAP bmGoProIcon;
     92          extern GUI_CONST_STORAGE GUI_BITMAP bmReplayIcon;
     93          extern GUI_CONST_STORAGE GUI_BITMAP bmReplay1080Icon;
     94          extern GUI_CONST_STORAGE GUI_BITMAP bmReplayMiniIcon;
     95          extern GUI_CONST_STORAGE GUI_BITMAP bmReplayPrimeIcon;
     96          extern GUI_CONST_STORAGE GUI_BITMAP bmMobiusIcon;
     97          extern GUI_CONST_STORAGE GUI_BITMAP bmCheckIcon;
     98          extern GUI_CONST_STORAGE GUI_BITMAP bmXIcon;
     99          extern GUI_CONST_STORAGE GUI_BITMAP bmDriverName;
    100          extern GUI_CONST_STORAGE GUI_BITMAP bmVehicleName;
    101          extern GUI_CONST_STORAGE GUI_BITMAP bmUSBCamIcon;
    102          extern GUI_CONST_STORAGE GUI_BITMAP bmWiFiEnabledIcon;
    103          extern GUI_CONST_STORAGE GUI_BITMAP bmWiFiDisabledIcon;
    104          
    105          #ifndef _WINDOWS
    106          extern void CommSimulatorTask(void);
    107          extern OS_STACKPTR int commStack[1024];
    108          extern char SDCardPresent(void);
    109          extern void reset(void);
    110          extern OS_TASK mainTCB;
    111          #endif
    112          
    113          #ifdef BUILD_DEBUG_PORT
    114          #include "dbgu.h"
    115          
    116          extern int glbErrorFlag;
    117          #endif
    118          
    119          //
    120          // Global data declarations
    121          //
    122          char lockupSemaphore;

   \                                 In section .data, align 4
    123          int popupTitleTextColor = GUI_WHITE;
   \                     popupTitleTextColor:
   \   00000000   FFFFFF00           DC32 16777215
    124          
    125          //
    126          // Local data definitions
    127          //
    128          typedef enum {
    129          	CODESU,
    130          	CODETQ,
    131          	BOOTTQ,
    132          	NOMATCH
    133          } codefiletypes;
    134          

   \                                 In section .text, align 4, keep-with-next
    135          const char VERSION_PATH[] = { LEADING_PATH CFG_PATH "\\" VER_FILE DAT_EXT };		// location where Version.dat is stored
   \                     VERSION_PATH:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   5C436F6E6669       DC8 92, 67, 111, 110, 102, 105, 103, 70, 105, 108
   \              6746696C    
   \   0000000A   65735C566572       DC8 101, 115, 92, 86, 101, 114, 115, 105, 111, 110
   \              73696F6E    
   \   00000014   2E6461740000       DC8 46, 100, 97, 116, 0, 0, 0, 0
   \              0000        
    136          //
    137          // Local function prototypes
    138          //
    139          int SDCardRemoved(void);
    140          int SDCardReinserted(void);
    141          int ReFlashYorN( codefiletypes, int );
    142          int DemoYorN( void );
    143          void PowerOffUnit(WM_HWIN owner, char reset, int delay);
    144          void SaveFilesAndPowerDown(void);
    145          #ifndef _WINDOWS
    146          void ConfigureCache(void);
    147          char OkToUseSDCard(void);
    148          int RetrySDCard( void );
    149          #endif
    150          void SetPopupDefaults(enum POPUP_TYPES type);
    151          void ConfigureForNoSDCard(void);
    152          void InitializeTraqmateFiles(void);
    153          void AskAndDoFormatSDCard(void);
    154          void InitializeTraqmateData(void);
    155          void DisplayInvalidFilesPopup(int files);
    156          void WriteCodeImage(void);
    157          void DisplaySplashScreen1(void);
    158          void DisplaySplashScreen3(void);
    159          void DisplayAnalogStatus(int i);
    160          void RepaintSplash(void);
    161          void CreateProgressBar(PROGBAR_Handle *hProgBar, int maxval);
    162          int NewSWVersion(void);
    163          int UserWantsToUpdateSF(void);
    164          void local_itoa(int n, char s[]);
    165          void reverse(char s[]);
    166          
    167          //
    168          // Local variable declarations
    169          //
    170          int testMode;
    171          int demoMode;
    172          int factMode;
    173          static char localSDCardFlag;		// true = SD card present, false == absent
    174          static char okToUseSDCard = false;
    175          long splashScreenStartTime;
    176          
    177          #define DEBOUNCE_ONOFF_MSEC				1000	// debounce value of onoff buttons in msec
    178          #define FAT_VOLUME_LABEL_LENGTH			32		// number of characters in NFTS volume label (FAT = 11)
    179          #define	SPLASH_SCREEN_PERSIST_TIME		4000	// 4 seconds
    180          
    181          /*********************************************************************
    182          *
    183          *       main()
    184          */
    185          void MainTask(void);
    186          

   \                                 In section .text, align 4, keep-with-next
    187          void MainTask(void)
    188          {
   \                     MainTask:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    189          	int screen;
    190          	enum SCREEN_TYPE screenType;
    191          #ifndef _WINDOWS
    192          	char checkFormat, dontRunWithout;
    193          	char sdCardLabel[FAT_VOLUME_LABEL_LENGTH+1];			// volume label of sd card
    194          #endif
    195          
    196          #ifdef BUILD_DEBUG_PORT
    197             DBGU_Configure(DBGU_STANDARD, 115200, BOARD_MCK);
   \   00000004   401BA0E3           MOV      R1,#+65536
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   ........           LDR      R2,??DataTable100  ;; 0x5f5e100
   \   00000010   C21C81E3           ORR      R1,R1,#0xC200
   \   00000014   800EA0E3           MOV      R0,#+2048
   \   00000018   ........           BL       DBGU_Configure
    198          #endif
    199          
    200          	// initialize the who are we information
    201          	unsavedSysData.duSwRev = DU2_SW_REV;					// software rev * 100
   \   0000001C   ........           LDR      R4,??DataTable103
   \   00000020   2D00A0E3           MOV      R0,#+45
   \   00000024   400F80E3           ORR      R0,R0,#0x100
   \   00000028   B000C4E1           STRH     R0,[R4, #+0]
    202          	unsavedSysData.duDataRev = DU2_DATA_REV;				// data rev for matching up with SU messages
   \   0000002C   0800A0E3           MOV      R0,#+8
   \   00000030   B200C4E1           STRH     R0,[R4, #+2]
    203          	unsavedSysData.duHwRev = DU2_HW_REV;					// what hardware rev are we working with
   \   00000034   8C00A0E3           MOV      R0,#+140
    204          
    205          	// initialize other data in unsavedSysData
    206          	unsavedSysData.recordingTimedout = FALSE;				// Recording initially off
   \   00000038   0050A0E3           MOV      R5,#+0
   \   0000003C   0400C4E5           STRB     R0,[R4, #+4]
   \   00000040   D450C4E5           STRB     R5,[R4, #+212]
    207          
    208          #ifdef _WINDOWS
    209          	unsavedSysData.unitInfo.serno = DEFAULT_SERIAL_NUMBER;
    210          	unsavedSysData.unitInfo.week = DEFAULT_BUILD_WEEK;
    211          	unsavedSysData.unitInfo.year = DEFAULT_BUILD_YEAR;
    212          	unsavedSysData.unitInfo.bootloaderSwRev = DEFAULT_BOOTLOADER_REV;
    213          #endif
    214          	
    215          	GUI_Init();
   \   00000044   ........           BL       GUI_Init
    216          	DisplaySplashScreen1();
   \   00000048   ........           BL       GUI_Clear
   \   0000004C   0A20A0E3           MOV      R2,#+10
   \   00000050   2710A0E3           MOV      R1,#+39
   \   00000054   ........           LDR      R0,??DataTable103_1
   \   00000058   ........           BL       GUI_DrawBitmap
   \   0000005C   ........           LDR      R8,??DataTable102
   \   00000060   6120A0E3           MOV      R2,#+97
   \   00000064   1410A0E3           MOV      R1,#+20
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_DrawBitmap
   \   00000070   ........           LDR      R9,??DataTable103_2
   \   00000074   6E20A0E3           MOV      R2,#+110
   \   00000078   F010A0E3           MOV      R1,#+240
   \   0000007C   0900A0E1           MOV      R0,R9
   \   00000080   ........           BL       GUI_DrawBitmap
    217          
    218          	WarningPopupInit();			// Initialize warning popups
   \   00000084   ........           BL       WarningPopupInit
    219          
    220          	BUTTON_SetDefaultSkin   (BUTTON_SKIN_FLEX);
   \   00000088   ........           LDR      R0,??DataTable103_3
   \   0000008C   ........           BL       BUTTON_SetDefaultSkin
    221          
    222          	CHECKBOX_SetDefaultSkin (CHECKBOX_SKIN_FLEX);
   \   00000090   ........           LDR      R0,??DataTable103_4
   \   00000094   ........           BL       CHECKBOX_SetDefaultSkin
    223          	DROPDOWN_SetDefaultSkin (DROPDOWN_SKIN_FLEX);
   \   00000098   ........           LDR      R0,??DataTable103_5
   \   0000009C   ........           BL       DROPDOWN_SetDefaultSkin
    224          	FRAMEWIN_SetDefaultSkin (FRAMEWIN_SKIN_FLEX);
   \   000000A0   ........           LDR      R0,??DataTable103_6
   \   000000A4   ........           BL       FRAMEWIN_SetDefaultSkin
    225          	HEADER_SetDefaultSkin   (HEADER_SKIN_FLEX);
   \   000000A8   ........           LDR      R0,??DataTable103_7
   \   000000AC   ........           BL       HEADER_SetDefaultSkin
    226          	RADIO_SetDefaultSkin    (RADIO_SKIN_FLEX);
   \   000000B0   ........           LDR      R0,??DataTable103_8
   \   000000B4   ........           BL       RADIO_SetDefaultSkin
    227          	SCROLLBAR_SetDefaultSkin(SCROLLBAR_SKIN_FLEX);
   \   000000B8   ........           LDR      R0,??DataTable103_9
   \   000000BC   ........           BL       SCROLLBAR_SetDefaultSkin
    228          	FRAMEWIN_SetDefaultClientColor(GUI_OFFWHITE);
   \   000000C0   ........           LDR      R0,??DataTable103_10  ;; 0xf0f0f0
   \   000000C4   ........           BL       FRAMEWIN_SetDefaultClientColor
    229          
    230          #ifdef _WINDOWS
    231          	SIM_Init();
    232          	InitializeTraqmateFiles();
    233            	InitCommSimulatorTask();		// Initialize simulation data (uses vehicle data set in InitializeTraqmateFiles)
    234          	InitializeLEDStructures();		// Initialize LED structures before flashing starts
    235          	InitializeLEDs();
    236          #else
    237          	FlashLights();
   \   000000C8   ........           BL       FlashLights
    238          	FS_Init();
   \   000000CC   ........           BL       FS_Init
    239          	FS_FAT_SupportLFN();
   \   000000D0   ........           BL       FS_FAT_SupportLFN
    240          	
    241          	ConfigureCache();
   \   000000D4   0200A0E3           MOV      R0,#+2
   \   000000D8   ........           BL       FS_SetFileWriteMode
   \   000000DC   BA6F8FE2           ADR      R6,??MainTask_1  ;; ""
   \   000000E0   ........           LDR      R3,??DataTable103_11
   \   000000E4   C02CA0E3           MOV      R2,#+49152
   \   000000E8   C019A0E3           MOV      R1,#+3145728
   \   000000EC   0600A0E1           MOV      R0,R6
   \   000000F0   ........           BL       FS_AssignCache
   \   000000F4   0720A0E3           MOV      R2,#+7
   \   000000F8   0710A0E3           MOV      R1,#+7
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   ........           BL       FS_CACHE_SetMode
    242          
    243          	checkFormat = true;	
   \   00000104   0170A0E3           MOV      R7,#+1
   \   00000108   01B0A0E3           MOV      R11,#+1
    244          	dontRunWithout = true;
   \   0000010C   01A0A0E3           MOV      R10,#+1
    245          	if ((unsavedSysData.sdCardInserted = SDCardPresent()) == false)		// card not inserted
   \   00000110   ........           BL       SDCardPresent
   \   00000114   C00084E5           STR      R0,[R4, #+192]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   2900001A           BNE      ??MainTask_2
    246          	{
    247          		if ((FS_MCI_HW_IsCardPresent(0) && SDCardWriteProtected()))
   \   00000120   ........           BL       FS_MCI_HW_IsCardPresent
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0200000A           BEQ      ??MainTask_3
   \   0000012C   ........           BL       SDCardWriteProtected
   \   00000130   000050E3           CMP      R0,#+0
    248          #ifdef SDCARDS_BEHAVING_WELL
    249          			checkFormat = true;					// Card will behave properly when I ask it if it's formatted
    250          #else
    251          			checkFormat = false;				// Card is present but write protected - special case!!
   \   00000134   00B0A013           MOVNE    R11,#+0
    252          #endif
    253          			
    254          		while ((dontRunWithout = RetrySDCard()) == true)	// Ask the user if he wants to retry or run without
   \                     ??MainTask_3:
   \   00000138   ........           BL       RetrySDCard
   \   0000013C   FFA000E2           AND      R10,R0,#0xFF
   \   00000140   01005AE3           CMP      R10,#+1
   \   00000144   1000001A           BNE      ??MainTask_4
    255          		{
    256          			if (SDCardPresent() == true)		// retry
   \   00000148   ........           BL       SDCardPresent
   \   0000014C   010050E3           CMP      R0,#+1
   \   00000150   F8FFFF1A           BNE      ??MainTask_3
    257          			{
    258          				DisplaySplashScreen1();			// Redisplay splash screen to clear popup
   \   00000154   ........           BL       GUI_Clear
   \   00000158   0A20A0E3           MOV      R2,#+10
   \   0000015C   2710A0E3           MOV      R1,#+39
   \   00000160   ........           LDR      R0,??DataTable103_1
   \   00000164   ........           BL       GUI_DrawBitmap
   \   00000168   6120A0E3           MOV      R2,#+97
   \   0000016C   1410A0E3           MOV      R1,#+20
   \   00000170   0800A0E1           MOV      R0,R8
   \   00000174   ........           BL       GUI_DrawBitmap
   \   00000178   6E20A0E3           MOV      R2,#+110
   \   0000017C   F010A0E3           MOV      R1,#+240
   \   00000180   0900A0E1           MOV      R0,R9
   \   00000184   ........           BL       GUI_DrawBitmap
    259          				goto continueStartup;
   \   00000188   0A0000EA           B        ??MainTask_5
    260          			}
    261          		}
    262          		checkFormat = false;
   \                     ??MainTask_4:
   \   0000018C   00B0A0E3           MOV      R11,#+0
    263          		InitializeTraqmateData();				// run without - set default data
   \   00000190   ........           BL       CreateTracks
   \   00000194   ........           BL       ReadDataStructures
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   0400000A           BEQ      ??MainTask_6
   \   000001A0   C01094E5           LDR      R1,[R4, #+192]
   \   000001A4   000051E3           CMP      R1,#+0
   \   000001A8   0000000A           BEQ      ??MainTask_7
   \   000001AC   ........           BL       DisplayInvalidFilesPopup
   \                     ??MainTask_7:
   \   000001B0   0000A0E3           MOV      R0,#+0
   \                     ??MainTask_6:
   \   000001B4   ........           BL       ResetAllFileLists
    264          	continueStartup:
    265          		unsavedSysData.sdCardInserted = SDCardPresent();
   \                     ??MainTask_5:
   \   000001B8   ........           BL       SDCardPresent
   \   000001BC   C00084E5           STR      R0,[R4, #+192]
    266          		testMode = false;
   \   000001C0   ........           LDR      R0,??DataTable103_12
   \   000001C4   005080E5           STR      R5,[R0, #+0]
    267          	}
    268          	
    269          	DisplaySplashScreen1();			// Repaint the initial splash screen incase we displayed the popup and he said no
   \                     ??MainTask_2:
   \   000001C8   ........           BL       GUI_Clear
   \   000001CC   0A20A0E3           MOV      R2,#+10
   \   000001D0   2710A0E3           MOV      R1,#+39
   \   000001D4   ........           LDR      R0,??DataTable103_1
   \   000001D8   ........           BL       GUI_DrawBitmap
   \   000001DC   6120A0E3           MOV      R2,#+97
   \   000001E0   1410A0E3           MOV      R1,#+20
   \   000001E4   0800A0E1           MOV      R0,R8
   \   000001E8   ........           BL       GUI_DrawBitmap
   \   000001EC   6E20A0E3           MOV      R2,#+110
   \   000001F0   F010A0E3           MOV      R1,#+240
   \   000001F4   0900A0E1           MOV      R0,R9
   \   000001F8   ........           BL       GUI_DrawBitmap
    270          
    271          	localSDCardFlag = true;
   \   000001FC   ........           LDR      R8,??DataTable103_12
    272          	
    273          	if (checkFormat)
   \   00000200   00005BE3           CMP      R11,#+0
   \   00000204   1570C8E5           STRB     R7,[R8, #+21]
   \   00000208   2600000A           BEQ      ??MainTask_8
    274          	{
    275          		if (((unsavedSysData.sdCardInserted)) && (FS_IsHLFormatted("") != 1))
   \   0000020C   C00094E5           LDR      R0,[R4, #+192]
   \   00000210   000050E3           CMP      R0,#+0
   \   00000214   1200000A           BEQ      ??MainTask_9
   \   00000218   0600A0E1           MOV      R0,R6
   \   0000021C   ........           BL       FS_IsHLFormatted
   \   00000220   010050E3           CMP      R0,#+1
   \   00000224   0E00000A           BEQ      ??MainTask_9
    276          			AskAndDoFormatSDCard();
   \   00000228   ........           BL       WM_GetDesktopWindow
   \   0000022C   0090A0E1           MOV      R9,R0
   \   00000230   0910A0E1           MOV      R1,R9
   \   00000234   0D00A0E3           MOV      R0,#+13
   \   00000238   ........           BL       SystemSettingsPopUp
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   0800000A           BEQ      ??MainTask_10
   \   00000244   0910A0E1           MOV      R1,R9
   \   00000248   0300A0E3           MOV      R0,#+3
   \   0000024C   ........           BL       SystemSettingsPopUp
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   0300000A           BEQ      ??MainTask_10
   \   00000258   0900A0E1           MOV      R0,R9
   \   0000025C   ........           BL       FormatSDCard
   \   00000260   000000EA           B        ??MainTask_10
    277          		else okToUseSDCard = true;
   \                     ??MainTask_9:
   \   00000264   1670C8E5           STRB     R7,[R8, #+22]
    278          		
    279          		// check volume label of SD card and set if it is blank
    280          		if (0 == FS_GetVolumeLabel("", sdCardLabel, FAT_VOLUME_LABEL_LENGTH)) {
   \                     ??MainTask_10:
   \   00000268   2020A0E3           MOV      R2,#+32
   \   0000026C   0C108DE2           ADD      R1,SP,#+12
   \   00000270   0600A0E1           MOV      R0,R6
   \   00000274   ........           BL       FS_GetVolumeLabel
   \   00000278   000050E3           CMP      R0,#+0
   \   0000027C   0700001A           BNE      ??MainTask_11
    281          			if (0 == strlen(sdCardLabel))
   \   00000280   0C008DE2           ADD      R0,SP,#+12
   \   00000284   ........           BL       strlen
   \   00000288   000050E3           CMP      R0,#+0
   \   0000028C   0300001A           BNE      ??MainTask_11
    282          				FS_SetVolumeLabel("", "TRAQDASH");
   \   00000290   ............       ADRL     R1,`?<Constant "TRAQDASH">`
   \              ....        
   \   00000298   0600A0E1           MOV      R0,R6
   \   0000029C   ........           BL       FS_SetVolumeLabel
    283          		} // if
    284          	
    285          		InitializeTraqmateFiles();
   \                     ??MainTask_11:
   \   000002A0   ........           BL       InitializeTraqmateFiles
   \   000002A4   2D0000EA           B        ??MainTask_12
    286          	}
    287          	else								// Handle special case of card inserted but was write protected
    288          	{
    289          		ConfigureForNoSDCard();			// In this case we can only run with no SD card
   \                     ??MainTask_8:
   \   000002A8   C05084E5           STR      R5,[R4, #+192]
   \   000002AC   0600A0E1           MOV      R0,R6
   \   000002B0   ........           BL       FS_Unmount
   \   000002B4   8800D4E5           LDRB     R0,[R4, #+136]
   \   000002B8   030040E2           SUB      R0,R0,#+3
   \   000002BC   FF0000E2           AND      R0,R0,#0xFF
   \   000002C0   130050E3           CMP      R0,#+19
   \   000002C4   0100002A           BCS      ??MainTask_13
   \   000002C8   0400A0E3           MOV      R0,#+4
   \   000002CC   ........           BL       notifyTQM
   \                     ??MainTask_13:
   \   000002D0   0200A0E3           MOV      R0,#+2
   \   000002D4   8800C4E5           STRB     R0,[R4, #+136]
   \   000002D8   0100A0E3           MOV      R0,#+1
   \   000002DC   ........           BL       ResetAllFileLists
   \   000002E0   ........           BL       ClearNameStruct
    290          		InitializeTraqmateData();		// run without - set default data
   \   000002E4   ........           BL       CreateTracks
   \   000002E8   ........           BL       ReadDataStructures
   \   000002EC   000050E3           CMP      R0,#+0
   \   000002F0   0400000A           BEQ      ??MainTask_14
   \   000002F4   C01094E5           LDR      R1,[R4, #+192]
   \   000002F8   000051E3           CMP      R1,#+0
   \   000002FC   0000000A           BEQ      ??MainTask_15
   \   00000300   ........           BL       DisplayInvalidFilesPopup
   \                     ??MainTask_15:
   \   00000304   0000A0E3           MOV      R0,#+0
   \                     ??MainTask_14:
   \   00000308   ........           BL       ResetAllFileLists
    291          		if (dontRunWithout == true)		// If the user does not want to run with no SD card
   \   0000030C   01005AE3           CMP      R10,#+1
   \   00000310   1200001A           BNE      ??MainTask_12
    292          			SDCardReinserted();			// Ask the user if we should reset and do it if so
   \   00000314   ........           BL       HideSprites
   \   00000318   0200A0E3           MOV      R0,#+2
   \   0000031C   ........           BL       SetPopupDefaults
   \   00000320   ........           LDR      R0,??DataTable105_1
   \   00000324   007080E5           STR      R7,[R0, #+0]
   \   00000328   ........           BL       WM_GetDesktopWindow
   \   0000032C   0A10A0E3           MOV      R1,#+10
   \   00000330   04108DE5           STR      R1,[SP, #+4]
   \   00000334   00108DE5           STR      R1,[SP, #+0]
   \   00000338   0030A0E1           MOV      R3,R0
   \   0000033C   ........           LDR      R2,??DataTable105_2
   \   00000340   0310A0E3           MOV      R1,#+3
   \   00000344   ............       ADRL     R0,??SDCardReinsertedResources
   \              ....        
   \   0000034C   ........           BL       GUI_ExecDialogBox
   \   00000350   010050E3           CMP      R0,#+1
   \   00000354   0000001A           BNE      ??MainTask_16
   \   00000358   ........           BL       reset
   \                     ??MainTask_16:
   \   0000035C   ........           BL       UnhideSprites
    293          	}
    294          	
    295          	// Set the LEDs to user settings (note: InitializeLEDStructures called in   
    296          	// Main.c which must be called before startup LED flashes)
    297          	InitializeLEDs();					
   \                     ??MainTask_12:
   \   00000360   ........           BL       InitializeLEDs
    298          
    299          	// load new code if available
    300          	// needs to be after sd card read so that if user says no, su will get the right config
    301          	WriteCodeImage();
   \   00000364   ........           BL       WriteCodeImage
    302          	
    303          #endif
    304          
    305          	WIDGET_SetDefaultEffect(&WIDGET_Effect_None);
   \   00000368   ........           LDR      R0,??DataTable105_3
   \   0000036C   ........           BL       WIDGET_SetDefaultEffect
    306          
    307          	screen = GetLastScreen(GetScreenType());
   \   00000370   ........           BL       GetScreenType
   \   00000374   ........           BL       GetLastScreen
   \   00000378   0090A0E1           MOV      R9,R0
    308          	screenType = GetScreenType();
   \   0000037C   ........           BL       GetScreenType
   \   00000380   00A0A0E1           MOV      R10,R0
    309          
    310          	ValidateRaceScreens();
   \   00000384   ........           BL       ValidateRaceScreens
    311          
    312          	// Be sure we have show the splash screen long enough
    313          	while ((GUI_GetTime() - splashScreenStartTime) < SPLASH_SCREEN_PERSIST_TIME)
   \                     ??MainTask_17:
   \   00000388   ........           BL       GUI_GetTime
   \   0000038C   0C1098E5           LDR      R1,[R8, #+12]
   \   00000390   010040E0           SUB      R0,R0,R1
   \   00000394   FA0E50E3           CMP      R0,#+4000
   \   00000398   FAFFFFBA           BLT      ??MainTask_17
    314          		;
    315          
    316          	raceModeState = RM_INITIAL;
   \   0000039C   ........           LDR      R0,??DataTable105_4
   \   000003A0   0050C0E5           STRB     R5,[R0, #+0]
    317          	// Set the last running mode
    318          	if (AnyGaugeScreen(screenType))
   \   000003A4   0A00A0E1           MOV      R0,R10
   \   000003A8   ........           BL       AnyGaugeScreen
   \   000003AC   000050E3           CMP      R0,#+0
   \   000003B0   0600000A           BEQ      ??MainTask_18
    319          	{
    320          		if (!StartupGoToRaceMode())
   \   000003B4   ........           BL       StartupGoToRaceMode
   \   000003B8   000050E3           CMP      R0,#+0
   \   000003BC   0500001A           BNE      ??MainTask_19
    321          		{
    322          			screenType = CONFIG_SCREEN_TYPE;		// Go to Config Screens group instead
   \   000003C0   01A0A0E3           MOV      R10,#+1
    323          			screen = GO_RACING;						// Go Racing screen
   \   000003C4   0090A0E3           MOV      R9,#+0
   \   000003C8   2C0000EA           B        ??MainTask_20
   \                     ??MainTask_1:
   \   000003CC   00000000           DC8      "",0x0,0x0,0x0
    324          		}
    325          	}
    326          	else SetUserMode(DU2_IDLE);
   \                     ??MainTask_18:
   \   000003D0   0100A0E3           MOV      R0,#+1
   \   000003D4   ........           BL       SetUserMode
    327          
    328          	switch (screenType)
   \                     ??MainTask_19:
   \   000003D8   01004AE2           SUB      R0,R10,#+1
   \   000003DC   240050E3           CMP      R0,#+36
   \   000003E0   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??MainTask_0:
   \   000003E4   5900008A           BHI      ??MainTask_21
   \   000003E8   240000EA           B        ??MainTask_20
   \   000003EC   590000EA           B        ??MainTask_22
   \   000003F0   580000EA           B        ??MainTask_22
   \   000003F4   570000EA           B        ??MainTask_22
   \   000003F8   1F0000EA           B        ??MainTask_23
   \   000003FC   1F0000EA           B        ??MainTask_20
   \   00000400   1E0000EA           B        ??MainTask_20
   \   00000404   220000EA           B        ??MainTask_24
   \   00000408   1C0000EA           B        ??MainTask_20
   \   0000040C   1B0000EA           B        ??MainTask_20
   \   00000410   220000EA           B        ??MainTask_25
   \   00000414   270000EA           B        ??MainTask_26
   \   00000418   180000EA           B        ??MainTask_20
   \   0000041C   170000EA           B        ??MainTask_20
   \   00000420   310000EA           B        ??MainTask_27
   \   00000424   2A0000EA           B        ??MainTask_28
   \   00000428   480000EA           B        ??MainTask_21
   \   0000042C   2E0000EA           B        ??MainTask_27
   \   00000430   460000EA           B        ??MainTask_21
   \   00000434   450000EA           B        ??MainTask_21
   \   00000438   210000EA           B        ??MainTask_29
   \   0000043C   430000EA           B        ??MainTask_21
   \   00000440   420000EA           B        ??MainTask_21
   \   00000444   410000EA           B        ??MainTask_21
   \   00000448   400000EA           B        ??MainTask_21
   \   0000044C   3F0000EA           B        ??MainTask_21
   \   00000450   2B0000EA           B        ??MainTask_30
   \   00000454   3D0000EA           B        ??MainTask_21
   \   00000458   3C0000EA           B        ??MainTask_21
   \   0000045C   3B0000EA           B        ??MainTask_21
   \   00000460   3A0000EA           B        ??MainTask_21
   \   00000464   290000EA           B        ??MainTask_31
   \   00000468   2E0000EA           B        ??MainTask_32
   \   0000046C   2A0000EA           B        ??MainTask_33
   \   00000470   2F0000EA           B        ??MainTask_34
   \   00000474   350000EA           B        ??MainTask_21
   \   00000478   300000EA           B        ??MainTask_35
    329          	{
    330          		case DRIVE_MODE_SCREEN_TYPE:
    331          		case INSTRUMENTS_MODE_SCREEN_TYPE:
    332          		case GAUGES_SCREEN_TYPE:
    333          			// Screen transition handled in StartupGoToRaceMode
    334          			break;
    335          
    336          		case RACE_SETUP_SCREENS_TYPE:
    337          			SetWorkingTrackName();
   \                     ??MainTask_23:
   \   0000047C   ........           BL       SetWorkingTrackName
    338          			// fall through...
    339          		case CONFIG_SCREEN_TYPE:
    340          		case SYSTEM_SETTINGS_SCREENS_TYPE:
    341          		case VEHICLE_SETTINGS_SCREENS_TYPE:
    342          		case TACH_SETUP_SCREENS_TYPE:
    343          		case INPUTS_SCREENS_TYPE:
    344          		case TRACK_SETTINGS_SCREENS_TYPE:
    345          		case GEARING_SCREENS_TYPE:
    346          		//case SFSCREENS_TYPE:
    347          			DisplayNewScreenList(screenType, screen, (WM_HWIN)NULL);
   \                     ??MainTask_20:
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   0910A0E1           MOV      R1,R9
   \   00000488   0A00A0E1           MOV      R0,R10
   \                     ??MainTask_36:
   \   0000048C   ........           BL       DisplayNewScreenList
    348          			break;
   \   00000490   300000EA           B        ??MainTask_22
    349          
    350          		case VEHICLE_SETTING_SCREEN_TYPE:
    351          			Display_VehicleSettingMainScreen((WM_HWIN)NULL);
   \                     ??MainTask_24:
   \   00000494   0000A0E3           MOV      R0,#+0
   \   00000498   ........           BL       Display_VehicleSettingMainScreen
    352          			break;
   \   0000049C   2D0000EA           B        ??MainTask_22
    353          
    354          		case REVIEW_SESSIONS_SCREENS_TYPE:
    355          			if (sysData.navigatedToReviewAfterRace == true)		// See if we navigated by race exit to the review screen
   \                     ??MainTask_25:
   \   000004A0   ........           LDR      R0,??DataTable106
   \   000004A4   E400D0E5           LDRB     R0,[R0, #+228]
   \   000004A8   010050E3           CMP      R0,#+1
   \   000004AC   2700000A           BEQ      ??MainTask_21
    356          				Display_GeneralConfig((WM_HWIN)NULL);			// If so just go to main menu
    357          			else DisplaySessionDetailsScreen();					// otherwise go ahead to review screen
   \   000004B0   ........           BL       DisplaySessionDetailsScreen
   \   000004B4   270000EA           B        ??MainTask_22
    358          			break;
    359          
    360          		case TRACK_SETTING_SCREEN_TYPE:
    361          			Display_TrackSettingMainScreen((WM_HWIN)NULL);
   \                     ??MainTask_26:
   \   000004B8   0000A0E3           MOV      R0,#+0
   \   000004BC   ........           BL       Display_TrackSettingMainScreen
    362          			break;
   \   000004C0   240000EA           B        ??MainTask_22
    363          
    364          		case SFSCREENS_TYPE:
    365          			DisplaySFKeyboard(screen, (WM_HWIN)NULL);
   \                     ??MainTask_29:
   \   000004C4   0010A0E3           MOV      R1,#+0
   \   000004C8   0900A0E1           MOV      R0,R9
   \   000004CC   ........           BL       DisplaySFKeyboard
    366          			break;
   \   000004D0   200000EA           B        ??MainTask_22
    367          
    368          			// Do not support returning directly to last selected digital or analog settings screen type.
    369          			// Global data is set up in INPUTS_SCREENS_TYPE that is required but is not saved at power down.
    370          		case DIGITAL_SETTINGS_SCREEN_TYPE:
    371          			DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetLastScreen(INPUTS_SCREENS_TYPE), (WM_HWIN)NULL);
   \                     ??MainTask_28:
   \   000004D4   0A00A0E3           MOV      R0,#+10
   \   000004D8   ........           BL       GetLastScreen
   \   000004DC   0010A0E1           MOV      R1,R0
   \   000004E0   0020A0E3           MOV      R2,#+0
   \   000004E4   0A00A0E3           MOV      R0,#+10
   \   000004E8   E7FFFFEA           B        ??MainTask_36
    372          			break;
    373          
    374          		case ANALOG_SETTINGS_SCREEN_TYPE:
    375          		case ANALOG_INPUTS_SCALE:
    376          			DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetLastScreen(INPUTS_SCREENS_TYPE), (WM_HWIN)NULL);
   \                     ??MainTask_27:
   \   000004EC   0A00A0E3           MOV      R0,#+10
   \   000004F0   ........           BL       GetLastScreen
   \   000004F4   0010A0E1           MOV      R1,R0
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0A00A0E3           MOV      R0,#+10
   \   00000500   E1FFFFEA           B        ??MainTask_36
    377          			break;
    378          
    379          		case PERSONALIZE_REVIEW_SCREEN_TYPE:
    380          			DisplayPersonalizationScreen((WM_HWIN)NULL);
   \                     ??MainTask_30:
   \   00000504   0000A0E3           MOV      R0,#+0
   \   00000508   ........           BL       DisplayPersonalizationScreen
    381          			break;
   \   0000050C   110000EA           B        ??MainTask_22
    382          
    383          		case AERO_GRIP_SCREEN_TYPE:
    384          			CreateAeroGripScreen((WM_HWIN)NULL);
   \                     ??MainTask_31:
   \   00000510   0000A0E3           MOV      R0,#+0
   \   00000514   ........           BL       CreateAeroGripScreen
    385          			break;
   \   00000518   0E0000EA           B        ??MainTask_22
    386          
    387          		case CAMERA_DELAY_SCREEN_TYPE:
    388          			CreateCameraDelay((WM_HWIN)NULL);
   \                     ??MainTask_33:
   \   0000051C   0000A0E3           MOV      R0,#+0
   \   00000520   ........           BL       CreateCameraDelay
    389          			break;
   \   00000524   0B0000EA           B        ??MainTask_22
    390          
    391          		case CAMERA_SELECTION_SCREEN_TYPE:
    392          			CreateCameraSelection((WM_HWIN)NULL);
   \                     ??MainTask_32:
   \   00000528   0000A0E3           MOV      R0,#+0
   \   0000052C   ........           BL       CreateCameraSelection
    393          			break;
   \   00000530   080000EA           B        ??MainTask_22
    394          
    395          		case TRAQDASH_CAMERA_SCREEN:
    396          			CreateTraqdashCamScreen((WM_HWIN)NULL);
   \                     ??MainTask_34:
   \   00000534   0000A0E3           MOV      R0,#+0
   \   00000538   ........           BL       CreateTraqdashCamScreen
    397          			break;
   \   0000053C   050000EA           B        ??MainTask_22
    398          
    399          		case RECORD_SPEED_SCREEN_TYPE:
    400          			DisplayNewScreenList(SYSTEM_SETTINGS_SCREENS_TYPE, RECORD_SPEED, (WM_HWIN)NULL);
   \                     ??MainTask_35:
   \   00000540   0020A0E3           MOV      R2,#+0
   \   00000544   0610A0E3           MOV      R1,#+6
   \   00000548   0600A0E3           MOV      R0,#+6
   \   0000054C   CEFFFFEA           B        ??MainTask_36
    401          			break;
    402          
    403          		default:
    404          			Display_GeneralConfig((WM_HWIN)NULL);
   \                     ??MainTask_21:
   \   00000550   0000A0E3           MOV      R0,#+0
   \   00000554   ........           BL       Display_GeneralConfig
    405          			break;
    406          	}
    407          	
    408          	SetGear(GEAR_RESET);	// initialize gear tables
   \                     ??MainTask_22:
   \   00000558   0000A0E3           MOV      R0,#+0
   \   0000055C   ........           BL       SetGear
    409          	
    410          #ifndef _WINDOWS
    411          	// check for demo mode
    412          	if (demoMode) {
   \   00000560   040098E5           LDR      R0,[R8, #+4]
   \   00000564   000050E3           CMP      R0,#+0
   \   00000568   1300000A           BEQ      ??MainTask_37
    413          		if (OS_IsTask(&commTCB))
   \   0000056C   ........           LDR      R9,??DataTable107
   \   00000570   0900A0E1           MOV      R0,R9
   \   00000574   ........           BL       OS_IsTask
   \   00000578   000050E3           CMP      R0,#+0
   \   0000057C   0100000A           BEQ      ??MainTask_38
    414          			OS_Terminate(&commTCB);		// kill comm task
   \   00000580   0900A0E1           MOV      R0,R9
   \   00000584   ........           BL       OS_Terminate
    415          						
    416          		OS_CREATETASK(&commTCB, "CommSimulatorTask", CommSimulatorTask, 120, commStack);
   \                     ??MainTask_38:
   \   00000588   0200A0E3           MOV      R0,#+2
   \   0000058C   08008DE5           STR      R0,[SP, #+8]
   \   00000590   400DA0E3           MOV      R0,#+4096
   \   00000594   04008DE5           STR      R0,[SP, #+4]
   \   00000598   ........           LDR      R0,??DataTable108
   \   0000059C   ........           LDR      R3,??DataTable108_1
   \   000005A0   00008DE5           STR      R0,[SP, #+0]
   \   000005A4   7820A0E3           MOV      R2,#+120
   \   000005A8   ............       ADRL     R1,`?<Constant "CommSimulatorTask">`
   \              ....        
   \   000005B0   0900A0E1           MOV      R0,R9
   \   000005B4   ........           BL       OS_CreateTask_DP
   \   000005B8   010000EA           B        ??MainTask_39
    417          	} // if
    418          	else
    419          		OS_Delay(500);					// give comm a chance to find mr. su
   \                     ??MainTask_37:
   \   000005BC   7D1FA0E3           MOV      R1,#+500
   \   000005C0   ........           BL       PF_OS_Delay
   \                     ??MainTask_39:
   \   000005C4   ........           LDR      R0,??DataTable106
   \   000005C8   DC0090E5           LDR      R0,[R0, #+220]
   \   000005CC   000050E3           CMP      R0,#+0
   \   000005D0   0900001A           BNE      ??MainTask_40
    420          	
    421          	// check for initial calibration of LED temperature
    422          	if (0 == sysData.calibrationTempReading) {
    423          		sysData.calibrationTemperature = ROOM_TEMPERATURE;				// Default calibration temp assumed to be 24C = 75F, units always stored in metric
   \   000005D4   ........           LDR      R0,??DataTable106
   \   000005D8   1810A0E3           MOV      R1,#+24
   \   000005DC   D81080E5           STR      R1,[R0, #+216]
    424          		sysData.calibrationTempReading = GetADC(ADC_LED_BOARD_TEMP);	// Take current board reading and set temp correction offset
   \   000005E0   0500A0E3           MOV      R0,#+5
   \   000005E4   ........           BL       GetADC
   \   000005E8   ........           LDR      R1,??DataTable106
   \   000005EC   DC0081E5           STR      R0,[R1, #+220]
    425          		sysData.LEDtempOffset = CalculateTempCorrection();				// Calculate hardware correction factor
   \   000005F0   ........           BL       CalculateTempCorrection
   \   000005F4   ........           LDR      R1,??DataTable106
   \   000005F8   E00081E5           STR      R0,[R1, #+224]
    426          	} // if
    427          	
    428          	// Done with initialization - drop the priority of the main task to ensure file writes and comm tasks have the priority
    429          	OS_SetPriority(&mainTCB, 5);
   \                     ??MainTask_40:
   \   000005FC   0520A0E3           MOV      R2,#+5
   \   00000600   ........           LDR      R1,??DataTable108_2
   \   00000604   0000A0E3           MOV      R0,#+0
   \   00000608   ........           BL       PF_OS_SetPriority
   \   0000060C   ........           LDR      R9,??DataTable108_3
   \   00000610   ........           LDR      R10,??DataTable105_2
   \   00000614   500000EA           B        ??MainTask_41
    430          #endif
    431          		
    432          	// Main task loop
    433          	while(1)
    434          	{
    435          		static unsigned debounce = 0;	// used to count up button press debounce
    436          	
    437          		ProcessScreenMovement();
    438          	
    439          		GUI_Exec();
    440          		lockupSemaphore = false;			// returned back to main - clear lockup semaphore
    441          	
    442          #ifdef BUILD_DEBUG_PORT
    443          		if (glbErrorFlag)
    444          			DBGU_Print("Error detected!\n\r");
    445          #endif
    446          	
    447          #ifdef _WINDOWS
    448          		if (SIM_Tick())
    449          		{
    450          			PowerOffUnit((WM_HWIN)NULL, false, 0);
    451          			return;
    452          		}
    453          #else
    454          		// check ON/OFF button
    455          		if (!sysData.autoOn) {			// disable DU power switch if AutoOn is enabled
    456          			if (0 == (PIOD_PDSR & (1 << ONOFF_BUTTON))) {	// if switch pressed, count up
    457          	
    458          				// if switch first pressed, remember the time
    459          				if (0 == debounce)
    460          					debounce = OS_GetTime();
    461          				else {
    462          					// power off if switch was held more than ON/OFF period
    463          					if (OS_GetTime() > (debounce  + DEBOUNCE_ONOFF_MSEC)) {				// initiate shutdown sequence
   \                     ??MainTask_42:
   \   00000618   ........           LDR      R1,??DataTable108_4
   \   0000061C   FA0F80E2           ADD      R0,R0,#+1000
   \   00000620   1C1091E5           LDR      R1,[R1, #+28]
   \   00000624   010050E1           CMP      R0,R1
   \   00000628   2E00002A           BCS      ??MainTask_43
    464          						PowerOffUnit((WM_HWIN)NULL, false, 0);
   \   0000062C   8800D4E5           LDRB     R0,[R4, #+136]
   \   00000630   010050E3           CMP      R0,#+1
   \   00000634   0100000A           BEQ      ??MainTask_44
   \   00000638   0100A0E3           MOV      R0,#+1
   \   0000063C   ........           BL       ExitRecord
   \                     ??MainTask_44:
   \   00000640   ........           BL       HideSprites
   \   00000644   ........           LDR      R0,??DataTable105_1
   \   00000648   007080E5           STR      R7,[R0, #+0]
   \   0000064C   0000A0E3           MOV      R0,#+0
   \   00000650   ........           BL       SetPopupDefaults
   \   00000654   0A00A0E3           MOV      R0,#+10
   \   00000658   04008DE5           STR      R0,[SP, #+4]
   \   0000065C   00008DE5           STR      R0,[SP, #+0]
   \   00000660   0030A0E3           MOV      R3,#+0
   \   00000664   0920A0E1           MOV      R2,R9
   \   00000668   0210A0E3           MOV      R1,#+2
   \   0000066C   ............       ADRL     R0,ShuttingDownResources
   \              ....        
   \   00000674   ........           BL       GUI_CreateDialogBox
   \   00000678   00B0A0E1           MOV      R11,R0
   \   0000067C   ........           BL       GUI_Exec
   \   00000680   1E00A0E3           MOV      R0,#+30
   \   00000684   ........           BL       SetUserMode
   \   00000688   0000A0E3           MOV      R0,#+0
   \   0000068C   ........           BL       WriteUserDataEvent
   \   00000690   0600A0E1           MOV      R0,R6
   \   00000694   ........           BL       FS_Unmount
   \   00000698   0100A0E3           MOV      R0,#+1
   \   0000069C   ........           BL       GUI_Delay
   \   000006A0   0B00A0E1           MOV      R0,R11
   \   000006A4   ........           BL       WM_DeleteWindow
   \   000006A8   0A00A0E3           MOV      R0,#+10
   \   000006AC   04008DE5           STR      R0,[SP, #+4]
   \   000006B0   00008DE5           STR      R0,[SP, #+0]
   \   000006B4   0030A0E3           MOV      R3,#+0
   \   000006B8   0920A0E1           MOV      R2,R9
   \   000006BC   0310A0E3           MOV      R1,#+3
   \   000006C0   ............       ADRL     R0,SafeToPowerOffUnit
   \              ....        
   \   000006C8   ........           BL       GUI_CreateDialogBox
   \   000006CC   ........           BL       GUI_Exec
   \   000006D0   6010A0E3           MOV      R1,#+96
   \   000006D4   EA1C81E3           ORR      R1,R1,#0xEA00
   \   000006D8   0000A0E3           MOV      R0,#+0
   \   000006DC   ........           BL       PF_OS_Delay
    465          					} // if
    466          				} // else
   \   000006E0   000000EA           B        ??MainTask_43
    467          			} // if
    468          			else {
    469          				// if button not pressed, reset ONOFF counter
    470          				debounce = 0;
   \                     ??MainTask_45:
   \   000006E4   105088E5           STR      R5,[R8, #+16]
    471          			} // else
    472          		} // if
    473          		
    474          		// check status of SD card
    475          		if (FS_MCI_HW_IsCardPresent(0))
   \                     ??MainTask_43:
   \   000006E8   0000A0E3           MOV      R0,#+0
   \   000006EC   ........           BL       FS_MCI_HW_IsCardPresent
   \   000006F0   000050E3           CMP      R0,#+0
   \   000006F4   3200000A           BEQ      ??MainTask_46
    476          		{
    477          			// SD card is present - see if it was previously not there
    478          			if (!localSDCardFlag)
   \   000006F8   1500D8E5           LDRB     R0,[R8, #+21]
   \   000006FC   000050E3           CMP      R0,#+0
   \   00000700   1300001A           BNE      ??MainTask_47
    479          			{
    480          				// SD card just inserted
    481          				SDCardReinserted();					// See what we're going to do
   \   00000704   ........           BL       HideSprites
   \   00000708   0200A0E3           MOV      R0,#+2
   \   0000070C   ........           BL       SetPopupDefaults
   \   00000710   ........           LDR      R0,??DataTable105_1
   \   00000714   007080E5           STR      R7,[R0, #+0]
   \   00000718   ........           BL       WM_GetDesktopWindow
   \   0000071C   0030A0E1           MOV      R3,R0
   \   00000720   0A00A0E3           MOV      R0,#+10
   \   00000724   04008DE5           STR      R0,[SP, #+4]
   \   00000728   00008DE5           STR      R0,[SP, #+0]
   \   0000072C   0A20A0E1           MOV      R2,R10
   \   00000730   0310A0E3           MOV      R1,#+3
   \   00000734   ............       ADRL     R0,??SDCardReinsertedResources
   \              ....        
   \   0000073C   ........           BL       GUI_ExecDialogBox
   \   00000740   010050E3           CMP      R0,#+1
   \   00000744   0000001A           BNE      ??MainTask_48
   \   00000748   ........           BL       reset
   \                     ??MainTask_48:
   \   0000074C   ........           BL       UnhideSprites
    482          				localSDCardFlag = true;
   \   00000750   1570C8E5           STRB     R7,[R8, #+21]
    483          			}
    484          			// else - otherwise card was already there - no change - keep on truckin'
    485          		}
    486          		else
    487          		{
    488          			localSDCardFlag = false;				// SD card now not present
    489          			// SD card not present - see if it was previously there
    490          			if (unsavedSysData.sdCardInserted)
    491          			{
    492          				ConfigureForNoSDCard();
    493          
    494          				// See what we're going to do
    495          				if (SDCardRemoved() == false)
    496          				{
    497          					SetUserMode(DU2_SHUTDOWN);	// Do not go through normal power off sequence as we cannot save data - tell comm and laptimer to stop recording and shut off power at SU
    498          					while (1)					// Stop here
    499          						GUI_Exec();				// Allow other tasks to communicate with the SU to pull the plug (note: we cannot save files as there is no SD card present)
    500          				}
    501          			}
    502          		}
    503          
    504          // *** TEST		OS_Delay(1);								// Allow other tasks a chance to run
    505          		OS_Yield();								// Allow other tasks a chance to run
   \                     ??MainTask_47:
   \   00000754   0000A0E3           MOV      R0,#+0
   \                     ??MainTask_49:
   \   00000758   ........           BL       PF_OS_Yield
   \                     ??MainTask_41:
   \   0000075C   ........           BL       ProcessScreenMovement
   \   00000760   ........           BL       GUI_Exec
   \   00000764   ........           LDR      R0,??DataTable109_1
   \   00000768   1450C8E5           STRB     R5,[R8, #+20]
   \   0000076C   000090E5           LDR      R0,[R0, #+0]
   \   00000770   000050E3           CMP      R0,#+0
   \   00000774   0200000A           BEQ      ??MainTask_50
   \   00000778   ............       ADRL     R0,`?<Constant "Error detected!\\n\\r">`
   \              ....        
   \   00000780   ........           BL       DBGU_Print
   \                     ??MainTask_50:
   \   00000784   ........           LDR      R0,??DataTable106
   \   00000788   7C00D0E5           LDRB     R0,[R0, #+124]
   \   0000078C   000050E3           CMP      R0,#+0
   \   00000790   D4FFFF1A           BNE      ??MainTask_43
   \   00000794   C300E0E3           MVN      R0,#+195
   \   00000798   500EC0E3           BIC      R0,R0,#0x500
   \   0000079C   000090E5           LDR      R0,[R0, #+0]
   \   000007A0   010010E3           TST      R0,#0x1
   \   000007A4   CEFFFF1A           BNE      ??MainTask_45
   \   000007A8   100098E5           LDR      R0,[R8, #+16]
   \   000007AC   000050E3           CMP      R0,#+0
   \   000007B0   98FFFF1A           BNE      ??MainTask_42
   \   000007B4   ........           LDR      R0,??DataTable108_4
   \   000007B8   1C0090E5           LDR      R0,[R0, #+28]
   \   000007BC   100088E5           STR      R0,[R8, #+16]
   \   000007C0   C8FFFFEA           B        ??MainTask_43
   \                     ??MainTask_46:
   \   000007C4   C00094E5           LDR      R0,[R4, #+192]
   \   000007C8   1550C8E5           STRB     R5,[R8, #+21]
   \   000007CC   000050E3           CMP      R0,#+0
   \   000007D0   E0FFFF0A           BEQ      ??MainTask_49
   \   000007D4   C05084E5           STR      R5,[R4, #+192]
   \   000007D8   0600A0E1           MOV      R0,R6
   \   000007DC   ........           BL       FS_Unmount
   \   000007E0   8800D4E5           LDRB     R0,[R4, #+136]
   \   000007E4   030040E2           SUB      R0,R0,#+3
   \   000007E8   FF0000E2           AND      R0,R0,#0xFF
   \   000007EC   130050E3           CMP      R0,#+19
   \   000007F0   0100002A           BCS      ??MainTask_51
   \   000007F4   0400A0E3           MOV      R0,#+4
   \   000007F8   ........           BL       notifyTQM
   \                     ??MainTask_51:
   \   000007FC   0200A0E3           MOV      R0,#+2
   \   00000800   8800C4E5           STRB     R0,[R4, #+136]
   \   00000804   0100A0E3           MOV      R0,#+1
   \   00000808   ........           BL       ResetAllFileLists
   \   0000080C   ........           BL       ClearNameStruct
   \   00000810   ........           BL       HideSprites
   \   00000814   0200A0E3           MOV      R0,#+2
   \   00000818   ........           BL       SetPopupDefaults
   \   0000081C   ........           LDR      R0,??DataTable105_1
   \   00000820   007080E5           STR      R7,[R0, #+0]
   \   00000824   ........           BL       WM_GetDesktopWindow
   \   00000828   0A10A0E3           MOV      R1,#+10
   \   0000082C   04108DE5           STR      R1,[SP, #+4]
   \   00000830   00108DE5           STR      R1,[SP, #+0]
   \   00000834   0030A0E1           MOV      R3,R0
   \   00000838   0A20A0E1           MOV      R2,R10
   \   0000083C   0510A0E3           MOV      R1,#+5
   \   00000840   ............       ADRL     R0,??SDCardRemovedResources
   \              ....        
   \   00000848   ........           BL       GUI_ExecDialogBox
   \   0000084C   010050E3           CMP      R0,#+1
   \   00000850   0100000A           BEQ      ??MainTask_52
   \   00000854   ........           BL       UnhideSprites
   \   00000858   BDFFFFEA           B        ??MainTask_47
   \                     ??MainTask_52:
   \   0000085C   ........           BL       UnhideSprites
   \   00000860   1E00A0E3           MOV      R0,#+30
   \   00000864   ........           BL       SetUserMode
   \                     ??MainTask_53:
   \   00000868   ........           BL       GUI_Exec
   \   0000086C   FDFFFFEA           B        ??MainTask_53
    506          #endif
    507          	}
    508          }

   \                                 In section .bss, align 4
   \                     testMode:
   \   00000000                      DS8 4
   \                     demoMode:
   \   00000004                      DS8 4
   \                     factMode:
   \   00000008                      DS8 4
   \                     splashScreenStartTime:
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \                     lockupSemaphore:
   \   00000014                      DS8 1
   \   00000015                      DS8 1
   \   00000016                      DS8 1
    509          
    510          //
    511          // SD card was just removed - configure the system to run without it
    512          //

   \                                 In section .text, align 4, keep-with-next
    513          void ConfigureForNoSDCard(void)
    514          {
   \                     ConfigureForNoSDCard:
   \   00000000   10402DE9           PUSH     {R4,LR}
    515          	// SD card was just removed
    516          	unsavedSysData.sdCardInserted = 0;		// new status
   \   00000004   ........           LDR      R4,??DataTable103
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   C00084E5           STR      R0,[R4, #+192]
    517          
    518          #ifndef _WINDOWS
    519          	// Unmount all drives (flushes cache)
    520          	FS_Unmount("");			// gas commented out. in my tests unmounting a volume that is ejected causes unpredictable results
   \   00000010   ........           ADR      R0,??DataTable98  ;; ""
   \   00000014   ........           BL       FS_Unmount
    521          
    522          	if (DU2_RECORDING(unsavedSysData.systemMode))
   \   00000018   8800D4E5           LDRB     R0,[R4, #+136]
   \   0000001C   030040E2           SUB      R0,R0,#+3
   \   00000020   FF0000E2           AND      R0,R0,#0xFF
   \   00000024   130050E3           CMP      R0,#+19
   \   00000028   0100002A           BCS      ??ConfigureForNoSDCard_0
    523          		notifyTQM(DU2_SDCARD_EJECT);
   \   0000002C   0400A0E3           MOV      R0,#+4
   \   00000030   ........           BL       notifyTQM
    524          #endif
    525          
    526          	unsavedSysData.systemMode = DU2_NOSDCARD;
   \                     ??ConfigureForNoSDCard_0:
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   8800C4E5           STRB     R0,[R4, #+136]
    527          	
    528          	// Reset all lists and tables
    529          	ResetAllFileLists(true);
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   ........           BL       ResetAllFileLists
    530          
    531          	ClearNameStruct();					// Erase session notes line (used on Race Review screen)
   \   00000044   1040BDE8           POP      {R4,LR}
   \   00000048   ........           B        ClearNameStruct  ;; tailcall
    532          }
    533          
    534          #ifndef _WINDOWS
    535          //
    536          // SD card not inserted at powerup.
    537          // Display a modal dialog box to ask user to insert an SD card and retry
    538          //
    539          // Returns	YES - retry
    540          //			NO - just go on
    541          //

   \                                 In section .text, align 4, keep-with-next
    542          int RetrySDCard(void)
    543          {
   \                     RetrySDCard:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    544          static const GUI_WIDGET_CREATE_INFO NoSDCardResources[] = {
    545          	{ FRAMEWIN_CreateIndirect, "SD CARD NOT READY!", 0, 50, 20, 360, 220, 0, 0 },
    546          	{ TEXT_CreateIndirect, "No SD card or write protected", 0, 0, 30, 360, 30, TEXT_CF_HCENTER },
    547          	{ TEXT_CreateIndirect, "Insert SD card now or power down", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    548          	{ BUTTON_CreateIndirect, "RETRY",		GUI_ID_OK,		20, 115, 100, 60 },
    549          	{ BUTTON_CreateIndirect, "POWER DOWN", GUI_ID_CANCEL, 160, 115, 180, 60 }
    550          };
    551          
    552          	SetPopupDefaults(ERROR_POPUP);
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   ........           BL       SetPopupDefaults
    553          
    554          	glbBlackoutFlag = true;			// Suspend gauge screen updates while the modal popup dialog box is diaplyed
   \   00000010   ........           LDR      R5,??DataTable105_1
   \   00000014   0160A0E3           MOV      R6,#+1
   \   00000018   006085E5           STR      R6,[R5, #+0]
    555          
    556          	if (GUI_ExecDialogBox(NoSDCardResources, GUI_COUNTOF(NoSDCardResources), &popupCallback, WM_GetDesktopWindow(), 10, 10) == GUI_ID_OK)
   \   0000001C   ........           BL       WM_GetDesktopWindow
   \   00000020   0A10A0E3           MOV      R1,#+10
   \   00000024   04108DE5           STR      R1,[SP, #+4]
   \   00000028   00108DE5           STR      R1,[SP, #+0]
   \   0000002C   0030A0E1           MOV      R3,R0
   \   00000030   ........           LDR      R2,??DataTable105_2
   \   00000034   0510A0E3           MOV      R1,#+5
   \   00000038   ............       ADRL     R0,??NoSDCardResources
   \              ....        
   \   00000040   ........           BL       GUI_ExecDialogBox
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   3000000A           BEQ      ??RetrySDCard_0
    557          		return true;
    558          	else
    559          	{
    560          		PowerOffUnit(WM_GetDesktopWindow(), false, 1000);				// Pause for 1 second to allow time for the SU to process the new camera setting
   \   0000004C   ........           BL       WM_GetDesktopWindow
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   ........           LDR      R0,??DataTable103
   \   00000058   8800D0E5           LDRB     R0,[R0, #+136]
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   0100000A           BEQ      ??RetrySDCard_1
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   ........           BL       ExitRecord
   \                     ??RetrySDCard_1:
   \   0000006C   ........           BL       HideSprites
   \   00000070   006085E5           STR      R6,[R5, #+0]
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   ........           BL       SetPopupDefaults
   \   0000007C   ........           LDR      R5,??DataTable108_3
   \   00000080   0A00A0E3           MOV      R0,#+10
   \   00000084   04008DE5           STR      R0,[SP, #+4]
   \   00000088   00008DE5           STR      R0,[SP, #+0]
   \   0000008C   0430A0E1           MOV      R3,R4
   \   00000090   0520A0E1           MOV      R2,R5
   \   00000094   0210A0E3           MOV      R1,#+2
   \   00000098   ............       ADRL     R0,ShuttingDownResources
   \              ....        
   \   000000A0   ........           BL       GUI_CreateDialogBox
   \   000000A4   0060A0E1           MOV      R6,R0
   \   000000A8   ........           BL       GUI_Exec
   \   000000AC   1E00A0E3           MOV      R0,#+30
   \   000000B0   ........           BL       SetUserMode
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   ........           BL       WriteUserDataEvent
   \   000000BC   ........           ADR      R0,??DataTable98  ;; ""
   \   000000C0   ........           BL       FS_Unmount
   \   000000C4   FA0FA0E3           MOV      R0,#+1000
   \   000000C8   ........           BL       GUI_Delay
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   ........           BL       WM_DeleteWindow
   \   000000D4   0A00A0E3           MOV      R0,#+10
   \   000000D8   04008DE5           STR      R0,[SP, #+4]
   \   000000DC   00008DE5           STR      R0,[SP, #+0]
   \   000000E0   0430A0E1           MOV      R3,R4
   \   000000E4   0520A0E1           MOV      R2,R5
   \   000000E8   0310A0E3           MOV      R1,#+3
   \   000000EC   ............       ADRL     R0,SafeToPowerOffUnit
   \              ....        
   \   000000F4   ........           BL       GUI_CreateDialogBox
   \   000000F8   ........           BL       GUI_Exec
   \   000000FC   6010A0E3           MOV      R1,#+96
   \   00000100   EA1C81E3           ORR      R1,R1,#0xEA00
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   ........           BL       PF_OS_Delay
    561          		return false;
   \   0000010C   0000A0E3           MOV      R0,#+0
   \                     ??RetrySDCard_0:
   \   00000110   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000114   7080BDE8           POP      {R4-R6,PC}       ;; return
    562          	}
    563          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??NoSDCardResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "SD CARD NOT READY!">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "No SD card or write p...">`
   \              ............
   \   00000020   000000001E00       DC16 0, 0, 30, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Insert SD card now or...">`
   \              ....        
   \   00000038   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "RETRY">`
   \              ....        
   \   00000050   010014007300       DC16 1, 20, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "POWER DOWN">`
   \              ....        
   \   00000068   0200A0007300       DC16 2, 160, 115, 180, 60
   \              B4003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
    564          #endif
    565          
    566          //#define BUTTON_SKINFLEX_PI_PRESSED     0
    567          //#define BUTTON_SKINFLEX_PI_FOCUSSED    1
    568          //#define BUTTON_SKINFLEX_PI_ENABLED     2
    569          //#define BUTTON_SKINFLEX_PI_DISABLED    3
    570          
    571          //
    572          // Perform standard initialization for error message popups
    573          //

   \                                 In section .text, align 4, keep-with-next
    574          void SetPopupDefaults(enum POPUP_TYPES type)
    575          {
   \                     SetPopupDefaults:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
    576          	FRAMEWIN_SKINFLEX_PROPS Props;
    577          	//BUTTON_SKINFLEX_PROPS ButtonProps;
    578          
    579          	switch (type)
   \   00000008   030050E3           CMP      R0,#+3
   \   0000000C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SetPopupDefaults_0:
   \   00000010   3F00008A           BHI      ??SetPopupDefaults_1
   \   00000014   020000EA           B        ??SetPopupDefaults_2
   \   00000018   0D0000EA           B        ??SetPopupDefaults_3
   \   0000001C   200000EA           B        ??SetPopupDefaults_4
   \   00000020   270000EA           B        ??SetPopupDefaults_5
    580          	{
    581          	case INFORMATIONAL_POPUP:
    582          		FRAMEWIN_GetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \                     ??SetPopupDefaults_2:
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           BL       FRAMEWIN_GetSkinFlexProps
    583          		Props.aColorFrame[0] = 0x000000;
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   00108DE5           STR      R1,[SP, #+0]
    584          		Props.aColorFrame[1] = 0xffd070;
   \   00000038   ........           LDR      R0,??DataTable110_2  ;; 0xffd070
    585          		Props.aColorFrame[2] = 0xaf0000;
   \   0000003C   AF18A0E3           MOV      R1,#+11468800
   \   00000040   04008DE5           STR      R0,[SP, #+4]
   \   00000044   08108DE5           STR      R1,[SP, #+8]
    586          		Props.aColorTitle[0] = 0xaf0000;
   \   00000048   0C108DE5           STR      R1,[SP, #+12]
    587          		Props.aColorTitle[1] = 0xffd070;
   \   0000004C   10008DE5           STR      R0,[SP, #+16]
    588          		Props.Radius = 7;
   \   00000050   270000EA           B        ??SetPopupDefaults_6
    589          		FRAMEWIN_SetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
    590          		popupTitleTextColor = GUI_WHITE;
    591          		break;
    592          
    593          	case WARNING_POPUP:
    594          		FRAMEWIN_GetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \                     ??SetPopupDefaults_3:
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           BL       FRAMEWIN_GetSkinFlexProps
    595          		Props.aColorFrame[0] = 0x000000;
    596          		Props.aColorFrame[1] = 0x0096ff;
   \   00000060   FF00A0E3           MOV      R0,#+255
   \   00000064   960C80E3           ORR      R0,R0,#0x9600
    597          		Props.aColorFrame[2] = 0x00ffff;
   \   00000068   691C80E3           ORR      R1,R0,#0x6900
   \   0000006C   08108DE5           STR      R1,[SP, #+8]
    598          		Props.aColorTitle[0] = 0x0096ff;
    599          		Props.aColorTitle[1] = 0x00ffff;
   \   00000070   10108DE5           STR      R1,[SP, #+16]
    600          		Props.Radius = 7;
   \   00000074   0710A0E3           MOV      R1,#+7
   \   00000078   0040A0E3           MOV      R4,#+0
   \   0000007C   04008DE5           STR      R0,[SP, #+4]
   \   00000080   0C008DE5           STR      R0,[SP, #+12]
   \   00000084   14108DE5           STR      R1,[SP, #+20]
   \   00000088   00408DE5           STR      R4,[SP, #+0]
    601          		FRAMEWIN_SetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   ........           BL       FRAMEWIN_SetSkinFlexProps
    602          		popupTitleTextColor = GUI_BLACK;
   \   00000098   ........           LDR      R0,??DataTable110_3
   \   0000009C   004080E5           STR      R4,[R0, #+0]
    603          		break;
   \   000000A0   1B0000EA           B        ??SetPopupDefaults_1
    604          
    605          	case ERROR_POPUP:
    606          		FRAMEWIN_GetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \                     ??SetPopupDefaults_4:
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   ........           BL       FRAMEWIN_GetSkinFlexProps
    607          		Props.aColorFrame[0] = 0x000000;
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   00108DE5           STR      R1,[SP, #+0]
    608          		Props.aColorFrame[1] = 0x0303b1;
   \   000000B8   ........           LDR      R0,??DataTable110_4  ;; 0x303b1
    609          		Props.aColorFrame[2] = 0x0000ff;
   \   000000BC   FF10A0E3           MOV      R1,#+255
   \   000000C0   070000EA           B        ??SetPopupDefaults_7
    610          		Props.aColorTitle[0] = 0x0303b1;
    611          		Props.aColorTitle[1] = 0x0000ff;
    612          		Props.Radius = 7;
    613          		FRAMEWIN_SetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
    614          		popupTitleTextColor = GUI_WHITE;
    615          		break;
    616          
    617          	case PROGRAMMING_POPUP:
    618          		FRAMEWIN_GetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \                     ??SetPopupDefaults_5:
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           BL       FRAMEWIN_GetSkinFlexProps
    619          		Props.aColorFrame[0] = 0x000000;
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   00108DE5           STR      R1,[SP, #+0]
    620          		Props.aColorFrame[1] = 0x22a508;
   \   000000D8   ........           LDR      R0,??DataTable110_5  ;; 0x22a508
    621          		Props.aColorFrame[2] = 0x2aff00;
   \   000000DC   A819A0E3           MOV      R1,#+2752512
   \   000000E0   FF1C81E3           ORR      R1,R1,#0xFF00
   \                     ??SetPopupDefaults_7:
   \   000000E4   04008DE5           STR      R0,[SP, #+4]
   \   000000E8   08108DE5           STR      R1,[SP, #+8]
    622          		Props.aColorTitle[0] = 0x22a508;
   \   000000EC   0C008DE5           STR      R0,[SP, #+12]
    623          		Props.aColorTitle[1] = 0x2aff00;
   \   000000F0   10108DE5           STR      R1,[SP, #+16]
    624          		Props.Radius = 7;
   \                     ??SetPopupDefaults_6:
   \   000000F4   0710A0E3           MOV      R1,#+7
   \   000000F8   14108DE5           STR      R1,[SP, #+20]
    625          		FRAMEWIN_SetSkinFlexProps(&Props, FRAMEWIN_SKINFLEX_PI_ACTIVE);
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           BL       FRAMEWIN_SetSkinFlexProps
    626          		popupTitleTextColor = GUI_WHITE;
   \   00000108   ........           LDR      R0,??DataTable110_3
   \   0000010C   FF14E0E3           MVN      R1,#-16777216
   \   00000110   001080E5           STR      R1,[R0, #+0]
    627          		break;
    628          	}
    629          
    630          	FRAMEWIN_SetDefaultFont(&GUI_Font24_ASCII);
   \                     ??SetPopupDefaults_1:
   \   00000114   ........           LDR      R4,??DataTable110_6
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       FRAMEWIN_SetDefaultFont
    631          	TEXT_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       TEXT_SetDefaultFont
    632          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       BUTTON_SetDefaultFont
    633          	BUTTON_SetDefaultTextColor(GUI_BLACK, BUTTON_BI_UNPRESSED);
   \   00000130   0010A0E3           MOV      R1,#+0
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   ........           BL       BUTTON_SetDefaultTextColor
    634          	BUTTON_SetDefaultTextColor(GUI_BLACK, BUTTON_BI_PRESSED);
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   ........           BL       BUTTON_SetDefaultTextColor
    635          }
   \   00000148   30D08DE2           ADD      SP,SP,#+48       ;; stack cleaning
   \   0000014C   1080BDE8           POP      {R4,PC}          ;; return
    636          
    637          //
    638          // SD card removed while running.
    639          // Display a modal dialog box to ask user if he wants to power off the unit or run without the SD card
    640          //
    641          // Returns	true - continue operating without the SD card
    642          //			false - we're powering off, sequence already begun - do nothing and wait to die
    643          //

   \                                 In section .text, align 4, keep-with-next
    644          int SDCardRemoved(void)
    645          {
   \                     SDCardRemoved:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    646          
    647          static const GUI_WIDGET_CREATE_INFO SDCardRemovedResources[] = {
    648          	{ FRAMEWIN_CreateIndirect, "SD CARD REMOVED!", 0, 20, 20, 400, 220, 0, 0 },
    649          	{ TEXT_CreateIndirect, "Cannot record further data without card", 0, 0, 30, 400, 30, TEXT_CF_HCENTER },
    650          	{ TEXT_CreateIndirect, "What would you like to do?", 0, 0, 70, 400, 30, TEXT_CF_HCENTER },
    651          	{ BUTTON_CreateIndirect, "POWER OFF", GUI_ID_OK, 20, 115, 150, 60 },
    652          	{ BUTTON_CreateIndirect, "RUN WITHOUT", GUI_ID_CANCEL, 190, 115, 180, 60 }
    653          };
    654          
    655          	HideSprites();
   \   00000008   ........           BL       HideSprites
    656          	
    657          	SetPopupDefaults(ERROR_POPUP);
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   ........           BL       SetPopupDefaults
    658          
    659          	glbBlackoutFlag = true;			// Suspend gauge screen updates while the modal popup dialog box is diaplyed
   \   00000014   ........           LDR      R0,??DataTable105_1
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    660          
    661          	if (GUI_ExecDialogBox(SDCardRemovedResources, GUI_COUNTOF(SDCardRemovedResources), &popupCallback, WM_GetDesktopWindow(), 10, 10) == GUI_ID_OK)
   \   00000020   ........           BL       WM_GetDesktopWindow
   \   00000024   0A10A0E3           MOV      R1,#+10
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
   \   00000030   0030A0E1           MOV      R3,R0
   \   00000034   ........           LDR      R2,??DataTable105_2
   \   00000038   0510A0E3           MOV      R1,#+5
   \   0000003C   ............       ADRL     R0,??SDCardRemovedResources
   \              ....        
   \   00000044   ........           BL       GUI_ExecDialogBox
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0200001A           BNE      ??SDCardRemoved_0
    662          	{
    663          		UnhideSprites();
   \   00000050   ........           BL       UnhideSprites
    664          		return false;
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   010000EA           B        ??SDCardRemoved_1
    665          	}
    666          	else
    667          	{
    668          		UnhideSprites();
   \                     ??SDCardRemoved_0:
   \   0000005C   ........           BL       UnhideSprites
    669          		return true;
   \   00000060   0100A0E3           MOV      R0,#+1
   \                     ??SDCardRemoved_1:
   \   00000064   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000068   0080BDE8           POP      {PC}             ;; return
    670          	}
    671          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??SDCardRemovedResources:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "SD CARD REMOVED!">`
   \              ....        
   \   00000008   000014001400       DC16 0, 20, 20, 400, 220, 0
   \              9001DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "Cannot record further...">`
   \              ............
   \   00000020   000000001E00       DC16 0, 0, 30, 400, 30, 2
   \              90011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "What would you like t...">`
   \              ....        
   \   00000038   000000004600       DC16 0, 0, 70, 400, 30, 2
   \              90011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "POWER OFF">`
   \              ....        
   \   00000050   010014007300       DC16 1, 20, 115, 150, 60
   \              96003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "RUN WITHOUT">`
   \              ....        
   \   00000068   0200BE007300       DC16 2, 190, 115, 180, 60
   \              B4003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
    672          
    673          //
    674          // SD card inserted while running without the SD card
    675          // Display a modal dialog box to ask user if he wants to reset the unit so he can use this card
    676          // or ignore the card and continue to run without it
    677          //
    678          // Returns	true - continue operating without the SD card
    679          //			false - we're resetting, sequence already begun - do nothing and wait to die
    680          //

   \                                 In section .text, align 4, keep-with-next
    681          int SDCardReinserted(void)
    682          {
   \                     SDCardReinserted:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    683          
    684          static const GUI_WIDGET_CREATE_INFO SDCardReinsertedResources[] = {
    685          	{ FRAMEWIN_CreateIndirect, "SD CARD INSERTED!", 0, 20, 20, 420, 220, 0, 0 },
    686          	{ TEXT_CreateIndirect, "Must reset unit to start using this card", 0, 0, 50, 420, 30, TEXT_CF_HCENTER },
    687          	{ BUTTON_CreateIndirect, "RESET UNIT", GUI_ID_OK, 120, 115, 140, 60 },
    688          };
    689          
    690          	HideSprites();
   \   00000008   ........           BL       HideSprites
    691          	
    692          	SetPopupDefaults(ERROR_POPUP);
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   ........           BL       SetPopupDefaults
    693          
    694          	glbBlackoutFlag = true;			// Suspend gauge screen updates while the modal popup dialog box is diaplyed
   \   00000014   ........           LDR      R0,??DataTable105_1
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    695          
    696          	if (GUI_ExecDialogBox(SDCardReinsertedResources, GUI_COUNTOF(SDCardReinsertedResources), &popupCallback, WM_GetDesktopWindow(), 10, 10) == GUI_ID_OK)
   \   00000020   ........           BL       WM_GetDesktopWindow
   \   00000024   0A10A0E3           MOV      R1,#+10
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
   \   00000030   0030A0E1           MOV      R3,R0
   \   00000034   ........           LDR      R2,??DataTable105_2
   \   00000038   0310A0E3           MOV      R1,#+3
   \   0000003C   ............       ADRL     R0,??SDCardReinsertedResources
   \              ....        
   \   00000044   ........           BL       GUI_ExecDialogBox
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0300001A           BNE      ??SDCardReinserted_0
    697          	{
    698          #ifndef _WINDOWS
    699          		reset();			// Reset immediately
   \   00000050   ........           BL       reset
    700          #endif
    701          		UnhideSprites();
   \   00000054   ........           BL       UnhideSprites
    702          		return false;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   010000EA           B        ??SDCardReinserted_1
    703          	}
    704          	else
    705          	{
    706          		UnhideSprites();
   \                     ??SDCardReinserted_0:
   \   00000060   ........           BL       UnhideSprites
    707          		return true;
   \   00000064   0100A0E3           MOV      R0,#+1
   \                     ??SDCardReinserted_1:
   \   00000068   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000006C   0080BDE8           POP      {PC}             ;; return
    708          	}
    709          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??SDCardReinsertedResources:
   \   00000000                      ; Initializer data, 72 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "SD CARD INSERTED!">`
   \              ....        
   \   00000008   000014001400       DC16 0, 20, 20, 420, 220, 0
   \              A401DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "Must reset unit to st...">`
   \              ............
   \   00000020   000000003200       DC16 0, 0, 50, 420, 30, 2
   \              A4011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 BUTTON_CreateIndirect, `?<Constant "RESET UNIT">`
   \              ....        
   \   00000038   010078007300       DC16 1, 120, 115, 140, 60
   \              8C003C00    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0
    710          
    711          //
    712          // Display a modal dialog box to see if the user wants to reflash his SU or DU2
    713          //
    714          // Returns	YES - proceed to reflash
    715          //			NO - skip and go on
    716          //

   \                                 In section .text, align 4, keep-with-next
    717          int ReFlashYorN(codefiletypes codetype, int rev) {
   \                     ReFlashYorN:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   0160A0E1           MOV      R6,R1
    718          
    719          	static GUI_WIDGET_CREATE_INFO NewFirmwareResources[] = {
    720          		{ FRAMEWIN_CreateIndirect, "", 0, 50, 20, 360, 220, 0, 0 },
    721          		{ BUTTON_CreateIndirect, "UPDATE",		GUI_ID_OK,		40, 115, 120, 60 },
    722          		{ BUTTON_CreateIndirect, "SKIP", GUI_ID_CANCEL, 190, 115, 120, 60 },
    723          		{ TEXT_CreateIndirect, "", 0, 0, 10, 360, 30, TEXT_CF_HCENTER },
    724          		{ TEXT_CreateIndirect, "", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
    725          		{ TEXT_CreateIndirect, "Do Not Disconnect or Power Down", 0, 0, 70, 360, 30, TEXT_CF_HCENTER }
    726          	};
    727          	char tempstr[40];
    728          	int oldrev;
    729          	
    730          	SetPopupDefaults(PROGRAMMING_POPUP);
   \   00000010   0300A0E3           MOV      R0,#+3
   \   00000014   ........           BL       SetPopupDefaults
    731          
    732          	NewFirmwareResources[3].pName = tempstr;
   \   00000018   ........           LDR      R5,??DataTable110_7
   \   0000001C   08008DE2           ADD      R0,SP,#+8
   \   00000020   4C0085E5           STR      R0,[R5, #+76]
    733          
    734          	switch (codetype) {
   \   00000024   000057E3           CMP      R7,#+0
   \   00000028   0300000A           BEQ      ??ReFlashYorN_0
   \   0000002C   020057E3           CMP      R7,#+2
   \   00000030   1100000A           BEQ      ??ReFlashYorN_1
   \   00000034   0800003A           BCC      ??ReFlashYorN_2
   \   00000038   170000EA           B        ??ReFlashYorN_3
    735          		case CODESU:
    736          			oldrev = suData.suSwRev;
   \                     ??ReFlashYorN_0:
   \   0000003C   ........           LDR      R0,??DataTable110_8
   \   00000040   B041D0E1           LDRH     R4,[R0, #+16]
    737          			NewFirmwareResources[0].pName = "NEW SU FIRMWARE FOUND";
   \   00000044   ............       ADRL     R0,`?<Constant "NEW SU FIRMWARE FOUND">`
   \              ....        
   \   0000004C   040085E5           STR      R0,[R5, #+4]
    738          			NewFirmwareResources[4].pName = "Update Connected SU Firmware?";
   \   00000050   ............       ADRL     R0,`?<Constant "Update Connected SU F...">`
   \              ....        
   \   00000058   0E0000EA           B        ??ReFlashYorN_4
    739          			break;
    740          		case CODETQ:
    741          			oldrev = unsavedSysData.duSwRev;
   \                     ??ReFlashYorN_2:
   \   0000005C   ........           LDR      R0,??DataTable103
   \   00000060   B040D0E1           LDRH     R4,[R0, #+0]
    742          			NewFirmwareResources[0].pName = "NEW FIRMWARE FOUND";
   \   00000064   ............       ADRL     R0,`?<Constant "NEW FIRMWARE FOUND">`
   \              ....        
   \   0000006C   040085E5           STR      R0,[R5, #+4]
    743          			NewFirmwareResources[4].pName = "Update TraqDash Firmware?";
   \   00000070   ............       ADRL     R0,`?<Constant "Update TraqDash Firmw...">`
   \              ....        
   \   00000078   060000EA           B        ??ReFlashYorN_4
    744          			break;
    745          		case BOOTTQ:
    746          			oldrev = unsavedSysData.unitInfo.bootloaderSwRev;
   \                     ??ReFlashYorN_1:
   \   0000007C   ........           LDR      R0,??DataTable103
   \   00000080   6C4090E5           LDR      R4,[R0, #+108]
    747          			NewFirmwareResources[0].pName = "NEW BOOTLOADER FOUND";
   \   00000084   ............       ADRL     R0,`?<Constant "NEW BOOTLOADER FOUND">`
   \              ....        
   \   0000008C   040085E5           STR      R0,[R5, #+4]
    748          			NewFirmwareResources[4].pName = "Update TraqDash Bootloader?";
   \   00000090   ............       ADRL     R0,`?<Constant "Update TraqDash Bootl...">`
   \              ....        
   \                     ??ReFlashYorN_4:
   \   00000098   640085E5           STR      R0,[R5, #+100]
    749          			break;
    750          	} // switch
    751          
    752          	sprintf(tempstr, "Current Rev %1.2f, New Rev %1.2f", ((float) oldrev / 100.0), ((float) rev / 100.0));
   \                     ??ReFlashYorN_3:
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   ........           BL       __aeabi_i2f
   \   000000A4   ........           BL       __aeabi_f2d
   \   000000A8   4034A0E3           MOV      R3,#+1073741824
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   593883E3           ORR      R3,R3,#0x590000
   \   000000B4   ........           BL       __aeabi_ddiv
   \   000000B8   03008DE8           STM      SP,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       __aeabi_i2f
   \   000000C4   ........           BL       __aeabi_f2d
   \   000000C8   4034A0E3           MOV      R3,#+1073741824
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   593883E3           ORR      R3,R3,#0x590000
   \   000000D4   ........           BL       __aeabi_ddiv
   \   000000D8   0020A0E1           MOV      R2,R0
   \   000000DC   0130A0E1           MOV      R3,R1
   \   000000E0   ............       ADRL     R1,`?<Constant "Current Rev %1.2f, Ne...">`
   \              ....        
   \   000000E8   08008DE2           ADD      R0,SP,#+8
   \   000000EC   ........           BL       sprintf
    753          	
    754          	if (GUI_ID_OK == GUI_ExecDialogBox(NewFirmwareResources, GUI_COUNTOF(NewFirmwareResources), &popupCallback, WM_GetDesktopWindow(), 10, 10))
   \   000000F0   ........           BL       WM_GetDesktopWindow
   \   000000F4   0A10A0E3           MOV      R1,#+10
   \   000000F8   04108DE5           STR      R1,[SP, #+4]
   \   000000FC   00108DE5           STR      R1,[SP, #+0]
   \   00000100   0030A0E1           MOV      R3,R0
   \   00000104   ........           LDR      R2,??DataTable105_2
   \   00000108   0610A0E3           MOV      R1,#+6
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       GUI_ExecDialogBox
   \   00000114   010050E3           CMP      R0,#+1
   \   00000118   0200001A           BNE      ??ReFlashYorN_5
    755          	{
    756          #ifndef _WINDOWS
    757          		StopTouchScreenScan();
   \   0000011C   ........           BL       StopTouchScreenScan
    758          #endif
    759          		return true;
   \   00000120   0100A0E3           MOV      R0,#+1
   \   00000124   000000EA           B        ??ReFlashYorN_6
    760          	}
    761          	else return false;
   \                     ??ReFlashYorN_5:
   \   00000128   0000A0E3           MOV      R0,#+0
   \                     ??ReFlashYorN_6:
   \   0000012C   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   00000130   F080BDE8           POP      {R4-R7,PC}       ;; return
    762          }

   \                                 In section .data, align 4
   \                     ??NewFirmwareResources:
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, BUTTON_CreateIndirect, `?<Constant "UPDATE">`
   \              ............
   \   00000020   010028007300       DC16 1, 40, 115, 120, 60
   \              78003C00    
   \   0000002A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000030   ............       DC32 BUTTON_CreateIndirect, `?<Constant "SKIP">`
   \              ....        
   \   00000038   0200BE007300       DC16 2, 190, 115, 120, 60
   \              78003C00    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "">`
   \              ....        
   \   00000050   000000000A00       DC16 0, 0, 10, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 TEXT_CreateIndirect, `?<Constant "">`
   \              ....        
   \   00000068   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   00000074   00000000           DC8 0, 0, 0, 0
   \   00000078   ............       DC32 TEXT_CreateIndirect, `?<Constant "Do Not Disconnect or ...">`
   \              ....        
   \   00000080   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   0000008C   00000000           DC8 0, 0, 0, 0
    763          

   \                                 In section .text, align 4, keep-with-next
    764          static const GUI_WIDGET_CREATE_INFO ShuttingDownResources[] = {
   \                     ShuttingDownResources:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "STATUS">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "Saving Files">`
   \              ............
   \   00000020   000000002D00       DC16 0, 0, 45, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
    765          	{ FRAMEWIN_CreateIndirect, "STATUS", 0, 50, 20, 360, 220, 0, 0 },
    766          	{ TEXT_CreateIndirect, "Saving Files", 0, 0, 45, 360, 30, TEXT_CF_HCENTER },
    767          };

   \                                 In section .text, align 4, keep-with-next
    768          static const GUI_WIDGET_CREATE_INFO SafeToPowerOffUnit[] = {
   \                     SafeToPowerOffUnit:
   \   00000000                      ; Initializer data, 72 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "STATUS">`
   \              ....        
   \   00000008   000032001400       DC16 0, 50, 20, 360, 220, 0
   \              6801DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "All files saved.">`
   \              ............
   \   00000020   000000001E00       DC16 0, 0, 30, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "Powering off the unit.">`
   \              ....        
   \   00000038   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
    769          	{ FRAMEWIN_CreateIndirect, "STATUS", 0, 50, 20, 360, 220, 0, 0 },
    770          	{ TEXT_CreateIndirect, "All files saved.", 0, 0, 30, 360, 30, TEXT_CF_HCENTER },
    771          	{ TEXT_CreateIndirect, "Powering off the unit.", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    772          };
    773          
    774          //
    775          // Controlled power down sequence - when we have pleanty of time to inform the user what we're doing
    776          //

   \                                 In section .text, align 4, keep-with-next
    777          void PowerOffUnit(WM_HWIN owner, char reset_unit, int delay)
    778          {
   \                     PowerOffUnit:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    779          	WM_HWIN hDialog;
    780          	
    781          	if (unsavedSysData.systemMode != DU2_IDLE)
   \   00000008   ........           LDR      R0,??DataTable103
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   0100000A           BEQ      ??PowerOffUnit_0
    782          		ExitRecord(true);
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           BL       ExitRecord
    783          
    784          	HideSprites();
   \                     ??PowerOffUnit_0:
   \   0000002C   ........           BL       HideSprites
    785          
    786          	glbBlackoutFlag = true;		// Suspend gauge screen updates while the popup dialog box is displayed
   \   00000030   ........           LDR      R0,??DataTable105_1
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   001080E5           STR      R1,[R0, #+0]
    787          	SetPopupDefaults(INFORMATIONAL_POPUP);
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           BL       SetPopupDefaults
    788          
    789          	// Display "Saving Files"
    790          	hDialog = GUI_CreateDialogBox(ShuttingDownResources, GUI_COUNTOF(ShuttingDownResources), &nonModalPopupCallback, owner, 10, 10);
   \   00000044   ........           LDR      R7,??DataTable108_3
   \   00000048   0A00A0E3           MOV      R0,#+10
   \   0000004C   04008DE5           STR      R0,[SP, #+4]
   \   00000050   00008DE5           STR      R0,[SP, #+0]
   \   00000054   0430A0E1           MOV      R3,R4
   \   00000058   0720A0E1           MOV      R2,R7
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   ............       ADRL     R0,ShuttingDownResources
   \              ....        
   \   00000068   ........           BL       GUI_CreateDialogBox
   \   0000006C   0080A0E1           MOV      R8,R0
    791          	GUI_Exec();					// Allow popup to be shown
   \   00000070   ........           BL       GUI_Exec
    792          
    793          	SaveFilesAndPowerDown();	// Save the files
   \   00000074   1E00A0E3           MOV      R0,#+30
   \   00000078   ........           BL       SetUserMode
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   ........           BL       WriteUserDataEvent
   \   00000084   ........           ADR      R0,??DataTable105  ;; ""
   \   00000088   ........           BL       FS_Unmount
    794          
    795          	if (!delay)					// If no particular delay was requested at least wait 1ms before shutting down
   \   0000008C   000056E3           CMP      R6,#+0
    796          		delay = 1;
   \   00000090   0160A003           MOVEQ    R6,#+1
    797          	GUI_Delay(delay);			// give time for messages to be processed before displaying that it is safe to remove power
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           BL       GUI_Delay
    798          
    799          	WM_DeleteWindow(hDialog);	// Delete "Saving Files" popup
   \   0000009C   0800A0E1           MOV      R0,R8
   \   000000A0   ........           BL       WM_DeleteWindow
    800          	
    801          #ifdef _WINDOWS
    802          	// Create non-modal dialog box in windows to allow the power key to work
    803          	GUI_CreateDialogBox(SafeToPowerOffUnit, GUI_COUNTOF(SafeToPowerOffUnit), &nonModalPopupCallback, owner, 10, 10);
    804          #else
    805          	GUI_CreateDialogBox(SafeToPowerOffUnit, GUI_COUNTOF(SafeToPowerOffUnit), &nonModalPopupCallback, owner, 10, 10);
   \   000000A4   0A00A0E3           MOV      R0,#+10
   \   000000A8   04008DE5           STR      R0,[SP, #+4]
   \   000000AC   00008DE5           STR      R0,[SP, #+0]
   \   000000B0   0430A0E1           MOV      R3,R4
   \   000000B4   0720A0E1           MOV      R2,R7
   \   000000B8   0310A0E3           MOV      R1,#+3
   \   000000BC   ............       ADRL     R0,SafeToPowerOffUnit
   \              ....        
   \   000000C4   ........           BL       GUI_CreateDialogBox
    806          	GUI_Exec();				// Wait to die
   \   000000C8   ........           BL       GUI_Exec
    807          	if (reset_unit)
   \   000000CC   000055E3           CMP      R5,#+0
   \   000000D0   0000000A           BEQ      ??PowerOffUnit_1
    808          		reset();			// Reset the unit
   \   000000D4   ........           BL       reset
    809          	// just wait for powerdown
    810          	OS_Delay(60000);
   \                     ??PowerOffUnit_1:
   \   000000D8   08D08DE2           ADD      SP,SP,#+8
   \   000000DC   F041BDE8           POP      {R4-R8,LR}
   \   000000E0   6010A0E3           MOV      R1,#+96
   \   000000E4   EA1C81E3           ORR      R1,R1,#0xEA00
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   ........           B        PF_OS_Delay      ;; tailcall
    811          #endif
    812          }
    813          
    814          //
    815          // Essential core function of the power down - in case of emergency power down call this directly!
    816          //

   \                                 In section .text, align 4, keep-with-next
    817          void SaveFilesAndPowerDown(void)
    818          {
   \                     SaveFilesAndPowerDown:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    819          	// tell comm and laptimer to stop recording and shut off power at SU
    820          	SetUserMode(DU2_SHUTDOWN);
   \   00000008   1E00A0E3           MOV      R0,#+30
   \   0000000C   ........           BL       SetUserMode
    821          	
    822          	// save configuration (use synchronous calls, not event posting!)
    823          	WriteUserDataEvent(SYSTEM_DATA);
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       WriteUserDataEvent
    824          
    825          // COMMENTED OUT BECAUSE THESE SHOULD ALREADY BE UP TO DATE  --  GAS
    826          //	if (trackTableIndex >= 0)
    827          //		if (trackTable[trackTableIndex].sdCardEntry)	// Only write if a disk file already exists
    828          //			WriteUserDataEvent(TRACK_DATA);
    829          //	WriteUserDataEvent(VEHICLE_DATA);
    830          //	WriteUserDataEvent(DRIVER_DATA);
    831          						
    832          #ifndef _WINDOWS
    833          	// Unmount all drives (flushes cache)
    834          	FS_Unmount("");
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   ........           ADR      R0,??DataTable105  ;; ""
   \   00000024   ........           B        FS_Unmount       ;; tailcall
    835          #endif
    836          
    837          }
    838          
    839          #ifndef _WINDOWS

   \                                 In section .text, align 4, keep-with-next
    840          void ConfigureCache(void)
    841          {
   \                     ConfigureCache:
   \   00000000   10402DE9           PUSH     {R4,LR}
    842          	static U32 *fileCache = (U32 *) START_OF_ISRAM;
    843          
    844          	// **** GAS TEST -- these are not ideal but done to test file system speedup
    845          //	FS_ConfigUpdateDirOnWrite( 0 );										// do not update directory after each write for speed
    846          	FS_SetFileWriteMode( FS_WRITEMODE_FAST );							// not safe but allegedly fast
   \   00000004   0200A0E3           MOV      R0,#+2
   \   00000008   ........           BL       FS_SetFileWriteMode
    847          //	FS_SetFileWriteMode( FS_WRITEMODE_SAFE );							// does not work well. dropouts. crashes if you remove and reinsert card
    848          	FS_AssignCache("", fileCache, FS_CACHE_SIZE, FS_CACHE_RW);			// use a cache to speed things up
   \   0000000C   ........           ADR      R4,??DataTable105  ;; ""
   \   00000010   ........           LDR      R3,??DataTable103_11
   \   00000014   C02CA0E3           MOV      R2,#+49152
   \   00000018   C019A0E3           MOV      R1,#+3145728
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS_AssignCache
    849          	FS_CACHE_SetMode("", FS_SECTOR_TYPE_MASK_ALL, FS_CACHE_MODE_WB);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   0720A0E3           MOV      R2,#+7
   \   00000030   0710A0E3           MOV      R1,#+7
   \   00000034   ........           B        FS_CACHE_SetMode  ;; tailcall
    850          }

   \                                 In section .data, align 4
   \   00000000   00003000           DC32 300000H
    851          

   \                                 In section .text, align 4, keep-with-next
    852          char OkToUseSDCard(void)
    853          {
    854          	return okToUseSDCard;
   \                     OkToUseSDCard:
   \   00000000   ........           LDR      R0,??DataTable110_9
   \   00000004   1600D0E5           LDRB     R0,[R0, #+22]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    855          }
    856          #endif
    857          

   \                                 In section .text, align 4, keep-with-next
    858          void InitializeTraqmateFiles(void)
    859          {
   \                     InitializeTraqmateFiles:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   4CD04DE2           SUB      SP,SP,#+76
    860          #ifdef _WINDOWS
    861          	FILE *pTestFile;
    862          
    863          	ConfigureHomeDirectory();
    864          
    865          	if ((pTestFile = fopen("544729.sno", "r")) != NULL)		// serial number mode allows serial and build date to be set
    866          	{
    867          		fclose(pTestFile);
    868          		unsavedSysData.enableSerialNumber = true;
    869          	}
    870          	else unsavedSysData.enableSerialNumber = false;
    871          	
    872          	if ((pTestFile = fopen("testmode", "r")) != NULL)
    873          	{
    874          		fclose(pTestFile);
    875          		testMode = true;
    876          	}
    877          	else testMode = false;
    878          
    879          	if ((pTestFile = fopen("tempcal", "r")) != NULL)			// operator ability to calibrate LED temperature correction value
    880          	{
    881          		fclose(pTestFile);
    882          		unsavedSysData.enableTempCalibration = true;
    883          	}
    884          	else unsavedSysData.enableTempCalibration = false;
    885          
    886          	LoadPersonalizationData();
    887          
    888          	InitializeDirectoryStructure();
    889          
    890          #else
    891          #ifdef BUILD_DEBUG_PORT
    892          	char tempstr[60];
    893          #endif
    894          	U8 attr;
    895          	
    896          	InitializeDirectoryStructure();
   \   00000008   ........           BL       InitializeDirectoryStructure
    897          			
    898          	// check for special mode files or folders present
    899          	unsavedSysData.enableSerialNumber = (0xFF != FS_GetFileAttributes("\\544729.sno"));		// serial number mode allows serial and build date to be set
   \   0000000C   ............       ADRL     R0,`?<Constant "\\\\544729.sno">`
   \              ....        
   \   00000014   ........           BL       FS_GetFileAttributes
   \   00000018   FF0050E3           CMP      R0,#+255
   \   0000001C   ........           LDR      R4,??DataTable110_10
   \   00000020   0100A013           MOVNE    R0,#+1
   \   00000024   0000A003           MOVEQ    R0,#+0
   \   00000028   8A00C4E5           STRB     R0,[R4, #+138]
    900          	testMode = (0xFF != FS_GetFileAttributes("\\testmode"));		// test mode adds extra screen
   \   0000002C   ............       ADRL     R0,`?<Constant "\\\\testmode">`
   \              ....        
   \   00000034   ........           BL       FS_GetFileAttributes
   \   00000038   FF0050E3           CMP      R0,#+255
   \   0000003C   ........           LDR      R5,??DataTable110_9
   \   00000040   0100A013           MOVNE    R0,#+1
   \   00000044   0000A003           MOVEQ    R0,#+0
   \   00000048   000085E5           STR      R0,[R5, #+0]
    901          	demoMode = (0xFF != FS_GetFileAttributes("\\demomode"));		// demo mode simulates operation
   \   0000004C   ............       ADRL     R0,`?<Constant "\\\\demomode">`
   \              ....        
   \   00000054   ........           BL       FS_GetFileAttributes
   \   00000058   FF0050E3           CMP      R0,#+255
   \   0000005C   0100A013           MOVNE    R0,#+1
   \   00000060   0000A003           MOVEQ    R0,#+0
   \   00000064   040085E5           STR      R0,[R5, #+4]
    902          	factMode = (0xFF != FS_GetFileAttributes("\\factmode"));		// factory checkout mode
   \   00000068   ............       ADRL     R0,`?<Constant "\\\\factmode">`
   \              ....        
   \   00000070   ........           BL       FS_GetFileAttributes
   \   00000074   FF0050E3           CMP      R0,#+255
   \   00000078   0100A013           MOVNE    R0,#+1
   \   0000007C   0000A003           MOVEQ    R0,#+0
   \   00000080   080085E5           STR      R0,[R5, #+8]
    903          	unsavedSysData.enableTempCalibration = (0xFF != FS_GetFileAttributes("\\tempcal"));	// operator ability to calibrate LED temperature correction value
   \   00000084   ............       ADRL     R0,`?<Constant "\\\\tempcal">`
   \              ....        
   \   0000008C   ........           BL       FS_GetFileAttributes
   \   00000090   FF0050E3           CMP      R0,#+255
   \   00000094   0100A013           MOVNE    R0,#+1
   \   00000098   0000A003           MOVEQ    R0,#+0
   \   0000009C   C80084E5           STR      R0,[R4, #+200]
    904          //	unsavedSysData.wifiCardInserted = (0xFF != FS_GetFileAttributes(WIFI_FILE));	// Toshiba FlashAir card inserted
    905          	attr = FS_GetFileAttributes("\\SD_WLAN\\CONFIG");
    906          	unsavedSysData.wifiCardInserted = (0xFF != attr);
   \   000000A0   ............       ADRL     R0,`?<Constant "\\\\SD_WLAN\\\\CONFIG">`
   \              ....        
   \   000000A8   ........           BL       FS_GetFileAttributes
   \   000000AC   FF0050E3           CMP      R0,#+255
    907          //	unsavedSysData.wifiCardInserted = (0xFF != FS_GetFileAttributes("\\SD_WLAN\\CONFIG"));	// Toshiba FlashAir card inserted
    908          
    909          	// Configure WiFi SD card if necessary
    910          	if (unsavedSysData.wifiEnabled && unsavedSysData.wifiCardInserted)
   \   000000B0   D01094E5           LDR      R1,[R4, #+208]
   \   000000B4   0100A013           MOVNE    R0,#+1
   \   000000B8   0000A003           MOVEQ    R0,#+0
   \   000000BC   000051E3           CMP      R1,#+0
   \   000000C0   CC0084E5           STR      R0,[R4, #+204]
   \   000000C4   00005013           CMPNE    R0,#+0
   \   000000C8   0100000A           BEQ      ??InitializeTraqmateFiles_0
    911          		WiFiSetup(false);
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   ........           BL       WiFiSetup
    912          	
    913          	if (factMode)
   \                     ??InitializeTraqmateFiles_0:
   \   000000D4   080095E5           LDR      R0,[R5, #+8]
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0000000A           BEQ      ??InitializeTraqmateFiles_1
    914          		FactoryCheckout();
   \   000000E0   ........           BL       FactoryCheckout
    915          	
    916          #ifdef BUILD_DEBUG_PORT
    917          	sprintf(tempstr, "TraqDash SW %3.2f, HW %3.2f, DATA %d !\n\r", ((float) unsavedSysData.duSwRev)/100.0, ((float) unsavedSysData.duHwRev)/100.0, unsavedSysData.duDataRev);
   \                     ??InitializeTraqmateFiles_1:
   \   000000E4   B200D4E1           LDRH     R0,[R4, #+2]
   \   000000E8   08008DE5           STR      R0,[SP, #+8]
   \   000000EC   0400D4E5           LDRB     R0,[R4, #+4]
   \   000000F0   ........           BL       __aeabi_ui2f
   \   000000F4   ........           BL       __aeabi_f2d
   \   000000F8   4034A0E3           MOV      R3,#+1073741824
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   593883E3           ORR      R3,R3,#0x590000
   \   00000104   ........           BL       __aeabi_ddiv
   \   00000108   03008DE8           STM      SP,{R0,R1}
   \   0000010C   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000110   ........           BL       __aeabi_ui2f
   \   00000114   ........           BL       __aeabi_f2d
   \   00000118   4034A0E3           MOV      R3,#+1073741824
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   593883E3           ORR      R3,R3,#0x590000
   \   00000124   ........           BL       __aeabi_ddiv
   \   00000128   0020A0E1           MOV      R2,R0
   \   0000012C   0130A0E1           MOV      R3,R1
   \   00000130   ............       ADRL     R1,`?<Constant "TraqDash SW %3.2f, HW...">`
   \              ....        
   \   00000138   0C008DE2           ADD      R0,SP,#+12
   \   0000013C   ........           BL       sprintf
    918          	DBGU_Print(tempstr);
   \   00000140   0C008DE2           ADD      R0,SP,#+12
   \   00000144   ........           BL       DBGU_Print
    919          #endif
    920          
    921          #endif
    922          
    923          	// Check for too many session files - move to archive folder if approved
    924          	ArchiveSessions();
   \   00000148   ........           BL       ArchiveSessions
    925          
    926          	// Check to see if new software version and update the file
    927          	if (NewSWVersion())
   \   0000014C   ........           BL       NewSWVersion
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   1E00000A           BEQ      ??InitializeTraqmateFiles_2
    928          	{
    929          		// See if the user wants to verify the track SF lines
    930          		if (UserWantsToUpdateSF())
   \   00000158   0100A0E3           MOV      R0,#+1
   \   0000015C   ........           BL       SetPopupDefaults
   \   00000160   ........           BL       WM_GetDesktopWindow
   \   00000164   0A10A0E3           MOV      R1,#+10
   \   00000168   04108DE5           STR      R1,[SP, #+4]
   \   0000016C   00108DE5           STR      R1,[SP, #+0]
   \   00000170   0030A0E1           MOV      R3,R0
   \   00000174   ........           LDR      R2,??DataTable105_2
   \   00000178   0510A0E3           MOV      R1,#+5
   \   0000017C   ............       ADRL     R0,??CheckUpdateTracks
   \              ....        
   \   00000184   ........           BL       GUI_ExecDialogBox
   \   00000188   030050E3           CMP      R0,#+3
   \   0000018C   0050A013           MOVNE    R5,#+0
   \   00000190   0150A003           MOVEQ    R5,#+1
   \   00000194   ........           BL       GUI_Clear
   \   00000198   0A20A0E3           MOV      R2,#+10
   \   0000019C   2710A0E3           MOV      R1,#+39
   \   000001A0   ........           LDR      R0,??DataTable110_11
   \   000001A4   ........           BL       GUI_DrawBitmap
   \   000001A8   6120A0E3           MOV      R2,#+97
   \   000001AC   1410A0E3           MOV      R1,#+20
   \   000001B0   ........           LDR      R0,??DataTable110_12
   \   000001B4   ........           BL       GUI_DrawBitmap
   \   000001B8   6E20A0E3           MOV      R2,#+110
   \   000001BC   F010A0E3           MOV      R1,#+240
   \   000001C0   ........           LDR      R0,??DataTable110_13
   \   000001C4   ........           BL       GUI_DrawBitmap
   \   000001C8   000055E3           CMP      R5,#+0
   \   000001CC   0000000A           BEQ      ??InitializeTraqmateFiles_2
    931          		{
    932          			// Update start finish lines
    933          			UpdateSFLines();
   \   000001D0   ........           BL       UpdateSFLines
    934          		}
    935          	}
    936          
    937          	InitializeTraqmateData();
   \                     ??InitializeTraqmateFiles_2:
   \   000001D4   ........           BL       CreateTracks
   \   000001D8   ........           BL       ReadDataStructures
   \   000001DC   000050E3           CMP      R0,#+0
   \   000001E0   0400000A           BEQ      ??InitializeTraqmateFiles_3
   \   000001E4   C01094E5           LDR      R1,[R4, #+192]
   \   000001E8   000051E3           CMP      R1,#+0
   \   000001EC   0000000A           BEQ      ??InitializeTraqmateFiles_4
   \   000001F0   ........           BL       DisplayInvalidFilesPopup
   \                     ??InitializeTraqmateFiles_4:
   \   000001F4   0000A0E3           MOV      R0,#+0
   \                     ??InitializeTraqmateFiles_3:
   \   000001F8   ........           BL       ResetAllFileLists
    938          }
   \   000001FC   4CD08DE2           ADD      SP,SP,#+76       ;; stack cleaning
   \   00000200   3080BDE8           POP      {R4,R5,PC}       ;; return
    939          
    940          

   \                                 In section .text, align 4, keep-with-next
    941          void local_itoa(int n, char s[])
    942          {
   \                     local_itoa:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    943          	int i;
    944          
    945          	i = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0420A0E1           MOV      R2,R4
    946          	do {       /* generate digits in reverse order */
    947          		s[i++] = n % 10 + '0';   /* get next digit */
   \                     ??local_itoa_0:
   \   00000014   ........           LDR      R3,??DataTable110_14  ;; 0x66666667
   \   00000018   0AE0A0E3           MOV      LR,#+10
   \   0000001C   90C3C3E0           SMULL    R12,R3,R0,R3
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   4331B0E1           ASRS     R3,R3,#+2
   \   00000028   01308342           ADDMI    R3,R3,#+1
   \   0000002C   03C0A0E1           MOV      R12,R3
   \   00000030   8C0E6CE1           SMULBB   R12,R12,LR
   \   00000034   0C0040E0           SUB      R0,R0,R12
   \   00000038   300080E2           ADD      R0,R0,#+48
   \   0000003C   0100C2E4           STRB     R0,[R2], #+1
    948          	} while ((n /= 10) > 0);     /* delete it */
   \   00000040   0300A0E1           MOV      R0,R3
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   F1FFFFAA           BGE      ??local_itoa_0
    949          	s[i] = '\0';
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   0400C1E7           STRB     R0,[R1, +R4]
    950          	reverse(s);
   \   00000054   0050A0E3           MOV      R5,#+0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       strlen
   \   00000060   010040E2           SUB      R0,R0,#+1
   \   00000064   041080E0           ADD      R1,R0,R4
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   010000AA           BGE      ??local_itoa_1
    951          }
   \                     ??local_itoa_2:
   \   00000070   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??local_itoa_1:
   \   00000078   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000007C   0020D4E5           LDRB     R2,[R4, #+0]
   \   00000080   015085E2           ADD      R5,R5,#+1
   \   00000084   0130C4E4           STRB     R3,[R4], #+1
   \   00000088   010040E2           SUB      R0,R0,#+1
   \   0000008C   012041E4           STRB     R2,[R1], #-1
   \   00000090   000055E1           CMP      R5,R0
   \   00000094   F7FFFFBA           BLT      ??local_itoa_1
   \   00000098   F4FFFFEA           B        ??local_itoa_2
    952          
    953          /* reverse:  reverse string s in place */

   \                                 In section .text, align 4, keep-with-next
    954          void reverse(char s[])
    955          {
   \                     reverse:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    956          	int i, j;
    957          	char c;
    958          
    959          	for (i = 0, j = strlen(s)-1; i<j; i++, j--)
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   ........           BL       strlen
   \   00000014   010040E2           SUB      R0,R0,#+1
   \   00000018   041080E0           ADD      R1,R0,R4
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   070000BA           BLT      ??reverse_0
    960          	{
    961          		c = s[i];
    962          		s[i] = s[j];
   \                     ??reverse_1:
   \   00000024   0030D1E5           LDRB     R3,[R1, #+0]
   \   00000028   0020D4E5           LDRB     R2,[R4, #+0]
    963          		s[j] = c;
    964          	}
   \   0000002C   015085E2           ADD      R5,R5,#+1
   \   00000030   0130C4E4           STRB     R3,[R4], #+1
   \   00000034   010040E2           SUB      R0,R0,#+1
   \   00000038   012041E4           STRB     R2,[R1], #-1
   \   0000003C   000055E1           CMP      R5,R0
   \   00000040   F7FFFFBA           BLT      ??reverse_1
    965          }
   \                     ??reverse_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    966          
    967          //
    968          //See if the current software version is different from the last version run
    969          // Update the file to the current version when done
    970          //
    971          // Returns: true = new software version or the version file did not previously exist
    972          //			false = same software version as before
    973          // file updated to current rev in both cases
    974          //
    975          #ifdef _WINDOWS
    976          int NewSWVersion(void)
    977          {
    978          	HFILE hFile;
    979          	OFSTRUCT fStruct;
    980          	DWORD bytesReadWritten;
    981          	int version = DU2_SW_REV;
    982          	char newVersionStr[10];
    983          
    984          	// Build current version string
    985          	local_itoa(version, newVersionStr);
    986          
    987          	if ((hFile = OpenFile(VERSION_PATH, &fStruct, OF_READWRITE)) != HFILE_ERROR)
    988          	{
    989          		char oldVersionStr[10];
    990          
    991          		// Read file to get last version
    992          		if (ReadFile((HANDLE)hFile, &oldVersionStr, sizeof(oldVersionStr), &bytesReadWritten, NULL) == TRUE)
    993          		{
    994          			// Put a NULL at the end of the string read so we can compare strings
    995          			oldVersionStr[bytesReadWritten] = 0;
    996          
    997          			// Compare old version with new version
    998          			if (strcmp(newVersionStr, oldVersionStr) == 0)	// if strings the same
    999          			{
   1000          				CloseHandle((HANDLE)hFile);
   1001          				return false;
   1002          			}
   1003          			else
   1004          			{
   1005          				// Else file old version - update and return indicating wrong version
   1006          				LONG dist;
   1007          
   1008          				dist = 0;
   1009          				SetFilePointer((HANDLE)hFile, dist, NULL, FILE_BEGIN);		// Point back to start of file
   1010          				WriteFile((HANDLE)hFile, newVersionStr, strlen(newVersionStr), &bytesReadWritten, NULL);
   1011          				CloseHandle((HANDLE)hFile);
   1012          				return true;
   1013          			}
   1014          		}
   1015          		else
   1016          		{
   1017          			CloseHandle((HANDLE)hFile);
   1018          			return true;
   1019          		}
   1020          	}
   1021          	else
   1022          	{
   1023          		// else file does not exist - make it
   1024          		if ((hFile = OpenFile(VERSION_PATH, &fStruct, OF_CREATE)) != HFILE_ERROR)
   1025          		{
   1026          			// else file old version - update and return indicating wrong version
   1027          			WriteFile((HANDLE)hFile, newVersionStr, strlen(newVersionStr), &bytesReadWritten, NULL);
   1028          			CloseHandle((HANDLE)hFile);
   1029          		}
   1030          	}
   1031          	return true;
   1032          }
   1033          #else
   1034          // Target hardware version

   \                                 In section .text, align 4, keep-with-next
   1035          int NewSWVersion(void)
   1036          {
   \                     NewSWVersion:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   1037          	FS_FILE *pFile;
   1038          	int version = DU2_SW_REV;
   1039          	char newVersionStr[10];
   1040          
   1041          	// Build current version string
   1042          	local_itoa(version, newVersionStr);
   \   00000008   2D00A0E3           MOV      R0,#+45
   \   0000000C   400F80E3           ORR      R0,R0,#0x100
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0D20A0E1           MOV      R2,SP
   \                     ??NewSWVersion_0:
   \   00000018   ........           LDR      R3,??DataTable110_14  ;; 0x66666667
   \   0000001C   0AE0A0E3           MOV      LR,#+10
   \   00000020   90C3C3E0           SMULL    R12,R3,R0,R3
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   4331B0E1           ASRS     R3,R3,#+2
   \   0000002C   01308342           ADDMI    R3,R3,#+1
   \   00000030   03C0A0E1           MOV      R12,R3
   \   00000034   8C0E6CE1           SMULBB   R12,R12,LR
   \   00000038   0C0040E0           SUB      R0,R0,R12
   \   0000003C   300080E2           ADD      R0,R0,#+48
   \   00000040   0100C2E4           STRB     R0,[R2], #+1
   \   00000044   0300A0E1           MOV      R0,R3
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   F1FFFFAA           BGE      ??NewSWVersion_0
   \   00000050   0040A0E3           MOV      R4,#+0
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   0040C1E7           STRB     R4,[R1, +R0]
   \   0000005C   0050A0E3           MOV      R5,#+0
   \   00000060   ........           BL       strlen
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0D2080E0           ADD      R2,R0,SP
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   170000AA           BGE      ??NewSWVersion_1
   1043          
   1044          	if ((pFile = FS_FOpen(VERSION_PATH, "r+")) != NULL)
   \                     ??NewSWVersion_2:
   \   00000078   ............       ADRL     R5,VERSION_PATH
   \              ....        
   \   00000080   ........           ADR      R1,??DataTable109  ;; 0x72, 0x2B, 0x00, 0x00
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       FS_FOpen
   \   0000008C   0060B0E1           MOVS     R6,R0
   \   00000090   1E00000A           BEQ      ??NewSWVersion_3
   1045          	{
   1046          		U32 bytesRead;
   1047          		char oldVersionStr[10];
   1048          
   1049          		// Read file to get last version
   1050          		if ((bytesRead = FS_Read(pFile, &oldVersionStr, sizeof(oldVersionStr))) != 0)
   \   00000094   0A30A0E3           MOV      R3,#+10
   \   00000098   0C208DE2           ADD      R2,SP,#+12
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   ........           BL       PF_FS_Read
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   2300000A           BEQ      ??NewSWVersion_4
   1051          		{
   1052          			// Put a NULL at the end of the string read so we can compare strings
   1053          			oldVersionStr[bytesRead] = 0;
   \   000000B0   0C108DE2           ADD      R1,SP,#+12
   \   000000B4   0140C0E7           STRB     R4,[R0, +R1]
   1054          
   1055          			// Compare old version with new version
   1056          			if (strcmp(newVersionStr, oldVersionStr) == 0)	// if strings the same
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       strcmp
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0C00001A           BNE      ??NewSWVersion_5
   1057          			{
   1058          				FS_FClose(pFile);
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   ........           BL       FS_FClose
   1059          				return false;
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   1C0000EA           B        ??NewSWVersion_6
   \                     ??NewSWVersion_1:
   \   000000D8   00C0D2E5           LDRB     R12,[R2, #+0]
   \   000000DC   0030D1E5           LDRB     R3,[R1, #+0]
   \   000000E0   015085E2           ADD      R5,R5,#+1
   \   000000E4   01C0C1E4           STRB     R12,[R1], #+1
   \   000000E8   010040E2           SUB      R0,R0,#+1
   \   000000EC   013042E4           STRB     R3,[R2], #-1
   \   000000F0   000055E1           CMP      R5,R0
   \   000000F4   F7FFFFBA           BLT      ??NewSWVersion_1
   \   000000F8   DEFFFFEA           B        ??NewSWVersion_2
   1060          			}
   1061          			else
   1062          			{
   1063          				// Else file old version - update and return indicating wrong version
   1064          				FS_SetFilePos(pFile, 0, FS_FILE_BEGIN);			// Point back to start of file
   \                     ??NewSWVersion_5:
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           BL       FS_FSeek
   1065          				FS_Write(pFile, newVersionStr, strlen(newVersionStr));
   \   0000010C   040000EA           B        ??NewSWVersion_7
   1066          				FS_FClose(pFile);
   1067          				return true;
   1068          			}
   1069          		}
   1070          		else
   1071          		{
   1072          			FS_FClose(pFile);
   1073          			return true;
   1074          		}
   1075          	}
   1076          	else
   1077          	{
   1078          		// else file does not exist - make it
   1079          		if ((pFile = FS_FOpen(VERSION_PATH, "w")) != NULL)
   \                     ??NewSWVersion_3:
   \   00000110   ........           ADR      R1,??DataTable110  ;; "w"
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   ........           BL       FS_FOpen
   \   0000011C   0060B0E1           MOVS     R6,R0
   \   00000120   0800000A           BEQ      ??NewSWVersion_8
   1080          		{
   1081          			// Else file old version - update and return indicating wrong version
   1082          			FS_Write(pFile, newVersionStr, strlen(newVersionStr));
   \                     ??NewSWVersion_7:
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           BL       strlen
   \   0000012C   0030A0E1           MOV      R3,R0
   \   00000130   0D20A0E1           MOV      R2,SP
   \   00000134   0610A0E1           MOV      R1,R6
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   ........           BL       PF_FS_Write
   1083          			FS_FClose(pFile);
   \                     ??NewSWVersion_4:
   \   00000140   0600A0E1           MOV      R0,R6
   \   00000144   ........           BL       FS_FClose
   1084          		}
   1085          	}
   1086          	return true;
   \                     ??NewSWVersion_8:
   \   00000148   0100A0E3           MOV      R0,#+1
   \                     ??NewSWVersion_6:
   \   0000014C   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000150   7080BDE8           POP      {R4-R6,PC}       ;; return
   1087          }
   1088          #endif
   1089          
   1090          // See if the user wants to verify the track SF lines

   \                                 In section .text, align 4, keep-with-next
   1091          int UserWantsToUpdateSF(void)
   1092          {
   \                     UserWantsToUpdateSF:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   1093          	int retval;
   1094          
   1095          	static const GUI_WIDGET_CREATE_INFO CheckUpdateTracks[] = {
   1096          		{ FRAMEWIN_CreateIndirect, "New Software Detected", 0, 20, 20, 400, 220, 0, 0 },
   1097          		{ TEXT_CreateIndirect, "New Track Definitions. Would you like", 0, 0, 30, 400, 30, TEXT_CF_HCENTER },
   1098          		{ TEXT_CreateIndirect, "to update Start/Finish coordinates?", 0, 0, 70, 400, 30, TEXT_CF_HCENTER },
   1099          		{ BUTTON_CreateIndirect, "YES", GUI_ID_YES, 60, 115, 100, 60 },
   1100          		{ BUTTON_CreateIndirect, "NO", GUI_ID_NO, 240, 115, 100, 60 },
   1101          	};
   1102          
   1103          	SetPopupDefaults(WARNING_POPUP);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   ........           BL       SetPopupDefaults
   1104          
   1105          	if (GUI_ExecDialogBox(CheckUpdateTracks, GUI_COUNTOF(CheckUpdateTracks), &popupCallback, WM_GetDesktopWindow(), 10, 10) == GUI_ID_YES)
   \   00000010   ........           BL       WM_GetDesktopWindow
   \   00000014   0A10A0E3           MOV      R1,#+10
   \   00000018   04108DE5           STR      R1,[SP, #+4]
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0030A0E1           MOV      R3,R0
   \   00000024   ........           LDR      R2,??DataTable113
   \   00000028   0510A0E3           MOV      R1,#+5
   \   0000002C   ............       ADRL     R0,??CheckUpdateTracks
   \              ....        
   \   00000034   ........           BL       GUI_ExecDialogBox
   \   00000038   030050E3           CMP      R0,#+3
   1106          		retval = true;
   \   0000003C   0140A003           MOVEQ    R4,#+1
   1107          	else retval = false;
   \   00000040   0040A013           MOVNE    R4,#+0
   1108          
   1109          	DisplaySplashScreen1();
   \   00000044   ........           BL       GUI_Clear
   \   00000048   0A20A0E3           MOV      R2,#+10
   \   0000004C   2710A0E3           MOV      R1,#+39
   \   00000050   ........           LDR      R0,??DataTable110_11
   \   00000054   ........           BL       GUI_DrawBitmap
   \   00000058   6120A0E3           MOV      R2,#+97
   \   0000005C   1410A0E3           MOV      R1,#+20
   \   00000060   ........           LDR      R0,??DataTable110_12
   \   00000064   ........           BL       GUI_DrawBitmap
   \   00000068   6E20A0E3           MOV      R2,#+110
   \   0000006C   F010A0E3           MOV      R1,#+240
   \   00000070   ........           LDR      R0,??DataTable110_13
   \   00000074   ........           BL       GUI_DrawBitmap
   1110          	return retval;
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
   \   00000080   1080BDE8           POP      {R4,PC}          ;; return
   1111          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??CheckUpdateTracks:
   \   00000000                      ; Initializer data, 120 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "New Software Detected">`
   \              ....        
   \   00000008   000014001400       DC16 0, 20, 20, 400, 220, 0
   \              9001DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "New Track Definitions...">`
   \              ............
   \   00000020   000000001E00       DC16 0, 0, 30, 400, 30, 2
   \              90011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "to update Start/Finis...">`
   \              ....        
   \   00000038   000000004600       DC16 0, 0, 70, 400, 30, 2
   \              90011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "YES">`
   \              ....        
   \   00000050   03003C007300       DC16 3, 60, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "NO">`
   \              ....        
   \   00000068   0400F0007300       DC16 4, 240, 115, 100, 60
   \              64003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   1112          
   1113          

   \                                 In section .text, align 4, keep-with-next
   1114          void InitializeTraqmateData(void)
   1115          {
   \                     InitializeTraqmateData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1116          	int retval;
   1117          	
   1118          	CreateTracks();					// Initialize trackTable
   \   00000008   ........           BL       CreateTracks
   1119          
   1120          	if ((retval = ReadDataStructures()) != 0)
   \   0000000C   ........           BL       ReadDataStructures
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500000A           BEQ      ??InitializeTraqmateData_0
   1121          #ifndef _WINDOWS
   1122          		if (unsavedSysData.sdCardInserted)			// Only tell the user about missing files if the SD card is actually present!
   \   00000018   ........           LDR      R1,??DataTable110_10
   \   0000001C   C01091E5           LDR      R1,[R1, #+192]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0000000A           BEQ      ??InitializeTraqmateData_1
   1123          #endif
   1124          			DisplayInvalidFilesPopup(retval);
   \   00000028   ........           BL       DisplayInvalidFilesPopup
   1125          
   1126          	ResetAllFileLists(false);		// Reset file lists without calling CreateTracks
   \                     ??InitializeTraqmateData_1:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \                     ??InitializeTraqmateData_0:
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   0040BDE8           POP      {LR}
   \   00000038   ........           B        ResetAllFileLists  ;; tailcall
   1127          }
   1128          
   1129          //
   1130          // Invalid files found at startup
   1131          // Tell user what failed
   1132          //

   \                                 In section .bss, align 4
   1133          char fileList[100];
   \                     fileList:
   \   00000000                      DS8 100
   1134          

   \                                 In section .text, align 4, keep-with-next
   1135          void DisplayInvalidFilesPopup(int files)
   1136          {
   \                     DisplayInvalidFilesPopup:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   1137          	char anyItemSet = false;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1138          
   1139          static const GUI_WIDGET_CREATE_INFO InvalidFilesResources[] = {
   1140          	{ FRAMEWIN_CreateIndirect, "Check Your Settings", 0, 30, 20, 400, 220, 0, 0 },
   1141          	{ TEXT_CreateIndirect, "The following configuration(s)", 0, 0, 10, 390, 30, TEXT_CF_HCENTER },
   1142          	{ TEXT_CreateIndirect, "were set to defaults:",    0, 0, 40, 390, 30, TEXT_CF_HCENTER },
   1143          	{ BUTTON_CreateIndirect, "OK", GUI_ID_OK, 145, 115, 100, 60 },
   1144          };
   1145          
   1146          	SetPopupDefaults(WARNING_POPUP);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   ........           BL       SetPopupDefaults
   1147          
   1148          	glbBlackoutFlag = true;			// Suspend gauge screen updates while the modal popup dialog box is diaplyed
   \   00000018   ........           LDR      R0,??DataTable110_15
   \   0000001C   0160A0E3           MOV      R6,#+1
   \   00000020   006080E5           STR      R6,[R0, #+0]
   1149          
   1150          	systemSettingsPopupScreen = INVALID_FILES;
   \   00000024   ........           LDR      R0,??DataTable113_1
   1151          
   1152          	fileList[0] = 0;
   \   00000028   ........           LDR      R7,??DataTable113_2
   \   0000002C   0810A0E3           MOV      R1,#+8
   \   00000030   001080E5           STR      R1,[R0, #+0]
   \   00000034   0050C7E5           STRB     R5,[R7, #+0]
   1153          	if (files & INVALID_SYSTEM_DATA)
   \   00000038   010014E3           TST      R4,#0x1
   \   0000003C   0400000A           BEQ      ??DisplayInvalidFilesPopup_0
   1154          	{
   1155          		strcat(fileList, "System");
   \   00000040   ............       ADRL     R1,`?<Constant "System">`
   \              ....        
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   ........           BL       strcat
   1156          		anyItemSet = true;
   \   00000050   0150A0E3           MOV      R5,#+1
   1157          	}
   1158          	if (files & INVALID_VEHICLE_DATA)
   \                     ??DisplayInvalidFilesPopup_0:
   \   00000054   020014E3           TST      R4,#0x2
   \   00000058   0A00000A           BEQ      ??DisplayInvalidFilesPopup_1
   1159          	{
   1160          		if (anyItemSet)
   \   0000005C   000055E3           CMP      R5,#+0
   \   00000060   0300000A           BEQ      ??DisplayInvalidFilesPopup_2
   1161          			strcat(fileList, ", ");
   \   00000064   ........           ADR      R1,??DataTable110_1  ;; 0x2C, 0x20, 0x00, 0x00
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   ........           BL       strcat
   \   00000070   000000EA           B        ??DisplayInvalidFilesPopup_3
   1162          		else anyItemSet = true;
   \                     ??DisplayInvalidFilesPopup_2:
   \   00000074   0150A0E3           MOV      R5,#+1
   1163          		strcat(fileList, "Vehicle");
   \                     ??DisplayInvalidFilesPopup_3:
   \   00000078   ............       ADRL     R1,`?<Constant "Vehicle">`
   \              ....        
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           BL       strcat
   1164          	}
   1165          	if (files & INVALID_TRACK_DATA)
   \                     ??DisplayInvalidFilesPopup_1:
   \   00000088   040014E3           TST      R4,#0x4
   \   0000008C   0A00000A           BEQ      ??DisplayInvalidFilesPopup_4
   1166          	{
   1167          		if (anyItemSet)
   \   00000090   000055E3           CMP      R5,#+0
   \   00000094   0300000A           BEQ      ??DisplayInvalidFilesPopup_5
   1168          			strcat(fileList, ", ");
   \   00000098   ........           ADR      R1,??DataTable110_1  ;; 0x2C, 0x20, 0x00, 0x00
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   ........           BL       strcat
   \   000000A4   000000EA           B        ??DisplayInvalidFilesPopup_6
   1169          		else anyItemSet = true;
   \                     ??DisplayInvalidFilesPopup_5:
   \   000000A8   0150A0E3           MOV      R5,#+1
   1170          		strcat(fileList, "Track");
   \                     ??DisplayInvalidFilesPopup_6:
   \   000000AC   ............       ADRL     R1,`?<Constant "Track">`
   \              ....        
   \   000000B4   0700A0E1           MOV      R0,R7
   \   000000B8   ........           BL       strcat
   1171          	}
   1172          	if (files & INVALID_DRIVER_DATA)
   \                     ??DisplayInvalidFilesPopup_4:
   \   000000BC   080014E3           TST      R4,#0x8
   \   000000C0   0800000A           BEQ      ??DisplayInvalidFilesPopup_7
   1173          	{
   1174          		if (anyItemSet)
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   0200000A           BEQ      ??DisplayInvalidFilesPopup_8
   1175          			strcat(fileList, ", ");
   \   000000CC   ........           ADR      R1,??DataTable110_1  ;; 0x2C, 0x20, 0x00, 0x00
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           BL       strcat
   1176          		else anyItemSet = true;
   1177          		strcat(fileList, "Driver");
   \                     ??DisplayInvalidFilesPopup_8:
   \   000000D8   ............       ADRL     R1,`?<Constant "Driver">`
   \              ....        
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   ........           BL       strcat
   1178          	}
   1179          
   1180          	GUI_ExecDialogBox(InvalidFilesResources, GUI_COUNTOF(InvalidFilesResources), &popupCallback, WM_GetDesktopWindow(), 10, 10);
   \                     ??DisplayInvalidFilesPopup_7:
   \   000000E8   ........           BL       WM_GetDesktopWindow
   \   000000EC   0A10A0E3           MOV      R1,#+10
   \   000000F0   04108DE5           STR      R1,[SP, #+4]
   \   000000F4   00108DE5           STR      R1,[SP, #+0]
   \   000000F8   0030A0E1           MOV      R3,R0
   \   000000FC   ........           LDR      R2,??DataTable113
   \   00000100   0410A0E3           MOV      R1,#+4
   \   00000104   ............       ADRL     R0,??InvalidFilesResources
   \              ....        
   \   0000010C   ........           BL       GUI_ExecDialogBox
   1181          }
   \   00000110   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000114   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??InvalidFilesResources:
   \   00000000                      ; Initializer data, 96 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Check Your Settings">`
   \              ....        
   \   00000008   00001E001400       DC16 0, 30, 20, 400, 220, 0
   \              9001DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "The following configu...">`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 390, 30, 2
   \              86011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "were set to defaults:">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 390, 30, 2
   \              86011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 BUTTON_CreateIndirect, `?<Constant "OK">`
   \              ....        
   \   00000050   010091007300       DC16 1, 145, 115, 100, 60
   \              64003C00    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0
   1182          

   \                                 In section .text, align 4, keep-with-next
   1183          void AskAndDoFormatSDCard(void)
   1184          {
   \                     AskAndDoFormatSDCard:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1185          	// SD card not formatted
   1186          	WM_HWIN hWin;
   1187          
   1188          	if (SystemSettingsPopUp(INVALID_SDCARD, hWin = WM_GetDesktopWindow()))	// Tell the user the SD card is invalid
   \   00000004   ........           BL       WM_GetDesktopWindow
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E3           MOV      R0,#+13
   \   00000014   ........           BL       SystemSettingsPopUp
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0600000A           BEQ      ??AskAndDoFormatSDCard_0
   1189          		if (SystemSettingsPopUp(FORMAT_SDCARD, hWin))						// See if the user is willing to format this SD card
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0300A0E3           MOV      R0,#+3
   \   00000028   ........           BL       SystemSettingsPopUp
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100000A           BEQ      ??AskAndDoFormatSDCard_0
   1190          			FormatSDCard(hWin);												// yes, yes - format the card!
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       FormatSDCard
   1191          }
   \                     ??AskAndDoFormatSDCard_0:
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   1192          

   \                                 In section .text, align 4, keep-with-next
   1193          void CreateProgressBar( PROGBAR_Handle *hProgBar, int maxval) {
   \                     CreateProgressBar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   1194          	*hProgBar = PROGBAR_CreateEx( 90, 170, 300, 70, 0, WM_CF_SHOW, PROGBAR_CF_HORIZONTAL, 1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0C008DE5           STR      R0,[SP, #+12]
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   08008DE5           STR      R0,[SP, #+8]
   \   0000001C   0200A0E3           MOV      R0,#+2
   \   00000020   04008DE5           STR      R0,[SP, #+4]
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0150A0E1           MOV      R5,R1
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   4630A0E3           MOV      R3,#+70
   \   00000034   4B2FA0E3           MOV      R2,#+300
   \   00000038   AA10A0E3           MOV      R1,#+170
   \   0000003C   5A00A0E3           MOV      R0,#+90
   \   00000040   ........           BL       PROGBAR_CreateEx
   \   00000044   000084E5           STR      R0,[R4, #+0]
   1195          	PROGBAR_SetFont(*hProgBar, &GUI_Font32_ASCII);
   \   00000048   ........           LDR      R1,??DataTable113_3
   \   0000004C   ........           BL       PROGBAR_SetFont
   1196          	PROGBAR_SetTextColor(*hProgBar, 0, GUI_BLACK);
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   000094E5           LDR      R0,[R4, #+0]
   \   0000005C   ........           BL       PROGBAR_SetTextColor
   1197          	PROGBAR_SetTextColor(*hProgBar, 1, GUI_WHITE);
   \   00000060   FF24E0E3           MVN      R2,#-16777216
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   ........           BL       PROGBAR_SetTextColor
   1198          	PROGBAR_SetMinMax(*hProgBar, 0, maxval);
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   ........           BL       PROGBAR_SetMinMax
   1199          	PROGBAR_SetBarColor(*hProgBar, 0, GUI_GREEN);
   \   00000080   FF2CA0E3           MOV      R2,#+65280
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   ........           BL       PROGBAR_SetBarColor
   1200          	PROGBAR_SetBarColor(*hProgBar, 1, GUI_BLACK);
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   000094E5           LDR      R0,[R4, #+0]
   \   0000009C   ........           BL       PROGBAR_SetBarColor
   1201          	WIDGET_SetEffect(*hProgBar, &WIDGET_Effect_3D);
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   14D08DE2           ADD      SP,SP,#+20
   \   000000A8   3040BDE8           POP      {R4,R5,LR}
   \   000000AC   ........           LDR      R1,??DataTable113_4
   \   000000B0   ........           B        WIDGET_SetEffect  ;; tailcall
   1202          }
   1203          
   1204          #ifndef _WINDOWS

   \                                 In section .text, align 4, keep-with-next
   1205          void WriteCodeImage(void) {
   \                     WriteCodeImage:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   6DDF4DE2           SUB      SP,SP,#+436
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   1206          	FS_FILE *pFile;								// file handle
   1207          	char pagebuff[MAX_PAGE_64MBIT];				// max size for flash buffer
   1208          	unsigned long bytesread, totalbytes;		// progress counters
   1209          	u16 pagenum;								// which flash page are we writing
   1210          	int rev;									// which rev is code data file
   1211          	PROGBAR_Handle hProgBar;					// progress bar
   1212          #ifdef BUILD_DEBUG_PORT
   1213          	char tempstr[60];							// for writing debug messages
   1214          #endif
   1215          	
   1216          #define TRAQDASHCODENAME		"tdfirm"		// traqdash firmware
   1217          #define TRAQDASHBOOTNAME		"tdboot"		// traqdash bootloader
   1218          #define SUCODENAME				"sufirm"		// su firmware
   1219          #define CODENAMESIZE			6				// length of strings above
   1220          
   1221          #define TRAQMATECODEEXT			"tqc"			// application code
   1222          #define TRAQMATEBOOTEXT			"tqb"			// bootloader code
   1223          #define EXTNAMESIZE				3				// length of strings above
   1224          
   1225          #define CODEFILENAMESIZE	(CODENAMESIZE + 3 + 1 + EXTNAMESIZE)		// file name size of code files
   1226          									// valid code update filenames in format AAAAAANNN.TQC
   1227          									// where AAAAA is TDCODE, TDBOOT, or SUCODE
   1228          									// NNN is 3 digit number
   1229          									// TQC is extension for all Traqmate code
   1230          #define CODEFILENAMEDOT		(CODEFILENAMESIZE - 4)
   1231          #define CODEFILENAMEEXT		(CODEFILENAMEDOT + 1)
   1232          #define CODEFILENAMEDIGITS	(CODEFILENAMEDOT - 3)
   1233          
   1234          FS_FIND_DATA findstruct;
   1235          char filename[MAX_FILENAME_SIZE];		// where to stash the filename
   1236          typedef struct {
   1237          	char name[CODEFILENAMESIZE+1];
   1238          	int rev;
   1239          } codefilestruct;
   1240          
   1241          codefilestruct codefiles[NOMATCH] =	{				// 0 = su code, 1 = traqdash boot, 3 = traqdash code
   1242          	{ "", 0 },
   1243          	{ "", 0 },
   1244          	{ "", 0 } };
   \   0000000C   1C008DE2           ADD      R0,SP,#+28
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   00C0A0E3           MOV      R12,#+0
   \   00000020   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000024   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000028   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   0000002C   0E00A0E8           STM      R0!,{R1-R3}
   1245          
   1246          codefiletypes whichcodefile;
   1247          
   1248          	// step through directory looking for code files
   1249          	if (0 == FS_FindFirstFile(&findstruct, "\\", filename, MAX_FILENAME_SIZE)) {
   \   00000030   9630A0E3           MOV      R3,#+150
   \   00000034   BC208DE2           ADD      R2,SP,#+188
   \   00000038   611F8FE2           ADR      R1,??WriteCodeImage_0  ;; "\\"
   \   0000003C   550F8DE2           ADD      R0,SP,#+340
   \   00000040   ........           BL       FS_FindFirstFile
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   BC408DE2           ADD      R4,SP,#+188
   \   0000004C   4800001A           BNE      ??WriteCodeImage_1
   1250          
   1251          		do {	// process file filename
   1252          			if ((CODEFILENAMESIZE == strlen(filename)) && ('.' == filename[CODEFILENAMEDOT])) {
   \                     ??WriteCodeImage_2:
   \   00000050   BC008DE2           ADD      R0,SP,#+188
   \   00000054   ........           BL       strlen
   \   00000058   0D0050E3           CMP      R0,#+13
   \   0000005C   0900D405           LDRBEQ   R0,[R4, #+9]
   \   00000060   2E005003           CMPEQ    R0,#+46
   \   00000064   3E00001A           BNE      ??WriteCodeImage_3
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0900C4E5           STRB     R0,[R4, #+9]
   1253          				filename[CODEFILENAMEDOT] = '\0';
   1254          
   1255          				rev = atoi(filename + CODEFILENAMEDIGITS);
   \   00000070   0A20A0E3           MOV      R2,#+10
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   C2008DE2           ADD      R0,SP,#+194
   \   0000007C   ........           BL       __iar_Stoul
   \   00000080   0050B0E1           MOVS     R5,R0
   1256          
   1257          				if (0 != rev) {		// no match
   \   00000084   3600000A           BEQ      ??WriteCodeImage_3
   1258          					int i;
   1259          					
   1260          					for (i=0; i < CODEFILENAMESIZE; i++) {
   \   00000088   BC608DE2           ADD      R6,SP,#+188
   \   0000008C   0D70A0E3           MOV      R7,#+13
   1261          						filename[i] = tolower(filename[i]);		// go to lowercase for comparison
   \                     ??WriteCodeImage_4:
   \   00000090   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000094   ........           BL       tolower
   \   00000098   0100C6E4           STRB     R0,[R6], #+1
   1262          					} // for
   \   0000009C   017057E2           SUBS     R7,R7,#+1
   \   000000A0   FAFFFF1A           BNE      ??WriteCodeImage_4
   1263          	
   1264          					whichcodefile = NOMATCH;
   1265          					if (0 == strncmp(TRAQMATECODEEXT, filename + CODEFILENAMEEXT, EXTNAMESIZE)) {
   \   000000A4   0320A0E3           MOV      R2,#+3
   \   000000A8   C6108DE2           ADD      R1,SP,#+198
   \   000000AC   450F8FE2           ADR      R0,??WriteCodeImage_0+0x4  ;; "tqc"
   \   000000B0   ........           BL       strncmp
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0F00001A           BNE      ??WriteCodeImage_5
   1266          						// see if it matches one of the ones we need
   1267          						if (0 == strncmp(TRAQDASHCODENAME, filename, CODENAMESIZE))
   \   000000BC   0620A0E3           MOV      R2,#+6
   \   000000C0   BC108DE2           ADD      R1,SP,#+188
   \   000000C4   ............       ADRL     R0,`?<Constant "tdfirm">`
   \              ....        
   \   000000CC   ........           BL       strncmp
   \   000000D0   000050E3           CMP      R0,#+0
   1268          							whichcodefile = CODETQ;
   \   000000D4   0100A003           MOVEQ    R0,#+1
   \   000000D8   1500000A           BEQ      ??WriteCodeImage_6
   1269          						else if (0 == strncmp(SUCODENAME, filename, CODENAMESIZE))
   \   000000DC   0620A0E3           MOV      R2,#+6
   \   000000E0   BC108DE2           ADD      R1,SP,#+188
   \   000000E4   ............       ADRL     R0,`?<Constant "sufirm">`
   \              ....        
   \   000000EC   ........           BL       strncmp
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1A00001A           BNE      ??WriteCodeImage_3
   1270          							whichcodefile = CODESU;
   \   000000F8   0D0000EA           B        ??WriteCodeImage_6
   1271          					} // if
   1272          					else if (0 == strncmp(TRAQMATEBOOTEXT, filename + CODEFILENAMEEXT, EXTNAMESIZE)) {
   \                     ??WriteCodeImage_5:
   \   000000FC   0320A0E3           MOV      R2,#+3
   \   00000100   C6108DE2           ADD      R1,SP,#+198
   \   00000104   C0008FE2           ADR      R0,??WriteCodeImage_0+0x8  ;; "tqb"
   \   00000108   ........           BL       strncmp
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   1300001A           BNE      ??WriteCodeImage_3
   1273          						if (0 == strncmp(TRAQDASHBOOTNAME, filename, CODENAMESIZE))
   \   00000114   0620A0E3           MOV      R2,#+6
   \   00000118   BC108DE2           ADD      R1,SP,#+188
   \   0000011C   ............       ADRL     R0,`?<Constant "tdboot">`
   \              ....        
   \   00000124   ........           BL       strncmp
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0C00001A           BNE      ??WriteCodeImage_3
   1274          							whichcodefile = BOOTTQ;
   \   00000130   0200A0E3           MOV      R0,#+2
   1275          					} // else if
   1276          					
   1277          					if (NOMATCH != whichcodefile) {
   1278          						if (rev > codefiles[whichcodefile].rev) {					// only remember the latest of each type
   \                     ??WriteCodeImage_6:
   \   00000134   1410A0E3           MOV      R1,#+20
   \   00000138   1C208DE2           ADD      R2,SP,#+28
   \   0000013C   812006E1           SMLABB   R6,R1,R0,R2
   \   00000140   100096E5           LDR      R0,[R6, #+16]
   \   00000144   050050E1           CMP      R0,R5
   \   00000148   050000AA           BGE      ??WriteCodeImage_3
   1279          							filename[CODEFILENAMEDOT] = '.';						// put the dot back
   \   0000014C   2E00A0E3           MOV      R0,#+46
   \   00000150   0900C4E5           STRB     R0,[R4, #+9]
   1280          							strcpy(codefiles[whichcodefile].name, filename);		// save filename for later
   \   00000154   BC108DE2           ADD      R1,SP,#+188
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   ........           BL       strcpy
   1281          							codefiles[whichcodefile].rev = rev;
   \   00000160   105086E5           STR      R5,[R6, #+16]
   1282          						} // if
   1283          					 } // if
   1284          				} // if
   1285          			} // if
   1286          			
   1287          		} while (0 != FS_FindNextFile(&findstruct));
   \                     ??WriteCodeImage_3:
   \   00000164   550F8DE2           ADD      R0,SP,#+340
   \   00000168   ........           BL       FS_FindNextFile
   \   0000016C   000050E3           CMP      R0,#+0
   \   00000170   B6FFFF1A           BNE      ??WriteCodeImage_2
   1288          	} // if
   1289          
   1290          	// clean up
   1291          	FS_FindClose(&findstruct);
   \                     ??WriteCodeImage_1:
   \   00000174   550F8DE2           ADD      R0,SP,#+340
   \   00000178   ........           BL       FS_FindClose
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   14108DE5           STR      R1,[SP, #+20]
   \   00000184   2C108DE2           ADD      R1,SP,#+44
   \   00000188   18108DE5           STR      R1,[SP, #+24]
   \   0000018C   ........           LDR      R4,??DataTable114
   \   00000190   ........           LDR      R5,??DataTable115
   \   00000194   ........           LDR      R6,??DataTable115_1
   1292          
   1293          	// process the files that we found
   1294          	for (whichcodefile = CODESU; whichcodefile < NOMATCH; whichcodefile++) {
   1295          		if (0 != codefiles[whichcodefile].rev) {
   \                     ??WriteCodeImage_7:
   \   00000198   18009DE5           LDR      R0,[SP, #+24]
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   7C02000A           BEQ      ??WriteCodeImage_8
   1296          			switch (whichcodefile) {
   \   000001A8   14009DE5           LDR      R0,[SP, #+20]
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   0600000A           BEQ      ??WriteCodeImage_9
   \   000001B4   020050E3           CMP      R0,#+2
   \   000001B8   2601000A           BEQ      ??WriteCodeImage_10
   \   000001BC   2501003A           BCC      ??WriteCodeImage_10
   \   000001C0   750200EA           B        ??WriteCodeImage_8
   \                     ??WriteCodeImage_0:
   \   000001C4   5C000000           DC8      "\\",0x0,0x0
   \   000001C8   74716300           DC8      "tqc"
   \   000001CC   74716200           DC8      "tqb"
   1297          				case CODESU: {
   1298          
   1299          					if (0 != suData.suSwRev) {					// only attempt SU reflash if we have made contact with SU
   \                     ??WriteCodeImage_9:
   \   000001D0   ........           LDR      R0,??DataTable115_2
   \   000001D4   B001D0E1           LDRH     R0,[R0, #+16]
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   6E02000A           BEQ      ??WriteCodeImage_8
   1300          						if (suData.suSwRev < codefiles[whichcodefile].rev) {		// and make sure SU code is newer
   \   000001E0   2C109DE5           LDR      R1,[SP, #+44]
   \   000001E4   010050E1           CMP      R0,R1
   \   000001E8   6B0200AA           BGE      ??WriteCodeImage_8
   1301          
   1302          							// give SU a chance to finish boot up
   1303          							OS_Delay(2500);
   \   000001EC   C410A0E3           MOV      R1,#+196
   \   000001F0   901E81E3           ORR      R1,R1,#0x900
   \   000001F4   0000A0E3           MOV      R0,#+0
   \   000001F8   ........           BL       PF_OS_Delay
   1304          
   1305          							// give user chance to back out
   1306          							if (!ReFlashYorN(CODESU, codefiles[whichcodefile].rev))
   \   000001FC   2C809DE5           LDR      R8,[SP, #+44]
   \   00000200   0300A0E3           MOV      R0,#+3
   \   00000204   ........           BL       SetPopupDefaults
   \   00000208   94008DE2           ADD      R0,SP,#+148
   \   0000020C   4C0085E5           STR      R0,[R5, #+76]
   \   00000210   ........           LDR      R0,??DataTable115_2
   \   00000214   B071D0E1           LDRH     R7,[R0, #+16]
   \   00000218   ............       ADRL     R0,`?<Constant "NEW SU FIRMWARE FOUND">`
   \              ....        
   \   00000220   040085E5           STR      R0,[R5, #+4]
   \   00000224   ............       ADRL     R0,`?<Constant "Update Connected SU F...">`
   \              ....        
   \   0000022C   640085E5           STR      R0,[R5, #+100]
   \   00000230   0800A0E1           MOV      R0,R8
   \   00000234   ........           BL       __aeabi_i2f
   \   00000238   ........           BL       __aeabi_f2d
   \   0000023C   4034A0E3           MOV      R3,#+1073741824
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   593883E3           ORR      R3,R3,#0x590000
   \   00000248   ........           BL       __aeabi_ddiv
   \   0000024C   03008DE8           STM      SP,{R0,R1}
   \   00000250   0700A0E1           MOV      R0,R7
   \   00000254   ........           BL       __aeabi_i2f
   \   00000258   ........           BL       __aeabi_f2d
   \   0000025C   4034A0E3           MOV      R3,#+1073741824
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   593883E3           ORR      R3,R3,#0x590000
   \   00000268   ........           BL       __aeabi_ddiv
   \   0000026C   0020A0E1           MOV      R2,R0
   \   00000270   0130A0E1           MOV      R3,R1
   \   00000274   ............       ADRL     R1,`?<Constant "Current Rev %1.2f, Ne...">`
   \              ....        
   \   0000027C   94008DE2           ADD      R0,SP,#+148
   \   00000280   ........           BL       sprintf
   \   00000284   ........           BL       WM_GetDesktopWindow
   \   00000288   0A10A0E3           MOV      R1,#+10
   \   0000028C   04108DE5           STR      R1,[SP, #+4]
   \   00000290   00108DE5           STR      R1,[SP, #+0]
   \   00000294   0030A0E1           MOV      R3,R0
   \   00000298   ........           LDR      R2,??DataTable113
   \   0000029C   0610A0E3           MOV      R1,#+6
   \   000002A0   0500A0E1           MOV      R0,R5
   \   000002A4   ........           BL       GUI_ExecDialogBox
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   3A02001A           BNE      ??WriteCodeImage_8
   \   000002B0   ........           BL       StopTouchScreenScan
   1307          								break;
   1308          #ifdef BUILD_DEBUG_PORT
   1309          							sprintf(tempstr, "SU code program, file = %s, rev = %d \n\r", codefiles[whichcodefile].name, codefiles[whichcodefile].rev);
   \   000002B4   2C309DE5           LDR      R3,[SP, #+44]
   \   000002B8   1C208DE2           ADD      R2,SP,#+28
   \   000002BC   ............       ADRL     R1,`?<Constant "SU code program, file...">`
   \              ....        
   \   000002C4   58008DE2           ADD      R0,SP,#+88
   \   000002C8   ........           BL       sprintf
   1310          							DBGU_Print(tempstr);
   \   000002CC   58008DE2           ADD      R0,SP,#+88
   \   000002D0   ........           BL       DBGU_Print
   1311          #endif
   1312          							// change mode and notify tasks
   1313          							SetUserMode(DU2_REPROGRAMMING_SU);
   \   000002D4   1F00A0E3           MOV      R0,#+31
   \   000002D8   ........           BL       SetUserMode
   1314          							
   1315          							// Attempt to read SD card code binary file
   1316          							if (NULL == (pFile = FS_FOpen(codefiles[whichcodefile].name, "r")))
   \   000002DC   E01F8FE2           ADR      R1,??WriteCodeImage_11  ;; "r"
   \   000002E0   1C008DE2           ADD      R0,SP,#+28
   \   000002E4   ........           BL       FS_FOpen
   \   000002E8   0070B0E1           MOVS     R7,R0
   \   000002EC   2A02000A           BEQ      ??WriteCodeImage_8
   1317          								break;
   1318          							else {		// opened the file						
   1319          								char destaddr;
   1320          								char cksum;
   1321          								BOOL downloaderror = FALSE;
   1322          
   1323          								CreateProgressBar(&hProgBar, NUMBER_OF_DOWNLOAD_MSGS);							
   \   000002F0   0100A0E3           MOV      R0,#+1
   \   000002F4   0C008DE5           STR      R0,[SP, #+12]
   \   000002F8   0000A0E3           MOV      R0,#+0
   \   000002FC   08008DE5           STR      R0,[SP, #+8]
   \   00000300   0200A0E3           MOV      R0,#+2
   \   00000304   04008DE5           STR      R0,[SP, #+4]
   \   00000308   0000A0E3           MOV      R0,#+0
   \   0000030C   00008DE5           STR      R0,[SP, #+0]
   \   00000310   4630A0E3           MOV      R3,#+70
   \   00000314   4B2FA0E3           MOV      R2,#+300
   \   00000318   AA10A0E3           MOV      R1,#+170
   \   0000031C   5A00A0E3           MOV      R0,#+90
   \   00000320   ........           BL       PROGBAR_CreateEx
   \   00000324   00A0A0E1           MOV      R10,R0
   \   00000328   ........           LDR      R1,??DataTable113_3
   \   0000032C   ........           BL       PROGBAR_SetFont
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0010A0E3           MOV      R1,#+0
   \   00000338   0A00A0E1           MOV      R0,R10
   \   0000033C   ........           BL       PROGBAR_SetTextColor
   \   00000340   FF24E0E3           MVN      R2,#-16777216
   \   00000344   0110A0E3           MOV      R1,#+1
   \   00000348   0A00A0E1           MOV      R0,R10
   \   0000034C   ........           BL       PROGBAR_SetTextColor
   \   00000350   8020A0E3           MOV      R2,#+128
   \   00000354   0010A0E3           MOV      R1,#+0
   \   00000358   0A00A0E1           MOV      R0,R10
   \   0000035C   ........           BL       PROGBAR_SetMinMax
   \   00000360   FF2CA0E3           MOV      R2,#+65280
   \   00000364   0010A0E3           MOV      R1,#+0
   \   00000368   0A00A0E1           MOV      R0,R10
   \   0000036C   ........           BL       PROGBAR_SetBarColor
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0A00A0E1           MOV      R0,R10
   \   0000037C   ........           BL       PROGBAR_SetBarColor
   \   00000380   ........           LDR      R1,??DataTable113_4
   \   00000384   0A00A0E1           MOV      R0,R10
   \   00000388   ........           BL       WIDGET_SetEffect
   1324          								OS_Delay(1000);					// wait for things to quiet down
   \   0000038C   FA1FA0E3           MOV      R1,#+1000
   \   00000390   0000A0E3           MOV      R0,#+0
   \   00000394   ........           BL       PF_OS_Delay
   1325          								
   1326          								PROGBAR_SetText(hProgBar, "Sending");
   \   00000398   ............       ADRL     R1,`?<Constant "Sending">`
   \              ....        
   \   000003A0   0A00A0E1           MOV      R0,R10
   \   000003A4   ........           BL       PROGBAR_SetText
   1327          								GUI_Exec();
   \   000003A8   ........           BL       GUI_Exec
   1328          
   1329          								// get the first byte = destination
   1330          								FS_Read(pFile, &destaddr, 1);
   \   000003AC   0130A0E3           MOV      R3,#+1
   \   000003B0   10208DE2           ADD      R2,SP,#+16
   \   000003B4   0710A0E1           MOV      R1,R7
   \   000003B8   0000A0E3           MOV      R0,#+0
   \   000003BC   ........           BL       PF_FS_Read
   1331          								
   1332          								// tell SU to start the reprogramming process
   1333          								com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = (unsigned char) START_DOWNLOAD; // change operating mode
   \   000003C0   ........           LDR      R0,??DataTable115_4
   \   000003C4   ........           LDR      R2,??DataTable115_5
   \   000003C8   D200D0E1           LDRSB    R0,[R0, #+2]
   \   000003CC   1810A0E3           MOV      R1,#+24
   1334          								SendMessage((u08) DISPLAY_UNIT, destaddr, (u08) MODE_CHANGE, 1);
   \   000003D0   0130A0E3           MOV      R3,#+1
   \   000003D4   802108E1           SMLABB   R8,R0,R1,R2
   \   000003D8   F010A0E3           MOV      R1,#+240
   \   000003DC   100098E5           LDR      R0,[R8, #+16]
   \   000003E0   9120A0E3           MOV      R2,#+145
   \   000003E4   0710C0E5           STRB     R1,[R0, #+7]
   \   000003E8   1010DDE5           LDRB     R1,[SP, #+16]
   \   000003EC   0300A0E3           MOV      R0,#+3
   \   000003F0   ........           BL       SendMessage
   1335          								WAIT_ACK(destaddr);
   \   000003F4   1000DDE5           LDRB     R0,[SP, #+16]
   \   000003F8   040080E0           ADD      R0,R0,R4
   \   000003FC   010050E5           LDRB     R0,[R0, #-1]
   \   00000400   000050E3           CMP      R0,#+0
   \   00000404   0700000A           BEQ      ??WriteCodeImage_12
   \                     ??WriteCodeImage_13:
   \   00000408   0A10A0E3           MOV      R1,#+10
   \   0000040C   0000A0E3           MOV      R0,#+0
   \   00000410   ........           BL       PF_OS_Delay
   \   00000414   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000418   040080E0           ADD      R0,R0,R4
   \   0000041C   010050E5           LDRB     R0,[R0, #-1]
   \   00000420   000050E3           CMP      R0,#+0
   \   00000424   F7FFFF1A           BNE      ??WriteCodeImage_13
   1336          							
   1337          								for (pagenum = 0; pagenum < NUMBER_OF_DOWNLOAD_MSGS; pagenum++) {
   \                     ??WriteCodeImage_12:
   \   00000428   0090A0E3           MOV      R9,#+0
   1338          									// read each page and send it over
   1339          									if (CODE_DOWNLOAD_SIZE != FS_Read(pFile, &(com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START]), CODE_DOWNLOAD_SIZE)) {
   \                     ??WriteCodeImage_14:
   \   0000042C   100098E5           LDR      R0,[R8, #+16]
   \   00000430   803FA0E3           MOV      R3,#+512
   \   00000434   072080E2           ADD      R2,R0,#+7
   \   00000438   0710A0E1           MOV      R1,R7
   \   0000043C   0000A0E3           MOV      R0,#+0
   \   00000440   ........           BL       PF_FS_Read
   \   00000444   800F50E3           CMP      R0,#+512
   \   00000448   6A00001A           BNE      ??WriteCodeImage_15
   1340          										downloaderror = TRUE;
   1341          										break;
   1342          									} // if
   1343          							
   1344          									// send a 512 byte chunk over to SU
   1345          									SendMessage((u08) DISPLAY_UNIT, destaddr, (u08) SW_DOWNLOAD, CODE_DOWNLOAD_SIZE);	
   \   0000044C   803FA0E3           MOV      R3,#+512
   \   00000450   5020A0E3           MOV      R2,#+80
   \   00000454   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000458   0300A0E3           MOV      R0,#+3
   \   0000045C   ........           BL       SendMessage
   1346          									WAIT_ACK(destaddr);
   \   00000460   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000464   040080E0           ADD      R0,R0,R4
   \   00000468   010050E5           LDRB     R0,[R0, #-1]
   \   0000046C   000050E3           CMP      R0,#+0
   \   00000470   0700000A           BEQ      ??WriteCodeImage_16
   \                     ??WriteCodeImage_17:
   \   00000474   0A10A0E3           MOV      R1,#+10
   \   00000478   0000A0E3           MOV      R0,#+0
   \   0000047C   ........           BL       PF_OS_Delay
   \   00000480   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000484   040080E0           ADD      R0,R0,R4
   \   00000488   010050E5           LDRB     R0,[R0, #-1]
   \   0000048C   000050E3           CMP      R0,#+0
   \   00000490   F7FFFF1A           BNE      ??WriteCodeImage_17
   1347          
   1348          									PROGBAR_SetValue(hProgBar, pagenum);		// update the user
   \                     ??WriteCodeImage_16:
   \   00000494   0910A0E1           MOV      R1,R9
   \   00000498   0A00A0E1           MOV      R0,R10
   \   0000049C   ........           BL       PROGBAR_SetValue
   1349          									GUI_Exec();
   \   000004A0   ........           BL       GUI_Exec
   1350          								} // while
   \   000004A4   019089E2           ADD      R9,R9,#+1
   \   000004A8   800059E3           CMP      R9,#+128
   \   000004AC   DEFFFFBA           BLT      ??WriteCodeImage_14
   1351          							
   1352          								if (downloaderror) {								
   1353          									PROGBAR_SetText(hProgBar, "Error");
   1354          									GUI_Exec();
   1355          									// tell SU to cancel the reprogramming process
   1356          									SendMessage((u08) DISPLAY_UNIT, destaddr, (u08) CANCEL_DOWNLOAD, 0);	
   1357          									WAIT_ACK(destaddr);
   1358          								} // if
   1359          								else {
   1360          									// tell SU that download is finished
   1361          									com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = (unsigned char) DOWNLOAD_COMPLETE;
   \   000004B0   100098E5           LDR      R0,[R8, #+16]
   \   000004B4   F110A0E3           MOV      R1,#+241
   \   000004B8   0710C0E5           STRB     R1,[R0, #+7]
   1362          									SendMessage((u08) DISPLAY_UNIT, destaddr, (u08) MODE_CHANGE, 1);	
   \   000004BC   0130A0E3           MOV      R3,#+1
   \   000004C0   9120A0E3           MOV      R2,#+145
   \   000004C4   1010DDE5           LDRB     R1,[SP, #+16]
   \   000004C8   0300A0E3           MOV      R0,#+3
   \   000004CC   ........           BL       SendMessage
   1363          									WAIT_ACK(destaddr);
   \   000004D0   1000DDE5           LDRB     R0,[SP, #+16]
   \   000004D4   040080E0           ADD      R0,R0,R4
   \   000004D8   010050E5           LDRB     R0,[R0, #-1]
   \   000004DC   000050E3           CMP      R0,#+0
   \   000004E0   0700000A           BEQ      ??WriteCodeImage_18
   \                     ??WriteCodeImage_19:
   \   000004E4   0A10A0E3           MOV      R1,#+10
   \   000004E8   0000A0E3           MOV      R0,#+0
   \   000004EC   ........           BL       PF_OS_Delay
   \   000004F0   1000DDE5           LDRB     R0,[SP, #+16]
   \   000004F4   040080E0           ADD      R0,R0,R4
   \   000004F8   010050E5           LDRB     R0,[R0, #-1]
   \   000004FC   000050E3           CMP      R0,#+0
   \   00000500   F7FFFF1A           BNE      ??WriteCodeImage_19
   1364          									
   1365          									// get the checksum from the file
   1366          									FS_Read(pFile, &cksum, 1);
   \                     ??WriteCodeImage_18:
   \   00000504   0130A0E3           MOV      R3,#+1
   \   00000508   11208DE2           ADD      R2,SP,#+17
   \   0000050C   0710A0E1           MOV      R1,R7
   \   00000510   0000A0E3           MOV      R0,#+0
   \   00000514   ........           BL       PF_FS_Read
   1367          									
   1368          									// sent all the sectors, now send the checksum
   1369          									com[msgrouting[SENSOR_UNIT]].txbuff[DATA_START] = cksum;
   \   00000518   1110DDE5           LDRB     R1,[SP, #+17]
   \   0000051C   100098E5           LDR      R0,[R8, #+16]
   1370          									SendMessage((u08) DISPLAY_UNIT, (u08) SENSOR_UNIT, (u08) SW_REPROGRAM, 1);	
   \   00000520   0130A0E3           MOV      R3,#+1
   \   00000524   0710C0E5           STRB     R1,[R0, #+7]
   \   00000528   5120A0E3           MOV      R2,#+81
   \   0000052C   0210A0E3           MOV      R1,#+2
   \   00000530   0300A0E3           MOV      R0,#+3
   \   00000534   ........           BL       SendMessage
   1371          									WAIT_ACK(destaddr);
   \   00000538   1000DDE5           LDRB     R0,[SP, #+16]
   \   0000053C   040080E0           ADD      R0,R0,R4
   \   00000540   010050E5           LDRB     R0,[R0, #-1]
   \   00000544   000050E3           CMP      R0,#+0
   \   00000548   0700000A           BEQ      ??WriteCodeImage_20
   \                     ??WriteCodeImage_21:
   \   0000054C   0A10A0E3           MOV      R1,#+10
   \   00000550   0000A0E3           MOV      R0,#+0
   \   00000554   ........           BL       PF_OS_Delay
   \   00000558   1000DDE5           LDRB     R0,[SP, #+16]
   \   0000055C   040080E0           ADD      R0,R0,R4
   \   00000560   010050E5           LDRB     R0,[R0, #-1]
   \   00000564   000050E3           CMP      R0,#+0
   \   00000568   F7FFFF1A           BNE      ??WriteCodeImage_21
   1372          								} // else
   1373          							} // else
   1374          #ifdef BUILD_DEBUG_PORT
   1375          							sprintf(tempstr, "SU reprogram complete\n\r");
   \                     ??WriteCodeImage_20:
   \   0000056C   ............       ADRL     R1,`?<Constant "SU reprogram complete\\n\\r">`
   \              ....        
   \   00000574   58008DE2           ADD      R0,SP,#+88
   \   00000578   ........           BL       sprintf
   1376          							DBGU_Print(tempstr);
   \   0000057C   58008DE2           ADD      R0,SP,#+88
   \   00000580   ........           BL       DBGU_Print
   1377          #endif			
   1378          							FS_FClose(pFile);
   \   00000584   0700A0E1           MOV      R0,R7
   \   00000588   ........           BL       FS_FClose
   1379          
   1380          							PROGBAR_SetValue(hProgBar, 0);		
   \   0000058C   0010A0E3           MOV      R1,#+0
   \   00000590   0A00A0E1           MOV      R0,R10
   \   00000594   ........           BL       PROGBAR_SetValue
   1381          							PROGBAR_SetText(hProgBar, "Wait for SU to Turn Off");
   \   00000598   ............       ADRL     R1,`?<Constant "Wait for SU to Turn Off">`
   \              ....        
   \   000005A0   0A00A0E1           MOV      R0,R10
   \   000005A4   ........           BL       PROGBAR_SetText
   1382          							GUI_Exec();
   \   000005A8   ........           BL       GUI_Exec
   1383          
   1384          							// give user something to look at while SU is reflashing
   1385          							for (pagenum=0; pagenum <= NUMBER_OF_DOWNLOAD_MSGS; pagenum++) {
   \   000005AC   00B0A0E3           MOV      R11,#+0
   1386          								OS_Delay(350);		// 300 is about right. 350 is extra slow to ensure completion
   \                     ??WriteCodeImage_22:
   \   000005B0   5E10A0E3           MOV      R1,#+94
   \   000005B4   401F81E3           ORR      R1,R1,#0x100
   \   000005B8   0000A0E3           MOV      R0,#+0
   \   000005BC   ........           BL       PF_OS_Delay
   1387          								PROGBAR_SetValue(hProgBar, pagenum);
   \   000005C0   0B10A0E1           MOV      R1,R11
   \   000005C4   0A00A0E1           MOV      R0,R10
   \   000005C8   ........           BL       PROGBAR_SetValue
   1388          								GUI_Exec();						
   \   000005CC   ........           BL       GUI_Exec
   1389          							} // for
   \   000005D0   01B08BE2           ADD      R11,R11,#+1
   \   000005D4   81005BE3           CMP      R11,#+129
   \   000005D8   F4FFFFBA           BLT      ??WriteCodeImage_22
   1390          							
   1391          							// change mode and notify tasks
   1392          							SetUserMode(DU2_STARTUP);
   \   000005DC   0000A0E3           MOV      R0,#+0
   \   000005E0   ........           BL       SetUserMode
   1393          
   1394          							// just wait for powerdown
   1395          							OS_Delay(60000);
   \   000005E4   6010A0E3           MOV      R1,#+96
   \   000005E8   EA1C81E3           ORR      R1,R1,#0xEA00
   \   000005EC   0000A0E3           MOV      R0,#+0
   \   000005F0   ........           BL       PF_OS_Delay
   \   000005F4   680100EA           B        ??WriteCodeImage_8
   \                     ??WriteCodeImage_15:
   \   000005F8   ............       ADRL     R1,`?<Constant "Error">`
   \              ....        
   \   00000600   0A00A0E1           MOV      R0,R10
   \   00000604   ........           BL       PROGBAR_SetText
   \   00000608   ........           BL       GUI_Exec
   \   0000060C   0030A0E3           MOV      R3,#+0
   \   00000610   F220A0E3           MOV      R2,#+242
   \   00000614   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000618   0300A0E3           MOV      R0,#+3
   \   0000061C   ........           BL       SendMessage
   \   00000620   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000624   040080E0           ADD      R0,R0,R4
   \   00000628   010050E5           LDRB     R0,[R0, #-1]
   \   0000062C   000050E3           CMP      R0,#+0
   \   00000630   CDFFFF0A           BEQ      ??WriteCodeImage_20
   \                     ??WriteCodeImage_23:
   \   00000634   0A10A0E3           MOV      R1,#+10
   \   00000638   0000A0E3           MOV      R0,#+0
   \   0000063C   ........           BL       PF_OS_Delay
   \   00000640   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000644   040080E0           ADD      R0,R0,R4
   \   00000648   010050E5           LDRB     R0,[R0, #-1]
   \   0000064C   000050E3           CMP      R0,#+0
   \   00000650   F7FFFF1A           BNE      ??WriteCodeImage_23
   \   00000654   C4FFFFEA           B        ??WriteCodeImage_20
   1396          						} // if
   1397          					} // if
   1398          					
   1399          					break;
   1400          				} // case
   1401          				case BOOTTQ:
   1402          				case CODETQ: {
   1403          					unsigned int pagemismatch;
   1404          					unsigned char status;
   1405          					unsigned int firstpage;
   1406          
   1407          					// Attempt to read SD card code binary file
   1408          					if (NULL == (pFile = FS_FOpen(codefiles[whichcodefile].name, "r")))
   \                     ??WriteCodeImage_10:
   \   00000658   18009DE5           LDR      R0,[SP, #+24]
   \   0000065C   00108FE2           ADR      R1,??WriteCodeImage_11  ;; "r"
   \   00000660   000000EA           B        ??WriteCodeImage_24
   \                     ??WriteCodeImage_11:
   \   00000664   72000000           DC8      "r",0x0,0x0
   \                     ??WriteCodeImage_24:
   \   00000668   100040E2           SUB      R0,R0,#+16
   \   0000066C   ........           BL       FS_FOpen
   \   00000670   0070B0E1           MOVS     R7,R0
   \   00000674   4801000A           BEQ      ??WriteCodeImage_8
   1409          						break;
   1410          					else {		// opened the file
   1411          						u16 rangeupper, partialrange, lastpartial;
   1412          
   1413          						if (BOOTTQ == whichcodefile) {		// TraqDash bootloader
   \   00000678   18009DE5           LDR      R0,[SP, #+24]
   \   0000067C   009090E5           LDR      R9,[R0, #+0]
   \   00000680   14009DE5           LDR      R0,[SP, #+20]
   \   00000684   020050E3           CMP      R0,#+2
   \   00000688   3800001A           BNE      ??WriteCodeImage_25
   1414          							if (unsavedSysData.unitInfo.bootloaderSwRev >= codefiles[whichcodefile].rev)
   \   0000068C   6C0096E5           LDR      R0,[R6, #+108]
   \   00000690   090050E1           CMP      R0,R9
   \   00000694   4001002A           BCS      ??WriteCodeImage_8
   1415          								break;				// don't update if we don't need to
   1416          							
   1417          							if (!ReFlashYorN(BOOTTQ, codefiles[whichcodefile].rev))	// ask user if they want to do it
   \   00000698   0300A0E3           MOV      R0,#+3
   \   0000069C   ........           BL       SetPopupDefaults
   \   000006A0   94008DE2           ADD      R0,SP,#+148
   \   000006A4   4C0085E5           STR      R0,[R5, #+76]
   \   000006A8   ............       ADRL     R0,`?<Constant "NEW BOOTLOADER FOUND">`
   \              ....        
   \   000006B0   6C8096E5           LDR      R8,[R6, #+108]
   \   000006B4   040085E5           STR      R0,[R5, #+4]
   \   000006B8   ............       ADRL     R0,`?<Constant "Update TraqDash Bootl...">`
   \              ....        
   \   000006C0   640085E5           STR      R0,[R5, #+100]
   \   000006C4   0900A0E1           MOV      R0,R9
   \   000006C8   ........           BL       __aeabi_i2f
   \   000006CC   ........           BL       __aeabi_f2d
   \   000006D0   4034A0E3           MOV      R3,#+1073741824
   \   000006D4   0020A0E3           MOV      R2,#+0
   \   000006D8   593883E3           ORR      R3,R3,#0x590000
   \   000006DC   ........           BL       __aeabi_ddiv
   \   000006E0   03008DE8           STM      SP,{R0,R1}
   \   000006E4   0800A0E1           MOV      R0,R8
   \   000006E8   ........           BL       __aeabi_i2f
   \   000006EC   ........           BL       __aeabi_f2d
   \   000006F0   4034A0E3           MOV      R3,#+1073741824
   \   000006F4   0020A0E3           MOV      R2,#+0
   \   000006F8   593883E3           ORR      R3,R3,#0x590000
   \   000006FC   ........           BL       __aeabi_ddiv
   \   00000700   0020A0E1           MOV      R2,R0
   \   00000704   0130A0E1           MOV      R3,R1
   \   00000708   ............       ADRL     R1,`?<Constant "Current Rev %1.2f, Ne...">`
   \              ....        
   \   00000710   94008DE2           ADD      R0,SP,#+148
   \   00000714   ........           BL       sprintf
   \   00000718   ........           BL       WM_GetDesktopWindow
   \   0000071C   0A10A0E3           MOV      R1,#+10
   \   00000720   04108DE5           STR      R1,[SP, #+4]
   \   00000724   00108DE5           STR      R1,[SP, #+0]
   \   00000728   0030A0E1           MOV      R3,R0
   \   0000072C   ........           LDR      R2,??DataTable113
   \   00000730   0610A0E3           MOV      R1,#+6
   \   00000734   0500A0E1           MOV      R0,R5
   \   00000738   ........           BL       GUI_ExecDialogBox
   \   0000073C   010050E3           CMP      R0,#+1
   \   00000740   1501001A           BNE      ??WriteCodeImage_8
   \   00000744   ........           BL       StopTouchScreenScan
   1418          								break;
   1419          							
   1420          							firstpage = 0;
   1421          							rangeupper = CODELOAD(0)-2;		// don't reflash the serial number at top of bootloader memory space	
   \   00000748   400BA0E3           MOV      R0,#+65536
   \   0000074C   B218D6E1           LDRH     R1,[R6, #+130]
   \   00000750   ........           BL       __aeabi_idiv
   \   00000754   029040E2           SUB      R9,R0,#+2
   \   00000758   0998A0E1           LSL      R9,R9,#+16
   \   0000075C   00B0A0E3           MOV      R11,#+0
   \   00000760   2998A0E1           LSR      R9,R9,#+16
   1422          #ifdef BUILD_DEBUG_PORT
   1423          							DBGU_Print("Erasing Boot Area \n\r");
   \   00000764   ............       ADRL     R0,`?<Constant "Erasing Boot Area \\n\\r">`
   \              ....        
   \   0000076C   380000EA           B        ??WriteCodeImage_26
   1424          #endif
   1425          						} // if
   1426          						else {						// TraqDash Code
   1427          							if (unsavedSysData.duSwRev >= codefiles[whichcodefile].rev)
   \                     ??WriteCodeImage_25:
   \   00000770   B000D6E1           LDRH     R0,[R6, #+0]
   \   00000774   090050E1           CMP      R0,R9
   \   00000778   070100AA           BGE      ??WriteCodeImage_8
   1428          								break;				// don't update if we don't need to
   1429          							
   1430          							if (!ReFlashYorN(CODETQ, codefiles[whichcodefile].rev))	// ask user if they want to do it
   \   0000077C   0300A0E3           MOV      R0,#+3
   \   00000780   ........           BL       SetPopupDefaults
   \   00000784   94008DE2           ADD      R0,SP,#+148
   \   00000788   4C0085E5           STR      R0,[R5, #+76]
   \   0000078C   ............       ADRL     R0,`?<Constant "NEW FIRMWARE FOUND">`
   \              ....        
   \   00000794   B080D6E1           LDRH     R8,[R6, #+0]
   \   00000798   040085E5           STR      R0,[R5, #+4]
   \   0000079C   ............       ADRL     R0,`?<Constant "Update TraqDash Firmw...">`
   \              ....        
   \   000007A4   640085E5           STR      R0,[R5, #+100]
   \   000007A8   0900A0E1           MOV      R0,R9
   \   000007AC   ........           BL       __aeabi_i2f
   \   000007B0   ........           BL       __aeabi_f2d
   \   000007B4   4034A0E3           MOV      R3,#+1073741824
   \   000007B8   0020A0E3           MOV      R2,#+0
   \   000007BC   593883E3           ORR      R3,R3,#0x590000
   \   000007C0   ........           BL       __aeabi_ddiv
   \   000007C4   03008DE8           STM      SP,{R0,R1}
   \   000007C8   0800A0E1           MOV      R0,R8
   \   000007CC   ........           BL       __aeabi_i2f
   \   000007D0   ........           BL       __aeabi_f2d
   \   000007D4   4034A0E3           MOV      R3,#+1073741824
   \   000007D8   0020A0E3           MOV      R2,#+0
   \   000007DC   593883E3           ORR      R3,R3,#0x590000
   \   000007E0   ........           BL       __aeabi_ddiv
   \   000007E4   0020A0E1           MOV      R2,R0
   \   000007E8   0130A0E1           MOV      R3,R1
   \   000007EC   ............       ADRL     R1,`?<Constant "Current Rev %1.2f, Ne...">`
   \              ....        
   \   000007F4   94008DE2           ADD      R0,SP,#+148
   \   000007F8   ........           BL       sprintf
   \   000007FC   ........           BL       WM_GetDesktopWindow
   \   00000800   0030A0E1           MOV      R3,R0
   \   00000804   0A00A0E3           MOV      R0,#+10
   \   00000808   04008DE5           STR      R0,[SP, #+4]
   \   0000080C   00008DE5           STR      R0,[SP, #+0]
   \   00000810   ........           LDR      R2,??DataTable113
   \   00000814   0610A0E3           MOV      R1,#+6
   \   00000818   0500A0E1           MOV      R0,R5
   \   0000081C   ........           BL       GUI_ExecDialogBox
   \   00000820   010050E3           CMP      R0,#+1
   \   00000824   DC00001A           BNE      ??WriteCodeImage_8
   \   00000828   ........           BL       StopTouchScreenScan
   1431          								break;
   1432          
   1433          							firstpage = CODELOAD(0);
   \   0000082C   400BA0E3           MOV      R0,#+65536
   \   00000830   B218D6E1           LDRH     R1,[R6, #+130]
   \   00000834   ........           BL       __aeabi_idiv
   \   00000838   00B0A0E1           MOV      R11,R0
   1434          							rangeupper = unsavedSysData.dataflash[0].numPages-1;								
   \   0000083C   B008D6E1           LDRH     R0,[R6, #+128]
   \   00000840   019040E2           SUB      R9,R0,#+1
   \   00000844   0998A0E1           LSL      R9,R9,#+16
   \   00000848   2998A0E1           LSR      R9,R9,#+16
   1435          #ifdef BUILD_DEBUG_PORT
   1436          							DBGU_Print("Erasing Code Area \n\r");
   \   0000084C   ............       ADRL     R0,`?<Constant "Erasing Code Area \\n\\r">`
   \              ....        
   \                     ??WriteCodeImage_26:
   \   00000854   ........           BL       DBGU_Print
   1437          #endif						
   1438          						} // else
   1439          						
   1440          						// tell tasks to leave us alone
   1441          						SetUserMode(DU2_REPROGRAMMING);
   \   00000858   2000A0E3           MOV      R0,#+32
   \   0000085C   ........           BL       SetUserMode
   1442          
   1443          						CreateProgressBar(&hProgBar, rangeupper);							
   \   00000860   0100A0E3           MOV      R0,#+1
   \   00000864   0C008DE5           STR      R0,[SP, #+12]
   \   00000868   0000A0E3           MOV      R0,#+0
   \   0000086C   08008DE5           STR      R0,[SP, #+8]
   \   00000870   0200A0E3           MOV      R0,#+2
   \   00000874   04008DE5           STR      R0,[SP, #+4]
   \   00000878   0000A0E3           MOV      R0,#+0
   \   0000087C   00008DE5           STR      R0,[SP, #+0]
   \   00000880   4630A0E3           MOV      R3,#+70
   \   00000884   4B2FA0E3           MOV      R2,#+300
   \   00000888   AA10A0E3           MOV      R1,#+170
   \   0000088C   5A00A0E3           MOV      R0,#+90
   \   00000890   ........           BL       PROGBAR_CreateEx
   \   00000894   00A0A0E1           MOV      R10,R0
   \   00000898   ........           LDR      R1,??DataTable113_3
   \   0000089C   ........           BL       PROGBAR_SetFont
   \   000008A0   0020A0E3           MOV      R2,#+0
   \   000008A4   0010A0E3           MOV      R1,#+0
   \   000008A8   0A00A0E1           MOV      R0,R10
   \   000008AC   ........           BL       PROGBAR_SetTextColor
   \   000008B0   FF24E0E3           MVN      R2,#-16777216
   \   000008B4   0110A0E3           MOV      R1,#+1
   \   000008B8   0A00A0E1           MOV      R0,R10
   \   000008BC   ........           BL       PROGBAR_SetTextColor
   \   000008C0   0920A0E1           MOV      R2,R9
   \   000008C4   0010A0E3           MOV      R1,#+0
   \   000008C8   0A00A0E1           MOV      R0,R10
   \   000008CC   ........           BL       PROGBAR_SetMinMax
   \   000008D0   FF2CA0E3           MOV      R2,#+65280
   \   000008D4   0010A0E3           MOV      R1,#+0
   \   000008D8   0A00A0E1           MOV      R0,R10
   \   000008DC   ........           BL       PROGBAR_SetBarColor
   \   000008E0   0020A0E3           MOV      R2,#+0
   \   000008E4   0110A0E3           MOV      R1,#+1
   \   000008E8   0A00A0E1           MOV      R0,R10
   \   000008EC   ........           BL       PROGBAR_SetBarColor
   \   000008F0   ........           LDR      R1,??DataTable113_4
   \   000008F4   0A00A0E1           MOV      R0,R10
   \   000008F8   ........           BL       WIDGET_SetEffect
   1444          						OS_Delay(500);					// wait for things to quiet down
   \   000008FC   7D1FA0E3           MOV      R1,#+500
   \   00000900   0000A0E3           MOV      R0,#+0
   \   00000904   ........           BL       PF_OS_Delay
   1445          	
   1446          						totalbytes = 0;
   \   00000908   0010A0E3           MOV      R1,#+0
   \   0000090C   04108DE5           STR      R1,[SP, #+4]
   1447          						
   1448          						PROGBAR_SetText(hProgBar, "Erasing");
   \   00000910   ............       ADRL     R1,`?<Constant "Erasing">`
   \              ....        
   \   00000918   0A00A0E1           MOV      R0,R10
   \   0000091C   ........           BL       PROGBAR_SetText
   1449          						GUI_Exec();
   \   00000920   ........           BL       GUI_Exec
   1450          						
   1451          						partialrange = firstpage;
   \   00000924   0B80A0E1           MOV      R8,R11
   1452          						do {
   1453          							lastpartial = partialrange;
   \                     ??WriteCodeImage_27:
   \   00000928   0810A0E1           MOV      R1,R8
   1454          							partialrange += 256;				// clear in 256 chunks for progress bar
   \   0000092C   408F88E2           ADD      R8,R8,#+256
   \   00000930   0888A0E1           LSL      R8,R8,#+16
   \   00000934   2888A0E1           LSR      R8,R8,#+16
   1455          													
   1456          							if (partialrange > rangeupper)
   \   00000938   080059E1           CMP      R9,R8
   1457          								partialrange = rangeupper+1;
   \   0000093C   018089B2           ADDLT    R8,R9,#+1
   \   00000940   0888A0B1           LSLLT    R8,R8,#+16
   \   00000944   2888A0B1           LSRLT    R8,R8,#+16
   1458          							
   1459          							DataFlash_Erase_Range(0, lastpartial, partialrange-1);
   \   00000948   012048E2           SUB      R2,R8,#+1
   \   0000094C   0228A0E1           LSL      R2,R2,#+16
   \   00000950   0118A0E1           LSL      R1,R1,#+16
   \   00000954   2228A0E1           LSR      R2,R2,#+16
   \   00000958   2118A0E1           LSR      R1,R1,#+16
   \   0000095C   0000A0E3           MOV      R0,#+0
   \   00000960   ........           BL       DataFlash_Erase_Range
   1460          							
   1461          							PROGBAR_SetValue(hProgBar, partialrange);		// update the user
   \   00000964   0810A0E1           MOV      R1,R8
   \   00000968   0A00A0E1           MOV      R0,R10
   \   0000096C   ........           BL       PROGBAR_SetValue
   1462          							GUI_Exec();
   \   00000970   ........           BL       GUI_Exec
   1463          						} while (partialrange < rangeupper);
   \   00000974   090058E1           CMP      R8,R9
   \   00000978   EAFFFFBA           BLT      ??WriteCodeImage_27
   1464          
   1465          						PROGBAR_SetText(hProgBar, "Writing");
   \   0000097C   ............       ADRL     R1,`?<Constant "Writing">`
   \              ....        
   \   00000984   0A00A0E1           MOV      R0,R10
   \   00000988   ........           BL       PROGBAR_SetText
   1466          						PROGBAR_SetValue(hProgBar, 0);						// clear the progress bar
   \   0000098C   0010A0E3           MOV      R1,#+0
   \   00000990   0A00A0E1           MOV      R0,R10
   \   00000994   ........           BL       PROGBAR_SetValue
   1467          						GUI_Exec();
   \   00000998   ........           BL       GUI_Exec
   1468          						
   1469          						pagenum = firstpage;
   1470          						if (CODETQ == whichcodefile) {
   \   0000099C   14009DE5           LDR      R0,[SP, #+20]
   \   000009A0   0BB8A0E1           LSL      R11,R11,#+16
   \   000009A4   2BB8A0E1           LSR      R11,R11,#+16
   \   000009A8   010050E3           CMP      R0,#+1
   \   000009AC   4500001A           BNE      ??WriteCodeImage_28
   1471          							// just in case code is not going at an even page boundary
   1472          							pagemismatch = CODESTART % unsavedSysData.dataflash[0].bytesPerPage;
   \   000009B0   400BA0E3           MOV      R0,#+65536
   \   000009B4   B218D6E1           LDRH     R1,[R6, #+130]
   \   000009B8   ........           BL       __aeabi_idivmod
   \   000009BC   0180B0E1           MOVS     R8,R1
   1473          							
   1474          							if (0 != pagemismatch) {
   \   000009C0   4000000A           BEQ      ??WriteCodeImage_28
   1475          								int i;
   1476          	
   1477          								// fill start of buffer with blank flash bytes
   1478          								for (i=0; i < pagemismatch; i++)
   1479          									pagebuff[i] = 0xFF;
   \   000009C4   FF20A0E3           MOV      R2,#+255
   \   000009C8   640F8DE2           ADD      R0,SP,#+400
   \   000009CC   ........           BL       __aeabi_memset4
   1480          								// read a partial
   1481          								bytesread = FS_Read(pFile, &(pagebuff[pagemismatch]), (unsavedSysData.dataflash[0].bytesPerPage - pagemismatch));
   \   000009D0   B208D6E1           LDRH     R0,[R6, #+130]
   \   000009D4   0710A0E1           MOV      R1,R7
   \   000009D8   083040E0           SUB      R3,R0,R8
   \   000009DC   640F8DE2           ADD      R0,SP,#+400
   \   000009E0   002088E0           ADD      R2,R8,R0
   \   000009E4   0000A0E3           MOV      R0,#+0
   \   000009E8   ........           BL       PF_FS_Read
   \   000009EC   0080A0E1           MOV      R8,R0
   1482          								// write the first page
   1483          								DataFlash_Page_Write(0, (1 + (pagenum % 1)), unsavedSysData.dataflash[0].bytesPerPage, pagebuff, pagenum);
   \   000009F0   00B08DE5           STR      R11,[SP, #+0]
   \   000009F4   643F8DE2           ADD      R3,SP,#+400
   \   000009F8   B228D6E1           LDRH     R2,[R6, #+130]
   \   000009FC   0110A0E3           MOV      R1,#+1
   \   00000A00   0000A0E3           MOV      R0,#+0
   \   00000A04   ........           BL       DataFlash_Page_Write
   1484          	
   1485          								pagenum++;
   \   00000A08   01B08BE2           ADD      R11,R11,#+1
   \   00000A0C   0BB8A0E1           LSL      R11,R11,#+16
   \   00000A10   2BB8A0E1           LSR      R11,R11,#+16
   1486          								totalbytes += bytesread;
   \   00000A14   04808DE5           STR      R8,[SP, #+4]
   \   00000A18   2A0000EA           B        ??WriteCodeImage_28
   1487          							} // if
   1488          						} // if
   1489          						
   1490          						while (0 !=	(bytesread = FS_Read(pFile, &pagebuff, unsavedSysData.dataflash[0].bytesPerPage))) {
   1491          							unsigned int *iptr;
   1492          
   1493          							// store size of bootloader in image at 0x0014. Use 8000 for now.
   1494          							if ((BOOTTQ == whichcodefile) && (0 == pagenum)) {
   \                     ??WriteCodeImage_29:
   \   00000A1C   14009DE5           LDR      R0,[SP, #+20]
   \   00000A20   020050E3           CMP      R0,#+2
   \   00000A24   00005B03           CMPEQ    R11,#+0
   1495          								iptr = (unsigned int *) (pagebuff + 0x14);
   1496          								*iptr = 8000;				// store size of bootloader
   1497          							} //if
   1498          						
   1499          							if (bytesread != unsavedSysData.dataflash[0].bytesPerPage) {
   \   00000A28   B208D6E1           LDRH     R0,[R6, #+130]
   \   00000A2C   7D1DA003           MOVEQ    R1,#+8000
   \   00000A30   A4118D05           STREQ    R1,[SP, #+420]
   \   00000A34   000058E1           CMP      R8,R0
   \   00000A38   0600000A           BEQ      ??WriteCodeImage_30
   1500          #ifdef BUILD_DEBUG_PORT
   1501          								sprintf(tempstr, "bytes left over = %ld \n\r", bytesread);
   \   00000A3C   0820A0E1           MOV      R2,R8
   \   00000A40   ............       ADRL     R1,`?<Constant "bytes left over = %ld \\n\\r">`
   \              ....        
   \   00000A48   58008DE2           ADD      R0,SP,#+88
   \   00000A4C   ........           BL       sprintf
   1502          								DBGU_Print(tempstr);
   \   00000A50   58008DE2           ADD      R0,SP,#+88
   \   00000A54   ........           BL       DBGU_Print
   1503          #endif		
   1504          							} // if
   1505          								
   1506          							DataFlash_Page_Write(0, (1 + (pagenum % 1)), unsavedSysData.dataflash[0].bytesPerPage, pagebuff, pagenum);
   \                     ??WriteCodeImage_30:
   \   00000A58   00B08DE5           STR      R11,[SP, #+0]
   \   00000A5C   643F8DE2           ADD      R3,SP,#+400
   \   00000A60   B228D6E1           LDRH     R2,[R6, #+130]
   \   00000A64   0110A0E3           MOV      R1,#+1
   \   00000A68   0000A0E3           MOV      R0,#+0
   \   00000A6C   ........           BL       DataFlash_Page_Write
   1507          
   1508          							if (0 == (pagenum % 256)) {						
   \   00000A70   CB03A0E1           ASR      R0,R11,#+7
   \   00000A74   200C8BE0           ADD      R0,R11,R0, LSR #+24
   \   00000A78   4004A0E1           ASR      R0,R0,#+8
   \   00000A7C   00045BE0           SUBS     R0,R11,R0, LSL #+8
   \   00000A80   0A00001A           BNE      ??WriteCodeImage_31
   1509          								PROGBAR_SetValue(hProgBar, pagenum);		// update the user
   \   00000A84   0B10A0E1           MOV      R1,R11
   \   00000A88   0A00A0E1           MOV      R0,R10
   \   00000A8C   ........           BL       PROGBAR_SetValue
   1510          								GUI_Exec();
   \   00000A90   ........           BL       GUI_Exec
   1511          #ifdef BUILD_DEBUG_PORT
   1512          								sprintf(tempstr, "Writing page = %d \n\r", pagenum);
   \   00000A94   0B20A0E1           MOV      R2,R11
   \   00000A98   ............       ADRL     R1,`?<Constant "Writing page = %d \\n\\r">`
   \              ....        
   \   00000AA0   58008DE2           ADD      R0,SP,#+88
   \   00000AA4   ........           BL       sprintf
   1513          								DBGU_Print(tempstr);
   \   00000AA8   58008DE2           ADD      R0,SP,#+88
   \   00000AAC   ........           BL       DBGU_Print
   1514          #endif								
   1515          							} // if
   1516          
   1517          							pagenum++;
   1518          							totalbytes += bytesread;
   \                     ??WriteCodeImage_31:
   \   00000AB0   04009DE5           LDR      R0,[SP, #+4]
   \   00000AB4   01B08BE2           ADD      R11,R11,#+1
   \   00000AB8   0BB8A0E1           LSL      R11,R11,#+16
   \   00000ABC   000088E0           ADD      R0,R8,R0
   \   00000AC0   2BB8A0E1           LSR      R11,R11,#+16
   \   00000AC4   04008DE5           STR      R0,[SP, #+4]
   1519          						} // while
   \                     ??WriteCodeImage_28:
   \   00000AC8   B238D6E1           LDRH     R3,[R6, #+130]
   \   00000ACC   642F8DE2           ADD      R2,SP,#+400
   \   00000AD0   0710A0E1           MOV      R1,R7
   \   00000AD4   0000A0E3           MOV      R0,#+0
   \   00000AD8   ........           BL       PF_FS_Read
   \   00000ADC   0080B0E1           MOVS     R8,R0
   \   00000AE0   CDFFFF1A           BNE      ??WriteCodeImage_29
   1520          							
   1521          						PROGBAR_SetValue(hProgBar, rangeupper);		// show 100%
   \   00000AE4   0910A0E1           MOV      R1,R9
   \   00000AE8   0A00A0E1           MOV      R0,R10
   \   00000AEC   ........           BL       PROGBAR_SetValue
   1522          						GUI_Exec();
   \   00000AF0   ........           BL       GUI_Exec
   1523          						
   1524          						// make sure it is finished
   1525          						do {
   1526          							status = DataFlash_Read_Status(0);
   1527          						} while (!(status & STATUS_READY_MASK));
   \                     ??WriteCodeImage_32:
   \   00000AF4   0000A0E3           MOV      R0,#+0
   \   00000AF8   ........           BL       DataFlash_Read_Status
   \   00000AFC   800010E3           TST      R0,#0x80
   \   00000B00   FBFFFF0A           BEQ      ??WriteCodeImage_32
   1528          									
   1529          #ifdef BUILD_DEBUG_PORT
   1530          						sprintf(tempstr, "Write complete, pages = %d, total bytes = %ld \n\r", pagenum, totalbytes);
   \   00000B04   04309DE5           LDR      R3,[SP, #+4]
   \   00000B08   0B20A0E1           MOV      R2,R11
   \   00000B0C   ............       ADRL     R1,`?<Constant "Write complete, pages...">`
   \              ....        
   \   00000B14   58008DE2           ADD      R0,SP,#+88
   \   00000B18   ........           BL       sprintf
   1531          						DBGU_Print(tempstr);
   \   00000B1C   58008DE2           ADD      R0,SP,#+88
   \   00000B20   ........           BL       DBGU_Print
   1532          #endif			
   1533          						FS_FClose(pFile);
   \   00000B24   0700A0E1           MOV      R0,R7
   \   00000B28   ........           BL       FS_FClose
   1534          
   1535          						// if bootloader, erase it from SD card and write new bootloader rev into flash
   1536          						if (BOOTTQ == whichcodefile) {
   \   00000B2C   14009DE5           LDR      R0,[SP, #+20]
   \   00000B30   020050E3           CMP      R0,#+2
   \   00000B34   0C00001A           BNE      ??WriteCodeImage_33
   1537          #ifdef BUILD_DEBUG_PORT
   1538          							DBGU_Print("Updating bootloader rev\n\r");
   \   00000B38   ............       ADRL     R0,`?<Constant "Updating bootloader r...">`
   \              ....        
   \   00000B40   ........           BL       DBGU_Print
   1539          #endif
   1540          							unsavedSysData.unitInfo.bootloaderSwRev = codefiles[whichcodefile].rev;
   \   00000B44   18009DE5           LDR      R0,[SP, #+24]
   \   00000B48   000090E5           LDR      R0,[R0, #+0]
   \   00000B4C   6C0086E5           STR      R0,[R6, #+108]
   1541          							WriteUserData();
   \   00000B50   ........           BL       WriteUserData
   1542          #ifdef BUILD_DEBUG_PORT
   1543          							DBGU_Print("Removing bootloader file \n\r");
   \   00000B54   ............       ADRL     R0,`?<Constant "Removing bootloader f...">`
   \              ....        
   \   00000B5C   ........           BL       DBGU_Print
   1544          #endif
   1545          							FS_Remove(codefiles[whichcodefile].name);
   \   00000B60   18009DE5           LDR      R0,[SP, #+24]
   \   00000B64   100040E2           SUB      R0,R0,#+16
   \   00000B68   ........           BL       FS_Remove
   1546          						} // if
   1547          						
   1548          						FS_Sync("");
   \                     ??WriteCodeImage_33:
   \   00000B6C   ........           ADR      R0,??DataTable113_5  ;; ""
   \   00000B70   ........           BL       FS_Sync
   1549          						
   1550          						unsavedSysData.systemMode = DU2_IDLE;
   \   00000B74   0100A0E3           MOV      R0,#+1
   \   00000B78   8800C6E5           STRB     R0,[R6, #+136]
   1551          						
   1552          						// reboot
   1553          #ifdef BUILD_DEBUG_PORT
   1554          						DBGU_Print("Rebooting \n\r");
   \   00000B7C   ............       ADRL     R0,`?<Constant "Rebooting \\n\\r">`
   \              ....        
   \   00000B84   ........           BL       DBGU_Print
   1555          #endif
   1556          						OS_Delay(3000);
   \   00000B88   B810A0E3           MOV      R1,#+184
   \   00000B8C   B01E81E3           ORR      R1,R1,#0xB00
   \   00000B90   0000A0E3           MOV      R0,#+0
   \   00000B94   ........           BL       PF_OS_Delay
   1557          						reset();			// reset to reload
   \   00000B98   ........           BL       reset
   1558          
   1559          					} // else
   1560          					break;
   1561          				} // case
   1562          			} // switch
   1563          		} // if
   1564          	} // for
   \                     ??WriteCodeImage_8:
   \   00000B9C   14009DE5           LDR      R0,[SP, #+20]
   \   00000BA0   010080E2           ADD      R0,R0,#+1
   \   00000BA4   14008DE5           STR      R0,[SP, #+20]
   \   00000BA8   18009DE5           LDR      R0,[SP, #+24]
   \   00000BAC   140080E2           ADD      R0,R0,#+20
   \   00000BB0   18008DE5           STR      R0,[SP, #+24]
   \   00000BB4   14009DE5           LDR      R0,[SP, #+20]
   \   00000BB8   030050E3           CMP      R0,#+3
   \   00000BBC   75FDFFBA           BLT      ??WriteCodeImage_7
   1565          }
   \   00000BC0   6DDF8DE2           ADD      SP,SP,#+436
   \   00000BC4   40DE8DE2           ADD      SP,SP,#+1024
   \   00000BC8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1566          #endif
   1567          
   1568          #define	ICON_ROW	190
   1569          #define	TEXT_ROW	250
   1570          #define	ICON_START	5
   1571          #define	INCREMENT	68
   1572          #define	TEXT_START	35
   1573          

   \                                 In section .text, align 4, keep-with-next
   1574          const GUI_RECT DriverRect = {100, 107, 230, 180};
   \                     DriverRect:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   64006B00E600       DC16 100, 107, 230, 180
   \              B400        

   \                                 In section .text, align 4, keep-with-next
   1575          const GUI_RECT VehicleRect = {330, 107, 460, 180};
   \                     VehicleRect:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4A016B00CC01       DC16 330, 107, 460, 180
   \              B400        
   1576          

   \                                 In section .text, align 4, keep-with-next
   1577          void RepaintSplash(void)
   1578          {
   \                     RepaintSplash:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1579          	DisplaySplashScreen1();
   \   00000008   ........           BL       GUI_Clear
   \   0000000C   0A20A0E3           MOV      R2,#+10
   \   00000010   2710A0E3           MOV      R1,#+39
   \   00000014   ........           LDR      R0,??DataTable115_6
   \   00000018   ........           BL       GUI_DrawBitmap
   \   0000001C   6120A0E3           MOV      R2,#+97
   \   00000020   1410A0E3           MOV      R1,#+20
   \   00000024   ........           LDR      R0,??DataTable115_7
   \   00000028   ........           BL       GUI_DrawBitmap
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   0040BDE8           POP      {LR}
   \   00000034   6E20A0E3           MOV      R2,#+110
   \   00000038   F010A0E3           MOV      R1,#+240
   \   0000003C   ........           LDR      R0,??DataTable115_8
   \   00000040   ........           B        GUI_DrawBitmap   ;; tailcall
   1580          // Do not want to do here - causes issues with Archive Popup sequence	DisplaySplashScreen3();
   1581          }
   1582          

   \                                 In section .text, align 4, keep-with-next
   1583          void DisplaySplashScreen1(void)
   1584          {
   \                     DisplaySplashScreen1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1585          	GUI_Clear();
   \   00000008   ........           BL       GUI_Clear
   1586          	GUI_DrawBitmap(&bmSplashScreen, 39, 10);
   \   0000000C   0A20A0E3           MOV      R2,#+10
   \   00000010   2710A0E3           MOV      R1,#+39
   \   00000014   ........           LDR      R0,??DataTable115_6
   \   00000018   ........           BL       GUI_DrawBitmap
   1587          	GUI_DrawBitmap(&bmDriverName, 20, 97);
   \   0000001C   6120A0E3           MOV      R2,#+97
   \   00000020   1410A0E3           MOV      R1,#+20
   \   00000024   ........           LDR      R0,??DataTable115_7
   \   00000028   ........           BL       GUI_DrawBitmap
   1588          	GUI_DrawBitmap(&bmVehicleName, 240, 110);
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   0040BDE8           POP      {LR}
   \   00000034   6E20A0E3           MOV      R2,#+110
   \   00000038   F010A0E3           MOV      R1,#+240
   \   0000003C   ........           LDR      R0,??DataTable115_8
   \   00000040   ........           B        GUI_DrawBitmap   ;; tailcall
   1589          }
   1590          

   \                                 In section .text, align 4, keep-with-next
   1591          void DisplaySplashScreen3(void)
   1592          {
   \                     DisplaySplashScreen3:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   1593          	const GUI_BITMAP *pGraphic;
   1594          	int i;
   1595          	unsigned int temp;
   1596          
   1597          	// Start screen persistance timer
   1598          	splashScreenStartTime = GUI_GetTime();
   \   00000008   ........           BL       GUI_GetTime
   \   0000000C   ........           LDR      R1,??DataTable115_9
   1599          
   1600          	temp = sysData.multiSettings_2 & 0x0000000F;
   \   00000010   ........           LDR      R5,??DataTable115_10
   \   00000014   0C0081E5           STR      R0,[R1, #+12]
   \   00000018   EC0095E5           LDR      R0,[R5, #+236]
   \   0000001C   0F1000E2           AND      R1,R0,#0xF
   1601          
   1602          	// If on main menu and one of first 4 times to power up - draw help splash screen
   1603          	if ((temp < HELP_SPLASH_COUNT) && (sysData.screentype == GENERAL_CONFIG_SCREEN_TYPE))
   \   00000020   040051E3           CMP      R1,#+4
   \   00000024   0A00002A           BCS      ??DisplaySplashScreen3_1
   \   00000028   1420D5E5           LDRB     R2,[R5, #+20]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0700001A           BNE      ??DisplaySplashScreen3_1
   1604          	{
   1605          		if (++temp >= HELP_SPLASH_COUNT)
   \   00000034   011081E2           ADD      R1,R1,#+1
   \   00000038   040051E3           CMP      R1,#+4
   1606          			temp = HELP_SPLASH_COUNT;
   \   0000003C   0410A023           MOVCS    R1,#+4
   1607          		sysData.multiSettings_2 = (sysData.multiSettings_2 & 0xFFFFFFF0) | temp;
   \   00000040   2002A0E1           LSR      R0,R0,#+4
   \   00000044   000281E1           ORR      R0,R1,R0, LSL #+4
   \   00000048   EC0085E5           STR      R0,[R5, #+236]
   1608          
   1609          		DrawJPEGSplash();
   \   0000004C   ........           BL       DrawJPEGSplash
   \   00000050   C00000EA           B        ??DisplaySplashScreen3_2
   1610          	}
   1611          	else
   1612          	{
   1613          		GUI_SetColor(GUI_WHITE);
   \                     ??DisplaySplashScreen3_1:
   \   00000054   FF44E0E3           MVN      R4,#-16777216
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       GUI_SetColor
   1614          		GUI_SetFont(&GUI_Font24_ASCII);
   \   00000060   ........           LDR      R0,??DataTable115_11
   \   00000064   ........           BL       GUI_SetFont
   1615          		GUI_DispStringInRectWrap(sysData.driver, (GUI_RECT *)&DriverRect, GUI_TA_LEFT | GUI_TA_VCENTER, GUI_WRAPMODE_WORD);
   \   00000068   0130A0E3           MOV      R3,#+1
   \   0000006C   0C20A0E3           MOV      R2,#+12
   \   00000070   ............       ADRL     R1,DriverRect
   \              ....        
   \   00000078   7E0085E2           ADD      R0,R5,#+126
   \   0000007C   ........           BL       GUI_DispStringInRectWrap
   1616          		GUI_DispStringInRectWrap(sysData.vehicle, (GUI_RECT *)&VehicleRect, GUI_TA_LEFT | GUI_TA_VCENTER, GUI_WRAPMODE_WORD);
   \   00000080   0130A0E3           MOV      R3,#+1
   \   00000084   0C20A0E3           MOV      R2,#+12
   \   00000088   ............       ADRL     R1,VehicleRect
   \              ....        
   \   00000090   8F0085E2           ADD      R0,R5,#+143
   \   00000094   ........           BL       GUI_DispStringInRectWrap
   1617          
   1618          		// Display inputs and camera configuration graphics
   1619          		GUI_SetFont(&GUI_Font16B_ASCII);
   \   00000098   ........           LDR      R5,??DataTable115_12
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           BL       GUI_SetFont
   1620          		if (GetSUCam() != CAMERA_NONE)
   \   000000A4   ........           BL       GetSUCam
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   3E00000A           BEQ      ??DisplaySplashScreen3_3
   1621          		{
   1622          			GUI_SetColor(GUI_WHITE);
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       GUI_SetColor
   1623          			GUI_DispStringHCenterAt("Camera", TEXT_START, TEXT_ROW);
   \   000000B8   FA20A0E3           MOV      R2,#+250
   \   000000BC   2310A0E3           MOV      R1,#+35
   \   000000C0   ............       ADRL     R0,`?<Constant "Camera">`
   \              ....        
   \   000000C8   ........           BL       GUI_DispStringHCenterAt
   1624          
   1625          			switch (GetSUCam())
   \   000000CC   ........           BL       GetSUCam
   \   000000D0   010040E2           SUB      R0,R0,#+1
   \   000000D4   0D0050E3           CMP      R0,#+13
   \   000000D8   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??DisplaySplashScreen3_0:
   \   000000DC   1F00008A           BHI      ??DisplaySplashScreen3_4
   \   000000E0   0C0000EA           B        ??DisplaySplashScreen3_5
   \   000000E4   0D0000EA           B        ??DisplaySplashScreen3_6
   \   000000E8   0E0000EA           B        ??DisplaySplashScreen3_7
   \   000000EC   0D0000EA           B        ??DisplaySplashScreen3_7
   \   000000F0   080000EA           B        ??DisplaySplashScreen3_5
   \   000000F4   070000EA           B        ??DisplaySplashScreen3_5
   \   000000F8   060000EA           B        ??DisplaySplashScreen3_5
   \   000000FC   0B0000EA           B        ??DisplaySplashScreen3_8
   \   00000100   0C0000EA           B        ??DisplaySplashScreen3_9
   \   00000104   0D0000EA           B        ??DisplaySplashScreen3_10
   \   00000108   080000EA           B        ??DisplaySplashScreen3_8
   \   0000010C   0D0000EA           B        ??DisplaySplashScreen3_11
   \   00000110   0E0000EA           B        ??DisplaySplashScreen3_12
   \   00000114   0F0000EA           B        ??DisplaySplashScreen3_13
   1626          			{
   1627          			case CAMERA_SONY_CAMCORDER:
   1628          			case CAMERA_SONY_VCR_HARD:
   1629          			case CAMERA_SONY_VCR_SOFT:
   1630          			case CAMERA_SONY_HD:			pGraphic = &bmSonyIcon;			break;
   \                     ??DisplaySplashScreen3_5:
   \   00000118   ........           LDR      R0,??DataTable115_13
   \   0000011C   100000EA           B        ??DisplaySplashScreen3_14
   1631          			case CAMERA_RACECAM_HD:			pGraphic = &bmRaceCamIcon;		break;
   \                     ??DisplaySplashScreen3_6:
   \   00000120   ........           LDR      R0,??DataTable115_14
   \   00000124   0E0000EA           B        ??DisplaySplashScreen3_14
   1632          			case CAMERA_CHASECAM_LANC:
   1633          			case CAMERA_CHASECAM:			pGraphic = &bmChaseCamIcon;		break;
   \                     ??DisplaySplashScreen3_7:
   \   00000128   ........           LDR      R0,??DataTable115_15
   \   0000012C   0C0000EA           B        ??DisplaySplashScreen3_14
   1634          			case CAMERA_GOPRO_HD_PRO:
   1635          			case CAMERA_GOPRO_HD:			pGraphic = &bmGoProIcon;		break;
   \                     ??DisplaySplashScreen3_8:
   \   00000130   ........           LDR      R0,??DataTable115_16
   \   00000134   0A0000EA           B        ??DisplaySplashScreen3_14
   1636          			case CAMERA_REPLAY_HD:			pGraphic = &bmReplayIcon;		break;
   \                     ??DisplaySplashScreen3_9:
   \   00000138   ........           LDR      R0,??DataTable115_17
   \   0000013C   080000EA           B        ??DisplaySplashScreen3_14
   1637          			case CAMERA_REPLAY_XD_USB:		pGraphic = &bmReplay1080Icon;	break;	// XD 1080 connected via TraqData USB
   \                     ??DisplaySplashScreen3_10:
   \   00000140   ........           LDR      R0,??DataTable115_18
   \   00000144   060000EA           B        ??DisplaySplashScreen3_14
   1638          			case CAMERA_REPLAY_MINI:		pGraphic = &bmReplayMiniIcon;	break;	// Mini connected via TraqData USB
   \                     ??DisplaySplashScreen3_11:
   \   00000148   ........           LDR      R0,??DataTable115_19
   \   0000014C   040000EA           B        ??DisplaySplashScreen3_14
   1639          			case CAMERA_REPLAY_PRIMEX:		pGraphic = &bmReplayPrimeIcon;	break;	// Prime X connected via TraqData USB
   \                     ??DisplaySplashScreen3_12:
   \   00000150   ........           LDR      R0,??DataTable115_20
   \   00000154   020000EA           B        ??DisplaySplashScreen3_14
   1640          			case CAMERA_MOBIUS:				pGraphic = &bmMobiusIcon;		break;	// Mobius connected via TraqData USB
   \                     ??DisplaySplashScreen3_13:
   \   00000158   ........           LDR      R0,??DataTable115_21
   \   0000015C   000000EA           B        ??DisplaySplashScreen3_14
   1641          
   1642          			default:						pGraphic = &bmCheckIcon;		break;
   \                     ??DisplaySplashScreen3_4:
   \   00000160   ........           LDR      R0,??DataTable115_22
   1643          			}
   1644          		
   1645          			GUI_DrawBitmap(pGraphic, ICON_START, ICON_ROW);
   \                     ??DisplaySplashScreen3_14:
   \   00000164   BE20A0E3           MOV      R2,#+190
   \   00000168   0510A0E3           MOV      R1,#+5
   \   0000016C   ........           BL       GUI_DrawBitmap
   1646          
   1647          			if ((GetTDCam() != TD_CAM_NONE) && (unsavedSysData.unitInfo.bootloaderSwRev > FIRST_GEN_BOOTLOADER))
   \   00000170   ........           BL       GetTDCam
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   3900000A           BEQ      ??DisplaySplashScreen3_15
   \   0000017C   ........           LDR      R0,??DataTable115_1
   \   00000180   6C0090E5           LDR      R0,[R0, #+108]
   \   00000184   880050E3           CMP      R0,#+136
   \   00000188   3500003A           BCC      ??DisplaySplashScreen3_15
   1648          			{
   1649          				GUI_SetTextMode(GUI_TM_TRANS);
   \   0000018C   0200A0E3           MOV      R0,#+2
   \   00000190   ........           BL       GUI_SetTextMode
   1650          				GUI_SetColor(GUI_RED);
   \   00000194   FF00A0E3           MOV      R0,#+255
   \   00000198   ........           BL       GUI_SetColor
   1651          				GUI_DispStringHCenterAt("USB", ICON_START + 40, ICON_ROW + 40);
   \   0000019C   E620A0E3           MOV      R2,#+230
   \   000001A0   2D10A0E3           MOV      R1,#+45
   \   000001A4   ........           ADR      R0,??DataTable115_3  ;; "USB"
   \   000001A8   2C0000EA           B        ??DisplaySplashScreen3_16
   1652          			}
   1653          		}
   1654          		else 
   1655          		{
   1656          			if (GetTDCam() && (unsavedSysData.unitInfo.bootloaderSwRev > FIRST_GEN_BOOTLOADER))
   \                     ??DisplaySplashScreen3_3:
   \   000001AC   ........           BL       GetTDCam
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   1B00000A           BEQ      ??DisplaySplashScreen3_17
   \   000001B8   ........           LDR      R0,??DataTable115_1
   \   000001BC   6C0090E5           LDR      R0,[R0, #+108]
   \   000001C0   880050E3           CMP      R0,#+136
   \   000001C4   1700003A           BCC      ??DisplaySplashScreen3_17
   1657          			{
   1658          				GUI_SetColor(GUI_WHITE);
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   ........           BL       GUI_SetColor
   1659          				GUI_DispStringHCenterAt("Camera", TEXT_START, TEXT_ROW);
   \   000001D0   FA20A0E3           MOV      R2,#+250
   \   000001D4   2310A0E3           MOV      R1,#+35
   \   000001D8   ............       ADRL     R0,`?<Constant "Camera">`
   \              ....        
   \   000001E0   ........           BL       GUI_DispStringHCenterAt
   1660          
   1661          				GUI_SetFont(&GUI_Font20B_ASCII);
   \   000001E4   ........           LDR      R0,??DataTable115_23
   \   000001E8   ........           BL       GUI_SetFont
   1662          				GUI_DrawBitmap(&bmUSBCamIcon, ICON_START, ICON_ROW);
   \   000001EC   BE20A0E3           MOV      R2,#+190
   \   000001F0   0510A0E3           MOV      R1,#+5
   \   000001F4   ........           LDR      R0,??DataTable115_24
   \   000001F8   ........           BL       GUI_DrawBitmap
   1663          				GUI_SetTextMode(GUI_TM_TRANS);
   \   000001FC   0200A0E3           MOV      R0,#+2
   \   00000200   ........           BL       GUI_SetTextMode
   1664          				GUI_SetColor(GUI_RED);
   \   00000204   FF00A0E3           MOV      R0,#+255
   \   00000208   ........           BL       GUI_SetColor
   1665          				GUI_DispStringHCenterAt("USB", ICON_START + 30, ICON_ROW + 20);
   \   0000020C   D220A0E3           MOV      R2,#+210
   \   00000210   2310A0E3           MOV      R1,#+35
   \   00000214   ........           ADR      R0,??DataTable115_3  ;; "USB"
   \   00000218   ........           BL       GUI_DispStringHCenterAt
   1666          				GUI_SetFont(&GUI_Font16B_ASCII);
   \   0000021C   0500A0E1           MOV      R0,R5
   \   00000220   ........           BL       GUI_SetFont
   \   00000224   0E0000EA           B        ??DisplaySplashScreen3_15
   1667          			}
   1668          			else
   1669          			{
   1670          				if (vehicleData.digitalInput[0].enabled)
   \                     ??DisplaySplashScreen3_17:
   \   00000228   ........           LDR      R0,??DataTable115_25
   1671          					pGraphic = &bmCheckIcon;
   1672          				else pGraphic = &bmXIcon;
   1673          				GUI_DrawBitmap(pGraphic, ICON_START, ICON_ROW);
   \   0000022C   BE20A0E3           MOV      R2,#+190
   \   00000230   A301D0E5           LDRB     R0,[R0, #+419]
   \   00000234   0510A0E3           MOV      R1,#+5
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   ........           LDRNE    R0,??DataTable115_22
   \   00000240   ........           LDREQ    R0,??DataTable115_26
   \   00000244   ........           BL       GUI_DrawBitmap
   1674          				GUI_SetColor(GUI_LIGHTCYAN);
   \   00000248   7F00C4E3           BIC      R0,R4,#0x7F
   \   0000024C   ........           BL       GUI_SetColor
   1675          				GUI_DispStringHCenterAt("Digital 4", TEXT_START, TEXT_ROW);
   \   00000250   FA20A0E3           MOV      R2,#+250
   \   00000254   2310A0E3           MOV      R1,#+35
   \   00000258   ............       ADRL     R0,`?<Constant "Digital 4">`
   \              ....        
   \                     ??DisplaySplashScreen3_16:
   \   00000260   ........           BL       GUI_DispStringHCenterAt
   1676          			}
   1677          		}
   1678          
   1679          		GUI_SetColor(GUI_YELLOW);
   \                     ??DisplaySplashScreen3_15:
   \   00000264   FF08C4E3           BIC      R0,R4,#0xFF0000
   \   00000268   ........           BL       GUI_SetColor
   1680          
   1681          		for (i = 0; i < 4; i++)
   \   0000026C   ........           LDR      R6,??DataTable115_25
   \   00000270   0050A0E3           MOV      R5,#+0
   \   00000274   0670A0E1           MOV      R7,R6
   \   00000278   4980A0E3           MOV      R8,#+73
   \   0000027C   ............       ADRL     R9,`?<Constant "Analog %d">`
   \              ....        
   \   00000284   ........           LDR      R10,??DataTable115_26
   \   00000288   ........           LDR      R11,??DataTable115_22
   1682          			DisplayAnalogStatus(i);
   \                     ??DisplaySplashScreen3_18:
   \   0000028C   9300D7E5           LDRB     R0,[R7, #+147]
   \   00000290   BE20A0E3           MOV      R2,#+190
   \   00000294   0810A0E1           MOV      R1,R8
   \   00000298   000050E3           CMP      R0,#+0
   \   0000029C   0B00A011           MOVNE    R0,R11
   \   000002A0   0A00A001           MOVEQ    R0,R10
   \   000002A4   ........           BL       GUI_DrawBitmap
   \   000002A8   0520A0E1           MOV      R2,R5
   \   000002AC   0910A0E1           MOV      R1,R9
   \   000002B0   0D00A0E1           MOV      R0,SP
   \   000002B4   ........           BL       sprintf
   \   000002B8   FA20A0E3           MOV      R2,#+250
   \   000002BC   1E1088E2           ADD      R1,R8,#+30
   \   000002C0   0D00A0E1           MOV      R0,SP
   \   000002C4   ........           BL       GUI_DispStringHCenterAt
   \   000002C8   015085E2           ADD      R5,R5,#+1
   \   000002CC   448088E2           ADD      R8,R8,#+68
   \   000002D0   407087E2           ADD      R7,R7,#+64
   \   000002D4   040055E3           CMP      R5,#+4
   \   000002D8   EBFFFFBA           BLT      ??DisplaySplashScreen3_18
   1683          
   1684          		if (vehicleData.digitalInput[1].enabled)
   \   000002DC   D201D6E5           LDRB     R0,[R6, #+466]
   1685          			pGraphic = &bmCheckIcon;
   1686          		else pGraphic = &bmXIcon;
   1687          		GUI_DrawBitmap(pGraphic, ICON_START + (INCREMENT * 5), ICON_ROW);
   \   000002E0   BE20A0E3           MOV      R2,#+190
   \   000002E4   9B1082E2           ADD      R1,R2,#+155
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   0B00A011           MOVNE    R0,R11
   \   000002F0   0A00A001           MOVEQ    R0,R10
   \   000002F4   ........           BL       GUI_DrawBitmap
   1688          		GUI_SetColor(GUI_LIGHTCYAN);
   \   000002F8   7F00C4E3           BIC      R0,R4,#0x7F
   \   000002FC   ........           BL       GUI_SetColor
   1689          		GUI_DispStringHCenterAt("Digital 5", TEXT_START + (INCREMENT * 5), TEXT_ROW);
   \   00000300   FA20A0E3           MOV      R2,#+250
   \   00000304   7D1082E2           ADD      R1,R2,#+125
   \   00000308   ............       ADRL     R0,`?<Constant "Digital 5">`
   \              ....        
   \   00000310   ........           BL       GUI_DispStringHCenterAt
   1690          
   1691          		// Dislpay WiFi Icon
   1692          		if (unsavedSysData.wifiEnabled && unsavedSysData.wifiCardInserted)
   \   00000314   ........           LDR      R0,??DataTable115_1
   1693          			pGraphic = &bmWiFiEnabledIcon;
   1694          		else pGraphic = &bmWiFiDisabledIcon;
   1695          
   1696          		GUI_DrawBitmap(pGraphic, ICON_START + (INCREMENT * 6), ICON_ROW);
   \   00000318   BE20A0E3           MOV      R2,#+190
   \   0000031C   D01090E5           LDR      R1,[R0, #+208]
   \   00000320   000051E3           CMP      R1,#+0
   \   00000324   CC009015           LDRNE    R0,[R0, #+204]
   \   00000328   DF1082E2           ADD      R1,R2,#+223
   \   0000032C   00005013           CMPNE    R0,#+0
   \   00000330   ........           LDRNE    R0,??DataTable115_27
   \   00000334   ........           LDREQ    R0,??DataTable115_28
   \   00000338   ........           BL       GUI_DrawBitmap
   1697          
   1698          		GUI_SetColor(GUI_WHITE);
   \   0000033C   0400A0E1           MOV      R0,R4
   \   00000340   ........           BL       GUI_SetColor
   1699          		GUI_DispStringHCenterAt("WiFi", TEXT_START + (INCREMENT * 6), TEXT_ROW);
   \   00000344   FA20A0E3           MOV      R2,#+250
   \   00000348   C11082E2           ADD      R1,R2,#+193
   \   0000034C   ............       ADRL     R0,`?<Constant "WiFi">`
   \              ....        
   \   00000354   ........           BL       GUI_DispStringHCenterAt
   1700          	}
   1701          }
   \                     ??DisplaySplashScreen3_2:
   \   00000358   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000035C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1702          
   1703          

   \                                 In section .text, align 4, keep-with-next
   1704          void DisplayAnalogStatus(int i)
   1705          {
   \                     DisplayAnalogStatus:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1706          	char buffer[10];
   1707          	const GUI_BITMAP *pGraphic;
   1708          
   1709          	if (vehicleData.analogInput[i].enabled)
   \   00000008   ........           LDR      R0,??DataTable115_25
   1710          		pGraphic = &bmCheckIcon;
   1711          	else pGraphic = &bmXIcon;
   \   0000000C   4410A0E3           MOV      R1,#+68
   \   00000010   040380E0           ADD      R0,R0,R4, LSL #+6
   \   00000014   9300D0E5           LDRB     R0,[R0, #+147]
   \   00000018   910405E0           MUL      R5,R1,R4
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0CD04DE2           SUB      SP,SP,#+12
   \   00000024   ........           LDRNE    R0,??DataTable115_22
   \   00000028   ........           LDREQ    R0,??DataTable115_26
   \   0000002C   BE20A0E3           MOV      R2,#+190
   \   00000030   491085E2           ADD      R1,R5,#+73
   1712          	GUI_DrawBitmap(pGraphic, ICON_START + (INCREMENT * (i + 1)), ICON_ROW);
   \   00000034   ........           BL       GUI_DrawBitmap
   1713          	sprintf(buffer, "Analog %d", i);
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   ............       ADRL     R1,`?<Constant "Analog %d">`
   \              ....        
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           BL       sprintf
   1714          	GUI_DispStringHCenterAt(buffer, TEXT_START + (INCREMENT * (i + 1)), TEXT_ROW);
   \   0000004C   FA20A0E3           MOV      R2,#+250
   \   00000050   671085E2           ADD      R1,R5,#+103
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           BL       GUI_DispStringHCenterAt
   1715          }
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   00E1F505           DC32     0x5f5e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     bmDriverName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_1:
   \   00000000   ........           DC32     bmSplashScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_2:
   \   00000000   ........           DC32     bmVehicleName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_3:
   \   00000000   ........           DC32     BUTTON_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_4:
   \   00000000   ........           DC32     CHECKBOX_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_5:
   \   00000000   ........           DC32     DROPDOWN_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_6:
   \   00000000   ........           DC32     FRAMEWIN_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_7:
   \   00000000   ........           DC32     HEADER_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_8:
   \   00000000   ........           DC32     RADIO_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_9:
   \   00000000   ........           DC32     SCROLLBAR_DrawSkinFlex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_10:
   \   00000000   F0F0F000           DC32     0xf0f0f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_11:
   \   00000000   ........           DC32     FS_CacheRW_Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_12:
   \   00000000   ........           DC32     testMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_1:
   \   00000000   ........           DC32     glbBlackoutFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_2:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_3:
   \   00000000   ........           DC32     WIDGET_Effect_None

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_4:
   \   00000000   ........           DC32     raceModeState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   ........           DC32     commTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     commStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108_1:
   \   00000000   ........           DC32     CommSimulatorTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108_2:
   \   00000000   ........           DC32     mainTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108_3:
   \   00000000   ........           DC32     nonModalPopupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108_4:
   \   00000000   ........           DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   722B0000           DC8      0x72, 0x2B, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_1:
   \   00000000   ........           DC32     glbErrorFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   77000000           DC8      "w",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_1:
   \   00000000   2C200000           DC8      0x2C, 0x20, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_2:
   \   00000000   70D0FF00           DC32     0xffd070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_3:
   \   00000000   ........           DC32     popupTitleTextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_4:
   \   00000000   B1030300           DC32     0x303b1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_5:
   \   00000000   08A52200           DC32     0x22a508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_6:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_7:
   \   00000000   ........           DC32     ??NewFirmwareResources

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_8:
   \   00000000   ........           DC32     suData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_9:
   \   00000000   ........           DC32     testMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_10:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_11:
   \   00000000   ........           DC32     bmSplashScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_12:
   \   00000000   ........           DC32     bmDriverName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_13:
   \   00000000   ........           DC32     bmVehicleName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_14:
   \   00000000   67666666           DC32     0x66666667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110_15:
   \   00000000   ........           DC32     glbBlackoutFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_1:
   \   00000000   ........           DC32     systemSettingsPopupScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_2:
   \   00000000   ........           DC32     fileList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_3:
   \   00000000   ........           DC32     GUI_Font32_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_4:
   \   00000000   ........           DC32     WIDGET_Effect_3D

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable113_5:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114:
   \   00000000   ........           DC32     outstanding_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115:
   \   00000000   ........           DC32     ??NewFirmwareResources

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_1:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_2:
   \   00000000   ........           DC32     suData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_3:
   \   00000000   55534200           DC8      "USB"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_4:
   \   00000000   ........           DC32     msgrouting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_5:
   \   00000000   ........           DC32     com

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_6:
   \   00000000   ........           DC32     bmSplashScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_7:
   \   00000000   ........           DC32     bmDriverName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_8:
   \   00000000   ........           DC32     bmVehicleName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_9:
   \   00000000   ........           DC32     testMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_10:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_11:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_12:
   \   00000000   ........           DC32     GUI_Font16B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_13:
   \   00000000   ........           DC32     bmSonyIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_14:
   \   00000000   ........           DC32     bmRaceCamIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_15:
   \   00000000   ........           DC32     bmChaseCamIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_16:
   \   00000000   ........           DC32     bmGoProIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_17:
   \   00000000   ........           DC32     bmReplayIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_18:
   \   00000000   ........           DC32     bmReplay1080Icon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_19:
   \   00000000   ........           DC32     bmReplayMiniIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_20:
   \   00000000   ........           DC32     bmReplayPrimeIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_21:
   \   00000000   ........           DC32     bmMobiusIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_22:
   \   00000000   ........           DC32     bmCheckIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_23:
   \   00000000   ........           DC32     GUI_Font20B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_24:
   \   00000000   ........           DC32     bmUSBCamIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_25:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_26:
   \   00000000   ........           DC32     bmXIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_27:
   \   00000000   ........           DC32     bmWiFiEnabledIcon

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_28:
   \   00000000   ........           DC32     bmWiFiDisabledIcon

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STATUS">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   535441545553       DC8 83, 84, 65, 84, 85, 83, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Saving Files">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   536176696E67       DC8 83, 97, 118, 105, 110, 103, 32, 70, 105, 108
   \              2046696C    
   \   0000000A   657300000000       DC8 101, 115, 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "All files saved.">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   416C6C206669       DC8 65, 108, 108, 32, 102, 105, 108, 101, 115, 32
   \              6C657320    
   \   0000000A   73617665642E       DC8 115, 97, 118, 101, 100, 46, 0, 0, 0, 0
   \              00000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Powering off the unit.">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   506F77657269       DC8 80, 111, 119, 101, 114, 105, 110, 103, 32, 111
   \              6E67206F    
   \   0000000A   666620746865       DC8 102, 102, 32, 116, 104, 101, 32, 117, 110, 105
   \              20756E69    
   \   00000014   742E0000           DC8 116, 46, 0, 0

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SD CARD NOT READY!">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   534420434152       DC8 83, 68, 32, 67, 65, 82, 68, 32, 78, 79
   \              44204E4F    
   \   0000000A   542052454144       DC8 84, 32, 82, 69, 65, 68, 89, 33, 0, 0
   \              59210000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "No SD card or write p...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   4E6F20534420       DC8 78, 111, 32, 83, 68, 32, 99, 97, 114, 100
   \              63617264    
   \   0000000A   206F72207772       DC8 32, 111, 114, 32, 119, 114, 105, 116, 101, 32
   \              69746520    
   \   00000014   70726F746563       DC8 112, 114, 111, 116, 101, 99, 116, 101, 100, 0
   \              74656400    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Insert SD card now or...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   496E73657274       DC8 73, 110, 115, 101, 114, 116, 32, 83, 68, 32
   \              20534420    
   \   0000000A   63617264206E       DC8 99, 97, 114, 100, 32, 110, 111, 119, 32, 111
   \              6F77206F    
   \   00000014   7220706F7765       DC8 114, 32, 112, 111, 119, 101, 114, 32, 100, 111
   \              7220646F    
   \   0000001E   776E00000000       DC8 119, 110, 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "RETRY">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   524554525900       DC8 82, 69, 84, 82, 89, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "POWER DOWN">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   504F57455220       DC8 80, 79, 87, 69, 82, 32, 68, 79, 87, 78
   \              444F574E    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SD CARD REMOVED!">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   534420434152       DC8 83, 68, 32, 67, 65, 82, 68, 32, 82, 69
   \              44205245    
   \   0000000A   4D4F56454421       DC8 77, 79, 86, 69, 68, 33, 0, 0, 0, 0
   \              00000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Cannot record further...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   43616E6E6F74       DC8 67, 97, 110, 110, 111, 116, 32, 114, 101, 99
   \              20726563    
   \   0000000A   6F7264206675       DC8 111, 114, 100, 32, 102, 117, 114, 116, 104, 101
   \              72746865    
   \   00000014   722064617461       DC8 114, 32, 100, 97, 116, 97, 32, 119, 105, 116
   \              20776974    
   \   0000001E   686F75742063       DC8 104, 111, 117, 116, 32, 99, 97, 114, 100, 0
   \              61726400    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TRAQDASH">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   545241514441       DC8 84, 82, 65, 81, 68, 65, 83, 72, 0, 0
   \              53480000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CommSimulatorTask">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   436F6D6D5369       DC8 67, 111, 109, 109, 83, 105, 109, 117, 108, 97
   \              6D756C61    
   \   0000000A   746F72546173       DC8 116, 111, 114, 84, 97, 115, 107, 0, 0, 0
   \              6B000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error detected!\\n\\r">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4572726F7220       DC8 69, 114, 114, 111, 114, 32, 100, 101, 116, 101
   \              64657465    
   \   0000000A   63746564210A       DC8 99, 116, 101, 100, 33, 10, 13, 0, 0, 0
   \              0D000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NEW SU FIRMWARE FOUND">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   4E4557205355       DC8 78, 69, 87, 32, 83, 85, 32, 70, 73, 82
   \              20464952    
   \   0000000A   4D5741524520       DC8 77, 87, 65, 82, 69, 32, 70, 79, 85, 78
   \              464F554E    
   \   00000014   44000000           DC8 68, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Update Connected SU F...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   557064617465       DC8 85, 112, 100, 97, 116, 101, 32, 67, 111, 110
   \              20436F6E    
   \   0000000A   6E6563746564       DC8 110, 101, 99, 116, 101, 100, 32, 83, 85, 32
   \              20535520    
   \   00000014   4669726D7761       DC8 70, 105, 114, 109, 119, 97, 114, 101, 63, 0
   \              72653F00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NEW FIRMWARE FOUND">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4E4557204649       DC8 78, 69, 87, 32, 70, 73, 82, 77, 87, 65
   \              524D5741    
   \   0000000A   524520464F55       DC8 82, 69, 32, 70, 79, 85, 78, 68, 0, 0
   \              4E440000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Update TraqDash Firmw...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   557064617465       DC8 85, 112, 100, 97, 116, 101, 32, 84, 114, 97
   \              20547261    
   \   0000000A   714461736820       DC8 113, 68, 97, 115, 104, 32, 70, 105, 114, 109
   \              4669726D    
   \   00000014   776172653F00       DC8 119, 97, 114, 101, 63, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NEW BOOTLOADER FOUND">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   4E455720424F       DC8 78, 69, 87, 32, 66, 79, 79, 84, 76, 79
   \              4F544C4F    
   \   0000000A   414445522046       DC8 65, 68, 69, 82, 32, 70, 79, 85, 78, 68
   \              4F554E44    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Update TraqDash Bootl...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   557064617465       DC8 85, 112, 100, 97, 116, 101, 32, 84, 114, 97
   \              20547261    
   \   0000000A   714461736820       DC8 113, 68, 97, 115, 104, 32, 66, 111, 111, 116
   \              426F6F74    
   \   00000014   6C6F61646572       DC8 108, 111, 97, 100, 101, 114, 63, 0
   \              3F00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Current Rev %1.2f, Ne...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   43757272656E       DC8 67, 117, 114, 114, 101, 110, 116, 32, 82, 101
   \              74205265    
   \   0000000A   762025312E32       DC8 118, 32, 37, 49, 46, 50, 102, 44, 32, 78
   \              662C204E    
   \   00000014   657720526576       DC8 101, 119, 32, 82, 101, 118, 32, 37, 49, 46
   \              2025312E    
   \   0000001E   326600000000       DC8 50, 102, 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "What would you like t...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   576861742077       DC8 87, 104, 97, 116, 32, 119, 111, 117, 108, 100
   \              6F756C64    
   \   0000000A   20796F75206C       DC8 32, 121, 111, 117, 32, 108, 105, 107, 101, 32
   \              696B6520    
   \   00000014   746F20646F3F       DC8 116, 111, 32, 100, 111, 63, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "POWER OFF">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   504F57455220       DC8 80, 79, 87, 69, 82, 32, 79, 70, 70, 0
   \              4F464600    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "RUN WITHOUT">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   52554E205749       DC8 82, 85, 78, 32, 87, 73, 84, 72, 79, 85
   \              54484F55    
   \   0000000A   5400               DC8 84, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SD CARD INSERTED!">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   534420434152       DC8 83, 68, 32, 67, 65, 82, 68, 32, 73, 78
   \              4420494E    
   \   0000000A   534552544544       DC8 83, 69, 82, 84, 69, 68, 33, 0, 0, 0
   \              21000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Must reset unit to st...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   4D7573742072       DC8 77, 117, 115, 116, 32, 114, 101, 115, 101, 116
   \              65736574    
   \   0000000A   20756E697420       DC8 32, 117, 110, 105, 116, 32, 116, 111, 32, 115
   \              746F2073    
   \   00000014   746172742075       DC8 116, 97, 114, 116, 32, 117, 115, 105, 110, 103
   \              73696E67    
   \   0000001E   207468697320       DC8 32, 116, 104, 105, 115, 32, 99, 97, 114, 100
   \              63617264    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "RESET UNIT">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   524553455420       DC8 82, 69, 83, 69, 84, 32, 85, 78, 73, 84
   \              554E4954    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UPDATE">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   555044415445       DC8 85, 80, 68, 65, 84, 69, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SKIP">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   534B49500000       DC8 83, 75, 73, 80, 0, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Do Not Disconnect or ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   446F204E6F74       DC8 68, 111, 32, 78, 111, 116, 32, 68, 105, 115
   \              20446973    
   \   0000000A   636F6E6E6563       DC8 99, 111, 110, 110, 101, 99, 116, 32, 111, 114
   \              74206F72    
   \   00000014   20506F776572       DC8 32, 80, 111, 119, 101, 114, 32, 68, 111, 119
   \              20446F77    
   \   0000001E   6E00               DC8 110, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\544729.sno">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5C3534343732       DC8 92, 53, 52, 52, 55, 50, 57, 46, 115, 110
   \              392E736E    
   \   0000000A   6F00               DC8 111, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\testmode">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5C746573746D       DC8 92, 116, 101, 115, 116, 109, 111, 100, 101, 0
   \              6F646500    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\demomode">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5C64656D6F6D       DC8 92, 100, 101, 109, 111, 109, 111, 100, 101, 0
   \              6F646500    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\factmode">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5C666163746D       DC8 92, 102, 97, 99, 116, 109, 111, 100, 101, 0
   \              6F646500    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\tempcal">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   5C74656D7063       DC8 92, 116, 101, 109, 112, 99, 97, 108, 0, 0
   \              616C0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\\\SD_WLAN\\\\CONFIG">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   5C53445F574C       DC8 92, 83, 68, 95, 87, 76, 65, 78, 92, 67
   \              414E5C43    
   \   0000000A   4F4E46494700       DC8 79, 78, 70, 73, 71, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TraqDash SW %3.2f, HW...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   547261714461       DC8 84, 114, 97, 113, 68, 97, 115, 104, 32, 83
   \              73682053    
   \   0000000A   572025332E32       DC8 87, 32, 37, 51, 46, 50, 102, 44, 32, 72
   \              662C2048    
   \   00000014   572025332E32       DC8 87, 32, 37, 51, 46, 50, 102, 44, 32, 68
   \              662C2044    
   \   0000001E   415441202564       DC8 65, 84, 65, 32, 37, 100, 32, 33, 10, 13
   \              20210A0D    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "System">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   53797374656D       DC8 83, 121, 115, 116, 101, 109, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Vehicle">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   56656869636C       DC8 86, 101, 104, 105, 99, 108, 101, 0
   \              6500        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Track">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   547261636B00       DC8 84, 114, 97, 99, 107, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Driver">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   447269766572       DC8 68, 114, 105, 118, 101, 114, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "r+">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   722B0000           DC8 114, 43, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "tdfirm">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   74646669726D       DC8 116, 100, 102, 105, 114, 109, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sufirm">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   73756669726D       DC8 115, 117, 102, 105, 114, 109, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "tdboot">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   7464626F6F74       DC8 116, 100, 98, 111, 111, 116, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SU code program, file...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   535520636F64       DC8 83, 85, 32, 99, 111, 100, 101, 32, 112, 114
   \              65207072    
   \   0000000A   6F6772616D2C       DC8 111, 103, 114, 97, 109, 44, 32, 102, 105, 108
   \              2066696C    
   \   00000014   65203D202573       DC8 101, 32, 61, 32, 37, 115, 44, 32, 114, 101
   \              2C207265    
   \   0000001E   76203D202564       DC8 118, 32, 61, 32, 37, 100, 32, 10, 13, 0
   \              200A0D00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sending">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   53656E64696E       DC8 83, 101, 110, 100, 105, 110, 103, 0
   \              6700        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4572726F7200       DC8 69, 114, 114, 111, 114, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SU reprogram complete\\n\\r">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   535520726570       DC8 83, 85, 32, 114, 101, 112, 114, 111, 103, 114
   \              726F6772    
   \   0000000A   616D20636F6D       DC8 97, 109, 32, 99, 111, 109, 112, 108, 101, 116
   \              706C6574    
   \   00000014   650A0D00           DC8 101, 10, 13, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Wait for SU to Turn Off">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   576169742066       DC8 87, 97, 105, 116, 32, 102, 111, 114, 32, 83
   \              6F722053    
   \   0000000A   5520746F2054       DC8 85, 32, 116, 111, 32, 84, 117, 114, 110, 32
   \              75726E20    
   \   00000014   4F666600           DC8 79, 102, 102, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Erasing Boot Area \\n\\r">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   45726173696E       DC8 69, 114, 97, 115, 105, 110, 103, 32, 66, 111
   \              6720426F    
   \   0000000A   6F7420417265       DC8 111, 116, 32, 65, 114, 101, 97, 32, 10, 13
   \              61200A0D    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Erasing Code Area \\n\\r">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   45726173696E       DC8 69, 114, 97, 115, 105, 110, 103, 32, 67, 111
   \              6720436F    
   \   0000000A   646520417265       DC8 100, 101, 32, 65, 114, 101, 97, 32, 10, 13
   \              61200A0D    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Erasing">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   45726173696E       DC8 69, 114, 97, 115, 105, 110, 103, 0
   \              6700        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Writing">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   57726974696E       DC8 87, 114, 105, 116, 105, 110, 103, 0
   \              6700        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "bytes left over = %ld \\n\\r">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   627974657320       DC8 98, 121, 116, 101, 115, 32, 108, 101, 102, 116
   \              6C656674    
   \   0000000A   206F76657220       DC8 32, 111, 118, 101, 114, 32, 61, 32, 37, 108
   \              3D20256C    
   \   00000014   64200A0D0000       DC8 100, 32, 10, 13, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Writing page = %d \\n\\r">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   57726974696E       DC8 87, 114, 105, 116, 105, 110, 103, 32, 112, 97
   \              67207061    
   \   0000000A   6765203D2025       DC8 103, 101, 32, 61, 32, 37, 100, 32, 10, 13
   \              64200A0D    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Write complete, pages...">`:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   577269746520       DC8 87, 114, 105, 116, 101, 32, 99, 111, 109, 112
   \              636F6D70    
   \   0000000A   6C6574652C20       DC8 108, 101, 116, 101, 44, 32, 112, 97, 103, 101
   \              70616765    
   \   00000014   73203D202564       DC8 115, 32, 61, 32, 37, 100, 44, 32, 116, 111
   \              2C20746F    
   \   0000001E   74616C206279       DC8 116, 97, 108, 32, 98, 121, 116, 101, 115, 32
   \              74657320    
   \   00000028   3D20256C6420       DC8 61, 32, 37, 108, 100, 32, 10, 13, 0, 0
   \              0A0D0000    
   \   00000032   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Updating bootloader r...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   557064617469       DC8 85, 112, 100, 97, 116, 105, 110, 103, 32, 98
   \              6E672062    
   \   0000000A   6F6F746C6F61       DC8 111, 111, 116, 108, 111, 97, 100, 101, 114, 32
   \              64657220    
   \   00000014   7265760A0D00       DC8 114, 101, 118, 10, 13, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Removing bootloader f...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   52656D6F7669       DC8 82, 101, 109, 111, 118, 105, 110, 103, 32, 98
   \              6E672062    
   \   0000000A   6F6F746C6F61       DC8 111, 111, 116, 108, 111, 97, 100, 101, 114, 32
   \              64657220    
   \   00000014   66696C65200A       DC8 102, 105, 108, 101, 32, 10, 13, 0
   \              0D00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rebooting \\n\\r">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   5265626F6F74       DC8 82, 101, 98, 111, 111, 116, 105, 110, 103, 32
   \              696E6720    
   \   0000000A   0A0D00000000       DC8 10, 13, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Camera">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   43616D657261       DC8 67, 97, 109, 101, 114, 97, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Digital 4">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   446967697461       DC8 68, 105, 103, 105, 116, 97, 108, 32, 52, 0
   \              6C203400    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Digital 5">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   446967697461       DC8 68, 105, 103, 105, 116, 97, 108, 32, 53, 0
   \              6C203500    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WiFi">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   576946690000       DC8 87, 105, 70, 105, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Analog %d">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   416E616C6F67       DC8 65, 110, 97, 108, 111, 103, 32, 37, 100, 0
   \              20256400    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "w">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   7700               DC8 119, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "New Software Detected">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   4E657720536F       DC8 78, 101, 119, 32, 83, 111, 102, 116, 119, 97
   \              66747761    
   \   0000000A   726520446574       DC8 114, 101, 32, 68, 101, 116, 101, 99, 116, 101
   \              65637465    
   \   00000014   64000000           DC8 100, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "New Track Definitions...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   4E6577205472       DC8 78, 101, 119, 32, 84, 114, 97, 99, 107, 32
   \              61636B20    
   \   0000000A   446566696E69       DC8 68, 101, 102, 105, 110, 105, 116, 105, 111, 110
   \              74696F6E    
   \   00000014   732E20576F75       DC8 115, 46, 32, 87, 111, 117, 108, 100, 32, 121
   \              6C642079    
   \   0000001E   6F75206C696B       DC8 111, 117, 32, 108, 105, 107, 101, 0, 0, 0
   \              65000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "to update Start/Finis...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   746F20757064       DC8 116, 111, 32, 117, 112, 100, 97, 116, 101, 32
   \              61746520    
   \   0000000A   53746172742F       DC8 83, 116, 97, 114, 116, 47, 70, 105, 110, 105
   \              46696E69    
   \   00000014   736820636F6F       DC8 115, 104, 32, 99, 111, 111, 114, 100, 105, 110
   \              7264696E    
   \   0000001E   617465733F00       DC8 97, 116, 101, 115, 63, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "YES">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   59455300           DC8 89, 69, 83, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4E4F0000           DC8 78, 79, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ", ">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   2C200000           DC8 44, 32, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Check Your Settings">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   436865636B20       DC8 67, 104, 101, 99, 107, 32, 89, 111, 117, 114
   \              596F7572    
   \   0000000A   205365747469       DC8 32, 83, 101, 116, 116, 105, 110, 103, 115, 0
   \              6E677300    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "The following configu...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   54686520666F       DC8 84, 104, 101, 32, 102, 111, 108, 108, 111, 119
   \              6C6C6F77    
   \   0000000A   696E6720636F       DC8 105, 110, 103, 32, 99, 111, 110, 102, 105, 103
   \              6E666967    
   \   00000014   75726174696F       DC8 117, 114, 97, 116, 105, 111, 110, 40, 115, 41
   \              6E287329    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "were set to defaults:">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   776572652073       DC8 119, 101, 114, 101, 32, 115, 101, 116, 32, 116
   \              65742074    
   \   0000000A   6F2064656661       DC8 111, 32, 100, 101, 102, 97, 117, 108, 116, 115
   \              756C7473    
   \   00000014   3A000000           DC8 58, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F4B0000           DC8 79, 75, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {{"", 0}, {"", 0}, {"", 0}}>`:
   \   00000000                      ; Initializer data, 60 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000010   00000000           DC32 0
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000001E   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000024   00000000           DC32 0
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000038   00000000           DC32 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\\\">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5C00               DC8 92, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "tqc">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   74716300           DC8 116, 113, 99, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "tqb">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   74716200           DC8 116, 113, 98, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "r">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   7200               DC8 114, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "USB">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   55534200           DC8 85, 83, 66, 0
   1716          
   1717          /****** End of File *************************************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     AskAndDoFormatSDCard          8
     ConfigureCache                8
     ConfigureForNoSDCard          8
     CreateProgressBar            32
     DisplayAnalogStatus          24
     DisplayInvalidFilesPopup     32
     DisplaySplashScreen1          8
     DisplaySplashScreen3         48
     InitializeTraqmateData        8
     InitializeTraqmateFiles      88
     MainTask                     88
     NewSWVersion                 40
     OkToUseSDCard                 0
     PowerOffUnit                 32
     ReFlashYorN                  72
     RepaintSplash                 8
     RetrySDCard                  24
     SDCardReinserted             16
     SDCardRemoved                16
     SaveFilesAndPowerDown         8
     SetPopupDefaults             56
     UserWantsToUpdateSF          16
     WriteCodeImage             1496
     local_itoa                   16
     reverse                      16


   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     popupTitleTextColor                         4
     VERSION_PATH                               28
     MainTask                                 2160
     testMode                                   23
     demoMode
     factMode
     splashScreenStartTime
     debounce
     lockupSemaphore
     localSDCardFlag
     okToUseSDCard
     ConfigureForNoSDCard                       76
     RetrySDCard                               280
     NoSDCardResources                         120
     SetPopupDefaults                          336
     SDCardRemoved                             108
     SDCardRemovedResources                    120
     SDCardReinserted                          112
     SDCardReinsertedResources                  72
     ReFlashYorN                               308
     NewFirmwareResources                      144
     ShuttingDownResources                      48
     SafeToPowerOffUnit                         72
     PowerOffUnit                              240
     SaveFilesAndPowerDown                      40
     ConfigureCache                             56
     fileCache                                   4
     OkToUseSDCard                              12
     InitializeTraqmateFiles                   516
     local_itoa                                156
     reverse                                    76
     NewSWVersion                              340
     UserWantsToUpdateSF                       132
     CheckUpdateTracks                         120
     InitializeTraqmateData                     60
     fileList                                  100
     DisplayInvalidFilesPopup                  280
     InvalidFilesResources                      96
     AskAndDoFormatSDCard                       64
     CreateProgressBar                         180
     WriteCodeImage                           3020
     DriverRect                                  8
     VehicleRect                                 8
     RepaintSplash                              68
     DisplaySplashScreen1                       68
     DisplaySplashScreen3                      864
     DisplayAnalogStatus                       100
     ??DataTable98                               4
     ??DataTable100                              4
     ??DataTable102                              4
     ??DataTable103                              4
     ??DataTable103_1                            4
     ??DataTable103_2                            4
     ??DataTable103_3                            4
     ??DataTable103_4                            4
     ??DataTable103_5                            4
     ??DataTable103_6                            4
     ??DataTable103_7                            4
     ??DataTable103_8                            4
     ??DataTable103_9                            4
     ??DataTable103_10                           4
     ??DataTable103_11                           4
     ??DataTable103_12                           4
     ??DataTable105                              4
     ??DataTable105_1                            4
     ??DataTable105_2                            4
     ??DataTable105_3                            4
     ??DataTable105_4                            4
     ??DataTable106                              4
     ??DataTable107                              4
     ??DataTable108                              4
     ??DataTable108_1                            4
     ??DataTable108_2                            4
     ??DataTable108_3                            4
     ??DataTable108_4                            4
     ??DataTable109                              4
     ??DataTable109_1                            4
     ??DataTable110                              4
     ??DataTable110_1                            4
     ??DataTable110_2                            4
     ??DataTable110_3                            4
     ??DataTable110_4                            4
     ??DataTable110_5                            4
     ??DataTable110_6                            4
     ??DataTable110_7                            4
     ??DataTable110_8                            4
     ??DataTable110_9                            4
     ??DataTable110_10                           4
     ??DataTable110_11                           4
     ??DataTable110_12                           4
     ??DataTable110_13                           4
     ??DataTable110_14                           4
     ??DataTable110_15                           4
     ??DataTable113                              4
     ??DataTable113_1                            4
     ??DataTable113_2                            4
     ??DataTable113_3                            4
     ??DataTable113_4                            4
     ??DataTable113_5                            4
     ??DataTable114                              4
     ??DataTable115                              4
     ??DataTable115_1                            4
     ??DataTable115_2                            4
     ??DataTable115_3                            4
     ??DataTable115_4                            4
     ??DataTable115_5                            4
     ??DataTable115_6                            4
     ??DataTable115_7                            4
     ??DataTable115_8                            4
     ??DataTable115_9                            4
     ??DataTable115_10                           4
     ??DataTable115_11                           4
     ??DataTable115_12                           4
     ??DataTable115_13                           4
     ??DataTable115_14                           4
     ??DataTable115_15                           4
     ??DataTable115_16                           4
     ??DataTable115_17                           4
     ??DataTable115_18                           4
     ??DataTable115_19                           4
     ??DataTable115_20                           4
     ??DataTable115_21                           4
     ??DataTable115_22                           4
     ??DataTable115_23                           4
     ??DataTable115_24                           4
     ??DataTable115_25                           4
     ??DataTable115_26                           4
     ??DataTable115_27                           4
     ??DataTable115_28                           4
     ?<Constant "STATUS">                        8
     ?<Constant "Saving Files">                 16
     ?<Constant "All files saved.">             20
     ?<Constant "Powering off the unit.">       24
     ?<Constant "">                              1
     ?<Constant "SD CARD NOT READY!">           20
     ?<Constant "No SD card or write p...">     32
     ?<Constant "Insert SD card now or...">     36
     ?<Constant "RETRY">                         8
     ?<Constant "POWER DOWN">                   12
     ?<Constant "SD CARD REMOVED!">             20
     ?<Constant "Cannot record further...">     40
     ?<Constant "TRAQDASH">                     12
     ?<Constant "CommSimulatorTask">            20
     ?<Constant "Error detected!\n\r">          20
     ?<Constant "NEW SU FIRMWARE FOUND">        24
     ?<Constant "Update Connected SU F...">     32
     ?<Constant "NEW FIRMWARE FOUND">           20
     ?<Constant "Update TraqDash Firmw...">     28
     ?<Constant "NEW BOOTLOADER FOUND">         24
     ?<Constant "Update TraqDash Bootl...">     28
     ?<Constant "Current Rev %1.2f, Ne...">     36
     ?<Constant "What would you like t...">     28
     ?<Constant "POWER OFF">                    12
     ?<Constant "RUN WITHOUT">                  12
     ?<Constant "SD CARD INSERTED!">            20
     ?<Constant "Must reset unit to st...">     44
     ?<Constant "RESET UNIT">                   12
     ?<Constant "UPDATE">                        8
     ?<Constant "SKIP">                          8
     ?<Constant "Do Not Disconnect or ...">     32
     ?<Constant "\\544729.sno">                 12
     ?<Constant "\\testmode">                   12
     ?<Constant "\\demomode">                   12
     ?<Constant "\\factmode">                   12
     ?<Constant "\\tempcal">                    12
     ?<Constant "\\SD_WLAN\\CONFIG">            16
     ?<Constant "TraqDash SW %3.2f, HW...">     44
     ?<Constant "System">                        8
     ?<Constant "Vehicle">                       8
     ?<Constant "Track">                         8
     ?<Constant "Driver">                        8
     ?<Constant "r+">                            4
     ?<Constant "tdfirm">                        8
     ?<Constant "sufirm">                        8
     ?<Constant "tdboot">                        8
     ?<Constant "SU code program, file...">     40
     ?<Constant "Sending">                       8
     ?<Constant "Error">                         8
     ?<Constant "SU reprogram complete\n\r">    24
     ?<Constant "Wait for SU to Turn Off">      24
     ?<Constant "Erasing Boot Area \n\r">       24
     ?<Constant "Erasing Code Area \n\r">       24
     ?<Constant "Erasing">                       8
     ?<Constant "Writing">                       8
     ?<Constant "bytes left over = %ld \n\r">   28
     ?<Constant "Writing page = %d \n\r">       24
     ?<Constant "Write complete, pages...">     52
     ?<Constant "Updating bootloader r...">     28
     ?<Constant "Removing bootloader f...">     28
     ?<Constant "Rebooting \n\r">               16
     ?<Constant "Camera">                        8
     ?<Constant "Digital 4">                    12
     ?<Constant "Digital 5">                    12
     ?<Constant "WiFi">                          8
     ?<Constant "Analog %d">                    12
     ?<Constant "w">                             2
     ?<Constant "New Software Detected">        24
     ?<Constant "New Track Definitions...">     40
     ?<Constant "to update Start/Finis...">     36
     ?<Constant "YES">                           4
     ?<Constant "NO">                            4
     ?<Constant ", ">                            4
     ?<Constant "Check Your Settings">          20
     ?<Constant "The following configu...">     32
     ?<Constant "were set to defaults:">        24
     ?<Constant "OK">                            4
     ?<Constant {{"", 0}, {"", 0}, {"", 0}}>    60
     ?<Constant "\\">                            2
     ?<Constant "tqc">                           4
     ?<Constant "tqb">                           4
     ?<Constant "r">                             2
     ?<Constant "USB">                           4

 
    123 bytes in section .bss
    152 bytes in section .data
    687 bytes in section .rodata
 11 488 bytes in section .text
 
 11 488 bytes of CODE  memory
    687 bytes of CONST memory
    275 bytes of DATA  memory

Errors: none
Warnings: none
