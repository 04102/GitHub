###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_CharP.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_CharP.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_CharP.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _CharP.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_CharP.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICharP.C
     19          Purpose     : Implementation of Proportional fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26           
     27          /*********************************************************************
     28          *
     29          *       Private code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUIPROP__FindChar
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          const GUI_FONT_PROP * GUIPROP__FindChar(const GUI_FONT_PROP * pProp, U16P c) {
   \                     GUIPROP__FindChar:
   \   00000000   000000EA           B        ??GUIPROP__FindChar_0
     38            for (; pProp; pProp = (const GUI_FONT_PROP *) pProp->pNext) {
   \                     ??GUIPROP__FindChar_1:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??GUIPROP__FindChar_0:
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0400000A           BEQ      ??GUIPROP__FindChar_2
     39              if ((c >= pProp->First) && (c <= pProp->Last))
   \   00000010   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   B220D021           LDRHCS   R2,[R0, #+2]
   \   0000001C   01005221           CMPCS    R2,R1
   \   00000020   F7FFFF3A           BCC      ??GUIPROP__FindChar_1
     40                break;
     41            }
     42            return pProp;
   \                     ??GUIPROP__FindChar_2:
   \   00000024   1EFF2FE1           BX       LR               ;; return
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       Public code
     48          *
     49          **********************************************************************
     50          */
     51          /*********************************************************************
     52          *
     53          *       GUIPROP_DispChar
     54          *
     55          * Purpose:
     56          *   This is the routine that displays a character. It is used by all
     57          *   other routines which display characters as a subroutine.
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          void GUIPROP_DispChar(U16P c) {
   \                     GUIPROP_DispChar:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     60            int BytesPerLine;
     61            GUI_DRAWMODE DrawMode, OldDrawMode;
     62            const GUI_FONT_PROP * pProp;
     63            const GUI_CHARINFO  * pCharInfo;
     64          
     65            DrawMode = GUI_Context.TextMode;
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
     66            pProp    = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
   \   0000000C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000010   FA92D4E1           LDRSH    R9,[R4, #+42]
   \   00000014   1C1091E5           LDR      R1,[R1, #+28]
   \   00000018   000000EA           B        ??GUIPROP_DispChar_0
   \                     ??GUIPROP_DispChar_1:
   \   0000001C   081091E5           LDR      R1,[R1, #+8]
   \                     ??GUIPROP_DispChar_0:
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   3F00000A           BEQ      ??GUIPROP_DispChar_2
   \   00000028   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   B220D121           LDRHCS   R2,[R1, #+2]
   \   00000034   00005221           CMPCS    R2,R0
   \   00000038   F7FFFF3A           BCC      ??GUIPROP_DispChar_1
     67            if (pProp) {
     68              pCharInfo = pProp->paCharInfo + (c - pProp->First);
   \   0000003C   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000040   041091E5           LDR      R1,[R1, #+4]
   \   00000044   020040E0           SUB      R0,R0,R2
   \   00000048   805181E0           ADD      R5,R1,R0, LSL #+3
     69              BytesPerLine = pCharInfo->BytesPerLine;
   \   0000004C   0270D5E5           LDRB     R7,[R5, #+2]
     70              OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   00000050   0900A0E1           MOV      R0,R9
   \   00000054   ........           BL       LCD_SetDrawMode
     71              LCD_DrawBitmap( GUI_Context.DispPosX, GUI_Context.DispPosY,
     72                                 pCharInfo->XSize,
     73                                 GUI_Context.pAFont->YSize,
     74                                 GUI_Context.pAFont->XMag,
     75                                 GUI_Context.pAFont->YMag,
     76                                 1,     /* Bits per Pixel */
     77                                 BytesPerLine,
     78                                 pCharInfo->pData,
     79                                 LCD_pBkColorIndex
     80                                 );
   \   00000058   ........           LDR      R1,??DataTable1_1
   \   0000005C   0060A0E1           MOV      R6,R0
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   1C0094E5           LDR      R0,[R4, #+28]
   \   00000068   14108DE5           STR      R1,[SP, #+20]
   \   0000006C   041095E5           LDR      R1,[R5, #+4]
   \   00000070   0C708DE5           STR      R7,[SP, #+12]
   \   00000074   10108DE5           STR      R1,[SP, #+16]
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   08108DE5           STR      R1,[SP, #+8]
   \   00000080   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000084   04108DE5           STR      R1,[SP, #+4]
   \   00000088   1A10D0E5           LDRB     R1,[R0, #+26]
   \   0000008C   00108DE5           STR      R1,[SP, #+0]
   \   00000090   1830D0E5           LDRB     R3,[R0, #+24]
   \   00000094   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000098   F412D4E1           LDRSH    R1,[R4, #+36]
   \   0000009C   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000A0   ........           BL       LCD_DrawBitmap
     81              /* Fill empty pixel lines */
     82              if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \   000000A4   1C0094E5           LDR      R0,[R4, #+28]
   \   000000A8   1910D0E5           LDRB     R1,[R0, #+25]
   \   000000AC   1820D0E5           LDRB     R2,[R0, #+24]
   \   000000B0   010052E1           CMP      R2,R1
   \   000000B4   1300002A           BCS      ??GUIPROP_DispChar_3
     83                int YMag = GUI_Context.pAFont->YMag;
   \   000000B8   1B00D0E5           LDRB     R0,[R0, #+27]
     84                int YDist = GUI_Context.pAFont->YDist * YMag;
     85                int YSize = GUI_Context.pAFont->YSize * YMag;
     86                if (DrawMode != LCD_DRAWMODE_TRANS) {
   \   000000BC   020059E3           CMP      R9,#+2
   \   000000C0   800167E1           SMULBB   R7,R0,R1
   \   000000C4   800268E1           SMULBB   R8,R0,R2
   \   000000C8   0E00000A           BEQ      ??GUIPROP_DispChar_3
     87                  LCD_COLOR OldColor = GUI_GetColor();
   \   000000CC   ........           BL       GUI_GetColor
   \   000000D0   0090A0E1           MOV      R9,R0
     88                  GUI_SetColor(GUI_GetBkColor());
   \   000000D4   ........           BL       GUI_GetBkColor
   \   000000D8   ........           BL       GUI_SetColor
   \   000000DC   1CC094E5           LDR      R12,[R4, #+28]
   \   000000E0   F412D4E1           LDRSH    R1,[R4, #+36]
   \   000000E4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000E8   0020D5E5           LDRB     R2,[R5, #+0]
   \   000000EC   1BC0DCE5           LDRB     R12,[R12, #+27]
   \   000000F0   013087E0           ADD      R3,R7,R1
   \   000000F4   011088E0           ADD      R1,R8,R1
   \   000000F8   8C0202E1           SMLABB   R2,R12,R2,R0
     89                  LCD_FillRect(GUI_Context.DispPosX, 
     90                               GUI_Context.DispPosY + YSize, 
     91                               GUI_Context.DispPosX + pCharInfo->XSize * GUI_Context.pAFont->YMag, 
     92                               GUI_Context.DispPosY + YDist);
   \   000000FC   ........           BL       LCD_FillRect
     93                  GUI_SetColor(OldColor);
   \   00000100   0900A0E1           MOV      R0,R9
   \   00000104   ........           BL       GUI_SetColor
     94                }
     95              }
     96              LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
   \                     ??GUIPROP_DispChar_3:
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           BL       LCD_SetDrawMode
     97              GUI_Context.DispPosX += pCharInfo->XDist * GUI_Context.pAFont->XMag;
   \   00000110   1C2094E5           LDR      R2,[R4, #+28]
   \   00000114   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000118   0110D5E5           LDRB     R1,[R5, #+1]
   \   0000011C   1A20D2E5           LDRB     R2,[R2, #+26]
   \   00000120   820100E1           SMLABB   R0,R2,R1,R0
   \   00000124   B202C4E1           STRH     R0,[R4, #+34]
     98            }
     99          }
   \                     ??GUIPROP_DispChar_2:
   \   00000128   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000012C   F083BDE8           POP      {R4-R9,PC}       ;; return
    100          
    101          /*********************************************************************
    102          *
    103          *       GUIPROP_GetCharDistX
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          int GUIPROP_GetCharDistX(U16P c) {
   \                     GUIPROP_GetCharDistX:
   \   00000000   ........           LDR      R1,??DataTable1
   \   00000004   1C1091E5           LDR      R1,[R1, #+28]
   \   00000008   1C2091E5           LDR      R2,[R1, #+28]
   \   0000000C   000000EA           B        ??GUIPROP_GetCharDistX_0
   \                     ??GUIPROP_GetCharDistX_1:
   \   00000010   082092E5           LDR      R2,[R2, #+8]
   \                     ??GUIPROP_GetCharDistX_0:
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0B00000A           BEQ      ??GUIPROP_GetCharDistX_2
   \   0000001C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   B230D221           LDRHCS   R3,[R2, #+2]
   \   00000028   00005321           CMPCS    R3,R0
   \   0000002C   F7FFFF3A           BCC      ??GUIPROP_GetCharDistX_1
   \   00000030   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000034   042092E5           LDR      R2,[R2, #+4]
   \   00000038   1A10D1E5           LDRB     R1,[R1, #+26]
   \   0000003C   030040E0           SUB      R0,R0,R3
   \   00000040   8001D2E7           LDRB     R0,[R2, +R0, LSL #+3]
   \   00000044   810060E1           SMULBB   R0,R1,R0
   \   00000048   1EFF2FE1           BX       LR
   \                     ??GUIPROP_GetCharDistX_2:
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   1EFF2FE1           BX       LR               ;; return
    106            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    107            
    108            pProp = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
    109            return (pProp) ? (pProp->paCharInfo + (c - pProp->First))->XSize * GUI_Context.pAFont->XMag : 0;
    110          }
    111          
    112          /*********************************************************************
    113          *
    114          *       GUIPROP_GetFontInfo
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          void GUIPROP_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
    117            GUI_USE_PARA(pFont);
    118            pfi->Flags = GUI_FONTINFO_FLAG_PROP;
   \                     GUIPROP_GetFontInfo:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    119          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    120          
    121          /*********************************************************************
    122          *
    123          *       GUIPROP_IsInFont
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          char GUIPROP_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
    126            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    127          
    128            pProp = GUIPROP__FindChar(pFont->p.pProp, c);
   \                     GUIPROP_IsInFont:
   \   00000000   1C0090E5           LDR      R0,[R0, #+28]
   \   00000004   050000EA           B        ??GUIPROP_IsInFont_0
   \                     ??GUIPROP_IsInFont_1:
   \   00000008   B020D0E1           LDRH     R2,[R0, #+0]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   B220D021           LDRHCS   R2,[R0, #+2]
   \   00000014   01005221           CMPCS    R2,R1
   \   00000018   0300002A           BCS      ??GUIPROP_IsInFont_2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \                     ??GUIPROP_IsInFont_0:
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F7FFFF1A           BNE      ??GUIPROP_IsInFont_1
   \   00000028   1EFF2FE1           BX       LR
   \                     ??GUIPROP_IsInFont_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   1EFF2FE1           BX       LR               ;; return
    129            return (pProp == NULL) ? 0 : 1;
    130          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    131          
    132          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUIPROP_DispChar         56
     GUIPROP_GetCharDistX      0
     GUIPROP_GetFontInfo       0
     GUIPROP_IsInFont          0
     GUIPROP__FindChar         0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     GUIPROP__FindChar      40
     GUIPROP_DispChar      304
     GUIPROP_GetCharDistX   84
     GUIPROP_GetFontInfo    12
     GUIPROP_IsInFont       52
     ??DataTable1            4
     ??DataTable1_1          4

 
 500 bytes in section .text
 
 500 bytes of CODE memory

Errors: none
Warnings: none
