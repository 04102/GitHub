###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\BSP.c                             #
#    Command line =  C:\DUII\TargetHW\Setup\BSP.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\BS #
#                    P.lst                                                    #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\BSP #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\BSP.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2007  SEGGER Microcontroller Systeme GmbH         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.50b                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : BSP.c
     31          Purpose : BSP for AT91SAM9RL64-EK
     32          --------  END-OF-HEADER  ---------------------------------------------
     33          */
     34          
     35          #define BSP_C
     36          #include "SEGGER.h"
     37          #include "SPI_API.h"
     38          #include "BSP.h"
     39          
     40          /*********************************************************************
     41          *
     42          *       Defines
     43          *
     44          **********************************************************************
     45          */
     46          //
     47          // KMC - No longer use eval boards LEDs - do not include Segger's LED control software
     48          //
     49          #if 0
     50          /****** Addresses of sfrs and peripheral identifiers ****************/
     51          #define PIOD_BASE_ADDR                     (0xFFFFFA00)
     52          #define PMC_BASE_ADDR                      (0xFFFFFC00)
     53          #define PIOD_ID                            (5)
     54          #define PIO_PER_OFFS                       (0x00)
     55          #define PIO_OER_OFFS                       (0x10)
     56          #define PIO_SODR_OFFS                      (0x30)                               // Set output data
     57          #define PIO_CODR_OFFS                      (0x34)                               // Clear output data register
     58          #define PIO_ODSR_OFFS                      (0x38)                               // output data status register
     59          
     60          /****** SFRs and identifiers used for LED demo **********************/
     61          #define PMC_PCER                           (*(volatile U32*) (PMC_BASE_ADDR + 0x10))
     62          
     63          /****** Assign LEDs to Ports ****************************************/
     64          #define LEDPORT_BASE_ADDR                  (PIOD_BASE_ADDR)
     65          #define LEDPORT_ID                         (PIOD_ID)
     66          #define LED0_BIT                           (15)  // LED1 on AT91SAM9RL64-EK board, active low
     67          #define LED1_BIT                           (16)  // LED2 on AT91SAM9RL64-EK board, active low
     68          
     69          #define LEDPORT_PER                        (*(volatile U32*) (LEDPORT_BASE_ADDR + PIO_PER_OFFS))
     70          #define LEDPORT_OER                        (*(volatile U32*) (LEDPORT_BASE_ADDR + PIO_OER_OFFS))
     71          #define LEDPORT_SODR                       (*(volatile U32*) (LEDPORT_BASE_ADDR + PIO_SODR_OFFS))
     72          #define LEDPORT_CODR                       (*(volatile U32*) (LEDPORT_BASE_ADDR + PIO_CODR_OFFS))
     73          #define LEDPORT_STATE                      (*(volatile U32*) (LEDPORT_BASE_ADDR + PIO_ODSR_OFFS))
     74          #define LEDMASK_ALL                        ((1 << LED0_BIT) | (1 << LED1_BIT))
     75          /*********************************************************************
     76          *
     77          *       Global functions
     78          *
     79          **********************************************************************
     80          */
     81          
     82          /*********************************************************************
     83          *
     84          *       LED_Init()
     85          */
     86          void BSP_Init(void) {
     87            PMC_PCER     |= (1 << LEDPORT_ID); /* Enable peripheral clock for LED-Port    */
     88            LEDPORT_PER   = LEDMASK_ALL;       /* enable Port           */
     89            LEDPORT_OER   = LEDMASK_ALL;       /* switch to output mode */
     90            LEDPORT_SODR  = LEDMASK_ALL;       /* Initially clear LEDs  */
     91          }
     92          
     93          /*********************************************************************
     94          *
     95          *       LED switching routines
     96          *       LEDs are switched on with low level on port lines
     97          */
     98          void BSP_SetLED(int Index) {
     99            LEDPORT_CODR = (1 << (Index + LED0_BIT));         // Switch on LED
    100          }
    101          
    102          void BSP_ClrLED(int Index) {
    103            LEDPORT_SODR = (1 << (Index + LED0_BIT));         // Switch off LED
    104          }
    105          
    106          void BSP_ToggleLED(int Index) {
    107            if (LEDPORT_STATE & (1 << (Index + LED0_BIT))) {  // LED is switched off
    108              BSP_SetLED(Index);
    109            } else {
    110              BSP_ClrLED(Index);
    111            }
    112          }
    113          
    114          #endif
    115          
    116          /***************************************************
    117          *
    118          *       BSP_SD_GetTransferMem
    119          *
    120          *  Function description
    121          *     Delivers a memory area to be used by the SD-Card controller as transfer.
    122          *     This function delivers the physical address and the virtual address of the tranfer memory.
    123          *     The transfer area needs to be:
    124          *     - Word aligned
    125          *     - Uncached
    126          *     - Have identical virtual and physical addresses
    127          *     - The virtual address of the transfer area must be non-cacheable.
    128          *     Additional requirements are that the memory used is fast enough to not block DMA transfers for too long.
    129          *     In most systems, IRAM is used instead of external SDRAM, since the SDRAM can have relatively long latencies, primarily due to refresh cycles.
    130          *     The size of the memory are is also returned (via pointer). It needs to be at least 512 bytes. In general, bigger values allow higher
    131          *     performance since it allows transfer of multiple sectors without break.
    132          */

   \                                 In section .text, align 4, keep-with-next
    133          U32 BSP_SD_GetTransferMem(U32 * pPAddr, U32 * pVAddr) {
    134            //
    135            // We use the highest 4 KB of the IRAM as transfer address
    136            //
    137          
    138            *pPAddr = (U32) (TOP_OF_ISRAM - DMA_SIZE);    // Transfer address used by the DMA.
   \                     BSP_SD_GetTransferMem:
   \   00000000   C029A0E3           MOV      R2,#+3145728
   \   00000004   E02C82E3           ORR      R2,R2,#0xE000
   \   00000008   002080E5           STR      R2,[R0, #+0]
    139            *pVAddr = *pPAddr;  							  // Must be non-cachable
   \   0000000C   002081E5           STR      R2,[R1, #+0]
    140            return DMA_SIZE;
   \   00000010   800DA0E3           MOV      R0,#+8192
   \   00000014   1EFF2FE1           BX       LR               ;; return
    141          }
    142          
    143          
    144          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     BSP_SD_GetTransferMem      0


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     BSP_SD_GetTransferMem   24

 
 24 bytes in section .text
 
 24 bytes of CODE memory

Errors: none
Warnings: none
