###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__CompactPixelIndices.c          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__CompactPixelIndices.c -D       #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__CompactPixelIndices.lst                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __CompactPixelIndices.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__CompactPixelIndices.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__CompactPixelIndices.c
     19          Purpose     : ...
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI__CompactPixelIndices
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          void GUI__CompactPixelIndices(LCD_PIXELINDEX * pBuffer, int NumPixels, int BitsPerPixel) {
     36            int BytesPerPixel;
     37            if (BitsPerPixel <= 8) {
   \                     GUI__CompactPixelIndices:
   \   00000000   090052E3           CMP      R2,#+9
   \   00000004   0B0000AA           BGE      ??GUI__CompactPixelIndices_0
     38              BytesPerPixel = 1;
     39            } else if (BitsPerPixel <= 16) {
     40              BytesPerPixel = 2;
     41            } else {
     42              BytesPerPixel = 4;
     43            }
     44            if (BytesPerPixel < GUI_BYTESPERPIXEL) {
     45              #if   (GUI_BYTESPERPIXEL == 4)
     46                switch (BytesPerPixel) {
     47                case 2: { // Convert from U32 to U16
     48                    U16 * pDest;
     49                    pDest = (U16 *)pBuffer;
     50                    do {
     51                      *pDest++ = *pBuffer++;
     52                    } while (--NumPixels);
     53                  }
     54                  break;
     55                case 1: { // Convert from U32 to U8
     56                    U8 * pDest;
     57                    U8 Byte;
     58                    pDest = (U8 *)pBuffer;
   \   00000008   0030A0E1           MOV      R3,R0
     59                    switch (BitsPerPixel) {
   \   0000000C   012052E2           SUBS     R2,R2,#+1
   \   00000010   1000000A           BEQ      ??GUI__CompactPixelIndices_1
   \   00000014   012052E2           SUBS     R2,R2,#+1
   \   00000018   2900000A           BEQ      ??GUI__CompactPixelIndices_2
   \   0000001C   022052E2           SUBS     R2,R2,#+2
   \   00000020   3600000A           BEQ      ??GUI__CompactPixelIndices_3
     60                    case 1:
     61                      do {
     62                        Byte  = ((*pBuffer++) & 0x1) << 7;
     63                        Byte |= ((*pBuffer++) & 0x1) << 6;
     64                        Byte |= ((*pBuffer++) & 0x1) << 5;
     65                        Byte |= ((*pBuffer++) & 0x1) << 4;
     66                        Byte |= ((*pBuffer++) & 0x1) << 3;
     67                        Byte |= ((*pBuffer++) & 0x1) << 2;
     68                        Byte |= ((*pBuffer++) & 0x1) << 1;
     69                        Byte |= ((*pBuffer++) & 0x1);
     70                        *pDest++ = Byte;
     71                      } while (--NumPixels);
     72                    case 2:
     73                      do {
     74                        Byte  = ((*pBuffer++) & 0x3) << 6;
     75                        Byte |= ((*pBuffer++) & 0x3) << 4;
     76                        Byte |= ((*pBuffer++) & 0x3) << 2;
     77                        Byte |= ((*pBuffer++) & 0x3);
     78                        *pDest++ = Byte;
     79                      } while (--NumPixels);
     80                    case 4:
     81                      do {
     82                        Byte  = ((*pBuffer++) & 0xF) << 4;
     83                        Byte |= ((*pBuffer++) & 0xF);
     84                        *pDest++ = Byte;
     85                      } while (--NumPixels);
     86                      break;
     87                    default:
     88                      do {
     89                        *pDest++ = *pBuffer++;
   \                     ??GUI__CompactPixelIndices_4:
   \   00000024   042090E4           LDR      R2,[R0], #+4
     90                      } while (--NumPixels);
   \   00000028   011051E2           SUBS     R1,R1,#+1
   \   0000002C   0120C3E4           STRB     R2,[R3], #+1
   \   00000030   FBFFFF1A           BNE      ??GUI__CompactPixelIndices_4
     91                      break;
     92                    }
     93                  }
     94                  break;
     95                }
     96              #elif (GUI_BYTESPERPIXEL == 2)
     97                {
     98                  U8 * pDest;
     99                  pDest = (U8 *)pBuffer;
    100                  do {
    101                    *pDest++ = *pBuffer++;
    102                  } while (--NumPixels);
    103                }
    104              #endif
    105            }
    106          }
   \                     ??GUI__CompactPixelIndices_5:
   \   00000034   1EFF2FE1           BX       LR               ;; return
   \                     ??GUI__CompactPixelIndices_0:
   \   00000038   110052E3           CMP      R2,#+17
   \   0000003C   FCFFFFAA           BGE      ??GUI__CompactPixelIndices_5
   \   00000040   0020A0E1           MOV      R2,R0
   \                     ??GUI__CompactPixelIndices_6:
   \   00000044   043090E4           LDR      R3,[R0], #+4
   \   00000048   011051E2           SUBS     R1,R1,#+1
   \   0000004C   B230C2E0           STRH     R3,[R2], #+2
   \   00000050   FBFFFF1A           BNE      ??GUI__CompactPixelIndices_6
   \   00000054   1EFF2FE1           BX       LR
   \                     ??GUI__CompactPixelIndices_1:
   \   00000058   042090E4           LDR      R2,[R0], #+4
   \   0000005C   04C0D0E4           LDRB     R12,[R0], #+4
   \   00000060   822FA0E1           LSL      R2,R2,#+31
   \   00000064   222CA0E1           LSR      R2,R2,#+24
   \   00000068   01C00CE2           AND      R12,R12,#0x1
   \   0000006C   0C2382E1           ORR      R2,R2,R12, LSL #+6
   \   00000070   04C0D0E4           LDRB     R12,[R0], #+4
   \   00000074   011051E2           SUBS     R1,R1,#+1
   \   00000078   01C00CE2           AND      R12,R12,#0x1
   \   0000007C   8C2282E1           ORR      R2,R2,R12, LSL #+5
   \   00000080   04C0D0E4           LDRB     R12,[R0], #+4
   \   00000084   01C00CE2           AND      R12,R12,#0x1
   \   00000088   0C2282E1           ORR      R2,R2,R12, LSL #+4
   \   0000008C   04C0D0E4           LDRB     R12,[R0], #+4
   \   00000090   01C00CE2           AND      R12,R12,#0x1
   \   00000094   8C2182E1           ORR      R2,R2,R12, LSL #+3
   \   00000098   04C0D0E4           LDRB     R12,[R0], #+4
   \   0000009C   01C00CE2           AND      R12,R12,#0x1
   \   000000A0   0C2182E1           ORR      R2,R2,R12, LSL #+2
   \   000000A4   04C0D0E4           LDRB     R12,[R0], #+4
   \   000000A8   01C00CE2           AND      R12,R12,#0x1
   \   000000AC   8C2082E1           ORR      R2,R2,R12, LSL #+1
   \   000000B0   04C0D0E4           LDRB     R12,[R0], #+4
   \   000000B4   01C00CE2           AND      R12,R12,#0x1
   \   000000B8   02208CE1           ORR      R2,R12,R2
   \   000000BC   0120C3E4           STRB     R2,[R3], #+1
   \   000000C0   E4FFFF1A           BNE      ??GUI__CompactPixelIndices_1
   \                     ??GUI__CompactPixelIndices_2:
   \   000000C4   042090E4           LDR      R2,[R0], #+4
   \   000000C8   04C0D0E4           LDRB     R12,[R0], #+4
   \   000000CC   022FA0E1           LSL      R2,R2,#+30
   \   000000D0   222CA0E1           LSR      R2,R2,#+24
   \   000000D4   03C00CE2           AND      R12,R12,#0x3
   \   000000D8   0C2282E1           ORR      R2,R2,R12, LSL #+4
   \   000000DC   04C0D0E4           LDRB     R12,[R0], #+4
   \   000000E0   011051E2           SUBS     R1,R1,#+1
   \   000000E4   03C00CE2           AND      R12,R12,#0x3
   \   000000E8   0C2182E1           ORR      R2,R2,R12, LSL #+2
   \   000000EC   04C0D0E4           LDRB     R12,[R0], #+4
   \   000000F0   03C00CE2           AND      R12,R12,#0x3
   \   000000F4   02208CE1           ORR      R2,R12,R2
   \   000000F8   0120C3E4           STRB     R2,[R3], #+1
   \   000000FC   F0FFFF1A           BNE      ??GUI__CompactPixelIndices_2
   \                     ??GUI__CompactPixelIndices_3:
   \   00000100   042090E4           LDR      R2,[R0], #+4
   \   00000104   04C0D0E4           LDRB     R12,[R0], #+4
   \   00000108   022EA0E1           LSL      R2,R2,#+28
   \   0000010C   011051E2           SUBS     R1,R1,#+1
   \   00000110   0FC00CE2           AND      R12,R12,#0xF
   \   00000114   222C8CE1           ORR      R2,R12,R2, LSR #+24
   \   00000118   0120C3E4           STRB     R2,[R3], #+1
   \   0000011C   F7FFFF1A           BNE      ??GUI__CompactPixelIndices_3
   \   00000120   1EFF2FE1           BX       LR
    107          
    108          /*********************************************************************
    109          *
    110          *       GUI__CompactPixelIndicesEx
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          void GUI__CompactPixelIndicesEx(LCD_PIXELINDEX * pBuffer, int NumPixels, int BitsPerPixel, tLCDDEV_Color2Index * pfColor2Index) {
   \                     GUI__CompactPixelIndicesEx:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0360A0E1           MOV      R6,R3
    113            int BytesPerPixel;
    114            if (BitsPerPixel <= 8) {
   \   00000014   090052E3           CMP      R2,#+9
   \   00000018   080000BA           BLT      ??GUI__CompactPixelIndicesEx_0
    115              BytesPerPixel = 1;
    116            } else if (BitsPerPixel <= 16) {
   \   0000001C   110052E3           CMP      R2,#+17
   \   00000020   0C0000AA           BGE      ??GUI__CompactPixelIndicesEx_1
    117              BytesPerPixel = 2;
    118            } else {
    119              BytesPerPixel = 4;
    120            }
    121            if (BytesPerPixel < GUI_BYTESPERPIXEL) {
    122              #if   (GUI_BYTESPERPIXEL == 4)
    123                switch (BytesPerPixel) {
    124                case 2: { // Convert from U32 to U16
    125                    U16 * pDest;
    126                    pDest = (U16 *)pBuffer;
   \   00000024   0470A0E1           MOV      R7,R4
    127                    do {
    128                      *pDest++ = pfColor2Index(*pBuffer++);
   \                     ??GUI__CompactPixelIndicesEx_2:
   \   00000028   040094E4           LDR      R0,[R4], #+4
   \   0000002C   36FF2FE1           BLX      R6
   \   00000030   B200C7E0           STRH     R0,[R7], #+2
    129                    } while (--NumPixels);
   \   00000034   015055E2           SUBS     R5,R5,#+1
   \   00000038   FAFFFF1A           BNE      ??GUI__CompactPixelIndicesEx_2
   \   0000003C   050000EA           B        ??GUI__CompactPixelIndicesEx_1
    130                  }
    131                  break;
    132                case 1: { // Convert from U32 to U8
    133                    U8 * pDest;
    134                    pDest = (U8 *)pBuffer;
   \                     ??GUI__CompactPixelIndicesEx_0:
   \   00000040   0470A0E1           MOV      R7,R4
    135                    do {
    136                      *pDest++ = pfColor2Index(*pBuffer++);
   \                     ??GUI__CompactPixelIndicesEx_3:
   \   00000044   040094E4           LDR      R0,[R4], #+4
   \   00000048   36FF2FE1           BLX      R6
   \   0000004C   0100C7E4           STRB     R0,[R7], #+1
    137                    } while (--NumPixels);
   \   00000050   015055E2           SUBS     R5,R5,#+1
   \   00000054   FAFFFF1A           BNE      ??GUI__CompactPixelIndicesEx_3
    138                  }
    139                  break;
    140                }
    141              #elif (GUI_BYTESPERPIXEL == 2)
    142                {
    143                  U8 * pDest;
    144                  pDest = (U8 *)pBuffer;
    145                  do {
    146                    *pDest++ = pfColor2Index(*pBuffer++);
    147                  } while (--NumPixels);
    148                }
    149              #endif
    150            }
    151          }
   \                     ??GUI__CompactPixelIndicesEx_1:
   \   00000058   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000005C   F080BDE8           POP      {R4-R7,PC}       ;; return
    152          
    153          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     GUI__CompactPixelIndices        0
     GUI__CompactPixelIndicesEx     24


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     GUI__CompactPixelIndices    292
     GUI__CompactPixelIndicesEx   96

 
 388 bytes in section .text
 
 388 bytes of CODE memory

Errors: none
Warnings: none
