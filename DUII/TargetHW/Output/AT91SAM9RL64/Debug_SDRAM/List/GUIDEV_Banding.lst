###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:20 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_Banding.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_Banding.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_Banding.lst                                         #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_Banding.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_Banding.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_Banding.c
     19          Purpose     : Implementation of banding memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /* Memory device capabilities are compiled only if support for them is enabled. */
     28          
     29          #if GUI_SUPPORT_MEMDEV
     30          
     31          /*********************************************************************
     32          *
     33          *       static code
     34          *
     35          **********************************************************************
     36          */
     37          /*********************************************************************
     38          *
     39          *       _Min
     40          */
     41          static int _Min(int v0, int v1) {
     42            if (v0 <= v1) {
     43              return v0;
     44            }
     45            return v1;
     46          }
     47          
     48          /*********************************************************************
     49          *
     50          *       Public code
     51          *
     52          **********************************************************************
     53          */
     54          /*********************************************************************
     55          *
     56          *       GUI_MEMDEV_Draw
     57          *
     58          *  This routine uses a banding memory device to draw the
     59          *  given area flicker free. It not only draws, but also
     60          *  automatically calculates the size of, creates, moves
     61          *  and then destroys the memory device.
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          int GUI_MEMDEV_Draw(GUI_RECT * pRect, GUI_CALLBACK_VOID_P * pfDraw, void * pData, int NumLines, int Flags) {
   \                     GUI_MEMDEV_Draw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   30809DE5           LDR      R8,[SP, #+48]
     64            int x0, y0, x1, y1, xsize, ysize, i, xOrg, yOrg;
     65            GUI_MEMDEV_Handle hMD;
     66          
     67            if (pRect) {
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   2000000A           BEQ      ??GUI_MEMDEV_Draw_0
     68              GUI_GetOrg(&xOrg, &yOrg);
   \   00000024   04108DE2           ADD      R1,SP,#+4
   \   00000028   08008DE2           ADD      R0,SP,#+8
   \   0000002C   ........           BL       GUI_GetOrg
     69              x0 = (pRect->x0 < 0) ? 0 : pRect->x0;
   \   00000030   F090D4E1           LDRSH    R9,[R4, #+0]
     70              y0 = (pRect->y0 < 0) ? 0 : pRect->y0;
   \   00000034   F2A0D4E1           LDRSH    R10,[R4, #+2]
     71              x1 = _Min(pRect->x1, xOrg + LCD_GetVXSizeEx(GUI_Context.SelLayer) - 1);
   \   00000038   50B19FE5           LDR      R11,??GUI_MEMDEV_Draw_1
   \   0000003C   000059E3           CMP      R9,#+0
   \   00000040   0090A043           MOVMI    R9,#+0
   \   00000044   00005AE3           CMP      R10,#+0
   \   00000048   00A0A043           MOVMI    R10,#+0
   \   0000004C   1100DBE5           LDRB     R0,[R11, #+17]
   \   00000050   ........           BL       LCD_GetVXSizeEx
   \   00000054   08109DE5           LDR      R1,[SP, #+8]
   \   00000058   010080E0           ADD      R0,R0,R1
   \   0000005C   F410D4E1           LDRSH    R1,[R4, #+4]
   \   00000060   010040E2           SUB      R0,R0,#+1
   \   00000064   010050E1           CMP      R0,R1
   \   00000068   0100A0C1           MOVGT    R0,R1
   \   0000006C   00008DE5           STR      R0,[SP, #+0]
     72              y1 = _Min(pRect->y1, yOrg + LCD_GetVYSizeEx(GUI_Context.SelLayer) - 1);
   \   00000070   1100DBE5           LDRB     R0,[R11, #+17]
   \   00000074   ........           BL       LCD_GetVYSizeEx
   \   00000078   04109DE5           LDR      R1,[SP, #+4]
   \   0000007C   010080E0           ADD      R0,R0,R1
   \   00000080   F610D4E1           LDRSH    R1,[R4, #+6]
   \   00000084   010040E2           SUB      R0,R0,#+1
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0100A0C1           MOVGT    R0,R1
     73              xsize = x1 - x0 + 1;
   \   00000090   00109DE5           LDR      R1,[SP, #+0]
     74              ysize = y1 - y0 + 1;
   \   00000094   0A0040E0           SUB      R0,R0,R10
   \   00000098   091041E0           SUB      R1,R1,R9
   \   0000009C   014081E2           ADD      R4,R1,#+1
   \   000000A0   01B080E2           ADD      R11,R0,#+1
   \   000000A4   080000EA           B        ??GUI_MEMDEV_Draw_2
     75            } else {
     76              x0 = 0;
     77              y0 = 0;
     78              xsize = LCD_GetVXSizeEx(GUI_Context.SelLayer);
   \                     ??GUI_MEMDEV_Draw_0:
   \   000000A8   E0B09FE5           LDR      R11,??GUI_MEMDEV_Draw_1
   \   000000AC   0090A0E3           MOV      R9,#+0
   \   000000B0   00A0A0E3           MOV      R10,#+0
   \   000000B4   1100DBE5           LDRB     R0,[R11, #+17]
   \   000000B8   ........           BL       LCD_GetVXSizeEx
   \   000000BC   0040A0E1           MOV      R4,R0
     79              ysize = LCD_GetVYSizeEx(GUI_Context.SelLayer);
   \   000000C0   1100DBE5           LDRB     R0,[R11, #+17]
   \   000000C4   ........           BL       LCD_GetVYSizeEx
   \   000000C8   00B0A0E1           MOV      R11,R0
     80            }
     81            if (NumLines == 0) {
   \                     ??GUI_MEMDEV_Draw_2:
   \   000000CC   000057E3           CMP      R7,#+0
     82              NumLines = -ysize;   /* Request <ysize> lines ... Less is o.k. */
   \   000000D0   00706B02           RSBEQ    R7,R11,#+0
     83            }
     84            if ((xsize <= 0) || (ysize <= 0)) {
   \   000000D4   010054E3           CMP      R4,#+1
   \   000000D8   01005BA3           CMPGE    R11,#+1
   \   000000DC   280000BA           BLT      ??GUI_MEMDEV_Draw_3
     85              return 0;           /* Nothing to do ... */
     86            }
     87            //
     88            // Create memory device
     89            //
     90            hMD = GUI_MEMDEV_CreateEx(x0, y0, xsize, NumLines, Flags);
   \   000000E0   00808DE5           STR      R8,[SP, #+0]
   \   000000E4   0730A0E1           MOV      R3,R7
   \   000000E8   0420A0E1           MOV      R2,R4
   \   000000EC   0A10A0E1           MOV      R1,R10
   \   000000F0   0900A0E1           MOV      R0,R9
   \   000000F4   ........           BL       GUI_MEMDEV_CreateEx
   \   000000F8   0040B0E1           MOVS     R4,R0
     91            if (!hMD) {
   \   000000FC   0300001A           BNE      ??GUI_MEMDEV_Draw_4
     92              GUI_DEBUG_ERROROUT("GUI_MEMDEV_Draw() Not enough memory ...");
     93              pfDraw(pData);
   \   00000100   0600A0E1           MOV      R0,R6
   \   00000104   35FF2FE1           BLX      R5
     94              return 1;
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   1D0000EA           B        ??GUI_MEMDEV_Draw_5
     95            }
     96            NumLines = GUI_MEMDEV_GetYSize(hMD);
   \                     ??GUI_MEMDEV_Draw_4:
   \   00000110   ........           BL       GUI_MEMDEV_GetYSize
   \   00000114   0070A0E1           MOV      R7,R0
     97            GUI_MEMDEV_Select(hMD);
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       GUI_MEMDEV_Select
     98            //
     99            // Start drawing
    100            //
    101            for (i = 0; i < ysize; i += NumLines) {
   \   00000120   0080A0E3           MOV      R8,#+0
    102              int RemLines = ysize - i;
   \                     ??GUI_MEMDEV_Draw_6:
   \   00000124   08104BE0           SUB      R1,R11,R8
    103              if (RemLines < NumLines) {
   \   00000128   070051E1           CMP      R1,R7
   \   0000012C   010000AA           BGE      ??GUI_MEMDEV_Draw_7
    104                GUI_MEMDEV_ReduceYSize(hMD, RemLines);
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           BL       GUI_MEMDEV_ReduceYSize
    105              }
    106              if (i) {
   \                     ??GUI_MEMDEV_Draw_7:
   \   00000138   000058E3           CMP      R8,#+0
   \   0000013C   0500000A           BEQ      ??GUI_MEMDEV_Draw_8
    107                GUI_MEMDEV_SetOrg(hMD, x0, y0 + i);
   \   00000140   0A2088E0           ADD      R2,R8,R10
   \   00000144   0910A0E1           MOV      R1,R9
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           BL       GUI_MEMDEV_SetOrg
    108                GUI_MEMDEV_Clear(hMD);
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       GUI_MEMDEV_Clear
    109              }
    110              pfDraw(pData);
   \                     ??GUI_MEMDEV_Draw_8:
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   35FF2FE1           BLX      R5
    111              GUI_MEMDEV_CopyToLCD(hMD);
   \   00000160   0400A0E1           MOV      R0,R4
   \   00000164   ........           BL       GUI_MEMDEV_CopyToLCD
    112            }
   \   00000168   088087E0           ADD      R8,R7,R8
   \   0000016C   0B0058E1           CMP      R8,R11
   \   00000170   EBFFFFBA           BLT      ??GUI_MEMDEV_Draw_6
    113            GUI_MEMDEV_Delete(hMD);
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           BL       GUI_MEMDEV_Delete
    114            GUI_MEMDEV_Select(0);
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   ........           BL       GUI_MEMDEV_Select
    115            return 0;             /* Success ! */
   \                     ??GUI_MEMDEV_Draw_3:
   \   00000184   0000A0E3           MOV      R0,#+0
   \                     ??GUI_MEMDEV_Draw_5:
   \   00000188   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000018C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GUI_MEMDEV_Draw_1:
   \   00000190   ........           DC32     GUI_Context
    116          }
    117          
    118          #else
    119          
    120          void GUIDEV_Banding(void);
    121          void GUIDEV_Banding(void) {} /* avoid empty object files */
    122          
    123          #endif /* GUI_MEMDEV_SUPPORT */
    124          
    125          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     GUI_MEMDEV_Draw     48


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     GUI_MEMDEV_Draw  404

 
 404 bytes in section .text
 
 404 bytes of CODE memory

Errors: none
Warnings: none
