###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:10 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\keyboard.cpp                                #
#    Command line =  C:\DUII\DUII\keyboard.cpp -D DEBUG=1 -D SDRAM_TARGET=1   #
#                    -D USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D           #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --eec++                              #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\ke #
#                    yboard.lst                                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\key #
#                    board.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\keyboard.cpp
      1          /****************************************************************
      2          *							Track Systems						*
      3          -----------------------------------------------------------------
      4          File: keyboard.cpp
      5          Description: display a keyboard and a text box
      6          -----------------------------------------------------------------
      7          */
      8          #include "keyboard.hpp"
      9          #include "GeneralConfig.h"
     10          #include "GUI.h"
     11          #include "commondefs.h"
     12          #include "ConfigScreens.h"
     13          #include <string.h>
     14          #include <stdio.h>
     15          #include <ctype.h>
     16          #include <stdlib.h>
     17          
     18          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmKeyboardBlank;
     19          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmNumPadBlank;
     20          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmCapital;
     21          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmNotCapital;
     22          //extern "C" GUI_CONST_STORAGE GUI_BITMAP bmSave;
     23          //extern "C" GUI_CONST_STORAGE GUI_BITMAP bmCancel;
     24          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmDeleteKey;
     25          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmthreewayarrow;
     26          extern "C" GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     27          

   \                                 In section .data, align 4
     28          char * TopKeysChar [] = { "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P" };
   \                     TopKeysChar:
   \   00000000   ............       DC32 `?<Constant "Q">`, `?<Constant "W">`, `?<Constant "E">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "R">`, `?<Constant "T">`, `?<Constant "Y">`
   \              ............
   \   00000018   ............       DC32 `?<Constant "U">`, `?<Constant "I">`, `?<Constant "O">`
   \              ............
   \   00000024   ........           DC32 `?<Constant "P">`
     29          char * MidKeysChar[] = { "A", "S", "D", "F", "G", "H", "J", "K", "L" };
   \                     MidKeysChar:
   \   00000028   ............       DC32 `?<Constant "A">`, `?<Constant "S">`, `?<Constant "D">`
   \              ............
   \   00000034   ............       DC32 `?<Constant "F">`, `?<Constant "G">`, `?<Constant "H">`
   \              ............
   \   00000040   ............       DC32 `?<Constant "J">`, `?<Constant "K">`, `?<Constant "L">`
   \              ............
     30          char * LowKeysChar[] = { "Z", "X", "C", "V", "B", "N", "M" };
   \                     LowKeysChar:
   \   0000004C   ............       DC32 `?<Constant "Z">`, `?<Constant "X">`, `?<Constant "C">`
   \              ............
   \   00000058   ............       DC32 `?<Constant "V">`, `?<Constant "B">`, `?<Constant "N">`
   \              ............
   \   00000064   ........           DC32 `?<Constant "M">`
     31          char * BottomKeysChar[] = { "-", "Space", ".", "Bksp"};
     32          
     33          char * NumKeysChar[] = { "7", "8", "9", "4", "5", "6", "1", "2", "3" };
     34          char * NumOneKeys[] = { "7", "8", "9"};
   \                     NumOneKeys:
   \   00000068   ............       DC32 `?<Constant "7">`, `?<Constant "8">`, `?<Constant "9">`
   \              ............
     35          char * NumTwoKeys[] = { "4", "5", "6", "-"};
   \                     NumTwoKeys:
   \   00000074   ............       DC32 `?<Constant "4">`, `?<Constant "5">`, `?<Constant "6">`
   \              ............
   \   00000080   ........           DC32 `?<Constant "-">`
     36          char * NumThreeKeys[] = { "0", "1", "2", "3", "."};
   \                     NumThreeKeys:
   \   00000084   ............       DC32 `?<Constant "0">`, `?<Constant "1">`, `?<Constant "2">`
   \              ............
   \   00000090   ............       DC32 `?<Constant "3">`, `?<Constant ".">`
   \              ....        

   \                                 In section .data, align 4
   \                     BottomKeysChar:
   \   00000000   ............       DC32 `?<Constant "-">`, `?<Constant "Space">`, `?<Constant ".">`
   \              ............
   \   0000000C   ........           DC32 `?<Constant "Bksp">`

   \                                 In section .data, align 4
   \                     NumKeysChar:
   \   00000000   ............       DC32 `?<Constant "7">`, `?<Constant "8">`, `?<Constant "9">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "4">`, `?<Constant "5">`, `?<Constant "6">`
   \              ............
   \   00000018   ............       DC32 `?<Constant "1">`, `?<Constant "2">`, `?<Constant "3">`
   \              ............

   \                                 In section .data, align 4
     37          char * NumFourKeys[] = { "0", ".", "<-"};
   \                     NumFourKeys:
   \   00000000   ............       DC32 `?<Constant "0">`, `?<Constant ".">`, `?<Constant "<-">`
   \              ............

   \                                 In section .data, align 4
     38          char * NumKeys[] = {"7", "8", "9", "4", "5", "6", "1", "2", "3", "0", ".", "<-"};
   \                     NumKeys:
   \   00000000   ............       DC32 `?<Constant "7">`, `?<Constant "8">`, `?<Constant "9">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "4">`, `?<Constant "5">`, `?<Constant "6">`
   \              ............
   \   00000018   ............       DC32 `?<Constant "1">`, `?<Constant "2">`, `?<Constant "3">`
   \              ............
   \   00000024   ............       DC32 `?<Constant "0">`, `?<Constant ".">`, `?<Constant "<-">`
   \              ............
     39          void _cbKeyboardCallback(WM_MESSAGE * pMsg);
     40          void SaveData(int message, Keyboard *key);
     41          

   \                                 In section .bss, align 4
     42          static Keyboard *kb[MAX_KEYBOARDS];
   \                     kb:
   \   00000000                      DS8 40
   \   00000028                      DS8 40
     43          static WM_HWIN kbId[MAX_KEYBOARDS];
     44          
     45          #define	AUTO_REPEAT_TIME	350
     46          
     47          #define	MOVE_LIMIT	20
     48          

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp Keyboard::subobject Keyboard(int, int, int, int, Keyboard_Type, char *, char *, char, int, int, GUI_HWIN, char)
   \                     _ZN8KeyboardC2Eiiii13Keyboard_TypePcS1_ciilc:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   4CE0DDE5           LDRB     LR,[SP, #+76]
   \   0000000C   5860DDE5           LDRB     R6,[SP, #+88]
   \   00000010   68A0DDE5           LDRB     R10,[SP, #+104]
   \   00000014   48C09DE5           LDR      R12,[SP, #+72]
   \   00000018   50409DE5           LDR      R4,[SP, #+80]
   \   0000001C   54509DE5           LDR      R5,[SP, #+84]
   \   00000020   5C709DE5           LDR      R7,[SP, #+92]
   \   00000024   60809DE5           LDR      R8,[SP, #+96]
   \   00000028   64909DE5           LDR      R9,[SP, #+100]
   \   0000002C   20A08DE5           STR      R10,[SP, #+32]
   \   00000030   1C908DE5           STR      R9,[SP, #+28]
   \   00000034   18808DE5           STR      R8,[SP, #+24]
   \   00000038   14708DE5           STR      R7,[SP, #+20]
   \   0000003C   10608DE5           STR      R6,[SP, #+16]
   \   00000040   0C508DE5           STR      R5,[SP, #+12]
   \   00000044   08408DE5           STR      R4,[SP, #+8]
   \   00000048   04E08DE5           STR      LR,[SP, #+4]
   \   0000004C   00C08DE5           STR      R12,[SP, #+0]
   \   00000050   ........           BL       _ZN8KeyboardC1Eiiii13Keyboard_TypePcS1_ciilc
   \   00000054   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   00000058   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
     49          Keyboard::Keyboard(int x, int y, int iWidth, int iHeight, Keyboard_Type Option, char *DispText,
     50          				   char *cTitle, char bLockMode, int iMaxTextLength, int iSource, WM_HWIN _hParent, char canScroll)
     51          {
   \                     _ZN8KeyboardC1Eiiii13Keyboard_TypePcS1_ciilc:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   4470DDE5           LDRB     R7,[SP, #+68]
   \   00000018   48809DE5           LDR      R8,[SP, #+72]
   \   0000001C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000020   54909DE5           LDR      R9,[SP, #+84]
   \   00000024   5CB09DE5           LDR      R11,[SP, #+92]
     52          	int i;
     53          
     54          // KMC FIX FOR PAINTING BUTTON TEXT
     55          //	bInitializeClass = true;
     56          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000028   0200A0E3           MOV      R0,#+2
   \   0000002C   ........           BL       GUI_SetTextMode
     57          	xLoc = x;
   \   00000030   C05084E5           STR      R5,[R4, #+192]
     58          	yLoc = y;
   \   00000034   C46084E5           STR      R6,[R4, #+196]
     59          	hParent = _hParent;
   \   00000038   04B084E5           STR      R11,[R4, #+4]
     60          	Width = iWidth;
   \   0000003C   18009DE5           LDR      R0,[SP, #+24]
     61          	Height = iHeight;
     62          	LockMode = bLockMode;
     63          	strcpy(Title, cTitle);
   \   00000040   0A10A0E1           MOV      R1,R10
   \   00000044   C80084E5           STR      R0,[R4, #+200]
   \   00000048   40009DE5           LDR      R0,[SP, #+64]
   \   0000004C   CC0084E5           STR      R0,[R4, #+204]
   \   00000050   5000DDE5           LDRB     R0,[SP, #+80]
   \   00000054   0201C4E5           STRB     R0,[R4, #+258]
   \   00000058   D00084E2           ADD      R0,R4,#+208
   \   0000005C   ........           BL       strcpy
     64          	Source = iSource;
   \   00000060   58009DE5           LDR      R0,[SP, #+88]
     65          	scrollable = canScroll;
     66          	touchDetected = false;
   \   00000064   00A0A0E3           MOV      R10,#+0
   \   00000068   0C0084E5           STR      R0,[R4, #+12]
   \   0000006C   6000DDE5           LDRB     R0,[SP, #+96]
     67          	hAutoRepeatTimer = 0;
     68          
     69          	if ((_hDlg = WM_CreateWindowAsChild(x, y, Width, Height, _hParent, WM_CF_SHOW, _cbKeyboardCallback, 0)) <= 0)
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   0301C4E5           STRB     R0,[R4, #+259]
   \   00000078   B8A0C4E5           STRB     R10,[R4, #+184]
   \   0000007C   ........           LDR      R0,??DataTable51_1
   \   00000080   BCA084E5           STR      R10,[R4, #+188]
   \   00000084   08008DE5           STR      R0,[SP, #+8]
   \   00000088   0200A0E3           MOV      R0,#+2
   \   0000008C   0CA08DE5           STR      R10,[SP, #+12]
   \   00000090   04008DE5           STR      R0,[SP, #+4]
   \   00000094   00B08DE5           STR      R11,[SP, #+0]
   \   00000098   CC3094E5           LDR      R3,[R4, #+204]
   \   0000009C   C82094E5           LDR      R2,[R4, #+200]
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       WM_CreateWindowAsChild
   \   000000A8   080084E5           STR      R0,[R4, #+8]
   \   000000AC   010050E3           CMP      R0,#+1
   \   000000B0   010000AA           BGE      ??Keyboard_0
     70          	{
     71          		SystemError();
   \   000000B4   ........           BL       SystemError
     72          		return;
   \   000000B8   420000EA           B        ??Keyboard_1
     73          	}
     74          	// Find next free slot
     75          	for (i = 0; i < MAX_KEYBOARDS; i++)
   \                     ??Keyboard_0:
   \   000000BC   ........           LDR      R1,??DataTable51
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   00E091E5           LDR      LR,[R1, #+0]
   \   000000C8   043081E2           ADD      R3,R1,#+4
     76          	{
     77          		if (kb[i] == 0)
   \   000000CC   00005EE3           CMP      LR,#+0
   \   000000D0   0800000A           BEQ      ??Keyboard_2
   \   000000D4   00E093E5           LDR      LR,[R3, #+0]
   \   000000D8   0120A0E3           MOV      R2,#+1
   \   000000DC   083081E2           ADD      R3,R1,#+8
   \   000000E0   04C0A0E3           MOV      R12,#+4
   \                     ??Keyboard_3:
   \   000000E4   00005EE3           CMP      LR,#+0
   \   000000E8   04B09314           LDRNE    R11,[R3], #+4
   \   000000EC   01208212           ADDNE    R2,R2,#+1
   \   000000F0   00005B13           CMPNE    R11,#+0
   \   000000F4   0300001A           BNE      ??Keyboard_4
     78          		{
     79          			kb[i] = this;
   \                     ??Keyboard_2:
   \   000000F8   024181E7           STR      R4,[R1, +R2, LSL #+2]
     80          			kbId[i] = _hDlg;
   \   000000FC   021181E0           ADD      R1,R1,R2, LSL #+2
   \   00000100   280081E5           STR      R0,[R1, #+40]
     81          			break;
   \   00000104   050000EA           B        ??Keyboard_5
     82          		}
   \                     ??Keyboard_4:
   \   00000108   012082E2           ADD      R2,R2,#+1
   \   0000010C   04E093E4           LDR      LR,[R3], #+4
   \   00000110   01C05CE2           SUBS     R12,R12,#+1
   \   00000114   F2FFFF1A           BNE      ??Keyboard_3
   \   00000118   00005EE3           CMP      LR,#+0
   \   0000011C   F5FFFF0A           BEQ      ??Keyboard_2
     83          	}
     84          
     85          	WM_ShowWindow(_hDlg);
   \                     ??Keyboard_5:
   \   00000120   080094E5           LDR      R0,[R4, #+8]
   \   00000124   ........           BL       WM_ShowWindow
     86          
     87          	xLoc = x;
   \   00000128   C05084E5           STR      R5,[R4, #+192]
     88          	yLoc = y;
   \   0000012C   C46084E5           STR      R6,[R4, #+196]
     89          
     90          	Text = EDIT_CreateEx(22, 43, 353, 38, _hDlg, WM_CF_SHOW, 0, GUI_ID_TEXT0, iMaxTextLength);
   \   00000130   580FA0E3           MOV      R0,#+352
   \   00000134   0C008DE5           STR      R0,[SP, #+12]
   \   00000138   0200A0E3           MOV      R0,#+2
   \   0000013C   10908DE5           STR      R9,[SP, #+16]
   \   00000140   08A08DE5           STR      R10,[SP, #+8]
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   080094E5           LDR      R0,[R4, #+8]
   \   0000014C   6120A0E3           MOV      R2,#+97
   \   00000150   00008DE5           STR      R0,[SP, #+0]
   \   00000154   2630A0E3           MOV      R3,#+38
   \   00000158   402F82E3           ORR      R2,R2,#0x100
   \   0000015C   2B10A0E3           MOV      R1,#+43
   \   00000160   1600A0E3           MOV      R0,#+22
   \   00000164   ........           BL       EDIT_CreateEx
   \   00000168   A80084E5           STR      R0,[R4, #+168]
     91          	EDIT_SetFont(Text, &GUI_Font24B_ASCII);
   \   0000016C   ........           LDR      R1,??DataTable51_2
   \   00000170   ........           BL       EDIT_SetFont
     92          
     93          	// Save pointer to and display original text
     94          	if (strcmp(DispText, "0") == 0)		// If input string is "0"
   \   00000174   ........           ADR      R1,??DataTable47  ;; "0"
   \   00000178   0800A0E1           MOV      R0,R8
   \   0000017C   ........           BL       strcmp
   \   00000180   000050E3           CMP      R0,#+0
     95          		DispText[0] = 0;				// then display nothing at all
   \   00000184   00A0C805           STRBEQ   R10,[R8, #+0]
     96          	EDIT_SetText(Text, DispText);
   \   00000188   0810A0E1           MOV      R1,R8
   \   0000018C   A80094E5           LDR      R0,[R4, #+168]
   \   00000190   ........           BL       EDIT_SetText
     97          	maxTextLen = iMaxTextLength;
   \   00000194   149084E5           STR      R9,[R4, #+20]
     98          	OrgText = DispText;
   \   00000198   108084E5           STR      R8,[R4, #+16]
     99          
    100          	for(i = 0; i < NUM_ALPHA_BTNS; i++)
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   2310A0E3           MOV      R1,#+35
    101          	{
    102          		AlphaBtns[i] = NULL;
   \                     ??Keyboard_6:
   \   000001A4   18A080E5           STR      R10,[R0, #+24]
    103          	}
   \   000001A8   040080E2           ADD      R0,R0,#+4
   \   000001AC   011051E2           SUBS     R1,R1,#+1
   \   000001B0   FBFFFF1A           BNE      ??Keyboard_6
    104          	Caps = true;
   \   000001B4   0100A0E3           MOV      R0,#+1
   \   000001B8   0200C4E5           STRB     R0,[R4, #+2]
    105          
    106          	SetupKeyboard(Option);
   \   000001BC   0710A0E1           MOV      R1,R7
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   ........           BL       _ZN8Keyboard13SetupKeyboardE13Keyboard_Type
    107          
    108          	// KMC - do not allow use of the back key on ANY keyboard as it is too close to the CANCEL key and the keyboards already SAVE/CANCEL keys
    109          	//GUI_DrawBitmap(&bmleftarrow, 0, 229);
    110          
    111          // KMC FIX FOR PAINTING BUTTON TEXT
    112          //	bInitializeClass = false;
    113          }
   \                     ??Keyboard_1:
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   1CD08DE2           ADD      SP,SP,#+28
   \   000001D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    114          

   \                                 In section .text, align 4, keep-with-next
    115          void Keyboard::SetupKeyboard(Keyboard_Type Option)
    116          {
   \                     _ZN8Keyboard13SetupKeyboardE13Keyboard_Type:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    117          	int i, x, y, index, Id;
    118          	BUTTON_Handle btn;
    119          	char c[2];
    120          
    121          	// if we have existing buttons then we need to remove them
    122          	if(AlphaBtns[0] != NULL)
   \   00000008   180094E5           LDR      R0,[R4, #+24]
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0A00000A           BEQ      ??SetupKeyboard_0
    123          	{
    124          		for(i = 0; i < NUM_ALPHA_BTNS; i++)
   \   00000018   0450A0E1           MOV      R5,R4
   \   0000001C   2360A0E3           MOV      R6,#+35
    125          		{
    126          			if(AlphaBtns[i] != NULL)
   \                     ??SetupKeyboard_1:
   \   00000020   180095E5           LDR      R0,[R5, #+24]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??SetupKeyboard_2
    127          			{
    128          				WM_DeleteWindow(AlphaBtns[i]);
   \   0000002C   ........           BL       WM_DeleteWindow
    129          				AlphaBtns[i] = NULL;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   180085E5           STR      R0,[R5, #+24]
    130          			}
    131          		}
   \                     ??SetupKeyboard_2:
   \   00000038   045085E2           ADD      R5,R5,#+4
   \   0000003C   016056E2           SUBS     R6,R6,#+1
   \   00000040   F6FFFF1A           BNE      ??SetupKeyboard_1
    132          	}
    133          
    134          	WM_SelectWindow(_hDlg);
   \                     ??SetupKeyboard_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   ........           BL       WM_SelectWindow
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   FF04E0E3           MVN      R0,#-16777216
    135          
    136          	BUTTON_SetDefaultBkColor(GUI_WHITE, BUTTON_CI_UNPRESSED);
   \   00000054   ........           BL       BUTTON_SetDefaultBkColor
    137          	BUTTON_SetDefaultTextColor(GUI_BLACK, BUTTON_CI_UNPRESSED);
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   ........           BL       BUTTON_SetDefaultTextColor
   \   00000064   ........           LDR      R0,??DataTable51_2
    138          	BUTTON_SetDefaultFont(&GUI_Font24B_ASCII);
   \   00000068   ........           BL       BUTTON_SetDefaultFont
    139          
    140          	switch(Option)
   \   0000006C   1800DDE5           LDRB     R0,[SP, #+24]
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   0300000A           BEQ      ??SetupKeyboard_3
   \   00000078   EF00003A           BCC      ??SetupKeyboard_4
   \   0000007C   020050E3           CMP      R0,#+2
   \   00000080   9700000A           BEQ      ??SetupKeyboard_5
   \   00000084   EC0000EA           B        ??SetupKeyboard_4
    141          	{
    142          	case ALPHA:
    143          		
    144          		GUI_DrawBitmap(&bmKeyboardBlank, 0, 0);
   \                     ??SetupKeyboard_3:
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   ........           LDR      R0,??DataTable51_3
   \   00000094   ........           BL       GUI_DrawBitmap
    145          		y = BUTTON_ROW_ONE_Y;
    146          		for(i = 0; i < 10; i++)
   \   00000098   0050A0E3           MOV      R5,#+0
   \   0000009C   0070A0E3           MOV      R7,#+0
   \   000000A0   ........           LDR      R8,??DataTable51_4
   \   000000A4   0490A0E1           MOV      R9,R4
   \   000000A8   2D60A0E3           MOV      R6,#+45
   \   000000AC   10A08DE2           ADD      R10,SP,#+16
    147          		{
    148          			x = BUTTON_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING);
    149          			Id = GUI_ID_USER + (int)*TopKeysChar[i];
    150          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \                     ??SetupKeyboard_6:
   \   000000B0   000098E5           LDR      R0,[R8, #+0]
   \   000000B4   2330A0E3           MOV      R3,#+35
   \   000000B8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000BC   08508DE5           STR      R5,[SP, #+8]
   \   000000C0   2320A0E3           MOV      R2,#+35
   \   000000C4   800E80E2           ADD      R0,R0,#+2048
   \   000000C8   0C008DE5           STR      R0,[SP, #+12]
   \   000000CC   0200A0E3           MOV      R0,#+2
   \   000000D0   04008DE5           STR      R0,[SP, #+4]
   \   000000D4   080094E5           LDR      R0,[R4, #+8]
   \   000000D8   5E10A0E3           MOV      R1,#+94
   \   000000DC   00008DE5           STR      R0,[SP, #+0]
   \   000000E0   960700E0           MUL      R0,R6,R7
   \   000000E4   160080E2           ADD      R0,R0,#+22
   \   000000E8   ........           BL       BUTTON_CreateEx
   \   000000EC   00B0A0E1           MOV      R11,R0
    151          
    152          			if(Caps == false)
   \   000000F0   0200D4E5           LDRB     R0,[R4, #+2]
   \   000000F4   001098E5           LDR      R1,[R8, #+0]
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0700001A           BNE      ??SetupKeyboard_7
    153          			{
    154          				c[0] = tolower((int)*TopKeysChar[i]);
   \   00000100   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000104   ........           BL       tolower
   \   00000108   1000CDE5           STRB     R0,[SP, #+16]
    155          				c[1] = '\0';
   \   0000010C   0150CAE5           STRB     R5,[R10, #+1]
    156          				BUTTON_SetText(btn, c);
   \   00000110   10108DE2           ADD      R1,SP,#+16
   \   00000114   0B00A0E1           MOV      R0,R11
   \   00000118   ........           BL       BUTTON_SetText
   \   0000011C   010000EA           B        ??SetupKeyboard_8
    157          			}
    158          			else
    159          				BUTTON_SetText(btn, TopKeysChar[i]);
   \                     ??SetupKeyboard_7:
   \   00000120   0B00A0E1           MOV      R0,R11
   \   00000124   ........           BL       BUTTON_SetText
    160          
    161          			AlphaBtns[i] = btn;
   \                     ??SetupKeyboard_8:
   \   00000128   18B089E5           STR      R11,[R9, #+24]
    162          		}
   \   0000012C   017087E2           ADD      R7,R7,#+1
   \   00000130   049089E2           ADD      R9,R9,#+4
   \   00000134   048088E2           ADD      R8,R8,#+4
   \   00000138   0A0057E3           CMP      R7,#+10
   \   0000013C   DBFFFFBA           BLT      ??SetupKeyboard_6
    163          		
    164          		y = BUTTON_ROW_TWO_Y;
    165          		for(i = 0; i < 9; i++)
   \   00000140   0070A0E3           MOV      R7,#+0
   \   00000144   ........           LDR      R8,??DataTable51_5
   \   00000148   289084E2           ADD      R9,R4,#+40
    166          		{
    167          			index = i + 10;
    168          			x = BUTTON_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING) + (BUTTON_WIDTH / 2) + 3;
    169          			Id = GUI_ID_USER + (int)*MidKeysChar[i];
    170          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \                     ??SetupKeyboard_9:
   \   0000014C   000098E5           LDR      R0,[R8, #+0]
   \   00000150   2330A0E3           MOV      R3,#+35
   \   00000154   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000158   08508DE5           STR      R5,[SP, #+8]
   \   0000015C   2320A0E3           MOV      R2,#+35
   \   00000160   800E80E2           ADD      R0,R0,#+2048
   \   00000164   0C008DE5           STR      R0,[SP, #+12]
   \   00000168   0200A0E3           MOV      R0,#+2
   \   0000016C   04008DE5           STR      R0,[SP, #+4]
   \   00000170   080094E5           LDR      R0,[R4, #+8]
   \   00000174   8B10A0E3           MOV      R1,#+139
   \   00000178   00008DE5           STR      R0,[SP, #+0]
   \   0000017C   960700E0           MUL      R0,R6,R7
   \   00000180   2A0080E2           ADD      R0,R0,#+42
   \   00000184   ........           BL       BUTTON_CreateEx
   \   00000188   00B0A0E1           MOV      R11,R0
    171          			//BUTTON_SetText(btn, MidKeysChar[i]);
    172          			if(Caps == false)
   \   0000018C   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000190   001098E5           LDR      R1,[R8, #+0]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   0700001A           BNE      ??SetupKeyboard_10
    173          			{
    174          				c[0] = tolower((int)*MidKeysChar[i]);
   \   0000019C   0000D1E5           LDRB     R0,[R1, #+0]
   \   000001A0   ........           BL       tolower
   \   000001A4   1000CDE5           STRB     R0,[SP, #+16]
    175          				c[1] = '\0';
   \   000001A8   0150CAE5           STRB     R5,[R10, #+1]
    176          				BUTTON_SetText(btn, c);
   \   000001AC   10108DE2           ADD      R1,SP,#+16
   \   000001B0   0B00A0E1           MOV      R0,R11
   \   000001B4   ........           BL       BUTTON_SetText
   \   000001B8   010000EA           B        ??SetupKeyboard_11
    177          			}
    178          			else
    179          				BUTTON_SetText(btn, MidKeysChar[i]);
   \                     ??SetupKeyboard_10:
   \   000001BC   0B00A0E1           MOV      R0,R11
   \   000001C0   ........           BL       BUTTON_SetText
    180          			//BUTTON_SetBkColor(btn, BUTTON_CI_UNPRESSED, GUI_WHITE);
    181          			//BUTTON_SetTextColor(btn, BUTTON_CI_UNPRESSED, GUI_BLACK);
    182          			AlphaBtns[index] = btn;
   \                     ??SetupKeyboard_11:
   \   000001C4   18B089E5           STR      R11,[R9, #+24]
    183          		}
   \   000001C8   017087E2           ADD      R7,R7,#+1
   \   000001CC   049089E2           ADD      R9,R9,#+4
   \   000001D0   048088E2           ADD      R8,R8,#+4
   \   000001D4   090057E3           CMP      R7,#+9
   \   000001D8   DBFFFFBA           BLT      ??SetupKeyboard_9
    184          		
    185          		y = BUTTON_ROW_THREE_Y;
    186          		for(i = 0; i < 7; i++)
   \   000001DC   0070A0E3           MOV      R7,#+0
   \   000001E0   ........           LDR      R8,??DataTable51_6
   \   000001E4   4C9084E2           ADD      R9,R4,#+76
    187          		{
    188          			index = i + 19;
   \                     ??SetupKeyboard_12:
   \   000001E8   130087E2           ADD      R0,R7,#+19
   \   000001EC   14008DE5           STR      R0,[SP, #+20]
    189          			x = BUTTON_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING) + BUTTON_WIDTH + BUTTON_WIDTH / 4 - 1;
    190          			Id = GUI_ID_USER + (int)*LowKeysChar[i];
    191          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \   000001F0   000098E5           LDR      R0,[R8, #+0]
   \   000001F4   2330A0E3           MOV      R3,#+35
   \   000001F8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001FC   08508DE5           STR      R5,[SP, #+8]
   \   00000200   2320A0E3           MOV      R2,#+35
   \   00000204   800E80E2           ADD      R0,R0,#+2048
   \   00000208   0C008DE5           STR      R0,[SP, #+12]
   \   0000020C   0200A0E3           MOV      R0,#+2
   \   00000210   04008DE5           STR      R0,[SP, #+4]
   \   00000214   080094E5           LDR      R0,[R4, #+8]
   \   00000218   B910A0E3           MOV      R1,#+185
   \   0000021C   00008DE5           STR      R0,[SP, #+0]
   \   00000220   960700E0           MUL      R0,R6,R7
   \   00000224   400080E2           ADD      R0,R0,#+64
   \   00000228   ........           BL       BUTTON_CreateEx
   \   0000022C   00B0A0E1           MOV      R11,R0
    192          			//BUTTON_SetText(btn, LowKeysChar[i]);
    193          			if(Caps == false)
   \   00000230   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000234   001098E5           LDR      R1,[R8, #+0]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   0700001A           BNE      ??SetupKeyboard_13
    194          			{
    195          				c[0] = tolower((int)*LowKeysChar[i]);
   \   00000240   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000244   ........           BL       tolower
   \   00000248   1000CDE5           STRB     R0,[SP, #+16]
    196          				c[1] = '\0';
   \   0000024C   0150CAE5           STRB     R5,[R10, #+1]
    197          				BUTTON_SetText(btn, c);
   \   00000250   10108DE2           ADD      R1,SP,#+16
   \   00000254   0B00A0E1           MOV      R0,R11
   \   00000258   ........           BL       BUTTON_SetText
   \   0000025C   010000EA           B        ??SetupKeyboard_14
    198          			}
    199          			else
    200          				BUTTON_SetText(btn, LowKeysChar[i]);
   \                     ??SetupKeyboard_13:
   \   00000260   0B00A0E1           MOV      R0,R11
   \   00000264   ........           BL       BUTTON_SetText
    201          			//BUTTON_SetBkColor(btn, BUTTON_CI_UNPRESSED, GUI_WHITE);
    202          			//BUTTON_SetTextColor(btn, BUTTON_CI_UNPRESSED, GUI_BLACK);
    203          			AlphaBtns[index] = btn;
   \                     ??SetupKeyboard_14:
   \   00000268   18B089E5           STR      R11,[R9, #+24]
    204          		}
   \   0000026C   017087E2           ADD      R7,R7,#+1
   \   00000270   049089E2           ADD      R9,R9,#+4
   \   00000274   048088E2           ADD      R8,R8,#+4
   \   00000278   070057E3           CMP      R7,#+7
   \   0000027C   D9FFFFBA           BLT      ??SetupKeyboard_12
    205          
    206          		// create the uppercase button
    207          		x = BUTTON_LEFT_X - 3;
    208          		Id =  GUI_ID_USER + UPPER_BTN_ID;
    209          		btn = BUTTON_CreateEx(x - 3, y - 4, 43, 42, _hDlg, WM_CF_SHOW, 0, Id);
   \   00000280   0400A0E3           MOV      R0,#+4
   \   00000284   800E80E3           ORR      R0,R0,#0x800
   \   00000288   0C008DE5           STR      R0,[SP, #+12]
   \   0000028C   0200A0E3           MOV      R0,#+2
   \   00000290   08508DE5           STR      R5,[SP, #+8]
   \   00000294   04008DE5           STR      R0,[SP, #+4]
   \   00000298   080094E5           LDR      R0,[R4, #+8]
   \   0000029C   2A30A0E3           MOV      R3,#+42
   \   000002A0   00008DE5           STR      R0,[SP, #+0]
   \   000002A4   2B20A0E3           MOV      R2,#+43
   \   000002A8   B510A0E3           MOV      R1,#+181
   \   000002AC   1000A0E3           MOV      R0,#+16
   \   000002B0   ........           BL       BUTTON_CreateEx
   \   000002B4   0080A0E1           MOV      R8,R0
    210          		//BUTTON_SetBitmap(btn, BUTTON_BI_UNPRESSED, &bmNotCapital);
    211          		if(Caps == true)
   \   000002B8   0200D4E5           LDRB     R0,[R4, #+2]
    212          		{
    213          			BUTTON_SetBitmap(btn, BUTTON_BI_UNPRESSED, &bmCapital);
    214          		}
    215          		else
    216          		{
    217          			BUTTON_SetBitmap(btn, BUTTON_BI_UNPRESSED, &bmNotCapital);
   \   000002BC   0010A0E3           MOV      R1,#+0
   \   000002C0   000050E3           CMP      R0,#+0
   \   000002C4   ........           LDRNE    R2,??DataTable51_7
   \   000002C8   ........           LDREQ    R2,??DataTable51_8
   \   000002CC   0800A0E1           MOV      R0,R8
   \   000002D0   ........           BL       BUTTON_SetBitmap
    218          		}
    219          
    220          		index++;
    221          		AlphaBtns[index++] = btn;
   \   000002D4   14009DE5           LDR      R0,[SP, #+20]
   \   000002D8   000184E0           ADD      R0,R4,R0, LSL #+2
   \   000002DC   1C8080E5           STR      R8,[R0, #+28]
    222          		y += BUTTON_HEIGHT + 5;
    223          		x = 5;
    224          		//width = BUTTON_WIDTH;
    225          
    226          		index = 26;
    227          		break;
   \   000002E0   550000EA           B        ??SetupKeyboard_4
    228          	case NUMERIC:
    229          		GUI_DrawBitmap(&bmNumPadBlank, 0, 0);
   \                     ??SetupKeyboard_5:
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0010A0E3           MOV      R1,#+0
   \   000002EC   ........           LDR      R0,??DataTable51_9
   \   000002F0   ........           BL       GUI_DrawBitmap
    230          
    231          		y = BUTTON_ROW_ONE_Y;
    232          		for(i = 0; i < 3; i++)
   \   000002F4   0070A0E3           MOV      R7,#+0
   \   000002F8   ........           LDR      R9,??DataTable51_10
   \   000002FC   04A0A0E1           MOV      R10,R4
   \   00000300   2D60A0E3           MOV      R6,#+45
    233          		{
    234          			x = NUM_BTN_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING);
    235          			Id = GUI_ID_USER + (int)*NumOneKeys[i];
    236          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \                     ??SetupKeyboard_15:
   \   00000304   000099E5           LDR      R0,[R9, #+0]
   \   00000308   2330A0E3           MOV      R3,#+35
   \   0000030C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000310   2320A0E3           MOV      R2,#+35
   \   00000314   5E10A0E3           MOV      R1,#+94
   \   00000318   800E80E2           ADD      R0,R0,#+2048
   \   0000031C   0C008DE5           STR      R0,[SP, #+12]
   \   00000320   0000A0E3           MOV      R0,#+0
   \   00000324   08008DE5           STR      R0,[SP, #+8]
   \   00000328   0200A0E3           MOV      R0,#+2
   \   0000032C   04008DE5           STR      R0,[SP, #+4]
   \   00000330   080094E5           LDR      R0,[R4, #+8]
   \   00000334   00008DE5           STR      R0,[SP, #+0]
   \   00000338   960700E0           MUL      R0,R6,R7
   \   0000033C   B30080E2           ADD      R0,R0,#+179
   \   00000340   ........           BL       BUTTON_CreateEx
   \   00000344   0080A0E1           MOV      R8,R0
    237          			
    238          			BUTTON_SetText(btn, NumOneKeys[i]);
   \   00000348   041099E4           LDR      R1,[R9], #+4
   \   0000034C   ........           BL       BUTTON_SetText
    239          			AlphaBtns[i] = btn;
   \   00000350   18808AE5           STR      R8,[R10, #+24]
    240          
    241          		}
   \   00000354   017087E2           ADD      R7,R7,#+1
   \   00000358   04A08AE2           ADD      R10,R10,#+4
   \   0000035C   030057E3           CMP      R7,#+3
   \   00000360   E7FFFFBA           BLT      ??SetupKeyboard_15
    242          		y = BUTTON_ROW_TWO_Y;
    243          		for(i = 0; i < 4; i++)
   \   00000364   0070A0E3           MOV      R7,#+0
   \   00000368   ........           LDR      R9,??DataTable51_11
   \   0000036C   04A0A0E1           MOV      R10,R4
    244          		{
    245          			index = i + 3;
    246          			x = NUM_BTN_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING);
    247          			Id = GUI_ID_USER + (int)*NumTwoKeys[i];
    248          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \                     ??SetupKeyboard_16:
   \   00000370   000099E5           LDR      R0,[R9, #+0]
   \   00000374   2330A0E3           MOV      R3,#+35
   \   00000378   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000037C   2320A0E3           MOV      R2,#+35
   \   00000380   8B10A0E3           MOV      R1,#+139
   \   00000384   800E80E2           ADD      R0,R0,#+2048
   \   00000388   0C008DE5           STR      R0,[SP, #+12]
   \   0000038C   0000A0E3           MOV      R0,#+0
   \   00000390   08008DE5           STR      R0,[SP, #+8]
   \   00000394   0200A0E3           MOV      R0,#+2
   \   00000398   04008DE5           STR      R0,[SP, #+4]
   \   0000039C   080094E5           LDR      R0,[R4, #+8]
   \   000003A0   00008DE5           STR      R0,[SP, #+0]
   \   000003A4   960700E0           MUL      R0,R6,R7
   \   000003A8   B30080E2           ADD      R0,R0,#+179
   \   000003AC   ........           BL       BUTTON_CreateEx
   \   000003B0   0080A0E1           MOV      R8,R0
    249          			
    250          			BUTTON_SetText(btn, NumTwoKeys[i]);
   \   000003B4   041099E4           LDR      R1,[R9], #+4
   \   000003B8   ........           BL       BUTTON_SetText
    251          			AlphaBtns[index] = btn;
   \   000003BC   24808AE5           STR      R8,[R10, #+36]
    252          		}
   \   000003C0   017087E2           ADD      R7,R7,#+1
   \   000003C4   04A08AE2           ADD      R10,R10,#+4
   \   000003C8   040057E3           CMP      R7,#+4
   \   000003CC   E7FFFFBA           BLT      ??SetupKeyboard_16
    253          		y = BUTTON_ROW_THREE_Y;
    254          		for(i = 0; i < 5; i++)
   \   000003D0   0070A0E3           MOV      R7,#+0
   \   000003D4   ........           LDR      R5,??DataTable51_12
   \   000003D8   0490A0E1           MOV      R9,R4
    255          		{
    256          			index = i + 7;
    257          			x = NUM_BTN_LEFT_X + i * (BUTTON_WIDTH + BUTTON_SPACING) - (BUTTON_WIDTH + BUTTON_SPACING);
    258          			Id = GUI_ID_USER + (int)*NumThreeKeys[i];
    259          			btn = BUTTON_CreateEx(x, y, BUTTON_WIDTH, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, Id);
   \                     ??SetupKeyboard_17:
   \   000003DC   000095E5           LDR      R0,[R5, #+0]
   \   000003E0   2330A0E3           MOV      R3,#+35
   \   000003E4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000003E8   2320A0E3           MOV      R2,#+35
   \   000003EC   B910A0E3           MOV      R1,#+185
   \   000003F0   800E80E2           ADD      R0,R0,#+2048
   \   000003F4   0C008DE5           STR      R0,[SP, #+12]
   \   000003F8   0000A0E3           MOV      R0,#+0
   \   000003FC   08008DE5           STR      R0,[SP, #+8]
   \   00000400   0200A0E3           MOV      R0,#+2
   \   00000404   04008DE5           STR      R0,[SP, #+4]
   \   00000408   080094E5           LDR      R0,[R4, #+8]
   \   0000040C   00008DE5           STR      R0,[SP, #+0]
   \   00000410   960700E0           MUL      R0,R6,R7
   \   00000414   860080E2           ADD      R0,R0,#+134
   \   00000418   ........           BL       BUTTON_CreateEx
   \   0000041C   0080A0E1           MOV      R8,R0
    260          			
    261          			BUTTON_SetText(btn, NumThreeKeys[i]);
   \   00000420   041095E4           LDR      R1,[R5], #+4
   \   00000424   ........           BL       BUTTON_SetText
    262          			AlphaBtns[index] = btn;
   \   00000428   348089E5           STR      R8,[R9, #+52]
    263          
    264          		}
   \   0000042C   017087E2           ADD      R7,R7,#+1
   \   00000430   049089E2           ADD      R9,R9,#+4
   \   00000434   050057E3           CMP      R7,#+5
   \   00000438   E7FFFFBA           BLT      ??SetupKeyboard_17
    265          
    266          		//index = 12;
    267          		break;
    268          	};
    269          
    270          	if(LockMode == false)
   \                     ??SetupKeyboard_4:
   \   0000043C   0201D4E5           LDRB     R0,[R4, #+258]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   1600001A           BNE      ??SetupKeyboard_18
    271          	{
    272          		AlphaNumBtn = BUTTON_CreateEx(382, BUTTON_ROW_THREE_Y, 80, BUTTON_HEIGHT, _hDlg, WM_CF_SHOW, 0, GUI_ID_USER + NUM_BTN_ID);
   \   00000448   0200A0E3           MOV      R0,#+2
   \   0000044C   800E80E3           ORR      R0,R0,#0x800
   \   00000450   0C008DE5           STR      R0,[SP, #+12]
   \   00000454   0000A0E3           MOV      R0,#+0
   \   00000458   08008DE5           STR      R0,[SP, #+8]
   \   0000045C   0200A0E3           MOV      R0,#+2
   \   00000460   04008DE5           STR      R0,[SP, #+4]
   \   00000464   080094E5           LDR      R0,[R4, #+8]
   \   00000468   B910A0E3           MOV      R1,#+185
   \   0000046C   00008DE5           STR      R0,[SP, #+0]
   \   00000470   2330A0E3           MOV      R3,#+35
   \   00000474   5020A0E3           MOV      R2,#+80
   \   00000478   C50081E2           ADD      R0,R1,#+197
   \   0000047C   ........           BL       BUTTON_CreateEx
   \   00000480   A40084E5           STR      R0,[R4, #+164]
    273          		if(Option == ALPHA)
   \   00000484   1800DDE5           LDRB     R0,[SP, #+24]
   \   00000488   010050E3           CMP      R0,#+1
    274          			BUTTON_SetText(AlphaNumBtn, ".-123");
   \   0000048C   ............       ADRLEQ   R1,`?<Constant ".-123">`
   \              ....        
   \   00000494   ........           ADRNE    R1,??DataTable49  ;; "ABC"
   \   00000498   A40094E5           LDR      R0,[R4, #+164]
   \   0000049C   ........           BL       BUTTON_SetText
   \   000004A0   060000EA           B        ??SetupKeyboard_19
    275          		else
    276          			BUTTON_SetText(AlphaNumBtn, "ABC");
    277          	}
    278          	else
    279          	{
    280          		// ALPH/NUM button not active - cover over blank button
    281          		GUI_SetColor(GUI_BLACK);
   \                     ??SetupKeyboard_18:
   \   000004A4   0000A0E3           MOV      R0,#+0
   \   000004A8   ........           BL       GUI_SetColor
    282          		GUI_FillRect(352, 180, 470, 225);
   \   000004AC   E130A0E3           MOV      R3,#+225
   \   000004B0   F52083E2           ADD      R2,R3,#+245
   \   000004B4   B410A0E3           MOV      R1,#+180
   \   000004B8   580FA0E3           MOV      R0,#+352
   \   000004BC   ........           BL       GUI_FillRect
    283          	}
    284          
    285          	btn = BUTTON_CreateEx(380, 42, 80, 35, _hDlg, WM_CF_SHOW, 0, GUI_ID_USER + DEL_BTN_ID);
   \                     ??SetupKeyboard_19:
   \   000004C0   0800A0E3           MOV      R0,#+8
   \   000004C4   800E80E3           ORR      R0,R0,#0x800
   \   000004C8   0C008DE5           STR      R0,[SP, #+12]
   \   000004CC   0000A0E3           MOV      R0,#+0
   \   000004D0   08008DE5           STR      R0,[SP, #+8]
   \   000004D4   0200A0E3           MOV      R0,#+2
   \   000004D8   04008DE5           STR      R0,[SP, #+4]
   \   000004DC   080094E5           LDR      R0,[R4, #+8]
   \   000004E0   2330A0E3           MOV      R3,#+35
   \   000004E4   00008DE5           STR      R0,[SP, #+0]
   \   000004E8   5020A0E3           MOV      R2,#+80
   \   000004EC   2A10A0E3           MOV      R1,#+42
   \   000004F0   5F0FA0E3           MOV      R0,#+380
   \   000004F4   ........           BL       BUTTON_CreateEx
   \   000004F8   0060A0E1           MOV      R6,R0
    286          	BUTTON_SetText(btn, "Del");
   \   000004FC   ........           ADR      R1,??DataTable49_1  ;; "Del"
   \   00000500   ........           BL       BUTTON_SetText
    287          	BUTTON_SetTextAlign(btn, GUI_TA_RIGHT | GUI_TA_BOTTOM);
   \   00000504   0510A0E3           MOV      R1,#+5
   \   00000508   0600A0E1           MOV      R0,R6
   \   0000050C   ........           BL       BUTTON_SetTextAlign
    288          	BUTTON_SetBitmap(btn, BUTTON_BI_UNPRESSED, &bmDeleteKey);
   \   00000510   ........           LDR      R2,??DataTable51_13
   \   00000514   0010A0E3           MOV      R1,#+0
   \   00000518   0600A0E1           MOV      R0,R6
   \   0000051C   ........           BL       BUTTON_SetBitmap
    289          	SetBtnStd(btn);
   \   00000520   0020A0E3           MOV      R2,#+0
   \   00000524   0010A0E3           MOV      R1,#+0
   \   00000528   0600A0E1           MOV      R0,R6
   \   0000052C   ........           BL       BUTTON_SetTextColor
   \   00000530   FF24E0E3           MVN      R2,#-16777216
   \   00000534   0110A0E3           MOV      R1,#+1
   \   00000538   0600A0E1           MOV      R0,R6
   \   0000053C   ........           BL       BUTTON_SetTextColor
   \   00000540   ........           LDR      R5,??DataTable51_14
   \   00000544   0600A0E1           MOV      R0,R6
   \   00000548   0510A0E1           MOV      R1,R5
   \   0000054C   ........           BL       BUTTON_SetFont
   \   00000550   0600A0E1           MOV      R0,R6
   \   00000554   ........           BL       BUTTON_SetSkinClassic
   \   00000558   0600A0E1           MOV      R0,R6
   \   0000055C   ........           BL       WM_BringToTop
    290          
    291          	btn = BUTTON_CreateEx(BUTTON_LEFT_X - 5, BUTTON_ROW_THREE_Y + BUTTON_HEIGHT + BUTTON_SPACING - 1, 106, BUTTON_HEIGHT + 1, _hDlg, WM_CF_SHOW, 0, GUI_ID_USER + CANCEL_BTN_ID);
   \   00000560   0300A0E3           MOV      R0,#+3
   \   00000564   800E80E3           ORR      R0,R0,#0x800
   \   00000568   0C008DE5           STR      R0,[SP, #+12]
   \   0000056C   0000A0E3           MOV      R0,#+0
   \   00000570   08008DE5           STR      R0,[SP, #+8]
   \   00000574   0200A0E3           MOV      R0,#+2
   \   00000578   04008DE5           STR      R0,[SP, #+4]
   \   0000057C   080094E5           LDR      R0,[R4, #+8]
   \   00000580   2430A0E3           MOV      R3,#+36
   \   00000584   00008DE5           STR      R0,[SP, #+0]
   \   00000588   6A20A0E3           MOV      R2,#+106
   \   0000058C   E510A0E3           MOV      R1,#+229
   \   00000590   1100A0E3           MOV      R0,#+17
   \   00000594   ........           BL       BUTTON_CreateEx
   \   00000598   0060A0E1           MOV      R6,R0
    292          	BUTTON_SetText(btn, "Cancel");
   \   0000059C   ............       ADRL     R1,`?<Constant "Cancel">`
   \              ....        
   \   000005A4   ........           BL       BUTTON_SetText
    293          	BUTTON_SetBkColor(btn, BUTTON_CI_UNPRESSED, GUI_YELLOW);
   \   000005A8   FF20A0E3           MOV      R2,#+255
   \   000005AC   FF2C82E3           ORR      R2,R2,#0xFF00
   \   000005B0   0010A0E3           MOV      R1,#+0
   \   000005B4   0600A0E1           MOV      R0,R6
   \   000005B8   ........           BL       BUTTON_SetBkColor
    294          	SetBtnStd(btn);
   \   000005BC   0020A0E3           MOV      R2,#+0
   \   000005C0   0010A0E3           MOV      R1,#+0
   \   000005C4   0600A0E1           MOV      R0,R6
   \   000005C8   ........           BL       BUTTON_SetTextColor
   \   000005CC   FF24E0E3           MVN      R2,#-16777216
   \   000005D0   0110A0E3           MOV      R1,#+1
   \   000005D4   0600A0E1           MOV      R0,R6
   \   000005D8   ........           BL       BUTTON_SetTextColor
   \   000005DC   0510A0E1           MOV      R1,R5
   \   000005E0   0600A0E1           MOV      R0,R6
   \   000005E4   ........           BL       BUTTON_SetFont
   \   000005E8   0600A0E1           MOV      R0,R6
   \   000005EC   ........           BL       BUTTON_SetSkinClassic
   \   000005F0   0600A0E1           MOV      R0,R6
   \   000005F4   ........           BL       WM_BringToTop
    295          
    296          	btn = BUTTON_CreateEx(134, BUTTON_ROW_THREE_Y + BUTTON_HEIGHT + BUTTON_SPACING - 1, 215, BUTTON_HEIGHT + 1, _hDlg, WM_CF_SHOW, 0, GUI_ID_USER + SPACE_BTN_ID);
   \   000005F8   820EA0E3           MOV      R0,#+2080
   \   000005FC   0C008DE5           STR      R0,[SP, #+12]
   \   00000600   0000A0E3           MOV      R0,#+0
   \   00000604   08008DE5           STR      R0,[SP, #+8]
   \   00000608   0200A0E3           MOV      R0,#+2
   \   0000060C   04008DE5           STR      R0,[SP, #+4]
   \   00000610   080094E5           LDR      R0,[R4, #+8]
   \   00000614   2430A0E3           MOV      R3,#+36
   \   00000618   00008DE5           STR      R0,[SP, #+0]
   \   0000061C   D720A0E3           MOV      R2,#+215
   \   00000620   E510A0E3           MOV      R1,#+229
   \   00000624   8600A0E3           MOV      R0,#+134
   \   00000628   ........           BL       BUTTON_CreateEx
   \   0000062C   0060A0E1           MOV      R6,R0
    297          	BUTTON_SetText(btn, "Space");
   \   00000630   ............       ADRL     R1,`?<Constant "Space">`
   \              ....        
   \   00000638   ........           BL       BUTTON_SetText
    298          	SetBtnStd(btn);
   \   0000063C   0020A0E3           MOV      R2,#+0
   \   00000640   0010A0E3           MOV      R1,#+0
   \   00000644   0600A0E1           MOV      R0,R6
   \   00000648   ........           BL       BUTTON_SetTextColor
   \   0000064C   FF24E0E3           MVN      R2,#-16777216
   \   00000650   0110A0E3           MOV      R1,#+1
   \   00000654   0600A0E1           MOV      R0,R6
   \   00000658   ........           BL       BUTTON_SetTextColor
   \   0000065C   0510A0E1           MOV      R1,R5
   \   00000660   0600A0E1           MOV      R0,R6
   \   00000664   ........           BL       BUTTON_SetFont
   \   00000668   0600A0E1           MOV      R0,R6
   \   0000066C   ........           BL       BUTTON_SetSkinClassic
   \   00000670   0600A0E1           MOV      R0,R6
   \   00000674   ........           BL       WM_BringToTop
    299          
    300          	btn = BUTTON_CreateEx(359, BUTTON_ROW_THREE_Y + BUTTON_HEIGHT + BUTTON_SPACING - 1, 105, BUTTON_HEIGHT + 1, _hDlg, WM_CF_SHOW, 0, GUI_ID_USER + SAVE_BTN_ID);
   \   00000678   0500A0E3           MOV      R0,#+5
   \   0000067C   800E80E3           ORR      R0,R0,#0x800
   \   00000680   0C008DE5           STR      R0,[SP, #+12]
   \   00000684   0000A0E3           MOV      R0,#+0
   \   00000688   08008DE5           STR      R0,[SP, #+8]
   \   0000068C   0200A0E3           MOV      R0,#+2
   \   00000690   04008DE5           STR      R0,[SP, #+4]
   \   00000694   080094E5           LDR      R0,[R4, #+8]
   \   00000698   E510A0E3           MOV      R1,#+229
   \   0000069C   00008DE5           STR      R0,[SP, #+0]
   \   000006A0   2430A0E3           MOV      R3,#+36
   \   000006A4   6920A0E3           MOV      R2,#+105
   \   000006A8   820081E2           ADD      R0,R1,#+130
   \   000006AC   ........           BL       BUTTON_CreateEx
   \   000006B0   0060A0E1           MOV      R6,R0
    301          	BUTTON_SetText(btn, "Save");
   \   000006B4   ............       ADRL     R1,`?<Constant "Save">`
   \              ....        
   \   000006BC   ........           BL       BUTTON_SetText
    302          	BUTTON_SetBkColor(btn, BUTTON_CI_UNPRESSED, GUI_GREEN);
   \   000006C0   FF2CA0E3           MOV      R2,#+65280
   \   000006C4   0010A0E3           MOV      R1,#+0
   \   000006C8   0600A0E1           MOV      R0,R6
   \   000006CC   ........           BL       BUTTON_SetBkColor
    303          	BUTTON_SetBkColor(btn, BUTTON_CI_PRESSED, GUI_RED);
   \   000006D0   FF20A0E3           MOV      R2,#+255
   \   000006D4   0110A0E3           MOV      R1,#+1
   \   000006D8   0600A0E1           MOV      R0,R6
   \   000006DC   ........           BL       BUTTON_SetBkColor
    304          	SetBtnStd(btn);
   \   000006E0   0020A0E3           MOV      R2,#+0
   \   000006E4   0010A0E3           MOV      R1,#+0
   \   000006E8   0600A0E1           MOV      R0,R6
   \   000006EC   ........           BL       BUTTON_SetTextColor
   \   000006F0   FF24E0E3           MVN      R2,#-16777216
   \   000006F4   0110A0E3           MOV      R1,#+1
   \   000006F8   0600A0E1           MOV      R0,R6
   \   000006FC   ........           BL       BUTTON_SetTextColor
   \   00000700   0510A0E1           MOV      R1,R5
   \   00000704   0600A0E1           MOV      R0,R6
   \   00000708   ........           BL       BUTTON_SetFont
   \   0000070C   0600A0E1           MOV      R0,R6
   \   00000710   ........           BL       BUTTON_SetSkinClassic
   \   00000714   0600A0E1           MOV      R0,R6
   \   00000718   ........           BL       WM_BringToTop
    305          
    306          	DisplayType = Option;
   \   0000071C   1800DDE5           LDRB     R0,[SP, #+24]
   \   00000720   0000C4E5           STRB     R0,[R4, #+0]
    307          
    308          	// draw the title
    309          	GUI_SetFont(&GUI_Font24B_ASCII);
   \   00000724   ........           LDR      R0,??DataTable51_2
   \   00000728   ........           BL       GUI_SetFont
    310          	x = xLoc + Width / 2 - GUI_GetStringDistX(Title) / 2;
   \   0000072C   D00084E2           ADD      R0,R4,#+208
   \   00000730   ........           BL       GUI_GetStringDistX
   \   00000734   C81094E5           LDR      R1,[R4, #+200]
   \   00000738   C02094E5           LDR      R2,[R4, #+192]
   \   0000073C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000740   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   00000744   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000748   C05041E0           SUB      R5,R1,R0, ASR #+1
    311          	GUI_SetColor(GUI_WHITE);
   \   0000074C   FF04E0E3           MVN      R0,#-16777216
   \   00000750   ........           BL       GUI_SetColor
    312          	GUI_DispStringAt(Title, x, 5);
   \   00000754   0520A0E3           MOV      R2,#+5
   \   00000758   0510A0E1           MOV      R1,R5
   \   0000075C   D00084E2           ADD      R0,R4,#+208
   \   00000760   ........           BL       GUI_DispStringAt
    313          	GUI_SetColor(GUI_BLACK);
   \   00000764   0000A0E3           MOV      R0,#+0
   \   00000768   ........           BL       GUI_SetColor
    314          }
   \   0000076C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000770   F08FBDE8           POP      {R4-R11,PC}      ;; return
    315          
    316          

   \                                 In section .text, align 4, keep-with-next
    317          void Keyboard::SetBtnStd(BUTTON_Handle btn)
    318          {
   \                     _ZN8Keyboard9SetBtnStdEl:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    319          	BUTTON_SetTextColor(btn, BUTTON_CI_UNPRESSED, GUI_BLACK);
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       BUTTON_SetTextColor
    320          	BUTTON_SetTextColor(btn, BUTTON_CI_PRESSED, GUI_WHITE);
   \   00000018   FF24E0E3           MVN      R2,#-16777216
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       BUTTON_SetTextColor
    321          	BUTTON_SetFont(btn, &GUI_Font32B_ASCII);
   \   00000028   ........           LDR      R1,??DataTable51_14
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       BUTTON_SetFont
    322          	BUTTON_SetSkinClassic(btn);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       BUTTON_SetSkinClassic
    323          	WM_BringToTop(btn);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   ........           B        WM_BringToTop    ;; tailcall
    324          }
    325          

   \                                 In section .text, align 4, keep-with-next
    326          void Keyboard::ChangeKeyboardCase(bool Capital)
    327          {
   \                     _ZN8Keyboard18ChangeKeyboardCaseEb:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    328          	char c[2];
    329          	int i;
    330          
    331          	if(AlphaBtns[0] != NULL)
   \   00000008   180095E5           LDR      R0,[R5, #+24]
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1500000A           BEQ      ??ChangeKeyboardCase_0
    332          	{
    333          		for(i = 0; i < NUM_ALPHA_BTNS; i++)
   \   0000001C   2360A0E3           MOV      R6,#+35
    334          		{
    335          			if(AlphaBtns[i] != NULL)
   \                     ??ChangeKeyboardCase_1:
   \   00000020   180095E5           LDR      R0,[R5, #+24]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0E00000A           BEQ      ??ChangeKeyboardCase_2
    336          			{
    337          				BUTTON_GetText(AlphaBtns[i], c, 2);
   \   0000002C   0220A0E3           MOV      R2,#+2
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   ........           BL       BUTTON_GetText
    338          				if (c[0] != 0)
   \   00000038   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0800000A           BEQ      ??ChangeKeyboardCase_2
    339          				{
    340          					if(Capital == true)
   \   00000044   000054E3           CMP      R4,#+0
   \   00000048   0100000A           BEQ      ??ChangeKeyboardCase_3
    341          						c[0] = toupper(c[0]);
   \   0000004C   ........           BL       toupper
   \   00000050   000000EA           B        ??ChangeKeyboardCase_4
    342          					else
    343          						c[0] = tolower(c[0]);
   \                     ??ChangeKeyboardCase_3:
   \   00000054   ........           BL       tolower
   \                     ??ChangeKeyboardCase_4:
   \   00000058   0000CDE5           STRB     R0,[SP, #+0]
    344          					BUTTON_SetText(AlphaBtns[i], c);
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   180095E5           LDR      R0,[R5, #+24]
   \   00000064   ........           BL       BUTTON_SetText
    345          				}
    346          			}
    347          		}
   \                     ??ChangeKeyboardCase_2:
   \   00000068   045085E2           ADD      R5,R5,#+4
   \   0000006C   016056E2           SUBS     R6,R6,#+1
   \   00000070   EAFFFF1A           BNE      ??ChangeKeyboardCase_1
    348          	}
    349          
    350          }
   \                     ??ChangeKeyboardCase_0:
   \   00000074   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
    351          

   \                                 In section .text, align 4, keep-with-next
    352          void Keyboard::GetValue(char *str, int max)
    353          {
    354          	EDIT_GetText(Text, str, max+1);
   \                     _ZN8Keyboard8GetValueEPci:
   \   00000000   012082E2           ADD      R2,R2,#+1
   \   00000004   A80090E5           LDR      R0,[R0, #+168]
   \   00000008   ........           B        EDIT_GetText     ;; tailcall
    355          }
    356          
    357          

   \                                 In section .text, align 4, keep-with-next
    358          Keyboard::~Keyboard()
    359          {
   \                     _ZN8KeyboardD1Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
    360          	// Search for this keyboard and remove it.
    361          	// Since buttons are owned by the window then deleting the window should get rid of the children buttons
    362          	for (int i = 0; i < MAX_KEYBOARDS; i++)
   \   00000004   ........           LDR      R1,??DataTable51
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   00C091E5           LDR      R12,[R1, #+0]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   042081E2           ADD      R2,R1,#+4
    363          	{
    364          		if (kb[i] == this)
   \   00000018   04005CE1           CMP      R12,R4
   \   0000001C   0800000A           BEQ      `?~Keyboard_0`
   \   00000020   00C092E5           LDR      R12,[R2, #+0]
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   082081E2           ADD      R2,R1,#+8
   \   0000002C   0430A0E3           MOV      R3,#+4
   \                     `?~Keyboard_1`:
   \   00000030   04005CE1           CMP      R12,R4
   \   00000034   04E09214           LDRNE    LR,[R2], #+4
   \   00000038   01008012           ADDNE    R0,R0,#+1
   \   0000003C   04005E11           CMPNE    LR,R4
   \   00000040   0600001A           BNE      `?~Keyboard_2`
    365          		{
    366          			kb[i] = 0;
   \                     `?~Keyboard_0`:
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   002181E7           STR      R2,[R1, +R0, LSL #+2]
    367          			kbId[i] = 0;
   \   0000004C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000050   282080E5           STR      R2,[R0, #+40]
    368          
    369          			WM_DeleteWindow(this->_hDlg);
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   ........           BL       WM_DeleteWindow
    370          
    371          			return;
   \   0000005C   050000EA           B        `?~Keyboard_3`
    372          		}
   \                     `?~Keyboard_2`:
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   04C092E4           LDR      R12,[R2], #+4
   \   00000068   013053E2           SUBS     R3,R3,#+1
   \   0000006C   EFFFFF1A           BNE      `?~Keyboard_1`
   \   00000070   04005CE1           CMP      R12,R4
   \   00000074   F2FFFF0A           BEQ      `?~Keyboard_0`
    373          	}
    374          }
   \                     `?~Keyboard_3`:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   1080BDE8           POP      {R4,PC}          ;; return
    375          

   \                                 In section .text, align 4, keep-with-next
    376          void _cbKeyboardCallback(WM_MESSAGE * pMsg) {
   \                     _Z19_cbKeyboardCallbackP10WM_MESSAGE:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    377          	int NCode, Id;
    378          	int i;
    379          	WM_MESSAGE msg;
    380          	Keyboard *key = 0;
    381          
    382          	//if (pMsg->hWinSrc < 0)
    383          	//{
    384          	//	WM_DefaultProc(pMsg);
    385          	//	return;
    386          	//}
    387          	for(i=0; i < MAX_KEYBOARDS; i++)
   \   00000004   ........           LDR      R1,??DataTable51
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   28E091E5           LDR      LR,[R1, #+40]
   \   00000010   043096E5           LDR      R3,[R6, #+4]
   \   00000014   2CD04DE2           SUB      SP,SP,#+44
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   2C2081E2           ADD      R2,R1,#+44
    388          	{
    389          		if (pMsg->hWin == kbId[i])
   \   00000028   0E0053E1           CMP      R3,LR
   \   0000002C   0900000A           BEQ      ??_cbKeyboardCallback_1
   \   00000030   00E092E5           LDR      LR,[R2, #+0]
   \   00000034   042081E2           ADD      R2,R1,#+4
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   2C2082E2           ADD      R2,R2,#+44
   \   00000040   04C0A0E3           MOV      R12,#+4
   \                     ??_cbKeyboardCallback_2:
   \   00000044   0E0053E1           CMP      R3,LR
   \   00000048   04709214           LDRNE    R7,[R2], #+4
   \   0000004C   01008012           ADDNE    R0,R0,#+1
   \   00000050   07005311           CMPNE    R3,R7
   \   00000054   0100001A           BNE      ??_cbKeyboardCallback_3
    390          		{
    391          			key = kb[i];
   \                     ??_cbKeyboardCallback_1:
   \   00000058   004191E7           LDR      R4,[R1, +R0, LSL #+2]
    392          			break;
   \   0000005C   060000EA           B        ??_cbKeyboardCallback_4
    393          		}
   \                     ??_cbKeyboardCallback_3:
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   04E092E4           LDR      LR,[R2], #+4
   \   00000068   01C05CE2           SUBS     R12,R12,#+1
   \   0000006C   F4FFFF1A           BNE      ??_cbKeyboardCallback_2
   \   00000070   0E0053E1           CMP      R3,LR
   \   00000074   F7FFFF0A           BEQ      ??_cbKeyboardCallback_1
    394          	}
   \   00000078   010080E2           ADD      R0,R0,#+1
    395          	if ((i == MAX_KEYBOARDS) || (key == 0))
   \                     ??_cbKeyboardCallback_4:
   \   0000007C   0A0050E3           CMP      R0,#+10
   \   00000080   00005413           CMPNE    R4,#+0
   \   00000084   B400000A           BEQ      ??_cbKeyboardCallback_5
    396          	{
    397          		return;
    398          	}
    399          
    400          	switch(pMsg->MsgId)
   \   00000088   000096E5           LDR      R0,[R6, #+0]
   \   0000008C   260050E2           SUBS     R0,R0,#+38
   \   00000090   0D00000A           BEQ      ??_cbKeyboardCallback_6
   \   00000094   ED0050E2           SUBS     R0,R0,#+237
   \   00000098   AD00001A           BNE      ??_cbKeyboardCallback_7
    401          	{
    402          		case WM_TIMER:
    403          			if (pMsg->Data.v == key->hAutoRepeatTimer)
   \   0000009C   0C0096E5           LDR      R0,[R6, #+12]
   \   000000A0   BC1094E5           LDR      R1,[R4, #+188]
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   AB00001A           BNE      ??_cbKeyboardCallback_5
    404          			{
    405          				EDIT_AddKey(key->Text, DEL_BTN_ID);
   \   000000AC   0810A0E3           MOV      R1,#+8
   \   000000B0   A80094E5           LDR      R0,[R4, #+168]
   \   000000B4   ........           BL       EDIT_AddKey
    406          				WM_RestartTimer(key->hAutoRepeatTimer, AUTO_REPEAT_TIME);
   \   000000B8   5E10A0E3           MOV      R1,#+94
   \   000000BC   401F81E3           ORR      R1,R1,#0x100
   \   000000C0   BC0094E5           LDR      R0,[R4, #+188]
   \   000000C4   ........           BL       WM_RestartTimer
   \   000000C8   A30000EA           B        ??_cbKeyboardCallback_5
    407          			}
    408          			break;
    409          
    410          //
    411          // KMC 9/9/12 - removed old code involved in screen scrolling.  Was causing issues of misinterpreting presses
    412          // off the working screen area as valid keys.  Since we no longer support screen scrolling this code can
    413          // simlpy be removed.
    414          //
    415          //		case WM_TOUCH:
    416          //			{
    417          //				// If the non-keyboard area is touched and moves more than MOVE_LIMIT pixels then we may be scrolling off this screen -
    418          //				// so save the data.
    419          //				GUI_PID_STATE TouchState;
    420          //
    421          //				GUI_TOUCH_GetState(&TouchState);
    422          //				if (TouchState.Pressed)
    423          //				{
    424          //					if (key->touchDetected)
    425          //					{
    426          //						if ((abs(key->StartPos.y - TouchState.y) > MOVE_LIMIT) || (abs(key->StartPos.x - TouchState.x) > MOVE_LIMIT))		// If screen moving
    427          //						{
    428          //							SaveData(KB_SAVE_MSG, key);
    429          //						}
    430          //					}
    431          //					else
    432          //					{
    433          //						GUI_TOUCH_GetState(&key->StartPos);
    434          //						key->touchDetected = true;
    435          //					}
    436          //				}
    437          //				else key->touchDetected = false;
    438          //			}
    439          //			break;
    440          
    441          		case WM_NOTIFY_PARENT:
    442          			Id    = WM_GetId(pMsg->hWinSrc);      // Id of widget
   \                     ??_cbKeyboardCallback_6:
   \   000000CC   080096E5           LDR      R0,[R6, #+8]
   \   000000D0   ........           BL       WM_GetId
   \   000000D4   0070A0E1           MOV      R7,R0
    443          			NCode = pMsg->Data.v;                 // Notification code
    444          
    445          		    switch(NCode)
   \   000000D8   0C0096E5           LDR      R0,[R6, #+12]
   \   000000DC   010050E2           SUBS     R0,R0,#+1
   \   000000E0   2800000A           BEQ      ??_cbKeyboardCallback_8
   \   000000E4   010040E2           SUB      R0,R0,#+1
   \   000000E8   010050E3           CMP      R0,#+1
   \   000000EC   9A00008A           BHI      ??_cbKeyboardCallback_5
    446          		    {
    447          				case WM_NOTIFICATION_MOVED_OUT:
    448          				case WM_NOTIFICATION_RELEASED:
    449          					if (Id == GUI_ID_USER + DEL_BTN_ID)
   \   000000F0   0800A0E3           MOV      R0,#+8
   \   000000F4   800E80E3           ORR      R0,R0,#0x800
   \   000000F8   000057E1           CMP      R7,R0
   \   000000FC   0300001A           BNE      ??_cbKeyboardCallback_9
    450          					{
    451          						WM_DeleteTimer(key->hAutoRepeatTimer);
   \   00000100   BC0094E5           LDR      R0,[R4, #+188]
   \   00000104   ........           BL       WM_DeleteTimer
    452          						key->hAutoRepeatTimer = 0;
   \   00000108   BC5084E5           STR      R5,[R4, #+188]
   \   0000010C   920000EA           B        ??_cbKeyboardCallback_5
    453          					}
    454          					else
    455          					{
    456          						int x, y;
    457          					// If a is released and we are no longer
    458          					// at the 'home' position then we may be scrolling off this screen -
    459          					// remove the last key added and save the data.
    460          						GUI_GetOrg(&x, &y);
   \                     ??_cbKeyboardCallback_9:
   \   00000110   04108DE2           ADD      R1,SP,#+4
   \   00000114   18008DE2           ADD      R0,SP,#+24
   \   00000118   ........           BL       GUI_GetOrg
    461          						if ((y != YSIZE_PHYS) && (y != 0))
   \   0000011C   04009DE5           LDR      R0,[SP, #+4]
   \   00000120   440F50E3           CMP      R0,#+272
   \   00000124   00005013           CMPNE    R0,#+0
   \   00000128   8B00000A           BEQ      ??_cbKeyboardCallback_5
    462          						{
    463          							EDIT_AddKey(key->Text, (int)GUI_KEY_BACKSPACE);
   \   0000012C   0810A0E3           MOV      R1,#+8
   \   00000130   A80094E5           LDR      R0,[R4, #+168]
   \   00000134   ........           BL       EDIT_AddKey
    464          							SaveData(KB_SAVE_MSG, key);
   \   00000138   1A10A0E3           MOV      R1,#+26
   \   0000013C   08108DE5           STR      R1,[SP, #+8]
   \   00000140   140094E5           LDR      R0,[R4, #+20]
   \   00000144   101094E5           LDR      R1,[R4, #+16]
   \   00000148   012080E2           ADD      R2,R0,#+1
   \   0000014C   A80094E5           LDR      R0,[R4, #+168]
   \   00000150   ........           BL       EDIT_GetText
   \   00000154   041094E5           LDR      R1,[R4, #+4]
   \   00000158   0100A0E3           MOV      R0,#+1
   \   0000015C   0C108DE5           STR      R1,[SP, #+12]
   \   00000160   081094E5           LDR      R1,[R4, #+8]
   \   00000164   10108DE5           STR      R1,[SP, #+16]
   \   00000168   0C1094E5           LDR      R1,[R4, #+12]
   \   0000016C   14108DE5           STR      R1,[SP, #+20]
   \   00000170   0100C4E5           STRB     R0,[R4, #+1]
   \   00000174   14408DE5           STR      R4,[SP, #+20]
   \   00000178   08108DE2           ADD      R1,SP,#+8
   \                     ??_cbKeyboardCallback_10:
   \   0000017C   040094E5           LDR      R0,[R4, #+4]
   \   00000180   ........           BL       WM_SendMessage
    465          						}
    466          					}
   \   00000184   740000EA           B        ??_cbKeyboardCallback_5
    467          					break;
    468          
    469          				case WM_NOTIFICATION_CLICKED:
    470          					switch(Id - GUI_ID_USER)
   \                     ??_cbKeyboardCallback_8:
   \   00000188   FF00E0E3           MVN      R0,#+255
   \   0000018C   700EC0E3           BIC      R0,R0,#0x700
   \   00000190   070080E0           ADD      R0,R0,R7
   \   00000194   020040E2           SUB      R0,R0,#+2
   \   00000198   030050E3           CMP      R0,#+3
   \   0000019C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_cbKeyboardCallback_0:
   \   000001A0   5400008A           BHI      ??_cbKeyboardCallback_11
   \   000001A4   020000EA           B        ??_cbKeyboardCallback_12
   \   000001A8   2F0000EA           B        ??_cbKeyboardCallback_13
   \   000001AC   070000EA           B        ??_cbKeyboardCallback_14
   \   000001B0   3E0000EA           B        ??_cbKeyboardCallback_15
    471          					{
    472          					case NUM_BTN_ID:
    473          						if(key->DisplayType == ALPHA)
   \                     ??_cbKeyboardCallback_12:
   \   000001B4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001B8   010050E3           CMP      R0,#+1
    474          							key->SetupKeyboard(NUMERIC);
   \   000001BC   0210A003           MOVEQ    R1,#+2
   \   000001C0   0110A013           MOVNE    R1,#+1
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   ........           BL       _ZN8Keyboard13SetupKeyboardE13Keyboard_Type
   \   000001CC   620000EA           B        ??_cbKeyboardCallback_5
    475          						else
    476          							key->SetupKeyboard(ALPHA);
    477          						break;
    478          
    479          					case UPPER_BTN_ID:
    480          						if(key->Caps == false)
   \                     ??_cbKeyboardCallback_14:
   \   000001D0   0210D4E5           LDRB     R1,[R4, #+2]
   \   000001D4   080096E5           LDR      R0,[R6, #+8]
   \   000001D8   000051E3           CMP      R1,#+0
   \   000001DC   0300001A           BNE      ??_cbKeyboardCallback_16
    481          						{
    482          							BUTTON_SetBitmap(pMsg->hWinSrc, BUTTON_BI_UNPRESSED, &bmCapital);
   \   000001E0   ........           LDR      R2,??DataTable51_7
   \   000001E4   ........           BL       BUTTON_SetBitmap
    483          							key->Caps = true;
   \   000001E8   0150A0E3           MOV      R5,#+1
   \   000001EC   020000EA           B        ??_cbKeyboardCallback_17
    484          						}
    485          						else
    486          						{
    487          							BUTTON_SetBitmap(pMsg->hWinSrc, BUTTON_BI_UNPRESSED, &bmNotCapital);
   \                     ??_cbKeyboardCallback_16:
   \   000001F0   ........           LDR      R2,??DataTable51_8
   \   000001F4   0010A0E3           MOV      R1,#+0
   \   000001F8   ........           BL       BUTTON_SetBitmap
    488          							key->Caps = false;
   \                     ??_cbKeyboardCallback_17:
   \   000001FC   0250C4E5           STRB     R5,[R4, #+2]
    489          						}
    490          						key->ChangeKeyboardCase(key->Caps);
   \   00000200   180094E5           LDR      R0,[R4, #+24]
   \   00000204   0250D4E5           LDRB     R5,[R4, #+2]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   5200000A           BEQ      ??_cbKeyboardCallback_5
   \   00000210   2360A0E3           MOV      R6,#+35
   \                     ??_cbKeyboardCallback_18:
   \   00000214   180094E5           LDR      R0,[R4, #+24]
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   0E00000A           BEQ      ??_cbKeyboardCallback_19
   \   00000220   0220A0E3           MOV      R2,#+2
   \   00000224   0D10A0E1           MOV      R1,SP
   \   00000228   ........           BL       BUTTON_GetText
   \   0000022C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000230   000050E3           CMP      R0,#+0
   \   00000234   0800000A           BEQ      ??_cbKeyboardCallback_19
   \   00000238   000055E3           CMP      R5,#+0
   \   0000023C   0100000A           BEQ      ??_cbKeyboardCallback_20
   \   00000240   ........           BL       toupper
   \   00000244   000000EA           B        ??_cbKeyboardCallback_21
   \                     ??_cbKeyboardCallback_20:
   \   00000248   ........           BL       tolower
   \                     ??_cbKeyboardCallback_21:
   \   0000024C   0000CDE5           STRB     R0,[SP, #+0]
   \   00000250   0D10A0E1           MOV      R1,SP
   \   00000254   180094E5           LDR      R0,[R4, #+24]
   \   00000258   ........           BL       BUTTON_SetText
   \                     ??_cbKeyboardCallback_19:
   \   0000025C   044084E2           ADD      R4,R4,#+4
   \   00000260   016056E2           SUBS     R6,R6,#+1
   \   00000264   EAFFFF1A           BNE      ??_cbKeyboardCallback_18
   \   00000268   3B0000EA           B        ??_cbKeyboardCallback_5
    491          						break;
    492          
    493          					case CANCEL_BTN_ID:
    494          						msg.MsgId = KB_CANCEL_MSG;
   \                     ??_cbKeyboardCallback_13:
   \   0000026C   1B10A0E3           MOV      R1,#+27
   \   00000270   1C108DE5           STR      R1,[SP, #+28]
    495          						msg.hWin = key->hParent;
   \   00000274   041094E5           LDR      R1,[R4, #+4]
    496          						msg.hWinSrc = key->_hDlg;
    497          						key->Action = KB_CANCEL;
   \   00000278   0500E0E1           MVN      R0,R5
   \   0000027C   20108DE5           STR      R1,[SP, #+32]
   \   00000280   081094E5           LDR      R1,[R4, #+8]
   \   00000284   24108DE5           STR      R1,[SP, #+36]
   \   00000288   0100C4E5           STRB     R0,[R4, #+1]
    498          						msg.Data.v = key->Source;
   \   0000028C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000290   28108DE5           STR      R1,[SP, #+40]
    499          						msg.Data.p = key;
   \   00000294   28408DE5           STR      R4,[SP, #+40]
    500          						if (TouchPosIsBackKey())
   \   00000298   ........           BL       TouchPosIsBackKey
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   0000000A           BEQ      ??_cbKeyboardCallback_22
    501          							GaugeScreensIgnoreNextKeyRelease();
   \   000002A4   ........           BL       GaugeScreensIgnoreNextKeyRelease
    502          						WM_SendMessage(key->hParent, &msg);
   \                     ??_cbKeyboardCallback_22:
   \   000002A8   1C108DE2           ADD      R1,SP,#+28
   \   000002AC   B2FFFFEA           B        ??_cbKeyboardCallback_10
    503          						break;
    504          
    505          					case SAVE_BTN_ID:
    506          						SaveData(KB_SAVE_AND_EXIT_MSG, key);
   \                     ??_cbKeyboardCallback_15:
   \   000002B0   1C10A0E3           MOV      R1,#+28
   \   000002B4   08108DE5           STR      R1,[SP, #+8]
   \   000002B8   140094E5           LDR      R0,[R4, #+20]
   \   000002BC   101094E5           LDR      R1,[R4, #+16]
   \   000002C0   012080E2           ADD      R2,R0,#+1
   \   000002C4   A80094E5           LDR      R0,[R4, #+168]
   \   000002C8   ........           BL       EDIT_GetText
   \   000002CC   041094E5           LDR      R1,[R4, #+4]
   \   000002D0   0100A0E3           MOV      R0,#+1
   \   000002D4   0C108DE5           STR      R1,[SP, #+12]
   \   000002D8   081094E5           LDR      R1,[R4, #+8]
   \   000002DC   10108DE5           STR      R1,[SP, #+16]
   \   000002E0   0C1094E5           LDR      R1,[R4, #+12]
   \   000002E4   14108DE5           STR      R1,[SP, #+20]
   \   000002E8   0100C4E5           STRB     R0,[R4, #+1]
   \   000002EC   14408DE5           STR      R4,[SP, #+20]
   \   000002F0   08108DE2           ADD      R1,SP,#+8
   \   000002F4   A0FFFFEA           B        ??_cbKeyboardCallback_10
    507          						break;
    508          
    509          					default:
    510          						char c;
    511          						
    512          						if (Id < GUI_ID_USER)
   \                     ??_cbKeyboardCallback_11:
   \   000002F8   800E57E3           CMP      R7,#+2048
   \   000002FC   160000BA           BLT      ??_cbKeyboardCallback_5
    513          							break;
    514          
    515          						if (Id == GUI_ID_USER + DEL_BTN_ID)
   \   00000300   0800A0E3           MOV      R0,#+8
   \   00000304   800E80E3           ORR      R0,R0,#0x800
   \   00000308   000057E1           CMP      R7,R0
   \   0000030C   0600001A           BNE      ??_cbKeyboardCallback_23
    516          							key->hAutoRepeatTimer = WM_CreateTimer(key->_hDlg, 0, AUTO_REPEAT_TIME, 0);
   \   00000310   5E20A0E3           MOV      R2,#+94
   \   00000314   0030A0E3           MOV      R3,#+0
   \   00000318   402F82E3           ORR      R2,R2,#0x100
   \   0000031C   0010A0E3           MOV      R1,#+0
   \   00000320   080094E5           LDR      R0,[R4, #+8]
   \   00000324   ........           BL       WM_CreateTimer
   \   00000328   BC0084E5           STR      R0,[R4, #+188]
    517          
    518          						c = (char)(Id - GUI_ID_USER);
    519          						if(key->Caps == false)
   \                     ??_cbKeyboardCallback_23:
   \   0000032C   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000330   000050E3           CMP      R0,#+0
   \   00000334   0200001A           BNE      ??_cbKeyboardCallback_24
    520          							c = tolower(c);
   \   00000338   FF0007E2           AND      R0,R7,#0xFF
   \   0000033C   ........           BL       tolower
   \   00000340   0070A0E1           MOV      R7,R0
    521          						EDIT_AddKey(key->Text, (int)c);
   \                     ??_cbKeyboardCallback_24:
   \   00000344   FF1007E2           AND      R1,R7,#0xFF
   \   00000348   A80094E5           LDR      R0,[R4, #+168]
   \   0000034C   ........           BL       EDIT_AddKey
    522          						break;
   \   00000350   010000EA           B        ??_cbKeyboardCallback_5
    523          					};
    524          
    525          			}
    526          			break;
    527          
    528          		default:
    529          			WM_DefaultProc(pMsg);
   \                     ??_cbKeyboardCallback_7:
   \   00000354   0600A0E1           MOV      R0,R6
   \   00000358   ........           BL       WM_DefaultProc
   \                     ??_cbKeyboardCallback_5:
   \   0000035C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000360   F080BDE8           POP      {R4-R7,PC}       ;; return
    530          	};
    531          }
    532          

   \                                 In section .text, align 4, keep-with-next
    533          void SaveData(int message, Keyboard *key)
    534          {
   \                     _Z8SaveDataiP8Keyboard:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0140A0E1           MOV      R4,R1
    535          	WM_MESSAGE msg;
    536          
    537          	msg.MsgId = message;
   \   0000000C   00008DE5           STR      R0,[SP, #+0]
    538          	key->GetValue(key->OrgText, key->maxTextLen);
   \   00000010   140094E5           LDR      R0,[R4, #+20]
   \   00000014   101094E5           LDR      R1,[R4, #+16]
   \   00000018   012080E2           ADD      R2,R0,#+1
   \   0000001C   A80094E5           LDR      R0,[R4, #+168]
   \   00000020   ........           BL       EDIT_GetText
    539          	msg.hWin = key->hParent;
   \   00000024   041094E5           LDR      R1,[R4, #+4]
    540          	msg.hWinSrc = key->_hDlg;
    541          	msg.Data.v = key->Source;
    542          	key->Action = KB_SAVE;
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   081094E5           LDR      R1,[R4, #+8]
   \   00000034   08108DE5           STR      R1,[SP, #+8]
   \   00000038   0C1094E5           LDR      R1,[R4, #+12]
   \   0000003C   0C108DE5           STR      R1,[SP, #+12]
   \   00000040   0100C4E5           STRB     R0,[R4, #+1]
    543          	msg.Data.p = key;
   \   00000044   0C408DE5           STR      R4,[SP, #+12]
    544          	WM_SendMessage(key->hParent, &msg);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   040094E5           LDR      R0,[R4, #+4]
   \   00000050   ........           BL       WM_SendMessage
    545          }
   \   00000054   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "Q">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5100               DC8 81, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "W">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5700               DC8 87, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "E">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4500               DC8 69, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "R">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5200               DC8 82, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "T">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5400               DC8 84, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "Y">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5900               DC8 89, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "U">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5500               DC8 85, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "I">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4900               DC8 73, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "O">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4F00               DC8 79, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "P">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5000               DC8 80, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "A">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4100               DC8 65, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "S">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5300               DC8 83, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "D">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4400               DC8 68, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "F">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4600               DC8 70, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "G">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4700               DC8 71, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "H">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4800               DC8 72, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "J">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4A00               DC8 74, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "K">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4B00               DC8 75, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "L">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4C00               DC8 76, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "Z">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5A00               DC8 90, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "X">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5800               DC8 88, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "C">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4300               DC8 67, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "V">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   5600               DC8 86, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "B">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4200               DC8 66, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "N">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4E00               DC8 78, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "M">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   4D00               DC8 77, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "-">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   2D00               DC8 45, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   2E00               DC8 46, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Bksp">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   426B73700000       DC8 66, 107, 115, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "7">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3700               DC8 55, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "8">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3800               DC8 56, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "9">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3900               DC8 57, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "4">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3400               DC8 52, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "5">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3500               DC8 53, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "6">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3600               DC8 54, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "1">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3100               DC8 49, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "2">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3200               DC8 50, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "3">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3300               DC8 51, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "0">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3000               DC8 48, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "<-">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   3C2D0000           DC8 60, 45, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ABC">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   41424300           DC8 65, 66, 67, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Del">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   44656C00           DC8 68, 101, 108, 0

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp Keyboard::subobject ~Keyboard()
   \                     _ZN8KeyboardD2Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R1,??DataTable51
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   00C091E5           LDR      R12,[R1, #+0]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   042081E2           ADD      R2,R1,#+4
   \   00000018   04005CE1           CMP      R12,R4
   \   0000001C   0E00000A           BEQ      `??subobject ~Keyboard_0`
   \   00000020   00C092E5           LDR      R12,[R2, #+0]
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   082081E2           ADD      R2,R1,#+8
   \   0000002C   0430A0E3           MOV      R3,#+4
   \                     `??subobject ~Keyboard_1`:
   \   00000030   04005CE1           CMP      R12,R4
   \   00000034   04E09214           LDRNE    LR,[R2], #+4
   \   00000038   01008012           ADDNE    R0,R0,#+1
   \   0000003C   04005E11           CMPNE    LR,R4
   \   00000040   0500000A           BEQ      `??subobject ~Keyboard_0`
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   04C092E4           LDR      R12,[R2], #+4
   \   0000004C   013053E2           SUBS     R3,R3,#+1
   \   00000050   F6FFFF1A           BNE      `??subobject ~Keyboard_1`
   \   00000054   04005CE1           CMP      R12,R4
   \   00000058   0500001A           BNE      `??subobject ~Keyboard_2`
   \                     `??subobject ~Keyboard_0`:
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   002181E7           STR      R2,[R1, +R0, LSL #+2]
   \   00000064   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000068   282080E5           STR      R2,[R0, #+40]
   \   0000006C   080094E5           LDR      R0,[R4, #+8]
   \   00000070   ........           BL       WM_DeleteWindow
   \                     `??subobject ~Keyboard_2`:
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   30000000           DC8      "0",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   41424300           DC8      "ABC"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_1:
   \   00000000   44656C00           DC8      "Del"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     kb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_1:
   \   00000000   ........           DC32     _Z19_cbKeyboardCallbackP10WM_MESSAGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_2:
   \   00000000   ........           DC32     GUI_Font24B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_3:
   \   00000000   ........           DC32     bmKeyboardBlank

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_4:
   \   00000000   ........           DC32     TopKeysChar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_5:
   \   00000000   ........           DC32     TopKeysChar+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_6:
   \   00000000   ........           DC32     TopKeysChar+0x4C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_7:
   \   00000000   ........           DC32     bmCapital

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_8:
   \   00000000   ........           DC32     bmNotCapital

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_9:
   \   00000000   ........           DC32     bmNumPadBlank

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_10:
   \   00000000   ........           DC32     TopKeysChar+0x68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_11:
   \   00000000   ........           DC32     TopKeysChar+0x74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_12:
   \   00000000   ........           DC32     TopKeysChar+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_13:
   \   00000000   ........           DC32     bmDeleteKey

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_14:
   \   00000000   ........           DC32     GUI_Font32B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Space">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   537061636500       DC8 83, 112, 97, 99, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ".-123">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   2E2D31323300       DC8 46, 45, 49, 50, 51, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Cancel">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   43616E63656C       DC8 67, 97, 110, 99, 101, 108, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Save">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   536176650000       DC8 83, 97, 118, 101, 0, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     Keyboard::ChangeKeyboardCase(bool)
                                        24
     Keyboard::GetValue(char *, int)
                                         8
     Keyboard::Keyboard(int, int, int, int, Keyboard_Type, char *, char *, char, int, int, GUI_HWIN, char)
                                        64
     Keyboard::SetBtnStd(signed long)
                                         8
     Keyboard::SetupKeyboard(Keyboard_Type)
                                        64
     Keyboard::subobject Keyboard(int, int, int, int, Keyboard_Type, char *, char *, char, int, int, GUI_HWIN, char)
                                        72
     Keyboard::subobject ~Keyboard()
                                         8
     Keyboard::~Keyboard()               8
     SaveData(int, Keyboard *)          24
     _cbKeyboardCallback(WM_MESSAGE *)
                                        64


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     TopKeysChar                     152
     MidKeysChar
     LowKeysChar
     NumOneKeys
     NumTwoKeys
     NumThreeKeys
     BottomKeysChar                   16
     NumKeysChar                      36
     NumFourKeys                      12
     NumKeys                          48
     kb                               80
     kbId
     Keyboard::subobject Keyboard(int, int, int, int, Keyboard_Type, char *, char *, char, int, int, GUI_HWIN, char)
                                      92
     Keyboard::Keyboard(int, int, int, int, Keyboard_Type, char *, char *, char, int, int, GUI_HWIN, char)
                                     468
     Keyboard::SetupKeyboard(Keyboard_Type)
                                    1908
     Keyboard::SetBtnStd(signed long)
                                      72
     Keyboard::ChangeKeyboardCase(bool)
                                     124
     Keyboard::GetValue(char *, int)
                                      12
     Keyboard::~Keyboard()           128
     _cbKeyboardCallback(WM_MESSAGE *)
                                     868
     SaveData(int, Keyboard *)        92
     ?<Constant "Q">                   2
     ?<Constant "W">                   2
     ?<Constant "E">                   2
     ?<Constant "R">                   2
     ?<Constant "T">                   2
     ?<Constant "Y">                   2
     ?<Constant "U">                   2
     ?<Constant "I">                   2
     ?<Constant "O">                   2
     ?<Constant "P">                   2
     ?<Constant "A">                   2
     ?<Constant "S">                   2
     ?<Constant "D">                   2
     ?<Constant "F">                   2
     ?<Constant "G">                   2
     ?<Constant "H">                   2
     ?<Constant "J">                   2
     ?<Constant "K">                   2
     ?<Constant "L">                   2
     ?<Constant "Z">                   2
     ?<Constant "X">                   2
     ?<Constant "C">                   2
     ?<Constant "V">                   2
     ?<Constant "B">                   2
     ?<Constant "N">                   2
     ?<Constant "M">                   2
     ?<Constant "-">                   2
     ?<Constant ".">                   2
     ?<Constant "Bksp">                8
     ?<Constant "7">                   2
     ?<Constant "8">                   2
     ?<Constant "9">                   2
     ?<Constant "4">                   2
     ?<Constant "5">                   2
     ?<Constant "6">                   2
     ?<Constant "1">                   2
     ?<Constant "2">                   2
     ?<Constant "3">                   2
     ?<Constant "0">                   2
     ?<Constant "<-">                  4
     ?<Constant "ABC">                 4
     ?<Constant "Del">                 4
     Keyboard::subobject ~Keyboard()
                                     124
     ??DataTable47                     4
     ??DataTable49                     4
     ??DataTable49_1                   4
     ??DataTable51                     4
     ??DataTable51_1                   4
     ??DataTable51_2                   4
     ??DataTable51_3                   4
     ??DataTable51_4                   4
     ??DataTable51_5                   4
     ??DataTable51_6                   4
     ??DataTable51_7                   4
     ??DataTable51_8                   4
     ??DataTable51_9                   4
     ??DataTable51_10                  4
     ??DataTable51_11                  4
     ??DataTable51_12                  4
     ??DataTable51_13                  4
     ??DataTable51_14                  4
     ?<Constant "Space">               8
     ?<Constant ".-123">               8
     ?<Constant "Cancel">              8
     ?<Constant "Save">                8

 
    80 bytes in section .bss
   264 bytes in section .data
    96 bytes in section .rodata
 3 992 bytes in section .text
 
 3 992 bytes of CODE  memory
    96 bytes of CONST memory
   344 bytes of DATA  memory

Errors: none
Warnings: none
