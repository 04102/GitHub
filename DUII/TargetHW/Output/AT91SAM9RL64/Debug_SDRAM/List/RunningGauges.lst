###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\RunningGauges.c                             #
#    Command line =  C:\DUII\DUII\RunningGauges.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Ru #
#                    nningGauges.lst                                          #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Run #
#                    ningGauges.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\RunningGauges.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include "DUII.h"
     25          #include "GUI.h"
     26          #include "commondefs.h"
     27          #include "DIALOG.h"
     28          #include "ConfigScreens.h"
     29          #include "GeneralConfig.h"
     30          #include "GaugeScreen.h"
     31          #include "FlashReadWrite.h"
     32          #include "GMeterScreen.h"
     33          #include "DualGaugeScreen.h"
     34          #include "RunningGauges.h"
     35          #include "DigitalGaugeScreen.h"
     36          #include "DriveScreen.h"
     37          #include "RPMSweepScreen.h"
     38          #include "GPSInfoScreen.h"
     39          #include "LinearGaugeScreen.h"
     40          #include "ChronoScreen.h"
     41          #ifdef PROFILER
     42          #include "ProfilerScreen.h"
     43          #endif
     44          
     45          
     46          /*********************************************************************
     47          *
     48          *       Public Data
     49          *
     50          **********************************************************************
     51          */
     52          
     53          /*********************************************************************
     54          *
     55          *       External data and code
     56          *
     57          **********************************************************************
     58          */
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmfourwayarrow;
     60          extern int screen_scrolling;
     61          
     62          /*********************************************************************
     63          *
     64          *       Public code
     65          *
     66          **********************************************************************
     67          */
     68          
     69          /*********************************************************************
     70          *
     71          *       Local Prototypes
     72          *
     73          **********************************************************************
     74          */
     75          
     76          
     77          /*********************************************************************
     78          *
     79          *       Local Variables
     80          *
     81          **********************************************************************
     82          */

   \                                 In section .data, align 4
     83          static WM_HWIN hRunningGauges;
   \                     hRunningGauges:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \   00000004   00000000           DC32 0
   \   00000008   00000000           DC8 0, 0, 0, 0
     84          static WM_HWIN peekingScreenHandle = 0;
     85          static int peekingScreenID;
     86          
     87          
     88          #define	NOT_MOVING	0
     89          #define	MOVING_IN_X	1
     90          #define	MOVING_IN_Y	2
     91          
     92          struct GAUGE_SCREEN_LIST GaugesScreenList[NUM_GAUGE_SCREENS+1] = {
   \                     GaugesScreenList:
   \   0000000C   01000000....       DC32 1, Display_GaugeScreen, 6, Display_RPMSweepScreen, 4
   \              ....06000000
   \              ........0400
   \              0000        
   \   00000020   ........0700       DC32 DisplayMultiAnalogGaugesScreen, 7, Display_DigitalGaugeScreen, 0
   \              0000........
   \              00000000    
   \   00000030   ........0900       DC32 Display_GMeterScreen, 9, DisplayTestInfo, 10
   \              0000........
   \              0A000000    
   \   00000040   ........FFFF       DC32 DisplayProfilerScreen, -1, 0H
   \              FFFF00000000
     93          	{ ANALOG_GAUGE, Display_GaugeScreen },
     94          	{ RPM_SWEEP_GAUGE, Display_RPMSweepScreen },				// default - index = 1 (set in SetDefaultSystemData)
     95          	{ MULTI_ANALOG_GAUGES, DisplayMultiAnalogGaugesScreen },
     96          	{ DIGITAL_GAUGE, Display_DigitalGaugeScreen },
     97          	{ GMETER, Display_GMeterScreen },
     98          	{ TEST_INFO_SCREEN, DisplayTestInfo },
     99          #ifdef PROFILER
    100          	{ PROFILER_SCREEN, DisplayProfilerScreen },
    101          #endif
    102          	{ -1, NULL }
    103          };
    104          
    105          struct GAUGE_SCREEN_LIST DriveScreenList[NUM_DRIVE_SCREENS+1] = {
   \                     DriveScreenList:
   \   0000004C   00000000....       DC32 0, Display_GMeterScreen, 1, Display_GaugeScreen, 5
   \              ....01000000
   \              ........0500
   \              0000        
   \   00000060   ........0600       DC32 Display_DriveScreen, 6, Display_RPMSweepScreen, 4
   \              0000........
   \              04000000    
   \   00000070   ........0800       DC32 DisplayMultiAnalogGaugesScreen, 8, DisplayGPSInfo, 9
   \              0000........
   \              09000000    
   \   00000080   ........0A00       DC32 DisplayTestInfo, 10, DisplayProfilerScreen, -1, 0H
   \              0000........
   \              FFFFFFFF0000
   \              0000        
    106          	{ GMETER, Display_GMeterScreen },
    107          	{ ANALOG_GAUGE, Display_GaugeScreen },
    108          	{ DRIVE_MODE_SCREEN, Display_DriveScreen },					// default - index = 2 (set in SetDefaultSystemData)
    109          	{ RPM_SWEEP_GAUGE, Display_RPMSweepScreen },
    110          	{ MULTI_ANALOG_GAUGES, DisplayMultiAnalogGaugesScreen },
    111          	{ GPS_INFO_SCREEN, DisplayGPSInfo },
    112          //	{ CHRONOGRAPH_SCREEN, DisplayChronoScreen },
    113          	{ TEST_INFO_SCREEN, DisplayTestInfo },
    114          #ifdef PROFILER
    115          	{ PROFILER_SCREEN, DisplayProfilerScreen },
    116          #endif
    117          	{ -1, NULL }
    118          };
    119          
    120          
    121          struct GAUGE_SCREEN_LIST InstrumentsScreenList[NUM_INSTRUMENTS_SCREENS+1] = {
   \                     InstrumentsScreenList:
   \   00000094   00000000....       DC32 0, Display_GMeterScreen, 1, Display_GaugeScreen, 5
   \              ....01000000
   \              ........0500
   \              0000        
   \   000000A8   ........0600       DC32 Display_DriveScreen, 6, Display_RPMSweepScreen, 4
   \              0000........
   \              04000000    
   \   000000B8   ........0800       DC32 DisplayMultiAnalogGaugesScreen, 8, DisplayGPSInfo, 9
   \              0000........
   \              09000000    
   \   000000C8   ........0A00       DC32 DisplayTestInfo, 10, DisplayProfilerScreen, -1, 0H
   \              0000........
   \              FFFFFFFF0000
   \              0000        
    122          	{ GMETER, Display_GMeterScreen },
    123          	{ ANALOG_GAUGE, Display_GaugeScreen },						// default - index = 1 (set in SetDefaultSystemData)
    124          	{ DRIVE_MODE_SCREEN, Display_DriveScreen },
    125          	{ RPM_SWEEP_GAUGE, Display_RPMSweepScreen },
    126          	{ MULTI_ANALOG_GAUGES, DisplayMultiAnalogGaugesScreen },
    127          	{ GPS_INFO_SCREEN, DisplayGPSInfo },
    128          //	{ CHRONOGRAPH_SCREEN, DisplayChronoScreen },
    129          	{ TEST_INFO_SCREEN, DisplayTestInfo },
    130          #ifdef PROFILER
    131          	{ PROFILER_SCREEN, DisplayProfilerScreen },
    132          #endif
    133          	{ -1, NULL }
    134          };
    135          
    136          
    137          

   \                                 In section .text, align 4, keep-with-next
    138          WM_HWIN GetRunningGaugesWindowHandle(void)
    139          {
    140          	return hRunningGauges;
   \                     GetRunningGaugesWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable3
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    141          }
    142          

   \                                 In section .text, align 4, keep-with-next
    143          void SetRunningGaugesWindowHandle(WM_HWIN hWin)
    144          {
    145          	hRunningGauges = hWin;
   \                     SetRunningGaugesWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable3
   \   00000004   000081E5           STR      R0,[R1, #+0]
    146          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    147          
    148          

   \                                 In section .text, align 4, keep-with-next
    149          void GaugesScreensCallback(WM_MESSAGE * pMsg)
    150          {
   \                     GaugesScreensCallback:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    151          	if (pMsg->MsgId == WM_TIMER)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   1310A0E3           MOV      R1,#+19
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0300001A           BNE      ??GaugesScreensCallback_0
    152          	{
    153          		if (!CheckSlideoutTimer(pMsg->Data.v))
   \   0000001C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000020   ........           BL       CheckSlideoutTimer
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100001A           BNE      ??GaugesScreensCallback_1
    154          			WM_DefaultProc(pMsg);
    155          	}
    156          	else WM_DefaultProc(pMsg);
   \                     ??GaugesScreensCallback_0:
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_DefaultProc
    157          }
   \                     ??GaugesScreensCallback_1:
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    158          
    159          /*********************************************************************
    160          *
    161          */

   \                                 In section .text, align 4, keep-with-next
    162          void RunningGauges(int screen, WM_HWIN hPrev)
    163          {
   \                     RunningGauges:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0100B0E1           MOVS     R0,R1
    164          	struct GAUGE_SCREEN_LIST *pScreenList;
    165          
    166          	if (hPrev)
   \   00000010   0000000A           BEQ      ??RunningGauges_0
    167          		WM_DeleteWindow(hPrev);
   \   00000014   ........           BL       WM_DeleteWindow
    168          
    169          	if (peekingScreenHandle)
   \                     ??RunningGauges_0:
   \   00000018   ........           LDR      R4,??DataTable3
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0200000A           BEQ      ??RunningGauges_1
    170          	{
    171          	  WM_DeleteWindow(peekingScreenHandle);
   \   00000028   ........           BL       WM_DeleteWindow
    172          	  peekingScreenHandle = 0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   040084E5           STR      R0,[R4, #+4]
    173          	}
    174          
    175          	GUI_Clear();
   \                     ??RunningGauges_1:
   \   00000034   ........           BL       GUI_Clear
    176          
    177          	if (screen == -1)
    178          		screen = 0;
    179          
    180          	if (selectedRaceMode == DRIVE_MODE)
   \   00000038   ........           LDR      R0,??DataTable3_1
   \   0000003C   010075E3           CMN      R5,#+1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   0050A003           MOVEQ    R5,#+0
   \   00000048   030050E3           CMP      R0,#+3
   \   0000004C   0300001A           BNE      ??RunningGauges_2
    181          	{
    182          		SetLastScreen(DRIVE_MODE_SCREEN_TYPE, screen);
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   ........           BL       SetLastScreen
    183          		pScreenList = DriveScreenList;
   \   00000058   4C6084E2           ADD      R6,R4,#+76
   \   0000005C   090000EA           B        ??RunningGauges_3
    184          	}
    185          	else if (selectedRaceMode == INSTRUMENTS_MODE)
   \                     ??RunningGauges_2:
   \   00000060   020050E3           CMP      R0,#+2
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0300001A           BNE      ??RunningGauges_4
    186          	{
    187          		SetLastScreen(INSTRUMENTS_MODE_SCREEN_TYPE, screen);
   \   0000006C   0400A0E3           MOV      R0,#+4
   \   00000070   ........           BL       SetLastScreen
    188          		pScreenList = InstrumentsScreenList;
   \   00000074   946084E2           ADD      R6,R4,#+148
   \   00000078   020000EA           B        ??RunningGauges_3
    189          	}
    190          	else
    191          	{
    192          		SetLastScreen(GAUGES_SCREEN_TYPE, screen);
   \                     ??RunningGauges_4:
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SetLastScreen
    193          		pScreenList = GaugesScreenList;
   \   00000084   0C6084E2           ADD      R6,R4,#+12
    194          	}
    195          
    196          	//
    197          	// NOTE: WHEN CREATING THIS WINDOW AS A WINDOW INSTEAD OF JUST DRAWING THE CONTROLS TO
    198          	// THE DESKTOP THE BOTTONS WILL SCROLL WHEN PRESSED IF THEIR PARENTS ARE SET TO 0.
    199          	// SETTING THE PARENTS TO THIS WINDOW STOPS THE SCROLLING MOTION WHEN THE BUTTONS ARE PRESSED.
    200          	//
    201          	if ((hRunningGauges = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW, GaugesScreensCallback, 0)) <= 0)
   \                     ??RunningGauges_3:
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   08008DE5           STR      R0,[SP, #+8]
   \   00000090   ........           LDR      R0,??DataTable3_2
   \   00000094   443FA0E3           MOV      R3,#+272
   \   00000098   04008DE5           STR      R0,[SP, #+4]
   \   0000009C   0200A0E3           MOV      R0,#+2
   \   000000A0   00008DE5           STR      R0,[SP, #+0]
   \   000000A4   782FA0E3           MOV      R2,#+480
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   ........           BL       WM_CreateWindow
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   010050E3           CMP      R0,#+1
   \   000000BC   000000AA           BGE      ??RunningGauges_5
    202          		SystemError();
   \   000000C0   ........           BL       SystemError
    203          
    204          	// Display requested screen
    205          	pScreenList[screen].constructor(hRunningGauges);
   \                     ??RunningGauges_5:
   \   000000C4   851186E0           ADD      R1,R6,R5, LSL #+3
   \   000000C8   000094E5           LDR      R0,[R4, #+0]
   \   000000CC   041091E5           LDR      R1,[R1, #+4]
   \   000000D0   31FF2FE1           BLX      R1
    206          
    207          	screen_scrolling = ACTIVE;
   \   000000D4   ........           LDR      R0,??DataTable3_3
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   001080E5           STR      R1,[R0, #+0]
    208          
    209          }
   \   000000E0   10D08DE2           ADD      SP,SP,#+16
   \   000000E4   7080BDE8           POP      {R4-R6,PC}       ;; return
    210          

   \                                 In section .text, align 4, keep-with-next
    211          void rgDeleteScreen(int index)
    212          {
   \                     rgDeleteScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
    213            	if (GetCurrentScreen() != peekingScreenID)
   \   00000004   ........           BL       GetCurrentScreen
   \   00000008   ........           LDR      R4,??DataTable3
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   010050E1           CMP      R0,R1
    214          		if (peekingScreenHandle)
   \   00000014   04009415           LDRNE    R0,[R4, #+4]
   \   00000018   00005013           CMPNE    R0,#+0
   \   0000001C   0000000A           BEQ      ??rgDeleteScreen_0
    215          		  WM_DeleteWindow(peekingScreenHandle);
   \   00000020   ........           BL       WM_DeleteWindow
    216          
    217          	peekingScreenID = -1;
   \                     ??rgDeleteScreen_0:
   \   00000024   0000E0E3           MVN      R0,#+0
   \   00000028   080084E5           STR      R0,[R4, #+8]
    218          	peekingScreenHandle = 0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   040084E5           STR      R0,[R4, #+4]
    219          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     hRunningGauges

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     selectedRaceMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     GaugesScreensCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     screen_scrolling
    220          
    221          
    222          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     GaugesScreensCallback             8
     GetRunningGaugesWindowHandle      0
     RunningGauges                    32
     SetRunningGaugesWindowHandle      0
     rgDeleteScreen                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     hRunningGauges                220
     peekingScreenHandle
     peekingScreenID
     GaugesScreenList
     DriveScreenList
     InstrumentsScreenList
     GetRunningGaugesWindowHandle   12
     SetRunningGaugesWindowHandle   12
     GaugesScreensCallback          56
     RunningGauges                 232
     rgDeleteScreen                 56
     ??DataTable3                    4
     ??DataTable3_1                  4
     ??DataTable3_2                  4
     ??DataTable3_3                  4

 
 220 bytes in section .data
 384 bytes in section .text
 
 384 bytes of CODE memory
 220 bytes of DATA memory

Errors: none
Warnings: none
