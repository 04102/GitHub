###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_Color.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_Color.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\BU #
#                    TTON_Color.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\BUT #
#                    TON_Color.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_Color.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_Color.c
     19          Purpose     : Implementation of button widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "BUTTON_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       BUTTON_GetBkColor  
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          GUI_COLOR BUTTON_GetBkColor(BUTTON_Handle hObj,unsigned int Index) {
   \                     BUTTON_GetBkColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     38            GUI_COLOR Color = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     39            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0700000A           BEQ      ??BUTTON_GetBkColor_0
     40              BUTTON_Obj * pObj;
     41              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     42              pObj = BUTTON_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     43              if (Index < GUI_COUNTOF(pObj->Props.aBkColor)) {
   \   00000024   030055E3           CMP      R5,#+3
     44                Color = pObj->Props.aBkColor[Index];
   \   00000028   05018030           ADDCC    R0,R0,R5, LSL #+2
   \   0000002C   34609035           LDRCC    R6,[R0, #+52]
     45              }
     46              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     47              WM_UNLOCK();
   \   00000034   ........           BL       GUI_Unlock
     48            }
     49            return Color;
   \                     ??BUTTON_GetBkColor_0:
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       BUTTON_SetBkColor
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          void BUTTON_SetBkColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
   \                     BUTTON_SetBkColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     57            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??BUTTON_SetBkColor_0
     58              BUTTON_Obj* pObj;
     59              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     60              pObj = BUTTON_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     61              if (Index < GUI_COUNTOF(pObj->Props.aBkColor)) {
   \   00000024   030055E3           CMP      R5,#+3
     62                pObj->Props.aBkColor[Index] = Color;
   \   00000028   05018030           ADDCC    R0,R0,R5, LSL #+2
   \   0000002C   34608035           STRCC    R6,[R0, #+52]
     63              }
     64              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     65              BUTTON_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
     66              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
     67            }
     68          }
   \                     ??BUTTON_SetBkColor_0:
   \   00000040   7080BDE8           POP      {R4-R6,PC}       ;; return
     69          
     70          /*********************************************************************
     71          *
     72          *       BUTTON_GetTextColor  
     73          */

   \                                 In section .text, align 4, keep-with-next
     74          GUI_COLOR BUTTON_GetTextColor(BUTTON_Handle hObj,unsigned int Index) {
   \                     BUTTON_GetTextColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     75            GUI_COLOR Color = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     76            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0700000A           BEQ      ??BUTTON_GetTextColor_0
     77              BUTTON_Obj * pObj;
     78              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     79              pObj = BUTTON_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     80              if (Index < GUI_COUNTOF(pObj->Props.aTextColor)) {
   \   00000024   030055E3           CMP      R5,#+3
     81                Color = pObj->Props.aTextColor[Index];
   \   00000028   05018030           ADDCC    R0,R0,R5, LSL #+2
   \   0000002C   40609035           LDRCC    R6,[R0, #+64]
     82              }
     83              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
     84              WM_UNLOCK();
   \   00000034   ........           BL       GUI_Unlock
     85            }
     86            return Color;
   \                     ??BUTTON_GetTextColor_0:
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
     87          }
     88          
     89          /*********************************************************************
     90          *
     91          *       BUTTON_SetTextColor
     92          */

   \                                 In section .text, align 4, keep-with-next
     93          void BUTTON_SetTextColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
   \                     BUTTON_SetTextColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     94            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??BUTTON_SetTextColor_0
     95              BUTTON_Obj * pObj;
     96              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     97              pObj = BUTTON_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     98              if (Index < GUI_COUNTOF(pObj->Props.aTextColor)) {
   \   00000024   030055E3           CMP      R5,#+3
     99                pObj->Props.aTextColor[Index] = Color;
   \   00000028   05018030           ADDCC    R0,R0,R5, LSL #+2
   \   0000002C   40608035           STRCC    R6,[R0, #+64]
    100              }
    101              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    102              BUTTON_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    103              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
    104            }
    105          }
   \                     ??BUTTON_SetTextColor_0:
   \   00000040   7080BDE8           POP      {R4-R6,PC}       ;; return
    106          
    107          /*********************************************************************
    108          *
    109          *       BUTTON_GetFrameColor
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          GUI_COLOR BUTTON_GetFrameColor(BUTTON_Handle hObj) {
   \                     BUTTON_GetFrameColor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    112            GUI_COLOR Color = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    113            if (hObj) {
   \   00000010   0500000A           BEQ      ??BUTTON_GetFrameColor_0
    114              BUTTON_Obj * pObj;
    115              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    116              pObj = BUTTON_LOCK_H(hObj);
    117              Color = pObj->Props.FrameColor;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   505090E5           LDR      R5,[R0, #+80]
    118              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    119              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    120            }
    121            return Color;
   \                     ??BUTTON_GetFrameColor_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       BUTTON_SetFrameColor
    127          */

   \                                 In section .text, align 4, keep-with-next
    128          void BUTTON_SetFrameColor(BUTTON_Handle hObj, GUI_COLOR Color) {
   \                     BUTTON_SetFrameColor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    129            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0700000A           BEQ      ??BUTTON_SetFrameColor_0
    130              BUTTON_Obj * pObj;
    131              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    132              pObj = BUTTON_LOCK_H(hObj);
    133              pObj->Props.FrameColor = Color;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   505080E5           STR      R5,[R0, #+80]
    134              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    135              BUTTON_Invalidate(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_InvalidateWindow
    136              WM_UNLOCK();
   \   00000034   ........           BL       GUI_Unlock
    137            }
    138          }
   \                     ??BUTTON_SetFrameColor_0:
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    139          
    140          #else                            /* Avoid problems with empty object modules */
    141            void BUTTON_Color_C(void);
    142            void BUTTON_Color_C(void) {}
    143          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     BUTTON_GetBkColor        16
     BUTTON_GetFrameColor     16
     BUTTON_GetTextColor      16
     BUTTON_SetBkColor        16
     BUTTON_SetFrameColor     16
     BUTTON_SetTextColor      16


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     BUTTON_GetBkColor      64
     BUTTON_SetBkColor      68
     BUTTON_GetTextColor    64
     BUTTON_SetTextColor    68
     BUTTON_GetFrameColor   56
     BUTTON_SetFrameColor   64

 
 384 bytes in section .text
 
 384 bytes of CODE memory

Errors: none
Warnings: none
