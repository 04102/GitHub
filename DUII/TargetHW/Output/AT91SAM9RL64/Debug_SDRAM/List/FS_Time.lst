###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:17 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Time.c                            #
#    Command line =  C:\DUII\TargetHW\FS\FS_Time.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FS #
#                    _Time.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FS_ #
#                    Time.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Time.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Time.c
     19          Purpose     : Implementation of file system's time stamp functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          #include "FS_ConfDefaults.h"        /* FS Configuration */
     30          #include "FS_Int.h"
     31          #include "FS_CLib.h"
     32          
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code, internal code
     37          *
     38          **********************************************************************
     39          */
     40          
     41          
     42          /*********************************************************************
     43          *
     44          *       FS__GetFileTime
     45          *
     46          *  Description:
     47          *    Internal version of FS_GetFileTime.
     48          *    Gets the creation timestamp of a given file/directory name.
     49          *
     50          *  Parameters:
     51          *
     52          */

   \                                 In section .text, align 4, keep-with-next
     53          int FS__GetFileTimeEx(const char * pName, U32 * pTimeStamp, int TimeIndex) {
   \                     FS__GetFileTimeEx:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
     54            int          r;
     55            int          TypeMask;
     56            const char * s;
     57            FS_VOLUME *  pVolume;
     58          
     59            r = -1;
   \   00000010   0060E0E3           MVN      R6,#+0
     60            /* Find correct FSL (device:unit:name) */
     61            pVolume = FS__FindVolume(pName, &s);
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   ........           BL       FS__FindVolume
   \   0000001C   0070B0E1           MOVS     R7,R0
     62            if (pVolume) {
   \   00000020   0E00000A           BEQ      ??FS__GetFileTimeEx_0
     63              if ((FS__AutoMount(pVolume) & FS_MOUNT_R) == FS_MOUNT_R)  {
   \   00000024   ........           BL       FS__AutoMount
   \   00000028   010010E3           TST      R0,#0x1
   \   0000002C   0B00000A           BEQ      ??FS__GetFileTimeEx_0
     64                switch (TimeIndex) {
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0300000A           BEQ      ??FS__GetFileTimeEx_1
   \   00000038   020055E3           CMP      R5,#+2
   \   0000003C   0C00000A           BEQ      ??FS__GetFileTimeEx_2
   \   00000040   0900003A           BCC      ??FS__GetFileTimeEx_3
   \   00000044   050000EA           B        ??FS__GetFileTimeEx_0
     65                case FS_FILETIME_CREATE:
     66                  TypeMask = FS_DIRENTRY_GET_TIMESTAMP_CREATE;
   \                     ??FS__GetFileTimeEx_1:
   \   00000048   0230A0E3           MOV      R3,#+2
     67                  break;
     68                case FS_FILETIME_ACCESS:
     69                  TypeMask = FS_DIRENTRY_GET_TIMESTAMP_ACCESS;
     70                  break;
     71                case FS_FILETIME_MODIFY:
     72                  TypeMask = FS_DIRENTRY_GET_TIMESTAMP_MODIFY;
     73                  break;
     74                default:
     75                  return -1;  // Unknown TimeIndex used
     76                }
     77                FS_LOCK_DRIVER(&pVolume->Partition.Device);
     78                r = FS_GETDIRENTRYINFO(pVolume, s, pTimeStamp, TypeMask);
   \                     ??FS__GetFileTimeEx_4:
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   00109DE5           LDR      R1,[SP, #+0]
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   ........           BL       FS_FAT_GetDirEntryInfo
   \   0000005C   0060A0E1           MOV      R6,R0
     79                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
     80              }
     81            }
     82            return r;
   \                     ??FS__GetFileTimeEx_0:
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??FS__GetFileTimeEx_3:
   \   0000006C   0830A0E3           MOV      R3,#+8
   \   00000070   F5FFFFEA           B        ??FS__GetFileTimeEx_4
   \                     ??FS__GetFileTimeEx_2:
   \   00000074   0430A0E3           MOV      R3,#+4
   \   00000078   F3FFFFEA           B        ??FS__GetFileTimeEx_4
     83          }
     84          
     85          /*********************************************************************
     86          *
     87          *       FS_SetFileTime
     88          *
     89          *  Description:
     90          *    Sets the creation timestamp of a given file/directory name.
     91          *
     92          *  Parameters:
     93          *
     94          */

   \                                 In section .text, align 4, keep-with-next
     95          int FS__SetFileTimeEx(const char * pName, U32 TimeStamp, int TimeIndex) {
   \                     FS__SetFileTimeEx:
   \   00000000   72402DE9           PUSH     {R1,R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0240A0E1           MOV      R4,R2
     96            int          r;
     97            const char * s;
     98            int          TypeMask;
     99            FS_VOLUME  * pVolume;
    100          
    101            r = -1;
   \   0000000C   0050E0E3           MVN      R5,#+0
    102            /* Find correct FSL (device:unit:name) */
    103            pVolume = FS__FindVolume(pName, &s);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   ........           BL       FS__FindVolume
   \   00000018   0060B0E1           MOVS     R6,R0
    104            if (pVolume) {
   \   0000001C   0E00000A           BEQ      ??FS__SetFileTimeEx_0
    105              if (FS__AutoMount(pVolume) == FS_MOUNT_RW)  {
   \   00000020   ........           BL       FS__AutoMount
   \   00000024   030050E3           CMP      R0,#+3
   \   00000028   0B00001A           BNE      ??FS__SetFileTimeEx_0
    106                switch (TimeIndex) {
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   0300000A           BEQ      ??FS__SetFileTimeEx_1
   \   00000034   020054E3           CMP      R4,#+2
   \   00000038   0C00000A           BEQ      ??FS__SetFileTimeEx_2
   \   0000003C   0900003A           BCC      ??FS__SetFileTimeEx_3
   \   00000040   050000EA           B        ??FS__SetFileTimeEx_0
    107                case FS_FILETIME_CREATE:
    108                  TypeMask = FS_DIRENTRY_SET_TIMESTAMP_CREATE;
   \                     ??FS__SetFileTimeEx_1:
   \   00000044   0230A0E3           MOV      R3,#+2
    109                  break;
    110                case FS_FILETIME_ACCESS:
    111                  TypeMask = FS_DIRENTRY_SET_TIMESTAMP_ACCESS;
    112                  break;
    113                case FS_FILETIME_MODIFY:
    114                  TypeMask = FS_DIRENTRY_SET_TIMESTAMP_MODIFY;
    115                  break;
    116                default:
    117                  return -1;  // Unknown TimeIndex used
    118                }
    119                FS_LOCK_DRIVER(&pVolume->Partition.Device);
    120                FS_JOURNAL_BEGIN(pVolume);
    121                r = FS_SETDIRENTRYINFO(pVolume, s, &TimeStamp, TypeMask);
   \                     ??FS__SetFileTimeEx_4:
   \   00000048   04208DE2           ADD      R2,SP,#+4
   \   0000004C   00109DE5           LDR      R1,[SP, #+0]
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       FS_FAT_SetDirEntryInfo
   \   00000058   0050A0E1           MOV      R5,R0
    122                FS_JOURNAL_END(pVolume);
    123                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    124              }
    125            }
    126            return r;
   \                     ??FS__SetFileTimeEx_0:
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   08D08DE2           ADD      SP,SP,#+8
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??FS__SetFileTimeEx_3:
   \   00000068   0830A0E3           MOV      R3,#+8
   \   0000006C   F5FFFFEA           B        ??FS__SetFileTimeEx_4
   \                     ??FS__SetFileTimeEx_2:
   \   00000070   0430A0E3           MOV      R3,#+4
   \   00000074   F3FFFFEA           B        ??FS__SetFileTimeEx_4
    127          }
    128          
    129          /*********************************************************************
    130          *
    131          *       Public code
    132          *
    133          **********************************************************************
    134          */
    135          
    136          /*********************************************************************
    137          *
    138          *       FS_GetFileTimeEx
    139          *
    140          *  Description:
    141          *    Gets the timestamp of a given file/directory name.
    142          *
    143          *  Parameters:
    144          *
    145          */

   \                                 In section .text, align 4, keep-with-next
    146          int FS_GetFileTimeEx(const char * pName, U32 * pTimeStamp, int TimeIndex) {
   \                     FS_GetFileTimeEx:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    147            int  r;
    148            FS_LOCK();
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
    149            r = FS__GetFileTimeEx(pName, pTimeStamp, TimeIndex);
   \   0000001C   0070E0E3           MVN      R7,#+0
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FS__FindVolume
   \   0000002C   0040B0E1           MOVS     R4,R0
   \   00000030   1200000A           BEQ      ??FS_GetFileTimeEx_0
   \   00000034   ........           BL       FS__AutoMount
   \   00000038   010010E3           TST      R0,#0x1
   \   0000003C   0F00000A           BEQ      ??FS_GetFileTimeEx_0
   \   00000040   000056E3           CMP      R6,#+0
   \   00000044   0700000A           BEQ      ??FS_GetFileTimeEx_1
   \   00000048   020056E3           CMP      R6,#+2
   \   0000004C   0100000A           BEQ      ??FS_GetFileTimeEx_2
   \   00000050   0200003A           BCC      ??FS_GetFileTimeEx_3
   \   00000054   090000EA           B        ??FS_GetFileTimeEx_0
   \                     ??FS_GetFileTimeEx_2:
   \   00000058   0430A0E3           MOV      R3,#+4
   \   0000005C   020000EA           B        ??FS_GetFileTimeEx_4
   \                     ??FS_GetFileTimeEx_3:
   \   00000060   0830A0E3           MOV      R3,#+8
   \   00000064   000000EA           B        ??FS_GetFileTimeEx_4
   \                     ??FS_GetFileTimeEx_1:
   \   00000068   0230A0E3           MOV      R3,#+2
   \                     ??FS_GetFileTimeEx_4:
   \   0000006C   0520A0E1           MOV      R2,R5
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       FS_FAT_GetDirEntryInfo
   \   0000007C   0070A0E1           MOV      R7,R0
    150            FS_UNLOCK();
   \                     ??FS_GetFileTimeEx_0:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   ........           BL       FS_OS_Unlock
    151            return r;
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   04D08DE2           ADD      SP,SP,#+4
   \   00000090   F080BDE8           POP      {R4-R7,PC}       ;; return
    152          }
    153          
    154          /*********************************************************************
    155          *
    156          *       FS_SetFileTimeEx
    157          *
    158          *  Description:
    159          *    Sets the timestamp of a given file/directory name.
    160          *
    161          *  Parameters:
    162          *
    163          */

   \                                 In section .text, align 4, keep-with-next
    164          int FS_SetFileTimeEx(const char * pName, U32 TimeStamp, int Index) {
   \                     FS_SetFileTimeEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    165            int  r;
    166            FS_LOCK();
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
    167            r = FS__SetFileTimeEx(pName, TimeStamp, Index);
   \   0000001C   04508DE5           STR      R5,[SP, #+4]
   \   00000020   0050E0E3           MVN      R5,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       FS__FindVolume
   \   00000030   0040B0E1           MOVS     R4,R0
   \   00000034   1200000A           BEQ      ??FS_SetFileTimeEx_0
   \   00000038   ........           BL       FS__AutoMount
   \   0000003C   030050E3           CMP      R0,#+3
   \   00000040   0F00001A           BNE      ??FS_SetFileTimeEx_0
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   0700000A           BEQ      ??FS_SetFileTimeEx_1
   \   0000004C   020056E3           CMP      R6,#+2
   \   00000050   0100000A           BEQ      ??FS_SetFileTimeEx_2
   \   00000054   0200003A           BCC      ??FS_SetFileTimeEx_3
   \   00000058   090000EA           B        ??FS_SetFileTimeEx_0
   \                     ??FS_SetFileTimeEx_2:
   \   0000005C   0430A0E3           MOV      R3,#+4
   \   00000060   020000EA           B        ??FS_SetFileTimeEx_4
   \                     ??FS_SetFileTimeEx_3:
   \   00000064   0830A0E3           MOV      R3,#+8
   \   00000068   000000EA           B        ??FS_SetFileTimeEx_4
   \                     ??FS_SetFileTimeEx_1:
   \   0000006C   0230A0E3           MOV      R3,#+2
   \                     ??FS_SetFileTimeEx_4:
   \   00000070   04208DE2           ADD      R2,SP,#+4
   \   00000074   00109DE5           LDR      R1,[SP, #+0]
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       FS_FAT_SetDirEntryInfo
   \   00000080   0050A0E1           MOV      R5,R0
    168            FS_UNLOCK();
   \                     ??FS_SetFileTimeEx_0:
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   ........           BL       FS_OS_Unlock
    169            return r;
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   08D08DE2           ADD      SP,SP,#+8
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
    170          }
    171          
    172          /*********************************************************************
    173          *
    174          *       FS_GetFileTime
    175          *
    176          *  Description:
    177          *    Gets the timestamp of a given file/directory name.
    178          *
    179          *  Parameters:
    180          *
    181          */

   \                                 In section .text, align 4, keep-with-next
    182          int FS_GetFileTime(const char * pName, U32 * pTimeStamp) {
   \                     FS_GetFileTime:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0150A0E1           MOV      R5,R1
    183            int  r;
    184            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    185            r = FS__GetFileTimeEx(pName, pTimeStamp, FS_FILETIME_CREATE);
   \   00000018   0060E0E3           MVN      R6,#+0
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0040B0E1           MOVS     R4,R0
   \   0000002C   0800000A           BEQ      ??FS_GetFileTime_0
   \   00000030   ........           BL       FS__AutoMount
   \   00000034   010010E3           TST      R0,#0x1
   \   00000038   0500000A           BEQ      ??FS_GetFileTime_0
   \   0000003C   0230A0E3           MOV      R3,#+2
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   00109DE5           LDR      R1,[SP, #+0]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       FS_FAT_GetDirEntryInfo
   \   00000050   0060A0E1           MOV      R6,R0
    186            FS_UNLOCK();
   \                     ??FS_GetFileTime_0:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   ........           BL       FS_OS_Unlock
    187            return r;
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   08D08DE2           ADD      SP,SP,#+8
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
    188          }
    189          
    190          /*********************************************************************
    191          *
    192          *       FS_SetFileTime
    193          *
    194          *  Description:
    195          *    Sets the timestamp of a given file/directory name.
    196          *
    197          *  Parameters:
    198          *
    199          */

   \                                 In section .text, align 4, keep-with-next
    200          int FS_SetFileTime(const char * pName, U32 TimeStamp) {
   \                     FS_SetFileTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
    201            int  r;
    202            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    203            r = FS__SetFileTimeEx(pName, TimeStamp,  FS_FILETIME_CREATE);
   \   00000018   04508DE5           STR      R5,[SP, #+4]
   \   0000001C   0050E0E3           MVN      R5,#+0
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FS__FindVolume
   \   0000002C   0040B0E1           MOVS     R4,R0
   \   00000030   0800000A           BEQ      ??FS_SetFileTime_0
   \   00000034   ........           BL       FS__AutoMount
   \   00000038   030050E3           CMP      R0,#+3
   \   0000003C   0500001A           BNE      ??FS_SetFileTime_0
   \   00000040   0230A0E3           MOV      R3,#+2
   \   00000044   04208DE2           ADD      R2,SP,#+4
   \   00000048   00109DE5           LDR      R1,[SP, #+0]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       FS_FAT_SetDirEntryInfo
   \   00000054   0050A0E1           MOV      R5,R0
    204            FS_UNLOCK();
   \                     ??FS_SetFileTime_0:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       FS_OS_Unlock
    205            return r;
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   0CD08DE2           ADD      SP,SP,#+12
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    206          }
    207          
    208          /*********************************************************************
    209          *
    210          *       FS_TimeStampToFileTime
    211          *
    212          *  Description:
    213          *    Fills the pFileTime structure with the given TimeStamp.
    214          *
    215          *  Parameters:
    216          *
    217          */

   \                                 In section .text, align 4, keep-with-next
    218          void FS_TimeStampToFileTime(U32 TimeStamp, FS_FILETIME * pFileTime) {
    219            U16 Date;
    220            U16 Time;
    221          
    222            Date = (U16)(TimeStamp >> 16);
   \                     FS_TimeStampToFileTime:
   \   00000000   2028A0E1           LSR      R2,R0,#+16
    223            Time = (U16)(TimeStamp & 0xffff);
   \   00000004   0008A0E1           LSL      R0,R0,#+16
   \   00000008   2008A0E1           LSR      R0,R0,#+16
    224            if (pFileTime) {
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   1000000A           BEQ      ??FS_TimeStampToFileTime_0
    225              pFileTime->Year   = (U16) ((Date >> 9) + 1980);
   \   00000014   BC30A0E3           MOV      R3,#+188
   \   00000018   703E83E3           ORR      R3,R3,#0x700
   \   0000001C   C23483E0           ADD      R3,R3,R2, ASR #+9
   \   00000020   B030C1E1           STRH     R3,[R1, #+0]
    226              pFileTime->Month  = (U16) ((Date & 0x1e0) >> 5);
   \   00000024   C232A0E1           ASR      R3,R2,#+5
   \   00000028   0F3003E2           AND      R3,R3,#0xF
   \   0000002C   B230C1E1           STRH     R3,[R1, #+2]
    227              pFileTime->Day    = (U16) ((Date & 0x1f));
   \   00000030   1F2002E2           AND      R2,R2,#0x1F
   \   00000034   B420C1E1           STRH     R2,[R1, #+4]
    228              pFileTime->Hour   = (U16) (Time >> 11);
   \   00000038   C025A0E1           ASR      R2,R0,#+11
   \   0000003C   B620C1E1           STRH     R2,[R1, #+6]
    229              pFileTime->Minute = (U16) ((Time & 0x7e0) >> 5);
   \   00000040   C022A0E1           ASR      R2,R0,#+5
   \   00000044   3F2002E2           AND      R2,R2,#0x3F
    230              pFileTime->Second = (U16) ((Time & 0x1f) << 1);
   \   00000048   1F0000E2           AND      R0,R0,#0x1F
   \   0000004C   B820C1E1           STRH     R2,[R1, #+8]
   \   00000050   8000A0E1           LSL      R0,R0,#+1
   \   00000054   BA00C1E1           STRH     R0,[R1, #+10]
    231            }
    232          }
   \                     ??FS_TimeStampToFileTime_0:
   \   00000058   1EFF2FE1           BX       LR               ;; return
    233          
    234          /*********************************************************************
    235          *
    236          *       FS_FileTimeToTimeStamp
    237          *
    238          *  Description:
    239          *    Fills the pFileTime structure with the given TimeStamp.
    240          *
    241          *  Parameters:
    242          *
    243          */

   \                                 In section .text, align 4, keep-with-next
    244          void FS_FileTimeToTimeStamp(const FS_FILETIME * pFileTime, U32 * pTimeStamp) {
    245            U16 Date;
    246            U16 Time;
    247          
    248            if (pTimeStamp) {
   \                     FS_FileTimeToTimeStamp:
   \   00000000   000051E3           CMP      R1,#+0
   \   00000004   1400000A           BEQ      ??FS_FileTimeToTimeStamp_0
    249              Date  = (U16) (((pFileTime->Year - 1980) << 9) |  (pFileTime->Month << 5) | pFileTime->Day);
    250              Time  = (U16) ((pFileTime->Hour << 11) |  (pFileTime->Minute << 5) |  (pFileTime->Second >> 1));
    251             *pTimeStamp = (U32)((U32)Date << 16) | (Time & 0xffff);
   \   00000008   B020D0E1           LDRH     R2,[R0, #+0]
   \   0000000C   BC30A0E3           MOV      R3,#+188
   \   00000010   703E83E3           ORR      R3,R3,#0x700
   \   00000014   032042E0           SUB      R2,R2,R3
   \   00000018   B230D0E1           LDRH     R3,[R0, #+2]
   \   0000001C   B8C0D0E1           LDRH     R12,[R0, #+8]
   \   00000020   8332A0E1           LSL      R3,R3,#+5
   \   00000024   822483E1           ORR      R2,R3,R2, LSL #+9
   \   00000028   B430D0E1           LDRH     R3,[R0, #+4]
   \   0000002C   8CC2A0E1           LSL      R12,R12,#+5
   \   00000030   022083E1           ORR      R2,R3,R2
   \   00000034   B630D0E1           LDRH     R3,[R0, #+6]
   \   00000038   BA00D0E1           LDRH     R0,[R0, #+10]
   \   0000003C   0228A0E1           LSL      R2,R2,#+16
   \   00000040   83358CE1           ORR      R3,R12,R3, LSL #+11
   \   00000044   A00083E1           ORR      R0,R3,R0, LSR #+1
   \   00000048   0008A0E1           LSL      R0,R0,#+16
   \   0000004C   2228A0E1           LSR      R2,R2,#+16
   \   00000050   2008A0E1           LSR      R0,R0,#+16
   \   00000054   020880E1           ORR      R0,R0,R2, LSL #+16
   \   00000058   000081E5           STR      R0,[R1, #+0]
    252          
    253            }
    254          }
   \                     ??FS_FileTimeToTimeStamp_0:
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    255          
    256          
    257          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     FS_FileTimeToTimeStamp      0
     FS_GetFileTime             24
     FS_GetFileTimeEx           24
     FS_SetFileTime             24
     FS_SetFileTimeEx           24
     FS_TimeStampToFileTime      0
     FS__GetFileTimeEx          24
     FS__SetFileTimeEx          24


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     FS__GetFileTimeEx       124
     FS__SetFileTimeEx       120
     FS_GetFileTimeEx        148
     FS_SetFileTimeEx        152
     FS_GetFileTime          104
     FS_SetFileTime          108
     FS_TimeStampToFileTime   92
     FS_FileTimeToTimeStamp   96

 
 944 bytes in section .text
 
 944 bytes of CODE memory

Errors: none
Warnings: none
