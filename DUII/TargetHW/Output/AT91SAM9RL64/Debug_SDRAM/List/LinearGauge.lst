###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:32:03 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\LinearGauge.cpp                             #
#    Command line =  C:\DUII\DUII\LinearGauge.cpp -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --eec++                              #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\Li #
#                    nearGauge.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\Lin #
#                    earGauge.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\LinearGauge.cpp
      1          /****************************************************************
      2          *							Track Systems						*
      3          -----------------------------------------------------------------
      4          File: LinearGauge.cpp
      5          Description: The linear gauge object
      6          -----------------------------------------------------------------
      7          */
      8          #include "LinearGauge.hpp"
      9          #include <math.h>
     10          #include <stdio.h>
     11          #include <string.h>
     12          #include "GeneralConfig.h"
     13          
     14          extern GUI_BITMAP bmGreenPointer;
     15          
     16          #define GUI_MEDDARKGREEN	0x0000B000
     17          #define GUI_MEDPLUSGREEN	0x00009000
     18          #define	GUI_MEDDARKRED		0x000000C0
     19          #define	GUI_MEDPLUSRED		0x000000A0
     20          #define	GUI_MEDGRAY			0x00707070
     21          #define GUI_DARKGREEN2		0x00006000
     22          #define	BOX_START_Y		30
     23          #define	BOX_HEIGHT		35
     24          #define BORDER_WIDTH	2
     25          #define	CIRCLE_RADIUS	25
     26          #define	CIRCLE_Y_OFFSET	-6
     27          #define	Y_TEXT_OFFSET	4
     28          
     29          

   \                                 In section .text, align 4, keep-with-next
     30          LinearGauge::LinearGauge(int x, int y, int xSize, int ySize, float inMinValue, float inMaxValue, 
     31          	int inUseLowerRed, float inLowerRed, int inUseUpperRed, float inUpperRed, char *inName, 
     32          	char *inUnits, int Multiplier, WM_HWIN hParent, bool inEnabled)
     33          {
   \                     _ZN11LinearGaugeC1EiiiiffififPcS0_ilb:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   38109DE5           LDR      R1,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   60009DE5           LDR      R0,[SP, #+96]
     34          	if ((hDlg = WM_CreateWindowAsChild(x, y, x + xSize, y + ySize, hParent, 0, NULL, 0)) <= 0)
   \   0000001C   06B081E0           ADD      R11,R1,R6
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   05A083E0           ADD      R10,R3,R5
   \   00000028   0C108DE5           STR      R1,[SP, #+12]
   \   0000002C   08108DE5           STR      R1,[SP, #+8]
   \   00000030   04108DE5           STR      R1,[SP, #+4]
   \   00000034   00008DE5           STR      R0,[SP, #+0]
   \   00000038   54709DE5           LDR      R7,[SP, #+84]
   \   0000003C   58809DE5           LDR      R8,[SP, #+88]
   \   00000040   6490DDE5           LDRB     R9,[SP, #+100]
   \   00000044   0B30A0E1           MOV      R3,R11
   \   00000048   0A20A0E1           MOV      R2,R10
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   000084E5           STR      R0,[R4, #+0]
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   010000AA           BGE      ??LinearGauge_0
     35          	{
     36          		SystemError();
   \   00000064   ........           BL       SystemError
     37          		return;
   \   00000068   140000EA           B        ??LinearGauge_1
     38          	}
     39          
     40          	// Save incoming variables
     41          	xStart = x;
   \                     ??LinearGauge_0:
   \   0000006C   085084E5           STR      R5,[R4, #+8]
     42          	yStart = y;
   \   00000070   0C6084E5           STR      R6,[R4, #+12]
     43          	xEnd = x + xSize;
   \   00000074   10A084E5           STR      R10,[R4, #+16]
     44          	yEnd = y + ySize;
   \   00000078   14B084E5           STR      R11,[R4, #+20]
     45          	minVal = inMinValue;
   \   0000007C   3C009DE5           LDR      R0,[SP, #+60]
   \   00000080   240084E5           STR      R0,[R4, #+36]
     46          	maxVal = inMaxValue;
   \   00000084   40009DE5           LDR      R0,[SP, #+64]
   \   00000088   280084E5           STR      R0,[R4, #+40]
     47          	useLowerRed = inUseLowerRed;
   \   0000008C   44009DE5           LDR      R0,[SP, #+68]
   \   00000090   2C0084E5           STR      R0,[R4, #+44]
     48          	useUpperRed = inUseUpperRed;
   \   00000094   4C009DE5           LDR      R0,[SP, #+76]
   \   00000098   300084E5           STR      R0,[R4, #+48]
     49          	lowerRed = inLowerRed;
   \   0000009C   48009DE5           LDR      R0,[SP, #+72]
   \   000000A0   340084E5           STR      R0,[R4, #+52]
     50          	upperRed = inUpperRed;
   \   000000A4   50009DE5           LDR      R0,[SP, #+80]
   \   000000A8   380084E5           STR      R0,[R4, #+56]
     51          	yPos = 0;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   180084E5           STR      R0,[R4, #+24]
     52          	Name = inName;
   \   000000B4   1C7084E5           STR      R7,[R4, #+28]
     53          	Units = inUnits;
   \   000000B8   208084E5           STR      R8,[R4, #+32]
     54          	enabled = inEnabled;
   \   000000BC   4490C4E5           STRB     R9,[R4, #+68]
     55          }
   \                     ??LinearGauge_1:
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
     56          
     57          /****************************************************************
     58          *
     59          *       ~LinearGauge()
     60          *		The Destructor
     61          *
     62          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
     63          LinearGauge::~LinearGauge()
     64          {
     65          }
   \                     _ZN11LinearGaugeD1Ev:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     66          
     67          /****************************************************************
     68          *
     69          *       CreateGaugeBackground()
     70          *		Draw the gauge except for the needle into a memory space
     71          *
     72          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
     73          void LinearGauge::CreateGaugeBackground()
     74          {
   \                     _ZN11LinearGauge21CreateGaugeBackgroundEv:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
     75          	GUI_RECT rect;
     76          	char scratch[20];
     77          	int xStartWBorder, xEndWBorder;
     78          
     79          	// Draw outside frame of control bar
     80          	GUI_SetColor(GUI_WHITE);
   \   0000000C   FF04E0E3           MVN      R0,#-16777216
   \   00000010   ........           BL       GUI_SetColor
     81          
     82          	GUI_DrawRect(xStart, yStart + BOX_START_Y, xEnd, yStart + BOX_START_Y + BOX_HEIGHT);
   \   00000014   0C0096E5           LDR      R0,[R6, #+12]
   \   00000018   413080E2           ADD      R3,R0,#+65
   \   0000001C   1E1080E2           ADD      R1,R0,#+30
   \   00000020   102096E5           LDR      R2,[R6, #+16]
   \   00000024   080096E5           LDR      R0,[R6, #+8]
   \   00000028   ........           BL       GUI_DrawRect
     83          	GUI_DrawRect(xStart + 1, yStart + BOX_START_Y + 1, xEnd - 1, yStart + BOX_START_Y + BOX_HEIGHT - 1);
   \   0000002C   101096E5           LDR      R1,[R6, #+16]
   \   00000030   0C0096E5           LDR      R0,[R6, #+12]
   \   00000034   012041E2           SUB      R2,R1,#+1
   \   00000038   403080E2           ADD      R3,R0,#+64
   \   0000003C   1F1080E2           ADD      R1,R0,#+31
   \   00000040   080096E5           LDR      R0,[R6, #+8]
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   ........           BL       GUI_DrawRect
     84          
     85          	// Draw name and units below bar
     86          	GUI_SetFont(&GUI_Font20_ASCII);
   \   0000004C   ........           LDR      R0,??DataTable6_1
   \   00000050   ........           BL       GUI_SetFont
     87          	if (Name)
   \   00000054   1C0096E5           LDR      R0,[R6, #+28]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0700000A           BEQ      ??CreateGaugeBackground_0
     88          		GUI_DispStringHCenterAt(Name, ((xEnd - xStart) / 2) + xStart, yEnd - 40);
   \   00000060   081096E5           LDR      R1,[R6, #+8]
   \   00000064   102096E5           LDR      R2,[R6, #+16]
   \   00000068   013042E0           SUB      R3,R2,R1
   \   0000006C   142096E5           LDR      R2,[R6, #+20]
   \   00000070   A33F83E0           ADD      R3,R3,R3, LSR #+31
   \   00000074   282042E2           SUB      R2,R2,#+40
   \   00000078   C31081E0           ADD      R1,R1,R3, ASR #+1
   \   0000007C   ........           BL       GUI_DispStringHCenterAt
     89          	if (Units)
   \                     ??CreateGaugeBackground_0:
   \   00000080   200096E5           LDR      R0,[R6, #+32]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0700000A           BEQ      ??CreateGaugeBackground_1
     90          		GUI_DispStringHCenterAt(Units, ((xEnd - xStart) / 2) + xStart, yEnd - 20);
   \   0000008C   081096E5           LDR      R1,[R6, #+8]
   \   00000090   102096E5           LDR      R2,[R6, #+16]
   \   00000094   013042E0           SUB      R3,R2,R1
   \   00000098   142096E5           LDR      R2,[R6, #+20]
   \   0000009C   A33F83E0           ADD      R3,R3,R3, LSR #+31
   \   000000A0   142042E2           SUB      R2,R2,#+20
   \   000000A4   C31081E0           ADD      R1,R1,R3, ASR #+1
   \   000000A8   ........           BL       GUI_DispStringHCenterAt
     91          
     92          	// Create rectangle for start/stop scale labels above bar
     93          	rect.x0 = xStart;
   \                     ??CreateGaugeBackground_1:
   \   000000AC   080096E5           LDR      R0,[R6, #+8]
     94          	rect.x1 = xEnd;
     95          	rect.y0 = yStart + 5;
     96          	rect.y1 = yStart + 40;
     97          
     98          	// Draw start/stop scale labels above bar
     99          	sprintf(scratch, "%.2f", minVal);
   \   000000B0   ............       ADRL     R4,`?<Constant "%.2f">`
   \              ....        
   \   000000B8   BC00CDE1           STRH     R0,[SP, #+12]
   \   000000BC   100096E5           LDR      R0,[R6, #+16]
   \   000000C0   B001CDE1           STRH     R0,[SP, #+16]
   \   000000C4   0C0096E5           LDR      R0,[R6, #+12]
   \   000000C8   051080E2           ADD      R1,R0,#+5
   \   000000CC   280080E2           ADD      R0,R0,#+40
   \   000000D0   BE10CDE1           STRH     R1,[SP, #+14]
   \   000000D4   B201CDE1           STRH     R0,[SP, #+18]
   \   000000D8   240096E5           LDR      R0,[R6, #+36]
   \   000000DC   ........           BL       __aeabi_f2d
   \   000000E0   0020A0E1           MOV      R2,R0
   \   000000E4   0130A0E1           MOV      R3,R1
   \   000000E8   0410A0E1           MOV      R1,R4
   \   000000EC   14008DE2           ADD      R0,SP,#+20
   \   000000F0   ........           BL       sprintf
    100          	GUI_DispStringInRect(scratch, &rect, GUI_TA_LEFT);
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0C108DE2           ADD      R1,SP,#+12
   \   000000FC   14008DE2           ADD      R0,SP,#+20
   \   00000100   ........           BL       GUI_DispStringInRect
    101          	sprintf(scratch, "%.2f", maxVal);
   \   00000104   280096E5           LDR      R0,[R6, #+40]
   \   00000108   ........           BL       __aeabi_f2d
   \   0000010C   0020A0E1           MOV      R2,R0
   \   00000110   0130A0E1           MOV      R3,R1
   \   00000114   0410A0E1           MOV      R1,R4
   \   00000118   14008DE2           ADD      R0,SP,#+20
   \   0000011C   ........           BL       sprintf
    102          	GUI_DispStringInRect(scratch, &rect, GUI_TA_RIGHT);
   \   00000120   0120A0E3           MOV      R2,#+1
   \   00000124   0C108DE2           ADD      R1,SP,#+12
   \   00000128   14008DE2           ADD      R0,SP,#+20
   \   0000012C   ........           BL       GUI_DispStringInRect
   \   00000130   084096E5           LDR      R4,[R6, #+8]
   \   00000134   105096E5           LDR      R5,[R6, #+16]
   \   00000138   040045E0           SUB      R0,R5,R4
   \   0000013C   040040E2           SUB      R0,R0,#+4
   \   00000140   ........           BL       __aeabi_i2f
   \   00000144   0070A0E1           MOV      R7,R0
   \   00000148   280096E5           LDR      R0,[R6, #+40]
   \   0000014C   241096E5           LDR      R1,[R6, #+36]
   \   00000150   ........           BL       __aeabi_fsub
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   0700A0E1           MOV      R0,R7
   \   0000015C   ........           BL       __aeabi_fdiv
   \   00000160   0070A0E1           MOV      R7,R0
   \   00000164   3C7086E5           STR      R7,[R6, #+60]
    103          
    104          	// Calculate variables needed for scale calculations
    105          	float totalScaleSize = maxVal - minVal;
    106          	stepSize = ((xEnd - xStart) - (BORDER_WIDTH * 2)) / totalScaleSize;
    107          
    108          	// Pre-define green rect to be what's left over after both reds are drawn
    109          	GUI_RECT greenRect, lowerRedRect, upperRedRect;
    110          
    111          	// Define active scale area (area within the borders)
    112          	xStartWBorder = xStart + BORDER_WIDTH;
   \   00000168   028084E2           ADD      R8,R4,#+2
    113          	xEndWBorder = xEnd - BORDER_WIDTH;
    114          	
    115          	greenRect.x0 = lowerRedRect.x0 = xStartWBorder;
   \   0000016C   BA80CDE1           STRH     R8,[SP, #+10]
    116          	greenRect.y0 = lowerRedRect.y0 = upperRedRect.y0 = yStart + BOX_START_Y + BORDER_WIDTH;
   \   00000170   0C0096E5           LDR      R0,[R6, #+12]
   \   00000174   024045E2           SUB      R4,R5,#+2
   \   00000178   20A080E2           ADD      R10,R0,#+32
    117          	greenRect.x1 = upperRedRect.x1 = xEndWBorder;
   \   0000017C   B840CDE1           STRH     R4,[SP, #+8]
    118          	greenRect.y1 = lowerRedRect.y1 = upperRedRect.y1 = yStart + BOX_START_Y + BOX_HEIGHT - BORDER_WIDTH;
   \   00000180   3FB080E2           ADD      R11,R0,#+63
    119          
    120          	// Calculate lower red zone (and redefine start of green rect) - if applicable
    121          	if (useLowerRed)
   \   00000184   2C0096E5           LDR      R0,[R6, #+44]
   \   00000188   FA90DDE1           LDRSH    R9,[SP, #+10]
   \   0000018C   F850DDE1           LDRSH    R5,[SP, #+8]
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   1B00000A           BEQ      ??CreateGaugeBackground_2
    122          	{
    123          		int temp;
    124          
    125          		temp = xStartWBorder + (int)((lowerRed - minVal) * stepSize);
   \   00000198   340096E5           LDR      R0,[R6, #+52]
   \   0000019C   241096E5           LDR      R1,[R6, #+36]
   \   000001A0   ........           BL       __aeabi_fsub
   \   000001A4   0710A0E1           MOV      R1,R7
   \   000001A8   ........           BL       __aeabi_fmul
   \   000001AC   ........           BL       __aeabi_f2iz
   \   000001B0   080080E0           ADD      R0,R0,R8
    126          		if (temp < xStartWBorder)
   \   000001B4   080050E1           CMP      R0,R8
    127          			temp = xStartWBorder;
   \   000001B8   0890A0B1           MOVLT    R9,R8
   \   000001BC   020000BA           BLT      ??CreateGaugeBackground_3
    128          		else if (temp > xEndWBorder)
   \   000001C0   0490A0E1           MOV      R9,R4
   \   000001C4   000054E1           CMP      R4,R0
   \   000001C8   0090A0C1           MOVGT    R9,R0
    129          			temp = xEndWBorder;
    130          		lowerRedRect.x1 = greenRect.x0 = temp;
    131          		GUI_DrawGradientV(lowerRedRect.x0, lowerRedRect.y0, lowerRedRect.x1, lowerRedRect.y1, (enabled? GUI_RED : GUI_DARKGRAY), GUI_BLACK);
   \                     ??CreateGaugeBackground_3:
   \   000001CC   4400D6E5           LDRB     R0,[R6, #+68]
   \   000001D0   0010A0E3           MOV      R1,#+0
   \   000001D4   04108DE5           STR      R1,[SP, #+4]
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   ........           LDREQ    R0,??DataTable6_2  ;; 0x404040
   \   000001E0   FF00A013           MOVNE    R0,#+255
   \   000001E4   00008DE5           STR      R0,[SP, #+0]
   \   000001E8   0B38A0E1           LSL      R3,R11,#+16
   \   000001EC   0928A0E1           LSL      R2,R9,#+16
   \   000001F0   0A18A0E1           LSL      R1,R10,#+16
   \   000001F4   4338A0E1           ASR      R3,R3,#+16
   \   000001F8   4228A0E1           ASR      R2,R2,#+16
   \   000001FC   4118A0E1           ASR      R1,R1,#+16
   \   00000200   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   00000204   ........           BL       GUI_DrawGradientV
    132          	}
    133          
    134          	// Calculate upper red zone (and redefine end of green rect) - if applicable
    135          	if (useUpperRed)
   \                     ??CreateGaugeBackground_2:
   \   00000208   300096E5           LDR      R0,[R6, #+48]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   1B00000A           BEQ      ??CreateGaugeBackground_4
    136          	{
    137          		int temp;
    138          
    139          		temp = xEndWBorder - (int)((maxVal - upperRed) * stepSize);
   \   00000214   280096E5           LDR      R0,[R6, #+40]
   \   00000218   381096E5           LDR      R1,[R6, #+56]
   \   0000021C   ........           BL       __aeabi_fsub
   \   00000220   3C1096E5           LDR      R1,[R6, #+60]
   \   00000224   ........           BL       __aeabi_fmul
   \   00000228   ........           BL       __aeabi_f2iz
   \   0000022C   000044E0           SUB      R0,R4,R0
    140          		if (temp < xStartWBorder)
   \   00000230   080050E1           CMP      R0,R8
   \   00000234   020000BA           BLT      ??CreateGaugeBackground_5
    141          			temp = xStartWBorder;
    142          		else if (temp > xEndWBorder)
   \   00000238   000054E1           CMP      R4,R0
   \   0000023C   0040A0C1           MOVGT    R4,R0
   \   00000240   0480A0E1           MOV      R8,R4
    143          			temp = xEndWBorder;
    144          		upperRedRect.x0 = greenRect.x1 = temp;
    145          		GUI_DrawGradientV(upperRedRect.x0, upperRedRect.y0, upperRedRect.x1, upperRedRect.y1, (enabled? GUI_RED : GUI_DARKGRAY), GUI_BLACK);
   \                     ??CreateGaugeBackground_5:
   \   00000244   4400D6E5           LDRB     R0,[R6, #+68]
   \   00000248   0010A0E3           MOV      R1,#+0
   \   0000024C   0850A0E1           MOV      R5,R8
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   ........           LDREQ    R0,??DataTable6_2  ;; 0x404040
   \   00000258   FF00A013           MOVNE    R0,#+255
   \   0000025C   04108DE5           STR      R1,[SP, #+4]
   \   00000260   00008DE5           STR      R0,[SP, #+0]
   \   00000264   0B38A0E1           LSL      R3,R11,#+16
   \   00000268   0A18A0E1           LSL      R1,R10,#+16
   \   0000026C   0508A0E1           LSL      R0,R5,#+16
   \   00000270   4338A0E1           ASR      R3,R3,#+16
   \   00000274   F820DDE1           LDRSH    R2,[SP, #+8]
   \   00000278   4118A0E1           ASR      R1,R1,#+16
   \   0000027C   4008A0E1           ASR      R0,R0,#+16
   \   00000280   ........           BL       GUI_DrawGradientV
    146          	}
    147          
    148          	// Draw green rect in remainder
    149          	GUI_DrawGradientV(greenRect.x0, greenRect.y0, greenRect.x1, greenRect.y1, (enabled? GUI_GREEN : GUI_MEDGRAY), GUI_BLACK);	
   \                     ??CreateGaugeBackground_4:
   \   00000284   4400D6E5           LDRB     R0,[R6, #+68]
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   04108DE5           STR      R1,[SP, #+4]
   \   00000290   000050E3           CMP      R0,#+0
   \   00000294   ........           LDREQ    R0,??DataTable6_3  ;; 0x707070
   \   00000298   FF0CA013           MOVNE    R0,#+65280
   \   0000029C   00008DE5           STR      R0,[SP, #+0]
   \   000002A0   0B38A0E1           LSL      R3,R11,#+16
   \   000002A4   0528A0E1           LSL      R2,R5,#+16
   \   000002A8   0A18A0E1           LSL      R1,R10,#+16
   \   000002AC   0908A0E1           LSL      R0,R9,#+16
   \   000002B0   4338A0E1           ASR      R3,R3,#+16
   \   000002B4   4228A0E1           ASR      R2,R2,#+16
   \   000002B8   4118A0E1           ASR      R1,R1,#+16
   \   000002BC   4008A0E1           ASR      R0,R0,#+16
   \   000002C0   ........           BL       GUI_DrawGradientV
    150          }
   \   000002C4   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000002C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    151          
    152          /****************************************************************
    153          *
    154          *       SetValue(float value)
    155          *		Set the value of the gauge to the value specified and draw the bubble or pointer
    156          *
    157          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    158          void LinearGauge::SetValue(float dValue)
    159          {
   \                     _ZN11LinearGauge8SetValueEf:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0180A0E1           MOV      R8,R1
    160          	value = dValue;
   \   0000000C   048084E5           STR      R8,[R4, #+4]
    161          	int x, startm, start1, start2, startblack;
    162          	char scratch[20];
    163          
    164          	// Draw pointer at new value
    165          	x = (xEnd - BORDER_WIDTH) - (int)((maxVal - value) * stepSize);
   \   00000010   106094E5           LDR      R6,[R4, #+16]
   \   00000014   18D04DE2           SUB      SP,SP,#+24
   \   00000018   025046E2           SUB      R5,R6,#+2
   \   0000001C   280094E5           LDR      R0,[R4, #+40]
   \   00000020   ........           BL       __aeabi_fsub
   \   00000024   3C1094E5           LDR      R1,[R4, #+60]
   \   00000028   ........           BL       __aeabi_fmul
   \   0000002C   ........           BL       __aeabi_f2iz
   \   00000030   005045E0           SUB      R5,R5,R0
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   000055E1           CMP      R5,R0
    166          
    167          	// Range check x - if beyond limits then draw at the end of the scale
    168          	if (x < xStart + 1)
    169          		x = xStart + 1;
    170          	else if (x > xEnd - 1)
   \   00000040   010046A2           SUBGE    R0,R6,#+1
   \   00000044   050050A1           CMPGE    R0,R5
    171          		x = xEnd - 1;
   \   00000048   0050A0B1           MOVLT    R5,R0
    172          
    173          	if (enabled)		// Only draw circle and contents if enabled
   \   0000004C   4400D4E5           LDRB     R0,[R4, #+68]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   5100000A           BEQ      ??SetValue_0
    174          	{
    175          		// Draw circle in decending radius rings
    176          		// Draw white border around circle on top
    177          		// Outermost is black border
    178          		GUI_SetColor(GUI_BLACK);
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       GUI_SetColor
    179          		GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS + 4);
   \   00000060   0C0094E5           LDR      R0,[R4, #+12]
   \   00000064   1D20A0E3           MOV      R2,#+29
   \   00000068   061080E2           ADD      R1,R0,#+6
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       GUI_FillCircle
    180          		// Then white
    181          		GUI_SetColor(GUI_WHITE);
   \   00000074   FF64E0E3           MVN      R6,#-16777216
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           BL       GUI_SetColor
    182          		GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS + 2);
   \   00000080   0C0094E5           LDR      R0,[R4, #+12]
   \   00000084   1B20A0E3           MOV      R2,#+27
   \   00000088   061080E2           ADD      R1,R0,#+6
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       GUI_FillCircle
    183          		// Then, if in alarm, fill circle in red
    184          		if ((useLowerRed && dValue <= lowerRed) || (useUpperRed && dValue >= upperRed))
   \   00000094   2C0094E5           LDR      R0,[R4, #+44]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0300000A           BEQ      ??SetValue_1
   \   000000A0   340094E5           LDR      R0,[R4, #+52]
   \   000000A4   0810A0E1           MOV      R1,R8
   \   000000A8   ........           BL       __aeabi_cfrcmple
   \   000000AC   0600009A           BLS      ??SetValue_2
   \                     ??SetValue_1:
   \   000000B0   300094E5           LDR      R0,[R4, #+48]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   1600000A           BEQ      ??SetValue_3
   \   000000BC   0800A0E1           MOV      R0,R8
   \   000000C0   381094E5           LDR      R1,[R4, #+56]
   \   000000C4   ........           BL       __aeabi_cfrcmple
   \   000000C8   1200008A           BHI      ??SetValue_3
    185          		{
    186          			if (enabled) 
   \                     ??SetValue_2:
   \   000000CC   4400D4E5           LDRB     R0,[R4, #+68]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   2700000A           BEQ      ??SetValue_4
    187          			{	// in alarm, fill inner circle with red
    188          				GUI_SetColor(GUI_DARKRED);
   \   000000D8   8000A0E3           MOV      R0,#+128
   \   000000DC   ........           BL       GUI_SetColor
    189          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS);
   \   000000E0   0C0094E5           LDR      R0,[R4, #+12]
   \   000000E4   1920A0E3           MOV      R2,#+25
   \   000000E8   061080E2           ADD      R1,R0,#+6
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           BL       GUI_FillCircle
    190          				GUI_SetColor(GUI_MEDPLUSRED);
   \   000000F4   A000A0E3           MOV      R0,#+160
   \   000000F8   ........           BL       GUI_SetColor
    191          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS-2);
   \   000000FC   0C0094E5           LDR      R0,[R4, #+12]
   \   00000100   1720A0E3           MOV      R2,#+23
   \   00000104   061080E2           ADD      R1,R0,#+6
   \   00000108   0500A0E1           MOV      R0,R5
   \   0000010C   ........           BL       GUI_FillCircle
    192          				GUI_SetColor(GUI_MEDDARKRED);
   \   00000110   C000A0E3           MOV      R0,#+192
   \   00000114   110000EA           B        ??SetValue_5
    193          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS-4);
    194          			}
    195          			GUI_SetColor(GUI_WHITE);		// Set contrasting color for text
    196          		}
    197          		else
    198          		{
    199          			if (enabled)
   \                     ??SetValue_3:
   \   00000118   4400D4E5           LDRB     R0,[R4, #+68]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   1E00000A           BEQ      ??SetValue_0
    200          			{	// NOT in alarm, fill inner circle with green
    201          				GUI_SetColor(GUI_DARKGREEN2);
   \   00000124   600CA0E3           MOV      R0,#+24576
   \   00000128   ........           BL       GUI_SetColor
    202          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS);
   \   0000012C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000130   1920A0E3           MOV      R2,#+25
   \   00000134   061080E2           ADD      R1,R0,#+6
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   ........           BL       GUI_FillCircle
    203          				GUI_SetColor(GUI_MEDPLUSGREEN);
   \   00000140   900CA0E3           MOV      R0,#+36864
   \   00000144   ........           BL       GUI_SetColor
    204          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS-2);
   \   00000148   0C0094E5           LDR      R0,[R4, #+12]
   \   0000014C   1720A0E3           MOV      R2,#+23
   \   00000150   061080E2           ADD      R1,R0,#+6
   \   00000154   0500A0E1           MOV      R0,R5
   \   00000158   ........           BL       GUI_FillCircle
    205          				GUI_SetColor(GUI_MEDDARKGREEN);
   \   0000015C   B00CA0E3           MOV      R0,#+45056
   \                     ??SetValue_5:
   \   00000160   ........           BL       GUI_SetColor
    206          				GUI_FillCircle(x, yStart - CIRCLE_Y_OFFSET, CIRCLE_RADIUS-4);
   \   00000164   0C0094E5           LDR      R0,[R4, #+12]
   \   00000168   1520A0E3           MOV      R2,#+21
   \   0000016C   061080E2           ADD      R1,R0,#+6
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       GUI_FillCircle
    207          				GUI_SetColor(GUI_WHITE);		// Set contrasting color for text
   \                     ??SetValue_4:
   \   00000178   0600A0E1           MOV      R0,R6
   \   0000017C   ........           BL       GUI_SetColor
    208          			}
    209          		}
    210          	}
    211          
    212          	if (enabled)
   \   00000180   4400D4E5           LDRB     R0,[R4, #+68]
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   0400000A           BEQ      ??SetValue_0
    213          	{
    214          		startm = start1 = start2 = 3;
   \   0000018C   0390A0E3           MOV      R9,#+3
   \   00000190   0370A0E3           MOV      R7,#+3
   \   00000194   03A0A0E3           MOV      R10,#+3
    215          		startblack = 3;
   \   00000198   0360A0E3           MOV      R6,#+3
   \   0000019C   030000EA           B        ??SetValue_6
    216          	}
    217          	else
    218          	{
    219          		startm = -5;
   \                     ??SetValue_0:
   \   000001A0   04A0E0E3           MVN      R10,#+4
    220          		start1 = -4;
   \   000001A4   01708AE2           ADD      R7,R10,#+1
    221          		start2 = -3;
   \   000001A8   019087E3           ORR      R9,R7,#0x1
    222          		startblack = -2;
   \   000001AC   026087E3           ORR      R6,R7,#0x2
    223          	}
    224          	// Draw black border of the bar
    225          	GUI_SetColor(GUI_BLACK);
   \                     ??SetValue_6:
   \   000001B0   0000A0E3           MOV      R0,#+0
   \   000001B4   ........           BL       GUI_SetColor
    226          	GUI_DrawLine( x - 3, yStart + BOX_START_Y + startblack, x - 3, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH);
   \   000001B8   0C0094E5           LDR      R0,[R4, #+12]
   \   000001BC   032045E2           SUB      R2,R5,#+3
   \   000001C0   433080E2           ADD      R3,R0,#+67
   \   000001C4   000086E0           ADD      R0,R6,R0
   \   000001C8   1E1080E2           ADD      R1,R0,#+30
   \   000001CC   0200A0E1           MOV      R0,R2
   \   000001D0   ........           BL       GUI_DrawLine
    227          	GUI_DrawLine( x + 3, yStart + BOX_START_Y + startblack, x + 3, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH);
   \   000001D4   0C1094E5           LDR      R1,[R4, #+12]
   \   000001D8   030085E2           ADD      R0,R5,#+3
   \   000001DC   433081E2           ADD      R3,R1,#+67
   \   000001E0   011086E0           ADD      R1,R6,R1
   \   000001E4   0020A0E1           MOV      R2,R0
   \   000001E8   1E1081E2           ADD      R1,R1,#+30
   \   000001EC   ........           BL       GUI_DrawLine
    228          	GUI_DrawLine( x - 4, yStart + BOX_START_Y + startblack, x - 4, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH);
   \   000001F0   0C1094E5           LDR      R1,[R4, #+12]
   \   000001F4   040045E2           SUB      R0,R5,#+4
   \   000001F8   433081E2           ADD      R3,R1,#+67
   \   000001FC   011086E0           ADD      R1,R6,R1
   \   00000200   0020A0E1           MOV      R2,R0
   \   00000204   1E1081E2           ADD      R1,R1,#+30
   \   00000208   ........           BL       GUI_DrawLine
    229          	GUI_DrawLine( x + 4, yStart + BOX_START_Y + startblack, x + 4, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH);
   \   0000020C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000210   040085E2           ADD      R0,R5,#+4
   \   00000214   433081E2           ADD      R3,R1,#+67
   \   00000218   011086E0           ADD      R1,R6,R1
   \   0000021C   0020A0E1           MOV      R2,R0
   \   00000220   1E1081E2           ADD      R1,R1,#+30
   \   00000224   ........           BL       GUI_DrawLine
    230          
    231          	// Draw white center of the vertical bar
    232          	GUI_SetColor(GUI_WHITE);
   \   00000228   FF64E0E3           MVN      R6,#-16777216
   \   0000022C   0600A0E1           MOV      R0,R6
   \   00000230   ........           BL       GUI_SetColor
    233          	GUI_DrawLine( x, yStart + BOX_START_Y + startm, x, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH + 3);
   \   00000234   0C0094E5           LDR      R0,[R4, #+12]
   \   00000238   0520A0E1           MOV      R2,R5
   \   0000023C   463080E2           ADD      R3,R0,#+70
   \   00000240   00008AE0           ADD      R0,R10,R0
   \   00000244   1E1080E2           ADD      R1,R0,#+30
   \   00000248   0500A0E1           MOV      R0,R5
   \   0000024C   ........           BL       GUI_DrawLine
    234          	GUI_DrawLine( x - 1, yStart + BOX_START_Y + start1, x - 1, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH + 2);
   \   00000250   0C1094E5           LDR      R1,[R4, #+12]
   \   00000254   010045E2           SUB      R0,R5,#+1
   \   00000258   453081E2           ADD      R3,R1,#+69
   \   0000025C   011087E0           ADD      R1,R7,R1
   \   00000260   0020A0E1           MOV      R2,R0
   \   00000264   1E1081E2           ADD      R1,R1,#+30
   \   00000268   ........           BL       GUI_DrawLine
    235          	GUI_DrawLine( x + 1, yStart + BOX_START_Y + start1, x + 1, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH + 2);
   \   0000026C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000270   010085E2           ADD      R0,R5,#+1
   \   00000274   453081E2           ADD      R3,R1,#+69
   \   00000278   011087E0           ADD      R1,R7,R1
   \   0000027C   0020A0E1           MOV      R2,R0
   \   00000280   1E1081E2           ADD      R1,R1,#+30
   \   00000284   ........           BL       GUI_DrawLine
    236          	GUI_DrawLine( x - 2, yStart + BOX_START_Y + start2, x - 2, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH + 1);
   \   00000288   0C1094E5           LDR      R1,[R4, #+12]
   \   0000028C   020045E2           SUB      R0,R5,#+2
   \   00000290   443081E2           ADD      R3,R1,#+68
   \   00000294   011089E0           ADD      R1,R9,R1
   \   00000298   0020A0E1           MOV      R2,R0
   \   0000029C   1E1081E2           ADD      R1,R1,#+30
   \   000002A0   ........           BL       GUI_DrawLine
    237          	GUI_DrawLine( x + 2, yStart + BOX_START_Y + start2, x + 2, yStart + BOX_START_Y + BOX_HEIGHT + BORDER_WIDTH + 1);
   \   000002A4   0C0094E5           LDR      R0,[R4, #+12]
   \   000002A8   027085E2           ADD      R7,R5,#+2
   \   000002AC   443080E2           ADD      R3,R0,#+68
   \   000002B0   000089E0           ADD      R0,R9,R0
   \   000002B4   1E1080E2           ADD      R1,R0,#+30
   \   000002B8   0720A0E1           MOV      R2,R7
   \   000002BC   0700A0E1           MOV      R0,R7
   \   000002C0   ........           BL       GUI_DrawLine
    238          
    239          	if (enabled)			// Only draw value in circle if enabled
   \   000002C4   4400D4E5           LDRB     R0,[R4, #+68]
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   4C00000A           BEQ      ??SetValue_7
    240          	{
    241          		// Draw value in circle
    242          		GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   000002D0   0200A0E3           MOV      R0,#+2
   \   000002D4   ........           BL       GUI_SetTextMode
    243          		GUI_SetFont(&GUI_Font24B_ASCII);		// Set default font and change if required (very quick routine)
   \   000002D8   ........           LDR      R0,??DataTable6_4
   \   000002DC   ........           BL       GUI_SetFont
    244          
    245          		// Format string
    246          		if (dValue == 0.0)
   \   000002E0   0800A0E1           MOV      R0,R8
   \   000002E4   0010A0E3           MOV      R1,#+0
   \   000002E8   ........           BL       __aeabi_cfcmpeq
   \   000002EC   0500001A           BNE      ??SetValue_8
    247          			strcpy(scratch, "0");				// 1 character
   \   000002F0   ........           ADR      R0,??DataTable6  ;; "0"
   \   000002F4   0020D0E5           LDRB     R2,[R0, #0]
   \   000002F8   0020CDE5           STRB     R2,[SP, #+0]
   \   000002FC   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000300   0120CDE5           STRB     R2,[SP, #+1]
   \   00000304   300000EA           B        ??SetValue_9
    248          		else if ((dValue > 1000.0) || (dValue < -100.0))
   \                     ??SetValue_8:
   \   00000308   5113A0E3           MOV      R1,#+1140850689
   \   0000030C   7A1881E3           ORR      R1,R1,#0x7A0000
   \   00000310   ........           BL       __aeabi_cfrcmple
   \   00000314   0300009A           BLS      ??SetValue_10
   \   00000318   C014A0E3           MOV      R1,#-1073741824
   \   0000031C   B21781E3           ORR      R1,R1,#0x2C80000
   \   00000320   ........           BL       __aeabi_cfcmple
   \   00000324   0800002A           BCS      ??SetValue_11
    249          		{
    250          			sprintf(scratch, "%0.0f", dValue);	// 4 or more characters
   \                     ??SetValue_10:
   \   00000328   ........           BL       __aeabi_f2d
   \   0000032C   0020A0E1           MOV      R2,R0
   \   00000330   0130A0E1           MOV      R3,R1
   \   00000334   ........           ADR      R1,`?<Constant "%0.0f">`
   \   00000338   0D00A0E1           MOV      R0,SP
   \   0000033C   ........           BL       sprintf
    251          			GUI_SetFont(&GUI_Font16_ASCII);		// Must resize font as text won't fit
   \   00000340   ........           LDR      R0,??DataTable6_5
   \   00000344   ........           BL       GUI_SetFont
   \   00000348   1F0000EA           B        ??SetValue_9
    252          		}
    253          		else if ((dValue > 100.0) || (dValue < -10.0))
   \                     ??SetValue_11:
   \   0000034C   5013A0E3           MOV      R1,#+1073741825
   \   00000350   B21781E3           ORR      R1,R1,#0x2C80000
   \   00000354   ........           BL       __aeabi_cfrcmple
   \   00000358   0300009A           BLS      ??SetValue_12
   \   0000035C   C014A0E3           MOV      R1,#-1073741824
   \   00000360   481781E3           ORR      R1,R1,#0x1200000
   \   00000364   ........           BL       __aeabi_cfcmple
   \   00000368   0400002A           BCS      ??SetValue_13
    254          			sprintf(scratch, "%0.0f", dValue);	// 3 characters
   \                     ??SetValue_12:
   \   0000036C   ........           BL       __aeabi_f2d
   \   00000370   0130A0E1           MOV      R3,R1
   \   00000374   0020A0E1           MOV      R2,R0
   \   00000378   ........           ADR      R1,`?<Constant "%0.0f">`
   \   0000037C   100000EA           B        ??SetValue_14
    255          		else if ((dValue > 10.0) || (dValue < -1.0))
   \                     ??SetValue_13:
   \   00000380   5013A0E3           MOV      R1,#+1073741825
   \   00000384   481781E3           ORR      R1,R1,#0x1200000
   \   00000388   ........           BL       __aeabi_cfrcmple
   \   0000038C   0300009A           BLS      ??SetValue_15
   \   00000390   8014A0E3           MOV      R1,#-2147483648
   \   00000394   FE1581E3           ORR      R1,R1,#0x3F800000
   \   00000398   ........           BL       __aeabi_cfcmple
   \   0000039C   0400002A           BCS      ??SetValue_16
    256          			sprintf(scratch, "%0.1f", dValue);	// 3 characters
   \                     ??SetValue_15:
   \   000003A0   ........           BL       __aeabi_f2d
   \   000003A4   0130A0E1           MOV      R3,R1
   \   000003A8   0020A0E1           MOV      R2,R0
   \   000003AC   ........           ADR      R1,`?<Constant "%0.1f">`
   \   000003B0   030000EA           B        ??SetValue_14
    257          		else if ((dValue > 1.0) || (dValue < -0.1))
    258          			sprintf(scratch, "%0.2f", dValue);	// 3 characters
   \                     ??SetValue_16:
   \   000003B4   ........           BL       __aeabi_f2d
   \   000003B8   0130A0E1           MOV      R3,R1
   \   000003BC   0020A0E1           MOV      R2,R0
   \   000003C0   ........           ADR      R1,`?<Constant "%0.2f">`
   \                     ??SetValue_14:
   \   000003C4   0D00A0E1           MOV      R0,SP
   \   000003C8   ........           BL       sprintf
    259          		else
    260          		{
    261          #ifdef AUTO_SCALE_FONT
    262          			sprintf(scratch, "%0.3f", dValue);	// 4 digits (or 3 plus minus sign)
    263          			GUI_SetFont(&GUI_Font16_ASCII);
    264          #else
    265          			sprintf(scratch, "%0.2f", dValue);	// 3 digits (or 2 plus minus sign)
    266          #endif
    267          		}
    268          		GUI_SetColor(GUI_BLACK);
   \                     ??SetValue_9:
   \   000003CC   0000A0E3           MOV      R0,#+0
   \   000003D0   ........           BL       GUI_SetColor
    269          		GUI_DispStringHCenterAt(scratch, x+2, yStart - Y_TEXT_OFFSET+2);
   \   000003D4   0C0094E5           LDR      R0,[R4, #+12]
   \   000003D8   0710A0E1           MOV      R1,R7
   \   000003DC   022040E2           SUB      R2,R0,#+2
   \   000003E0   0D00A0E1           MOV      R0,SP
   \   000003E4   ........           BL       GUI_DispStringHCenterAt
    270          		GUI_SetColor(GUI_WHITE);
   \   000003E8   0600A0E1           MOV      R0,R6
   \   000003EC   ........           BL       GUI_SetColor
    271          		GUI_DispStringHCenterAt(scratch, x, yStart - Y_TEXT_OFFSET);
   \   000003F0   0C0094E5           LDR      R0,[R4, #+12]
   \   000003F4   0510A0E1           MOV      R1,R5
   \   000003F8   042040E2           SUB      R2,R0,#+4
   \   000003FC   0D00A0E1           MOV      R0,SP
   \   00000400   ........           BL       GUI_DispStringHCenterAt
    272          	}
    273          }
   \                     ??SetValue_7:
   \   00000404   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000408   F087BDE8           POP      {R4-R10,PC}      ;; return
    274          
    275          
    276          /****************************************************************
    277          *
    278          *       DrawBackground()
    279          *		Draw the background of the gauge without the pointer needle/bubble
    280          *
    281          ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    282          void LinearGauge::DrawBackground()
    283          {
    284          	CreateGaugeBackground();
   \                     _ZN11LinearGauge14DrawBackgroundEv:
   \   00000000   ........           B        _ZN11LinearGauge21CreateGaugeBackgroundEv  ;; tailcall
    285          }

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "0">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   3000               DC8 48, 0

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp LinearGauge::subobject LinearGauge(int, int, int, int, float, float, int, float, int, float, char *, char *, int, GUI_HWIN, bool)
   \                     _ZN11LinearGaugeC2EiiiiffififPcS0_ilb:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   38109DE5           LDR      R1,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   60009DE5           LDR      R0,[SP, #+96]
   \   0000001C   06B081E0           ADD      R11,R1,R6
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   05A083E0           ADD      R10,R3,R5
   \   00000028   0C108DE5           STR      R1,[SP, #+12]
   \   0000002C   08108DE5           STR      R1,[SP, #+8]
   \   00000030   04108DE5           STR      R1,[SP, #+4]
   \   00000034   00008DE5           STR      R0,[SP, #+0]
   \   00000038   54709DE5           LDR      R7,[SP, #+84]
   \   0000003C   58809DE5           LDR      R8,[SP, #+88]
   \   00000040   6490DDE5           LDRB     R9,[SP, #+100]
   \   00000044   0B30A0E1           MOV      R3,R11
   \   00000048   0A20A0E1           MOV      R2,R10
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   000084E5           STR      R0,[R4, #+0]
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   150000BA           BLT      `??subobject LinearGauge_0`
   \   00000064   085084E5           STR      R5,[R4, #+8]
   \   00000068   0C6084E5           STR      R6,[R4, #+12]
   \   0000006C   10A084E5           STR      R10,[R4, #+16]
   \   00000070   14B084E5           STR      R11,[R4, #+20]
   \   00000074   3C009DE5           LDR      R0,[SP, #+60]
   \   00000078   240084E5           STR      R0,[R4, #+36]
   \   0000007C   40009DE5           LDR      R0,[SP, #+64]
   \   00000080   280084E5           STR      R0,[R4, #+40]
   \   00000084   44009DE5           LDR      R0,[SP, #+68]
   \   00000088   2C0084E5           STR      R0,[R4, #+44]
   \   0000008C   4C009DE5           LDR      R0,[SP, #+76]
   \   00000090   300084E5           STR      R0,[R4, #+48]
   \   00000094   48009DE5           LDR      R0,[SP, #+72]
   \   00000098   340084E5           STR      R0,[R4, #+52]
   \   0000009C   50009DE5           LDR      R0,[SP, #+80]
   \   000000A0   380084E5           STR      R0,[R4, #+56]
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   180084E5           STR      R0,[R4, #+24]
   \   000000AC   1C7084E5           STR      R7,[R4, #+28]
   \   000000B0   208084E5           STR      R8,[R4, #+32]
   \   000000B4   4490C4E5           STRB     R9,[R4, #+68]
   \   000000B8   000000EA           B        `??subobject LinearGauge_1`
   \                     `??subobject LinearGauge_0`:
   \   000000BC   ........           BL       SystemError
   \                     `??subobject LinearGauge_1`:
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp LinearGauge::subobject ~LinearGauge()
   \                     _ZN11LinearGaugeD2Ev:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   30000000           DC8      "0",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     GUI_Font20_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   40404000           DC32     0x404040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   70707000           DC32     0x707070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     GUI_Font24B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     GUI_Font16_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%0.0f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25302E306600       DC8 37, 48, 46, 48, 102, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%0.1f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25302E316600       DC8 37, 48, 46, 49, 102, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%0.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25302E326600       DC8 37, 48, 46, 50, 102, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E32660000       DC8 37, 46, 50, 102, 0, 0, 0, 0
   \              0000        
    286          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     LinearGauge::CreateGaugeBackground()
                                        80
     LinearGauge::DrawBackground()       8
     LinearGauge::LinearGauge(int, int, int, int, float, float, int, float, int, float, char *, char *, int, GUI_HWIN, bool)
                                        56
     LinearGauge::SetValue(float)       56
     LinearGauge::subobject LinearGauge(int, int, int, int, float, float, int, float, int, float, char *, char *, int, GUI_HWIN, bool)
                                        56
     LinearGauge::subobject ~LinearGauge()
                                         0
     LinearGauge::~LinearGauge()         0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     LinearGauge::LinearGauge(int, int, int, int, float, float, int, float, int, float, char *, char *, int, GUI_HWIN, bool)
                                     204
     LinearGauge::~LinearGauge()       4
     LinearGauge::CreateGaugeBackground()
                                     716
     LinearGauge::SetValue(float)   1036
     LinearGauge::DrawBackground()     4
     ?<Constant "0">                   2
     LinearGauge::subobject LinearGauge(int, int, int, int, float, float, int, float, int, float, char *, char *, int, GUI_HWIN, bool)
                                     204
     LinearGauge::subobject ~LinearGauge()
                                       4
     ??DataTable6                      4
     ??DataTable6_1                    4
     ??DataTable6_2                    4
     ??DataTable6_3                    4
     ??DataTable6_4                    4
     ??DataTable6_5                    4
     ?<Constant "%0.0f">               8
     ?<Constant "%0.1f">               8
     ?<Constant "%0.2f">               8
     ?<Constant "%.2f">                8

 
     2 bytes in section .rodata
 2 228 bytes in section .text
 
 2 228 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none
