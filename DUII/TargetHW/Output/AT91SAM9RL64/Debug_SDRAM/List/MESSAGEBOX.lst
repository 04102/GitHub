###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:35 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\MESSAGEBOX.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\MESSAGEBOX.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\ME #
#                    SSAGEBOX.lst                                             #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\MES #
#                    SAGEBOX.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\MESSAGEBOX.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MESSAGEBOX.c
     19          Purpose     : Implementation of Mesagebox
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <string.h>             /* for memset */
     25          #include "GUI.h"
     26          #include "BUTTON.h"
     27          #include "FRAMEWIN.h"
     28          #include "TEXT.h"
     29          #include "DIALOG.h"
     30          #include "MESSAGEBOX.h"
     31          
     32          #if GUI_WINSUPPORT
     33          
     34          /*********************************************************************
     35          *
     36          *       Defaults
     37          *
     38          **********************************************************************
     39          */
     40          
     41          #ifndef MESSAGEBOX_BORDER
     42            #define MESSAGEBOX_BORDER 4
     43          #endif
     44          
     45          #ifndef MESSAGEBOX_XSIZEOK
     46            #define MESSAGEBOX_XSIZEOK 50
     47          #endif
     48          
     49          #ifndef MESSAGEBOX_YSIZEOK
     50            #define MESSAGEBOX_YSIZEOK 20
     51          #endif
     52          
     53          #ifndef MESSAGEBOX_BKCOLOR
     54            #define MESSAGEBOX_BKCOLOR GUI_WHITE
     55          #endif
     56          
     57          #define ID_FRAME 100
     58          
     59          /*********************************************************************
     60          *
     61          *       Exported routines
     62          *
     63          **********************************************************************
     64          */
     65          /*********************************************************************
     66          *
     67          *       MESSAGEBOX_Callback
     68          */

   \                                 In section .text, align 4, keep-with-next
     69          void MESSAGEBOX_Callback(WM_MESSAGE * pMsg) {
   \                     MESSAGEBOX_Callback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     70            WM_HWIN hWin = pMsg->hWin;
     71            switch (pMsg->MsgId) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   044090E5           LDR      R4,[R0, #+4]
   \   00000010   0E1051E2           SUBS     R1,R1,#+14
   \   00000014   0800000A           BEQ      ??MESSAGEBOX_Callback_0
   \   00000018   0F1051E2           SUBS     R1,R1,#+15
   \   0000001C   0200000A           BEQ      ??MESSAGEBOX_Callback_1
   \   00000020   091051E2           SUBS     R1,R1,#+9
   \   00000024   1400000A           BEQ      ??MESSAGEBOX_Callback_2
   \   00000028   1A0000EA           B        ??MESSAGEBOX_Callback_3
     72              case WM_INIT_DIALOG:
     73                FRAMEWIN_SetClientColor(hWin, MESSAGEBOX_BKCOLOR);
   \                     ??MESSAGEBOX_Callback_1:
   \   0000002C   FF14E0E3           MVN      R1,#-16777216
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       FRAMEWIN_SetClientColor
     74                break;
   \   00000038   170000EA           B        ??MESSAGEBOX_Callback_4
     75              case WM_KEY:
     76                {
     77                  int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
     78                  if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt) {
   \                     ??MESSAGEBOX_Callback_0:
   \   0000003C   0C1090E5           LDR      R1,[R0, #+12]
   \   00000040   041091E5           LDR      R1,[R1, #+4]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   1300000A           BEQ      ??MESSAGEBOX_Callback_4
     79                    switch (Key) {
   \   0000004C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   0D0050E2           SUBS     R0,R0,#+13
   \   00000058   0500000A           BEQ      ??MESSAGEBOX_Callback_5
   \   0000005C   0E0050E2           SUBS     R0,R0,#+14
   \   00000060   0D00001A           BNE      ??MESSAGEBOX_Callback_4
     80                    case GUI_KEY_ESCAPE:
     81                      GUI_EndDialog(hWin, 1);             /* End dialog with return value 1 if <ESC> is pressed */
   \   00000064   0110A0E3           MOV      R1,#+1
   \                     ??MESSAGEBOX_Callback_6:
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       GUI_EndDialog
     82                      break;
   \   00000070   090000EA           B        ??MESSAGEBOX_Callback_4
     83                    case GUI_KEY_ENTER:
     84                      GUI_EndDialog(hWin, 0);             /* End dialog with return value 0 if <ENTER> is pressed */
   \                     ??MESSAGEBOX_Callback_5:
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   FAFFFFEA           B        ??MESSAGEBOX_Callback_6
     85                      break;
     86                    }
     87                  }
     88                }
     89                break;
     90              case WM_NOTIFY_PARENT:
     91                {
     92                  int NCode = pMsg->Data.v;             /* Get notification code */
   \                     ??MESSAGEBOX_Callback_2:
   \   0000007C   0C5090E5           LDR      R5,[R0, #+12]
     93                  int Id    = WM_GetId(pMsg->hWinSrc);  /* Get control ID */
   \   00000080   080090E5           LDR      R0,[R0, #+8]
   \   00000084   ........           BL       WM_GetId
     94                  switch (NCode) {
   \   00000088   020055E3           CMP      R5,#+2
     95                    case WM_NOTIFICATION_RELEASED:      /* React only if released */
     96                      if (Id == GUI_ID_OK) {
   \   0000008C   01005003           CMPEQ    R0,#+1
   \   00000090   0100001A           BNE      ??MESSAGEBOX_Callback_4
     97                        GUI_EndDialog(hWin, 0);         /* End dialog with return value 0 if OK */
   \   00000094   F6FFFFEA           B        ??MESSAGEBOX_Callback_5
     98                      }
     99                      break;
    100                  }
    101                }
    102                break;
    103              default:
    104                WM_DefaultProc(pMsg);
   \                     ??MESSAGEBOX_Callback_3:
   \   00000098   ........           BL       WM_DefaultProc
    105            }
    106          }
   \                     ??MESSAGEBOX_Callback_4:
   \   0000009C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000A0   3080BDE8           POP      {R4,R5,PC}       ;; return
    107          
    108          /*********************************************************************
    109          *
    110          *       MESSAGEBOX_Create
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          WM_HWIN MESSAGEBOX_Create(const char * sMessage, const char * sCaption, int Flags) {
   \                     MESSAGEBOX_Create:
   \   00000000   F74F2DE9           PUSH     {R0-R2,R4-R11,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
    113            GUI_WIDGET_CREATE_INFO _aDialogCreate[3];                                     /* 0: FrameWin, 1: Text, 2: Button */
    114            int BorderSize = FRAMEWIN_GetDefaultBorderSize();                             /* Default border size of frame window */
   \   00000008   ........           BL       FRAMEWIN_GetDefaultBorderSize
    115            int xSizeFrame = MESSAGEBOX_XSIZEOK + 2 * BorderSize + MESSAGEBOX_BORDER * 2; /* XSize of frame window */
   \   0000000C   8040A0E1           LSL      R4,R0,#+1
   \   00000010   3A5084E2           ADD      R5,R4,#+58
    116            int ySizeFrame;                                                               /* YSize of frame window */
    117            int x0, y0;                                                                   /* Position of frame window */
    118            int xSizeMessage;                                                             /* Length in pixels of message */
    119            int xSizeCaption;                                                             /* Length in pixels of caption */
    120            int ySizeCaption;                                                             /* YSize of caption */
    121            int ySizeMessage;                                                             /* YSize of message */
    122            int xSize, ySize;
    123            WM_HWIN hBox;
    124            GUI_RECT Rect;
    125            const GUI_FONT GUI_UNI_PTR * pOldFont;
    126            /* Zeroinit variables */
    127            memset(_aDialogCreate, 0, sizeof(_aDialogCreate));
   \   00000014   4810A0E3           MOV      R1,#+72
   \   00000018   10008DE2           ADD      R0,SP,#+16
   \   0000001C   ........           BL       __aeabi_memclr4
    128            /* Get dimension of message */
    129            pOldFont = GUI_SetFont(TEXT_GetDefaultFont());
   \   00000020   ........           BL       TEXT_GetDefaultFont
   \   00000024   ........           BL       GUI_SetFont
   \   00000028   0060A0E1           MOV      R6,R0
    130            GUI_GetTextExtend(&Rect, sMessage, 255);
   \   0000002C   FF20A0E3           MOV      R2,#+255
   \   00000030   58109DE5           LDR      R1,[SP, #+88]
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   ........           BL       GUI_GetTextExtend
    131            xSizeMessage = Rect.x1 - Rect.x0 + MESSAGEBOX_BORDER * 2;
   \   0000003C   FC00DDE1           LDRSH    R0,[SP, #+12]
   \   00000040   F810DDE1           LDRSH    R1,[SP, #+8]
   \   00000044   010040E0           SUB      R0,R0,R1
   \   00000048   087080E2           ADD      R7,R0,#+8
    132            ySizeMessage = Rect.y1 - Rect.y0 + 1;
   \   0000004C   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   00000050   FA10DDE1           LDRSH    R1,[SP, #+10]
   \   00000054   010040E0           SUB      R0,R0,R1
   \   00000058   018080E2           ADD      R8,R0,#+1
    133            if (xSizeFrame < (xSizeMessage + 4 + MESSAGEBOX_BORDER * 2)) {
   \   0000005C   0C0087E2           ADD      R0,R7,#+12
   \   00000060   000055E1           CMP      R5,R0
    134              xSizeFrame = xSizeMessage + 4 + MESSAGEBOX_BORDER * 2;
   \   00000064   0050A0B1           MOVLT    R5,R0
    135            }
    136            ySizeCaption = GUI_GetYSizeOfFont(FRAMEWIN_GetDefaultFont());
    137            ySizeFrame = ySizeMessage +            /* size of message */
    138                         MESSAGEBOX_YSIZEOK +      /* size of button */
    139                         ySizeCaption +            /* caption size */
    140                         MESSAGEBOX_BORDER * 3 +   /* inner border - text, text - button, button - bottom */
    141                         BorderSize * 2 +          /* top & bottom border */
    142                         1;                        /* inner border */
   \   00000068   ........           BL       FRAMEWIN_GetDefaultFont
   \   0000006C   ........           BL       GUI_GetYSizeOfFont
   \   00000070   080080E0           ADD      R0,R0,R8
   \   00000074   000084E0           ADD      R0,R4,R0
   \   00000078   219080E2           ADD      R9,R0,#+33
    143            /* Get xsize of caption */
    144            xSizeCaption = GUI_GetStringDistX(sCaption);
   \   0000007C   5C009DE5           LDR      R0,[SP, #+92]
   \   00000080   ........           BL       GUI_GetStringDistX
    145            if (xSizeFrame < xSizeCaption + BorderSize * 2) {
   \   00000084   000084E0           ADD      R0,R4,R0
   \   00000088   000055E1           CMP      R5,R0
    146              xSizeFrame = xSizeCaption + BorderSize * 2;
   \   0000008C   0050A0B1           MOVLT    R5,R0
    147            }
    148            /* Check maximum */
    149            xSize = LCD_GetXSize();
   \   00000090   ........           BL       LCD_GetXSize
   \   00000094   00A0A0E1           MOV      R10,R0
    150            ySize = LCD_GetYSize();
   \   00000098   ........           BL       LCD_GetYSize
    151            if (xSizeFrame > xSize) {
    152              xSizeFrame = xSize;
    153            }
    154            if (ySizeFrame > ySize) {
    155              ySizeFrame = ySize;
    156            }
    157            /* Calculate position of framewin */
    158            x0 = GUI_OrgX + (xSize - xSizeFrame) / 2;
   \   0000009C   ........           LDR      R2,??DataTable1_1
   \   000000A0   05005AE1           CMP      R10,R5
   \   000000A4   0A50A0D1           MOVLE    R5,R10
   \   000000A8   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000000AC   05104AE0           SUB      R1,R10,R5
   \   000000B0   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000000B4   C1A082E0           ADD      R10,R2,R1, ASR #+1
    159            y0 = GUI_OrgY + (ySize - ySizeFrame) / 2;
   \   000000B8   ........           LDR      R1,??DataTable1_2
   \   000000BC   090050E1           CMP      R0,R9
   \   000000C0   0090A0D1           MOVLE    R9,R0
   \   000000C4   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000C8   090040E0           SUB      R0,R0,R9
   \   000000CC   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000D0   C0B081E0           ADD      R11,R1,R0, ASR #+1
    160            /* restore modified Context */
    161            GUI_SetFont(pOldFont);
   \   000000D4   0600A0E1           MOV      R0,R6
   \   000000D8   ........           BL       GUI_SetFont
    162            /* Fill frame win resource */
    163            _aDialogCreate[0].pfCreateIndirect = FRAMEWIN_CreateIndirect;
   \   000000DC   ........           LDR      R1,??DataTable1_3
    164            _aDialogCreate[0].pName            = sCaption;
   \   000000E0   10008DE2           ADD      R0,SP,#+16
   \   000000E4   10108DE5           STR      R1,[SP, #+16]
   \   000000E8   5C109DE5           LDR      R1,[SP, #+92]
    165            _aDialogCreate[0].x0               = x0;
    166            _aDialogCreate[0].y0               = y0;
   \   000000EC   BCB0C0E1           STRH     R11,[R0, #+12]
   \   000000F0   041080E5           STR      R1,[R0, #+4]
    167            _aDialogCreate[0].xSize            = xSizeFrame;
    168            _aDialogCreate[0].ySize            = ySizeFrame;
    169            if (Flags & GUI_MESSAGEBOX_CF_MOVEABLE) {
   \   000000F4   60109DE5           LDR      R1,[SP, #+96]
   \   000000F8   B091C0E1           STRH     R9,[R0, #+16]
   \   000000FC   010011E3           TST      R1,#0x1
    170              _aDialogCreate[0].Flags          = FRAMEWIN_CF_MOVEABLE;
   \   00000100   1020A013           MOVNE    R2,#+16
   \   00000104   B222CD11           STRHNE   R2,[SP, #+34]
    171            }
    172            /* Fill text resource */
    173            _aDialogCreate[1].pfCreateIndirect = TEXT_CreateIndirect;
   \   00000108   ........           LDR      R2,??DataTable1_4
    174            _aDialogCreate[1].pName            = sMessage;
    175            _aDialogCreate[1].Id               = GUI_ID_TEXT0;
    176            _aDialogCreate[1].x0               = (xSizeFrame - xSizeMessage - BorderSize * 2) / 2;
   \   0000010C   071045E0           SUB      R1,R5,R7
   \   00000110   28208DE5           STR      R2,[SP, #+40]
   \   00000114   58209DE5           LDR      R2,[SP, #+88]
   \   00000118   041041E0           SUB      R1,R1,R4
   \   0000011C   2C208DE5           STR      R2,[SP, #+44]
   \   00000120   582FA0E3           MOV      R2,#+352
   \   00000124   B023CDE1           STRH     R2,[SP, #+48]
   \   00000128   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   0000012C   C110A0E1           ASR      R1,R1,#+1
    177            _aDialogCreate[1].y0               = MESSAGEBOX_BORDER;
   \   00000130   0420A0E3           MOV      R2,#+4
   \   00000134   B213CDE1           STRH     R1,[SP, #+50]
   \   00000138   B423CDE1           STRH     R2,[SP, #+52]
    178            _aDialogCreate[1].xSize            = xSizeMessage;
    179            _aDialogCreate[1].ySize            = ySizeMessage;
    180            _aDialogCreate[1].Para             = GUI_TA_TOP | GUI_TA_HCENTER;
   \   0000013C   0220A0E3           MOV      R2,#+2
    181            /* Fill button resource */
    182            _aDialogCreate[2].pfCreateIndirect = BUTTON_CreateIndirect;
    183            _aDialogCreate[2].pName            = "OK";
    184            _aDialogCreate[2].Id               = GUI_ID_OK;
    185            _aDialogCreate[2].x0               = (xSizeFrame - MESSAGEBOX_XSIZEOK - BorderSize * 2) / 2;
   \   00000140   321045E2           SUB      R1,R5,#+50
   \   00000144   3C208DE5           STR      R2,[SP, #+60]
   \   00000148   041041E0           SUB      R1,R1,R4
   \   0000014C   ........           LDR      R2,??DataTable1_5
   \   00000150   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000154   C110A0E1           ASR      R1,R1,#+1
   \   00000158   40208DE5           STR      R2,[SP, #+64]
   \   0000015C   BA13C0E1           STRH     R1,[R0, #+58]
   \   00000160   ........           ADR      R2,??DataTable1  ;; 0x4F, 0x4B, 0x00, 0x00
    186            _aDialogCreate[2].y0               = MESSAGEBOX_BORDER * 2 + ySizeMessage;
   \   00000164   080088E2           ADD      R0,R8,#+8
    187            _aDialogCreate[2].xSize            = MESSAGEBOX_XSIZEOK;
   \   00000168   3210A0E3           MOV      R1,#+50
   \   0000016C   44208DE5           STR      R2,[SP, #+68]
   \   00000170   BC04CDE1           STRH     R0,[SP, #+76]
   \   00000174   BE14CDE1           STRH     R1,[SP, #+78]
   \   00000178   0120A0E3           MOV      R2,#+1
    188            _aDialogCreate[2].ySize            = MESSAGEBOX_YSIZEOK;
   \   0000017C   1410A0E3           MOV      R1,#+20
    189            /* Create dialog */
    190            hBox = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), MESSAGEBOX_Callback, 0, 0, 0);
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   B824CDE1           STRH     R2,[SP, #+72]
   \   00000188   B015CDE1           STRH     R1,[SP, #+80]
   \   0000018C   04008DE5           STR      R0,[SP, #+4]
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   BAA1CDE1           STRH     R10,[SP, #+26]
   \   00000198   BE51CDE1           STRH     R5,[SP, #+30]
   \   0000019C   B673CDE1           STRH     R7,[SP, #+54]
   \   000001A0   B883CDE1           STRH     R8,[SP, #+56]
   \   000001A4   0030A0E3           MOV      R3,#+0
   \   000001A8   ........           LDR      R2,??DataTable1_6
   \   000001AC   0310A0E3           MOV      R1,#+3
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   ........           BL       GUI_CreateDialogBox
   \   000001B8   0040A0E1           MOV      R4,R0
    191            if (Flags & GUI_MESSAGEBOX_CF_MODAL) {
   \   000001BC   60009DE5           LDR      R0,[SP, #+96]
   \   000001C0   020010E3           TST      R0,#0x2
   \   000001C4   0100000A           BEQ      ??MESSAGEBOX_Create_0
    192              WM_MakeModal(hBox);
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   ........           BL       WM_MakeModal
    193            }
    194            return hBox;
   \                     ??MESSAGEBOX_Create_0:
   \   000001D0   0400A0E1           MOV      R0,R4
   \   000001D4   64D08DE2           ADD      SP,SP,#+100
   \   000001D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    195          }
    196          
    197          /*********************************************************************
    198          *
    199          *       GUI_MessageBox
    200          */

   \                                 In section .text, align 4, keep-with-next
    201          int GUI_MessageBox(const char * sMessage, const char * sCaption, int Flags) {
   \                     GUI_MessageBox:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    202            WM_HWIN hWin;
    203            hWin = MESSAGEBOX_Create(sMessage, sCaption, Flags);
   \   00000008   ........           BL       MESSAGEBOX_Create
    204            /* Exec dialog */
    205            return GUI_ExecCreatedDialog(hWin);
   \   0000000C   04D08DE2           ADD      SP,SP,#+4
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   ........           B        GUI_ExecCreatedDialog  ;; tailcall
    206          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     GUI_OrgX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     GUI_OrgY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   ........           DC32     FRAMEWIN_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   ........           DC32     TEXT_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   ........           DC32     BUTTON_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   ........           DC32     MESSAGEBOX_Callback

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F4B0000           DC8 79, 75, 0, 0
    207          
    208          #else
    209          
    210          void GUI_MessageBox_C(void) {} /* avoid empty object files */
    211          
    212          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_MessageBox           8
     MESSAGEBOX_Callback     16
     MESSAGEBOX_Create      136


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     MESSAGEBOX_Callback  164
     MESSAGEBOX_Create    476
     GUI_MessageBox        24
     ??DataTable1           4
     ??DataTable1_1         4
     ??DataTable1_2         4
     ??DataTable1_3         4
     ??DataTable1_4         4
     ??DataTable1_5         4
     ??DataTable1_6         4
     ?<Constant "OK">       4

 
   4 bytes in section .rodata
 692 bytes in section .text
 
 692 bytes of CODE  memory
   4 bytes of CONST memory

Errors: none
Warnings: none
