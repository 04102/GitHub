###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\dbgu.c                            #
#    Command line =  C:\DUII\TargetHW\Setup\dbgu.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\db #
#                    gu.lst                                                   #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\dbg #
#                    u.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\dbgu.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "dbgu.h"
     35          //#include "AT91SAM9RL64.h"
     36          
     37          //------------------------------------------------------------------------------
     38          //         Global functions
     39          //------------------------------------------------------------------------------
     40          //------------------------------------------------------------------------------
     41          /// Initializes the DBGU with the given parameters, and enables both the
     42          /// transmitter and the receiver. The mode parameter contains the value of the
     43          /// DBGU_MR register.
     44          /// Value DBGU_STANDARD can be used for mode to get the most common configuration
     45          /// (i.e. aysnchronous, 8bits, no parity, 1 stop bit, no flow control).
     46          /// \param mode  Operating mode to configure.
     47          /// \param baudrate  Desired baudrate (e.g. 115200).
     48          /// \param mck  Frequency of the system master clock in Hz.
     49          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     50          void DBGU_Configure(
     51              unsigned int mode,
     52              unsigned int baudrate,
     53              unsigned int mck)
     54          {
   \                     DBGU_Configure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0200A0E1           MOV      R0,R2
     55          
     56          //    PIO_Configure(pins, PIO_LISTSIZE(pins));
     57          	AT91C_BASE_PIOA->PIO_IDR = 0x00600000;
   \   0000000C   6028A0E3           MOV      R2,#+6291456
   \   00000010   913FA0E3           MOV      R3,#+580
   \   00000014   002E03E5           STR      R2,[R3, #-3584]
     58          	AT91C_BASE_PIOA->PIO_PPUDR = 0x00600000;
   \   00000018   983FA0E3           MOV      R3,#+608
   \   0000001C   002E03E5           STR      R2,[R3, #-3584]
     59          	AT91C_BASE_PIOA->PIO_ASR = 0x00600000;
   \   00000020   9C3FA0E3           MOV      R3,#+624
   \   00000024   002E03E5           STR      R2,[R3, #-3584]
     60          	AT91C_BASE_PIOA->PIO_PDR = 0x00600000;
   \   00000028   813FA0E3           MOV      R3,#+516
   \   0000002C   002E03E5           STR      R2,[R3, #-3584]
     61            
     62          	 #if defined(cortexm3)
     63              // Enable clock for UART
     64              AT91C_BASE_PMC->PMC_PCER = (1 << AT91C_ID_DBGU);
     65              #endif
     66          
     67              // Reset & disable receiver and transmitter, disable interrupts
     68              AT91C_BASE_DBGU->DBGU_CR = AT91C_US_RSTRX | AT91C_US_RSTTX;
   \   00000030   FF50E0E3           MVN      R5,#+255
   \   00000034   D05EC5E3           BIC      R5,R5,#0xD00
   \   00000038   0C20A0E3           MOV      R2,#+12
   \   0000003C   002085E5           STR      R2,[R5, #+0]
     69              AT91C_BASE_DBGU->DBGU_IDR = 0xFFFFFFFF;
   \   00000040   0030E0E3           MVN      R3,#+0
   \   00000044   003E02E5           STR      R3,[R2, #-3584]
     70              
     71              // Configure baud rate
     72              AT91C_BASE_DBGU->DBGU_BRGR = mck / (baudrate * 16);
   \   00000048   0112A0E1           LSL      R1,R1,#+4
   \   0000004C   ........           BL       __aeabi_uidiv
   \   00000050   2010A0E3           MOV      R1,#+32
   \   00000054   000E01E5           STR      R0,[R1, #-3584]
     73              
     74              // Configure mode register
     75              AT91C_BASE_DBGU->DBGU_MR = mode;
   \   00000058   0400A0E3           MOV      R0,#+4
   \   0000005C   004E00E5           STR      R4,[R0, #-3584]
     76              
     77              // Disable DMA channel
     78              AT91C_BASE_DBGU->DBGU_PTCR = AT91C_PDC_RXTDIS | AT91C_PDC_TXTDIS;
   \   00000060   480FA0E3           MOV      R0,#+288
   \   00000064   E21080E2           ADD      R1,R0,#+226
   \   00000068   001E00E5           STR      R1,[R0, #-3584]
     79          
     80              // Enable receiver and transmitter
     81              AT91C_BASE_DBGU->DBGU_CR = AT91C_US_RXEN | AT91C_US_TXEN;
   \   0000006C   5000A0E3           MOV      R0,#+80
   \   00000070   000085E5           STR      R0,[R5, #+0]
     82          }
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
     83          
     84          //------------------------------------------------------------------------------
     85          /// Outputs a character on the DBGU line.
     86          /// \note This function is synchronous (i.e. uses polling).
     87          /// \param c  Character to send.
     88          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     89          void DBGU_PutChar(unsigned char c)
     90          {
   \                     DBGU_PutChar:
   \   00000000   EB10E0E3           MVN      R1,#+235
   \   00000004   D01EC1E3           BIC      R1,R1,#0xD00
     91              // Wait for the transmitter to be ready
     92              while ((AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXEMPTY) == 0);
   \                     ??DBGU_PutChar_0:
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   800F12E3           TST      R2,#0x200
   \   00000010   FCFFFF0A           BEQ      ??DBGU_PutChar_0
     93              
     94              // Send character
     95              AT91C_BASE_DBGU->DBGU_THR = c;
   \   00000014   0820A0E3           MOV      R2,#+8
   \   00000018   EC0D02E5           STR      R0,[R2, #-3564]
     96              
     97              // Wait for the transfer to complete
     98              while ((AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXEMPTY) == 0);
   \                     ??DBGU_PutChar_1:
   \   0000001C   000091E5           LDR      R0,[R1, #+0]
   \   00000020   800F10E3           TST      R0,#0x200
   \   00000024   FCFFFF0A           BEQ      ??DBGU_PutChar_1
     99          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    100          
    101          //------------------------------------------------------------------------------
    102          /// Return 1 if a character can be read in DBGU
    103          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    104          unsigned int DBGU_IsRxReady()
    105          {
    106              return (AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_RXRDY);
   \                     DBGU_IsRxReady:
   \   00000000   EB00E0E3           MVN      R0,#+235
   \   00000004   D00EC0E3           BIC      R0,R0,#0xD00
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   010000E2           AND      R0,R0,#0x1
   \   00000010   1EFF2FE1           BX       LR               ;; return
    107          }
    108          
    109          //------------------------------------------------------------------------------
    110          /// Reads and returns a character from the DBGU.
    111          /// \note This function is synchronous (i.e. uses polling).
    112          /// \return Character received.
    113          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    114          unsigned char DBGU_GetChar(void)
    115          {
   \                     DBGU_GetChar:
   \   00000000   EB00E0E3           MVN      R0,#+235
   \   00000004   D00EC0E3           BIC      R0,R0,#0xD00
    116              while ((AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_RXRDY) == 0);
   \                     ??DBGU_GetChar_0:
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   010011E3           TST      R1,#0x1
   \   00000010   FCFFFF0A           BEQ      ??DBGU_GetChar_0
    117              return AT91C_BASE_DBGU->DBGU_RHR;
   \   00000014   0400A0E3           MOV      R0,#+4
   \   00000018   EC0D10E5           LDR      R0,[R0, #-3564]
   \   0000001C   FF0000E2           AND      R0,R0,#0xFF
   \   00000020   1EFF2FE1           BX       LR               ;; return
    118          }
    119          

   \                                 In section .text, align 4, keep-with-next
    120          void DBGU_Print(char *string)
    121          {
   \                     DBGU_Print:
   \   00000000   EB10E0E3           MVN      R1,#+235
   \   00000004   D01EC1E3           BIC      R1,R1,#0xD00
    122             unsigned char ch;
    123            
    124            	while ((ch = *string++) != 0)
   \                     ??DBGU_Print_0:
   \   00000008   0120D0E4           LDRB     R2,[R0], #+1
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0800000A           BEQ      ??DBGU_Print_1
    125          	  	DBGU_PutChar(ch);
   \                     ??DBGU_Print_2:
   \   00000014   003091E5           LDR      R3,[R1, #+0]
   \   00000018   800F13E3           TST      R3,#0x200
   \   0000001C   FCFFFF0A           BEQ      ??DBGU_Print_2
   \   00000020   0830A0E3           MOV      R3,#+8
   \   00000024   EC2D03E5           STR      R2,[R3, #-3564]
   \                     ??DBGU_Print_3:
   \   00000028   002091E5           LDR      R2,[R1, #+0]
   \   0000002C   800F12E3           TST      R2,#0x200
   \   00000030   FCFFFF0A           BEQ      ??DBGU_Print_3
   \   00000034   F3FFFFEA           B        ??DBGU_Print_0
    126          }
   \                     ??DBGU_Print_1:
   \   00000038   1EFF2FE1           BX       LR               ;; return
    127          

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     DBGU_Configure     12
     DBGU_GetChar        0
     DBGU_IsRxReady      0
     DBGU_Print          0
     DBGU_PutChar        0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     DBGU_Configure  120
     DBGU_PutChar     44
     DBGU_IsRxReady   20
     DBGU_GetChar     36
     DBGU_Print       60

 
 280 bytes in section .text
 
 280 bytes of CODE memory

Errors: none
Warnings: none
