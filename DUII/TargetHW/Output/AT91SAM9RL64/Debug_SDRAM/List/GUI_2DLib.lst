###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:00 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_2DLib.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_2DLib.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_2DLib.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _2DLib.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_2DLib.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI2DLib.C
     19          Purpose     : Main part of the 2D graphics library
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Public code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       GUI_MoveRel
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          void GUI_MoveRel(int dx, int dy) { /*tbd: GL_LinePos. */
   \                     GUI_MoveRel:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     39            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
     40            GUI_Context.DrawPosX += dx;
   \   00000014   ........           LDR      R0,??DataTable3
     41            GUI_Context.DrawPosY += dy;
     42            GUI_UNLOCK();
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   F612D0E1           LDRSH    R1,[R0, #+38]
   \   00000020   011084E0           ADD      R1,R4,R1
   \   00000024   B612C0E1           STRH     R1,[R0, #+38]
   \   00000028   F812D0E1           LDRSH    R1,[R0, #+40]
   \   0000002C   011085E0           ADD      R1,R5,R1
   \   00000030   B812C0E1           STRH     R1,[R0, #+40]
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   ........           B        GUI_Unlock       ;; tailcall
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       GL_MoveTo
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          void GL_MoveTo(int x, int y) {
     50            GUI_Context.DrawPosX = x;
   \                     GL_MoveTo:
   \   00000000   ........           LDR      R2,??DataTable3
   \   00000004   B602C2E1           STRH     R0,[R2, #+38]
     51            GUI_Context.DrawPosY = y;
   \   00000008   B812C2E1           STRH     R1,[R2, #+40]
     52          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     53          
     54          /*********************************************************************
     55          *
     56          *       GUI_MoveTo
     57          */

   \                                 In section .text, align 4, keep-with-next
     58          void GUI_MoveTo(int x, int y) {
   \                     GUI_MoveTo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     59            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
     60            #if (GUI_WINSUPPORT)
     61              WM_ADDORG(x,y);
   \   00000014   ........           LDR      R0,??DataTable3
   \   00000018   441090E5           LDR      R1,[R0, #+68]
     62            #endif
     63            GL_MoveTo(x,y);
   \   0000001C   402090E5           LDR      R2,[R0, #+64]
   \   00000020   051081E0           ADD      R1,R1,R5
   \   00000024   042082E0           ADD      R2,R2,R4
   \   00000028   B622C0E1           STRH     R2,[R0, #+38]
   \   0000002C   B812C0E1           STRH     R1,[R0, #+40]
     64            GUI_UNLOCK();
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   ........           B        GUI_Unlock       ;; tailcall
     65          }
     66          
     67          /*********************************************************************
     68          *
     69          *       Rectangle filling / inverting
     70          *
     71          **********************************************************************
     72          */
     73          /*********************************************************************
     74          *
     75          *       _DrawRect
     76          */
     77          static void _DrawRect(int x0, int y0, int x1, int y1) {
     78            LCD_DrawHLine(x0, y0, x1);
     79            LCD_DrawHLine(x0, y1, x1);
     80            LCD_DrawVLine(x0, y0 + 1, y1 - 1);
     81            LCD_DrawVLine(x1, y0 + 1, y1 - 1);
     82          }
     83          
     84          /*********************************************************************
     85          *
     86          *       GUI_DrawRect
     87          */

   \                                 In section .text, align 4, keep-with-next
     88          void GUI_DrawRect(int x0, int y0, int x1, int y1) {
   \                     GUI_DrawRect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0340A0E1           MOV      R4,R3
     89            #if (GUI_WINSUPPORT)
     90              int Off;
     91              GUI_RECT r;
     92            #endif
     93            GUI_LOCK();
   \   00000018   ........           BL       GUI_Lock
     94            #if (GUI_WINSUPPORT)
     95              Off = GUI_Context.PenSize -1;
   \   0000001C   ........           LDR      R1,??DataTable3
   \   00000020   1800D1E5           LDRB     R0,[R1, #+24]
     96              WM_ADDORG(x0,y0);
   \   00000024   402091E5           LDR      R2,[R1, #+64]
   \   00000028   441091E5           LDR      R1,[R1, #+68]
   \   0000002C   010040E2           SUB      R0,R0,#+1
   \   00000030   055082E0           ADD      R5,R2,R5
   \   00000034   077081E0           ADD      R7,R1,R7
     97              WM_ADDORG(x1,y1);
   \   00000038   044081E0           ADD      R4,R1,R4
     98              r.x0 = x0 - Off;
   \   0000003C   001045E0           SUB      R1,R5,R0
   \   00000040   066082E0           ADD      R6,R2,R6
   \   00000044   B010CDE1           STRH     R1,[SP, #+0]
     99              r.x1 = x1 + Off;
   \   00000048   061080E0           ADD      R1,R0,R6
   \   0000004C   B410CDE1           STRH     R1,[SP, #+4]
    100              r.y0 = y0 - Off;
   \   00000050   001047E0           SUB      R1,R7,R0
    101              r.y1 = y1 + Off;
   \   00000054   040080E0           ADD      R0,R0,R4
   \   00000058   B600CDE1           STRH     R0,[SP, #+6]
   \   0000005C   B210CDE1           STRH     R1,[SP, #+2]
    102              WM_ITERATE_START(&r); {
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           BL       WM__InitIVRSearch
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1400000A           BEQ      ??GUI_DrawRect_0
    103            #endif
    104            _DrawRect(x0, y0, x1, y1);
   \                     ??GUI_DrawRect_1:
   \   00000070   0620A0E1           MOV      R2,R6
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       LCD_DrawHLine
   \   00000080   0620A0E1           MOV      R2,R6
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       LCD_DrawHLine
   \   00000090   018087E2           ADD      R8,R7,#+1
   \   00000094   019044E2           SUB      R9,R4,#+1
   \   00000098   0920A0E1           MOV      R2,R9
   \   0000009C   0810A0E1           MOV      R1,R8
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       LCD_DrawVLine
   \   000000A8   0920A0E1           MOV      R2,R9
   \   000000AC   0810A0E1           MOV      R1,R8
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           BL       LCD_DrawVLine
    105            #if (GUI_WINSUPPORT)
    106              } WM_ITERATE_END();
   \   000000B8   ........           BL       WM__GetNextIVR
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   EAFFFF1A           BNE      ??GUI_DrawRect_1
    107            #endif
    108            GUI_UNLOCK();
   \                     ??GUI_DrawRect_0:
   \   000000C4   ........           BL       GUI_Unlock
    109          }
   \   000000C8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000CC   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context
    110          
    111          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     GL_MoveTo         0
     GUI_DrawRect     40
     GUI_MoveRel      16
     GUI_MoveTo       16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI_MoveRel      60
     GL_MoveTo        16
     GUI_MoveTo       60
     GUI_DrawRect    208
     ??DataTable3      4

 
 348 bytes in section .text
 
 348 bytes of CODE memory

Errors: none
Warnings: none
