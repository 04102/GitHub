###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:12 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_MultiSel.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_MultiSel.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_MultiSel.lst                                       #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_MultiSel.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_MultiSel.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_MultiSel.c
     19          Purpose     : Implementation of listbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          
     25          #include "GUI_ARRAY.h"
     26          #include "LISTBOX_Private.h"
     27          #include "GUI_Debug.h"
     28          #include "GUI_Private.h"
     29          #include "WM_Intern.h"
     30          
     31          #if GUI_WINSUPPORT
     32          
     33          /*********************************************************************
     34          *
     35          *       Exported routines:  Various methods
     36          *
     37          **********************************************************************
     38          */
     39          /*********************************************************************
     40          *
     41          *       LISTBOX_SetMulti
     42          */

   \                                 In section .text, align 4, keep-with-next
     43          void LISTBOX_SetMulti(LISTBOX_Handle hObj, int Mode) {
   \                     LISTBOX_SetMulti:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
     44            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1100000A           BEQ      ??LISTBOX_SetMulti_0
     45              LISTBOX_Obj * pObj;
     46              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     47              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     48              if (Mode) {
   \   00000024   9210D0E5           LDRB     R1,[R0, #+146]
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0300000A           BEQ      ??LISTBOX_SetMulti_1
     49                if (!(pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   00000030   040011E3           TST      R1,#0x4
   \   00000034   0700001A           BNE      ??LISTBOX_SetMulti_2
     50                  pObj->Flags |= LISTBOX_SF_MULTISEL;
   \   00000038   041081E3           ORR      R1,R1,#0x4
   \   0000003C   020000EA           B        ??LISTBOX_SetMulti_3
     51                  LISTBOX__InvalidateInsideArea(hObj);
     52                }
     53              } else {
     54                if (pObj->Flags & LISTBOX_SF_MULTISEL) {
   \                     ??LISTBOX_SetMulti_1:
   \   00000040   040011E3           TST      R1,#0x4
   \   00000044   0300000A           BEQ      ??LISTBOX_SetMulti_2
     55                  pObj->Flags &= ~LISTBOX_SF_MULTISEL;
   \   00000048   0410C1E3           BIC      R1,R1,#0x4
   \                     ??LISTBOX_SetMulti_3:
   \   0000004C   9210C0E5           STRB     R1,[R0, #+146]
     56                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       LISTBOX__InvalidateInsideArea
     57                }
     58              }
     59              GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_SetMulti_2:
   \   00000058   ........           BL       GUI_ALLOC_UnlockH
     60              WM_UNLOCK();
   \   0000005C   ........           BL       GUI_Unlock
     61            }
     62          }
   \                     ??LISTBOX_SetMulti_0:
   \   00000060   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
     63          
     64          /*********************************************************************
     65          *
     66          *       LISTBOX_GetMulti
     67          */

   \                                 In section .text, align 4, keep-with-next
     68          int LISTBOX_GetMulti(LISTBOX_Handle hObj) {
   \                     LISTBOX_GetMulti:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
     69            int Multi = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
     70            if (hObj) {
   \   00000010   0700000A           BEQ      ??LISTBOX_GetMulti_0
     71              LISTBOX_Obj * pObj;
     72              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
     73              pObj = LISTBOX_LOCK_H(hObj);
     74              if (!(pObj->Flags & LISTBOX_SF_MULTISEL)) {
     75                Multi = 0;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   9200D0E5           LDRB     R0,[R0, #+146]
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   205101E0           AND      R5,R1,R0, LSR #+2
     76              } else {
     77                Multi = 1;
     78              }
     79              GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
     80              WM_UNLOCK();
   \   00000030   ........           BL       GUI_Unlock
     81            }
     82            return Multi;
   \                     ??LISTBOX_GetMulti_0:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
     83          }
     84          
     85          /*********************************************************************
     86          *
     87          *       LISTBOX_GetItemSel
     88          */

   \                                 In section .text, align 4, keep-with-next
     89          int LISTBOX_GetItemSel(LISTBOX_Handle hObj, unsigned Index) {
   \                     LISTBOX_GetItemSel:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     90            int Ret = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     91            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1500000A           BEQ      ??LISTBOX_GetItemSel_0
     92              unsigned NumItems;
     93              LISTBOX_Obj * pObj;
     94              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     95              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0040A0E1           MOV      R4,R0
     96              NumItems = LISTBOX__GetNumItems(pObj);
     97              if ((Index < NumItems) && (pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   00000028   ........           BL       LISTBOX__GetNumItems
   \   0000002C   000055E1           CMP      R5,R0
   \   00000030   0C00002A           BCS      ??LISTBOX_GetItemSel_1
   \   00000034   9200D4E5           LDRB     R0,[R4, #+146]
   \   00000038   040010E3           TST      R0,#0x4
   \   0000003C   0900000A           BEQ      ??LISTBOX_GetItemSel_1
     98                WM_HMEM hItem = GUI_ARRAY_GethItem(pObj->ItemArray, Index);
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   340094E5           LDR      R0,[R4, #+52]
   \   00000048   ........           BL       GUI_ARRAY_GethItem
     99                if (hItem) {
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0400000A           BEQ      ??LISTBOX_GetItemSel_1
    100                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
    101                  if (pItem->Status & LISTBOX_ITEM_SELECTED) {
   \   00000054   ........           BL       GUI_ALLOC_LockH
   \   00000058   0800D0E5           LDRB     R0,[R0, #+8]
   \   0000005C   010010E3           TST      R0,#0x1
    102                    Ret = 1;
   \   00000060   0160A013           MOVNE    R6,#+1
    103                  }
    104                  GUI_UNLOCK_H(pItem);
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
    105                }
    106              }
    107              GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_GetItemSel_1:
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
    108              WM_UNLOCK();
   \   0000006C   ........           BL       GUI_Unlock
    109            }
    110            return Ret;
   \                     ??LISTBOX_GetItemSel_0:
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   7080BDE8           POP      {R4-R6,PC}       ;; return
    111          }
    112          
    113          /*********************************************************************
    114          *
    115          *       LISTBOX_SetItemSel
    116          */

   \                                 In section .text, align 4, keep-with-next
    117          void LISTBOX_SetItemSel(LISTBOX_Handle hObj, unsigned Index, int OnOff) {
   \                     LISTBOX_SetItemSel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    118            if (hObj) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   2000000A           BEQ      ??LISTBOX_SetItemSel_0
    119              unsigned NumItems;
    120              LISTBOX_Obj * pObj;
    121              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    122              pObj = LISTBOX_LOCK_H(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0070A0E1           MOV      R7,R0
    123              NumItems = LISTBOX__GetNumItems(pObj);
    124              if ((Index < NumItems) && (pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   0000002C   ........           BL       LISTBOX__GetNumItems
   \   00000030   000055E1           CMP      R5,R0
   \   00000034   1700002A           BCS      ??LISTBOX_SetItemSel_1
   \   00000038   9200D7E5           LDRB     R0,[R7, #+146]
   \   0000003C   040010E3           TST      R0,#0x4
   \   00000040   1400000A           BEQ      ??LISTBOX_SetItemSel_1
    125                WM_HMEM hItem = GUI_ARRAY_GethItem(pObj->ItemArray, Index);
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   340097E5           LDR      R0,[R7, #+52]
   \   0000004C   ........           BL       GUI_ARRAY_GethItem
    126                if (hItem) {
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0F00000A           BEQ      ??LISTBOX_SetItemSel_1
    127                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_LOCK_H(hItem);
   \   00000058   ........           BL       GUI_ALLOC_LockH
    128                  if (OnOff) {
   \   0000005C   0810D0E5           LDRB     R1,[R0, #+8]
   \   00000060   000056E3           CMP      R6,#+0
   \   00000064   0300000A           BEQ      ??LISTBOX_SetItemSel_2
    129                    if (!(pItem->Status & LISTBOX_ITEM_SELECTED)) {
   \   00000068   010011E3           TST      R1,#0x1
   \   0000006C   0800001A           BNE      ??LISTBOX_SetItemSel_3
    130                      pItem->Status |= LISTBOX_ITEM_SELECTED;
   \   00000070   011081E3           ORR      R1,R1,#0x1
   \   00000074   020000EA           B        ??LISTBOX_SetItemSel_4
    131                      LISTBOX__InvalidateItem(hObj, Index);
    132                    }
    133                  } else {
    134                    if (pItem->Status & LISTBOX_ITEM_SELECTED) {
   \                     ??LISTBOX_SetItemSel_2:
   \   00000078   010011E3           TST      R1,#0x1
   \   0000007C   0400000A           BEQ      ??LISTBOX_SetItemSel_3
    135                      pItem->Status &= ~LISTBOX_ITEM_SELECTED;
   \   00000080   FE1001E2           AND      R1,R1,#0xFE
   \                     ??LISTBOX_SetItemSel_4:
   \   00000084   0810C0E5           STRB     R1,[R0, #+8]
    136                      LISTBOX__InvalidateItem(hObj, Index);
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       LISTBOX__InvalidateItem
    137                    }
    138                  }
    139                  GUI_UNLOCK_H(pItem);
   \                     ??LISTBOX_SetItemSel_3:
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    140                }
    141              }
    142              GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_SetItemSel_1:
   \   00000098   ........           BL       GUI_ALLOC_UnlockH
    143              WM_UNLOCK();
   \   0000009C   ........           BL       GUI_Unlock
    144            }
    145          }
   \                     ??LISTBOX_SetItemSel_0:
   \   000000A0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
    146          
    147          #else                            /* Avoid problems with empty object modules */
    148            void LISTBOX_MultiSel_C(void) {}
    149          #endif

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     LISTBOX_GetItemSel     16
     LISTBOX_GetMulti       16
     LISTBOX_SetItemSel     24
     LISTBOX_SetMulti       16


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     LISTBOX_SetMulti    104
     LISTBOX_GetMulti     64
     LISTBOX_GetItemSel  120
     LISTBOX_SetItemSel  168

 
 456 bytes in section .text
 
 456 bytes of CODE memory

Errors: none
Warnings: none
