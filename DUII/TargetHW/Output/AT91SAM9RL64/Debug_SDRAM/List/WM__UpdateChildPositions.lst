###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:02:24 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM__UpdateChildPositions.c          #
#    Command line =  C:\DUII\TargetHW\GUI\WM__UpdateChildPositions.c -D       #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\WM #
#                    __UpdateChildPositions.lst                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\WM_ #
#                    _UpdateChildPositions.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM__UpdateChildPositions.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM__UpdateChildPositions.C
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          #include "WM_Intern.h"
     25          
     26          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     27          #include "GUI_Debug.h"
     28          #define WM_DEBUG_LEVEL 1
     29          
     30          /*********************************************************************
     31          *
     32          *       Public code
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       WM__UpdateChildPositions
     39          *
     40          * Purpose:
     41          *   Move and/or resize all children of a resized window.
     42          *   What exactly happens to the window depends on how the edges are
     43          *   anchored.
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          void WM__UpdateChildPositions(WM_Obj* pObj, int dx0, int dy0, int dx1, int dy1) {
   \                     WM__UpdateChildPositions:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
     46            WM_HWIN hChild;
     47            WM_Obj* pChild;
     48            int dx, dy, dw, dh;
     49            for (hChild = pObj->hFirstChild; hChild; hChild = pChild->hNext) {
   \   00000004   1C4090E5           LDR      R4,[R0, #+28]
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   4B00000A           BEQ      ??WM__UpdateChildPositions_0
     50              int Status;
     51              GUI_RECT rOld, rNew;
     52              pChild = WM_H2P(hChild);
   \                     ??WM__UpdateChildPositions_1:
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   0050A0E1           MOV      R5,R0
     53              /* Compute size of new rectangle */
     54              rOld = pChild->Rect;
   \   00000020   F410D5E1           LDRSH    R1,[R5, #+4]
   \   00000024   F090D5E1           LDRSH    R9,[R5, #+0]
   \   00000028   F260D5E1           LDRSH    R6,[R5, #+2]
   \   0000002C   B210CDE1           STRH     R1,[SP, #+2]
   \   00000030   F610D5E1           LDRSH    R1,[R5, #+6]
   \   00000034   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000038   B010CDE1           STRH     R1,[SP, #+0]
     55              rNew = rOld;
     56              Status = pChild->Status & (WM_SF_ANCHOR_RIGHT | WM_SF_ANCHOR_LEFT);
     57              switch (Status) {
   \   0000003C   283095E5           LDR      R3,[R5, #+40]
   \   00000040   A0EF03E2           AND      LR,R3,#0x280
   \   00000044   80E05EE2           SUBS     LR,LR,#+128
   \   00000048   0200000A           BEQ      ??WM__UpdateChildPositions_2
   \   0000004C   80EF5EE2           SUBS     LR,LR,#+512
   \   00000050   0200000A           BEQ      ??WM__UpdateChildPositions_3
   \   00000054   080000EA           B        ??WM__UpdateChildPositions_4
     58                case WM_SF_ANCHOR_RIGHT:                      /* Right ANCHOR : Move window with right side */
     59                  rNew.x0 += dx1;
   \                     ??WM__UpdateChildPositions_2:
   \   00000058   10E09DE5           LDR      LR,[SP, #+16]
   \   0000005C   070000EA           B        ??WM__UpdateChildPositions_5
     60                  rNew.x1 += dx1;
     61                  break;
     62                case WM_SF_ANCHOR_RIGHT | WM_SF_ANCHOR_LEFT:    /* Left & Right ANCHOR: Resize window */
     63                  rNew.x0 += dx0;
   \                     ??WM__UpdateChildPositions_3:
   \   00000060   08E09DE5           LDR      LR,[SP, #+8]
     64                  rNew.x1 += dx1;
   \   00000064   10C09DE5           LDR      R12,[SP, #+16]
   \   00000068   09A08EE0           ADD      R10,LR,R9
   \   0000006C   0AA8A0E1           LSL      R10,R10,#+16
   \   00000070   4AA8A0E1           ASR      R10,R10,#+16
   \   00000074   02B08CE0           ADD      R11,R12,R2
     65                  break;
   \   00000078   040000EA           B        ??WM__UpdateChildPositions_6
     66                default:                                    /* Left ANCHOR: Move window with left side of parent */
     67                  rNew.x0 += dx0;
   \                     ??WM__UpdateChildPositions_4:
   \   0000007C   08E09DE5           LDR      LR,[SP, #+8]
   \                     ??WM__UpdateChildPositions_5:
   \   00000080   09A08EE0           ADD      R10,LR,R9
   \   00000084   0AA8A0E1           LSL      R10,R10,#+16
   \   00000088   4AA8A0E1           ASR      R10,R10,#+16
     68                  rNew.x1 += dx0;
   \   0000008C   02B08EE0           ADD      R11,LR,R2
     69              }
     70              Status = pChild->Status & (WM_SF_ANCHOR_TOP   | WM_SF_ANCHOR_BOTTOM);
     71              switch (Status) {
   \                     ??WM__UpdateChildPositions_6:
   \   00000090   502E03E2           AND      R2,R3,#0x500
   \   00000094   402F52E2           SUBS     R2,R2,#+256
   \   00000098   0200000A           BEQ      ??WM__UpdateChildPositions_7
   \   0000009C   402E52E2           SUBS     R2,R2,#+1024
   \   000000A0   0200000A           BEQ      ??WM__UpdateChildPositions_8
   \   000000A4   080000EA           B        ??WM__UpdateChildPositions_9
     72                case WM_SF_ANCHOR_BOTTOM:                     /* Bottom ANCHOR */
     73                  rNew.y0 += dy1;
   \                     ??WM__UpdateChildPositions_7:
   \   000000A8   38209DE5           LDR      R2,[SP, #+56]
   \   000000AC   070000EA           B        ??WM__UpdateChildPositions_10
     74                  rNew.y1 += dy1;
     75                  break;
     76                case WM_SF_ANCHOR_BOTTOM | WM_SF_ANCHOR_TOP:    /* resize window */
     77                  rNew.y0 += dy0;
   \                     ??WM__UpdateChildPositions_8:
   \   000000B0   0C209DE5           LDR      R2,[SP, #+12]
     78                  rNew.y1 += dy1;
   \   000000B4   38009DE5           LDR      R0,[SP, #+56]
   \   000000B8   067082E0           ADD      R7,R2,R6
   \   000000BC   0778A0E1           LSL      R7,R7,#+16
   \   000000C0   4778A0E1           ASR      R7,R7,#+16
   \   000000C4   018080E0           ADD      R8,R0,R1
     79                  break;
   \   000000C8   040000EA           B        ??WM__UpdateChildPositions_11
     80                default:                                    /* Top ANCHOR */
     81                  rNew.y0 += dy0;
   \                     ??WM__UpdateChildPositions_9:
   \   000000CC   0C209DE5           LDR      R2,[SP, #+12]
   \                     ??WM__UpdateChildPositions_10:
   \   000000D0   067082E0           ADD      R7,R2,R6
   \   000000D4   0778A0E1           LSL      R7,R7,#+16
   \   000000D8   4778A0E1           ASR      R7,R7,#+16
     82                  rNew.y1 += dy0;
   \   000000DC   018082E0           ADD      R8,R2,R1
     83              }
     84              /* Set new window position using Move and Resize as required */
     85              dx = rNew.x0 - rOld.x0;
   \                     ??WM__UpdateChildPositions_11:
   \   000000E0   09104AE0           SUB      R1,R10,R9
     86              dy = rNew.y0 - rOld.y0;
   \   000000E4   062047E0           SUB      R2,R7,R6
     87              if (dx || dy) {
   \   000000E8   010092E1           ORRS     R0,R2,R1
   \   000000EC   0100000A           BEQ      ??WM__UpdateChildPositions_12
     88                WM_MoveWindow(hChild, dx, dy);
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       WM_MoveWindow
     89              }
     90              dw = (rNew.x1 - rNew.x0) - (rOld.x1 - rOld.x0);
   \                     ??WM__UpdateChildPositions_12:
   \   000000F8   0BB8A0E1           LSL      R11,R11,#+16
   \   000000FC   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000100   4BB8A0E1           ASR      R11,R11,#+16
   \   00000104   0A004BE0           SUB      R0,R11,R10
   \   00000108   010040E0           SUB      R0,R0,R1
     91              dh = (rNew.y1 - rNew.y0) - (rOld.y1 - rOld.y0);
   \   0000010C   0888A0E1           LSL      R8,R8,#+16
   \   00000110   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000114   001089E0           ADD      R1,R9,R0
   \   00000118   4888A0E1           ASR      R8,R8,#+16
   \   0000011C   070048E0           SUB      R0,R8,R7
   \   00000120   020040E0           SUB      R0,R0,R2
   \   00000124   002086E0           ADD      R2,R6,R0
     92              if (dw || dh) {
   \   00000128   010092E1           ORRS     R0,R2,R1
   \   0000012C   0100000A           BEQ      ??WM__UpdateChildPositions_13
     93                WM_ResizeWindow(hChild, dw, dh);
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           BL       WM_ResizeWindow
     94              }
     95            }
   \                     ??WM__UpdateChildPositions_13:
   \   00000138   204095E5           LDR      R4,[R5, #+32]
   \   0000013C   000054E3           CMP      R4,#+0
   \   00000140   B3FFFF1A           BNE      ??WM__UpdateChildPositions_1
     96          }
   \                     ??WM__UpdateChildPositions_0:
   \   00000144   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000148   F08FBDE8           POP      {R4-R11,PC}      ;; return
     97          
     98          #else
     99            void WM_UpdateChildPositions_C(void) {} /* avoid empty object files */
    100          #endif   /* GUI_WINSUPPORT */
    101          
    102          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     WM__UpdateChildPositions     56


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     WM__UpdateChildPositions  332

 
 332 bytes in section .text
 
 332 bytes of CODE memory

Errors: none
Warnings: none
