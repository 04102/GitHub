###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_DeleteItem.c                #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_DeleteItem.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_DeleteItem.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_DeleteItem.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_DeleteItem.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_DeleteItem.c
     19          Purpose     : Implementation of LISTBOX_DeleteItem
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include "LISTBOX_Private.h"
     25          
     26          #if GUI_WINSUPPORT
     27          
     28          
     29          /*********************************************************************
     30          *
     31          *       Public routines
     32          *
     33          **********************************************************************
     34          */
     35          
     36          /*********************************************************************
     37          *
     38          *       LISTBOX_DeleteItem
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void LISTBOX_DeleteItem(LISTBOX_Handle hObj, unsigned int Index) {
   \                     LISTBOX_DeleteItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     41            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1F00000A           BEQ      ??LISTBOX_DeleteItem_0
     42              int Sel;
     43              LISTBOX_Obj * pObj;
     44              unsigned int NumItems;
     45              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
     46              pObj = LISTBOX_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0060A0E1           MOV      R6,R0
     47              NumItems = LISTBOX__GetNumItems(pObj);
     48              if (Index < NumItems) {
   \   00000024   ........           BL       LISTBOX__GetNumItems
   \   00000028   000055E1           CMP      R5,R0
   \   0000002C   1600002A           BCS      ??LISTBOX_DeleteItem_1
     49                GUI_ARRAY_DeleteItem(pObj->ItemArray, Index);
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   340096E5           LDR      R0,[R6, #+52]
   \   00000038   ........           BL       GUI_ARRAY_DeleteItem
     50                /*
     51                 * Update selection
     52                 */
     53                Sel = pObj->Sel;
   \   0000003C   F009D6E1           LDRSH    R0,[R6, #+144]
   \   00000040   0010B0E1           MOVS     R1,R0
     54                if (Sel >= 0) {                     /* Valid selction ? */
   \   00000044   0300004A           BMI      ??LISTBOX_DeleteItem_2
     55                  if ((int)Index == Sel) {          /* Deleting selected item ? */
   \   00000048   000055E1           CMP      R5,R0
     56                    pObj->Sel = -1;                 /* Invalidate selection */
   \   0000004C   0000E003           MVNEQ    R0,#+0
   \   00000050   0000000A           BEQ      ??LISTBOX_DeleteItem_2
     57                  } else if ((int)Index < Sel) {    /* Deleting item above selection ? */
     58                    pObj->Sel--;
   \   00000054   010040B2           SUBLT    R0,R0,#+1
   \                     ??LISTBOX_DeleteItem_2:
   \   00000058   B009C6E1           STRH     R0,[R6, #+144]
     59                  }
     60                }
     61                GUI_UNLOCK_H(pObj);
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
     62                if (LISTBOX_UpdateScrollers(hObj)) {
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       LISTBOX_UpdateScrollers
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0200000A           BEQ      ??LISTBOX_DeleteItem_3
     63                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       LISTBOX__InvalidateInsideArea
   \   00000078   040000EA           B        ??LISTBOX_DeleteItem_4
     64                } else {
     65                  LISTBOX__InvalidateItemAndBelow(hObj, Index);
   \                     ??LISTBOX_DeleteItem_3:
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       LISTBOX__InvalidateItemAndBelow
   \   00000088   000000EA           B        ??LISTBOX_DeleteItem_4
     66                }
     67              } else {
     68                GUI_UNLOCK_H(pObj);
   \                     ??LISTBOX_DeleteItem_1:
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
     69              }
     70              WM_UNLOCK();
   \                     ??LISTBOX_DeleteItem_4:
   \   00000090   ........           BL       GUI_Unlock
     71            }
     72          }
   \                     ??LISTBOX_DeleteItem_0:
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
     73          
     74          #else                            /* Avoid problems with empty object modules */
     75            void LISTBOX_DeleteString_C(void) {}
     76          #endif

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     LISTBOX_DeleteItem     16


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     LISTBOX_DeleteItem  152

 
 152 bytes in section .text
 
 152 bytes of CODE memory

Errors: none
Warnings: none
