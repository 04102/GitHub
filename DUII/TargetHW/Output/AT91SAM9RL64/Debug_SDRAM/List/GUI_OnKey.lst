###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:59 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_OnKey.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_OnKey.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_OnKey.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _OnKey.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_OnKey.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_OnKey.c
     19          Purpose     : Implementation of keyboard buffer
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26            #include "WM_Intern.h"
     27          #endif
     28          
     29          /*********************************************************************
     30          *
     31          *       Defines
     32          *
     33          **********************************************************************
     34          */
     35          //
     36          // The following value defines the maximum number of key events + 1
     37          // to be managed by this module. Please note that one element remains
     38          // empty.
     39          //
     40          #ifndef   GUI_KEY_BUFFER_SIZE
     41            #define GUI_KEY_BUFFER_SIZE 10
     42          #endif
     43          
     44          #define IS_NOT_EMPTY() (_pReadKey != _pWriteKey)
     45          #define IS_EMPTY()     (_pReadKey == _pWriteKey)
     46          
     47          /*********************************************************************
     48          *
     49          *       Types
     50          *
     51          **********************************************************************
     52          */
     53          typedef struct {
     54            int Key;
     55            int Pressed;
     56          } GUI_KEY_STATE;
     57          
     58          /*********************************************************************
     59          *
     60          *       Static data
     61          *
     62          **********************************************************************
     63          */

   \                                 In section .data, align 4
     64          static GUI_KEY_STATE _aState[GUI_KEY_BUFFER_SIZE + 1]; // Buffer
     65          
     66          static GUI_KEY_STATE * _pReadKey  = &_aState[0]; // Read pointer
   \                     _pReadKey:
   \   00000000   ........           DC32 _aState
   \   00000004   ........           DC32 _aState
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     _aState:
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
     67          static GUI_KEY_STATE * _pWriteKey = &_aState[0]; // Write pointer
     68          
     69          static int _Key; // Used for GUI_GetKey() and GUI_StoreKey()
     70          
     71          /*********************************************************************
     72          *
     73          *       Static code
     74          *
     75          **********************************************************************
     76          */
     77          /*********************************************************************
     78          *
     79          *       _IncPointer
     80          *
     81          * Purpose:
     82          *   Increments the given pointer. It makes sure that the result is not
     83          *   the given reference pointer. In this case it returns the old value
     84          *
     85          * Parameters:
     86          *   p    - Pointer to be incremented
     87          *   pRef - Reference pointer
     88          *
     89          * Return value:
     90          *   The new pointer
     91          */
     92          #if GUI_WINSUPPORT
     93          static GUI_KEY_STATE * _IncPointer(GUI_KEY_STATE * p, GUI_KEY_STATE * pRef) {
     94            GUI_KEY_STATE * pNew;
     95            pNew = p;
     96            if (pNew == (_aState + GUI_KEY_BUFFER_SIZE)) {
     97              //
     98              // Set pointer to first element of array
     99              //
    100              pNew = _aState;
    101            } else {
    102              //
    103              // Increment pointer
    104              //
    105              ++pNew;
    106            }
    107            //
    108            // Do not reach reference pointer
    109            //
    110            if (pRef) {
    111              if (pNew != pRef) {
    112                p = pNew;
    113              }
    114            } else {
    115              p = pNew;
    116            }
    117            return p;
    118          }
    119          
    120          /*********************************************************************
    121          *
    122          *       _IncReadPointer
    123          */
    124          static GUI_KEY_STATE * _IncReadPointer(GUI_KEY_STATE * pRead) {
    125            GUI_KEY_STATE * pState;
    126            pState = _IncPointer(pRead, NULL);
    127            return pState;
    128          }
    129          
    130          /*********************************************************************
    131          *
    132          *       _IncWritePointer
    133          */
    134          static GUI_KEY_STATE * _IncWritePointer(GUI_KEY_STATE * pWrite) {
    135            GUI_KEY_STATE * pState;
    136            pState = _IncPointer(pWrite, _pReadKey);
    137            return pState;
    138          }
    139          
    140          /*********************************************************************
    141          *
    142          *       _GetState
    143          */
    144          static int _GetState(GUI_KEY_STATE * pState) {
    145            //
    146            // Get value
    147            //
    148            *pState = *_pReadKey;
    149            //
    150            // Increment read pointer if not empty
    151            //
    152            if (_pReadKey != _pWriteKey) {
    153              _pReadKey = _IncReadPointer(_pReadKey);
    154            }
    155            //
    156            // Return
    157            //
    158            return (pState->Pressed != 0) ? 1 : 0;
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       _StoreState
    164          */
    165          static void _StoreState(const GUI_KEY_STATE * pState) {
    166            //
    167            // Store value
    168            //
    169            *_pWriteKey = *pState;
    170            //
    171            // Increment write pointer
    172            //
    173            _pWriteKey = _IncWritePointer(_pWriteKey);
    174          }
    175          #endif
    176          
    177          /*********************************************************************
    178          *
    179          *       Public code
    180          *
    181          **********************************************************************
    182          */
    183          #if 1
    184          /*********************************************************************
    185          *
    186          *       GUI_GetKey
    187          */

   \                                 In section .text, align 4, keep-with-next
    188          int GUI_GetKey(void) {
    189            int r = _Key;
   \                     GUI_GetKey:
   \   00000000   ........           LDR      R1,??DataTable5
    190            _Key = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   080091E5           LDR      R0,[R1, #+8]
   \   0000000C   082081E5           STR      R2,[R1, #+8]
    191            return r;
   \   00000010   1EFF2FE1           BX       LR               ;; return
    192          }
    193          
    194          /*********************************************************************
    195          *
    196          *       GUI_StoreKey
    197          */

   \                                 In section .text, align 4, keep-with-next
    198          void GUI_StoreKey(int Key) {
    199            if (!_Key) {
   \                     GUI_StoreKey:
   \   00000000   ........           LDR      R1,??DataTable5
   \   00000004   082091E5           LDR      R2,[R1, #+8]
   \   00000008   000052E3           CMP      R2,#+0
    200              _Key = Key;
   \   0000000C   08008105           STREQ    R0,[R1, #+8]
    201            }
    202            GUI_X_SIGNAL_EVENT();
    203          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    204          #else
    205          /*********************************************************************
    206          *
    207          *       GUI_GetKey
    208          */
    209          int GUI_GetKey(void) {
    210            GUI_KEY_STATE State;
    211            
    212            _GetState(&State);
    213            return State.Key;
    214          }
    215          
    216          /*********************************************************************
    217          *
    218          *       GUI_StoreKey
    219          */
    220          void GUI_StoreKey(int Key) {
    221            GUI_KEY_STATE State;
    222          
    223            if (IS_EMPTY()) {
    224              State.Key     = Key;
    225              State.Pressed = 1;
    226              _StoreState(&State);
    227            }
    228            GUI_X_SIGNAL_EVENT();
    229          }
    230          #endif
    231          /*********************************************************************
    232          *
    233          *       GUI_ClearKeyBuffer
    234          */

   \                                 In section .text, align 4, keep-with-next
    235          void GUI_ClearKeyBuffer(void) {
   \                     GUI_ClearKeyBuffer:
   \   00000000   ........           LDR      R0,??DataTable5
    236            while (IS_NOT_EMPTY()) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   000051E1           CMP      R1,R0
   \   00000010   0000000A           BEQ      ??GUI_ClearKeyBuffer_0
    237              GUI_GetKey();
   \                     ??GUI_ClearKeyBuffer_1:
   \   00000014   FEFFFFEA           B        ??GUI_ClearKeyBuffer_1
    238            }
    239          }
   \                     ??GUI_ClearKeyBuffer_0:
   \   00000018   1EFF2FE1           BX       LR               ;; return
    240          
    241          /*********************************************************************
    242          *
    243          *       GUI_StoreKeyMsg
    244          */

   \                                 In section .text, align 4, keep-with-next
    245          void GUI_StoreKeyMsg(int Key, int PressedCnt) {
    246            #if GUI_WINSUPPORT
    247            GUI_KEY_STATE State;
    248          
    249            State.Key = Key;
    250            State.Pressed = PressedCnt;
    251            _StoreState(&State);
   \                     GUI_StoreKeyMsg:
   \   00000000   ........           LDR      R2,??DataTable5
   \   00000004   043092E5           LDR      R3,[R2, #+4]
   \   00000008   000083E5           STR      R0,[R3, #+0]
   \   0000000C   041083E5           STR      R1,[R3, #+4]
   \   00000010   5C1082E2           ADD      R1,R2,#+92
   \   00000014   000092E5           LDR      R0,[R2, #+0]
   \   00000018   010053E1           CMP      R3,R1
   \   0000001C   08108312           ADDNE    R1,R3,#+8
   \   00000020   0C108202           ADDEQ    R1,R2,#+12
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100000A           BEQ      ??GUI_StoreKeyMsg_0
   \   0000002C   000051E1           CMP      R1,R0
   \   00000030   0000000A           BEQ      ??GUI_StoreKeyMsg_1
   \                     ??GUI_StoreKeyMsg_0:
   \   00000034   0130A0E1           MOV      R3,R1
   \                     ??GUI_StoreKeyMsg_1:
   \   00000038   043082E5           STR      R3,[R2, #+4]
    252            GUI_X_SIGNAL_EVENT();
    253            #else
    254              GUI_USE_PARA(PressedCnt);
    255              GUI_StoreKey(Key);
    256            #endif
    257          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    258          
    259          /*********************************************************************
    260          *
    261          *       GUI_PollKeyMsg
    262          */
    263          #if GUI_WINSUPPORT

   \                                 In section .text, align 4, keep-with-next
    264          int GUI_PollKeyMsg(void) {
   \                     GUI_PollKeyMsg:
   \   00000000   10402DE9           PUSH     {R4,LR}
    265            GUI_KEY_STATE State;
    266            int r = 0;
   \   00000004   0040A0E3           MOV      R4,#+0
    267          
    268            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
    269            if (IS_NOT_EMPTY()) {
   \   0000000C   ........           LDR      R2,??DataTable5
   \   00000010   003092E5           LDR      R3,[R2, #+0]
   \   00000014   040092E5           LDR      R0,[R2, #+4]
   \   00000018   000053E1           CMP      R3,R0
   \   0000001C   0800000A           BEQ      ??GUI_PollKeyMsg_0
    270              _GetState(&State);
   \   00000020   5CC082E2           ADD      R12,R2,#+92
   \   00000024   000093E5           LDR      R0,[R3, #+0]
   \   00000028   041093E5           LDR      R1,[R3, #+4]
   \   0000002C   0C0053E1           CMP      R3,R12
   \   00000030   08308312           ADDNE    R3,R3,#+8
   \   00000034   0C308202           ADDEQ    R3,R2,#+12
   \   00000038   003082E5           STR      R3,[R2, #+0]
    271              WM_OnKey(State.Key, State.Pressed);
   \   0000003C   ........           BL       WM_OnKey
    272              r = 1;
   \   00000040   0140A0E3           MOV      R4,#+1
    273            }
    274            GUI_UNLOCK();
   \                     ??GUI_PollKeyMsg_0:
   \   00000044   ........           BL       GUI_Unlock
    275            return r;
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    276          }
    277          #endif
    278          
    279          /*********************************************************************
    280          *
    281          *       GUI_SendKeyMsg
    282          *
    283          * Purpose:
    284          *   Send the key to a window using the window manager (if available).
    285          *   If no window is ready to take the input, we call the store routine
    286          *   and wait for somebody to poll the buffer.
    287          */

   \                                 In section .text, align 4, keep-with-next
    288          void GUI_SendKeyMsg(int Key, int PressedCnt) {
   \                     GUI_SendKeyMsg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    289            #if GUI_WINSUPPORT
    290              if (!WM_OnKey(Key, PressedCnt)) {
   \   00000010   ........           BL       WM_OnKey
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0E00001A           BNE      ??GUI_SendKeyMsg_0
    291                GUI_StoreKeyMsg(Key, PressedCnt);
   \   0000001C   ........           LDR      R0,??DataTable5
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   5C3080E2           ADD      R3,R0,#+92
   \   00000028   004081E5           STR      R4,[R1, #+0]
   \   0000002C   045081E5           STR      R5,[R1, #+4]
   \   00000030   002090E5           LDR      R2,[R0, #+0]
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   08308112           ADDNE    R3,R1,#+8
   \   0000003C   0C308002           ADDEQ    R3,R0,#+12
   \   00000040   000052E3           CMP      R2,#+0
   \   00000044   0100000A           BEQ      ??GUI_SendKeyMsg_1
   \   00000048   020053E1           CMP      R3,R2
   \   0000004C   0000000A           BEQ      ??GUI_SendKeyMsg_2
   \                     ??GUI_SendKeyMsg_1:
   \   00000050   0310A0E1           MOV      R1,R3
   \                     ??GUI_SendKeyMsg_2:
   \   00000054   041080E5           STR      R1,[R0, #+4]
    292              }
    293            #else
    294              GUI_StoreKeyMsg(Key, PressedCnt);
    295            #endif
    296          }
   \                     ??GUI_SendKeyMsg_0:
   \   00000058   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     _pReadKey
    297          
    298          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GUI_ClearKeyBuffer      0
     GUI_GetKey              0
     GUI_PollKeyMsg          8
     GUI_SendKeyMsg         16
     GUI_StoreKey            0
     GUI_StoreKeyMsg         0


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     _pReadKey           100
     _pWriteKey
     _Key
     _aState
     GUI_GetKey           20
     GUI_StoreKey         20
     GUI_ClearKeyBuffer   28
     GUI_StoreKeyMsg      64
     GUI_PollKeyMsg       80
     GUI_SendKeyMsg       96
     ??DataTable5          4

 
 100 bytes in section .data
 312 bytes in section .text
 
 312 bytes of CODE memory
 100 bytes of DATA memory

Errors: none
Warnings: none
