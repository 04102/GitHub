###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_CmpWithLCD.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_CmpWithLCD.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_CmpWithLCD.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_CmpWithLCD.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_CmpWithLCD.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_CmpWithLCD.c
     19          Purpose     : Implementation of Checking for memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /* Memory device capabilities are compiled only if support for them is enabled. */ 
     28          
     29          #if GUI_SUPPORT_MEMDEV
     30          
     31          /*********************************************************************
     32          *
     33          *       public code
     34          *
     35          **********************************************************************
     36          */
     37          /*********************************************************************
     38          *
     39          *       GUI_MEMDEV_CompareWithLCD
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          int GUI_MEMDEV_CompareWithLCD(GUI_MEMDEV_Handle hMem, int*px, int*py, int *pExp, int*pAct) {
   \                     GUI_MEMDEV_CompareWithLCD:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     42            GUI_DEVICE * pDevice;
     43            GUI_MEMDEV * pDevData;
     44            int x, y, x0, XMax, YMax, Max, MagX, MagY, Ret, Exp, Act;
     45            int BitsPerPixel;
     46          
     47            Ret = 0;
     48            //
     49            // Make sure memory handle is valid
     50            //
     51            if (!hMem) {
     52              hMem = GUI_Context.hDevData;
   \   00000008   C4029F05           LDREQ    R0,??GUI_MEMDEV_CompareWithLCD_0
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   88409005           LDREQ    R4,[R0, #+136]
   \   00000014   0010A0E3           MOV      R1,#+0
     53            }
     54            if (!hMem) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0C108DE5           STR      R1,[SP, #+12]
     55              return 1;
   \   00000020   0100A003           MOVEQ    R0,#+1
   \   00000024   A800000A           BEQ      ??GUI_MEMDEV_CompareWithLCD_1
     56            }
     57            GUI_LOCK();
   \   00000028   ........           BL       GUI_Lock
     58            pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  // Convert to pointer
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ALLOC_h2p
     59            y    = pDevData->y0;
   \   00000034   F650D0E1           LDRSH    R5,[R0, #+6]
     60            x0   = pDevData->x0;
   \   00000038   F460D0E1           LDRSH    R6,[R0, #+4]
     61            XMax = pDevData->XSize + x0;
   \   0000003C   F810D0E1           LDRSH    R1,[R0, #+8]
     62            YMax = pDevData->YSize + y;
   \   00000040   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000044   014086E0           ADD      R4,R6,R1
   \   00000048   007085E0           ADD      R7,R5,R0
     63            MagX = LCD_GetXMag();
   \   0000004C   ........           BL       LCD_GetXMag
   \   00000050   08008DE5           STR      R0,[SP, #+8]
     64            MagY = LCD_GetYMag();
   \   00000054   ........           BL       LCD_GetYMag
     65            //
     66            // Calculate limits
     67            //
     68            if (y < 0) {
   \   00000058   000055E3           CMP      R5,#+0
     69          		y = 0;
   \   0000005C   0050A043           MOVMI    R5,#+0
     70            }
     71            if (x0 < 0) {
   \   00000060   000056E3           CMP      R6,#+0
   \   00000064   04008DE5           STR      R0,[SP, #+4]
     72          		x0 = 0;
   \   00000068   0060A043           MOVMI    R6,#+0
     73            }
     74            Max = LCD_GetYSize();
   \   0000006C   ........           BL       LCD_GetYSize
     75          	if (YMax > Max) {
   \   00000070   070050E1           CMP      R0,R7
   \   00000074   0700A0C1           MOVGT    R0,R7
   \   00000078   00008DE5           STR      R0,[SP, #+0]
     76          		YMax = Max;
     77            }
     78            Max = LCD_GetXSize();
   \   0000007C   ........           BL       LCD_GetXSize
     79          	if (XMax > Max) {
   \   00000080   040050E1           CMP      R0,R4
   \   00000084   0400A0C1           MOVGT    R0,R4
     80          		XMax = Max;
     81            }
     82            #if (GUI_NUM_LAYERS > 1)
     83              BitsPerPixel = LCD_GetBitsPerPixelEx(GUI_Context.SelLayer);
   \   00000088   44729FE5           LDR      R7,??GUI_MEMDEV_CompareWithLCD_0
   \   0000008C   0040A0E1           MOV      R4,R0
   \   00000090   1100D7E5           LDRB     R0,[R7, #+17]
   \   00000094   ........           BL       LCD_GetBitsPerPixelEx
   \   00000098   0080A0E1           MOV      R8,R0
     84            #else
     85              BitsPerPixel = LCD_GetBitsPerPixel();
     86            #endif
     87            pDevice = GUI_DEVICE__GetpDriver(GUI_Context.SelLayer);
   \   0000009C   1100D7E5           LDRB     R0,[R7, #+17]
   \   000000A0   ........           BL       GUI_DEVICE__GetpDriver
   \   000000A4   0070A0E1           MOV      R7,R0
     88            if (BitsPerPixel == 1) {
   \   000000A8   010058E3           CMP      R8,#+1
   \   000000AC   2800001A           BNE      ??GUI_MEMDEV_CompareWithLCD_2
   \   000000B0   00009DE5           LDR      R0,[SP, #+0]
   \   000000B4   000055E1           CMP      R5,R0
   \   000000B8   810000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
     89              for (; y < YMax; y++) {
     90                x = x0;
     91                for (x = x0; x < XMax; x++) {
   \                     ??GUI_MEMDEV_CompareWithLCD_4:
   \   000000BC   0680A0E1           MOV      R8,R6
   \   000000C0   040056E1           CMP      R6,R4
   \   000000C4   1D0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_5
   \   000000C8   04009DE5           LDR      R0,[SP, #+4]
   \   000000CC   90050AE0           MUL      R10,R0,R5
     92                  Exp = LCD_GetPixelIndex(x * MagX, y * MagY);
   \                     ??GUI_MEMDEV_CompareWithLCD_6:
   \   000000D0   08009DE5           LDR      R0,[SP, #+8]
   \   000000D4   0A10A0E1           MOV      R1,R10
   \   000000D8   90080BE0           MUL      R11,R0,R8
   \   000000DC   0B00A0E1           MOV      R0,R11
   \   000000E0   ........           BL       LCD_GetPixelIndex
     93                  Act = pDevice->pDeviceAPI->pfGetPixelIndex(pDevice, x * MagX, y * MagY);
   \   000000E4   0C3097E5           LDR      R3,[R7, #+12]
   \   000000E8   0090A0E1           MOV      R9,R0
   \   000000EC   0A20A0E1           MOV      R2,R10
   \   000000F0   0B10A0E1           MOV      R1,R11
   \   000000F4   0700A0E1           MOV      R0,R7
   \   000000F8   143093E5           LDR      R3,[R3, #+20]
   \   000000FC   33FF2FE1           BLX      R3
     94                  if (Act != Exp) {
   \   00000100   090050E1           CMP      R0,R9
   \   00000104   0A00000A           BEQ      ??GUI_MEMDEV_CompareWithLCD_7
     95                    *px    = x;
   \                     ??GUI_MEMDEV_CompareWithLCD_8:
   \   00000108   10109DE5           LDR      R1,[SP, #+16]
   \   0000010C   008081E5           STR      R8,[R1, #+0]
     96                    *py    = y;
   \   00000110   14109DE5           LDR      R1,[SP, #+20]
   \   00000114   005081E5           STR      R5,[R1, #+0]
     97                    *pAct  = Act;
   \   00000118   40109DE5           LDR      R1,[SP, #+64]
   \   0000011C   000081E5           STR      R0,[R1, #+0]
     98                    *pExp  = Exp;
   \   00000120   18009DE5           LDR      R0,[SP, #+24]
     99                    Ret = 1;
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   009080E5           STR      R9,[R0, #+0]
   \   0000012C   0C108DE5           STR      R1,[SP, #+12]
    100                    goto Skip;
   \   00000130   630000EA           B        ??GUI_MEMDEV_CompareWithLCD_3
    101                  }
    102                }
   \                     ??GUI_MEMDEV_CompareWithLCD_7:
   \   00000134   018088E2           ADD      R8,R8,#+1
   \   00000138   040058E1           CMP      R8,R4
   \   0000013C   E3FFFFBA           BLT      ??GUI_MEMDEV_CompareWithLCD_6
    103              }
   \                     ??GUI_MEMDEV_CompareWithLCD_5:
   \   00000140   00009DE5           LDR      R0,[SP, #+0]
   \   00000144   015085E2           ADD      R5,R5,#+1
   \   00000148   000055E1           CMP      R5,R0
   \   0000014C   5C0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
   \   00000150   D9FFFFEA           B        ??GUI_MEMDEV_CompareWithLCD_4
    104            } else {
    105              if (BitsPerPixel <= 8) {
   \                     ??GUI_MEMDEV_CompareWithLCD_2:
   \   00000154   090058E3           CMP      R8,#+9
   \   00000158   1D0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_9
   \   0000015C   00009DE5           LDR      R0,[SP, #+0]
   \   00000160   000055E1           CMP      R5,R0
   \   00000164   560000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
    106                U8 * pData;
    107                for (; y < YMax; y++) {
    108                  x = x0;
    109                  pData = (U8 *)GUI_MEMDEV__XY2PTR(x, y);
   \                     ??GUI_MEMDEV_CompareWithLCD_10:
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   0600A0E1           MOV      R0,R6
   \   00000170   ........           BL       GUI_MEMDEV__XY2PTR
   \   00000174   00A0A0E1           MOV      R10,R0
    110                  for (x = x0; x < XMax; x++) {
   \   00000178   0680A0E1           MOV      R8,R6
   \   0000017C   040056E1           CMP      R6,R4
   \   00000180   0E0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_11
   \   00000184   04009DE5           LDR      R0,[SP, #+4]
   \   00000188   90050BE0           MUL      R11,R0,R5
    111                    Exp = *pData++;
    112                    Act = pDevice->pDeviceAPI->pfGetPixelIndex(pDevice, x * MagX, y * MagY);
   \                     ??GUI_MEMDEV_CompareWithLCD_12:
   \   0000018C   08009DE5           LDR      R0,[SP, #+8]
   \   00000190   0C3097E5           LDR      R3,[R7, #+12]
   \   00000194   900801E0           MUL      R1,R0,R8
   \   00000198   0190DAE4           LDRB     R9,[R10], #+1
   \   0000019C   0B20A0E1           MOV      R2,R11
   \   000001A0   0700A0E1           MOV      R0,R7
   \   000001A4   143093E5           LDR      R3,[R3, #+20]
   \   000001A8   33FF2FE1           BLX      R3
    113                    if (Act != Exp) {
   \   000001AC   090050E1           CMP      R0,R9
   \   000001B0   D4FFFF1A           BNE      ??GUI_MEMDEV_CompareWithLCD_8
    114                      *px    = x;
    115                      *py    = y;
    116                      *pAct  = Act;
    117                      *pExp  = Exp;
    118                      Ret = 1;
    119                      goto Skip;
    120                    }
    121                  }
   \   000001B4   018088E2           ADD      R8,R8,#+1
   \   000001B8   040058E1           CMP      R8,R4
   \   000001BC   F2FFFFBA           BLT      ??GUI_MEMDEV_CompareWithLCD_12
    122                }
   \                     ??GUI_MEMDEV_CompareWithLCD_11:
   \   000001C0   00009DE5           LDR      R0,[SP, #+0]
   \   000001C4   015085E2           ADD      R5,R5,#+1
   \   000001C8   000055E1           CMP      R5,R0
   \   000001CC   3C0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
   \   000001D0   E4FFFFEA           B        ??GUI_MEMDEV_CompareWithLCD_10
    123              } else if (BitsPerPixel <= 16) {
   \                     ??GUI_MEMDEV_CompareWithLCD_9:
   \   000001D4   110058E3           CMP      R8,#+17
   \   000001D8   00009DE5           LDR      R0,[SP, #+0]
   \   000001DC   1C0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_13
   \   000001E0   000055E1           CMP      R5,R0
   \   000001E4   360000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
    124                U16 * pData;
    125                for (; y < YMax; y++) {
    126                  x = x0;
    127                  pData = (U16 *)GUI_MEMDEV__XY2PTR(x, y);
   \                     ??GUI_MEMDEV_CompareWithLCD_14:
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   0600A0E1           MOV      R0,R6
   \   000001F0   ........           BL       GUI_MEMDEV__XY2PTR
   \   000001F4   00A0A0E1           MOV      R10,R0
    128                  for (x = x0; x < XMax; x++) {
   \   000001F8   0680A0E1           MOV      R8,R6
   \   000001FC   040056E1           CMP      R6,R4
   \   00000200   0E0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_15
   \   00000204   04009DE5           LDR      R0,[SP, #+4]
   \   00000208   90050BE0           MUL      R11,R0,R5
    129                    Exp = *pData++;
    130                    Act = pDevice->pDeviceAPI->pfGetPixelIndex(pDevice, x * MagX, y * MagY);
   \                     ??GUI_MEMDEV_CompareWithLCD_16:
   \   0000020C   08009DE5           LDR      R0,[SP, #+8]
   \   00000210   0C3097E5           LDR      R3,[R7, #+12]
   \   00000214   900801E0           MUL      R1,R0,R8
   \   00000218   B290DAE0           LDRH     R9,[R10], #+2
   \   0000021C   0B20A0E1           MOV      R2,R11
   \   00000220   0700A0E1           MOV      R0,R7
   \   00000224   143093E5           LDR      R3,[R3, #+20]
   \   00000228   33FF2FE1           BLX      R3
    131                    if (Act != Exp) {
   \   0000022C   090050E1           CMP      R0,R9
   \   00000230   B4FFFF1A           BNE      ??GUI_MEMDEV_CompareWithLCD_8
    132                      *px    = x;
    133                      *py    = y;
    134                      *pAct  = Act;
    135                      *pExp  = Exp;
    136                      Ret = 1;
    137                      goto Skip;
    138                    }
    139                  }
   \   00000234   018088E2           ADD      R8,R8,#+1
   \   00000238   040058E1           CMP      R8,R4
   \   0000023C   F2FFFFBA           BLT      ??GUI_MEMDEV_CompareWithLCD_16
    140                }
   \                     ??GUI_MEMDEV_CompareWithLCD_15:
   \   00000240   00009DE5           LDR      R0,[SP, #+0]
   \   00000244   015085E2           ADD      R5,R5,#+1
   \   00000248   000055E1           CMP      R5,R0
   \   0000024C   1C0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
   \   00000250   E4FFFFEA           B        ??GUI_MEMDEV_CompareWithLCD_14
    141              } else {
   \                     ??GUI_MEMDEV_CompareWithLCD_13:
   \   00000254   000055E1           CMP      R5,R0
   \   00000258   190000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_3
    142                U32 * pData;
    143                for (; y < YMax; y++) {
    144                  x = x0;
    145                  pData = (U32 *)GUI_MEMDEV__XY2PTR(x, y);
   \                     ??GUI_MEMDEV_CompareWithLCD_17:
   \   0000025C   0510A0E1           MOV      R1,R5
   \   00000260   0600A0E1           MOV      R0,R6
   \   00000264   ........           BL       GUI_MEMDEV__XY2PTR
   \   00000268   00A0A0E1           MOV      R10,R0
    146                  for (x = x0; x < XMax; x++) {
   \   0000026C   0680A0E1           MOV      R8,R6
   \   00000270   040056E1           CMP      R6,R4
   \   00000274   0E0000AA           BGE      ??GUI_MEMDEV_CompareWithLCD_18
   \   00000278   04009DE5           LDR      R0,[SP, #+4]
   \   0000027C   90050BE0           MUL      R11,R0,R5
    147                    Exp = *pData++;
    148                    Act = pDevice->pDeviceAPI->pfGetPixelIndex(pDevice, x * MagX, y * MagY);
   \                     ??GUI_MEMDEV_CompareWithLCD_19:
   \   00000280   08009DE5           LDR      R0,[SP, #+8]
   \   00000284   0C3097E5           LDR      R3,[R7, #+12]
   \   00000288   900801E0           MUL      R1,R0,R8
   \   0000028C   04909AE4           LDR      R9,[R10], #+4
   \   00000290   0B20A0E1           MOV      R2,R11
   \   00000294   0700A0E1           MOV      R0,R7
   \   00000298   143093E5           LDR      R3,[R3, #+20]
   \   0000029C   33FF2FE1           BLX      R3
    149                    if (Act != Exp) {
   \   000002A0   090050E1           CMP      R0,R9
   \   000002A4   97FFFF1A           BNE      ??GUI_MEMDEV_CompareWithLCD_8
    150                      *px    = x;
    151                      *py    = y;
    152                      *pAct  = Act;
    153                      *pExp  = Exp;
    154                      Ret = 1;
    155                      goto Skip;
    156                    }
    157                  }
   \   000002A8   018088E2           ADD      R8,R8,#+1
   \   000002AC   040058E1           CMP      R8,R4
   \   000002B0   F2FFFFBA           BLT      ??GUI_MEMDEV_CompareWithLCD_19
    158                }
   \                     ??GUI_MEMDEV_CompareWithLCD_18:
   \   000002B4   00009DE5           LDR      R0,[SP, #+0]
   \   000002B8   015085E2           ADD      R5,R5,#+1
   \   000002BC   000055E1           CMP      R5,R0
   \   000002C0   E5FFFFBA           BLT      ??GUI_MEMDEV_CompareWithLCD_17
    159              }
    160            }
    161          Skip:
    162            GUI_UNLOCK();
   \                     ??GUI_MEMDEV_CompareWithLCD_3:
   \   000002C4   ........           BL       GUI_Unlock
    163            return Ret;
   \   000002C8   0C009DE5           LDR      R0,[SP, #+12]
   \                     ??GUI_MEMDEV_CompareWithLCD_1:
   \   000002CC   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000002D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GUI_MEMDEV_CompareWithLCD_0:
   \   000002D4   ........           DC32     GUI_Context
    164          }
    165          
    166          #else
    167          
    168          void GUIDEV_CmpWithLCD(void);
    169          void GUIDEV_CmpWithLCD(void) {} // avoid empty object files
    170          
    171          #endif /* GUI_SUPPORT_MEMDEV */
    172          
    173          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_MEMDEV_CompareWithLCD     64


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GUI_MEMDEV_CompareWithLCD  728

 
 728 bytes in section .text
 
 728 bytes of CODE memory

Errors: none
Warnings: none
