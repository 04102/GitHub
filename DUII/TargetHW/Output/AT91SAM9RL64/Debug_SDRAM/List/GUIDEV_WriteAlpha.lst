###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:31 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_WriteAlpha.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_WriteAlpha.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_WriteAlpha.lst                                      #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_WriteAlpha.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_WriteAlpha.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_WriteAlpha.C
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /* Memory device capabilities are compiled only if support for them is enabled.*/ 
     28          #if GUI_SUPPORT_MEMDEV
     29          
     30          /*********************************************************************
     31          *
     32          *       Static routines
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       _ReadLine
     39          */
     40          static void _ReadLine(int x0, int y, int x1, LCD_PIXELINDEX * pBuffer) {
     41            LCD_RECT r;
     42            GUI_DEVICE * pDevice;
     43            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
     44          
     45            pDevice->pDeviceAPI->pfGetRect(pDevice, &r);
     46            if (x0 > r.x1) {
     47              return;
     48            }
     49            if (x1 < r.x0) {
     50              return;
     51            }
     52            if (y > r.y1) {
     53              return;
     54            }
     55            if (y < r.y0) {
     56              return;
     57            }
     58            if (x0 < r.x0) {
     59              pBuffer += r.x0 - x0;
     60              x0 = r.x0;
     61            }
     62            if (x1 > r.x1) {
     63              x1 = r.x1;
     64            }
     65            GUI_ReadRectEx(x0, y, x1, y, pBuffer, pDevice); //GUI_ReadRect replaced with GUI_ReadRectEx because of problem with transparency in Dashboard sample
     66          }
     67          
     68          /*********************************************************************
     69          *
     70          *       _WriteAlphaToActiveAt
     71          */

   \                                 In section .text, align 4, keep-with-next
     72          static void _WriteAlphaToActiveAt(GUI_MEMDEV_Handle hMem, int Intens, int x, int y) {
   \                     _WriteAlphaToActiveAt:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   58D04DE2           SUB      SP,SP,#+88
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0390A0E1           MOV      R9,R3
     73            GUI_MEMDEV * pDev;
     74            GUI_USAGE_h hUsage; 
     75            GUI_USAGE * pUsage;
     76            GUI_HMEM hBuffer, hBufferBk;
     77            U8 * pBuffer;
     78            U8 * pBufferBk;
     79            U8 * pData;
     80            tLCDDEV_Index2Color * pfIndex2Color;
     81            tLCDDEV_Color2Index * pfColor2Index;
     82            LCD_COLOR Color, BkColor;
     83            int Index, xSize, ySize, NumPixels, NumPixelsBitmap, yi, xOff, xPos, yPos, n, xOffFirst;
     84            int BitsPerPixelSRC, BitsPerPixelDST;
     85            int BytesPerPixelSRC, BytesPerPixelDST;
     86            
     87            if (hMem) {
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   9501000A           BEQ      ??_WriteAlphaToActiveAt_0
     88              pDev   = (GUI_MEMDEV *)GUI_LOCK_H(hMem);
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   20008DE5           STR      R0,[SP, #+32]
     89              hUsage = pDev->hUsage; 
   \   00000024   146090E5           LDR      R6,[R0, #+20]
     90              xSize  = pDev->XSize;
   \   00000028   F870D0E1           LDRSH    R7,[R0, #+8]
     91              ySize  = pDev->YSize;
   \   0000002C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000030   54008DE5           STR      R0,[SP, #+84]
     92              GUI_UNLOCK_H(pDev);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     93              if (hUsage) {
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   8C01000A           BEQ      ??_WriteAlphaToActiveAt_0
     94                //
     95                // Allocate buffer for result
     96                //
     97                hBuffer   = GUI_ALLOC_AllocNoInit(xSize * sizeof(LCD_PIXELINDEX));
   \   00000040   0771A0E1           LSL      R7,R7,#+2
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   ........           BL       GUI_ALLOC_AllocNoInit
   \   0000004C   44008DE5           STR      R0,[SP, #+68]
     98                if (hBuffer) {
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   8601000A           BEQ      ??_WriteAlphaToActiveAt_0
     99                  //
    100                  // Allocate buffer for background
    101                  //
    102                  hBufferBk = GUI_ALLOC_AllocNoInit(xSize * sizeof(LCD_PIXELINDEX));
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI_ALLOC_AllocNoInit
   \   00000060   40008DE5           STR      R0,[SP, #+64]
    103                  if (hBufferBk) {
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   7F01000A           BEQ      ??_WriteAlphaToActiveAt_1
    104                    //
    105                    // Get data pointers
    106                    //
    107                    pUsage        = (GUI_USAGE  *)GUI_LOCK_H(hUsage);
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI_ALLOC_LockH
   \   00000074   34008DE5           STR      R0,[SP, #+52]
    108                    pDev          = (GUI_MEMDEV *)GUI_LOCK_H(hMem);
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       GUI_ALLOC_LockH
   \   00000080   20008DE5           STR      R0,[SP, #+32]
    109                    pBuffer       = (U8 *)GUI_LOCK_H(hBuffer);
   \   00000084   44009DE5           LDR      R0,[SP, #+68]
   \   00000088   ........           BL       GUI_ALLOC_LockH
   \   0000008C   0050A0E1           MOV      R5,R0
    110                    pBufferBk     = (U8 *)GUI_LOCK_H(hBufferBk);
   \   00000090   40009DE5           LDR      R0,[SP, #+64]
   \   00000094   ........           BL       GUI_ALLOC_LockH
   \   00000098   0060A0E1           MOV      R6,R0
   \   0000009C   ........           LDR      R0,??DataTable0
   \   000000A0   880090E5           LDR      R0,[R0, #+136]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_WriteAlphaToActiveAt_2
    111                    //
    112                    // Get color depth(s)
    113                    //
    114                    if (GUI_Context.hDevData) {
    115                      BitsPerPixelDST = GUI_MEMDEV_GetBitsPerPixel(GUI_Context.hDevData);
   \   000000AC   ........           BL       GUI_MEMDEV_GetBitsPerPixel
   \   000000B0   020000EA           B        ??_WriteAlphaToActiveAt_3
    116                    } else {
    117                      BitsPerPixelDST = LCD_GetBitsPerPixelEx(GUI_Context.SelLayer);
   \                     ??_WriteAlphaToActiveAt_2:
   \   000000B4   ........           LDR      R0,??DataTable0
   \   000000B8   1100D0E5           LDRB     R0,[R0, #+17]
   \   000000BC   ........           BL       LCD_GetBitsPerPixelEx
   \                     ??_WriteAlphaToActiveAt_3:
   \   000000C0   30008DE5           STR      R0,[SP, #+48]
    118                    }
    119                    if (BitsPerPixelDST <= 8) {
   \   000000C4   30009DE5           LDR      R0,[SP, #+48]
   \   000000C8   090050E3           CMP      R0,#+9
    120                      BytesPerPixelDST = 1;
   \   000000CC   0110A0B3           MOVLT    R1,#+1
   \   000000D0   020000BA           BLT      ??_WriteAlphaToActiveAt_4
    121                    } else if (BitsPerPixelDST <= 16) {
   \   000000D4   110050E3           CMP      R0,#+17
    122                      BytesPerPixelDST = 2;
   \   000000D8   0210A0B3           MOVLT    R1,#+2
    123                    } else {
    124                      BytesPerPixelDST = 4;
   \   000000DC   0410A0A3           MOVGE    R1,#+4
    125                    }
    126                    BitsPerPixelSRC = pDev->BitsPerPixel;
   \                     ??_WriteAlphaToActiveAt_4:
   \   000000E0   20009DE5           LDR      R0,[SP, #+32]
   \   000000E4   2C108DE5           STR      R1,[SP, #+44]
   \   000000E8   100090E5           LDR      R0,[R0, #+16]
    127                    if (BitsPerPixelSRC <= 8) {
   \   000000EC   090050E3           CMP      R0,#+9
    128                      BytesPerPixelSRC = 1;
   \   000000F0   0110A0B3           MOVLT    R1,#+1
   \   000000F4   020000BA           BLT      ??_WriteAlphaToActiveAt_5
    129                    } else if (BitsPerPixelSRC <= 16) {
   \   000000F8   110050E3           CMP      R0,#+17
    130                      BytesPerPixelSRC = 2;
   \   000000FC   0210A0B3           MOVLT    R1,#+2
    131                    } else {
    132                      BytesPerPixelSRC = 4;
   \   00000100   0410A0A3           MOVGE    R1,#+4
    133                    }
    134                    //
    135                    // Get function pointers
    136                    //
    137                    pfIndex2Color = GUI_GetpfIndex2ColorEx(GUI_Context.SelLayer);
   \                     ??_WriteAlphaToActiveAt_5:
   \   00000104   ........           LDR      R0,??DataTable0
   \   00000108   28108DE5           STR      R1,[SP, #+40]
   \   0000010C   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000110   ........           BL       GUI_GetpfIndex2ColorEx
   \   00000114   0070A0E1           MOV      R7,R0
    138                    pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   00000118   ........           LDR      R0,??DataTable0
   \   0000011C   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000120   ........           BL       GUI_GetpfColor2IndexEx
   \   00000124   0080A0E1           MOV      R8,R0
    139                    //
    140                    // Iterate over all lines
    141                    //
    142                    for (yi = 0; yi < ySize; yi++) {
   \   00000128   54009DE5           LDR      R0,[SP, #+84]
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   1C108DE5           STR      R1,[SP, #+28]
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   450100BA           BLT      ??_WriteAlphaToActiveAt_6
   \   0000013C   3C908DE5           STR      R9,[SP, #+60]
    143                      xOff      = 0;
   \                     ??_WriteAlphaToActiveAt_7:
   \   00000140   0010A0E3           MOV      R1,#+0
    144                      NumPixels = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   00000144   34009DE5           LDR      R0,[SP, #+52]
   \   00000148   18108DE5           STR      R1,[SP, #+24]
   \   0000014C   083090E5           LDR      R3,[R0, #+8]
   \   00000150   1C209DE5           LDR      R2,[SP, #+28]
   \   00000154   18108DE2           ADD      R1,SP,#+24
   \   00000158   143093E5           LDR      R3,[R3, #+20]
   \   0000015C   33FF2FE1           BLX      R3
    145                      yPos      = yi + y;
   \   00000160   3C109DE5           LDR      R1,[SP, #+60]
   \   00000164   0090B0E1           MOVS     R9,R0
   \   00000168   24108DE5           STR      R1,[SP, #+36]
    146                      //
    147                      // Draw the partial line which needs to be drawn
    148                      //
    149                      while (NumPixels) {
   \   0000016C   2E01000A           BEQ      ??_WriteAlphaToActiveAt_8
    150                        xPos            = xOff + x;
   \                     ??_WriteAlphaToActiveAt_9:
   \   00000170   18009DE5           LDR      R0,[SP, #+24]
   \   00000174   58109DE5           LDR      R1,[SP, #+88]
    151                        pData           = (U8 *)GUI_MEMDEV__XY2PTREx(pDev, xOff, yi);
   \   00000178   1C209DE5           LDR      R2,[SP, #+28]
   \   0000017C   000081E0           ADD      R0,R1,R0
   \   00000180   38008DE5           STR      R0,[SP, #+56]
   \   00000184   18109DE5           LDR      R1,[SP, #+24]
   \   00000188   20009DE5           LDR      R0,[SP, #+32]
   \   0000018C   ........           BL       GUI_MEMDEV__XY2PTREx
   \   00000190   00A0A0E1           MOV      R10,R0
    152                        NumPixelsBitmap = NumPixels;
    153                        //
    154                        // Get background data
    155                        //
    156                        _ReadLine(xPos, yPos, xPos + NumPixels - 1, (LCD_PIXELINDEX *)pBufferBk/*, GUI_Context.pDeviceAPI*/);
   \   00000194   38009DE5           LDR      R0,[SP, #+56]
   \   00000198   38109DE5           LDR      R1,[SP, #+56]
   \   0000019C   090080E0           ADD      R0,R0,R9
   \   000001A0   010040E2           SUB      R0,R0,#+1
   \   000001A4   0C008DE5           STR      R0,[SP, #+12]
   \   000001A8   ........           LDR      R0,??DataTable0
   \   000001AC   08108DE5           STR      R1,[SP, #+8]
   \   000001B0   1100D0E5           LDRB     R0,[R0, #+17]
   \   000001B4   ........           LDR      R1,??DataTable0
   \   000001B8   50908DE5           STR      R9,[SP, #+80]
   \   000001BC   10608DE5           STR      R6,[SP, #+16]
   \   000001C0   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000001C4   48B090E5           LDR      R11,[R0, #+72]
   \   000001C8   48108DE2           ADD      R1,SP,#+72
   \   000001CC   0C209BE5           LDR      R2,[R11, #+12]
   \   000001D0   0B00A0E1           MOV      R0,R11
   \   000001D4   302092E5           LDR      R2,[R2, #+48]
   \   000001D8   32FF2FE1           BLX      R2
   \   000001DC   FC04DDE1           LDRSH    R0,[SP, #+76]
   \   000001E0   08109DE5           LDR      R1,[SP, #+8]
   \   000001E4   010050E1           CMP      R0,R1
   \   000001E8   1E0000BA           BLT      ??_WriteAlphaToActiveAt_10
   \   000001EC   F814DDE1           LDRSH    R1,[SP, #+72]
   \   000001F0   0C209DE5           LDR      R2,[SP, #+12]
   \   000001F4   010052E1           CMP      R2,R1
   \   000001F8   1A0000BA           BLT      ??_WriteAlphaToActiveAt_10
   \   000001FC   FE24DDE1           LDRSH    R2,[SP, #+78]
   \   00000200   24309DE5           LDR      R3,[SP, #+36]
   \   00000204   030052E1           CMP      R2,R3
   \   00000208   160000BA           BLT      ??_WriteAlphaToActiveAt_10
   \   0000020C   0320A0E1           MOV      R2,R3
   \   00000210   FA34DDE1           LDRSH    R3,[SP, #+74]
   \   00000214   030052E1           CMP      R2,R3
   \   00000218   120000BA           BLT      ??_WriteAlphaToActiveAt_10
   \   0000021C   08209DE5           LDR      R2,[SP, #+8]
   \   00000220   010052E1           CMP      R2,R1
   \   00000224   040000AA           BGE      ??_WriteAlphaToActiveAt_11
   \   00000228   10309DE5           LDR      R3,[SP, #+16]
   \   0000022C   022041E0           SUB      R2,R1,R2
   \   00000230   022183E0           ADD      R2,R3,R2, LSL #+2
   \   00000234   10208DE5           STR      R2,[SP, #+16]
   \   00000238   08108DE5           STR      R1,[SP, #+8]
   \                     ??_WriteAlphaToActiveAt_11:
   \   0000023C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000240   24309DE5           LDR      R3,[SP, #+36]
   \   00000244   010050E1           CMP      R0,R1
   \   00000248   0C008DB5           STRLT    R0,[SP, #+12]
   \   0000024C   10009DE5           LDR      R0,[SP, #+16]
   \   00000250   04B08DE5           STR      R11,[SP, #+4]
   \   00000254   00008DE5           STR      R0,[SP, #+0]
   \   00000258   0C209DE5           LDR      R2,[SP, #+12]
   \   0000025C   0310A0E1           MOV      R1,R3
   \   00000260   08009DE5           LDR      R0,[SP, #+8]
   \   00000264   ........           BL       GUI_ReadRectEx
    157                        //
    158                        // Do the calculation
    159                        //
    160                        n = 0;
    161                        xOffFirst = xOff;
   \                     ??_WriteAlphaToActiveAt_10:
   \   00000268   18109DE5           LDR      R1,[SP, #+24]
    162                        switch (BytesPerPixelDST) {
   \   0000026C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000270   00B0A0E3           MOV      R11,#+0
   \   00000274   48108DE5           STR      R1,[SP, #+72]
   \   00000278   010050E2           SUBS     R0,R0,#+1
   \   0000027C   0400000A           BEQ      ??_WriteAlphaToActiveAt_12
   \   00000280   010050E2           SUBS     R0,R0,#+1
   \   00000284   4400000A           BEQ      ??_WriteAlphaToActiveAt_13
   \   00000288   020050E2           SUBS     R0,R0,#+2
   \   0000028C   8A00000A           BEQ      ??_WriteAlphaToActiveAt_14
   \   00000290   CA0000EA           B        ??_WriteAlphaToActiveAt_15
    163                        case 1: {
    164                            U8 * pDst;
    165                            U8 * pBk;
    166                            pDst = (U8 *)pBuffer;
    167                            pBk  = (U8 *)pBufferBk;
    168                            switch (BytesPerPixelSRC) {
   \                     ??_WriteAlphaToActiveAt_12:
   \   00000294   28009DE5           LDR      R0,[SP, #+40]
   \   00000298   010050E2           SUBS     R0,R0,#+1
   \   0000029C   0400000A           BEQ      ??_WriteAlphaToActiveAt_16
   \   000002A0   010050E2           SUBS     R0,R0,#+1
   \   000002A4   1500000A           BEQ      ??_WriteAlphaToActiveAt_17
   \   000002A8   020050E2           SUBS     R0,R0,#+2
   \   000002AC   2700000A           BEQ      ??_WriteAlphaToActiveAt_18
   \   000002B0   C20000EA           B        ??_WriteAlphaToActiveAt_15
    169                            case 1: {
    170                                U8 * pSrc;
    171                                pSrc = (U8 *)pData;
    172                                do {
    173                                  Index   = *(pSrc + n);
    174                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_16:
   \   000002B4   0A00DBE7           LDRB     R0,[R11, +R10]
   \   000002B8   37FF2FE1           BLX      R7
   \   000002BC   00008DE5           STR      R0,[SP, #+0]
    175                                  BkColor = pfIndex2Color(*(pBk + n));
   \   000002C0   0600DBE7           LDRB     R0,[R11, +R6]
   \   000002C4   37FF2FE1           BLX      R7
   \   000002C8   0010A0E1           MOV      R1,R0
    176                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   000002CC   0420A0E1           MOV      R2,R4
   \   000002D0   00009DE5           LDR      R0,[SP, #+0]
   \   000002D4   ........           BL       LCD_MixColors256
    177                                  Index   = pfColor2Index(Color);
   \   000002D8   38FF2FE1           BLX      R8
    178                                  *(pDst + xOff) = Index;
   \   000002DC   18109DE5           LDR      R1,[SP, #+24]
    179                                  xOff++;
    180                                  n++;
   \   000002E0   01B08BE2           ADD      R11,R11,#+1
   \   000002E4   0500C1E7           STRB     R0,[R1, +R5]
   \   000002E8   18009DE5           LDR      R0,[SP, #+24]
    181                                } while (--NumPixels);
   \   000002EC   019059E2           SUBS     R9,R9,#+1
   \   000002F0   010080E2           ADD      R0,R0,#+1
   \   000002F4   18008DE5           STR      R0,[SP, #+24]
   \   000002F8   EDFFFF1A           BNE      ??_WriteAlphaToActiveAt_16
   \   000002FC   AF0000EA           B        ??_WriteAlphaToActiveAt_15
    182                              }
    183                              break;
    184                            case 2: {
    185                                U16 * pSrc;
    186                                pSrc = (U16 *)pData;
    187                                do {
    188                                  Index   = *(pSrc + n);
    189                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_17:
   \   00000300   8B008AE0           ADD      R0,R10,R11, LSL #+1
   \   00000304   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000308   37FF2FE1           BLX      R7
   \   0000030C   00008DE5           STR      R0,[SP, #+0]
    190                                  BkColor = pfIndex2Color(*(pBk + n));
   \   00000310   0600DBE7           LDRB     R0,[R11, +R6]
   \   00000314   37FF2FE1           BLX      R7
   \   00000318   0010A0E1           MOV      R1,R0
    191                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   0000031C   0420A0E1           MOV      R2,R4
   \   00000320   00009DE5           LDR      R0,[SP, #+0]
   \   00000324   ........           BL       LCD_MixColors256
    192                                  Index   = pfColor2Index(Color);
   \   00000328   38FF2FE1           BLX      R8
    193                                  *(pDst + xOff) = Index;
   \   0000032C   18109DE5           LDR      R1,[SP, #+24]
    194                                  xOff++;
    195                                  n++;
   \   00000330   01B08BE2           ADD      R11,R11,#+1
   \   00000334   0500C1E7           STRB     R0,[R1, +R5]
   \   00000338   18009DE5           LDR      R0,[SP, #+24]
    196                                } while (--NumPixels);
   \   0000033C   019059E2           SUBS     R9,R9,#+1
   \   00000340   010080E2           ADD      R0,R0,#+1
   \   00000344   18008DE5           STR      R0,[SP, #+24]
   \   00000348   ECFFFF1A           BNE      ??_WriteAlphaToActiveAt_17
   \   0000034C   9B0000EA           B        ??_WriteAlphaToActiveAt_15
    197                              }
    198                              break;
    199                            case 4: {
    200                                U32 * pSrc;
    201                                pSrc = (U32 *)pData;
    202                                do {
    203                                  Index   = *(pSrc + n);
    204                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_18:
   \   00000350   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   00000354   37FF2FE1           BLX      R7
   \   00000358   00008DE5           STR      R0,[SP, #+0]
    205                                  BkColor = pfIndex2Color(*(pBk + n));
   \   0000035C   0600DBE7           LDRB     R0,[R11, +R6]
   \   00000360   37FF2FE1           BLX      R7
   \   00000364   0010A0E1           MOV      R1,R0
    206                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   00000368   0420A0E1           MOV      R2,R4
   \   0000036C   00009DE5           LDR      R0,[SP, #+0]
   \   00000370   ........           BL       LCD_MixColors256
    207                                  Index   = pfColor2Index(Color);
   \   00000374   38FF2FE1           BLX      R8
    208                                  *(pDst + xOff) = Index;
   \   00000378   18109DE5           LDR      R1,[SP, #+24]
    209                                  xOff++;
    210                                  n++;
   \   0000037C   01B08BE2           ADD      R11,R11,#+1
   \   00000380   0500C1E7           STRB     R0,[R1, +R5]
   \   00000384   18009DE5           LDR      R0,[SP, #+24]
    211                                } while (--NumPixels);
   \   00000388   019059E2           SUBS     R9,R9,#+1
   \   0000038C   010080E2           ADD      R0,R0,#+1
   \   00000390   18008DE5           STR      R0,[SP, #+24]
   \   00000394   EDFFFF1A           BNE      ??_WriteAlphaToActiveAt_18
   \   00000398   880000EA           B        ??_WriteAlphaToActiveAt_15
    212                              }
    213                              break;
    214                            }
    215                          }
    216                          break;
    217                        case 2: {
    218                            U16 * pDst;
    219                            U16 * pBk;
    220                            pDst = (U16 *)pBuffer;
    221                            pBk  = (U16 *)pBufferBk;
    222                            switch (BytesPerPixelSRC) {
   \                     ??_WriteAlphaToActiveAt_13:
   \   0000039C   28009DE5           LDR      R0,[SP, #+40]
   \   000003A0   010050E2           SUBS     R0,R0,#+1
   \   000003A4   0400000A           BEQ      ??_WriteAlphaToActiveAt_19
   \   000003A8   010050E2           SUBS     R0,R0,#+1
   \   000003AC   1700000A           BEQ      ??_WriteAlphaToActiveAt_20
   \   000003B0   020050E2           SUBS     R0,R0,#+2
   \   000003B4   2B00000A           BEQ      ??_WriteAlphaToActiveAt_21
   \   000003B8   800000EA           B        ??_WriteAlphaToActiveAt_15
    223                            case 1: {
    224                                U8 * pSrc;
    225                                pSrc = (U8 *)pData;
    226                                do {
    227                                  Index   = *(pSrc + n);
    228                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_19:
   \   000003BC   0A00DBE7           LDRB     R0,[R11, +R10]
   \   000003C0   37FF2FE1           BLX      R7
   \   000003C4   00008DE5           STR      R0,[SP, #+0]
    229                                  BkColor = pfIndex2Color(*(pBk + n));
   \   000003C8   8B0086E0           ADD      R0,R6,R11, LSL #+1
   \   000003CC   B000D0E1           LDRH     R0,[R0, #+0]
   \   000003D0   37FF2FE1           BLX      R7
   \   000003D4   0010A0E1           MOV      R1,R0
    230                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   000003D8   0420A0E1           MOV      R2,R4
   \   000003DC   00009DE5           LDR      R0,[SP, #+0]
   \   000003E0   ........           BL       LCD_MixColors256
    231                                  Index   = pfColor2Index(Color);
   \   000003E4   38FF2FE1           BLX      R8
    232                                  *(pDst + xOff) = Index;
   \   000003E8   18109DE5           LDR      R1,[SP, #+24]
    233                                  xOff++;
    234                                  n++;
   \   000003EC   01B08BE2           ADD      R11,R11,#+1
   \   000003F0   811085E0           ADD      R1,R5,R1, LSL #+1
   \   000003F4   B000C1E1           STRH     R0,[R1, #+0]
   \   000003F8   18009DE5           LDR      R0,[SP, #+24]
    235                                } while (--NumPixels);
   \   000003FC   019059E2           SUBS     R9,R9,#+1
   \   00000400   010080E2           ADD      R0,R0,#+1
   \   00000404   18008DE5           STR      R0,[SP, #+24]
   \   00000408   EBFFFF1A           BNE      ??_WriteAlphaToActiveAt_19
   \   0000040C   6B0000EA           B        ??_WriteAlphaToActiveAt_15
    236                              }
   \                     ??_WriteAlphaToActiveAt_20:
   \   00000410   8B008AE0           ADD      R0,R10,R11, LSL #+1
   \   00000414   B000D0E1           LDRH     R0,[R0, #+0]
    237                              break;
    238                            case 2: {
    239                                U16 * pSrc;
    240                                pSrc = (U16 *)pData;
    241                                do {
    242                                  Index   = *(pSrc + n);
    243                                  Color   = pfIndex2Color(Index);
   \   00000418   37FF2FE1           BLX      R7
   \   0000041C   00008DE5           STR      R0,[SP, #+0]
    244                                  BkColor = pfIndex2Color(*(pBk + n));
   \   00000420   8B0086E0           ADD      R0,R6,R11, LSL #+1
   \   00000424   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000428   37FF2FE1           BLX      R7
   \   0000042C   0010A0E1           MOV      R1,R0
    245                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   00000430   0420A0E1           MOV      R2,R4
   \   00000434   00009DE5           LDR      R0,[SP, #+0]
   \   00000438   ........           BL       LCD_MixColors256
    246                                  Index   = pfColor2Index(Color);
   \   0000043C   38FF2FE1           BLX      R8
    247                                  *(pDst + xOff) = Index;
   \   00000440   18109DE5           LDR      R1,[SP, #+24]
    248                                  xOff++;
    249                                  n++;
   \   00000444   01B08BE2           ADD      R11,R11,#+1
   \   00000448   811085E0           ADD      R1,R5,R1, LSL #+1
   \   0000044C   B000C1E1           STRH     R0,[R1, #+0]
   \   00000450   18009DE5           LDR      R0,[SP, #+24]
    250                                } while (--NumPixels);
   \   00000454   019059E2           SUBS     R9,R9,#+1
   \   00000458   010080E2           ADD      R0,R0,#+1
   \   0000045C   18008DE5           STR      R0,[SP, #+24]
   \   00000460   EAFFFF1A           BNE      ??_WriteAlphaToActiveAt_20
   \   00000464   550000EA           B        ??_WriteAlphaToActiveAt_15
    251                              }
    252                              break;
    253                            case 4: {
    254                                U32 * pSrc;
    255                                pSrc = (U32 *)pData;
    256                                do {
    257                                  Index   = *(pSrc + n);
    258                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_21:
   \   00000468   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   0000046C   37FF2FE1           BLX      R7
   \   00000470   00008DE5           STR      R0,[SP, #+0]
    259                                  BkColor = pfIndex2Color(*(pBk + n));
   \   00000474   8B0086E0           ADD      R0,R6,R11, LSL #+1
   \   00000478   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000047C   37FF2FE1           BLX      R7
   \   00000480   0010A0E1           MOV      R1,R0
    260                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   00000484   0420A0E1           MOV      R2,R4
   \   00000488   00009DE5           LDR      R0,[SP, #+0]
   \   0000048C   ........           BL       LCD_MixColors256
    261                                  Index   = pfColor2Index(Color);
   \   00000490   38FF2FE1           BLX      R8
    262                                  *(pDst + xOff) = Index;
   \   00000494   18109DE5           LDR      R1,[SP, #+24]
    263                                  xOff++;
    264                                  n++;
   \   00000498   01B08BE2           ADD      R11,R11,#+1
   \   0000049C   811085E0           ADD      R1,R5,R1, LSL #+1
   \   000004A0   B000C1E1           STRH     R0,[R1, #+0]
   \   000004A4   18009DE5           LDR      R0,[SP, #+24]
    265                                } while (--NumPixels);
   \   000004A8   019059E2           SUBS     R9,R9,#+1
   \   000004AC   010080E2           ADD      R0,R0,#+1
   \   000004B0   18008DE5           STR      R0,[SP, #+24]
   \   000004B4   EBFFFF1A           BNE      ??_WriteAlphaToActiveAt_21
   \   000004B8   400000EA           B        ??_WriteAlphaToActiveAt_15
    266                              }
    267                              break;
    268                            }
    269                          }
    270                          break;
    271                        case 4: {
    272                            U32 * pDst;
    273                            U32 * pBk;
    274                            pDst = (U32 *)pBuffer;
    275                            pBk  = (U32 *)pBufferBk;
    276                            switch (BytesPerPixelSRC) {
   \                     ??_WriteAlphaToActiveAt_14:
   \   000004BC   28009DE5           LDR      R0,[SP, #+40]
   \   000004C0   010050E2           SUBS     R0,R0,#+1
   \   000004C4   0400000A           BEQ      ??_WriteAlphaToActiveAt_22
   \   000004C8   010050E2           SUBS     R0,R0,#+1
   \   000004CC   1500000A           BEQ      ??_WriteAlphaToActiveAt_23
   \   000004D0   020050E2           SUBS     R0,R0,#+2
   \   000004D4   2700000A           BEQ      ??_WriteAlphaToActiveAt_24
   \   000004D8   380000EA           B        ??_WriteAlphaToActiveAt_15
    277                            case 1: {
    278                                U8 * pSrc;
    279                                pSrc = (U8 *)pData;
    280                                do {
    281                                  Index   = *(pSrc + n);
    282                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_22:
   \   000004DC   0A00DBE7           LDRB     R0,[R11, +R10]
   \   000004E0   37FF2FE1           BLX      R7
   \   000004E4   00008DE5           STR      R0,[SP, #+0]
    283                                  BkColor = pfIndex2Color(*(pBk + n));
   \   000004E8   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   000004EC   37FF2FE1           BLX      R7
   \   000004F0   0010A0E1           MOV      R1,R0
    284                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   000004F4   0420A0E1           MOV      R2,R4
   \   000004F8   00009DE5           LDR      R0,[SP, #+0]
   \   000004FC   ........           BL       LCD_MixColors256
    285                                  Index   = pfColor2Index(Color);
   \   00000500   38FF2FE1           BLX      R8
    286                                  *(pDst + xOff) = Index;
   \   00000504   18109DE5           LDR      R1,[SP, #+24]
    287                                  xOff++;
    288                                  n++;
   \   00000508   01B08BE2           ADD      R11,R11,#+1
   \   0000050C   010185E7           STR      R0,[R5, +R1, LSL #+2]
   \   00000510   18009DE5           LDR      R0,[SP, #+24]
    289                                } while (--NumPixels);
   \   00000514   019059E2           SUBS     R9,R9,#+1
   \   00000518   010080E2           ADD      R0,R0,#+1
   \   0000051C   18008DE5           STR      R0,[SP, #+24]
   \   00000520   EDFFFF1A           BNE      ??_WriteAlphaToActiveAt_22
   \   00000524   250000EA           B        ??_WriteAlphaToActiveAt_15
    290                              }
    291                              break;
    292                            case 2: {
    293                                U16 * pSrc;
    294                                pSrc = (U16 *)pData;
    295                                do {
    296                                  Index   = *(pSrc + n);
    297                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_23:
   \   00000528   8B008AE0           ADD      R0,R10,R11, LSL #+1
   \   0000052C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000530   37FF2FE1           BLX      R7
   \   00000534   00008DE5           STR      R0,[SP, #+0]
    298                                  BkColor = pfIndex2Color(*(pBk + n));
   \   00000538   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   0000053C   37FF2FE1           BLX      R7
   \   00000540   0010A0E1           MOV      R1,R0
    299                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   00000544   0420A0E1           MOV      R2,R4
   \   00000548   00009DE5           LDR      R0,[SP, #+0]
   \   0000054C   ........           BL       LCD_MixColors256
    300                                  Index   = pfColor2Index(Color);
   \   00000550   38FF2FE1           BLX      R8
    301                                  *(pDst + xOff) = Index;
   \   00000554   18109DE5           LDR      R1,[SP, #+24]
    302                                  xOff++;
    303                                  n++;
   \   00000558   01B08BE2           ADD      R11,R11,#+1
   \   0000055C   010185E7           STR      R0,[R5, +R1, LSL #+2]
   \   00000560   18009DE5           LDR      R0,[SP, #+24]
    304                                } while (--NumPixels);
   \   00000564   019059E2           SUBS     R9,R9,#+1
   \   00000568   010080E2           ADD      R0,R0,#+1
   \   0000056C   18008DE5           STR      R0,[SP, #+24]
   \   00000570   ECFFFF1A           BNE      ??_WriteAlphaToActiveAt_23
   \   00000574   110000EA           B        ??_WriteAlphaToActiveAt_15
    305                              }
    306                              break;
    307                            case 4: {
    308                                U32 * pSrc;
    309                                pSrc = (U32 *)pData;
    310                                do {
    311                                  Index   = *(pSrc + n);
    312                                  Color   = pfIndex2Color(Index);
   \                     ??_WriteAlphaToActiveAt_24:
   \   00000578   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   0000057C   37FF2FE1           BLX      R7
   \   00000580   00008DE5           STR      R0,[SP, #+0]
    313                                  BkColor = pfIndex2Color(*(pBk + n));
   \   00000584   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   00000588   37FF2FE1           BLX      R7
   \   0000058C   0010A0E1           MOV      R1,R0
    314                                  Color   = LCD_MixColors256(Color, BkColor, Intens);
   \   00000590   0420A0E1           MOV      R2,R4
   \   00000594   00009DE5           LDR      R0,[SP, #+0]
   \   00000598   ........           BL       LCD_MixColors256
    315                                  Index   = pfColor2Index(Color);
   \   0000059C   38FF2FE1           BLX      R8
    316                                  *(pDst + xOff) = Index;
   \   000005A0   18109DE5           LDR      R1,[SP, #+24]
    317                                  xOff++;
    318                                  n++;
   \   000005A4   01B08BE2           ADD      R11,R11,#+1
   \   000005A8   010185E7           STR      R0,[R5, +R1, LSL #+2]
   \   000005AC   18009DE5           LDR      R0,[SP, #+24]
    319                                } while (--NumPixels);
   \   000005B0   019059E2           SUBS     R9,R9,#+1
   \   000005B4   010080E2           ADD      R0,R0,#+1
   \   000005B8   18008DE5           STR      R0,[SP, #+24]
   \   000005BC   EDFFFF1A           BNE      ??_WriteAlphaToActiveAt_24
    320                              }
    321                              break;
    322                            }
    323                          }
    324                          break;
    325                        }
    326                        //
    327                        // Draw result
    328                        //
    329                        LCD_DrawBitmap(xPos, yPos, NumPixelsBitmap, 1, 1, 1, BitsPerPixelDST, NumPixelsBitmap * sizeof(LCD_PIXELINDEX), (U8 *)(pBuffer + xOffFirst * BytesPerPixelDST), NULL);
   \                     ??_WriteAlphaToActiveAt_15:
   \   000005C0   0000A0E3           MOV      R0,#+0
   \   000005C4   14008DE5           STR      R0,[SP, #+20]
   \   000005C8   48009DE5           LDR      R0,[SP, #+72]
   \   000005CC   2C109DE5           LDR      R1,[SP, #+44]
   \   000005D0   0130A0E3           MOV      R3,#+1
   \   000005D4   915020E0           MLA      R0,R1,R0,R5
   \   000005D8   50209DE5           LDR      R2,[SP, #+80]
   \   000005DC   10008DE5           STR      R0,[SP, #+16]
   \   000005E0   50009DE5           LDR      R0,[SP, #+80]
   \   000005E4   24109DE5           LDR      R1,[SP, #+36]
   \   000005E8   0001A0E1           LSL      R0,R0,#+2
   \   000005EC   0C008DE5           STR      R0,[SP, #+12]
   \   000005F0   30009DE5           LDR      R0,[SP, #+48]
   \   000005F4   08008DE5           STR      R0,[SP, #+8]
   \   000005F8   0100A0E3           MOV      R0,#+1
   \   000005FC   04008DE5           STR      R0,[SP, #+4]
   \   00000600   00008DE5           STR      R0,[SP, #+0]
   \   00000604   38009DE5           LDR      R0,[SP, #+56]
   \   00000608   ........           BL       LCD_DrawBitmap
    330                        NumPixels = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   0000060C   34009DE5           LDR      R0,[SP, #+52]
   \   00000610   1C209DE5           LDR      R2,[SP, #+28]
   \   00000614   083090E5           LDR      R3,[R0, #+8]
   \   00000618   18108DE2           ADD      R1,SP,#+24
   \   0000061C   143093E5           LDR      R3,[R3, #+20]
   \   00000620   33FF2FE1           BLX      R3
   \   00000624   0090B0E1           MOVS     R9,R0
   \   00000628   D0FEFF1A           BNE      ??_WriteAlphaToActiveAt_9
    331                      }
    332                    }
   \                     ??_WriteAlphaToActiveAt_8:
   \   0000062C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000630   54109DE5           LDR      R1,[SP, #+84]
   \   00000634   010080E2           ADD      R0,R0,#+1
   \   00000638   1C008DE5           STR      R0,[SP, #+28]
   \   0000063C   3C009DE5           LDR      R0,[SP, #+60]
   \   00000640   010080E2           ADD      R0,R0,#+1
   \   00000644   3C008DE5           STR      R0,[SP, #+60]
   \   00000648   1C009DE5           LDR      R0,[SP, #+28]
   \   0000064C   010050E1           CMP      R0,R1
   \   00000650   BAFEFFBA           BLT      ??_WriteAlphaToActiveAt_7
    333                    //
    334                    // Unlock pointers...
    335                    //
    336                    GUI_UNLOCK_H(pUsage);
   \                     ??_WriteAlphaToActiveAt_6:
   \   00000654   ........           BL       GUI_ALLOC_UnlockH
    337                    GUI_UNLOCK_H(pDev);
   \   00000658   ........           BL       GUI_ALLOC_UnlockH
    338                    GUI_UNLOCK_H(pBuffer);
   \   0000065C   ........           BL       GUI_ALLOC_UnlockH
    339                    GUI_UNLOCK_H(pBufferBk);
   \   00000660   ........           BL       GUI_ALLOC_UnlockH
    340                    //
    341                    // ...and release memory
    342                    //
    343                    GUI_ALLOC_Free(hBufferBk);
   \   00000664   40009DE5           LDR      R0,[SP, #+64]
   \   00000668   ........           BL       GUI_ALLOC_Free
    344                  }
    345                  GUI_ALLOC_Free(hBuffer);
   \                     ??_WriteAlphaToActiveAt_1:
   \   0000066C   44009DE5           LDR      R0,[SP, #+68]
   \   00000670   ........           BL       GUI_ALLOC_Free
    346                }
    347              }
    348            }
    349          }
   \                     ??_WriteAlphaToActiveAt_0:
   \   00000674   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   00000678   F08FBDE8           POP      {R4-R11,PC}      ;; return
    350          
    351          /*********************************************************************
    352          *
    353          *       Exported routines
    354          *
    355          **********************************************************************
    356          */
    357          /*********************************************************************
    358          *
    359          *       GUI_MEMDEV_WriteAlphaAt
    360          */

   \                                 In section .text, align 4, keep-with-next
    361          void GUI_MEMDEV_WriteAlphaAt(GUI_MEMDEV_Handle hMem, int Alpha, int x, int y) {
   \                     GUI_MEMDEV_WriteAlphaAt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    362            if (hMem) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   2000000A           BEQ      ??GUI_MEMDEV_WriteAlphaAt_0
    363              GUI_MEMDEV* pDevData;
    364              #if (GUI_WINSUPPORT)
    365                GUI_RECT r;
    366              #endif
    367              GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
    368              pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  // Convert to pointer
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_h2p
    369              if (x == GUI_POS_AUTO) {
   \   0000002C   FE10E0E3           MVN      R1,#+254
   \   00000030   F01EC1E3           BIC      R1,R1,#0xF00
   \   00000034   010056E1           CMP      R6,R1
    370                x = pDevData->x0;
   \   00000038   F460D001           LDRSHEQ  R6,[R0, #+4]
    371                y = pDevData->y0;
   \   0000003C   F670D001           LDRSHEQ  R7,[R0, #+6]
    372              }
    373              #if (GUI_WINSUPPORT)
    374                r.x1 = (r.x0 = x) + pDevData->XSize-1;
   \   00000040   B060CDE1           STRH     R6,[SP, #+0]
   \   00000044   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000048   F820D0E1           LDRSH    R2,[R0, #+8]
    375                r.y1 = (r.y0 = y) + pDevData->YSize-1;;
   \   0000004C   B270CDE1           STRH     R7,[SP, #+2]
   \   00000050   011082E0           ADD      R1,R2,R1
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   B410CDE1           STRH     R1,[SP, #+4]
   \   0000005C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000060   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000064   010080E0           ADD      R0,R0,R1
   \   00000068   010040E2           SUB      R0,R0,#+1
   \   0000006C   B600CDE1           STRH     R0,[SP, #+6]
    376                WM_ITERATE_START(&r) {
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       WM__InitIVRSearch
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0700000A           BEQ      ??GUI_MEMDEV_WriteAlphaAt_1
    377                _WriteAlphaToActiveAt(hMem, Alpha, x,y);
   \                     ??GUI_MEMDEV_WriteAlphaAt_2:
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       _WriteAlphaToActiveAt
    378                } WM_ITERATE_END();
   \   00000094   ........           BL       WM__GetNextIVR
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   F7FFFF1A           BNE      ??GUI_MEMDEV_WriteAlphaAt_2
    379              #else
    380                _WriteAlphaToActiveAt(hMem, Alpha, x,y);
    381              #endif
    382              GUI_UNLOCK();
   \                     ??GUI_MEMDEV_WriteAlphaAt_1:
   \   000000A0   ........           BL       GUI_Unlock
    383            }
    384          }
   \                     ??GUI_MEMDEV_WriteAlphaAt_0:
   \   000000A4   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000A8   F080BDE8           POP      {R4-R7,PC}       ;; return
    385          
    386          /*********************************************************************
    387          *
    388          *       GUI_MEMDEV_WriteAlpha
    389          */

   \                                 In section .text, align 4, keep-with-next
    390          void GUI_MEMDEV_WriteAlpha(GUI_MEMDEV_Handle hMem, int Alpha) {
   \                     GUI_MEMDEV_WriteAlpha:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
    391            GUI_MEMDEV_WriteAlphaAt(hMem, Alpha, GUI_POS_AUTO, GUI_POS_AUTO);
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1B00000A           BEQ      ??GUI_MEMDEV_WriteAlpha_0
   \   00000018   ........           BL       GUI_Lock
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000028   F670D0E1           LDRSH    R7,[R0, #+6]
   \   0000002C   B060CDE1           STRH     R6,[SP, #+0]
   \   00000030   F820D0E1           LDRSH    R2,[R0, #+8]
   \   00000034   B270CDE1           STRH     R7,[SP, #+2]
   \   00000038   061082E0           ADD      R1,R2,R6
   \   0000003C   011041E2           SUB      R1,R1,#+1
   \   00000040   B410CDE1           STRH     R1,[SP, #+4]
   \   00000044   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000048   070080E0           ADD      R0,R0,R7
   \   0000004C   010040E2           SUB      R0,R0,#+1
   \   00000050   B600CDE1           STRH     R0,[SP, #+6]
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           BL       WM__InitIVRSearch
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0700000A           BEQ      ??GUI_MEMDEV_WriteAlpha_1
   \                     ??GUI_MEMDEV_WriteAlpha_2:
   \   00000064   0730A0E1           MOV      R3,R7
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       _WriteAlphaToActiveAt
   \   00000078   ........           BL       WM__GetNextIVR
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   F7FFFF1A           BNE      ??GUI_MEMDEV_WriteAlpha_2
   \                     ??GUI_MEMDEV_WriteAlpha_1:
   \   00000084   ........           BL       GUI_Unlock
    392          }
   \                     ??GUI_MEMDEV_WriteAlpha_0:
   \   00000088   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     GUI_Context
    393          
    394          #else
    395          
    396          void GUIDEV_WriteAlpha_C(void);
    397          void GUIDEV_WriteAlpha_C(void) {}
    398          
    399          #endif /* GUI_SUPPORT_MEMDEV */
    400          
    401          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     GUI_MEMDEV_WriteAlpha       32
     GUI_MEMDEV_WriteAlphaAt     32
     _WriteAlphaToActiveAt      128


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _WriteAlphaToActiveAt   1660
     GUI_MEMDEV_WriteAlphaAt  172
     GUI_MEMDEV_WriteAlpha    144
     ??DataTable0               4

 
 1 980 bytes in section .text
 
 1 980 bytes of CODE memory

Errors: none
Warnings: none
