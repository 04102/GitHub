###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:11 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveOpaque.c        #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveOpaque.c -D     #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDEV_WriteToActiveOpaque.lst                             #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DEV_WriteToActiveOpaque.o                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_WriteToActiveOpaque.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV__WriteToActiveOpaque.c
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29            #include "WM.h"
     30          #endif
     31          
     32          //
     33          // Memory device capabilities are compiled only if support for them is enabled.
     34          //
     35          #if GUI_SUPPORT_MEMDEV
     36          
     37          /*********************************************************************
     38          *
     39          *       Private code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       GUI_MEMDEV__WriteToActiveOpaque
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          void GUI_MEMDEV__WriteToActiveOpaque(GUI_MEMDEV_Handle hMem,int x, int y) {
   \                     GUI_MEMDEV__WriteToActiveOpaque:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     48            const LCD_PIXELINDEX  aTrans[2] = {0, 1};
   \   00000008   ............       ADRL     R1,`?<Constant {0L, 1L}>`
   \              ....        
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0C00B1E8           LDM      R1!,{R2,R3}
   \   00000018   3CD04DE2           SUB      SP,SP,#+60
   \   0000001C   0080A0E1           MOV      R8,R0
   \   00000020   34008DE2           ADD      R0,SP,#+52
   \   00000024   0C00A0E8           STM      R0!,{R2,R3}
     49            const LCD_PIXELINDEX* pTrans;
     50            GUI_MEMDEV          * pDev;
     51            GUI_USAGE_h           hUsage; 
     52            GUI_USAGE           * pUsage;
     53            int                   XSize, YSize, y0, yi, xOff, xSizeDevice, NumPixels;
     54            unsigned              BytesPerLine_Device;
     55            unsigned              BitsPerPixel_Layer, BitsPerPixel_Device;
     56            unsigned              BytesPerPixel_Layer, BytesPerPixel_Device;
     57            U8                  * pData;
     58            U32                 * pSrc;
     59            U8                  * pBuffer;
     60            U32                   Color;
     61            GUI_HMEM              hBuffer;
     62            tLCDDEV_Index2Color * pfIndex2Color_DEV;
     63            tLCDDEV_Index2Color * pfIndex2Color_DST;
     64            tLCDDEV_Color2Index * pfColor2Index;
     65          
     66            pDev                = (GUI_MEMDEV *)GUI_LOCK_H(hMem);
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   1C008DE5           STR      R0,[SP, #+28]
     67            hUsage              = pDev->hUsage; 
     68            YSize               = pDev->YSize;
   \   00000034   1C109DE5           LDR      R1,[SP, #+28]
   \   00000038   140090E5           LDR      R0,[R0, #+20]
   \   0000003C   FA10D1E1           LDRSH    R1,[R1, #+10]
   \   00000040   28108DE5           STR      R1,[SP, #+40]
     69            BytesPerLine_Device = pDev->BytesPerLine;
   \   00000044   1C109DE5           LDR      R1,[SP, #+28]
   \   00000048   0C6091E5           LDR      R6,[R1, #+12]
     70            BitsPerPixel_Device = pDev->BitsPerPixel;
   \   0000004C   101091E5           LDR      R1,[R1, #+16]
   \   00000050   20108DE5           STR      R1,[SP, #+32]
     71            pData               = (U8 *)(pDev + 1);
   \   00000054   1C109DE5           LDR      R1,[SP, #+28]
   \   00000058   187081E2           ADD      R7,R1,#+24
     72            if (BitsPerPixel_Device <= 8) {
   \   0000005C   20109DE5           LDR      R1,[SP, #+32]
   \   00000060   090051E3           CMP      R1,#+9
   \   00000064   0600002A           BCS      ??GUI_MEMDEV__WriteToActiveOpaque_0
     73              BytesPerPixel_Device = 1;
     74            } else if (BitsPerPixel_Device <= 16) {
     75              BytesPerPixel_Device = 2;
     76            } else {
     77              BytesPerPixel_Device = 4;
     78            }
     79            if (BitsPerPixel_Device == 1) {
   \   00000068   20109DE5           LDR      R1,[SP, #+32]
   \   0000006C   0120A0E3           MOV      R2,#+1
   \   00000070   2C208DE5           STR      R2,[SP, #+44]
   \   00000074   010051E3           CMP      R1,#+1
   \   00000078   0500001A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_1
     80              pTrans = aTrans;
   \   0000007C   34208DE2           ADD      R2,SP,#+52
   \   00000080   040000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_2
     81            } else {
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_0:
   \   00000084   110051E3           CMP      R1,#+17
   \   00000088   0220A033           MOVCC    R2,#+2
   \   0000008C   0420A023           MOVCS    R2,#+4
   \   00000090   2C208DE5           STR      R2,[SP, #+44]
     82              pTrans = NULL;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_1:
   \   00000094   0020A0E3           MOV      R2,#+0
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_2:
   \   00000098   24208DE5           STR      R2,[SP, #+36]
     83            }
     84            if (hUsage) {
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   8100000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_3
     85              pUsage = GUI_USAGE_H2P(hUsage);
   \   000000A4   ........           BL       GUI_ALLOC_h2p
   \   000000A8   0080A0E1           MOV      R8,R0
     86              for (yi = 0; yi < YSize; yi++) {
   \   000000AC   28009DE5           LDR      R0,[SP, #+40]
   \   000000B0   0090A0E3           MOV      R9,#+0
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   E50000BA           BLT      ??GUI_MEMDEV__WriteToActiveOpaque_4
     87                xOff = 0;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_5:
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   18108DE5           STR      R1,[SP, #+24]
     88                XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   000000C4   083098E5           LDR      R3,[R8, #+8]
   \   000000C8   0920A0E1           MOV      R2,R9
   \   000000CC   18108DE2           ADD      R1,SP,#+24
   \   000000D0   0800A0E1           MOV      R0,R8
   \   000000D4   143093E5           LDR      R3,[R3, #+20]
   \   000000D8   33FF2FE1           BLX      R3
   \   000000DC   00A0A0E1           MOV      R10,R0
     89                if (XSize == pDev->XSize) {
   \   000000E0   1C009DE5           LDR      R0,[SP, #+28]
   \   000000E4   F800D0E1           LDRSH    R0,[R0, #+8]
   \   000000E8   00005AE1           CMP      R10,R0
   \   000000EC   2000001A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_6
     90                  //
     91                  // If the entire line is affected, calculate the number of entire lines
     92                  //
     93                  y0 = yi;
   \   000000F0   30908DE5           STR      R9,[SP, #+48]
   \   000000F4   000000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_7
     94                  while ((GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1)) == XSize) {
     95                    yi++;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_8:
   \   000000F8   0B90A0E1           MOV      R9,R11
     96                  }
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_7:
   \   000000FC   083098E5           LDR      R3,[R8, #+8]
   \   00000100   01B089E2           ADD      R11,R9,#+1
   \   00000104   0B20A0E1           MOV      R2,R11
   \   00000108   18108DE2           ADD      R1,SP,#+24
   \   0000010C   0800A0E1           MOV      R0,R8
   \   00000110   143093E5           LDR      R3,[R3, #+20]
   \   00000114   33FF2FE1           BLX      R3
   \   00000118   0A0050E1           CMP      R0,R10
   \   0000011C   F5FFFF0A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_8
   \   00000120   30009DE5           LDR      R0,[SP, #+48]
   \   00000124   10708DE5           STR      R7,[SP, #+16]
   \   00000128   000049E0           SUB      R0,R9,R0
   \   0000012C   01A080E2           ADD      R10,R0,#+1
   \   00000130   24009DE5           LDR      R0,[SP, #+36]
   \   00000134   0C608DE5           STR      R6,[SP, #+12]
   \   00000138   14008DE5           STR      R0,[SP, #+20]
   \   0000013C   20009DE5           LDR      R0,[SP, #+32]
   \   00000140   0A30A0E1           MOV      R3,R10
   \   00000144   08008DE5           STR      R0,[SP, #+8]
   \   00000148   0100A0E3           MOV      R0,#+1
   \   0000014C   04008DE5           STR      R0,[SP, #+4]
   \   00000150   00008DE5           STR      R0,[SP, #+0]
   \   00000154   1C009DE5           LDR      R0,[SP, #+28]
   \   00000158   F820D0E1           LDRSH    R2,[R0, #+8]
   \   0000015C   30009DE5           LDR      R0,[SP, #+48]
   \   00000160   051080E0           ADD      R1,R0,R5
   \   00000164   0400A0E1           MOV      R0,R4
     97                  LCD_DrawBitmap(x, y + y0, pDev->XSize, yi - y0 + 1, 1, 1, BitsPerPixel_Device, BytesPerLine_Device, pData, pTrans);
   \   00000168   ........           BL       LCD_DrawBitmap
     98                  pData += (yi - y0 + 1) * BytesPerLine_Device;
   \   0000016C   967A27E0           MLA      R7,R6,R10,R7
   \   00000170   480000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_9
     99                } else {
    100                  //
    101                  // Draw the partial line which needs to be drawn
    102                  //
    103                  if (BitsPerPixel_Device == 1) {
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_6:
   \   00000174   20009DE5           LDR      R0,[SP, #+32]
   \   00000178   010050E3           CMP      R0,#+1
   \   0000017C   2500001A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_10
    104                    //
    105                    // In case of 1bpp bitmaps draw lines of a length of multiples of 8
    106                    //
    107                    for (; XSize; ) {
   \   00000180   00005AE3           CMP      R10,#+0
   \   00000184   4200000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_11
    108                      XSize = (XSize + (xOff & 7) + 7) & ~0x7;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_12:
   \   00000188   18009DE5           LDR      R0,[SP, #+24]
    109                      xOff  = xOff & ~0x7;
    110                      LCD_DrawBitmap(x + xOff, y + yi, XSize, 1, 1, 1, BitsPerPixel_Device, BytesPerLine_Device, pData + (xOff >> 3), pTrans);
   \   0000018C   0C608DE5           STR      R6,[SP, #+12]
   \   00000190   070000E2           AND      R0,R0,#0x7
   \   00000194   00008AE0           ADD      R0,R10,R0
   \   00000198   070080E2           ADD      R0,R0,#+7
   \   0000019C   07A0C0E3           BIC      R10,R0,#0x7
   \   000001A0   18009DE5           LDR      R0,[SP, #+24]
   \   000001A4   0130A0E3           MOV      R3,#+1
   \   000001A8   0700C0E3           BIC      R0,R0,#0x7
   \   000001AC   18008DE5           STR      R0,[SP, #+24]
   \   000001B0   24009DE5           LDR      R0,[SP, #+36]
   \   000001B4   0A20A0E1           MOV      R2,R10
   \   000001B8   14008DE5           STR      R0,[SP, #+20]
   \   000001BC   18009DE5           LDR      R0,[SP, #+24]
   \   000001C0   051089E0           ADD      R1,R9,R5
   \   000001C4   C00187E0           ADD      R0,R7,R0, ASR #+3
   \   000001C8   10008DE5           STR      R0,[SP, #+16]
   \   000001CC   0100A0E3           MOV      R0,#+1
   \   000001D0   08008DE5           STR      R0,[SP, #+8]
   \   000001D4   04008DE5           STR      R0,[SP, #+4]
   \   000001D8   00008DE5           STR      R0,[SP, #+0]
   \   000001DC   18009DE5           LDR      R0,[SP, #+24]
   \   000001E0   040080E0           ADD      R0,R0,R4
   \   000001E4   ........           BL       LCD_DrawBitmap
    111                      xOff += XSize;
   \   000001E8   18009DE5           LDR      R0,[SP, #+24]
    112                      XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   000001EC   0920A0E1           MOV      R2,R9
   \   000001F0   00008AE0           ADD      R0,R10,R0
   \   000001F4   18008DE5           STR      R0,[SP, #+24]
   \   000001F8   083098E5           LDR      R3,[R8, #+8]
   \   000001FC   18108DE2           ADD      R1,SP,#+24
   \   00000200   0800A0E1           MOV      R0,R8
   \   00000204   143093E5           LDR      R3,[R3, #+20]
   \   00000208   33FF2FE1           BLX      R3
   \   0000020C   00A0B0E1           MOVS     R10,R0
   \   00000210   DCFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_12
   \   00000214   1E0000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_11
    113                    }
    114                  } else {
    115                    for (; XSize; ) {
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_10:
   \   00000218   00005AE3           CMP      R10,#+0
   \   0000021C   1C00000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_11
    116                      LCD_DrawBitmap(x + xOff, y + yi, XSize, 1, 1, 1, BitsPerPixel_Device, BytesPerLine_Device, pData + xOff * BytesPerPixel_Device, pTrans);
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_13:
   \   00000220   24009DE5           LDR      R0,[SP, #+36]
   \   00000224   2C109DE5           LDR      R1,[SP, #+44]
   \   00000228   14008DE5           STR      R0,[SP, #+20]
   \   0000022C   18009DE5           LDR      R0,[SP, #+24]
   \   00000230   0C608DE5           STR      R6,[SP, #+12]
   \   00000234   917020E0           MLA      R0,R1,R0,R7
   \   00000238   0130A0E3           MOV      R3,#+1
   \   0000023C   10008DE5           STR      R0,[SP, #+16]
   \   00000240   20009DE5           LDR      R0,[SP, #+32]
   \   00000244   0A20A0E1           MOV      R2,R10
   \   00000248   08008DE5           STR      R0,[SP, #+8]
   \   0000024C   0100A0E3           MOV      R0,#+1
   \   00000250   04008DE5           STR      R0,[SP, #+4]
   \   00000254   00008DE5           STR      R0,[SP, #+0]
   \   00000258   18009DE5           LDR      R0,[SP, #+24]
   \   0000025C   051089E0           ADD      R1,R9,R5
   \   00000260   040080E0           ADD      R0,R0,R4
   \   00000264   ........           BL       LCD_DrawBitmap
    117                      xOff += XSize;
   \   00000268   18009DE5           LDR      R0,[SP, #+24]
    118                      XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   0000026C   0920A0E1           MOV      R2,R9
   \   00000270   00008AE0           ADD      R0,R10,R0
   \   00000274   18008DE5           STR      R0,[SP, #+24]
   \   00000278   083098E5           LDR      R3,[R8, #+8]
   \   0000027C   18108DE2           ADD      R1,SP,#+24
   \   00000280   0800A0E1           MOV      R0,R8
   \   00000284   143093E5           LDR      R3,[R3, #+20]
   \   00000288   33FF2FE1           BLX      R3
   \   0000028C   00A0B0E1           MOVS     R10,R0
   \   00000290   E2FFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_13
    119                    }
    120                  }
    121                  pData += BytesPerLine_Device;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_11:
   \   00000294   077086E0           ADD      R7,R6,R7
    122                }
    123              }
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_9:
   \   00000298   28009DE5           LDR      R0,[SP, #+40]
   \   0000029C   019089E2           ADD      R9,R9,#+1
   \   000002A0   000059E1           CMP      R9,R0
   \   000002A4   6A0000AA           BGE      ??GUI_MEMDEV__WriteToActiveOpaque_4
   \   000002A8   83FFFFEA           B        ??GUI_MEMDEV__WriteToActiveOpaque_5
    124            } else {
    125              //BitsPerPixel_Layer = LCD__GetBPPDevice(GUI_Context.apDevice[GUI_Context.SelLayer]->pColorConvAPI->pfGetIndexMask);
    126              BitsPerPixel_Layer = LCD_GetBitsPerPixel();
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_3:
   \   000002AC   ........           BL       LCD_GetBitsPerPixel
    127              if (BitsPerPixel_Layer <= 8) {
   \   000002B0   090050E3           CMP      R0,#+9
    128                BytesPerPixel_Layer = 1;
   \   000002B4   0190A033           MOVCC    R9,#+1
   \   000002B8   0200003A           BCC      ??GUI_MEMDEV__WriteToActiveOpaque_14
    129              } else if (BitsPerPixel_Layer <= 16) {
   \   000002BC   110050E3           CMP      R0,#+17
    130                BytesPerPixel_Layer = 2;
   \   000002C0   0290A033           MOVCC    R9,#+2
    131              } else {
    132                BytesPerPixel_Layer = 4;
   \   000002C4   0490A023           MOVCS    R9,#+4
    133              }
    134              pfIndex2Color_DEV = pDev->pDevice->pColorConvAPI->pfIndex2Color;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_14:
   \   000002C8   1C009DE5           LDR      R0,[SP, #+28]
    135              pfIndex2Color_DST = GUI_GetpfIndex2ColorEx(GUI_Context.SelLayer);
    136              if (pfIndex2Color_DEV == pfIndex2Color_DST) {
   \   000002CC   ........           LDR      R10,??DataTable1
   \   000002D0   000090E5           LDR      R0,[R0, #+0]
   \   000002D4   100090E5           LDR      R0,[R0, #+16]
   \   000002D8   04B090E5           LDR      R11,[R0, #+4]
   \   000002DC   1100DAE5           LDRB     R0,[R10, #+17]
   \   000002E0   ........           BL       GUI_GetpfIndex2ColorEx
   \   000002E4   00005BE1           CMP      R11,R0
   \   000002E8   0F00001A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_15
    137                //
    138                // Same color conversion, so LCD_DrawBitmap() can be used without converting data
    139                //
    140                //LCD_DrawBitmap(x, y, pDev->XSize, YSize, 1, 1, /*BitsPerPixel_Device*/BytesPerPixel_Device << 3, BytesPerLine_Device, pData, NULL);
    141                LCD_DrawBitmap(x, y, pDev->XSize, YSize, 1, 1, BitsPerPixel_Device, BytesPerLine_Device, pData, pTrans);
   \   000002EC   24009DE5           LDR      R0,[SP, #+36]
   \   000002F0   10708DE5           STR      R7,[SP, #+16]
   \   000002F4   14008DE5           STR      R0,[SP, #+20]
   \   000002F8   20009DE5           LDR      R0,[SP, #+32]
   \   000002FC   0C608DE5           STR      R6,[SP, #+12]
   \   00000300   08008DE5           STR      R0,[SP, #+8]
   \   00000304   0100A0E3           MOV      R0,#+1
   \   00000308   04008DE5           STR      R0,[SP, #+4]
   \   0000030C   00008DE5           STR      R0,[SP, #+0]
   \   00000310   1C009DE5           LDR      R0,[SP, #+28]
   \   00000314   28309DE5           LDR      R3,[SP, #+40]
   \   00000318   F820D0E1           LDRSH    R2,[R0, #+8]
   \   0000031C   0510A0E1           MOV      R1,R5
   \   00000320   0400A0E1           MOV      R0,R4
   \   00000324   ........           BL       LCD_DrawBitmap
   \   00000328   490000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_4
    142              } else if (BytesPerPixel_Device == 4) {
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_15:
   \   0000032C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000330   040050E3           CMP      R0,#+4
   \   00000334   4600001A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_4
    143                //
    144                // Conversion required if color conversion routines are different
    145                //
    146                xSizeDevice = pDev->XSize;
   \   00000338   1C009DE5           LDR      R0,[SP, #+28]
   \   0000033C   F860D0E1           LDRSH    R6,[R0, #+8]
    147                GUI_UNLOCK_H(pDev);
   \   00000340   ........           BL       GUI_ALLOC_UnlockH
    148                hBuffer     = GUI_ALLOC_AllocNoInit(BytesPerPixel_Layer * xSizeDevice);
   \   00000344   860960E1           SMULBB   R0,R6,R9
   \   00000348   ........           BL       GUI_ALLOC_AllocNoInit
   \   0000034C   20008DE5           STR      R0,[SP, #+32]
    149                if (hBuffer) {
   \   00000350   000050E3           CMP      R0,#+0
   \   00000354   3E00000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_4
    150                  pBuffer       = (U8 *)GUI_LOCK_H(hBuffer);
   \   00000358   ........           BL       GUI_ALLOC_LockH
   \   0000035C   0060A0E1           MOV      R6,R0
    151                  pDev          = (GUI_MEMDEV *)GUI_LOCK_H(hMem);
   \   00000360   0800A0E1           MOV      R0,R8
   \   00000364   ........           BL       GUI_ALLOC_LockH
   \   00000368   1C008DE5           STR      R0,[SP, #+28]
    152                  pSrc          = (U32 *)(pDev + 1);
   \   0000036C   187080E2           ADD      R7,R0,#+24
    153                  pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   00000370   1100DAE5           LDRB     R0,[R10, #+17]
   \   00000374   ........           BL       GUI_GetpfColor2IndexEx
   \   00000378   0080A0E1           MOV      R8,R0
    154                  do {
    155                    NumPixels = pDev->XSize;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_16:
   \   0000037C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000380   F8A0D0E1           LDRSH    R10,[R0, #+8]
    156                    switch (BytesPerPixel_Layer) {
   \   00000384   010059E2           SUBS     R0,R9,#+1
   \   00000388   0400000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_17
   \   0000038C   010050E2           SUBS     R0,R0,#+1
   \   00000390   0900000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_18
   \   00000394   020050E2           SUBS     R0,R0,#+2
   \   00000398   0E00000A           BEQ      ??GUI_MEMDEV__WriteToActiveOpaque_19
   \   0000039C   130000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_20
    157                    case 1: {
    158                        U8 * pDest;
    159                        U8 Index;
    160                        pDest = (U8 *)pBuffer;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_17:
   \   000003A0   06B0A0E1           MOV      R11,R6
    161                        do {
    162                          Color = *pSrc++;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_21:
   \   000003A4   040097E4           LDR      R0,[R7], #+4
    163                          Index = pfColor2Index(Color);
    164                          *pDest++ = Index;
   \   000003A8   38FF2FE1           BLX      R8
   \   000003AC   0100CBE4           STRB     R0,[R11], #+1
    165                        } while (--NumPixels);
   \   000003B0   01A05AE2           SUBS     R10,R10,#+1
   \   000003B4   FAFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_21
   \   000003B8   0C0000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_20
    166                      }
    167                      break;
    168                    case 2: {
    169                        U16 * pDest;
    170                        U16 Index;
    171                        pDest = (U16 *)pBuffer;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_18:
   \   000003BC   06B0A0E1           MOV      R11,R6
    172                        do {
    173                          Color = *pSrc++;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_22:
   \   000003C0   040097E4           LDR      R0,[R7], #+4
    174                          Index = pfColor2Index(Color);
    175                          *pDest++ = Index;
   \   000003C4   38FF2FE1           BLX      R8
   \   000003C8   B200CBE0           STRH     R0,[R11], #+2
    176                        } while (--NumPixels);
   \   000003CC   01A05AE2           SUBS     R10,R10,#+1
   \   000003D0   FAFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_22
   \   000003D4   050000EA           B        ??GUI_MEMDEV__WriteToActiveOpaque_20
    177                      }
    178                      break;
    179                    case 4: {
    180                        U32 * pDest;
    181                        U32 Index;
    182                        pDest = (U32 *)pBuffer;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_19:
   \   000003D8   06B0A0E1           MOV      R11,R6
    183                        do {
    184                          Color = *pSrc++;
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_23:
   \   000003DC   040097E4           LDR      R0,[R7], #+4
    185                          Index = pfColor2Index(Color);
    186                          *pDest++ = Index;
   \   000003E0   38FF2FE1           BLX      R8
   \   000003E4   04008BE4           STR      R0,[R11], #+4
    187                        } while (--NumPixels);
   \   000003E8   01A05AE2           SUBS     R10,R10,#+1
   \   000003EC   FAFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_23
    188                      }
    189                      break;
    190                    }
    191                    //
    192                    // Draw line by line using LCD_DrawBitmap()
    193                    //
    194                    LCD_DrawBitmap(x, y++, pDev->XSize, 1, 1, 1, BytesPerPixel_Layer << 3, 0, pBuffer, pTrans);
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_20:
   \   000003F0   24009DE5           LDR      R0,[SP, #+36]
   \   000003F4   10608DE5           STR      R6,[SP, #+16]
   \   000003F8   14008DE5           STR      R0,[SP, #+20]
   \   000003FC   0000A0E3           MOV      R0,#+0
   \   00000400   0C008DE5           STR      R0,[SP, #+12]
   \   00000404   8901A0E1           LSL      R0,R9,#+3
   \   00000408   08008DE5           STR      R0,[SP, #+8]
   \   0000040C   0100A0E3           MOV      R0,#+1
   \   00000410   04008DE5           STR      R0,[SP, #+4]
   \   00000414   00008DE5           STR      R0,[SP, #+0]
   \   00000418   1C009DE5           LDR      R0,[SP, #+28]
   \   0000041C   0130A0E3           MOV      R3,#+1
   \   00000420   F820D0E1           LDRSH    R2,[R0, #+8]
   \   00000424   0510A0E1           MOV      R1,R5
   \   00000428   0400A0E1           MOV      R0,R4
   \   0000042C   ........           BL       LCD_DrawBitmap
    195                  } while (--YSize);
   \   00000430   28009DE5           LDR      R0,[SP, #+40]
   \   00000434   015085E2           ADD      R5,R5,#+1
   \   00000438   010040E2           SUB      R0,R0,#+1
   \   0000043C   28008DE5           STR      R0,[SP, #+40]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   CCFFFF1A           BNE      ??GUI_MEMDEV__WriteToActiveOpaque_16
    196                  GUI_UNLOCK_H(pBuffer);
   \   00000448   ........           BL       GUI_ALLOC_UnlockH
    197                  GUI_ALLOC_Free(hBuffer);
   \   0000044C   20009DE5           LDR      R0,[SP, #+32]
   \   00000450   ........           BL       GUI_ALLOC_Free
    198                }
    199              } else {
    200                GUI_DEBUG_WARN("GUI_MEMDEV__WriteToActiveAt: This color depth currently not supported");
    201              }
    202            }
    203            GUI_UNLOCK_H(pDev);
   \                     ??GUI_MEMDEV__WriteToActiveOpaque_4:
   \   00000454   ........           BL       GUI_ALLOC_UnlockH
    204          }
   \   00000458   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   0000045C   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L, 1L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   000000000100       DC32 0, 1
   \              0000        
    205          
    206          #else
    207          
    208          void GUIDEV__WriteToActiveOpaque(void);
    209          void GUIDEV__WriteToActiveOpaque(void) {}
    210          
    211          #endif /* GUI_SUPPORT_MEMDEV */
    212          
    213          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GUI_MEMDEV__WriteToActiveOpaque
                                        96


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     GUI_MEMDEV__WriteToActiveOpaque
                                    1120
     ??DataTable1                      4
     ?<Constant {0L, 1L}>              8

 
 1 132 bytes in section .text
 
 1 132 bytes of CODE memory

Errors: none
Warnings: none
