###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:51 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawGradientRounded.c           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawGradientRounded.c -D        #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_DrawGradientRounded.lst                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _DrawGradientRounded.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawGradientRounded.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawGradientRounded.c
     19          Purpose     : Implementation of rounded gradients
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DrawGradientRounded
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _DrawGradientRounded(int x0, int y0, int x1, int y1, int rd, GUI_COLOR Color0, GUI_COLOR Color1, void (* pFunc)(int, int, int), int v) {
   \                     _DrawGradientRounded:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   68409DE5           LDR      R4,[SP, #+104]
   \   00000010   6CA09DE5           LDR      R10,[SP, #+108]
   \   00000014   70909DE5           LDR      R9,[SP, #+112]
   \   00000018   74509DE5           LDR      R5,[SP, #+116]
     36          #if defined(GUI_OPTIMIZE_ROUNDING)
     37          
     38            I32 a, r, g, b, a0, r0, g0, b0, a1, r1, g1, b1, rr;
     39            int yy, y, d, dx, ySize, ySize1;
     40            GUI_COLOR Color, OldColor;
     41          
     42            OldColor = GUI_GetColor();
     43            ySize  = y1 - y0 + 1;
     44            ySize1 = (ySize - 1) ? ySize - 1 : 1;
     45            r0 = (Color0      ) & 0xff;
     46            g0 = (Color0 >>  8) & 0xff;
     47            b0 = (Color0 >> 16) & 0xff;
     48            a0 = (Color0 >> 24) & 0xff;
     49            r1 = (Color1      ) & 0xff;
     50            g1 = (Color1 >>  8) & 0xff;
     51            b1 = (Color1 >> 16) & 0xff;
     52            a1 = (Color1 >> 24) & 0xff;
     53            rr = (I32)rd * rd;
     54            for (y = y0; y <= y1; y++) {
     55              if        ((y - y0) < (rd - 1)) {
     56                yy = rd - (y - y0) - 1;
     57              } else if ((y1 - y) < (rd - 1)) {
     58                yy = rd - (y1 - y) - 1;
     59              } else {
     60                yy = 0;
     61              }
     62              if (yy) {
     63                dx = rd - GUI__sqrt32(rr - (I32)yy * yy) - 1;
     64              } else {
     65                dx = 0;
     66              }
     67              d = (y - y0);
     68              r = (r0 + ((r1 - r0) * d) / ySize1) & 0xff;
     69              g = (g0 + ((g1 - g0) * d) / ySize1) & 0xff;
     70              b = (b0 + ((b1 - b0) * d) / ySize1) & 0xff;
     71              a = (a0 + ((a1 - a0) * d) / ySize1) & 0xff;
     72              Color = r | (g << 8) | ((U32)b << 16) | ((U32)a << 24);
     73              LCD_SetColor(Color);
     74              if (v) {
     75                pFunc(x0 + dx, y, x1 - dx);
     76              } else {
     77                pFunc(y, x0 + dx, x1 - dx);
     78              }
     79            }
     80            LCD_SetColor(OldColor);
     81          
     82          #else
     83          
     84            I32 a, r, g, b, a0, r0, g0, b0, a1, r1, g1, b1, rr;
     85            int yy, y, d, dx, ySize, ySize1;
     86            GUI_COLOR Color, OldColor;
     87          
     88            OldColor = GUI_GetColor();
   \   0000001C   ........           BL       GUI_GetColor
     89            ySize = y1 - y0 + 1;
     90            ySize1 = (ySize - 1) ? ySize - 1 : 1;
     91            r0 = (Color0      ) & 0xff;
   \   00000020   FF100AE2           AND      R1,R10,#0xFF
   \   00000024   18108DE5           STR      R1,[SP, #+24]
     92            g0 = (Color0 >>  8) & 0xff;
   \   00000028   FF10A0E3           MOV      R1,#+255
   \   0000002C   2A1401E0           AND      R1,R1,R10, LSR #+8
   \   00000030   30008DE5           STR      R0,[SP, #+48]
   \   00000034   14108DE5           STR      R1,[SP, #+20]
   \   00000038   40009DE5           LDR      R0,[SP, #+64]
     93            b0 = (Color0 >> 16) & 0xff;
   \   0000003C   FF10A0E3           MOV      R1,#+255
   \   00000040   2A1801E0           AND      R1,R1,R10, LSR #+16
   \   00000044   078040E0           SUB      R8,R0,R7
   \   00000048   10108DE5           STR      R1,[SP, #+16]
   \   0000004C   010088E2           ADD      R0,R8,#+1
     94            a0 = (Color0 >> 24) & 0xff;
   \   00000050   2A1CA0E1           LSR      R1,R10,#+24
     95            r1 = (Color1      ) & 0xff;
     96            g1 = (Color1 >>  8) & 0xff;
     97            b1 = (Color1 >> 16) & 0xff;
     98            a1 = (Color1 >> 24) & 0xff;
     99            rr = (I32)rd * rd;
   \   00000054   94040EE0           MUL      LR,R4,R4
   \   00000058   016050E2           SUBS     R6,R0,#+1
   \   0000005C   0C108DE5           STR      R1,[SP, #+12]
    100            for (y = y0; y <= y1; y++) {
   \   00000060   40C09DE5           LDR      R12,[SP, #+64]
   \   00000064   0160A003           MOVEQ    R6,#+1
   \   00000068   FF10A0E3           MOV      R1,#+255
   \   0000006C   FF20A0E3           MOV      R2,#+255
   \   00000070   FF0009E2           AND      R0,R9,#0xFF
   \   00000074   291401E0           AND      R1,R1,R9, LSR #+8
   \   00000078   292802E0           AND      R2,R2,R9, LSR #+16
   \   0000007C   293CA0E1           LSR      R3,R9,#+24
   \   00000080   2CE08DE5           STR      LR,[SP, #+44]
   \   00000084   07005CE1           CMP      R12,R7
   \   00000088   5F0000BA           BLT      ??_DrawGradientRounded_0
   \   0000008C   0CC044E0           SUB      R12,R4,R12
   \   00000090   0CA087E0           ADD      R10,R7,R12
   \   00000094   0CE09DE5           LDR      LR,[SP, #+12]
   \   00000098   10C09DE5           LDR      R12,[SP, #+16]
   \   0000009C   0E3043E0           SUB      R3,R3,LR
   \   000000A0   0C2042E0           SUB      R2,R2,R12
   \   000000A4   28308DE5           STR      R3,[SP, #+40]
   \   000000A8   24208DE5           STR      R2,[SP, #+36]
   \   000000AC   14309DE5           LDR      R3,[SP, #+20]
   \   000000B0   18209DE5           LDR      R2,[SP, #+24]
   \   000000B4   031041E0           SUB      R1,R1,R3
   \   000000B8   020040E0           SUB      R0,R0,R2
   \   000000BC   08408DE5           STR      R4,[SP, #+8]
   \   000000C0   0090A0E3           MOV      R9,#+0
   \   000000C4   20108DE5           STR      R1,[SP, #+32]
   \   000000C8   1C008DE5           STR      R0,[SP, #+28]
    101              if ((y - y0) < rd) {
   \                     ??_DrawGradientRounded_1:
   \   000000CC   040059E1           CMP      R9,R4
    102                yy = rd - (y - y0);
   \   000000D0   08009DB5           LDRLT    R0,[SP, #+8]
   \   000000D4   020000BA           BLT      ??_DrawGradientRounded_2
    103              } else if ((y1 - y) < rd) {
   \   000000D8   040058E1           CMP      R8,R4
   \   000000DC   080000AA           BGE      ??_DrawGradientRounded_3
    104                yy = rd - (y1 - y);
   \   000000E0   0A00A0E1           MOV      R0,R10
    105              } else {
    106                yy = 0;
    107              }
    108              if (yy) {
   \                     ??_DrawGradientRounded_2:
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   0500000A           BEQ      ??_DrawGradientRounded_3
    109                dx = rd - GUI__sqrt32(rr - (I32)yy * yy);
   \   000000EC   900002E0           MUL      R2,R0,R0
   \   000000F0   2C109DE5           LDR      R1,[SP, #+44]
   \   000000F4   020041E0           SUB      R0,R1,R2
   \   000000F8   ........           BL       GUI__sqrt32
   \   000000FC   00B044E0           SUB      R11,R4,R0
   \   00000100   000000EA           B        ??_DrawGradientRounded_4
    110              } else {
    111                dx = 0;
   \                     ??_DrawGradientRounded_3:
   \   00000104   00B0A0E3           MOV      R11,#+0
    112              }
    113              d = (y - y0);
    114              r = (r0 + ((r1 - r0) * d) / ySize1) & 0xff;
    115              g = (g0 + ((g1 - g0) * d) / ySize1) & 0xff;
    116              b = (b0 + ((b1 - b0) * d) / ySize1) & 0xff;
    117              a = (a0 + ((a1 - a0) * d) / ySize1) & 0xff;
    118              Color = r | (g << 8) | ((U32)b << 16) | ((U32)a << 24);
    119              LCD_SetColor(Color);
   \                     ??_DrawGradientRounded_4:
   \   00000108   18009DE5           LDR      R0,[SP, #+24]
   \   0000010C   0610A0E1           MOV      R1,R6
   \   00000110   00008DE5           STR      R0,[SP, #+0]
   \   00000114   1C009DE5           LDR      R0,[SP, #+28]
   \   00000118   990000E0           MUL      R0,R9,R0
   \   0000011C   ........           BL       __aeabi_idiv
   \   00000120   00109DE5           LDR      R1,[SP, #+0]
   \   00000124   010080E0           ADD      R0,R0,R1
   \   00000128   FF0000E2           AND      R0,R0,#0xFF
   \   0000012C   04008DE5           STR      R0,[SP, #+4]
   \   00000130   14009DE5           LDR      R0,[SP, #+20]
   \   00000134   0610A0E1           MOV      R1,R6
   \   00000138   00008DE5           STR      R0,[SP, #+0]
   \   0000013C   20009DE5           LDR      R0,[SP, #+32]
   \   00000140   990000E0           MUL      R0,R9,R0
   \   00000144   ........           BL       __aeabi_idiv
   \   00000148   00109DE5           LDR      R1,[SP, #+0]
   \   0000014C   010080E0           ADD      R0,R0,R1
   \   00000150   FF1000E2           AND      R1,R0,#0xFF
   \   00000154   04009DE5           LDR      R0,[SP, #+4]
   \   00000158   010480E1           ORR      R0,R0,R1, LSL #+8
   \   0000015C   04008DE5           STR      R0,[SP, #+4]
   \   00000160   10009DE5           LDR      R0,[SP, #+16]
   \   00000164   0610A0E1           MOV      R1,R6
   \   00000168   00008DE5           STR      R0,[SP, #+0]
   \   0000016C   24009DE5           LDR      R0,[SP, #+36]
   \   00000170   990000E0           MUL      R0,R9,R0
   \   00000174   ........           BL       __aeabi_idiv
   \   00000178   00109DE5           LDR      R1,[SP, #+0]
   \   0000017C   010080E0           ADD      R0,R0,R1
   \   00000180   FF1000E2           AND      R1,R0,#0xFF
   \   00000184   04009DE5           LDR      R0,[SP, #+4]
   \   00000188   010880E1           ORR      R0,R0,R1, LSL #+16
   \   0000018C   04008DE5           STR      R0,[SP, #+4]
   \   00000190   0C009DE5           LDR      R0,[SP, #+12]
   \   00000194   0610A0E1           MOV      R1,R6
   \   00000198   00008DE5           STR      R0,[SP, #+0]
   \   0000019C   28009DE5           LDR      R0,[SP, #+40]
   \   000001A0   990000E0           MUL      R0,R9,R0
   \   000001A4   ........           BL       __aeabi_idiv
   \   000001A8   00109DE5           LDR      R1,[SP, #+0]
   \   000001AC   011080E0           ADD      R1,R0,R1
   \   000001B0   04009DE5           LDR      R0,[SP, #+4]
   \   000001B4   010C80E1           ORR      R0,R0,R1, LSL #+24
   \   000001B8   ........           BL       LCD_SetColor
    120              if (v) {
   \   000001BC   3C109DE5           LDR      R1,[SP, #+60]
   \   000001C0   38009DE5           LDR      R0,[SP, #+56]
   \   000001C4   0B2041E0           SUB      R2,R1,R11
   \   000001C8   78109DE5           LDR      R1,[SP, #+120]
   \   000001CC   00008BE0           ADD      R0,R11,R0
   \   000001D0   000051E3           CMP      R1,#+0
    121                pFunc(x0 + dx, y, x1 - dx);
    122              } else {
    123                pFunc(y, x0 + dx, x1 - dx);
   \   000001D4   0010A001           MOVEQ    R1,R0
   \   000001D8   0710A011           MOVNE    R1,R7
   \   000001DC   0700A001           MOVEQ    R0,R7
   \   000001E0   35FF2FE1           BLX      R5
    124              }
    125            }
   \   000001E4   08109DE5           LDR      R1,[SP, #+8]
   \   000001E8   40009DE5           LDR      R0,[SP, #+64]
   \   000001EC   017087E2           ADD      R7,R7,#+1
   \   000001F0   011041E2           SUB      R1,R1,#+1
   \   000001F4   01A08AE2           ADD      R10,R10,#+1
   \   000001F8   019089E2           ADD      R9,R9,#+1
   \   000001FC   018048E2           SUB      R8,R8,#+1
   \   00000200   08108DE5           STR      R1,[SP, #+8]
   \   00000204   070050E1           CMP      R0,R7
   \   00000208   AFFFFFAA           BGE      ??_DrawGradientRounded_1
    126            LCD_SetColor(OldColor);
   \                     ??_DrawGradientRounded_0:
   \   0000020C   30009DE5           LDR      R0,[SP, #+48]
   \   00000210   44D08DE2           ADD      SP,SP,#+68
   \   00000214   F04FBDE8           POP      {R4-R11,LR}
   \   00000218   ........           B        LCD_SetColor     ;; tailcall
    127          
    128          #endif
    129          }
    130          
    131          /*********************************************************************
    132          *
    133          *       Public code
    134          *
    135          **********************************************************************
    136          */
    137          /*********************************************************************
    138          *
    139          *       GUI_DrawGradientRoundedV
    140          */

   \                                 In section .text, align 4, keep-with-next
    141          void GUI_DrawGradientRoundedV(int x0, int y0, int x1, int y1, int rd, GUI_COLOR Color0, GUI_COLOR Color1) {
   \                     GUI_DrawGradientRoundedV:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0090A0E1           MOV      R9,R0
   \   0000000C   01A0A0E1           MOV      R10,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   40609DE5           LDR      R6,[SP, #+64]
   \   0000001C   44709DE5           LDR      R7,[SP, #+68]
   \   00000020   48809DE5           LDR      R8,[SP, #+72]
    142            #if (GUI_WINSUPPORT)
    143              GUI_RECT r;
    144            #endif
    145            GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    146            #if (GUI_WINSUPPORT)
    147              WM_ADDORG(x0,y0);
   \   00000028   ........           LDR      R0,??DataTable1
   \   0000002C   401090E5           LDR      R1,[R0, #+64]
   \   00000030   440090E5           LDR      R0,[R0, #+68]
   \   00000034   099081E0           ADD      R9,R1,R9
   \   00000038   0AA080E0           ADD      R10,R0,R10
    148              WM_ADDORG(x1,y1);
   \   0000003C   044081E0           ADD      R4,R1,R4
   \   00000040   055080E0           ADD      R5,R0,R5
    149              r.x0 = x0;
   \   00000044   B491CDE1           STRH     R9,[SP, #+20]
    150              r.x1 = x1;
   \   00000048   B841CDE1           STRH     R4,[SP, #+24]
    151              r.y0 = y0;
   \   0000004C   B6A1CDE1           STRH     R10,[SP, #+22]
    152              r.y1 = y1;
   \   00000050   BA51CDE1           STRH     R5,[SP, #+26]
    153              WM_ITERATE_START(&r); {
   \   00000054   14008DE2           ADD      R0,SP,#+20
   \   00000058   ........           BL       WM__InitIVRSearch
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0E00000A           BEQ      ??GUI_DrawGradientRoundedV_0
    154            #endif
    155            _DrawGradientRounded(x0, y0, x1, y1, rd, Color0, Color1, LCD_DrawHLine, 1);
   \                     ??GUI_DrawGradientRoundedV_1:
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   10008DE5           STR      R0,[SP, #+16]
   \   0000006C   ........           LDR      R0,??DataTable1_1
   \   00000070   08808DE5           STR      R8,[SP, #+8]
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   04708DE5           STR      R7,[SP, #+4]
   \   0000007C   00608DE5           STR      R6,[SP, #+0]
   \   00000080   0530A0E1           MOV      R3,R5
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0A10A0E1           MOV      R1,R10
   \   0000008C   0900A0E1           MOV      R0,R9
   \   00000090   ........           BL       _DrawGradientRounded
    156            #if (GUI_WINSUPPORT)
    157              } WM_ITERATE_END();
   \   00000094   ........           BL       WM__GetNextIVR
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   F0FFFF1A           BNE      ??GUI_DrawGradientRoundedV_1
    158            #endif
    159            GUI_UNLOCK();
   \                     ??GUI_DrawGradientRoundedV_0:
   \   000000A0   ........           BL       GUI_Unlock
    160          }
   \   000000A4   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000A8   F087BDE8           POP      {R4-R10,PC}      ;; return
    161          
    162          /*********************************************************************
    163          *
    164          *       GUI_DrawGradientRoundedH
    165          */

   \                                 In section .text, align 4, keep-with-next
    166          void GUI_DrawGradientRoundedH(int x0, int y0, int x1, int y1, int rd, GUI_COLOR Color0, GUI_COLOR Color1) {
   \                     GUI_DrawGradientRoundedH:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0090A0E1           MOV      R9,R0
   \   0000000C   01A0A0E1           MOV      R10,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   40609DE5           LDR      R6,[SP, #+64]
   \   0000001C   44709DE5           LDR      R7,[SP, #+68]
   \   00000020   48809DE5           LDR      R8,[SP, #+72]
    167            #if (GUI_WINSUPPORT)
    168              GUI_RECT r;
    169            #endif
    170            GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    171            #if (GUI_WINSUPPORT)
    172              WM_ADDORG(x0,y0);
   \   00000028   ........           LDR      R0,??DataTable1
   \   0000002C   401090E5           LDR      R1,[R0, #+64]
   \   00000030   440090E5           LDR      R0,[R0, #+68]
   \   00000034   099081E0           ADD      R9,R1,R9
   \   00000038   0AA080E0           ADD      R10,R0,R10
    173              WM_ADDORG(x1,y1);
   \   0000003C   044081E0           ADD      R4,R1,R4
   \   00000040   055080E0           ADD      R5,R0,R5
    174              r.x0 = x0;
   \   00000044   B491CDE1           STRH     R9,[SP, #+20]
    175              r.x1 = x1;
   \   00000048   B841CDE1           STRH     R4,[SP, #+24]
    176              r.y0 = y0;
   \   0000004C   B6A1CDE1           STRH     R10,[SP, #+22]
    177              r.y1 = y1;
   \   00000050   BA51CDE1           STRH     R5,[SP, #+26]
    178              WM_ITERATE_START(&r); {
   \   00000054   14008DE2           ADD      R0,SP,#+20
   \   00000058   ........           BL       WM__InitIVRSearch
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0E00000A           BEQ      ??GUI_DrawGradientRoundedH_0
    179            #endif
    180            _DrawGradientRounded(y0, x0, y1, x1, rd, Color0, Color1, LCD_DrawVLine, 0);
   \                     ??GUI_DrawGradientRoundedH_1:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   10008DE5           STR      R0,[SP, #+16]
   \   0000006C   ........           LDR      R0,??DataTable1_2
   \   00000070   08808DE5           STR      R8,[SP, #+8]
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   04708DE5           STR      R7,[SP, #+4]
   \   0000007C   00608DE5           STR      R6,[SP, #+0]
   \   00000080   0430A0E1           MOV      R3,R4
   \   00000084   0520A0E1           MOV      R2,R5
   \   00000088   0910A0E1           MOV      R1,R9
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   ........           BL       _DrawGradientRounded
    181            #if (GUI_WINSUPPORT)
    182              } WM_ITERATE_END();
   \   00000094   ........           BL       WM__GetNextIVR
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   F0FFFF1A           BNE      ??GUI_DrawGradientRoundedH_1
    183            #endif
    184            GUI_UNLOCK();
   \                     ??GUI_DrawGradientRoundedH_0:
   \   000000A0   ........           BL       GUI_Unlock
    185          }
   \   000000A4   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000A8   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_DrawHLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_DrawVLine
    186          
    187          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUI_DrawGradientRoundedH     64
     GUI_DrawGradientRoundedV     64
     _DrawGradientRounded        104


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _DrawGradientRounded      540
     GUI_DrawGradientRoundedV  172
     GUI_DrawGradientRoundedH  172
     ??DataTable1                4
     ??DataTable1_1              4
     ??DataTable1_2              4

 
 896 bytes in section .text
 
 896 bytes of CODE memory

Errors: none
Warnings: none
