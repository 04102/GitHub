###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:31:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\LEDHandler.c                                #
#    Command line =  C:\DUII\DUII\LEDHandler.c -D DEBUG=1 -D SDRAM_TARGET=1   #
#                    -D USB_IS_HIGH_SPEED -D XIGNORE_TEMPERATURE -D           #
#                    BUILD_DEBUG_PORT -D PROFILER -lCN                        #
#                    C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\   #
#                    -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\ #
#                     --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None  #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LE #
#                    DHandler.lst                                             #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LED #
#                    Handler.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\LEDHandler.c
      1          #ifdef PROFILER
      2          #ifndef _WINDOWS
      3          #include "profiler.h"
      4          #define THIS_TASK	LEDHANDLERTASK_NUM
      5          #endif
      6          #endif
      7          
      8          #include <stdio.h>
      9          #include <string.h>
     10          #include <stdlib.h>
     11          #include "commondefs.h"
     12          
     13          #ifdef _WINDOWS
     14          #include "SIM.h"
     15          #include "SIMConf.h"
     16          #else
     17          #include "SPI_API.h"
     18          #include "RTOS.H"
     19          #include "adc.h"
     20          #endif
     21          
     22          #include "LEDHandler.h"
     23          #include "DataHandler.h"
     24          #include "DUII.h"
     25          #include "ConfigScreens.h"
     26          
     27          
     28          #define	WARNING_POPUP_WIDTH		250
     29          #define	WARNING_POPUP_HEIGHT	40
     30          #define POPUP_LEFT_POS			0
     31          #define	UPPER_POPUP_POS			22
     32          #define	LOWER_POPUP_POS			62
     33          #define	TEXT_OFFSET				8
     34          #define	BORDER_WIDTH			5

   \                                 In section .text, align 4, keep-with-next
     35          const GUI_RECT UpperRect = { POPUP_LEFT_POS + BORDER_WIDTH, UPPER_POPUP_POS, POPUP_LEFT_POS + WARNING_POPUP_WIDTH - BORDER_WIDTH - 1, UPPER_POPUP_POS + WARNING_POPUP_HEIGHT };
   \                     UpperRect:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   05001600F400       DC16 5, 22, 244, 62
   \              3E00        

   \                                 In section .text, align 4, keep-with-next
     36          const GUI_RECT LowerRect = { POPUP_LEFT_POS + BORDER_WIDTH, LOWER_POPUP_POS, POPUP_LEFT_POS + WARNING_POPUP_WIDTH - BORDER_WIDTH - 1, LOWER_POPUP_POS + WARNING_POPUP_HEIGHT };
   \                     LowerRect:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   05003E00F400       DC16 5, 62, 244, 102
   \              6600        
     37          
     38          struct LED_DATA {
     39          	int warningOn;
     40          	int LEDMarkTime;
     41          	int flashStartTime;
     42          #ifdef	_WINDOWS
     43          	unsigned int LED_ID;
     44          #else
     45          	U32 DUTY_CYCLE_REGISTER;
     46          #endif
     47          };
     48          
     49          struct POPUPTABLE {
     50          	char on;
     51          	char visible;
     52          };
     53          
     54          
     55          //
     56          // KMC NOTE!
     57          //
     58          // NEW METHOD FOR CONTOLLING LED (including shiftlights, warning LEDs and backlight) INTENSITY!
     59          //
     60          // Since the LED intensity is not linear I will use lookup tables to determine PWM values.
     61          // The user brightness will always be 0 to 99, 0 is minimum acceptable brightness and 99
     62          // is maximum brightness.  User controls will all range from 0 to 99.  User step sizes will be 1.
     63          // The slideout controls during race modes will step somewhere betweeen 1 and 5, this is TBD.
     64          //
     65          // The tables will contain direct PWM values which can be put directly into the control registers.
     66          // There will be PWM lookup tables for: shiftlight LEDs, warning LEDs and backlight (3 tables).
     67          // The shiftlights and warning intensities will both be controlled by the same user index setting
     68          // and so these tables should work in step with eachother.  The backlight uses it's own index.
     69          //
     70          #define	INTENSITY_STEPS			100
     71          #define	BRIGHTNESS_QUICK_STEP	10
     72          
     73          //
     74          // Intensity tables (index 0 = dimmest, 99 = brightest)
     75          //

   \                                 In section .text, align 4, keep-with-next
     76          const int BacklightBrightness[INTENSITY_STEPS] = {	
   \                     BacklightBrightness:
   \   00000000                      ; Initializer data, 400 bytes
   \   00000000   720100006B01       DC32 370, 363, 356, 349, 342, 337, 332, 327, 322, 313
   \              000064010000
   \              5D0100005601
   \              000051010000
   \              4C0100004701
   \              000042010000
   \              39010000    
   \   00000028   270100001D01       DC32 295, 285, 275, 265, 255, 245, 235, 225, 215, 205
   \              000013010000
   \              09010000FF00
   \              0000F5000000
   \              EB000000E100
   \              0000D7000000
   \              CD000000    
   \   00000050   C3000000B900       DC32 195, 185, 175, 165, 155, 145, 135, 125, 115, 105
   \              0000AF000000
   \              A50000009B00
   \              000091000000
   \              870000007D00
   \              000073000000
   \              69000000    
   \   00000078   5F0000005500       DC32 95, 85, 75, 65, 55, 45, 42, 39, 36, 33
   \              00004B000000
   \              410000003700
   \              00002D000000
   \              2A0000002700
   \              000024000000
   \              21000000    
   \   000000A0   1E0000001B00       DC32 30, 27, 24, 21, 18, 15, 12, 9, 6, 3
   \              000018000000
   \              150000001200
   \              00000F000000
   \              0C0000000900
   \              000006000000
   \              03000000    
   \   000000C8   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
     77          	370, 363, 356, 349, 342, 337, 332, 327, 322, 313,
     78          	295, 285, 275, 265, 255, 245, 235, 225, 215, 205,
     79          	195, 185, 175, 165, 155, 145, 135, 125, 115, 105,
     80          	95, 85, 75, 65, 55, 45, 42, 39, 36, 33,
     81          	30, 27, 24, 21, 18, 15, 12, 9, 6, 3,
     82          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     83          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     84          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     85          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     86          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     87          };
     88          

   \                                 In section .text, align 4, keep-with-next
     89          const int WarningLEDBrightness[INTENSITY_STEPS] = {
   \                     WarningLEDBrightness:
   \   00000000                      ; Initializer data, 400 bytes
   \   00000000   630000006200       DC32 99, 98, 97, 96, 95, 94, 93, 92, 91, 90
   \              000061000000
   \              600000005F00
   \              00005E000000
   \              5D0000005C00
   \              00005B000000
   \              5A000000    
   \   00000028   590000005800       DC32 89, 88, 87, 86, 85, 84, 83, 82, 81, 80
   \              000057000000
   \              560000005500
   \              000054000000
   \              530000005200
   \              000051000000
   \              50000000    
   \   00000050   4F0000004E00       DC32 79, 78, 77, 76, 75, 74, 73, 72, 71, 70
   \              00004D000000
   \              4C0000004B00
   \              00004A000000
   \              490000004800
   \              000047000000
   \              46000000    
   \   00000078   450000004400       DC32 69, 68, 67, 66, 65, 64, 63, 62, 61, 60
   \              000043000000
   \              420000004100
   \              000040000000
   \              3F0000003E00
   \              00003D000000
   \              3C000000    
   \   000000A0   3B0000003A00       DC32 59, 58, 57, 56, 55, 54, 53, 52, 51, 50
   \              000039000000
   \              380000003700
   \              000036000000
   \              350000003400
   \              000033000000
   \              32000000    
   \   000000C8   310000003000       DC32 49, 48, 47, 46, 45, 44, 43, 42, 41, 40
   \              00002F000000
   \              2E0000002D00
   \              00002C000000
   \              2B0000002A00
   \              000029000000
   \              28000000    
   \   000000F0   270000002600       DC32 39, 38, 37, 36, 35, 34, 33, 32, 31, 30
   \              000025000000
   \              240000002300
   \              000022000000
   \              210000002000
   \              00001F000000
   \              1E000000    
   \   00000118   1D0000001C00       DC32 29, 28, 27, 26, 25, 24, 23, 22, 21, 20
   \              00001B000000
   \              1A0000001900
   \              000018000000
   \              170000001600
   \              000015000000
   \              14000000    
   \   00000140   130000001200       DC32 19, 18, 17, 16, 15, 14, 13, 12, 11, 10
   \              000011000000
   \              100000000F00
   \              00000E000000
   \              0D0000000C00
   \              00000B000000
   \              0A000000    
   \   00000168   090000000800       DC32 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
   \              000007000000
   \              060000000500
   \              000004000000
   \              030000000200
   \              000001000000
   \              00000000    
     90          	99, 98, 97, 96, 95, 94, 93, 92, 91, 90,
     91          	89, 88, 87, 86, 85, 84, 83, 82, 81, 80,
     92          	79, 78, 77, 76, 75, 74, 73, 72, 71, 70,
     93          	69, 68, 67, 66, 65, 64, 63, 62, 61, 60,
     94          	59, 58, 57, 56, 55, 54, 53, 52, 51, 50,
     95          	49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
     96          	39, 38, 37, 36, 35, 34, 33, 32, 31, 30,
     97          	29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
     98          	19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
     99          	 9,  8,  7,  6,  5,  4,  3,  2,  1,  0
    100          };
    101          

   \                                 In section .text, align 4, keep-with-next
    102          const int TachLEDBrightness[INTENSITY_STEPS] = {
   \                     TachLEDBrightness:
   \   00000000                      ; Initializer data, 400 bytes
   \   00000000   010000000100       DC32 1, 1, 1, 2, 2, 2, 3, 3, 4, 4
   \              000001000000
   \              020000000200
   \              000002000000
   \              030000000300
   \              000004000000
   \              04000000    
   \   00000028   050000000500       DC32 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              000006000000
   \              060000000700
   \              000007000000
   \              080000000800
   \              000009000000
   \              09000000    
   \   00000050   0A0000000A00       DC32 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
   \              00000B000000
   \              0B0000000C00
   \              00000C000000
   \              0D0000000D00
   \              00000E000000
   \              0E000000    
   \   00000078   0F0000000F00       DC32 15, 15, 16, 16, 17, 17, 18, 18, 19, 19
   \              000010000000
   \              100000001100
   \              000011000000
   \              120000001200
   \              000013000000
   \              13000000    
   \   000000A0   140000001500       DC32 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
   \              000016000000
   \              170000001800
   \              000019000000
   \              1A0000001B00
   \              00001C000000
   \              1D000000    
   \   000000C8   1E0000001F00       DC32 30, 31, 32, 33, 34, 35, 36, 37, 38, 39
   \              000020000000
   \              210000002200
   \              000023000000
   \              240000002500
   \              000026000000
   \              27000000    
   \   000000F0   280000002900       DC32 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
   \              00002A000000
   \              2B0000002C00
   \              00002D000000
   \              2E0000002F00
   \              000030000000
   \              31000000    
   \   00000118   320000003700       DC32 50, 55, 60, 65, 70, 75, 80, 85, 90, 95
   \              00003C000000
   \              410000004600
   \              00004B000000
   \              500000005500
   \              00005A000000
   \              5F000000    
   \   00000140   640000006900       DC32 100, 105, 110, 115, 120, 100, 120, 140, 160, 180
   \              00006E000000
   \              730000007800
   \              000064000000
   \              780000008C00
   \              0000A0000000
   \              B4000000    
   \   00000168   C8000000E100       DC32 200, 225, 250, 300, 350, 300, 400, 400, 400, 400
   \              0000FA000000
   \              2C0100005E01
   \              00002C010000
   \              900100009001
   \              000090010000
   \              90010000    
    103          	1, 1, 1, 2, 2, 2, 3, 3, 4, 4,
    104          	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
    105          	10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
    106          	15, 15, 16, 16, 17, 17, 18, 18, 19, 19,
    107          	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    108          	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    109          	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    110          	50, 55, 60, 65, 70, 75, 80, 85, 90, 95,
    111          	100, 105, 110, 115, 120, 100, 120, 140, 160, 180,
    112          	200, 225, 250, 300, 350, 300, 400, 400, 400, 400
    113          };
    114          

   \                                 In section .text, align 4, keep-with-next
    115          const int AmbientLightIntensity[INTENSITY_STEPS] = {
   \                     AmbientLightIntensity:
   \   00000000                      ; Initializer data, 400 bytes
   \   00000000   030000000400       DC32 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
   \              000005000000
   \              060000000700
   \              000008000000
   \              090000000A00
   \              00000B000000
   \              0C000000    
   \   00000028   0D0000000E00       DC32 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
   \              00000F000000
   \              100000001100
   \              000012000000
   \              130000001400
   \              000015000000
   \              16000000    
   \   00000050   170000001800       DC32 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
   \              000019000000
   \              1A0000001B00
   \              00001C000000
   \              1D0000001E00
   \              00001F000000
   \              20000000    
   \   00000078   210000002200       DC32 33, 34, 35, 36, 37, 38, 39, 40, 41, 42
   \              000023000000
   \              240000002500
   \              000026000000
   \              270000002800
   \              000029000000
   \              2A000000    
   \   000000A0   2B0000002C00       DC32 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
   \              00002D000000
   \              2E0000002F00
   \              000030000000
   \              310000003200
   \              000033000000
   \              34000000    
   \   000000C8   350000003600       DC32 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
   \              000037000000
   \              380000003900
   \              00003A000000
   \              3B0000003C00
   \              00003D000000
   \              3E000000    
   \   000000F0   3F0000004000       DC32 63, 64, 65, 66, 67, 68, 69, 70, 71, 72
   \              000041000000
   \              420000004300
   \              000044000000
   \              450000004600
   \              000047000000
   \              48000000    
   \   00000118   490000004A00       DC32 73, 74, 76, 78, 80, 82, 84, 86, 90, 95
   \              00004C000000
   \              4E0000005000
   \              000052000000
   \              540000005600
   \              00005A000000
   \              5F000000    
   \   00000140   640000006E00       DC32 100, 110, 120, 130, 140, 150, 160, 180, 200, 225
   \              000078000000
   \              820000008C00
   \              000096000000
   \              A0000000B400
   \              0000C8000000
   \              E1000000    
   \   00000168   FA0000001301       DC32 250, 275, 300, 325, 350, 375, 400, 450, 500, 65535
   \              00002C010000
   \              450100005E01
   \              000077010000
   \              90010000C201
   \              0000F4010000
   \              FFFF0000    
    116          	  3,   4,   5,   6,   7,   8,   9,  10,
    117          	 11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    118          	 21,  22,  23,  24,  25,  26,  27,  28,  29,  30,
    119          	 31,  32,  33,  34,  35,  36,  37,  38,  39,  40,
    120          	 41,  42,  43,  44,  45,  46,  47,  48,  49,  50,
    121          	 51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
    122          	 61,  62,  63,  64,  65,  66,  67,  68,  69,  70,
    123          	 71,  72,  73,  74,  76,  78,  80,  82,  84,  86,  90,  95,
    124          	100, 110, 120, 130, 140, 150, 160, 180, 200, 225,
    125          	250, 275, 300, 325, 350, 375, 400, 450, 500, 65535
    126          };
    127          
    128          #define FLOATABS(a) ((a >= 0.0)? (a) : -(a))
    129          
    130          // ms per cycle
    131          #define	LED_UPDATE_CYCLE	1000
    132          #define	ON_CYCLE			125
    133          #define	OFF_CYCLE			125
    134          #define	WARNING_ON_CYCLE	125
    135          #define	WARNING_OFF_CYCLE	125
    136          
    137          #define	NONE	0
    138          #define	UP		1
    139          #define	DOWN	2
    140          
    141          //  determined empirically
    142          //	traqdash in freezer. turn on and measure values and temperature as it heats up -- gas
    143          
    144          #define	TEMP_15C		672
    145          #define	TEMP_20C		620
    146          #define	TEMP_25C		550
    147          #define	TEMP_30C		495
    148          #define	TEMP_32C		470
    149          #define	TEMP_35C		440
    150          #define	TEMP_40C		388
    151          #define	TEMP_45C		360
    152          #define	TEMP_50C		340
    153          #define	TEMP_51C		332
    154          #define	TEMP_52C		324
    155          #define	TEMP_53C		316
    156          #define	TEMP_54C		308
    157          #define	TEMP_55C		304
    158          #define	TEMP_56C		296
    159          #define	TEMP_57C		288
    160          #define	TEMP_58C		280
    161          #define	TEMP_59C		272
    162          #define	TEMP_60C		264
    163          
    164          #ifndef _WINDOWS
    165          //
    166          //	Local hardware constants definitions
    167          //
    168          
    169          // Simulation definitions
    170          #define	WARNING_LED_1		8
    171          #define	WARNING_LED_2		9
    172          
    173          // Bitmasks of actual position in shift register for each specific LED
    174          #define	TOP_LED_CENTER		0x0310
    175          #define	TOP_LED_LEFT_1		0x0C00
    176          #define	TOP_LED_LEFT_2		0x3000
    177          #define	TOP_LED_LEFT_3		0x4000
    178          #define	TOP_LED_RIGHT_1		0x000C
    179          #define	TOP_LED_RIGHT_2		0x8002
    180          #define	TOP_LED_RIGHT_3		0x0001
    181          #endif
    182          
    183          
    184          //
    185          // Local function prototypes
    186          //
    187          #ifdef _WINDOWS
    188          enum LED_STATE {
    189          	SOLID,
    190          	FLASHING
    191          };
    192          void CenterOn(enum LED_STATE state);
    193          void Level1On(void);
    194          void Level2On(void);
    195          void Level3On(void);
    196          void Level3Off(void);
    197          void Level2Off(void);
    198          void Level1Off(void);
    199          void CenterOff(void);
    200          #else
    201          void LEDShift(U16 mask);
    202          void ShiftLEDLevel(char level);
    203          void ForceWarningLEDsOff(void);
    204          void CheckDisplayConditions(void);
    205          void UpdateLEDs(void);
    206          void RestorePWMSettings(void);
    207          void UpdateWarningPWMVariable(void);
    208          void UpdateBacklightPWMVariable(void);
    209          void UpdateTachPWMVariable(void);
    210          void SetTempCorrection( signed int correction );
    211          #endif
    212          void CreateWarningPopup(char i);
    213          void DeleteWarningPopup(char i, char gaugeScreen);
    214          void UpdateWarningPopup(char i, char gaugeScreen);
    215          void DrawWarningPopups(char i, char *pText, int alarmCount);
    216          void WarningLEDOff(struct LED_DATA *pLED, int override);
    217          void WarningLEDOn(struct LED_DATA *pLED, int override);
    218          
    219          
    220          //
    221          // Local variable declarations
    222          //
    223          #ifdef _WINDOWS
    224          int level3On = FALSE;
    225          int level2On = FALSE;
    226          int level1On = FALSE;
    227          int centerOn = FALSE;
    228          #else
    229          int LEDlevel = 0;
    230          int warningLEDPWMSetting;
    231          int tachLEDPWMSetting;
    232          int backlightPWMSetting;
    233          signed int tempCorrection;
    234          signed int totalCorrection;
    235          signed int lightCorrection;

   \                                 In section .bss, align 4
    236          int topLEDCenter;
   \                     topLEDCenter:
   \   00000000                      DS8 4
    237          #endif
    238          static int LEDUpdatesSuspended;
    239          static int EnvironmentalUpdatesSuspended = TRUE;	// Default to LED updates off until power-up is complete
    240          struct POPUPTABLE WarningPopups[2];
    241          static BUTTON_Handle hUpperWarning, hLowerWarning;
    242          int centerLEDMarkTime;
   \                     centerLEDMarkTime:
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
    243          int lowerLEDMarkTime;
   \                     lowerLEDMarkTime:
   \   00000000                      DS8 4
    244          struct LED_DATA UpperLED, LowerLED;
    245          int lowerLEDOnReason[6];
    246          int upperLEDOnReason[6];
    247          
    248          U16 mask = 1;
    249          
    250          //
    251          // External data and code references
    252          //
    253          extern GUI_CONST_STORAGE GUI_BITMAP bmWarningPopupBlank;
    254          
    255          
    256          
    257          #ifndef _WINDOWS

   \                                 In section .text, align 4, keep-with-next
    258          void ShiftLEDLevel(char level)
    259          {
   \                     ShiftLEDLevel:
   \   00000000   10402DE9           PUSH     {R4,LR}
    260          	switch (level)
   \   00000004   010040E2           SUB      R0,R0,#+1
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   040050E3           CMP      R0,#+4
   \   00000010   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??ShiftLEDLevel_0:
   \   00000014   0400008A           BHI      ??ShiftLEDLevel_1
   \   00000018   060000EA           B        ??ShiftLEDLevel_2
   \   0000001C   0F0000EA           B        ??ShiftLEDLevel_3
   \   00000020   110000EA           B        ??ShiftLEDLevel_4
   \   00000024   130000EA           B        ??ShiftLEDLevel_5
   \   00000028   150000EA           B        ??ShiftLEDLevel_6
    261          	{
    262          	default:
    263          	case 0:	LEDShift(0);	return;
   \                     ??ShiftLEDLevel_1:
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   B010CDE1           STRH     R1,[SP, #+0]
   \   00000034   2D0000EA           B        ??ShiftLEDLevel_7
    264          	case 1:	LEDShift(TOP_LED_LEFT_3 |                                                                                        TOP_LED_RIGHT_3 ); centerLEDMarkTime  = 0; return;
   \                     ??ShiftLEDLevel_2:
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   401C81E3           ORR      R1,R1,#0x4000
   \                     ??ShiftLEDLevel_8:
   \   00000040   B010CDE1           STRH     R1,[SP, #+0]
   \   00000044   0210A0E3           MOV      R1,#+2
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           BL       LED_SPI_X_Write
   \   00000050   ........           LDR      R0,??DataTable26
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   041080E5           STR      R1,[R0, #+4]
   \   0000005C   260000EA           B        ??ShiftLEDLevel_9
    265          	case 2:	LEDShift(TOP_LED_LEFT_3 | TOP_LED_LEFT_2 |                                                     TOP_LED_RIGHT_2 | TOP_LED_RIGHT_3 ); centerLEDMarkTime  = 0; return;
   \                     ??ShiftLEDLevel_3:
   \   00000060   0310A0E3           MOV      R1,#+3
   \   00000064   F01C81E3           ORR      R1,R1,#0xF000
   \   00000068   F4FFFFEA           B        ??ShiftLEDLevel_8
    266          	case 3:	LEDShift(TOP_LED_LEFT_3 | TOP_LED_LEFT_2 | TOP_LED_LEFT_1 |                  TOP_LED_RIGHT_1 | TOP_LED_RIGHT_2 | TOP_LED_RIGHT_3 ); centerLEDMarkTime  = 0; return;
   \                     ??ShiftLEDLevel_4:
   \   0000006C   0F10A0E3           MOV      R1,#+15
   \   00000070   FC1C81E3           ORR      R1,R1,#0xFC00
   \   00000074   F1FFFFEA           B        ??ShiftLEDLevel_8
    267          	case 4:	LEDShift(TOP_LED_LEFT_3 | TOP_LED_LEFT_2 | TOP_LED_LEFT_1 | TOP_LED_CENTER | TOP_LED_RIGHT_1 | TOP_LED_RIGHT_2 | TOP_LED_RIGHT_3 );	centerLEDMarkTime  = 0; return;
   \                     ??ShiftLEDLevel_5:
   \   00000078   1F10A0E3           MOV      R1,#+31
   \   0000007C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000080   EEFFFFEA           B        ??ShiftLEDLevel_8
    268          	case 5:		// todo = flashing
    269          		{
    270          			int currentLEDTime;
    271          
    272          			if (centerLEDMarkTime == 0)
   \                     ??ShiftLEDLevel_6:
   \   00000084   ........           LDR      R4,??DataTable26
   \   00000088   040094E5           LDR      R0,[R4, #+4]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0300001A           BNE      ??ShiftLEDLevel_10
    273          			{	// In normal cases the LED will initially be ON so start the flashing cycle with the OFF state
    274          				centerLEDMarkTime = GUI_GetTime();
   \   00000094   ........           BL       GUI_GetTime
   \   00000098   040084E5           STR      R0,[R4, #+4]
    275          				topLEDCenter = 0;						// Turn OFF center LED
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   0C0000EA           B        ??ShiftLEDLevel_11
    276          			}
    277          			else 
    278          			{	// Note: use one continuous timer rather than restarting because the call to this routine
    279          				// is dependent on the hardware update rate and may not be regular but we want the flash
    280          				// cadence to be even.
    281          				currentLEDTime = GUI_GetTime();
   \                     ??ShiftLEDLevel_10:
   \   000000A4   ........           BL       GUI_GetTime
    282          				if ((currentLEDTime - centerLEDMarkTime) > (OFF_CYCLE + ON_CYCLE))
   \   000000A8   041094E5           LDR      R1,[R4, #+4]
   \   000000AC   010040E0           SUB      R0,R0,R1
   \   000000B0   FB0050E3           CMP      R0,#+251
   \   000000B4   040000BA           BLT      ??ShiftLEDLevel_12
    283          				{
    284          					topLEDCenter = 0;					// Turn OFF center LED
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   000084E5           STR      R0,[R4, #+0]
    285          					centerLEDMarkTime += (OFF_CYCLE + ON_CYCLE);
   \   000000C0   FA0081E2           ADD      R0,R1,#+250
   \   000000C4   040084E5           STR      R0,[R4, #+4]
   \   000000C8   030000EA           B        ??ShiftLEDLevel_13
    286          				}
    287          				else if ((currentLEDTime - centerLEDMarkTime) > OFF_CYCLE)
   \                     ??ShiftLEDLevel_12:
   \   000000CC   7E0050E3           CMP      R0,#+126
   \   000000D0   010000BA           BLT      ??ShiftLEDLevel_13
    288          				{
    289          					topLEDCenter = TOP_LED_CENTER;		// Turn ON center LED
   \   000000D4   C40FA0E3           MOV      R0,#+784
   \                     ??ShiftLEDLevel_11:
   \   000000D8   000084E5           STR      R0,[R4, #+0]
    290          				}
    291          			}
    292          			LEDShift(TOP_LED_LEFT_3 | TOP_LED_LEFT_2 | TOP_LED_LEFT_1 | topLEDCenter | TOP_LED_RIGHT_1 | TOP_LED_RIGHT_2 | TOP_LED_RIGHT_3 );	return;
   \                     ??ShiftLEDLevel_13:
   \   000000DC   000094E5           LDR      R0,[R4, #+0]
   \   000000E0   0F10A0E3           MOV      R1,#+15
   \   000000E4   FC1C81E3           ORR      R1,R1,#0xFC00
   \   000000E8   000081E1           ORR      R0,R1,R0
   \   000000EC   B000CDE1           STRH     R0,[SP, #+0]
   \                     ??ShiftLEDLevel_7:
   \   000000F0   0210A0E3           MOV      R1,#+2
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           BL       LED_SPI_X_Write
   \                     ??ShiftLEDLevel_9:
   \   000000FC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000100   1080BDE8           POP      {R4,PC}          ;; return
    293          		}
    294          	}
    295          }
    296          #endif
    297          
    298          

   \                                 In section .text, align 4, keep-with-next
    299          void SetTachLEDs(int rpm)
    300          {
    301          	int step;
    302          
    303          	if ((LEDUpdatesSuspended) || (unsavedSysData.systemMode == DU2_STARTUP))
   \                     SetTachLEDs:
   \   00000000   ........           LDR      R1,??DataTable28
   \   00000004   782091E5           LDR      R2,[R1, #+120]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0000000A           BEQ      ??SetTachLEDs_0
   \   00000010   1EFF2FE1           BX       LR
   \                     ??SetTachLEDs_0:
   \   00000014   10402DE9           PUSH     {R4,LR}
   \   00000018   ........           LDR      R2,??DataTable29
   \   0000001C   8820D2E5           LDRB     R2,[R2, #+136]
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   3000000A           BEQ      ??SetTachLEDs_1
    304          		return;
    305          
    306          	if (rpm < vehicleData.tach.upperYellowStart)
   \   00000028   ........           LDR      R2,??DataTable29_1
   \   0000002C   203092E5           LDR      R3,[R2, #+32]
   \   00000030   030050E1           CMP      R0,R3
   \   00000034   040000AA           BGE      ??SetTachLEDs_2
    307          	{
    308          #ifdef _WINDOWS
    309          		CenterOff();
    310          		Level1Off();
    311          		Level2Off();
    312          		Level3Off();
    313          #else
    314          		if (LEDlevel != 0)
   \   00000038   5C0091E5           LDR      R0,[R1, #+92]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   2900000A           BEQ      ??SetTachLEDs_1
    315          			ShiftLEDLevel(LEDlevel = 0);
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   250000EA           B        ??SetTachLEDs_3
    316          #endif
    317          	}
    318          	else if (rpm < vehicleData.tach.upperYellowStart + (step = (vehicleData.tach.upperRedStart - vehicleData.tach.upperYellowStart) / 3))
   \                     ??SetTachLEDs_2:
   \   0000004C   242092E5           LDR      R2,[R2, #+36]
   \   00000050   ........           LDR      LR,??DataTable30  ;; 0x55555556
   \   00000054   03C042E0           SUB      R12,R2,R3
   \   00000058   9C4ECEE0           SMULL    R4,LR,R12,LR
   \   0000005C   0EC0B0E1           MOVS     R12,LR
   \   00000060   01C08E42           ADDMI    R12,LR,#+1
   \   00000064   03E08CE0           ADD      LR,R12,R3
   \   00000068   0E0050E1           CMP      R0,LR
   \   0000006C   040000AA           BGE      ??SetTachLEDs_4
    319          	{
    320          #ifdef _WINDOWS
    321          		CenterOff();
    322          		Level1Off();
    323          		Level2Off();
    324          		Level3On();
    325          #else
    326          		if (LEDlevel != 1)
   \   00000070   5C0091E5           LDR      R0,[R1, #+92]
   \   00000074   010050E3           CMP      R0,#+1
   \   00000078   1B00000A           BEQ      ??SetTachLEDs_1
    327          			ShiftLEDLevel(LEDlevel = 1);
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   170000EA           B        ??SetTachLEDs_3
    328          #endif
    329          	}
    330          	else if (rpm < vehicleData.tach.upperYellowStart + (step * 2))
   \                     ??SetTachLEDs_4:
   \   00000084   8C3083E0           ADD      R3,R3,R12, LSL #+1
   \   00000088   030050E1           CMP      R0,R3
   \   0000008C   040000AA           BGE      ??SetTachLEDs_5
    331          	{
    332          #ifdef _WINDOWS
    333          		CenterOff();
    334          		Level1Off();
    335          		Level2On();
    336          		Level3On();
    337          #else
    338          		if (LEDlevel != 2)
   \   00000090   5C0091E5           LDR      R0,[R1, #+92]
   \   00000094   020050E3           CMP      R0,#+2
   \   00000098   1300000A           BEQ      ??SetTachLEDs_1
    339          			ShiftLEDLevel(LEDlevel = 2);
   \   0000009C   0200A0E3           MOV      R0,#+2
   \   000000A0   0F0000EA           B        ??SetTachLEDs_3
    340          #endif
    341          	}
    342          	else if (rpm < vehicleData.tach.upperRedStart)
   \                     ??SetTachLEDs_5:
   \   000000A4   020050E1           CMP      R0,R2
   \   000000A8   040000AA           BGE      ??SetTachLEDs_6
    343          	{
    344          #ifdef _WINDOWS
    345          		CenterOff();
    346          		Level1On();
    347          		Level2On();
    348          		Level3On();
    349          #else
    350          		if (LEDlevel != 3)
   \   000000AC   5C0091E5           LDR      R0,[R1, #+92]
   \   000000B0   030050E3           CMP      R0,#+3
   \   000000B4   0C00000A           BEQ      ??SetTachLEDs_1
    351          			ShiftLEDLevel(LEDlevel = 3);
   \   000000B8   0300A0E3           MOV      R0,#+3
   \   000000BC   080000EA           B        ??SetTachLEDs_3
    352          #endif
    353          	}
    354          	else if (rpm < vehicleData.tach.upperRedStart + step)
   \                     ??SetTachLEDs_6:
   \   000000C0   02208CE0           ADD      R2,R12,R2
   \   000000C4   020050E1           CMP      R0,R2
   \   000000C8   040000AA           BGE      ??SetTachLEDs_7
    355          	{
    356          		// 1/3 interval beyond redline - start center shift light flashing
    357          #ifdef _WINDOWS
    358          		CenterOn(SOLID);
    359          		Level1On();
    360          		Level2On();
    361          		Level3On();
    362          #else
    363          		if (LEDlevel != 4)
   \   000000CC   5C0091E5           LDR      R0,[R1, #+92]
   \   000000D0   040050E3           CMP      R0,#+4
   \   000000D4   0400000A           BEQ      ??SetTachLEDs_1
    364          			ShiftLEDLevel(LEDlevel = 4);
   \   000000D8   0400A0E3           MOV      R0,#+4
   \   000000DC   000000EA           B        ??SetTachLEDs_3
    365          #endif
    366          	}
    367          	else
    368          	{
    369          #ifdef _WINDOWS
    370          		CenterOn(FLASHING);
    371          		Level1On();
    372          		Level2On();
    373          		Level3On();
    374          #else
    375          		ShiftLEDLevel(LEDlevel = 5);	// Note: call ShiftLEDLevel EVERY time when flashing center LED
   \                     ??SetTachLEDs_7:
   \   000000E0   0500A0E3           MOV      R0,#+5
   \                     ??SetTachLEDs_3:
   \   000000E4   5C0081E5           STR      R0,[R1, #+92]
   \   000000E8   ........           BL       ShiftLEDLevel
   \                     ??SetTachLEDs_1:
   \   000000EC   1080BDE8           POP      {R4,PC}          ;; return
    376          #endif
    377          	}
    378          }
    379          
    380          
    381          #ifdef _WINDOWS
    382          void CenterOn(enum LED_STATE state)
    383          {
    384          	if (state == SOLID)
    385          	{
    386          		if (!centerOn)
    387          		{
    388          			SIM_HARDKEY_SetState(TOP_LED_CENTER, 1);
    389          			centerLEDMarkTime = 0;
    390          		}
    391          	}
    392          	else		// Center on - FLASHING
    393          	{
    394          		int currentLEDTime;
    395          
    396          		if (centerLEDMarkTime == 0)
    397          		{	// In normal cases the LED will initially be ON so start the flashing cycle with the OFF state
    398          			centerLEDMarkTime = GUI_GetTime();
    399          			SIM_HARDKEY_SetState(TOP_LED_CENTER, 0);			// Turn OFF center LED
    400          		}
    401          		else 
    402          		{	// Note: use one continuous timer rather than restarting because the call to this routine
    403          			// is dependent on the hardware update rate and may not be regular but we want the flash
    404          			// cadence to be even.
    405          			currentLEDTime = GUI_GetTime();
    406          			if ((currentLEDTime - centerLEDMarkTime) > (OFF_CYCLE + ON_CYCLE))
    407          			{
    408          				SIM_HARDKEY_SetState(TOP_LED_CENTER, 0);		// Turn off center LED
    409          				centerLEDMarkTime += (OFF_CYCLE + ON_CYCLE);
    410          			}
    411          			else if ((currentLEDTime - centerLEDMarkTime) > OFF_CYCLE)
    412          			{
    413          				SIM_HARDKEY_SetState(TOP_LED_CENTER, 1);		// Turn on center LED
    414          			}
    415          		}
    416          	}
    417          
    418          	centerOn = TRUE;
    419          }
    420          void Level1On(void)
    421          {
    422          	if (!level1On)
    423          	{
    424          		SIM_HARDKEY_SetState(TOP_LED_LEFT_1, 1);
    425          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_1, 1);
    426          		level1On = TRUE;
    427          	}
    428          }
    429          void Level2On(void)
    430          {
    431          	if (!level2On)
    432          	{
    433          		SIM_HARDKEY_SetState(TOP_LED_LEFT_2, 1);
    434          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_2, 1);
    435          		level2On = TRUE;
    436          	}
    437          }
    438          void Level3On(void)
    439          {
    440          	if (!level3On)
    441          	{
    442          		SIM_HARDKEY_SetState(TOP_LED_LEFT_3, 1);
    443          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_3, 1);
    444          		level3On = TRUE;
    445          	}
    446          }
    447          void Level3Off(void)
    448          {
    449          	if (level3On)
    450          	{
    451          		SIM_HARDKEY_SetState(TOP_LED_LEFT_3, 0);
    452          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_3, 0);
    453          		level3On = FALSE;
    454          	}
    455          }
    456          void Level2Off(void)
    457          {
    458          	if (level2On)
    459          	{
    460          		SIM_HARDKEY_SetState(TOP_LED_LEFT_2, 0);
    461          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_2, 0);
    462          		level2On = FALSE;
    463          	}
    464          }
    465          void Level1Off(void)
    466          {
    467          	if (level1On)
    468          	{
    469          		SIM_HARDKEY_SetState(TOP_LED_LEFT_1, 0);
    470          		SIM_HARDKEY_SetState(TOP_LED_RIGHT_1, 0);
    471          		level1On = FALSE;
    472          	}
    473          }
    474          void CenterOff(void)
    475          {
    476          	if (centerOn)
    477          	{
    478          		SIM_HARDKEY_SetState(TOP_LED_CENTER, 0);
    479          		centerOn = FALSE;
    480          		centerLEDMarkTime = 0;
    481          	}
    482          }
    483          #else

   \                                 In section .text, align 4, keep-with-next
    484          void LEDShift(U16 mask)
    485          {
   \                     LEDShift:
   \   00000000   01402DE9           PUSH     {R0,LR}
    486            	LED_SPI_X_Write((unsigned char const *)&mask, 2);		// Shift out the data to the LED controller
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       LED_SPI_X_Write
    487          }
   \   00000010   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000014   0080BDE8           POP      {PC}             ;; return
    488          #endif
    489          

   \                                 In section .text, align 4, keep-with-next
    490          void WarningLEDOff(struct LED_DATA *pLED, int override)
    491          {
    492          	if (LEDUpdatesSuspended && !override)
   \                     WarningLEDOff:
   \   00000000   ........           LDR      R2,??DataTable28
   \   00000004   782092E5           LDR      R2,[R2, #+120]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0100000A           BEQ      ??WarningLEDOff_0
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0900000A           BEQ      ??WarningLEDOff_1
    493          		return;
    494          
    495          	if (pLED->warningOn)
   \                     ??WarningLEDOff_0:
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0600000A           BEQ      ??WarningLEDOff_1
    496          	{
    497          		pLED->warningOn = FALSE;
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   001080E5           STR      R1,[R0, #+0]
    498          		pLED->LEDMarkTime = 0;
   \   0000002C   041080E5           STR      R1,[R0, #+4]
    499          		pLED->flashStartTime = 0;
   \   00000030   081080E5           STR      R1,[R0, #+8]
    500          
    501          #ifdef	_WINDOWS
    502          		SIM_HARDKEY_SetState(pLED->LED_ID, 0);
    503          #else
    504          		*(volatile U32 *)pLED->DUTY_CYCLE_REGISTER = WARNING_LED_OFF;
   \   00000034   0C0090E5           LDR      R0,[R0, #+12]
   \   00000038   6410A0E3           MOV      R1,#+100
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \                     ??WarningLEDOff_1:
   \   00000040   1EFF2FE1           BX       LR               ;; return
    505          #endif
    506          	}
    507          }
    508          
    509          

   \                                 In section .text, align 4, keep-with-next
    510          void WarningLEDOn(struct LED_DATA *pLED, int override)
    511          {
   \                     WarningLEDOn:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    512          	int currentLEDTime;
    513          
    514          	if (LEDUpdatesSuspended && !override)
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   780094E5           LDR      R0,[R4, #+120]
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100000A           BEQ      ??WarningLEDOn_0
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   2200000A           BEQ      ??WarningLEDOn_1
    515          		return;
    516          
    517          	pLED->warningOn = TRUE;
   \                     ??WarningLEDOn_0:
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   000085E5           STR      R0,[R5, #+0]
    518          
    519          	if (pLED->LEDMarkTime == 0)
   \   0000002C   040095E5           LDR      R0,[R5, #+4]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400001A           BNE      ??WarningLEDOn_2
    520          	{	// In normal cases the LED will initially be OFF so start the flashing cycle with the ON state
    521          		pLED->LEDMarkTime = GUI_GetTime();
   \   00000038   ........           BL       GUI_GetTime
   \   0000003C   040085E5           STR      R0,[R5, #+4]
    522          #ifdef	_WINDOWS
    523          		SIM_HARDKEY_SetState(pLED->LED_ID, 1);		// Turn on LED
    524          #else
    525          		*(volatile U32 *)pLED->DUTY_CYCLE_REGISTER = warningLEDPWMSetting;			// Turn on LED
   \                     ??WarningLEDOn_3:
   \   00000040   0C0095E5           LDR      R0,[R5, #+12]
   \   00000044   601094E5           LDR      R1,[R4, #+96]
   \   00000048   170000EA           B        ??WarningLEDOn_4
    526          #endif
    527          	}
    528          	else 
    529          	{
    530          		// Note: use one continuous timer rather than restarting because the call to this routine
    531          		// is dependent on the hardware update rate and may not be regular but we want the flash
    532          		// cadence to be even.
    533          		currentLEDTime = GUI_GetTime();
   \                     ??WarningLEDOn_2:
   \   0000004C   ........           BL       GUI_GetTime
    534          		if (pLED->flashStartTime == 0)
   \   00000050   081095E5           LDR      R1,[R5, #+8]
   \   00000054   000051E3           CMP      R1,#+0
   \   00000058   0900001A           BNE      ??WarningLEDOn_5
    535          			pLED->flashStartTime = currentLEDTime;
   \   0000005C   080085E5           STR      R0,[R5, #+8]
    536          		else if (currentLEDTime - pLED->flashStartTime > FIVE_SECONDS)
    537          		{
    538          			// Be sure LED ends the cycle in a ON state
    539          #ifdef	_WINDOWS
    540          			SIM_HARDKEY_SetState(pLED->LED_ID, 1);		// Turn on LED
    541          #else
    542          			*(volatile U32 *)pLED->DUTY_CYCLE_REGISTER = warningLEDPWMSetting;			// Turn on LED
    543          #endif
    544          			return;
    545          		}
    546          
    547          		// Set to appropriate ON or OFF cycle
    548          		if ((currentLEDTime - pLED->LEDMarkTime) > WARNING_ON_CYCLE + WARNING_OFF_CYCLE)
   \                     ??WarningLEDOn_6:
   \   00000060   041095E5           LDR      R1,[R5, #+4]
   \   00000064   011040E0           SUB      R1,R0,R1
   \   00000068   FB0051E3           CMP      R1,#+251
   \   0000006C   0A0000BA           BLT      ??WarningLEDOn_7
    549          		{
    550          #ifdef	_WINDOWS
    551          			SIM_HARDKEY_SetState(pLED->LED_ID, 1);		// Turn on LED
    552          #else
    553          			*(volatile U32 *)pLED->DUTY_CYCLE_REGISTER = warningLEDPWMSetting;			// Turn on LED
   \   00000070   0C1095E5           LDR      R1,[R5, #+12]
   \   00000074   602094E5           LDR      R2,[R4, #+96]
   \   00000078   002081E5           STR      R2,[R1, #+0]
    554          #endif
    555          			pLED->LEDMarkTime = currentLEDTime;
   \   0000007C   040085E5           STR      R0,[R5, #+4]
   \   00000080   0A0000EA           B        ??WarningLEDOn_1
    556          		}
   \                     ??WarningLEDOn_5:
   \   00000084   8920A0E3           MOV      R2,#+137
   \   00000088   011040E0           SUB      R1,R0,R1
   \   0000008C   4C2D82E3           ORR      R2,R2,#0x1300
   \   00000090   020051E1           CMP      R1,R2
   \   00000094   F1FFFFBA           BLT      ??WarningLEDOn_6
   \   00000098   E8FFFFEA           B        ??WarningLEDOn_3
    557          		else if ((currentLEDTime - pLED->LEDMarkTime) > WARNING_ON_CYCLE)
   \                     ??WarningLEDOn_7:
   \   0000009C   7E0051E3           CMP      R1,#+126
   \   000000A0   020000BA           BLT      ??WarningLEDOn_1
    558          		{
    559          #ifdef	_WINDOWS
    560          			SIM_HARDKEY_SetState(pLED->LED_ID, 0);		// Turn off LED
    561          #else
    562          			*(volatile U32 *)pLED->DUTY_CYCLE_REGISTER = WARNING_LED_OFF;				// Turn off LED
   \   000000A4   0C0095E5           LDR      R0,[R5, #+12]
   \   000000A8   6410A0E3           MOV      R1,#+100
   \                     ??WarningLEDOn_4:
   \   000000AC   001080E5           STR      R1,[R0, #+0]
   \                     ??WarningLEDOn_1:
   \   000000B0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000B4   3080BDE8           POP      {R4,R5,PC}       ;; return
    563          #endif
    564          		}
    565          	}
    566          }
    567          // Determines if an input is in alarm state
    568          // note that input can only be in alarm state if input is enabled and alarms are enabled for that input
    569          // pass in datapoint 0-3 = analog inputs, 4,5 are digitals
    570          // returns true if in alarm, false if not in alarm
    571          //

   \                                 In section .text, align 4, keep-with-next
    572          int InAlarm(int datapoint) {
   \                     InAlarm:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
    573          	int alarm = false;
   \   0000000C   0040A0E3           MOV      R4,#+0
    574          	
    575          	if (datapoint >= 0 && datapoint <= 3) {	// analogs
   \   00000010   040055E3           CMP      R5,#+4
   \   00000014   1A00002A           BCS      ??InAlarm_0
    576          		float tempfloat = GetValue((GlobalDataIndexType) (ANALOG_INPUT_0 + datapoint)).fVal;
   \   00000018   361080E2           ADD      R1,R0,#+54
   \   0000001C   FF1001E2           AND      R1,R1,#0xFF
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           BL       GetValue
    577          	
    578          		if (vehicleData.analogInput[datapoint].enabled) {
   \   00000028   ........           LDR      R0,??DataTable29_1
   \   0000002C   00209DE5           LDR      R2,[SP, #+0]
   \   00000030   053380E0           ADD      R3,R0,R5, LSL #+6
   \   00000034   9300D3E5           LDRB     R0,[R3, #+147]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   2200000A           BEQ      ??InAlarm_1
    579          			if (BELOW == vehicleData.analogInput[datapoint].lowerAlarmTriggerComparison)
   \   00000040   9400D3E5           LDRB     R0,[R3, #+148]
   \   00000044   020050E3           CMP      R0,#+2
   \   00000048   0300001A           BNE      ??InAlarm_2
    580          				alarm = (tempfloat < vehicleData.analogInput[datapoint].lowerAlarmTriggerLevel);
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   981093E5           LDR      R1,[R3, #+152]
   \   00000054   ........           BL       __aeabi_cfcmple
   \   00000058   0140A033           MOVCC    R4,#+1
    581          			if (ABOVE == vehicleData.analogInput[datapoint].upperAlarmTriggerComparison)
   \                     ??InAlarm_2:
   \   0000005C   9500D3E5           LDRB     R0,[R3, #+149]
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   1800001A           BNE      ??InAlarm_1
    582          				alarm = alarm || (tempfloat > vehicleData.analogInput[datapoint].upperAlarmTriggerLevel);
   \   00000068   000054E3           CMP      R4,#+0
   \   0000006C   1500001A           BNE      ??InAlarm_3
   \   00000070   9C0093E5           LDR      R0,[R3, #+156]
   \   00000074   0210A0E1           MOV      R1,R2
   \   00000078   ........           BL       __aeabi_cfcmple
   \   0000007C   1200002A           BCS      ??InAlarm_1
   \   00000080   100000EA           B        ??InAlarm_3
    583          		} // if	
    584          	} // if
    585          	else if (datapoint >= 4 && datapoint <= 5) {		// digitals
   \                     ??InAlarm_0:
   \   00000084   040045E2           SUB      R0,R5,#+4
   \   00000088   020050E3           CMP      R0,#+2
   \   0000008C   0E00002A           BCS      ??InAlarm_1
    586          		signed int tempint = GetValue((GlobalDataIndexType) (DIGITAL_INPUT_4 + datapoint - 4)).uVal;
   \   00000090   361085E2           ADD      R1,R5,#+54
   \   00000094   FF1001E2           AND      R1,R1,#0xFF
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           BL       GetValue
    587          
    588          		if (vehicleData.digitalInput[datapoint-4].enabled) {
   \   000000A0   ........           LDR      R0,??DataTable29_1
   \   000000A4   2F10A0E3           MOV      R1,#+47
   \   000000A8   910520E0           MLA      R0,R1,R5,R0
   \   000000AC   E710D0E5           LDRB     R1,[R0, #+231]
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   0400000A           BEQ      ??InAlarm_1
    589          			if (tempint == vehicleData.digitalInput[datapoint-4].alarmTriggerState)
   \   000000B8   D80ED0E1           LDRSB    R0,[R0, #+232]
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   000051E1           CMP      R1,R0
   \   000000C4   0000001A           BNE      ??InAlarm_1
    590          				alarm = true;
   \                     ??InAlarm_3:
   \   000000C8   0140A0E3           MOV      R4,#+1
    591          		} //if
    592          	} // else
    593          	
    594          	return alarm;
   \                     ??InAlarm_1:
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   0CD08DE2           ADD      SP,SP,#+12
   \   000000D4   3080BDE8           POP      {R4,R5,PC}       ;; return
    595          } // InAlarm
    596          
    597          char AlarmTriggerCause[2][6];		// Upper/Lower[2] - analog input trigger y/n[4] + digital input trigger y/n[2]
    598          
    599          // check all the ranges for alarms and ranges
    600          // type can be LOWER_WARNING_LED, UPPER_WARNING_LED, or BOTH_WARNING_LED
    601          //

   \                                 In section .text, align 4, keep-with-next
    602          void SetWarningLED(int type, float value) {
   \                     SetWarningLED:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    603          	int iopoint;
    604          	char upperledon = false;
    605          	char lowerledon = false;
    606          
    607          	if ((LEDUpdatesSuspended) || (unsavedSysData.systemMode == DU2_STARTUP))
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   780094E5           LDR      R0,[R4, #+120]
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   0460CDE5           STRB     R6,[SP, #+4]
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   E500001A           BNE      ??SetWarningLED_0
   \   00000024   ........           LDR      R0,??DataTable29
   \   00000028   8800D0E5           LDRB     R0,[R0, #+136]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   E100000A           BEQ      ??SetWarningLED_0
    608          		return;
    609          	
    610          	for (iopoint = 0; iopoint < NUMBER_OF_ANALOGS; iopoint++) {
   \   00000034   0080A0E3           MOV      R8,#+0
   \   00000038   189084E2           ADD      R9,R4,#+24
   \   0000003C   04A0A0E1           MOV      R10,R4
   \   00000040   ........           LDR      R11,??DataTable29_1
   \   00000044   0150A0E3           MOV      R5,#+1
    611          		if (type != LOWER_WARNING_LED)
   \                     ??SetWarningLED_1:
   \   00000048   08009DE5           LDR      R0,[SP, #+8]
   \   0000004C   020050E3           CMP      R0,#+2
   \   00000050   1500000A           BEQ      ??SetWarningLED_2
    612          			if (vehicleData.analogInput[iopoint].EnableLED1)
   \   00000054   B400DBE5           LDRB     R0,[R11, #+180]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0F00000A           BEQ      ??SetWarningLED_3
    613          				if (InAlarm(iopoint))
   \   00000060   0800A0E1           MOV      R0,R8
   \   00000064   ........           BL       InAlarm
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0800000A           BEQ      ??SetWarningLED_4
    614          				{
    615          					upperledon = true;
   \   00000070   0450CDE5           STRB     R5,[SP, #+4]
    616          					AlarmTriggerCause[0][iopoint] = true;
   \   00000074   500084E2           ADD      R0,R4,#+80
   \   00000078   0050C8E7           STRB     R5,[R8, +R0]
    617          
    618          					// See if this is a new alarm condition
    619          					if (upperLEDOnReason[iopoint] == false)
   \   0000007C   000099E5           LDR      R0,[R9, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0500001A           BNE      ??SetWarningLED_3
    620          					{
    621          						// This is a NEW condition for this LED
    622          						UpperLED.flashStartTime = 0;		// Be sure the flashing timer is 0 to restart the flashing
   \   00000088   386084E5           STR      R6,[R4, #+56]
    623          						upperLEDOnReason[iopoint] = true;
   \   0000008C   005089E5           STR      R5,[R9, #+0]
   \   00000090   020000EA           B        ??SetWarningLED_3
    624          					}
    625          				}
    626          				else
    627          				{
    628          					AlarmTriggerCause[0][iopoint] = false;
   \                     ??SetWarningLED_4:
   \   00000094   500084E2           ADD      R0,R4,#+80
   \   00000098   0060C8E7           STRB     R6,[R8, +R0]
    629          					upperLEDOnReason[iopoint] = false;
   \   0000009C   006089E5           STR      R6,[R9, #+0]
    630          				}
    631          
    632          		if (type != UPPER_WARNING_LED)
   \                     ??SetWarningLED_3:
   \   000000A0   08009DE5           LDR      R0,[SP, #+8]
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   1200000A           BEQ      ??SetWarningLED_5
    633          			if (vehicleData.analogInput[iopoint].EnableLED2)
   \                     ??SetWarningLED_2:
   \   000000AC   B500DBE5           LDRB     R0,[R11, #+181]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0F00000A           BEQ      ??SetWarningLED_5
    634          				if (InAlarm(iopoint))
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   ........           BL       InAlarm
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0800000A           BEQ      ??SetWarningLED_6
    635          				{
    636          					lowerledon = true;
    637          					AlarmTriggerCause[1][iopoint] = true;
   \   000000C8   040088E0           ADD      R0,R8,R4
   \   000000CC   5650C0E5           STRB     R5,[R0, #+86]
    638          
    639          					// See if this is a new alarm condition
    640          					if (lowerLEDOnReason[iopoint] == false)
   \   000000D0   00009AE5           LDR      R0,[R10, #+0]
   \   000000D4   0170A0E3           MOV      R7,#+1
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0500001A           BNE      ??SetWarningLED_5
    641          					{
    642          						// This is a NEW condition for this LED
    643          						LowerLED.flashStartTime = 0;		// Be sure the flashing timer is 0 to restart the flashing
   \   000000E0   486084E5           STR      R6,[R4, #+72]
    644          						lowerLEDOnReason[iopoint] = true;
   \   000000E4   00508AE5           STR      R5,[R10, #+0]
   \   000000E8   020000EA           B        ??SetWarningLED_5
    645          					}
    646          				}
    647          				else
    648          				{
    649          					AlarmTriggerCause[1][iopoint] = false;
   \                     ??SetWarningLED_6:
   \   000000EC   040088E0           ADD      R0,R8,R4
   \   000000F0   5660C0E5           STRB     R6,[R0, #+86]
    650          					lowerLEDOnReason[iopoint] = false;
   \   000000F4   00608AE5           STR      R6,[R10, #+0]
    651          				}
    652          	} // for
   \                     ??SetWarningLED_5:
   \   000000F8   018088E2           ADD      R8,R8,#+1
   \   000000FC   40B08BE2           ADD      R11,R11,#+64
   \   00000100   04A08AE2           ADD      R10,R10,#+4
   \   00000104   049089E2           ADD      R9,R9,#+4
   \   00000108   040058E3           CMP      R8,#+4
   \   0000010C   CDFFFFBA           BLT      ??SetWarningLED_1
    653          	
    654          	for (iopoint = 0; iopoint < NUMBER_OF_DIGITALS; iopoint++) {
   \   00000110   ........           LDR      R1,??DataTable29_1
   \   00000114   0080A0E3           MOV      R8,#+0
   \   00000118   549084E2           ADD      R9,R4,#+84
   \   0000011C   28A084E2           ADD      R10,R4,#+40
   \   00000120   10B084E2           ADD      R11,R4,#+16
   \   00000124   00108DE5           STR      R1,[SP, #+0]
    655          	if (type != LOWER_WARNING_LED)
   \                     ??SetWarningLED_7:
   \   00000128   08009DE5           LDR      R0,[SP, #+8]
   \   0000012C   020050E3           CMP      R0,#+2
   \   00000130   1400000A           BEQ      ??SetWarningLED_8
    656          		if (vehicleData.digitalInput[iopoint].EnableLED1)
   \   00000134   00009DE5           LDR      R0,[SP, #+0]
   \   00000138   A501D0E5           LDRB     R0,[R0, #+421]
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0D00000A           BEQ      ??SetWarningLED_9
    657          			if (InAlarm(4 + iopoint))
   \   00000144   040088E2           ADD      R0,R8,#+4
   \   00000148   ........           BL       InAlarm
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0700000A           BEQ      ??SetWarningLED_10
    658          			{
    659          				upperledon = true;
   \   00000154   0450CDE5           STRB     R5,[SP, #+4]
    660          				AlarmTriggerCause[0][iopoint + 4] = true;
   \   00000158   0050C9E5           STRB     R5,[R9, #+0]
    661          
    662          				// See if this is a new alarm condition
    663          				if (upperLEDOnReason[iopoint + 4] == false)
   \   0000015C   00009AE5           LDR      R0,[R10, #+0]
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0400001A           BNE      ??SetWarningLED_9
    664          				{
    665          					// This is a NEW condition for this LED
    666          					UpperLED.flashStartTime = 0;		// Be sure the flashing timer is 0 to restart the flashing
   \   00000168   386084E5           STR      R6,[R4, #+56]
    667          					upperLEDOnReason[iopoint + 4] = true;
   \   0000016C   00508AE5           STR      R5,[R10, #+0]
   \   00000170   010000EA           B        ??SetWarningLED_9
    668          				}
    669          			}
    670          			else
    671          			{
    672          				AlarmTriggerCause[0][iopoint + 4] = false;
   \                     ??SetWarningLED_10:
   \   00000174   0060C9E5           STRB     R6,[R9, #+0]
    673          				upperLEDOnReason[iopoint + 4] = false;
   \   00000178   00608AE5           STR      R6,[R10, #+0]
    674          			}
    675          
    676          	if (type != UPPER_WARNING_LED)
   \                     ??SetWarningLED_9:
   \   0000017C   08009DE5           LDR      R0,[SP, #+8]
   \   00000180   010050E3           CMP      R0,#+1
   \   00000184   1300000A           BEQ      ??SetWarningLED_11
    677          		if (vehicleData.digitalInput[iopoint].EnableLED2)
   \                     ??SetWarningLED_8:
   \   00000188   00009DE5           LDR      R0,[SP, #+0]
   \   0000018C   A601D0E5           LDRB     R0,[R0, #+422]
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   0F00000A           BEQ      ??SetWarningLED_11
    678          			if (InAlarm(4 + iopoint))
   \   00000198   040088E2           ADD      R0,R8,#+4
   \   0000019C   ........           BL       InAlarm
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   0800000A           BEQ      ??SetWarningLED_12
    679          			{
    680          				lowerledon = true;
    681          				AlarmTriggerCause[1][iopoint + 4] = true;
   \   000001A8   040088E0           ADD      R0,R8,R4
   \   000001AC   5A50C0E5           STRB     R5,[R0, #+90]
    682          
    683          				// See if this is a new alarm condition
    684          				if (lowerLEDOnReason[iopoint + 4] == false)
   \   000001B0   00009BE5           LDR      R0,[R11, #+0]
   \   000001B4   0170A0E3           MOV      R7,#+1
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0500001A           BNE      ??SetWarningLED_11
    685          				{
    686          					// This is a NEW condition for this LED
    687          					LowerLED.flashStartTime = 0;		// Be sure the flashing timer is 0 to restart the flashing
   \   000001C0   486084E5           STR      R6,[R4, #+72]
    688          					lowerLEDOnReason[iopoint + 4] = true;
   \   000001C4   00508BE5           STR      R5,[R11, #+0]
   \   000001C8   020000EA           B        ??SetWarningLED_11
    689          				}
    690          			}
    691          			else
    692          			{
    693          				AlarmTriggerCause[1][iopoint + 4] = false;
   \                     ??SetWarningLED_12:
   \   000001CC   040088E0           ADD      R0,R8,R4
   \   000001D0   5A60C0E5           STRB     R6,[R0, #+90]
    694          				lowerLEDOnReason[iopoint + 4] = false;
   \   000001D4   00608BE5           STR      R6,[R11, #+0]
    695          			}
    696          	} // for
   \                     ??SetWarningLED_11:
   \   000001D8   00009DE5           LDR      R0,[SP, #+0]
   \   000001DC   018088E2           ADD      R8,R8,#+1
   \   000001E0   2F0080E2           ADD      R0,R0,#+47
   \   000001E4   00008DE5           STR      R0,[SP, #+0]
   \   000001E8   04B08BE2           ADD      R11,R11,#+4
   \   000001EC   04A08AE2           ADD      R10,R10,#+4
   \   000001F0   019089E2           ADD      R9,R9,#+1
   \   000001F4   020058E3           CMP      R8,#+2
   \   000001F8   CAFFFFBA           BLT      ??SetWarningLED_7
    697          
    698          	if (upperledon)
   \   000001FC   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000200   780094E5           LDR      R0,[R4, #+120]
   \   00000204   000051E3           CMP      R1,#+0
   \   00000208   2500000A           BEQ      ??SetWarningLED_13
    699          	{
    700          		WarningLEDOn(&UpperLED, 0);
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   2100001A           BNE      ??SetWarningLED_14
   \   00000214   340094E5           LDR      R0,[R4, #+52]
   \   00000218   305084E5           STR      R5,[R4, #+48]
   \   0000021C   000050E3           CMP      R0,#+0
   \   00000220   1800000A           BEQ      ??SetWarningLED_15
   \   00000224   ........           BL       GUI_GetTime
   \   00000228   381094E5           LDR      R1,[R4, #+56]
   \   0000022C   000051E3           CMP      R1,#+0
   \   00000230   0500000A           BEQ      ??SetWarningLED_16
   \   00000234   8920A0E3           MOV      R2,#+137
   \   00000238   011040E0           SUB      R1,R0,R1
   \   0000023C   4C2D82E3           ORR      R2,R2,#0x1300
   \   00000240   020051E1           CMP      R1,R2
   \   00000244   010000BA           BLT      ??SetWarningLED_17
   \   00000248   100000EA           B        ??SetWarningLED_18
   \                     ??SetWarningLED_16:
   \   0000024C   380084E5           STR      R0,[R4, #+56]
   \                     ??SetWarningLED_17:
   \   00000250   341094E5           LDR      R1,[R4, #+52]
   \   00000254   011040E0           SUB      R1,R0,R1
   \   00000258   FB0051E3           CMP      R1,#+251
   \   0000025C   040000AA           BGE      ??SetWarningLED_19
   \   00000260   7E0051E3           CMP      R1,#+126
   \   00000264   0C0000BA           BLT      ??SetWarningLED_14
   \   00000268   3C0094E5           LDR      R0,[R4, #+60]
   \   0000026C   6410A0E3           MOV      R1,#+100
   \   00000270   080000EA           B        ??SetWarningLED_20
   \                     ??SetWarningLED_19:
   \   00000274   3C1094E5           LDR      R1,[R4, #+60]
   \   00000278   602094E5           LDR      R2,[R4, #+96]
   \   0000027C   002081E5           STR      R2,[R1, #+0]
   \   00000280   340084E5           STR      R0,[R4, #+52]
   \   00000284   040000EA           B        ??SetWarningLED_14
   \                     ??SetWarningLED_15:
   \   00000288   ........           BL       GUI_GetTime
   \   0000028C   340084E5           STR      R0,[R4, #+52]
   \                     ??SetWarningLED_18:
   \   00000290   3C0094E5           LDR      R0,[R4, #+60]
   \   00000294   601094E5           LDR      R1,[R4, #+96]
   \                     ??SetWarningLED_20:
   \   00000298   001080E5           STR      R1,[R0, #+0]
    701          		WarningPopups[0].on = true;
   \                     ??SetWarningLED_14:
   \   0000029C   8850C4E5           STRB     R5,[R4, #+136]
   \   000002A0   0B0000EA           B        ??SetWarningLED_21
    702          	}
    703          	else
    704          	{
    705          		WarningLEDOff(&UpperLED, 0);
   \                     ??SetWarningLED_13:
   \   000002A4   000050E3           CMP      R0,#+0
   \   000002A8   0800001A           BNE      ??SetWarningLED_22
   \   000002AC   300094E5           LDR      R0,[R4, #+48]
   \   000002B0   000050E3           CMP      R0,#+0
   \   000002B4   0500000A           BEQ      ??SetWarningLED_22
   \   000002B8   3C0094E5           LDR      R0,[R4, #+60]
   \   000002BC   306084E5           STR      R6,[R4, #+48]
   \   000002C0   346084E5           STR      R6,[R4, #+52]
   \   000002C4   386084E5           STR      R6,[R4, #+56]
   \   000002C8   6410A0E3           MOV      R1,#+100
   \   000002CC   001080E5           STR      R1,[R0, #+0]
    706          		WarningPopups[0].on = false;
   \                     ??SetWarningLED_22:
   \   000002D0   8860C4E5           STRB     R6,[R4, #+136]
    707          	}
    708          	
    709          	if (lowerledon)
   \                     ??SetWarningLED_21:
   \   000002D4   780094E5           LDR      R0,[R4, #+120]
   \   000002D8   000057E3           CMP      R7,#+0
   \   000002DC   2500000A           BEQ      ??SetWarningLED_23
    710          	{
    711          		WarningLEDOn(&LowerLED, 0);
   \   000002E0   000050E3           CMP      R0,#+0
   \   000002E4   2100001A           BNE      ??SetWarningLED_24
   \   000002E8   440094E5           LDR      R0,[R4, #+68]
   \   000002EC   405084E5           STR      R5,[R4, #+64]
   \   000002F0   000050E3           CMP      R0,#+0
   \   000002F4   1800000A           BEQ      ??SetWarningLED_25
   \   000002F8   ........           BL       GUI_GetTime
   \   000002FC   481094E5           LDR      R1,[R4, #+72]
   \   00000300   000051E3           CMP      R1,#+0
   \   00000304   0500000A           BEQ      ??SetWarningLED_26
   \   00000308   8920A0E3           MOV      R2,#+137
   \   0000030C   011040E0           SUB      R1,R0,R1
   \   00000310   4C2D82E3           ORR      R2,R2,#0x1300
   \   00000314   020051E1           CMP      R1,R2
   \   00000318   010000BA           BLT      ??SetWarningLED_27
   \   0000031C   100000EA           B        ??SetWarningLED_28
   \                     ??SetWarningLED_26:
   \   00000320   480084E5           STR      R0,[R4, #+72]
   \                     ??SetWarningLED_27:
   \   00000324   441094E5           LDR      R1,[R4, #+68]
   \   00000328   011040E0           SUB      R1,R0,R1
   \   0000032C   FB0051E3           CMP      R1,#+251
   \   00000330   040000AA           BGE      ??SetWarningLED_29
   \   00000334   7E0051E3           CMP      R1,#+126
   \   00000338   0C0000BA           BLT      ??SetWarningLED_24
   \   0000033C   4C0094E5           LDR      R0,[R4, #+76]
   \   00000340   6410A0E3           MOV      R1,#+100
   \   00000344   080000EA           B        ??SetWarningLED_30
   \                     ??SetWarningLED_29:
   \   00000348   4C1094E5           LDR      R1,[R4, #+76]
   \   0000034C   602094E5           LDR      R2,[R4, #+96]
   \   00000350   002081E5           STR      R2,[R1, #+0]
   \   00000354   440084E5           STR      R0,[R4, #+68]
   \   00000358   040000EA           B        ??SetWarningLED_24
   \                     ??SetWarningLED_25:
   \   0000035C   ........           BL       GUI_GetTime
   \   00000360   440084E5           STR      R0,[R4, #+68]
   \                     ??SetWarningLED_28:
   \   00000364   4C0094E5           LDR      R0,[R4, #+76]
   \   00000368   601094E5           LDR      R1,[R4, #+96]
   \                     ??SetWarningLED_30:
   \   0000036C   001080E5           STR      R1,[R0, #+0]
    712          		WarningPopups[1].on = true;
   \                     ??SetWarningLED_24:
   \   00000370   8A50C4E5           STRB     R5,[R4, #+138]
   \   00000374   0B0000EA           B        ??SetWarningLED_31
    713          	}
    714          	else
    715          	{
    716          		WarningLEDOff(&LowerLED, 0);
   \                     ??SetWarningLED_23:
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   0800001A           BNE      ??SetWarningLED_32
   \   00000380   400094E5           LDR      R0,[R4, #+64]
   \   00000384   000050E3           CMP      R0,#+0
   \   00000388   0500000A           BEQ      ??SetWarningLED_32
   \   0000038C   4C0094E5           LDR      R0,[R4, #+76]
   \   00000390   406084E5           STR      R6,[R4, #+64]
   \   00000394   446084E5           STR      R6,[R4, #+68]
   \   00000398   486084E5           STR      R6,[R4, #+72]
   \   0000039C   6410A0E3           MOV      R1,#+100
   \   000003A0   001080E5           STR      R1,[R0, #+0]
    717          		WarningPopups[1].on = false;
   \                     ??SetWarningLED_32:
   \   000003A4   8A60C4E5           STRB     R6,[R4, #+138]
    718          	}
    719          
    720          	if (!AnyGaugeScreen(GetScreenType()))	// If currently on a gauge screen
   \                     ??SetWarningLED_31:
   \   000003A8   ........           BL       GetScreenType
   \   000003AC   ........           BL       AnyGaugeScreen
   \   000003B0   000050E3           CMP      R0,#+0
   \   000003B4   0000001A           BNE      ??SetWarningLED_0
    721          		CheckWarningPopups();
   \   000003B8   ........           BL       CheckWarningPopups
   \                     ??SetWarningLED_0:
   \   000003BC   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000003C0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    722          }
    723          
    724          //
    725          // While on the display settings screen do not make adjustments to the display
    726          //

   \                                 In section .text, align 4, keep-with-next
    727          void SuspendEnvironmentalUpdates(void)
    728          {
    729          	EnvironmentalUpdatesSuspended = true;
   \                     SuspendEnvironmentalUpdates:
   \   00000000   ........           LDR      R0,??DataTable28
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   7C1080E5           STR      R1,[R0, #+124]
    730          #ifndef _WINDOWS
    731          	tempCorrection = lightCorrection = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   741080E5           STR      R1,[R0, #+116]
   \   00000014   6C1080E5           STR      R1,[R0, #+108]
    732          #endif
    733          }
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    734          void ResumeEnvironmentalUpdates(void)
    735          {
    736          	EnvironmentalUpdatesSuspended = false;
   \                     ResumeEnvironmentalUpdates:
   \   00000000   ........           LDR      R0,??DataTable28
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   7C1080E5           STR      R1,[R0, #+124]
    737          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    738          
    739          //
    740          // User just changed state of auto-adjust setting
    741          //

   \                                 In section .text, align 4, keep-with-next
    742          void AutoAdjustOn(char state)
    743          {
    744          #ifndef _WINDOWS
    745          	if (!state)
   \                     AutoAdjustOn:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0000000A           BEQ      ??AutoAdjustOn_0
    746          	{
    747          		// If turning auto-adjust off, restore PWM settings to defaults
    748          		RestorePWMSettings();
   \   00000008   1EFF2FE1           BX       LR
    749          	}
   \                     ??AutoAdjustOn_0:
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   ........           BL       RestorePWMSettings
    750          #endif
    751          }
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    752          
    753          //
    754          // Record the ambient light value when these settings were made
    755          //

   \                                 In section .text, align 4, keep-with-next
    756          void RecordAmbientLight(void)
    757          {
   \                     RecordAmbientLight:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    758          	sysData.lightLevelWhenIntensitySet = GetNormalizedLightIntensity();
   \   00000008   0400A0E3           MOV      R0,#+4
   \   0000000C   ........           BL       GetADC
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ............       ADRL     R2,AmbientLightIntensity+0x4
   \              ....        
   \                     ??RecordAmbientLight_0:
   \   0000001C   043092E4           LDR      R3,[R2], #+4
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   0300003A           BCC      ??RecordAmbientLight_1
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   FF1001E2           AND      R1,R1,#0xFF
   \   00000030   640051E3           CMP      R1,#+100
   \   00000034   F8FFFF3A           BCC      ??RecordAmbientLight_0
   \                     ??RecordAmbientLight_1:
   \   00000038   010041E2           SUB      R0,R1,#+1
   \   0000003C   ........           LDR      R1,??DataTable40
    759          }
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   740081E5           STR      R0,[R1, #+116]
   \   00000048   0080BDE8           POP      {PC}             ;; return
    760          

   \                                 In section .text, align 4, keep-with-next
    761          unsigned int GetNormalizedLightIntensity(void)
    762          {
   \                     GetNormalizedLightIntensity:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    763          #ifdef _WINDOWS
    764          	return DEFAULT_LIGHT_LEVEL_WHEN_LED_SET;
    765          #else
    766          	unsigned int adcValue;
    767          	unsigned char index;
    768          	
    769          	adcValue = GetADC(ADC_LIGHT_LEVEL);
   \   00000008   0400A0E3           MOV      R0,#+4
   \   0000000C   ........           BL       GetADC
    770          	index = 1;
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ............       ADRL     R2,AmbientLightIntensity+0x4
   \              ....        
    771          	do {
    772          		if (adcValue < AmbientLightIntensity[index])
   \                     ??GetNormalizedLightIntensity_0:
   \   0000001C   043092E4           LDR      R3,[R2], #+4
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   0300003A           BCC      ??GetNormalizedLightIntensity_1
    773          			break;
    774          	} while (++index < INTENSITY_STEPS);
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   FF1001E2           AND      R1,R1,#0xFF
   \   00000030   640051E3           CMP      R1,#+100
   \   00000034   F8FFFF3A           BCC      ??GetNormalizedLightIntensity_0
    775          	return index - 1;
   \                     ??GetNormalizedLightIntensity_1:
   \   00000038   010041E2           SUB      R0,R1,#+1
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   0080BDE8           POP      {PC}             ;; return
    776          #endif
    777          }
    778          
    779          //
    780          // Suspend RPM and warning control of the LEDs and turn ON
    781          //

   \                                 In section .text, align 4, keep-with-next
    782          void SuspendLEDUpdates(char lightsOn)
    783          {
   \                     SuspendLEDUpdates:
   \   00000000   10402DE9           PUSH     {R4,LR}
    784          	if (lightsOn)
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0600000A           BEQ      ??SuspendLEDUpdates_0
    785          	{
    786          #ifdef _WINDOWS
    787          		CenterOn(SOLID);
    788          		Level1On();
    789          		Level2On();
    790          		Level3On();
    791          		SIM_HARDKEY_SetState(UpperLED.LED_ID, 1);
    792          		SIM_HARDKEY_SetState(LowerLED.LED_ID, 1);
    793          #else
    794          		ShiftLEDLevel(4);
   \   00000010   0400A0E3           MOV      R0,#+4
   \   00000014   ........           BL       ShiftLEDLevel
    795          		*(volatile U32 *)UpperLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000018   600094E5           LDR      R0,[R4, #+96]
   \   0000001C   3C1094E5           LDR      R1,[R4, #+60]
   \   00000020   000081E5           STR      R0,[R1, #+0]
    796          		*(volatile U32 *)LowerLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000024   4C1094E5           LDR      R1,[R4, #+76]
   \   00000028   000081E5           STR      R0,[R1, #+0]
    797          #endif
    798          	}
    799          	LEDUpdatesSuspended = true;
   \                     ??SuspendLEDUpdates_0:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   780084E5           STR      R0,[R4, #+120]
    800          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    801          
    802          //
    803          // Resume RPM and warning control of the LEDs and turn ON
    804          //

   \                                 In section .text, align 4, keep-with-next
    805          void ResumeLEDUpdates(void)
    806          {
   \                     ResumeLEDUpdates:
   \   00000000   10402DE9           PUSH     {R4,LR}
    807          	RecordAmbientLight();
   \   00000004   0400A0E3           MOV      R0,#+4
   \   00000008   ........           BL       GetADC
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   ............       ADRL     R2,AmbientLightIntensity+0x4
   \              ....        
   \                     ??ResumeLEDUpdates_0:
   \   00000018   043092E4           LDR      R3,[R2], #+4
   \   0000001C   030050E1           CMP      R0,R3
   \   00000020   0300003A           BCC      ??ResumeLEDUpdates_1
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   FF1001E2           AND      R1,R1,#0xFF
   \   0000002C   640051E3           CMP      R1,#+100
   \   00000030   F8FFFF3A           BCC      ??ResumeLEDUpdates_0
   \                     ??ResumeLEDUpdates_1:
   \   00000034   010041E2           SUB      R0,R1,#+1
   \   00000038   ........           LDR      R1,??DataTable40
    808          #ifndef _WINDOWS
    809          	lightCorrection = 0;
   \   0000003C   ........           LDR      R4,??DataTable28
   \   00000040   740081E5           STR      R0,[R1, #+116]
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   740084E5           STR      R0,[R4, #+116]
    810          #endif
    811          
    812          	LEDUpdatesSuspended = false;
   \   0000004C   780084E5           STR      R0,[R4, #+120]
    813          #ifdef _WINDOWS
    814          	if (UpperLED.warningOn)
    815          		SIM_HARDKEY_SetState(WARNING_LED_1, 1);
    816          	else SIM_HARDKEY_SetState(WARNING_LED_1, 0);
    817          	if (LowerLED.warningOn)
    818          		SIM_HARDKEY_SetState(WARNING_LED_2, 1);
    819          	else SIM_HARDKEY_SetState(WARNING_LED_2, 0);
    820          #else
    821          	ShiftLEDLevel(LEDlevel);
   \   00000050   5C0094E5           LDR      R0,[R4, #+92]
   \   00000054   FF0000E2           AND      R0,R0,#0xFF
   \   00000058   ........           BL       ShiftLEDLevel
   \   0000005C   301094E5           LDR      R1,[R4, #+48]
   \   00000060   3C0094E5           LDR      R0,[R4, #+60]
   \   00000064   000051E3           CMP      R1,#+0
    822          	
    823          	if (UpperLED.warningOn)
    824            		*(volatile U32 *)UpperLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000068   60109415           LDRNE    R1,[R4, #+96]
    825          	else *(volatile U32 *)UpperLED.DUTY_CYCLE_REGISTER = WARNING_LED_OFF;
   \   0000006C   6410A003           MOVEQ    R1,#+100
   \   00000070   001080E5           STR      R1,[R0, #+0]
   \   00000074   401094E5           LDR      R1,[R4, #+64]
   \   00000078   4C0094E5           LDR      R0,[R4, #+76]
   \   0000007C   000051E3           CMP      R1,#+0
    826          	if (LowerLED.warningOn)
    827            		*(volatile U32 *)LowerLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000080   60109415           LDRNE    R1,[R4, #+96]
    828            	else *(volatile U32 *)LowerLED.DUTY_CYCLE_REGISTER = WARNING_LED_OFF;
   \   00000084   6410A003           MOVEQ    R1,#+100
   \   00000088   001080E5           STR      R1,[R0, #+0]
    829          #endif
    830          }
   \   0000008C   1080BDE8           POP      {R4,PC}          ;; return
    831          
    832          //
    833          // Turn off all LEDs
    834          //

   \                                 In section .text, align 4, keep-with-next
    835          void TurnOffLEDs(void)
    836          {
   \                     TurnOffLEDs:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    837          #ifdef _WINDOWS
    838          	CenterOff();
    839          	Level1Off();
    840          	Level2Off();
    841          	Level3Off();
    842          #else
    843          	ShiftLEDLevel(LEDlevel = 0);
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   5C5084E5           STR      R5,[R4, #+92]
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       ShiftLEDLevel
    844          #endif
    845          	WarningLEDOff(&LowerLED, 1);
   \   0000001C   400094E5           LDR      R0,[R4, #+64]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500000A           BEQ      ??TurnOffLEDs_0
   \   00000028   4C0094E5           LDR      R0,[R4, #+76]
   \   0000002C   405084E5           STR      R5,[R4, #+64]
   \   00000030   445084E5           STR      R5,[R4, #+68]
   \   00000034   485084E5           STR      R5,[R4, #+72]
   \   00000038   6410A0E3           MOV      R1,#+100
   \   0000003C   001080E5           STR      R1,[R0, #+0]
    846          	WarningLEDOff(&UpperLED, 1);
   \                     ??TurnOffLEDs_0:
   \   00000040   300094E5           LDR      R0,[R4, #+48]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??TurnOffLEDs_1
   \   0000004C   3C0094E5           LDR      R0,[R4, #+60]
   \   00000050   305084E5           STR      R5,[R4, #+48]
   \   00000054   345084E5           STR      R5,[R4, #+52]
   \   00000058   385084E5           STR      R5,[R4, #+56]
   \   0000005C   6410A0E3           MOV      R1,#+100
   \   00000060   001080E5           STR      R1,[R0, #+0]
    847          }
   \                     ??TurnOffLEDs_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    848          
    849          //
    850          // Completely shut down all power consuming devices - powering off
    851          //

   \                                 In section .text, align 4, keep-with-next
    852          void LEDSystemShutdown(void)
    853          {
   \                     LEDSystemShutdown:
   \   00000000   10402DE9           PUSH     {R4,LR}
    854          	SuspendEnvironmentalUpdates();
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   7C0084E5           STR      R0,[R4, #+124]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   740084E5           STR      R0,[R4, #+116]
   \   00000018   6C0084E5           STR      R0,[R4, #+108]
    855          	TurnOffLEDs();
   \   0000001C   ........           BL       TurnOffLEDs
    856          #ifndef _WINDOWS
    857          //		GAS -- this does not work. i do not know why
    858          //  	PWMC_DTY0 = 0;		// Turn off backlight (completely)
    859          	SetBacklightBrightness(0);
   \   00000020   7200A0E3           MOV      R0,#+114
   \   00000024   400F80E3           ORR      R0,R0,#0x100
   \   00000028   ........           LDR      R1,??DataTable42  ;; 0xfffc8204
   \   0000002C   680084E5           STR      R0,[R4, #+104]
   \   00000030   000081E5           STR      R0,[R1, #+0]
    860          #endif
    861          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    862          
    863          //
    864          // Calculate where on the temperature verses ADC reading this temperature lays.
    865          // Read the EXPECTED ADC reading for this temperature.
    866          // Calculate the difference between the actual reading and expected reading - this
    867          // is the fixed ofset correction value to be applied to future ADC temperature readings.
    868          //

   \                                 In section .text, align 4, keep-with-next
    869          signed int CalculateTempCorrection(void)
    870          {
   \                     CalculateTempCorrection:
   \   00000000   10402DE9           PUSH     {R4,LR}
    871          	int calTemp = sysData.calibrationTemperature;
   \   00000004   ........           LDR      R4,??DataTable40
   \   00000008   D80094E5           LDR      R0,[R4, #+216]
    872          	float interpolatedValue;
    873          
    874          	// Find cal temp in temp table
    875          	if (calTemp <= 15)
   \   0000000C   100050E3           CMP      R0,#+16
   \   00000010   010000AA           BGE      ??CalculateTempCorrection_0
    876          		return 0;			// calibration below table level
   \                     ??CalculateTempCorrection_1:
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1080BDE8           POP      {R4,PC}
    877          
    878          	else if (calTemp < 20)
   \                     ??CalculateTempCorrection_0:
   \   0000001C   140050E3           CMP      R0,#+20
   \   00000020   0A0000AA           BGE      ??CalculateTempCorrection_2
    879          		interpolatedValue = TEMP_15C + (float)(calTemp - 15) / (float) (20 - 15) * (float)(TEMP_20C - TEMP_15C);
   \   00000024   0F0040E2           SUB      R0,R0,#+15
   \   00000028   ........           BL       __aeabi_i2f
   \   0000002C   4014A0E3           MOV      R1,#+1073741824
   \   00000030   A01881E3           ORR      R1,R1,#0xA00000
   \   00000034   ........           BL       __aeabi_fdiv
   \   00000038   C014A0E3           MOV      R1,#-1073741824
   \   0000003C   941781E3           ORR      R1,R1,#0x2500000
   \   00000040   ........           BL       __aeabi_fmul
   \   00000044   4414A0E3           MOV      R1,#+1140850688
   \   00000048   A01981E3           ORR      R1,R1,#0x280000
   \   0000004C   570000EA           B        ??CalculateTempCorrection_3
    880          	else if (calTemp < 25)
   \                     ??CalculateTempCorrection_2:
   \   00000050   190050E3           CMP      R0,#+25
   \   00000054   0A0000AA           BGE      ??CalculateTempCorrection_4
    881          		interpolatedValue = TEMP_20C + (float)(calTemp - 20) / (float) (25 - 20) * (float)(TEMP_25C - TEMP_20C);
   \   00000058   140040E2           SUB      R0,R0,#+20
   \   0000005C   ........           BL       __aeabi_i2f
   \   00000060   4014A0E3           MOV      R1,#+1073741824
   \   00000064   A01881E3           ORR      R1,R1,#0xA00000
   \   00000068   ........           BL       __aeabi_fdiv
   \   0000006C   C014A0E3           MOV      R1,#-1073741824
   \   00000070   A31781E3           ORR      R1,R1,#0x28C0000
   \   00000074   ........           BL       __aeabi_fmul
   \   00000078   4414A0E3           MOV      R1,#+1140850688
   \   0000007C   6C1981E3           ORR      R1,R1,#0x1B0000
   \   00000080   4A0000EA           B        ??CalculateTempCorrection_3
    882          	else if (calTemp < 30)
   \                     ??CalculateTempCorrection_4:
   \   00000084   1E0050E3           CMP      R0,#+30
   \   00000088   0A0000AA           BGE      ??CalculateTempCorrection_5
    883          		interpolatedValue = TEMP_25C + (float)(calTemp - 25) / (float) (30 - 25) * (float)(TEMP_30C - TEMP_25C);
   \   0000008C   190040E2           SUB      R0,R0,#+25
   \   00000090   ........           BL       __aeabi_i2f
   \   00000094   4014A0E3           MOV      R1,#+1073741824
   \   00000098   A01881E3           ORR      R1,R1,#0xA00000
   \   0000009C   ........           BL       __aeabi_fdiv
   \   000000A0   C014A0E3           MOV      R1,#-1073741824
   \   000000A4   971781E3           ORR      R1,R1,#0x25C0000
   \   000000A8   ........           BL       __aeabi_fmul
   \   000000AC   4414A0E3           MOV      R1,#+1140850688
   \   000000B0   981A81E3           ORR      R1,R1,#0x98000
   \   000000B4   3D0000EA           B        ??CalculateTempCorrection_3
    884          	else if (calTemp < 32)
   \                     ??CalculateTempCorrection_5:
   \   000000B8   200050E3           CMP      R0,#+32
   \   000000BC   080000AA           BGE      ??CalculateTempCorrection_6
    885          		interpolatedValue = TEMP_30C + (float)(calTemp - 30) / (float) (32 - 30) * (float)(TEMP_32C - TEMP_30C);
   \   000000C0   1E0040E2           SUB      R0,R0,#+30
   \   000000C4   ........           BL       __aeabi_i2f
   \   000000C8   FC15A0E3           MOV      R1,#+1056964608
   \   000000CC   ........           BL       __aeabi_fmul
   \   000000D0   C014A0E3           MOV      R1,#-1073741824
   \   000000D4   721781E3           ORR      R1,R1,#0x1C80000
   \   000000D8   ........           BL       __aeabi_fmul
   \   000000DC   ........           LDR      R1,??DataTable43  ;; 0x43f78000
   \   000000E0   320000EA           B        ??CalculateTempCorrection_3
    886          	else if (calTemp < 35)
   \                     ??CalculateTempCorrection_6:
   \   000000E4   230050E3           CMP      R0,#+35
   \   000000E8   0A0000AA           BGE      ??CalculateTempCorrection_7
    887          		interpolatedValue = TEMP_32C + (float)(calTemp - 32) / (float) (35 - 32) * (float)(TEMP_35C - TEMP_32C);
   \   000000EC   200040E2           SUB      R0,R0,#+32
   \   000000F0   ........           BL       __aeabi_i2f
   \   000000F4   4014A0E3           MOV      R1,#+1073741824
   \   000000F8   401881E3           ORR      R1,R1,#0x400000
   \   000000FC   ........           BL       __aeabi_fdiv
   \   00000100   C014A0E3           MOV      R1,#-1073741824
   \   00000104   7C1781E3           ORR      R1,R1,#0x1F00000
   \   00000108   ........           BL       __aeabi_fmul
   \   0000010C   4314A0E3           MOV      R1,#+1124073472
   \   00000110   EB1881E3           ORR      R1,R1,#0xEB0000
   \   00000114   250000EA           B        ??CalculateTempCorrection_3
    888          	else if (calTemp < 40)
   \                     ??CalculateTempCorrection_7:
   \   00000118   280050E3           CMP      R0,#+40
   \   0000011C   0A0000AA           BGE      ??CalculateTempCorrection_8
    889          		interpolatedValue = TEMP_35C + (float)(calTemp - 35) / (float) (40 - 35) * (float)(TEMP_40C - TEMP_35C);
   \   00000120   230040E2           SUB      R0,R0,#+35
   \   00000124   ........           BL       __aeabi_i2f
   \   00000128   4014A0E3           MOV      R1,#+1073741824
   \   0000012C   A01881E3           ORR      R1,R1,#0xA00000
   \   00000130   ........           BL       __aeabi_fdiv
   \   00000134   C014A0E3           MOV      R1,#-1073741824
   \   00000138   941781E3           ORR      R1,R1,#0x2500000
   \   0000013C   ........           BL       __aeabi_fmul
   \   00000140   4014A0E3           MOV      R1,#+1073741824
   \   00000144   F71781E3           ORR      R1,R1,#0x3DC0000
   \   00000148   180000EA           B        ??CalculateTempCorrection_3
    890          	else if (calTemp < 45)
   \                     ??CalculateTempCorrection_8:
   \   0000014C   2D0050E3           CMP      R0,#+45
   \   00000150   0A0000AA           BGE      ??CalculateTempCorrection_9
    891          		interpolatedValue = TEMP_40C + (float)(calTemp - 40) / (float) (45 - 40) * (float)(TEMP_45C - TEMP_40C);
   \   00000154   280040E2           SUB      R0,R0,#+40
   \   00000158   ........           BL       __aeabi_i2f
   \   0000015C   4014A0E3           MOV      R1,#+1073741824
   \   00000160   A01881E3           ORR      R1,R1,#0xA00000
   \   00000164   ........           BL       __aeabi_fdiv
   \   00000168   C014A0E3           MOV      R1,#-1073741824
   \   0000016C   781781E3           ORR      R1,R1,#0x1E00000
   \   00000170   ........           BL       __aeabi_fmul
   \   00000174   4314A0E3           MOV      R1,#+1124073472
   \   00000178   C21881E3           ORR      R1,R1,#0xC20000
   \   0000017C   0B0000EA           B        ??CalculateTempCorrection_3
    892          	else if (calTemp < 50)
   \                     ??CalculateTempCorrection_9:
   \   00000180   320050E3           CMP      R0,#+50
   \   00000184   A2FFFFAA           BGE      ??CalculateTempCorrection_1
    893          		interpolatedValue = TEMP_45C + (float)(calTemp - 45) / (float) (50 - 45) * (float)(TEMP_50C - TEMP_45C);
   \   00000188   2D0040E2           SUB      R0,R0,#+45
   \   0000018C   ........           BL       __aeabi_i2f
   \   00000190   4014A0E3           MOV      R1,#+1073741824
   \   00000194   A01881E3           ORR      R1,R1,#0xA00000
   \   00000198   ........           BL       __aeabi_fdiv
   \   0000019C   C014A0E3           MOV      R1,#-1073741824
   \   000001A0   681781E3           ORR      R1,R1,#0x1A00000
   \   000001A4   ........           BL       __aeabi_fmul
   \   000001A8   4014A0E3           MOV      R1,#+1073741824
   \   000001AC   ED1781E3           ORR      R1,R1,#0x3B40000
   \                     ??CalculateTempCorrection_3:
   \   000001B0   ........           BL       __aeabi_fadd
    894          	else
    895          		return 0;			// Over temp
    896          
    897          	return ((int) interpolatedValue - sysData.calibrationTempReading);
   \   000001B4   ........           BL       __aeabi_f2iz
   \   000001B8   DC1094E5           LDR      R1,[R4, #+220]
   \   000001BC   010040E0           SUB      R0,R0,R1
   \   000001C0   1080BDE8           POP      {R4,PC}          ;; return
    898          }
    899          
    900          #ifndef _WINDOWS
    901          

   \                                 In section .text, align 4, keep-with-next
    902          void SetLEDBrightness(int brightness)
    903          {
    904            	if (brightness < MINIMUM_BRIGHTNESS)
   \                     SetLEDBrightness:
   \   00000000   000050E3           CMP      R0,#+0
    905          	  	brightness = MINIMUM_BRIGHTNESS;
   \   00000004   0000A043           MOVMI    R0,#+0
   \   00000008   0100004A           BMI      ??SetLEDBrightness_0
    906          	
    907          	if (brightness > MAXIMUM_BRIGHTNESS)
   \   0000000C   640050E3           CMP      R0,#+100
    908          		brightness = MAXIMUM_BRIGHTNESS;
   \   00000010   6300A0A3           MOVGE    R0,#+99
    909          
    910            	warningLEDPWMSetting = WarningLEDBrightness[brightness];	// Set Upper MB LED
   \                     ??SetLEDBrightness_0:
   \   00000014   ............       ADRL     R1,WarningLEDBrightness
   \              ....        
   \   0000001C   ........           LDR      R2,??DataTable28
   \   00000020   001191E7           LDR      R1,[R1, +R0, LSL #+2]
    911          	*(volatile U32 *)UpperLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000024   3C3092E5           LDR      R3,[R2, #+60]
   \   00000028   601082E5           STR      R1,[R2, #+96]
   \   0000002C   001083E5           STR      R1,[R3, #+0]
    912          	*(volatile U32 *)LowerLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000030   4C3092E5           LDR      R3,[R2, #+76]
   \   00000034   001083E5           STR      R1,[R3, #+0]
    913          
    914            	tachLEDPWMSetting = TachLEDBrightness[brightness];			// Set tach LEDs
   \   00000038   ............       ADRL     R1,TachLEDBrightness
   \              ....        
   \   00000040   000191E7           LDR      R0,[R1, +R0, LSL #+2]
    915          	PWMC_DTY3 = tachLEDPWMSetting;
   \   00000044   ........           LDR      R1,??DataTable44  ;; 0xfffc8264
   \   00000048   640082E5           STR      R0,[R2, #+100]
   \   0000004C   000081E5           STR      R0,[R1, #+0]
    916          }
   \   00000050   1EFF2FE1           BX       LR               ;; return
    917          

   \                                 In section .text, align 4, keep-with-next
    918          void SetBacklightBrightness(int brightness)
    919          {
    920            	if (brightness < MINIMUM_BRIGHTNESS)
   \                     SetBacklightBrightness:
   \   00000000   000050E3           CMP      R0,#+0
    921          	  	brightness = MINIMUM_BRIGHTNESS;
   \   00000004   0000A043           MOVMI    R0,#+0
   \   00000008   0100004A           BMI      ??SetBacklightBrightness_0
    922          	
    923          	if (brightness > MAXIMUM_BRIGHTNESS)
   \   0000000C   640050E3           CMP      R0,#+100
    924          		brightness = MAXIMUM_BRIGHTNESS;
   \   00000010   6300A0A3           MOVGE    R0,#+99
    925          
    926          	backlightPWMSetting = BacklightBrightness[brightness];
   \                     ??SetBacklightBrightness_0:
   \   00000014   ............       ADRL     R1,BacklightBrightness
   \              ....        
   \   0000001C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000020   ........           LDR      R1,??DataTable28
   \   00000024   680081E5           STR      R0,[R1, #+104]
    927          
    928            	PWMC_DTY0 = backlightPWMSetting;
   \   00000028   ........           LDR      R1,??DataTable44_1  ;; 0xfffc8204
   \   0000002C   000081E5           STR      R0,[R1, #+0]
    929          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    930          
    931          
    932          /*********************************************************************
    933          *
    934          *       CheckDisplayConditions()
    935          *
    936          * Function decription:
    937          *   Check ambient light for LED and backlight brightness and board
    938          *	 temperature for LED duty cycle.
    939          *
    940          *	 This routine is called periodically (once per second during development)
    941          *	 to read ambient conditions and adjust LED intensities as necessary.
    942          *
    943          *	 Return: none
    944          */

   \                                 In section .text, align 4, keep-with-next
    945          void CheckDisplayConditions(void)
    946          {
   \                     CheckDisplayConditions:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    947          	int LEDtemperature;
    948          
    949          	// Do not make any adjustments while on the display settings screen
    950          	if (EnvironmentalUpdatesSuspended)
   \   00000004   ........           LDR      R4,??DataTable28
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   7C0094E5           LDR      R0,[R4, #+124]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   CC00001A           BNE      ??CheckDisplayConditions_0
    951          	  return;
    952          
    953          	// If tach LEDs are OFF and auto-adjust is on - calculate light adjustment factor
    954          	if ((LEDlevel == 0) && sysData.autoAdjustOn && !LEDUpdatesSuspended)
   \   00000018   5C0094E5           LDR      R0,[R4, #+92]
   \   0000001C   ........           LDR      R5,??DataTable40
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1C00001A           BNE      ??CheckDisplayConditions_1
   \   00000028   6C00D5E5           LDRB     R0,[R5, #+108]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1900000A           BEQ      ??CheckDisplayConditions_1
   \   00000034   780094E5           LDR      R0,[R4, #+120]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1600001A           BNE      ??CheckDisplayConditions_1
    955          	{	
    956          		signed int lightLevel;
    957          
    958          		// Read current ambient light level
    959          		lightLevel = GetNormalizedLightIntensity();		// 0-99, Larger number = brighter light
   \   00000040   0400A0E3           MOV      R0,#+4
   \   00000044   ........           BL       GetADC
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   ............       ADRL     R2,AmbientLightIntensity+0x4
   \              ....        
   \                     ??CheckDisplayConditions_2:
   \   00000054   043092E4           LDR      R3,[R2], #+4
   \   00000058   030050E1           CMP      R0,R3
   \   0000005C   0300003A           BCC      ??CheckDisplayConditions_3
   \   00000060   011081E2           ADD      R1,R1,#+1
   \   00000064   FF1001E2           AND      R1,R1,#0xFF
   \   00000068   640051E3           CMP      R1,#+100
   \   0000006C   F8FFFF3A           BCC      ??CheckDisplayConditions_2
   \                     ??CheckDisplayConditions_3:
   \   00000070   010041E2           SUB      R0,R1,#+1
    960          		if (lightCorrection > lightLevel + 1)
   \   00000074   741094E5           LDR      R1,[R4, #+116]
   \   00000078   012080E2           ADD      R2,R0,#+1
   \   0000007C   010052E1           CMP      R2,R1
    961          			lightCorrection--;
   \   00000080   010041B2           SUBLT    R0,R1,#+1
   \   00000084   030000BA           BLT      ??CheckDisplayConditions_4
    962          		else if (lightCorrection < lightLevel - 1)
   \   00000088   010040E2           SUB      R0,R0,#+1
   \   0000008C   000051E1           CMP      R1,R0
   \   00000090   010000AA           BGE      ??CheckDisplayConditions_1
    963          			lightCorrection++;
   \   00000094   010081E2           ADD      R0,R1,#+1
   \                     ??CheckDisplayConditions_4:
   \   00000098   740084E5           STR      R0,[R4, #+116]
    964          	}
    965          	
    966          	// Calculate temperature correction factor
    967          	LEDtemperature = GetADC(ADC_LED_BOARD_TEMP);
   \                     ??CheckDisplayConditions_1:
   \   0000009C   0500A0E3           MOV      R0,#+5
   \   000000A0   ........           BL       GetADC
    968          
    969          	// Apply new temperature correction factor
    970          	LEDtemperature += sysData.LEDtempOffset;
   \   000000A4   E01095E5           LDR      R1,[R5, #+224]
    971          
    972          #ifdef IGNORE_TEMPERATURE					// this is here to make Glenn's bench system work right
    973          		LEDtemperature = TEMP_50C + 1;
    974          #endif
    975          
    976          	if (LEDtemperature > TEMP_50C)			// If temp under 50C - leave alone - NOTE REVERSE LOGIC OF TEST!!!
   \   000000A8   5520A0E3           MOV      R2,#+85
   \   000000AC   001081E0           ADD      R1,R1,R0
   \   000000B0   402F82E3           ORR      R2,R2,#0x100
   \   000000B4   6C0094E5           LDR      R0,[R4, #+108]
   \   000000B8   020051E1           CMP      R1,R2
   \   000000BC   090000BA           BLT      ??CheckDisplayConditions_5
    977          		SetTempCorrection( 0 );
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   6500000A           BEQ      ??CheckDisplayConditions_6
   \   000000C8   0300004A           BMI      ??CheckDisplayConditions_7
   \   000000CC   010050E2           SUBS     R0,R0,#+1
   \   000000D0   6200005A           BPL      ??CheckDisplayConditions_6
   \                     ??CheckDisplayConditions_8:
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   600000EA           B        ??CheckDisplayConditions_6
   \                     ??CheckDisplayConditions_7:
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   5E0000BA           BLT      ??CheckDisplayConditions_6
   \   000000E4   FAFFFFEA           B        ??CheckDisplayConditions_8
    978          	else if (LEDtemperature > TEMP_51C)
   \                     ??CheckDisplayConditions_5:
   \   000000E8   082042E2           SUB      R2,R2,#+8
   \   000000EC   020051E1           CMP      R1,R2
   \   000000F0   0A0000BA           BLT      ??CheckDisplayConditions_9
    979          		SetTempCorrection( -1 );
   \   000000F4   0010E0E3           MVN      R1,#+0
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   5700000A           BEQ      ??CheckDisplayConditions_6
   \   00000100   030000BA           BLT      ??CheckDisplayConditions_10
   \                     ??CheckDisplayConditions_11:
   \   00000104   010040E2           SUB      R0,R0,#+1
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   530000AA           BGE      ??CheckDisplayConditions_6
   \   00000110   510000EA           B        ??CheckDisplayConditions_12
   \                     ??CheckDisplayConditions_10:
   \   00000114   010090E2           ADDS     R0,R0,#+1
   \   00000118   5000004A           BMI      ??CheckDisplayConditions_6
   \   0000011C   4E0000EA           B        ??CheckDisplayConditions_12
    980          	else if (LEDtemperature > TEMP_52C)
   \                     ??CheckDisplayConditions_9:
   \   00000120   0820C2E3           BIC      R2,R2,#0x8
   \   00000124   020051E1           CMP      R1,R2
   \   00000128   060000BA           BLT      ??CheckDisplayConditions_13
    981          		SetTempCorrection( -2 );
   \   0000012C   0110E0E3           MVN      R1,#+1
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   4900000A           BEQ      ??CheckDisplayConditions_6
   \   00000138   F1FFFFAA           BGE      ??CheckDisplayConditions_11
   \                     ??CheckDisplayConditions_14:
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   460000BA           BLT      ??CheckDisplayConditions_6
   \   00000144   440000EA           B        ??CheckDisplayConditions_12
    982          	else if (LEDtemperature > TEMP_53C)
   \                     ??CheckDisplayConditions_13:
   \   00000148   082042E2           SUB      R2,R2,#+8
   \   0000014C   020051E1           CMP      R1,R2
   \   00000150   040000BA           BLT      ??CheckDisplayConditions_15
    983          		SetTempCorrection( -3 );
   \   00000154   0210E0E3           MVN      R1,#+2
   \   00000158   010050E1           CMP      R0,R1
   \   0000015C   3F00000A           BEQ      ??CheckDisplayConditions_6
   \   00000160   F5FFFFBA           BLT      ??CheckDisplayConditions_14
   \   00000164   E6FFFFEA           B        ??CheckDisplayConditions_11
    984          	else if (LEDtemperature > TEMP_54C)
   \                     ??CheckDisplayConditions_15:
   \   00000168   0820C2E3           BIC      R2,R2,#0x8
   \   0000016C   020051E1           CMP      R1,R2
   \   00000170   060000BA           BLT      ??CheckDisplayConditions_16
    985          		SetTempCorrection( -5 );
   \   00000174   0410E0E3           MVN      R1,#+4
   \   00000178   010050E1           CMP      R0,R1
   \   0000017C   3700000A           BEQ      ??CheckDisplayConditions_6
   \   00000180   DFFFFFAA           BGE      ??CheckDisplayConditions_11
   \                     ??CheckDisplayConditions_17:
   \   00000184   010080E2           ADD      R0,R0,#+1
   \   00000188   340000BA           BLT      ??CheckDisplayConditions_6
   \   0000018C   320000EA           B        ??CheckDisplayConditions_12
    986          	else if (LEDtemperature > TEMP_55C)
   \                     ??CheckDisplayConditions_16:
   \   00000190   0420C2E3           BIC      R2,R2,#0x4
   \   00000194   020051E1           CMP      R1,R2
   \   00000198   040000BA           BLT      ??CheckDisplayConditions_18
    987          		SetTempCorrection( -7 );
   \   0000019C   0610E0E3           MVN      R1,#+6
   \   000001A0   010050E1           CMP      R0,R1
   \   000001A4   2D00000A           BEQ      ??CheckDisplayConditions_6
   \   000001A8   E3FFFFBA           BLT      ??CheckDisplayConditions_14
   \   000001AC   D4FFFFEA           B        ??CheckDisplayConditions_11
    988          	else if (LEDtemperature > TEMP_56C)
   \                     ??CheckDisplayConditions_18:
   \   000001B0   082042E2           SUB      R2,R2,#+8
   \   000001B4   020051E1           CMP      R1,R2
   \   000001B8   040000BA           BLT      ??CheckDisplayConditions_19
    989          		SetTempCorrection( -9 );
   \   000001BC   0810E0E3           MVN      R1,#+8
   \   000001C0   010050E1           CMP      R0,R1
   \   000001C4   2500000A           BEQ      ??CheckDisplayConditions_6
   \   000001C8   EDFFFFBA           BLT      ??CheckDisplayConditions_17
   \   000001CC   CCFFFFEA           B        ??CheckDisplayConditions_11
    990          	else if (LEDtemperature > TEMP_57C)
   \                     ??CheckDisplayConditions_19:
   \   000001D0   0820C2E3           BIC      R2,R2,#0x8
   \   000001D4   020051E1           CMP      R1,R2
   \   000001D8   040000BA           BLT      ??CheckDisplayConditions_20
    991          		SetTempCorrection( -12 );
   \   000001DC   0B10E0E3           MVN      R1,#+11
   \   000001E0   010050E1           CMP      R0,R1
   \   000001E4   1D00000A           BEQ      ??CheckDisplayConditions_6
   \   000001E8   D3FFFFBA           BLT      ??CheckDisplayConditions_14
   \   000001EC   C4FFFFEA           B        ??CheckDisplayConditions_11
    992          	else if (LEDtemperature > TEMP_58C)
   \                     ??CheckDisplayConditions_20:
   \   000001F0   082042E2           SUB      R2,R2,#+8
   \   000001F4   020051E1           CMP      R1,R2
   \   000001F8   060000BA           BLT      ??CheckDisplayConditions_21
    993          		SetTempCorrection( -15 );
   \   000001FC   0E10E0E3           MVN      R1,#+14
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   1500000A           BEQ      ??CheckDisplayConditions_6
   \   00000208   BDFFFFAA           BGE      ??CheckDisplayConditions_11
   \   0000020C   010080E2           ADD      R0,R0,#+1
   \   00000210   120000BA           BLT      ??CheckDisplayConditions_6
   \   00000214   100000EA           B        ??CheckDisplayConditions_12
    994          	else if (LEDtemperature > TEMP_59C)
   \                     ??CheckDisplayConditions_21:
   \   00000218   0820C2E3           BIC      R2,R2,#0x8
   \   0000021C   020051E1           CMP      R1,R2
   \   00000220   040000BA           BLT      ??CheckDisplayConditions_22
    995          		SetTempCorrection( -18 );
   \   00000224   1110E0E3           MVN      R1,#+17
   \   00000228   010050E1           CMP      R0,R1
   \   0000022C   0B00000A           BEQ      ??CheckDisplayConditions_6
   \   00000230   C1FFFFBA           BLT      ??CheckDisplayConditions_14
   \   00000234   B2FFFFEA           B        ??CheckDisplayConditions_11
    996          	else if (LEDtemperature <= TEMP_60C)		// If temp over 60C set to minimum brightness
   \                     ??CheckDisplayConditions_22:
   \   00000238   082042E2           SUB      R2,R2,#+8
   \   0000023C   020051E1           CMP      R1,R2
   \   00000240   060000AA           BGE      ??CheckDisplayConditions_6
    997          		SetTempCorrection( -100 );
   \   00000244   6310E0E3           MVN      R1,#+99
   \   00000248   010050E1           CMP      R0,R1
   \   0000024C   0300000A           BEQ      ??CheckDisplayConditions_6
   \   00000250   ABFFFFAA           BGE      ??CheckDisplayConditions_11
   \   00000254   010080E2           ADD      R0,R0,#+1
   \   00000258   000000BA           BLT      ??CheckDisplayConditions_6
   \                     ??CheckDisplayConditions_12:
   \   0000025C   0100A0E1           MOV      R0,R1
    998          
    999          	// Calculate total correction - totalCorrection is always the current correction factor for all
   1000          	// lights.  If updates are suspended then totalCorrection will still contain the last valid
   1001          	// lightCorrection.  This means that when adjusting light levels using the slideouts it will still
   1002          	// keep track of the last valid light correction so that when light compensation resumes the
   1003          	// light level will remain steady.
   1004          	totalCorrection = tempCorrection + lightCorrection;
   \                     ??CheckDisplayConditions_6:
   \   00000260   741094E5           LDR      R1,[R4, #+116]
   \   00000264   6C0084E5           STR      R0,[R4, #+108]
   \   00000268   001081E0           ADD      R1,R1,R0
   1005          
   1006          	// Apply corrections, range check and update PWM variables
   1007          	UpdateWarningPWMVariable();
   \   0000026C   700095E5           LDR      R0,[R5, #+112]
   \   00000270   701084E5           STR      R1,[R4, #+112]
   \   00000274   000081E0           ADD      R0,R1,R0
   \   00000278   640050E3           CMP      R0,#+100
   \   0000027C   030000AA           BGE      ??CheckDisplayConditions_23
   \   00000280   000050E3           CMP      R0,#+0
   \   00000284   0200005A           BPL      ??CheckDisplayConditions_24
   \   00000288   0000A0E3           MOV      R0,#+0
   \   0000028C   000000EA           B        ??CheckDisplayConditions_24
   \                     ??CheckDisplayConditions_23:
   \   00000290   6300A0E3           MOV      R0,#+99
   \                     ??CheckDisplayConditions_24:
   \   00000294   ............       ADRL     R2,WarningLEDBrightness
   \              ....        
   1008          	UpdateBacklightPWMVariable();
   \   0000029C   5A0071E3           CMN      R1,#+90
   \   000002A0   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   000002A4   683095E5           LDR      R3,[R5, #+104]
   \   000002A8   0120A0A1           MOVGE    R2,R1
   \   000002AC   5920E0B3           MVNLT    R2,#+89
   \   000002B0   032082E0           ADD      R2,R2,R3
   \   000002B4   600084E5           STR      R0,[R4, #+96]
   \   000002B8   640052E3           CMP      R2,#+100
   \   000002BC   030000AA           BGE      ??CheckDisplayConditions_25
   \   000002C0   000052E3           CMP      R2,#+0
   \   000002C4   0200005A           BPL      ??CheckDisplayConditions_26
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   000000EA           B        ??CheckDisplayConditions_26
   \                     ??CheckDisplayConditions_25:
   \   000002D0   6320A0E3           MOV      R2,#+99
   \                     ??CheckDisplayConditions_26:
   \   000002D4   ............       ADRL     R3,BacklightBrightness
   \              ....        
   \   000002DC   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   1009          	UpdateTachPWMVariable();
   \   000002E0   703095E5           LDR      R3,[R5, #+112]
   \   000002E4   682084E5           STR      R2,[R4, #+104]
   \   000002E8   031081E0           ADD      R1,R1,R3
   \   000002EC   640051E3           CMP      R1,#+100
   \   000002F0   030000AA           BGE      ??CheckDisplayConditions_27
   \   000002F4   000051E3           CMP      R1,#+0
   \   000002F8   0200005A           BPL      ??CheckDisplayConditions_28
   \   000002FC   0010A0E3           MOV      R1,#+0
   \   00000300   000000EA           B        ??CheckDisplayConditions_28
   \                     ??CheckDisplayConditions_27:
   \   00000304   6310A0E3           MOV      R1,#+99
   \                     ??CheckDisplayConditions_28:
   \   00000308   ............       ADRL     R3,TachLEDBrightness
   \              ....        
   \   00000310   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   1010          	
   1011          	// Set new Levels
   1012          	UpdateLEDs();
   \   00000314   ........           LDR      R3,??DataTable44_1  ;; 0xfffc8204
   \   00000318   641084E5           STR      R1,[R4, #+100]
   \   0000031C   002083E5           STR      R2,[R3, #+0]
   \   00000320   5C2094E5           LDR      R2,[R4, #+92]
   \   00000324   000052E3           CMP      R2,#+0
   \   00000328   60108315           STRNE    R1,[R3, #+96]
   \   0000032C   301094E5           LDR      R1,[R4, #+48]
   \   00000330   000051E3           CMP      R1,#+0
   \   00000334   3C109415           LDRNE    R1,[R4, #+60]
   \   00000338   00008115           STRNE    R0,[R1, #+0]
   \   0000033C   401094E5           LDR      R1,[R4, #+64]
   \   00000340   000051E3           CMP      R1,#+0
   \   00000344   4C109415           LDRNE    R1,[R4, #+76]
   \   00000348   00008115           STRNE    R0,[R1, #+0]
   \                     ??CheckDisplayConditions_0:
   \   0000034C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000350   3080BDE8           POP      {R4,R5,PC}       ;; return
   1013          }
   1014          
   1015          //
   1016          // Incrementally approach requested temperature correction going not more than
   1017          // 10 counts in any one step.
   1018          //

   \                                 In section .text, align 4, keep-with-next
   1019          void SetTempCorrection( signed int correction )
   1020          {
   1021          	if (tempCorrection == correction)
   \                     SetTempCorrection:
   \   00000000   ........           LDR      R1,??DataTable28
   \   00000004   6C2091E5           LDR      R2,[R1, #+108]
   \   00000008   000052E1           CMP      R2,R0
   \   0000000C   0B00000A           BEQ      ??SetTempCorrection_0
   1022          		return;
   1023          	
   1024          	if (tempCorrection < correction)
   \   00000010   050000AA           BGE      ??SetTempCorrection_1
   1025          	{
   1026          		// Going "up"
   1027          		if ((tempCorrection += 1) > correction)
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   020050E1           CMP      R0,R2
   \   0000001C   6C2081E5           STR      R2,[R1, #+108]
   \   00000020   0200A0C1           MOVGT    R0,R2
   \   00000024   6C0081E5           STR      R0,[R1, #+108]
   \   00000028   1EFF2FE1           BX       LR
   1028          			tempCorrection = correction;
   1029          	}
   1030          	else
   1031          	{
   1032          		// Going "down"
   1033          		if ((tempCorrection -= 1) < correction)
   \                     ??SetTempCorrection_1:
   \   0000002C   012042E2           SUB      R2,R2,#+1
   \   00000030   6C2081E5           STR      R2,[R1, #+108]
   \   00000034   000052E1           CMP      R2,R0
   \   00000038   0020A0B1           MOVLT    R2,R0
   \   0000003C   6C2081E5           STR      R2,[R1, #+108]
   \                     ??SetTempCorrection_0:
   \   00000040   1EFF2FE1           BX       LR               ;; return
   1034          			tempCorrection = correction;
   1035          	}
   1036          }
   1037          

   \                                 In section .text, align 4, keep-with-next
   1038          void UpdateWarningPWMVariable(void)
   1039          {
   1040          	int index;
   1041          
   1042          	// Convert corrections into indexes
   1043          	index = sysData.LEDBrightness + totalCorrection;
   \                     UpdateWarningPWMVariable:
   \   00000000   ........           LDR      R0,??DataTable28
   \   00000004   ........           LDR      R1,??DataTable44_2
   \   00000008   702090E5           LDR      R2,[R0, #+112]
   \   0000000C   701091E5           LDR      R1,[R1, #+112]
   \   00000010   011082E0           ADD      R1,R2,R1
   1044          
   1045          	// Check for over limits
   1046          	if (index > MAXIMUM_BRIGHTNESS)
   \   00000014   640051E3           CMP      R1,#+100
   1047          		index = MAXIMUM_BRIGHTNESS;
   \   00000018   6310A0A3           MOVGE    R1,#+99
   \   0000001C   010000AA           BGE      ??UpdateWarningPWMVariable_0
   1048          	else if (index < MINIMUM_BRIGHTNESS)
   \   00000020   000051E3           CMP      R1,#+0
   1049          		index = MINIMUM_BRIGHTNESS;
   \   00000024   0010A043           MOVMI    R1,#+0
   1050          			
   1051          	// Apply corrections
   1052          	warningLEDPWMSetting = WarningLEDBrightness[index];
   \                     ??UpdateWarningPWMVariable_0:
   \   00000028   ............       ADRL     R2,WarningLEDBrightness
   \              ....        
   \   00000030   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000034   601080E5           STR      R1,[R0, #+96]
   1053          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
   1054          

   \                                 In section .text, align 4, keep-with-next
   1055          void UpdateBacklightPWMVariable(void)
   1056          {
   1057          	int index;
   1058          	signed int correction;
   1059          	
   1060          	// Limit correction so that temperature correction cannot make the backlight too dim
   1061          	if (totalCorrection < -90)
   \                     UpdateBacklightPWMVariable:
   \   00000000   ........           LDR      R0,??DataTable44_3
   1062          		correction = -90;
   1063          	else correction = totalCorrection;
   1064          	
   1065          	// Convert corrections into indexes
   1066          //	index = sysData.backlight + totalCorrection;
   1067          	index = sysData.backlight + correction;
   \   00000004   ........           LDR      R2,??DataTable44_2
   \   00000008   701090E5           LDR      R1,[R0, #+112]
   \   0000000C   682092E5           LDR      R2,[R2, #+104]
   \   00000010   5A0071E3           CMN      R1,#+90
   \   00000014   5910E0B3           MVNLT    R1,#+89
   \   00000018   021081E0           ADD      R1,R1,R2
   1068          
   1069          	// Check for over limits
   1070          	if (index > MAXIMUM_BRIGHTNESS)
   \   0000001C   640051E3           CMP      R1,#+100
   1071          		index = MAXIMUM_BRIGHTNESS;
   \   00000020   6310A0A3           MOVGE    R1,#+99
   \   00000024   010000AA           BGE      ??UpdateBacklightPWMVariable_0
   1072          	else if (index < MINIMUM_BRIGHTNESS)
   \   00000028   000051E3           CMP      R1,#+0
   1073          		index = MINIMUM_BRIGHTNESS;
   \   0000002C   0010A043           MOVMI    R1,#+0
   1074          
   1075          	// Apply corrections
   1076          	backlightPWMSetting = BacklightBrightness[index];
   \                     ??UpdateBacklightPWMVariable_0:
   \   00000030   ............       ADRL     R2,BacklightBrightness
   \              ....        
   \   00000038   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   0000003C   681080E5           STR      R1,[R0, #+104]
   1077          }
   \   00000040   1EFF2FE1           BX       LR               ;; return
   1078          

   \                                 In section .text, align 4, keep-with-next
   1079          void UpdateTachPWMVariable(void)
   1080          {
   1081          	int index;
   1082          
   1083          	// Convert corrections into indexes
   1084          	index = sysData.LEDBrightness + totalCorrection;
   \                     UpdateTachPWMVariable:
   \   00000000   ........           LDR      R0,??DataTable44_3
   \   00000004   ........           LDR      R1,??DataTable44_2
   \   00000008   702090E5           LDR      R2,[R0, #+112]
   \   0000000C   701091E5           LDR      R1,[R1, #+112]
   \   00000010   011082E0           ADD      R1,R2,R1
   1085          
   1086          	// Check for over limits
   1087          	if (index > MAXIMUM_BRIGHTNESS)
   \   00000014   640051E3           CMP      R1,#+100
   1088          		index = MAXIMUM_BRIGHTNESS;
   \   00000018   6310A0A3           MOVGE    R1,#+99
   \   0000001C   010000AA           BGE      ??UpdateTachPWMVariable_0
   1089          	else if (index < MINIMUM_BRIGHTNESS)
   \   00000020   000051E3           CMP      R1,#+0
   1090          		index = MINIMUM_BRIGHTNESS;
   \   00000024   0010A043           MOVMI    R1,#+0
   1091          
   1092          	// Apply corrections
   1093          	tachLEDPWMSetting = TachLEDBrightness[index];
   \                     ??UpdateTachPWMVariable_0:
   \   00000028   ............       ADRL     R2,TachLEDBrightness
   \              ....        
   \   00000030   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000034   641080E5           STR      R1,[R0, #+100]
   1094          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
   1095          
   1096          //
   1097          // Update any LEDs that are currently ON with the new PWM values
   1098          // Note that this routine is only required if LEDs are turned on and off by
   1099          // setting the PWM to off.  If the PWMs were enabled/disabled as the means
   1100          // of turning on/off LEDs then the PWM values could just be written reguardless
   1101          // of the LED state.
   1102          //

   \                                 In section .text, align 4, keep-with-next
   1103          void UpdateLEDs(void)
   1104          {
   1105          	// Adjust backlight
   1106          	PWMC_DTY0 = backlightPWMSetting;
   \                     UpdateLEDs:
   \   00000000   ........           LDR      R1,??DataTable44_3
   \   00000004   ........           LDR      R0,??DataTable44_1  ;; 0xfffc8204
   \   00000008   682091E5           LDR      R2,[R1, #+104]
   \   0000000C   002080E5           STR      R2,[R0, #+0]
   1107          	
   1108          	// Adjust tach LEDs
   1109          	if (LEDlevel != 0)
   \   00000010   5C2091E5           LDR      R2,[R1, #+92]
   \   00000014   000052E3           CMP      R2,#+0
   1110          		PWMC_DTY3 = tachLEDPWMSetting;
   \   00000018   64209115           LDRNE    R2,[R1, #+100]
   \   0000001C   60208015           STRNE    R2,[R0, #+96]
   1111          
   1112          	// Adjust warning LEDs
   1113          	if (UpperLED.warningOn)
   \   00000020   300091E5           LDR      R0,[R1, #+48]
   \   00000024   000050E3           CMP      R0,#+0
   1114          		*(volatile U32 *)UpperLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   00000028   3C009115           LDRNE    R0,[R1, #+60]
   \   0000002C   60209115           LDRNE    R2,[R1, #+96]
   \   00000030   00208015           STRNE    R2,[R0, #+0]
   1115          	if (LowerLED.warningOn)
   \   00000034   400091E5           LDR      R0,[R1, #+64]
   \   00000038   000050E3           CMP      R0,#+0
   1116          		*(volatile U32 *)LowerLED.DUTY_CYCLE_REGISTER = warningLEDPWMSetting;
   \   0000003C   4C009115           LDRNE    R0,[R1, #+76]
   \   00000040   60109115           LDRNE    R1,[R1, #+96]
   \   00000044   00108015           STRNE    R1,[R0, #+0]
   1117          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
   1118          

   \                                 In section .text, align 4, keep-with-next
   1119          void RestorePWMSettings(void)
   1120          {
   1121          	SetBacklightBrightness(sysData.backlight);
   \                     RestorePWMSettings:
   \   00000000   ........           LDR      R0,??DataTable40
   \   00000004   681090E5           LDR      R1,[R0, #+104]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0010A043           MOVMI    R1,#+0
   \   00000010   0100004A           BMI      ??RestorePWMSettings_0
   \   00000014   640051E3           CMP      R1,#+100
   \   00000018   6310A0A3           MOVGE    R1,#+99
   \                     ??RestorePWMSettings_0:
   \   0000001C   ............       ADRL     R2,BacklightBrightness
   \              ....        
   \   00000024   ........           LDR      R3,??DataTable42  ;; 0xfffc8204
   \   00000028   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   0000002C   ........           LDR      R2,??DataTable44_3
   \   00000030   681082E5           STR      R1,[R2, #+104]
   \   00000034   001083E5           STR      R1,[R3, #+0]
   1122          
   1123            	warningLEDPWMSetting = WarningLEDBrightness[sysData.LEDBrightness];		// Set Upper MB LED
   \   00000038   701090E5           LDR      R1,[R0, #+112]
   \   0000003C   ............       ADRL     R3,WarningLEDBrightness
   \              ....        
   1124            	tachLEDPWMSetting = TachLEDBrightness[sysData.LEDBrightness];			// Set tach LEDs
   \   00000044   700090E5           LDR      R0,[R0, #+112]
   \   00000048   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   0000004C   601082E5           STR      R1,[R2, #+96]
   \   00000050   ............       ADRL     R1,TachLEDBrightness
   \              ....        
   \   00000058   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000005C   640082E5           STR      R0,[R2, #+100]
   1125          }
   \   00000060   1EFF2FE1           BX       LR               ;; return
   1126          
   1127          
   1128          /*********************************************************************
   1129          *
   1130          *       LED Handler Task
   1131          *
   1132          * Function decription:
   1133          *   Monitors and maintains LED brightness accounting for ambient light
   1134          *	 and LED board temperatures.
   1135          *
   1136          */

   \                                 In section .text, align 4, keep-with-next
   1137          void LEDHandlerTask(void)
   1138          {
   \                     LEDHandlerTask:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1139          	while (1)
   1140          	{
   1141          		CheckDisplayConditions();		// Check ambient light for LED brightness and board temperature for duty cycle
   \                     ??LEDHandlerTask_0:
   \   00000008   ........           BL       CheckDisplayConditions
   1142          		OS_Delay(LED_UPDATE_CYCLE);
   \   0000000C   FA1FA0E3           MOV      R1,#+1000
   \   00000010   0500A0E3           MOV      R0,#+5
   \   00000014   ........           BL       PF_OS_Delay
   \   00000018   FAFFFFEA           B        ??LEDHandlerTask_0
   1143          	}
   1144          }
   1145          
   1146          #endif
   1147          

   \                                 In section .text, align 4, keep-with-next
   1148          void InitializeLEDStructures(void)
   1149          {
   1150          	// Initialize structures for warning LED handling
   1151          	UpperLED.warningOn = FALSE;
   \                     InitializeLEDStructures:
   \   00000000   ........           LDR      R0,??DataTable44_3
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   301080E5           STR      R1,[R0, #+48]
   1152          	UpperLED.flashStartTime = 0;
   \   0000000C   381080E5           STR      R1,[R0, #+56]
   1153          	LowerLED.flashStartTime = 0;
   \   00000010   481080E5           STR      R1,[R0, #+72]
   1154          
   1155          #ifdef _WINDOWS
   1156          	UpperLED.LED_ID = WARNING_LED_1;
   1157          	LowerLED.LED_ID = WARNING_LED_2;
   1158          #else
   1159          	UpperLED.DUTY_CYCLE_REGISTER = 0xFFFC8224;		// PWMC_DTY1
   \   00000014   ........           LDR      R1,??DataTable44_4  ;; 0xfffc8224
   \   00000018   3C1080E5           STR      R1,[R0, #+60]
   1160          	LowerLED.DUTY_CYCLE_REGISTER = 0xFFFC8244;		// PWMC_DTY2
   \   0000001C   201081E2           ADD      R1,R1,#+32
   \   00000020   4C1080E5           STR      R1,[R0, #+76]
   1161          #endif
   1162          }
   \   00000024   1EFF2FE1           BX       LR               ;; return
   1163          
   1164          

   \                                 In section .text, align 4, keep-with-next
   1165          void InitializeLEDs(void)
   1166          {
   \                     InitializeLEDs:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1167          #ifndef _WINDOWS
   1168          	RestorePWMSettings();
   \   00000008   ........           BL       RestorePWMSettings
   1169          	ResumeEnvironmentalUpdates();		// Start LEDs updating
   \   0000000C   ........           LDR      R0,??DataTable44_3
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   7C1080E5           STR      R1,[R0, #+124]
   1170          #endif
   1171          }
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   1172          
   1173          

   \                                 In section .text, align 4, keep-with-next
   1174          void WarningPopupInit(void)
   1175          {
   \                     WarningPopupInit:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   1176          	hUpperWarning = BUTTON_CreateEx(POPUP_LEFT_POS, UPPER_POPUP_POS, WARNING_POPUP_WIDTH, 40, WM_GetDesktopWindow(), WM_CF_HIDE | WM_CF_MEMDEV | WM_CF_STAYONTOP | WM_CF_DISABLED, 0, 0);
   \   00000008   ........           BL       WM_GetDesktopWindow
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0C108DE5           STR      R1,[SP, #+12]
   \   00000014   08108DE5           STR      R1,[SP, #+8]
   \   00000018   1C10A0E3           MOV      R1,#+28
   \   0000001C   04108DE5           STR      R1,[SP, #+4]
   \   00000020   00008DE5           STR      R0,[SP, #+0]
   \   00000024   2830A0E3           MOV      R3,#+40
   \   00000028   FA20A0E3           MOV      R2,#+250
   \   0000002C   1610A0E3           MOV      R1,#+22
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   ........           BL       BUTTON_CreateEx
   \   00000038   ........           LDR      R4,??DataTable44_3
   1177          	BUTTON_SetBitmap(hUpperWarning, BUTTON_BI_UNPRESSED, &bmWarningPopupBlank);
   \   0000003C   ........           LDR      R5,??DataTable44_5
   \   00000040   800084E5           STR      R0,[R4, #+128]
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       BUTTON_SetBitmap
   1178          
   1179          	hLowerWarning = BUTTON_CreateEx(POPUP_LEFT_POS, LOWER_POPUP_POS, WARNING_POPUP_WIDTH, 40, WM_GetDesktopWindow(), WM_CF_HIDE | WM_CF_MEMDEV | WM_CF_STAYONTOP | WM_CF_DISABLED, 0, 0);
   \   00000050   ........           BL       WM_GetDesktopWindow
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0C108DE5           STR      R1,[SP, #+12]
   \   0000005C   08108DE5           STR      R1,[SP, #+8]
   \   00000060   1C10A0E3           MOV      R1,#+28
   \   00000064   04108DE5           STR      R1,[SP, #+4]
   \   00000068   00008DE5           STR      R0,[SP, #+0]
   \   0000006C   2830A0E3           MOV      R3,#+40
   \   00000070   FA20A0E3           MOV      R2,#+250
   \   00000074   3E10A0E3           MOV      R1,#+62
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   ........           BL       BUTTON_CreateEx
   \   00000080   840084E5           STR      R0,[R4, #+132]
   1180          	BUTTON_SetBitmap(hLowerWarning, BUTTON_BI_UNPRESSED, &bmWarningPopupBlank);
   \   00000084   0520A0E1           MOV      R2,R5
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   ........           BL       BUTTON_SetBitmap
   1181          
   1182          	BUTTON_SetTextColor(hLowerWarning, BUTTON_BI_DISABLED, GUI_WHITE);
   \   00000090   FF54E0E3           MVN      R5,#-16777216
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0210A0E3           MOV      R1,#+2
   \   0000009C   840094E5           LDR      R0,[R4, #+132]
   \   000000A0   ........           BL       BUTTON_SetTextColor
   1183          	BUTTON_SetTextColor(hUpperWarning, BUTTON_BI_DISABLED, GUI_WHITE);
   \   000000A4   0520A0E1           MOV      R2,R5
   \   000000A8   0210A0E3           MOV      R1,#+2
   \   000000AC   800094E5           LDR      R0,[R4, #+128]
   \   000000B0   ........           BL       BUTTON_SetTextColor
   1184          	BUTTON_SetPressed(hUpperWarning, 1);
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   800094E5           LDR      R0,[R4, #+128]
   \   000000BC   ........           BL       BUTTON_SetPressed
   1185          	BUTTON_SetPressed(hLowerWarning, 1);
   \   000000C0   840094E5           LDR      R0,[R4, #+132]
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   3040BDE8           POP      {R4,R5,LR}
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   ........           B        BUTTON_SetPressed  ;; tailcall
   1186          }
   1187          
   1188          

   \                                 In section .text, align 4, keep-with-next
   1189          void CheckWarningPopups(void)
   1190          {
   \                     CheckWarningPopups:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1191          	char i, gaugeScreen;
   1192          
   1193          	if (AnyGaugeScreen(GetScreenType()))	// If currently on a gauge screen
   \   00000008   ........           BL       GetScreenType
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   ........           BL       AnyGaugeScreen
   1194          		gaugeScreen = true;
   1195          	else gaugeScreen = false;
   1196          
   1197          	for (i = 0; i < 2; i++)
   \   00000014   ........           LDR      R7,??DataTable44_3
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0150A013           MOVNE    R5,#+1
   \   00000020   0050A003           MOVEQ    R5,#+0
   \   00000024   0060A0E3           MOV      R6,#+0
   \   00000028   888087E2           ADD      R8,R7,#+136
   \   0000002C   ........           ADR      R9,??DataTable39  ;; ""
   1198          	{
   1199          		if (WarningPopups[i].on)
   \                     ??CheckWarningPopups_0:
   \   00000030   0010D8E5           LDRB     R1,[R8, #+0]
   \   00000034   0100D8E5           LDRB     R0,[R8, #+1]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   1100000A           BEQ      ??CheckWarningPopups_1
   1200          		{
   1201          			if (!WarningPopups[i].visible)
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00001A           BNE      ??CheckWarningPopups_2
   1202          				CreateWarningPopup(i);
   \   00000048   000056E3           CMP      R6,#+0
   \   0000004C   0300000A           BEQ      ??CheckWarningPopups_3
   \   00000050   840097E5           LDR      R0,[R7, #+132]
   \   00000054   ........           BL       WM_ShowWindow
   \   00000058   840097E5           LDR      R0,[R7, #+132]
   \   0000005C   020000EA           B        ??CheckWarningPopups_4
   \                     ??CheckWarningPopups_3:
   \   00000060   800097E5           LDR      R0,[R7, #+128]
   \   00000064   ........           BL       WM_ShowWindow
   \   00000068   800097E5           LDR      R0,[R7, #+128]
   \                     ??CheckWarningPopups_4:
   \   0000006C   ........           BL       WM_BringToTop
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   0100C8E5           STRB     R0,[R8, #+1]
   1203          			UpdateWarningPopup(i, gaugeScreen);
   \                     ??CheckWarningPopups_2:
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       UpdateWarningPopup
   \   00000084   1B0000EA           B        ??CheckWarningPopups_5
   1204          		}
   1205          		else if (WarningPopups[i].visible)
   \                     ??CheckWarningPopups_1:
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   1900000A           BEQ      ??CheckWarningPopups_5
   1206          			DeleteWarningPopup(i, gaugeScreen);
   \   00000090   000056E3           CMP      R6,#+0
   \   00000094   0400000A           BEQ      ??CheckWarningPopups_6
   \   00000098   840097E5           LDR      R0,[R7, #+132]
   \   0000009C   ........           BL       WM_HideWindow
   \   000000A0   0910A0E1           MOV      R1,R9
   \   000000A4   840097E5           LDR      R0,[R7, #+132]
   \   000000A8   030000EA           B        ??CheckWarningPopups_7
   \                     ??CheckWarningPopups_6:
   \   000000AC   800097E5           LDR      R0,[R7, #+128]
   \   000000B0   ........           BL       WM_HideWindow
   \   000000B4   0910A0E1           MOV      R1,R9
   \   000000B8   800097E5           LDR      R0,[R7, #+128]
   \                     ??CheckWarningPopups_7:
   \   000000BC   ........           BL       BUTTON_SetText
   \   000000C0   0140C8E5           STRB     R4,[R8, #+1]
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   0A00000A           BEQ      ??CheckWarningPopups_5
   \   000000CC   000056E3           CMP      R6,#+0
   \   000000D0   0300000A           BEQ      ??CheckWarningPopups_8
   \   000000D4   6630A0E3           MOV      R3,#+102
   \   000000D8   FA20A0E3           MOV      R2,#+250
   \   000000DC   3E10A0E3           MOV      R1,#+62
   \   000000E0   020000EA           B        ??CheckWarningPopups_9
   \                     ??CheckWarningPopups_8:
   \   000000E4   3E30A0E3           MOV      R3,#+62
   \   000000E8   FA20A0E3           MOV      R2,#+250
   \   000000EC   1610A0E3           MOV      R1,#+22
   \                     ??CheckWarningPopups_9:
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   ........           BL       GUI_ClearRect
   1207          	}
   \                     ??CheckWarningPopups_5:
   \   000000F8   016086E2           ADD      R6,R6,#+1
   \   000000FC   028088E2           ADD      R8,R8,#+2
   \   00000100   020056E3           CMP      R6,#+2
   \   00000104   C9FFFF3A           BCC      ??CheckWarningPopups_0
   1208          }
   \   00000108   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
   1209          
   1210          

   \                                 In section .text, align 4, keep-with-next
   1211          void CreateWarningPopup(char i)
   1212          {
   \                     CreateWarningPopup:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1213          	if (i)
   \   0000000C   ........           LDR      R5,??DataTable44_3
   \   00000010   0300000A           BEQ      ??CreateWarningPopup_0
   1214          	{
   1215          		WM_ShowWindow(hLowerWarning);
   \   00000014   840095E5           LDR      R0,[R5, #+132]
   \   00000018   ........           BL       WM_ShowWindow
   1216          		WM_BringToTop(hLowerWarning);
   \   0000001C   840095E5           LDR      R0,[R5, #+132]
   \   00000020   020000EA           B        ??CreateWarningPopup_1
   1217          	}
   1218          	else
   1219          	{
   1220          		WM_ShowWindow(hUpperWarning);
   \                     ??CreateWarningPopup_0:
   \   00000024   800095E5           LDR      R0,[R5, #+128]
   \   00000028   ........           BL       WM_ShowWindow
   1221          		WM_BringToTop(hUpperWarning);
   \   0000002C   800095E5           LDR      R0,[R5, #+128]
   \                     ??CreateWarningPopup_1:
   \   00000030   ........           BL       WM_BringToTop
   1222          	}
   1223          
   1224          	WarningPopups[i].visible = true;
   \   00000034   840085E0           ADD      R0,R5,R4, LSL #+1
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   8910C0E5           STRB     R1,[R0, #+137]
   1225          }
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
   1226          
   1227          

   \                                 In section .text, align 4, keep-with-next
   1228          void DeleteWarningPopup(char i, char gaugeScreen)
   1229          {
   \                     DeleteWarningPopup:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1230          	if (i)
   \   00000010   ........           ADR      R6,??DataTable39  ;; ""
   \   00000014   ........           LDR      R7,??DataTable44_3
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0400000A           BEQ      ??DeleteWarningPopup_0
   1231          	{
   1232          		WM_HideWindow(hLowerWarning);
   \   00000020   840097E5           LDR      R0,[R7, #+132]
   \   00000024   ........           BL       WM_HideWindow
   1233          		BUTTON_SetText(hLowerWarning, "");			// Clear out text so next time it shows it is initially blank until explicitly set
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   840097E5           LDR      R0,[R7, #+132]
   \   00000030   030000EA           B        ??DeleteWarningPopup_1
   1234          	}
   1235          	else
   1236          	{
   1237          		WM_HideWindow(hUpperWarning);
   \                     ??DeleteWarningPopup_0:
   \   00000034   800097E5           LDR      R0,[R7, #+128]
   \   00000038   ........           BL       WM_HideWindow
   1238          		BUTTON_SetText(hUpperWarning, "");			// Clear out text so next time it shows it is initially blank until explicitly set
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   800097E5           LDR      R0,[R7, #+128]
   \                     ??DeleteWarningPopup_1:
   \   00000044   ........           BL       BUTTON_SetText
   1239          	}
   1240          	
   1241          	WarningPopups[i].visible = false;
   \   00000048   840087E0           ADD      R0,R7,R4, LSL #+1
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   8910C0E5           STRB     R1,[R0, #+137]
   1242          
   1243          	if (gaugeScreen)
   \   00000054   000055E3           CMP      R5,#+0
   \   00000058   0A00000A           BEQ      ??DeleteWarningPopup_2
   1244          	{
   1245          		if (i)
   \   0000005C   000054E3           CMP      R4,#+0
   \   00000060   0300000A           BEQ      ??DeleteWarningPopup_3
   1246          			GUI_ClearRect(POPUP_LEFT_POS, LOWER_POPUP_POS, POPUP_LEFT_POS + WARNING_POPUP_WIDTH, LOWER_POPUP_POS + WARNING_POPUP_HEIGHT);
   \   00000064   6630A0E3           MOV      R3,#+102
   \   00000068   FA20A0E3           MOV      R2,#+250
   \   0000006C   3E10A0E3           MOV      R1,#+62
   \   00000070   020000EA           B        ??DeleteWarningPopup_4
   1247          		else GUI_ClearRect(POPUP_LEFT_POS, UPPER_POPUP_POS, POPUP_LEFT_POS + WARNING_POPUP_WIDTH, UPPER_POPUP_POS + WARNING_POPUP_HEIGHT);
   \                     ??DeleteWarningPopup_3:
   \   00000074   3E30A0E3           MOV      R3,#+62
   \   00000078   FA20A0E3           MOV      R2,#+250
   \   0000007C   1610A0E3           MOV      R1,#+22
   \                     ??DeleteWarningPopup_4:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   ........           BL       GUI_ClearRect
   1248          	}
   1249          }
   \                     ??DeleteWarningPopup_2:
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
   1250          
   1251          

   \                                 In section .text, align 4, keep-with-next
   1252          void DrawWarningPopups(char i, char *pText, int alarmCount)
   1253          {
   \                     DrawWarningPopups:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   1254          	int justify;
   1255          
   1256          	GUI_SetColor(GUI_WHITE);
   \   00000014   FF04E0E3           MVN      R0,#-16777216
   \   00000018   ........           BL       GUI_SetColor
   1257          
   1258          	if (alarmCount == 1)
   \   0000001C   010056E3           CMP      R6,#+1
   \   00000020   0300001A           BNE      ??DrawWarningPopups_0
   1259          	{
   1260          		GUI_SetFont(&GUI_Font24_ASCII);
   \   00000024   ........           LDR      R0,??DataTable44_6
   \   00000028   ........           BL       GUI_SetFont
   1261          		justify = GUI_TA_HCENTER | GUI_TA_VCENTER;
   \   0000002C   0E70A0E3           MOV      R7,#+14
   \   00000030   040000EA           B        ??DrawWarningPopups_1
   1262          	}
   1263          	else
   1264          	{
   1265          		justify = GUI_TA_LEFT | GUI_TA_VCENTER;
   1266          		if (alarmCount == 2)
   \                     ??DrawWarningPopups_0:
   \   00000034   020056E3           CMP      R6,#+2
   \   00000038   0C70A0E3           MOV      R7,#+12
   1267          			GUI_SetFont(&GUI_Font16_ASCII);
   \   0000003C   ........           LDREQ    R0,??DataTable44_7
   1268          		else GUI_SetFont(&GUI_Font10_ASCII);
   \   00000040   ........           LDRNE    R0,??DataTable44_8
   \   00000044   ........           BL       GUI_SetFont
   1269          	}
   1270          
   1271          	GUI_SetTextMode(GUI_TEXTMODE_NORMAL);
   \                     ??DrawWarningPopups_1:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   ........           BL       GUI_SetTextMode
   1272          	if (i)
   \   00000050   ........           LDR      R0,??DataTable44_5
   \   00000054   000054E3           CMP      R4,#+0
   \   00000058   0600000A           BEQ      ??DrawWarningPopups_2
   1273          	{
   1274          		GUI_DrawBitmap(&bmWarningPopupBlank, POPUP_LEFT_POS, LOWER_POPUP_POS);
   \   0000005C   3E20A0E3           MOV      R2,#+62
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   ........           BL       GUI_DrawBitmap
   1275          		GUI_DispStringInRect(pText, (GUI_RECT *)&LowerRect, justify);
   \   00000068   0720A0E1           MOV      R2,R7
   \   0000006C   ............       ADRL     R1,LowerRect
   \              ....        
   \   00000074   050000EA           B        ??DrawWarningPopups_3
   1276          	}
   1277          	else
   1278          	{
   1279          		GUI_DrawBitmap(&bmWarningPopupBlank, POPUP_LEFT_POS, UPPER_POPUP_POS);
   \                     ??DrawWarningPopups_2:
   \   00000078   1620A0E3           MOV      R2,#+22
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   ........           BL       GUI_DrawBitmap
   1280          		GUI_DispStringInRect(pText, (GUI_RECT *)&UpperRect, justify);
   \   00000084   0720A0E1           MOV      R2,R7
   \   00000088   ............       ADRL     R1,UpperRect
   \              ....        
   \                     ??DrawWarningPopups_3:
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   04D08DE2           ADD      SP,SP,#+4
   \   00000098   F040BDE8           POP      {R4-R7,LR}
   \   0000009C   ........           B        GUI_DispStringInRect  ;; tailcall
   1281          	}
   1282          }
   1283          

   \                                 In section .text, align 4, keep-with-next
   1284          void UpdateWarningPopup(char i, char gaugeScreen)
   1285          {
   \                     UpdateWarningPopup:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   60DF4DE2           SUB      SP,SP,#+384
   1286          	int j, alarmCount;
   1287          	char scratch[50], outputString[306];
   1288          
   1289          	outputString[0] = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   1810CDE5           STRB     R1,[SP, #+24]
   1290          	for (j = alarmCount = 0; j < 6; j++)
   \   00000010   ........           LDR      R2,??DataTable44_9
   \   00000014   ........           LDR      R6,??DataTable44_10
   \   00000018   0610A0E3           MOV      R1,#+6
   \   0000001C   0090A0E1           MOV      R9,R0
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   0040A0E3           MOV      R4,#+0
   \   00000028   812005E1           SMLABB   R5,R1,R0,R2
   \   0000002C   0670A0E1           MOV      R7,R6
   \   00000030   ............       ADRL     R11,`?<Constant "%s = %s">`
   \              ....        
   \   00000038   ........           ADR      R10,??DataTable42_1  ;; 0x2C, 0x20, 0x00, 0x00
   1291          	{
   1292          		if (AlarmTriggerCause[i][j])
   \                     ??UpdateWarningPopup_0:
   \   0000003C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   2100000A           BEQ      ??UpdateWarningPopup_1
   1293          		{
   1294          			if (++alarmCount > 1)
   \   00000048   018088E2           ADD      R8,R8,#+1
   \   0000004C   020058E3           CMP      R8,#+2
   \   00000050   020000BA           BLT      ??UpdateWarningPopup_2
   1295          				strcat(outputString, ", ");
   \   00000054   0A10A0E1           MOV      R1,R10
   \   00000058   18008DE2           ADD      R0,SP,#+24
   \   0000005C   ........           BL       strcat
   1296          
   1297          			if (j < 4)
   \                     ??UpdateWarningPopup_2:
   \   00000060   040054E3           CMP      R4,#+4
   \   00000064   0E0000AA           BGE      ??UpdateWarningPopup_3
   1298          			{
   1299          				float tempfloat = GetValue((GlobalDataIndexType) (ANALOG_INPUT_0 + j)).fVal;
   \   00000068   361084E2           ADD      R1,R4,#+54
   \   0000006C   FF1001E2           AND      R1,R1,#0xFF
   \   00000070   10008DE2           ADD      R0,SP,#+16
   \   00000074   ........           BL       GetValue
   1300          
   1301          				sprintf(scratch, "%s = %0.1f%s", vehicleData.analogInput[j].Name, tempfloat, vehicleData.analogInput[j].Units);
   \   00000078   890087E2           ADD      R0,R7,#+137
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   10009DE5           LDR      R0,[SP, #+16]
   \   00000084   ........           BL       __aeabi_f2d
   \   00000088   03008DE8           STM      SP,{R0,R1}
   \   0000008C   782087E2           ADD      R2,R7,#+120
   \   00000090   ............       ADRL     R1,`?<Constant "%s = %0.1f%s">`
   \              ....        
   \   00000098   530F8DE2           ADD      R0,SP,#+332
   \   0000009C   ........           BL       sprintf
   \   000000A0   070000EA           B        ??UpdateWarningPopup_4
   1302          			}
   1303          			else
   1304          			{
   1305          				// handle digital
   1306          				sprintf(scratch, "%s = %s", vehicleData.digitalInput[j-4].Name,
   1307          						vehicleData.digitalInput[j-4].alarmTriggerState ? vehicleData.digitalInput[j-4].HighName : vehicleData.digitalInput[j-4].LowName);
   \                     ??UpdateWarningPopup_3:
   \   000000A4   D80ED6E1           LDRSB    R0,[R6, #+232]
   \   000000A8   BC2086E2           ADD      R2,R6,#+188
   \   000000AC   0B10A0E1           MOV      R1,R11
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   CD308612           ADDNE    R3,R6,#+205
   \   000000B8   DA308602           ADDEQ    R3,R6,#+218
   \   000000BC   530F8DE2           ADD      R0,SP,#+332
   \   000000C0   ........           BL       sprintf
   1308          			}
   1309          			strcat(outputString, scratch);
   \                     ??UpdateWarningPopup_4:
   \   000000C4   531F8DE2           ADD      R1,SP,#+332
   \   000000C8   18008DE2           ADD      R0,SP,#+24
   \   000000CC   ........           BL       strcat
   1310          		}
   1311          	}
   \                     ??UpdateWarningPopup_1:
   \   000000D0   014084E2           ADD      R4,R4,#+1
   \   000000D4   407087E2           ADD      R7,R7,#+64
   \   000000D8   2F6086E2           ADD      R6,R6,#+47
   \   000000DC   015085E2           ADD      R5,R5,#+1
   \   000000E0   060054E3           CMP      R4,#+6
   \   000000E4   D4FFFFBA           BLT      ??UpdateWarningPopup_0
   1312          
   1313          	if (!gaugeScreen)
   \   000000E8   8001DDE5           LDRB     R0,[SP, #+384]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   1800001A           BNE      ??UpdateWarningPopup_5
   1314          	{
   1315          		BUTTON_Handle hButton;
   1316          
   1317          		if (i)
   \   000000F4   ........           LDR      R0,??DataTable44_3
   \   000000F8   000059E3           CMP      R9,#+0
   1318          			hButton = hLowerWarning;
   \   000000FC   84409015           LDRNE    R4,[R0, #+132]
   1319          		else hButton = hUpperWarning;
   \   00000100   80409005           LDREQ    R4,[R0, #+128]
   1320          
   1321          		BUTTON_SetText(hButton, outputString);
   \   00000104   18108DE2           ADD      R1,SP,#+24
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       BUTTON_SetText
   1322          		if (alarmCount == 1)
   \   00000110   010058E3           CMP      R8,#+1
   \   00000114   0600001A           BNE      ??UpdateWarningPopup_6
   1323          		{
   1324          			BUTTON_SetFont(hButton, &GUI_Font24_ASCII);
   \   00000118   ........           LDR      R1,??DataTable44_6
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       BUTTON_SetFont
   1325          			BUTTON_SetTextAlign(hButton, GUI_TA_HCENTER | GUI_TA_VCENTER);
   \   00000124   0E10A0E3           MOV      R1,#+14
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       BUTTON_SetTextAlign
   \   00000130   290000EA           B        ??UpdateWarningPopup_7
   1326          		}
   1327          		else
   1328          		{
   1329          			BUTTON_SetTextAlign(hButton, GUI_TA_LEFT | GUI_TA_VCENTER);
   \                     ??UpdateWarningPopup_6:
   \   00000134   0C10A0E3           MOV      R1,#+12
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       BUTTON_SetTextAlign
   1330          			if (alarmCount == 2)
   \   00000140   020058E3           CMP      R8,#+2
   1331          				BUTTON_SetFont(hButton, &GUI_Font16_ASCII);
   \   00000144   ........           LDREQ    R1,??DataTable44_7
   \   00000148   ........           LDRNE    R1,??DataTable44_8
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           BL       BUTTON_SetFont
   \   00000154   200000EA           B        ??UpdateWarningPopup_7
   1332          			else BUTTON_SetFont(hButton, &GUI_Font10_ASCII);
   1333          		}
   1334          	}
   1335          	else DrawWarningPopups(i, outputString, alarmCount);
   \                     ??UpdateWarningPopup_5:
   \   00000158   FF04E0E3           MVN      R0,#-16777216
   \   0000015C   ........           BL       GUI_SetColor
   \   00000160   010058E3           CMP      R8,#+1
   \   00000164   0500000A           BEQ      ??UpdateWarningPopup_8
   \   00000168   020058E3           CMP      R8,#+2
   \   0000016C   0C40A0E3           MOV      R4,#+12
   \   00000170   ........           LDRNE    R0,??DataTable44_8
   \   00000174   ........           LDREQ    R0,??DataTable44_7
   \   00000178   ........           BL       GUI_SetFont
   \   0000017C   020000EA           B        ??UpdateWarningPopup_9
   \                     ??UpdateWarningPopup_8:
   \   00000180   ........           LDR      R0,??DataTable44_6
   \   00000184   ........           BL       GUI_SetFont
   \   00000188   0E40A0E3           MOV      R4,#+14
   \                     ??UpdateWarningPopup_9:
   \   0000018C   0000A0E3           MOV      R0,#+0
   \   00000190   ........           BL       GUI_SetTextMode
   \   00000194   ........           LDR      R0,??DataTable44_5
   \   00000198   000059E3           CMP      R9,#+0
   \   0000019C   0600000A           BEQ      ??UpdateWarningPopup_10
   \   000001A0   3E20A0E3           MOV      R2,#+62
   \   000001A4   0010A0E3           MOV      R1,#+0
   \   000001A8   ........           BL       GUI_DrawBitmap
   \   000001AC   0420A0E1           MOV      R2,R4
   \   000001B0   ............       ADRL     R1,LowerRect
   \              ....        
   \   000001B8   050000EA           B        ??UpdateWarningPopup_11
   \                     ??UpdateWarningPopup_10:
   \   000001BC   1620A0E3           MOV      R2,#+22
   \   000001C0   0010A0E3           MOV      R1,#+0
   \   000001C4   ........           BL       GUI_DrawBitmap
   \   000001C8   0420A0E1           MOV      R2,R4
   \   000001CC   ............       ADRL     R1,UpperRect
   \              ....        
   \                     ??UpdateWarningPopup_11:
   \   000001D4   18008DE2           ADD      R0,SP,#+24
   \   000001D8   ........           BL       GUI_DispStringInRect
   1336          }
   \                     ??UpdateWarningPopup_7:
   \   000001DC   61DF8DE2           ADD      SP,SP,#+388      ;; stack cleaning
   \   000001E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1337          

   \                                 In section .text, align 4, keep-with-next
   1338          void DecreaseLEDBrightness(void)
   1339          {
   1340          	signed int temp;
   1341          			
   1342          	sysData.autoAdjustOn = false;					// Manually adjusting light levels turn off auto-adjust
   \                     DecreaseLEDBrightness:
   \   00000000   ........           LDR      R2,??DataTable44_2
   \   00000004   0010A0E3           MOV      R1,#+0
   1343          	temp = sysData.LEDBrightness;
   1344          	if ((temp -= BRIGHTNESS_QUICK_STEP) < MINIMUM_BRIGHTNESS)
   \   00000008   700092E5           LDR      R0,[R2, #+112]
   \   0000000C   6C10C2E5           STRB     R1,[R2, #+108]
   \   00000010   0A0050E2           SUBS     R0,R0,#+10
   1345          		temp = MINIMUM_BRIGHTNESS;
   \   00000014   0000A043           MOVMI    R0,#+0
   1346          	sysData.LEDBrightness = temp;
   \   00000018   700082E5           STR      R0,[R2, #+112]
   1347          
   1348          #ifndef _WINDOWS
   1349          	lightCorrection = 0;
   \   0000001C   ........           LDR      R0,??DataTable44_3
   1350          	UpdateTachPWMVariable();
   \   00000020   703092E5           LDR      R3,[R2, #+112]
   \   00000024   741080E5           STR      R1,[R0, #+116]
   \   00000028   701090E5           LDR      R1,[R0, #+112]
   \   0000002C   033081E0           ADD      R3,R1,R3
   \   00000030   640053E3           CMP      R3,#+100
   \   00000034   030000AA           BGE      ??DecreaseLEDBrightness_0
   \   00000038   000053E3           CMP      R3,#+0
   \   0000003C   0200005A           BPL      ??DecreaseLEDBrightness_1
   \   00000040   0030A0E3           MOV      R3,#+0
   \   00000044   000000EA           B        ??DecreaseLEDBrightness_1
   \                     ??DecreaseLEDBrightness_0:
   \   00000048   6330A0E3           MOV      R3,#+99
   \                     ??DecreaseLEDBrightness_1:
   \   0000004C   ............       ADRL     R12,TachLEDBrightness
   \              ....        
   \   00000054   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000058   643080E5           STR      R3,[R0, #+100]
   1351          	UpdateWarningPWMVariable();
   \   0000005C   703092E5           LDR      R3,[R2, #+112]
   \   00000060   031081E0           ADD      R1,R1,R3
   \   00000064   640051E3           CMP      R1,#+100
   \   00000068   030000AA           BGE      ??DecreaseLEDBrightness_2
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   0200005A           BPL      ??DecreaseLEDBrightness_3
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   000000EA           B        ??DecreaseLEDBrightness_3
   \                     ??DecreaseLEDBrightness_2:
   \   0000007C   6310A0E3           MOV      R1,#+99
   \                     ??DecreaseLEDBrightness_3:
   \   00000080   ............       ADRL     R3,WarningLEDBrightness
   \              ....        
   \   00000088   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   0000008C   601080E5           STR      R1,[R0, #+96]
   1352          	SetLEDBrightness(sysData.LEDBrightness);		// light up all LEDs to gauge brightness
   \   00000090   701092E5           LDR      R1,[R2, #+112]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   0010A043           MOVMI    R1,#+0
   \   0000009C   0100004A           BMI      ??DecreaseLEDBrightness_4
   \   000000A0   640051E3           CMP      R1,#+100
   \   000000A4   6310A0A3           MOVGE    R1,#+99
   \                     ??DecreaseLEDBrightness_4:
   \   000000A8   012193E7           LDR      R2,[R3, +R1, LSL #+2]
   \   000000AC   3C3090E5           LDR      R3,[R0, #+60]
   \   000000B0   602080E5           STR      R2,[R0, #+96]
   \   000000B4   002083E5           STR      R2,[R3, #+0]
   \   000000B8   4C3090E5           LDR      R3,[R0, #+76]
   \   000000BC   002083E5           STR      R2,[R3, #+0]
   \   000000C0   01119CE7           LDR      R1,[R12, +R1, LSL #+2]
   \   000000C4   641080E5           STR      R1,[R0, #+100]
   \   000000C8   ........           LDR      R0,??DataTable44  ;; 0xfffc8264
   \   000000CC   001080E5           STR      R1,[R0, #+0]
   1353          #endif
   1354          }
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   1355          

   \                                 In section .text, align 4, keep-with-next
   1356          void IncreaseLEDBrightness(void)
   1357          {
   1358          	sysData.autoAdjustOn = false;					// Manually adjusting light levels turn off auto-adjust
   \                     IncreaseLEDBrightness:
   \   00000000   ........           LDR      R2,??DataTable44_2
   \   00000004   0010A0E3           MOV      R1,#+0
   1359          	if ((sysData.LEDBrightness += BRIGHTNESS_QUICK_STEP) > MAXIMUM_BRIGHTNESS)
   \   00000008   700092E5           LDR      R0,[R2, #+112]
   \   0000000C   6C10C2E5           STRB     R1,[R2, #+108]
   \   00000010   0A0080E2           ADD      R0,R0,#+10
   \   00000014   640050E3           CMP      R0,#+100
   1360          		sysData.LEDBrightness = MAXIMUM_BRIGHTNESS;
   \   00000018   6300A023           MOVCS    R0,#+99
   \   0000001C   700082E5           STR      R0,[R2, #+112]
   1361          
   1362          #ifndef _WINDOWS
   1363          	lightCorrection = 0;
   \   00000020   ........           LDR      R0,??DataTable44_3
   1364          	UpdateTachPWMVariable();
   \   00000024   703092E5           LDR      R3,[R2, #+112]
   \   00000028   741080E5           STR      R1,[R0, #+116]
   \   0000002C   701090E5           LDR      R1,[R0, #+112]
   \   00000030   033081E0           ADD      R3,R1,R3
   \   00000034   640053E3           CMP      R3,#+100
   \   00000038   030000AA           BGE      ??IncreaseLEDBrightness_0
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   0200005A           BPL      ??IncreaseLEDBrightness_1
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   000000EA           B        ??IncreaseLEDBrightness_1
   \                     ??IncreaseLEDBrightness_0:
   \   0000004C   6330A0E3           MOV      R3,#+99
   \                     ??IncreaseLEDBrightness_1:
   \   00000050   ............       ADRL     R12,TachLEDBrightness
   \              ....        
   \   00000058   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   0000005C   643080E5           STR      R3,[R0, #+100]
   1365          	UpdateWarningPWMVariable();
   \   00000060   703092E5           LDR      R3,[R2, #+112]
   \   00000064   031081E0           ADD      R1,R1,R3
   \   00000068   640051E3           CMP      R1,#+100
   \   0000006C   030000AA           BGE      ??IncreaseLEDBrightness_2
   \   00000070   000051E3           CMP      R1,#+0
   \   00000074   0200005A           BPL      ??IncreaseLEDBrightness_3
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   000000EA           B        ??IncreaseLEDBrightness_3
   \                     ??IncreaseLEDBrightness_2:
   \   00000080   6310A0E3           MOV      R1,#+99
   \                     ??IncreaseLEDBrightness_3:
   \   00000084   ............       ADRL     R3,WarningLEDBrightness
   \              ....        
   \   0000008C   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   00000090   601080E5           STR      R1,[R0, #+96]
   1366          	SetLEDBrightness(sysData.LEDBrightness);		// light up all LEDs to gauge brightness
   \   00000094   701092E5           LDR      R1,[R2, #+112]
   \   00000098   000051E3           CMP      R1,#+0
   \   0000009C   0010A043           MOVMI    R1,#+0
   \   000000A0   0100004A           BMI      ??IncreaseLEDBrightness_4
   \   000000A4   640051E3           CMP      R1,#+100
   \   000000A8   6310A0A3           MOVGE    R1,#+99
   \                     ??IncreaseLEDBrightness_4:
   \   000000AC   012193E7           LDR      R2,[R3, +R1, LSL #+2]
   \   000000B0   3C3090E5           LDR      R3,[R0, #+60]
   \   000000B4   602080E5           STR      R2,[R0, #+96]
   \   000000B8   002083E5           STR      R2,[R3, #+0]
   \   000000BC   4C3090E5           LDR      R3,[R0, #+76]
   \   000000C0   002083E5           STR      R2,[R3, #+0]
   \   000000C4   01119CE7           LDR      R1,[R12, +R1, LSL #+2]
   \   000000C8   641080E5           STR      R1,[R0, #+100]
   \   000000CC   ........           LDR      R0,??DataTable44  ;; 0xfffc8264
   \   000000D0   001080E5           STR      R1,[R0, #+0]
   1367          #endif
   1368          }
   \   000000D4   1EFF2FE1           BX       LR               ;; return

   \                                 In section .data, align 4
   \                     lowerLEDOnReason:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     upperLEDOnReason:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     UpperLED:
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     LowerLED:
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     AlarmTriggerCause:
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     LEDlevel:
   \   0000005C   00000000           DC32 0
   \                     warningLEDPWMSetting:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     tachLEDPWMSetting:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     backlightPWMSetting:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     tempCorrection:
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \                     totalCorrection:
   \   00000070   00000000           DC8 0, 0, 0, 0
   \                     lightCorrection:
   \   00000074   00000000           DC8 0, 0, 0, 0
   \   00000078   00000000           DC8 0, 0, 0, 0
   \   0000007C   01000000           DC32 1
   \   00000080   00000000           DC8 0, 0, 0, 0
   \   00000084   00000000           DC8 0, 0, 0, 0
   \                     WarningPopups:
   \   00000088   00000000           DC8 0, 0, 0, 0
   1369          
   1370          #define	NUM_BACKLIGHT_QUICK_STEPS	9
   1371          char BackLightQuickSteps[NUM_BACKLIGHT_QUICK_STEPS] = {0, 1, 2, 3, 9, 15, 25, 35, 99};
   \                     BackLightQuickSteps:
   \   0000008C   00010203090F       DC8 0, 1, 2, 3, 9, 15, 25, 35, 99, 0, 0, 0
   \              192363000000

   \                                 In section .data, align 2
   \                     mask:
   \   00000000   0100               DC16 1

   \                                 In section .text, align 4, keep-with-next
   1372          void DecreaseBacklightBrightness(void)
   1373          {
   \                     DecreaseBacklightBrightness:
   \   00000000   00402DE9           PUSH     {LR}
   1374          	int i;
   1375          			
   1376          	sysData.autoAdjustOn = false;					// Manually adjusting light levels turn off auto-adjust
   \   00000004   ........           LDR      R2,??DataTable44_2
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   6C10C2E5           STRB     R1,[R2, #+108]
   1377          	for (i = NUM_BACKLIGHT_QUICK_STEPS - 1; i >= 0; i--)
   \   00000010   0830A0E3           MOV      R3,#+8
   \   00000014   68C092E5           LDR      R12,[R2, #+104]
   \   00000018   ........           LDR      R0,??DataTable44_3
   1378          		if (sysData.backlight > BackLightQuickSteps[i])
   \                     ??DecreaseBacklightBrightness_0:
   \   0000001C   00E083E0           ADD      LR,R3,R0
   \   00000020   8CE0DEE5           LDRB     LR,[LR, #+140]
   \   00000024   0C005EE1           CMP      LR,R12
   \   00000028   0100003A           BCC      ??DecreaseBacklightBrightness_1
   \   0000002C   013053E2           SUBS     R3,R3,#+1
   \   00000030   F9FFFF5A           BPL      ??DecreaseBacklightBrightness_0
   1379          			break;
   1380          	sysData.backlight = BackLightQuickSteps[i];
   \                     ??DecreaseBacklightBrightness_1:
   \   00000034   003083E0           ADD      R3,R3,R0
   \   00000038   8C30D3E5           LDRB     R3,[R3, #+140]
   1381          	
   1382          #ifndef _WINDOWS
   1383          	lightCorrection = 0;
   \   0000003C   741080E5           STR      R1,[R0, #+116]
   1384          	UpdateBacklightPWMVariable();
   \   00000040   701090E5           LDR      R1,[R0, #+112]
   \   00000044   683082E5           STR      R3,[R2, #+104]
   \   00000048   5A0071E3           CMN      R1,#+90
   \   0000004C   5910E0B3           MVNLT    R1,#+89
   \   00000050   031081E0           ADD      R1,R1,R3
   \   00000054   640051E3           CMP      R1,#+100
   \   00000058   030000AA           BGE      ??DecreaseBacklightBrightness_2
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   0200005A           BPL      ??DecreaseBacklightBrightness_3
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   000000EA           B        ??DecreaseBacklightBrightness_3
   \                     ??DecreaseBacklightBrightness_2:
   \   0000006C   6310A0E3           MOV      R1,#+99
   \                     ??DecreaseBacklightBrightness_3:
   \   00000070   ........           ADR      R3,BacklightBrightness
   \   00000074   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   00000078   681080E5           STR      R1,[R0, #+104]
   1385          	SetBacklightBrightness(sysData.backlight);
   \   0000007C   681092E5           LDR      R1,[R2, #+104]
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   0010A043           MOVMI    R1,#+0
   \   00000088   0100004A           BMI      ??DecreaseBacklightBrightness_4
   \   0000008C   640051E3           CMP      R1,#+100
   \   00000090   6310A0A3           MOVGE    R1,#+99
   \                     ??DecreaseBacklightBrightness_4:
   \   00000094   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   00000098   681080E5           STR      R1,[R0, #+104]
   \   0000009C   ........           LDR      R0,??DataTable44_1  ;; 0xfffc8204
   \   000000A0   001080E5           STR      R1,[R0, #+0]
   1386          #endif
   1387          }
   \   000000A4   0080BDE8           POP      {PC}             ;; return
   1388          

   \                                 In section .text, align 4, keep-with-next
   1389          void IncreaseBacklightBrightness(void)
   1390          {
   \                     IncreaseBacklightBrightness:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1391          	int i;
   1392          	
   1393          	sysData.autoAdjustOn = false;					// Manually adjusting light levels turn off auto-adjust
   1394          	for (i = 0; i < NUM_BACKLIGHT_QUICK_STEPS - 1; i++)
   \   00000004   ........           LDR      R0,??DataTable44_3
   \   00000008   ........           LDR      R1,??DataTable44_2
   \   0000000C   8C40D0E5           LDRB     R4,[R0, #+140]
   \   00000010   68C091E5           LDR      R12,[R1, #+104]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   6C20C1E5           STRB     R2,[R1, #+108]
   \   0000001C   0030A0E3           MOV      R3,#+0
   1395          		if (sysData.backlight < BackLightQuickSteps[i])
   \   00000020   04005CE1           CMP      R12,R4
   \   00000024   1000003A           BCC      ??IncreaseBacklightBrightness_0
   \   00000028   01E080E2           ADD      LR,R0,#+1
   \   0000002C   8C40DEE5           LDRB     R4,[LR, #+140]
   \   00000030   0130A0E3           MOV      R3,#+1
   \   00000034   03E0A0E3           MOV      LR,#+3
   \                     ??IncreaseBacklightBrightness_1:
   \   00000038   04005CE1           CMP      R12,R4
   \   0000003C   01308322           ADDCS    R3,R3,#+1
   \   00000040   00408320           ADDCS    R4,R3,R0
   \   00000044   8C50D425           LDRBCS   R5,[R4, #+140]
   \   00000048   05005C21           CMPCS    R12,R5
   \   0000004C   0600003A           BCC      ??IncreaseBacklightBrightness_0
   \   00000050   013083E2           ADD      R3,R3,#+1
   \   00000054   004083E0           ADD      R4,R3,R0
   \   00000058   8C40D4E5           LDRB     R4,[R4, #+140]
   \   0000005C   01E05EE2           SUBS     LR,LR,#+1
   \   00000060   F4FFFF1A           BNE      ??IncreaseBacklightBrightness_1
   \   00000064   04005CE1           CMP      R12,R4
   \   00000068   01308322           ADDCS    R3,R3,#+1
   1396          			break;
   1397          	sysData.backlight = BackLightQuickSteps[i];
   \                     ??IncreaseBacklightBrightness_0:
   \   0000006C   003083E0           ADD      R3,R3,R0
   \   00000070   8C30D3E5           LDRB     R3,[R3, #+140]
   1398          	
   1399          #ifndef _WINDOWS
   1400          	lightCorrection = 0;
   \   00000074   742080E5           STR      R2,[R0, #+116]
   1401          	UpdateBacklightPWMVariable();
   \   00000078   702090E5           LDR      R2,[R0, #+112]
   \   0000007C   683081E5           STR      R3,[R1, #+104]
   \   00000080   5A0072E3           CMN      R2,#+90
   \   00000084   5920E0B3           MVNLT    R2,#+89
   \   00000088   032082E0           ADD      R2,R2,R3
   \   0000008C   640052E3           CMP      R2,#+100
   \   00000090   030000AA           BGE      ??IncreaseBacklightBrightness_2
   \   00000094   000052E3           CMP      R2,#+0
   \   00000098   0200005A           BPL      ??IncreaseBacklightBrightness_3
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   000000EA           B        ??IncreaseBacklightBrightness_3
   \                     ??IncreaseBacklightBrightness_2:
   \   000000A4   6320A0E3           MOV      R2,#+99
   \                     ??IncreaseBacklightBrightness_3:
   \   000000A8   ........           ADR      R3,BacklightBrightness
   1402          	SetBacklightBrightness(sysData.backlight);
   \   000000AC   681091E5           LDR      R1,[R1, #+104]
   \   000000B0   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   682080E5           STR      R2,[R0, #+104]
   \   000000BC   0010A043           MOVMI    R1,#+0
   \   000000C0   0100004A           BMI      ??IncreaseBacklightBrightness_4
   \   000000C4   640051E3           CMP      R1,#+100
   \   000000C8   6310A0A3           MOVGE    R1,#+99
   \                     ??IncreaseBacklightBrightness_4:
   \   000000CC   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   000000D0   681080E5           STR      R1,[R0, #+104]
   \   000000D4   ........           LDR      R0,??DataTable44_1  ;; 0xfffc8204
   \   000000D8   001080E5           STR      R1,[R0, #+0]
   1403          #endif
   1404          }
   \   000000DC   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     topLEDCenter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     lowerLEDOnReason

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   56555555           DC32     0x55555556

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   00000000           DC8      "",0x0,0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0482FCFF           DC32     0xfffc8204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   2C200000           DC8      0x2C, 0x20, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   0080F743           DC32     0x43f78000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   6482FCFF           DC32     0xfffc8264

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \   00000000   0482FCFF           DC32     0xfffc8204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_2:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_3:
   \   00000000   ........           DC32     lowerLEDOnReason

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_4:
   \   00000000   2482FCFF           DC32     0xfffc8224

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_5:
   \   00000000   ........           DC32     bmWarningPopupBlank

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_6:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_7:
   \   00000000   ........           DC32     GUI_Font16_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_8:
   \   00000000   ........           DC32     GUI_Font10_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_9:
   \   00000000   ........           DC32     lowerLEDOnReason+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_10:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s = %0.1f%s">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   2573203D2025       DC8 37, 115, 32, 61, 32, 37, 48, 46, 49, 102
   \              302E3166    
   \   0000000A   257300000000       DC8 37, 115, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s = %s">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   2573203D2025       DC8 37, 115, 32, 61, 32, 37, 115, 0
   \              7300        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ", ">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   2C200000           DC8 44, 32, 0, 0
   1405          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     AutoAdjustOn                     8
     CalculateTempCorrection          8
     CheckDisplayConditions          16
     CheckWarningPopups              32
     CreateWarningPopup              16
     DecreaseBacklightBrightness      4
     DecreaseLEDBrightness            0
     DeleteWarningPopup              24
     DrawWarningPopups               24
     GetNormalizedLightIntensity      8
     InAlarm                         24
     IncreaseBacklightBrightness     12
     IncreaseLEDBrightness            0
     InitializeLEDStructures          0
     InitializeLEDs                   8
     LEDHandlerTask                   8
     LEDShift                         8
     LEDSystemShutdown                8
     RecordAmbientLight               8
     RestorePWMSettings               0
     ResumeEnvironmentalUpdates       0
     ResumeLEDUpdates                 8
     SetBacklightBrightness           0
     SetLEDBrightness                 0
     SetTachLEDs                      8
     SetTempCorrection                0
     SetWarningLED                   48
     ShiftLEDLevel                   16
     SuspendEnvironmentalUpdates      0
     SuspendLEDUpdates                8
     TurnOffLEDs                     16
     UpdateBacklightPWMVariable       0
     UpdateLEDs                       0
     UpdateTachPWMVariable            0
     UpdateWarningPWMVariable         0
     UpdateWarningPopup             424
     WarningLEDOff                    0
     WarningLEDOn                    16
     WarningPopupInit                32


   Section sizes:

     Function/Label                Bytes
     --------------                -----
     UpperRect                        8
     LowerRect                        8
     BacklightBrightness            400
     WarningLEDBrightness           400
     TachLEDBrightness              400
     AmbientLightIntensity          400
     topLEDCenter                     8
     centerLEDMarkTime
     lowerLEDMarkTime                 4
     ShiftLEDLevel                  260
     SetTachLEDs                    240
     LEDShift                        24
     WarningLEDOff                   68
     WarningLEDOn                   184
     InAlarm                        216
     SetWarningLED                  964
     SuspendEnvironmentalUpdates     28
     ResumeEnvironmentalUpdates      16
     AutoAdjustOn                    32
     RecordAmbientLight              76
     GetNormalizedLightIntensity     68
     SuspendLEDUpdates               56
     ResumeLEDUpdates               144
     TurnOffLEDs                    108
     LEDSystemShutdown               56
     CalculateTempCorrection        452
     SetLEDBrightness                84
     SetBacklightBrightness          52
     CheckDisplayConditions         852
     SetTempCorrection               68
     UpdateWarningPWMVariable        60
     UpdateBacklightPWMVariable      68
     UpdateTachPWMVariable           60
     UpdateLEDs                      76
     RestorePWMSettings             100
     LEDHandlerTask                  28
     InitializeLEDStructures         40
     InitializeLEDs                  32
     WarningPopupInit               212
     CheckWarningPopups             272
     CreateWarningPopup              72
     DeleteWarningPopup             144
     DrawWarningPopups              160
     UpdateWarningPopup             484
     DecreaseLEDBrightness          212
     IncreaseLEDBrightness          216
     lowerLEDOnReason               152
     upperLEDOnReason
     UpperLED
     LowerLED
     AlarmTriggerCause
     LEDlevel
     warningLEDPWMSetting
     tachLEDPWMSetting
     backlightPWMSetting
     tempCorrection
     totalCorrection
     lightCorrection
     LEDUpdatesSuspended
     EnvironmentalUpdatesSuspended
     hUpperWarning
     hLowerWarning
     WarningPopups
     BackLightQuickSteps
     mask                             2
     DecreaseBacklightBrightness    168
     IncreaseBacklightBrightness    224
     ??DataTable26                    4
     ??DataTable28                    4
     ??DataTable29                    4
     ??DataTable29_1                  4
     ??DataTable30                    4
     ??DataTable39                    4
     ??DataTable40                    4
     ??DataTable42                    4
     ??DataTable42_1                  4
     ??DataTable43                    4
     ??DataTable44                    4
     ??DataTable44_1                  4
     ??DataTable44_2                  4
     ??DataTable44_3                  4
     ??DataTable44_4                  4
     ??DataTable44_5                  4
     ??DataTable44_6                  4
     ??DataTable44_7                  4
     ??DataTable44_8                  4
     ??DataTable44_9                  4
     ??DataTable44_10                 4
     ?<Constant "">                   1
     ?<Constant "%s = %0.1f%s">      16
     ?<Constant "%s = %s">            8
     ?<Constant ", ">                 4

 
    12 bytes in section .bss
   154 bytes in section .data
     5 bytes in section .rodata
 8 400 bytes in section .text
 
 8 400 bytes of CODE  memory
     5 bytes of CONST memory
   166 bytes of DATA  memory

Errors: none
Warnings: none
