###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:34 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\CHECKBOX_SkinClassic.c              #
#    Command line =  C:\DUII\TargetHW\GUI\CHECKBOX_SkinClassic.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\CH #
#                    ECKBOX_SkinClassic.lst                                   #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\CHE #
#                    CKBOX_SkinClassic.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\CHECKBOX_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : CHECKBOX_SkinClassic.c
     19          Purpose     : Implementation of CHECKBOX widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "CHECKBOX_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(CHECKBOX_Handle hObj) {
   \                     _Paint:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     40            CHECKBOX_Obj * pObj;
     41            GUI_RECT RectBox = {0};
   \   00000004   ........           ADR      R1,`?<Constant {0}>`
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   002091E5           LDR      R2,[R1, #+0]
   \   00000014   043091E5           LDR      R3,[R1, #+4]
   \   00000018   10008DE2           ADD      R0,SP,#+16
   \   0000001C   0C0080E8           STM      R0,{R2,R3}
     42            int ColorIndex, EffectSize, Index;
     43            const GUI_BITMAP * pBm;
     44          
     45            pObj = CHECKBOX_LOCK_H(hObj);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0040A0E1           MOV      R4,R0
     46            EffectSize = pObj->Widget.pEffect->EffectSize;
   \   0000002C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000030   006090E5           LDR      R6,[R0, #+0]
     47            ColorIndex = WM__IsEnabled(hObj);
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       WM__IsEnabled
   \   0000003C   0070A0E1           MOV      R7,R0
     48            /* Clear inside ... Just in case      */
     49            /* Fill with parents background color */
     50          #if WM_SUPPORT_TRANSPARENCY
     51            if (!WM_GetHasTrans(hObj))
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       WM_GetHasTrans
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0700001A           BNE      ??_Paint_0
     52          #endif
     53            {
     54              if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
   \   00000050   400094E5           LDR      R0,[R4, #+64]
   \   00000054   F014E0E3           MVN      R1,#-268435456
   \   00000058   010050E1           CMP      R0,R1
   \   0000005C   0100001A           BNE      ??_Paint_1
     55                LCD_SetBkColor(WIDGET__GetBkColor(hObj));
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       WIDGET__GetBkColor
     56              } else {
     57                LCD_SetBkColor(pObj->Props.BkColor);
   \                     ??_Paint_1:
   \   00000068   ........           BL       LCD_SetBkColor
     58              }
     59              GUI_Clear();
   \   0000006C   ........           BL       GUI_Clear
     60            }
     61            /* Get size from bitmap */
     62            RectBox.x1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->XSize - 1 + 2 * EffectSize;
   \                     ??_Paint_0:
   \   00000070   641094E5           LDR      R1,[R4, #+100]
   \   00000074   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000078   861081E0           ADD      R1,R1,R6, LSL #+1
   \   0000007C   011041E2           SUB      R1,R1,#+1
   \   00000080   B411CDE1           STRH     R1,[SP, #+20]
     63            RectBox.y1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->YSize - 1 + 2 * EffectSize;
   \   00000084   641094E5           LDR      R1,[R4, #+100]
   \   00000088   F210D1E1           LDRSH    R1,[R1, #+2]
   \   0000008C   860081E0           ADD      R0,R1,R6, LSL #+1
   \   00000090   010040E2           SUB      R0,R0,#+1
   \   00000094   B601CDE1           STRH     R0,[SP, #+22]
     64            WM_SetUserClipRect(&RectBox);
   \   00000098   10008DE2           ADD      R0,SP,#+16
   \   0000009C   ........           BL       WM_SetUserClipRect
     65            /* Clear inside  ... Just in case */
     66            LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
   \   000000A0   070184E0           ADD      R0,R4,R7, LSL #+2
   \   000000A4   380090E5           LDR      R0,[R0, #+56]
   \   000000A8   ........           BL       LCD_SetBkColor
     67            GUI_Clear();
   \   000000AC   ........           BL       GUI_Clear
     68            Index = pObj->CurrentState * 2 + ColorIndex;
     69            pBm = pObj->Props.apBm[Index];
   \   000000B0   7500D4E5           LDRB     R0,[R4, #+117]
   \   000000B4   800087E0           ADD      R0,R7,R0, LSL #+1
   \   000000B8   000184E0           ADD      R0,R4,R0, LSL #+2
   \   000000BC   587090E5           LDR      R7,[R0, #+88]
     70            if (pBm) {
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   0700000A           BEQ      ??_Paint_2
     71              GUI_UNLOCK_H(pObj);
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
     72              GUI_DrawBitmap(pBm, EffectSize, EffectSize);
   \   000000CC   0620A0E1           MOV      R2,R6
   \   000000D0   0610A0E1           MOV      R1,R6
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   ........           BL       GUI_DrawBitmap
     73              pObj = CHECKBOX_LOCK_H(hObj);
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           BL       GUI_ALLOC_LockH
   \   000000E4   0040A0E1           MOV      R4,R0
     74            }
     75            /* Draw the effect around the box */
     76            WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
   \                     ??_Paint_2:
   \   000000E8   10108DE2           ADD      R1,SP,#+16
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       WIDGET__EFFECT_DrawDownRect
     77            WM_SetUserClipRect(NULL);
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   ........           BL       WM_SetUserClipRect
     78            /* Draw text if needed */
     79            if (pObj->hpText) {
   \   000000FC   780094E5           LDR      R0,[R4, #+120]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   5600000A           BEQ      ??_Paint_3
     80              const char * s;
     81              GUI_RECT RectText;
     82              /* Draw the text */
     83              WM_GetClientRect(&RectText);
   \   00000108   08008DE2           ADD      R0,SP,#+8
   \   0000010C   ........           BL       WM_GetClientRect
     84              RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
   \   00000110   F411DDE1           LDRSH    R1,[SP, #+20]
   \   00000114   5620D4E5           LDRB     R2,[R4, #+86]
   \   00000118   F800DDE1           LDRSH    R0,[SP, #+8]
   \   0000011C   011082E0           ADD      R1,R2,R1
   \   00000120   011081E2           ADD      R1,R1,#+1
   \   00000124   000081E0           ADD      R0,R1,R0
   \   00000128   B800CDE1           STRH     R0,[SP, #+8]
     85              GUI_SetTextMode(GUI_TM_TRANS);
   \   0000012C   0200A0E3           MOV      R0,#+2
   \   00000130   ........           BL       GUI_SetTextMode
     86              LCD_SetColor(pObj->Props.TextColor);
   \   00000134   440094E5           LDR      R0,[R4, #+68]
   \   00000138   ........           BL       LCD_SetColor
     87              GUI_SetFont(pObj->Props.pFont);
   \   0000013C   340094E5           LDR      R0,[R4, #+52]
   \   00000140   ........           BL       GUI_SetFont
     88              s = (const char *)GUI_LOCK_H(pObj->hpText);
   \   00000144   780094E5           LDR      R0,[R4, #+120]
   \   00000148   ........           BL       GUI_ALLOC_LockH
   \   0000014C   0050A0E1           MOV      R5,R0
     89              GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
   \   00000150   F425D4E1           LDRSH    R2,[R4, #+84]
   \   00000154   08108DE2           ADD      R1,SP,#+8
   \   00000158   ........           BL       GUI_DispStringInRect
     90              /* Draw focus rectangle */
     91              if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
   \   0000015C   3200D4E5           LDRB     R0,[R4, #+50]
   \   00000160   010010E3           TST      R0,#0x1
   \   00000164   3D00000A           BEQ      ??_Paint_4
     92                int xSizeText = GUI_GetStringDistX(s);
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       GUI_GetStringDistX
   \   00000170   0050A0E1           MOV      R5,R0
     93                int ySizeText = GUI_GetFontSizeY();
   \   00000174   ........           BL       GUI_GetFontSizeY
     94                GUI_RECT RectFocus = RectText;
   \   00000178   08208DE2           ADD      R2,SP,#+8
   \   0000017C   006092E5           LDR      R6,[R2, #+0]
   \   00000180   047092E5           LDR      R7,[R2, #+4]
   \   00000184   0D10A0E1           MOV      R1,SP
   \   00000188   C00081E8           STM      R1,{R6,R7}
     95                switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
   \   0000018C   B415D4E1           LDRH     R1,[R4, #+84]
   \   00000190   FC20A0E3           MOV      R2,#+252
   \   00000194   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000198   011002E0           AND      R1,R2,R1
   \   0000019C   041051E2           SUBS     R1,R1,#+4
   \   000001A0   0700000A           BEQ      ??_Paint_5
   \   000001A4   081051E2           SUBS     R1,R1,#+8
   \   000001A8   0800001A           BNE      ??_Paint_6
     96                case GUI_TA_VCENTER:
     97                  RectFocus.y0 = (RectText.y1 - ySizeText + 1) / 2;
   \   000001AC   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   000001B0   001041E0           SUB      R1,R1,R0
   \   000001B4   011081E2           ADD      R1,R1,#+1
   \   000001B8   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000001BC   C110A0E1           ASR      R1,R1,#+1
   \   000001C0   010000EA           B        ??_Paint_7
     98                  break;
     99                case GUI_TA_BOTTOM:
    100                  RectFocus.y0 = RectText.y1 - ySizeText;
   \                     ??_Paint_5:
   \   000001C4   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   000001C8   001041E0           SUB      R1,R1,R0
   \                     ??_Paint_7:
   \   000001CC   B210CDE1           STRH     R1,[SP, #+2]
    101                  break;
    102                }
    103                switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
   \                     ??_Paint_6:
   \   000001D0   B415D4E1           LDRH     R1,[R4, #+84]
   \   000001D4   092042E2           SUB      R2,R2,#+9
   \   000001D8   011002E0           AND      R1,R2,R1
   \   000001DC   010051E3           CMP      R1,#+1
   \   000001E0   0A00000A           BEQ      ??_Paint_8
   \   000001E4   1000003A           BCC      ??_Paint_9
   \   000001E8   020051E3           CMP      R1,#+2
   \   000001EC   0E00001A           BNE      ??_Paint_9
    104                case GUI_TA_HCENTER:
    105                  RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
   \   000001F0   FC10DDE1           LDRSH    R1,[SP, #+12]
   \   000001F4   F820DDE1           LDRSH    R2,[SP, #+8]
   \   000001F8   021041E0           SUB      R1,R1,R2
   \   000001FC   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000200   051041E0           SUB      R1,R1,R5
   \   00000204   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000208   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   0000020C   050000EA           B        ??_Paint_10
    106                  break;
    107                case GUI_TA_RIGHT:
    108                  RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
   \                     ??_Paint_8:
   \   00000210   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000214   FC20DDE1           LDRSH    R2,[SP, #+12]
   \   00000218   011082E0           ADD      R1,R2,R1
   \   0000021C   F820DDE1           LDRSH    R2,[SP, #+8]
   \   00000220   021041E0           SUB      R1,R1,R2
   \   00000224   051041E0           SUB      R1,R1,R5
   \                     ??_Paint_10:
   \   00000228   B010CDE1           STRH     R1,[SP, #+0]
    109                  break;
    110                }
    111                RectFocus.x1 = RectFocus.x0 + xSizeText - 1;
   \                     ??_Paint_9:
   \   0000022C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000230   011085E0           ADD      R1,R5,R1
   \   00000234   011041E2           SUB      R1,R1,#+1
   \   00000238   B410CDE1           STRH     R1,[SP, #+4]
    112                RectFocus.y1 = RectFocus.y0 + ySizeText - 1;
   \   0000023C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000240   010080E0           ADD      R0,R0,R1
   \   00000244   010040E2           SUB      R0,R0,#+1
   \   00000248   B600CDE1           STRH     R0,[SP, #+6]
    113                LCD_SetColor(pObj->Props.FocusColor);
   \   0000024C   480094E5           LDR      R0,[R4, #+72]
   \   00000250   ........           BL       LCD_SetColor
    114                GUI_DrawFocusRect(&RectFocus, -1);
   \   00000254   0010E0E3           MVN      R1,#+0
   \   00000258   0D00A0E1           MOV      R0,SP
   \   0000025C   ........           BL       GUI_DrawFocusRect
    115              }
    116              GUI_UNLOCK_H(s);
   \                     ??_Paint_4:
   \   00000260   ........           BL       GUI_ALLOC_UnlockH
    117            }
    118            GUI_UNLOCK_H(pObj);
   \                     ??_Paint_3:
   \   00000264   ........           BL       GUI_ALLOC_UnlockH
    119          }
   \   00000268   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000026C   F080BDE8           POP      {R4-R7,PC}       ;; return
    120          
    121          /*********************************************************************
    122          *
    123          *       _Create
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static void _Create(CHECKBOX_Handle hObj) {
    126            // Nothing special to do...
    127            GUI_USE_PARA(hObj);
    128          }
   \                     _Create:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    129          
    130          /*********************************************************************
    131          *
    132          *       _GetButtonSize
    133          */

   \                                 In section .text, align 4, keep-with-next
    134          static unsigned _GetButtonSize(void) {
   \                     _GetButtonSize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    135            int EffectSize;
    136          
    137            EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
   \   00000008   ........           BL       WIDGET_GetDefaultEffect
    138            return CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->XSize + 2 * EffectSize;
   \   0000000C   ........           LDR      R1,??DataTable3
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   301091E5           LDR      R1,[R1, #+48]
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000020   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000024   0080BDE8           POP      {PC}             ;; return
    139          }
    140          
    141          /*********************************************************************
    142          *
    143          *        Private data
    144          *
    145          **********************************************************************
    146          */
    147          /*********************************************************************
    148          *
    149          *       _SkinPrivate
    150          */

   \                                 In section .data, align 4
    151          static CHECKBOX_SKIN_PRIVATE _SkinPrivate = {
   \                     _SkinPrivate:
   \   00000000   ........           DC32 _GetButtonSize
   \   00000004   00000000           DC8 0, 0, 0, 0
    152            _GetButtonSize
    153          };
    154          
    155          /*********************************************************************
    156          *
    157          *       CHECKBOX__SkinClassic
    158          */

   \                                 In section .text, align 4, keep-with-next
    159          const WIDGET_SKIN CHECKBOX__SkinClassic = {
   \                     CHECKBOX__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create, _SkinPrivate
   \              ............
    160            _Paint,
    161            _Create,
    162            &_SkinPrivate
    163          };
    164          
    165          /*********************************************************************
    166          *
    167          *        Public code
    168          *
    169          **********************************************************************
    170          */
    171          /*********************************************************************
    172          *
    173          *       CHECKBOX_SetSkinClassic
    174          */

   \                                 In section .text, align 4, keep-with-next
    175          void CHECKBOX_SetSkinClassic(CHECKBOX_Handle hObj) {
   \                     CHECKBOX_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    176            CHECKBOX_Obj * pObj;
    177          
    178            pObj = CHECKBOX_LOCK_H(hObj);
    179            pObj->pWidgetSkin = &CHECKBOX__SkinClassic;
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   ........           ADR      R1,CHECKBOX__SkinClassic
   \   00000010   701080E5           STR      R1,[R0, #+112]
    180            GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    181            WM_InvalidateWindow(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        WM_InvalidateWindow  ;; tailcall
    182          }
    183          
    184          /*********************************************************************
    185          *
    186          *       CHECKBOX_SetDefaultSkinClassic
    187          */

   \                                 In section .text, align 4, keep-with-next
    188          void CHECKBOX_SetDefaultSkinClassic(void) {
    189            CHECKBOX__pSkinDefault = &CHECKBOX__SkinClassic;
   \                     CHECKBOX_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable3_1
   \   00000004   ........           ADR      R1,CHECKBOX__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    190          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     CHECKBOX__DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     CHECKBOX__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0
    191          
    192          
    193          #else                            /* Avoid empty object files */
    194            void CHECKBOX_SkinClassic_C(void);
    195            void CHECKBOX_SkinClassic_C(void) {}
    196          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     CHECKBOX_SetDefaultSkinClassic      0
     CHECKBOX_SetSkinClassic             8
     _Create                             0
     _GetButtonSize                      8
     _Paint                             48


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Paint                          624
     _Create                           4
     _GetButtonSize                   40
     _SkinPrivate                      8
     CHECKBOX__SkinClassic            12
     CHECKBOX_SetSkinClassic          36
     CHECKBOX_SetDefaultSkinClassic   16
     ??DataTable3                      4
     ??DataTable3_1                    4
     ?<Constant {0}>                   8

 
   8 bytes in section .data
 748 bytes in section .text
 
 748 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
