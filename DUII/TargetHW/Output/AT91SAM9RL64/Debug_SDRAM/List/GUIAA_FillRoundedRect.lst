###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:24 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_FillRoundedRect.c             #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_FillRoundedRect.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IAA_FillRoundedRect.lst                                  #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    AA_FillRoundedRect.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_FillRoundedRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIAA_FillRoundedRect.c
     19          Purpose     : Fill rounded rectangle with Antialiasing
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _FillRoundedRect
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _FillRoundedRect(int x0, int y0, int x1, int y1, int r) {
   \                     _FillRoundedRect:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   40509DE5           LDR      R5,[SP, #+64]
     36            int i, x, y;
     37            int sqmax;
     38            int yMin, yMax;
     39          
     40            sqmax = r * r + r / 2;
     41            //
     42            // First step : find uppermost and lowermost coordinates
     43            //
     44            yMin = y0;
     45            yMax = y1;
     46            //
     47            // Use Clipping rect to reduce calculation (if possible)
     48            //
     49            if (GUI_Context.pClipRect_HL) {
   \   0000000C   ........           LDR      R7,??DataTable1
   \   00000010   950500E0           MUL      R0,R5,R5
   \   00000014   A51F85E0           ADD      R1,R5,R5, LSR #+31
   \   00000018   C16080E0           ADD      R6,R0,R1, ASR #+1
   \   0000001C   10109DE5           LDR      R1,[SP, #+16]
   \   00000020   140097E5           LDR      R0,[R7, #+20]
   \   00000024   04108DE5           STR      R1,[SP, #+4]
   \   00000028   18109DE5           LDR      R1,[SP, #+24]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   00108DE5           STR      R1,[SP, #+0]
   \   00000034   0700000A           BEQ      ??_FillRoundedRect_0
   \   00000038   F610D0E1           LDRSH    R1,[R0, #+6]
   \   0000003C   00209DE5           LDR      R2,[SP, #+0]
   \   00000040   020051E1           CMP      R1,R2
     50              if (yMax > GUI_Context.pClipRect_HL->y1) {
     51                yMax = GUI_Context.pClipRect_HL->y1;
   \   00000044   00108DB5           STRLT    R1,[SP, #+0]
   \   00000048   F200D0E1           LDRSH    R0,[R0, #+2]
   \   0000004C   04109DE5           LDR      R1,[SP, #+4]
   \   00000050   000051E1           CMP      R1,R0
     52              }
     53              if (yMin < GUI_Context.pClipRect_HL->y0) {
     54                yMin = GUI_Context.pClipRect_HL->y0;
   \   00000054   04008DB5           STRLT    R0,[SP, #+4]
     55              }
     56            }
     57            //
     58            // Draw top half
     59            //
     60            for (i = 1, x = r; i < r; i++) {
   \                     ??_FillRoundedRect_0:
   \   00000058   0140A0E3           MOV      R4,#+1
   \   0000005C   0580A0E1           MOV      R8,R5
   \   00000060   020055E3           CMP      R5,#+2
   \   00000064   1D0000BA           BLT      ??_FillRoundedRect_1
   \   00000068   10009DE5           LDR      R0,[SP, #+16]
   \   0000006C   000085E0           ADD      R0,R5,R0
   \   00000070   019040E2           SUB      R9,R0,#+1
   \   00000074   0C009DE5           LDR      R0,[SP, #+12]
   \   00000078   00A085E0           ADD      R10,R5,R0
   \   0000007C   14009DE5           LDR      R0,[SP, #+20]
   \   00000080   05B040E0           SUB      R11,R0,R5
     61              y = y0 + r - i;
     62              if ((y >= yMin) && (y <= yMax)) {
   \                     ??_FillRoundedRect_2:
   \   00000084   04009DE5           LDR      R0,[SP, #+4]
   \   00000088   0910A0E1           MOV      R1,R9
   \   0000008C   000051E1           CMP      R1,R0
   \   00000090   00009DA5           LDRGE    R0,[SP, #+0]
   \   00000094   010050A1           CMPGE    R0,R1
   \   00000098   0C0000BA           BLT      ??_FillRoundedRect_3
     63                //
     64                // Calculate proper x-value
     65                //
     66                while ((i * i + x * x) > sqmax) {
   \   0000009C   940400E0           MUL      R0,R4,R4
   \   000000A0   980822E0           MLA      R2,R8,R8,R0
   \   000000A4   020056E1           CMP      R6,R2
   \   000000A8   030000AA           BGE      ??_FillRoundedRect_4
     67                  --x;
   \                     ??_FillRoundedRect_5:
   \   000000AC   018048E2           SUB      R8,R8,#+1
   \   000000B0   980822E0           MLA      R2,R8,R8,R0
   \   000000B4   020056E1           CMP      R6,R2
   \   000000B8   FBFFFFBA           BLT      ??_FillRoundedRect_5
     68                }
     69                LCD_HL_DrawHLine (x0 + r - x, y, x1 - r + x);
   \                     ??_FillRoundedRect_4:
   \   000000BC   943097E5           LDR      R3,[R7, #+148]
   \   000000C0   0B2088E0           ADD      R2,R8,R11
   \   000000C4   08004AE0           SUB      R0,R10,R8
   \   000000C8   003093E5           LDR      R3,[R3, #+0]
   \   000000CC   33FF2FE1           BLX      R3
     70              }
     71            }
   \                     ??_FillRoundedRect_3:
   \   000000D0   014084E2           ADD      R4,R4,#+1
   \   000000D4   019049E2           SUB      R9,R9,#+1
   \   000000D8   050054E1           CMP      R4,R5
   \   000000DC   E8FFFFBA           BLT      ??_FillRoundedRect_2
     72            //
     73            // Draw middle part
     74            //
     75            for (i = y0 + r; i < y1 - r; i++) {
   \                     ??_FillRoundedRect_1:
   \   000000E0   10009DE5           LDR      R0,[SP, #+16]
   \   000000E4   008085E0           ADD      R8,R5,R0
   \   000000E8   18009DE5           LDR      R0,[SP, #+24]
   \   000000EC   054040E0           SUB      R4,R0,R5
   \   000000F0   10009DE5           LDR      R0,[SP, #+16]
   \   000000F4   000085E0           ADD      R0,R5,R0
   \   000000F8   040050E1           CMP      R0,R4
   \   000000FC   080000AA           BGE      ??_FillRoundedRect_6
     76              LCD_HL_DrawHLine(x0, i, x1);
   \                     ??_FillRoundedRect_7:
   \   00000100   943097E5           LDR      R3,[R7, #+148]
   \   00000104   14209DE5           LDR      R2,[SP, #+20]
   \   00000108   0810A0E1           MOV      R1,R8
   \   0000010C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000110   003093E5           LDR      R3,[R3, #+0]
   \   00000114   33FF2FE1           BLX      R3
     77            }
   \   00000118   018088E2           ADD      R8,R8,#+1
   \   0000011C   040058E1           CMP      R8,R4
   \   00000120   F6FFFFBA           BLT      ??_FillRoundedRect_7
     78            //
     79            // Draw bottom half
     80            //
     81            for (i = 0, x = r; i < r; i++) {
   \                     ??_FillRoundedRect_6:
   \   00000124   0080A0E3           MOV      R8,#+0
   \   00000128   0590A0E1           MOV      R9,R5
   \   0000012C   010055E3           CMP      R5,#+1
   \   00000130   1A0000BA           BLT      ??_FillRoundedRect_8
   \   00000134   0C009DE5           LDR      R0,[SP, #+12]
   \   00000138   00A085E0           ADD      R10,R5,R0
   \   0000013C   14009DE5           LDR      R0,[SP, #+20]
   \   00000140   05B040E0           SUB      R11,R0,R5
     82              y = y1 - r + i;
     83              if ((y >= yMin) && (y <= yMax)) {
   \                     ??_FillRoundedRect_9:
   \   00000144   04009DE5           LDR      R0,[SP, #+4]
   \   00000148   0410A0E1           MOV      R1,R4
   \   0000014C   000051E1           CMP      R1,R0
   \   00000150   00009DA5           LDRGE    R0,[SP, #+0]
   \   00000154   010050A1           CMPGE    R0,R1
   \   00000158   0C0000BA           BLT      ??_FillRoundedRect_10
     84                //
     85                // Calculate proper x-value
     86                //
     87                while ((i * i + x * x) > sqmax) {
   \   0000015C   980800E0           MUL      R0,R8,R8
   \   00000160   990922E0           MLA      R2,R9,R9,R0
   \   00000164   020056E1           CMP      R6,R2
   \   00000168   030000AA           BGE      ??_FillRoundedRect_11
     88                  --x;
   \                     ??_FillRoundedRect_12:
   \   0000016C   019049E2           SUB      R9,R9,#+1
   \   00000170   990922E0           MLA      R2,R9,R9,R0
   \   00000174   020056E1           CMP      R6,R2
   \   00000178   FBFFFFBA           BLT      ??_FillRoundedRect_12
     89                }
     90                LCD_HL_DrawHLine (x0 + r - x, y, x1 - r + x);
   \                     ??_FillRoundedRect_11:
   \   0000017C   943097E5           LDR      R3,[R7, #+148]
   \   00000180   0B2089E0           ADD      R2,R9,R11
   \   00000184   09004AE0           SUB      R0,R10,R9
   \   00000188   003093E5           LDR      R3,[R3, #+0]
   \   0000018C   33FF2FE1           BLX      R3
     91              }
     92            }
   \                     ??_FillRoundedRect_10:
   \   00000190   018088E2           ADD      R8,R8,#+1
   \   00000194   014084E2           ADD      R4,R4,#+1
   \   00000198   050058E1           CMP      R8,R5
   \   0000019C   E8FFFFBA           BLT      ??_FillRoundedRect_9
     93          }
   \                     ??_FillRoundedRect_8:
   \   000001A0   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000001A4   F08FBDE8           POP      {R4-R11,PC}      ;; return
     94          
     95          /*********************************************************************
     96          *
     97          *       _FillRoundedRectAA_HiRes
     98          */
     99          static void _FillRoundedRectAA_HiRes(int x0, int y0, int x1, int y1, int r) {
    100            //
    101            // Init AA Subsystem, pass horizontal limits
    102            //
    103            GUI_AA_Init_HiRes(x0, x1);
    104            //
    105            // Do the actual drawing
    106            //
    107            _FillRoundedRect(x0, y0, x1, y1, r);
    108            //
    109            // Cleanup
    110            //
    111            GUI_AA_Exit();
    112          }
    113          
    114          /*********************************************************************
    115          *
    116          *       Public code
    117          *
    118          **********************************************************************
    119          */
    120          /*********************************************************************
    121          *
    122          *       GUI_AA_FillRoundedRect
    123          */

   \                                 In section .text, align 4, keep-with-next
    124          void GUI_AA_FillRoundedRect(int x0, int y0, int x1, int y1, int r) {
   \                     GUI_AA_FillRoundedRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   28609DE5           LDR      R6,[SP, #+40]
    125            #if (GUI_WINSUPPORT)
    126              GUI_RECT Rect;
    127            #endif
    128            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    129            #if (GUI_WINSUPPORT)
    130              WM_ADDORG_AA(x0,y0);
   \   00000020   ........           BL       WM__GetOrgX_AA
   \   00000024   077080E0           ADD      R7,R0,R7
   \   00000028   ........           BL       WM__GetOrgY_AA
   \   0000002C   088080E0           ADD      R8,R0,R8
    131            #endif
    132            if (!GUI_Context.AA_HiResEnable) {
   \   00000030   ........           LDR      R0,??DataTable1
   \   00000034   9910D0E5           LDRB     R1,[R0, #+153]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0500001A           BNE      ??GUI_AA_FillRoundedRect_0
   \   00000040   9800D0E5           LDRB     R0,[R0, #+152]
   \   00000044   900707E0           MUL      R7,R0,R7
    133              x0 *= GUI_Context.AA_Factor;
    134              y0 *= GUI_Context.AA_Factor;
   \   00000048   900808E0           MUL      R8,R0,R8
    135              x1 *= GUI_Context.AA_Factor;
   \   0000004C   900404E0           MUL      R4,R0,R4
    136              y1 *= GUI_Context.AA_Factor;
   \   00000050   900505E0           MUL      R5,R0,R5
    137              r  *= GUI_Context.AA_Factor;
   \   00000054   900606E0           MUL      R6,R0,R6
    138            }
    139            #if (GUI_WINSUPPORT)
    140              Rect.x0 = GUI_AA_HiRes2Pixel(x0 - r);
   \                     ??GUI_AA_FillRoundedRect_0:
   \   00000058   060047E0           SUB      R0,R7,R6
   \   0000005C   ........           BL       GUI_AA_HiRes2Pixel
   \   00000060   B400CDE1           STRH     R0,[SP, #+4]
    141              Rect.x1 = GUI_AA_HiRes2Pixel(x1 + r);
   \   00000064   040086E0           ADD      R0,R6,R4
   \   00000068   ........           BL       GUI_AA_HiRes2Pixel
   \   0000006C   B800CDE1           STRH     R0,[SP, #+8]
    142              Rect.y0 = GUI_AA_HiRes2Pixel(y0 - r);
   \   00000070   060048E0           SUB      R0,R8,R6
   \   00000074   ........           BL       GUI_AA_HiRes2Pixel
   \   00000078   B600CDE1           STRH     R0,[SP, #+6]
    143              Rect.y1 = GUI_AA_HiRes2Pixel(y1 + r);
   \   0000007C   050086E0           ADD      R0,R6,R5
   \   00000080   ........           BL       GUI_AA_HiRes2Pixel
   \   00000084   BA00CDE1           STRH     R0,[SP, #+10]
    144              WM_ITERATE_START(&Rect); {
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   ........           BL       WM__InitIVRSearch
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0C00000A           BEQ      ??GUI_AA_FillRoundedRect_1
    145            #endif
    146            _FillRoundedRectAA_HiRes(x0, y0, x1, y1, r);
   \                     ??GUI_AA_FillRoundedRect_2:
   \   00000098   0410A0E1           MOV      R1,R4
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   ........           BL       GUI_AA_Init_HiRes
   \   000000A4   00608DE5           STR      R6,[SP, #+0]
   \   000000A8   0530A0E1           MOV      R3,R5
   \   000000AC   0420A0E1           MOV      R2,R4
   \   000000B0   0810A0E1           MOV      R1,R8
   \   000000B4   0700A0E1           MOV      R0,R7
   \   000000B8   ........           BL       _FillRoundedRect
   \   000000BC   ........           BL       GUI_AA_Exit
    147            #if (GUI_WINSUPPORT)
    148              } WM_ITERATE_END();
   \   000000C0   ........           BL       WM__GetNextIVR
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   F2FFFF1A           BNE      ??GUI_AA_FillRoundedRect_2
    149            #endif
    150            GUI_UNLOCK();
   \                     ??GUI_AA_FillRoundedRect_1:
   \   000000CC   ........           BL       GUI_Unlock
    151          }
   \   000000D0   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   000000D4   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    152          
    153          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     GUI_AA_FillRoundedRect     40
     _FillRoundedRect           64


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _FillRoundedRect        424
     GUI_AA_FillRoundedRect  216
     ??DataTable1              4

 
 644 bytes in section .text
 
 644 bytes of CODE memory

Errors: none
Warnings: none
