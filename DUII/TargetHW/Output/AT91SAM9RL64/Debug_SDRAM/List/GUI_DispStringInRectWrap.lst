###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:49 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DispStringInRectWrap.c          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DispStringInRectWrap.c -D       #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_DispStringInRectWrap.lst                               #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _DispStringInRectWrap.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DispStringInRectWrap.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DispStringInRectWrap.c
     19          Purpose     : Implementation of GUI_DispStringInRectWrap
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24           
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI_WrapGetNumLines
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          int GUI_WrapGetNumLines(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
   \                     GUI_WrapGetNumLines:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     36            int NumLines = 0;
   \   00000014   0070A0E3           MOV      R7,#+0
     37            int NumBytesToNextLine;
     38          
     39            GUI_LOCK();
   \   00000018   ........           BL       GUI_Lock
   \   0000001C   000000EA           B        ??GUI_WrapGetNumLines_0
     40            do {
     41              NumBytesToNextLine = GUI__WrapGetNumBytesToNextLine(pText, xSize, WrapMode);
     42              pText += NumBytesToNextLine;
     43              if (NumBytesToNextLine) {
     44                NumLines++;
   \                     ??GUI_WrapGetNumLines_1:
   \   00000020   017087E2           ADD      R7,R7,#+1
     45              }
   \                     ??GUI_WrapGetNumLines_0:
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI__WrapGetNumBytesToNextLine
   \   00000034   044080E0           ADD      R4,R0,R4
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F7FFFF1A           BNE      ??GUI_WrapGetNumLines_1
     46            } while (NumBytesToNextLine);
     47            GUI_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
     48            return NumLines;
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   04D08DE2           ADD      SP,SP,#+4
   \   0000004C   F080BDE8           POP      {R4-R7,PC}       ;; return
     49          }
     50          
     51          /*********************************************************************
     52          *
     53          *       GUI_DispStringInRectWrap
     54          */

   \                                 In section .text, align 4, keep-with-next
     55          void GUI_DispStringInRectWrap(const char GUI_UNI_PTR * s, GUI_RECT * pRect, int TextAlign, GUI_WRAPMODE WrapMode) {
   \                     GUI_DispStringInRectWrap:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0360A0E1           MOV      R6,R3
     56            const GUI_RECT * pOldClipRect;
     57            GUI_RECT Rect;
     58            int xSize, ySizeFont, /*NumBytesToNextLine, */NumCharsDisp;
     59            if (!s) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   6B00000A           BEQ      ??GUI_DispStringInRectWrap_0
     60              return;
     61            }
     62            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     63            Rect      = *pRect;
   \   00000020   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000024   B210CDE1           STRH     R1,[SP, #+2]
   \   00000028   F410D5E1           LDRSH    R1,[R5, #+4]
   \   0000002C   F2B0D5E1           LDRSH    R11,[R5, #+2]
   \   00000030   B010CDE1           STRH     R1,[SP, #+0]
   \   00000034   F610D5E1           LDRSH    R1,[R5, #+6]
     64            xSize     = Rect.x1 - Rect.x0 + 1;
   \   00000038   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000003C   0C108DE5           STR      R1,[SP, #+12]
   \   00000040   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000044   010040E0           SUB      R0,R0,R1
   \   00000048   017080E2           ADD      R7,R0,#+1
     65            ySizeFont = GUI_GetFontDistY();
   \   0000004C   ........           BL       GUI_GetFontDistY
   \   00000050   0080A0E1           MOV      R8,R0
     66            //
     67            // Vertical alignment
     68            //
     69            if ((TextAlign & GUI_TA_VERTICAL) != GUI_TA_TOP) {
   \   00000054   18009DE5           LDR      R0,[SP, #+24]
   \   00000058   0C0010E3           TST      R0,#0xC
   \   0000005C   2000000A           BEQ      ??GUI_DispStringInRectWrap_1
     70              int NumLines = 0;
     71              const char GUI_UNI_PTR * pText;
     72              pText = s;
     73              //
     74              // Count the number of lines
     75              //
     76              NumLines = GUI_WrapGetNumLines(pText, xSize, WrapMode);
   \   00000060   04A0A0E1           MOV      R10,R4
   \   00000064   0090A0E3           MOV      R9,#+0
   \   00000068   ........           BL       GUI_Lock
   \   0000006C   000000EA           B        ??GUI_DispStringInRectWrap_2
   \                     ??GUI_DispStringInRectWrap_3:
   \   00000070   019089E2           ADD      R9,R9,#+1
   \                     ??GUI_DispStringInRectWrap_2:
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0710A0E1           MOV      R1,R7
   \   0000007C   0A00A0E1           MOV      R0,R10
   \   00000080   ........           BL       GUI__WrapGetNumBytesToNextLine
   \   00000084   0AA080E0           ADD      R10,R0,R10
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   F7FFFF1A           BNE      ??GUI_DispStringInRectWrap_3
   \   00000090   ........           BL       GUI_Unlock
     77              //
     78              // Do the vertical alignment
     79              //
     80              switch (TextAlign & GUI_TA_VERTICAL) {
   \   00000094   18009DE5           LDR      R0,[SP, #+24]
   \   00000098   0C0000E2           AND      R0,R0,#0xC
   \   0000009C   040050E2           SUBS     R0,R0,#+4
   \   000000A0   04005012           SUBSNE   R0,R0,#+4
   \   000000A4   0200000A           BEQ      ??GUI_DispStringInRectWrap_4
   \   000000A8   040050E2           SUBS     R0,R0,#+4
   \   000000AC   0500000A           BEQ      ??GUI_DispStringInRectWrap_5
   \   000000B0   0B0000EA           B        ??GUI_DispStringInRectWrap_1
     81          	  case GUI_TA_BASELINE:
     82          	  case GUI_TA_BOTTOM:
     83                Rect.y0 = Rect.y1 - NumLines * ySizeFont + 1;
   \                     ??GUI_DispStringInRectWrap_4:
   \   000000B4   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B8   890861E1           SMULBB   R1,R9,R8
   \   000000BC   010040E0           SUB      R0,R0,R1
   \   000000C0   01B080E2           ADD      R11,R0,#+1
     84                break;
   \   000000C4   060000EA           B        ??GUI_DispStringInRectWrap_1
     85          	  case GUI_TA_VCENTER:
     86          		  Rect.y0 = Rect.y0 + (Rect.y1 - Rect.y0 + 1 - NumLines * ySizeFont) / 2;
   \                     ??GUI_DispStringInRectWrap_5:
   \   000000C8   0C009DE5           LDR      R0,[SP, #+12]
   \   000000CC   980901E0           MUL      R1,R8,R9
   \   000000D0   0B0040E0           SUB      R0,R0,R11
   \   000000D4   010080E2           ADD      R0,R0,#+1
   \   000000D8   010040E0           SUB      R0,R0,R1
   \   000000DC   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000E0   C0B08BE0           ADD      R11,R11,R0, ASR #+1
     87                break;
     88          	  }
     89            }
     90            pOldClipRect = GUI_SetClipRect(pRect);
   \                     ??GUI_DispStringInRectWrap_1:
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       GUI_SetClipRect
   \   000000EC   18109DE5           LDR      R1,[SP, #+24]
   \   000000F0   0090A0E1           MOV      R9,R0
   \   000000F4   031001E2           AND      R1,R1,#0x3
   \   000000F8   1010CDE5           STRB     R1,[SP, #+16]
     91            do {
     92              int xLineSize;
     93              GUI_RECT RectText;
     94              NumCharsDisp = GUI__WrapGetNumCharsDisp(s, xSize, WrapMode);
   \                     ??GUI_DispStringInRectWrap_6:
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   0710A0E1           MOV      R1,R7
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       GUI__WrapGetNumCharsDisp
     95              Rect.y1      = Rect.y0 + ySizeFont - 1;
     96              RectText     = Rect;
   \   0000010C   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000110   B6B0CDE1           STRH     R11,[SP, #+6]
   \   00000114   08B08BE0           ADD      R11,R11,R8
   \   00000118   B410CDE1           STRH     R1,[SP, #+4]
   \   0000011C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000120   00A0A0E1           MOV      R10,R0
     97              //
     98              // Horizontal alignment
     99              //
    100              xLineSize = GUI__GetLineDistX(s, NumCharsDisp);
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   B810CDE1           STRH     R1,[SP, #+8]
   \   0000012C   01104BE2           SUB      R1,R11,#+1
   \   00000130   BA10CDE1           STRH     R1,[SP, #+10]
   \   00000134   0A10A0E1           MOV      R1,R10
   \   00000138   ........           BL       GUI__GetLineDistX
    101              switch (TextAlign & GUI_TA_HORIZONTAL) {
   \   0000013C   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   0A00000A           BEQ      ??GUI_DispStringInRectWrap_7
   \   00000148   020051E3           CMP      R1,#+2
   \   0000014C   0100000A           BEQ      ??GUI_DispStringInRectWrap_8
   \   00000150   0A00003A           BCC      ??GUI_DispStringInRectWrap_9
   \   00000154   0D0000EA           B        ??GUI_DispStringInRectWrap_10
    102              case GUI_TA_HCENTER:
    103                RectText.x0 = pRect->x0 + (pRect->x1 - pRect->x0 - xLineSize) / 2;
   \                     ??GUI_DispStringInRectWrap_8:
   \   00000158   F010D5E1           LDRSH    R1,[R5, #+0]
   \   0000015C   F420D5E1           LDRSH    R2,[R5, #+4]
   \   00000160   012042E0           SUB      R2,R2,R1
   \   00000164   000042E0           SUB      R0,R2,R0
   \   00000168   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000016C   C00081E0           ADD      R0,R1,R0, ASR #+1
   \   00000170   050000EA           B        ??GUI_DispStringInRectWrap_11
    104                break;
    105              case GUI_TA_LEFT:
    106                RectText.x0 = pRect->x0;
   \                     ??GUI_DispStringInRectWrap_7:
   \   00000174   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000178   B410CDE1           STRH     R1,[SP, #+4]
    107                break;
   \   0000017C   030000EA           B        ??GUI_DispStringInRectWrap_10
    108              case GUI_TA_RIGHT:
    109                RectText.x0 = pRect->x1 - xLineSize + 1;
   \                     ??GUI_DispStringInRectWrap_9:
   \   00000180   F410D5E1           LDRSH    R1,[R5, #+4]
   \   00000184   000041E0           SUB      R0,R1,R0
   \   00000188   010080E2           ADD      R0,R0,#+1
   \                     ??GUI_DispStringInRectWrap_11:
   \   0000018C   B400CDE1           STRH     R0,[SP, #+4]
    110                break;
    111              }
    112              GUI__DispLine(s, NumCharsDisp, &RectText);
   \                     ??GUI_DispStringInRectWrap_10:
   \   00000190   04208DE2           ADD      R2,SP,#+4
   \   00000194   0A10A0E1           MOV      R1,R10
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           BL       GUI__DispLine
    113              s += GUI__WrapGetNumBytesToNextLine(s, xSize, WrapMode);
   \   000001A0   0620A0E1           MOV      R2,R6
   \   000001A4   0710A0E1           MOV      R1,R7
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   ........           BL       GUI__WrapGetNumBytesToNextLine
   \   000001B0   044080E0           ADD      R4,R0,R4
    114              Rect.y0 += ySizeFont;
    115            } while (*s);
   \   000001B4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   CEFFFF1A           BNE      ??GUI_DispStringInRectWrap_6
    116            GUI_SetClipRect(pOldClipRect);
   \   000001C0   0900A0E1           MOV      R0,R9
   \   000001C4   ........           BL       GUI_SetClipRect
    117            GUI_UNLOCK();
   \   000001C8   ........           BL       GUI_Unlock
    118            /*
    119            const GUI_RECT * pOldClipRect;
    120            GUI_RECT Rect;
    121            int xSize, ySizeFont, NumBytesToNextLine, NumCharsDisp;
    122            if (!s) {
    123              return;
    124            }
    125            GUI_LOCK();
    126            Rect      = *pRect;
    127            xSize     = Rect.x1 - Rect.x0 + 1;
    128            ySizeFont = GUI_GetFontDistY();
    129            //
    130            // Vertical alignment
    131            //
    132            if ((TextAlign & GUI_TA_VERTICAL) != GUI_TA_TOP) {
    133              int NumLines = 0;
    134              const char GUI_UNI_PTR * pText;
    135              pText = s;
    136              //
    137              // Count the number of lines
    138              //
    139              do {
    140                NumBytesToNextLine = GUI__WrapGetNumBytesToNextLine(pText, xSize, WrapMode);
    141                pText += NumBytesToNextLine;
    142                if (NumBytesToNextLine) {
    143                  NumLines++;
    144                }
    145              } while (NumBytesToNextLine);
    146              //
    147              // Do the vertical alignment
    148              //
    149              switch (TextAlign & GUI_TA_VERTICAL) {
    150          	  case GUI_TA_BASELINE:
    151          	  case GUI_TA_BOTTOM:
    152                Rect.y0 = Rect.y1 - NumLines * ySizeFont + 1;
    153                break;
    154          	  case GUI_TA_VCENTER:
    155          		  Rect.y0 = Rect.y0 + (Rect.y1 - Rect.y0 + 1 - NumLines * ySizeFont) / 2;
    156                break;
    157          	  }
    158            }
    159            pOldClipRect = GUI_SetClipRect(pRect);
    160            do {
    161              int xLineSize;
    162              GUI_RECT RectText;
    163              NumCharsDisp = GUI__WrapGetNumCharsDisp(s, xSize, WrapMode);
    164              Rect.y1      = Rect.y0 + ySizeFont - 1;
    165              RectText     = Rect;
    166              //
    167              // Horizontal alignment
    168              //
    169              xLineSize = GUI__GetLineDistX(s, NumCharsDisp);
    170              switch (TextAlign & GUI_TA_HORIZONTAL) {
    171              case GUI_TA_HCENTER:
    172                RectText.x0 = pRect->x0 + (pRect->x1 - pRect->x0 - xLineSize) / 2;
    173                break;
    174              case GUI_TA_LEFT:
    175                RectText.x0 = pRect->x0;
    176                break;
    177              case GUI_TA_RIGHT:
    178                RectText.x0 = pRect->x1 - xLineSize + 1;
    179                break;
    180              }
    181              GUI__DispLine(s, NumCharsDisp, &RectText);
    182              s += GUI__WrapGetNumBytesToNextLine(s, xSize, WrapMode);
    183              Rect.y0 += ySizeFont;
    184            } while (*s);
    185            GUI_SetClipRect(pOldClipRect);
    186            GUI_UNLOCK();
    187            */
    188          }
   \                     ??GUI_DispStringInRectWrap_0:
   \   000001CC   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000001D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    189          
    190          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUI_DispStringInRectWrap     64
     GUI_WrapGetNumLines          24


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     GUI_WrapGetNumLines        80
     GUI_DispStringInRectWrap  468

 
 548 bytes in section .text
 
 548 bytes of CODE memory

Errors: none
Warnings: none
