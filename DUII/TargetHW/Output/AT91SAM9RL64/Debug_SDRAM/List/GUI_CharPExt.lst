###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_CharPExt.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_CharPExt.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_CharPExt.lst                                           #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _CharPExt.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_CharPExt.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICharPExt.c
     19          Purpose     : Implementation of extended proportional fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26           
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUIPROP_EXT__FindChar
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          const GUI_FONT_PROP_EXT GUI_UNI_PTR * GUIPROP_EXT__FindChar(const GUI_FONT_PROP_EXT GUI_UNI_PTR* pPropExt, U16P c) {
   \                     GUIPROP_EXT__FindChar:
   \   00000000   000000EA           B        ??GUIPROP_EXT__FindChar_0
     38            for (; pPropExt; pPropExt = pPropExt->pNext) {
   \                     ??GUIPROP_EXT__FindChar_1:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??GUIPROP_EXT__FindChar_0:
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0400000A           BEQ      ??GUIPROP_EXT__FindChar_2
     39              if ((c>=pPropExt->First) && (c<=pPropExt->Last))
   \   00000010   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   B220D021           LDRHCS   R2,[R0, #+2]
   \   0000001C   01005221           CMPCS    R2,R1
   \   00000020   F7FFFF3A           BCC      ??GUIPROP_EXT__FindChar_1
     40                break;
     41            }
     42            return pPropExt;
   \                     ??GUIPROP_EXT__FindChar_2:
   \   00000024   1EFF2FE1           BX       LR               ;; return
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       Public code
     48          *
     49          **********************************************************************
     50          */
     51          /*********************************************************************
     52          *
     53          *       GUIPROP_EXT_DispChar
     54          *
     55          * Purpose:
     56          *   This is the routine that displays a character. It is used by all
     57          *   other routines which display characters as a subroutine.
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          void GUIPROP_EXT_DispChar(U16P c) {
   \                     GUIPROP_EXT_DispChar:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     60            int BytesPerLine;
     61            GUI_DRAWMODE DrawMode = GUI_Context.TextMode;
   \   00000004   ........           LDR      R4,??DataTable2
   \   00000008   0010A0E1           MOV      R1,R0
     62            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_EXT__FindChar(GUI_Context.pAFont->p.pPropExt, c);
   \   0000000C   1C2094E5           LDR      R2,[R4, #+28]
   \   00000010   1CD04DE2           SUB      SP,SP,#+28
   \   00000014   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000018   1C2092E5           LDR      R2,[R2, #+28]
   \   0000001C   000000EA           B        ??GUIPROP_EXT_DispChar_0
   \                     ??GUIPROP_EXT_DispChar_1:
   \   00000020   082092E5           LDR      R2,[R2, #+8]
   \                     ??GUIPROP_EXT_DispChar_0:
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0400000A           BEQ      ??GUIPROP_EXT_DispChar_2
   \   0000002C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000030   030051E1           CMP      R1,R3
   \   00000034   B230D221           LDRHCS   R3,[R2, #+2]
   \   00000038   01005321           CMPCS    R3,R1
   \   0000003C   F7FFFF3A           BCC      ??GUIPROP_EXT_DispChar_1
     63            if (GUI__CharHasTrans) {
   \                     ??GUIPROP_EXT_DispChar_2:
   \   00000040   ........           LDR      R3,??DataTable2_1
   \   00000044   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000048   000053E3           CMP      R3,#+0
     64              DrawMode |= GUI_DM_TRANS;
   \   0000004C   02008013           ORRNE    R0,R0,#0x2
     65            }
     66            if (pPropExt) {
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   2700000A           BEQ      ??GUIPROP_EXT_DispChar_3
     67              GUI_DRAWMODE OldDrawMode;
     68              const GUI_CHARINFO_EXT GUI_UNI_PTR * pCharInfo = pPropExt->paCharInfo+(c-pPropExt->First);
   \   00000058   B030D2E1           LDRH     R3,[R2, #+0]
   \   0000005C   042092E5           LDR      R2,[R2, #+4]
   \   00000060   031041E0           SUB      R1,R1,R3
   \   00000064   0C30A0E3           MOV      R3,#+12
   \   00000068   932125E0           MLA      R5,R3,R1,R2
     69              BytesPerLine = (pCharInfo->XSize + 7) >> 3;
   \   0000006C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000070   071081E2           ADD      R1,R1,#+7
   \   00000074   C171A0E1           ASR      R7,R1,#+3
     70              OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   00000078   ........           BL       LCD_SetDrawMode
     71              LCD_DrawBitmap(GUI_Context.DispPosX + pCharInfo->XPos, GUI_Context.DispPosY + pCharInfo->YPos,
     72                             pCharInfo->XSize,
     73                             pCharInfo->YSize,
     74                             GUI_Context.pAFont->XMag,
     75                             GUI_Context.pAFont->YMag,
     76                             1,     /* Bits per Pixel */
     77                             BytesPerLine,
     78                             pCharInfo->pData,
     79                             LCD_pBkColorIndex);
   \   0000007C   ........           LDR      R1,??DataTable2_2
   \   00000080   0060A0E1           MOV      R6,R0
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   1C0094E5           LDR      R0,[R4, #+28]
   \   0000008C   14108DE5           STR      R1,[SP, #+20]
   \   00000090   081095E5           LDR      R1,[R5, #+8]
   \   00000094   0C708DE5           STR      R7,[SP, #+12]
   \   00000098   10108DE5           STR      R1,[SP, #+16]
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   08108DE5           STR      R1,[SP, #+8]
   \   000000A4   1B10D0E5           LDRB     R1,[R0, #+27]
   \   000000A8   04108DE5           STR      R1,[SP, #+4]
   \   000000AC   1A00D0E5           LDRB     R0,[R0, #+26]
   \   000000B0   00008DE5           STR      R0,[SP, #+0]
   \   000000B4   F402D4E1           LDRSH    R0,[R4, #+36]
   \   000000B8   D310D5E1           LDRSB    R1,[R5, #+3]
   \   000000BC   D2C0D5E1           LDRSB    R12,[R5, #+2]
   \   000000C0   0130D5E5           LDRB     R3,[R5, #+1]
   \   000000C4   001081E0           ADD      R1,R1,R0
   \   000000C8   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000CC   0020D5E5           LDRB     R2,[R5, #+0]
   \   000000D0   00008CE0           ADD      R0,R12,R0
   \   000000D4   ........           BL       LCD_DrawBitmap
     80              LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   ........           BL       LCD_SetDrawMode
     81              GUI_Context.DispPosX += pCharInfo->XDist * GUI_Context.pAFont->XMag;
   \   000000E0   1C2094E5           LDR      R2,[R4, #+28]
   \   000000E4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000E8   0410D5E5           LDRB     R1,[R5, #+4]
   \   000000EC   1A20D2E5           LDRB     R2,[R2, #+26]
   \   000000F0   820100E1           SMLABB   R0,R2,R1,R0
   \   000000F4   B202C4E1           STRH     R0,[R4, #+34]
     82            }
     83          }
   \                     ??GUIPROP_EXT_DispChar_3:
   \   000000F8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000FC   F080BDE8           POP      {R4-R7,PC}       ;; return
     84          
     85          /*********************************************************************
     86          *
     87          *       GUIPROP_EXT_GetCharDistX
     88          */

   \                                 In section .text, align 4, keep-with-next
     89          int GUIPROP_EXT_GetCharDistX(U16P c) {
   \                     GUIPROP_EXT_GetCharDistX:
   \   00000000   ........           LDR      R1,??DataTable2
   \   00000004   1C1091E5           LDR      R1,[R1, #+28]
   \   00000008   1C2091E5           LDR      R2,[R1, #+28]
   \   0000000C   000000EA           B        ??GUIPROP_EXT_GetCharDistX_0
   \                     ??GUIPROP_EXT_GetCharDistX_1:
   \   00000010   082092E5           LDR      R2,[R2, #+8]
   \                     ??GUIPROP_EXT_GetCharDistX_0:
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0D00000A           BEQ      ??GUIPROP_EXT_GetCharDistX_2
   \   0000001C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   B230D221           LDRHCS   R3,[R2, #+2]
   \   00000028   00005321           CMPCS    R3,R0
   \   0000002C   F7FFFF3A           BCC      ??GUIPROP_EXT_GetCharDistX_1
   \   00000030   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000034   042092E5           LDR      R2,[R2, #+4]
   \   00000038   1A10D1E5           LDRB     R1,[R1, #+26]
   \   0000003C   030040E0           SUB      R0,R0,R3
   \   00000040   0C30A0E3           MOV      R3,#+12
   \   00000044   932020E0           MLA      R0,R3,R0,R2
   \   00000048   0400D0E5           LDRB     R0,[R0, #+4]
   \   0000004C   810060E1           SMULBB   R0,R1,R0
   \   00000050   1EFF2FE1           BX       LR
   \                     ??GUIPROP_EXT_GetCharDistX_2:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   1EFF2FE1           BX       LR               ;; return
     90            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_EXT__FindChar(GUI_Context.pAFont->p.pPropExt, c);
     91            return (pPropExt) ? (pPropExt->paCharInfo+(c-pPropExt->First))->XDist * GUI_Context.pAFont->XMag : 0;
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       GUIPROP_EXT_GetFontInfo
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          void GUIPROP_EXT_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
     99            GUI_USE_PARA(pFont);
    100            pfi->Flags = GUI_FONTINFO_FLAG_PROP;
   \                     GUIPROP_EXT_GetFontInfo:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    101          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    102          
    103          /*********************************************************************
    104          *
    105          *       GUIPROP_EXT_IsInFont
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          char GUIPROP_EXT_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
    108            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_EXT__FindChar(pFont->p.pPropExt, c);
   \                     GUIPROP_EXT_IsInFont:
   \   00000000   1C0090E5           LDR      R0,[R0, #+28]
   \   00000004   050000EA           B        ??GUIPROP_EXT_IsInFont_0
   \                     ??GUIPROP_EXT_IsInFont_1:
   \   00000008   B020D0E1           LDRH     R2,[R0, #+0]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   B220D021           LDRHCS   R2,[R0, #+2]
   \   00000014   01005221           CMPCS    R2,R1
   \   00000018   0300002A           BCS      ??GUIPROP_EXT_IsInFont_2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \                     ??GUIPROP_EXT_IsInFont_0:
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F7FFFF1A           BNE      ??GUIPROP_EXT_IsInFont_1
   \   00000028   1EFF2FE1           BX       LR
   \                     ??GUIPROP_EXT_IsInFont_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   1EFF2FE1           BX       LR               ;; return
    109            return (pPropExt==NULL) ? 0 : 1;
    110          }
    111          
    112          /*********************************************************************
    113          *
    114          *       GUIPROP_EXT_GetCharInfo
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          int GUIPROP_EXT_GetCharInfo(U16P c, GUI_CHARINFO_EXT * pInfo) {
    117            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt;
    118            pPropExt = GUIPROP_EXT__FindChar(GUI_Context.pAFont->p.pPropExt, c);
   \                     GUIPROP_EXT_GetCharInfo:
   \   00000000   ........           LDR      R2,??DataTable2
   \   00000004   1C2092E5           LDR      R2,[R2, #+28]
   \   00000008   1C2092E5           LDR      R2,[R2, #+28]
   \   0000000C   000000EA           B        ??GUIPROP_EXT_GetCharInfo_0
   \                     ??GUIPROP_EXT_GetCharInfo_1:
   \   00000010   082092E5           LDR      R2,[R2, #+8]
   \                     ??GUIPROP_EXT_GetCharInfo_0:
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0D00000A           BEQ      ??GUIPROP_EXT_GetCharInfo_2
   \   0000001C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   B230D221           LDRHCS   R3,[R2, #+2]
   \   00000028   00005321           CMPCS    R3,R0
   \   0000002C   F7FFFF3A           BCC      ??GUIPROP_EXT_GetCharInfo_1
    119            if (pPropExt) {
    120              *pInfo = *(pPropExt->paCharInfo + (c - pPropExt->First));
   \   00000030   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000034   042092E5           LDR      R2,[R2, #+4]
   \   00000038   030040E0           SUB      R0,R0,R3
   \   0000003C   0C30A0E3           MOV      R3,#+12
   \   00000040   932020E0           MLA      R0,R3,R0,R2
   \   00000044   0C10B0E8           LDM      R0!,{R2,R3,R12}
    121              return 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0C10A1E8           STM      R1!,{R2,R3,R12}
   \   00000050   1EFF2FE1           BX       LR
    122            }
    123            return 1;
   \                     ??GUIPROP_EXT_GetCharInfo_2:
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   1EFF2FE1           BX       LR               ;; return
    124          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     GUI__CharHasTrans

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    125          
    126          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUIPROP_EXT_DispChar         48
     GUIPROP_EXT_GetCharDistX      0
     GUIPROP_EXT_GetCharInfo       0
     GUIPROP_EXT_GetFontInfo       0
     GUIPROP_EXT_IsInFont          0
     GUIPROP_EXT__FindChar         0


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     GUIPROP_EXT__FindChar      40
     GUIPROP_EXT_DispChar      256
     GUIPROP_EXT_GetCharDistX   92
     GUIPROP_EXT_GetFontInfo    12
     GUIPROP_EXT_IsInFont       52
     GUIPROP_EXT_GetCharInfo    92
     ??DataTable2                4
     ??DataTable2_1              4
     ??DataTable2_2              4

 
 556 bytes in section .text
 
 556 bytes of CODE memory

Errors: none
Warnings: none
