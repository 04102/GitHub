###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_Skin.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_Skin.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\BU #
#                    TTON_Skin.lst                                            #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\BUT #
#                    TON_Skin.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_Skin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_Skin.c
     19          Purpose     : Implementation of framewindow widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "BUTTON_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(BUTTON_Handle hObj) {
   \                     _Paint:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0080A0E1           MOV      R8,R0
     40            BUTTON_Obj * pObj;
     41            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
     42            WIDGET_ITEM_DRAW_INFO ItemInfo;
     43            int xSize, ySize, State;
     44            U16 Status;
     45            
     46            //
     47            // Get properties
     48            //
     49            pObj = BUTTON_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
     50            pfDrawSkin = pObj->Props.SkinPrivate.pfDrawSkin;
   \   00000010   584090E5           LDR      R4,[R0, #+88]
     51            State = pObj->Widget.State;
   \   00000014   B253D0E1           LDRH     R5,[R0, #+50]
     52            Status = pObj->Widget.Win.Status;
   \   00000018   286090E5           LDR      R6,[R0, #+40]
     53            GUI_UNLOCK_H(pObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
     54            //
     55            // Get size
     56            //
     57            xSize = WM_GetWindowSizeX(hObj);
   \   00000020   0800A0E1           MOV      R0,R8
   \   00000024   ........           BL       WM_GetWindowSizeX
   \   00000028   0070A0E1           MOV      R7,R0
     58            ySize = WM_GetWindowSizeY(hObj);
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           BL       WM_GetWindowSizeY
     59            //
     60            // Fill item info structure
     61            //
     62            ItemInfo.hWin = hObj;
     63            ItemInfo.x0 = ItemInfo.y0 = 0;
   \   00000034   0010A0E3           MOV      R1,#+0
     64            ItemInfo.x1 = xSize - 1;
   \   00000038   013047E2           SUB      R3,R7,#+1
     65            ItemInfo.y1 = ySize - 1;
   \   0000003C   010040E2           SUB      R0,R0,#+1
   \   00000040   00808DE5           STR      R8,[SP, #+0]
   \   00000044   10108DE5           STR      R1,[SP, #+16]
   \   00000048   0C108DE5           STR      R1,[SP, #+12]
   \   0000004C   14308DE5           STR      R3,[SP, #+20]
   \   00000050   18008DE5           STR      R0,[SP, #+24]
     66            if        (State & BUTTON_STATE_PRESSED) {
   \   00000054   400F15E3           TST      R5,#0x100
   \   00000058   0500001A           BNE      ??_Paint_0
     67              ItemInfo.ItemIndex = BUTTON_SKINFLEX_PI_PRESSED;
     68            } else if (State & BUTTON_STATE_FOCUS) {
   \   0000005C   010015E3           TST      R5,#0x1
     69              ItemInfo.ItemIndex = BUTTON_SKINFLEX_PI_FOCUSSED;
   \   00000060   0110A013           MOVNE    R1,#+1
   \   00000064   0200001A           BNE      ??_Paint_0
     70            } else if (Status & WM_SF_DISABLED) {
   \   00000068   100016E3           TST      R6,#0x10
     71              ItemInfo.ItemIndex = BUTTON_SKINFLEX_PI_DISABLED;
   \   0000006C   0310A013           MOVNE    R1,#+3
     72            } else {
     73              ItemInfo.ItemIndex = BUTTON_SKINFLEX_PI_ENABLED;
   \   00000070   0210A003           MOVEQ    R1,#+2
   \                     ??_Paint_0:
   \   00000074   08108DE5           STR      R1,[SP, #+8]
     74            }
     75            //
     76            // Draw background
     77            //
     78            ItemInfo.Cmd = WIDGET_ITEM_DRAW_BACKGROUND;
   \   00000078   0310A0E3           MOV      R1,#+3
   \   0000007C   04108DE5           STR      R1,[SP, #+4]
     79            pfDrawSkin(&ItemInfo);
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   34FF2FE1           BLX      R4
     80            //
     81            // Draw bitmap
     82            //
     83            ItemInfo.Cmd = WIDGET_ITEM_DRAW_BITMAP;
   \   00000088   0410A0E3           MOV      R1,#+4
   \   0000008C   04108DE5           STR      R1,[SP, #+4]
     84            pfDrawSkin(&ItemInfo);
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   34FF2FE1           BLX      R4
     85            //
     86            // Draw text
     87            //
     88            ItemInfo.Cmd = WIDGET_ITEM_DRAW_TEXT;
   \   00000098   1010A0E3           MOV      R1,#+16
   \   0000009C   04108DE5           STR      R1,[SP, #+4]
     89            pfDrawSkin(&ItemInfo);
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   34FF2FE1           BLX      R4
     90            //
     91            // Draw focus frame
     92            //
     93            ItemInfo.Cmd = WIDGET_ITEM_DRAW_FOCUS;
   \   000000A8   0810A0E3           MOV      R1,#+8
   \   000000AC   04108DE5           STR      R1,[SP, #+4]
     94            pfDrawSkin(&ItemInfo);
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   34FF2FE1           BLX      R4
     95          }
   \   000000B8   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000BC   F081BDE8           POP      {R4-R8,PC}       ;; return
     96          
     97          /*********************************************************************
     98          *
     99          *       _Create
    100          */

   \                                 In section .text, align 4, keep-with-next
    101          static void _Create(BUTTON_Handle hObj) {
   \                     _Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    102            BUTTON_Obj * pObj;
    103            BUTTON_SKIN_PRIVATE * pSkinPrivate;
    104            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   00C0A0E3           MOV      R12,#+0
   \   00000020   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000024   0E10A0E8           STM      R0!,{R1-R3,R12}
    105          
    106            //
    107            // Get properties
    108            //
    109            pObj = BUTTON_LOCK_H(hObj);
    110            pSkinPrivate = (BUTTON_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   600090E5           LDR      R0,[R0, #+96]
   \   00000034   085090E5           LDR      R5,[R0, #+8]
    111            GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    112            //
    113            // Create
    114            //
    115            ItemInfo.Cmd = WIDGET_ITEM_CREATE;
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   04108DE5           STR      R1,[SP, #+4]
    116            ItemInfo.hWin = hObj;
   \   00000044   00408DE5           STR      R4,[SP, #+0]
    117            pSkinPrivate->pfDrawSkin(&ItemInfo);
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   001095E5           LDR      R1,[R5, #+0]
   \   00000050   31FF2FE1           BLX      R1
    118          }
   \   00000054   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    119          
    120          /*********************************************************************
    121          *
    122          *        Private data
    123          *
    124          **********************************************************************
    125          */
    126          /*********************************************************************
    127          *
    128          *       _Skin
    129          */

   \                                 In section .data, align 4
    130          static WIDGET_SKIN _Skin = {
   \                     _Skin:
   \   00000000   ............       DC32 _Paint, _Create, BUTTON__DefaultProps + 24H
   \              ............
    131            _Paint,
    132            _Create,
    133            &BUTTON__DefaultProps.SkinPrivate
    134          };
    135          
    136          /*********************************************************************
    137          *
    138          *        Public code
    139          *
    140          **********************************************************************
    141          */
    142          /*********************************************************************
    143          *
    144          *       BUTTON_SetSkin
    145          */

   \                                 In section .text, align 4, keep-with-next
    146          void BUTTON_SetSkin(BUTTON_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
   \                     BUTTON_SetSkin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    147            BUTTON_Obj * pObj;
    148          
    149            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    150            pObj = BUTTON_LOCK_H(hObj);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
    151            //
    152            // Enable skinning
    153            //
    154            pObj->pWidgetSkin = &_Skin;
   \   0000001C   ........           LDR      R1,??DataTable2
   \   00000020   601080E5           STR      R1,[R0, #+96]
    155            //
    156            // Set private callback function
    157            //
    158            pObj->Props.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   00000024   585080E5           STR      R5,[R0, #+88]
    159            GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    160            //
    161            // Invalidate widget
    162            //
    163            WM_SetHasTrans(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_SetHasTrans
    164            WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    165            WM_UNLOCK();
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3040BDE8           POP      {R4,R5,LR}
   \   00000044   ........           B        GUI_Unlock       ;; tailcall
    166          }
    167          
    168          /*********************************************************************
    169          *
    170          *       BUTTON_SetDefaultSkin
    171          */

   \                                 In section .text, align 4, keep-with-next
    172          void BUTTON_SetDefaultSkin(WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
    173            BUTTON__pSkinDefault = &_Skin;
   \                     BUTTON_SetDefaultSkin:
   \   00000000   ........           LDR      R1,??DataTable2_1
   \   00000004   ........           LDR      R2,??DataTable2
   \   00000008   002081E5           STR      R2,[R1, #+0]
    174            BUTTON__DefaultProps.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000000C   ........           LDR      R1,??DataTable2_2
   \   00000010   240081E5           STR      R0,[R1, #+36]
    175          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     _Skin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     BUTTON__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     BUTTON__DefaultProps

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
    176          
    177          #else
    178            void BUTTON_Skin_C(void);
    179            void BUTTON_Skin_C(void) {} /* avoid empty object files */
    180          #endif /* GUI_WINSUPPORT */
    181          
    182          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     BUTTON_SetDefaultSkin      0
     BUTTON_SetSkin            16
     _Create                   48
     _Paint                    56


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _Paint                 192
     _Create                 92
     _Skin                   12
     BUTTON_SetSkin          72
     BUTTON_SetDefaultSkin   24
     ??DataTable2             4
     ??DataTable2_1           4
     ??DataTable2_2           4
     ?<Constant {0L}>        32

 
  12 bytes in section .data
  32 bytes in section .rodata
 392 bytes in section .text
 
 392 bytes of CODE  memory
  32 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
