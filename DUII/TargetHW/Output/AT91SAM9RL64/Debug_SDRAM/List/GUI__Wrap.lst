###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:09 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__Wrap.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__Wrap.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I__Wrap.lst                                              #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    __Wrap.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__Wrap.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__Wrap.c
     19          Purpose     : Implementation of wrap routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          #ifndef   GUI_SUPPORT_BIDI
     32            #define GUI_SUPPORT_BIDI 0
     33          #endif
     34          
     35          /*********************************************************************
     36          *
     37          *       Static code
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       _IsLineEnd
     44          */
     45          static int _IsLineEnd(U16 Char) {
     46            if (!Char || (Char == '\n')) {
     47              return 1;
     48            }
     49            return 0;
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       _GetNoWrap
     55          */
     56          static int _GetNoWrap(const char GUI_UNI_PTR * s) {
     57            return GUI__GetLineNumChars(s, 0x7FFF);
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       _GetWordWrap (without Arabic support)
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static int _GetWordWrap(const char GUI_UNI_PTR * s, int xSize, int * pxDist) {
   \                     _GetWordWrap:
   \   00000000   F5492DE9           PUSH     {R0,R2,R4-R8,R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0170A0E1           MOV      R7,R1
     65            int xDist = 0, NumChars = 0, WordWrap = 0, CharDist = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   0080A0E3           MOV      R8,#+0
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   0040A0E3           MOV      R4,#+0
     66            U16 Char, PrevChar = 0, FirstChar = 0;
   \   0000001C   00B0A0E3           MOV      R11,#+0
   \   00000020   000000EA           B        ??_GetWordWrap_0
     67            while (1) {
     68              Char = GUI_UC__GetCharCodeInc(&s);   /* Similar to:  *s++ */
     69              if (!FirstChar) {
     70                FirstChar = Char;
     71              }
     72              /* Let's first check if the line end is reached. In this case we are done. */
     73              if (_IsLineEnd(Char)) {
     74                WordWrap = NumChars;
     75                break;
     76              }
     77              /* If the current character is part of leading spaces the position can be used for wrapping */
     78              if ((Char != ' ') && (FirstChar == ' ')) {
     79                FirstChar = 0;
     80                WordWrap = NumChars;
     81              /* If the current character is a space and the previous character not, we found a wrapping position */
     82              } else if ((Char == ' ') && (Char != PrevChar)) {
     83                WordWrap = NumChars;
     84              /* If the current character is a trailing space the position can be used for wrapping */
     85              } else if ((Char == ' ') && (PrevChar == ' ')) {
     86                WordWrap = NumChars;
     87              }
     88              PrevChar = Char;
     89              CharDist = GUI_GetCharDistX(Char);
     90              xDist += CharDist;
     91              if ((xDist <= xSize) || (NumChars == 0)) {
     92                NumChars++;
   \                     ??_GetWordWrap_1:
   \   00000024   018088E2           ADD      R8,R8,#+1
     93              } else {
   \                     ??_GetWordWrap_0:
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   ........           BL       GUI_UC__GetCharCodeInc
   \   00000030   00005BE3           CMP      R11,#+0
   \   00000034   00B0A001           MOVEQ    R11,R0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A005013           CMPNE    R0,#+10
   \   00000040   0300000A           BEQ      ??_GetWordWrap_2
   \   00000044   200050E3           CMP      R0,#+32
   \   00000048   0300001A           BNE      ??_GetWordWrap_3
   \   0000004C   0860A0E1           MOV      R6,R8
   \   00000050   040000EA           B        ??_GetWordWrap_4
   \                     ??_GetWordWrap_2:
   \   00000054   0860A0E1           MOV      R6,R8
   \   00000058   090000EA           B        ??_GetWordWrap_5
   \                     ??_GetWordWrap_3:
   \   0000005C   20005BE3           CMP      R11,#+32
   \   00000060   00B0A003           MOVEQ    R11,#+0
   \   00000064   0860A001           MOVEQ    R6,R8
   \                     ??_GetWordWrap_4:
   \   00000068   ........           BL       GUI_GetCharDistX
   \   0000006C   0040A0E1           MOV      R4,R0
   \   00000070   055084E0           ADD      R5,R4,R5
   \   00000074   050057E1           CMP      R7,R5
   \   00000078   E9FFFFAA           BGE      ??_GetWordWrap_1
   \   0000007C   000058E3           CMP      R8,#+0
   \   00000080   E7FFFF0A           BEQ      ??_GetWordWrap_1
     94                break;
     95              }
     96            }
     97            if (!WordWrap) {
   \                     ??_GetWordWrap_5:
   \   00000084   000056E3           CMP      R6,#+0
     98              WordWrap = NumChars;
     99            }
    100            if (pxDist) {
   \   00000088   08009DE5           LDR      R0,[SP, #+8]
   \   0000008C   0860A001           MOVEQ    R6,R8
   \   00000090   000050E3           CMP      R0,#+0
    101              xDist -= CharDist;
    102              *pxDist = xDist;
   \   00000094   08109D15           LDRNE    R1,[SP, #+8]
   \   00000098   04004510           SUBNE    R0,R5,R4
   \   0000009C   00008115           STRNE    R0,[R1, #+0]
    103            }
    104            return WordWrap;
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   0CD08DE2           ADD      SP,SP,#+12
   \   000000A8   F089BDE8           POP      {R4-R8,R11,PC}   ;; return
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       _GetCharWrap (without Arabic support)
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          static int _GetCharWrap(const char GUI_UNI_PTR * s, int xSize) {
   \                     _GetCharWrap:
   \   00000000   F1402DE9           PUSH     {R0,R4-R7,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    112            int xDist = 0, NumChars = 0;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   000000EA           B        ??_GetCharWrap_0
    113            U16 Char;
    114            while ((Char = GUI_UC__GetCharCodeInc(&s)) != 0) {
    115              xDist += GUI_GetCharDistX(Char);
    116              if ((NumChars && (xDist > xSize)) || (Char == '\n')) {
    117                break;
    118              }
    119              NumChars++;
   \                     ??_GetCharWrap_1:
   \   00000014   016086E2           ADD      R6,R6,#+1
   \                     ??_GetCharWrap_0:
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       GUI_UC__GetCharCodeInc
   \   00000020   0070B0E1           MOVS     R7,R0
   \   00000024   0700000A           BEQ      ??_GetCharWrap_2
   \   00000028   ........           BL       GUI_GetCharDistX
   \   0000002C   055080E0           ADD      R5,R0,R5
   \   00000030   000056E3           CMP      R6,#+0
   \   00000034   0100000A           BEQ      ??_GetCharWrap_3
   \   00000038   050054E1           CMP      R4,R5
   \   0000003C   010000BA           BLT      ??_GetCharWrap_2
   \                     ??_GetCharWrap_3:
   \   00000040   0A0057E3           CMP      R7,#+10
   \   00000044   F2FFFF1A           BNE      ??_GetCharWrap_1
    120            }
    121            return NumChars;
   \                     ??_GetCharWrap_2:
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   F080BDE8           POP      {R4-R7,PC}       ;; return
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       Private data
    127          *
    128          **********************************************************************
    129          */
    130          /*********************************************************************
    131          *
    132          *       Function pointers
    133          */
    134          #if (GUI_SUPPORT_BIDI)
    135            int (* GUI__Wrap_pfGetWordWrap)(const char GUI_UNI_PTR * s, int xSize, int * pxDist) = GUI__BIDI_GetWordWrap;
    136            int (* GUI__Wrap_pfGetCharWrap)(const char GUI_UNI_PTR * s, int xSize)               = GUI__BIDI_GetCharWrap;
    137          #else

   \                                 In section .data, align 4
    138            int (* GUI__Wrap_pfGetWordWrap)(const char GUI_UNI_PTR * s, int xSize, int * pxDist) = _GetWordWrap;
   \                     GUI__Wrap_pfGetWordWrap:
   \   00000000   ........           DC32 _GetWordWrap
    139            int (* GUI__Wrap_pfGetCharWrap)(const char GUI_UNI_PTR * s, int xSize)               = _GetCharWrap;
   \                     GUI__Wrap_pfGetCharWrap:
   \   00000004   ........           DC32 _GetCharWrap
    140          #endif
    141          
    142          /*********************************************************************
    143          *
    144          *       Static code
    145          *
    146          **********************************************************************
    147          */
    148          /*********************************************************************
    149          *
    150          *       _WrapGetNumCharsDisp
    151          */
    152          static int _WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode, int * pxDist) {
    153            int r;
    154            switch (WrapMode) {
    155            case GUI_WRAPMODE_WORD:
    156              r = GUI__Wrap_pfGetWordWrap(pText, xSize, pxDist);
    157              break;
    158            case GUI_WRAPMODE_CHAR:
    159              r = GUI__Wrap_pfGetCharWrap(pText, xSize);
    160              break;
    161            default:
    162              r = _GetNoWrap(pText);
    163            }
    164            return r;
    165          }
    166          
    167          /*********************************************************************
    168          *
    169          *       Public code
    170          *
    171          **********************************************************************
    172          */
    173          /*********************************************************************
    174          *
    175          *       GUI__WrapGetNumCharsDisp
    176          *
    177          * Returns:
    178          *  Number of characters to display in the line.
    179          *  Trailing spaces and line end character are
    180          *  not counted
    181          */

   \                                 In section .text, align 4, keep-with-next
    182          int GUI__WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
   \                     GUI__WrapGetNumCharsDisp:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    183            return _WrapGetNumCharsDisp(pText, xSize, WrapMode, 0);
   \   00000008   010052E3           CMP      R2,#+1
   \   0000000C   0600000A           BEQ      ??GUI__WrapGetNumCharsDisp_0
   \   00000010   0A00003A           BCC      ??GUI__WrapGetNumCharsDisp_1
   \   00000014   020052E3           CMP      R2,#+2
   \   00000018   0800001A           BNE      ??GUI__WrapGetNumCharsDisp_1
   \   0000001C   ........           LDR      R2,??DataTable2
   \   00000020   042092E5           LDR      R2,[R2, #+4]
   \   00000024   32FF2FE1           BLX      R2
   \   00000028   070000EA           B        ??GUI__WrapGetNumCharsDisp_2
   \                     ??GUI__WrapGetNumCharsDisp_0:
   \   0000002C   ........           LDR      R3,??DataTable2
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   003093E5           LDR      R3,[R3, #+0]
   \   00000038   33FF2FE1           BLX      R3
   \   0000003C   020000EA           B        ??GUI__WrapGetNumCharsDisp_2
   \                     ??GUI__WrapGetNumCharsDisp_1:
   \   00000040   FF10A0E3           MOV      R1,#+255
   \   00000044   7F1C81E3           ORR      R1,R1,#0x7F00
   \   00000048   ........           BL       GUI__GetLineNumChars
   \                     ??GUI__WrapGetNumCharsDisp_2:
   \   0000004C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000050   0080BDE8           POP      {PC}             ;; return
    184          }
    185          
    186          /*********************************************************************
    187          *
    188          *       GUI__WrapGetNumCharsToNextLine
    189          */

   \                                 In section .text, align 4, keep-with-next
    190          int GUI__WrapGetNumCharsToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
   \                     GUI__WrapGetNumCharsToNextLine:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0250A0E1           MOV      R5,R2
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
    191            int NumChars;
    192            int xDist;
    193            U16 Char;
    194            NumChars = _WrapGetNumCharsDisp(pText, xSize, WrapMode, &xDist);
   \   00000010   010055E3           CMP      R5,#+1
   \   00000014   0600000A           BEQ      ??GUI__WrapGetNumCharsToNextLine_0
   \   00000018   0A00003A           BCC      ??GUI__WrapGetNumCharsToNextLine_1
   \   0000001C   020055E3           CMP      R5,#+2
   \   00000020   0800001A           BNE      ??GUI__WrapGetNumCharsToNextLine_1
   \   00000024   ........           LDR      R2,??DataTable2
   \   00000028   042092E5           LDR      R2,[R2, #+4]
   \   0000002C   32FF2FE1           BLX      R2
   \   00000030   070000EA           B        ??GUI__WrapGetNumCharsToNextLine_2
   \                     ??GUI__WrapGetNumCharsToNextLine_0:
   \   00000034   ........           LDR      R3,??DataTable2
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   33FF2FE1           BLX      R3
   \   00000044   020000EA           B        ??GUI__WrapGetNumCharsToNextLine_2
   \                     ??GUI__WrapGetNumCharsToNextLine_1:
   \   00000048   FF10A0E3           MOV      R1,#+255
   \   0000004C   7F1C81E3           ORR      R1,R1,#0x7F00
   \   00000050   ........           BL       GUI__GetLineNumChars
   \                     ??GUI__WrapGetNumCharsToNextLine_2:
   \   00000054   0060A0E1           MOV      R6,R0
    195            pText   += GUI_UC__NumChars2NumBytes(pText, NumChars);
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   04009DE5           LDR      R0,[SP, #+4]
   \   00000060   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000064   04109DE5           LDR      R1,[SP, #+4]
   \   00000068   010080E0           ADD      R0,R0,R1
   \   0000006C   04008DE5           STR      R0,[SP, #+4]
    196            Char     = GUI_UC__GetCharCodeInc(&pText);
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   ........           BL       GUI_UC__GetCharCodeInc
    197            if (Char == '\n') {
   \   00000078   0A0050E3           CMP      R0,#+10
    198              NumChars++;
   \   0000007C   01608602           ADDEQ    R6,R6,#+1
   \   00000080   0E00000A           BEQ      ??GUI__WrapGetNumCharsToNextLine_3
    199            } else {
    200              if ((WrapMode == GUI_WRAPMODE_WORD) && (Char == ' ')) {
   \   00000084   010055E3           CMP      R5,#+1
   \   00000088   20005003           CMPEQ    R0,#+32
   \   0000008C   0B00001A           BNE      ??GUI__WrapGetNumCharsToNextLine_3
    201                int xDistChar = GUI_GetCharDistX(Char);
   \   00000090   ........           BL       GUI_GetCharDistX
   \   00000094   0050A0E1           MOV      R5,R0
   \                     ??GUI__WrapGetNumCharsToNextLine_4:
   \   00000098   00009DE5           LDR      R0,[SP, #+0]
   \   0000009C   000054E1           CMP      R4,R0
   \   000000A0   060000BA           BLT      ??GUI__WrapGetNumCharsToNextLine_3
    202                while ((Char == ' ') && (xSize >= xDist)) {
    203                  NumChars++;
    204                  xDist += xDistChar;
   \   000000A4   000085E0           ADD      R0,R5,R0
   \   000000A8   00008DE5           STR      R0,[SP, #+0]
   \   000000AC   016086E2           ADD      R6,R6,#+1
    205                  Char = GUI_UC__GetCharCodeInc(&pText);
    206                }
   \   000000B0   04008DE2           ADD      R0,SP,#+4
   \   000000B4   ........           BL       GUI_UC__GetCharCodeInc
   \   000000B8   200050E3           CMP      R0,#+32
   \   000000BC   F5FFFF0A           BEQ      ??GUI__WrapGetNumCharsToNextLine_4
    207              }
    208            }
    209            return NumChars;
   \                     ??GUI__WrapGetNumCharsToNextLine_3:
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   08D08DE2           ADD      SP,SP,#+8
   \   000000C8   7080BDE8           POP      {R4-R6,PC}       ;; return
    210          }
    211          
    212          /*********************************************************************
    213          *
    214          *       GUI__WrapGetNumBytesToNextLine
    215          */

   \                                 In section .text, align 4, keep-with-next
    216          int GUI__WrapGetNumBytesToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
   \                     GUI__WrapGetNumBytesToNextLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0150A0E1           MOV      R5,R1
    217            int NumChars, NumBytes;
    218            NumChars = GUI__WrapGetNumCharsToNextLine(pText, xSize, WrapMode);
   \   00000014   00408DE5           STR      R4,[SP, #+0]
   \   00000018   010056E3           CMP      R6,#+1
   \   0000001C   0600000A           BEQ      ??GUI__WrapGetNumBytesToNextLine_0
   \   00000020   0A00003A           BCC      ??GUI__WrapGetNumBytesToNextLine_1
   \   00000024   020056E3           CMP      R6,#+2
   \   00000028   0800001A           BNE      ??GUI__WrapGetNumBytesToNextLine_1
   \   0000002C   ........           LDR      R2,??DataTable2
   \   00000030   042092E5           LDR      R2,[R2, #+4]
   \   00000034   32FF2FE1           BLX      R2
   \   00000038   070000EA           B        ??GUI__WrapGetNumBytesToNextLine_2
   \                     ??GUI__WrapGetNumBytesToNextLine_0:
   \   0000003C   ........           LDR      R3,??DataTable2
   \   00000040   04208DE2           ADD      R2,SP,#+4
   \   00000044   003093E5           LDR      R3,[R3, #+0]
   \   00000048   33FF2FE1           BLX      R3
   \   0000004C   020000EA           B        ??GUI__WrapGetNumBytesToNextLine_2
   \                     ??GUI__WrapGetNumBytesToNextLine_1:
   \   00000050   FF10A0E3           MOV      R1,#+255
   \   00000054   7F1C81E3           ORR      R1,R1,#0x7F00
   \   00000058   ........           BL       GUI__GetLineNumChars
   \                     ??GUI__WrapGetNumBytesToNextLine_2:
   \   0000005C   0070A0E1           MOV      R7,R0
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   00009DE5           LDR      R0,[SP, #+0]
   \   00000068   ........           BL       GUI_UC__NumChars2NumBytes
   \   0000006C   00109DE5           LDR      R1,[SP, #+0]
   \   00000070   010080E0           ADD      R0,R0,R1
   \   00000074   00008DE5           STR      R0,[SP, #+0]
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           BL       GUI_UC__GetCharCodeInc
   \   00000080   0A0050E3           CMP      R0,#+10
   \   00000084   0F00000A           BEQ      ??GUI__WrapGetNumBytesToNextLine_3
   \   00000088   010056E3           CMP      R6,#+1
   \   0000008C   20005003           CMPEQ    R0,#+32
   \   00000090   0D00001A           BNE      ??GUI__WrapGetNumBytesToNextLine_4
   \   00000094   ........           BL       GUI_GetCharDistX
   \   00000098   0060A0E1           MOV      R6,R0
   \                     ??GUI__WrapGetNumBytesToNextLine_5:
   \   0000009C   04009DE5           LDR      R0,[SP, #+4]
   \   000000A0   000055E1           CMP      R5,R0
   \   000000A4   080000BA           BLT      ??GUI__WrapGetNumBytesToNextLine_4
   \   000000A8   000086E0           ADD      R0,R6,R0
   \   000000AC   04008DE5           STR      R0,[SP, #+4]
   \   000000B0   017087E2           ADD      R7,R7,#+1
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   ........           BL       GUI_UC__GetCharCodeInc
   \   000000BC   200050E3           CMP      R0,#+32
   \   000000C0   F5FFFF0A           BEQ      ??GUI__WrapGetNumBytesToNextLine_5
   \   000000C4   000000EA           B        ??GUI__WrapGetNumBytesToNextLine_4
   \                     ??GUI__WrapGetNumBytesToNextLine_3:
   \   000000C8   017087E2           ADD      R7,R7,#+1
    219            NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
    220            return NumBytes;
   \                     ??GUI__WrapGetNumBytesToNextLine_4:
   \   000000CC   0710A0E1           MOV      R1,R7
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       GUI_UC__NumChars2NumBytes
   \   000000D8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
    221          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI__Wrap_pfGetWordWrap
    222          
    223          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GUI__WrapGetNumBytesToNextLine     32
     GUI__WrapGetNumCharsDisp            8
     GUI__WrapGetNumCharsToNextLine     24
     _GetCharWrap                       24
     _GetWordWrap                       48


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _GetWordWrap                    172
     _GetCharWrap                     84
     GUI__Wrap_pfGetWordWrap           8
     GUI__Wrap_pfGetCharWrap
     GUI__WrapGetNumCharsDisp         84
     GUI__WrapGetNumCharsToNextLine  204
     GUI__WrapGetNumBytesToNextLine  224
     ??DataTable2                      4

 
   8 bytes in section .data
 772 bytes in section .text
 
 772 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
