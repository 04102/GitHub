###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:03 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTVIEW_SetItemBitmap.c            #
#    Command line =  C:\DUII\TargetHW\GUI\LISTVIEW_SetItemBitmap.c -D         #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STVIEW_SetItemBitmap.lst                                 #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TVIEW_SetItemBitmap.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTVIEW_SetItemBitmap.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTVIEW_SetItemBitmap.c
     19          Purpose     : Implementation of LISTVIEW_SetItemBitmap
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "LISTVIEW_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _GetpCellInfo
     38          *
     39          * Purpose:
     40          *   Returns a pointer of a LISTVIEW_CELL_INFO structure in locked state.
     41          *   The pointer needs to be unlocked after use.
     42          */

   \                                 In section .text, align 4, keep-with-next
     43          static LISTVIEW_CELL_INFO * _GetpCellInfo(LISTVIEW_Handle hObj, unsigned Column, unsigned Row) {
   \                     _GetpCellInfo:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     44            LISTVIEW_CELL_INFO * pCellInfo = 0;
   \   00000010   0050A0E3           MOV      R5,#+0
     45            if (hObj) {
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   2E00000A           BEQ      ??_GetpCellInfo_0
     46              GUI_ARRAY RowArray;
     47              GUI_ARRAY CellArray;
     48              unsigned NumColumns, NumRows;
     49              LISTVIEW_Obj * pObj;
     50              LISTVIEW_ROW  * pRow;
     51              LISTVIEW_CELL * pCell;
     52              WM_HMEM hCellInfo;
     53          
     54              pObj = LISTVIEW_LOCK_H(hObj);
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0070A0E1           MOV      R7,R0
     55              NumColumns = LISTVIEW__GetNumColumns(pObj);
   \   00000024   ........           BL       LISTVIEW__GetNumColumns
   \   00000028   0080A0E1           MOV      R8,R0
     56              NumRows    = LISTVIEW__GetNumRows(pObj);
   \   0000002C   0700A0E1           MOV      R0,R7
   \   00000030   ........           BL       LISTVIEW__GetNumRows
   \   00000034   0090A0E1           MOV      R9,R0
     57              RowArray   = pObj->RowArray;
   \   00000038   387097E5           LDR      R7,[R7, #+56]
     58              GUI_UNLOCK_H(pObj);
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
     59              if ((Column < NumColumns) && (Row < NumRows)) {
   \   00000040   080054E1           CMP      R4,R8
   \   00000044   09005631           CMPCC    R6,R9
   \   00000048   2200002A           BCS      ??_GetpCellInfo_0
     60                pRow  = (LISTVIEW_ROW  *)GUI_ARRAY_GetpItemLocked(RowArray,  Row);
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           BL       GUI_ARRAY_GetpItemLocked
     61                if (pRow) {
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   1D00000A           BEQ      ??_GetpCellInfo_0
     62                  CellArray = pRow->CellArray;
   \   00000060   006090E5           LDR      R6,[R0, #+0]
     63                  GUI_UNLOCK_H(pRow);
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
     64                  pCell = (LISTVIEW_CELL *)GUI_ARRAY_GetpItemLocked(CellArray, Column);
   \   00000068   0410A0E1           MOV      R1,R4
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI_ARRAY_GetpItemLocked
     65                  if (pCell) {
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   1600000A           BEQ      ??_GetpCellInfo_0
     66                    hCellInfo = pCell->hCellInfo;
   \   0000007C   007090E5           LDR      R7,[R0, #+0]
     67                    GUI_UNLOCK_H(pCell);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
     68                    if (hCellInfo == 0) {
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0F00001A           BNE      ??_GetpCellInfo_1
     69                      hCellInfo = GUI_ALLOC_AllocZero(sizeof(LISTVIEW_CELL_INFO));
   \   0000008C   3000A0E3           MOV      R0,#+48
   \   00000090   ........           BL       GUI_ALLOC_AllocZero
   \   00000094   0070B0E1           MOVS     R7,R0
     70                      if (hCellInfo) {
   \   00000098   0E00000A           BEQ      ??_GetpCellInfo_0
     71                        pCell = (LISTVIEW_CELL *)GUI_ARRAY_GetpItemLocked(CellArray, Column);
     72                        pCell->hCellInfo = hCellInfo;
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000A8   007080E5           STR      R7,[R0, #+0]
     73                        GUI_UNLOCK_H(pCell);
   \   000000AC   ........           BL       GUI_ALLOC_UnlockH
     74                        pCellInfo = (LISTVIEW_CELL_INFO *)GUI_LOCK_H(hCellInfo);
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   0050A0E1           MOV      R5,R0
     75                        GUI_MEMSET((U8 *)pCellInfo, 0, sizeof(LISTVIEW_CELL_INFO));
   \   000000BC   3020A0E3           MOV      R2,#+48
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   ........           BL       GUI__memset
   \   000000C8   020000EA           B        ??_GetpCellInfo_0
     76                      }
     77                    } else {
     78                      pCellInfo = (LISTVIEW_CELL_INFO *)GUI_LOCK_H(hCellInfo);
   \                     ??_GetpCellInfo_1:
   \   000000CC   0700A0E1           MOV      R0,R7
   \   000000D0   ........           BL       GUI_ALLOC_LockH
   \   000000D4   0050A0E1           MOV      R5,R0
     79                    }
     80                  }
     81                }
     82              }
     83            }
     84            return pCellInfo;
   \                     ??_GetpCellInfo_0:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   04D08DE2           ADD      SP,SP,#+4
   \   000000E0   F083BDE8           POP      {R4-R9,PC}       ;; return
     85          }
     86          
     87          /*********************************************************************
     88          *
     89          *       _Draw
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          static void _Draw(LISTVIEW_Handle hObj, unsigned Column, unsigned Row, GUI_RECT * pRect) {
   \                     _Draw:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0370A0E1           MOV      R7,R3
     92            LISTVIEW_Obj * pObj;
     93            LISTVIEW_CELL_INFO * pCellInfo;
     94            const GUI_BITMAP GUI_UNI_PTR * pBitmap;
     95          
     96            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1900000A           BEQ      ??_Draw_0
     97              pCellInfo = _GetpCellInfo(hObj, Column, Row);
   \   00000018   ........           BL       _GetpCellInfo
   \   0000001C   0080B0E1           MOVS     R8,R0
     98              if (pCellInfo) {
   \   00000020   1600000A           BEQ      ??_Draw_0
     99                if (pCellInfo->pData) {
   \   00000024   046098E5           LDR      R6,[R8, #+4]
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0B00000A           BEQ      ??_Draw_1
    100                  pBitmap = (const GUI_BITMAP GUI_UNI_PTR *)pCellInfo->pData;
    101                  WM_SetUserClipRect(pRect);
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   ........           BL       WM_SetUserClipRect
    102                  GUI_DrawBitmap(pBitmap, pRect->x0 + pCellInfo->xOff, pRect->y0 + pCellInfo->yOff);
   \   00000038   F200D7E1           LDRSH    R0,[R7, #+2]
   \   0000003C   FA12D8E1           LDRSH    R1,[R8, #+42]
   \   00000040   002081E0           ADD      R2,R1,R0
   \   00000044   F000D7E1           LDRSH    R0,[R7, #+0]
   \   00000048   F812D8E1           LDRSH    R1,[R8, #+40]
   \   0000004C   001081E0           ADD      R1,R1,R0
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       GUI_DrawBitmap
    103                  WM_SetUserClipRect(NULL);
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       WM_SetUserClipRect
    104                }
    105                GUI_UNLOCK_H(pCellInfo);
   \                     ??_Draw_1:
   \   00000060   ........           BL       GUI_ALLOC_UnlockH
    106                pObj = LISTVIEW_LOCK_H(hObj);
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI_ALLOC_LockH
    107                LISTVIEW__InvalidateRow(hObj, pObj, Row);
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       LISTVIEW__InvalidateRow
    108                GUI_UNLOCK_H(pObj);
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
    109              }
    110            }
    111          }
   \                     ??_Draw_0:
   \   00000080   F081BDE8           POP      {R4-R8,PC}       ;; return
    112          
    113          /*********************************************************************
    114          *
    115          *       Public routines
    116          *
    117          **********************************************************************
    118          */
    119          /*********************************************************************
    120          *
    121          *       LISTVIEW_SetItemBitmap
    122          */

   \                                 In section .text, align 4, keep-with-next
    123          void LISTVIEW_SetItemBitmap(LISTVIEW_Handle hObj, unsigned Column, unsigned Row, int xOff, int yOff, const GUI_BITMAP GUI_UNI_PTR * pBitmap) {
   \                     LISTVIEW_SetItemBitmap:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   20709DE5           LDR      R7,[SP, #+32]
   \   0000001C   24909DE5           LDR      R9,[SP, #+36]
    124            LISTVIEW_Obj * pObj;
    125            LISTVIEW_CELL_INFO * pCellInfo;
    126          
    127            if (hObj) {
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   1700000A           BEQ      ??LISTVIEW_SetItemBitmap_0
    128              WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    129              pCellInfo = _GetpCellInfo(hObj, Column, Row);
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0810A0E1           MOV      R1,R8
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _GetpCellInfo
   \   0000003C   0080B0E1           MOVS     R8,R0
    130              if (pCellInfo) {
   \   00000040   0F00000A           BEQ      ??LISTVIEW_SetItemBitmap_1
    131                pObj = LISTVIEW_LOCK_H(hObj);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       GUI_ALLOC_LockH
    132                pCellInfo->pData  = (void *)pBitmap;
    133                pCellInfo->pfDraw = _Draw;
   \   0000004C   ........           LDR      R1,??DataTable0
   \   00000050   049088E5           STR      R9,[R8, #+4]
   \   00000054   001088E5           STR      R1,[R8, #+0]
    134                pCellInfo->Flags |= LISTVIEW_CELL_INFO_BITMAP;
   \   00000058   2C10D8E5           LDRB     R1,[R8, #+44]
    135                pCellInfo->xOff = (I16)xOff;
    136                pCellInfo->yOff = (I16)yOff;
    137                LISTVIEW__InvalidateRow(hObj, pObj, Row);
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   021081E3           ORR      R1,R1,#0x2
   \   00000064   2C10C8E5           STRB     R1,[R8, #+44]
   \   00000068   B862C8E1           STRH     R6,[R8, #+40]
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   BA72C8E1           STRH     R7,[R8, #+42]
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       LISTVIEW__InvalidateRow
    138                GUI_UNLOCK_H(pObj);
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
    139              }
    140              if (pCellInfo) {
    141                GUI_UNLOCK_H(pCellInfo);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
    142              }
    143              WM_UNLOCK();
   \                     ??LISTVIEW_SetItemBitmap_1:
   \   00000084   ........           BL       GUI_Unlock
    144            }
    145          }
   \                     ??LISTVIEW_SetItemBitmap_0:
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     _Draw
    146          
    147          #else                            /* Avoid problems with empty object modules */
    148            void LISTVIEW_SetItemBitmap_C(void);
    149            void LISTVIEW_SetItemBitmap_C(void) {}
    150          #endif
    151          
    152          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     LISTVIEW_SetItemBitmap     32
     _Draw                      24
     _GetpCellInfo              32


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _GetpCellInfo           228
     _Draw                   132
     LISTVIEW_SetItemBitmap  144
     ??DataTable0              4

 
 508 bytes in section .text
 
 508 bytes of CODE memory

Errors: none
Warnings: none
