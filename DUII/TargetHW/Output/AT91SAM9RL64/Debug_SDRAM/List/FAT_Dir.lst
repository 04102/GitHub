###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FAT_Dir.c                            #
#    Command line =  C:\DUII\TargetHW\FS\FAT_Dir.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\FA #
#                    T_Dir.lst                                                #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\FAT #
#                    _Dir.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FAT_Dir.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FAT_Dir.c
     19          Purpose     : FSL Directory functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          #include "FAT_Intern.h"
     32          
     33          /*********************************************************************
     34          *
     35          *       Static Data
     36          *
     37          **********************************************************************
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static const FS_83NAME NameDirDot    = {{'.', 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20}};
   \                     NameDirDot:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   2E2020202020       DC8 46, 32, 32, 32, 32, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   2000               DC8 32, 0

   \                                 In section .text, align 4, keep-with-next
     40          static const FS_83NAME NameDirDotDot = {{'.', '.',  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20}};
   \                     NameDirDotDot:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   2E2E20202020       DC8 46, 46, 32, 32, 32, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   2000               DC8 32, 0
     41          
     42          /*********************************************************************
     43          *
     44          *       Static code
     45          *
     46          **********************************************************************
     47          */
     48          
     49          
     50          /*********************************************************************
     51          *
     52          *       Public Code
     53          *
     54          **********************************************************************
     55          */
     56          
     57          /*********************************************************************
     58          *
     59          *       FS_FAT_CreateDirEx
     60          *
     61          *  Description:
     62          *    FS internal function. Create a directory in the directory specified
     63          *    with DirStart. Do not call, if you have not checked before for
     64          *    existing directory with name pDirName.
     65          *
     66          *  Parameters:
     67          *    DirStart    - Start of directory, where to create pDirName.
     68          *
     69          *  Return value:
     70          *    >=0         - Directory has been created.
     71          *    <0          - An error has occurred.
     72          */

   \                                 In section .text, align 4, keep-with-next
     73          int FS_FAT_CreateDirEx(FS_VOLUME *pVolume, const char *pDirName, U32 DirStart, FS_SB * pSB) {
   \                     FS_FAT_CreateDirEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   00A0A0E1           MOV      R10,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   01B0A0E1           MOV      R11,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
     74            U32             DirSector;
     75            I32             Cluster;
     76            int             j;
     77            FS_FAT_DENTRY * pDirEntry;
     78            U32             TimeDate;
     79            U16             Date;
     80            U16             Time;
     81            FS_FAT_INFO   * pFATInfo;
     82          
     83            pFATInfo = &pVolume->FSInfo.FATInfo;
   \   00000018   1C608AE2           ADD      R6,R10,#+28
     84            TimeDate = FS_X_GetTimeDate();
   \   0000001C   ........           BL       FS_X_GetTimeDate
   \   00000020   0090A0E1           MOV      R9,R0
     85            Cluster  = FS_FAT_AllocCluster(pVolume, pSB, 0, NULL);
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0A00A0E1           MOV      R0,R10
   \   00000034   ........           BL       FS_FAT_AllocCluster
   \   00000038   0070B0E1           MOVS     R7,R0
     86            if (Cluster == 0) {
     87              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS_FAT_CreateDirEx: Can not create dir: No free cluster.\n"));
     88              return -1;         /* Could not alloc cluster */
   \   0000003C   0000E003           MVNEQ    R0,#+0
   \   00000040   5200000A           BEQ      ??FS_FAT_CreateDirEx_0
     89            }
     90            Time = (U16)(TimeDate & 0xffff);
   \   00000044   0980A0E1           MOV      R8,R9
     91            Date = (U16)(TimeDate >> 16);
     92            pDirEntry = FAT_pDirEntryAPI->pfCreateDirEntry(pVolume, pSB, pDirName, DirStart, Cluster, FS_FAT_ATTR_DIRECTORY, 0, Time, Date);
     93            if (pDirEntry) {
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   ........           LDR      R12,??DataTable4
   \   00000050   0888A0E1           LSL      R8,R8,#+16
   \   00000054   08008DE5           STR      R0,[SP, #+8]
   \   00000058   2998A0E1           LSR      R9,R9,#+16
   \   0000005C   2888A0E1           LSR      R8,R8,#+16
   \   00000060   1000A0E3           MOV      R0,#+16
   \   00000064   00C09CE5           LDR      R12,[R12, #+0]
   \   00000068   10908DE5           STR      R9,[SP, #+16]
   \   0000006C   0C808DE5           STR      R8,[SP, #+12]
   \   00000070   04008DE5           STR      R0,[SP, #+4]
   \   00000074   00708DE5           STR      R7,[SP, #+0]
   \   00000078   0430A0E1           MOV      R3,R4
   \   0000007C   0B20A0E1           MOV      R2,R11
   \   00000080   0510A0E1           MOV      R1,R5
   \   00000084   0A00A0E1           MOV      R0,R10
   \   00000088   08C09CE5           LDR      R12,[R12, #+8]
   \   0000008C   3CFF2FE1           BLX      R12
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   3700000A           BEQ      ??FS_FAT_CreateDirEx_1
     94          
     95              /* Free entry found. Make entry */
     96              /*
     97               * Write the modified directory entry
     98               */
     99              FS__SB_MarkDirty(pSB);
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           BL       FS__SB_MarkDirty
    100              FS__SB_Clean(pSB);
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       FS__SB_Clean
    101              
    102              /*
    103               * Make the "." and ".." entries
    104               */
    105              FS_MEMSET(pSB->pBuffer, 0x00, pFATInfo->BytesPerSec);
   \   000000A8   B410D6E1           LDRH     R1,[R6, #+4]
   \   000000AC   080095E5           LDR      R0,[R5, #+8]
   \   000000B0   ........           BL       __aeabi_memclr
    106              DirSector = FS_FAT_ClusterId2SectorNo(pFATInfo, Cluster); /* Find 1st absolute sector of the new directory */
   \   000000B4   0710A0E1           MOV      R1,R7
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           BL       FS_FAT_ClusterId2SectorNo
   \   000000C0   00A0A0E1           MOV      R10,R0
    107              FS__SB_MarkValid(pSB, DirSector, FS_SB_TYPE_DIRECTORY);
   \   000000C4   0120A0E3           MOV      R2,#+1
   \   000000C8   0A10A0E1           MOV      R1,R10
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           BL       FS__SB_MarkValid
    108          
    109              pDirEntry = (FS_FAT_DENTRY *)pSB->pBuffer;
   \   000000D4   08B095E5           LDR      R11,[R5, #+8]
    110              FS_FAT_WriteDirEntry83(pDirEntry++, &NameDirDot,   Cluster,  FS_FAT_ATTR_DIRECTORY, 0, Time, Date);
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   00008DE5           STR      R0,[SP, #+0]
   \   000000E0   08908DE5           STR      R9,[SP, #+8]
   \   000000E4   04808DE5           STR      R8,[SP, #+4]
   \   000000E8   1030A0E3           MOV      R3,#+16
   \   000000EC   0720A0E1           MOV      R2,R7
   \   000000F0   ........           ADR      R1,NameDirDot
   \   000000F4   0B00A0E1           MOV      R0,R11
   \   000000F8   ........           BL       FS_FAT_WriteDirEntry83
    111              FS_FAT_WriteDirEntry83(pDirEntry,   &NameDirDotDot,DirStart, FS_FAT_ATTR_DIRECTORY, 0, Time, Date);
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   00008DE5           STR      R0,[SP, #+0]
   \   00000104   08908DE5           STR      R9,[SP, #+8]
   \   00000108   04808DE5           STR      R8,[SP, #+4]
   \   0000010C   1030A0E3           MOV      R3,#+16
   \   00000110   0420A0E1           MOV      R2,R4
   \   00000114   ........           ADR      R1,NameDirDotDot
   \   00000118   20008BE2           ADD      R0,R11,#+32
   \   0000011C   ........           BL       FS_FAT_WriteDirEntry83
    112              FS__SB_Clean(pSB);
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           BL       FS__SB_Clean
    113          
    114              /* Clear rest of the directory cluster */
    115              FS_MEMSET(pSB->pBuffer, 0x00, pFATInfo->BytesPerSec);
   \   00000128   B410D6E1           LDRH     R1,[R6, #+4]
   \   0000012C   080095E5           LDR      R0,[R5, #+8]
   \   00000130   ........           BL       __aeabi_memclr
    116              for (j = 1; j < pFATInfo->SecPerClus; j++) {
   \   00000134   1C00D6E5           LDRB     R0,[R6, #+28]
   \   00000138   0140A0E3           MOV      R4,#+1
   \   0000013C   020050E3           CMP      R0,#+2
   \   00000140   0A0000BA           BLT      ??FS_FAT_CreateDirEx_2
    117                DirSector++;
   \                     ??FS_FAT_CreateDirEx_3:
   \   00000144   01A08AE2           ADD      R10,R10,#+1
    118                FS__SB_SetSector(pSB, DirSector, FS_SB_TYPE_DIRECTORY);
   \   00000148   0120A0E3           MOV      R2,#+1
   \   0000014C   0A10A0E1           MOV      R1,R10
   \   00000150   0500A0E1           MOV      R0,R5
   \   00000154   ........           BL       FS__SB_SetSector
    119                FS__SB_Write(pSB);
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           BL       FS__SB_Write
    120          
    121              }
   \   00000160   1C00D6E5           LDRB     R0,[R6, #+28]
   \   00000164   014084E2           ADD      R4,R4,#+1
   \   00000168   000054E1           CMP      R4,R0
   \   0000016C   F4FFFFBA           BLT      ??FS_FAT_CreateDirEx_3
    122              return 0;  /* It worked O.K. ! */
   \                     ??FS_FAT_CreateDirEx_2:
   \   00000170   0000A0E3           MOV      R0,#+0
   \   00000174   050000EA           B        ??FS_FAT_CreateDirEx_0
    123            } else {
    124              FS_FAT_FreeClusterChain(pVolume, pSB, Cluster, 1);
   \                     ??FS_FAT_CreateDirEx_1:
   \   00000178   0130A0E3           MOV      R3,#+1
   \   0000017C   0720A0E1           MOV      R2,R7
   \   00000180   0510A0E1           MOV      R1,R5
   \   00000184   0A00A0E1           MOV      R0,R10
   \   00000188   ........           BL       FS_FAT_FreeClusterChain
    125              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS_FAT_CreateDirEx: Can not create directory: No free directory entry.\n"));
    126            }
    127            return -2;                    /* Directory full and can not be increased */
   \   0000018C   0100E0E3           MVN      R0,#+1
   \                     ??FS_FAT_CreateDirEx_0:
   \   00000190   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000194   F08FBDE8           POP      {R4-R11,PC}      ;; return
    128          }
    129          /*********************************************************************
    130          *
    131          *       FS_FAT_OpenDir
    132          *             _OpenDir (helper)
    133          *
    134          *  Description:
    135          *    Open an existing directory for reading.
    136          *
    137          *  Parameters:
    138          *    pDirName    - Directory name.
    139          *    pDir        - Pointer to a FS_DIR data structure.
    140          *
    141          *  Return value:
    142          *    ==0         - FS_DIR data structure contains valid information.
    143          *    !=0         - Unable to open the directory..
    144          */
    145          static int _OpenDir(const char *pDirName, FS__DIR *pDir, FS_SB * pSB) {
    146            U32          len;
    147            U32          dstart;
    148            const char * pFileName;
    149            FS_VOLUME  * pVolume;
    150            U32          FirstCluster;
    151          
    152            if (pDir == NULL) {
    153              return 1;  /* No valid pointer to a FS_DIR structure */
    154            }
    155            FirstCluster = 0;
    156            pVolume      = pDir->pVolume;
    157            /* Find parent directory on the media and return file name part of the complete path, as well as location and size info */
    158            if (FS_FAT_FindPath(pDir->pVolume, pSB, pDirName, &pFileName, &dstart) == 0) {
    159              return 1;  /* Directory not found */
    160            }
    161            /* Parent directory found. */
    162          
    163            len = FS_STRLEN(pFileName);
    164            if (len != 0) {
    165              FS_FAT_DENTRY * pDirEntry;
    166              /* There is a name in the complete path (it does not end with a '\') */
    167              pDirEntry = FS_FAT_FindDirEntry(pVolume, pSB, pFileName, 0, dstart, FS_FAT_ATTR_DIRECTORY, NULL);
    168              if (pDirEntry) {
    169                U8 Attrib;
    170                /*
    171                 * Check if the directory entry has the directory attribute set
    172                 */
    173                Attrib = pDirEntry->data[DIR_ENTRY_OFF_ATTRIBUTES];
    174                if ((Attrib & FS_FAT_ATTR_DIRECTORY) == FS_FAT_ATTR_DIRECTORY) {
    175                  FirstCluster = FS_FAT_GetFirstCluster(pDirEntry);
    176                } else {
    177                  return 1;   /* specified directory name is not a directory */
    178                }
    179              } else {
    180                return 1;  /* Directory not found */
    181              }
    182            } else {
    183              /*
    184                 There is no name in the complete path (it does end with a '\'). In that
    185                 case, FS_FAT_FindPath returns already start of the directory.
    186              */
    187              FirstCluster = dstart;  /* Use 'current' path */
    188            }
    189            pDir->FirstCluster = FirstCluster;
    190            pDir->error        = 0;
    191            pDir->DirEntryIndex = 0;
    192            return 0;
    193          }
    194          

   \                                 In section .text, align 4, keep-with-next
    195          int FS_FAT_OpenDir(const char *pDirName, FS__DIR *pDir) {
   \                     FS_FAT_OpenDir:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    196            int r;
    197            FS_SB SB;
    198            FS__SB_Create(&SB, &pDir->pVolume->Partition);
   \   00000010   181094E5           LDR      R1,[R4, #+24]
   \   00000014   14008DE2           ADD      R0,SP,#+20
   \   00000018   ........           BL       FS__SB_Create
    199            r = _OpenDir(pDirName, pDir, &SB);
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   2500000A           BEQ      ??FS_FAT_OpenDir_0
   \   00000024   185094E5           LDR      R5,[R4, #+24]
   \   00000028   10008DE2           ADD      R0,SP,#+16
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   0C308DE2           ADD      R3,SP,#+12
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   14108DE2           ADD      R1,SP,#+20
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           BL       FS_FAT_FindPath
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1B00000A           BEQ      ??FS_FAT_OpenDir_0
   \   0000004C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000050   ........           BL       strlen
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1000000A           BEQ      ??FS_FAT_OpenDir_1
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   08008DE5           STR      R0,[SP, #+8]
   \   00000064   1000A0E3           MOV      R0,#+16
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \   0000006C   10009DE5           LDR      R0,[SP, #+16]
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   00008DE5           STR      R0,[SP, #+0]
   \   00000078   0C209DE5           LDR      R2,[SP, #+12]
   \   0000007C   14108DE2           ADD      R1,SP,#+20
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           BL       FS_FAT_FindDirEntry
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0B10D015           LDRBNE   R1,[R0, #+11]
   \   00000090   10001113           TSTNE    R1,#0x10
   \   00000094   0800000A           BEQ      ??FS_FAT_OpenDir_0
   \   00000098   ........           BL       FS_FAT_GetFirstCluster
   \   0000009C   000000EA           B        ??FS_FAT_OpenDir_2
   \                     ??FS_FAT_OpenDir_1:
   \   000000A0   10009DE5           LDR      R0,[SP, #+16]
   \                     ??FS_FAT_OpenDir_2:
   \   000000A4   140084E5           STR      R0,[R4, #+20]
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   BC01C4E1           STRH     R0,[R4, #+28]
   \   000000B0   B001C4E1           STRH     R0,[R4, #+16]
   \   000000B4   0040A0E3           MOV      R4,#+0
   \   000000B8   000000EA           B        ??FS_FAT_OpenDir_3
   \                     ??FS_FAT_OpenDir_0:
   \   000000BC   0140A0E3           MOV      R4,#+1
    200            FS__SB_Delete(&SB);
   \                     ??FS_FAT_OpenDir_3:
   \   000000C0   14008DE2           ADD      R0,SP,#+20
   \   000000C4   ........           BL       FS__SB_Delete
    201            return r;
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   28D08DE2           ADD      SP,SP,#+40
   \   000000D0   7080BDE8           POP      {R4-R6,PC}       ;; return
    202          }
    203          
    204          /*********************************************************************
    205          *
    206          *       FS_FAT_CloseDir
    207          *
    208          *  Description:
    209          *    FS internal function. Close a directory referred by pDir.
    210          *
    211          *  Parameters:
    212          *    pDir        - Pointer to a FS_DIR data structure.
    213          *
    214          *  Return value:
    215          *    ==0         - Directory has been closed.
    216          *    ==-1        - Unable to close directory.
    217          */

   \                                 In section .text, align 4, keep-with-next
    218          int FS_FAT_CloseDir(FS__DIR * pDir) {
    219            if (pDir == NULL) {
   \                     FS_FAT_CloseDir:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0100001A           BNE      ??FS_FAT_CloseDir_0
    220              return -1;  /* No valid pointer to a FS_DIR structure */
   \   00000008   0000E0E3           MVN      R0,#+0
   \   0000000C   1EFF2FE1           BX       LR
    221            }
    222            return 0;
   \                     ??FS_FAT_CloseDir_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    223          }
    224          
    225          
    226          /*********************************************************************
    227          *
    228          *       FS_FAT_ReadDir
    229          *
    230          *  Description:
    231          *    Read next directory entry in directory specified by pDir.
    232          *
    233          *  Parameters:
    234          *    pDir          - Pointer to a FS__DIR structure.
    235          *    pDirEntryInfo - Pointer to a FS_DIRENTRY_INFO structure.
    236          *
    237          *  Return value:
    238          *    ==-1     - Error. 
    239          *    == 0     - Success.
    240          */

   \                                 In section .text, align 4, keep-with-next
    241          int FS_FAT_ReadDir(FS__DIR *pDir, FS_DIRENTRY_INFO * pDirEntryInfo) {
   \                     FS_FAT_ReadDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    242            FS_VOLUME * pVolume;
    243            int         r;
    244            FS_SB       SB;
    245          
    246            if (pDir == NULL) {
   \   00000008   000054E3           CMP      R4,#+0
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   0150A0E1           MOV      R5,R1
    247              return -1;  /* No valid pointer to a FS_DIR structure */
   \   00000014   0000E003           MVNEQ    R0,#+0
   \   00000018   0D00000A           BEQ      ??FS_FAT_ReadDir_0
    248            }
    249            r        = -1;
    250            pVolume  = pDir->pVolume;
    251            FS__SB_Create(&SB, &pVolume->Partition);
   \   0000001C   181094E5           LDR      R1,[R4, #+24]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           BL       FS__SB_Create
    252            r = FAT_pDirEntryAPI->pfReadDirEntryInfo(pDir, pDirEntryInfo, &SB);
   \   00000028   ........           LDR      R3,??DataTable4
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   003093E5           LDR      R3,[R3, #+0]
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   33FF2FE1           BLX      R3
   \   00000044   0040A0E1           MOV      R4,R0
    253            FS__SB_Delete(&SB);
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           BL       FS__SB_Delete
    254            return r;
   \   00000050   0400A0E1           MOV      R0,R4
   \                     ??FS_FAT_ReadDir_0:
   \   00000054   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    255          }
    256          
    257          /*********************************************************************
    258          *
    259          *       FS_FAT_RemoveDir
    260          *
    261          *  Description:
    262          *    Remove a directory.
    263          *    If you call this function to remove a directory, you must make sure, that
    264          *    it is already empty.
    265          *
    266          *  Parameters:
    267          *    pDirName    - Directory name.
    268          *
    269          *  Return value:
    270          *    ==0         - Directory has been removed.
    271          *    ==-1        - An error has occurred.
    272          */

   \                                 In section .text, align 4, keep-with-next
    273          int  FS_FAT_RemoveDir(FS_VOLUME * pVolume, const char *pDirName) {
   \                     FS_FAT_RemoveDir:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    274            U32             Len;
    275            U32             DirStart;
    276            const char    * pFileName;
    277            int             r = -1;
   \   00000010   0050E0E3           MVN      R5,#+0
    278            FS_SB           SB;
    279            FS_FAT_DENTRY * pDirEntry;
    280            I32             LongDirEntryIndex = -1;
   \   00000014   14508DE5           STR      R5,[SP, #+20]
    281          
    282            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   18008DE2           ADD      R0,SP,#+24
   \   00000020   ........           BL       FS__SB_Create
    283            if (FS_FAT_FindPath(pVolume, &SB, pDirName, &pFileName, &DirStart)) {
   \   00000024   10008DE2           ADD      R0,SP,#+16
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   0C308DE2           ADD      R3,SP,#+12
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   18108DE2           ADD      R1,SP,#+24
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       FS_FAT_FindPath
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   2200000A           BEQ      ??FS_FAT_RemoveDir_0
    284              Len = FS_STRLEN(pFileName);
    285              if (Len) {
   \   00000048   0C009DE5           LDR      R0,[SP, #+12]
   \   0000004C   ........           BL       strlen
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   1E00000A           BEQ      ??FS_FAT_RemoveDir_0
    286                pDirEntry =  FS_FAT_FindDirEntry(pVolume, &SB, pFileName, 0, DirStart, FS_FAT_ATTR_DIRECTORY, &LongDirEntryIndex);
   \   00000058   14008DE2           ADD      R0,SP,#+20
   \   0000005C   08008DE5           STR      R0,[SP, #+8]
   \   00000060   1000A0E3           MOV      R0,#+16
   \   00000064   04008DE5           STR      R0,[SP, #+4]
   \   00000068   10009DE5           LDR      R0,[SP, #+16]
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   0C209DE5           LDR      R2,[SP, #+12]
   \   00000078   18108DE2           ADD      R1,SP,#+24
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       FS_FAT_FindDirEntry
    287                if (pDirEntry) {
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1100000A           BEQ      ??FS_FAT_RemoveDir_0
    288                  if (FS_FAT_DeleteFileOrDir(pVolume, &SB, pDirEntry, 0) != 0) {;  /* Remove the directory */
   \   0000008C   0020A0E1           MOV      R2,R0
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   18108DE2           ADD      R1,SP,#+24
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       FS_FAT_DeleteFileOrDir
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0A00001A           BNE      ??FS_FAT_RemoveDir_0
   \   000000A8   ........           LDR      R0,??DataTable4
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   0CC090E5           LDR      R12,[R0, #+12]
   \   000000B4   00005CE3           CMP      R12,#+0
   \   000000B8   0400000A           BEQ      ??FS_FAT_RemoveDir_1
    289                    r = -1;
    290                  } else {
    291                    if (FAT_pDirEntryAPI->pfDelLongEntry) {
    292                      FAT_pDirEntryAPI->pfDelLongEntry(pVolume, &SB, DirStart, LongDirEntryIndex);
   \   000000BC   14309DE5           LDR      R3,[SP, #+20]
   \   000000C0   10209DE5           LDR      R2,[SP, #+16]
   \   000000C4   18108DE2           ADD      R1,SP,#+24
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   3CFF2FE1           BLX      R12
    293                    }
    294                    r = 0;
   \                     ??FS_FAT_RemoveDir_1:
   \   000000D0   0050A0E3           MOV      R5,#+0
    295                  }
    296                }
    297              }
    298            }
    299            FS__SB_Delete(&SB);
   \                     ??FS_FAT_RemoveDir_0:
   \   000000D4   18008DE2           ADD      R0,SP,#+24
   \   000000D8   ........           BL       FS__SB_Delete
    300            return r;
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   28D08DE2           ADD      SP,SP,#+40
   \   000000E4   7080BDE8           POP      {R4-R6,PC}       ;; return
    301          }
    302          
    303          /*********************************************************************
    304          *
    305          *       FS_FAT_CreateDir
    306          *
    307          *  Description:
    308          *    Creates a directory.
    309          *
    310          *  Parameters:
    311          *    pDirName    - Directory name.
    312          *
    313          *  Return value:
    314          *    ==0         - Directory has been created.
    315          *    ==-1        - An error has occurred.
    316          */

   \                                 In section .text, align 4, keep-with-next
    317          int  FS_FAT_CreateDir(FS_VOLUME * pVolume, const char *pDirName) {
   \                     FS_FAT_CreateDir:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    318            U32       Len;
    319            U32          DirStart;
    320            I32          i;
    321            const char  *   pFileName;
    322            int             r = -1;
   \   00000010   0050E0E3           MVN      R5,#+0
    323            FS_SB           SB;
    324            FS_FAT_DENTRY * pDirEntry;
    325          
    326            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   14008DE2           ADD      R0,SP,#+20
   \   0000001C   ........           BL       FS__SB_Create
    327            if (FS_FAT_FindPath(pVolume, &SB, pDirName, &pFileName, &DirStart)) {
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   0C308DE2           ADD      R3,SP,#+12
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   14108DE2           ADD      R1,SP,#+20
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       FS_FAT_FindPath
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   1600000A           BEQ      ??FS_FAT_CreateDir_0
    328              Len = FS_STRLEN(pFileName);
    329              if (Len) {
   \   00000044   0C009DE5           LDR      R0,[SP, #+12]
   \   00000048   ........           BL       strlen
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1200000A           BEQ      ??FS_FAT_CreateDir_0
    330                pDirEntry =  FS_FAT_FindDirEntry(pVolume, &SB, pFileName, 0, DirStart, 0, NULL);
    331                if (pDirEntry == NULL) {
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   08008DE5           STR      R0,[SP, #+8]
   \   0000005C   04008DE5           STR      R0,[SP, #+4]
   \   00000060   10009DE5           LDR      R0,[SP, #+16]
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   00008DE5           STR      R0,[SP, #+0]
   \   0000006C   0C209DE5           LDR      R2,[SP, #+12]
   \   00000070   14108DE2           ADD      R1,SP,#+20
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       FS_FAT_FindDirEntry
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0600001A           BNE      ??FS_FAT_CreateDir_0
    332                  i = FS_FAT_CreateDirEx(pVolume, pFileName, DirStart, &SB);  /* Create the directory */
    333                  if (i >= 0) {
   \   00000084   14308DE2           ADD      R3,SP,#+20
   \   00000088   10209DE5           LDR      R2,[SP, #+16]
   \   0000008C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       FS_FAT_CreateDirEx
   \   00000098   000050E3           CMP      R0,#+0
    334                    r = 0;
   \   0000009C   0050A053           MOVPL    R5,#+0
    335                  }
    336                }
    337              }
    338            }
    339            FS__SB_Delete(&SB);
   \                     ??FS_FAT_CreateDir_0:
   \   000000A0   14008DE2           ADD      R0,SP,#+20
   \   000000A4   ........           BL       FS__SB_Delete
    340            return r;
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   28D08DE2           ADD      SP,SP,#+40
   \   000000B0   7080BDE8           POP      {R4-R6,PC}       ;; return
    341          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     FAT_pDirEntryAPI
    342          
    343          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     FS_FAT_CloseDir         0
     FS_FAT_CreateDir       56
     FS_FAT_CreateDirEx     56
     FS_FAT_OpenDir         56
     FS_FAT_ReadDir         32
     FS_FAT_RemoveDir       56


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     NameDirDot           12
     NameDirDotDot        12
     FS_FAT_CreateDirEx  408
     FS_FAT_OpenDir      212
     FS_FAT_CloseDir      24
     FS_FAT_ReadDir       92
     FS_FAT_RemoveDir    232
     FS_FAT_CreateDir    180
     ??DataTable4          4

 
 1 176 bytes in section .text
 
 1 176 bytes of CODE memory

Errors: none
Warnings: none
