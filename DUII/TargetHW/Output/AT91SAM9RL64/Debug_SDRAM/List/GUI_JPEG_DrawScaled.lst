###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:59 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_JPEG_DrawScaled.c               #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_JPEG_DrawScaled.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_JPEG_DrawScaled.lst                                    #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _JPEG_DrawScaled.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_JPEG_DrawScaled.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_JPEG_DrawScaled.c
     19          Purpose     : Implementation of GUI_JPEG... functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          
     25          #include "GUI_Private.h"
     26          #include "GUI_JPEG_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Static code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       _DrawScanlineScaled
     37          *
     38          * Parameters
     39          *   pContext   - Pointer to decompression context
     40          *   x0, y0     - Drawing position of leftmost pixel
     41          *   xSize      - Number of origilal pixels in color buffer
     42          *   pfGetColor - Function pointer for getting color information
     43          *   Num        - Numerator for scaling
     44          *   Denom      - Denominator for scaling
     45          *   NumLines   - Number of repetitions the line needs to be drawn
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          static void _DrawScanlineScaled(GUI_JPEG_DCONTEXT * pContext, int x0, int y0, int xSize, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), int Num, int Denom, unsigned NumLines) {
   \                     _DrawScanlineScaled:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   30709DE5           LDR      R7,[SP, #+48]
   \   0000000C   0140A0E1           MOV      R4,R1
     48            const U8 * p;
     49            unsigned Compare, Current;
     50            int SkipCnt, NumReps;
     51            Current = Denom / 2;
   \   00000010   A71F87E0           ADD      R1,R7,R7, LSR #+31
   \   00000014   C1A0A0E1           ASR      R10,R1,#+1
     52            Compare = Denom;
     53            if (pContext->BufferIndex == 0) {
   \   00000018   9410A0E3           MOV      R1,#+148
   \   0000001C   0250A0E1           MOV      R5,R2
   \   00000020   741C81E3           ORR      R1,R1,#0x7400
   \   00000024   0390A0E1           MOV      R9,R3
   \   00000028   002081E0           ADD      R2,R1,R0
   \   0000002C   0830D2E5           LDRB     R3,[R2, #+8]
   \   00000030   2C609DE5           LDR      R6,[SP, #+44]
   \   00000034   0780A0E1           MOV      R8,R7
   \   00000038   000053E3           CMP      R3,#+0
     54              p = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   0000003C   00009107           LDREQ    R0,[R1, +R0]
     55            } else {
     56              p = (U8 *)GUI_LOCK_H(pContext->hScanLine1);
   \   00000040   04009215           LDRNE    R0,[R2, #+4]
   \   00000044   ........           BL       GUI_ALLOC_LockH
   \   00000048   00008DE5           STR      R0,[SP, #+0]
     57            }
     58            /*
     59             * Iterate over the original pixels
     60             */
     61            do {
     62              GUI_COLOR Color;
     63              SkipCnt = 0;
   \                     ??_DrawScanlineScaled_0:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   020000EA           B        ??_DrawScanlineScaled_1
     64              /*
     65               * Find out how many source pixels can be skipped
     66               */
     67              while (Current += Num, Current < Compare) {
     68                SkipCnt++;
     69                if (xSize-- == 0) {
   \                     ??_DrawScanlineScaled_2:
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   2300000A           BEQ      ??_DrawScanlineScaled_3
   \   0000005C   019049E2           SUB      R9,R9,#+1
     70                  goto _DrawScanlineScaled_Skip;
     71                }
     72              }
   \                     ??_DrawScanlineScaled_1:
   \   00000060   0AA086E0           ADD      R10,R6,R10
   \   00000064   011081E2           ADD      R1,R1,#+1
   \   00000068   08005AE1           CMP      R10,R8
   \   0000006C   F8FFFF3A           BCC      ??_DrawScanlineScaled_2
     73              /*
     74               * Skip the number of pixels that are irrelevant
     75               */
     76              Color = pfGetColor(&p, SkipCnt + 1);
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   28209DE5           LDR      R2,[SP, #+40]
   \   00000078   32FF2FE1           BLX      R2
     77              LCD_SetColor(Color);
   \   0000007C   ........           BL       LCD_SetColor
     78              /*
     79               * Find out how many times this pixel needs to be repeated
     80               */
     81              NumReps = 1;
   \   00000080   01B0A0E3           MOV      R11,#+1
   \   00000084   000000EA           B        ??_DrawScanlineScaled_4
     82              while (Compare += Denom, Current >= Compare) {
     83                NumReps++;
   \                     ??_DrawScanlineScaled_5:
   \   00000088   01B08BE2           ADD      R11,R11,#+1
     84              }
   \                     ??_DrawScanlineScaled_4:
   \   0000008C   088087E0           ADD      R8,R7,R8
   \   00000090   08005AE1           CMP      R10,R8
   \   00000094   FBFFFF2A           BCS      ??_DrawScanlineScaled_5
     85              /*
     86               * Draw the pixel
     87               */
     88              if ((NumReps == 1) && (NumLines == 1)) {
   \   00000098   01005BE3           CMP      R11,#+1
   \   0000009C   34009D05           LDREQ    R0,[SP, #+52]
   \   000000A0   01005003           CMPEQ    R0,#+1
   \   000000A4   0300001A           BNE      ??_DrawScanlineScaled_6
     89                LCD_DrawPixel(x0, y0);
   \   000000A8   0510A0E1           MOV      R1,R5
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       LCD_DrawPixel
   \   000000B4   070000EA           B        ??_DrawScanlineScaled_7
     90              } else {
     91                LCD_FillRect(x0, y0, x0 + NumReps - 1, y0 + NumLines - 1);
   \                     ??_DrawScanlineScaled_6:
   \   000000B8   34009DE5           LDR      R0,[SP, #+52]
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   050080E0           ADD      R0,R0,R5
   \   000000C4   013040E2           SUB      R3,R0,#+1
   \   000000C8   0B0084E0           ADD      R0,R4,R11
   \   000000CC   012040E2           SUB      R2,R0,#+1
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       LCD_FillRect
     92              }
     93              x0 += NumReps;
     94            } while (xSize--);
   \                     ??_DrawScanlineScaled_7:
   \   000000D8   0900A0E1           MOV      R0,R9
   \   000000DC   04408BE0           ADD      R4,R11,R4
   \   000000E0   019040E2           SUB      R9,R0,#+1
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   D7FFFF1A           BNE      ??_DrawScanlineScaled_0
     95          _DrawScanlineScaled_Skip:
     96            GUI_UNLOCK_H(p);
   \                     ??_DrawScanlineScaled_3:
   \   000000EC   ........           BL       GUI_ALLOC_UnlockH
     97          }
   \   000000F0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000F4   F08FBDE8           POP      {R4-R11,PC}      ;; return
     98          
     99          /*********************************************************************
    100          *
    101          *       _DrawScanlinesScaledAtOnce
    102          *
    103          * Parameters
    104          *   pContext   - Pointer to decompression context
    105          *   x0, y0     - Drawing position of leftmost pixel
    106          *   pfGetColor - Function pointer for getting color information
    107          *   Num        - Numerator for scaling
    108          *   Denom      - Denominator for scaling
    109          */

   \                                 In section .text, align 4, keep-with-next
    110          static int _DrawScanlinesScaledAtOnce(GUI_JPEG_DCONTEXT * pContext, int x0, int y0, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), int Num, int Denom) {
   \                     _DrawScanlinesScaledAtOnce:
   \   00000000   FA4F2DE9           PUSH     {R1,R3-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   44709DE5           LDR      R7,[SP, #+68]
   \   0000000C   0040A0E1           MOV      R4,R0
    111            unsigned Compare, Current;
    112            int SkipCnt, NumReps;
    113            int (* pfFunc)(GUI_JPEG_DCONTEXT * pContext);
    114          
    115            Current = Denom / 2;
   \   00000010   A70F87E0           ADD      R0,R7,R7, LSR #+31
    116            Compare = Denom;
   \   00000014   8CA0A0E3           MOV      R10,#+140
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   40609DE5           LDR      R6,[SP, #+64]
   \   00000020   C080A0E1           ASR      R8,R0,#+1
   \   00000024   0790A0E1           MOV      R9,R7
   \   00000028   74AC8AE3           ORR      R10,R10,#0x7400
    117            /*
    118             * Iterate over the original pixels
    119             */
    120            do {
    121              SkipCnt = 0;
   \                     ??_DrawScanlinesScaledAtOnce_0:
   \   0000002C   00B0A0E3           MOV      R11,#+0
   \   00000030   000000EA           B        ??_DrawScanlinesScaledAtOnce_1
    122              /*
    123               * Find out how many source lines can be skipped
    124               */
    125              while (Current += Num, Current < Compare) {
    126                SkipCnt++;
   \                     ??_DrawScanlinesScaledAtOnce_2:
   \   00000034   01B08BE2           ADD      R11,R11,#+1
    127              }
   \                     ??_DrawScanlinesScaledAtOnce_1:
   \   00000038   088086E0           ADD      R8,R6,R8
   \   0000003C   090058E1           CMP      R8,R9
   \   00000040   FBFFFF3A           BCC      ??_DrawScanlinesScaledAtOnce_2
    128              /*
    129               * Skip the number of lines that are irrelevant
    130               */
    131              do {
    132                if (SkipCnt == 0) {
   \                     ??_DrawScanlinesScaledAtOnce_3:
   \   00000044   00005BE3           CMP      R11,#+0
   \   00000048   0500001A           BNE      ??_DrawScanlinesScaledAtOnce_4
    133                  if (GUI_JPEG__DecodeLine(pContext)) {
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       GUI_JPEG__DecodeLine
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1100000A           BEQ      ??_DrawScanlinesScaledAtOnce_5
    134                    return 1;
   \                     ??_DrawScanlinesScaledAtOnce_6:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   280000EA           B        ??_DrawScanlinesScaledAtOnce_7
    135                  }
    136                } else {
    137                  if (pContext->IsProgressive) {
   \                     ??_DrawScanlinesScaledAtOnce_4:
   \   00000064   7B004AE2           SUB      R0,R10,#+123
   \   00000068   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400000A           BEQ      ??_DrawScanlinesScaledAtOnce_8
    138                    if (GUI_JPEG__DecodeLine(pContext)) {
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       GUI_JPEG__DecodeLine
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0700000A           BEQ      ??_DrawScanlinesScaledAtOnce_5
   \   00000084   F4FFFFEA           B        ??_DrawScanlinesScaledAtOnce_6
    139                      return 1;
    140                    }
    141                  } else {
    142                    if (SkipCnt == 1) {
   \                     ??_DrawScanlinesScaledAtOnce_8:
   \   00000088   01005BE3           CMP      R11,#+1
    143                      pfFunc = GUI_JPEG__DecodeLine;
   \   0000008C   ........           LDREQ    R1,??DataTable2
    144                    } else {
    145                      pfFunc = GUI_JPEG__SkipLine;
   \   00000090   ........           LDRNE    R1,??DataTable2_1
    146                    }
    147                    if (pfFunc(pContext)) {
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   31FF2FE1           BLX      R1
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   EDFFFF1A           BNE      ??_DrawScanlinesScaledAtOnce_6
    148                      return 1;
    149                    }
    150                  }
    151                }
    152                if (pContext->TotalLinesLeft == 0) {
   \                     ??_DrawScanlinesScaledAtOnce_5:
   \   000000A4   04009AE7           LDR      R0,[R10, +R4]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   1500000A           BEQ      ??_DrawScanlinesScaledAtOnce_7
    153                  break;
    154                }
    155              } while (--SkipCnt >= 0);
   \   000000B0   01B05BE2           SUBS     R11,R11,#+1
   \   000000B4   E2FFFF5A           BPL      ??_DrawScanlinesScaledAtOnce_3
    156              if (pContext->TotalLinesLeft == 0) {
    157                break;
    158              }
    159              /*
    160               * Find out how many times this line needs to be repeated
    161               */
    162              NumReps = 1;
   \   000000B8   01B0A0E3           MOV      R11,#+1
   \   000000BC   000000EA           B        ??_DrawScanlinesScaledAtOnce_9
    163              while (Compare += Denom, Current >= Compare) {
    164                NumReps++;
   \                     ??_DrawScanlinesScaledAtOnce_10:
   \   000000C0   01B08BE2           ADD      R11,R11,#+1
    165              }
   \                     ??_DrawScanlinesScaledAtOnce_9:
   \   000000C4   099087E0           ADD      R9,R7,R9
   \   000000C8   090058E1           CMP      R8,R9
   \   000000CC   FBFFFF2A           BCS      ??_DrawScanlinesScaledAtOnce_10
    166              /*
    167               * Draw the line
    168               */
    169              _DrawScanlineScaled(pContext, x0, y0, pContext->xSize, pfGetColor, Num, Denom, NumReps);
   \   000000D0   18009DE5           LDR      R0,[SP, #+24]
   \   000000D4   0CB08DE5           STR      R11,[SP, #+12]
   \   000000D8   08708DE5           STR      R7,[SP, #+8]
   \   000000DC   04608DE5           STR      R6,[SP, #+4]
   \   000000E0   00008DE5           STR      R0,[SP, #+0]
   \   000000E4   BC30D4E1           LDRH     R3,[R4, #+12]
   \   000000E8   0520A0E1           MOV      R2,R5
   \   000000EC   14109DE5           LDR      R1,[SP, #+20]
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       _DrawScanlineScaled
    170              y0 += NumReps;
    171            } while (pContext->TotalLinesLeft);
   \   000000F8   04009AE7           LDR      R0,[R10, +R4]
   \   000000FC   05508BE0           ADD      R5,R11,R5
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   C8FFFF1A           BNE      ??_DrawScanlinesScaledAtOnce_0
   \                     ??_DrawScanlinesScaledAtOnce_7:
   \   00000108   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000010C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    172            return 0;
    173          }
    174          
    175          /*********************************************************************
    176          *
    177          *       _DrawScanlinesScaledBanding
    178          *
    179          * Parameters
    180          *   pContext   - Pointer to decompression context
    181          *   x0, y0     - Drawing position of leftmost pixel
    182          *   pfGetColor - Function pointer for getting color information
    183          *   Num        - Numerator for scaling
    184          *   Denom      - Denominator for scaling
    185          */

   \                                 In section .text, align 4, keep-with-next
    186          static int _DrawScanlinesScaledBanding(GUI_HMEM hContext, int x0, int y0, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), int Num, int Denom) {
   \                     _DrawScanlinesScaledBanding:
   \   00000000   FB4F2DE9           PUSH     {R0,R1,R3-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   48509DE5           LDR      R5,[SP, #+72]
   \   00000010   4C609DE5           LDR      R6,[SP, #+76]
    187            GUI_JPEG_DCONTEXT * pContext;
    188            unsigned Band;
    189            int r = 0;
    190            int yPos;
    191          
    192            /*
    193             * Allocate coefficient buffer
    194             */
    195            if (GUI_JPEG__AllocBandingCoeffBuffer(hContext) != 0) {
   \   00000014   ........           BL       GUI_JPEG__AllocBandingCoeffBuffer
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??_DrawScanlinesScaledBanding_0
    196              return 1;
   \                     ??_DrawScanlinesScaledBanding_1:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   560000EA           B        ??_DrawScanlinesScaledBanding_2
    197            }
    198            pContext = JPEG_LOCK_H(hContext);
   \                     ??_DrawScanlinesScaledBanding_0:
   \   00000028   18009DE5           LDR      R0,[SP, #+24]
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   8C80A0E3           MOV      R8,#+140
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   10108DE5           STR      R1,[SP, #+16]
   \   00000040   748C88E3           ORR      R8,R8,#0x7400
   \   00000044   230000EA           B        ??_DrawScanlinesScaledBanding_3
    199            for (Band = 0; Band < pContext->NumBands; Band++) {
    200              unsigned Compare, Current;
    201              int SkipCnt, NumReps;
    202              int BlockY;
    203              Current = Denom / 2;
    204              Compare = Denom;
    205              /*
    206               * Start reading and process markers until SOF marker
    207               */
    208              if (Band) {
    209                GUI_JPEG__ReadUntilSOF(hContext);
    210              }
    211              /*
    212               * Decode one band of data
    213               */
    214              GUI_JPEG__DecodeProgressiveBanding(pContext);
    215              /*
    216               * Iterate over the original pixels
    217               */
    218              yPos = y0;
    219              do {
    220                SkipCnt = 0;
    221                /*
    222                 * Find out how many source lines can be skipped
    223                 */
    224                while (Current += Num, Current < Compare) {
    225                  SkipCnt++;
    226                }
    227                /*
    228                 * Skip the number of lines that are irrelevant
    229                 */
    230                while (SkipCnt-- >= 0) {
    231                  if (GUI_JPEG__DecodeLine(pContext)) {
    232                    return 1;
    233                  }
    234                  if (pContext->TotalLinesLeft == 0) {
    235                    break;
    236                  }
    237                }
    238                if (pContext->TotalLinesLeft == 0) {
    239                  break;
    240                }
    241                /*
    242                 * Find out how many times this line needs to be repeated
    243                 */
    244                NumReps = 1;
    245                while (Compare += Denom, Current >= Compare) {
    246                  NumReps++;
   \                     ??_DrawScanlinesScaledBanding_4:
   \   00000048   01A08AE2           ADD      R10,R10,#+1
    247                }
   \                     ??_DrawScanlinesScaledBanding_5:
   \   0000004C   0BB086E0           ADD      R11,R6,R11
   \   00000050   0B0059E1           CMP      R9,R11
   \   00000054   FBFFFF2A           BCS      ??_DrawScanlinesScaledBanding_4
    248                BlockY = Current >> 3;
    249                if ((BlockY >= pContext->FirstBlockOfBand) && (BlockY <= (pContext->FirstBlockOfBand + pContext->NumBlocksPerBand - 1))) {
   \   00000058   A410A0E3           MOV      R1,#+164
   \   0000005C   841C81E3           ORR      R1,R1,#0x8400
   \   00000060   071081E0           ADD      R1,R1,R7
   \   00000064   082091E5           LDR      R2,[R1, #+8]
   \   00000068   A901A0E1           LSR      R0,R9,#+3
   \   0000006C   020050E1           CMP      R0,R2
   \   00000070   0E0000BA           BLT      ??_DrawScanlinesScaledBanding_6
   \   00000074   041091E5           LDR      R1,[R1, #+4]
   \   00000078   011082E0           ADD      R1,R2,R1
   \   0000007C   011041E2           SUB      R1,R1,#+1
   \   00000080   000051E1           CMP      R1,R0
   \   00000084   090000BA           BLT      ??_DrawScanlinesScaledBanding_6
    250                  /*
    251                   * Draw the line
    252                   */
    253                  _DrawScanlineScaled(pContext, x0, y0, pContext->xSize, pfGetColor, Num, Denom, NumReps);
   \   00000088   20009DE5           LDR      R0,[SP, #+32]
   \   0000008C   0CA08DE5           STR      R10,[SP, #+12]
   \   00000090   08608DE5           STR      R6,[SP, #+8]
   \   00000094   04508DE5           STR      R5,[SP, #+4]
   \   00000098   00008DE5           STR      R0,[SP, #+0]
   \   0000009C   BC30D7E1           LDRH     R3,[R7, #+12]
   \   000000A0   0420A0E1           MOV      R2,R4
   \   000000A4   1C109DE5           LDR      R1,[SP, #+28]
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           BL       _DrawScanlineScaled
    254                }
    255                y0 += NumReps;
    256              } while (pContext->TotalLinesLeft);
   \                     ??_DrawScanlinesScaledBanding_6:
   \   000000B0   070098E7           LDR      R0,[R8, +R7]
   \   000000B4   04408AE0           ADD      R4,R10,R4
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   1600001A           BNE      ??_DrawScanlinesScaledBanding_7
    257              y0 = yPos;
   \                     ??_DrawScanlinesScaledBanding_8:
   \   000000C0   14409DE5           LDR      R4,[SP, #+20]
    258              /*
    259               * Set parameters for next band
    260               */
    261              GUI_JPEG__SetNextBand(pContext);
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   ........           BL       GUI_JPEG__SetNextBand
   \   000000CC   10009DE5           LDR      R0,[SP, #+16]
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   10008DE5           STR      R0,[SP, #+16]
   \                     ??_DrawScanlinesScaledBanding_3:
   \   000000D8   A410A0E3           MOV      R1,#+164
   \   000000DC   841C81E3           ORR      R1,R1,#0x8400
   \   000000E0   10009DE5           LDR      R0,[SP, #+16]
   \   000000E4   071091E7           LDR      R1,[R1, +R7]
   \   000000E8   010050E1           CMP      R0,R1
   \   000000EC   2200002A           BCS      ??_DrawScanlinesScaledBanding_9
   \   000000F0   A60F86E0           ADD      R0,R6,R6, LSR #+31
   \   000000F4   C090A0E1           ASR      R9,R0,#+1
   \   000000F8   10009DE5           LDR      R0,[SP, #+16]
   \   000000FC   06B0A0E1           MOV      R11,R6
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0100000A           BEQ      ??_DrawScanlinesScaledBanding_10
   \   00000108   18009DE5           LDR      R0,[SP, #+24]
   \   0000010C   ........           BL       GUI_JPEG__ReadUntilSOF
   \                     ??_DrawScanlinesScaledBanding_10:
   \   00000110   0700A0E1           MOV      R0,R7
   \   00000114   ........           BL       GUI_JPEG__DecodeProgressiveBanding
   \   00000118   14408DE5           STR      R4,[SP, #+20]
   \                     ??_DrawScanlinesScaledBanding_7:
   \   0000011C   00A0A0E3           MOV      R10,#+0
   \   00000120   000000EA           B        ??_DrawScanlinesScaledBanding_11
   \                     ??_DrawScanlinesScaledBanding_12:
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \                     ??_DrawScanlinesScaledBanding_11:
   \   00000128   099085E0           ADD      R9,R5,R9
   \   0000012C   0B0059E1           CMP      R9,R11
   \   00000130   FBFFFF3A           BCC      ??_DrawScanlinesScaledBanding_12
   \   00000134   00005AE3           CMP      R10,#+0
   \   00000138   0A00004A           BMI      ??_DrawScanlinesScaledBanding_13
   \                     ??_DrawScanlinesScaledBanding_14:
   \   0000013C   01A04AE2           SUB      R10,R10,#+1
   \   00000140   0700A0E1           MOV      R0,R7
   \   00000144   ........           BL       GUI_JPEG__DecodeLine
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   B3FFFF1A           BNE      ??_DrawScanlinesScaledBanding_1
   \   00000150   070098E7           LDR      R0,[R8, +R7]
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   D8FFFF0A           BEQ      ??_DrawScanlinesScaledBanding_8
   \   0000015C   00005AE3           CMP      R10,#+0
   \   00000160   F5FFFF5A           BPL      ??_DrawScanlinesScaledBanding_14
   \   00000164   020000EA           B        ??_DrawScanlinesScaledBanding_15
   \                     ??_DrawScanlinesScaledBanding_13:
   \   00000168   070098E7           LDR      R0,[R8, +R7]
   \   0000016C   000050E3           CMP      R0,#+0
   \   00000170   D2FFFF0A           BEQ      ??_DrawScanlinesScaledBanding_8
   \                     ??_DrawScanlinesScaledBanding_15:
   \   00000174   01A0A0E3           MOV      R10,#+1
   \   00000178   B3FFFFEA           B        ??_DrawScanlinesScaledBanding_5
    262            }
    263            GUI_UNLOCK_H(pContext);
   \                     ??_DrawScanlinesScaledBanding_9:
   \   0000017C   ........           BL       GUI_ALLOC_UnlockH
    264            return r;
   \   00000180   0000A0E3           MOV      R0,#+0
   \                     ??_DrawScanlinesScaledBanding_2:
   \   00000184   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000188   F08FBDE8           POP      {R4-R11,PC}      ;; return
    265          }
    266          
    267          /*********************************************************************
    268          *
    269          *       _Draw
    270          */

   \                                 In section .text, align 4, keep-with-next
    271          static int _Draw(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0, int Num, int Denom) {
   \                     _Draw:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
    272            #if (GUI_WINSUPPORT)
    273              GUI_RECT Rect;
    274            #endif
    275            GUI_HMEM            hContext;
    276            GUI_JPEG_DCONTEXT * pContext;
    277            GUI_JPEG_INFO Info;
    278            GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt);
    279            int r = 1;
    280            int OldIndex;
    281          
    282            hContext = GUI_ALLOC_AllocZero((GUI_ALLOC_DATATYPE)sizeof(GUI_JPEG_DCONTEXT));
   \   00000008   C000A0E3           MOV      R0,#+192
   \   0000000C   01B0A0E1           MOV      R11,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   48409DE5           LDR      R4,[SP, #+72]
   \   0000001C   4C509DE5           LDR      R5,[SP, #+76]
   \   00000020   0160A0E3           MOV      R6,#+1
   \   00000024   840C80E3           ORR      R0,R0,#0x8400
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   0070B0E1           MOVS     R7,R0
    283            if (hContext) {
   \   00000030   5A00000A           BEQ      ??_Draw_0
    284              pContext = JPEG_LOCK_H(hContext);
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   00A0A0E1           MOV      R10,R0
    285              pContext->pParam = p;
   \   0000003C   04B08AE5           STR      R11,[R10, #+4]
    286              pContext->pfGetData = pfGetData;
   \   00000040   20009DE5           LDR      R0,[SP, #+32]
   \   00000044   00008AE5           STR      R0,[R10, #+0]
    287              /* Remember old foreground color */
    288              OldIndex = LCD_GetColorIndex();
   \   00000048   ........           BL       LCD_GetColorIndex
   \   0000004C   10008DE5           STR      R0,[SP, #+16]
    289              GUI_UNLOCK_H(pContext);
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
    290              /* Get size of image */
    291              if (GUI_JPEG__GetInfoEx(hContext, &Info)) {
   \   00000054   14108DE2           ADD      R1,SP,#+20
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI_JPEG__GetInfoEx
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   4D00001A           BNE      ??_Draw_0
    292                return 1;
    293              }
    294              /* Iterate over all windows */
    295              #if (GUI_WINSUPPORT)
    296                WM_ADDORG(x0,y0);
   \   00000068   ........           LDR      R0,??DataTable2_2
   \   0000006C   401090E5           LDR      R1,[R0, #+64]
   \   00000070   440090E5           LDR      R0,[R0, #+68]
   \   00000074   088081E0           ADD      R8,R1,R8
   \   00000078   099080E0           ADD      R9,R0,R9
    297                Rect.x1 = (Rect.x0 = x0) + (U32)Info.XSize * (U32)Num / Denom - 1;
   \   0000007C   14009DE5           LDR      R0,[SP, #+20]
   \   00000080   0510A0E1           MOV      R1,R5
   \   00000084   940000E0           MUL      R0,R4,R0
   \   00000088   ........           BL       __aeabi_uidiv
   \   0000008C   B880CDE1           STRH     R8,[SP, #+8]
   \   00000090   F8A0DDE1           LDRSH    R10,[SP, #+8]
    298                Rect.y1 = (Rect.y0 = y0) + (U32)Info.YSize * (U32)Num / Denom - 1;
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   BA90CDE1           STRH     R9,[SP, #+10]
   \   0000009C   0A0080E0           ADD      R0,R0,R10
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   BC00CDE1           STRH     R0,[SP, #+12]
   \   000000A8   18009DE5           LDR      R0,[SP, #+24]
   \   000000AC   FAA0DDE1           LDRSH    R10,[SP, #+10]
   \   000000B0   940000E0           MUL      R0,R4,R0
   \   000000B4   ........           BL       __aeabi_uidiv
   \   000000B8   0A0080E0           ADD      R0,R0,R10
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   BE00CDE1           STRH     R0,[SP, #+14]
    299                WM_ITERATE_START(&Rect) {
   \   000000C4   08008DE2           ADD      R0,SP,#+8
   \   000000C8   ........           BL       WM__InitIVRSearch
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   2D00000A           BEQ      ??_Draw_1
    300              #endif
    301                /* Initialize drawing and allocate memory */
    302                r = GUI_JPEG__InitDraw(hContext);
   \                     ??_Draw_2:
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   ........           BL       GUI_JPEG__InitDraw
   \   000000DC   0060A0E1           MOV      R6,R0
    303                pContext = JPEG_LOCK_H(hContext);
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   ........           BL       GUI_ALLOC_LockH
   \   000000E8   00A0A0E1           MOV      R10,R0
    304                if (pContext->ScanType == GRAYSCALE) {
   \   000000EC   1200A0E3           MOV      R0,#+18
   \   000000F0   740C80E3           ORR      R0,R0,#0x7400
   \   000000F4   0A00D0E7           LDRB     R0,[R0, +R10]
   \   000000F8   000050E3           CMP      R0,#+0
    305                  pfGetColor = GUI_JPEG__GetColorGray;
   \   000000FC   ........           LDREQ    R11,??DataTable2_3
    306                } else {
    307                  pfGetColor = GUI_JPEG__GetColorRGB;
   \   00000100   ........           LDRNE    R11,??DataTable2_4
    308                }
    309                /* Draw the lines */
    310                if (r == 0) {
   \   00000104   000056E3           CMP      R6,#+0
   \   00000108   1900001A           BNE      ??_Draw_3
    311                  if (pContext->BandingRequired == 0) {
   \   0000010C   A000A0E3           MOV      R0,#+160
   \   00000110   840C80E3           ORR      R0,R0,#0x8400
   \   00000114   0A00D0E7           LDRB     R0,[R0, +R10]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0800001A           BNE      ??_Draw_4
    312                    r = _DrawScanlinesScaledAtOnce(pContext, x0, y0, pfGetColor, Num, Denom);
   \   00000120   04508DE5           STR      R5,[SP, #+4]
   \   00000124   00408DE5           STR      R4,[SP, #+0]
   \   00000128   0B30A0E1           MOV      R3,R11
   \   0000012C   0920A0E1           MOV      R2,R9
   \   00000130   0810A0E1           MOV      R1,R8
   \   00000134   0A00A0E1           MOV      R0,R10
   \   00000138   ........           BL       _DrawScanlinesScaledAtOnce
   \   0000013C   0060A0E1           MOV      R6,R0
   \   00000140   0B0000EA           B        ??_Draw_3
    313                  } else {
    314                    GUI_UNLOCK_H(pContext);
   \                     ??_Draw_4:
   \   00000144   ........           BL       GUI_ALLOC_UnlockH
    315                    r = _DrawScanlinesScaledBanding(hContext, x0, y0, pfGetColor, Num, Denom);
   \   00000148   04508DE5           STR      R5,[SP, #+4]
   \   0000014C   00408DE5           STR      R4,[SP, #+0]
   \   00000150   0B30A0E1           MOV      R3,R11
   \   00000154   0920A0E1           MOV      R2,R9
   \   00000158   0810A0E1           MOV      R1,R8
   \   0000015C   0700A0E1           MOV      R0,R7
   \   00000160   ........           BL       _DrawScanlinesScaledBanding
   \   00000164   0060A0E1           MOV      R6,R0
    316                    pContext = JPEG_LOCK_H(hContext);
   \   00000168   0700A0E1           MOV      R0,R7
   \   0000016C   ........           BL       GUI_ALLOC_LockH
   \   00000170   00A0A0E1           MOV      R10,R0
    317                  }
    318                }
    319                /* Free allocated memory */
    320                GUI_JPEG__Free(pContext);
   \                     ??_Draw_3:
   \   00000174   0A00A0E1           MOV      R0,R10
   \   00000178   ........           BL       GUI_JPEG__Free
    321                GUI_UNLOCK_H(pContext);
   \   0000017C   ........           BL       GUI_ALLOC_UnlockH
    322              #if (GUI_WINSUPPORT)
    323                } WM_ITERATE_END();
   \   00000180   ........           BL       WM__GetNextIVR
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   D1FFFF1A           BNE      ??_Draw_2
    324              #endif
    325              /* Restore foreground color */
    326              LCD_SetColor(LCD_Index2Color(OldIndex));
   \                     ??_Draw_1:
   \   0000018C   10009DE5           LDR      R0,[SP, #+16]
   \   00000190   ........           BL       LCD_Index2Color
   \   00000194   ........           BL       LCD_SetColor
    327              GUI_ALLOC_Free(hContext);
   \   00000198   0700A0E1           MOV      R0,R7
   \   0000019C   ........           BL       GUI_ALLOC_Free
    328            }
    329            return r;
   \                     ??_Draw_0:
   \   000001A0   0600A0E1           MOV      R0,R6
   \   000001A4   24D08DE2           ADD      SP,SP,#+36
   \   000001A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    330          }
    331          
    332          /*********************************************************************
    333          *
    334          *       Public code
    335          *
    336          **********************************************************************
    337          */
    338          /*********************************************************************
    339          *
    340          *       GUI_JPEG_DrawScaledEx
    341          */

   \                                 In section .text, align 4, keep-with-next
    342          int  GUI_JPEG_DrawScaledEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0, int Num, int Denom) {
   \                     GUI_JPEG_DrawScaledEx:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C909DE5           LDR      R9,[SP, #+44]
    343            int r;
    344            GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
    345            r = _Draw(pfGetData, p, x0, y0, Num, Denom);
   \   00000024   04908DE5           STR      R9,[SP, #+4]
   \   00000028   00808DE5           STR      R8,[SP, #+0]
   \   0000002C   0730A0E1           MOV      R3,R7
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       _Draw
   \   00000040   0040A0E1           MOV      R4,R0
    346            GUI_UNLOCK();
   \   00000044   ........           BL       GUI_Unlock
    347            return r;
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12
   \   00000050   F083BDE8           POP      {R4-R9,PC}       ;; return
    348          }
    349          
    350          /*********************************************************************
    351          *
    352          *       GUI_JPEG_DrawScaled
    353          */

   \                                 In section .text, align 4, keep-with-next
    354          int  GUI_JPEG_DrawScaled(const void * pFileData, int DataSize, int x0, int y0, int Num, int Denom) {
   \                     GUI_JPEG_DrawScaled:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   30809DE5           LDR      R8,[SP, #+48]
   \   0000001C   34909DE5           LDR      R9,[SP, #+52]
    355            int r;
    356            GUI_JPEG_PARAM Param;
    357            GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
    358            Param.FileSize  = DataSize;
   \   00000024   0C508DE5           STR      R5,[SP, #+12]
    359            Param.pFileData = (const U8 *)pFileData;
   \   00000028   08408DE5           STR      R4,[SP, #+8]
    360            r = GUI_JPEG_DrawScaledEx(GUI_JPEG__GetData, &Param, x0, y0, Num, Denom);
   \   0000002C   ........           BL       GUI_Lock
   \   00000030   04908DE5           STR      R9,[SP, #+4]
   \   00000034   00808DE5           STR      R8,[SP, #+0]
   \   00000038   0730A0E1           MOV      R3,R7
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   08108DE2           ADD      R1,SP,#+8
   \   00000044   ........           LDR      R0,??DataTable2_5
   \   00000048   ........           BL       _Draw
   \   0000004C   0040A0E1           MOV      R4,R0
   \   00000050   ........           BL       GUI_Unlock
    361            GUI_UNLOCK();
   \   00000054   ........           BL       GUI_Unlock
    362            return r;
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   14D08DE2           ADD      SP,SP,#+20
   \   00000060   F083BDE8           POP      {R4-R9,PC}       ;; return
    363          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_JPEG__DecodeLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     GUI_JPEG__SkipLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     GUI_JPEG__GetColorGray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     GUI_JPEG__GetColorRGB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     GUI_JPEG__GetData
    364          
    365          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     GUI_JPEG_DrawScaled             48
     GUI_JPEG_DrawScaledEx           40
     _Draw                           72
     _DrawScanlineScaled             40
     _DrawScanlinesScaledAtOnce      64
     _DrawScanlinesScaledBanding     72


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     _DrawScanlineScaled          248
     _DrawScanlinesScaledAtOnce   272
     _DrawScanlinesScaledBanding  396
     _Draw                        428
     GUI_JPEG_DrawScaledEx         84
     GUI_JPEG_DrawScaled          100
     ??DataTable2                   4
     ??DataTable2_1                 4
     ??DataTable2_2                 4
     ??DataTable2_3                 4
     ??DataTable2_4                 4
     ??DataTable2_5                 4

 
 1 552 bytes in section .text
 
 1 552 bytes of CODE memory

Errors: none
Warnings: none
