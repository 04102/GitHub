###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  18:59:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawGraphEx.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawGraphEx.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_DrawGraphEx.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _DrawGraphEx.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawGraphEx.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawGraphEx.c
     19          Purpose     : Implementation of GUI_DrawGraphEx
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Defines
     30          *
     31          **********************************************************************
     32          */
     33          #define SWAPSIGN        1
     34          #define SWAPSIGN_DIVIDE 2
     35          #define DIVIDE          3
     36          #define MULTIPLY        4
     37          #define MULTIPLY_DIVIDE 5
     38          
     39          /*********************************************************************
     40          *
     41          *       Static code
     42          *
     43          **********************************************************************
     44          */
     45          /*********************************************************************
     46          *
     47          *       _DrawGraph
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          static void _DrawGraph(I16 * pay, int NumPoints, int xOff, int yOff, int Numerator, int Denominator, int MirrorX) {
   \                     _DrawGraph:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
     50            int i;
     51            int y0, y1;
     52            int yClip0, yClip1;
     53            int Method;
     54            int Skip;
     55            int Cnt;
     56            int Add;
     57            int NumPointsVisible;
     58            I16 * p;
     59            I16 Value;
     60            /* Early out on wrong parameters */
     61            if ((Numerator == 0) || (Denominator == 0) || (NumPoints <= 0)) {
   \   00000008   40C09DE5           LDR      R12,[SP, #+64]
   \   0000000C   44509DE5           LDR      R5,[SP, #+68]
   \   00000010   0340A0E1           MOV      R4,R3
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   48309DE5           LDR      R3,[SP, #+72]
   \   0000001C   00005513           CMPNE    R5,#+0
   \   00000020   AD00000A           BEQ      ??_DrawGraph_2
   \   00000024   010051E3           CMP      R1,#+1
   \   00000028   AB0000BA           BLT      ??_DrawGraph_2
     62              return;
     63            }
     64            if (Numerator == -1) {
   \   0000002C   40C09DE5           LDR      R12,[SP, #+64]
   \   00000030   01007CE3           CMN      R12,#+1
   \   00000034   0300001A           BNE      ??_DrawGraph_3
     65              if (Denominator == 1) {
   \   00000038   010055E3           CMP      R5,#+1
     66                Method = SWAPSIGN;
   \   0000003C   01E0A003           MOVEQ    LR,#+1
   \   00000040   02E0A013           MOVNE    LR,#+2
   \   00000044   080000EA           B        ??_DrawGraph_4
     67              } else {
     68                Method = SWAPSIGN_DIVIDE;
     69              }
     70            } else if (Numerator == 1) {
   \                     ??_DrawGraph_3:
   \   00000048   01005CE3           CMP      R12,#+1
   \   0000004C   0300001A           BNE      ??_DrawGraph_5
     71              if (Denominator == 1) {
   \   00000050   010055E3           CMP      R5,#+1
     72                Method = 0;
   \   00000054   00E0A003           MOVEQ    LR,#+0
   \   00000058   03E0A013           MOVNE    LR,#+3
   \   0000005C   020000EA           B        ??_DrawGraph_4
     73              } else {
     74                Method = DIVIDE;
     75              }
     76            } else {
     77              if (Denominator == 1) {
   \                     ??_DrawGraph_5:
   \   00000060   010055E3           CMP      R5,#+1
     78                Method = MULTIPLY;
   \   00000064   04E0A003           MOVEQ    LR,#+4
     79              } else {
     80                Method = MULTIPLY_DIVIDE;
   \   00000068   05E0A013           MOVNE    LR,#+5
   \                     ??_DrawGraph_4:
   \   0000006C   ........           LDR      R12,??DataTable1
   \   00000070   04E08DE5           STR      LR,[SP, #+4]
   \   00000074   14C09CE5           LDR      R12,[R12, #+20]
     81              }
     82            }
     83            /* Perform high level clipping in x */
     84            yClip0 = GUI_Context.pClipRect_HL->y0;
     85            yClip1 = GUI_Context.pClipRect_HL->y1;
     86            i = Cnt = 0;
   \   00000078   0070A0E3           MOV      R7,#+0
   \   0000007C   F2E0DCE1           LDRSH    LR,[R12, #+2]
     87            NumPointsVisible = NumPoints;
     88            if (GUI_Context.pClipRect_HL) {
   \   00000080   00005CE3           CMP      R12,#+0
   \   00000084   18E08DE5           STR      LR,[SP, #+24]
   \   00000088   F6E0DCE1           LDRSH    LR,[R12, #+6]
   \   0000008C   00708DE5           STR      R7,[SP, #+0]
   \   00000090   0C108DE5           STR      R1,[SP, #+12]
   \   00000094   14E08DE5           STR      LR,[SP, #+20]
   \   00000098   0A00000A           BEQ      ??_DrawGraph_6
   \   0000009C   F0E0DCE1           LDRSH    LR,[R12, #+0]
   \   000000A0   0E0052E1           CMP      R2,LR
     89              if (xOff < GUI_Context.pClipRect_HL->x0) {
     90                i = GUI_Context.pClipRect_HL->x0 - xOff;
   \   000000A4   02E04EB0           SUBLT    LR,LR,R2
   \   000000A8   00E08DB5           STRLT    LR,[SP, #+0]
   \   000000AC   F4C0DCE1           LDRSH    R12,[R12, #+4]
   \   000000B0   02E081E0           ADD      LR,R1,R2
   \   000000B4   01E04EE2           SUB      LR,LR,#+1
   \   000000B8   0E005CE1           CMP      R12,LR
     91              }
     92              if (xOff + NumPoints - 1 > GUI_Context.pClipRect_HL->x1) {
     93                NumPointsVisible = GUI_Context.pClipRect_HL->x1 - xOff + 1;
   \   000000BC   02C04CB0           SUBLT    R12,R12,R2
   \   000000C0   01C08CB2           ADDLT    R12,R12,#+1
   \   000000C4   0CC08DB5           STRLT    R12,[SP, #+12]
     94              }
     95            }
     96            if (MirrorX) {
   \                     ??_DrawGraph_6:
   \   000000C8   000053E3           CMP      R3,#+0
   \   000000CC   0500000A           BEQ      ??_DrawGraph_7
     97              p   = pay + NumPoints - 1;
   \   000000D0   810080E0           ADD      R0,R0,R1, LSL #+1
   \   000000D4   020040E2           SUB      R0,R0,#+2
     98              Add = -1;
   \   000000D8   0710E0E1           MVN      R1,R7
   \   000000DC   08008DE5           STR      R0,[SP, #+8]
   \   000000E0   10108DE5           STR      R1,[SP, #+16]
   \   000000E4   040000EA           B        ??_DrawGraph_8
     99            } else {
    100              Add = 1;
    101              p = pay + i;
   \                     ??_DrawGraph_7:
   \   000000E8   00109DE5           LDR      R1,[SP, #+0]
   \   000000EC   0130A0E3           MOV      R3,#+1
   \   000000F0   810080E0           ADD      R0,R0,R1, LSL #+1
   \   000000F4   10308DE5           STR      R3,[SP, #+16]
   \   000000F8   08008DE5           STR      R0,[SP, #+8]
    102            }
    103            /* Start drawing if there is something left to do after x-clipping */
    104            Skip = 1;
    105            if (i < NumPointsVisible) {
   \                     ??_DrawGraph_8:
   \   000000FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000100   0C109DE5           LDR      R1,[SP, #+12]
   \   00000104   0180A0E3           MOV      R8,#+1
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   720000AA           BGE      ??_DrawGraph_2
   \   00000110   009082E0           ADD      R9,R2,R0
    106              /* Iterate */
    107              for (; i < NumPointsVisible; i++) {
    108                Value = *p;
   \                     ??_DrawGraph_9:
   \   00000114   08009DE5           LDR      R0,[SP, #+8]
    109                p    += Add;
   \   00000118   10109DE5           LDR      R1,[SP, #+16]
   \   0000011C   08209DE5           LDR      R2,[SP, #+8]
   \   00000120   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000124   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000128   08108DE5           STR      R1,[SP, #+8]
    110                /* Check if current data is invalid */
    111                if (Value == 0x7fff) {
   \   0000012C   FF10A0E3           MOV      R1,#+255
   \   00000130   7F1C81E3           ORR      R1,R1,#0x7F00
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   0700001A           BNE      ??_DrawGraph_10
    112                  /* Draw point if only one value is valid */
    113                  if ((!Cnt) && (!Skip)) {
   \   0000013C   070098E1           ORRS     R0,R8,R7
   \   00000140   0200001A           BNE      ??_DrawGraph_11
    114                    LCD_DrawPixel(i + xOff - 1, y0);
   \   00000144   0610A0E1           MOV      R1,R6
   \   00000148   010049E2           SUB      R0,R9,#+1
   \   0000014C   ........           BL       LCD_DrawPixel
    115                  }
    116                  Skip = 1;
   \                     ??_DrawGraph_11:
   \   00000150   0180A0E3           MOV      R8,#+1
    117                  Cnt = 0;
   \   00000154   0070A0E3           MOV      R7,#+0
    118                  continue;
   \   00000158   580000EA           B        ??_DrawGraph_12
    119                } else {
    120                  if (Skip) {
   \                     ??_DrawGraph_10:
   \   0000015C   000058E3           CMP      R8,#+0
   \   00000160   1D00000A           BEQ      ??_DrawGraph_13
    121                    /* Do nothing but calculate new y0 value */
    122                    Skip = 0;
    123                    switch (Method) {
   \   00000164   04109DE5           LDR      R1,[SP, #+4]
   \   00000168   0080A0E3           MOV      R8,#+0
   \   0000016C   011041E2           SUB      R1,R1,#+1
   \   00000170   040051E3           CMP      R1,#+4
   \   00000174   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawGraph_0:
   \   00000178   1500008A           BHI      ??_DrawGraph_14
   \   0000017C   030000EA           B        ??_DrawGraph_15
   \   00000180   040000EA           B        ??_DrawGraph_16
   \   00000184   080000EA           B        ??_DrawGraph_17
   \   00000188   090000EA           B        ??_DrawGraph_18
   \   0000018C   0C0000EA           B        ??_DrawGraph_19
    124                    case SWAPSIGN:
    125                      y0 = -Value + yOff;
   \                     ??_DrawGraph_15:
   \   00000190   006044E0           SUB      R6,R4,R0
    126                      break;
   \   00000194   490000EA           B        ??_DrawGraph_12
    127                    case SWAPSIGN_DIVIDE:
    128                      y0 = (U32)(-Value + yOff) / (U32)Denominator;
   \                     ??_DrawGraph_16:
   \   00000198   000044E0           SUB      R0,R4,R0
   \                     ??_DrawGraph_20:
   \   0000019C   0510A0E1           MOV      R1,R5
   \   000001A0   ........           BL       __aeabi_uidiv
   \   000001A4   0060A0E1           MOV      R6,R0
    129                      break;
   \   000001A8   440000EA           B        ??_DrawGraph_12
    130                    case DIVIDE:
    131                      y0 = (U32)(Value + yOff) / (U32)Denominator;
   \                     ??_DrawGraph_17:
   \   000001AC   000084E0           ADD      R0,R4,R0
   \   000001B0   F9FFFFEA           B        ??_DrawGraph_20
    132                      break;
    133                    case MULTIPLY:
    134                      y0 = (U32)Numerator * (U32)(Value + yOff); /* Sequence swapped because of tool internal error of IAR V850 V340A */
   \                     ??_DrawGraph_18:
   \   000001B4   40109DE5           LDR      R1,[SP, #+64]
   \   000001B8   000084E0           ADD      R0,R4,R0
   \   000001BC   900106E0           MUL      R6,R0,R1
    135                      break;
   \   000001C0   3E0000EA           B        ??_DrawGraph_12
    136                    case MULTIPLY_DIVIDE:
    137                      y0 = (U32)(Value + yOff) * (U32)Numerator / (U32)Denominator;
   \                     ??_DrawGraph_19:
   \   000001C4   40109DE5           LDR      R1,[SP, #+64]
   \   000001C8   000084E0           ADD      R0,R4,R0
   \   000001CC   910000E0           MUL      R0,R1,R0
   \   000001D0   F1FFFFEA           B        ??_DrawGraph_20
    138                      break;
    139                    default:
    140                      y0 = Value + yOff;
   \                     ??_DrawGraph_14:
   \   000001D4   006084E0           ADD      R6,R4,R0
   \   000001D8   380000EA           B        ??_DrawGraph_12
    141                    }
    142                    continue;
    143                  }
    144                }
    145                /* Perform high level clipping in y */
    146                switch (Method) {
   \                     ??_DrawGraph_13:
   \   000001DC   04109DE5           LDR      R1,[SP, #+4]
   \   000001E0   011041E2           SUB      R1,R1,#+1
   \   000001E4   040051E3           CMP      R1,#+4
   \   000001E8   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawGraph_1:
   \   000001EC   1500008A           BHI      ??_DrawGraph_21
   \   000001F0   030000EA           B        ??_DrawGraph_22
   \   000001F4   040000EA           B        ??_DrawGraph_23
   \   000001F8   080000EA           B        ??_DrawGraph_24
   \   000001FC   090000EA           B        ??_DrawGraph_25
   \   00000200   0C0000EA           B        ??_DrawGraph_26
    147                case SWAPSIGN:
    148                  y1 = -Value + yOff;
   \                     ??_DrawGraph_22:
   \   00000204   00A044E0           SUB      R10,R4,R0
    149                  break;
   \   00000208   0F0000EA           B        ??_DrawGraph_27
    150                case SWAPSIGN_DIVIDE:
    151                  y1 = (U32)(-Value + yOff) / (U32)Denominator;
   \                     ??_DrawGraph_23:
   \   0000020C   000044E0           SUB      R0,R4,R0
   \                     ??_DrawGraph_28:
   \   00000210   0510A0E1           MOV      R1,R5
   \   00000214   ........           BL       __aeabi_uidiv
   \   00000218   00A0A0E1           MOV      R10,R0
    152                  break;
   \   0000021C   0A0000EA           B        ??_DrawGraph_27
    153                case DIVIDE:
    154                  y1 = (U32)(Value + yOff) / (U32)Denominator;
   \                     ??_DrawGraph_24:
   \   00000220   000084E0           ADD      R0,R4,R0
   \   00000224   F9FFFFEA           B        ??_DrawGraph_28
    155                  break;
    156                case MULTIPLY:
    157                  y1 = (U32)(Value + yOff) * (U32)Numerator;
   \                     ??_DrawGraph_25:
   \   00000228   40109DE5           LDR      R1,[SP, #+64]
   \   0000022C   000084E0           ADD      R0,R4,R0
   \   00000230   91000AE0           MUL      R10,R1,R0
    158                  break;
   \   00000234   040000EA           B        ??_DrawGraph_27
    159                case MULTIPLY_DIVIDE:
    160                  y1 = (U32)(Value + yOff) * (U32)Numerator / (U32)Denominator;
   \                     ??_DrawGraph_26:
   \   00000238   40109DE5           LDR      R1,[SP, #+64]
   \   0000023C   000084E0           ADD      R0,R4,R0
   \   00000240   910000E0           MUL      R0,R1,R0
   \   00000244   F1FFFFEA           B        ??_DrawGraph_28
    161                  break;
    162                default:
    163                  y1 = Value + yOff;
   \                     ??_DrawGraph_21:
   \   00000248   00A084E0           ADD      R10,R4,R0
    164                }
    165                if ((y0 >= yClip0) || (y1 >= yClip0)) {
   \                     ??_DrawGraph_27:
   \   0000024C   18009DE5           LDR      R0,[SP, #+24]
   \   00000250   000056E1           CMP      R6,R0
   \   00000254   00005AB1           CMPLT    R10,R0
   \   00000258   160000BA           BLT      ??_DrawGraph_29
    166                  if ((y0 <= yClip1) || (y1 <= yClip1)) {
   \   0000025C   14009DE5           LDR      R0,[SP, #+20]
   \   00000260   060050E1           CMP      R0,R6
   \   00000264   0A0050B1           CMPLT    R0,R10
   \   00000268   120000BA           BLT      ??_DrawGraph_29
    167                    int y01;
    168                    y01 = (y1 + y0) / 2;
   \   0000026C   0A0086E0           ADD      R0,R6,R10
   \   00000270   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000274   C0B0A0E1           ASR      R11,R0,#+1
    169                    if (y0 <= y1) {
   \   00000278   010049E2           SUB      R0,R9,#+1
   \   0000027C   06005AE1           CMP      R10,R6
   \   00000280   050000BA           BLT      ??_DrawGraph_30
    170                      LCD_DrawVLine(i + xOff - 1, y0, y01);
   \   00000284   0B20A0E1           MOV      R2,R11
   \   00000288   0610A0E1           MOV      R1,R6
   \   0000028C   ........           BL       LCD_DrawVLine
    171                      LCD_DrawVLine(i + xOff, y01, y1);
   \   00000290   0A20A0E1           MOV      R2,R10
   \   00000294   0B10A0E1           MOV      R1,R11
   \   00000298   040000EA           B        ??_DrawGraph_31
    172                    } else {
    173                      LCD_DrawVLine(i + xOff - 1, y01, y0);
   \                     ??_DrawGraph_30:
   \   0000029C   0620A0E1           MOV      R2,R6
   \   000002A0   0B10A0E1           MOV      R1,R11
   \   000002A4   ........           BL       LCD_DrawVLine
    174                      LCD_DrawVLine(i + xOff, y1, y01);
   \   000002A8   0B20A0E1           MOV      R2,R11
   \   000002AC   0A10A0E1           MOV      R1,R10
   \                     ??_DrawGraph_31:
   \   000002B0   0900A0E1           MOV      R0,R9
   \   000002B4   ........           BL       LCD_DrawVLine
    175                    }
    176                  }
    177                }
    178                Cnt++;
   \                     ??_DrawGraph_29:
   \   000002B8   017087E2           ADD      R7,R7,#+1
    179                y0 = y1;
   \   000002BC   0A60A0E1           MOV      R6,R10
    180              }
   \                     ??_DrawGraph_12:
   \   000002C0   00009DE5           LDR      R0,[SP, #+0]
   \   000002C4   0C109DE5           LDR      R1,[SP, #+12]
   \   000002C8   010080E2           ADD      R0,R0,#+1
   \   000002CC   00008DE5           STR      R0,[SP, #+0]
   \   000002D0   019089E2           ADD      R9,R9,#+1
   \   000002D4   010050E1           CMP      R0,R1
   \   000002D8   8DFFFFBA           BLT      ??_DrawGraph_9
   \                     ??_DrawGraph_2:
   \   000002DC   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000002E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    181            }
    182          }
    183          
    184          /*********************************************************************
    185          *
    186          *       Public code
    187          *
    188          **********************************************************************
    189          */
    190          /*********************************************************************
    191          *
    192          *       GUI_DrawGraphEx
    193          */  

   \                                 In section .text, align 4, keep-with-next
    194          void GUI_DrawGraphEx(I16 *pay, int NumPoints, int x0, int y0, int Numerator, int Denominator, int MirrorX) {
   \                     GUI_DrawGraphEx:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   02A0A0E1           MOV      R10,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   30709DE5           LDR      R7,[SP, #+48]
   \   0000001C   34809DE5           LDR      R8,[SP, #+52]
   \   00000020   38909DE5           LDR      R9,[SP, #+56]
    195            GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    196            #if (GUI_WINSUPPORT)
    197              WM_ADDORG(x0,y0);
   \   00000028   ........           LDR      R0,??DataTable1
   \   0000002C   401090E5           LDR      R1,[R0, #+64]
   \   00000030   440090E5           LDR      R0,[R0, #+68]
   \   00000034   0AA081E0           ADD      R10,R1,R10
   \   00000038   066080E0           ADD      R6,R0,R6
    198              WM_ITERATE_START(NULL); {
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           BL       WM__InitIVRSearch
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0A00000A           BEQ      ??GUI_DrawGraphEx_0
    199            #endif
    200            _DrawGraph(pay, NumPoints, x0, y0, Numerator, Denominator, MirrorX);
   \                     ??GUI_DrawGraphEx_1:
   \   0000004C   08908DE5           STR      R9,[SP, #+8]
   \   00000050   04808DE5           STR      R8,[SP, #+4]
   \   00000054   00708DE5           STR      R7,[SP, #+0]
   \   00000058   0630A0E1           MOV      R3,R6
   \   0000005C   0A20A0E1           MOV      R2,R10
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       _DrawGraph
    201            #if (GUI_WINSUPPORT)
    202              } WM_ITERATE_END();
   \   0000006C   ........           BL       WM__GetNextIVR
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   F4FFFF1A           BNE      ??GUI_DrawGraphEx_1
    203            #endif
    204            GUI_UNLOCK();
   \                     ??GUI_DrawGraphEx_0:
   \   00000078   10D08DE2           ADD      SP,SP,#+16
   \   0000007C   F047BDE8           POP      {R4-R10,LR}
   \   00000080   ........           B        GUI_Unlock       ;; tailcall
    205          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    206          
    207          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     GUI_DrawGraphEx     48
     _DrawGraph          64


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     _DrawGraph       740
     GUI_DrawGraphEx  132
     ??DataTable1       4

 
 876 bytes in section .text
 
 876 bytes of CODE memory

Errors: none
Warnings: none
