###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:32 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_16.c                     #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_16.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    IDRV_Lin_16.lst                                          #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    DRV_Lin_16.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_16.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_16.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          #include <string.h>
     25          
     26          #include "LCD_Private.h"
     27          #include "GUI_Private.h"
     28          #include "LCD_SIM.h"
     29          #include "LCD_ConfDefaults.h"
     30          
     31          #include "GUIDRV_Lin.h"
     32          
     33          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     34          
     35          /*********************************************************************
     36          *
     37          *       Defines
     38          *
     39          **********************************************************************
     40          */
     41          #ifdef WIN32
     42            //
     43            // Simulation prototypes
     44            //
     45            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     47            U32  SIM_Lin_ReadMem32p (U32 * p);
     48            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     49            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     50            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     51            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     52            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     53            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     54            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     55            //
     56            // Access macro definition for internal simulation
     57            //
     58            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     59            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     60            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     61            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     62            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     63            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     64            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     65            #undef  GUI_MEMCPY
     66            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     67          #else
     68            //
     69            // Access macro definition for hardware
     70            //
     71            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     73            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     74            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     76            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     77            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     78          #endif
     79          
     80          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     81          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     82          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     83          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     84          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     85          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     86          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     87          
     88          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     89          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     90          
     91          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y *  vxSizePhys       +       x      )
     92          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y * (vxSizePhys >> 1) + ((U32)x >> 1))
     93          
     94          /*********************************************************************
     95          *
     96          *       Types
     97          *
     98          **********************************************************************
     99          */
    100          typedef struct {
    101            U32 VRAMAddr;
    102            int xSize, ySize;
    103            int vxSize, vySize;
    104            int vxSizePhys;
    105            int xPos, yPos;
    106            int Alpha;
    107            int IsVisible;
    108            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    109          } DRIVER_CONTEXT;
    110          
    111          /*********************************************************************
    112          *
    113          *       Static functions
    114          *
    115          **********************************************************************
    116          */
    117          /*********************************************************************
    118          *
    119          *       _SetPixelIndex
    120          *
    121          * Purpose:
    122          *   Sets the index of the given pixel. The upper layers
    123          *   calling this routine make sure that the coordinates are in range, so
    124          *   that no check on the parameters needs to be performed.
    125          */

   \                                 In section .text, align 4, keep-with-next
    126          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
    127            DRIVER_CONTEXT * pContext;
    128            U32 Off;
    129          
    130            //
    131            // Write into hardware
    132            //
    133            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _SetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    134            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
    135            WRITE_MEM16(pContext->VRAMAddr, Off, PixelIndex);
   \   00000004   14C090E5           LDR      R12,[R0, #+20]
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   9C1221E0           MLA      R1,R12,R2,R1
   \   00000010   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000014   B030C0E1           STRH     R3,[R0, #+0]
    136          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
    137          
    138          /*********************************************************************
    139          *
    140          *       _GetPixelIndex
    141          *
    142          * Purpose:
    143          *   Returns the index of the given pixel. The upper layers
    144          *   calling this routine make sure that the coordinates are in range, so
    145          *   that no check on the parameters needs to be performed.
    146          */

   \                                 In section .text, align 4, keep-with-next
    147          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    148            DRIVER_CONTEXT * pContext;
    149            U32 Off;
    150            LCD_PIXELINDEX PixelIndex;
    151          
    152            //
    153            // Read from hardware
    154            //
    155            pContext   = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    156            Off        = XY2OFF16(pContext->vxSizePhys, x, y);
    157            PixelIndex = READ_MEM16(pContext->VRAMAddr, Off);
    158            return PixelIndex;
   \   00000004   143090E5           LDR      R3,[R0, #+20]
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   931221E0           MLA      R1,R3,R2,R1
   \   00000010   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000014   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000018   1EFF2FE1           BX       LR               ;; return
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       _XorPixel
    164          */

   \                                 In section .text, align 4, keep-with-next
    165          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    166            LCD_PIXELINDEX PixelIndex;
    167            LCD_PIXELINDEX IndexMask;
    168            
    169            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080096E5           LDR      R0,[R6, #+8]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   141090E5           LDR      R1,[R0, #+20]
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   914522E0           MLA      R2,R1,R5,R4
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   820080E0           ADD      R0,R0,R2, LSL #+1
   \   00000028   B070D0E1           LDRH     R7,[R0, #+0]
    170            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   0000002C   100096E5           LDR      R0,[R6, #+16]
   \   00000030   080090E5           LDR      R0,[R0, #+8]
   \   00000034   30FF2FE1           BLX      R0
    171            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000038   081096E5           LDR      R1,[R6, #+8]
   \   0000003C   070020E0           EOR      R0,R0,R7
   \   00000040   142091E5           LDR      R2,[R1, #+20]
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   924523E0           MLA      R3,R2,R5,R4
    172          }
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   831081E0           ADD      R1,R1,R3, LSL #+1
   \   00000054   B000C1E1           STRH     R0,[R1, #+0]
   \   00000058   F080BDE8           POP      {R4-R7,PC}       ;; return
    173          
    174          /*********************************************************************
    175          *
    176          *       _DrawHLine
    177          */

   \                                 In section .text, align 4, keep-with-next
    178          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    179            DRIVER_CONTEXT * pContext;
    180            U32 * pDest;
    181            U32 Off;
    182            int RemPixels;
    183            U32 Data, ColorMask;
    184            LCD_PIXELINDEX ColorIndex;
    185          
    186            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1500000A           BEQ      ??_DrawHLine_0
   \   00000024   040055E1           CMP      R5,R4
   \   00000028   440000BA           BLT      ??_DrawHLine_1
    187              for (; x0 <= x1; x0++) {
    188                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   080097E5           LDR      R0,[R7, #+8]
   \   00000030   141090E5           LDR      R1,[R0, #+20]
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   914622E0           MLA      R2,R1,R6,R4
   \   0000003C   820080E0           ADD      R0,R0,R2, LSL #+1
   \   00000040   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000044   100097E5           LDR      R0,[R7, #+16]
   \   00000048   080090E5           LDR      R0,[R0, #+8]
   \   0000004C   30FF2FE1           BLX      R0
   \   00000050   081097E5           LDR      R1,[R7, #+8]
   \   00000054   080020E0           EOR      R0,R0,R8
   \   00000058   142091E5           LDR      R2,[R1, #+20]
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   924623E0           MLA      R3,R2,R6,R4
    189              }
   \   00000064   014084E2           ADD      R4,R4,#+1
   \   00000068   831081E0           ADD      R1,R1,R3, LSL #+1
   \   0000006C   B000C1E1           STRH     R0,[R1, #+0]
   \   00000070   040055E1           CMP      R5,R4
   \   00000074   ECFFFFAA           BGE      ??_DrawHLine_2
   \   00000078   F081BDE8           POP      {R4-R8,PC}
    190            } else {
    191              ColorIndex = LCD__GetColorIndex();
    192              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawHLine_0:
   \   0000007C   081097E5           LDR      R1,[R7, #+8]
   \   00000080   ........           LDR      R0,??DataTable15_1
    193              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
    194              pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000084   142091E5           LDR      R2,[R1, #+20]
   \   00000088   001091E5           LDR      R1,[R1, #+0]
   \   0000008C   C220A0E1           ASR      R2,R2,#+1
   \   00000090   920603E0           MUL      R3,R2,R6
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   A42083E0           ADD      R2,R3,R4, LSR #+1
   \   0000009C   021181E0           ADD      R1,R1,R2, LSL #+2
    195              RemPixels = x1 - x0 + 1;
   \   000000A0   042045E0           SUB      R2,R5,R4
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   012082E2           ADD      R2,R2,#+1
    196              //
    197              // First DWORD
    198              //
    199              if (x0 & 1) {
   \   000000AC   010014E3           TST      R4,#0x1
   \   000000B0   0500000A           BEQ      ??_DrawHLine_3
    200                Data = READ_MEM32P(pDest);
    201                #if (LCD_ENDIAN_BIG == 0)
    202                  Data &= 0xFFFF;
    203                  Data |= (((U32)ColorIndex) << 16);
    204                #else
    205                  Data &= 0xFFFF0000;
    206                  Data |= ColorIndex;
    207                #endif
    208                WRITE_MEM32P(pDest, Data);
   \   000000B4   B030D1E1           LDRH     R3,[R1, #+0]
   \   000000B8   00C8A0E1           LSL      R12,R0,#+16
    209                pDest++;
    210                RemPixels--;
   \   000000BC   012042E2           SUB      R2,R2,#+1
   \   000000C0   0338A0E1           LSL      R3,R3,#+16
   \   000000C4   23388CE1           ORR      R3,R12,R3, LSR #+16
   \   000000C8   043081E4           STR      R3,[R1], #+4
    211              }
    212              //
    213              // Complete DWORDS
    214              //
    215              ColorMask = ColorIndex * 0x00010001;
   \                     ??_DrawHLine_3:
   \   000000CC   003880E0           ADD      R3,R0,R0, LSL #+16
    216              if (RemPixels >= 16) {
   \   000000D0   100052E3           CMP      R2,#+16
   \   000000D4   0B0000BA           BLT      ??_DrawHLine_4
    217                RemPixels -= 16;
   \   000000D8   102042E2           SUB      R2,R2,#+16
    218                do {
    219                  WRITE_MEM32P(pDest,     ColorMask);
   \                     ??_DrawHLine_5:
   \   000000DC   043081E4           STR      R3,[R1], #+4
    220                  WRITE_MEM32P(pDest + 1, ColorMask);
   \   000000E0   043081E4           STR      R3,[R1], #+4
    221                  WRITE_MEM32P(pDest + 2, ColorMask);
   \   000000E4   043081E4           STR      R3,[R1], #+4
    222                  WRITE_MEM32P(pDest + 3, ColorMask);
   \   000000E8   043081E4           STR      R3,[R1], #+4
    223                  WRITE_MEM32P(pDest + 4, ColorMask);
   \   000000EC   043081E4           STR      R3,[R1], #+4
    224                  WRITE_MEM32P(pDest + 5, ColorMask);
   \   000000F0   043081E4           STR      R3,[R1], #+4
    225                  WRITE_MEM32P(pDest + 6, ColorMask);
   \   000000F4   043081E4           STR      R3,[R1], #+4
    226                  WRITE_MEM32P(pDest + 7, ColorMask);
   \   000000F8   043081E4           STR      R3,[R1], #+4
    227                  pDest += 8;
    228                  RemPixels -= 16;
   \   000000FC   102052E2           SUBS     R2,R2,#+16
    229                } while (RemPixels >= 0);
   \   00000100   F5FFFF5A           BPL      ??_DrawHLine_5
    230                RemPixels += 16;
   \   00000104   102082E2           ADD      R2,R2,#+16
    231              }
    232              if (RemPixels >= 2) {
   \                     ??_DrawHLine_4:
   \   00000108   020052E3           CMP      R2,#+2
   \   0000010C   030000BA           BLT      ??_DrawHLine_6
    233                do {
    234                  WRITE_MEM32P(pDest, ColorMask);
    235                  pDest++;
    236                  RemPixels -= 2;
   \                     ??_DrawHLine_7:
   \   00000110   022042E2           SUB      R2,R2,#+2
   \   00000114   043081E4           STR      R3,[R1], #+4
    237                } while (RemPixels >= 2);
   \   00000118   020052E3           CMP      R2,#+2
   \   0000011C   FBFFFFAA           BGE      ??_DrawHLine_7
    238              }
    239              //
    240              // Last DWORD
    241              //
    242              if (RemPixels > 0) {
   \                     ??_DrawHLine_6:
   \   00000120   010052E3           CMP      R2,#+1
   \   00000124   050000BA           BLT      ??_DrawHLine_1
    243                Data = READ_MEM32P(pDest);
    244                #if (LCD_ENDIAN_BIG == 0)
    245                  Data &= 0xFFFF0000;
    246                  Data |= ColorIndex & 0xFFFF;
    247                #else
    248                  Data &= 0xFFFF;
    249                  Data |= (((U32)ColorIndex) << 16);
    250                #endif
    251                WRITE_MEM32P(pDest, Data);
   \   00000128   002091E5           LDR      R2,[R1, #+0]
   \   0000012C   0008A0E1           LSL      R0,R0,#+16
   \   00000130   2228A0E1           LSR      R2,R2,#+16
   \   00000134   2008A0E1           LSR      R0,R0,#+16
   \   00000138   020880E1           ORR      R0,R0,R2, LSL #+16
   \   0000013C   000081E5           STR      R0,[R1, #+0]
    252              }
    253            }
    254          }
   \                     ??_DrawHLine_1:
   \   00000140   F081BDE8           POP      {R4-R8,PC}       ;; return
    255          
    256          /*********************************************************************
    257          *
    258          *       _DrawVLine, not optimized
    259          */

   \                                 In section .text, align 4, keep-with-next
    260          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    261            LCD_PIXELINDEX ColorIndex;
    262          
    263            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1500000A           BEQ      ??_DrawVLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   210000BA           BLT      ??_DrawVLine_1
    264              for (; y0 <= y1; y0++) {
    265                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   141090E5           LDR      R1,[R0, #+20]
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   915722E0           MLA      R2,R1,R7,R5
   \   0000003C   820080E0           ADD      R0,R0,R2, LSL #+1
   \   00000040   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000044   100094E5           LDR      R0,[R4, #+16]
   \   00000048   080090E5           LDR      R0,[R0, #+8]
   \   0000004C   30FF2FE1           BLX      R0
   \   00000050   081094E5           LDR      R1,[R4, #+8]
   \   00000054   080020E0           EOR      R0,R0,R8
   \   00000058   142091E5           LDR      R2,[R1, #+20]
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   925723E0           MLA      R3,R2,R7,R5
    266              }
   \   00000064   017087E2           ADD      R7,R7,#+1
   \   00000068   831081E0           ADD      R1,R1,R3, LSL #+1
   \   0000006C   B000C1E1           STRH     R0,[R1, #+0]
   \   00000070   070056E1           CMP      R6,R7
   \   00000074   ECFFFFAA           BGE      ??_DrawVLine_2
   \   00000078   F081BDE8           POP      {R4-R8,PC}
    267            } else {
    268              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   0000007C   ........           LDR      R0,??DataTable15_1
   \   00000080   070056E1           CMP      R6,R7
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   080000BA           BLT      ??_DrawVLine_1
    269              for (; y0 <= y1; y0++) {
    270                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   00000090   081094E5           LDR      R1,[R4, #+8]
   \   00000094   142091E5           LDR      R2,[R1, #+20]
   \   00000098   001091E5           LDR      R1,[R1, #+0]
   \   0000009C   925723E0           MLA      R3,R2,R7,R5
    271              }
   \   000000A0   017087E2           ADD      R7,R7,#+1
   \   000000A4   831081E0           ADD      R1,R1,R3, LSL #+1
   \   000000A8   B000C1E1           STRH     R0,[R1, #+0]
   \   000000AC   070056E1           CMP      R6,R7
   \   000000B0   F6FFFFAA           BGE      ??_DrawVLine_3
    272            }
    273          }
   \                     ??_DrawVLine_1:
   \   000000B4   F081BDE8           POP      {R4-R8,PC}       ;; return
    274          
    275          /*********************************************************************
    276          *
    277          *       _FillRect
    278          */

   \                                 In section .text, align 4, keep-with-next
    279          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18809DE5           LDR      R8,[SP, #+24]
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   060058E1           CMP      R8,R6
   \   0000001C   070000BA           BLT      ??_FillRect_0
    280            #ifdef LCD_FILL_RECT
    281               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    282            #else
    283              for (; y0 <= y1; y0++) {
    284                _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_1:
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawHLine
    285              }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   060058E1           CMP      R8,R6
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    286            #endif
    287          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    288          
    289          /*********************************************************************
    290          *
    291          *       Draw Bitmap 1 BPP
    292          */

   \                                 In section .text, align 4, keep-with-next
    293          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    294            DRIVER_CONTEXT * pContext;
    295            unsigned Pixels, PixelCnt;
    296            LCD_PIXELINDEX Index, Index0, Index1, IndexMask;
    297            U32 Off;
    298          
    299            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   086090E5           LDR      R6,[R0, #+8]
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
    300            Index0   = *(pTrans + 0);
    301            Index1   = *(pTrans + 1);
    302            x       += Diff;
    303            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
   \   0000000C   147096E5           LDR      R7,[R6, #+20]
   \   00000010   0340A0E1           MOV      R4,R3
   \   00000014   971221E0           MLA      R1,R7,R2,R1
    304            PixelCnt = 8 - Diff;
    305            Pixels   = LCD_aMirror[*p] >> Diff;
   \   00000018   ........           LDR      R9,??DataTable15_2
   \   0000001C   01708CE0           ADD      R7,R12,R1
   \   00000020   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000024   28E09DE5           LDR      LR,[SP, #+40]
   \   00000028   24509DE5           LDR      R5,[SP, #+36]
   \   0000002C   0910D1E7           LDRB     R1,[R1, +R9]
   \   00000030   00309EE5           LDR      R3,[LR, #+0]
   \   00000034   04E09EE5           LDR      LR,[LR, #+4]
   \   00000038   51ACA0E1           ASR      R10,R1,R12
    306            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   0000003C   ........           LDR      R1,??DataTable15
   \   00000040   08806CE2           RSB      R8,R12,#+8
   \   00000044   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000048   031001E2           AND      R1,R1,#0x3
   \   0000004C   030051E3           CMP      R1,#+3
   \   00000050   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000054   3400008A           BHI      ??_DrawBitLine1BPP_1
   \   00000058   020000EA           B        ??_DrawBitLine1BPP_2
   \   0000005C   1F0000EA           B        ??_DrawBitLine1BPP_3
   \   00000060   100000EA           B        ??_DrawBitLine1BPP_4
   \   00000064   1D0000EA           B        ??_DrawBitLine1BPP_3
    307            case 0:
    308              do {
    309                Index = (Pixels & 1) ? Index1 : Index0;
    310                WRITE_MEM16(pContext->VRAMAddr, Off, Index);
   \                     ??_DrawBitLine1BPP_2:
   \   00000068   001096E5           LDR      R1,[R6, #+0]
   \   0000006C   01001AE3           TST      R10,#0x1
   \   00000070   0E00A011           MOVNE    R0,LR
   \   00000074   0300A001           MOVEQ    R0,R3
   \   00000078   871081E0           ADD      R1,R1,R7, LSL #+1
    311                Off++;
    312                PixelCnt--;
   \   0000007C   018048E2           SUB      R8,R8,#+1
   \   00000080   B000C1E1           STRH     R0,[R1, #+0]
    313                Pixels >>= 1;
    314                if (PixelCnt == 0) {
   \   00000084   000058E3           CMP      R8,#+0
    315                  Pixels   = LCD_aMirror[*(++p)];
   \   00000088   0100F405           LDRBEQ   R0,[R4, #+1]!
   \   0000008C   AAA0A0E1           LSR      R10,R10,#+1
    316                  PixelCnt = 8;
   \   00000090   0880A003           MOVEQ    R8,#+8
   \   00000094   09A0D007           LDRBEQ   R10,[R0, +R9]
   \   00000098   017087E2           ADD      R7,R7,#+1
    317                }
    318              } while (--xsize);
   \   0000009C   015055E2           SUBS     R5,R5,#+1
   \   000000A0   F0FFFF1A           BNE      ??_DrawBitLine1BPP_2
   \   000000A4   F087BDE8           POP      {R4-R10,PC}
    319              break;
    320            case LCD_DRAWMODE_TRANS:
    321              do {
    322                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_4:
   \   000000A8   01001AE3           TST      R10,#0x1
    323                  WRITE_MEM16(pContext->VRAMAddr, Off, Index1);
   \   000000AC   00009615           LDRNE    R0,[R6, #+0]
    324                }
    325                Off++;
    326                PixelCnt--;
   \   000000B0   018048E2           SUB      R8,R8,#+1
   \   000000B4   87008010           ADDNE    R0,R0,R7, LSL #+1
   \   000000B8   B0E0C011           STRHNE   LR,[R0, #+0]
    327                Pixels >>= 1;
    328                if (PixelCnt == 0) {
   \   000000BC   000058E3           CMP      R8,#+0
    329                  Pixels   = LCD_aMirror[*(++p)];
   \   000000C0   0100F405           LDRBEQ   R0,[R4, #+1]!
   \   000000C4   AAA0A0E1           LSR      R10,R10,#+1
    330                  PixelCnt = 8;
   \   000000C8   0880A003           MOVEQ    R8,#+8
   \   000000CC   09A0D007           LDRBEQ   R10,[R0, +R9]
   \   000000D0   017087E2           ADD      R7,R7,#+1
    331                }
    332              } while (--xsize);
   \   000000D4   015055E2           SUBS     R5,R5,#+1
   \   000000D8   F2FFFF1A           BNE      ??_DrawBitLine1BPP_4
   \   000000DC   F087BDE8           POP      {R4-R10,PC}
    333              break;
    334            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    335            case LCD_DRAWMODE_XOR:
    336              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_3:
   \   000000E0   100090E5           LDR      R0,[R0, #+16]
   \   000000E4   080090E5           LDR      R0,[R0, #+8]
   \   000000E8   30FF2FE1           BLX      R0
   \   000000EC   001096E5           LDR      R1,[R6, #+0]
   \   000000F0   871081E0           ADD      R1,R1,R7, LSL #+1
    337              do {
    338                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_5:
   \   000000F4   01001AE3           TST      R10,#0x1
    339                  Index = READ_MEM16(pContext->VRAMAddr, Off);
    340                  Index ^= IndexMask;
    341                  WRITE_MEM16(pContext->VRAMAddr, Off, Index);
   \   000000F8   B020D111           LDRHNE   R2,[R1, #+0]
    342                }
    343                Off++;
    344                PixelCnt--;
   \   000000FC   018048E2           SUB      R8,R8,#+1
    345                Pixels >>= 1;
   \   00000100   AAA0A0E1           LSR      R10,R10,#+1
   \   00000104   02202010           EORNE    R2,R0,R2
   \   00000108   B020C111           STRHNE   R2,[R1, #+0]
    346                if (PixelCnt == 0) {
   \   0000010C   000058E3           CMP      R8,#+0
    347                  Pixels   = LCD_aMirror[*(++p)];
   \   00000110   0120F405           LDRBEQ   R2,[R4, #+1]!
    348                  PixelCnt = 8;
   \   00000114   0880A003           MOVEQ    R8,#+8
    349                }
    350              } while (--xsize);
   \   00000118   015045E2           SUB      R5,R5,#+1
   \   0000011C   09A0D207           LDRBEQ   R10,[R2, +R9]
   \   00000120   021081E2           ADD      R1,R1,#+2
   \   00000124   000055E3           CMP      R5,#+0
   \   00000128   F1FFFF1A           BNE      ??_DrawBitLine1BPP_5
    351              break;
    352            }
    353          }
   \                     ??_DrawBitLine1BPP_1:
   \   0000012C   F087BDE8           POP      {R4-R10,PC}      ;; return
    354          
    355          /*********************************************************************
    356          *
    357          *       Draw Bitmap 2 BPP, not optimized
    358          */

   \                                 In section .text, align 4, keep-with-next
    359          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    360            LCD_PIXELINDEX Pixels, PixelIndex;
    361            int CurrentPixel, Shift, Index;
    362            Pixels       = *p;
    363            CurrentPixel = Diff;
    364            x           += Diff;
    365            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable15
   \   00000008   20409DE5           LDR      R4,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24E09DE5           LDR      LR,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00C0D3E5           LDRB     R12,[R3, #+0]
   \   0000001C   011084E0           ADD      R1,R4,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   2C00000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    366            case 0:
    367              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000034   C060A0E3           MOV      R6,#+192
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1400000A           BEQ      ??_DrawBitLine2BPP_2
    368                do {
    369                  Shift = (3 - CurrentPixel) << 1;
    370                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    371                  PixelIndex = *(pTrans + Index);
    372                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine2BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   037064E2           RSB      R7,R4,#+3
   \   00000048   149098E5           LDR      R9,[R8, #+20]
   \   0000004C   8770A0E1           LSL      R7,R7,#+1
   \   00000050   99122AE0           MLA      R10,R9,R2,R1
   \   00000054   0790A0E1           MOV      R9,R7
   \   00000058   069069E2           RSB      R9,R9,#+6
   \   0000005C   56990CE0           AND      R9,R12,R6, ASR R9
   \   00000060   008098E5           LDR      R8,[R8, #+0]
   \   00000064   3977A0E1           LSR      R7,R9,R7
   \   00000068   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000006C   8A8088E0           ADD      R8,R8,R10, LSL #+1
    373                  if (++CurrentPixel == 4) {
   \   00000070   014084E2           ADD      R4,R4,#+1
   \   00000074   B070C8E1           STRH     R7,[R8, #+0]
   \   00000078   040054E3           CMP      R4,#+4
    374                    CurrentPixel = 0;
   \   0000007C   0040A003           MOVEQ    R4,#+0
    375                    Pixels = *(++p);
   \   00000080   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   00000084   011081E2           ADD      R1,R1,#+1
    376                  }
    377          		  } while (--xsize);
   \   00000088   01E05EE2           SUBS     LR,LR,#+1
   \   0000008C   EBFFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   00000090   F087BDE8           POP      {R4-R10,PC}
    378              } else {
    379                do {
    380                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_2:
   \   00000094   035064E2           RSB      R5,R4,#+3
   \   00000098   8570A0E1           LSL      R7,R5,#+1
    381                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    382                  _SetPixelIndex(pDevice, x++, y, Index);
   \   0000009C   085090E5           LDR      R5,[R0, #+8]
    383                  if (++CurrentPixel == 4) {
   \   000000A0   014084E2           ADD      R4,R4,#+1
   \   000000A4   148095E5           LDR      R8,[R5, #+20]
   \   000000A8   005095E5           LDR      R5,[R5, #+0]
   \   000000AC   981229E0           MLA      R9,R8,R2,R1
   \   000000B0   0780A0E1           MOV      R8,R7
   \   000000B4   068068E2           RSB      R8,R8,#+6
   \   000000B8   56880CE0           AND      R8,R12,R6, ASR R8
   \   000000BC   895085E0           ADD      R5,R5,R9, LSL #+1
   \   000000C0   3877A0E1           LSR      R7,R8,R7
   \   000000C4   B070C5E1           STRH     R7,[R5, #+0]
   \   000000C8   040054E3           CMP      R4,#+4
    384                    CurrentPixel = 0;
   \   000000CC   0040A003           MOVEQ    R4,#+0
    385                    Pixels = *(++p);
   \   000000D0   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   000000D4   011081E2           ADD      R1,R1,#+1
    386                  }
    387          		  } while (--xsize);
   \   000000D8   01E05EE2           SUBS     LR,LR,#+1
   \   000000DC   ECFFFF1A           BNE      ??_DrawBitLine2BPP_2
   \   000000E0   F087BDE8           POP      {R4-R10,PC}
    388              }
    389              break;
    390            case LCD_DRAWMODE_TRANS:
    391              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   000000E4   C060A0E3           MOV      R6,#+192
   \   000000E8   000055E3           CMP      R5,#+0
   \   000000EC   1500000A           BEQ      ??_DrawBitLine2BPP_4
    392                do {
    393                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   000000F0   037064E2           RSB      R7,R4,#+3
   \   000000F4   8770A0E1           LSL      R7,R7,#+1
    394                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   000000F8   0780A0E1           MOV      R8,R7
   \   000000FC   068068E2           RSB      R8,R8,#+6
   \   00000100   56880CE0           AND      R8,R12,R6, ASR R8
   \   00000104   3877B0E1           LSRS     R7,R8,R7
    395                  if (Index) {
   \   00000108   0600000A           BEQ      ??_DrawBitLine2BPP_6
    396                    PixelIndex = *(pTrans + Index);
    397                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   0000010C   088090E5           LDR      R8,[R0, #+8]
   \   00000110   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   00000114   149098E5           LDR      R9,[R8, #+20]
   \   00000118   008098E5           LDR      R8,[R8, #+0]
   \   0000011C   99122AE0           MLA      R10,R9,R2,R1
   \   00000120   8A8088E0           ADD      R8,R8,R10, LSL #+1
   \   00000124   B070C8E1           STRH     R7,[R8, #+0]
    398                  }
    399                  x++;
    400                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_6:
   \   00000128   014084E2           ADD      R4,R4,#+1
   \   0000012C   040054E3           CMP      R4,#+4
    401                    CurrentPixel = 0;
   \   00000130   0040A003           MOVEQ    R4,#+0
    402                    Pixels = *(++p);
   \   00000134   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   00000138   011081E2           ADD      R1,R1,#+1
    403                  }
    404          		  } while (--xsize);
   \   0000013C   01E05EE2           SUBS     LR,LR,#+1
   \   00000140   EAFFFF1A           BNE      ??_DrawBitLine2BPP_5
   \   00000144   F087BDE8           POP      {R4-R10,PC}
    405              } else {
    406                do {
    407                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   00000148   035064E2           RSB      R5,R4,#+3
   \   0000014C   8570A0E1           LSL      R7,R5,#+1
    408                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000150   0750A0E1           MOV      R5,R7
   \   00000154   065065E2           RSB      R5,R5,#+6
   \   00000158   56550CE0           AND      R5,R12,R6, ASR R5
   \   0000015C   3577B0E1           LSRS     R7,R5,R7
    409                  if (Index) {
   \   00000160   0500000A           BEQ      ??_DrawBitLine2BPP_7
    410                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000164   085090E5           LDR      R5,[R0, #+8]
   \   00000168   148095E5           LDR      R8,[R5, #+20]
   \   0000016C   005095E5           LDR      R5,[R5, #+0]
   \   00000170   981229E0           MLA      R9,R8,R2,R1
   \   00000174   895085E0           ADD      R5,R5,R9, LSL #+1
   \   00000178   B070C5E1           STRH     R7,[R5, #+0]
    411                  }
    412                  x++;
    413                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   0000017C   014084E2           ADD      R4,R4,#+1
   \   00000180   040054E3           CMP      R4,#+4
    414                    CurrentPixel = 0;
   \   00000184   0040A003           MOVEQ    R4,#+0
    415                    Pixels = *(++p);
   \   00000188   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   0000018C   011081E2           ADD      R1,R1,#+1
    416                  }
    417          		  } while (--xsize);
   \   00000190   01E05EE2           SUBS     LR,LR,#+1
   \   00000194   EBFFFF1A           BNE      ??_DrawBitLine2BPP_4
    418              }
    419              break;
    420            }
    421          }
   \   00000198   F087BDE8           POP      {R4-R10,PC}      ;; return
    422          
    423          /*********************************************************************
    424          *
    425          *       Draw Bitmap 4 BPP, not optimized
    426          */

   \                                 In section .text, align 4, keep-with-next
    427          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    428            LCD_PIXELINDEX Pixels, PixelIndex;
    429            int CurrentPixel, Shift, Index;
    430            Pixels       = *p;
    431            CurrentPixel = Diff;
    432            x           += Diff;
    433            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable15
   \   00000008   20409DE5           LDR      R4,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24E09DE5           LDR      LR,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00C0D3E5           LDRB     R12,[R3, #+0]
   \   0000001C   011084E0           ADD      R1,R4,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   2C00000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    434            case 0:
    435              if (pTrans) {
   \                     ??_DrawBitLine4BPP_0:
   \   00000034   F060A0E3           MOV      R6,#+240
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1400000A           BEQ      ??_DrawBitLine4BPP_2
    436                do {
    437                  Shift = (1 - CurrentPixel) << 2;
    438                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    439                  PixelIndex = *(pTrans + Index);
    440                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine4BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   017064E2           RSB      R7,R4,#+1
   \   00000048   149098E5           LDR      R9,[R8, #+20]
   \   0000004C   0771A0E1           LSL      R7,R7,#+2
   \   00000050   99122AE0           MLA      R10,R9,R2,R1
   \   00000054   0790A0E1           MOV      R9,R7
   \   00000058   049069E2           RSB      R9,R9,#+4
   \   0000005C   56990CE0           AND      R9,R12,R6, ASR R9
   \   00000060   008098E5           LDR      R8,[R8, #+0]
   \   00000064   3977A0E1           LSR      R7,R9,R7
   \   00000068   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000006C   8A8088E0           ADD      R8,R8,R10, LSL #+1
    441                  if (++CurrentPixel == 2) {
   \   00000070   014084E2           ADD      R4,R4,#+1
   \   00000074   B070C8E1           STRH     R7,[R8, #+0]
   \   00000078   020054E3           CMP      R4,#+2
    442                    CurrentPixel = 0;
   \   0000007C   0040A003           MOVEQ    R4,#+0
    443                    Pixels = *(++p);
   \   00000080   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   00000084   011081E2           ADD      R1,R1,#+1
    444                  }
    445          		  } while (--xsize);
   \   00000088   01E05EE2           SUBS     LR,LR,#+1
   \   0000008C   EBFFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   00000090   F087BDE8           POP      {R4-R10,PC}
    446              } else {
    447                do {
    448                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_2:
   \   00000094   015064E2           RSB      R5,R4,#+1
   \   00000098   0571A0E1           LSL      R7,R5,#+2
    449                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    450                  _SetPixelIndex(pDevice, x++, y, Index);
   \   0000009C   085090E5           LDR      R5,[R0, #+8]
    451                  if (++CurrentPixel == 2) {
   \   000000A0   014084E2           ADD      R4,R4,#+1
   \   000000A4   148095E5           LDR      R8,[R5, #+20]
   \   000000A8   005095E5           LDR      R5,[R5, #+0]
   \   000000AC   981229E0           MLA      R9,R8,R2,R1
   \   000000B0   0780A0E1           MOV      R8,R7
   \   000000B4   048068E2           RSB      R8,R8,#+4
   \   000000B8   56880CE0           AND      R8,R12,R6, ASR R8
   \   000000BC   895085E0           ADD      R5,R5,R9, LSL #+1
   \   000000C0   3877A0E1           LSR      R7,R8,R7
   \   000000C4   B070C5E1           STRH     R7,[R5, #+0]
   \   000000C8   020054E3           CMP      R4,#+2
    452                    CurrentPixel = 0;
   \   000000CC   0040A003           MOVEQ    R4,#+0
    453                    Pixels = *(++p);
   \   000000D0   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   000000D4   011081E2           ADD      R1,R1,#+1
    454                  }
    455          		  } while (--xsize);
   \   000000D8   01E05EE2           SUBS     LR,LR,#+1
   \   000000DC   ECFFFF1A           BNE      ??_DrawBitLine4BPP_2
   \   000000E0   F087BDE8           POP      {R4-R10,PC}
    456              }
    457              break;
    458            case LCD_DRAWMODE_TRANS:
    459              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   000000E4   F060A0E3           MOV      R6,#+240
   \   000000E8   000055E3           CMP      R5,#+0
   \   000000EC   1500000A           BEQ      ??_DrawBitLine4BPP_4
    460                do {
    461                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   000000F0   017064E2           RSB      R7,R4,#+1
   \   000000F4   0771A0E1           LSL      R7,R7,#+2
    462                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   000000F8   0780A0E1           MOV      R8,R7
   \   000000FC   048068E2           RSB      R8,R8,#+4
   \   00000100   56880CE0           AND      R8,R12,R6, ASR R8
   \   00000104   3877B0E1           LSRS     R7,R8,R7
    463                  if (Index) {
   \   00000108   0600000A           BEQ      ??_DrawBitLine4BPP_6
    464                    PixelIndex = *(pTrans + Index);
    465                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   0000010C   088090E5           LDR      R8,[R0, #+8]
   \   00000110   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   00000114   149098E5           LDR      R9,[R8, #+20]
   \   00000118   008098E5           LDR      R8,[R8, #+0]
   \   0000011C   99122AE0           MLA      R10,R9,R2,R1
   \   00000120   8A8088E0           ADD      R8,R8,R10, LSL #+1
   \   00000124   B070C8E1           STRH     R7,[R8, #+0]
    466                  }
    467                  x++;
    468                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_6:
   \   00000128   014084E2           ADD      R4,R4,#+1
   \   0000012C   020054E3           CMP      R4,#+2
    469                    CurrentPixel = 0;
   \   00000130   0040A003           MOVEQ    R4,#+0
    470                    Pixels = *(++p);
   \   00000134   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   00000138   011081E2           ADD      R1,R1,#+1
    471                  }
    472          		  } while (--xsize);
   \   0000013C   01E05EE2           SUBS     LR,LR,#+1
   \   00000140   EAFFFF1A           BNE      ??_DrawBitLine4BPP_5
   \   00000144   F087BDE8           POP      {R4-R10,PC}
    473              } else {
    474                do {
    475                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   00000148   015064E2           RSB      R5,R4,#+1
   \   0000014C   0571A0E1           LSL      R7,R5,#+2
    476                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000150   0750A0E1           MOV      R5,R7
   \   00000154   045065E2           RSB      R5,R5,#+4
   \   00000158   56550CE0           AND      R5,R12,R6, ASR R5
   \   0000015C   3577B0E1           LSRS     R7,R5,R7
    477                  if (Index) {
   \   00000160   0500000A           BEQ      ??_DrawBitLine4BPP_7
    478                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000164   085090E5           LDR      R5,[R0, #+8]
   \   00000168   148095E5           LDR      R8,[R5, #+20]
   \   0000016C   005095E5           LDR      R5,[R5, #+0]
   \   00000170   981229E0           MLA      R9,R8,R2,R1
   \   00000174   895085E0           ADD      R5,R5,R9, LSL #+1
   \   00000178   B070C5E1           STRH     R7,[R5, #+0]
    479                  }
    480                  x++;
    481                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   0000017C   014084E2           ADD      R4,R4,#+1
   \   00000180   020054E3           CMP      R4,#+2
    482                    CurrentPixel = 0;
   \   00000184   0040A003           MOVEQ    R4,#+0
    483                    Pixels = *(++p);
   \   00000188   01C0F305           LDRBEQ   R12,[R3, #+1]!
   \   0000018C   011081E2           ADD      R1,R1,#+1
    484                  }
    485          		  } while (--xsize);
   \   00000190   01E05EE2           SUBS     LR,LR,#+1
   \   00000194   EBFFFF1A           BNE      ??_DrawBitLine4BPP_4
    486              }
    487              break;
    488            }
    489          }
   \   00000198   F087BDE8           POP      {R4-R10,PC}      ;; return
    490          
    491          /*********************************************************************
    492          *
    493          *       Draw Bitmap 8 BPP
    494          */

   \                                 In section .text, align 4, keep-with-next
    495          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0CE09DE5           LDR      LR,[SP, #+12]
   \   00000008   08C09DE5           LDR      R12,[SP, #+8]
    496            DRIVER_CONTEXT * pContext;
    497            LCD_PIXELINDEX Pixel;
    498            register U32 Off;
    499            U16 * pDest;
    500          
    501            if (!pTrans) {
   \   0000000C   00005EE3           CMP      LR,#+0
   \   00000010   4D00000A           BEQ      ??_DrawBitLine8BPP_0
    502              return; // No translation from 8bpp BMP to 16bpp device makes no sense
    503            }
    504            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000014   080090E5           LDR      R0,[R0, #+8]
    505            Off   = XY2OFF16(pContext->vxSizePhys, x,y);
    506            pDest = OFF2PTR16(pContext->VRAMAddr, Off);
   \   00000018   144090E5           LDR      R4,[R0, #+20]
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   941221E0           MLA      R1,R4,R2,R1
   \   00000024   810080E0           ADD      R0,R0,R1, LSL #+1
    507            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000028   ........           LDR      R1,??DataTable15
   \   0000002C   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000030   031011E2           ANDS     R1,R1,#0x3
   \   00000034   0200000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000038   021051E2           SUBS     R1,R1,#+2
   \   0000003C   3700000A           BEQ      ??_DrawBitLine8BPP_2
   \   00000040   1080BDE8           POP      {R4,PC}
    508            case 0:
    509              while (xsize >= 8) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000044   08005CE3           CMP      R12,#+8
   \   00000048   180000AA           BGE      ??_DrawBitLine8BPP_3
   \                     ??_DrawBitLine8BPP_4:
   \   0000004C   04005CE3           CMP      R12,#+4
   \   00000050   0E0000BA           BLT      ??_DrawBitLine8BPP_5
    510                WRITE_MEM16P(pDest + 0, *(pTrans + *(p + 0)));
    511                WRITE_MEM16P(pDest + 1, *(pTrans + *(p + 1)));
    512                WRITE_MEM16P(pDest + 2, *(pTrans + *(p + 2)));
    513                WRITE_MEM16P(pDest + 3, *(pTrans + *(p + 3)));
    514                WRITE_MEM16P(pDest + 4, *(pTrans + *(p + 4)));
    515                WRITE_MEM16P(pDest + 5, *(pTrans + *(p + 5)));
    516                WRITE_MEM16P(pDest + 6, *(pTrans + *(p + 6)));
    517                WRITE_MEM16P(pDest + 7, *(pTrans + *(p + 7)));
    518                xsize -= 8;
    519                p     += 8;
    520                pDest += 8;
    521              }
    522              while (xsize >= 4) {
    523                WRITE_MEM16P(pDest + 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_6:
   \   00000054   0110D3E4           LDRB     R1,[R3], #+1
    524                WRITE_MEM16P(pDest + 1, *(pTrans + *(p + 1)));
    525                WRITE_MEM16P(pDest + 2, *(pTrans + *(p + 2)));
    526                WRITE_MEM16P(pDest + 3, *(pTrans + *(p + 3)));
    527                xsize -= 4;
   \   00000058   04C04CE2           SUB      R12,R12,#+4
    528                p     += 4;
    529                pDest += 4;
   \   0000005C   04005CE3           CMP      R12,#+4
   \   00000060   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000064   B210C0E0           STRH     R1,[R0], #+2
   \   00000068   0110D3E4           LDRB     R1,[R3], #+1
   \   0000006C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000070   B210C0E0           STRH     R1,[R0], #+2
   \   00000074   0110D3E4           LDRB     R1,[R3], #+1
   \   00000078   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   0000007C   B210C0E0           STRH     R1,[R0], #+2
   \   00000080   0110D3E4           LDRB     R1,[R3], #+1
   \   00000084   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000088   B210C0E0           STRH     R1,[R0], #+2
   \   0000008C   F0FFFFAA           BGE      ??_DrawBitLine8BPP_6
    530              }
    531              while (xsize) {
   \                     ??_DrawBitLine8BPP_5:
   \   00000090   00005CE3           CMP      R12,#+0
   \   00000094   2C00000A           BEQ      ??_DrawBitLine8BPP_0
    532                WRITE_MEM16P(pDest + 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_7:
   \   00000098   0110D3E4           LDRB     R1,[R3], #+1
    533                xsize--;
   \   0000009C   01C05CE2           SUBS     R12,R12,#+1
   \   000000A0   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000A4   B210C0E0           STRH     R1,[R0], #+2
    534                p++;
    535                pDest++;
   \   000000A8   FAFFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   000000AC   1080BDE8           POP      {R4,PC}
    536              }
   \                     ??_DrawBitLine8BPP_3:
   \   000000B0   0110D3E4           LDRB     R1,[R3], #+1
   \   000000B4   08C04CE2           SUB      R12,R12,#+8
   \   000000B8   08005CE3           CMP      R12,#+8
   \   000000BC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000C0   B210C0E0           STRH     R1,[R0], #+2
   \   000000C4   0110D3E4           LDRB     R1,[R3], #+1
   \   000000C8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000CC   B210C0E0           STRH     R1,[R0], #+2
   \   000000D0   0110D3E4           LDRB     R1,[R3], #+1
   \   000000D4   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000D8   B210C0E0           STRH     R1,[R0], #+2
   \   000000DC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000E0   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000E4   B210C0E0           STRH     R1,[R0], #+2
   \   000000E8   0110D3E4           LDRB     R1,[R3], #+1
   \   000000EC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000F0   B210C0E0           STRH     R1,[R0], #+2
   \   000000F4   0110D3E4           LDRB     R1,[R3], #+1
   \   000000F8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000FC   B210C0E0           STRH     R1,[R0], #+2
   \   00000100   0110D3E4           LDRB     R1,[R3], #+1
   \   00000104   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000108   B210C0E0           STRH     R1,[R0], #+2
   \   0000010C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000110   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000114   B210C0E0           STRH     R1,[R0], #+2
   \   00000118   E4FFFFAA           BGE      ??_DrawBitLine8BPP_3
   \   0000011C   CAFFFFEA           B        ??_DrawBitLine8BPP_4
    537              break;
    538            case LCD_DRAWMODE_TRANS:
    539              for (; xsize > 0; xsize--, p++, pDest++) {
   \                     ??_DrawBitLine8BPP_2:
   \   00000120   01005CE3           CMP      R12,#+1
   \   00000124   080000BA           BLT      ??_DrawBitLine8BPP_0
    540                Pixel = *p;
    541                if (Pixel) {
   \                     ??_DrawBitLine8BPP_8:
   \   00000128   0010D3E5           LDRB     R1,[R3, #+0]
    542                  WRITE_MEM16P(pDest, *(pTrans + *p));
    543                }
    544              }
   \   0000012C   01C04CE2           SUB      R12,R12,#+1
   \   00000130   013083E2           ADD      R3,R3,#+1
   \   00000134   000051E3           CMP      R1,#+0
   \   00000138   01119E17           LDRNE    R1,[LR, +R1, LSL #+2]
   \   0000013C   B010C011           STRHNE   R1,[R0, #+0]
   \   00000140   020080E2           ADD      R0,R0,#+2
   \   00000144   01005CE3           CMP      R12,#+1
   \   00000148   F6FFFFAA           BGE      ??_DrawBitLine8BPP_8
   \                     ??_DrawBitLine8BPP_0:
   \   0000014C   1080BDE8           POP      {R4,PC}          ;; return
    545              break;
    546            }
    547          }
    548          
    549          /*********************************************************************
    550          *
    551          *       Draw Bitmap 16 BPP
    552          */
    553          static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR *p, int xsize) {
    554            DRIVER_CONTEXT * pContext;
    555            U32 Off;
    556            U16 * pDest;
    557          
    558            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    559            Off = XY2OFF16(pContext->vxSizePhys, x,y);
    560            pDest = OFF2PTR16(pContext->VRAMAddr, Off);
    561            GUI_MEMCPY(pDest, (const void *)p, (U32)xsize << 1);
    562          }
    563          
    564          /*********************************************************************
    565          *
    566          *       _DrawBitmap
    567          */

   \                                 In section .text, align 4, keep-with-next
    568          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    569                                 int xSize, int ySize,
    570                                 int BitsPerPixel, 
    571                                 int BytesPerLine,
    572                                 const U8 GUI_UNI_PTR * pData, int Diff,
    573                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
    574            int i;
    575          
    576            switch (BitsPerPixel) {
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   0F0051E3           CMP      R1,#+15
   \   00000034   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   E500008A           BHI      ??_DrawBitmap_1
   \   0000003C   0E0000EA           B        ??_DrawBitmap_2
   \   00000040   3A0000EA           B        ??_DrawBitmap_3
   \   00000044   E20000EA           B        ??_DrawBitmap_1
   \   00000048   650000EA           B        ??_DrawBitmap_4
   \   0000004C   E00000EA           B        ??_DrawBitmap_1
   \   00000050   DF0000EA           B        ??_DrawBitmap_1
   \   00000054   DE0000EA           B        ??_DrawBitmap_1
   \   00000058   8E0000EA           B        ??_DrawBitmap_5
   \   0000005C   DC0000EA           B        ??_DrawBitmap_1
   \   00000060   DB0000EA           B        ??_DrawBitmap_1
   \   00000064   DA0000EA           B        ??_DrawBitmap_1
   \   00000068   D90000EA           B        ??_DrawBitmap_1
   \   0000006C   D80000EA           B        ??_DrawBitmap_1
   \   00000070   D70000EA           B        ??_DrawBitmap_1
   \   00000074   D60000EA           B        ??_DrawBitmap_1
   \   00000078   AB0000EA           B        ??_DrawBitmap_6
    577            case 1:
    578              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   D30000BA           BLT      ??_DrawBitmap_1
   \   00000084   02B0A0E1           MOV      R11,R2
   \   00000088   10008DE5           STR      R0,[SP, #+16]
   \   0000008C   010010E3           TST      R0,#0x1
   \   00000090   0800000A           BEQ      ??_DrawBitmap_7
    579                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000094   08A08DE5           STR      R10,[SP, #+8]
   \   00000098   04608DE5           STR      R6,[SP, #+4]
   \   0000009C   00908DE5           STR      R9,[SP, #+0]
   \   000000A0   0830A0E1           MOV      R3,R8
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       _DrawBitLine1BPP
    580                pData += BytesPerLine;
   \   000000B0   088087E0           ADD      R8,R7,R8
   \   000000B4   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_7:
   \   000000B8   10109DE5           LDR      R1,[SP, #+16]
   \   000000BC   A110A0E1           LSR      R1,R1,#+1
   \   000000C0   0C108DE5           STR      R1,[SP, #+12]
   \   000000C4   000051E3           CMP      R1,#+0
   \   000000C8   C100000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   000000CC   08A08DE5           STR      R10,[SP, #+8]
   \   000000D0   04608DE5           STR      R6,[SP, #+4]
   \   000000D4   00908DE5           STR      R9,[SP, #+0]
   \   000000D8   0830A0E1           MOV      R3,R8
   \   000000DC   0B20A0E1           MOV      R2,R11
   \   000000E0   0510A0E1           MOV      R1,R5
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       _DrawBitLine1BPP
   \   000000EC   088087E0           ADD      R8,R7,R8
   \   000000F0   08A08DE5           STR      R10,[SP, #+8]
   \   000000F4   04608DE5           STR      R6,[SP, #+4]
   \   000000F8   00908DE5           STR      R9,[SP, #+0]
   \   000000FC   0830A0E1           MOV      R3,R8
   \   00000100   01208BE2           ADD      R2,R11,#+1
   \   00000104   0510A0E1           MOV      R1,R5
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       _DrawBitLine1BPP
    581              }
   \   00000110   0C109DE5           LDR      R1,[SP, #+12]
   \   00000114   088087E0           ADD      R8,R7,R8
   \   00000118   011041E2           SUB      R1,R1,#+1
   \   0000011C   0C108DE5           STR      R1,[SP, #+12]
   \   00000120   02B08BE2           ADD      R11,R11,#+2
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   E7FFFF1A           BNE      ??_DrawBitmap_8
   \   0000012C   A80000EA           B        ??_DrawBitmap_1
    582              break;
    583            case 2:
    584              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   A60000BA           BLT      ??_DrawBitmap_1
   \   00000138   02B0A0E1           MOV      R11,R2
   \   0000013C   10008DE5           STR      R0,[SP, #+16]
   \   00000140   010010E3           TST      R0,#0x1
   \   00000144   0800000A           BEQ      ??_DrawBitmap_9
    585                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000148   08A08DE5           STR      R10,[SP, #+8]
   \   0000014C   04608DE5           STR      R6,[SP, #+4]
   \   00000150   00908DE5           STR      R9,[SP, #+0]
   \   00000154   0830A0E1           MOV      R3,R8
   \   00000158   0510A0E1           MOV      R1,R5
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           BL       _DrawBitLine2BPP
    586                pData += BytesPerLine;
   \   00000164   088087E0           ADD      R8,R7,R8
   \   00000168   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_9:
   \   0000016C   10109DE5           LDR      R1,[SP, #+16]
   \   00000170   A110A0E1           LSR      R1,R1,#+1
   \   00000174   0C108DE5           STR      R1,[SP, #+12]
   \   00000178   000051E3           CMP      R1,#+0
   \   0000017C   9400000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   00000180   08A08DE5           STR      R10,[SP, #+8]
   \   00000184   04608DE5           STR      R6,[SP, #+4]
   \   00000188   00908DE5           STR      R9,[SP, #+0]
   \   0000018C   0830A0E1           MOV      R3,R8
   \   00000190   0B20A0E1           MOV      R2,R11
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           BL       _DrawBitLine2BPP
   \   000001A0   088087E0           ADD      R8,R7,R8
   \   000001A4   08A08DE5           STR      R10,[SP, #+8]
   \   000001A8   04608DE5           STR      R6,[SP, #+4]
   \   000001AC   00908DE5           STR      R9,[SP, #+0]
   \   000001B0   0830A0E1           MOV      R3,R8
   \   000001B4   01208BE2           ADD      R2,R11,#+1
   \   000001B8   0510A0E1           MOV      R1,R5
   \   000001BC   0400A0E1           MOV      R0,R4
   \   000001C0   ........           BL       _DrawBitLine2BPP
    587              }
   \   000001C4   0C109DE5           LDR      R1,[SP, #+12]
   \   000001C8   088087E0           ADD      R8,R7,R8
   \   000001CC   011041E2           SUB      R1,R1,#+1
   \   000001D0   0C108DE5           STR      R1,[SP, #+12]
   \   000001D4   02B08BE2           ADD      R11,R11,#+2
   \   000001D8   000051E3           CMP      R1,#+0
   \   000001DC   E7FFFF1A           BNE      ??_DrawBitmap_10
   \   000001E0   7B0000EA           B        ??_DrawBitmap_1
    588              break;
    589            case 4:
    590              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   000001E4   010050E3           CMP      R0,#+1
   \   000001E8   790000BA           BLT      ??_DrawBitmap_1
   \   000001EC   02B0A0E1           MOV      R11,R2
   \   000001F0   10008DE5           STR      R0,[SP, #+16]
   \   000001F4   010010E3           TST      R0,#0x1
   \   000001F8   0800000A           BEQ      ??_DrawBitmap_11
    591                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000001FC   08A08DE5           STR      R10,[SP, #+8]
   \   00000200   04608DE5           STR      R6,[SP, #+4]
   \   00000204   00908DE5           STR      R9,[SP, #+0]
   \   00000208   0830A0E1           MOV      R3,R8
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   0400A0E1           MOV      R0,R4
   \   00000214   ........           BL       _DrawBitLine4BPP
    592                pData += BytesPerLine;
   \   00000218   088087E0           ADD      R8,R7,R8
   \   0000021C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_11:
   \   00000220   10109DE5           LDR      R1,[SP, #+16]
   \   00000224   A110A0E1           LSR      R1,R1,#+1
   \   00000228   0C108DE5           STR      R1,[SP, #+12]
   \   0000022C   000051E3           CMP      R1,#+0
   \   00000230   6700000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000234   08A08DE5           STR      R10,[SP, #+8]
   \   00000238   04608DE5           STR      R6,[SP, #+4]
   \   0000023C   00908DE5           STR      R9,[SP, #+0]
   \   00000240   0830A0E1           MOV      R3,R8
   \   00000244   0B20A0E1           MOV      R2,R11
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       _DrawBitLine4BPP
   \   00000254   088087E0           ADD      R8,R7,R8
   \   00000258   08A08DE5           STR      R10,[SP, #+8]
   \   0000025C   04608DE5           STR      R6,[SP, #+4]
   \   00000260   00908DE5           STR      R9,[SP, #+0]
   \   00000264   0830A0E1           MOV      R3,R8
   \   00000268   01208BE2           ADD      R2,R11,#+1
   \   0000026C   0510A0E1           MOV      R1,R5
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   ........           BL       _DrawBitLine4BPP
    593              }
   \   00000278   0C109DE5           LDR      R1,[SP, #+12]
   \   0000027C   088087E0           ADD      R8,R7,R8
   \   00000280   011041E2           SUB      R1,R1,#+1
   \   00000284   0C108DE5           STR      R1,[SP, #+12]
   \   00000288   02B08BE2           ADD      R11,R11,#+2
   \   0000028C   000051E3           CMP      R1,#+0
   \   00000290   E7FFFF1A           BNE      ??_DrawBitmap_12
   \   00000294   4E0000EA           B        ??_DrawBitmap_1
    594              break;
    595            case 8:
    596              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_5:
   \   00000298   010050E3           CMP      R0,#+1
   \   0000029C   4C0000BA           BLT      ??_DrawBitmap_1
   \   000002A0   00B0A0E1           MOV      R11,R0
   \   000002A4   0290A0E1           MOV      R9,R2
   \   000002A8   01001BE3           TST      R11,#0x1
   \   000002AC   0700000A           BEQ      ??_DrawBitmap_13
    597                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
   \   000002B0   04A08DE5           STR      R10,[SP, #+4]
   \   000002B4   00608DE5           STR      R6,[SP, #+0]
   \   000002B8   0830A0E1           MOV      R3,R8
   \   000002BC   0510A0E1           MOV      R1,R5
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           BL       _DrawBitLine8BPP
    598                pData += BytesPerLine;
   \   000002C8   088087E0           ADD      R8,R7,R8
   \   000002CC   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_13:
   \   000002D0   ABB0B0E1           LSRS     R11,R11,#+1
   \   000002D4   3E00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   000002D8   04A08DE5           STR      R10,[SP, #+4]
   \   000002DC   00608DE5           STR      R6,[SP, #+0]
   \   000002E0   0830A0E1           MOV      R3,R8
   \   000002E4   0920A0E1           MOV      R2,R9
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0400A0E1           MOV      R0,R4
   \   000002F0   ........           BL       _DrawBitLine8BPP
   \   000002F4   088087E0           ADD      R8,R7,R8
   \   000002F8   04A08DE5           STR      R10,[SP, #+4]
   \   000002FC   00608DE5           STR      R6,[SP, #+0]
   \   00000300   0830A0E1           MOV      R3,R8
   \   00000304   012089E2           ADD      R2,R9,#+1
   \   00000308   0510A0E1           MOV      R1,R5
   \   0000030C   0400A0E1           MOV      R0,R4
   \   00000310   ........           BL       _DrawBitLine8BPP
    599              }
   \   00000314   01B04BE2           SUB      R11,R11,#+1
   \   00000318   088087E0           ADD      R8,R7,R8
   \   0000031C   029089E2           ADD      R9,R9,#+2
   \   00000320   00005BE3           CMP      R11,#+0
   \   00000324   EBFFFF1A           BNE      ??_DrawBitmap_14
   \   00000328   290000EA           B        ??_DrawBitmap_1
    600              break;
    601            case 16:
    602              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_6:
   \   0000032C   010050E3           CMP      R0,#+1
   \   00000330   270000BA           BLT      ??_DrawBitmap_1
   \   00000334   00A0A0E1           MOV      R10,R0
   \   00000338   0290A0E1           MOV      R9,R2
   \   0000033C   86B0A0E1           LSL      R11,R6,#+1
   \   00000340   01001AE3           TST      R10,#0x1
   \   00000344   0900000A           BEQ      ??_DrawBitmap_15
    603                _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
   \   00000348   080094E5           LDR      R0,[R4, #+8]
   \   0000034C   8620A0E1           LSL      R2,R6,#+1
   \   00000350   143090E5           LDR      R3,[R0, #+20]
   \   00000354   000090E5           LDR      R0,[R0, #+0]
   \   00000358   93592CE0           MLA      R12,R3,R9,R5
   \   0000035C   0810A0E1           MOV      R1,R8
   \   00000360   8C0080E0           ADD      R0,R0,R12, LSL #+1
   \   00000364   ........           BL       __aeabi_memcpy
    604                pData += BytesPerLine;
   \   00000368   088087E0           ADD      R8,R7,R8
   \   0000036C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_15:
   \   00000370   AA60B0E1           LSRS     R6,R10,#+1
   \   00000374   1600000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   00000378   080094E5           LDR      R0,[R4, #+8]
   \   0000037C   0B20A0E1           MOV      R2,R11
   \   00000380   143090E5           LDR      R3,[R0, #+20]
   \   00000384   000090E5           LDR      R0,[R0, #+0]
   \   00000388   93592CE0           MLA      R12,R3,R9,R5
   \   0000038C   0810A0E1           MOV      R1,R8
   \   00000390   8C0080E0           ADD      R0,R0,R12, LSL #+1
   \   00000394   ........           BL       __aeabi_memcpy
   \   00000398   080094E5           LDR      R0,[R4, #+8]
   \   0000039C   013089E2           ADD      R3,R9,#+1
   \   000003A0   14C090E5           LDR      R12,[R0, #+20]
   \   000003A4   000090E5           LDR      R0,[R0, #+0]
   \   000003A8   9C5323E0           MLA      R3,R12,R3,R5
   \   000003AC   088087E0           ADD      R8,R7,R8
   \   000003B0   0B20A0E1           MOV      R2,R11
   \   000003B4   0810A0E1           MOV      R1,R8
   \   000003B8   830080E0           ADD      R0,R0,R3, LSL #+1
   \   000003BC   ........           BL       __aeabi_memcpy
    605              }
   \   000003C0   016046E2           SUB      R6,R6,#+1
   \   000003C4   088087E0           ADD      R8,R7,R8
   \   000003C8   029089E2           ADD      R9,R9,#+2
   \   000003CC   000056E3           CMP      R6,#+0
   \   000003D0   E8FFFF1A           BNE      ??_DrawBitmap_16
    606              break;
    607            }
    608          }
   \                     ??_DrawBitmap_1:
   \   000003D4   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000003D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    609          
    610          /*********************************************************************
    611          *
    612          *       _SetOrg
    613          */

   \                                 In section .text, align 4, keep-with-next
    614          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    615            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    616          
    617            #ifdef WIN32
    618              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    619            #else
    620              Data.xPos = x;
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    621              Data.yPos = y;
   \   00000024   04208DE5           STR      R2,[SP, #+4]
    622              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   0310A0E3           MOV      R1,#+3
   \   00000030   180090E5           LDR      R0,[R0, #+24]
   \   00000034   ........           BL       LCD_X_DisplayDriver
    623            #endif
    624          }
   \   00000038   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    625          
    626          /*********************************************************************
    627          *
    628          *       _InitOnce
    629          *
    630          * Purpose:
    631          *   Allocates a fixed block for the context of the driver
    632          *
    633          * Return value:
    634          *   0 on success, 1 on error
    635          */
    636          static int _InitOnce(GUI_DEVICE * pDevice) {
    637            if (pDevice->u.pContext == NULL) {
    638              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    639              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    640            }
    641            return pDevice->u.pContext ? 0 : 1;
    642          }
    643          
    644          /*********************************************************************
    645          *
    646          *       _GetRect
    647          */

   \                                 In section .text, align 4, keep-with-next
    648          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    649            DRIVER_CONTEXT * pContext;
    650          
    651            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    652            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    653            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    654            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    655            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    656          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    657          
    658          /*********************************************************************
    659          *
    660          *       _GetDevProp
    661          */

   \                                 In section .text, align 4, keep-with-next
    662          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    663            DRIVER_CONTEXT * pContext;
    664          
    665            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    666            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0B0000EA           B        ??_GetDevProp_7
   \   00000044   0A0000EA           B        ??_GetDevProp_7
   \   00000048   090000EA           B        ??_GetDevProp_7
    667            case LCD_DEVCAP_XSIZE:
    668              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    669            case LCD_DEVCAP_YSIZE:
    670              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    671            case LCD_DEVCAP_VXSIZE:
    672              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    673            case LCD_DEVCAP_VYSIZE:
    674              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    675            case LCD_DEVCAP_BITSPERPIXEL:
    676              return 16;
   \                     ??_GetDevProp_6:
   \   0000006C   1000A0E3           MOV      R0,#+16
   \   00000070   1EFF2FE1           BX       LR
    677            case LCD_DEVCAP_NUMCOLORS:
    678              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    679            case LCD_DEVCAP_XMAG:
    680              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    681            case LCD_DEVCAP_YMAG:
    682              return 1;
    683            case LCD_DEVCAP_MIRROR_X:
    684              return 0;
    685            case LCD_DEVCAP_MIRROR_Y:
    686              return 0;
    687            case LCD_DEVCAP_SWAP_XY:
    688              return 0;
    689            }
    690            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    691          }
    692          
    693          /*********************************************************************
    694          *
    695          *       _GetDevData
    696          */

   \                                 In section .text, align 4, keep-with-next
    697          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    698            GUI_USE_PARA(pDevice);
    699            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    700            #if GUI_SUPPORT_MEMDEV
    701              case LCD_DEVDATA_MEMDEV:
    702                return (void *)&GUI_MEMDEV_DEVICE_16;
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   1EFF2FE1           BX       LR
    703            #endif
    704            }
    705            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    706          }
    707          
    708          /*********************************************************************
    709          *
    710          *       Static code: Functions available by _GetDevFunc()
    711          *
    712          **********************************************************************
    713          */
    714          /*********************************************************************
    715          *
    716          *       _ReadRect
    717          */

   \                                 In section .text, align 4, keep-with-next
    718          static void _ReadRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer) {
   \                     _ReadRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10C09DE5           LDR      R12,[SP, #+16]
   \   00000008   14E09DE5           LDR      LR,[SP, #+20]
    719            DRIVER_CONTEXT * pContext;
    720            U32 Off;
    721            int x, NumPixelsPerLine;
    722            U16 * p;
    723          
    724            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   0000000C   080090E5           LDR      R0,[R0, #+8]
    725            p = (U16 *)pBuffer;
    726            x = x0;
   \   00000010   0140A0E1           MOV      R4,R1
    727            do {
    728              Off = XY2OFF16(pContext->vxSizePhys, x0, y0);
    729              NumPixelsPerLine = x1 - x0 + 1;
   \                     ??_ReadRect_0:
   \   00000014   146090E5           LDR      R6,[R0, #+20]
   \   00000018   015043E0           SUB      R5,R3,R1
   \   0000001C   961221E0           MLA      R1,R6,R2,R1
   \   00000020   015085E2           ADD      R5,R5,#+1
   \   00000024   8110A0E1           LSL      R1,R1,#+1
    730              do {
    731                *p++ = READ_MEM16(pContext->VRAMAddr, Off);
   \                     ??_ReadRect_1:
   \   00000028   006090E5           LDR      R6,[R0, #+0]
    732                Off++;
    733              } while (--NumPixelsPerLine);
   \   0000002C   015045E2           SUB      R5,R5,#+1
   \   00000030   B66091E1           LDRH     R6,[R1, +R6]
   \   00000034   021081E2           ADD      R1,R1,#+2
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   B260CEE0           STRH     R6,[LR], #+2
   \   00000040   F8FFFF1A           BNE      ??_ReadRect_1
    734              x0 = x;
    735            } while (y0++ < y1);
   \   00000044   0250A0E1           MOV      R5,R2
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   012085E2           ADD      R2,R5,#+1
   \   00000050   0C0055E1           CMP      R5,R12
   \   00000054   EEFFFFBA           BLT      ??_ReadRect_0
    736          }
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
    737          
    738          /*********************************************************************
    739          *
    740          *       _SetVRAMAddr
    741          */

   \                                 In section .text, align 4, keep-with-next
    742          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    743            DRIVER_CONTEXT * pContext;
    744            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    745          
    746            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    747            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    748              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    749              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    750              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    751              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    752            }
    753            #ifdef WIN32
    754              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    755            #endif
    756          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    757          
    758          /*********************************************************************
    759          *
    760          *       _SetVSize
    761          */

   \                                 In section .text, align 4, keep-with-next
    762          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    763            DRIVER_CONTEXT * pContext;
    764          
    765            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    766            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    767              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    768              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    769              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    770              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
    771            }
    772            #ifdef WIN32
    773              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    774            #endif
    775          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    776          
    777          /*********************************************************************
    778          *
    779          *       _SetSize
    780          */

   \                                 In section .text, align 4, keep-with-next
    781          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    782            DRIVER_CONTEXT * pContext;
    783            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    784          
    785            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    786            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    787              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    788              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    789                pContext->vxSizePhys = xSize;
    790              }
    791              pContext->xSize = xSize;
    792              pContext->ySize = ySize;
    793              Data.xSize = xSize;
    794              Data.ySize = ySize;
    795              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    796            }
    797          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    798          
    799          /*********************************************************************
    800          *
    801          *       _SetPos
    802          */

   \                                 In section .text, align 4, keep-with-next
    803          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    804            DRIVER_CONTEXT * pContext;
    805            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    806          
    807            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    808            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    809              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    810              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    811              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    812              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    813              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    814              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    815            }
    816          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    817          
    818          /*********************************************************************
    819          *
    820          *       _GetPos
    821          */

   \                                 In section .text, align 4, keep-with-next
    822          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    823            DRIVER_CONTEXT * pContext;
    824          
    825            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    826            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    827              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    828              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    829              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    830            }
    831          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    832          
    833          /*********************************************************************
    834          *
    835          *       _SetAlpha
    836          */

   \                                 In section .text, align 4, keep-with-next
    837          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    838            DRIVER_CONTEXT * pContext;
    839            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    840          
    841            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    842            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    843              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    844              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    845              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    846              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    847            }
    848          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    849          
    850          /*********************************************************************
    851          *
    852          *       _SetVis
    853          */

   \                                 In section .text, align 4, keep-with-next
    854          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    855            DRIVER_CONTEXT * pContext;
    856            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    857          
    858            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    859            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    860              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    861              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    862              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    863              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    864            }
    865          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    866          
    867          /*********************************************************************
    868          *
    869          *       _Init
    870          */

   \                                 In section .text, align 4, keep-with-next
    871          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    872            int r;
    873          
    874            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    875            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    876            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    877          }
    878          
    879          /*********************************************************************
    880          *
    881          *       _On
    882          */

   \                                 In section .text, align 4, keep-with-next
    883          static void _On (GUI_DEVICE * pDevice) {
    884            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    885          }
    886          
    887          /*********************************************************************
    888          *
    889          *       _Off
    890          */

   \                                 In section .text, align 4, keep-with-next
    891          static void _Off (GUI_DEVICE * pDevice) {
    892            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    893          }
    894          
    895          /*********************************************************************
    896          *
    897          *       _SetLUTEntry
    898          */

   \                                 In section .text, align 4, keep-with-next
    899          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    900            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    901          
    902            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
    903            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    904            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    905          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    906          
    907          /*********************************************************************
    908          *
    909          *       _SetAlphaMode
    910          */

   \                                 In section .text, align 4, keep-with-next
    911          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    912            LCD_X_SETALPHAMODE_INFO Data = {0};
    913          
    914            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    915            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    916          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    917          
    918          /*********************************************************************
    919          *
    920          *       _SetChromaMode
    921          */

   \                                 In section .text, align 4, keep-with-next
    922          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    923            LCD_X_SETCHROMAMODE_INFO Data = {0};
    924          
    925            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    926            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    927          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    928          
    929          /*********************************************************************
    930          *
    931          *       _SetChroma
    932          */

   \                                 In section .text, align 4, keep-with-next
    933          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    934            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    935          
    936            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    937            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
    938            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    939          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    940          
    941          /*********************************************************************
    942          *
    943          *       _SetFunc
    944          */

   \                                 In section .text, align 4, keep-with-next
    945          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    946            DRIVER_CONTEXT * pContext;
    947          
    948            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    949            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
    950              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    951              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
    952              case LCD_DEVFUNC_FILLRECT:
    953                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
    954                break;
    955              }
    956            }
    957          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    958          
    959          /*********************************************************************
    960          *
    961          *       _GetDevFunc
    962          */

   \                                 In section .text, align 4, keep-with-next
    963          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
    964            GUI_USE_PARA(ppDevice);
    965            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   150051E3           CMP      R1,#+21
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3500008A           BHI      ??_GetDevFunc_1
   \   00000010   140000EA           B        ??_GetDevFunc_2
   \   00000014   1F0000EA           B        ??_GetDevFunc_3
   \   00000018   1A0000EA           B        ??_GetDevFunc_4
   \   0000001C   1B0000EA           B        ??_GetDevFunc_5
   \   00000020   300000EA           B        ??_GetDevFunc_1
   \   00000024   1D0000EA           B        ??_GetDevFunc_6
   \   00000028   2E0000EA           B        ??_GetDevFunc_1
   \   0000002C   2D0000EA           B        ??_GetDevFunc_1
   \   00000030   0E0000EA           B        ??_GetDevFunc_7
   \   00000034   0F0000EA           B        ??_GetDevFunc_8
   \   00000038   100000EA           B        ??_GetDevFunc_9
   \   0000003C   190000EA           B        ??_GetDevFunc_10
   \   00000040   280000EA           B        ??_GetDevFunc_1
   \   00000044   190000EA           B        ??_GetDevFunc_11
   \   00000048   1A0000EA           B        ??_GetDevFunc_12
   \   0000004C   1B0000EA           B        ??_GetDevFunc_13
   \   00000050   240000EA           B        ??_GetDevFunc_1
   \   00000054   230000EA           B        ??_GetDevFunc_1
   \   00000058   1A0000EA           B        ??_GetDevFunc_14
   \   0000005C   1B0000EA           B        ??_GetDevFunc_15
   \   00000060   1C0000EA           B        ??_GetDevFunc_16
   \   00000064   1D0000EA           B        ??_GetDevFunc_17
    966            case LCD_DEVFUNC_READRECT:
    967              return (void (*)(void))_ReadRect;
   \                     ??_GetDevFunc_2:
   \   00000068   ........           LDR      R0,??DataTable16_1
   \   0000006C   1EFF2FE1           BX       LR
    968            case LCD_DEVFUNC_SET_VRAM_ADDR:
    969              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_7:
   \   00000070   ........           LDR      R0,??DataTable16_2
   \   00000074   1EFF2FE1           BX       LR
    970            case LCD_DEVFUNC_SET_VSIZE:
    971              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_8:
   \   00000078   ........           LDR      R0,??DataTable16_3
   \   0000007C   1EFF2FE1           BX       LR
    972            case LCD_DEVFUNC_SET_SIZE:
    973              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_9:
   \   00000080   ........           LDR      R0,??DataTable16_4
   \   00000084   1EFF2FE1           BX       LR
    974            case LCD_DEVFUNC_SETPOS:
    975              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_4:
   \   00000088   ........           LDR      R0,??DataTable16_5
   \   0000008C   1EFF2FE1           BX       LR
    976            case LCD_DEVFUNC_GETPOS:
    977              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_5:
   \   00000090   ........           LDR      R0,??DataTable16_6
   \   00000094   1EFF2FE1           BX       LR
    978            case LCD_DEVFUNC_SETALPHA:
    979              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_3:
   \   00000098   ........           LDR      R0,??DataTable16_7
   \   0000009C   1EFF2FE1           BX       LR
    980            case LCD_DEVFUNC_SETVIS:
    981              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_6:
   \   000000A0   ........           LDR      R0,??DataTable16_8
   \   000000A4   1EFF2FE1           BX       LR
    982            case LCD_DEVFUNC_INIT:
    983              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_10:
   \   000000A8   ........           LDR      R0,??DataTable16_9
   \   000000AC   1EFF2FE1           BX       LR
    984            case LCD_DEVFUNC_ON:
    985              return (void (*)(void))_On;
   \                     ??_GetDevFunc_11:
   \   000000B0   ........           LDR      R0,??DataTable16_10
   \   000000B4   1EFF2FE1           BX       LR
    986            case LCD_DEVFUNC_OFF:
    987              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_12:
   \   000000B8   ........           LDR      R0,??DataTable16_11
   \   000000BC   1EFF2FE1           BX       LR
    988            case LCD_DEVFUNC_SETLUTENTRY:
    989              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_13:
   \   000000C0   ........           LDR      R0,??DataTable16_12
   \   000000C4   1EFF2FE1           BX       LR
    990          
    991            case LCD_DEVFUNC_ALPHAMODE:
    992              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_14:
   \   000000C8   ........           LDR      R0,??DataTable16_13
   \   000000CC   1EFF2FE1           BX       LR
    993            case LCD_DEVFUNC_CHROMAMODE:
    994              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_15:
   \   000000D0   ........           LDR      R0,??DataTable16_14
   \   000000D4   1EFF2FE1           BX       LR
    995            case LCD_DEVFUNC_CHROMA:
    996              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_16:
   \   000000D8   ........           LDR      R0,??DataTable16_15
   \   000000DC   1EFF2FE1           BX       LR
    997            
    998            case LCD_DEVFUNC_SETFUNC:
    999              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_17:
   \   000000E0   ........           LDR      R0,??DataTable16_16
   \   000000E4   1EFF2FE1           BX       LR
   1000            }
   1001            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   1EFF2FE1           BX       LR               ;; return
   1002          }
   1003          
   1004          /*********************************************************************
   1005          *
   1006          *       Public data
   1007          *
   1008          **********************************************************************
   1009          */
   1010          /*********************************************************************
   1011          *
   1012          *       GUI_DEVICE_API structure
   1013          */

   \                                 In section .rodata, align 4, keep-with-next
   1014          const GUI_DEVICE_API GUIDRV_Lin_16_API = {
   \                     GUIDRV_Lin_16_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _ReadRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1015            //
   1016            // Data
   1017            //
   1018            DEVICE_CLASS_DRIVER,
   1019            //
   1020            // Drawing functions
   1021            //
   1022            _DrawBitmap,
   1023            _DrawHLine,
   1024            _DrawVLine,
   1025            _FillRect,
   1026            _GetPixelIndex,
   1027            _SetPixelIndex,
   1028            _XorPixel,
   1029            //
   1030            // Set origin
   1031            //
   1032            _SetOrg,
   1033            //
   1034            // Request information
   1035            //
   1036            _GetDevFunc,
   1037            _GetDevProp,
   1038            _GetDevData,
   1039            _GetRect,
   1040          };
   1041          
   1042          #else
   1043          
   1044          void GUIDRV_Lin_16_C(void);   // Avoid empty object files
   1045          void GUIDRV_Lin_16_C(void) {}
   1046          
   1047          #endif
   1048          
   1049          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitLine1BPP     32
     _DrawBitLine2BPP     32
     _DrawBitLine4BPP     32
     _DrawBitLine8BPP      8
     _DrawBitmap          56
     _DrawHLine           24
     _DrawVLine           24
     _FillRect            24
     _GetDevData           0
     _GetDevFunc           0
     _GetDevProp           0
     _GetPixelIndex        0
     _GetPos              16
     _GetRect              0
     _Init                16
     _Off                  8
     _On                   8
     _ReadRect            16
     _SetAlpha            16
     _SetAlphaMode         8
     _SetChroma           24
     _SetChromaMode        8
     _SetFunc             16
     _SetLUTEntry         24
     _SetOrg              24
     _SetPixelIndex        0
     _SetPos              24
     _SetSize             24
     _SetVRAMAddr         16
     _SetVSize            16
     _SetVis              16
     _XorPixel            24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            28
     _GetPixelIndex            28
     _XorPixel                 92
     _DrawHLine               324
     _DrawVLine               184
     _FillRect                 68
     _DrawBitLine1BPP         304
     _DrawBitLine2BPP         412
     _DrawBitLine4BPP         412
     _DrawBitLine8BPP         336
     _DrawBitmap              988
     _SetOrg                   64
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _ReadRect                 92
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              240
     GUIDRV_Lin_16_API         52
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable15_2            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ??DataTable16_16           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 5 068 bytes in section .text
 
 5 068 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
