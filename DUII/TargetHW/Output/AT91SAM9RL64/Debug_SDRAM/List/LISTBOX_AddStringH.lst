###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_AddStringH.c                #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_AddStringH.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_AddStringH.lst                                     #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_AddStringH.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_AddStringH.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_AddStringH.c
     19          Purpose     : Implementation of listbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "LISTBOX_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Public routines
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       LISTBOX_AddStringH
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          void LISTBOX_AddStringH(LISTBOX_Handle hObj, WM_HMEM hString) {
   \                     LISTBOX_AddStringH:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     40            LISTBOX_Obj * pObj;
     41            LISTBOX_ITEM Item = {0};
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   0E00A0E8           STM      R0!,{R1-R3}
     42            LISTBOX_ITEM * pItem;
     43            const char * s;
     44            unsigned ItemIndex;
     45            int Len;
     46            GUI_ARRAY ItemArray;
     47          
     48            if (hObj && hString) {
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   00005513           CMPNE    R5,#+0
   \   0000002C   2E00000A           BEQ      ??LISTBOX_AddStringH_0
     49              WM_LOCK();
   \   00000030   ........           BL       GUI_Lock
     50              s = (const char *)GUI_LOCK_H(hString);
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       GUI_ALLOC_LockH
     51              Len = strlen(s);
   \   0000003C   ........           BL       strlen
   \   00000040   0060A0E1           MOV      R6,R0
     52              GUI_UNLOCK_H(s);
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
     53              pObj = LISTBOX_LOCK_H(hObj);
     54              ItemArray = pObj->ItemArray;
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_ALLOC_LockH
   \   00000050   347090E5           LDR      R7,[R0, #+52]
     55              GUI_UNLOCK_H(pObj);
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
     56              if (GUI_ARRAY_AddItem(ItemArray, &Item, sizeof(LISTBOX_ITEM) + Len) == 0) {
   \   00000058   0C2086E2           ADD      R2,R6,#+12
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           BL       GUI_ARRAY_AddItem
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1D00001A           BNE      ??LISTBOX_AddStringH_1
     57                ItemIndex = GUI_ARRAY_GetNumItems(ItemArray) - 1;
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   ........           BL       GUI_ARRAY_GetNumItems
   \   00000078   016040E2           SUB      R6,R0,#+1
     58                pItem = (LISTBOX_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, ItemIndex);
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000088   0070A0E1           MOV      R7,R0
     59                s = (const char *)GUI_LOCK_H(hString);
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   0010A0E1           MOV      R1,R0
     60                pItem->ItemPosY = -1;
   \   00000098   0000E0E3           MVN      R0,#+0
   \   0000009C   040087E5           STR      R0,[R7, #+4]
     61                strcpy(pItem->acText, s);
   \   000000A0   090087E2           ADD      R0,R7,#+9
   \   000000A4   ........           BL       strcpy
     62                GUI_UNLOCK_H(pItem);
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
     63                GUI_UNLOCK_H(s);
   \   000000AC   ........           BL       GUI_ALLOC_UnlockH
     64                pObj = LISTBOX_LOCK_H(hObj);
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   0050A0E1           MOV      R5,R0
     65                LISTBOX__InvalidateItemSize(pObj, ItemIndex);
   \   000000BC   0610A0E1           MOV      R1,R6
   \   000000C0   ........           BL       LISTBOX__InvalidateItemSize
     66                LISTBOX__AddSize(pObj, ItemIndex);
   \   000000C4   0610A0E1           MOV      R1,R6
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           BL       LISTBOX__AddSize
     67                GUI_UNLOCK_H(pObj);
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
     68                LISTBOX_UpdateScrollers(hObj);
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       LISTBOX_UpdateScrollers
     69                LISTBOX__InvalidateItem(hObj, ItemIndex);
   \   000000DC   0610A0E1           MOV      R1,R6
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       LISTBOX__InvalidateItem
     70              }
     71              WM_UNLOCK();
   \                     ??LISTBOX_AddStringH_1:
   \   000000E8   ........           BL       GUI_Unlock
     72            }
     73          }
   \                     ??LISTBOX_AddStringH_0:
   \   000000EC   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
     74          
     75          #else                            /* Avoid problems with empty object modules */
     76            void LISTBOX_AddStringH_C(void);
     77            void LISTBOX_AddStringH_C(void) {}
     78          #endif
     79          
     80          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     LISTBOX_AddStringH     32


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     LISTBOX_AddStringH  244
     ?<Constant {0}>      12

 
  12 bytes in section .rodata
 244 bytes in section .text
 
 244 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
