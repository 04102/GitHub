###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:00:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_AddDecShift.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_AddDecShift.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\GU #
#                    I_AddDecShift.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\GUI #
#                    _AddDecShift.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_AddDecShift.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_AddDecShift.c
     19          Purpose     : Routines to display values as dec
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public data
     28          *
     29          **********************************************************************
     30          */
     31          

   \                                 In section .text, align 4, keep-with-next
     32          const U32 GUI_Pow10[10] = {
   \                     GUI_Pow10:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   010000000A00       DC32 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
   \              000064000000
   \              E80300001027
   \              0000A0860100
   \              40420F008096
   \              980000E1F505
   \              00CA9A3B    
     33            1 , 10, 100, 1000, 10000,
     34            100000, 1000000, 10000000, 100000000, 1000000000
     35          };
     36          
     37          /*********************************************************************
     38          *
     39          *       Static routines
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       _Check_NegLong
     46          *
     47          * Purpose:
     48          *   Checks if a long value is negative or not. In case of a negative value
     49          *   it writes a '-' into the given character buffer, increments the buffer
     50          *   pointer and makes the value positive.
     51          *
     52          * Attention:
     53          *   The function does not work with -2147483648 (0x80000000), because the
     54          *   sign of this value can't be changed!
     55          *
     56          * Parameter:
     57          *   pv - Pointer to value
     58          *   ps - Address of buffer pointer
     59          *
     60          * Return value:
     61          *   1 if negatige, 
     62          */
     63          static int _Check_NegLong(I32 *pv, char**ps) {
     64            if (*pv < 0) {
     65              *(*ps)++ = '-';
     66              *pv = -*pv;
     67              return 1;
     68            }
     69            return 0;
     70          }
     71          
     72          /*********************************************************************
     73          *
     74          *       Module internal routines
     75          *
     76          **********************************************************************
     77          */
     78          /*********************************************************************
     79          *
     80          *       GUI_Long2Len
     81          */

   \                                 In section .text, align 4, keep-with-next
     82          int GUI_Long2Len(I32 vSign) {
     83            int Len = 1;
   \                     GUI_Long2Len:
   \   00000000   0110A0E3           MOV      R1,#+1
     84            I32 v = (vSign > 0) ? vSign : -vSign;
   \   00000004   0020B0E1           MOVS     R2,R0
   \   00000008   0200005A           BPL      ??GUI_Long2Len_0
   \   0000000C   002062E2           RSB      R2,R2,#+0
   \   00000010   000000EA           B        ??GUI_Long2Len_0
     85            while ((((U32)v) >= GUI_Pow10[Len]) && (Len < 10)) {
     86              Len++;
   \                     ??GUI_Long2Len_1:
   \   00000014   011081E2           ADD      R1,R1,#+1
     87            }
   \                     ??GUI_Long2Len_0:
   \   00000018   ........           ADR      R3,GUI_Pow10
   \   0000001C   013193E7           LDR      R3,[R3, +R1, LSL #+2]
   \   00000020   030052E1           CMP      R2,R3
   \   00000024   0100003A           BCC      ??GUI_Long2Len_2
   \   00000028   0A0051E3           CMP      R1,#+10
   \   0000002C   F8FFFFBA           BLT      ??GUI_Long2Len_1
     88            if (vSign < 0) {
   \                     ??GUI_Long2Len_2:
   \   00000030   000050E3           CMP      R0,#+0
     89          		Len++;
   \   00000034   01108142           ADDMI    R1,R1,#+1
     90            }
     91            return Len;
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       GUI_AddSign
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          long GUI_AddSign(long v, char**ps) {
     99            if (v > 0) {
   \                     GUI_AddSign:
   \   00000000   010050E3           CMP      R0,#+1
   \   00000004   050000BA           BLT      ??GUI_AddSign_0
    100              *(*ps)++ = '+';
   \   00000008   003091E5           LDR      R3,[R1, #+0]
   \   0000000C   2B20A0E3           MOV      R2,#+43
   \   00000010   0120C3E4           STRB     R2,[R3], #+1
   \   00000014   003081E5           STR      R3,[R1, #+0]
    101              **ps     = '\0';
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0020C3E5           STRB     R2,[R3, #+0]
    102            }
    103            return v;
   \                     ??GUI_AddSign_0:
   \   00000020   1EFF2FE1           BX       LR               ;; return
    104          }
    105          
    106          /*********************************************************************
    107          *
    108          *       Public routines
    109          *
    110          **********************************************************************
    111          */
    112          /*********************************************************************
    113          *
    114          *       GUI_AddDecShift
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          void GUI_AddDecShift(I32 v, U8 Len, U8 Shift, char**ps) {
   \                     GUI_AddDecShift:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0070A0E1           MOV      R7,R0
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
    117            char c;
    118            long d;
    119            U8 Overflow;
    120            /* I32 range is 0x7fffffff (2147483647) to 0x80000000 (-2147483648).
    121             * In case of 0x80000000 the function _Check_NegLong() can't work correctly,
    122             * because the sign of -2147483648 can't be changed!
    123             */
    124            if (v == (I32)0x80000000) {
   \   00000010   800457E3           CMP      R7,#-2147483648
   \   00000014   0700001A           BNE      ??GUI_AddDecShift_0
    125              Overflow = 1;
    126              v += 1;
    127              v *= -1;
    128              *(*ps)++ = '-';
   \   00000018   002095E5           LDR      R2,[R5, #+0]
   \   0000001C   2D00A0E3           MOV      R0,#+45
   \   00000020   0100C2E4           STRB     R0,[R2], #+1
   \   00000024   0160A0E3           MOV      R6,#+1
   \   00000028   8074E0E3           MVN      R7,#-2147483648
   \   0000002C   002085E5           STR      R2,[R5, #+0]
    129              Len--;
   \   00000030   018041E2           SUB      R8,R1,#+1
   \   00000034   0A0000EA           B        ??GUI_AddDecShift_1
    130            } else {
    131              Overflow = 0;
    132              Len -= _Check_NegLong(&v, ps);
   \                     ??GUI_AddDecShift_0:
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0060A0E3           MOV      R6,#+0
   \   00000040   0000A053           MOVPL    R0,#+0
   \   00000044   0500005A           BPL      ??GUI_AddDecShift_2
   \   00000048   002095E5           LDR      R2,[R5, #+0]
   \   0000004C   2D00A0E3           MOV      R0,#+45
   \   00000050   0100C2E4           STRB     R0,[R2], #+1
   \   00000054   002085E5           STR      R2,[R5, #+0]
   \   00000058   007067E2           RSB      R7,R7,#+0
   \   0000005C   0100A0E3           MOV      R0,#+1
    133            }
   \                     ??GUI_AddDecShift_2:
   \   00000060   008041E0           SUB      R8,R1,R0
    134            if (Shift) {
   \                     ??GUI_AddDecShift_1:
   \   00000064   000054E3           CMP      R4,#+0
   \   00000068   0C00000A           BEQ      ??GUI_AddDecShift_3
    135              Len--;
   \   0000006C   018048E2           SUB      R8,R8,#+1
   \   00000070   0A0000EA           B        ??GUI_AddDecShift_3
    136            }
    137          #if GUI_DEBUG_LEVEL > 1
    138            if (Len > 10) {
    139              Len = 10;
    140              GUI_DEBUG_ERROROUT("Can not display more than 10 dec. digits");
    141            }
    142          #endif
    143            while (Len) {
    144              if (Len-- == Shift) {
    145                *(*ps)++ = GUI_DecChar;
    146              }
    147              d = GUI_Pow10[Len];
    148              c = (char) (v / d);
    149              if (c > 9) {
    150                break; /* In case of a too small number of digits stop calculation */
    151              }
    152              v -= c * d;
   \                     ??GUI_AddDecShift_4:
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   990101E0           MUL      R1,R9,R1
    153              if (!Len) {
   \   0000007C   FF8018E2           ANDS     R8,R8,#0xFF
   \   00000080   017047E0           SUB      R7,R7,R1
   \   00000084   0100001A           BNE      ??GUI_AddDecShift_5
    154                if (Overflow) {
   \   00000088   000056E3           CMP      R6,#+0
    155                  c++;
   \   0000008C   01008012           ADDNE    R0,R0,#+1
    156                }
    157              }
    158              *(*ps)++ = c + '0';
   \                     ??GUI_AddDecShift_5:
   \   00000090   001095E5           LDR      R1,[R5, #+0]
   \   00000094   300080E2           ADD      R0,R0,#+48
   \   00000098   0100C1E4           STRB     R0,[R1], #+1
   \   0000009C   001085E5           STR      R1,[R5, #+0]
   \                     ??GUI_AddDecShift_3:
   \   000000A0   FF8018E2           ANDS     R8,R8,#0xFF
   \   000000A4   1100000A           BEQ      ??GUI_AddDecShift_6
   \   000000A8   0800A0E1           MOV      R0,R8
   \   000000AC   018040E2           SUB      R8,R0,#+1
   \   000000B0   040050E1           CMP      R0,R4
   \   000000B4   0400001A           BNE      ??GUI_AddDecShift_7
   \   000000B8   ........           LDR      R0,??DataTable1
   \   000000BC   001095E5           LDR      R1,[R5, #+0]
   \   000000C0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000C4   0100C1E4           STRB     R0,[R1], #+1
   \   000000C8   001085E5           STR      R1,[R5, #+0]
   \                     ??GUI_AddDecShift_7:
   \   000000CC   ........           ADR      R1,GUI_Pow10
   \   000000D0   FF0008E2           AND      R0,R8,#0xFF
   \   000000D4   009191E7           LDR      R9,[R1, +R0, LSL #+2]
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   0910A0E1           MOV      R1,R9
   \   000000E0   ........           BL       __aeabi_idiv
   \   000000E4   FF0000E2           AND      R0,R0,#0xFF
   \   000000E8   0A0050E3           CMP      R0,#+10
   \   000000EC   E0FFFF3A           BCC      ??GUI_AddDecShift_4
    159            }
    160            **ps = 0;
   \                     ??GUI_AddDecShift_6:
   \   000000F0   000095E5           LDR      R0,[R5, #+0]
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   0010C0E5           STRB     R1,[R0, #+0]
    161          }
   \   000000FC   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_DecChar
    162          
    163          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     GUI_AddDecShift     28
     GUI_AddSign          0
     GUI_Long2Len         0


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     GUI_Pow10         40
     GUI_Long2Len      64
     GUI_AddSign       36
     GUI_AddDecShift  256
     ??DataTable1       4

 
 400 bytes in section .text
 
 400 bytes of CODE memory

Errors: none
Warnings: none
