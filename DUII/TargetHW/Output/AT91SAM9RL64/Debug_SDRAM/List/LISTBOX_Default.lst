###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     14/Jul/2015  19:01:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_Default.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_Default.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D                   #
#                    XIGNORE_TEMPERATURE -D BUILD_DEBUG_PORT -D PROFILER      #
#                    -lCN C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Li #
#                    st\ -o C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\ #
#                    Obj\ --debug --endian=little --cpu=ARM926EJ-S -e         #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\DUII\TargetHW\Application\SEGGERDEMO\ -I      #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ -I PROFILER\         #
#                    --cpu_mode arm -Ohs --use_c++_inline                     #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\List\LI #
#                    STBOX_Default.lst                                        #
#    Object file  =  C:\DUII\TargetHW\Output\AT91SAM9RL64\Debug_SDRAM\Obj\LIS #
#                    TBOX_Default.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_Default.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_Default.c
     19          Purpose     : Implementation of listbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LISTBOX_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Exported routines:  Various methods
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       LISTBOX_SetDefaultFont
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void LISTBOX_SetDefaultFont(const GUI_FONT GUI_UNI_PTR * pFont) {
     38            LISTBOX_DefaultProps.pFont = pFont;
   \                     LISTBOX_SetDefaultFont:
   \   00000000   ........           LDR      R1,??DataTable9
   \   00000004   000081E5           STR      R0,[R1, #+0]
     39          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     40          
     41          /*********************************************************************
     42          *
     43          *       LISTBOX_GetDefaultFont
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          const GUI_FONT GUI_UNI_PTR * LISTBOX_GetDefaultFont(void) {
     46            return LISTBOX_DefaultProps.pFont;
   \                     LISTBOX_GetDefaultFont:
   \   00000000   ........           LDR      R0,??DataTable9
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     47          }
     48          
     49          /*********************************************************************
     50          *
     51          *       LISTBOX_SetDefaultScrollStepH
     52          */

   \                                 In section .text, align 4, keep-with-next
     53          void LISTBOX_SetDefaultScrollStepH(int Value) {
     54            LISTBOX_DefaultProps.ScrollStepH = Value;
   \                     LISTBOX_SetDefaultScrollStepH:
   \   00000000   ........           LDR      R1,??DataTable9
   \   00000004   B400C1E1           STRH     R0,[R1, #+4]
     55          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     56          
     57          /*********************************************************************
     58          *
     59          *       LISTBOX_GetDefaultScrollStepH
     60          */

   \                                 In section .text, align 4, keep-with-next
     61          int LISTBOX_GetDefaultScrollStepH(void) {
     62            return LISTBOX_DefaultProps.ScrollStepH;
   \                     LISTBOX_GetDefaultScrollStepH:
   \   00000000   ........           LDR      R0,??DataTable9
   \   00000004   B400D0E1           LDRH     R0,[R0, #+4]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     63          }
     64          
     65          /*********************************************************************
     66          *
     67          *       LISTBOX_SetDefaultBkColor
     68          */

   \                                 In section .text, align 4, keep-with-next
     69          void LISTBOX_SetDefaultBkColor(unsigned Index, GUI_COLOR Color) {
     70            if (Index < GUI_COUNTOF(LISTBOX_DefaultProps.aBackColor)) {
   \                     LISTBOX_SetDefaultBkColor:
   \   00000000   040050E3           CMP      R0,#+4
     71              LISTBOX_DefaultProps.aBackColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable9
   \   00000008   00018230           ADDCC    R0,R2,R0, LSL #+2
   \   0000000C   08108035           STRCC    R1,[R0, #+8]
     72            }
     73          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     74          
     75          /*********************************************************************
     76          *
     77          *       LISTBOX_SetDefaultTextAlign
     78          */

   \                                 In section .text, align 4, keep-with-next
     79          void LISTBOX_SetDefaultTextAlign(int Align) {
     80            LISTBOX_DefaultProps.Align = Align;
   \                     LISTBOX_SetDefaultTextAlign:
   \   00000000   ........           LDR      R1,??DataTable9
   \   00000004   B403C1E1           STRH     R0,[R1, #+52]
     81          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     82          
     83          /*********************************************************************
     84          *
     85          *       LISTBOX_GetDefaultBkColor
     86          */

   \                                 In section .text, align 4, keep-with-next
     87          GUI_COLOR LISTBOX_GetDefaultBkColor(unsigned Index) {
     88            if (Index < GUI_COUNTOF(LISTBOX_DefaultProps.aBackColor)) {
   \                     LISTBOX_GetDefaultBkColor:
   \   00000000   040050E3           CMP      R0,#+4
   \   00000004   0300002A           BCS      ??LISTBOX_GetDefaultBkColor_0
     89              return LISTBOX_DefaultProps.aBackColor[Index];
   \   00000008   ........           LDR      R1,??DataTable9
   \   0000000C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000010   080090E5           LDR      R0,[R0, #+8]
   \   00000014   1EFF2FE1           BX       LR
     90            }
     91            return GUI_INVALID_COLOR;
   \                     ??LISTBOX_GetDefaultBkColor_0:
   \   00000018   F004E0E3           MVN      R0,#-268435456
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       LISTBOX_SetDefaultTextColor
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          void LISTBOX_SetDefaultTextColor(unsigned Index, GUI_COLOR Color) {
     99            if (Index < GUI_COUNTOF(LISTBOX_DefaultProps.aTextColor)) {
   \                     LISTBOX_SetDefaultTextColor:
   \   00000000   040050E3           CMP      R0,#+4
    100              LISTBOX_DefaultProps.aTextColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable9
   \   00000008   00018230           ADDCC    R0,R2,R0, LSL #+2
   \   0000000C   18108035           STRCC    R1,[R0, #+24]
    101            }
    102          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    103          
    104          /*********************************************************************
    105          *
    106          *       LISTBOX_GetDefaultTextColor
    107          */

   \                                 In section .text, align 4, keep-with-next
    108          GUI_COLOR LISTBOX_GetDefaultTextColor(unsigned Index) {
    109            if (Index < GUI_COUNTOF(LISTBOX_DefaultProps.aTextColor)) {
   \                     LISTBOX_GetDefaultTextColor:
   \   00000000   040050E3           CMP      R0,#+4
   \   00000004   0300002A           BCS      ??LISTBOX_GetDefaultTextColor_0
    110              return LISTBOX_DefaultProps.aTextColor[Index];
   \   00000008   ........           LDR      R1,??DataTable9
   \   0000000C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000010   180090E5           LDR      R0,[R0, #+24]
   \   00000014   1EFF2FE1           BX       LR
    111            }
    112            return GUI_INVALID_COLOR;
   \                     ??LISTBOX_GetDefaultTextColor_0:
   \   00000018   F004E0E3           MVN      R0,#-268435456
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    113          }
    114          
    115          /*********************************************************************
    116          *
    117          *       LISTBOX_GetDefaultTextAlign
    118          */

   \                                 In section .text, align 4, keep-with-next
    119          int LISTBOX_GetDefaultTextAlign(void) {
    120            return LISTBOX_DefaultProps.Align;
   \                     LISTBOX_GetDefaultTextAlign:
   \   00000000   ........           LDR      R0,??DataTable9
   \   00000004   F403D0E1           LDRSH    R0,[R0, #+52]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    121          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     LISTBOX_DefaultProps
    122          
    123          #else                            /* Avoid problems with empty object modules */
    124            void LISTBOX_Default_C(void) {}
    125          #endif
    126          
    127          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     LISTBOX_GetDefaultBkColor          0
     LISTBOX_GetDefaultFont             0
     LISTBOX_GetDefaultScrollStepH      0
     LISTBOX_GetDefaultTextAlign        0
     LISTBOX_GetDefaultTextColor        0
     LISTBOX_SetDefaultBkColor          0
     LISTBOX_SetDefaultFont             0
     LISTBOX_SetDefaultScrollStepH      0
     LISTBOX_SetDefaultTextAlign        0
     LISTBOX_SetDefaultTextColor        0


   Section sizes:

     Function/Label                Bytes
     --------------                -----
     LISTBOX_SetDefaultFont          12
     LISTBOX_GetDefaultFont          12
     LISTBOX_SetDefaultScrollStepH   12
     LISTBOX_GetDefaultScrollStepH   12
     LISTBOX_SetDefaultBkColor       20
     LISTBOX_SetDefaultTextAlign     12
     LISTBOX_GetDefaultBkColor       32
     LISTBOX_SetDefaultTextColor     20
     LISTBOX_GetDefaultTextColor     32
     LISTBOX_GetDefaultTextAlign     12
     ??DataTable9                     4

 
 180 bytes in section .text
 
 180 bytes of CODE memory

Errors: none
Warnings: none
