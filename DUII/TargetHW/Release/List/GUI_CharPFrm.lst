###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_CharPFrm.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_CharPFrm.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_CharPFrm.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_CharPFrm.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_CharPFrm.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICharPExt.c
     19          Purpose     : Implementation of extended proportional fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26           
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       GUIPROP_FRM__FindChar
     36          */
     37          static const GUI_FONT_PROP_EXT GUI_UNI_PTR * GUIPROP_FRM__FindChar(const GUI_FONT_PROP_EXT GUI_UNI_PTR* pPropExt, U16P c) {
     38            for (; pPropExt; pPropExt = pPropExt->pNext) {
     39              if ((c>=pPropExt->First) && (c<=pPropExt->Last))
     40                break;
     41            }
     42            return pPropExt;
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       Public code
     48          *
     49          **********************************************************************
     50          */
     51          /*********************************************************************
     52          *
     53          *       GUIPROP_FRM_DispChar
     54          *
     55          * Purpose:
     56          *   This is the routine that displays a character. It is used by all
     57          *   other routines which display characters as a subroutine.
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          void GUIPROP_FRM_DispChar(U16P c) {
   \                     GUIPROP_FRM_DispChar:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     60            int BytesPerLine;
     61            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_FRM__FindChar(GUI_Context.pAFont->p.pPropExt, c);
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000010   1C1091E5           LDR      R1,[R1, #+28]
   \   00000014   000000EA           B        ??GUIPROP_FRM_DispChar_0
   \                     ??GUIPROP_FRM_DispChar_1:
   \   00000018   081091E5           LDR      R1,[R1, #+8]
   \                     ??GUIPROP_FRM_DispChar_0:
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   4C00000A           BEQ      ??GUIPROP_FRM_DispChar_2
   \   00000024   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   B220D121           LDRHCS   R2,[R1, #+2]
   \   00000030   00005221           CMPCS    R2,R0
   \   00000034   F7FFFF3A           BCC      ??GUIPROP_FRM_DispChar_1
     62            if (pPropExt) {
     63              GUI_DRAWMODE OldDrawMode;
     64              LCD_PIXELINDEX OldIndex;
     65              const GUI_CHARINFO_EXT GUI_UNI_PTR * pCharInfo = pPropExt->paCharInfo+(c-pPropExt->First);
   \   00000038   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000003C   041091E5           LDR      R1,[R1, #+4]
   \   00000040   020040E0           SUB      R0,R0,R2
   \   00000044   0C20A0E3           MOV      R2,#+12
   \   00000048   921025E0           MLA      R5,R2,R0,R1
     66              BytesPerLine = (pCharInfo->XSize + 7) >> 3;
   \   0000004C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000050   070080E2           ADD      R0,R0,#+7
   \   00000054   C061A0E1           ASR      R6,R0,#+3
     67              OldDrawMode  = LCD_SetDrawMode(GUI_TM_TRANS | (GUI_Context.TextMode & GUI_TM_REV));
   \   00000058   2A00D4E5           LDRB     R0,[R4, #+42]
   \   0000005C   040000E2           AND      R0,R0,#0x4
   \   00000060   020080E3           ORR      R0,R0,#0x2
   \   00000064   ........           BL       LCD_SetDrawMode
     68              LCD_DrawBitmap(GUI_Context.DispPosX + pCharInfo->XPos, GUI_Context.DispPosY + pCharInfo->YPos,
     69                             pCharInfo->XSize,
     70                             pCharInfo->YSize,
     71                             GUI_Context.pAFont->XMag,
     72                             GUI_Context.pAFont->YMag,
     73                             1,
     74                             BytesPerLine,
     75                             pCharInfo->pData,
     76                             LCD_pBkColorIndex);
   \   00000068   ........           LDR      R8,??DataTable1_1
   \   0000006C   0070A0E1           MOV      R7,R0
   \   00000070   001098E5           LDR      R1,[R8, #+0]
   \   00000074   1C0094E5           LDR      R0,[R4, #+28]
   \   00000078   14108DE5           STR      R1,[SP, #+20]
   \   0000007C   081095E5           LDR      R1,[R5, #+8]
   \   00000080   0C608DE5           STR      R6,[SP, #+12]
   \   00000084   10108DE5           STR      R1,[SP, #+16]
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   08108DE5           STR      R1,[SP, #+8]
   \   00000090   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000094   04108DE5           STR      R1,[SP, #+4]
   \   00000098   1A00D0E5           LDRB     R0,[R0, #+26]
   \   0000009C   00008DE5           STR      R0,[SP, #+0]
   \   000000A0   F402D4E1           LDRSH    R0,[R4, #+36]
   \   000000A4   D310D5E1           LDRSB    R1,[R5, #+3]
   \   000000A8   D2C0D5E1           LDRSB    R12,[R5, #+2]
   \   000000AC   0130D5E5           LDRB     R3,[R5, #+1]
   \   000000B0   001081E0           ADD      R1,R1,R0
   \   000000B4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000B8   0020D5E5           LDRB     R2,[R5, #+0]
   \   000000BC   00008CE0           ADD      R0,R12,R0
   \   000000C0   ........           BL       LCD_DrawBitmap
     77              OldIndex = LCD__GetColorIndex();
   \   000000C4   ........           LDR      R9,??DataTable1_2
     78              LCD__SetColorIndex(LCD__GetBkColorIndex());
   \   000000C8   001098E5           LDR      R1,[R8, #+0]
   \   000000CC   000099E5           LDR      R0,[R9, #+0]
   \   000000D0   002091E5           LDR      R2,[R1, #+0]
   \   000000D4   00A090E5           LDR      R10,[R0, #+0]
   \   000000D8   002080E5           STR      R2,[R0, #+0]
   \   000000DC   0130D5E5           LDRB     R3,[R5, #+1]
   \   000000E0   14108DE5           STR      R1,[SP, #+20]
   \   000000E4   081095E5           LDR      R1,[R5, #+8]
   \   000000E8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000EC   831601E1           SMLABB   R1,R3,R6,R1
   \   000000F0   0C608DE5           STR      R6,[SP, #+12]
   \   000000F4   10108DE5           STR      R1,[SP, #+16]
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   08108DE5           STR      R1,[SP, #+8]
   \   00000100   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000104   04108DE5           STR      R1,[SP, #+4]
   \   00000108   1A00D0E5           LDRB     R0,[R0, #+26]
   \   0000010C   00008DE5           STR      R0,[SP, #+0]
   \   00000110   F402D4E1           LDRSH    R0,[R4, #+36]
   \   00000114   D310D5E1           LDRSB    R1,[R5, #+3]
   \   00000118   D2C0D5E1           LDRSB    R12,[R5, #+2]
   \   0000011C   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000120   001081E0           ADD      R1,R1,R0
   \   00000124   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000128   00008CE0           ADD      R0,R12,R0
     79              LCD_DrawBitmap(GUI_Context.DispPosX + pCharInfo->XPos, GUI_Context.DispPosY + pCharInfo->YPos,
     80                             pCharInfo->XSize,
     81                             pCharInfo->YSize,
     82                             GUI_Context.pAFont->XMag,
     83                             GUI_Context.pAFont->YMag,
     84                             1,
     85                             BytesPerLine,
     86                             pCharInfo->pData + BytesPerLine * pCharInfo->YSize,
     87                             LCD_pBkColorIndex);
   \   0000012C   ........           BL       LCD_DrawBitmap
     88              LCD__SetColorIndex(OldIndex);
   \   00000130   000099E5           LDR      R0,[R9, #+0]
   \   00000134   00A080E5           STR      R10,[R0, #+0]
     89              LCD_SetDrawMode(OldDrawMode);
   \   00000138   0700A0E1           MOV      R0,R7
   \   0000013C   ........           BL       LCD_SetDrawMode
     90              GUI_Context.DispPosX += pCharInfo->XDist * GUI_Context.pAFont->XMag;
   \   00000140   1C2094E5           LDR      R2,[R4, #+28]
   \   00000144   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000148   0410D5E5           LDRB     R1,[R5, #+4]
   \   0000014C   1A20D2E5           LDRB     R2,[R2, #+26]
   \   00000150   820100E1           SMLABB   R0,R2,R1,R0
   \   00000154   B202C4E1           STRH     R0,[R4, #+34]
     91            }
     92          }
   \                     ??GUIPROP_FRM_DispChar_2:
   \   00000158   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   0000015C   F087BDE8           POP      {R4-R10,PC}      ;; return
     93          
     94          /*********************************************************************
     95          *
     96          *       GUIPROP_FRM_GetCharDistX
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          int GUIPROP_FRM_GetCharDistX(U16P c) {
   \                     GUIPROP_FRM_GetCharDistX:
   \   00000000   ........           LDR      R1,??DataTable1
   \   00000004   1C1091E5           LDR      R1,[R1, #+28]
   \   00000008   1C2091E5           LDR      R2,[R1, #+28]
   \   0000000C   000000EA           B        ??GUIPROP_FRM_GetCharDistX_0
   \                     ??GUIPROP_FRM_GetCharDistX_1:
   \   00000010   082092E5           LDR      R2,[R2, #+8]
   \                     ??GUIPROP_FRM_GetCharDistX_0:
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0D00000A           BEQ      ??GUIPROP_FRM_GetCharDistX_2
   \   0000001C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000020   030050E1           CMP      R0,R3
   \   00000024   B230D221           LDRHCS   R3,[R2, #+2]
   \   00000028   00005321           CMPCS    R3,R0
   \   0000002C   F7FFFF3A           BCC      ??GUIPROP_FRM_GetCharDistX_1
   \   00000030   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000034   042092E5           LDR      R2,[R2, #+4]
   \   00000038   1A10D1E5           LDRB     R1,[R1, #+26]
   \   0000003C   030040E0           SUB      R0,R0,R3
   \   00000040   0C30A0E3           MOV      R3,#+12
   \   00000044   932020E0           MLA      R0,R3,R0,R2
   \   00000048   0400D0E5           LDRB     R0,[R0, #+4]
   \   0000004C   810060E1           SMULBB   R0,R1,R0
   \   00000050   1EFF2FE1           BX       LR
   \                     ??GUIPROP_FRM_GetCharDistX_2:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   1EFF2FE1           BX       LR               ;; return
     99            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_FRM__FindChar(GUI_Context.pAFont->p.pPropExt, c);
    100            return (pPropExt) ? (pPropExt->paCharInfo+(c-pPropExt->First))->XDist * GUI_Context.pAFont->XMag : 0;
    101          }
    102          
    103          /*********************************************************************
    104          *
    105          *       GUIPROP_FRM_GetFontInfo
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          void GUIPROP_FRM_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
    108            GUI_USE_PARA(pFont);
    109            pfi->Flags = GUI_FONTINFO_FLAG_PROPFRM;
   \                     GUIPROP_FRM_GetFontInfo:
   \   00000000   2000A0E3           MOV      R0,#+32
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    110          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       GUIPROP_FRM_IsInFont
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          char GUIPROP_FRM_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
    117            const GUI_FONT_PROP_EXT GUI_UNI_PTR * pPropExt = GUIPROP_FRM__FindChar(pFont->p.pPropExt, c);
   \                     GUIPROP_FRM_IsInFont:
   \   00000000   1C0090E5           LDR      R0,[R0, #+28]
   \   00000004   050000EA           B        ??GUIPROP_FRM_IsInFont_0
   \                     ??GUIPROP_FRM_IsInFont_1:
   \   00000008   B020D0E1           LDRH     R2,[R0, #+0]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   B220D021           LDRHCS   R2,[R0, #+2]
   \   00000014   01005221           CMPCS    R2,R1
   \   00000018   0300002A           BCS      ??GUIPROP_FRM_IsInFont_2
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \                     ??GUIPROP_FRM_IsInFont_0:
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F7FFFF1A           BNE      ??GUIPROP_FRM_IsInFont_1
   \   00000028   1EFF2FE1           BX       LR
   \                     ??GUIPROP_FRM_IsInFont_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   1EFF2FE1           BX       LR               ;; return
    118            return (pPropExt==NULL) ? 0 : 1;
    119          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_pColorIndex
    120          
    121          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUIPROP_FRM_DispChar         56
     GUIPROP_FRM_GetCharDistX      0
     GUIPROP_FRM_GetFontInfo       0
     GUIPROP_FRM_IsInFont          0


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     GUIPROP_FRM_DispChar      352
     GUIPROP_FRM_GetCharDistX   92
     GUIPROP_FRM_GetFontInfo    12
     GUIPROP_FRM_IsInFont       52
     ??DataTable1                4
     ??DataTable1_1              4
     ??DataTable1_2              4

 
 520 bytes in section .text
 
 520 bytes of CODE memory

Errors: none
Warnings: none
