###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:26 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\PROGBAR_Skin.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\PROGBAR_Skin.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\PROGBAR_Skin.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\PROGBAR_Skin.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\PROGBAR_Skin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : PROGBAR_Skin.c
     19          Purpose     : Implementation of framewindow widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "PROGBAR_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _GetPos
     38          */
     39          static int _GetPos(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo, int IsVertical) {
     40            PROGBAR_Obj * pObj;
     41            int Size, Min, Max, v;
     42          
     43            //
     44            // Get properties
     45            //
     46            pObj = PROGBAR_LOCK_H(pDrawItemInfo->hWin);
     47            Min  = pObj->Min;
     48            Max  = pObj->Max;
     49            v    = pObj->v;
     50            GUI_UNLOCK_H(pObj);
     51            //
     52            // Calculate value
     53            //
     54            Size = IsVertical ? pDrawItemInfo->y1 - pDrawItemInfo->y0 - 1 : pDrawItemInfo->x1 - pDrawItemInfo->x0 - 1;
     55            if (v < Min) {
     56          	  v = Min;
     57            }
     58            if (v > Max) {
     59          	  v = Max;
     60            }
     61            return (Size * (I32)(IsVertical ? Max - v : v - Min)) / (Max - Min);
     62          }
     63          
     64          /*********************************************************************
     65          *
     66          *       _Paint
     67          */

   \                                 In section .text, align 4, keep-with-next
     68          static void _Paint(PROGBAR_Handle hObj) {
   \                     _Paint:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
     69            PROGBAR_Obj * pObj;
     70            GUI_RECT Rect;
     71            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
     72            WIDGET_ITEM_DRAW_INFO ItemInfo;
     73            PROGBAR_SKINFLEX_INFO SkinInfo;
     74            const char * pText;
     75            const GUI_FONT GUI_UNI_PTR * pFont;
     76            int Pos;
     77            
     78            //
     79            // Get properties
     80            //
     81            pObj = PROGBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
     82            pfDrawSkin = pObj->Props.SkinPrivate.pfDrawSkin;
   \   00000010   605090E5           LDR      R5,[R0, #+96]
     83            pFont = pObj->Props.pFont;
   \   00000014   4C6090E5           LDR      R6,[R0, #+76]
     84            SkinInfo.IsVertical = (pObj->Flags & PROGBAR_CF_VERTICAL) ? 1 : 0;
   \   00000018   6800D0E5           LDRB     R0,[R0, #+104]
   \   0000001C   010000E2           AND      R0,R0,#0x1
   \   00000020   28008DE5           STR      R0,[SP, #+40]
     85            GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
     86            ItemInfo.p = &SkinInfo;
   \   00000028   28108DE2           ADD      R1,SP,#+40
   \   0000002C   24108DE5           STR      R1,[SP, #+36]
     87            WM_GetClientRectEx(hObj, &Rect);
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_GetClientRectEx
     88            //
     89            // Draw frame
     90            //
     91            ItemInfo.Cmd  = WIDGET_ITEM_DRAW_FRAME;
   \   0000003C   0910A0E3           MOV      R1,#+9
   \   00000040   0C108DE5           STR      R1,[SP, #+12]
     92            ItemInfo.hWin = hObj;
     93            ItemInfo.x0   = Rect.x0;
   \   00000044   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000048   08408DE5           STR      R4,[SP, #+8]
     94            ItemInfo.y0   = Rect.y0;
     95            ItemInfo.x1   = Rect.x1;
     96            ItemInfo.y1   = Rect.y1;
     97            pfDrawSkin(&ItemInfo);
   \   0000004C   08008DE2           ADD      R0,SP,#+8
   \   00000050   14108DE5           STR      R1,[SP, #+20]
   \   00000054   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000058   18108DE5           STR      R1,[SP, #+24]
   \   0000005C   F410DDE1           LDRSH    R1,[SP, #+4]
   \   00000060   1C108DE5           STR      R1,[SP, #+28]
   \   00000064   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000068   20108DE5           STR      R1,[SP, #+32]
   \   0000006C   35FF2FE1           BLX      R5
     98            //
     99            // Draw background, first part
    100            //
    101            Pos = _GetPos(&ItemInfo, SkinInfo.IsVertical);
   \   00000070   28709DE5           LDR      R7,[SP, #+40]
   \   00000074   08009DE5           LDR      R0,[SP, #+8]
   \   00000078   ........           BL       GUI_ALLOC_LockH
   \   0000007C   448090E5           LDR      R8,[R0, #+68]
   \   00000080   489090E5           LDR      R9,[R0, #+72]
   \   00000084   34A090E5           LDR      R10,[R0, #+52]
   \   00000088   ........           BL       GUI_ALLOC_UnlockH
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   20009D15           LDRNE    R0,[SP, #+32]
   \   00000094   18109D15           LDRNE    R1,[SP, #+24]
   \   00000098   1C009D05           LDREQ    R0,[SP, #+28]
   \   0000009C   14109D05           LDREQ    R1,[SP, #+20]
   \   000000A0   08005AE1           CMP      R10,R8
   \   000000A4   010040E0           SUB      R0,R0,R1
   \   000000A8   08A0A0B1           MOVLT    R10,R8
   \   000000AC   0910A0E1           MOV      R1,R9
   \   000000B0   0A0059E1           CMP      R9,R10
   \   000000B4   0A10A0C1           MOVGT    R1,R10
   \   000000B8   000057E3           CMP      R7,#+0
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   01104910           SUBNE    R1,R9,R1
   \   000000C4   08104100           SUBEQ    R1,R1,R8
   \   000000C8   910000E0           MUL      R0,R1,R0
   \   000000CC   081049E0           SUB      R1,R9,R8
   \   000000D0   ........           BL       __aeabi_idiv
    102            ItemInfo.Cmd  = WIDGET_ITEM_DRAW_BACKGROUND;
   \   000000D4   0310A0E3           MOV      R1,#+3
   \   000000D8   0070A0E1           MOV      R7,R0
   \   000000DC   0C108DE5           STR      R1,[SP, #+12]
    103            ItemInfo.hWin = hObj;
    104            if (SkinInfo.IsVertical) {
   \   000000E0   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000E4   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000000E8   28209DE5           LDR      R2,[SP, #+40]
   \   000000EC   08408DE5           STR      R4,[SP, #+8]
   \   000000F0   000052E3           CMP      R2,#+0
   \   000000F4   14108DE5           STR      R1,[SP, #+20]
   \   000000F8   18008DE5           STR      R0,[SP, #+24]
   \   000000FC   0400000A           BEQ      ??_Paint_0
    105              ItemInfo.x0 = Rect.x0;
    106              ItemInfo.y0 = Rect.y0;
    107              ItemInfo.x1 = Rect.x1;
   \   00000100   F420DDE1           LDRSH    R2,[SP, #+4]
    108              ItemInfo.y1 = Rect.y0 + Pos;
   \   00000104   000087E0           ADD      R0,R7,R0
   \   00000108   20008DE5           STR      R0,[SP, #+32]
   \   0000010C   1C208DE5           STR      R2,[SP, #+28]
   \   00000110   030000EA           B        ??_Paint_1
    109            } else {
    110              ItemInfo.x0 = Rect.x0;
    111              ItemInfo.y0 = Rect.y0;
    112              ItemInfo.x1 = Rect.x0 + Pos;
   \                     ??_Paint_0:
   \   00000114   010087E0           ADD      R0,R7,R1
    113              ItemInfo.y1 = Rect.y1;
   \   00000118   F610DDE1           LDRSH    R1,[SP, #+6]
   \   0000011C   1C008DE5           STR      R0,[SP, #+28]
   \   00000120   20108DE5           STR      R1,[SP, #+32]
    114            }
    115            SkinInfo.Index = PROGBAR_SKINFLEX_L;
   \                     ??_Paint_1:
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   2C108DE5           STR      R1,[SP, #+44]
    116            pfDrawSkin(&ItemInfo);
   \   0000012C   08008DE2           ADD      R0,SP,#+8
   \   00000130   35FF2FE1           BLX      R5
    117            //
    118            // Draw background, second part
    119            //
    120            if (SkinInfo.IsVertical) {
   \   00000134   28C09DE5           LDR      R12,[SP, #+40]
   \   00000138   F600DDE1           LDRSH    R0,[SP, #+6]
   \   0000013C   F410DDE1           LDRSH    R1,[SP, #+4]
   \   00000140   F220DDE1           LDRSH    R2,[SP, #+2]
   \   00000144   F030DDE1           LDRSH    R3,[SP, #+0]
   \   00000148   00005CE3           CMP      R12,#+0
   \   0000014C   0300000A           BEQ      ??_Paint_2
    121              ItemInfo.x0 = Rect.x0;
    122              ItemInfo.y0 = Rect.y0 + Pos + 1;
   \   00000150   022087E0           ADD      R2,R7,R2
   \   00000154   14308DE5           STR      R3,[SP, #+20]
   \   00000158   012082E2           ADD      R2,R2,#+1
   \   0000015C   020000EA           B        ??_Paint_3
    123              ItemInfo.x1 = Rect.x1;
    124              ItemInfo.y1 = Rect.y1;
    125            } else {
    126              ItemInfo.x0 = Rect.x0 + Pos + 1;
   \                     ??_Paint_2:
   \   00000160   033087E0           ADD      R3,R7,R3
   \   00000164   013083E2           ADD      R3,R3,#+1
   \   00000168   14308DE5           STR      R3,[SP, #+20]
    127              ItemInfo.y0 = Rect.y0;
    128              ItemInfo.x1 = Rect.x1;
   \                     ??_Paint_3:
   \   0000016C   1C108DE5           STR      R1,[SP, #+28]
    129              ItemInfo.y1 = Rect.y1;
   \   00000170   20008DE5           STR      R0,[SP, #+32]
    130            }
    131            SkinInfo.Index = PROGBAR_SKINFLEX_R;
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   18208DE5           STR      R2,[SP, #+24]
   \   0000017C   2C108DE5           STR      R1,[SP, #+44]
    132            pfDrawSkin(&ItemInfo);
   \   00000180   08008DE2           ADD      R0,SP,#+8
   \   00000184   35FF2FE1           BLX      R5
    133            //
    134            // Draw text
    135            //
    136            pObj = PROGBAR_LOCK_H(hObj);
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   ........           BL       GUI_ALLOC_LockH
   \   00000190   0070A0E1           MOV      R7,R0
    137            pText = PROGBAR__GetTextLocked(pObj);
   \   00000194   ........           BL       PROGBAR__GetTextLocked
   \   00000198   0080B0E1           MOVS     R8,R0
    138            if (pText) {
   \   0000019C   1400000A           BEQ      ??_Paint_4
    139              GUI_SetFont(pFont);
   \   000001A0   0600A0E1           MOV      R0,R6
   \   000001A4   ........           BL       GUI_SetFont
    140              PROGBAR__GetTextRect(pObj, &Rect, pText);
   \   000001A8   0820A0E1           MOV      R2,R8
   \   000001AC   0D10A0E1           MOV      R1,SP
   \   000001B0   0700A0E1           MOV      R0,R7
   \   000001B4   ........           BL       PROGBAR__GetTextRect
    141              GUI_UNLOCK_H(pObj);
   \   000001B8   ........           BL       GUI_ALLOC_UnlockH
    142              SkinInfo.pText = pText;
    143              ItemInfo.Cmd  = WIDGET_ITEM_DRAW_TEXT;
   \   000001BC   1010A0E3           MOV      R1,#+16
   \   000001C0   0C108DE5           STR      R1,[SP, #+12]
    144              ItemInfo.hWin = hObj;
    145              ItemInfo.x0   = Rect.x0;
   \   000001C4   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000001C8   30808DE5           STR      R8,[SP, #+48]
   \   000001CC   08408DE5           STR      R4,[SP, #+8]
   \   000001D0   14108DE5           STR      R1,[SP, #+20]
    146              ItemInfo.y0   = Rect.y0;
   \   000001D4   F210DDE1           LDRSH    R1,[SP, #+2]
    147              ItemInfo.x1   = Rect.x1;
    148              ItemInfo.y1   = Rect.y1;
    149              pfDrawSkin(&ItemInfo);
   \   000001D8   08008DE2           ADD      R0,SP,#+8
   \   000001DC   18108DE5           STR      R1,[SP, #+24]
   \   000001E0   F410DDE1           LDRSH    R1,[SP, #+4]
   \   000001E4   1C108DE5           STR      R1,[SP, #+28]
   \   000001E8   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000001EC   20108DE5           STR      R1,[SP, #+32]
   \   000001F0   35FF2FE1           BLX      R5
    150              GUI_UNLOCK_H(pText);
    151            } else {
    152              GUI_UNLOCK_H(pObj);
   \                     ??_Paint_4:
   \   000001F4   ........           BL       GUI_ALLOC_UnlockH
    153            }
    154          }
   \   000001F8   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   000001FC   F087BDE8           POP      {R4-R10,PC}      ;; return
    155          
    156          /*********************************************************************
    157          *
    158          *       _Create
    159          */

   \                                 In section .text, align 4, keep-with-next
    160          static void _Create(PROGBAR_Handle hObj) {
   \                     _Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    161            PROGBAR_Obj * pObj;
    162            PROGBAR_SKIN_PRIVATE * pSkinPrivate;
    163            WIDGET_ITEM_DRAW_INFO ItemInfo;
    164          
    165            //
    166            // Get properties
    167            //
    168            pObj = PROGBAR_LOCK_H(hObj);
    169            pSkinPrivate = (PROGBAR_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate;
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   640090E5           LDR      R0,[R0, #+100]
   \   00000014   085090E5           LDR      R5,[R0, #+8]
    170            GUI_UNLOCK_H(pObj);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    171            //
    172            // Create
    173            //
    174            ItemInfo.Cmd = WIDGET_ITEM_CREATE;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04108DE5           STR      R1,[SP, #+4]
    175            ItemInfo.hWin = hObj;
   \   00000024   00408DE5           STR      R4,[SP, #+0]
    176            pSkinPrivate->pfDrawSkin(&ItemInfo);
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   001095E5           LDR      R1,[R5, #+0]
   \   00000030   31FF2FE1           BLX      R1
    177          }
   \   00000034   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    178          
    179          /*********************************************************************
    180          *
    181          *        Private data
    182          *
    183          **********************************************************************
    184          */
    185          /*********************************************************************
    186          *
    187          *       _Skin
    188          */

   \                                 In section .data, align 4
    189          static WIDGET_SKIN _Skin = {
   \                     _Skin:
   \   00000000   ............       DC32 _Paint, _Create, PROGBAR__DefaultProps + 14H
   \              ............
    190            _Paint,
    191            _Create,
    192            &PROGBAR__DefaultProps.SkinPrivate
    193          };
    194          
    195          /*********************************************************************
    196          *
    197          *        Public code
    198          *
    199          **********************************************************************
    200          */
    201          /*********************************************************************
    202          *
    203          *       PROGBAR_SetSkin
    204          */

   \                                 In section .text, align 4, keep-with-next
    205          void PROGBAR_SetSkin(PROGBAR_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
   \                     PROGBAR_SetSkin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    206            PROGBAR_Obj * pObj;
    207          
    208            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    209            pObj = PROGBAR_LOCK_H(hObj);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
    210            //
    211            // Enable skinning
    212            //
    213            pObj->pWidgetSkin = &_Skin;
   \   0000001C   ........           LDR      R1,??DataTable1
   \   00000020   641080E5           STR      R1,[R0, #+100]
    214            //
    215            // Set private callback function
    216            //
    217            pObj->Props.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   00000024   605080E5           STR      R5,[R0, #+96]
    218            GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    219            //
    220            // Invalidate widget
    221            //
    222            WM_SetHasTrans(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_SetHasTrans
    223            WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    224            WM_UNLOCK();
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3040BDE8           POP      {R4,R5,LR}
   \   00000044   ........           B        GUI_Unlock       ;; tailcall
    225          }
    226          
    227          /*********************************************************************
    228          *
    229          *       PROGBAR_SetDefaultSkin
    230          */

   \                                 In section .text, align 4, keep-with-next
    231          void PROGBAR_SetDefaultSkin(WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
    232            PROGBAR__pSkinDefault = &_Skin;
   \                     PROGBAR_SetDefaultSkin:
   \   00000000   ........           LDR      R1,??DataTable1_1
   \   00000004   ........           LDR      R2,??DataTable1
   \   00000008   002081E5           STR      R2,[R1, #+0]
    233            PROGBAR__DefaultProps.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000000C   ........           LDR      R1,??DataTable1_2
   \   00000010   140081E5           STR      R0,[R1, #+20]
    234          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _Skin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     PROGBAR__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     PROGBAR__DefaultProps
    235          
    236          #else
    237            void PROGBAR_Skin_C(void);
    238            void PROGBAR_Skin_C(void) {} /* avoid empty object files */
    239          #endif /* GUI_WINSUPPORT */
    240          
    241          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     PROGBAR_SetDefaultSkin      0
     PROGBAR_SetSkin            16
     _Create                    48
     _Paint                     88


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Paint                  512
     _Create                  60
     _Skin                    12
     PROGBAR_SetSkin          72
     PROGBAR_SetDefaultSkin   24
     ??DataTable1              4
     ??DataTable1_1            4
     ??DataTable1_2            4

 
  12 bytes in section .data
 680 bytes in section .text
 
 680 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
