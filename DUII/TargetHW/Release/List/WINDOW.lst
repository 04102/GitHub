###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:35 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WINDOW.c                            #
#    Command line =  C:\DUII\TargetHW\GUI\WINDOW.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WINDOW.lst                 #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WINDOW.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WINDOW.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WINDOW.c
     19          Purpose     : Window routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <stdlib.h>
     25          #include <string.h>
     26          #include "DIALOG.h"
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Private config defaults
     32          *
     33          **********************************************************************
     34          */
     35          
     36          #ifndef WINDOW_BKCOLOR_DEFAULT
     37            #define WINDOW_BKCOLOR_DEFAULT 0xC0C0C0
     38          #endif
     39          
     40          /*********************************************************************
     41          *
     42          *       Object definition
     43          *
     44          **********************************************************************
     45          */
     46          
     47          typedef struct {
     48            WIDGET Widget;
     49            WM_CALLBACK * cb;
     50            WM_HWIN hFocussedChild;
     51            WM_DIALOG_STATUS * pDialogStatus;
     52            GUI_COLOR BkColor;
     53          } WINDOW_OBJ;
     54          
     55          #define WINDOW_LOCK(h) (WINDOW_OBJ *)GUI_LOCK_H(h)
     56          
     57          /*********************************************************************
     58          *
     59          *       Static data
     60          *
     61          **********************************************************************
     62          */
     63          

   \                                 In section .data, align 4
     64          GUI_COLOR WINDOW__DefaultBkColor = WINDOW_BKCOLOR_DEFAULT;
   \                     WINDOW__DefaultBkColor:
   \   00000000   C0C0C000           DC32 12632256
     65          
     66          /*********************************************************************
     67          *
     68          *       Static routines
     69          *
     70          **********************************************************************
     71          */
     72          /*********************************************************************
     73          *
     74          *       _OnChildHasFocus
     75          */
     76          static void _OnChildHasFocus(WM_HWIN hObj, const WM_MESSAGE * pMsg) {
     77            WINDOW_OBJ * pObj;
     78            pObj = WINDOW_LOCK(hObj);
     79            if (pMsg->Data.p) {
     80              const WM_NOTIFY_CHILD_HAS_FOCUS_INFO * pInfo;
     81              int IsDesc;
     82              pInfo = (const WM_NOTIFY_CHILD_HAS_FOCUS_INFO *)pMsg->Data.p;
     83              IsDesc = WM__IsAncestorOrSelf(pInfo->hNew, hObj);
     84              if (!IsDesc) {  /* A child has received the focus, Framewindow needs to be activated */
     85                /* Remember the child which had the focus so we can reactive this child */
     86                if (WM__IsAncestor(pInfo->hOld, hObj)) {
     87                  pObj->hFocussedChild = pInfo->hOld;
     88                }
     89              }
     90            }
     91            GUI_UNLOCK_H(pObj);
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       Exported routines
     97          *
     98          **********************************************************************
     99          */
    100          /*********************************************************************
    101          *
    102          *       WINDOW_Callback
    103          */

   \                                 In section .text, align 4, keep-with-next
    104          void WINDOW_Callback(WM_MESSAGE* pMsg) {
   \                     WINDOW_Callback:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    105            WM_HWIN hObj;
    106            WINDOW_OBJ * pObj;
    107            WM_CALLBACK * cb;
    108            int r;
    109            WM_HWIN hFocussedChild;
    110            GUI_COLOR BkColor;
    111          
    112            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
    113            pObj = WINDOW_LOCK(hObj);
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           BL       GUI_ALLOC_LockH
    114            hFocussedChild = pObj->hFocussedChild;
   \   00000018   388090E5           LDR      R8,[R0, #+56]
    115            cb             = pObj->cb;
   \   0000001C   347090E5           LDR      R7,[R0, #+52]
    116            BkColor        = pObj->BkColor;
   \   00000020   409090E5           LDR      R9,[R0, #+64]
    117            GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    118            r = 0;
    119            switch (pMsg->MsgId) {
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   0E0040E2           SUB      R0,R0,#+14
   \   00000034   1C0050E3           CMP      R0,#+28
   \   00000038   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??WINDOW_Callback_0:
   \   0000003C   7000008A           BHI      ??WINDOW_Callback_1
   \   00000040   510000EA           B        ??WINDOW_Callback_2
   \   00000044   680000EA           B        ??WINDOW_Callback_3
   \   00000048   6D0000EA           B        ??WINDOW_Callback_1
   \   0000004C   6C0000EA           B        ??WINDOW_Callback_1
   \   00000050   6B0000EA           B        ??WINDOW_Callback_1
   \   00000054   6A0000EA           B        ??WINDOW_Callback_1
   \   00000058   690000EA           B        ??WINDOW_Callback_1
   \   0000005C   680000EA           B        ??WINDOW_Callback_1
   \   00000060   670000EA           B        ??WINDOW_Callback_1
   \   00000064   660000EA           B        ??WINDOW_Callback_1
   \   00000068   650000EA           B        ??WINDOW_Callback_1
   \   0000006C   640000EA           B        ??WINDOW_Callback_1
   \   00000070   630000EA           B        ??WINDOW_Callback_1
   \   00000074   620000EA           B        ??WINDOW_Callback_1
   \   00000078   610000EA           B        ??WINDOW_Callback_1
   \   0000007C   600000EA           B        ??WINDOW_Callback_1
   \   00000080   140000EA           B        ??WINDOW_Callback_4
   \   00000084   290000EA           B        ??WINDOW_Callback_5
   \   00000088   2C0000EA           B        ??WINDOW_Callback_6
   \   0000008C   5C0000EA           B        ??WINDOW_Callback_1
   \   00000090   600000EA           B        ??WINDOW_Callback_7
   \   00000094   5A0000EA           B        ??WINDOW_Callback_1
   \   00000098   590000EA           B        ??WINDOW_Callback_1
   \   0000009C   580000EA           B        ??WINDOW_Callback_1
   \   000000A0   570000EA           B        ??WINDOW_Callback_1
   \   000000A4   560000EA           B        ??WINDOW_Callback_1
   \   000000A8   550000EA           B        ??WINDOW_Callback_1
   \   000000AC   540000EA           B        ??WINDOW_Callback_1
   \   000000B0   FFFFFFEA           B        ??WINDOW_Callback_8
    120            case WM_HANDLE_DIALOG_STATUS:
    121              pObj = WINDOW_LOCK(hObj);
   \                     ??WINDOW_Callback_8:
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   ........           BL       GUI_ALLOC_LockH
    122              if (pMsg->Data.p) {                           /* set pointer to Dialog status */
   \   000000BC   0C1094E5           LDR      R1,[R4, #+12]
   \   000000C0   000051E3           CMP      R1,#+0
    123                pObj->pDialogStatus = (WM_DIALOG_STATUS *)pMsg->Data.p;
    124              } else {                                      /* return pointer to Dialog status */
    125                pMsg->Data.p = pObj->pDialogStatus;      
   \   000000C4   3C009005           LDREQ    R0,[R0, #+60]
   \   000000C8   3C108015           STRNE    R1,[R0, #+60]
   \   000000CC   0C008405           STREQ    R0,[R4, #+12]
    126              }
    127              GUI_UNLOCK_H(pObj);
   \                     ??WINDOW_Callback_9:
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
    128              r = 1;
    129              break;
   \   000000D4   520000EA           B        ??WINDOW_Callback_10
    130            case WM_SET_FOCUS:
    131              if (pMsg->Data.v) {   /* Focus received */
   \                     ??WINDOW_Callback_4:
   \   000000D8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   4F00000A           BEQ      ??WINDOW_Callback_10
    132                if (hFocussedChild && (hFocussedChild != hObj)) {
   \   000000E4   000058E3           CMP      R8,#+0
   \   000000E8   05005811           CMPNE    R8,R5
   \   000000EC   0600000A           BEQ      ??WINDOW_Callback_11
    133                  if (WM_IsWindow(hFocussedChild)) {
   \   000000F0   0800A0E1           MOV      R0,R8
   \   000000F4   ........           BL       WM_IsWindow
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0200000A           BEQ      ??WINDOW_Callback_11
    134                    WM_SetFocus(hFocussedChild);
   \   00000100   0800A0E1           MOV      R0,R8
   \   00000104   ........           BL       WM_SetFocus
   \   00000108   060000EA           B        ??WINDOW_Callback_12
    135                  } else {
    136                    hFocussedChild = WM_SetFocusOnNextChild(hObj);
    137                    pObj = WINDOW_LOCK(hObj);
    138                    pObj->hFocussedChild = hFocussedChild;
    139                    GUI_UNLOCK_H(pObj);
    140                  }
    141                } else {
    142                  hFocussedChild = WM_SetFocusOnNextChild(hObj);
   \                     ??WINDOW_Callback_11:
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       WM_SetFocusOnNextChild
   \   00000114   0080A0E1           MOV      R8,R0
    143                  pObj = WINDOW_LOCK(hObj);
    144                  pObj->hFocussedChild = hFocussedChild;
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   ........           BL       GUI_ALLOC_LockH
   \   00000120   388080E5           STR      R8,[R0, #+56]
    145                  GUI_UNLOCK_H(pObj);
   \   00000124   ........           BL       GUI_ALLOC_UnlockH
    146                }
    147                pMsg->Data.v = 0;   /* Focus change accepted */
   \                     ??WINDOW_Callback_12:
   \   00000128   0C6084E5           STR      R6,[R4, #+12]
   \   0000012C   3C0000EA           B        ??WINDOW_Callback_10
    148              }
    149              r = 1;
    150              break;
    151            case WM_GET_ACCEPT_FOCUS:
    152              WIDGET_HandleActive(hObj, pMsg);
   \                     ??WINDOW_Callback_5:
   \   00000130   0410A0E1           MOV      R1,R4
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   ........           BL       WIDGET_HandleActive
    153              r = 1;
    154              break;
   \   0000013C   380000EA           B        ??WINDOW_Callback_10
    155            case WM_NOTIFY_CHILD_HAS_FOCUS:
    156              _OnChildHasFocus(hObj, pMsg);
   \                     ??WINDOW_Callback_6:
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           BL       GUI_ALLOC_LockH
   \   00000148   0C4094E5           LDR      R4,[R4, #+12]
   \   0000014C   0060A0E1           MOV      R6,R0
   \   00000150   000054E3           CMP      R4,#+0
   \   00000154   DDFFFF0A           BEQ      ??WINDOW_Callback_9
   \   00000158   0510A0E1           MOV      R1,R5
   \   0000015C   040094E5           LDR      R0,[R4, #+4]
   \   00000160   ........           BL       WM__IsAncestorOrSelf
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   D8FFFF1A           BNE      ??WINDOW_Callback_9
   \   0000016C   0510A0E1           MOV      R1,R5
   \   00000170   000094E5           LDR      R0,[R4, #+0]
   \   00000174   ........           BL       WM__IsAncestor
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   D3FFFF0A           BEQ      ??WINDOW_Callback_9
   \   00000180   000094E5           LDR      R0,[R4, #+0]
   \   00000184   380086E5           STR      R0,[R6, #+56]
   \   00000188   D0FFFFEA           B        ??WINDOW_Callback_9
    157              r = 1;
    158              break;
    159            case WM_KEY:
    160              if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt > 0) {
   \                     ??WINDOW_Callback_2:
   \   0000018C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000190   041090E5           LDR      R1,[R0, #+4]
   \   00000194   010051E3           CMP      R1,#+1
   \   00000198   190000BA           BLT      ??WINDOW_Callback_1
    161                int Key = ((const WM_KEY_INFO *)(pMsg->Data.p))->Key;
    162                switch (Key) {
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   090050E3           CMP      R0,#+9
   \   000001A4   0900000A           BEQ      ??WINDOW_Callback_13
   \   000001A8   1500003A           BCC      ??WINDOW_Callback_1
   \   000001AC   0A0050E3           CMP      R0,#+10
   \   000001B0   1300001A           BNE      ??WINDOW_Callback_1
    163                case GUI_KEY_BACKTAB:
    164                  hFocussedChild = WM_SetFocusOnPrevChild(hObj);
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   ........           BL       WM_SetFocusOnPrevChild
   \   000001BC   0080A0E1           MOV      R8,R0
    165                  pObj = WINDOW_LOCK(hObj);
    166                  pObj->hFocussedChild = hFocussedChild;
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   ........           BL       GUI_ALLOC_LockH
   \   000001C8   388080E5           STR      R8,[R0, #+56]
    167                  GUI_UNLOCK_H(pObj);
   \   000001CC   BFFFFFEA           B        ??WINDOW_Callback_9
    168                  return;
    169                case GUI_KEY_TAB:
    170                  hFocussedChild = WM_SetFocusOnNextChild(hObj);
   \                     ??WINDOW_Callback_13:
   \   000001D0   0500A0E1           MOV      R0,R5
   \   000001D4   ........           BL       WM_SetFocusOnNextChild
   \   000001D8   0080A0E1           MOV      R8,R0
    171                  pObj = WINDOW_LOCK(hObj);
    172                  pObj->hFocussedChild = hFocussedChild;
   \   000001DC   0500A0E1           MOV      R0,R5
   \   000001E0   ........           BL       GUI_ALLOC_LockH
   \   000001E4   388080E5           STR      R8,[R0, #+56]
    173                  GUI_UNLOCK_H(pObj);
   \   000001E8   B8FFFFEA           B        ??WINDOW_Callback_9
    174                  return;
    175                }
    176              }
    177              break;
    178            case WM_PAINT:
    179              if (BkColor != GUI_INVALID_COLOR) {
   \                     ??WINDOW_Callback_3:
   \   000001EC   F004E0E3           MVN      R0,#-268435456
   \   000001F0   000059E1           CMP      R9,R0
   \   000001F4   0200000A           BEQ      ??WINDOW_Callback_1
    180                LCD_SetBkColor(BkColor);
   \   000001F8   0900A0E1           MOV      R0,R9
   \   000001FC   ........           BL       LCD_SetBkColor
    181                GUI_Clear();
   \   00000200   ........           BL       GUI_Clear
    182              }
    183              break;
    184            case WM_GET_BKCOLOR:
    185              pMsg->Data.Color = BkColor;
    186              r = 1;
    187              break;
    188            }
    189            if (r == 0) {
    190              if (cb) {
   \                     ??WINDOW_Callback_1:
   \   00000204   000057E3           CMP      R7,#+0
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   0300000A           BEQ      ??WINDOW_Callback_14
    191                (*cb)(pMsg);
   \   00000210   37FF2FE1           BLX      R7
   \   00000214   020000EA           B        ??WINDOW_Callback_10
    192              } else {
   \                     ??WINDOW_Callback_7:
   \   00000218   0C9084E5           STR      R9,[R4, #+12]
   \   0000021C   000000EA           B        ??WINDOW_Callback_10
    193                WM_DefaultProc(pMsg);
   \                     ??WINDOW_Callback_14:
   \   00000220   ........           BL       WM_DefaultProc
   \                     ??WINDOW_Callback_10:
   \   00000224   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000228   F083BDE8           POP      {R4-R9,PC}       ;; return
    194              }
    195            }
    196          }
    197          
    198          /*********************************************************************
    199          *
    200          *       WINDOW_SetBkColor
    201          */

   \                                 In section .text, align 4, keep-with-next
    202          void WINDOW_SetBkColor(WM_HWIN hObj, GUI_COLOR Color) {
   \                     WINDOW_SetBkColor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    203            WINDOW_OBJ * pObj;
    204            
    205            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    206            pObj = WINDOW_LOCK(hObj);
    207            pObj->BkColor = Color;
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   405080E5           STR      R5,[R0, #+64]
    208            GUI_UNLOCK_H(pObj);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
    209            WM_InvalidateWindow(hObj);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       WM_InvalidateWindow
    210            WM_UNLOCK();
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   ........           B        GUI_Unlock       ;; tailcall
    211          }
    212          
    213          /*********************************************************************
    214          *
    215          *       Exported routines:  Create
    216          *
    217          **********************************************************************
    218          */
    219          /*********************************************************************
    220          *
    221          *       WINDOW_CreateEx
    222          */

   \                                 In section .text, align 4, keep-with-next
    223          WM_HWIN WINDOW_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent, int WinFlags, int ExFlags, int Id, WM_CALLBACK * cb) {
   \                     WINDOW_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   44409DE5           LDR      R4,[SP, #+68]
   \   00000024   48509DE5           LDR      R5,[SP, #+72]
    224            WM_HWIN hObj;
    225            WINDOW_OBJ * pObj;
    226          
    227            GUI_USE_PARA(ExFlags);
    228            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    229            hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, WINDOW_Callback, sizeof(WINDOW_OBJ) - sizeof(WM_Obj));
   \   0000002C   1800A0E3           MOV      R0,#+24
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable1
   \   00000038   04B08DE5           STR      R11,[SP, #+4]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   00A08DE5           STR      R10,[SP, #+0]
   \   00000044   0930A0E1           MOV      R3,R9
   \   00000048   0820A0E1           MOV      R2,R8
   \   0000004C   0710A0E1           MOV      R1,R7
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   0060B0E1           MOVS     R6,R0
    230            if (hObj) {
   \   0000005C   0B00000A           BEQ      ??WINDOW_CreateEx_0
    231              pObj = WINDOW_LOCK(hObj);
   \   00000060   ........           BL       GUI_ALLOC_LockH
   \   00000064   0070A0E1           MOV      R7,R0
    232              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   00000068   1020A0E3           MOV      R2,#+16
   \   0000006C   0410A0E1           MOV      R1,R4
   \   00000070   ........           BL       WIDGET__Init
    233              pObj->cb             = cb;
   \   00000074   345087E5           STR      R5,[R7, #+52]
    234              pObj->hFocussedChild = 0;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   380087E5           STR      R0,[R7, #+56]
    235              pObj->BkColor        = WINDOW__DefaultBkColor;
   \   00000080   ........           LDR      R0,??DataTable1_1
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   400087E5           STR      R0,[R7, #+64]
    236              GUI_UNLOCK_H(pObj);
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
    237            }
    238            WM_UNLOCK();
   \                     ??WINDOW_CreateEx_0:
   \   00000090   ........           BL       GUI_Unlock
    239            return hObj;
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   14D08DE2           ADD      SP,SP,#+20
   \   0000009C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    240          }
    241          
    242          /*********************************************************************
    243          *
    244          *       WINDOW_CreateIndirect
    245          */

   \                                 In section .text, align 4, keep-with-next
    246          WM_HWIN WINDOW_CreateIndirect(const GUI_WIDGET_CREATE_INFO * pCreateInfo, WM_HWIN hWinParent, int x0, int y0, WM_CALLBACK * cb) {
   \                     WINDOW_CreateIndirect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0160A0E1           MOV      R6,R1
    247            WM_HWIN hObj;
    248          
    249            hObj = WINDOW_CreateEx(pCreateInfo->x0 + x0, pCreateInfo->y0 + y0, pCreateInfo->xSize, pCreateInfo->ySize, hWinParent, pCreateInfo->Flags, 0, pCreateInfo->Id, cb);
   \   00000008   F850D0E1           LDRSH    R5,[R0, #+8]
   \   0000000C   B271D0E1           LDRH     R7,[R0, #+18]
   \   00000010   F081D0E1           LDRSH    R8,[R0, #+16]
   \   00000014   FE90D0E1           LDRSH    R9,[R0, #+14]
   \   00000018   FC10D0E1           LDRSH    R1,[R0, #+12]
   \   0000001C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000020   14D04DE2           SUB      SP,SP,#+20
   \   00000024   38409DE5           LDR      R4,[SP, #+56]
   \   00000028   01A083E0           ADD      R10,R3,R1
   \   0000002C   00B082E0           ADD      R11,R2,R0
   \   00000030   ........           BL       GUI_Lock
   \   00000034   1800A0E3           MOV      R0,#+24
   \   00000038   0C008DE5           STR      R0,[SP, #+12]
   \   0000003C   ........           LDR      R0,??DataTable1
   \   00000040   04708DE5           STR      R7,[SP, #+4]
   \   00000044   08008DE5           STR      R0,[SP, #+8]
   \   00000048   00608DE5           STR      R6,[SP, #+0]
   \   0000004C   0830A0E1           MOV      R3,R8
   \   00000050   0920A0E1           MOV      R2,R9
   \   00000054   0A10A0E1           MOV      R1,R10
   \   00000058   0B00A0E1           MOV      R0,R11
   \   0000005C   ........           BL       WM_CreateWindowAsChild
   \   00000060   0060B0E1           MOVS     R6,R0
   \   00000064   0B00000A           BEQ      ??WINDOW_CreateIndirect_0
   \   00000068   ........           BL       GUI_ALLOC_LockH
   \   0000006C   0070A0E1           MOV      R7,R0
   \   00000070   1020A0E3           MOV      R2,#+16
   \   00000074   0510A0E1           MOV      R1,R5
   \   00000078   ........           BL       WIDGET__Init
   \   0000007C   344087E5           STR      R4,[R7, #+52]
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   380087E5           STR      R0,[R7, #+56]
   \   00000088   ........           LDR      R0,??DataTable1_1
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   400087E5           STR      R0,[R7, #+64]
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
   \                     ??WINDOW_CreateIndirect_0:
   \   00000098   ........           BL       GUI_Unlock
    250            return hObj;
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   14D08DE2           ADD      SP,SP,#+20
   \   000000A4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    251          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     WINDOW_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     WINDOW__DefaultBkColor
    252          
    253          #else
    254            void WINDOW_c(void);
    255            void WINDOW_c(void) {} /* avoid empty object files */
    256          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     WINDOW_Callback           32
     WINDOW_CreateEx           56
     WINDOW_CreateIndirect     56
     WINDOW_SetBkColor         16


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     WINDOW__DefaultBkColor    4
     WINDOW_Callback         556
     WINDOW_SetBkColor        56
     WINDOW_CreateEx         160
     WINDOW_CreateIndirect   168
     ??DataTable1              4
     ??DataTable1_1            4

 
   4 bytes in section .data
 948 bytes in section .text
 
 948 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
