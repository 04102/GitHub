###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_JPEG.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_JPEG.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_JPEG.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_JPEG.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_JPEG.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_JPEG.c
     19          Purpose     : Implementation of GUI_JPEG... functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          #include "GUI_JPEG_Private.h"
     28          
     29          /*********************************************************************
     30          *
     31          *       Configuration
     32          *
     33          **********************************************************************
     34          */
     35          #ifndef   USE_LIMIT_TABLE
     36            #define USE_LIMIT_TABLE 1
     37          #endif
     38          #ifndef   TEST_BANDING
     39            #define TEST_BANDING 0
     40          #endif
     41          
     42          /*********************************************************************
     43          *
     44          *       Defines
     45          *
     46          **********************************************************************
     47          */
     48          #define MIN(a, b) (((a) < (b)) ? (a) : (b))
     49          
     50          /* Buffer size of input buffer */
     51          #define INPUT_BUF_SIZE 4096
     52          
     53          /* Dequantization of a DPCM (Differential Pulse Code Modulation) value */
     54          #define DEQUANT_DCPM(x, s) ((x) < _aExtendTest[s] ? (x) + _aExtendOffset[s] : (x))
     55          
     56          /* Constants for IDCT */
     57          #define CONST_BITS 13
     58          #define PASS1_BITS  2
     59          
     60          #define FIX_0_298631336 ((I32) 2446)
     61          #define FIX_0_390180644 ((I32) 3196)
     62          #define FIX_0_541196100 ((I32) 4433)
     63          #define FIX_0_765366865 ((I32) 6270)
     64          #define FIX_0_899976223 ((I32) 7373)
     65          #define FIX_1_175875602 ((I32) 9633)
     66          #define FIX_1_501321110 ((I32)12299)
     67          #define FIX_1_847759065 ((I32)15137)
     68          #define FIX_1_961570560 ((I32)16069)
     69          #define FIX_2_053119869 ((I32)16819)
     70          #define FIX_2_562915447 ((I32)20995)
     71          #define FIX_3_072711026 ((I32)25172)
     72          
     73          /* Macros for IDCT */
     74          #define DESCALE(x, n)  (((x) + (((I32)1) << ((n) - 1))) >> (n))
     75          #define MULTIPLY(v, c) ((v) * (c))
     76          
     77          /* Macros for color conversion */
     78          #if USE_LIMIT_TABLE
     79            #define LIMIT(x) _aLimit[x + 0x100] /* Limiting a value per table works much faster than calculating value by value */
     80          #else
     81            #define LIMIT(v)    \
     82              if (v > 255) {    \
     83                v = 255;        \
     84              }                 \
     85              if (v & 0xFF00) { \
     86                v = 0;          \
     87              }
     88          #endif
     89          
     90          #define DC_COEFFS 1
     91          #define AC_COEFFS 2
     92          
     93          /*********************************************************************
     94          *
     95          *       Static (const) data
     96          *
     97          **********************************************************************
     98          */
     99          #if USE_LIMIT_TABLE
    100          /* Array for limiting color convertion values */

   \                                 In section .text, align 4, keep-with-next
    101          static const U8 _aLimit[] = {
   \                     _aLimit:
   \   00000000                      ; Initializer data, 768 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000001E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000046   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000006E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000096   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000BE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000E6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 1, 2, 3
   \              00010203    
   \   00000104   040506070809       DC8 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
   \              0A0B0C0D    
   \   0000010E   0E0F10111213       DC8 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
   \              14151617    
   \   00000118   18191A1B1C1D       DC8 24, 25, 26, 27, 28, 29, 30, 31, 32, 33
   \              1E1F2021    
   \   00000122   222324252627       DC8 34, 35, 36, 37, 38, 39, 40, 41, 42, 43
   \              28292A2B    
   \   0000012C   2C2D2E2F3031       DC8 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
   \              32333435    
   \   00000136   363738393A3B       DC8 54, 55, 56, 57, 58, 59, 60, 61, 62, 63
   \              3C3D3E3F    
   \   00000140   404142434445       DC8 64, 65, 66, 67, 68, 69, 70, 71, 72, 73
   \              46474849    
   \   0000014A   4A4B4C4D4E4F       DC8 74, 75, 76, 77, 78, 79, 80, 81, 82, 83
   \              50515253    
   \   00000154   545556575859       DC8 84, 85, 86, 87, 88, 89, 90, 91, 92, 93
   \              5A5B5C5D    
   \   0000015E   5E5F60616263       DC8 94, 95, 96, 97, 98, 99, 100, 101, 102, 103
   \              64656667    
   \   00000168   68696A6B6C6D       DC8 104, 105, 106, 107, 108, 109, 110, 111, 112, 113
   \              6E6F7071    
   \   00000172   727374757677       DC8 114, 115, 116, 117, 118, 119, 120, 121, 122, 123
   \              78797A7B    
   \   0000017C   7C7D7E7F8081       DC8 124, 125, 126, 127, 128, 129, 130, 131, 132, 133
   \              82838485    
   \   00000186   868788898A8B       DC8 134, 135, 136, 137, 138, 139, 140, 141, 142, 143
   \              8C8D8E8F    
   \   00000190   909192939495       DC8 144, 145, 146, 147, 148, 149, 150, 151, 152, 153
   \              96979899    
   \   0000019A   9A9B9C9D9E9F       DC8 154, 155, 156, 157, 158, 159, 160, 161, 162, 163
   \              A0A1A2A3    
   \   000001A4   A4A5A6A7A8A9       DC8 164, 165, 166, 167, 168, 169, 170, 171, 172, 173
   \              AAABACAD    
   \   000001AE   AEAFB0B1B2B3       DC8 174, 175, 176, 177, 178, 179, 180, 181, 182, 183
   \              B4B5B6B7    
   \   000001B8   B8B9BABBBCBD       DC8 184, 185, 186, 187, 188, 189, 190, 191, 192, 193
   \              BEBFC0C1    
   \   000001C2   C2C3C4C5C6C7       DC8 194, 195, 196, 197, 198, 199, 200, 201, 202, 203
   \              C8C9CACB    
   \   000001CC   CCCDCECFD0D1       DC8 204, 205, 206, 207, 208, 209, 210, 211, 212, 213
   \              D2D3D4D5    
   \   000001D6   D6D7D8D9DADB       DC8 214, 215, 216, 217, 218, 219, 220, 221, 222, 223
   \              DCDDDEDF    
   \   000001E0   E0E1E2E3E4E5       DC8 224, 225, 226, 227, 228, 229, 230, 231, 232, 233
   \              E6E7E8E9    
   \   000001EA   EAEBECEDEEEF       DC8 234, 235, 236, 237, 238, 239, 240, 241, 242, 243
   \              F0F1F2F3    
   \   000001F4   F4F5F6F7F8F9       DC8 244, 245, 246, 247, 248, 249, 250, 251, 252, 253
   \              FAFBFCFD    
   \   000001FE   FEFFFFFFFFFF       DC8 254, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000208   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000212   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000021C   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000226   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000230   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000023A   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000244   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000024E   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000258   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000262   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000026C   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000276   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000280   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000028A   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   00000294   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   0000029E   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002A8   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002B2   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002BC   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002C6   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002D0   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002DA   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002E4   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002EE   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFF    
   \   000002F8   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFF        
    102          /* Values in the range of 0xffffffff - 0xffffff00 */
    103          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    104          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    105          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    106          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    107          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    108          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    109          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    110          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    111          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    112          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    113          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    114          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    115          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    116          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    117          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    118          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    119          /* Values in the range of 0x00 - 0xff */
    120          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    121          0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    122          0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    123          0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    124          0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    125          0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    126          0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    127          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    128          0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    129          0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    130          0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    131          0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    132          0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    133          0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    134          0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    135          0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
    136          /* Values in the range of 0x100 - 0x1ff */
    137          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    138          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    139          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    140          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    141          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    142          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    143          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    144          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    145          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    146          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    147          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    148          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    149          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    150          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    151          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    152          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    153          };
    154          #endif
    155          
    156          /* Decompression context */
    157          //GUI_JPEG_DCONTEXT GUI_JPEG__DContext;
    158          
    159          /* Array contains the storage order of coefficients in input data stream */

   \                                 In section .text, align 4, keep-with-next
    160          static const U8 _aCoeffOrder[] = {
   \                     _aCoeffOrder:
   \   00000000                      ; Initializer data, 80 bytes
   \   00000000   000108100902       DC8 0, 1, 8, 16, 9, 2, 3, 10, 17, 24
   \              030A1118    
   \   0000000A   2019120B0405       DC8 32, 25, 18, 11, 4, 5, 12, 19, 26, 33
   \              0C131A21    
   \   00000014   283029221B14       DC8 40, 48, 41, 34, 27, 20, 13, 6, 7, 14
   \              0D06070E    
   \   0000001E   151C232A3138       DC8 21, 28, 35, 42, 49, 56, 57, 50, 43, 36
   \              39322B24    
   \   00000028   1D160F171E25       DC8 29, 22, 15, 23, 30, 37, 44, 51, 58, 59
   \              2C333A3B    
   \   00000032   342D261F272E       DC8 52, 45, 38, 31, 39, 46, 53, 60, 61, 54
   \              353C3D36    
   \   0000003C   2F373E3F3F3F       DC8 47, 55, 62, 63, 63, 63, 63, 63, 63, 63
   \              3F3F3F3F    
   \   00000046   3F3F3F3F3F3F       DC8 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
   \              3F3F3F3F    
    161             0,  1,  8, 16,  9,  2,  3, 10,
    162            17, 24, 32, 25, 18, 11,  4,  5,
    163            12, 19, 26, 33, 40, 48, 41, 34,
    164            27, 20, 13,  6,  7, 14, 21, 28,
    165            35, 42, 49, 56, 57, 50, 43, 36,
    166            29, 22, 15, 23, 30, 37, 44, 51,
    167            58, 59, 52, 45, 38, 31, 39, 46,
    168            53, 60, 61, 54, 47, 55, 62, 63,
    169            63, 63, 63, 63, 63, 63, 63, 63,
    170            63, 63, 63, 63, 63, 63, 63, 63
    171          };
    172          
    173          /* Tables used for extending differential pulse code modulation (DPCM) values */

   \                                 In section .text, align 4, keep-with-next
    174          static const int _aExtendTest[16] = {
   \                     _aExtendTest:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   000000000100       DC32 0, 1, 2, 4, 8, 16, 32, 64, 128, 256
   \              000002000000
   \              040000000800
   \              000010000000
   \              200000004000
   \              000080000000
   \              00010000    
   \   00000028   000200000004       DC32 512, 1024, 2048, 4096, 8192, 16384
   \              000000080000
   \              001000000020
   \              000000400000
    175            0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040,
    176            0x0080, 0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000
    177          };
    178          

   \                                 In section .text, align 4, keep-with-next
    179          static const int _aExtendOffset[16] = {
   \                     _aExtendOffset:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   00000000FFFF       DC32 0, 4294967295, 4294967293, 4294967289, 4294967281, 4294967265, 4294967233, 4294967169, 4294967041, 4294966785
   \              FFFFFDFFFFFF
   \              F9FFFFFFF1FF
   \              FFFFE1FFFFFF
   \              C1FFFFFF81FF
   \              FFFF01FFFFFF
   \              01FEFFFF    
   \   00000028   01FCFFFF01F8       DC32 4294966273, 4294965249, 4294963201, 4294959105, 4294950913, 4294934529
   \              FFFF01F0FFFF
   \              01E0FFFF01C0
   \              FFFF0180FFFF
    180            0               , ((-1) <<  1) + 1, ((-1) <<  2) + 1, ((-1) <<  3) + 1,
    181            ((-1) <<  4) + 1, ((-1) <<  5) + 1, ((-1) <<  6) + 1, ((-1) <<  7) + 1,
    182            ((-1) <<  8) + 1, ((-1) <<  9) + 1, ((-1) << 10) + 1, ((-1) << 11) + 1,
    183            ((-1) << 12) + 1, ((-1) << 13) + 1, ((-1) << 14) + 1, ((-1) << 15) + 1
    184          };
    185          
    186          /*********************************************************************
    187          *
    188          *       Static code
    189          *
    190          **********************************************************************
    191          */
    192          /*********************************************************************
    193          *
    194          *       _FillInputBuffer
    195          *
    196          * Purpuse:
    197          *   Calls the 'GetData' function to fill the input buffer with new data.
    198          */
    199          static int _FillInputBuffer(GUI_JPEG_DCONTEXT * pContext) {
    200            const U8 * pBuffer;
    201            int NumBytes;
    202            if (pContext->StartOfFile) {
    203              pContext->Off         = 0;
    204              pContext->StartOfFile = 0;
    205            }
    206            NumBytes = pContext->pfGetData(pContext->pParam,       /* Void parameter passed to function */
    207                                           &pBuffer,               /* Pointer to data pointer. To be set by the function */
    208                                           INPUT_BUF_SIZE,         /* Nummer of requested bytes */
    209                                           pContext->Off);         /* Data pointer */
    210            if (!NumBytes) {
    211              return 1;
    212            }
    213            pContext->Off += NumBytes;
    214            pContext->NumBytesInBuffer = NumBytes;
    215            pContext->pBuffer          = pBuffer;
    216            return 0;
    217          }
    218          
    219          /*********************************************************************
    220          *
    221          *       _GetU8
    222          *
    223          * Purpose:
    224          *   Reads one byte from the input buffer or if stuffed bytes exist
    225          *   from the stuff buffer. If the input buffer is empty, _FillInputBuffer
    226          *   is called to fill up the buffer.
    227          */

   \                                 In section .text, align 4, keep-with-next
    228          static int _GetU8(GUI_JPEG_DCONTEXT * pContext, U8 * pByte) {
   \                     _GetU8:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    229            if (pContext->NumBytesInBuffer == 0) {
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1600001A           BNE      ??_GetU8_0
    230              _FillInputBuffer(pContext);
   \   0000001C   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000020   402DA0E3           MOV      R2,#+4096
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0000A013           MOVNE    R0,#+0
   \   00000030   08008415           STRNE    R0,[R4, #+8]
   \   00000034   1800C415           STRBNE   R0,[R4, #+24]
   \   00000038   083094E5           LDR      R3,[R4, #+8]
   \   0000003C   040094E5           LDR      R0,[R4, #+4]
   \   00000040   00C094E5           LDR      R12,[R4, #+0]
   \   00000044   3CFF2FE1           BLX      R12
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_GetU8_1
   \   00000050   081094E5           LDR      R1,[R4, #+8]
   \   00000054   011080E0           ADD      R1,R0,R1
   \   00000058   081084E5           STR      R1,[R4, #+8]
   \   0000005C   140084E5           STR      R0,[R4, #+20]
   \   00000060   00009DE5           LDR      R0,[SP, #+0]
   \   00000064   100084E5           STR      R0,[R4, #+16]
    231              if (pContext->NumBytesInBuffer == 0) {
   \                     ??_GetU8_1:
   \   00000068   140094E5           LDR      R0,[R4, #+20]
   \   0000006C   000050E3           CMP      R0,#+0
    232                return 1;
   \   00000070   0100A003           MOVEQ    R0,#+1
   \   00000074   0700000A           BEQ      ??_GetU8_2
    233              }
    234            }
    235            *pByte = *pContext->pBuffer++;
   \                     ??_GetU8_0:
   \   00000078   100094E5           LDR      R0,[R4, #+16]
   \   0000007C   0110D0E4           LDRB     R1,[R0], #+1
   \   00000080   100084E5           STR      R0,[R4, #+16]
   \   00000084   0010C5E5           STRB     R1,[R5, #+0]
    236            pContext->NumBytesInBuffer--;
   \   00000088   140094E5           LDR      R0,[R4, #+20]
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   140084E5           STR      R0,[R4, #+20]
    237            return 0;
   \   00000094   0000A0E3           MOV      R0,#+0
   \                     ??_GetU8_2:
   \   00000098   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
    238          }
    239          
    240          /*********************************************************************
    241          *
    242          *       _GetStuff
    243          *
    244          * Purpose:
    245          *   Returns bytes that have been stuffed back into the input buffer.
    246          *   After the last 'stuff'-byte has been returned, the function pointer
    247          *   pContext->pfGetU8() will be set to _GetU8()
    248          */

   \                                 In section .text, align 4, keep-with-next
    249          static int _GetStuff(GUI_JPEG_DCONTEXT * pContext, U8 * pByte) {
    250            *pByte = pContext->aStuff[--pContext->NumBytesStuffed];
   \                     _GetStuff:
   \   00000000   1D20D0E5           LDRB     R2,[R0, #+29]
   \   00000004   012042E2           SUB      R2,R2,#+1
   \   00000008   1D20C0E5           STRB     R2,[R0, #+29]
   \   0000000C   1D20D0E5           LDRB     R2,[R0, #+29]
   \   00000010   002082E0           ADD      R2,R2,R0
   \   00000014   1920D2E5           LDRB     R2,[R2, #+25]
   \   00000018   0020C1E5           STRB     R2,[R1, #+0]
    251            if (pContext->NumBytesStuffed == 0) {
   \   0000001C   1D10D0E5           LDRB     R1,[R0, #+29]
   \   00000020   000051E3           CMP      R1,#+0
    252              pContext->pfGetU8 = _GetU8;
   \   00000024   ........           LDREQ    R1,??DataTable5
   \   00000028   20108005           STREQ    R1,[R0, #+32]
    253            }
    254            return 0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1EFF2FE1           BX       LR               ;; return
    255          }
    256          
    257          /*********************************************************************
    258          *
    259          *       _StoreU8
    260          *
    261          * Purpose:
    262          *   In some cases it is required to crop the already read data back into
    263          *   the input buffer, which is done by this function. The function pointer
    264          *   pContext->pfGetU8() will be set to _GetStuff()
    265          */
    266          static int _StoreU8(GUI_JPEG_DCONTEXT * pContext, U8 Byte) {
    267            if (pContext->NumBytesStuffed == sizeof(pContext->aStuff)) {
    268              return 1;
    269            }
    270            pContext->aStuff[pContext->NumBytesStuffed++] = Byte;
    271            pContext->pfGetU8 = _GetStuff;
    272            return 0;
    273          }
    274          
    275          /*********************************************************************
    276          *
    277          *       _GetU16
    278          *
    279          * Purpose:
    280          *   Reads 2 bytes from the input buffer and returns them as U16 value.
    281          */
    282          static int _GetU16(GUI_JPEG_DCONTEXT * pContext, U16 * pValue) {
    283            U8 c0, c1;
    284            if (pContext->pfGetU8(pContext, &c0)) {
    285              return 1;
    286            }
    287            if (pContext->pfGetU8(pContext, &c1)) {
    288              return 1;
    289            }
    290            *pValue = (c0 << 8) | c1;
    291            return 0;
    292          }
    293          
    294          /*********************************************************************
    295          *
    296          *       _GetInt
    297          *
    298          * Purpose:
    299          *   Reads 2 bytes from the input buffer and returns them as integer value.
    300          */
    301          static int _GetInt(GUI_JPEG_DCONTEXT * pContext, int * pValue) {
    302            U8 c0, c1;
    303            if (pContext->pfGetU8(pContext, &c0)) {
    304              return 1;
    305            }
    306            if (pContext->pfGetU8(pContext, &c1)) {
    307              return 1;
    308            }
    309            *pValue = (c0 << 8) | c1;
    310            return 0;
    311          }
    312          
    313          /*********************************************************************
    314          *
    315          *       _GetU8_NoMarker
    316          *
    317          * Purpose:
    318          *   Reads a byte from the input stream. In case of a marker has been
    319          *   read, it returns 0xff.
    320          *
    321          */
    322          static int _GetU8_NoMarker(GUI_JPEG_DCONTEXT * pContext, U8 * pData) {
    323            U8 c;
    324            if (pContext->pfGetU8(pContext, &c)) {
    325              return 1;
    326            }
    327            if (c == 0xFF) {
    328              if (pContext->pfGetU8(pContext, &c)) {
    329                return 1;
    330              }
    331              if (c == 0x00) {
    332                *pData = 0xff;
    333                return 0;
    334              } else {
    335                _StoreU8(pContext, c);
    336                _StoreU8(pContext, 0xff);
    337                *pData = 0xff;
    338                return 0;
    339              }
    340            }
    341            *pData = c;
    342            return 0;
    343          }
    344          
    345          /*********************************************************************
    346          *
    347          *       _GetBitsNoMarker
    348          *
    349          * Purpose:
    350          *   Returns the given number of bits from the bitbuffer. If the bitbuffer
    351          *   does not contain enough bits it will be filled up.
    352          */

   \                                 In section .text, align 4, keep-with-next
    353          static unsigned _GetBitsNoMarker(GUI_JPEG_DCONTEXT * pContext, int NumBits) {
   \                     _GetBitsNoMarker:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    354            unsigned Value;
    355            /* Take the upper bits from the lower word */
    356            Value = (pContext->BitBuffer >> (16 - NumBits)) & ((1 << NumBits) - 1);
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   003062E2           RSB      R3,R2,#+0
   \   00000014   240094E5           LDR      R0,[R4, #+36]
   \   00000018   122583E0           ADD      R2,R3,R2, LSL R5
   \   0000001C   101061E2           RSB      R1,R1,#+16
   \   00000020   306102E0           AND      R6,R2,R0, LSR R1
    357            /* Fill up the buffer if it is empty */
    358            if ((pContext->NumBitsLeft -= NumBits) <= 0) {
   \   00000024   281094E5           LDR      R1,[R4, #+40]
   \   00000028   04D04DE2           SUB      SP,SP,#+4
   \   0000002C   051041E0           SUB      R1,R1,R5
   \   00000030   281084E5           STR      R1,[R4, #+40]
   \   00000034   010051E3           CMP      R1,#+1
   \   00000038   5E0000AA           BGE      ??_GetBitsNoMarker_0
    359              U8 c0, c1;
    360              /* Read 2 bytes */
    361              if (_GetU8_NoMarker(pContext, &c0)) {
   \   0000003C   01108DE2           ADD      R1,SP,#+1
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   202094E5           LDR      R2,[R4, #+32]
   \   00000048   32FF2FE1           BLX      R2
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   2A00001A           BNE      ??_GetBitsNoMarker_1
   \   00000054   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000058   FF0050E3           CMP      R0,#+255
   \   0000005C   0B00000A           BEQ      ??_GetBitsNoMarker_2
   \   00000060   0070A0E1           MOV      R7,R0
    362                return 0xff;
    363              }
    364              if (_GetU8_NoMarker(pContext, &c1)) {
   \                     ??_GetBitsNoMarker_3:
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   202094E5           LDR      R2,[R4, #+32]
   \   00000070   32FF2FE1           BLX      R2
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   2000001A           BNE      ??_GetBitsNoMarker_1
   \   0000007C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000080   FF0050E3           CMP      R0,#+255
   \   00000084   1F00000A           BEQ      ??_GetBitsNoMarker_4
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   380000EA           B        ??_GetBitsNoMarker_5
   \                     ??_GetBitsNoMarker_2:
   \   00000090   01108DE2           ADD      R1,SP,#+1
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   202094E5           LDR      R2,[R4, #+32]
   \   0000009C   32FF2FE1           BLX      R2
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   1500001A           BNE      ??_GetBitsNoMarker_1
   \   000000A8   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   1D10D415           LDRBNE   R1,[R4, #+29]
   \   000000B4   04005113           CMPNE    R1,#+4
   \   000000B8   0E00000A           BEQ      ??_GetBitsNoMarker_6
   \   000000BC   012081E2           ADD      R2,R1,#+1
   \   000000C0   1D20C4E5           STRB     R2,[R4, #+29]
   \   000000C4   041081E0           ADD      R1,R1,R4
   \   000000C8   1900C1E5           STRB     R0,[R1, #+25]
   \   000000CC   ........           LDR      R0,??DataTable5_1
   \   000000D0   200084E5           STR      R0,[R4, #+32]
   \   000000D4   1D10D4E5           LDRB     R1,[R4, #+29]
   \   000000D8   040051E3           CMP      R1,#+4
   \   000000DC   0500000A           BEQ      ??_GetBitsNoMarker_6
   \   000000E0   012081E2           ADD      R2,R1,#+1
   \   000000E4   1D20C4E5           STRB     R2,[R4, #+29]
   \   000000E8   041081E0           ADD      R1,R1,R4
   \   000000EC   FF20A0E3           MOV      R2,#+255
   \   000000F0   1920C1E5           STRB     R2,[R1, #+25]
   \   000000F4   200084E5           STR      R0,[R4, #+32]
   \                     ??_GetBitsNoMarker_6:
   \   000000F8   FF70A0E3           MOV      R7,#+255
   \   000000FC   D8FFFFEA           B        ??_GetBitsNoMarker_3
   \                     ??_GetBitsNoMarker_1:
   \   00000100   FF00A0E3           MOV      R0,#+255
   \   00000104   2F0000EA           B        ??_GetBitsNoMarker_7
   \                     ??_GetBitsNoMarker_4:
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   202094E5           LDR      R2,[R4, #+32]
   \   00000114   32FF2FE1           BLX      R2
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   F7FFFF1A           BNE      ??_GetBitsNoMarker_1
   \   00000120   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   1D10D415           LDRBNE   R1,[R4, #+29]
   \   0000012C   04005113           CMPNE    R1,#+4
   \   00000130   0E00000A           BEQ      ??_GetBitsNoMarker_8
   \   00000134   012081E2           ADD      R2,R1,#+1
   \   00000138   1D20C4E5           STRB     R2,[R4, #+29]
   \   0000013C   041081E0           ADD      R1,R1,R4
   \   00000140   1900C1E5           STRB     R0,[R1, #+25]
   \   00000144   ........           LDR      R0,??DataTable5_1
   \   00000148   200084E5           STR      R0,[R4, #+32]
   \   0000014C   1D10D4E5           LDRB     R1,[R4, #+29]
   \   00000150   040051E3           CMP      R1,#+4
   \   00000154   0500000A           BEQ      ??_GetBitsNoMarker_8
   \   00000158   012081E2           ADD      R2,R1,#+1
   \   0000015C   1D20C4E5           STRB     R2,[R4, #+29]
   \   00000160   041081E0           ADD      R1,R1,R4
   \   00000164   FF20A0E3           MOV      R2,#+255
   \   00000168   1920C1E5           STRB     R2,[R1, #+25]
   \   0000016C   200084E5           STR      R0,[R4, #+32]
   \                     ??_GetBitsNoMarker_8:
   \   00000170   FF10A0E3           MOV      R1,#+255
    365                return 0xff;
    366              }
    367              /* Add the remaining number of bits */
    368              NumBits += pContext->NumBitsLeft;
   \                     ??_GetBitsNoMarker_5:
   \   00000174   280094E5           LDR      R0,[R4, #+40]
    369              /* Empty the buffer */
    370              pContext->BitBuffer = ((pContext->BitBuffer << NumBits) | (pContext->BitBuffer >> (32 - NumBits)));
    371              /* Store the new bytes into the upper 16 bits of the buffer */
    372              pContext->BitBuffer = (pContext->BitBuffer & 0xFFFF) | (((U32)c0) << 24) | (((U32)c1) << 16);
   \   00000178   242094E5           LDR      R2,[R4, #+36]
   \   0000017C   055080E0           ADD      R5,R0,R5
   \   00000180   203065E2           RSB      R3,R5,#+32
   \   00000184   7223A0E1           ROR      R2,R2,R3
   \   00000188   0228A0E1           LSL      R2,R2,#+16
   \   0000018C   073CA0E1           LSL      R3,R7,#+24
   \   00000190   222883E1           ORR      R2,R3,R2, LSR #+16
   \   00000194   011882E1           ORR      R1,R2,R1, LSL #+16
    373              /* Adjust bitbuffer, so that next access reads the remaining bits */
    374              pContext->BitBuffer = ((pContext->BitBuffer << -(pContext->NumBitsLeft)) | (pContext->BitBuffer >> (32 + pContext->NumBitsLeft)));
   \   00000198   203080E2           ADD      R3,R0,#+32
   \   0000019C   002060E2           RSB      R2,R0,#+0
   \   000001A0   3133A0E1           LSR      R3,R1,R3
   \   000001A4   111283E1           ORR      R1,R3,R1, LSL R2
   \   000001A8   241084E5           STR      R1,[R4, #+36]
    375              /* Increment number of bits */
    376              pContext->NumBitsLeft += 16;
   \   000001AC   100080E2           ADD      R0,R0,#+16
   \   000001B0   280084E5           STR      R0,[R4, #+40]
   \   000001B4   020000EA           B        ??_GetBitsNoMarker_9
    377            } else {
    378              /* Shift the upper bits into the lower bits of the bitbuffer */
    379              pContext->BitBuffer = ((pContext->BitBuffer << NumBits) | (pContext->BitBuffer >> (32 - NumBits)));
   \                     ??_GetBitsNoMarker_0:
   \   000001B8   201065E2           RSB      R1,R5,#+32
   \   000001BC   7001A0E1           ROR      R0,R0,R1
   \   000001C0   240084E5           STR      R0,[R4, #+36]
    380            }
    381            return Value;
   \                     ??_GetBitsNoMarker_9:
   \   000001C4   0600A0E1           MOV      R0,R6
   \                     ??_GetBitsNoMarker_7:
   \   000001C8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000001CC   F080BDE8           POP      {R4-R7,PC}       ;; return
    382          }
    383          
    384          /*********************************************************************
    385          *
    386          *       _InitBitBuffer
    387          */
    388          static void _InitBitBuffer(GUI_JPEG_DCONTEXT * pContext) {
    389            pContext->NumBitsLeft = 16;
    390            _GetBitsNoMarker(pContext, 16);
    391            _GetBitsNoMarker(pContext, 16);
    392          }
    393          
    394          /*********************************************************************
    395          *
    396          *       _ReadFirstMarker
    397          *
    398          * Porpose:
    399          *   Reads the first marker of the data stream. First marker has to be
    400          *   a Start Of Image (SOI) marker
    401          */
    402          static int _ReadFirstMarker(GUI_JPEG_DCONTEXT * pContext, U8 * pMarker) {
    403            U8 c0, c1;
    404            if (pContext->pfGetU8(pContext, &c0)) return 1;
    405            if (pContext->pfGetU8(pContext, &c1)) return 1;
    406            if ((c0 != 0xff) || (c1 != M_SOI)) return 1;
    407            *pMarker = c1;
    408            return 0;
    409          }
    410          
    411          /*********************************************************************
    412          *
    413          *       _ReadNextMarker
    414          *
    415          * Purpose:
    416          *   Reads a marker whith respect of padding bytes
    417          */
    418          static int _ReadNextMarker(GUI_JPEG_DCONTEXT * pContext, U8 * pMarker) {
    419            U8 c;
    420            while (1) {
    421              if (pContext->pfGetU8(pContext, &c)) return 1;
    422              /* Skip any non-FF bytes */
    423              while (c != 0xff) {
    424                if (pContext->pfGetU8(pContext, &c)) return 1;
    425              }
    426              /* This loop swallows any duplicate FF bytes. Extra FFs are legal. */
    427              do {
    428                if (pContext->pfGetU8(pContext, &c)) return 1;
    429              } while (c == 0xFF);
    430              if (c != 0) {
    431                break;	/* Found a valid marker, exit loop */
    432              }
    433            }
    434            *pMarker = c;
    435            return 0;
    436          }
    437          
    438          /*********************************************************************
    439          *
    440          *       _SkipInputData
    441          *
    442          * Purpose:
    443          *   Skips the given number of bytes in the input buffer.
    444          */
    445          static void _SkipInputData(GUI_JPEG_DCONTEXT * pContext, I32 Length) {
    446            if (Length > 0) {
    447              while (Length > (I32)pContext->NumBytesInBuffer) {
    448                Length -= pContext->NumBytesInBuffer;
    449                _FillInputBuffer(pContext);
    450              }
    451              pContext->pBuffer          += Length;
    452              pContext->NumBytesInBuffer -= Length;
    453            }
    454          }
    455          
    456          /*********************************************************************
    457          *
    458          *       _SkipVariable
    459          *
    460          * Purpose:
    461          *   Skips a complete variable block which is preceeded by the number of
    462          *   bytes in the block.
    463          */

   \                                 In section .text, align 4, keep-with-next
    464          static int _SkipVariable(GUI_JPEG_DCONTEXT * pContext) {
   \                     _SkipVariable:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
    465            int Length;
    466            if (_GetInt(pContext, &Length)) return 1;
   \   0000000C   01108DE2           ADD      R1,SP,#+1
   \   00000010   202094E5           LDR      R2,[R4, #+32]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??_SkipVariable_0
   \                     ??_SkipVariable_1:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   290000EA           B        ??_SkipVariable_2
   \                     ??_SkipVariable_0:
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   202094E5           LDR      R2,[R4, #+32]
   \   00000034   32FF2FE1           BLX      R2
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F7FFFF1A           BNE      ??_SkipVariable_1
    467            Length -= 2;
    468            _SkipInputData(pContext, Length);
   \   00000040   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000044   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000048   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000004C   025040E2           SUB      R5,R0,#+2
   \   00000050   010055E3           CMP      R5,#+1
   \   00000054   1C0000BA           BLT      ??_SkipVariable_3
   \   00000058   130000EA           B        ??_SkipVariable_4
   \                     ??_SkipVariable_5:
   \   0000005C   005045E0           SUB      R5,R5,R0
   \   00000060   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000064   402DA0E3           MOV      R2,#+4096
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0000A013           MOVNE    R0,#+0
   \   00000074   08008415           STRNE    R0,[R4, #+8]
   \   00000078   1800C415           STRBNE   R0,[R4, #+24]
   \   0000007C   083094E5           LDR      R3,[R4, #+8]
   \   00000080   040094E5           LDR      R0,[R4, #+4]
   \   00000084   00C094E5           LDR      R12,[R4, #+0]
   \   00000088   3CFF2FE1           BLX      R12
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0500000A           BEQ      ??_SkipVariable_4
   \   00000094   081094E5           LDR      R1,[R4, #+8]
   \   00000098   011080E0           ADD      R1,R0,R1
   \   0000009C   081084E5           STR      R1,[R4, #+8]
   \   000000A0   140084E5           STR      R0,[R4, #+20]
   \   000000A4   04009DE5           LDR      R0,[SP, #+4]
   \   000000A8   100084E5           STR      R0,[R4, #+16]
   \                     ??_SkipVariable_4:
   \   000000AC   140094E5           LDR      R0,[R4, #+20]
   \   000000B0   050050E1           CMP      R0,R5
   \   000000B4   E8FFFFBA           BLT      ??_SkipVariable_5
   \   000000B8   101094E5           LDR      R1,[R4, #+16]
   \   000000BC   050040E0           SUB      R0,R0,R5
   \   000000C0   011085E0           ADD      R1,R5,R1
   \   000000C4   101084E5           STR      R1,[R4, #+16]
   \   000000C8   140084E5           STR      R0,[R4, #+20]
    469            return 0;
   \                     ??_SkipVariable_3:
   \   000000CC   0000A0E3           MOV      R0,#+0
   \                     ??_SkipVariable_2:
   \   000000D0   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000D4   3080BDE8           POP      {R4,R5,PC}       ;; return
    470          }
    471          
    472          /*********************************************************************
    473          *
    474          *       _GetDQT
    475          *
    476          * Purpose:
    477          *   Reads the definition of a quantization table.
    478          */

   \                                 In section .text, align 4, keep-with-next
    479          static int _GetDQT(GUI_JPEG_DCONTEXT * pContext) {
   \                     _GetDQT:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    480            int Length;
    481            U8 n, Precision;
    482            U16 * pData;
    483            int i;
    484            if (_GetInt(pContext, &Length)) return 1;
   \   0000000C   01108DE2           ADD      R1,SP,#+1
   \   00000010   202094E5           LDR      R2,[R4, #+32]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??_GetDQT_0
   \                     ??_GetDQT_1:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   4B0000EA           B        ??_GetDQT_2
   \                     ??_GetDQT_0:
   \   00000028   02108DE2           ADD      R1,SP,#+2
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   202094E5           LDR      R2,[R4, #+32]
   \   00000034   32FF2FE1           BLX      R2
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F7FFFF1A           BNE      ??_GetDQT_1
    485            Length -= 2;
   \   00000040   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000044   0210DDE5           LDRB     R1,[SP, #+2]
   \   00000048   0C70A0E3           MOV      R7,#+12
   \   0000004C   ............       ADRL     R6,_aCoeffOrder
   \              ....        
   \   00000054   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000058   025040E2           SUB      R5,R0,#+2
   \   0000005C   717C87E3           ORR      R7,R7,#0x7100
    486            while (Length > 0) {
   \                     ??_GetDQT_3:
   \   00000060   010055E3           CMP      R5,#+1
   \   00000064   380000BA           BLT      ??_GetDQT_4
    487              if (pContext->pfGetU8(pContext, &n)) return 1;
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   202094E5           LDR      R2,[R4, #+32]
   \   00000074   32FF2FE1           BLX      R2
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   E7FFFF1A           BNE      ??_GetDQT_1
    488              Precision = n >> 4;
   \   00000080   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000084   2082A0E1           LSR      R8,R0,#+4
    489              n &= 0xf;
   \   00000088   0F0000E2           AND      R0,R0,#0xF
   \   0000008C   0000CDE5           STRB     R0,[SP, #+0]
    490              /* Number of tables is limited to 4 */
    491              if (n >= GUI_COUNTOF(pContext->aaQuantTbl)) {
   \   00000090   040050E3           CMP      R0,#+4
   \   00000094   E1FFFF2A           BCS      ??_GetDQT_1
    492                return 1;
    493              }
    494              pData = &pContext->aaQuantTbl[n][0];
   \                     ??_GetDQT_5:
   \   00000098   801384E0           ADD      R1,R4,R0, LSL #+7
   \   0000009C   019087E0           ADD      R9,R7,R1
    495              pContext->apQuantTbl[n] = pData;
   \   000000A0   801F87E3           ORR      R1,R7,#0x200
   \   000000A4   000184E0           ADD      R0,R4,R0, LSL #+2
   \   000000A8   009081E7           STR      R9,[R1, +R0]
    496              for (i = 0; i < 64; i++) {
   \   000000AC   00A0A0E3           MOV      R10,#+0
   \   000000B0   09B0A0E1           MOV      R11,R9
    497                U8  Byte;
    498                U16 Word;
    499                if (Precision) {
   \                     ??_GetDQT_6:
   \   000000B4   000058E3           CMP      R8,#+0
   \   000000B8   1200000A           BEQ      ??_GetDQT_7
    500                  if (_GetU16(pContext, &Word)) return 1;
   \   000000BC   02108DE2           ADD      R1,SP,#+2
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   202094E5           LDR      R2,[R4, #+32]
   \   000000C8   32FF2FE1           BLX      R2
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   D2FFFF1A           BNE      ??_GetDQT_1
   \   000000D4   01108DE2           ADD      R1,SP,#+1
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   202094E5           LDR      R2,[R4, #+32]
   \   000000E0   32FF2FE1           BLX      R2
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   CCFFFF1A           BNE      ??_GetDQT_1
    501                  *(pData + _aCoeffOrder[i]) = Word;
   \   000000EC   0600DAE7           LDRB     R0,[R10, +R6]
   \   000000F0   0210DDE5           LDRB     R1,[SP, #+2]
   \   000000F4   0120DDE5           LDRB     R2,[SP, #+1]
   \   000000F8   800089E0           ADD      R0,R9,R0, LSL #+1
   \   000000FC   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000100   B010C0E1           STRH     R1,[R0, #+0]
   \   00000104   070000EA           B        ??_GetDQT_8
    502                } else {
    503                  if (pContext->pfGetU8(pContext, &Byte)) return 1;
   \                     ??_GetDQT_7:
   \   00000108   03108DE2           ADD      R1,SP,#+3
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   202094E5           LDR      R2,[R4, #+32]
   \   00000114   32FF2FE1           BLX      R2
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   BFFFFF1A           BNE      ??_GetDQT_1
    504                  *(pData + i) = Byte;
   \   00000120   0300DDE5           LDRB     R0,[SP, #+3]
   \   00000124   B000CBE1           STRH     R0,[R11, #+0]
    505                }
    506              }
   \                     ??_GetDQT_8:
   \   00000128   01A08AE2           ADD      R10,R10,#+1
   \   0000012C   02B08BE2           ADD      R11,R11,#+2
   \   00000130   40005AE3           CMP      R10,#+64
   \   00000134   DEFFFFBA           BLT      ??_GetDQT_6
    507              if (Precision) {
   \   00000138   000058E3           CMP      R8,#+0
    508                Length -= 1 + (64 << 1);
    509              } else {
    510                Length -= 1 + 64;
   \   0000013C   8000E013           MVNNE    R0,#+128
   \   00000140   41504502           SUBEQ    R5,R5,#+65
   \   00000144   05508010           ADDNE    R5,R0,R5
   \   00000148   C4FFFFEA           B        ??_GetDQT_3
    511              }
    512            }
    513            if (Length != 0) {
   \                     ??_GetDQT_4:
   \   0000014C   000055E3           CMP      R5,#+0
   \   00000150   B2FFFF1A           BNE      ??_GetDQT_1
    514              return 1;
    515            }
    516            return 0;
   \   00000154   0000A0E3           MOV      R0,#+0
   \                     ??_GetDQT_2:
   \   00000158   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000015C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    517          }
    518          
    519          /*********************************************************************
    520          *
    521          *       _GetSOF
    522          *
    523          * Purpose:
    524          *   Read the start of frame (SOF) marker.
    525          */

   \                                 In section .text, align 4, keep-with-next
    526          static int _GetSOF(GUI_JPEG_DCONTEXT * pContext) {
   \                     _GetSOF:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    527            int Length, i;
    528            U8 Prec;
    529            if (_GetInt(pContext, &Length)) return 1;
   \   0000000C   01108DE2           ADD      R1,SP,#+1
   \   00000010   202094E5           LDR      R2,[R4, #+32]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0E00001A           BNE      ??_GetSOF_0
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   202094E5           LDR      R2,[R4, #+32]
   \   0000002C   32FF2FE1           BLX      R2
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0800001A           BNE      ??_GetSOF_0
   \   00000038   0100DDE5           LDRB     R0,[SP, #+1]
   \   0000003C   0010DDE5           LDRB     R1,[SP, #+0]
    530            if (pContext->pfGetU8 (pContext, &Prec)) return 1;
   \   00000040   202094E5           LDR      R2,[R4, #+32]
   \   00000044   006481E1           ORR      R6,R1,R0, LSL #+8
   \   00000048   02108DE2           ADD      R1,SP,#+2
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   32FF2FE1           BLX      R2
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0100000A           BEQ      ??_GetSOF_1
   \                     ??_GetSOF_0:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   5A0000EA           B        ??_GetSOF_2
    531            if (_GetU16(pContext, &pContext->ySize)) return 1;
   \                     ??_GetSOF_1:
   \   00000064   0E5084E2           ADD      R5,R4,#+14
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   202094E5           LDR      R2,[R4, #+32]
   \   00000074   32FF2FE1           BLX      R2
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   F6FFFF1A           BNE      ??_GetSOF_0
   \   00000080   01108DE2           ADD      R1,SP,#+1
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   202094E5           LDR      R2,[R4, #+32]
   \   0000008C   32FF2FE1           BLX      R2
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   F0FFFF1A           BNE      ??_GetSOF_0
   \   00000098   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000009C   0110DDE5           LDRB     R1,[SP, #+1]
   \   000000A0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000A4   B000C5E1           STRH     R0,[R5, #+0]
    532            if (_GetU16(pContext, &pContext->xSize)) return 1;
   \   000000A8   0C5084E2           ADD      R5,R4,#+12
   \   000000AC   01108DE2           ADD      R1,SP,#+1
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   202094E5           LDR      R2,[R4, #+32]
   \   000000B8   32FF2FE1           BLX      R2
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   E5FFFF1A           BNE      ??_GetSOF_0
   \   000000C4   0D10A0E1           MOV      R1,SP
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   202094E5           LDR      R2,[R4, #+32]
   \   000000D0   32FF2FE1           BLX      R2
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   DFFFFF1A           BNE      ??_GetSOF_0
   \   000000DC   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000E0   0010DDE5           LDRB     R1,[SP, #+0]
   \   000000E4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000E8   B000C5E1           STRH     R0,[R5, #+0]
    533            if (pContext->pfGetU8 (pContext, &pContext->NumCompsPerFrame)) return 1;
   \   000000EC   1C50A0E3           MOV      R5,#+28
   \   000000F0   735C85E3           ORR      R5,R5,#0x7300
   \   000000F4   041085E0           ADD      R1,R5,R4
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   202094E5           LDR      R2,[R4, #+32]
   \   00000100   32FF2FE1           BLX      R2
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   D3FFFF1A           BNE      ??_GetSOF_0
    534            Length -= 8;
    535            if ((pContext->ySize == 0) || (pContext->xSize == 0)) {
   \   0000010C   BE00D4E1           LDRH     R0,[R4, #+14]
   \   00000110   086046E2           SUB      R6,R6,#+8
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   BC00D411           LDRHNE   R0,[R4, #+12]
   \   0000011C   00005013           CMPNE    R0,#+0
   \   00000120   CDFFFF0A           BEQ      ??_GetSOF_0
    536              return 1; /* Error: Empty image */
    537            }
    538            if (pContext->NumCompsPerFrame > MAX_COMPONENTS) {
   \   00000124   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000128   050050E3           CMP      R0,#+5
   \   0000012C   CAFFFF2A           BCS      ??_GetSOF_0
    539              return 1; /* Error: Unsupported number of components */
    540            }
    541            if (Length != pContext->NumCompsPerFrame * 3) {
   \   00000130   800080E0           ADD      R0,R0,R0, LSL #+1
   \   00000134   000056E1           CMP      R6,R0
   \   00000138   C7FFFF1A           BNE      ??_GetSOF_0
    542              return 1; /* Error: Bad length */
    543            }
    544            for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \   0000013C   0060A0E3           MOV      R6,#+0
   \   00000140   0470A0E1           MOV      R7,R4
   \   00000144   098085E2           ADD      R8,R5,#+9
   \   00000148   019085E3           ORR      R9,R5,#0x1
   \   0000014C   0DA085E2           ADD      R10,R5,#+13
   \   00000150   1A0000EA           B        ??_GetSOF_3
    545              U8 c;
    546              if (pContext->pfGetU8 (pContext, &pContext->aCompId[i])) return 1;
   \                     ??_GetSOF_4:
   \   00000154   07108AE0           ADD      R1,R10,R7
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   202094E5           LDR      R2,[R4, #+32]
   \   00000160   32FF2FE1           BLX      R2
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   BBFFFF1A           BNE      ??_GetSOF_0
    547              if (pContext->pfGetU8 (pContext, &c)) return 1;
   \   0000016C   0D10A0E1           MOV      R1,SP
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   202094E5           LDR      R2,[R4, #+32]
   \   00000178   32FF2FE1           BLX      R2
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   B5FFFF1A           BNE      ??_GetSOF_0
    548              pContext->aCompHSamp[i] = c >> 4;
   \   00000184   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000188   2002A0E1           LSR      R0,R0,#+4
   \   0000018C   0700C9E7           STRB     R0,[R9, +R7]
    549              pContext->aCompVSamp[i] = c & 0xf;
   \   00000190   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000194   070089E0           ADD      R0,R9,R7
   \   00000198   0F1001E2           AND      R1,R1,#0xF
   \   0000019C   0410C0E5           STRB     R1,[R0, #+4]
    550              if (pContext->pfGetU8 (pContext, &pContext->aCompQuant[i])) return 1;
   \   000001A0   071088E0           ADD      R1,R8,R7
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   202094E5           LDR      R2,[R4, #+32]
   \   000001AC   32FF2FE1           BLX      R2
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   A8FFFF1A           BNE      ??_GetSOF_0
    551            }
   \   000001B8   016086E2           ADD      R6,R6,#+1
   \   000001BC   017087E2           ADD      R7,R7,#+1
   \                     ??_GetSOF_3:
   \   000001C0   0400D5E7           LDRB     R0,[R5, +R4]
   \   000001C4   000056E1           CMP      R6,R0
   \   000001C8   E1FFFFBA           BLT      ??_GetSOF_4
    552            return 0;
   \   000001CC   0000A0E3           MOV      R0,#+0
   \                     ??_GetSOF_2:
   \   000001D0   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000001D4   F087BDE8           POP      {R4-R10,PC}      ;; return
    553          }
    554          
    555          /*********************************************************************
    556          *
    557          *       _GetDHT
    558          *
    559          * Purpose:
    560          *   Read the definition of a Huffman code table.
    561          */

   \                                 In section .text, align 4, keep-with-next
    562          static int _GetDHT(GUI_JPEG_DCONTEXT * pContext) {
   \                     _GetDHT:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    563            int Length, Cnt;
    564            if (_GetInt(pContext, &Length)) return 1;
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   202094E5           LDR      R2,[R4, #+32]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500001A           BNE      ??_GetDHT_0
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   202094E5           LDR      R2,[R4, #+32]
   \   0000002C   32FF2FE1           BLX      R2
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100000A           BEQ      ??_GetDHT_1
   \                     ??_GetDHT_0:
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   510000EA           B        ??_GetDHT_2
    565            Length -= 2;
   \                     ??_GetDHT_1:
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   0110DDE5           LDRB     R1,[SP, #+1]
   \   00000048   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000004C   025040E2           SUB      R5,R0,#+2
   \   00000050   490000EA           B        ??_GetDHT_3
    566            while (Length > 16) {
    567              int i;
    568              U8 Index;
    569              U8 * pData;
    570              if (pContext->pfGetU8(pContext, &Index)) return 1;
   \                     ??_GetDHT_4:
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   202094E5           LDR      R2,[R4, #+32]
   \   00000060   32FF2FE1           BLX      R2
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F2FFFF1A           BNE      ??_GetDHT_0
    571              Index = (Index & 0x0f) + ((Index & 0x10) >> 4) * (MAX_HUFFTABLES >> 1);
   \   0000006C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   0F1000E2           AND      R1,R0,#0xF
   \   00000078   400202E0           AND      R0,R2,R0, ASR #+4
   \   0000007C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000080   0000CDE5           STRB     R0,[SP, #+0]
    572              if (Index > MAX_HUFFTABLES) {
   \   00000084   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000088   090050E3           CMP      R0,#+9
   \   0000008C   E9FFFF2A           BCS      ??_GetDHT_0
    573                return 1;
    574              }
    575              /* Read number of Huffman codes per bit size */
    576              pContext->aHuffNumTableAvail[Index] = 1;
   \   00000090   040080E0           ADD      R0,R0,R4
   \   00000094   2C20C0E5           STRB     R2,[R0, #+44]
    577              pData    = &pContext->aaHuffNum[Index][0];
   \   00000098   0000DDE5           LDRB     R0,[SP, #+0]
    578              Cnt      = 0;
   \   0000009C   0070A0E3           MOV      R7,#+0
    579              *pData++ = 0;
    580              for (i = 1; i <= 16; i++) {
   \   000000A0   1080A0E3           MOV      R8,#+16
   \   000000A4   000280E0           ADD      R0,R0,R0, LSL #+4
   \   000000A8   040080E0           ADD      R0,R0,R4
   \   000000AC   346080E2           ADD      R6,R0,#+52
   \   000000B0   0170C6E4           STRB     R7,[R6], #+1
    581                U8 c;
    582                if (pContext->pfGetU8(pContext, &c)) return 1;
   \                     ??_GetDHT_5:
   \   000000B4   01108DE2           ADD      R1,SP,#+1
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   202094E5           LDR      R2,[R4, #+32]
   \   000000C0   32FF2FE1           BLX      R2
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   DAFFFF1A           BNE      ??_GetDHT_0
    583                *pData++ = c;
   \   000000CC   0100DDE5           LDRB     R0,[SP, #+1]
    584                Cnt += c;
    585              }
   \   000000D0   018058E2           SUBS     R8,R8,#+1
   \   000000D4   0100C6E4           STRB     R0,[R6], #+1
   \   000000D8   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000DC   077080E0           ADD      R7,R0,R7
   \   000000E0   F3FFFF1A           BNE      ??_GetDHT_5
    586              Length -= 16 + 1; /* 16 numbers + index */
   \   000000E4   115045E2           SUB      R5,R5,#+17
    587              if ((Cnt > 255) || (Cnt > Length)) {
   \   000000E8   400F57E3           CMP      R7,#+256
   \   000000EC   D1FFFFAA           BGE      ??_GetDHT_0
   \   000000F0   070055E1           CMP      R5,R7
   \   000000F4   CFFFFFBA           BLT      ??_GetDHT_0
    588                return 1;
    589              }
    590              /* Read Huffman codes */
    591              pData = &pContext->aaHuffVal[Index][0];
   \   000000F8   0000DDE5           LDRB     R0,[SP, #+0]
    592              for (i = 0; i < Cnt; i++) {
   \   000000FC   010057E3           CMP      R7,#+1
   \   00000100   000484E0           ADD      R0,R4,R0, LSL #+8
   \   00000104   BC6080E2           ADD      R6,R0,#+188
   \   00000108   1A0000BA           BLT      ??_GetDHT_6
   \   0000010C   010017E3           TST      R7,#0x1
   \   00000110   0600000A           BEQ      ??_GetDHT_7
    593                if (pContext->pfGetU8(pContext, pData++)) return 1;
   \   00000114   0610A0E1           MOV      R1,R6
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   202094E5           LDR      R2,[R4, #+32]
   \   00000120   32FF2FE1           BLX      R2
   \   00000124   016086E2           ADD      R6,R6,#+1
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   C1FFFF1A           BNE      ??_GetDHT_0
   \                     ??_GetDHT_7:
   \   00000130   A780B0E1           LSRS     R8,R7,#+1
   \   00000134   0F00000A           BEQ      ??_GetDHT_6
   \                     ??_GetDHT_8:
   \   00000138   0610A0E1           MOV      R1,R6
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   202094E5           LDR      R2,[R4, #+32]
   \   00000144   32FF2FE1           BLX      R2
   \   00000148   016086E2           ADD      R6,R6,#+1
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   B8FFFF1A           BNE      ??_GetDHT_0
   \   00000154   0610A0E1           MOV      R1,R6
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   202094E5           LDR      R2,[R4, #+32]
   \   00000160   32FF2FE1           BLX      R2
   \   00000164   016086E2           ADD      R6,R6,#+1
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   B1FFFF1A           BNE      ??_GetDHT_0
    594              }
   \   00000170   018058E2           SUBS     R8,R8,#+1
   \   00000174   EFFFFF1A           BNE      ??_GetDHT_8
    595              Length -= Cnt;
   \                     ??_GetDHT_6:
   \   00000178   075045E0           SUB      R5,R5,R7
    596            }
   \                     ??_GetDHT_3:
   \   0000017C   110055E3           CMP      R5,#+17
   \   00000180   B3FFFFAA           BGE      ??_GetDHT_4
    597            return 0;
   \   00000184   0000A0E3           MOV      R0,#+0
   \                     ??_GetDHT_2:
   \   00000188   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000018C   F081BDE8           POP      {R4-R8,PC}       ;; return
    598          }
    599          
    600          /*********************************************************************
    601          *
    602          *       _GetSOS
    603          *
    604          * Purpose:
    605          *   Reads a Start Of Scan (SOS) marker.
    606          */

   \                                 In section .text, align 4, keep-with-next
    607          static int _GetSOS(GUI_JPEG_DCONTEXT * pContext) {
   \                     _GetSOS:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
    608            int Length, i;
    609            U8 n, c, SpectralStart, SpectralEnd;
    610            if (_GetInt(pContext, &Length)) return 1;
   \   0000000C   03108DE2           ADD      R1,SP,#+3
   \   00000010   202094E5           LDR      R2,[R4, #+32]
   \   00000014   32FF2FE1           BLX      R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0E00001A           BNE      ??_GetSOS_0
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   202094E5           LDR      R2,[R4, #+32]
   \   0000002C   32FF2FE1           BLX      R2
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0800001A           BNE      ??_GetSOS_0
   \   00000038   0300DDE5           LDRB     R0,[SP, #+3]
   \   0000003C   0110DDE5           LDRB     R1,[SP, #+1]
    611            if (pContext->pfGetU8(pContext, &n)) return 1;
   \   00000040   202094E5           LDR      R2,[R4, #+32]
   \   00000044   005481E1           ORR      R5,R1,R0, LSL #+8
   \   00000048   02108DE2           ADD      R1,SP,#+2
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   32FF2FE1           BLX      R2
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0100000A           BEQ      ??_GetSOS_1
   \                     ??_GetSOS_0:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   840000EA           B        ??_GetSOS_2
    612            if ((Length != (n * 2 + 6)) || (n > MAX_COMPSINSCAN)) {
   \                     ??_GetSOS_1:
   \   00000064   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000068   0610A0E3           MOV      R1,#+6
   \   0000006C   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000070   000055E1           CMP      R5,R0
   \   00000074   F8FFFF1A           BNE      ??_GetSOS_0
   \   00000078   0200DDE5           LDRB     R0,[SP, #+2]
   \   0000007C   050050E3           CMP      R0,#+5
   \   00000080   F5FFFF2A           BCS      ??_GetSOS_0
    613              return 1; /* Error: Bad length */
    614            }
    615            Length -= 3;
    616            pContext->NumCompsPerScan = n;
   \   00000084   0210DDE5           LDRB     R1,[SP, #+2]
   \   00000088   2D00A0E3           MOV      R0,#+45
   \   0000008C   730C80E3           ORR      R0,R0,#0x7300
   \   00000090   035045E2           SUB      R5,R5,#+3
   \   00000094   0410C0E7           STRB     R1,[R0, +R4]
    617            for (i = 0; i < n; i++) {
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   0470A0E1           MOV      R7,R4
   \   000000A0   058080E2           ADD      R8,R0,#+5
   \   000000A4   019080E2           ADD      R9,R0,#+1
   \   000000A8   04A0C0E3           BIC      R10,R0,#0x4
   \   000000AC   11B040E2           SUB      R11,R0,#+17
   \   000000B0   150000EA           B        ??_GetSOS_3
    618              int j;
    619              U8 Id, Found;
    620              if (pContext->pfGetU8(pContext, &Id)) return 1;
    621              if (pContext->pfGetU8(pContext, &c))  return 1;
    622              Length -= 2;
    623              for (j = 0, Found = 0; j < pContext->NumCompsPerFrame; j++) {
   \                     ??_GetSOS_4:
   \   000000B4   010080E2           ADD      R0,R0,#+1
   \   000000B8   011081E2           ADD      R1,R1,#+1
   \                     ??_GetSOS_5:
   \   000000BC   0420DBE7           LDRB     R2,[R11, +R4]
   \   000000C0   020050E1           CMP      R0,R2
   \   000000C4   E4FFFFAA           BGE      ??_GetSOS_0
    624                if (Id == pContext->aCompId[j]) {
   \   000000C8   0120DDE5           LDRB     R2,[SP, #+1]
   \   000000CC   0130DAE7           LDRB     R3,[R10, +R1]
   \   000000D0   030052E1           CMP      R2,R3
   \   000000D4   F6FFFF1A           BNE      ??_GetSOS_4
    625                  Found = 1;
    626                  break;
    627                }
    628              }
    629              if (!Found) {
    630                return 1;
    631              }
    632              pContext->aCompList[i]  = j;
   \   000000D8   0700C9E7           STRB     R0,[R9, +R7]
    633              pContext->aCompDC_Tab[j] = (c >> 4) & 0xf;
   \   000000DC   0020DDE5           LDRB     R2,[SP, #+0]
   \   000000E0   041080E0           ADD      R1,R0,R4
    634              pContext->aCompAC_Tab[j] = (c & 0xf) + (MAX_HUFFTABLES >> 1);
   \   000000E4   040080E0           ADD      R0,R0,R4
   \   000000E8   2222A0E1           LSR      R2,R2,#+4
   \   000000EC   0120C8E7           STRB     R2,[R8, +R1]
   \   000000F0   0010DDE5           LDRB     R1,[SP, #+0]
   \   000000F4   000088E0           ADD      R0,R8,R0
   \   000000F8   016086E2           ADD      R6,R6,#+1
   \   000000FC   0F1001E2           AND      R1,R1,#0xF
   \   00000100   041081E2           ADD      R1,R1,#+4
   \   00000104   0410C0E5           STRB     R1,[R0, #+4]
   \   00000108   017087E2           ADD      R7,R7,#+1
   \                     ??_GetSOS_3:
   \   0000010C   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000110   000056E1           CMP      R6,R0
   \   00000114   0E0000AA           BGE      ??_GetSOS_6
   \   00000118   01108DE2           ADD      R1,SP,#+1
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   202094E5           LDR      R2,[R4, #+32]
   \   00000124   32FF2FE1           BLX      R2
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   CAFFFF1A           BNE      ??_GetSOS_0
   \   00000130   0D10A0E1           MOV      R1,SP
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   202094E5           LDR      R2,[R4, #+32]
   \   0000013C   32FF2FE1           BLX      R2
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   C4FFFF1A           BNE      ??_GetSOS_0
   \   00000148   025045E2           SUB      R5,R5,#+2
   \   0000014C   0410A0E1           MOV      R1,R4
   \   00000150   D9FFFFEA           B        ??_GetSOS_5
    635            }
    636            if (pContext->pfGetU8(pContext, &SpectralStart)) return 1;
   \                     ??_GetSOS_6:
   \   00000154   05108DE2           ADD      R1,SP,#+5
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   202094E5           LDR      R2,[R4, #+32]
   \   00000160   32FF2FE1           BLX      R2
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   BBFFFF1A           BNE      ??_GetSOS_0
    637            if (pContext->pfGetU8(pContext, &SpectralEnd)) return 1;
   \   0000016C   04108DE2           ADD      R1,SP,#+4
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   202094E5           LDR      R2,[R4, #+32]
   \   00000178   32FF2FE1           BLX      R2
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   B5FFFF1A           BNE      ??_GetSOS_0
    638            if (pContext->pfGetU8(pContext, &c)) return 1;
   \   00000184   0D10A0E1           MOV      R1,SP
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   202094E5           LDR      R2,[R4, #+32]
   \   00000190   32FF2FE1           BLX      R2
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   AFFFFF1A           BNE      ??_GetSOS_0
    639            pContext->SuccessiveHigh = c >> 4;
   \   0000019C   0010DDE5           LDRB     R1,[SP, #+0]
   \   000001A0   450088E3           ORR      R0,R8,#0x45
   \   000001A4   2112A0E1           LSR      R1,R1,#+4
   \   000001A8   0410C0E7           STRB     R1,[R0, +R4]
    640            pContext->SuccessiveLow  = c & 0xf;
   \   000001AC   0010DDE5           LDRB     R1,[SP, #+0]
   \   000001B0   0100C0E3           BIC      R0,R0,#0x1
   \   000001B4   0F1001E2           AND      R1,R1,#0xF
   \   000001B8   0410C0E7           STRB     R1,[R0, +R4]
    641            if (pContext->IsProgressive) {
   \   000001BC   010040E2           SUB      R0,R0,#+1
   \   000001C0   9C2080E2           ADD      R2,R0,#+156
   \   000001C4   0420D2E7           LDRB     R2,[R2, +R4]
   \   000001C8   0110C0E3           BIC      R1,R0,#0x1
   \   000001CC   000052E3           CMP      R2,#+0
   \   000001D0   0300000A           BEQ      ??_GetSOS_7
    642              pContext->SpectralStart = SpectralStart;
   \   000001D4   0520DDE5           LDRB     R2,[SP, #+5]
   \   000001D8   0420C1E7           STRB     R2,[R1, +R4]
    643              pContext->SpectralEnd   = SpectralEnd;
   \   000001DC   0410DDE5           LDRB     R1,[SP, #+4]
   \   000001E0   010000EA           B        ??_GetSOS_8
    644            } else {
    645              pContext->SpectralStart = 0;
   \                     ??_GetSOS_7:
   \   000001E4   0420C1E7           STRB     R2,[R1, +R4]
    646              pContext->SpectralEnd   = 63;
   \   000001E8   3F10A0E3           MOV      R1,#+63
    647            }
    648            Length -= 3;
    649            _SkipInputData(pContext, Length);
   \                     ??_GetSOS_8:
   \   000001EC   035045E2           SUB      R5,R5,#+3
   \   000001F0   0410C0E7           STRB     R1,[R0, +R4]
   \   000001F4   010055E3           CMP      R5,#+1
   \   000001F8   1D0000BA           BLT      ??_GetSOS_9
   \   000001FC   130000EA           B        ??_GetSOS_10
   \                     ??_GetSOS_11:
   \   00000200   005045E0           SUB      R5,R5,R0
   \   00000204   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000208   402DA0E3           MOV      R2,#+4096
   \   0000020C   08108DE2           ADD      R1,SP,#+8
   \   00000210   000050E3           CMP      R0,#+0
   \   00000214   0000A013           MOVNE    R0,#+0
   \   00000218   08008415           STRNE    R0,[R4, #+8]
   \   0000021C   1800C415           STRBNE   R0,[R4, #+24]
   \   00000220   083094E5           LDR      R3,[R4, #+8]
   \   00000224   040094E5           LDR      R0,[R4, #+4]
   \   00000228   00C094E5           LDR      R12,[R4, #+0]
   \   0000022C   3CFF2FE1           BLX      R12
   \   00000230   000050E3           CMP      R0,#+0
   \   00000234   0500000A           BEQ      ??_GetSOS_10
   \   00000238   081094E5           LDR      R1,[R4, #+8]
   \   0000023C   011080E0           ADD      R1,R0,R1
   \   00000240   081084E5           STR      R1,[R4, #+8]
   \   00000244   140084E5           STR      R0,[R4, #+20]
   \   00000248   08009DE5           LDR      R0,[SP, #+8]
   \   0000024C   100084E5           STR      R0,[R4, #+16]
   \                     ??_GetSOS_10:
   \   00000250   140094E5           LDR      R0,[R4, #+20]
   \   00000254   050050E1           CMP      R0,R5
   \   00000258   E8FFFFBA           BLT      ??_GetSOS_11
   \   0000025C   100094E5           LDR      R0,[R4, #+16]
   \   00000260   000085E0           ADD      R0,R5,R0
   \   00000264   100084E5           STR      R0,[R4, #+16]
   \   00000268   140094E5           LDR      R0,[R4, #+20]
   \   0000026C   050040E0           SUB      R0,R0,R5
   \   00000270   140084E5           STR      R0,[R4, #+20]
    650            return 0;
   \                     ??_GetSOS_9:
   \   00000274   0000A0E3           MOV      R0,#+0
   \                     ??_GetSOS_2:
   \   00000278   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000027C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    651          }
    652          
    653          /*********************************************************************
    654          *
    655          *       _GetDRI
    656          *
    657          * Purpose:
    658          *   Reads a Define Restart Interval (DRI) marker.
    659          */
    660          static int _GetDRI(GUI_JPEG_DCONTEXT * pContext) {
    661            int Length;
    662            if (_GetInt(pContext, &Length)) return 1;
    663            if (Length != 4) return 1; /* Error: Bad DRI length */
    664            if (_GetInt(pContext, &pContext->RestartInterval)) return 1;
    665            return 0;
    666          }
    667          
    668          /*********************************************************************
    669          *
    670          *       _ReadMarkers
    671          *
    672          * Purpose:
    673          *   Read markers. Return if SOFx, EOI or SOS marker has been found.
    674          *
    675          * Parameter:
    676          *   pContext - obvios
    677          *   pMarker  - Pointer for returning the last marker.
    678          */

   \                                 In section .text, align 4, keep-with-next
    679          static int _ReadMarkers(GUI_JPEG_DCONTEXT * pContext, U8 * pMarker) {
   \                     _ReadMarkers:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   740C80E3           ORR      R0,R0,#0x7400
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   046080E0           ADD      R6,R0,R4
   \   0000001C   010000EA           B        ??_ReadMarkers_1
    680            while (1) {
    681              /* Read marker to be processed */
    682              if (_ReadNextMarker(pContext, pMarker)) {
    683                return 1;
    684              }
    685              /* Process marker */
    686              switch (*pMarker) {
    687              case M_SOF0:
    688              case M_SOF1:
    689              case M_SOF2:
    690              case M_SOF3:
    691              case M_SOF5:
    692              case M_SOF6:
    693              case M_SOF7:
    694              case M_SOF9:
    695              case M_SOF10:
    696              case M_SOF11:
    697              case M_SOF13:
    698              case M_SOF14:
    699              case M_SOF15:
    700              case M_SOI:
    701              case M_EOI:
    702              case M_SOS:
    703                return 0; /* Return without error. Marker needs to be processed by the calling function */
    704              case M_DHT:
    705                /* Huffman table */
    706                if (_GetDHT(pContext)) {
    707                  return 1;
    708                }
    709                break;
    710              case M_DAC:
    711                /* Arithmetic Coding Table */
    712                return 1; /* No arithmetic support */
    713              case M_DQT:
    714                /* Quantisation Table */
    715                if (_GetDQT(pContext)) {
    716                  return 1;
    717                }
    718                break;
    719              case M_DRI:
    720                /* Restart Interval */
    721                if (_GetDRI(pContext)) {
    722                  return 1;
    723                }
    724                break;
    725              case M_JPG:
    726              case M_RST0:
    727              case M_RST1:
    728              case M_RST2:
    729              case M_RST3:
    730              case M_RST4:
    731              case M_RST5:
    732              case M_RST6:
    733              case M_RST7:
    734              case M_TEM:
    735                return 1; /* Unexpected marker */
    736              default:    /* DNL, DHP, EXP, APPn, JPGn, COM, or RESn or APP0 */
    737                _SkipVariable(pContext);
   \                     ??_ReadMarkers_2:
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       _SkipVariable
   \                     ??_ReadMarkers_1:
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   202094E5           LDR      R2,[R4, #+32]
   \   00000034   32FF2FE1           BLX      R2
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F600001A           BNE      ??_ReadMarkers_3
   \                     ??_ReadMarkers_4:
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   FF0050E3           CMP      R0,#+255
   \   00000048   0600000A           BEQ      ??_ReadMarkers_5
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   202094E5           LDR      R2,[R4, #+32]
   \   00000058   32FF2FE1           BLX      R2
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   F6FFFF0A           BEQ      ??_ReadMarkers_4
   \   00000064   EC0000EA           B        ??_ReadMarkers_3
   \                     ??_ReadMarkers_5:
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   202094E5           LDR      R2,[R4, #+32]
   \   00000074   32FF2FE1           BLX      R2
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   E600001A           BNE      ??_ReadMarkers_3
   \   00000080   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000084   FF0050E3           CMP      R0,#+255
   \   00000088   F6FFFF0A           BEQ      ??_ReadMarkers_5
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   E4FFFF0A           BEQ      ??_ReadMarkers_1
   \   00000094   0000C5E5           STRB     R0,[R5, #+0]
   \   00000098   010040E2           SUB      R0,R0,#+1
   \   0000009C   DC0050E3           CMP      R0,#+220
   \   000000A0   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_ReadMarkers_0:
   \   000000A4   DDFFFF8A           BHI      ??_ReadMarkers_2
   \   000000A8   DB0000EA           B        ??_ReadMarkers_3
   \   000000AC   DBFFFFEA           B        ??_ReadMarkers_2
   \   000000B0   DAFFFFEA           B        ??_ReadMarkers_2
   \   000000B4   D9FFFFEA           B        ??_ReadMarkers_2
   \   000000B8   D8FFFFEA           B        ??_ReadMarkers_2
   \   000000BC   D7FFFFEA           B        ??_ReadMarkers_2
   \   000000C0   D6FFFFEA           B        ??_ReadMarkers_2
   \   000000C4   D5FFFFEA           B        ??_ReadMarkers_2
   \   000000C8   D4FFFFEA           B        ??_ReadMarkers_2
   \   000000CC   D3FFFFEA           B        ??_ReadMarkers_2
   \   000000D0   D2FFFFEA           B        ??_ReadMarkers_2
   \   000000D4   D1FFFFEA           B        ??_ReadMarkers_2
   \   000000D8   D0FFFFEA           B        ??_ReadMarkers_2
   \   000000DC   CFFFFFEA           B        ??_ReadMarkers_2
   \   000000E0   CEFFFFEA           B        ??_ReadMarkers_2
   \   000000E4   CDFFFFEA           B        ??_ReadMarkers_2
   \   000000E8   CCFFFFEA           B        ??_ReadMarkers_2
   \   000000EC   CBFFFFEA           B        ??_ReadMarkers_2
   \   000000F0   CAFFFFEA           B        ??_ReadMarkers_2
   \   000000F4   C9FFFFEA           B        ??_ReadMarkers_2
   \   000000F8   C8FFFFEA           B        ??_ReadMarkers_2
   \   000000FC   C7FFFFEA           B        ??_ReadMarkers_2
   \   00000100   C6FFFFEA           B        ??_ReadMarkers_2
   \   00000104   C5FFFFEA           B        ??_ReadMarkers_2
   \   00000108   C4FFFFEA           B        ??_ReadMarkers_2
   \   0000010C   C3FFFFEA           B        ??_ReadMarkers_2
   \   00000110   C2FFFFEA           B        ??_ReadMarkers_2
   \   00000114   C1FFFFEA           B        ??_ReadMarkers_2
   \   00000118   C0FFFFEA           B        ??_ReadMarkers_2
   \   0000011C   BFFFFFEA           B        ??_ReadMarkers_2
   \   00000120   BEFFFFEA           B        ??_ReadMarkers_2
   \   00000124   BDFFFFEA           B        ??_ReadMarkers_2
   \   00000128   BCFFFFEA           B        ??_ReadMarkers_2
   \   0000012C   BBFFFFEA           B        ??_ReadMarkers_2
   \   00000130   BAFFFFEA           B        ??_ReadMarkers_2
   \   00000134   B9FFFFEA           B        ??_ReadMarkers_2
   \   00000138   B8FFFFEA           B        ??_ReadMarkers_2
   \   0000013C   B7FFFFEA           B        ??_ReadMarkers_2
   \   00000140   B6FFFFEA           B        ??_ReadMarkers_2
   \   00000144   B5FFFFEA           B        ??_ReadMarkers_2
   \   00000148   B4FFFFEA           B        ??_ReadMarkers_2
   \   0000014C   B3FFFFEA           B        ??_ReadMarkers_2
   \   00000150   B2FFFFEA           B        ??_ReadMarkers_2
   \   00000154   B1FFFFEA           B        ??_ReadMarkers_2
   \   00000158   B0FFFFEA           B        ??_ReadMarkers_2
   \   0000015C   AFFFFFEA           B        ??_ReadMarkers_2
   \   00000160   AEFFFFEA           B        ??_ReadMarkers_2
   \   00000164   ADFFFFEA           B        ??_ReadMarkers_2
   \   00000168   ACFFFFEA           B        ??_ReadMarkers_2
   \   0000016C   ABFFFFEA           B        ??_ReadMarkers_2
   \   00000170   AAFFFFEA           B        ??_ReadMarkers_2
   \   00000174   A9FFFFEA           B        ??_ReadMarkers_2
   \   00000178   A8FFFFEA           B        ??_ReadMarkers_2
   \   0000017C   A7FFFFEA           B        ??_ReadMarkers_2
   \   00000180   A6FFFFEA           B        ??_ReadMarkers_2
   \   00000184   A5FFFFEA           B        ??_ReadMarkers_2
   \   00000188   A4FFFFEA           B        ??_ReadMarkers_2
   \   0000018C   A3FFFFEA           B        ??_ReadMarkers_2
   \   00000190   A2FFFFEA           B        ??_ReadMarkers_2
   \   00000194   A1FFFFEA           B        ??_ReadMarkers_2
   \   00000198   A0FFFFEA           B        ??_ReadMarkers_2
   \   0000019C   9FFFFFEA           B        ??_ReadMarkers_2
   \   000001A0   9EFFFFEA           B        ??_ReadMarkers_2
   \   000001A4   9DFFFFEA           B        ??_ReadMarkers_2
   \   000001A8   9CFFFFEA           B        ??_ReadMarkers_2
   \   000001AC   9BFFFFEA           B        ??_ReadMarkers_2
   \   000001B0   9AFFFFEA           B        ??_ReadMarkers_2
   \   000001B4   99FFFFEA           B        ??_ReadMarkers_2
   \   000001B8   98FFFFEA           B        ??_ReadMarkers_2
   \   000001BC   97FFFFEA           B        ??_ReadMarkers_2
   \   000001C0   96FFFFEA           B        ??_ReadMarkers_2
   \   000001C4   95FFFFEA           B        ??_ReadMarkers_2
   \   000001C8   94FFFFEA           B        ??_ReadMarkers_2
   \   000001CC   93FFFFEA           B        ??_ReadMarkers_2
   \   000001D0   92FFFFEA           B        ??_ReadMarkers_2
   \   000001D4   91FFFFEA           B        ??_ReadMarkers_2
   \   000001D8   90FFFFEA           B        ??_ReadMarkers_2
   \   000001DC   8FFFFFEA           B        ??_ReadMarkers_2
   \   000001E0   8EFFFFEA           B        ??_ReadMarkers_2
   \   000001E4   8DFFFFEA           B        ??_ReadMarkers_2
   \   000001E8   8CFFFFEA           B        ??_ReadMarkers_2
   \   000001EC   8BFFFFEA           B        ??_ReadMarkers_2
   \   000001F0   8AFFFFEA           B        ??_ReadMarkers_2
   \   000001F4   89FFFFEA           B        ??_ReadMarkers_2
   \   000001F8   88FFFFEA           B        ??_ReadMarkers_2
   \   000001FC   87FFFFEA           B        ??_ReadMarkers_2
   \   00000200   86FFFFEA           B        ??_ReadMarkers_2
   \   00000204   85FFFFEA           B        ??_ReadMarkers_2
   \   00000208   84FFFFEA           B        ??_ReadMarkers_2
   \   0000020C   83FFFFEA           B        ??_ReadMarkers_2
   \   00000210   82FFFFEA           B        ??_ReadMarkers_2
   \   00000214   81FFFFEA           B        ??_ReadMarkers_2
   \   00000218   80FFFFEA           B        ??_ReadMarkers_2
   \   0000021C   7FFFFFEA           B        ??_ReadMarkers_2
   \   00000220   7EFFFFEA           B        ??_ReadMarkers_2
   \   00000224   7DFFFFEA           B        ??_ReadMarkers_2
   \   00000228   7CFFFFEA           B        ??_ReadMarkers_2
   \   0000022C   7BFFFFEA           B        ??_ReadMarkers_2
   \   00000230   7AFFFFEA           B        ??_ReadMarkers_2
   \   00000234   79FFFFEA           B        ??_ReadMarkers_2
   \   00000238   78FFFFEA           B        ??_ReadMarkers_2
   \   0000023C   77FFFFEA           B        ??_ReadMarkers_2
   \   00000240   76FFFFEA           B        ??_ReadMarkers_2
   \   00000244   75FFFFEA           B        ??_ReadMarkers_2
   \   00000248   74FFFFEA           B        ??_ReadMarkers_2
   \   0000024C   73FFFFEA           B        ??_ReadMarkers_2
   \   00000250   72FFFFEA           B        ??_ReadMarkers_2
   \   00000254   71FFFFEA           B        ??_ReadMarkers_2
   \   00000258   70FFFFEA           B        ??_ReadMarkers_2
   \   0000025C   6FFFFFEA           B        ??_ReadMarkers_2
   \   00000260   6EFFFFEA           B        ??_ReadMarkers_2
   \   00000264   6DFFFFEA           B        ??_ReadMarkers_2
   \   00000268   6CFFFFEA           B        ??_ReadMarkers_2
   \   0000026C   6BFFFFEA           B        ??_ReadMarkers_2
   \   00000270   6AFFFFEA           B        ??_ReadMarkers_2
   \   00000274   69FFFFEA           B        ??_ReadMarkers_2
   \   00000278   68FFFFEA           B        ??_ReadMarkers_2
   \   0000027C   67FFFFEA           B        ??_ReadMarkers_2
   \   00000280   66FFFFEA           B        ??_ReadMarkers_2
   \   00000284   65FFFFEA           B        ??_ReadMarkers_2
   \   00000288   64FFFFEA           B        ??_ReadMarkers_2
   \   0000028C   63FFFFEA           B        ??_ReadMarkers_2
   \   00000290   62FFFFEA           B        ??_ReadMarkers_2
   \   00000294   61FFFFEA           B        ??_ReadMarkers_2
   \   00000298   60FFFFEA           B        ??_ReadMarkers_2
   \   0000029C   5FFFFFEA           B        ??_ReadMarkers_2
   \   000002A0   5EFFFFEA           B        ??_ReadMarkers_2
   \   000002A4   5DFFFFEA           B        ??_ReadMarkers_2
   \   000002A8   5CFFFFEA           B        ??_ReadMarkers_2
   \   000002AC   5BFFFFEA           B        ??_ReadMarkers_2
   \   000002B0   5AFFFFEA           B        ??_ReadMarkers_2
   \   000002B4   59FFFFEA           B        ??_ReadMarkers_2
   \   000002B8   58FFFFEA           B        ??_ReadMarkers_2
   \   000002BC   57FFFFEA           B        ??_ReadMarkers_2
   \   000002C0   56FFFFEA           B        ??_ReadMarkers_2
   \   000002C4   55FFFFEA           B        ??_ReadMarkers_2
   \   000002C8   54FFFFEA           B        ??_ReadMarkers_2
   \   000002CC   53FFFFEA           B        ??_ReadMarkers_2
   \   000002D0   52FFFFEA           B        ??_ReadMarkers_2
   \   000002D4   51FFFFEA           B        ??_ReadMarkers_2
   \   000002D8   50FFFFEA           B        ??_ReadMarkers_2
   \   000002DC   4FFFFFEA           B        ??_ReadMarkers_2
   \   000002E0   4EFFFFEA           B        ??_ReadMarkers_2
   \   000002E4   4DFFFFEA           B        ??_ReadMarkers_2
   \   000002E8   4CFFFFEA           B        ??_ReadMarkers_2
   \   000002EC   4BFFFFEA           B        ??_ReadMarkers_2
   \   000002F0   4AFFFFEA           B        ??_ReadMarkers_2
   \   000002F4   49FFFFEA           B        ??_ReadMarkers_2
   \   000002F8   48FFFFEA           B        ??_ReadMarkers_2
   \   000002FC   47FFFFEA           B        ??_ReadMarkers_2
   \   00000300   46FFFFEA           B        ??_ReadMarkers_2
   \   00000304   45FFFFEA           B        ??_ReadMarkers_2
   \   00000308   44FFFFEA           B        ??_ReadMarkers_2
   \   0000030C   43FFFFEA           B        ??_ReadMarkers_2
   \   00000310   42FFFFEA           B        ??_ReadMarkers_2
   \   00000314   41FFFFEA           B        ??_ReadMarkers_2
   \   00000318   40FFFFEA           B        ??_ReadMarkers_2
   \   0000031C   3FFFFFEA           B        ??_ReadMarkers_2
   \   00000320   3EFFFFEA           B        ??_ReadMarkers_2
   \   00000324   3DFFFFEA           B        ??_ReadMarkers_2
   \   00000328   3CFFFFEA           B        ??_ReadMarkers_2
   \   0000032C   3BFFFFEA           B        ??_ReadMarkers_2
   \   00000330   3AFFFFEA           B        ??_ReadMarkers_2
   \   00000334   39FFFFEA           B        ??_ReadMarkers_2
   \   00000338   38FFFFEA           B        ??_ReadMarkers_2
   \   0000033C   37FFFFEA           B        ??_ReadMarkers_2
   \   00000340   36FFFFEA           B        ??_ReadMarkers_2
   \   00000344   35FFFFEA           B        ??_ReadMarkers_2
   \   00000348   34FFFFEA           B        ??_ReadMarkers_2
   \   0000034C   33FFFFEA           B        ??_ReadMarkers_2
   \   00000350   32FFFFEA           B        ??_ReadMarkers_2
   \   00000354   31FFFFEA           B        ??_ReadMarkers_2
   \   00000358   30FFFFEA           B        ??_ReadMarkers_2
   \   0000035C   2FFFFFEA           B        ??_ReadMarkers_2
   \   00000360   2EFFFFEA           B        ??_ReadMarkers_2
   \   00000364   2DFFFFEA           B        ??_ReadMarkers_2
   \   00000368   2CFFFFEA           B        ??_ReadMarkers_2
   \   0000036C   2BFFFFEA           B        ??_ReadMarkers_2
   \   00000370   2AFFFFEA           B        ??_ReadMarkers_2
   \   00000374   29FFFFEA           B        ??_ReadMarkers_2
   \   00000378   28FFFFEA           B        ??_ReadMarkers_2
   \   0000037C   27FFFFEA           B        ??_ReadMarkers_2
   \   00000380   26FFFFEA           B        ??_ReadMarkers_2
   \   00000384   25FFFFEA           B        ??_ReadMarkers_2
   \   00000388   24FFFFEA           B        ??_ReadMarkers_2
   \   0000038C   23FFFFEA           B        ??_ReadMarkers_2
   \   00000390   22FFFFEA           B        ??_ReadMarkers_2
   \   00000394   21FFFFEA           B        ??_ReadMarkers_2
   \   00000398   20FFFFEA           B        ??_ReadMarkers_2
   \   0000039C   1FFFFFEA           B        ??_ReadMarkers_2
   \   000003A0   1EFFFFEA           B        ??_ReadMarkers_2
   \   000003A4   1F0000EA           B        ??_ReadMarkers_6
   \   000003A8   1E0000EA           B        ??_ReadMarkers_6
   \   000003AC   1D0000EA           B        ??_ReadMarkers_6
   \   000003B0   1C0000EA           B        ??_ReadMarkers_6
   \   000003B4   1D0000EA           B        ??_ReadMarkers_7
   \   000003B8   1A0000EA           B        ??_ReadMarkers_6
   \   000003BC   190000EA           B        ??_ReadMarkers_6
   \   000003C0   180000EA           B        ??_ReadMarkers_6
   \   000003C4   140000EA           B        ??_ReadMarkers_3
   \   000003C8   160000EA           B        ??_ReadMarkers_6
   \   000003CC   150000EA           B        ??_ReadMarkers_6
   \   000003D0   140000EA           B        ??_ReadMarkers_6
   \   000003D4   100000EA           B        ??_ReadMarkers_3
   \   000003D8   120000EA           B        ??_ReadMarkers_6
   \   000003DC   110000EA           B        ??_ReadMarkers_6
   \   000003E0   100000EA           B        ??_ReadMarkers_6
   \   000003E4   0C0000EA           B        ??_ReadMarkers_3
   \   000003E8   0B0000EA           B        ??_ReadMarkers_3
   \   000003EC   0A0000EA           B        ??_ReadMarkers_3
   \   000003F0   090000EA           B        ??_ReadMarkers_3
   \   000003F4   080000EA           B        ??_ReadMarkers_3
   \   000003F8   070000EA           B        ??_ReadMarkers_3
   \   000003FC   060000EA           B        ??_ReadMarkers_3
   \   00000400   050000EA           B        ??_ReadMarkers_3
   \   00000404   070000EA           B        ??_ReadMarkers_6
   \   00000408   060000EA           B        ??_ReadMarkers_6
   \   0000040C   050000EA           B        ??_ReadMarkers_6
   \   00000410   0B0000EA           B        ??_ReadMarkers_8
   \   00000414   01FFFFEA           B        ??_ReadMarkers_2
   \   00000418   0C0000EA           B        ??_ReadMarkers_9
   \                     ??_ReadMarkers_3:
   \   0000041C   0100A0E3           MOV      R0,#+1
   \                     ??_ReadMarkers_10:
   \   00000420   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000424   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??_ReadMarkers_6:
   \   00000428   0000A0E3           MOV      R0,#+0
   \   0000042C   FBFFFFEA           B        ??_ReadMarkers_10
   \                     ??_ReadMarkers_7:
   \   00000430   0400A0E1           MOV      R0,R4
   \   00000434   ........           BL       _GetDHT
   \                     ??_ReadMarkers_11:
   \   00000438   000050E3           CMP      R0,#+0
   \   0000043C   F6FFFF1A           BNE      ??_ReadMarkers_3
   \   00000440   F8FEFFEA           B        ??_ReadMarkers_1
   \                     ??_ReadMarkers_8:
   \   00000444   0400A0E1           MOV      R0,R4
   \   00000448   ........           BL       _GetDQT
   \   0000044C   F9FFFFEA           B        ??_ReadMarkers_11
   \                     ??_ReadMarkers_9:
   \   00000450   0D10A0E1           MOV      R1,SP
   \   00000454   0400A0E1           MOV      R0,R4
   \   00000458   202094E5           LDR      R2,[R4, #+32]
   \   0000045C   32FF2FE1           BLX      R2
   \   00000460   000050E3           CMP      R0,#+0
   \   00000464   ECFFFF1A           BNE      ??_ReadMarkers_3
   \   00000468   01108DE2           ADD      R1,SP,#+1
   \   0000046C   0400A0E1           MOV      R0,R4
   \   00000470   202094E5           LDR      R2,[R4, #+32]
   \   00000474   32FF2FE1           BLX      R2
   \   00000478   000050E3           CMP      R0,#+0
   \   0000047C   E6FFFF1A           BNE      ??_ReadMarkers_3
   \   00000480   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000484   0110DDE5           LDRB     R1,[SP, #+1]
   \   00000488   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000048C   040050E3           CMP      R0,#+4
   \   00000490   E1FFFF1A           BNE      ??_ReadMarkers_3
   \   00000494   0D10A0E1           MOV      R1,SP
   \   00000498   0400A0E1           MOV      R0,R4
   \   0000049C   202094E5           LDR      R2,[R4, #+32]
   \   000004A0   32FF2FE1           BLX      R2
   \   000004A4   000050E3           CMP      R0,#+0
   \   000004A8   DBFFFF1A           BNE      ??_ReadMarkers_3
   \   000004AC   01108DE2           ADD      R1,SP,#+1
   \   000004B0   0400A0E1           MOV      R0,R4
   \   000004B4   202094E5           LDR      R2,[R4, #+32]
   \   000004B8   32FF2FE1           BLX      R2
   \   000004BC   000050E3           CMP      R0,#+0
   \   000004C0   D5FFFF1A           BNE      ??_ReadMarkers_3
   \   000004C4   0000DDE5           LDRB     R0,[SP, #+0]
   \   000004C8   0110DDE5           LDRB     R1,[SP, #+1]
   \   000004CC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000004D0   000086E5           STR      R0,[R6, #+0]
   \   000004D4   D3FEFFEA           B        ??_ReadMarkers_1
    738              }
    739            }
    740          }
    741          
    742          /*********************************************************************
    743          *
    744          *       _HuffDecode
    745          *
    746          * Purpose:
    747          *   Decodes a Huffman encoded symbol
    748          */
    749          static int _HuffDecode(GUI_JPEG_DCONTEXT * pContext, HUFF_TABLE * pTable) {
    750            int Symbol;
    751            /* Check first 8-bits: do we have a complete symbol? */
    752            if ((Symbol = pTable->aLookUp[(pContext->BitBuffer >> 8) & 0xFF]) < 0) {
    753              /* Decode more bits, use a tree traversal to find symbol */
    754              _GetBitsNoMarker(pContext, 8);
    755              do {
    756                Symbol = pTable->aTree[~Symbol + (1 - _GetBitsNoMarker(pContext, 1))];
    757              } while (Symbol < 0);
    758            } else {
    759              _GetBitsNoMarker(pContext, pTable->aCodeSize[Symbol]);
    760            }
    761            return Symbol;
    762          }
    763          
    764          /*********************************************************************
    765          *
    766          *       _CalcMCUBlockOrder
    767          */

   \                                 In section .text, align 4, keep-with-next
    768          static void _CalcMCUBlockOrder(GUI_JPEG_DCONTEXT * pContext) {
   \                     _CalcMCUBlockOrder:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    769            int ComponentNum, ComponentId, MaxHSamp, MaxVSamp;
    770            int aCompHBlocks[MAX_COMPONENTS];
    771            int aCompVBlocks[MAX_COMPONENTS];
    772            MaxHSamp = 0;
    773            MaxVSamp = 0;
    774            for (ComponentId = 0; ComponentId < pContext->NumCompsPerFrame; ComponentId++) {
   \   00000004   1D80A0E3           MOV      R8,#+29
   \   00000008   738C88E3           ORR      R8,R8,#0x7300
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0190C8E3           BIC      R9,R8,#0x1
   \   00000014   0420D9E7           LDRB     R2,[R9, +R4]
   \   00000018   24D04DE2           SUB      SP,SP,#+36
   \   0000001C   0050A0E3           MOV      R5,#+0
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   010052E3           CMP      R2,#+1
   \   00000030   0B0000BA           BLT      ??_CalcMCUBlockOrder_0
    775              if (pContext->aCompHSamp[ComponentId] > MaxHSamp) {
   \                     ??_CalcMCUBlockOrder_1:
   \   00000034   0120D8E7           LDRB     R2,[R8, +R1]
    776                MaxHSamp = pContext->aCompHSamp[ComponentId];
    777              }
    778              if (pContext->aCompVSamp[ComponentId] > MaxVSamp) {
    779                MaxVSamp = pContext->aCompVSamp[ComponentId];
    780              }
    781            }
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   020055E1           CMP      R5,R2
   \   00000040   0250A0B1           MOVLT    R5,R2
   \   00000044   012088E0           ADD      R2,R8,R1
   \   00000048   0430D2E5           LDRB     R3,[R2, #+4]
   \   0000004C   0420D9E7           LDRB     R2,[R9, +R4]
   \   00000050   011081E2           ADD      R1,R1,#+1
   \   00000054   030056E1           CMP      R6,R3
   \   00000058   0360A0B1           MOVLT    R6,R3
   \   0000005C   020050E1           CMP      R0,R2
   \   00000060   F3FFFFBA           BLT      ??_CalcMCUBlockOrder_1
    782            for (ComponentId = 0; ComponentId < pContext->NumCompsPerFrame; ComponentId++) {
   \                     ??_CalcMCUBlockOrder_0:
   \   00000064   14108DE2           ADD      R1,SP,#+20
   \   00000068   00108DE5           STR      R1,[SP, #+0]
   \   0000006C   0400D9E7           LDRB     R0,[R9, +R4]
   \   00000070   0070A0E3           MOV      R7,#+0
   \   00000074   04A0A0E1           MOV      R10,R4
   \   00000078   04B08DE2           ADD      R11,SP,#+4
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   1D0000BA           BLT      ??_CalcMCUBlockOrder_2
    783              aCompHBlocks[ComponentId] = ((((pContext->xSize * pContext->aCompHSamp[ComponentId]) + (MaxHSamp - 1)) / MaxHSamp) + 7) / 8;
   \                     ??_CalcMCUBlockOrder_3:
   \   00000084   BC00D4E1           LDRH     R0,[R4, #+12]
   \   00000088   0A10D8E7           LDRB     R1,[R8, +R10]
   \   0000008C   017087E2           ADD      R7,R7,#+1
   \   00000090   915020E0           MLA      R0,R1,R0,R5
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   010040E2           SUB      R0,R0,#+1
   \   0000009C   ........           BL       __aeabi_idiv
   \   000000A0   070080E2           ADD      R0,R0,#+7
   \   000000A4   4011A0E1           ASR      R1,R0,#+2
   \   000000A8   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   000000AC   00209DE5           LDR      R2,[SP, #+0]
   \   000000B0   C001A0E1           ASR      R0,R0,#+3
   \   000000B4   040082E4           STR      R0,[R2], #+4
   \   000000B8   00208DE5           STR      R2,[SP, #+0]
    784              aCompVBlocks[ComponentId] = ((((pContext->ySize * pContext->aCompVSamp[ComponentId]) + (MaxVSamp - 1)) / MaxVSamp) + 7) / 8;
   \   000000BC   0A1088E0           ADD      R1,R8,R10
   \   000000C0   BE00D4E1           LDRH     R0,[R4, #+14]
   \   000000C4   0410D1E5           LDRB     R1,[R1, #+4]
    785            }
   \   000000C8   01A08AE2           ADD      R10,R10,#+1
   \   000000CC   916020E0           MLA      R0,R1,R0,R6
   \   000000D0   0610A0E1           MOV      R1,R6
   \   000000D4   010040E2           SUB      R0,R0,#+1
   \   000000D8   ........           BL       __aeabi_idiv
   \   000000DC   070080E2           ADD      R0,R0,#+7
   \   000000E0   4011A0E1           ASR      R1,R0,#+2
   \   000000E4   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   000000E8   C001A0E1           ASR      R0,R0,#+3
   \   000000EC   04008BE4           STR      R0,[R11], #+4
   \   000000F0   0400D9E7           LDRB     R0,[R9, +R4]
   \   000000F4   000057E1           CMP      R7,R0
   \   000000F8   E1FFFFBA           BLT      ??_CalcMCUBlockOrder_3
    786            if (pContext->NumCompsPerScan == 1) {
   \                     ??_CalcMCUBlockOrder_2:
   \   000000FC   4C7F89E2           ADD      R7,R9,#+304
   \   00000100   119089E2           ADD      R9,R9,#+17
   \   00000104   0400D9E7           LDRB     R0,[R9, +R4]
   \   00000108   0480C7E3           BIC      R8,R7,#0x4
   \   0000010C   010050E3           CMP      R0,#+1
   \   00000110   0800001A           BNE      ??_CalcMCUBlockOrder_4
    787              pContext->MCUsPerRow = aCompHBlocks[pContext->aCompList[0]];
   \   00000114   010089E2           ADD      R0,R9,#+1
   \   00000118   0410D0E7           LDRB     R1,[R0, +R4]
   \   0000011C   14208DE2           ADD      R2,SP,#+20
   \   00000120   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000124   041088E7           STR      R1,[R8, +R4]
    788              pContext->MCUsPerCol = aCompVBlocks[pContext->aCompList[0]];
   \   00000128   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000012C   04108DE2           ADD      R1,SP,#+4
   \   00000130   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000134   100000EA           B        ??_CalcMCUBlockOrder_5
    789            } else {
    790              pContext->MCUsPerRow = (((pContext->xSize + 7) / 8) + (MaxHSamp - 1)) / MaxHSamp;
   \                     ??_CalcMCUBlockOrder_4:
   \   00000138   BC00D4E1           LDRH     R0,[R4, #+12]
   \   0000013C   070080E2           ADD      R0,R0,#+7
   \   00000140   4011A0E1           ASR      R1,R0,#+2
   \   00000144   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   00000148   C00185E0           ADD      R0,R5,R0, ASR #+3
   \   0000014C   010040E2           SUB      R0,R0,#+1
   \   00000150   0510A0E1           MOV      R1,R5
   \   00000154   ........           BL       __aeabi_idiv
   \   00000158   040088E7           STR      R0,[R8, +R4]
    791              pContext->MCUsPerCol = (((pContext->ySize + 7) / 8) + (MaxVSamp - 1)) / MaxVSamp;
   \   0000015C   BE00D4E1           LDRH     R0,[R4, #+14]
   \   00000160   070080E2           ADD      R0,R0,#+7
   \   00000164   4011A0E1           ASR      R1,R0,#+2
   \   00000168   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   0000016C   C00186E0           ADD      R0,R6,R0, ASR #+3
   \   00000170   010040E2           SUB      R0,R0,#+1
   \   00000174   0610A0E1           MOV      R1,R6
   \   00000178   ........           BL       __aeabi_idiv
   \                     ??_CalcMCUBlockOrder_5:
   \   0000017C   040087E7           STR      R0,[R7, +R4]
    792            }
    793            if (pContext->NumCompsPerScan == 1) {
   \   00000180   0400D9E7           LDRB     R0,[R9, +R4]
   \   00000184   041087E2           ADD      R1,R7,#+4
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   0600001A           BNE      ??_CalcMCUBlockOrder_6
    794              pContext->aMCU_Org[0] = pContext->aCompList[0];
   \   00000190   012089E2           ADD      R2,R9,#+1
   \   00000194   0420D2E7           LDRB     R2,[R2, +R4]
   \   00000198   040081E3           ORR      R0,R1,#0x4
   \   0000019C   042080E7           STR      R2,[R0, +R4]
    795              pContext->NumBlocksPerMCU = 1;
   \   000001A0   0100A0E3           MOV      R0,#+1
   \   000001A4   040081E7           STR      R0,[R1, +R4]
   \   000001A8   1F0000EA           B        ??_CalcMCUBlockOrder_7
    796            } else {
    797              pContext->NumBlocksPerMCU = 0;
   \                     ??_CalcMCUBlockOrder_6:
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   040081E7           STR      R0,[R1, +R4]
    798              for (ComponentNum = 0; ComponentNum < pContext->NumCompsPerScan; ComponentNum++) {
   \   000001B4   04E0D9E7           LDRB     LR,[R9, +R4]
   \   000001B8   010089E2           ADD      R0,R9,#+1
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0430A0E1           MOV      R3,R4
   \   000001C4   04C081E3           ORR      R12,R1,#0x4
   \   000001C8   118040E2           SUB      R8,R0,#+17
   \   000001CC   01005EE3           CMP      LR,#+1
   \   000001D0   150000BA           BLT      ??_CalcMCUBlockOrder_7
    799                int NumBlocks;
    800                ComponentId = pContext->aCompList[ComponentNum];
   \                     ??_CalcMCUBlockOrder_8:
   \   000001D4   0370D0E7           LDRB     R7,[R0, +R3]
    801                NumBlocks = pContext->aCompHSamp[ComponentId] * pContext->aCompVSamp[ComponentId];
   \   000001D8   045087E0           ADD      R5,R7,R4
   \   000001DC   04E087E0           ADD      LR,R7,R4
   \   000001E0   055088E0           ADD      R5,R8,R5
   \   000001E4   0EE0D8E7           LDRB     LR,[R8, +LR]
   \   000001E8   0450D5E5           LDRB     R5,[R5, #+4]
   \   000001EC   850E6EE1           SMULBB   LR,R5,LR
   \   000001F0   00005EE3           CMP      LR,#+0
   \   000001F4   0700000A           BEQ      ??_CalcMCUBlockOrder_9
    802                while (NumBlocks--) {
    803                  pContext->aMCU_Org[pContext->NumBlocksPerMCU++] = ComponentId;
   \                     ??_CalcMCUBlockOrder_10:
   \   000001F8   045091E7           LDR      R5,[R1, +R4]
   \   000001FC   01E04EE2           SUB      LR,LR,#+1
   \   00000200   016085E2           ADD      R6,R5,#+1
   \   00000204   046081E7           STR      R6,[R1, +R4]
   \   00000208   055184E0           ADD      R5,R4,R5, LSL #+2
   \   0000020C   05708CE7           STR      R7,[R12, +R5]
   \   00000210   00005EE3           CMP      LR,#+0
   \   00000214   F7FFFF1A           BNE      ??_CalcMCUBlockOrder_10
    804                }
    805              }
   \                     ??_CalcMCUBlockOrder_9:
   \   00000218   04E0D9E7           LDRB     LR,[R9, +R4]
   \   0000021C   012082E2           ADD      R2,R2,#+1
   \   00000220   013083E2           ADD      R3,R3,#+1
   \   00000224   0E0052E1           CMP      R2,LR
   \   00000228   E9FFFFBA           BLT      ??_CalcMCUBlockOrder_8
    806            }
    807          }
   \                     ??_CalcMCUBlockOrder_7:
   \   0000022C   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000230   F08FBDE8           POP      {R4-R11,PC}      ;; return
    808          
    809          /*********************************************************************
    810          *
    811          *       _ProcessRestart
    812          *
    813          * Purpose:
    814          *   Processes a restart marker
    815          */

   \                                 In section .text, align 4, keep-with-next
    816          static int _ProcessRestart(GUI_JPEG_DCONTEXT * pContext) {
   \                     _ProcessRestart:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    817            int i;
    818            U8 Byte;
    819            for (i = 2000; i; i--) {
   \   0000000C   7D6EA0E3           MOV      R6,#+2000
   \   00000010   FA5FA0E3           MOV      R5,#+1000
    820              if (pContext->pfGetU8(pContext, &Byte)) return 1;
   \                     ??_ProcessRestart_0:
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   202094E5           LDR      R2,[R4, #+32]
   \   00000020   32FF2FE1           BLX      R2
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100000A           BEQ      ??_ProcessRestart_1
   \                     ??_ProcessRestart_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   420000EA           B        ??_ProcessRestart_3
    821              if (Byte == 0xff) {
   \                     ??_ProcessRestart_1:
   \   00000034   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000038   FF0050E3           CMP      R0,#+255
   \   0000003C   0B00000A           BEQ      ??_ProcessRestart_4
   \   00000040   016046E2           SUB      R6,R6,#+1
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   202094E5           LDR      R2,[R4, #+32]
   \   00000050   32FF2FE1           BLX      R2
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F3FFFF1A           BNE      ??_ProcessRestart_2
   \   0000005C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000060   FF0050E3           CMP      R0,#+255
    822                break;
    823              }
    824            }
   \   00000064   01604612           SUBNE    R6,R6,#+1
   \   00000068   01505512           SUBSNE   R5,R5,#+1
   \   0000006C   E8FFFF1A           BNE      ??_ProcessRestart_0
    825            if (i == 0) {
   \                     ??_ProcessRestart_4:
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   ECFFFF0A           BEQ      ??_ProcessRestart_2
   \   00000078   010056E3           CMP      R6,#+1
   \   0000007C   080000AA           BGE      ??_ProcessRestart_5
    826              return 1; /* Error: Marker not found */
    827            }
    828            for ( ; i > 0; i--) {
    829              if (pContext->pfGetU8(pContext, &Byte)) return 1;
    830              if (Byte != 0xff) {
    831                break;
    832              }
    833            }
    834            if (i == 0) {
    835              return 1; /* Error: Marker not found */
    836            }
    837            if (Byte != (pContext->NextRestartNum + M_RST0)) {
   \                     ??_ProcessRestart_6:
   \   00000080   1C00A0E3           MOV      R0,#+28
   \   00000084   730C80E3           ORR      R0,R0,#0x7300
   \   00000088   045080E0           ADD      R5,R0,R4
   \   0000008C   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000090   282195E5           LDR      R2,[R5, #+296]
   \   00000094   D02082E2           ADD      R2,R2,#+208
   \   00000098   020051E1           CMP      R1,R2
   \   0000009C   0F00000A           BEQ      ??_ProcessRestart_7
    838              return 1; /* Error: Unexpected marker */
   \   000000A0   E1FFFFEA           B        ??_ProcessRestart_2
    839            }
   \                     ??_ProcessRestart_5:
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   202094E5           LDR      R2,[R4, #+32]
   \   000000B0   32FF2FE1           BLX      R2
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   DBFFFF1A           BNE      ??_ProcessRestart_2
   \   000000BC   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000C0   FF0050E3           CMP      R0,#+255
   \   000000C4   EDFFFF1A           BNE      ??_ProcessRestart_6
   \   000000C8   016046E2           SUB      R6,R6,#+1
   \   000000CC   010056E3           CMP      R6,#+1
   \   000000D0   F3FFFFAA           BGE      ??_ProcessRestart_5
   \   000000D4   000056E3           CMP      R6,#+0
   \   000000D8   E8FFFF1A           BNE      ??_ProcessRestart_6
   \   000000DC   D2FFFFEA           B        ??_ProcessRestart_2
    840            GUI_MEMSET((U8 *)pContext->aLastDC_Val, 0, pContext->NumCompsPerFrame * sizeof(unsigned));
   \                     ??_ProcessRestart_7:
   \   000000E0   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   0021A0E1           LSL      R2,R0,#+2
   \   000000EC   6400A0E3           MOV      R0,#+100
   \   000000F0   730C80E3           ORR      R0,R0,#0x7300
   \   000000F4   040080E0           ADD      R0,R0,R4
   \   000000F8   ........           BL       GUI__memset
    841            pContext->EOB_Run = 0;
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   1C0185E5           STR      R0,[R5, #+284]
    842            pContext->RestartsLeft = pContext->RestartInterval;
   \   00000104   200195E5           LDR      R0,[R5, #+288]
    843            pContext->NextRestartNum = (pContext->NextRestartNum + 1) & 7;
    844            _InitBitBuffer(pContext);
   \   00000108   1010A0E3           MOV      R1,#+16
   \   0000010C   240185E5           STR      R0,[R5, #+292]
   \   00000110   280195E5           LDR      R0,[R5, #+296]
   \   00000114   010080E2           ADD      R0,R0,#+1
   \   00000118   070000E2           AND      R0,R0,#0x7
   \   0000011C   280185E5           STR      R0,[R5, #+296]
   \   00000120   1000A0E3           MOV      R0,#+16
   \   00000124   280084E5           STR      R0,[R4, #+40]
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       _GetBitsNoMarker
   \   00000130   1010A0E3           MOV      R1,#+16
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       _GetBitsNoMarker
    845            return 0;
   \   0000013C   0000A0E3           MOV      R0,#+0
   \                     ??_ProcessRestart_3:
   \   00000140   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000144   7080BDE8           POP      {R4-R6,PC}       ;; return
    846          }
    847          
    848          /*********************************************************************
    849          *
    850          *       _GetBuffer
    851          */
    852          static COEFF_BUFFER * _GetBuffer(GUI_JPEG_DCONTEXT * pContext, int Type, int BufferIndex) {
    853            switch (Type) {
    854            case DC_COEFFS:
    855              return &pContext->aDC_Coeffs[BufferIndex];
    856            case AC_COEFFS:
    857              return &pContext->aAC_Coeffs[BufferIndex];
    858            }
    859            return NULL;
    860          }
    861          
    862          /*********************************************************************
    863          *
    864          *       _CoeffBufferAlloc
    865          *
    866          * Purpose:
    867          *   Allocates coefficient buffer for one complete frame of a progressive scan
    868          */

   \                                 In section .text, align 4, keep-with-next
    869          static int _CoeffBufferAlloc(GUI_HMEM hContext, int Type, int BufferIndex, int LenBlock) {
   \                     _CoeffBufferAlloc:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
    870            GUI_JPEG_DCONTEXT * pContext;
    871            COEFF_BUFFER * pBuffer;
    872            GUI_HMEM hData;
    873            pContext = JPEG_LOCK_H(hContext);
   \   00000014   ........           BL       GUI_ALLOC_LockH
    874            pBuffer = _GetBuffer(pContext, Type, BufferIndex);
   \   00000018   010055E3           CMP      R5,#+1
   \   0000001C   0700000A           BEQ      ??_CoeffBufferAlloc_0
   \   00000020   0800003A           BCC      ??_CoeffBufferAlloc_1
   \   00000024   020055E3           CMP      R5,#+2
   \   00000028   0600001A           BNE      ??_CoeffBufferAlloc_1
   \   0000002C   B810A0E3           MOV      R1,#+184
   \                     ??_CoeffBufferAlloc_2:
   \   00000030   731C81E3           ORR      R1,R1,#0x7300
   \   00000034   062280E0           ADD      R2,R0,R6, LSL #+4
   \   00000038   028081E0           ADD      R8,R1,R2
   \   0000003C   020000EA           B        ??_CoeffBufferAlloc_3
   \                     ??_CoeffBufferAlloc_0:
   \   00000040   7810A0E3           MOV      R1,#+120
   \   00000044   F9FFFFEA           B        ??_CoeffBufferAlloc_2
   \                     ??_CoeffBufferAlloc_1:
   \   00000048   0080A0E3           MOV      R8,#+0
    875            pBuffer->NumBlocksX = pContext->MaxMCUsPerRow * pContext->aCompHSamp[BufferIndex];
   \                     ??_CoeffBufferAlloc_3:
   \   0000004C   1D10A0E3           MOV      R1,#+29
   \   00000050   731C81E3           ORR      R1,R1,#0x7300
   \   00000054   00C086E0           ADD      R12,R6,R0
   \   00000058   F72081E2           ADD      R2,R1,#+247
   \   0000005C   0CC0D1E7           LDRB     R12,[R1, +R12]
   \   00000060   003092E7           LDR      R3,[R2, +R0]
    876            pBuffer->NumBlocksY = pContext->MaxMCUsPerCol * pContext->aCompVSamp[BufferIndex];
   \   00000064   002082E0           ADD      R2,R2,R0
   \   00000068   9C0303E0           MUL      R3,R12,R3
   \   0000006C   000086E0           ADD      R0,R6,R0
   \   00000070   003088E5           STR      R3,[R8, #+0]
   \   00000074   000081E0           ADD      R0,R1,R0
   \   00000078   0400D0E5           LDRB     R0,[R0, #+4]
   \   0000007C   042092E5           LDR      R2,[R2, #+4]
   \   00000080   900201E0           MUL      R1,R0,R2
    877            pBuffer->BlockSize  = LenBlock * LenBlock * sizeof(I16);
   \   00000084   970700E0           MUL      R0,R7,R7
   \   00000088   041088E5           STR      R1,[R8, #+4]
   \   0000008C   8000A0E1           LSL      R0,R0,#+1
   \   00000090   080088E5           STR      R0,[R8, #+8]
    878            GUI_UNLOCK_H(pContext);
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    879            hData = GUI_ALLOC_AllocZero(pBuffer->BlockSize * pBuffer->NumBlocksX * pBuffer->NumBlocksY);
   \   00000098   080098E5           LDR      R0,[R8, #+8]
   \   0000009C   001098E5           LDR      R1,[R8, #+0]
   \   000000A0   910000E0           MUL      R0,R1,R0
   \   000000A4   041098E5           LDR      R1,[R8, #+4]
   \   000000A8   910000E0           MUL      R0,R1,R0
   \   000000AC   ........           BL       GUI_ALLOC_AllocZero
   \   000000B0   0070B0E1           MOVS     R7,R0
    880            if (hData) {
   \   000000B4   1200000A           BEQ      ??_CoeffBufferAlloc_4
    881              pContext = JPEG_LOCK_H(hContext);
    882              pBuffer = _GetBuffer(pContext, Type, BufferIndex);
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   010055E3           CMP      R5,#+1
   \   000000C4   0700000A           BEQ      ??_CoeffBufferAlloc_5
   \   000000C8   0800003A           BCC      ??_CoeffBufferAlloc_6
   \   000000CC   020055E3           CMP      R5,#+2
   \   000000D0   0600001A           BNE      ??_CoeffBufferAlloc_6
   \   000000D4   B810A0E3           MOV      R1,#+184
   \                     ??_CoeffBufferAlloc_7:
   \   000000D8   731C81E3           ORR      R1,R1,#0x7300
   \   000000DC   060280E0           ADD      R0,R0,R6, LSL #+4
   \   000000E0   000081E0           ADD      R0,R1,R0
   \   000000E4   020000EA           B        ??_CoeffBufferAlloc_8
   \                     ??_CoeffBufferAlloc_5:
   \   000000E8   7810A0E3           MOV      R1,#+120
   \   000000EC   F9FFFFEA           B        ??_CoeffBufferAlloc_7
   \                     ??_CoeffBufferAlloc_6:
   \   000000F0   0000A0E3           MOV      R0,#+0
    883              pBuffer->hData = hData;
   \                     ??_CoeffBufferAlloc_8:
   \   000000F4   0C7080E5           STR      R7,[R0, #+12]
    884              GUI_UNLOCK_H(pContext);
   \   000000F8   ........           BL       GUI_ALLOC_UnlockH
    885              return 0; /* OK */
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   F081BDE8           POP      {R4-R8,PC}
    886            }
    887            return 1; /* Error */
   \                     ??_CoeffBufferAlloc_4:
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   F081BDE8           POP      {R4-R8,PC}       ;; return
    888          }
    889          
    890          /*********************************************************************
    891          *
    892          *       _CoeffBufferAllocBanding
    893          *
    894          * Purpose:
    895          *   Allocates coefficient buffer for one band of a progressive scan
    896          */

   \                                 In section .text, align 4, keep-with-next
    897          static int _CoeffBufferAllocBanding(GUI_HMEM hContext, int Type, int BufferIndex, int LenBlock) {
   \                     _CoeffBufferAllocBanding:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0380A0E1           MOV      R8,R3
    898            GUI_JPEG_DCONTEXT * pContext;
    899            COEFF_BUFFER * pBuffer;
    900            GUI_HMEM hData;
    901            int r = 0;
   \   00000018   0060A0E3           MOV      R6,#+0
    902          
    903            pContext = JPEG_LOCK_H(hContext);
   \   0000001C   ........           BL       GUI_ALLOC_LockH
    904            pBuffer = _GetBuffer(pContext, Type, BufferIndex);
   \   00000020   010054E3           CMP      R4,#+1
   \   00000024   0700000A           BEQ      ??_CoeffBufferAllocBanding_0
   \   00000028   0800003A           BCC      ??_CoeffBufferAllocBanding_1
   \   0000002C   020054E3           CMP      R4,#+2
   \   00000030   0600001A           BNE      ??_CoeffBufferAllocBanding_1
   \   00000034   B810A0E3           MOV      R1,#+184
   \                     ??_CoeffBufferAllocBanding_2:
   \   00000038   731C81E3           ORR      R1,R1,#0x7300
   \   0000003C   052280E0           ADD      R2,R0,R5, LSL #+4
   \   00000040   029081E0           ADD      R9,R1,R2
   \   00000044   020000EA           B        ??_CoeffBufferAllocBanding_3
   \                     ??_CoeffBufferAllocBanding_0:
   \   00000048   7810A0E3           MOV      R1,#+120
   \   0000004C   F9FFFFEA           B        ??_CoeffBufferAllocBanding_2
   \                     ??_CoeffBufferAllocBanding_1:
   \   00000050   0090A0E3           MOV      R9,#+0
    905            pBuffer->NumBlocksX = pContext->MaxMCUsPerRow * pContext->aCompHSamp[BufferIndex];
   \                     ??_CoeffBufferAllocBanding_3:
   \   00000054   1D20A0E3           MOV      R2,#+29
   \   00000058   1410A0E3           MOV      R1,#+20
   \   0000005C   732C82E3           ORR      R2,R2,#0x7300
   \   00000060   003085E0           ADD      R3,R5,R0
   \   00000064   741C81E3           ORR      R1,R1,#0x7400
   \   00000068   0320D2E7           LDRB     R2,[R2, +R3]
   \   0000006C   001091E7           LDR      R1,[R1, +R0]
   \   00000070   920101E0           MUL      R1,R2,R1
   \   00000074   001089E5           STR      R1,[R9, #+0]
    906            pBuffer->NumBlocksY = pContext->NumBlocksPerBand;
   \   00000078   A810A0E3           MOV      R1,#+168
   \   0000007C   841C81E3           ORR      R1,R1,#0x8400
   \   00000080   000091E7           LDR      R0,[R1, +R0]
   \   00000084   040089E5           STR      R0,[R9, #+4]
    907            pBuffer->BlockSize  = LenBlock * LenBlock * sizeof(I16);
   \   00000088   980800E0           MUL      R0,R8,R8
   \   0000008C   8000A0E1           LSL      R0,R0,#+1
   \   00000090   080089E5           STR      R0,[R9, #+8]
    908            GUI_UNLOCK_H(pContext);
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    909            hData = GUI_ALLOC_AllocZero(pBuffer->BlockSize * pBuffer->NumBlocksX * pBuffer->NumBlocksY);
   \   00000098   080099E5           LDR      R0,[R9, #+8]
   \   0000009C   001099E5           LDR      R1,[R9, #+0]
   \   000000A0   910000E0           MUL      R0,R1,R0
   \   000000A4   041099E5           LDR      R1,[R9, #+4]
   \   000000A8   910000E0           MUL      R0,R1,R0
   \   000000AC   ........           BL       GUI_ALLOC_AllocZero
   \   000000B0   0080B0E1           MOVS     R8,R0
    910            if (hData) {
   \   000000B4   1100000A           BEQ      ??_CoeffBufferAllocBanding_4
    911              pContext = JPEG_LOCK_H(hContext);
    912              pBuffer = _GetBuffer(pContext, Type, BufferIndex);
   \   000000B8   0700A0E1           MOV      R0,R7
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   010054E3           CMP      R4,#+1
   \   000000C4   0700000A           BEQ      ??_CoeffBufferAllocBanding_5
   \   000000C8   0800003A           BCC      ??_CoeffBufferAllocBanding_6
   \   000000CC   020054E3           CMP      R4,#+2
   \   000000D0   0600001A           BNE      ??_CoeffBufferAllocBanding_6
   \   000000D4   B810A0E3           MOV      R1,#+184
   \                     ??_CoeffBufferAllocBanding_7:
   \   000000D8   731C81E3           ORR      R1,R1,#0x7300
   \   000000DC   050280E0           ADD      R0,R0,R5, LSL #+4
   \   000000E0   009081E0           ADD      R9,R1,R0
   \   000000E4   020000EA           B        ??_CoeffBufferAllocBanding_8
   \                     ??_CoeffBufferAllocBanding_5:
   \   000000E8   7810A0E3           MOV      R1,#+120
   \   000000EC   F9FFFFEA           B        ??_CoeffBufferAllocBanding_7
   \                     ??_CoeffBufferAllocBanding_6:
   \   000000F0   0090A0E3           MOV      R9,#+0
    913              GUI_UNLOCK_H(pContext);
   \                     ??_CoeffBufferAllocBanding_8:
   \   000000F4   ........           BL       GUI_ALLOC_UnlockH
    914              pBuffer->hData = hData;
   \   000000F8   0C8089E5           STR      R8,[R9, #+12]
   \   000000FC   000000EA           B        ??_CoeffBufferAllocBanding_9
    915            } else {
    916              r = 1; /* Error */
   \                     ??_CoeffBufferAllocBanding_4:
   \   00000100   0160A0E3           MOV      R6,#+1
    917            }
    918            return r;
   \                     ??_CoeffBufferAllocBanding_9:
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   04D08DE2           ADD      SP,SP,#+4
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
    919          }
    920          
    921          /*********************************************************************
    922          *
    923          *       _CoeffBufferGetP_Locked
    924          *
    925          * Purpose:
    926          *   Returns the requested pointer of a coefficient buffer. Used for progressive scans only.
    927          */
    928          static I16 * _CoeffBufferGetP_Locked(GUI_JPEG_DCONTEXT * pContext, int ComponentId, COEFF_BUFFER * pBuffer, int BlockX, int BlockY) {
    929            U8 * p;
    930            unsigned BlockSize;
    931            if (pContext->BandingRequired == 0) {
    932              if (pBuffer->NumBlocksX <= BlockX) {
    933                return NULL; /* Error */
    934              }
    935              if (pBuffer->NumBlocksY <= BlockY) {
    936                return NULL; /* Error */
    937              }
    938              BlockSize = pBuffer->BlockSize;
    939              p = (U8 *)GUI_LOCK_H(pBuffer->hData);
    940              p += BlockX * BlockSize + BlockY * BlockSize * pBuffer->NumBlocksX;
    941              return (I16 *)p;
    942            } else {
    943              int FirstBlockOfBand;
    944              FirstBlockOfBand = pContext->aFirstBlockOfBand[ComponentId];
    945              if ((BlockY >= FirstBlockOfBand) && (BlockY <= (FirstBlockOfBand + pContext->NumBlocksPerBand - 1))) {
    946                BlockSize = pBuffer->BlockSize;
    947                p = (U8 *)GUI_LOCK_H(pBuffer->hData);
    948                p += BlockX * BlockSize + (BlockY - FirstBlockOfBand) * BlockSize * pBuffer->NumBlocksX;
    949                return (I16 *)p;
    950              } else {
    951                return NULL;
    952              }
    953            }
    954          }
    955          
    956          /*********************************************************************
    957          *
    958          *       _DecodeBlockDC_First
    959          *
    960          * Purpose:
    961          *   DC decoding in a progressive scan.
    962          */

   \                                 In section .text, align 4, keep-with-next
    963          static int _DecodeBlockDC_First(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockDC_First:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    964            int s;
    965            int r;
    966            I16 * p;
    967            int Ret = 0;
    968          
    969            p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aDC_Coeffs[ComponentId], BlockX, BlockY);
   \   0000000C   7800A0E3           MOV      R0,#+120
   \   00000010   730C80E3           ORR      R0,R0,#0x7300
   \   00000014   051284E0           ADD      R1,R4,R5, LSL #+4
   \   00000018   019080E0           ADD      R9,R0,R1
   \   0000001C   A000A0E3           MOV      R0,#+160
   \   00000020   840C80E3           ORR      R0,R0,#0x8400
   \   00000024   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000028   04D04DE2           SUB      SP,SP,#+4
   \   0000002C   0270A0E1           MOV      R7,R2
   \   00000030   0380A0E1           MOV      R8,R3
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1500000A           BEQ      ??_DecodeBlockDC_First_0
   \   00000040   B000A0E3           MOV      R0,#+176
   \   00000044   840C80E3           ORR      R0,R0,#0x8400
   \   00000048   051184E0           ADD      R1,R4,R5, LSL #+2
   \   0000004C   01B090E7           LDR      R11,[R0, +R1]
   \   00000050   0B0058E1           CMP      R8,R11
   \   00000054   190000BA           BLT      ??_DecodeBlockDC_First_1
   \   00000058   080040E2           SUB      R0,R0,#+8
   \   0000005C   040090E7           LDR      R0,[R0, +R4]
   \   00000060   0B0080E0           ADD      R0,R0,R11
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   080050E1           CMP      R0,R8
   \   0000006C   130000BA           BLT      ??_DecodeBlockDC_First_1
   \   00000070   08A099E5           LDR      R10,[R9, #+8]
   \   00000074   0C0099E5           LDR      R0,[R9, #+12]
   \   00000078   ........           BL       GUI_ALLOC_LockH
   \   0000007C   0B1048E0           SUB      R1,R8,R11
   \   00000080   9A0101E0           MUL      R1,R10,R1
   \                     ??_DecodeBlockDC_First_2:
   \   00000084   002099E5           LDR      R2,[R9, #+0]
   \   00000088   920101E0           MUL      R1,R2,R1
   \   0000008C   9A1721E0           MLA      R1,R10,R7,R1
   \   00000090   008081E0           ADD      R8,R1,R0
   \   00000094   0A0000EA           B        ??_DecodeBlockDC_First_3
   \                     ??_DecodeBlockDC_First_0:
   \   00000098   000099E5           LDR      R0,[R9, #+0]
   \   0000009C   000057E1           CMP      R7,R0
   \   000000A0   040099B5           LDRLT    R0,[R9, #+4]
   \   000000A4   000058B1           CMPLT    R8,R0
   \   000000A8   040000AA           BGE      ??_DecodeBlockDC_First_1
   \   000000AC   08A099E5           LDR      R10,[R9, #+8]
   \   000000B0   0C0099E5           LDR      R0,[R9, #+12]
   \   000000B4   ........           BL       GUI_ALLOC_LockH
   \   000000B8   9A0801E0           MUL      R1,R10,R8
   \   000000BC   F0FFFFEA           B        ??_DecodeBlockDC_First_2
   \                     ??_DecodeBlockDC_First_1:
   \   000000C0   0080A0E3           MOV      R8,#+0
    970            if (p) {
   \                     ??_DecodeBlockDC_First_3:
   \   000000C4   000058E3           CMP      R8,#+0
   \   000000C8   3C00000A           BEQ      ??_DecodeBlockDC_First_4
    971              s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompDC_Tab[ComponentId]]);
   \   000000CC   3210A0E3           MOV      R1,#+50
   \   000000D0   731C81E3           ORR      R1,R1,#0x7300
   \   000000D4   042085E0           ADD      R2,R5,R4
   \   000000D8   0210D1E7           LDRB     R1,[R1, +R2]
   \   000000DC   D02EA0E3           MOV      R2,#+3328
   \   000000E0   BC00A0E3           MOV      R0,#+188
   \   000000E4   824101E1           SMLABB   R1,R2,R1,R4
   \   000000E8   800E80E3           ORR      R0,R0,#0x800
   \   000000EC   019080E0           ADD      R9,R0,R1
   \   000000F0   240094E5           LDR      R0,[R4, #+36]
   \   000000F4   FF10A0E3           MOV      R1,#+255
   \   000000F8   200401E0           AND      R0,R1,R0, LSR #+8
   \   000000FC   007199E7           LDR      R7,[R9, +R0, LSL #+2]
   \   00000100   000057E3           CMP      R7,#+0
   \   00000104   0400004A           BMI      ??_DecodeBlockDC_First_5
   \   00000108   090087E0           ADD      R0,R7,R9
   \   0000010C   0014D0E5           LDRB     R1,[R0, #+1024]
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       _GetBitsNoMarker
   \   00000118   0C0000EA           B        ??_DecodeBlockDC_First_6
   \                     ??_DecodeBlockDC_First_5:
   \   0000011C   0810A0E3           MOV      R1,#+8
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeBlockDC_First_7:
   \   00000128   0700E0E1           MVN      R0,R7
   \   0000012C   017080E2           ADD      R7,R0,#+1
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       _GetBitsNoMarker
   \   0000013C   000047E0           SUB      R0,R7,R0
   \   00000140   000189E0           ADD      R0,R9,R0, LSL #+2
   \   00000144   007590E5           LDR      R7,[R0, #+1280]
   \   00000148   000057E3           CMP      R7,#+0
   \   0000014C   F5FFFF4A           BMI      ??_DecodeBlockDC_First_7
    972              if (s != 0) {
   \                     ??_DecodeBlockDC_First_6:
   \   00000150   000057E3           CMP      R7,#+0
   \   00000154   0D00000A           BEQ      ??_DecodeBlockDC_First_8
    973                r = _GetBitsNoMarker(pContext, s);
   \   00000158   0710A0E1           MOV      R1,R7
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           BL       _GetBitsNoMarker
    974                s = DEQUANT_DCPM(r, s);
   \   00000164   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   0000016C   071191E7           LDR      R1,[R1, +R7, LSL #+2]
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   040000AA           BGE      ??_DecodeBlockDC_First_9
   \   00000178   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   00000180   071191E7           LDR      R1,[R1, +R7, LSL #+2]
   \   00000184   007081E0           ADD      R7,R1,R0
   \   00000188   000000EA           B        ??_DecodeBlockDC_First_8
   \                     ??_DecodeBlockDC_First_9:
   \   0000018C   0070A0E1           MOV      R7,R0
    975              }
    976              s += pContext->aLastDC_Val[ComponentId];
   \                     ??_DecodeBlockDC_First_8:
   \   00000190   6410A0E3           MOV      R1,#+100
   \   00000194   050184E0           ADD      R0,R4,R5, LSL #+2
   \   00000198   731C81E3           ORR      R1,R1,#0x7300
   \   0000019C   002091E7           LDR      R2,[R1, +R0]
   \   000001A0   072082E0           ADD      R2,R2,R7
    977              pContext->aLastDC_Val[ComponentId] = s;
   \   000001A4   002081E7           STR      R2,[R1, +R0]
    978              *p = s << pContext->SuccessiveLow;
   \   000001A8   120081E3           ORR      R0,R1,#0x12
   \   000001AC   D40090E1           LDRSB    R0,[R0, +R4]
   \   000001B0   1200A0E1           LSL      R0,R2,R0
   \   000001B4   B000C8E1           STRH     R0,[R8, #+0]
    979              GUI_UNLOCK_H(p);
   \   000001B8   ........           BL       GUI_ALLOC_UnlockH
   \   000001BC   000000EA           B        ??_DecodeBlockDC_First_10
    980            } else {
    981              Ret = 1; /* Error */
   \                     ??_DecodeBlockDC_First_4:
   \   000001C0   0160A0E3           MOV      R6,#+1
    982            }
    983            return Ret;
   \                     ??_DecodeBlockDC_First_10:
   \   000001C4   0600A0E1           MOV      R0,R6
   \   000001C8   04D08DE2           ADD      SP,SP,#+4
   \   000001CC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    984          }
    985          
    986          /*********************************************************************
    987          *
    988          *       _DecodeBlockDC_Refine
    989          *
    990          * Purpose:
    991          *   DC refinement in a progressive scan.
    992          */

   \                                 In section .text, align 4, keep-with-next
    993          static int _DecodeBlockDC_Refine(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockDC_Refine:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0190A0E1           MOV      R9,R1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
    994            I16 * p;
    995            int r = 0;
   \   00000014   0050A0E3           MOV      R5,#+0
    996          
    997            if (_GetBitsNoMarker(pContext, 1)) {
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   ........           BL       _GetBitsNoMarker
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3400000A           BEQ      ??_DecodeBlockDC_Refine_0
    998              p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aDC_Coeffs[ComponentId], BlockX, BlockY);
   \   00000028   7800A0E3           MOV      R0,#+120
   \   0000002C   730C80E3           ORR      R0,R0,#0x7300
   \   00000030   091284E0           ADD      R1,R4,R9, LSL #+4
   \   00000034   018080E0           ADD      R8,R0,R1
   \   00000038   A000A0E3           MOV      R0,#+160
   \   0000003C   840C80E3           ORR      R0,R0,#0x8400
   \   00000040   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   1400000A           BEQ      ??_DecodeBlockDC_Refine_1
   \   0000004C   101080E3           ORR      R1,R0,#0x10
   \   00000050   092184E0           ADD      R2,R4,R9, LSL #+2
   \   00000054   029091E7           LDR      R9,[R1, +R2]
   \   00000058   090057E1           CMP      R7,R9
   \   0000005C   190000BA           BLT      ??_DecodeBlockDC_Refine_2
   \   00000060   040080E0           ADD      R0,R0,R4
   \   00000064   080090E5           LDR      R0,[R0, #+8]
   \   00000068   090080E0           ADD      R0,R0,R9
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   070050E1           CMP      R0,R7
   \   00000074   130000BA           BLT      ??_DecodeBlockDC_Refine_2
   \   00000078   08A098E5           LDR      R10,[R8, #+8]
   \   0000007C   0C0098E5           LDR      R0,[R8, #+12]
   \   00000080   ........           BL       GUI_ALLOC_LockH
   \   00000084   091047E0           SUB      R1,R7,R9
   \   00000088   9A0101E0           MUL      R1,R10,R1
   \                     ??_DecodeBlockDC_Refine_3:
   \   0000008C   002098E5           LDR      R2,[R8, #+0]
   \   00000090   920101E0           MUL      R1,R2,R1
   \   00000094   9A1621E0           MLA      R1,R10,R6,R1
   \   00000098   000081E0           ADD      R0,R1,R0
   \   0000009C   0A0000EA           B        ??_DecodeBlockDC_Refine_4
   \                     ??_DecodeBlockDC_Refine_1:
   \   000000A0   000098E5           LDR      R0,[R8, #+0]
   \   000000A4   000056E1           CMP      R6,R0
   \   000000A8   040098B5           LDRLT    R0,[R8, #+4]
   \   000000AC   000057B1           CMPLT    R7,R0
   \   000000B0   040000AA           BGE      ??_DecodeBlockDC_Refine_2
   \   000000B4   08A098E5           LDR      R10,[R8, #+8]
   \   000000B8   0C0098E5           LDR      R0,[R8, #+12]
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   9A0701E0           MUL      R1,R10,R7
   \   000000C4   F0FFFFEA           B        ??_DecodeBlockDC_Refine_3
   \                     ??_DecodeBlockDC_Refine_2:
   \   000000C8   0000A0E3           MOV      R0,#+0
    999              if (p) {
   \                     ??_DecodeBlockDC_Refine_4:
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0800000A           BEQ      ??_DecodeBlockDC_Refine_5
   1000                *p |= (1 << pContext->SuccessiveLow);
   \   000000D4   7630A0E3           MOV      R3,#+118
   \   000000D8   733C83E3           ORR      R3,R3,#0x7300
   \   000000DC   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000000E0   D43093E1           LDRSB    R3,[R3, +R4]
   \   000000E4   0120A0E3           MOV      R2,#+1
   \   000000E8   121381E1           ORR      R1,R1,R2, LSL R3
   \   000000EC   B010C0E1           STRH     R1,[R0, #+0]
   1001                GUI_UNLOCK_H(p);
   \   000000F0   ........           BL       GUI_ALLOC_UnlockH
   \   000000F4   000000EA           B        ??_DecodeBlockDC_Refine_0
   1002              } else {
   1003                r = 1; /* Error */
   \                     ??_DecodeBlockDC_Refine_5:
   \   000000F8   0150A0E3           MOV      R5,#+1
   1004              }
   1005            }
   1006            return r;
   \                     ??_DecodeBlockDC_Refine_0:
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   F087BDE8           POP      {R4-R10,PC}      ;; return
   1007          }
   1008          
   1009          /*********************************************************************
   1010          *
   1011          *       _DecodeBlockAC_First
   1012          *
   1013          * Purpose:
   1014          *   AC decoding in a progressive scan.
   1015          */

   \                                 In section .text, align 4, keep-with-next
   1016          static int _DecodeBlockAC_First(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockAC_First:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   1017            int k;
   1018            int s;
   1019            int r;
   1020            I16 * p;
   1021            int Ret = 0;
   1022          
   1023            if (pContext->EOB_Run) {
   \   00000004   3860A0E3           MOV      R6,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   746C86E3           ORR      R6,R6,#0x7400
   \   00000010   040096E7           LDR      R0,[R6, +R4]
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   000050E3           CMP      R0,#+0
   1024              pContext->EOB_Run--;
   \   0000001C   01004012           SUBNE    R0,R0,#+1
   \   00000020   0270A0E1           MOV      R7,R2
   \   00000024   0380A0E1           MOV      R8,R3
   \   00000028   0050A0E3           MOV      R5,#+0
   \   0000002C   04008617           STRNE    R0,[R6, +R4]
   1025              return 0;
   \   00000030   8B00001A           BNE      ??_DecodeBlockAC_First_0
   1026            }
   1027            p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aAC_Coeffs[ComponentId], BlockX, BlockY);
   \   00000034   800046E2           SUB      R0,R6,#+128
   \   00000038   011284E0           ADD      R1,R4,R1, LSL #+4
   \   0000003C   019080E0           ADD      R9,R0,R1
   \   00000040   A000A0E3           MOV      R0,#+160
   \   00000044   840C80E3           ORR      R0,R0,#0x8400
   \   00000048   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1600000A           BEQ      ??_DecodeBlockAC_First_1
   \   00000054   08109DE5           LDR      R1,[SP, #+8]
   \   00000058   B000A0E3           MOV      R0,#+176
   \   0000005C   840C80E3           ORR      R0,R0,#0x8400
   \   00000060   011184E0           ADD      R1,R4,R1, LSL #+2
   \   00000064   01A090E7           LDR      R10,[R0, +R1]
   \   00000068   0A0058E1           CMP      R8,R10
   \   0000006C   190000BA           BLT      ??_DecodeBlockAC_First_2
   \   00000070   080040E2           SUB      R0,R0,#+8
   \   00000074   040090E7           LDR      R0,[R0, +R4]
   \   00000078   0A0080E0           ADD      R0,R0,R10
   \   0000007C   010040E2           SUB      R0,R0,#+1
   \   00000080   080050E1           CMP      R0,R8
   \   00000084   130000BA           BLT      ??_DecodeBlockAC_First_2
   \   00000088   08B099E5           LDR      R11,[R9, #+8]
   \   0000008C   0C0099E5           LDR      R0,[R9, #+12]
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   0A1048E0           SUB      R1,R8,R10
   \   00000098   9B0101E0           MUL      R1,R11,R1
   \                     ??_DecodeBlockAC_First_3:
   \   0000009C   002099E5           LDR      R2,[R9, #+0]
   \   000000A0   920101E0           MUL      R1,R2,R1
   \   000000A4   9B1721E0           MLA      R1,R11,R7,R1
   \   000000A8   000081E0           ADD      R0,R1,R0
   \   000000AC   0A0000EA           B        ??_DecodeBlockAC_First_4
   \                     ??_DecodeBlockAC_First_1:
   \   000000B0   000099E5           LDR      R0,[R9, #+0]
   \   000000B4   000057E1           CMP      R7,R0
   \   000000B8   040099B5           LDRLT    R0,[R9, #+4]
   \   000000BC   000058B1           CMPLT    R8,R0
   \   000000C0   040000AA           BGE      ??_DecodeBlockAC_First_2
   \   000000C4   08B099E5           LDR      R11,[R9, #+8]
   \   000000C8   0C0099E5           LDR      R0,[R9, #+12]
   \   000000CC   ........           BL       GUI_ALLOC_LockH
   \   000000D0   9B0801E0           MUL      R1,R11,R8
   \   000000D4   F0FFFFEA           B        ??_DecodeBlockAC_First_3
   \                     ??_DecodeBlockAC_First_2:
   \   000000D8   0000A0E3           MOV      R0,#+0
   \                     ??_DecodeBlockAC_First_4:
   \   000000DC   00008DE5           STR      R0,[SP, #+0]
   1028            if (p) {
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   5D00000A           BEQ      ??_DecodeBlockAC_First_5
   1029              for (k = pContext->SpectralStart; k <= pContext->SpectralEnd; k++) {
   \   000000E8   C40046E2           SUB      R0,R6,#+196
   \   000000EC   0470D0E7           LDRB     R7,[R0, +R4]
   \   000000F0   3E8040E2           SUB      R8,R0,#+62
   \   000000F4   019080E3           ORR      R9,R0,#0x1
   \   000000F8   2C0000EA           B        ??_DecodeBlockAC_First_6
   \                     ??_DecodeBlockAC_First_7:
   \   000000FC   0810A0E3           MOV      R1,#+8
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeBlockAC_First_8:
   \   00000108   0B00E0E1           MVN      R0,R11
   \   0000010C   01B080E2           ADD      R11,R0,#+1
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       _GetBitsNoMarker
   \   0000011C   00004BE0           SUB      R0,R11,R0
   \   00000120   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   00000124   00B590E5           LDR      R11,[R0, #+1280]
   \   00000128   00005BE3           CMP      R11,#+0
   \   0000012C   F5FFFF4A           BMI      ??_DecodeBlockAC_First_8
   1030                s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompAC_Tab[ComponentId]]);
   1031                r = s >> 4;
   \                     ??_DecodeBlockAC_First_9:
   \   00000130   4B02A0E1           ASR      R0,R11,#+4
   1032                s &= 0xf;
   \   00000134   0FA01BE2           ANDS     R10,R11,#0xF
   1033                if (s) {
   \   00000138   3200000A           BEQ      ??_DecodeBlockAC_First_10
   1034                  if ((k += r) > 63) {
   \   0000013C   077080E0           ADD      R7,R0,R7
   \   00000140   400057E3           CMP      R7,#+64
   \   00000144   010000BA           BLT      ??_DecodeBlockAC_First_11
   1035                    Ret = 1; /* Error */
   \                     ??_DecodeBlockAC_First_12:
   \   00000148   0150A0E3           MOV      R5,#+1
   1036                    break;
   \   0000014C   410000EA           B        ??_DecodeBlockAC_First_13
   1037                  }
   1038                  r = _GetBitsNoMarker(pContext, s);
   \                     ??_DecodeBlockAC_First_11:
   \   00000150   0A10A0E1           MOV      R1,R10
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   ........           BL       _GetBitsNoMarker
   1039                  s = DEQUANT_DCPM(r, s);
   \   0000015C   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   00000164   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   00000168   010050E1           CMP      R0,R1
   \   0000016C   040000AA           BGE      ??_DecodeBlockAC_First_14
   \   00000170   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   00000178   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   0000017C   00A081E0           ADD      R10,R1,R0
   \   00000180   000000EA           B        ??_DecodeBlockAC_First_15
   \                     ??_DecodeBlockAC_First_14:
   \   00000184   00A0A0E1           MOV      R10,R0
   1040                  *(p + _aCoeffOrder[k]) = s << pContext->SuccessiveLow;
   \                     ??_DecodeBlockAC_First_15:
   \   00000188   ............       ADRL     R0,_aCoeffOrder
   \              ....        
   \   00000190   00109DE5           LDR      R1,[SP, #+0]
   \   00000194   0000D7E7           LDRB     R0,[R7, +R0]
   \   00000198   800081E0           ADD      R0,R1,R0, LSL #+1
   \   0000019C   C21046E2           SUB      R1,R6,#+194
   \   000001A0   D41091E1           LDRSB    R1,[R1, +R4]
   \   000001A4   1A11A0E1           LSL      R1,R10,R1
   \   000001A8   B010C0E1           STRH     R1,[R0, #+0]
   1041                } else {
   \                     ??_DecodeBlockAC_First_16:
   \   000001AC   017087E2           ADD      R7,R7,#+1
   \                     ??_DecodeBlockAC_First_6:
   \   000001B0   0400D9E7           LDRB     R0,[R9, +R4]
   \   000001B4   070050E1           CMP      R0,R7
   \   000001B8   260000BA           BLT      ??_DecodeBlockAC_First_13
   \   000001BC   08109DE5           LDR      R1,[SP, #+8]
   \   000001C0   D02EA0E3           MOV      R2,#+3328
   \   000001C4   041081E0           ADD      R1,R1,R4
   \   000001C8   0110D8E7           LDRB     R1,[R8, +R1]
   \   000001CC   BC00A0E3           MOV      R0,#+188
   \   000001D0   800E80E3           ORR      R0,R0,#0x800
   \   000001D4   824101E1           SMLABB   R1,R2,R1,R4
   \   000001D8   01A080E0           ADD      R10,R0,R1
   \   000001DC   240094E5           LDR      R0,[R4, #+36]
   \   000001E0   FF10A0E3           MOV      R1,#+255
   \   000001E4   200401E0           AND      R0,R1,R0, LSR #+8
   \   000001E8   00B19AE7           LDR      R11,[R10, +R0, LSL #+2]
   \   000001EC   00005BE3           CMP      R11,#+0
   \   000001F0   C1FFFF4A           BMI      ??_DecodeBlockAC_First_7
   \   000001F4   0A008BE0           ADD      R0,R11,R10
   \   000001F8   0014D0E5           LDRB     R1,[R0, #+1024]
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       _GetBitsNoMarker
   \   00000204   C9FFFFEA           B        ??_DecodeBlockAC_First_9
   1042                  if (r == 15) {
   \                     ??_DecodeBlockAC_First_10:
   \   00000208   0F0050E3           CMP      R0,#+15
   \   0000020C   0300001A           BNE      ??_DecodeBlockAC_First_17
   1043                    if ((k += 15) > 63) {
   \   00000210   0F7087E2           ADD      R7,R7,#+15
   \   00000214   400057E3           CMP      R7,#+64
   \   00000218   E3FFFFBA           BLT      ??_DecodeBlockAC_First_16
   \   0000021C   C9FFFFEA           B        ??_DecodeBlockAC_First_12
   1044                      Ret = 1; /* Error */
   1045                      break;
   1046                    }
   1047                  } else {
   1048                    pContext->EOB_Run = 1 << r;
   \                     ??_DecodeBlockAC_First_17:
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   1110A0E1           LSL      R1,R1,R0
   \   00000228   041086E7           STR      R1,[R6, +R4]
   1049                    if (r) {
   \   0000022C   000050E3           CMP      R0,#+0
   \   00000230   0500000A           BEQ      ??_DecodeBlockAC_First_18
   1050                      pContext->EOB_Run += _GetBitsNoMarker(pContext, r);
   \   00000234   0170A0E1           MOV      R7,R1
   \   00000238   0010A0E1           MOV      R1,R0
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           BL       _GetBitsNoMarker
   \   00000244   070080E0           ADD      R0,R0,R7
   \   00000248   040086E7           STR      R0,[R6, +R4]
   1051                    }
   1052                    pContext->EOB_Run--;
   \                     ??_DecodeBlockAC_First_18:
   \   0000024C   040096E7           LDR      R0,[R6, +R4]
   \   00000250   010040E2           SUB      R0,R0,#+1
   \   00000254   040086E7           STR      R0,[R6, +R4]
   1053                    break;
   1054                  }
   1055                }
   1056              }
   1057              GUI_UNLOCK_H(p);
   \                     ??_DecodeBlockAC_First_13:
   \   00000258   ........           BL       GUI_ALLOC_UnlockH
   \   0000025C   000000EA           B        ??_DecodeBlockAC_First_0
   1058            } else {
   1059              Ret = 1; /* Error */
   \                     ??_DecodeBlockAC_First_5:
   \   00000260   0150A0E3           MOV      R5,#+1
   1060            }
   1061            return Ret;
   \                     ??_DecodeBlockAC_First_0:
   \   00000264   0500A0E1           MOV      R0,R5
   \   00000268   0CD08DE2           ADD      SP,SP,#+12
   \   0000026C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1062          }
   1063          
   1064          /*********************************************************************
   1065          *
   1066          *       _DecodeBlockAC_Refine
   1067          *
   1068          * Purpose:
   1069          *   AC refinement in a progressive scan.
   1070          */

   \                                 In section .text, align 4, keep-with-next
   1071          static int _DecodeBlockAC_Refine(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockAC_Refine:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   1072            int k;
   1073            int s;
   1074            int r;
   1075            I16 * p;
   1076            I16 * pCoeff;
   1077            int p1;
   1078            int m1;
   1079            int Ret = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   1080          
   1081            p1 = (+1) << pContext->SuccessiveLow;
   \   00000010   7600A0E3           MOV      R0,#+118
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   08108DE5           STR      R1,[SP, #+8]
   \   0000001C   730C80E3           ORR      R0,R0,#0x7300
   \   00000020   D42090E1           LDRSB    R2,[R0, +R4]
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0370A0E1           MOV      R7,R3
   \   0000002C   1152A0E1           LSL      R5,R1,R2
   1082            m1 = (-1) << pContext->SuccessiveLow;
   \   00000030   001061E2           RSB      R1,R1,#+0
   \   00000034   1102A0E1           LSL      R0,R1,R2
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   1083            p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aAC_Coeffs[ComponentId], BlockX, BlockY);
   \   0000003C   10109DE5           LDR      R1,[SP, #+16]
   \   00000040   B800A0E3           MOV      R0,#+184
   \   00000044   730C80E3           ORR      R0,R0,#0x7300
   \   00000048   011284E0           ADD      R1,R4,R1, LSL #+4
   \   0000004C   018080E0           ADD      R8,R0,R1
   \   00000050   A000A0E3           MOV      R0,#+160
   \   00000054   840C80E3           ORR      R0,R0,#0x8400
   \   00000058   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   1600000A           BEQ      ??_DecodeBlockAC_Refine_0
   \   00000064   10109DE5           LDR      R1,[SP, #+16]
   \   00000068   B000A0E3           MOV      R0,#+176
   \   0000006C   840C80E3           ORR      R0,R0,#0x8400
   \   00000070   011184E0           ADD      R1,R4,R1, LSL #+2
   \   00000074   019090E7           LDR      R9,[R0, +R1]
   \   00000078   090057E1           CMP      R7,R9
   \   0000007C   190000BA           BLT      ??_DecodeBlockAC_Refine_1
   \   00000080   080040E2           SUB      R0,R0,#+8
   \   00000084   040090E7           LDR      R0,[R0, +R4]
   \   00000088   090080E0           ADD      R0,R0,R9
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   070050E1           CMP      R0,R7
   \   00000094   130000BA           BLT      ??_DecodeBlockAC_Refine_1
   \   00000098   08A098E5           LDR      R10,[R8, #+8]
   \   0000009C   0C0098E5           LDR      R0,[R8, #+12]
   \   000000A0   ........           BL       GUI_ALLOC_LockH
   \   000000A4   091047E0           SUB      R1,R7,R9
   \   000000A8   9A0101E0           MUL      R1,R10,R1
   \                     ??_DecodeBlockAC_Refine_2:
   \   000000AC   002098E5           LDR      R2,[R8, #+0]
   \   000000B0   920101E0           MUL      R1,R2,R1
   \   000000B4   9A1621E0           MLA      R1,R10,R6,R1
   \   000000B8   000081E0           ADD      R0,R1,R0
   \   000000BC   0A0000EA           B        ??_DecodeBlockAC_Refine_3
   \                     ??_DecodeBlockAC_Refine_0:
   \   000000C0   000098E5           LDR      R0,[R8, #+0]
   \   000000C4   000056E1           CMP      R6,R0
   \   000000C8   040098B5           LDRLT    R0,[R8, #+4]
   \   000000CC   000057B1           CMPLT    R7,R0
   \   000000D0   040000AA           BGE      ??_DecodeBlockAC_Refine_1
   \   000000D4   08A098E5           LDR      R10,[R8, #+8]
   \   000000D8   0C0098E5           LDR      R0,[R8, #+12]
   \   000000DC   ........           BL       GUI_ALLOC_LockH
   \   000000E0   9A0701E0           MUL      R1,R10,R7
   \   000000E4   F0FFFFEA           B        ??_DecodeBlockAC_Refine_2
   \                     ??_DecodeBlockAC_Refine_1:
   \   000000E8   0000A0E3           MOV      R0,#+0
   \                     ??_DecodeBlockAC_Refine_3:
   \   000000EC   00008DE5           STR      R0,[SP, #+0]
   1084            k = pContext->SpectralStart;
   \   000000F0   7400A0E3           MOV      R0,#+116
   \   000000F4   730C80E3           ORR      R0,R0,#0x7300
   \   000000F8   0460D0E7           LDRB     R6,[R0, +R4]
   1085            if (p) {
   \   000000FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   9700000A           BEQ      ??_DecodeBlockAC_Refine_4
   \   00000108   3800A0E3           MOV      R0,#+56
   \   0000010C   740C80E3           ORR      R0,R0,#0x7400
   \   00000110   040090E7           LDR      R0,[R0, +R4]
   \   00000114   7570A0E3           MOV      R7,#+117
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   737C87E3           ORR      R7,R7,#0x7300
   \   00000120   2D00000A           BEQ      ??_DecodeBlockAC_Refine_5
   1086              if (pContext->EOB_Run == 0) {
   1087                for (; k < pContext->SpectralEnd; k++) {
   1088                  s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompAC_Tab[ComponentId]]);
   1089                  r = s >> 4;
   1090                  s &= 0xf;
   1091                  if (s) {
   1092                    if (s != 1) {
   1093                      Ret = 1; /* Error */
   1094                      break;
   1095                    }
   1096                    if (_GetBitsNoMarker(pContext, 1)) {
   1097                      s = p1;
   1098                    } else {
   1099                      s = m1;
   1100                    }
   1101                  } else {
   1102                    if (r != 15) {
   1103                      pContext->EOB_Run = 1 << r;
   1104                      if (r) {
   1105                        pContext->EOB_Run += _GetBitsNoMarker(pContext, r);
   1106                      }
   1107                      break;
   1108                    }
   1109                  }
   1110                  do {
   1111                    pCoeff = p + _aCoeffOrder[k];
   1112                    if (*pCoeff) {
   1113                      if (_GetBitsNoMarker(pContext, 1)) {
   1114                        if ((*pCoeff & p1) == 0) {
   1115                          if (*pCoeff >= 0) {
   1116                            *pCoeff += p1;
   1117                          } else {
   1118                            *pCoeff += m1;
   1119                          }
   1120                        }
   1121                      }
   1122                    } else {
   1123                      if (--r) {
   1124                        break;
   1125                      }
   1126                    }
   1127                    k++;
   1128                  } while (k < pContext->SpectralEnd);
   1129                  if (s && (k < 64)) {
   1130                    *(p + _aCoeffOrder[k]) = s;
   1131                  }
   1132                }
   1133              }
   1134              if (Ret == 0) {
   1135                if (pContext->EOB_Run > 0) {
   \                     ??_DecodeBlockAC_Refine_6:
   \   00000124   3800A0E3           MOV      R0,#+56
   \   00000128   740C80E3           ORR      R0,R0,#0x7400
   \   0000012C   040090E7           LDR      R0,[R0, +R4]
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   890000BA           BLT      ??_DecodeBlockAC_Refine_7
   1136                  for (; k < pContext->SpectralEnd; k++) {
   \   00000138   7570A0E3           MOV      R7,#+117
   \   0000013C   737C87E3           ORR      R7,R7,#0x7300
   \   00000140   0400D7E7           LDRB     R0,[R7, +R4]
   \   00000144   000056E1           CMP      R6,R0
   \   00000148   7F0000AA           BGE      ??_DecodeBlockAC_Refine_8
   1137                    pCoeff = p + _aCoeffOrder[k];
   \                     ??_DecodeBlockAC_Refine_9:
   \   0000014C   ............       ADRL     R0,_aCoeffOrder
   \              ....        
   \   00000154   00109DE5           LDR      R1,[SP, #+0]
   \   00000158   0000D6E7           LDRB     R0,[R6, +R0]
   \   0000015C   808081E0           ADD      R8,R1,R0, LSL #+1
   1138                    if (*pCoeff) {
   \   00000160   F000D8E1           LDRSH    R0,[R8, #+0]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   7300000A           BEQ      ??_DecodeBlockAC_Refine_10
   1139                      if (_GetBitsNoMarker(pContext, 1)) {
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   ........           BL       _GetBitsNoMarker
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   6E00000A           BEQ      ??_DecodeBlockAC_Refine_10
   1140                        if ((*pCoeff & p1) == 0) {
   \   00000180   F000D8E1           LDRSH    R0,[R8, #+0]
   \   00000184   000015E1           TST      R5,R0
   \   00000188   6B00001A           BNE      ??_DecodeBlockAC_Refine_10
   1141                          if (*pCoeff >= 0) {
   \   0000018C   000050E3           CMP      R0,#+0
   1142                            *pCoeff += p1;
   \   00000190   04109D45           LDRMI    R1,[SP, #+4]
   \   00000194   00008550           ADDPL    R0,R5,R0
   \   00000198   00008140           ADDMI    R0,R1,R0
   \   0000019C   650000EA           B        ??_DecodeBlockAC_Refine_11
   1143                          } else {
   1144                            *pCoeff += m1;
   1145                          }
   1146                        }
   1147                      }
   1148                    }
   1149                  }
   \                     ??_DecodeBlockAC_Refine_12:
   \   000001A0   019059E2           SUBS     R9,R9,#+1
   \   000001A4   0300001A           BNE      ??_DecodeBlockAC_Refine_13
   \                     ??_DecodeBlockAC_Refine_14:
   \   000001A8   0400D7E7           LDRB     R0,[R7, +R4]
   \   000001AC   016086E2           ADD      R6,R6,#+1
   \   000001B0   000056E1           CMP      R6,R0
   \   000001B4   380000BA           BLT      ??_DecodeBlockAC_Refine_15
   \                     ??_DecodeBlockAC_Refine_13:
   \   000001B8   00005AE3           CMP      R10,#+0
   \   000001BC   0500000A           BEQ      ??_DecodeBlockAC_Refine_16
   \   000001C0   400056E3           CMP      R6,#+64
   \   000001C4   030000AA           BGE      ??_DecodeBlockAC_Refine_16
   \   000001C8   0B00D6E7           LDRB     R0,[R6, +R11]
   \   000001CC   00109DE5           LDR      R1,[SP, #+0]
   \   000001D0   800081E0           ADD      R0,R1,R0, LSL #+1
   \   000001D4   B0A0C0E1           STRH     R10,[R0, #+0]
   \                     ??_DecodeBlockAC_Refine_16:
   \   000001D8   016086E2           ADD      R6,R6,#+1
   \                     ??_DecodeBlockAC_Refine_5:
   \   000001DC   0400D7E7           LDRB     R0,[R7, +R4]
   \   000001E0   000056E1           CMP      R6,R0
   \   000001E4   CEFFFFAA           BGE      ??_DecodeBlockAC_Refine_6
   \   000001E8   10209DE5           LDR      R2,[SP, #+16]
   \   000001EC   3F1047E2           SUB      R1,R7,#+63
   \   000001F0   042082E0           ADD      R2,R2,R4
   \   000001F4   0210D1E7           LDRB     R1,[R1, +R2]
   \   000001F8   D02EA0E3           MOV      R2,#+3328
   \   000001FC   BC00A0E3           MOV      R0,#+188
   \   00000200   824101E1           SMLABB   R1,R2,R1,R4
   \   00000204   800E80E3           ORR      R0,R0,#0x800
   \   00000208   018080E0           ADD      R8,R0,R1
   \   0000020C   240094E5           LDR      R0,[R4, #+36]
   \   00000210   FF10A0E3           MOV      R1,#+255
   \   00000214   200401E0           AND      R0,R1,R0, LSR #+8
   \   00000218   00A198E7           LDR      R10,[R8, +R0, LSL #+2]
   \   0000021C   00005AE3           CMP      R10,#+0
   \   00000220   0400004A           BMI      ??_DecodeBlockAC_Refine_17
   \   00000224   08008AE0           ADD      R0,R10,R8
   \   00000228   0014D0E5           LDRB     R1,[R0, #+1024]
   \   0000022C   0400A0E1           MOV      R0,R4
   \   00000230   ........           BL       _GetBitsNoMarker
   \   00000234   0C0000EA           B        ??_DecodeBlockAC_Refine_18
   \                     ??_DecodeBlockAC_Refine_17:
   \   00000238   0810A0E3           MOV      R1,#+8
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeBlockAC_Refine_19:
   \   00000244   0A00E0E1           MVN      R0,R10
   \   00000248   019080E2           ADD      R9,R0,#+1
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _GetBitsNoMarker
   \   00000258   000049E0           SUB      R0,R9,R0
   \   0000025C   000188E0           ADD      R0,R8,R0, LSL #+2
   \   00000260   00A590E5           LDR      R10,[R0, #+1280]
   \   00000264   00005AE3           CMP      R10,#+0
   \   00000268   F5FFFF4A           BMI      ??_DecodeBlockAC_Refine_19
   \                     ??_DecodeBlockAC_Refine_18:
   \   0000026C   4A92A0E1           ASR      R9,R10,#+4
   \   00000270   0FA01AE2           ANDS     R10,R10,#0xF
   \   00000274   1E00000A           BEQ      ??_DecodeBlockAC_Refine_20
   \   00000278   01005AE3           CMP      R10,#+1
   \   0000027C   0110A0E3           MOV      R1,#+1
   \   00000280   08108D15           STRNE    R1,[SP, #+8]
   \   00000284   3500001A           BNE      ??_DecodeBlockAC_Refine_7
   \   00000288   0400A0E1           MOV      R0,R4
   \   0000028C   ........           BL       _GetBitsNoMarker
   \   00000290   000050E3           CMP      R0,#+0
   \   00000294   05A0A011           MOVNE    R10,R5
   \   00000298   04A09D05           LDREQ    R10,[SP, #+4]
   \                     ??_DecodeBlockAC_Refine_15:
   \   0000029C   ............       ADRL     R11,_aCoeffOrder
   \              ....        
   \   000002A4   00109DE5           LDR      R1,[SP, #+0]
   \   000002A8   0B00D6E7           LDRB     R0,[R6, +R11]
   \   000002AC   808081E0           ADD      R8,R1,R0, LSL #+1
   \   000002B0   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000002B4   000050E3           CMP      R0,#+0
   \   000002B8   B8FFFF0A           BEQ      ??_DecodeBlockAC_Refine_12
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           BL       _GetBitsNoMarker
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   B5FFFF0A           BEQ      ??_DecodeBlockAC_Refine_14
   \   000002D0   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000002D4   000015E1           TST      R5,R0
   \   000002D8   B2FFFF1A           BNE      ??_DecodeBlockAC_Refine_14
   \   000002DC   000050E3           CMP      R0,#+0
   \   000002E0   04109D45           LDRMI    R1,[SP, #+4]
   \   000002E4   00008550           ADDPL    R0,R5,R0
   \   000002E8   00008140           ADDMI    R0,R1,R0
   \   000002EC   B000C8E1           STRH     R0,[R8, #+0]
   \   000002F0   ACFFFFEA           B        ??_DecodeBlockAC_Refine_14
   \                     ??_DecodeBlockAC_Refine_20:
   \   000002F4   0F0059E3           CMP      R9,#+15
   \   000002F8   E7FFFF0A           BEQ      ??_DecodeBlockAC_Refine_15
   \   000002FC   0100A0E3           MOV      R0,#+1
   \   00000300   1009A0E1           LSL      R0,R0,R9
   \   00000304   C31087E2           ADD      R1,R7,#+195
   \   00000308   040081E7           STR      R0,[R1, +R4]
   \   0000030C   000059E3           CMP      R9,#+0
   \   00000310   83FFFF0A           BEQ      ??_DecodeBlockAC_Refine_6
   \   00000314   047091E7           LDR      R7,[R1, +R4]
   \   00000318   0910A0E1           MOV      R1,R9
   \   0000031C   0400A0E1           MOV      R0,R4
   \   00000320   ........           BL       _GetBitsNoMarker
   \   00000324   3810A0E3           MOV      R1,#+56
   \   00000328   070080E0           ADD      R0,R0,R7
   \   0000032C   741C81E3           ORR      R1,R1,#0x7400
   \   00000330   040081E7           STR      R0,[R1, +R4]
   \   00000334   7AFFFFEA           B        ??_DecodeBlockAC_Refine_6
   \                     ??_DecodeBlockAC_Refine_11:
   \   00000338   B000C8E1           STRH     R0,[R8, #+0]
   \                     ??_DecodeBlockAC_Refine_10:
   \   0000033C   0400D7E7           LDRB     R0,[R7, +R4]
   \   00000340   016086E2           ADD      R6,R6,#+1
   \   00000344   000056E1           CMP      R6,R0
   \   00000348   7FFFFFBA           BLT      ??_DecodeBlockAC_Refine_9
   1150                  pContext->EOB_Run--;
   \                     ??_DecodeBlockAC_Refine_8:
   \   0000034C   C30087E2           ADD      R0,R7,#+195
   \   00000350   040090E7           LDR      R0,[R0, +R4]
   \   00000354   C31087E2           ADD      R1,R7,#+195
   \   00000358   010040E2           SUB      R0,R0,#+1
   \   0000035C   040081E7           STR      R0,[R1, +R4]
   1151                }
   1152              }
   1153              GUI_UNLOCK_H(p);
   \                     ??_DecodeBlockAC_Refine_7:
   \   00000360   ........           BL       GUI_ALLOC_UnlockH
   \   00000364   010000EA           B        ??_DecodeBlockAC_Refine_21
   1154            } else {
   1155              Ret = 1; /* Error */
   \                     ??_DecodeBlockAC_Refine_4:
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   08108DE5           STR      R1,[SP, #+8]
   1156            }
   1157            return Ret;
   \                     ??_DecodeBlockAC_Refine_21:
   \   00000370   08009DE5           LDR      R0,[SP, #+8]
   \   00000374   14D08DE2           ADD      SP,SP,#+20
   \   00000378   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1158          }
   1159          
   1160          /*********************************************************************
   1161          *
   1162          *       _DecodeBlockDC_FirstBanding
   1163          *
   1164          * Purpose:
   1165          *   DC decoding in a progressive scan.
   1166          */

   \                                 In section .text, align 4, keep-with-next
   1167          static int _DecodeBlockDC_FirstBanding(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockDC_FirstBanding:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1168            int s;
   1169            int r;
   1170            I16 * p;
   1171          
   1172            p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aDC_Coeffs[ComponentId], BlockX, BlockY);
   \   0000000C   7800A0E3           MOV      R0,#+120
   \   00000010   730C80E3           ORR      R0,R0,#0x7300
   \   00000014   051284E0           ADD      R1,R4,R5, LSL #+4
   \   00000018   018080E0           ADD      R8,R0,R1
   \   0000001C   A000A0E3           MOV      R0,#+160
   \   00000020   840C80E3           ORR      R0,R0,#0x8400
   \   00000024   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000028   0260A0E1           MOV      R6,R2
   \   0000002C   0370A0E1           MOV      R7,R3
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1500000A           BEQ      ??_DecodeBlockDC_FirstBanding_0
   \   00000038   B000A0E3           MOV      R0,#+176
   \   0000003C   840C80E3           ORR      R0,R0,#0x8400
   \   00000040   051184E0           ADD      R1,R4,R5, LSL #+2
   \   00000044   019090E7           LDR      R9,[R0, +R1]
   \   00000048   090057E1           CMP      R7,R9
   \   0000004C   190000BA           BLT      ??_DecodeBlockDC_FirstBanding_1
   \   00000050   080040E2           SUB      R0,R0,#+8
   \   00000054   040090E7           LDR      R0,[R0, +R4]
   \   00000058   090080E0           ADD      R0,R0,R9
   \   0000005C   010040E2           SUB      R0,R0,#+1
   \   00000060   070050E1           CMP      R0,R7
   \   00000064   130000BA           BLT      ??_DecodeBlockDC_FirstBanding_1
   \   00000068   08A098E5           LDR      R10,[R8, #+8]
   \   0000006C   0C0098E5           LDR      R0,[R8, #+12]
   \   00000070   ........           BL       GUI_ALLOC_LockH
   \   00000074   091047E0           SUB      R1,R7,R9
   \   00000078   9A0101E0           MUL      R1,R10,R1
   \                     ??_DecodeBlockDC_FirstBanding_2:
   \   0000007C   002098E5           LDR      R2,[R8, #+0]
   \   00000080   920101E0           MUL      R1,R2,R1
   \   00000084   9A1621E0           MLA      R1,R10,R6,R1
   \   00000088   006081E0           ADD      R6,R1,R0
   \   0000008C   0A0000EA           B        ??_DecodeBlockDC_FirstBanding_3
   \                     ??_DecodeBlockDC_FirstBanding_0:
   \   00000090   000098E5           LDR      R0,[R8, #+0]
   \   00000094   000056E1           CMP      R6,R0
   \   00000098   040098B5           LDRLT    R0,[R8, #+4]
   \   0000009C   000057B1           CMPLT    R7,R0
   \   000000A0   040000AA           BGE      ??_DecodeBlockDC_FirstBanding_1
   \   000000A4   08A098E5           LDR      R10,[R8, #+8]
   \   000000A8   0C0098E5           LDR      R0,[R8, #+12]
   \   000000AC   ........           BL       GUI_ALLOC_LockH
   \   000000B0   9A0701E0           MUL      R1,R10,R7
   \   000000B4   F0FFFFEA           B        ??_DecodeBlockDC_FirstBanding_2
   \                     ??_DecodeBlockDC_FirstBanding_1:
   \   000000B8   0060A0E3           MOV      R6,#+0
   1173            s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompDC_Tab[ComponentId]]);
   \                     ??_DecodeBlockDC_FirstBanding_3:
   \   000000BC   3210A0E3           MOV      R1,#+50
   \   000000C0   731C81E3           ORR      R1,R1,#0x7300
   \   000000C4   042085E0           ADD      R2,R5,R4
   \   000000C8   0210D1E7           LDRB     R1,[R1, +R2]
   \   000000CC   D02EA0E3           MOV      R2,#+3328
   \   000000D0   BC00A0E3           MOV      R0,#+188
   \   000000D4   824101E1           SMLABB   R1,R2,R1,R4
   \   000000D8   800E80E3           ORR      R0,R0,#0x800
   \   000000DC   018080E0           ADD      R8,R0,R1
   \   000000E0   240094E5           LDR      R0,[R4, #+36]
   \   000000E4   FF10A0E3           MOV      R1,#+255
   \   000000E8   200401E0           AND      R0,R1,R0, LSR #+8
   \   000000EC   007198E7           LDR      R7,[R8, +R0, LSL #+2]
   \   000000F0   000057E3           CMP      R7,#+0
   \   000000F4   0400004A           BMI      ??_DecodeBlockDC_FirstBanding_4
   \   000000F8   080087E0           ADD      R0,R7,R8
   \   000000FC   0014D0E5           LDRB     R1,[R0, #+1024]
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _GetBitsNoMarker
   \   00000108   0C0000EA           B        ??_DecodeBlockDC_FirstBanding_5
   \                     ??_DecodeBlockDC_FirstBanding_4:
   \   0000010C   0810A0E3           MOV      R1,#+8
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeBlockDC_FirstBanding_6:
   \   00000118   0700E0E1           MVN      R0,R7
   \   0000011C   017080E2           ADD      R7,R0,#+1
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       _GetBitsNoMarker
   \   0000012C   000047E0           SUB      R0,R7,R0
   \   00000130   000188E0           ADD      R0,R8,R0, LSL #+2
   \   00000134   007590E5           LDR      R7,[R0, #+1280]
   \   00000138   000057E3           CMP      R7,#+0
   \   0000013C   F5FFFF4A           BMI      ??_DecodeBlockDC_FirstBanding_6
   1174            if (s != 0) {
   \                     ??_DecodeBlockDC_FirstBanding_5:
   \   00000140   000057E3           CMP      R7,#+0
   \   00000144   0D00000A           BEQ      ??_DecodeBlockDC_FirstBanding_7
   1175              r = _GetBitsNoMarker(pContext, s);
   \   00000148   0710A0E1           MOV      R1,R7
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           BL       _GetBitsNoMarker
   1176              s = DEQUANT_DCPM(r, s);
   \   00000154   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   0000015C   071191E7           LDR      R1,[R1, +R7, LSL #+2]
   \   00000160   010050E1           CMP      R0,R1
   \   00000164   040000AA           BGE      ??_DecodeBlockDC_FirstBanding_8
   \   00000168   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   00000170   071191E7           LDR      R1,[R1, +R7, LSL #+2]
   \   00000174   007081E0           ADD      R7,R1,R0
   \   00000178   000000EA           B        ??_DecodeBlockDC_FirstBanding_7
   \                     ??_DecodeBlockDC_FirstBanding_8:
   \   0000017C   0070A0E1           MOV      R7,R0
   1177            }
   1178            s += pContext->aLastDC_Val[ComponentId];
   \                     ??_DecodeBlockDC_FirstBanding_7:
   \   00000180   6410A0E3           MOV      R1,#+100
   \   00000184   050184E0           ADD      R0,R4,R5, LSL #+2
   \   00000188   731C81E3           ORR      R1,R1,#0x7300
   \   0000018C   002091E7           LDR      R2,[R1, +R0]
   1179            pContext->aLastDC_Val[ComponentId] = s;
   1180            if (p) {
   \   00000190   000056E3           CMP      R6,#+0
   \   00000194   072082E0           ADD      R2,R2,R7
   \   00000198   002081E7           STR      R2,[R1, +R0]
   \   0000019C   0400000A           BEQ      ??_DecodeBlockDC_FirstBanding_9
   1181              *p = s << pContext->SuccessiveLow;
   \   000001A0   120081E3           ORR      R0,R1,#0x12
   \   000001A4   D40090E1           LDRSB    R0,[R0, +R4]
   \   000001A8   1200A0E1           LSL      R0,R2,R0
   \   000001AC   B000C6E1           STRH     R0,[R6, #+0]
   1182              GUI_UNLOCK_H(p);
   \   000001B0   ........           BL       GUI_ALLOC_UnlockH
   1183            }
   1184            return 0;
   \                     ??_DecodeBlockDC_FirstBanding_9:
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   F087BDE8           POP      {R4-R10,PC}      ;; return
   1185          }
   1186          
   1187          /*********************************************************************
   1188          *
   1189          *       _DecodeBlockDC_RefineBanding
   1190          *
   1191          * Purpose:
   1192          *   DC refinement in a progressive scan.
   1193          */

   \                                 In section .text, align 4, keep-with-next
   1194          static int _DecodeBlockDC_RefineBanding(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockDC_RefineBanding:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0180A0E1           MOV      R8,R1
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
   1195            I16 * p;
   1196          
   1197            if (_GetBitsNoMarker(pContext, 1)) {
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   ........           BL       _GetBitsNoMarker
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3300000A           BEQ      ??_DecodeBlockDC_RefineBanding_0
   1198              p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aDC_Coeffs[ComponentId], BlockX, BlockY);
   \   00000028   7800A0E3           MOV      R0,#+120
   \   0000002C   730C80E3           ORR      R0,R0,#0x7300
   \   00000030   081284E0           ADD      R1,R4,R8, LSL #+4
   \   00000034   017080E0           ADD      R7,R0,R1
   \   00000038   A000A0E3           MOV      R0,#+160
   \   0000003C   840C80E3           ORR      R0,R0,#0x8400
   \   00000040   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   1400000A           BEQ      ??_DecodeBlockDC_RefineBanding_1
   \   0000004C   101080E3           ORR      R1,R0,#0x10
   \   00000050   082184E0           ADD      R2,R4,R8, LSL #+2
   \   00000054   028091E7           LDR      R8,[R1, +R2]
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   190000BA           BLT      ??_DecodeBlockDC_RefineBanding_2
   \   00000060   040080E0           ADD      R0,R0,R4
   \   00000064   080090E5           LDR      R0,[R0, #+8]
   \   00000068   080080E0           ADD      R0,R0,R8
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   060050E1           CMP      R0,R6
   \   00000074   130000BA           BLT      ??_DecodeBlockDC_RefineBanding_2
   \   00000078   089097E5           LDR      R9,[R7, #+8]
   \   0000007C   0C0097E5           LDR      R0,[R7, #+12]
   \   00000080   ........           BL       GUI_ALLOC_LockH
   \   00000084   081046E0           SUB      R1,R6,R8
   \   00000088   990101E0           MUL      R1,R9,R1
   \                     ??_DecodeBlockDC_RefineBanding_3:
   \   0000008C   002097E5           LDR      R2,[R7, #+0]
   \   00000090   920101E0           MUL      R1,R2,R1
   \   00000094   991521E0           MLA      R1,R9,R5,R1
   \   00000098   000081E0           ADD      R0,R1,R0
   \   0000009C   0A0000EA           B        ??_DecodeBlockDC_RefineBanding_4
   \                     ??_DecodeBlockDC_RefineBanding_1:
   \   000000A0   000097E5           LDR      R0,[R7, #+0]
   \   000000A4   000055E1           CMP      R5,R0
   \   000000A8   040097B5           LDRLT    R0,[R7, #+4]
   \   000000AC   000056B1           CMPLT    R6,R0
   \   000000B0   040000AA           BGE      ??_DecodeBlockDC_RefineBanding_2
   \   000000B4   089097E5           LDR      R9,[R7, #+8]
   \   000000B8   0C0097E5           LDR      R0,[R7, #+12]
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   990601E0           MUL      R1,R9,R6
   \   000000C4   F0FFFFEA           B        ??_DecodeBlockDC_RefineBanding_3
   \                     ??_DecodeBlockDC_RefineBanding_2:
   \   000000C8   0000A0E3           MOV      R0,#+0
   1199              if (p) {
   \                     ??_DecodeBlockDC_RefineBanding_4:
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0800000A           BEQ      ??_DecodeBlockDC_RefineBanding_0
   1200                *p |= (1 << pContext->SuccessiveLow);
   \   000000D4   7630A0E3           MOV      R3,#+118
   \   000000D8   733C83E3           ORR      R3,R3,#0x7300
   \   000000DC   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000000E0   D43093E1           LDRSB    R3,[R3, +R4]
   \   000000E4   0120A0E3           MOV      R2,#+1
   \   000000E8   121381E1           ORR      R1,R1,R2, LSL R3
   \   000000EC   B010C0E1           STRH     R1,[R0, #+0]
   1201                GUI_UNLOCK_H(p);
   \   000000F0   ........           BL       GUI_ALLOC_UnlockH
   1202              }
   1203            }
   1204            return 0;
   \   000000F4   0000A0E3           MOV      R0,#+0
   \                     ??_DecodeBlockDC_RefineBanding_0:
   \   000000F8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000FC   F083BDE8           POP      {R4-R9,PC}       ;; return
   1205          }
   1206          
   1207          /*********************************************************************
   1208          *
   1209          *       _DecodeBlockAC_FirstBanding
   1210          *
   1211          * Purpose:
   1212          *   AC decoding in a progressive scan.
   1213          */

   \                                 In section .text, align 4, keep-with-next
   1214          static int _DecodeBlockAC_FirstBanding(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   \                     _DecodeBlockAC_FirstBanding:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1215            int k;
   1216            int s;
   1217            int r;
   1218            I16 * p;
   1219          
   1220            if (pContext->EOB_Run) {
   \   00000004   3860A0E3           MOV      R6,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   746C86E3           ORR      R6,R6,#0x7400
   \   00000010   040096E7           LDR      R0,[R6, +R4]
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   000050E3           CMP      R0,#+0
   1221              pContext->EOB_Run--;
   \   0000001C   01004012           SUBNE    R0,R0,#+1
   \   00000020   0150A0E1           MOV      R5,R1
   \   00000024   0270A0E1           MOV      R7,R2
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   04008617           STRNE    R0,[R6, +R4]
   1222              return 0;
   \   00000030   8500001A           BNE      ??_DecodeBlockAC_FirstBanding_0
   1223            }
   1224            p = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aAC_Coeffs[ComponentId], BlockX, BlockY);
   \   00000034   800046E2           SUB      R0,R6,#+128
   \   00000038   051284E0           ADD      R1,R4,R5, LSL #+4
   \   0000003C   019080E0           ADD      R9,R0,R1
   \   00000040   A000A0E3           MOV      R0,#+160
   \   00000044   840C80E3           ORR      R0,R0,#0x8400
   \   00000048   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1500000A           BEQ      ??_DecodeBlockAC_FirstBanding_1
   \   00000054   B000A0E3           MOV      R0,#+176
   \   00000058   840C80E3           ORR      R0,R0,#0x8400
   \   0000005C   051184E0           ADD      R1,R4,R5, LSL #+2
   \   00000060   01A090E7           LDR      R10,[R0, +R1]
   \   00000064   0A0058E1           CMP      R8,R10
   \   00000068   190000BA           BLT      ??_DecodeBlockAC_FirstBanding_2
   \   0000006C   080040E2           SUB      R0,R0,#+8
   \   00000070   040090E7           LDR      R0,[R0, +R4]
   \   00000074   0A0080E0           ADD      R0,R0,R10
   \   00000078   010040E2           SUB      R0,R0,#+1
   \   0000007C   080050E1           CMP      R0,R8
   \   00000080   130000BA           BLT      ??_DecodeBlockAC_FirstBanding_2
   \   00000084   08B099E5           LDR      R11,[R9, #+8]
   \   00000088   0C0099E5           LDR      R0,[R9, #+12]
   \   0000008C   ........           BL       GUI_ALLOC_LockH
   \   00000090   0A1048E0           SUB      R1,R8,R10
   \   00000094   9B0101E0           MUL      R1,R11,R1
   \                     ??_DecodeBlockAC_FirstBanding_3:
   \   00000098   002099E5           LDR      R2,[R9, #+0]
   \   0000009C   920101E0           MUL      R1,R2,R1
   \   000000A0   9B1721E0           MLA      R1,R11,R7,R1
   \   000000A4   007081E0           ADD      R7,R1,R0
   \   000000A8   0A0000EA           B        ??_DecodeBlockAC_FirstBanding_4
   \                     ??_DecodeBlockAC_FirstBanding_1:
   \   000000AC   000099E5           LDR      R0,[R9, #+0]
   \   000000B0   000057E1           CMP      R7,R0
   \   000000B4   040099B5           LDRLT    R0,[R9, #+4]
   \   000000B8   000058B1           CMPLT    R8,R0
   \   000000BC   040000AA           BGE      ??_DecodeBlockAC_FirstBanding_2
   \   000000C0   08B099E5           LDR      R11,[R9, #+8]
   \   000000C4   0C0099E5           LDR      R0,[R9, #+12]
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   9B0801E0           MUL      R1,R11,R8
   \   000000D0   F0FFFFEA           B        ??_DecodeBlockAC_FirstBanding_3
   \                     ??_DecodeBlockAC_FirstBanding_2:
   \   000000D4   0070A0E3           MOV      R7,#+0
   1225            for (k = pContext->SpectralStart; k <= pContext->SpectralEnd; k++) {
   \                     ??_DecodeBlockAC_FirstBanding_4:
   \   000000D8   C40046E2           SUB      R0,R6,#+196
   \   000000DC   0480D0E7           LDRB     R8,[R0, +R4]
   \   000000E0   019080E3           ORR      R9,R0,#0x1
   \   000000E4   2B0000EA           B        ??_DecodeBlockAC_FirstBanding_5
   \                     ??_DecodeBlockAC_FirstBanding_6:
   \   000000E8   0810A0E3           MOV      R1,#+8
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeBlockAC_FirstBanding_7:
   \   000000F4   0B00E0E1           MVN      R0,R11
   \   000000F8   01B080E2           ADD      R11,R0,#+1
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _GetBitsNoMarker
   \   00000108   00004BE0           SUB      R0,R11,R0
   \   0000010C   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   00000110   00B590E5           LDR      R11,[R0, #+1280]
   \   00000114   00005BE3           CMP      R11,#+0
   \   00000118   F5FFFF4A           BMI      ??_DecodeBlockAC_FirstBanding_7
   1226              s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompAC_Tab[ComponentId]]);
   1227              r = s >> 4;
   \                     ??_DecodeBlockAC_FirstBanding_8:
   \   0000011C   4B02A0E1           ASR      R0,R11,#+4
   1228              s &= 0xf;
   \   00000120   0FA01BE2           ANDS     R10,R11,#0xF
   1229              if (s) {
   \   00000124   3100000A           BEQ      ??_DecodeBlockAC_FirstBanding_9
   1230                if ((k += r) > 63) {
   \   00000128   088080E0           ADD      R8,R0,R8
   \   0000012C   400058E3           CMP      R8,#+64
   \   00000130   420000AA           BGE      ??_DecodeBlockAC_FirstBanding_10
   1231                  break; /* Error */
   1232                }
   1233                r = _GetBitsNoMarker(pContext, s);
   \   00000134   0A10A0E1           MOV      R1,R10
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       _GetBitsNoMarker
   1234                s = DEQUANT_DCPM(r, s);
   \   00000140   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   00000148   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   0000014C   010050E1           CMP      R0,R1
   \   00000150   040000AA           BGE      ??_DecodeBlockAC_FirstBanding_11
   \   00000154   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   0000015C   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   00000160   00A081E0           ADD      R10,R1,R0
   \   00000164   000000EA           B        ??_DecodeBlockAC_FirstBanding_12
   \                     ??_DecodeBlockAC_FirstBanding_11:
   \   00000168   00A0A0E1           MOV      R10,R0
   1235                if (p) {
   \                     ??_DecodeBlockAC_FirstBanding_12:
   \   0000016C   000057E3           CMP      R7,#+0
   \   00000170   0700000A           BEQ      ??_DecodeBlockAC_FirstBanding_13
   1236                  *(p + _aCoeffOrder[k]) = s << pContext->SuccessiveLow;
   \   00000174   ............       ADRL     R0,_aCoeffOrder
   \              ....        
   \   0000017C   C21046E2           SUB      R1,R6,#+194
   \   00000180   0000D8E7           LDRB     R0,[R8, +R0]
   \   00000184   D41091E1           LDRSB    R1,[R1, +R4]
   \   00000188   800087E0           ADD      R0,R7,R0, LSL #+1
   \   0000018C   1A11A0E1           LSL      R1,R10,R1
   \   00000190   B010C0E1           STRH     R1,[R0, #+0]
   1237                }
   1238              } else {
   \                     ??_DecodeBlockAC_FirstBanding_13:
   \   00000194   018088E2           ADD      R8,R8,#+1
   \                     ??_DecodeBlockAC_FirstBanding_5:
   \   00000198   0400D9E7           LDRB     R0,[R9, +R4]
   \   0000019C   080050E1           CMP      R0,R8
   \   000001A0   260000BA           BLT      ??_DecodeBlockAC_FirstBanding_10
   \   000001A4   3F1049E2           SUB      R1,R9,#+63
   \   000001A8   042085E0           ADD      R2,R5,R4
   \   000001AC   0210D1E7           LDRB     R1,[R1, +R2]
   \   000001B0   D02EA0E3           MOV      R2,#+3328
   \   000001B4   BC00A0E3           MOV      R0,#+188
   \   000001B8   824101E1           SMLABB   R1,R2,R1,R4
   \   000001BC   800E80E3           ORR      R0,R0,#0x800
   \   000001C0   01A080E0           ADD      R10,R0,R1
   \   000001C4   240094E5           LDR      R0,[R4, #+36]
   \   000001C8   FF10A0E3           MOV      R1,#+255
   \   000001CC   200401E0           AND      R0,R1,R0, LSR #+8
   \   000001D0   00B19AE7           LDR      R11,[R10, +R0, LSL #+2]
   \   000001D4   00005BE3           CMP      R11,#+0
   \   000001D8   C2FFFF4A           BMI      ??_DecodeBlockAC_FirstBanding_6
   \   000001DC   0A008BE0           ADD      R0,R11,R10
   \   000001E0   0014D0E5           LDRB     R1,[R0, #+1024]
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ........           BL       _GetBitsNoMarker
   \   000001EC   CAFFFFEA           B        ??_DecodeBlockAC_FirstBanding_8
   1239                if (r == 15) {
   \                     ??_DecodeBlockAC_FirstBanding_9:
   \   000001F0   0F0050E3           CMP      R0,#+15
   \   000001F4   0300001A           BNE      ??_DecodeBlockAC_FirstBanding_14
   1240                  if ((k += 15) > 63) {
   \   000001F8   0F8088E2           ADD      R8,R8,#+15
   \   000001FC   400058E3           CMP      R8,#+64
   \   00000200   E3FFFFBA           BLT      ??_DecodeBlockAC_FirstBanding_13
   \   00000204   0D0000EA           B        ??_DecodeBlockAC_FirstBanding_10
   1241                    break; /* Error */
   1242                  }
   1243                } else {
   1244                  pContext->EOB_Run = 1 << r;
   \                     ??_DecodeBlockAC_FirstBanding_14:
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   1110A0E1           LSL      R1,R1,R0
   \   00000210   041086E7           STR      R1,[R6, +R4]
   1245                  if (r) {
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   0500000A           BEQ      ??_DecodeBlockAC_FirstBanding_15
   1246                    pContext->EOB_Run += _GetBitsNoMarker(pContext, r);
   \   0000021C   0150A0E1           MOV      R5,R1
   \   00000220   0010A0E1           MOV      R1,R0
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           BL       _GetBitsNoMarker
   \   0000022C   050080E0           ADD      R0,R0,R5
   \   00000230   040086E7           STR      R0,[R6, +R4]
   1247                  }
   1248                  pContext->EOB_Run--;
   \                     ??_DecodeBlockAC_FirstBanding_15:
   \   00000234   040096E7           LDR      R0,[R6, +R4]
   \   00000238   010040E2           SUB      R0,R0,#+1
   \   0000023C   040086E7           STR      R0,[R6, +R4]
   1249                  break;
   1250                }
   1251              }
   1252            }
   1253            if (p) {
   \                     ??_DecodeBlockAC_FirstBanding_10:
   \   00000240   000057E3           CMP      R7,#+0
   \   00000244   0000000A           BEQ      ??_DecodeBlockAC_FirstBanding_0
   1254              GUI_UNLOCK_H(p);
   \   00000248   ........           BL       GUI_ALLOC_UnlockH
   1255            }
   1256            return 0;
   \                     ??_DecodeBlockAC_FirstBanding_0:
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   04D08DE2           ADD      SP,SP,#+4
   \   00000254   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1257          }
   1258          
   1259          /*********************************************************************
   1260          *
   1261          *       _DecodeBlockAC_RefineBanding
   1262          *
   1263          * Purpose:
   1264          *   AC refinement in a progressive scan.
   1265          */

   \                                 In section .text, align 4, keep-with-next
   1266          static int _DecodeBlockAC_RefineBanding(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY) {
   1267            GUI_USE_PARA(pContext);
   1268            GUI_USE_PARA(ComponentId);
   1269            GUI_USE_PARA(BlockX);
   1270            GUI_USE_PARA(BlockY);
   1271            return 1; /* Does not work with banding... */
   \                     _DecodeBlockAC_RefineBanding:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1272          }
   1273          
   1274          /*********************************************************************
   1275          *
   1276          *       _DecodeScanProg
   1277          *
   1278          * Purpose:
   1279          *   Does the complete coefficient decoding for one progressive scan.
   1280          */

   \                                 In section .text, align 4, keep-with-next
   1281          static int _DecodeScanProg(GUI_JPEG_DCONTEXT * pContext, int (* pfDecodeBlock)(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY)) {
   \                     _DecodeScanProg:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
   1282            int MCU_Row;
   1283            int MCU_Col;
   1284            int MCU_Block;
   1285            int ComponentNumber;
   1286            int ComponentId;
   1287            int aBlockX_MCU[MAX_COMPONENTS];
   1288            int aBlockY_MCU[MAX_COMPONENTS];
   1289            int BlockX_MCU_Off;
   1290            int BlockY_MCU_Off;
   1291            int BlockX;
   1292            int BlockY;
   1293            GUI_MEMSET((U8 *)aBlockY_MCU, 0, sizeof(aBlockY_MCU));
   \   0000000C   1020A0E3           MOV      R2,#+16
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   08008DE2           ADD      R0,SP,#+8
   \   00000018   ........           BL       GUI__memset
   1294            for (MCU_Col = 0; MCU_Col < pContext->MCUsPerCol; MCU_Col++) {
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   1D50A0E3           MOV      R5,#+29
   \   00000024   04108DE5           STR      R1,[SP, #+4]
   \   00000028   735C85E3           ORR      R5,R5,#0x7300
   \   0000002C   18608DE2           ADD      R6,SP,#+24
   \   00000030   180000EA           B        ??_DecodeScanProg_0
   1295              GUI_MEMSET((U8 *)aBlockX_MCU, 0, sizeof(aBlockX_MCU));
   1296              for (MCU_Row = 0; MCU_Row < pContext->MCUsPerRow; MCU_Row++) {
   1297                BlockX_MCU_Off = BlockY_MCU_Off = 0;
   1298                if ((pContext->RestartInterval) && (pContext->RestartsLeft == 0)) {
   1299                  _ProcessRestart(pContext);
   1300                }
   1301                for (MCU_Block = 0; MCU_Block < pContext->NumBlocksPerMCU; MCU_Block++) {
   1302                  ComponentId = pContext->aMCU_Org[MCU_Block];
   1303                  BlockX = aBlockX_MCU[ComponentId] + BlockX_MCU_Off;
   1304                  BlockY = aBlockY_MCU[ComponentId] + BlockY_MCU_Off;
   1305                  if (pfDecodeBlock(pContext, ComponentId, BlockX, BlockY)) {
   1306                    return 1;
   1307                  }
   1308                  if (pContext->NumCompsPerScan == 1) {
   1309                    aBlockX_MCU[ComponentId]++;
   1310                  } else {
   1311                    if (++BlockX_MCU_Off == pContext->aCompHSamp[ComponentId]) {
   1312                      BlockX_MCU_Off = 0;
   1313                      if (++BlockY_MCU_Off == pContext->aCompVSamp[ComponentId]) {
   1314                        BlockY_MCU_Off = 0;
   1315                        aBlockX_MCU[ComponentId] += pContext->aCompHSamp[ComponentId];
   1316                      }
   1317                    }
   1318                  }
   1319                }
   1320                pContext->RestartsLeft--;
   1321              }
   1322              if (pContext->NumCompsPerScan == 1) {
   1323                aBlockY_MCU[pContext->aCompList[0]]++;
   1324              } else {
   1325                for (ComponentNumber = 0; ComponentNumber < pContext->NumCompsPerScan; ComponentNumber++) {
   \                     ??_DecodeScanProg_1:
   \   00000034   102085E2           ADD      R2,R5,#+16
   \   00000038   0420D2E7           LDRB     R2,[R2, +R4]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   010052E3           CMP      R2,#+1
   \   00000048   0F0000BA           BLT      ??_DecodeScanProg_2
   1326                  ComponentId = pContext->aCompList[ComponentNumber];
   \                     ??_DecodeScanProg_3:
   \   0000004C   112085E2           ADD      R2,R5,#+17
   \   00000050   01B0D2E7           LDRB     R11,[R2, +R1]
   1327                  aBlockY_MCU[ComponentId] += pContext->aCompVSamp[ComponentId];
   \   00000054   043085E2           ADD      R3,R5,#+4
   \   00000058   08208DE2           ADD      R2,SP,#+8
   \   0000005C   04C08BE0           ADD      R12,R11,R4
   \   00000060   0C30D3E7           LDRB     R3,[R3, +R12]
   \   00000064   0B2192E7           LDR      R2,[R2, +R11, LSL #+2]
   1328                }
   \   00000068   010080E2           ADD      R0,R0,#+1
   \   0000006C   022083E0           ADD      R2,R3,R2
   \   00000070   08308DE2           ADD      R3,SP,#+8
   \   00000074   0B2183E7           STR      R2,[R3, +R11, LSL #+2]
   \   00000078   102085E2           ADD      R2,R5,#+16
   \   0000007C   0420D2E7           LDRB     R2,[R2, +R4]
   \   00000080   011081E2           ADD      R1,R1,#+1
   \   00000084   020050E1           CMP      R0,R2
   \   00000088   EFFFFFBA           BLT      ??_DecodeScanProg_3
   1329              }
   \                     ??_DecodeScanProg_2:
   \   0000008C   04009DE5           LDR      R0,[SP, #+4]
   \   00000090   010080E2           ADD      R0,R0,#+1
   \   00000094   04008DE5           STR      R0,[SP, #+4]
   \                     ??_DecodeScanProg_0:
   \   00000098   4C10A0E3           MOV      R1,#+76
   \   0000009C   741C81E3           ORR      R1,R1,#0x7400
   \   000000A0   04009DE5           LDR      R0,[SP, #+4]
   \   000000A4   041091E7           LDR      R1,[R1, +R4]
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   640000AA           BGE      ??_DecodeScanProg_4
   \   000000B0   1020A0E3           MOV      R2,#+16
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   18008DE2           ADD      R0,SP,#+24
   \   000000BC   ........           BL       GUI__memset
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   00108DE5           STR      R1,[SP, #+0]
   \   000000C8   090000EA           B        ??_DecodeScanProg_5
   \                     ??_DecodeScanProg_6:
   \   000000CC   4000A0E3           MOV      R0,#+64
   \   000000D0   740C80E3           ORR      R0,R0,#0x7400
   \   000000D4   040090E7           LDR      R0,[R0, +R4]
   \   000000D8   4010A0E3           MOV      R1,#+64
   \   000000DC   010040E2           SUB      R0,R0,#+1
   \   000000E0   741C81E3           ORR      R1,R1,#0x7400
   \   000000E4   040081E7           STR      R0,[R1, +R4]
   \   000000E8   00009DE5           LDR      R0,[SP, #+0]
   \   000000EC   010080E2           ADD      R0,R0,#+1
   \   000000F0   00008DE5           STR      R0,[SP, #+0]
   \                     ??_DecodeScanProg_5:
   \   000000F4   4810A0E3           MOV      R1,#+72
   \   000000F8   741C81E3           ORR      R1,R1,#0x7400
   \   000000FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000100   041091E7           LDR      R1,[R1, +R4]
   \   00000104   010050E1           CMP      R0,R1
   \   00000108   3F0000AA           BGE      ??_DecodeScanProg_7
   \   0000010C   3C00A0E3           MOV      R0,#+60
   \   00000110   740C80E3           ORR      R0,R0,#0x7400
   \   00000114   040090E7           LDR      R0,[R0, +R4]
   \   00000118   0080A0E3           MOV      R8,#+0
   \   0000011C   0070A0E3           MOV      R7,#+0
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   0600000A           BEQ      ??_DecodeScanProg_8
   \   00000128   4000A0E3           MOV      R0,#+64
   \   0000012C   740C80E3           ORR      R0,R0,#0x7400
   \   00000130   040090E7           LDR      R0,[R0, +R4]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0100001A           BNE      ??_DecodeScanProg_8
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       _ProcessRestart
   \                     ??_DecodeScanProg_8:
   \   00000144   0090A0E3           MOV      R9,#+0
   \   00000148   04A0A0E1           MOV      R10,R4
   \   0000014C   130000EA           B        ??_DecodeScanProg_9
   \                     ??_DecodeScanProg_10:
   \   00000150   04008BE0           ADD      R0,R11,R4
   \   00000154   0000D5E7           LDRB     R0,[R5, +R0]
   \   00000158   017087E2           ADD      R7,R7,#+1
   \   0000015C   000057E1           CMP      R7,R0
   \   00000160   0C00001A           BNE      ??_DecodeScanProg_11
   \   00000164   04008BE0           ADD      R0,R11,R4
   \   00000168   000085E0           ADD      R0,R5,R0
   \   0000016C   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000170   018088E2           ADD      R8,R8,#+1
   \   00000174   0070A0E3           MOV      R7,#+0
   \   00000178   000058E1           CMP      R8,R0
   \   0000017C   0500001A           BNE      ??_DecodeScanProg_11
   \   00000180   04108BE0           ADD      R1,R11,R4
   \   00000184   0110D5E7           LDRB     R1,[R5, +R1]
   \   00000188   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   0000018C   0080A0E3           MOV      R8,#+0
   \   00000190   000081E0           ADD      R0,R1,R0
   \                     ??_DecodeScanProg_12:
   \   00000194   0B0186E7           STR      R0,[R6, +R11, LSL #+2]
   \                     ??_DecodeScanProg_11:
   \   00000198   019089E2           ADD      R9,R9,#+1
   \   0000019C   04A08AE2           ADD      R10,R10,#+4
   \                     ??_DecodeScanProg_9:
   \   000001A0   5000A0E3           MOV      R0,#+80
   \   000001A4   740C80E3           ORR      R0,R0,#0x7400
   \   000001A8   040090E7           LDR      R0,[R0, +R4]
   \   000001AC   000059E1           CMP      R9,R0
   \   000001B0   C5FFFFAA           BGE      ??_DecodeScanProg_6
   \   000001B4   5400A0E3           MOV      R0,#+84
   \   000001B8   740C80E3           ORR      R0,R0,#0x7400
   \   000001BC   0AB090E7           LDR      R11,[R0, +R10]
   \   000001C0   08008DE2           ADD      R0,SP,#+8
   \   000001C4   0B0190E7           LDR      R0,[R0, +R11, LSL #+2]
   \   000001C8   0B10A0E1           MOV      R1,R11
   \   000001CC   003088E0           ADD      R3,R8,R0
   \   000001D0   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   000001D4   28C09DE5           LDR      R12,[SP, #+40]
   \   000001D8   002087E0           ADD      R2,R7,R0
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   3CFF2FE1           BLX      R12
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   0100A013           MOVNE    R0,#+1
   \   000001EC   1500001A           BNE      ??_DecodeScanProg_13
   \   000001F0   100085E2           ADD      R0,R5,#+16
   \   000001F4   0400D0E7           LDRB     R0,[R0, +R4]
   \   000001F8   010050E3           CMP      R0,#+1
   \   000001FC   D3FFFF1A           BNE      ??_DecodeScanProg_10
   \   00000200   0B0196E7           LDR      R0,[R6, +R11, LSL #+2]
   \   00000204   010080E2           ADD      R0,R0,#+1
   \   00000208   E1FFFFEA           B        ??_DecodeScanProg_12
   \                     ??_DecodeScanProg_7:
   \   0000020C   100085E2           ADD      R0,R5,#+16
   \   00000210   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   85FFFF1A           BNE      ??_DecodeScanProg_1
   \   0000021C   110085E2           ADD      R0,R5,#+17
   \   00000220   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000224   08108DE2           ADD      R1,SP,#+8
   \   00000228   08208DE2           ADD      R2,SP,#+8
   \   0000022C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000230   111085E2           ADD      R1,R5,#+17
   \   00000234   0410D1E7           LDRB     R1,[R1, +R4]
   \   00000238   010080E2           ADD      R0,R0,#+1
   \   0000023C   010182E7           STR      R0,[R2, +R1, LSL #+2]
   \   00000240   91FFFFEA           B        ??_DecodeScanProg_2
   1330            }
   1331            return 0;
   \                     ??_DecodeScanProg_4:
   \   00000244   0000A0E3           MOV      R0,#+0
   \                     ??_DecodeScanProg_13:
   \   00000248   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   0000024C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1332          }
   1333          
   1334          /*********************************************************************
   1335          *
   1336          *       _CreateHuffmanTable
   1337          *
   1338          * Purpose:
   1339          *   Creates a huffmann table
   1340          */

   \                                 In section .text, align 4, keep-with-next
   1341          static void _CreateHuffmanTable(GUI_JPEG_DCONTEXT * pContext, int Index, HUFF_TABLE * pTable) {
   \                     _CreateHuffmanTable:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   0170A0E1           MOV      R7,R1
   1342            int p, i, l, Size;
   1343            U8       aHuffSize[257];
   1344            unsigned aHuffCode[257];
   1345            unsigned Code;
   1346            unsigned SubTree;
   1347            int CodeSize;
   1348            int Last_p;
   1349            int NextFreeEntry;
   1350            int CurrentEntry;
   1351            p = 0;
   1352            for (l = 1; l <= 16; l++) {
   \   0000000C   070287E0           ADD      R0,R7,R7, LSL #+4
   \   00000010   43DF4DE2           SUB      SP,SP,#+268
   \   00000014   060080E0           ADD      R0,R0,R6
   \   00000018   40DE4DE2           SUB      SP,SP,#+1024
   \   0000001C   0250A0E1           MOV      R5,R2
   \   00000020   0040A0E3           MOV      R4,#+0
   \   00000024   0130A0E3           MOV      R3,#+1
   \   00000028   010080E2           ADD      R0,R0,#+1
   1353              for (i = 1; i <= pContext->aaHuffNum[Index][l]; i++) {
   \                     ??_CreateHuffmanTable_0:
   \   0000002C   34C0D0E5           LDRB     R12,[R0, #+52]
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   401E81E2           ADD      R1,R1,#+1024
   \   00000038   0120A0E3           MOV      R2,#+1
   \   0000003C   011084E0           ADD      R1,R4,R1
   \   00000040   01005CE3           CMP      R12,#+1
   \   00000044   050000BA           BLT      ??_CreateHuffmanTable_1
   1354                aHuffSize[p++] = l;
   \                     ??_CreateHuffmanTable_2:
   \   00000048   0130C1E4           STRB     R3,[R1], #+1
   1355              }
   \   0000004C   34C0D0E5           LDRB     R12,[R0, #+52]
   \   00000050   012082E2           ADD      R2,R2,#+1
   \   00000054   014084E2           ADD      R4,R4,#+1
   \   00000058   02005CE1           CMP      R12,R2
   \   0000005C   F9FFFFAA           BGE      ??_CreateHuffmanTable_2
   1356            }
   \                     ??_CreateHuffmanTable_1:
   \   00000060   013083E2           ADD      R3,R3,#+1
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   110053E3           CMP      R3,#+17
   \   0000006C   EEFFFFBA           BLT      ??_CreateHuffmanTable_0
   1357            aHuffSize[p] = 0;
   \   00000070   04108DE2           ADD      R1,SP,#+4
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   401E81E2           ADD      R1,R1,#+1024
   \   0000007C   0100C4E7           STRB     R0,[R4, +R1]
   1358            Last_p       = p;
   1359            Code         = 0;
   1360            Size         = aHuffSize[0];
   \   00000080   0424DDE5           LDRB     R2,[SP, #+1028]
   1361            p = 0;
   \   00000084   0030A0E3           MOV      R3,#+0
   1362            while (aHuffSize[p]) {
   \   00000088   000052E3           CMP      R2,#+0
   \   0000008C   0D00000A           BEQ      ??_CreateHuffmanTable_3
   1363              while (aHuffSize[p] == Size) {
   \                     ??_CreateHuffmanTable_4:
   \   00000090   01E0D3E7           LDRB     LR,[R3, +R1]
   \   00000094   02005EE1           CMP      LR,R2
   \   00000098   0500001A           BNE      ??_CreateHuffmanTable_5
   1364                aHuffCode[p++] = Code;
   \                     ??_CreateHuffmanTable_6:
   \   0000009C   03018DE7           STR      R0,[SP, +R3, LSL #+2]
   \   000000A0   013083E2           ADD      R3,R3,#+1
   1365                Code++;
   \   000000A4   01E0D3E7           LDRB     LR,[R3, +R1]
   \   000000A8   010080E2           ADD      R0,R0,#+1
   \   000000AC   02005EE1           CMP      LR,R2
   \   000000B0   F9FFFF0A           BEQ      ??_CreateHuffmanTable_6
   1366              }
   1367              Code <<= 1;
   1368              Size++;
   \                     ??_CreateHuffmanTable_5:
   \   000000B4   01E0D3E7           LDRB     LR,[R3, +R1]
   \   000000B8   8000A0E1           LSL      R0,R0,#+1
   \   000000BC   012082E2           ADD      R2,R2,#+1
   \   000000C0   00005EE3           CMP      LR,#+0
   \   000000C4   F1FFFF1A           BNE      ??_CreateHuffmanTable_4
   1369            }
   1370            GUI_MEMSET((U8 *)pTable->aLookUp,   0, sizeof(pTable->aLookUp));
   \                     ??_CreateHuffmanTable_3:
   \   000000C8   402EA0E3           MOV      R2,#+1024
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   ........           BL       GUI__memset
   1371            GUI_MEMSET((U8 *)pTable->aTree,     0, sizeof(pTable->aTree));
   \   000000D8   802EA0E3           MOV      R2,#+2048
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   500E85E2           ADD      R0,R5,#+1280
   \   000000E4   ........           BL       GUI__memset
   1372            GUI_MEMSET((U8 *)pTable->aCodeSize, 0, sizeof(pTable->aCodeSize));
   \   000000E8   402FA0E3           MOV      R2,#+256
   \   000000EC   0010A0E3           MOV      R1,#+0
   \   000000F0   400E85E2           ADD      R0,R5,#+1024
   \   000000F4   ........           BL       GUI__memset
   1373            NextFreeEntry = -1;
   \   000000F8   0010E0E3           MVN      R1,#+0
   1374            p = 0;
   \   000000FC   010054E3           CMP      R4,#+1
   \   00000100   430000BA           BLT      ??_CreateHuffmanTable_7
   \   00000104   07C486E0           ADD      R12,R6,R7, LSL #+8
   \   00000108   04E08DE2           ADD      LR,SP,#+4
   \   0000010C   40EE8EE2           ADD      LR,LR,#+1024
   \   00000110   0D60A0E1           MOV      R6,SP
   \   00000114   0170A0E3           MOV      R7,#+1
   1375            while (p < Last_p) {
   1376              i        = pContext->aaHuffVal[Index][p];
   \                     ??_CreateHuffmanTable_8:
   \   00000118   BC20DCE5           LDRB     R2,[R12, #+188]
   1377              Code     = aHuffCode[p];
   1378              CodeSize = aHuffSize[p];
   \   0000011C   0030DEE5           LDRB     R3,[LR, #+0]
   \   00000120   000096E5           LDR      R0,[R6, #+0]
   1379              pTable->aCodeSize[i] = CodeSize;
   \   00000124   058082E0           ADD      R8,R2,R5
   \   00000128   0034C8E5           STRB     R3,[R8, #+1024]
   1380              if (CodeSize <= 8) {
   \   0000012C   090053E3           CMP      R3,#+9
   \   00000130   100000AA           BGE      ??_CreateHuffmanTable_9
   1381                Code <<= (8 - CodeSize);
   \   00000134   083063E2           RSB      R3,R3,#+8
   \   00000138   1003A0E1           LSL      R0,R0,R3
   1382                for (l = 1 << (8 - CodeSize); l > 0; l--) {
   \   0000013C   1733A0E1           LSL      R3,R7,R3
   \   00000140   010053E3           CMP      R3,#+1
   \   00000144   2D0000BA           BLT      ??_CreateHuffmanTable_10
   \   00000148   008185E0           ADD      R8,R5,R0, LSL #+2
   \   0000014C   010013E3           TST      R3,#0x1
   1383                  pTable->aLookUp[Code] = i;
   \   00000150   00208815           STRNE    R2,[R8, #+0]
   1384                  Code++;
   \   00000154   01008012           ADDNE    R0,R0,#+1
   \   00000158   A330B0E1           LSRS     R3,R3,#+1
   \   0000015C   2700000A           BEQ      ??_CreateHuffmanTable_10
   \   00000160   000185E0           ADD      R0,R5,R0, LSL #+2
   \                     ??_CreateHuffmanTable_11:
   \   00000164   042080E4           STR      R2,[R0], #+4
   \   00000168   042080E4           STR      R2,[R0], #+4
   1385                }
   \   0000016C   013053E2           SUBS     R3,R3,#+1
   \   00000170   FBFFFF1A           BNE      ??_CreateHuffmanTable_11
   \   00000174   210000EA           B        ??_CreateHuffmanTable_10
   1386              } else {
   1387                SubTree      = (Code >> (CodeSize - 8)) & 0xFF;
   \                     ??_CreateHuffmanTable_9:
   \   00000178   088043E2           SUB      R8,R3,#+8
   \   0000017C   FF90A0E3           MOV      R9,#+255
   \   00000180   309809E0           AND      R9,R9,R0, LSR R8
   1388                CurrentEntry = pTable->aLookUp[SubTree];
   \   00000184   098195E7           LDR      R8,[R5, +R9, LSL #+2]
   1389                if (CurrentEntry == 0) {
   \   00000188   000058E3           CMP      R8,#+0
   1390                  pTable->aLookUp[SubTree] = CurrentEntry = NextFreeEntry;
   \   0000018C   0180A001           MOVEQ    R8,R1
   \   00000190   09818507           STREQ    R8,[R5, +R9, LSL #+2]
   1391                  NextFreeEntry -= 2;
   1392                }
   1393                Code <<= (16 - (CodeSize - 8));
   \   00000194   0390A0E1           MOV      R9,R3
   \   00000198   02104102           SUBEQ    R1,R1,#+2
   \   0000019C   189069E2           RSB      R9,R9,#+24
   \   000001A0   1009A0E1           LSL      R0,R0,R9
   1394                for (l = CodeSize; l > 9; l--) {
   \   000001A4   0A0053E3           CMP      R3,#+10
   \   000001A8   0F0000BA           BLT      ??_CreateHuffmanTable_12
   \   000001AC   093043E2           SUB      R3,R3,#+9
   1395                  if ((Code & 0x8000) == 0) {
   \                     ??_CreateHuffmanTable_13:
   \   000001B0   800C10E3           TST      R0,#0x8000
   1396                    CurrentEntry--;
   \   000001B4   01804802           SUBEQ    R8,R8,#+1
   \   000001B8   008068E2           RSB      R8,R8,#+0
   \   000001BC   088185E0           ADD      R8,R5,R8, LSL #+2
   \   000001C0   FC9498E5           LDR      R9,[R8, #+1276]
   \   000001C4   000059E3           CMP      R9,#+0
   \   000001C8   0300001A           BNE      ??_CreateHuffmanTable_14
   1397                  }
   1398                  if (pTable->aTree[-CurrentEntry - 1] == 0) {
   1399                    pTable->aTree[-CurrentEntry - 1] = NextFreeEntry;
   \   000001CC   FC1488E5           STR      R1,[R8, #+1276]
   1400                    CurrentEntry = NextFreeEntry;
   \   000001D0   0180A0E1           MOV      R8,R1
   1401                    NextFreeEntry -= 2;
   \   000001D4   021041E2           SUB      R1,R1,#+2
   \   000001D8   000000EA           B        ??_CreateHuffmanTable_15
   1402                  } else {
   1403                    CurrentEntry = pTable->aTree[-CurrentEntry - 1];
   \                     ??_CreateHuffmanTable_14:
   \   000001DC   0980A0E1           MOV      R8,R9
   1404                  }
   1405                  Code <<= 1;
   \                     ??_CreateHuffmanTable_15:
   \   000001E0   8000A0E1           LSL      R0,R0,#+1
   1406                }
   \   000001E4   013053E2           SUBS     R3,R3,#+1
   \   000001E8   F0FFFF1A           BNE      ??_CreateHuffmanTable_13
   1407                if ((Code & 0x8000) == 0) {
   \                     ??_CreateHuffmanTable_12:
   \   000001EC   800C10E3           TST      R0,#0x8000
   1408                  CurrentEntry--;
   \   000001F0   01804802           SUBEQ    R8,R8,#+1
   1409                }
   1410                pTable->aTree[-CurrentEntry - 1] = i;
   \   000001F4   000068E2           RSB      R0,R8,#+0
   \   000001F8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000001FC   FC2480E5           STR      R2,[R0, #+1276]
   1411              }
   1412              p++;
   \                     ??_CreateHuffmanTable_10:
   \   00000200   046086E2           ADD      R6,R6,#+4
   \   00000204   01E08EE2           ADD      LR,LR,#+1
   \   00000208   01C08CE2           ADD      R12,R12,#+1
   \   0000020C   014054E2           SUBS     R4,R4,#+1
   1413            }
   \   00000210   C0FFFF1A           BNE      ??_CreateHuffmanTable_8
   1414          }
   \                     ??_CreateHuffmanTable_7:
   \   00000214   43DF8DE2           ADD      SP,SP,#+268
   \   00000218   40DE8DE2           ADD      SP,SP,#+1024
   \   0000021C   F083BDE8           POP      {R4-R9,PC}       ;; return
   1415          
   1416          /*********************************************************************
   1417          *
   1418          *       _CheckHuffmanTables
   1419          */

   \                                 In section .text, align 4, keep-with-next
   1420          static int _CheckHuffmanTables(GUI_JPEG_DCONTEXT * pContext) {
   \                     _CheckHuffmanTables:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1421            int i;
   1422            for (i = 0; i < pContext->NumCompsPerScan; i++) {
   \   00000004   7530A0E3           MOV      R3,#+117
   \   00000008   733C83E3           ORR      R3,R3,#0x7300
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   431043E2           SUB      R1,R3,#+67
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   01C0C3E3           BIC      R12,R3,#0x1
   \   00000024   47E043E2           SUB      LR,R3,#+71
   \   00000028   055041E2           SUB      R5,R1,#+5
   \   0000002C   0B0000EA           B        ??_CheckHuffmanTables_0
   1423              unsigned TableIndex;
   1424              TableIndex = pContext->aCompList[i];
   1425              if ((pContext->SpectralStart == 0) && (pContext->aHuffNumTableAvail[pContext->aCompDC_Tab[TableIndex]] == 0)) {
   1426                return 1;
   1427              }
   1428              if ((pContext->SpectralEnd   >  0) && (pContext->aHuffNumTableAvail[pContext->aCompAC_Tab[TableIndex]] == 0)) {
   \                     ??_CheckHuffmanTables_1:
   \   00000030   0470D3E7           LDRB     R7,[R3, +R4]
   \   00000034   000057E3           CMP      R7,#+0
   \   00000038   0600000A           BEQ      ??_CheckHuffmanTables_2
   \   0000003C   046086E0           ADD      R6,R6,R4
   \   00000040   066081E0           ADD      R6,R1,R6
   \   00000044   0460D6E5           LDRB     R6,[R6, #+4]
   \   00000048   046086E0           ADD      R6,R6,R4
   \   0000004C   2C60D6E5           LDRB     R6,[R6, #+44]
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   0E00000A           BEQ      ??_CheckHuffmanTables_3
   \                     ??_CheckHuffmanTables_2:
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   012082E2           ADD      R2,R2,#+1
   \                     ??_CheckHuffmanTables_0:
   \   00000060   0460D5E7           LDRB     R6,[R5, +R4]
   \   00000064   060050E1           CMP      R0,R6
   \   00000068   0B0000AA           BGE      ??_CheckHuffmanTables_4
   \   0000006C   0470DCE7           LDRB     R7,[R12, +R4]
   \   00000070   0260DEE7           LDRB     R6,[LR, +R2]
   \   00000074   000057E3           CMP      R7,#+0
   \   00000078   ECFFFF1A           BNE      ??_CheckHuffmanTables_1
   \   0000007C   047086E0           ADD      R7,R6,R4
   \   00000080   0770D1E7           LDRB     R7,[R1, +R7]
   \   00000084   047087E0           ADD      R7,R7,R4
   \   00000088   2C70D7E5           LDRB     R7,[R7, #+44]
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   E6FFFF1A           BNE      ??_CheckHuffmanTables_1
   \                     ??_CheckHuffmanTables_3:
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   280000EA           B        ??_CheckHuffmanTables_5
   1429                return 1;
   1430              }
   1431            }
   1432            for (i = 0; i < MAX_HUFFTABLES; i++) {
   \                     ??_CheckHuffmanTables_4:
   \   0000009C   BC50A0E3           MOV      R5,#+188
   \   000000A0   0060A0E3           MOV      R6,#+0
   \   000000A4   0470A0E1           MOV      R7,R4
   \   000000A8   805E85E3           ORR      R5,R5,#0x800
   1433              _CreateHuffmanTable(pContext, i, &pContext->aHuffTable[i]);
   \                     ??_CheckHuffmanTables_6:
   \   000000AC   072085E0           ADD      R2,R5,R7
   \   000000B0   0610A0E1           MOV      R1,R6
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       _CreateHuffmanTable
   1434            }
   \   000000BC   016086E2           ADD      R6,R6,#+1
   \   000000C0   D07E87E2           ADD      R7,R7,#+3328
   \   000000C4   080056E3           CMP      R6,#+8
   \   000000C8   F7FFFFBA           BLT      ??_CheckHuffmanTables_6
   1435            for (i = 0; i < pContext->NumBlocksPerMCU; i++) {
   \   000000CC   6430A0E3           MOV      R3,#+100
   \   000000D0   733C83E3           ORR      R3,R3,#0x7300
   \   000000D4   ECE083E2           ADD      LR,R3,#+236
   \   000000D8   04609EE7           LDR      R6,[LR, +R4]
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   0420A0E1           MOV      R2,R4
   \   000000E4   AACF43E2           SUB      R12,R3,#+680
   \   000000E8   321043E2           SUB      R1,R3,#+50
   \   000000EC   010056E3           CMP      R6,#+1
   \   000000F0   110000BA           BLT      ??_CheckHuffmanTables_7
   1436              int MCU_Org;
   1437              U8  CompDC_Tab;
   1438              MCU_Org    = pContext->aMCU_Org[i];
   \                     ??_CheckHuffmanTables_8:
   \   000000F4   02608CE0           ADD      R6,R12,R2
   \   000000F8   988396E5           LDR      R8,[R6, #+920]
   1439              CompDC_Tab = pContext->aCompDC_Tab[MCU_Org];
   1440              pContext->apDC_Huff[i]   = &pContext->aHuffTable [MCU_Org];
   \   000000FC   D09EA0E3           MOV      R9,#+3328
   \   00000100   047088E0           ADD      R7,R8,R4
   \   00000104   994828E0           MLA      R8,R9,R8,R4
   \   00000108   0770D1E7           LDRB     R7,[R1, +R7]
   \   0000010C   089085E0           ADD      R9,R5,R8
   \   00000110   02908CE7           STR      R9,[R12, +R2]
   1441              pContext->apAC_Huff[i]   = &pContext->aHuffTable [MCU_Org];
   \   00000114   088085E0           ADD      R8,R5,R8
   1442              pContext->apComponent[i] = &pContext->aLastDC_Val[CompDC_Tab];
   \   00000118   077184E0           ADD      R7,R4,R7, LSL #+2
   \   0000011C   288086E5           STR      R8,[R6, #+40]
   \   00000120   077083E0           ADD      R7,R3,R7
   \   00000124   807286E5           STR      R7,[R6, #+640]
   1443            }
   \   00000128   04609EE7           LDR      R6,[LR, +R4]
   \   0000012C   010080E2           ADD      R0,R0,#+1
   \   00000130   042082E2           ADD      R2,R2,#+4
   \   00000134   060050E1           CMP      R0,R6
   \   00000138   EDFFFFBA           BLT      ??_CheckHuffmanTables_8
   1444            return 0;
   \                     ??_CheckHuffmanTables_7:
   \   0000013C   0000A0E3           MOV      R0,#+0
   \                     ??_CheckHuffmanTables_5:
   \   00000140   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000144   F083BDE8           POP      {R4-R9,PC}       ;; return
   1445          }
   1446          
   1447          /*********************************************************************
   1448          *
   1449          *       _CheckQuantTables
   1450          */
   1451          static int _CheckQuantTables(GUI_JPEG_DCONTEXT * pContext) {
   1452            int i;
   1453            for (i = 0; i < pContext->NumCompsPerScan; i++) {
   1454              if (pContext->apQuantTbl[pContext->aCompQuant[pContext->aCompList[i]]] == NULL) {
   1455                return 1;
   1456              }
   1457            }
   1458            return 0;
   1459          }
   1460          
   1461          /*********************************************************************
   1462          *
   1463          *       _InitScan
   1464          */

   \                                 In section .text, align 4, keep-with-next
   1465          static int _InitScan(GUI_JPEG_DCONTEXT * pContext) {
   \                     _InitScan:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   1466            U8 Marker;
   1467            if (_ReadMarkers(pContext, &Marker)) {
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   ........           BL       _ReadMarkers
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100000A           BEQ      ??_InitScan_0
   1468              return 1;
   \                     ??_InitScan_1:
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   3A0000EA           B        ??_InitScan_2
   1469            }
   1470            if (Marker != M_SOS) {
   \                     ??_InitScan_0:
   \   00000024   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000028   DA0050E3           CMP      R0,#+218
   \   0000002C   FAFFFF1A           BNE      ??_InitScan_1
   1471              return 1;
   1472            }
   1473            if (_GetSOS(pContext)) {
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       _GetSOS
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F6FFFF1A           BNE      ??_InitScan_1
   1474              return 1;
   1475            }
   1476            _CalcMCUBlockOrder(pContext);
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       _CalcMCUBlockOrder
   1477            if (_CheckHuffmanTables(pContext)) {
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       _CheckHuffmanTables
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F0FFFF1A           BNE      ??_InitScan_1
   1478              return 1;
   1479            }
   1480            if (_CheckQuantTables(pContext)) {
   \   00000058   0C20A0E3           MOV      R2,#+12
   \   0000005C   732C82E3           ORR      R2,R2,#0x7300
   \   00000060   0410A0E1           MOV      R1,R4
   \   00000064   193082E2           ADD      R3,R2,#+25
   \   00000068   22C082E3           ORR      R12,R2,#0x22
   \   0000006C   21E082E3           ORR      LR,R2,#0x21
   \   00000070   080000EA           B        ??_InitScan_3
   \                     ??_InitScan_4:
   \   00000074   0150DCE7           LDRB     R5,[R12, +R1]
   \   00000078   045085E0           ADD      R5,R5,R4
   \   0000007C   0550D3E7           LDRB     R5,[R3, +R5]
   \   00000080   055184E0           ADD      R5,R4,R5, LSL #+2
   \   00000084   055092E7           LDR      R5,[R2, +R5]
   \   00000088   000055E3           CMP      R5,#+0
   \   0000008C   E2FFFF0A           BEQ      ??_InitScan_1
   \   00000090   010080E2           ADD      R0,R0,#+1
   \   00000094   011081E2           ADD      R1,R1,#+1
   \                     ??_InitScan_3:
   \   00000098   0450DEE7           LDRB     R5,[LR, +R4]
   \   0000009C   050050E1           CMP      R0,R5
   \   000000A0   F3FFFFBA           BLT      ??_InitScan_4
   1481              return 1;
   1482            }
   1483            GUI_MEMSET((U8 *)pContext->aLastDC_Val, 0, sizeof(pContext->aLastDC_Val));
   \   000000A4   3F0083E2           ADD      R0,R3,#+63
   \   000000A8   1020A0E3           MOV      R2,#+16
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   040080E0           ADD      R0,R0,R4
   \   000000B4   ........           BL       GUI__memset
   1484            pContext->EOB_Run = 0;
   \   000000B8   3810A0E3           MOV      R1,#+56
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   741C81E3           ORR      R1,R1,#0x7400
   \   000000C4   040081E7           STR      R0,[R1, +R4]
   \   000000C8   041081E3           ORR      R1,R1,#0x4
   \   000000CC   041091E7           LDR      R1,[R1, +R4]
   \   000000D0   000051E3           CMP      R1,#+0
   \   000000D4   0400000A           BEQ      ??_InitScan_5
   1485            if (pContext->RestartInterval) {
   1486              pContext->RestartsLeft   = pContext->RestartInterval;
   \   000000D8   4020A0E3           MOV      R2,#+64
   \   000000DC   742C82E3           ORR      R2,R2,#0x7400
   \   000000E0   041082E7           STR      R1,[R2, +R4]
   1487              pContext->NextRestartNum = 0;
   \   000000E4   041082E3           ORR      R1,R2,#0x4
   \   000000E8   040081E7           STR      R0,[R1, +R4]
   1488            }
   1489            _InitBitBuffer(pContext);
   \                     ??_InitScan_5:
   \   000000EC   1000A0E3           MOV      R0,#+16
   \   000000F0   280084E5           STR      R0,[R4, #+40]
   \   000000F4   1010A0E3           MOV      R1,#+16
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           BL       _GetBitsNoMarker
   \   00000100   1010A0E3           MOV      R1,#+16
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       _GetBitsNoMarker
   1490            return 0;
   \   0000010C   0000A0E3           MOV      R0,#+0
   \                     ??_InitScan_2:
   \   00000110   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000114   3080BDE8           POP      {R4,R5,PC}       ;; return
   1491          }
   1492          
   1493          /*********************************************************************
   1494          *
   1495          *       _CalcBanding
   1496          *
   1497          * Purpose:
   1498          *   Returns the number of required bands. If too less memory is available
   1499          *   for scanning the whole frame, the frame will be drawn band by band.
   1500          *   This routine calculates the number of required bands.
   1501          */

   \                                 In section .text, align 4, keep-with-next
   1502          static int _CalcBanding(GUI_JPEG_DCONTEXT * pContext) {
   \                     _CalcBanding:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1503            int i;
   1504            U32 MemSize;
   1505            U32 RequiredBytes;
   1506          
   1507            RequiredBytes = 0;
   1508            for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \   00000004   1810A0E3           MOV      R1,#+24
   \   00000008   741C81E3           ORR      R1,R1,#0x7400
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   FC6041E2           SUB      R6,R1,#+252
   \   00000014   0580D6E7           LDRB     R8,[R6, +R5]
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   8230A0E3           MOV      R3,#+130
   \   00000024   FBC041E2           SUB      R12,R1,#+251
   \   00000028   04E041E2           SUB      LR,R1,#+4
   \   0000002C   010058E3           CMP      R8,#+1
   \   00000030   0C0000BA           BLT      ??_CalcBanding_0
   1509              RequiredBytes += (64 + 1) * sizeof(I16) *
   1510                               pContext->MaxMCUsPerRow * pContext->aCompHSamp[i] *
   1511                               pContext->MaxMCUsPerCol * pContext->aCompVSamp[i];
   \                     ??_CalcBanding_1:
   \   00000034   00908CE0           ADD      R9,R12,R0
   \   00000038   0490D9E5           LDRB     R9,[R9, #+4]
   \   0000003C   05A09EE7           LDR      R10,[LR, +R5]
   1512            }
   \   00000040   012082E2           ADD      R2,R2,#+1
   \   00000044   9A0909E0           MUL      R9,R10,R9
   \   00000048   00A0DCE7           LDRB     R10,[R12, +R0]
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   080052E1           CMP      R2,R8
   \   00000054   9A0909E0           MUL      R9,R10,R9
   \   00000058   05A091E7           LDR      R10,[R1, +R5]
   \   0000005C   9A0909E0           MUL      R9,R10,R9
   \   00000060   937927E0           MLA      R7,R3,R9,R7
   \   00000064   F2FFFFBA           BLT      ??_CalcBanding_1
   1513          #if TEST_BANDING
   1514            MemSize = RequiredBytes / 3;
   1515          #else
   1516            MemSize = GUI_ALLOC_GetMaxSize();
   \                     ??_CalcBanding_0:
   \   00000068   ........           BL       GUI_ALLOC_GetMaxSize
   1517          #endif
   1518            if (MemSize < RequiredBytes) {
   \   0000006C   070050E1           CMP      R0,R7
   \   00000070   2600002A           BCS      ??_CalcBanding_2
   1519              U32 RequiredBytes1;
   1520          
   1521              pContext->BandingRequired = 1;
   \   00000074   A010A0E3           MOV      R1,#+160
   \   00000078   841C81E3           ORR      R1,R1,#0x8400
   \   0000007C   0120A0E3           MOV      R2,#+1
   \   00000080   0520C1E7           STRB     R2,[R1, +R5]
   1522              RequiredBytes1 = 0;
   1523              for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \   00000084   01C086E3           ORR      R12,R6,#0x1
   \   00000088   F8E086E2           ADD      LR,R6,#+248
   \   0000008C   0560D6E7           LDRB     R6,[R6, +R5]
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0540A0E1           MOV      R4,R5
   \   0000009C   8230A0E3           MOV      R3,#+130
   \   000000A0   010056E3           CMP      R6,#+1
   \   000000A4   070000BA           BLT      ??_CalcBanding_3
   1524                RequiredBytes1 += (64 + 1) * sizeof(I16) * pContext->MaxMCUsPerRow * pContext->aCompHSamp[i];
   \                     ??_CalcBanding_4:
   \   000000A8   0470DCE7           LDRB     R7,[R12, +R4]
   \   000000AC   05809EE7           LDR      R8,[LR, +R5]
   1525              }
   \   000000B0   012082E2           ADD      R2,R2,#+1
   \   000000B4   980707E0           MUL      R7,R8,R7
   \   000000B8   014084E2           ADD      R4,R4,#+1
   \   000000BC   931721E0           MLA      R1,R3,R7,R1
   \   000000C0   060052E1           CMP      R2,R6
   \   000000C4   F7FFFFBA           BLT      ??_CalcBanding_4
   1526              pContext->NumBlocksPerBand = MemSize / RequiredBytes1;
   \                     ??_CalcBanding_3:
   \   000000C8   ........           BL       __aeabi_uidiv
   \   000000CC   A840A0E3           MOV      R4,#+168
   \   000000D0   844C84E3           ORR      R4,R4,#0x8400
   1527              if (pContext->NumBlocksPerBand == 0) {
   \   000000D4   0010A0E1           MOV      R1,R0
   \   000000D8   050084E7           STR      R0,[R4, +R5]
   \   000000DC   000051E3           CMP      R1,#+0
   \   000000E0   0100001A           BNE      ??_CalcBanding_5
   1528                return 1;
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   F087BDE8           POP      {R4-R10,PC}
   1529              }
   1530              pContext->NumBands = (((pContext->ySize + 7) / 8) + pContext->NumBlocksPerBand - 1) / pContext->NumBlocksPerBand;
   \                     ??_CalcBanding_5:
   \   000000EC   BE00D5E1           LDRH     R0,[R5, #+14]
   \   000000F0   070080E2           ADD      R0,R0,#+7
   \   000000F4   4021A0E1           ASR      R2,R0,#+2
   \   000000F8   A20E80E0           ADD      R0,R0,R2, LSR #+29
   \   000000FC   C00181E0           ADD      R0,R1,R0, ASR #+3
   \   00000100   010040E2           SUB      R0,R0,#+1
   \   00000104   ........           BL       __aeabi_idiv
   \   00000108   041044E2           SUB      R1,R4,#+4
   \   0000010C   050081E7           STR      R0,[R1, +R5]
   1531            }
   1532            return 0;
   \                     ??_CalcBanding_2:
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   F087BDE8           POP      {R4-R10,PC}      ;; return
   1533          }
   1534          
   1535          /*********************************************************************
   1536          *
   1537          *       _DecodeProgressive
   1538          *
   1539          * Purpose:
   1540          *   Initializes a progressive scan. It also contains allocating of
   1541          *   the AC and DC coefficient buffers.
   1542          */

   \                                 In section .text, align 4, keep-with-next
   1543          static int _DecodeProgressive(GUI_HMEM hContext) {
   \                     _DecodeProgressive:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1544            GUI_JPEG_DCONTEXT * pContext;
   1545            int i;
   1546            int r = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   1C50A0E3           MOV      R5,#+28
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
   \   00000018   735C85E3           ORR      R5,R5,#0x7300
   1547            U8 NumCompsPerFrame;
   1548            pContext = JPEG_LOCK_H(hContext);
   1549            NumCompsPerFrame = pContext->NumCompsPerFrame;
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0060D5E7           LDRB     R6,[R5, +R0]
   1550            GUI_UNLOCK_H(pContext);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1551            if (NumCompsPerFrame == 4) {
   \   00000028   040056E3           CMP      R6,#+4
   \   0000002C   0100001A           BNE      ??_DecodeProgressive_0
   1552              return 1; /* Error: Unsupported color space */
   \                     ??_DecodeProgressive_1:
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   7F0000EA           B        ??_DecodeProgressive_2
   1553            }
   1554            for (i = 0; i < NumCompsPerFrame; i++) {
   \                     ??_DecodeProgressive_0:
   \   00000038   0050A0E3           MOV      R5,#+0
   \   0000003C   010056E3           CMP      R6,#+1
   \   00000040   320000BA           BLT      ??_DecodeProgressive_3
   \   00000044   010016E3           TST      R6,#0x1
   \   00000048   0E00000A           BEQ      ??_DecodeProgressive_4
   1555              if (_CoeffBufferAlloc(hContext, DC_COEFFS, i, 1)) {
   \   0000004C   0130A0E3           MOV      R3,#+1
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       _CoeffBufferAlloc
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   F1FFFF1A           BNE      ??_DecodeProgressive_1
   1556                return 1;
   1557              }
   1558              if (_CoeffBufferAlloc(hContext, AC_COEFFS, i, 8)) {
   \   00000068   0830A0E3           MOV      R3,#+8
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       _CoeffBufferAlloc
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   EAFFFF1A           BNE      ??_DecodeProgressive_1
   \   00000084   0150A0E3           MOV      R5,#+1
   \                     ??_DecodeProgressive_4:
   \   00000088   A660B0E1           LSRS     R6,R6,#+1
   \   0000008C   1F00000A           BEQ      ??_DecodeProgressive_3
   \                     ??_DecodeProgressive_5:
   \   00000090   0130A0E3           MOV      R3,#+1
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       _CoeffBufferAlloc
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   E0FFFF1A           BNE      ??_DecodeProgressive_1
   \   000000AC   0830A0E3           MOV      R3,#+8
   \   000000B0   0520A0E1           MOV      R2,R5
   \   000000B4   0210A0E3           MOV      R1,#+2
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       _CoeffBufferAlloc
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   D9FFFF1A           BNE      ??_DecodeProgressive_1
   \   000000C8   015085E2           ADD      R5,R5,#+1
   \   000000CC   0130A0E3           MOV      R3,#+1
   \   000000D0   0520A0E1           MOV      R2,R5
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       _CoeffBufferAlloc
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   D1FFFF1A           BNE      ??_DecodeProgressive_1
   \   000000E8   0830A0E3           MOV      R3,#+8
   \   000000EC   0520A0E1           MOV      R2,R5
   \   000000F0   0210A0E3           MOV      R1,#+2
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       _CoeffBufferAlloc
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   CAFFFF1A           BNE      ??_DecodeProgressive_1
   1559                return 1;
   1560              }
   1561            }
   \   00000104   015085E2           ADD      R5,R5,#+1
   \   00000108   016056E2           SUBS     R6,R6,#+1
   \   0000010C   DFFFFF1A           BNE      ??_DecodeProgressive_5
   1562            pContext = JPEG_LOCK_H(hContext);
   \                     ??_DecodeProgressive_3:
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       GUI_ALLOC_LockH
   \   00000118   7670A0E3           MOV      R7,#+118
   \   0000011C   737C87E3           ORR      R7,R7,#0x7300
   \   00000120   0040A0E1           MOV      R4,R0
   \   00000124   ........           LDR      R5,??DataTable7
   \   00000128   ........           LDR      R6,??DataTable7_1
   \   0000012C   018047E2           SUB      R8,R7,#+1
   \   00000130   019087E3           ORR      R9,R7,#0x1
   \   00000134   02A0C7E3           BIC      R10,R7,#0x2
   \   00000138   49B047E2           SUB      R11,R7,#+73
   1563            while (1) {
   1564              int DC_OnlyScan;
   1565              int RefinementScan;
   1566              int (* pfDecodeBlock)(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY);
   1567              /* Initialize scan by reading the markers including the SOS marker */
   1568              if (_InitScan(pContext)) {
   \                     ??_DecodeProgressive_6:
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       _InitScan
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   2800001A           BNE      ??_DecodeProgressive_7
   1569                /* Break if there is nothing else to scan */
   1570                break;
   1571              }
   1572              DC_OnlyScan    = (pContext->SpectralStart  ? 0 : 1);
   \   0000014C   0430DAE7           LDRB     R3,[R10, +R4]
   1573              RefinementScan = (pContext->SuccessiveHigh ? 1 : 0);
   \   00000150   0410D9E7           LDRB     R1,[R9, +R4]
   1574              if (pContext->SpectralStart > pContext->SpectralEnd) {
   \   00000154   04C0D8E7           LDRB     R12,[R8, +R4]
   \   00000158   000053E3           CMP      R3,#+0
   \   0000015C   0100A003           MOVEQ    R0,#+1
   \   00000160   000051E3           CMP      R1,#+0
   \   00000164   0120A013           MOVNE    R2,#+1
   \   00000168   0020A003           MOVEQ    R2,#+0
   \   0000016C   03005CE1           CMP      R12,R3
   \   00000170   0200002A           BCS      ??_DecodeProgressive_8
   1575                r = 1; /* Error: Bad SOS spectral */
   \                     ??_DecodeProgressive_9:
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   00108DE5           STR      R1,[SP, #+0]
   1576                break;
   \   0000017C   2B0000EA           B        ??_DecodeProgressive_10
   1577              }
   1578              if (DC_OnlyScan) {
   \                     ??_DecodeProgressive_8:
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0200000A           BEQ      ??_DecodeProgressive_11
   1579                if (pContext->SpectralEnd) {
   \   00000188   00005CE3           CMP      R12,#+0
   \   0000018C   0300000A           BEQ      ??_DecodeProgressive_12
   \   00000190   F7FFFFEA           B        ??_DecodeProgressive_9
   1580                  r = 1; /* Error: Bad SOS spectral */
   1581                  break;
   1582                }
   1583              } else if (pContext->NumCompsPerScan != 1) {
   \                     ??_DecodeProgressive_11:
   \   00000194   0430DBE7           LDRB     R3,[R11, +R4]
   \   00000198   010053E3           CMP      R3,#+1
   \   0000019C   F4FFFF1A           BNE      ??_DecodeProgressive_9
   1584                r = 1; /* Error: Bad SOS spectral */
   1585                break;
   1586              }
   1587              if (RefinementScan && (pContext->SuccessiveLow != (pContext->SuccessiveHigh - 1))) {
   \                     ??_DecodeProgressive_12:
   \   000001A0   000052E3           CMP      R2,#+0
   \   000001A4   0300000A           BEQ      ??_DecodeProgressive_13
   \   000001A8   0430D7E7           LDRB     R3,[R7, +R4]
   \   000001AC   011041E2           SUB      R1,R1,#+1
   \   000001B0   010053E1           CMP      R3,R1
   \   000001B4   EEFFFF1A           BNE      ??_DecodeProgressive_9
   1588                r = 1; /* Error: Bad SOS successive */
   1589                break;
   1590              }
   1591              /* Set the right decoding routine */
   1592              if (DC_OnlyScan) {
   \                     ??_DecodeProgressive_13:
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0300000A           BEQ      ??_DecodeProgressive_14
   1593                if (RefinementScan) {
   \   000001C0   000052E3           CMP      R2,#+0
   1594                  pfDecodeBlock = _DecodeBlockDC_Refine;
   \   000001C4   0610A011           MOVNE    R1,R6
   \   000001C8   0510A001           MOVEQ    R1,R5
   \   000001CC   020000EA           B        ??_DecodeProgressive_15
   1595                } else {
   1596                  pfDecodeBlock = _DecodeBlockDC_First;
   1597                }
   1598              } else {
   1599                if (RefinementScan) {
   \                     ??_DecodeProgressive_14:
   \   000001D0   000052E3           CMP      R2,#+0
   1600                  pfDecodeBlock = _DecodeBlockAC_Refine;
   \   000001D4   ........           LDRNE    R1,??DataTable7_2
   1601                } else {
   1602                  pfDecodeBlock = _DecodeBlockAC_First;
   \   000001D8   ........           LDREQ    R1,??DataTable7_3
   1603                }
   1604              }
   1605              /* Decode... */
   1606              if (_DecodeScanProg(pContext, pfDecodeBlock)) {
   \                     ??_DecodeProgressive_15:
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           BL       _DecodeScanProg
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   D3FFFF0A           BEQ      ??_DecodeProgressive_6
   \   000001EC   E0FFFFEA           B        ??_DecodeProgressive_9
   1607                r = 1;
   1608                break;
   1609              }
   1610            }
   1611            if (r == 0) {
   1612              pContext->NumCompsPerScan = pContext->NumCompsPerFrame;
   \                     ??_DecodeProgressive_7:
   \   000001F0   5A0047E2           SUB      R0,R7,#+90
   \   000001F4   0400D0E7           LDRB     R0,[R0, +R4]
   1613              for (i = 0; i < pContext->NumCompsPerScan; i++) {
   \   000001F8   0050A0E3           MOV      R5,#+0
   \   000001FC   0410A0E1           MOV      R1,R4
   \   00000200   0400CBE7           STRB     R0,[R11, +R4]
   \   00000204   482047E2           SUB      R2,R7,#+72
   \   00000208   010050E3           CMP      R0,#+1
   \   0000020C   050000BA           BLT      ??_DecodeProgressive_16
   1614                pContext->aCompList[i] = i;
   \                     ??_DecodeProgressive_17:
   \   00000210   0150C2E7           STRB     R5,[R2, +R1]
   1615              }
   \   00000214   0400DBE7           LDRB     R0,[R11, +R4]
   \   00000218   015085E2           ADD      R5,R5,#+1
   \   0000021C   011081E2           ADD      R1,R1,#+1
   \   00000220   000055E1           CMP      R5,R0
   \   00000224   F9FFFFBA           BLT      ??_DecodeProgressive_17
   1616              _CalcMCUBlockOrder(pContext);
   \                     ??_DecodeProgressive_16:
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   ........           BL       _CalcMCUBlockOrder
   1617            }
   1618            GUI_UNLOCK_H(pContext);
   \                     ??_DecodeProgressive_10:
   \   00000230   ........           BL       GUI_ALLOC_UnlockH
   1619            return r;
   \   00000234   00009DE5           LDR      R0,[SP, #+0]
   \                     ??_DecodeProgressive_2:
   \   00000238   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000023C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1620          }
   1621          
   1622          /*********************************************************************
   1623          *
   1624          *       _WritePixels
   1625          *
   1626          * Purpose:
   1627          *   Routine for drawing one line of decoded data.
   1628          */

   \                                 In section .text, align 4, keep-with-next
   1629          static void _WritePixels(int x0, int y0, GUI_JPEG_DCONTEXT * pContext, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), tLCDDEV_Color2Index * pfColor2Index) {
   \                     _WritePixels:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1630            int xSize;
   1631            const U8 * pData;
   1632            
   1633            GUI_USE_PARA(pfColor2Index);
   1634            if (pContext->BufferIndex == 0) {
   \   00000008   9400A0E3           MOV      R0,#+148
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   740C80E3           ORR      R0,R0,#0x7400
   \   00000018   081080E0           ADD      R1,R0,R8
   \   0000001C   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000020   08D04DE2           SUB      SP,SP,#+8
   \   00000024   0360A0E1           MOV      R6,R3
   \   00000028   000052E3           CMP      R2,#+0
   \   0000002C   20709DE5           LDR      R7,[SP, #+32]
   1635              pData = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   00000030   08009007           LDREQ    R0,[R0, +R8]
   1636            } else {
   1637              pData = (U8 *)GUI_LOCK_H(pContext->hScanLine1);
   \   00000034   04009115           LDRNE    R0,[R1, #+4]
   \   00000038   ........           BL       GUI_ALLOC_LockH
   \   0000003C   00008DE5           STR      R0,[SP, #+0]
   1638            }
   1639            xSize = pContext->xSize;
   \   00000040   BC80D8E1           LDRH     R8,[R8, #+12]
   \   00000044   000058E3           CMP      R8,#+0
   \   00000048   2000000A           BEQ      ??_WritePixels_0
   \   0000004C   010018E3           TST      R8,#0x1
   \   00000050   0800000A           BEQ      ??_WritePixels_1
   1640            while (xSize) {
   1641              LCD_PIXELINDEX Index;
   1642              GUI_COLOR Color;
   1643              Color = pfGetColor(&pData, 1);
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   36FF2FE1           BLX      R6
   1644              Index = pfColor2Index(Color);
   \   00000060   37FF2FE1           BLX      R7
   1645              LCD_SetPixelIndex(x0++, y0, Index);
   \   00000064   0020A0E1           MOV      R2,R0
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       LCD_SetPixelIndex
   \   00000074   014084E2           ADD      R4,R4,#+1
   1646              xSize--;
   \                     ??_WritePixels_1:
   \   00000078   A880B0E1           LSRS     R8,R8,#+1
   \   0000007C   1300000A           BEQ      ??_WritePixels_0
   \                     ??_WritePixels_2:
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   36FF2FE1           BLX      R6
   \   0000008C   37FF2FE1           BLX      R7
   \   00000090   0020A0E1           MOV      R2,R0
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       LCD_SetPixelIndex
   \   000000A0   014084E2           ADD      R4,R4,#+1
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   36FF2FE1           BLX      R6
   \   000000B0   37FF2FE1           BLX      R7
   \   000000B4   0020A0E1           MOV      R2,R0
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       LCD_SetPixelIndex
   \   000000C4   014084E2           ADD      R4,R4,#+1
   \   000000C8   018058E2           SUBS     R8,R8,#+1
   \   000000CC   EBFFFF1A           BNE      ??_WritePixels_2
   1647            }
   1648            GUI_UNLOCK_H(pData);
   \                     ??_WritePixels_0:
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   1649          }
   \   000000D4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000D8   F081BDE8           POP      {R4-R8,PC}       ;; return
   1650          
   1651          /*********************************************************************
   1652          *
   1653          *       _WritePixelsOptRGB
   1654          *
   1655          * Purpose:
   1656          *   Optimized routine for drawing one line of decoded RGB data.
   1657          */

   \                                 In section .text, align 4, keep-with-next
   1658          static void _WritePixelsOptRGB(int x0, int y0, GUI_JPEG_DCONTEXT * pContext, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), tLCDDEV_Color2Index * pfColor2Index) {
   \                     _WritePixelsOptRGB:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1659            LCD_PIXELINDEX * p;
   1660            LCD_PIXELINDEX * pSic;
   1661            int xSize, Bpp;
   1662            LCD_COLOR * pColor;
   1663          
   1664            GUI_USE_PARA(pfGetColor);
   1665            if (pContext->BufferIndex == 0) {
   \   00000004   0CA0A0E3           MOV      R10,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   74AC8AE3           ORR      R10,R10,#0x7400
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   06008AE0           ADD      R0,R10,R6
   \   0000001C   9010D0E5           LDRB     R1,[R0, #+144]
   \   00000020   1CD04DE2           SUB      SP,SP,#+28
   \   00000024   40709DE5           LDR      R7,[SP, #+64]
   \   00000028   000051E3           CMP      R1,#+0
   1666              pColor = (LCD_COLOR *)GUI_LOCK_H(pContext->hScanLine0);
   \   0000002C   88009005           LDREQ    R0,[R0, #+136]
   1667            } else {
   1668              pColor = (LCD_COLOR *)GUI_LOCK_H(pContext->hScanLine1);
   \   00000030   8C009015           LDRNE    R0,[R0, #+140]
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   0080A0E1           MOV      R8,R0
   1669            }
   1670            xSize = pContext->xSize;
   1671            if (pContext->hBmpLine) {
   \   0000003C   06009AE7           LDR      R0,[R10, +R6]
   \   00000040   BC90D6E1           LDRH     R9,[R6, #+12]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1700000A           BEQ      ??_WritePixelsOptRGB_0
   1672              p = (LCD_PIXELINDEX *)GUI_LOCK_H(pContext->hBmpLine);
   \   0000004C   ........           BL       GUI_ALLOC_LockH
   \   00000050   00B0A0E1           MOV      R11,R0
   1673              pSic = p;
   \   00000054   0BA0A0E1           MOV      R10,R11
   1674              do {
   1675                LCD_COLOR Color;
   1676                Color = *pColor++;
   \                     ??_WritePixelsOptRGB_1:
   \   00000058   040098E4           LDR      R0,[R8], #+4
   1677                *p++ = pfColor2Index(Color);
   \   0000005C   37FF2FE1           BLX      R7
   \   00000060   04008BE4           STR      R0,[R11], #+4
   1678              } while (--xSize);
   \   00000064   019059E2           SUBS     R9,R9,#+1
   \   00000068   FAFFFF1A           BNE      ??_WritePixelsOptRGB_1
   1679              Bpp = LCD_GetBitsPerPixel();
   \   0000006C   ........           BL       LCD_GetBitsPerPixel
   1680              LCD_DrawBitmap(x0, y0, pContext->xSize, 1, 1, 1, Bpp, pContext->xSize * sizeof(LCD_PIXELINDEX), (U8 *)pSic, NULL);
   \   00000070   BC20D6E1           LDRH     R2,[R6, #+12]
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   14108DE5           STR      R1,[SP, #+20]
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   0211A0E1           LSL      R1,R2,#+2
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   0C108DE5           STR      R1,[SP, #+12]
   \   0000008C   04008DE5           STR      R0,[SP, #+4]
   \   00000090   00008DE5           STR      R0,[SP, #+0]
   \   00000094   10A08DE5           STR      R10,[SP, #+16]
   \   00000098   0130A0E3           MOV      R3,#+1
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       LCD_DrawBitmap
   1681              GUI_UNLOCK_H(p);
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
   1682            }
   1683            GUI_UNLOCK_H(pColor);
   \                     ??_WritePixelsOptRGB_0:
   \   000000AC   1CD08DE2           ADD      SP,SP,#+28
   \   000000B0   F04FBDE8           POP      {R4-R11,LR}
   \   000000B4   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
   1684          }
   1685          
   1686          /*********************************************************************
   1687          *
   1688          *       _InitFrame
   1689          *
   1690          * Purpose:
   1691          *   Initializes variables and does the memory allocation for decoding
   1692          *   a JPEG file.
   1693          */

   \                                 In section .text, align 4, keep-with-next
   1694          static int _InitFrame(GUI_HMEM hContext) {
   \                     _InitFrame:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   1695            GUI_JPEG_DCONTEXT * pContext;
   1696                int ScanType;
   1697                GUI_HMEM hScanLine0;
   1698                GUI_HMEM hScanLine1;
   1699                GUI_HMEM hBlocks;
   1700                GUI_HMEM hSampleBuf;
   1701                GUI_HMEM hBlockMaxZagSet;
   1702                U8 * pBlockMaxZagSet;
   1703              int MaxBlocksPerRow, DestBytesPerScanline;
   1704            int i, k;
   1705            int r = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
   1706            pContext = JPEG_LOCK_H(hContext);
   \   00000010   08009DE5           LDR      R0,[SP, #+8]
   \   00000014   ........           BL       GUI_ALLOC_LockH
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   1C00A0E3           MOV      R0,#+28
   \   00000020   730C80E3           ORR      R0,R0,#0x7300
   \   00000024   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   0800001A           BNE      ??_InitFrame_0
   1707            if (pContext->NumCompsPerFrame == 1) {
   1708              pContext->ScanType        = GRAYSCALE;
   \   00000030   1200A0E3           MOV      R0,#+18
   \   00000034   740C80E3           ORR      R0,R0,#0x7400
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0410C0E7           STRB     R1,[R0, +R4]
   1709              pContext->MaxBlocksPerMCU = 1;
   \   00000040   0A0080E2           ADD      R0,R0,#+10
   \   00000044   0110A0E3           MOV      R1,#+1
   \                     ??_InitFrame_1:
   \   00000048   041080E7           STR      R1,[R0, +R4]
   1710              pContext->MaxMCU_xSize    = 8;
   \   0000004C   0800A0E3           MOV      R0,#+8
   \   00000050   570000EA           B        ??_InitFrame_2
   1711              pContext->MaxMCU_ySize    = 8;
   1712            } else if (pContext->NumCompsPerFrame == 3) {
   \                     ??_InitFrame_0:
   \   00000054   030050E3           CMP      R0,#+3
   \   00000058   1300001A           BNE      ??_InitFrame_3
   1713              if ((pContext->aCompHSamp[1] != 1) || (pContext->aCompVSamp[1] != 1) ||
   1714                  (pContext->aCompHSamp[2] != 1) || (pContext->aCompVSamp[2] != 1)) {
   \   0000005C   1E00A0E3           MOV      R0,#+30
   \   00000060   730C80E3           ORR      R0,R0,#0x7300
   \   00000064   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   0E00001A           BNE      ??_InitFrame_3
   \   00000070   2200A0E3           MOV      R0,#+34
   \   00000074   730C80E3           ORR      R0,R0,#0x7300
   \   00000078   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   0900001A           BNE      ??_InitFrame_3
   \   00000084   1F00A0E3           MOV      R0,#+31
   \   00000088   730C80E3           ORR      R0,R0,#0x7300
   \   0000008C   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000090   010050E3           CMP      R0,#+1
   \   00000094   0400001A           BNE      ??_InitFrame_3
   \   00000098   2300A0E3           MOV      R0,#+35
   \   0000009C   730C80E3           ORR      R0,R0,#0x7300
   \   000000A0   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   0200000A           BEQ      ??_InitFrame_4
   1715                r = 1; /* Unsupported sampling factors */
   \                     ??_InitFrame_3:
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   00108DE5           STR      R1,[SP, #+0]
   \   000000B4   C20000EA           B        ??_InitFrame_5
   1716              } else {
   \                     ??_InitFrame_4:
   \   000000B8   1D00A0E3           MOV      R0,#+29
   \   000000BC   730C80E3           ORR      R0,R0,#0x7300
   \   000000C0   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000C4   010050E3           CMP      R0,#+1
   \   000000C8   0B00001A           BNE      ??_InitFrame_6
   \   000000CC   2100A0E3           MOV      R0,#+33
   \   000000D0   730C80E3           ORR      R0,R0,#0x7300
   \   000000D4   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000D8   010050E3           CMP      R0,#+1
   \   000000DC   1B00001A           BNE      ??_InitFrame_7
   1717                if        ((pContext->aCompHSamp[0] == 1) && (pContext->aCompVSamp[0] == 1)) {
   1718                  pContext->ScanType        = YH1V1;
   \   000000E0   1200A0E3           MOV      R0,#+18
   \   000000E4   740C80E3           ORR      R0,R0,#0x7400
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   0410C0E7           STRB     R1,[R0, +R4]
   1719                  pContext->MaxBlocksPerMCU = 3;
   \   000000F0   0A0080E2           ADD      R0,R0,#+10
   \   000000F4   0310A0E3           MOV      R1,#+3
   \   000000F8   D2FFFFEA           B        ??_InitFrame_1
   1720                  pContext->MaxMCU_xSize    = 8;
   1721                  pContext->MaxMCU_ySize    = 8;
   1722                } else if ((pContext->aCompHSamp[0] == 2) && (pContext->aCompVSamp[0] == 1)) {
   \                     ??_InitFrame_6:
   \   000000FC   020050E3           CMP      R0,#+2
   \   00000100   E9FFFF1A           BNE      ??_InitFrame_3
   \   00000104   2100A0E3           MOV      R0,#+33
   \   00000108   730C80E3           ORR      R0,R0,#0x7300
   \   0000010C   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   1C00001A           BNE      ??_InitFrame_8
   1723                  pContext->ScanType        = YH2V1;
   \   00000118   1200A0E3           MOV      R0,#+18
   \   0000011C   740C80E3           ORR      R0,R0,#0x7400
   \   00000120   0210A0E3           MOV      R1,#+2
   \   00000124   0410C0E7           STRB     R1,[R0, +R4]
   1724                  pContext->MaxBlocksPerMCU = 4;
   \   00000128   0A0080E2           ADD      R0,R0,#+10
   \   0000012C   0410A0E3           MOV      R1,#+4
   \   00000130   041080E7           STR      R1,[R0, +R4]
   1725                  pContext->MaxMCU_xSize    = 16;
   \   00000134   080080E2           ADD      R0,R0,#+8
   \   00000138   1010A0E3           MOV      R1,#+16
   \   0000013C   041080E7           STR      R1,[R0, +R4]
   1726                  pContext->MaxMCU_ySize    = 8;
   \   00000140   040080E2           ADD      R0,R0,#+4
   \   00000144   0810A0E3           MOV      R1,#+8
   \                     ??_InitFrame_9:
   \   00000148   041080E7           STR      R1,[R0, +R4]
   \   0000014C   1D0000EA           B        ??_InitFrame_10
   1727                } else if ((pContext->aCompHSamp[0] == 1) && (pContext->aCompVSamp[0] == 2)) {
   \                     ??_InitFrame_7:
   \   00000150   020050E3           CMP      R0,#+2
   \   00000154   D4FFFF1A           BNE      ??_InitFrame_3
   1728                  pContext->ScanType        = YH1V2;
   \   00000158   1200A0E3           MOV      R0,#+18
   \   0000015C   740C80E3           ORR      R0,R0,#0x7400
   \   00000160   0310A0E3           MOV      R1,#+3
   \   00000164   0410C0E7           STRB     R1,[R0, +R4]
   1729                  pContext->MaxBlocksPerMCU = 4;
   \   00000168   0A0080E2           ADD      R0,R0,#+10
   \   0000016C   0410A0E3           MOV      R1,#+4
   \   00000170   041080E7           STR      R1,[R0, +R4]
   1730                  pContext->MaxMCU_xSize    = 8;
   \   00000174   080080E2           ADD      R0,R0,#+8
   \   00000178   0810A0E3           MOV      R1,#+8
   \   0000017C   041080E7           STR      R1,[R0, +R4]
   1731                  pContext->MaxMCU_ySize    = 16;
   \   00000180   040080E2           ADD      R0,R0,#+4
   \   00000184   1010A0E3           MOV      R1,#+16
   \   00000188   EEFFFFEA           B        ??_InitFrame_9
   1732                } else if ((pContext->aCompHSamp[0] == 2) && (pContext->aCompVSamp[0] == 2)) {
   \                     ??_InitFrame_8:
   \   0000018C   020050E3           CMP      R0,#+2
   \   00000190   C5FFFF1A           BNE      ??_InitFrame_3
   1733                  pContext->ScanType        = YH2V2;
   \   00000194   1200A0E3           MOV      R0,#+18
   \   00000198   740C80E3           ORR      R0,R0,#0x7400
   \   0000019C   0410A0E3           MOV      R1,#+4
   \   000001A0   0410C0E7           STRB     R1,[R0, +R4]
   1734                  pContext->MaxBlocksPerMCU = 6;
   \   000001A4   0A0080E2           ADD      R0,R0,#+10
   \   000001A8   0610A0E3           MOV      R1,#+6
   \   000001AC   041080E7           STR      R1,[R0, +R4]
   1735                  pContext->MaxMCU_xSize    = 16;
   \   000001B0   1000A0E3           MOV      R0,#+16
   \                     ??_InitFrame_2:
   \   000001B4   2410A0E3           MOV      R1,#+36
   \   000001B8   741C81E3           ORR      R1,R1,#0x7400
   \   000001BC   040081E7           STR      R0,[R1, +R4]
   1736                  pContext->MaxMCU_ySize    = 16;
   \   000001C0   041081E2           ADD      R1,R1,#+4
   \   000001C4   040081E7           STR      R0,[R1, +R4]
   \                     ??_InitFrame_10:
   \   000001C8   2400A0E3           MOV      R0,#+36
   \   000001CC   BC50D4E1           LDRH     R5,[R4, #+12]
   \   000001D0   740C80E3           ORR      R0,R0,#0x7400
   \   000001D4   041090E7           LDR      R1,[R0, +R4]
   \   000001D8   106040E2           SUB      R6,R0,#+16
   \   000001DC   050081E0           ADD      R0,R1,R5
   \   000001E0   010040E2           SUB      R0,R0,#+1
   \   000001E4   ........           BL       __aeabi_idiv
   \   000001E8   040086E7           STR      R0,[R6, +R4]
   \   000001EC   BE70D4E1           LDRH     R7,[R4, #+14]
   \   000001F0   140086E2           ADD      R0,R6,#+20
   \   000001F4   041090E7           LDR      R1,[R0, +R4]
   \   000001F8   070081E0           ADD      R0,R1,R7
   \   000001FC   010040E2           SUB      R0,R0,#+1
   \   00000200   ........           BL       __aeabi_idiv
   \   00000204   041086E2           ADD      R1,R6,#+4
   \   00000208   040081E7           STR      R0,[R1, +R4]
   1737                } else {
   1738                  r = 1;
   1739                }
   1740              }
   1741            } else {
   1742              r = 1;
   1743            }
   1744            if (r == 0) {
   1745              pContext->MaxMCUsPerRow  = (pContext->xSize + (pContext->MaxMCU_xSize - 1)) / pContext->MaxMCU_xSize;
   1746              pContext->MaxMCUsPerCol  = (pContext->ySize + (pContext->MaxMCU_ySize - 1)) / pContext->MaxMCU_ySize;
   1747              pContext->TotalLinesLeft = pContext->ySize;
   \   0000020C   740081E2           ADD      R0,R1,#+116
   \   00000210   047080E7           STR      R7,[R0, +R4]
   1748              pContext->MCULinesLeft   = 0;
   \   00000214   040080E2           ADD      R0,R0,#+4
   \   00000218   0010A0E3           MOV      R1,#+0
   \   0000021C   041080E7           STR      R1,[R0, +R4]
   \   00000220   7E0040E2           SUB      R0,R0,#+126
   \   00000224   0480D0E7           LDRB     R8,[R0, +R4]
   1749              /* Calculate number of destination bytes per pixel and scanline */
   1750              if (pContext->ScanType == GRAYSCALE) {
   1751                pContext->DestBytesPerPixel = 1;
   1752              } else {
   1753                pContext->DestBytesPerPixel = 4;
   \   00000228   181086E2           ADD      R1,R6,#+24
   1754              }
   1755              pContext->DestBytesPerScanline = ((pContext->xSize + 15) & 0xFFF0) * pContext->DestBytesPerPixel;
   \   0000022C   F020A0E3           MOV      R2,#+240
   \   00000230   000058E3           CMP      R8,#+0
   \   00000234   0100A003           MOVEQ    R0,#+1
   \   00000238   0400A013           MOVNE    R0,#+4
   \   0000023C   040081E7           STR      R0,[R1, +R4]
   \   00000240   0F0085E2           ADD      R0,R5,#+15
   \   00000244   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000248   041091E7           LDR      R1,[R1, +R4]
   \   0000024C   000002E0           AND      R0,R2,R0
   \   00000250   910005E0           MUL      R5,R1,R0
   \   00000254   1C0086E2           ADD      R0,R6,#+28
   \   00000258   045080E7           STR      R5,[R0, +R4]
   1756              ScanType = pContext->ScanType;
   \   0000025C   081086E3           ORR      R1,R6,#0x8
   \   00000260   040096E7           LDR      R0,[R6, +R4]
   \   00000264   041091E7           LDR      R1,[R1, +R4]
   \   00000268   2070A0E3           MOV      R7,#+32
   \   0000026C   910006E0           MUL      R6,R1,R0
   \   00000270   747C87E3           ORR      R7,R7,#0x7400
   1757              pContext->MaxBlocksPerRow = pContext->MaxMCUsPerRow * pContext->MaxBlocksPerMCU;
   1758              MaxBlocksPerRow = pContext->MaxBlocksPerRow;
   1759              DestBytesPerScanline = pContext->DestBytesPerScanline;
   1760              /* Initialize YCbCr color conversion to RGB */
   1761              for (i = 0; i <= 255; i++) {
   \   00000274   B009A0E3           MOV      R0,#+2883584
   \   00000278   68E0E0E3           MVN      LR,#+104
   \   0000027C   046087E7           STR      R6,[R7, +R4]
   \   00000280   0010A0E3           MOV      R1,#+0
   \   00000284   8D0C80E3           ORR      R0,R0,#0x8D00
   \   00000288   FF20E0E3           MVN      R2,#+255
   \   0000028C   ........           LDR      R3,??DataTable7_4  ;; 0xff4d0b00
   \   00000290   ........           LDR      R12,??DataTable7_5  ;; 0xff1daf00
   \   00000294   5BECCEE3           BIC      LR,LR,#0x5B00
   \   00000298   809087E3           ORR      R9,R7,#0x80
   1762          		  k = (i * 2) - 256;
   1763                pContext->aCRR[i] = ( ((I32) ((1.40200 / 2) * (1L << 16) + 0.5))  * k + ((I32) 1 << (16 - 1))) >> 16;
   \                     ??_InitFrame_11:
   \   0000029C   43A8A0E1           ASR      R10,R3,#+16
   \   000002A0   04A089E7           STR      R10,[R9, +R4]
   1764                pContext->aCBB[i] = ( ((I32) ((1.77200 / 2) * (1L << 16) + 0.5))  * k + ((I32) 1 << (16 - 1))) >> 16;
   \   000002A4   04A089E0           ADD      R10,R9,R4
   \   000002A8   4CB8A0E1           ASR      R11,R12,#+16
   \   000002AC   00B48AE5           STR      R11,[R10, #+1024]
   1765                pContext->aCRG[i] = (-((I32) ((0.71414 / 2) * (1L << 16) + 0.5))) * k;
   \   000002B0   9E020BE0           MUL      R11,LR,R2
   1766                pContext->aCBG[i] = (-((I32) ((0.34414 / 2) * (1L << 16) + 0.5))  * k + ((I32) 1 << (16 - 1))) >> 16;
   1767              }
   \   000002B4   011081E2           ADD      R1,R1,#+1
   \   000002B8   00B88AE5           STR      R11,[R10, #+2048]
   \   000002BC   40B8A0E1           ASR      R11,R0,#+16
   \   000002C0   00BC8AE5           STR      R11,[R10, #+3072]
   \   000002C4   ........           LDR      R10,??DataTable7_6  ;; 0x1c5a2
   \   000002C8   044084E2           ADD      R4,R4,#+4
   \   000002CC   0CC08AE0           ADD      R12,R10,R12
   \   000002D0   ........           LDR      R10,??DataTable7_7  ;; 0x166ea
   \   000002D4   022082E2           ADD      R2,R2,#+2
   \   000002D8   03308AE0           ADD      R3,R10,R3
   \   000002DC   19A0E0E3           MVN      R10,#+25
   \   000002E0   58ACCAE3           BIC      R10,R10,#0x5800
   \   000002E4   00008AE0           ADD      R0,R10,R0
   \   000002E8   400F51E3           CMP      R1,#+256
   \   000002EC   EAFFFFBA           BLT      ??_InitFrame_11
   1768              /* Unlock context */
   1769              GUI_UNLOCK_H(pContext);
   \   000002F0   ........           BL       GUI_ALLOC_UnlockH
   1770              /* Allocate memory */
   1771              hBlocks         = GUI_ALLOC_AllocZero(MaxBlocksPerRow * 64 * sizeof(U16));
   \   000002F4   8603A0E1           LSL      R0,R6,#+7
   \   000002F8   ........           BL       GUI_ALLOC_AllocZero
   \   000002FC   0090A0E1           MOV      R9,R0
   1772              hSampleBuf      = GUI_ALLOC_AllocZero(MaxBlocksPerRow * 64);
   \   00000300   0603A0E1           LSL      R0,R6,#+6
   \   00000304   ........           BL       GUI_ALLOC_AllocZero
   \   00000308   00A0A0E1           MOV      R10,R0
   1773              hBlockMaxZagSet = GUI_ALLOC_AllocZero(MaxBlocksPerRow);
   \   0000030C   0600A0E1           MOV      R0,R6
   \   00000310   ........           BL       GUI_ALLOC_AllocZero
   \   00000314   0060A0E1           MOV      R6,R0
   1774              hScanLine0      = GUI_ALLOC_AllocZero(DestBytesPerScanline);
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           BL       GUI_ALLOC_AllocZero
   1775              if ((ScanType == YH1V2) || (ScanType == YH2V2)) {
   \   00000320   030058E3           CMP      R8,#+3
   \   00000324   00B0A0E1           MOV      R11,R0
   \   00000328   04005813           CMPNE    R8,#+4
   \   0000032C   0300001A           BNE      ??_InitFrame_12
   1776                hScanLine1    = GUI_ALLOC_AllocZero(DestBytesPerScanline);
   \   00000330   0500A0E1           MOV      R0,R5
   \   00000334   ........           BL       GUI_ALLOC_AllocZero
   \   00000338   0050A0E1           MOV      R5,R0
   \   0000033C   000000EA           B        ??_InitFrame_13
   1777              } else {
   1778                hScanLine1    = 0;
   \                     ??_InitFrame_12:
   \   00000340   0050A0E3           MOV      R5,#+0
   1779              }
   1780              if ((hBlocks == 0) ||
   1781                  (hSampleBuf == 0) ||
   1782                  (hBlockMaxZagSet == 0) ||
   1783                  (hScanLine0 == 0) ||
   1784                  ((hScanLine1 == 0) && ((ScanType == YH1V2) || (ScanType == YH2V2)))) {
   \                     ??_InitFrame_13:
   \   00000344   000059E3           CMP      R9,#+0
   \   00000348   00005A13           CMPNE    R10,#+0
   \   0000034C   00005613           CMPNE    R6,#+0
   \   00000350   00005B13           CMPNE    R11,#+0
   \   00000354   54FFFF0A           BEQ      ??_InitFrame_3
   \   00000358   000055E3           CMP      R5,#+0
   \   0000035C   0200001A           BNE      ??_InitFrame_14
   \   00000360   030058E3           CMP      R8,#+3
   \   00000364   04005813           CMPNE    R8,#+4
   \   00000368   4FFFFF0A           BEQ      ??_InitFrame_3
   1785                r = 1;
   1786              } else {
   1787                pContext = JPEG_LOCK_H(hContext);
   \                     ??_InitFrame_14:
   \   0000036C   08009DE5           LDR      R0,[SP, #+8]
   \   00000370   ........           BL       GUI_ALLOC_LockH
   \   00000374   0040A0E1           MOV      R4,R0
   1788                pContext->hBlocks         = hBlocks;
   \   00000378   040087E0           ADD      R0,R7,R4
   \   0000037C   5C9080E5           STR      R9,[R0, #+92]
   1789                pContext->hSampleBuf      = hSampleBuf;
   \   00000380   64A080E5           STR      R10,[R0, #+100]
   1790                pContext->hBlockMaxZagSet = hBlockMaxZagSet;
   \   00000384   606080E5           STR      R6,[R0, #+96]
   1791                pContext->hScanLine0      = hScanLine0;
   \   00000388   74B080E5           STR      R11,[R0, #+116]
   1792                pContext->hScanLine1      = hScanLine1;
   \   0000038C   785080E5           STR      R5,[R0, #+120]
   1793                /* Initialize YCbCr color conversion to RGB */
   1794                pBlockMaxZagSet = (U8 *)GUI_LOCK_H(pContext->hBlockMaxZagSet);
   \   00000390   600090E5           LDR      R0,[R0, #+96]
   \   00000394   ........           BL       GUI_ALLOC_LockH
   1795                for (i = 0; i < pContext->MaxBlocksPerRow; i++) {
   \   00000398   043097E7           LDR      R3,[R7, +R4]
   \   0000039C   0010A0E3           MOV      R1,#+0
   \   000003A0   4020A0E3           MOV      R2,#+64
   \   000003A4   010053E3           CMP      R3,#+1
   \   000003A8   040000BA           BLT      ??_InitFrame_15
   1796                  *(pBlockMaxZagSet + i) = 64;
   \                     ??_InitFrame_16:
   \   000003AC   0120C0E4           STRB     R2,[R0], #+1
   1797                }
   \   000003B0   043097E7           LDR      R3,[R7, +R4]
   \   000003B4   011081E2           ADD      R1,R1,#+1
   \   000003B8   030051E1           CMP      R1,R3
   \   000003BC   FAFFFFBA           BLT      ??_InitFrame_16
   1798                GUI_UNLOCK_H(pBlockMaxZagSet);
   \                     ??_InitFrame_15:
   \   000003C0   ........           BL       GUI_ALLOC_UnlockH
   1799              }
   1800            }
   1801            GUI_UNLOCK_H(pContext);
   \                     ??_InitFrame_5:
   \   000003C4   ........           BL       GUI_ALLOC_UnlockH
   1802            return r;
   \   000003C8   00009DE5           LDR      R0,[SP, #+0]
   \   000003CC   0CD08DE2           ADD      SP,SP,#+12
   \   000003D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1803          }
   1804          
   1805          /*********************************************************************
   1806          *
   1807          *       _IDCT
   1808          *
   1809          * Purpose:
   1810          *   Inverse Discrete Cosinus Transformation
   1811          */

   \                                 In section .text, align 4, keep-with-next
   1812          static void _IDCT(I16 * pSrc, U8 * pDst) {
   \                     _IDCT:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   1813            I32 tmp0,  tmp1,  tmp2,  tmp3;
   1814            I32 tmp10, tmp11, tmp12, tmp13;
   1815            I32 z1, z2, z3, z4, z5;
   1816            I16 DC_Val;
   1817            I16 * pData;
   1818            I16 i;
   1819            int RowCtr;
   1820            pData = pSrc;
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   0830A0E3           MOV      R3,#+8
   1821            for (RowCtr = 8 - 1; RowCtr >= 0; RowCtr--) {
   1822              if ((*(pData + 1) |
   1823                   *(pData + 2) |
   1824                   *(pData + 3) |
   1825                   *(pData + 4) |
   1826                   *(pData + 5) |
   1827                   *(pData + 6) |
   1828                   *(pData + 7)) == 0) {
   \                     ??_IDCT_0:
   \   00000010   F440D2E1           LDRSH    R4,[R2, #+4]
   \   00000014   F280D2E1           LDRSH    R8,[R2, #+2]
   \   00000018   F600D2E1           LDRSH    R0,[R2, #+6]
   \   0000001C   F8E0D2E1           LDRSH    LR,[R2, #+8]
   \   00000020   FA70D2E1           LDRSH    R7,[R2, #+10]
   \   00000024   089084E1           ORR      R9,R4,R8
   \   00000028   FC50D2E1           LDRSH    R5,[R2, #+12]
   \   0000002C   099080E1           ORR      R9,R0,R9
   \   00000030   FE60D2E1           LDRSH    R6,[R2, #+14]
   \   00000034   09908EE1           ORR      R9,LR,R9
   \   00000038   099087E1           ORR      R9,R7,R9
   \   0000003C   099085E1           ORR      R9,R5,R9
   \   00000040   F0C0D2E1           LDRSH    R12,[R2, #+0]
   \   00000044   099096E1           ORRS     R9,R6,R9
   \   00000048   0900001A           BNE      ??_IDCT_1
   1829                DC_Val = (I16)(*(pData + 0) << PASS1_BITS);
   \   0000004C   0C01A0E1           LSL      R0,R12,#+2
   1830                *(pData + 0) = DC_Val;
   \   00000050   B200C2E0           STRH     R0,[R2], #+2
   1831                *(pData + 1) = DC_Val;
   \   00000054   B200C2E0           STRH     R0,[R2], #+2
   1832                *(pData + 2) = DC_Val;
   \   00000058   B200C2E0           STRH     R0,[R2], #+2
   1833                *(pData + 3) = DC_Val;
   \   0000005C   B200C2E0           STRH     R0,[R2], #+2
   1834                *(pData + 4) = DC_Val;
   \   00000060   B200C2E0           STRH     R0,[R2], #+2
   1835                *(pData + 5) = DC_Val;
   \   00000064   B200C2E0           STRH     R0,[R2], #+2
   1836                *(pData + 6) = DC_Val;
   \   00000068   B200C2E0           STRH     R0,[R2], #+2
   1837                *(pData + 7) = DC_Val;
   \   0000006C   B200C2E0           STRH     R0,[R2], #+2
   1838                pData += 8;       /* Move pointer to next row */
   1839                continue;
   \   00000070   600000EA           B        ??_IDCT_2
   1840              }
   1841              z2 = (I32)*(pData + 2);
   1842              z3 = (I32)*(pData + 6);
   1843              z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   \                     ??_IDCT_1:
   \   00000074   51A0A0E3           MOV      R10,#+81
   \   00000078   049085E0           ADD      R9,R5,R4
   \   0000007C   44AD8AE3           ORR      R10,R10,#0x1100
   \   00000080   9A0909E0           MUL      R9,R10,R9
   1844              tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
   \   00000084   20A0E0E3           MVN      R10,#+32
   \   00000088   ECADCAE3           BIC      R10,R10,#0x3B00
   \   0000008C   8A9505E1           SMLABB   R5,R10,R5,R9
   1845              tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
   \   00000090   7EA0A0E3           MOV      R10,#+126
   \   00000094   60AD8AE3           ORR      R10,R10,#0x1800
   \   00000098   8A9404E1           SMLABB   R4,R10,R4,R9
   1846              z2 = (I32)*(pData + 0);
   1847              z3 = (I32)*(pData + 4);
   1848              tmp0 = (z2 + z3) << CONST_BITS;
   \   0000009C   0C908EE0           ADD      R9,LR,R12
   1849              tmp1 = (z2 - z3) << CONST_BITS;
   \   000000A0   0EC04CE0           SUB      R12,R12,LR
   \   000000A4   8996A0E1           LSL      R9,R9,#+13
   \   000000A8   8CA6A0E1           LSL      R10,R12,#+13
   1850              tmp10 = tmp0 + tmp3;
   \   000000AC   09C084E0           ADD      R12,R4,R9
   1851              tmp13 = tmp0 - tmp3;
   \   000000B0   04E049E0           SUB      LR,R9,R4
   1852              tmp11 = tmp1 + tmp2;
   1853              tmp12 = tmp1 - tmp2;
   1854              tmp0 = (I32)*(pData + 7);
   1855              tmp1 = (I32)*(pData + 5);
   1856              tmp2 = (I32)*(pData + 3);
   \   000000B4   00008DE5           STR      R0,[SP, #+0]
   \   000000B8   0A4085E0           ADD      R4,R5,R10
   1857              tmp3 = (I32)*(pData + 1);
   1858              z1 = tmp0 + tmp3;
   1859              z2 = tmp1 + tmp2;
   1860              z3 = tmp0 + tmp2;
   \   000000BC   00009DE5           LDR      R0,[SP, #+0]
   \   000000C0   05504AE0           SUB      R5,R10,R5
   \   000000C4   04808DE5           STR      R8,[SP, #+4]
   \   000000C8   060080E0           ADD      R0,R0,R6
   1861              z4 = tmp1 + tmp3;
   \   000000CC   078088E0           ADD      R8,R8,R7
   1862              z5 = MULTIPLY(z3 + z4, FIX_1_175875602);
   \   000000D0   A1A0A0E3           MOV      R10,#+161
   \   000000D4   009088E0           ADD      R9,R8,R0
   \   000000D8   94AD8AE3           ORR      R10,R10,#0x2500
   \   000000DC   9A0909E0           MUL      R9,R10,R9
   1863              tmp0 = MULTIPLY(tmp0, FIX_0_298631336);
   1864              tmp1 = MULTIPLY(tmp1, FIX_2_053119869);
   1865              tmp2 = MULTIPLY(tmp2, FIX_3_072711026);
   1866              tmp3 = MULTIPLY(tmp3, FIX_1_501321110);
   1867              z1 = MULTIPLY(z1, - FIX_0_899976223);
   \   000000E0   04A09DE5           LDR      R10,[SP, #+4]
   \   000000E4   06B08AE0           ADD      R11,R10,R6
   \   000000E8   CCA0E0E3           MVN      R10,#+204
   \   000000EC   70ADCAE3           BIC      R10,R10,#0x1C00
   \   000000F0   9A0B0BE0           MUL      R11,R10,R11
   1868              z2 = MULTIPLY(z2, - FIX_2_562915447);
   \   000000F4   00A09DE5           LDR      R10,[SP, #+0]
   \   000000F8   08B08DE5           STR      R11,[SP, #+8]
   \   000000FC   02B0E0E3           MVN      R11,#+2
   \   00000100   07A08AE0           ADD      R10,R10,R7
   \   00000104   52BCCBE3           BIC      R11,R11,#0x5200
   \   00000108   9B0A0AE0           MUL      R10,R11,R10
   1869              z3 = MULTIPLY(z3, - FIX_1_961570560);
   1870              z4 = MULTIPLY(z4, - FIX_0_390180644);
   1871              z3 += z5;
   \   0000010C   C4B0E0E3           MVN      R11,#+196
   \   00000110   F8BDCBE3           BIC      R11,R11,#0x3E00
   \   00000114   9B9020E0           MLA      R0,R11,R0,R9
   1872              z4 += z5;
   \   00000118   7BB0E0E3           MVN      R11,#+123
   \   0000011C   C0BECBE3           BIC      R11,R11,#0xC00
   \   00000120   9B9828E0           MLA      R8,R11,R8,R9
   1873              tmp0 += z1 + z3;
   \   00000124   8E90A0E3           MOV      R9,#+142
   \   00000128   08B09DE5           LDR      R11,[SP, #+8]
   \   0000012C   909E89E3           ORR      R9,R9,#0x900
   \   00000130   89B606E1           SMLABB   R6,R9,R6,R11
   1874              tmp1 += z2 + z4;
   \   00000134   B390A0E3           MOV      R9,#+179
   \   00000138   419C89E3           ORR      R9,R9,#0x4100
   \   0000013C   89A707E1           SMLABB   R7,R9,R7,R10
   1875              tmp2 += z2 + z3;
   \   00000140   00B09DE5           LDR      R11,[SP, #+0]
   \   00000144   5490A0E3           MOV      R9,#+84
   \   00000148   629C89E3           ORR      R9,R9,#0x6200
   \   0000014C   99AB2AE0           MLA      R10,R9,R11,R10
   \   00000150   066080E0           ADD      R6,R0,R6
   \   00000154   0A0080E0           ADD      R0,R0,R10
   1876              tmp3 += z1 + z4;
   \   00000158   04909DE5           LDR      R9,[SP, #+4]
   \   0000015C   0BA0A0E3           MOV      R10,#+11
   \   00000160   C0AD8AE3           ORR      R10,R10,#0x3000
   \   00000164   08B09DE5           LDR      R11,[SP, #+8]
   \   00000168   9AB929E0           MLA      R9,R10,R9,R11
   \   0000016C   077088E0           ADD      R7,R8,R7
   \   00000170   098088E0           ADD      R8,R8,R9
   1877              *(pData + 0) = (I16)DESCALE(tmp10 + tmp3, CONST_BITS - PASS1_BITS);
   \   00000174   08908CE0           ADD      R9,R12,R8
   \   00000178   409E89E2           ADD      R9,R9,#+1024
   1878              *(pData + 7) = (I16)DESCALE(tmp10 - tmp3, CONST_BITS - PASS1_BITS);
   \   0000017C   08C04CE0           SUB      R12,R12,R8
   \   00000180   C995A0E1           ASR      R9,R9,#+11
   \   00000184   40CE8CE2           ADD      R12,R12,#+1024
   \   00000188   B090C2E1           STRH     R9,[R2, #+0]
   \   0000018C   CCC5A0E1           ASR      R12,R12,#+11
   \   00000190   BEC0C2E1           STRH     R12,[R2, #+14]
   1879              *(pData + 1) = (I16)DESCALE(tmp11 + tmp2, CONST_BITS - PASS1_BITS);
   \   00000194   00C084E0           ADD      R12,R4,R0
   \   00000198   40CE8CE2           ADD      R12,R12,#+1024
   1880              *(pData + 6) = (I16)DESCALE(tmp11 - tmp2, CONST_BITS - PASS1_BITS);
   \   0000019C   000044E0           SUB      R0,R4,R0
   \   000001A0   CCC5A0E1           ASR      R12,R12,#+11
   \   000001A4   400E80E2           ADD      R0,R0,#+1024
   \   000001A8   B2C0C2E1           STRH     R12,[R2, #+2]
   \   000001AC   C005A0E1           ASR      R0,R0,#+11
   \   000001B0   BC00C2E1           STRH     R0,[R2, #+12]
   1881              *(pData + 2) = (I16)DESCALE(tmp12 + tmp1, CONST_BITS - PASS1_BITS);
   \   000001B4   070085E0           ADD      R0,R5,R7
   \   000001B8   400E80E2           ADD      R0,R0,#+1024
   \   000001BC   C005A0E1           ASR      R0,R0,#+11
   \   000001C0   B400C2E1           STRH     R0,[R2, #+4]
   1882              *(pData + 5) = (I16)DESCALE(tmp12 - tmp1, CONST_BITS - PASS1_BITS);
   \   000001C4   070045E0           SUB      R0,R5,R7
   \   000001C8   400E80E2           ADD      R0,R0,#+1024
   \   000001CC   C005A0E1           ASR      R0,R0,#+11
   \   000001D0   BA00C2E1           STRH     R0,[R2, #+10]
   1883              *(pData + 3) = (I16)DESCALE(tmp13 + tmp0, CONST_BITS - PASS1_BITS);
   \   000001D4   06008EE0           ADD      R0,LR,R6
   \   000001D8   400E80E2           ADD      R0,R0,#+1024
   \   000001DC   C005A0E1           ASR      R0,R0,#+11
   \   000001E0   B600C2E1           STRH     R0,[R2, #+6]
   1884              *(pData + 4) = (I16)DESCALE(tmp13 - tmp0, CONST_BITS - PASS1_BITS);
   \   000001E4   06004EE0           SUB      R0,LR,R6
   \   000001E8   400E80E2           ADD      R0,R0,#+1024
   \   000001EC   C005A0E1           ASR      R0,R0,#+11
   \   000001F0   B800C2E1           STRH     R0,[R2, #+8]
   1885              pData += 8;
   \   000001F4   102082E2           ADD      R2,R2,#+16
   1886            }
   \                     ??_IDCT_2:
   \   000001F8   013053E2           SUBS     R3,R3,#+1
   \   000001FC   83FFFF1A           BNE      ??_IDCT_0
   1887            pData = pSrc;
   \   00000200   10209DE5           LDR      R2,[SP, #+16]
   1888            for (RowCtr = 8 - 1; RowCtr >= 0; RowCtr--) {
   \   00000204   0830A0E3           MOV      R3,#+8
   1889              if ((*(pData + 8 * 1) |
   1890                   *(pData + 8 * 2) |
   1891                   *(pData + 8 * 3) |
   1892                   *(pData + 8 * 4) |
   1893                   *(pData + 8 * 5) |
   1894                   *(pData + 8 * 6) |
   1895                   *(pData + 8 * 7)) == 0) {
   \                     ??_IDCT_3:
   \   00000208   F0E2D2E1           LDRSH    LR,[R2, #+32]
   \   0000020C   F061D2E1           LDRSH    R6,[R2, #+16]
   \   00000210   F0B3D2E1           LDRSH    R11,[R2, #+48]
   \   00000214   F004D2E1           LDRSH    R0,[R2, #+64]
   \   00000218   F085D2E1           LDRSH    R8,[R2, #+80]
   \   0000021C   06508EE1           ORR      R5,LR,R6
   \   00000220   F046D2E1           LDRSH    R4,[R2, #+96]
   \   00000224   05508BE1           ORR      R5,R11,R5
   \   00000228   F077D2E1           LDRSH    R7,[R2, #+112]
   \   0000022C   055080E1           ORR      R5,R0,R5
   \   00000230   055088E1           ORR      R5,R8,R5
   \   00000234   055084E1           ORR      R5,R4,R5
   \   00000238   F0C0D2E1           LDRSH    R12,[R2, #+0]
   \   0000023C   055097E1           ORRS     R5,R7,R5
   \   00000240   1000001A           BNE      ??_IDCT_4
   1896                DC_Val = (I16)DESCALE((I32)*(pData + 0), PASS1_BITS + 3);
   1897                if ((DC_Val += 128) < 0) {
   \   00000244   10008CE2           ADD      R0,R12,#+16
   \   00000248   C002A0E1           ASR      R0,R0,#+5
   \   0000024C   800090E2           ADDS     R0,R0,#+128
   1898                  DC_Val = 0;
   \   00000250   0000A043           MOVMI    R0,#+0
   \   00000254   0100004A           BMI      ??_IDCT_5
   1899                } else if (DC_Val > 255) {
   \   00000258   400F50E3           CMP      R0,#+256
   1900                  DC_Val = 255;
   \   0000025C   FF00A0A3           MOVGE    R0,#+255
   1901                }
   1902                *(pDst + 8 * 0) = (U8)DC_Val;
   \                     ??_IDCT_5:
   \   00000260   0800C1E4           STRB     R0,[R1], #+8
   1903                *(pDst + 8 * 1) = (U8)DC_Val;
   \   00000264   0800C1E4           STRB     R0,[R1], #+8
   1904                *(pDst + 8 * 2) = (U8)DC_Val;
   \   00000268   0800C1E4           STRB     R0,[R1], #+8
   1905                *(pDst + 8 * 3) = (U8)DC_Val;
   \   0000026C   0800C1E4           STRB     R0,[R1], #+8
   1906                *(pDst + 8 * 4) = (U8)DC_Val;
   \   00000270   0800C1E4           STRB     R0,[R1], #+8
   1907                *(pDst + 8 * 5) = (U8)DC_Val;
   \   00000274   0800C1E4           STRB     R0,[R1], #+8
   1908                *(pDst + 8 * 6) = (U8)DC_Val;
   \   00000278   0800C1E4           STRB     R0,[R1], #+8
   1909                *(pDst + 8 * 7) = (U8)DC_Val;
   \   0000027C   370041E4           STRB     R0,[R1], #-55
   1910                pData++;
   \   00000280   022082E2           ADD      R2,R2,#+2
   1911                pDst++;
   1912                continue;
   \   00000284   8E0000EA           B        ??_IDCT_6
   1913              }
   1914              z2 = (I32)*(pData + 8 * 2);
   1915              z3 = (I32)*(pData + 8 * 6);
   1916              z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
   \                     ??_IDCT_4:
   \   00000288   51A0A0E3           MOV      R10,#+81
   \   0000028C   0E5084E0           ADD      R5,R4,LR
   \   00000290   44AD8AE3           ORR      R10,R10,#0x1100
   \   00000294   9A0509E0           MUL      R9,R10,R5
   1917              tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
   \   00000298   20A0E0E3           MVN      R10,#+32
   \   0000029C   ECADCAE3           BIC      R10,R10,#0x3B00
   \   000002A0   8A9405E1           SMLABB   R5,R10,R4,R9
   1918              tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
   \   000002A4   7E40A0E3           MOV      R4,#+126
   \   000002A8   604D84E3           ORR      R4,R4,#0x1800
   \   000002AC   849E0EE1           SMLABB   LR,R4,LR,R9
   1919              tmp0 = ((I32)*(pData + 8 * 0) + (I32)*(pData + 8 * 4)) << CONST_BITS;
   \   000002B0   0C4080E0           ADD      R4,R0,R12
   \   000002B4   8446A0E1           LSL      R4,R4,#+13
   1920              tmp1 = ((I32)*(pData + 8 * 0) - (I32)*(pData + 8 * 4)) << CONST_BITS;
   \   000002B8   00004CE0           SUB      R0,R12,R0
   1921              tmp10 = tmp0 + tmp3;
   \   000002BC   04C08EE0           ADD      R12,LR,R4
   \   000002C0   8006A0E1           LSL      R0,R0,#+13
   1922              tmp13 = tmp0 - tmp3;
   \   000002C4   0EE044E0           SUB      LR,R4,LR
   1923              tmp11 = tmp1 + tmp2;
   \   000002C8   004085E0           ADD      R4,R5,R0
   1924              tmp12 = tmp1 - tmp2;
   \   000002CC   055040E0           SUB      R5,R0,R5
   1925              tmp0 = (I32)*(pData + 8 * 7);
   \   000002D0   04708DE5           STR      R7,[SP, #+4]
   1926              tmp1 = (I32)*(pData + 8 * 5);
   \   000002D4   00808DE5           STR      R8,[SP, #+0]
   1927              tmp2 = (I32)*(pData + 8 * 3);
   1928              tmp3 = (I32)*(pData + 8 * 1);
   \   000002D8   0C608DE5           STR      R6,[SP, #+12]
   1929              z1 = tmp0 + tmp3;
   1930              z2 = tmp1 + tmp2;
   1931              z3 = tmp0 + tmp2;
   \   000002DC   04009DE5           LDR      R0,[SP, #+4]
   1932              z4 = tmp1 + tmp3;
   \   000002E0   00609DE5           LDR      R6,[SP, #+0]
   \   000002E4   0C709DE5           LDR      R7,[SP, #+12]
   \   000002E8   00008BE0           ADD      R0,R11,R0
   \   000002EC   066087E0           ADD      R6,R7,R6
   1933              z5 = MULTIPLY(z3 + z4, FIX_1_175875602);
   \   000002F0   A180A0E3           MOV      R8,#+161
   \   000002F4   007086E0           ADD      R7,R6,R0
   \   000002F8   948D88E3           ORR      R8,R8,#0x2500
   \   000002FC   980709E0           MUL      R9,R8,R7
   1934              tmp0 = MULTIPLY(tmp0, FIX_0_298631336);
   1935              tmp1 = MULTIPLY(tmp1, FIX_2_053119869);
   1936              tmp2 = MULTIPLY(tmp2, FIX_3_072711026);
   1937              tmp3 = MULTIPLY(tmp3, FIX_1_501321110);
   1938              z1 = MULTIPLY(z1, - FIX_0_899976223);
   \   00000300   04709DE5           LDR      R7,[SP, #+4]
   \   00000304   0C809DE5           LDR      R8,[SP, #+12]
   1939              z2 = MULTIPLY(z2, - FIX_2_562915447);
   1940              z3 = MULTIPLY(z3, - FIX_1_961570560);
   1941              z4 = MULTIPLY(z4, - FIX_0_390180644);
   1942              z3 += z5;
   1943              z4 += z5;
   1944              tmp0 += z1 + z3;
   1945              tmp1 += z2 + z4;
   1946              tmp2 += z2 + z3;
   1947              tmp3 += z1 + z4;
   1948              i = (I16)DESCALE(tmp10 + tmp3, CONST_BITS + PASS1_BITS + 3) + 128;
   1949              if (i & 0xFF00) {
   1950                i = (((~(int)i) >> 15) & 0xFF);
   1951              }
   1952              *(pDst + 8 * 0) = (U8)i;
   1953              i = (I16)DESCALE(tmp10 - tmp3, CONST_BITS + PASS1_BITS + 3) + 128;
   1954              if (i & 0xFF00) {
   1955                i = (((~(int)i) >> 15) & 0xFF);
   1956              }
   1957              *(pDst + 8 * 7) = (U8)i;
   1958              i = (I16)DESCALE(tmp11 + tmp2, CONST_BITS + PASS1_BITS + 3) + 128;
   1959              if (i & 0xFF00) {
   1960                i = (((~(int)i) >> 15) & 0xFF);
   1961              }
   1962              *(pDst + 8 * 1) = (U8)i;
   1963              i = (I16)DESCALE(tmp11 - tmp2, CONST_BITS + PASS1_BITS + 3) + 128;
   1964              if (i & 0xFF00) {
   1965                i = (((~(int)i) >> 15) & 0xFF);
   1966              }
   1967              *(pDst + 8 * 6) = (U8)i;
   1968              i = (I16)DESCALE(tmp12 + tmp1, CONST_BITS + PASS1_BITS + 3) + 128;
   1969              if (i & 0xFF00) {
   1970                i = (((~(int)i) >> 15) & 0xFF);
   1971              }
   1972              *(pDst + 8 * 2) = (U8)i;
   1973              i = (I16)DESCALE(tmp12 - tmp1, CONST_BITS + PASS1_BITS + 3) + 128;
   1974              if (i & 0xFF00) {
   1975                i = (((~(int)i) >> 15) & 0xFF);
   1976              }
   1977              *(pDst + 8 * 5) = (U8)i;
   1978              i = (I16)DESCALE(tmp13 + tmp0, CONST_BITS + PASS1_BITS + 3) + 128;
   1979              if (i & 0xFF00) {
   1980                i = (((~(int)i) >> 15) & 0xFF);
   1981              }
   1982              *(pDst + 8 * 3) = (U8)i;
   1983              i = (I16)DESCALE(tmp13 - tmp0, CONST_BITS + PASS1_BITS + 3) + 128;
   1984              if (i & 0xFF00) {
   1985                i = (((~(int)i) >> 15) & 0xFF);
   1986              }
   1987              *(pDst + 8 * 4) = (U8)i;
   1988              pData++;
   \   00000308   022082E2           ADD      R2,R2,#+2
   \   0000030C   077088E0           ADD      R7,R8,R7
   \   00000310   CC80E0E3           MVN      R8,#+204
   \   00000314   708DC8E3           BIC      R8,R8,#0x1C00
   \   00000318   980707E0           MUL      R7,R8,R7
   \   0000031C   0280E0E3           MVN      R8,#+2
   \   00000320   08708DE5           STR      R7,[SP, #+8]
   \   00000324   00709DE5           LDR      R7,[SP, #+0]
   \   00000328   528CC8E3           BIC      R8,R8,#0x5200
   \   0000032C   07708BE0           ADD      R7,R11,R7
   \   00000330   98070AE0           MUL      R10,R8,R7
   \   00000334   C470E0E3           MVN      R7,#+196
   \   00000338   F87DC7E3           BIC      R7,R7,#0x3E00
   \   0000033C   979020E0           MLA      R0,R7,R0,R9
   \   00000340   7B70E0E3           MVN      R7,#+123
   \   00000344   C07EC7E3           BIC      R7,R7,#0xC00
   \   00000348   979628E0           MLA      R8,R7,R6,R9
   \   0000034C   04609DE5           LDR      R6,[SP, #+4]
   \   00000350   8E70A0E3           MOV      R7,#+142
   \   00000354   907E87E3           ORR      R7,R7,#0x900
   \   00000358   08909DE5           LDR      R9,[SP, #+8]
   \   0000035C   979626E0           MLA      R6,R7,R6,R9
   \   00000360   00909DE5           LDR      R9,[SP, #+0]
   \   00000364   B370A0E3           MOV      R7,#+179
   \   00000368   417C87E3           ORR      R7,R7,#0x4100
   \   0000036C   97A929E0           MLA      R9,R7,R9,R10
   \   00000370   066080E0           ADD      R6,R0,R6
   \   00000374   097088E0           ADD      R7,R8,R9
   \   00000378   5490A0E3           MOV      R9,#+84
   \   0000037C   629C89E3           ORR      R9,R9,#0x6200
   \   00000380   89AB0AE1           SMLABB   R10,R9,R11,R10
   \   00000384   0C909DE5           LDR      R9,[SP, #+12]
   \   00000388   0A0080E0           ADD      R0,R0,R10
   \   0000038C   0BA0A0E3           MOV      R10,#+11
   \   00000390   C0AD8AE3           ORR      R10,R10,#0x3000
   \   00000394   08B09DE5           LDR      R11,[SP, #+8]
   \   00000398   9AB929E0           MLA      R9,R10,R9,R11
   \   0000039C   098088E0           ADD      R8,R8,R9
   \   000003A0   08908CE0           ADD      R9,R12,R8
   \   000003A4   809B89E2           ADD      R9,R9,#+131072
   \   000003A8   4999A0E1           ASR      R9,R9,#+18
   \   000003AC   809089E2           ADD      R9,R9,#+128
   \   000003B0   08C04CE0           SUB      R12,R12,R8
   \   000003B4   FF0C19E3           TST      R9,#0xFF00
   \   000003B8   80CB8CE2           ADD      R12,R12,#+131072
   \   000003BC   0990E011           MVNNE    R9,R9
   \   000003C0   FFA0A013           MOVNE    R10,#+255
   \   000003C4   4CC9A0E1           ASR      R12,R12,#+18
   \   000003C8   C9970A10           ANDNE    R9,R10,R9, ASR #+15
   \   000003CC   80C08CE2           ADD      R12,R12,#+128
   \   000003D0   FF0C1CE3           TST      R12,#0xFF00
   \   000003D4   0CC0E011           MVNNE    R12,R12
   \   000003D8   FF80A013           MOVNE    R8,#+255
   \   000003DC   0090C1E5           STRB     R9,[R1, #+0]
   \   000003E0   CCC70810           ANDNE    R12,R8,R12, ASR #+15
   \   000003E4   38C0C1E5           STRB     R12,[R1, #+56]
   \   000003E8   00C084E0           ADD      R12,R4,R0
   \   000003EC   80CB8CE2           ADD      R12,R12,#+131072
   \   000003F0   4CC9A0E1           ASR      R12,R12,#+18
   \   000003F4   80C08CE2           ADD      R12,R12,#+128
   \   000003F8   000044E0           SUB      R0,R4,R0
   \   000003FC   FF0C1CE3           TST      R12,#0xFF00
   \   00000400   800B80E2           ADD      R0,R0,#+131072
   \   00000404   0CC0E011           MVNNE    R12,R12
   \   00000408   FF80A013           MOVNE    R8,#+255
   \   0000040C   4009A0E1           ASR      R0,R0,#+18
   \   00000410   CCC70810           ANDNE    R12,R8,R12, ASR #+15
   \   00000414   800080E2           ADD      R0,R0,#+128
   \   00000418   08C0C1E5           STRB     R12,[R1, #+8]
   \   0000041C   FF0C10E3           TST      R0,#0xFF00
   \   00000420   0000E011           MVNNE    R0,R0
   \   00000424   FFC0A013           MOVNE    R12,#+255
   \   00000428   C0070C10           ANDNE    R0,R12,R0, ASR #+15
   \   0000042C   3000C1E5           STRB     R0,[R1, #+48]
   \   00000430   070085E0           ADD      R0,R5,R7
   \   00000434   800B80E2           ADD      R0,R0,#+131072
   \   00000438   4009A0E1           ASR      R0,R0,#+18
   \   0000043C   800080E2           ADD      R0,R0,#+128
   \   00000440   FF0C10E3           TST      R0,#0xFF00
   \   00000444   0000E011           MVNNE    R0,R0
   \   00000448   FFC0A013           MOVNE    R12,#+255
   \   0000044C   C0070C10           ANDNE    R0,R12,R0, ASR #+15
   \   00000450   1000C1E5           STRB     R0,[R1, #+16]
   \   00000454   070045E0           SUB      R0,R5,R7
   \   00000458   800B80E2           ADD      R0,R0,#+131072
   \   0000045C   4009A0E1           ASR      R0,R0,#+18
   \   00000460   800080E2           ADD      R0,R0,#+128
   \   00000464   FF0C10E3           TST      R0,#0xFF00
   \   00000468   0000E011           MVNNE    R0,R0
   \   0000046C   FFC0A013           MOVNE    R12,#+255
   \   00000470   C0070C10           ANDNE    R0,R12,R0, ASR #+15
   \   00000474   2800C1E5           STRB     R0,[R1, #+40]
   \   00000478   06008EE0           ADD      R0,LR,R6
   \   0000047C   800B80E2           ADD      R0,R0,#+131072
   \   00000480   4009A0E1           ASR      R0,R0,#+18
   \   00000484   800080E2           ADD      R0,R0,#+128
   \   00000488   FF0C10E3           TST      R0,#0xFF00
   \   0000048C   0000E011           MVNNE    R0,R0
   \   00000490   FFC0A013           MOVNE    R12,#+255
   \   00000494   C0070C10           ANDNE    R0,R12,R0, ASR #+15
   \   00000498   1800C1E5           STRB     R0,[R1, #+24]
   \   0000049C   06004EE0           SUB      R0,LR,R6
   \   000004A0   800B80E2           ADD      R0,R0,#+131072
   \   000004A4   4009A0E1           ASR      R0,R0,#+18
   \   000004A8   800080E2           ADD      R0,R0,#+128
   \   000004AC   FF0C10E3           TST      R0,#0xFF00
   \   000004B0   0000E011           MVNNE    R0,R0
   \   000004B4   FFC0A013           MOVNE    R12,#+255
   \   000004B8   C0070C10           ANDNE    R0,R12,R0, ASR #+15
   \   000004BC   2000C1E5           STRB     R0,[R1, #+32]
   1989              pDst++;
   \   000004C0   011081E2           ADD      R1,R1,#+1
   1990            }
   \                     ??_IDCT_6:
   \   000004C4   013053E2           SUBS     R3,R3,#+1
   \   000004C8   4EFFFF1A           BNE      ??_IDCT_3
   1991          }
   \   000004CC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000004D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1992          
   1993          /*********************************************************************
   1994          *
   1995          *       _TransformRow
   1996          *
   1997          * Purpose:
   1998          *   Performs an IDCT over the entire row's coefficient buffer
   1999          */

   \                                 In section .text, align 4, keep-with-next
   2000          static int _TransformRow(GUI_JPEG_DCONTEXT * pContext) {
   \                     _TransformRow:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   2001            int i;
   2002            I16 aTemp[64];
   2003            I16 * pSrc;
   2004            U8  * pDest;
   2005            int r = 0;
   2006          
   2007            pContext->pSampleBuf = (U8 *)GUI_ALLOC_h2p(pContext->hSampleBuf); /* Use of 'h2p' allowed at this point */
   \   00000004   2060A0E3           MOV      R6,#+32
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   746C86E3           ORR      R6,R6,#0x7400
   \   00000010   047086E0           ADD      R7,R6,R4
   \   00000014   84D04DE2           SUB      SP,SP,#+132
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   640097E5           LDR      R0,[R7, #+100]
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   680087E5           STR      R0,[R7, #+104]
   2008            pDest = pContext->pSampleBuf;
   \   00000028   0080A0E1           MOV      R8,R0
   2009            for (i = 0; (i < pContext->MaxBlocksPerRow) && (r == 0); i++) {
   \   0000002C   0090A0E3           MOV      R9,#+0
   \   00000030   020000EA           B        ??_TransformRow_0
   2010              pSrc = (I16 *)GUI_LOCK_H(pContext->hBlocks) + i * 64;
   2011              if (pSrc) {
   2012                GUI_MEMCPY(aTemp, pSrc, 64 * sizeof(I16));
   2013                _IDCT(aTemp, pDest);
   2014                pDest += 64;
   2015              } else {
   2016                r = 1; /* Error */
   \                     ??_TransformRow_1:
   \   00000034   0150A0E3           MOV      R5,#+1
   2017              }
   2018              GUI_UNLOCK_H(pSrc);
   \                     ??_TransformRow_2:
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   \   0000003C   019089E2           ADD      R9,R9,#+1
   \                     ??_TransformRow_0:
   \   00000040   040096E7           LDR      R0,[R6, +R4]
   \   00000044   000059E1           CMP      R9,R0
   \   00000048   0D0000AA           BGE      ??_TransformRow_3
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   0B00001A           BNE      ??_TransformRow_3
   \   00000054   5C0097E5           LDR      R0,[R7, #+92]
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   891390E0           ADDS     R1,R0,R9, LSL #+7
   \   00000060   F3FFFF0A           BEQ      ??_TransformRow_1
   \   00000064   8020A0E3           MOV      R2,#+128
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           BL       __aeabi_memcpy
   \   00000070   0810A0E1           MOV      R1,R8
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           BL       _IDCT
   \   0000007C   408088E2           ADD      R8,R8,#+64
   \   00000080   ECFFFFEA           B        ??_TransformRow_2
   2019            }
   2020            return r;
   \                     ??_TransformRow_3:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   84D08DE2           ADD      SP,SP,#+132
   \   0000008C   F083BDE8           POP      {R4-R9,PC}       ;; return
   2021          }
   2022          
   2023          /*********************************************************************
   2024          *
   2025          *       _DecodeNextRow
   2026          *
   2027          * Purpose:
   2028          *   Decodes the next line of MCUs for baseline scans
   2029          */

   \                                 In section .text, align 4, keep-with-next
   2030          static int _DecodeNextRow(GUI_JPEG_DCONTEXT * pContext) {
   \                     _DecodeNextRow:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   2031            int MCU_Row;
   2032            int RowBlock;
   2033            U8 * pBlockMaxZagSet;
   2034            int Ret = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   2035          
   2036            pBlockMaxZagSet = (U8 *)GUI_LOCK_H(pContext->hBlockMaxZagSet);
   \   00000010   8000A0E3           MOV      R0,#+128
   \   00000014   18108DE5           STR      R1,[SP, #+24]
   \   00000018   740C80E3           ORR      R0,R0,#0x7400
   \   0000001C   040090E7           LDR      R0,[R0, +R4]
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   14008DE5           STR      R0,[SP, #+20]
   2037            RowBlock = 0;
   \   00000028   0010A0E3           MOV      R1,#+0
   2038            for (MCU_Row = 0; MCU_Row < pContext->MCUsPerRow; MCU_Row++) {
   \   0000002C   4800A0E3           MOV      R0,#+72
   \   00000030   00108DE5           STR      R1,[SP, #+0]
   \   00000034   0C108DE5           STR      R1,[SP, #+12]
   \   00000038   740C80E3           ORR      R0,R0,#0x7400
   \   0000003C   040090E7           LDR      R0,[R0, +R4]
   \   00000040   ............       ADRL     R5,_aCoeffOrder
   \              ....        
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   F90000BA           BLT      ??_DecodeNextRow_0
   2039              int MCU_Block;
   2040              if ((pContext->RestartInterval) && (pContext->RestartsLeft == 0)) {
   \                     ??_DecodeNextRow_1:
   \   00000050   3C00A0E3           MOV      R0,#+60
   \   00000054   740C80E3           ORR      R0,R0,#0x7400
   \   00000058   040090E7           LDR      R0,[R0, +R4]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0600000A           BEQ      ??_DecodeNextRow_2
   \   00000064   4000A0E3           MOV      R0,#+64
   \   00000068   740C80E3           ORR      R0,R0,#0x7400
   \   0000006C   040090E7           LDR      R0,[R0, +R4]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0100001A           BNE      ??_DecodeNextRow_2
   2041                _ProcessRestart(pContext);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       _ProcessRestart
   2042              }
   2043              for (MCU_Block = 0; (MCU_Block < pContext->NumBlocksPerMCU) && (Ret == 0); MCU_Block++) {
   \                     ??_DecodeNextRow_2:
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   08108DE5           STR      R1,[SP, #+8]
   \   00000088   04408DE5           STR      R4,[SP, #+4]
   \   0000008C   240000EA           B        ??_DecodeNextRow_3
   2044                HUFF_TABLE * pTable;
   2045                U16 * p;
   2046                U16 * q;
   2047                int ComponentId, r, s, PrevNumSet, k;
   2048                ComponentId = pContext->aMCU_Org[MCU_Block];
   2049                p = (U16 *)GUI_LOCK_H(pContext->hBlocks) + RowBlock * 64;
   2050                q = pContext->apQuantTbl[pContext->aCompQuant[ComponentId]];
   2051                if ((s = _HuffDecode(pContext, &pContext->aHuffTable[pContext->aCompDC_Tab[ComponentId]])) != 0) {
   2052                  r = _GetBitsNoMarker(pContext, s);
   2053                  s = DEQUANT_DCPM(r, s);
   2054                }
   2055                s += pContext->aLastDC_Val[ComponentId];
   2056                pContext->aLastDC_Val[ComponentId] = s;
   2057                p[0] = s * q[0];
   2058                PrevNumSet = *(pBlockMaxZagSet + RowBlock);
   2059                pTable = &pContext->aHuffTable[pContext->aCompAC_Tab[ComponentId]];
   2060                for (k = 1; k < 64; k++) {
   2061                  s = _HuffDecode(pContext, pTable);
   2062                  r = s >> 4;
   2063                  s &= 15;
   2064                  if (s) {
   2065                    if (r) {
   2066                      if ((k + r) > 63) {
   2067                        Ret = 1; /* Error */
   2068                        break;
   2069                      }
   2070                      if (k < PrevNumSet) {
   2071                        int n, kt;
   2072                        n = MIN(r, PrevNumSet - k);
   2073                        kt = k;
   2074                        while (n--) {
   2075                          p[_aCoeffOrder[kt++]] = 0;
   2076                        }
   2077                      }
   2078                      k += r;
   2079                    }
   2080                    r = _GetBitsNoMarker(pContext, s);
   2081                    s = DEQUANT_DCPM(r, s);
   2082                    p[_aCoeffOrder[k]] = s * q[k];
   2083                  } else {
   2084                    if (r == 15) {
   2085                      if ((k + 15) > 63) {
   2086                        Ret = 1; /* Error */
   2087                        break;
   2088                      }
   2089                      if (k < PrevNumSet) {
   2090                        int n, kt;
   2091                        n = MIN(16, PrevNumSet - k);
   2092                        kt = k;
   \                     ??_DecodeNextRow_4:
   \   00000090   000051E3           CMP      R1,#+0
   \   00000094   0700000A           BEQ      ??_DecodeNextRow_5
   2093                        while (n--) {
   2094                          p[_aCoeffOrder[kt++]] = 0;
   \                     ??_DecodeNextRow_6:
   \   00000098   0520DBE7           LDRB     R2,[R11, +R5]
   \   0000009C   011041E2           SUB      R1,R1,#+1
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   822087E0           ADD      R2,R7,R2, LSL #+1
   \   000000A8   B030C2E1           STRH     R3,[R2, #+0]
   \   000000AC   01B08BE2           ADD      R11,R11,#+1
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   F7FFFF1A           BNE      ??_DecodeNextRow_6
   2095                        }
   2096                      }
   2097                      k += 15;
   \                     ??_DecodeNextRow_5:
   \   000000B8   00B0A0E1           MOV      R11,R0
   \                     ??_DecodeNextRow_7:
   \   000000BC   01B08BE2           ADD      R11,R11,#+1
   \   000000C0   40005BE3           CMP      R11,#+64
   \   000000C4   780000BA           BLT      ??_DecodeNextRow_8
   2098                    } else {
   2099                      break;
   2100                    }
   2101                  }
   2102                }
   2103                if (Ret == 0) {
   2104                  if (k < PrevNumSet) {
   \                     ??_DecodeNextRow_9:
   \   000000C8   06005BE1           CMP      R11,R6
   \   000000CC   070000AA           BGE      ??_DecodeNextRow_10
   2105                    int kt;
   2106                    kt = k;
   \   000000D0   0B00A0E1           MOV      R0,R11
   \   000000D4   0020A0E3           MOV      R2,#+0
   2107                    while (kt < PrevNumSet) {
   2108                      p[_aCoeffOrder[kt++]] = 0;
   \                     ??_DecodeNextRow_11:
   \   000000D8   0510D0E7           LDRB     R1,[R0, +R5]
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   060050E1           CMP      R0,R6
   \   000000E4   811087E0           ADD      R1,R7,R1, LSL #+1
   \   000000E8   B020C1E1           STRH     R2,[R1, #+0]
   \   000000EC   F9FFFFBA           BLT      ??_DecodeNextRow_11
   2109                    }
   2110                  }
   2111                  *(pBlockMaxZagSet + RowBlock) = k;
   \                     ??_DecodeNextRow_10:
   \   000000F0   00009DE5           LDR      R0,[SP, #+0]
   \   000000F4   14109DE5           LDR      R1,[SP, #+20]
   \   000000F8   01B0C0E7           STRB     R11,[R0, +R1]
   2112                  RowBlock++;
   \   000000FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000100   010080E2           ADD      R0,R0,#+1
   \   00000104   00008DE5           STR      R0,[SP, #+0]
   2113                }
   2114                GUI_UNLOCK_H(p);
   \                     ??_DecodeNextRow_12:
   \   00000108   ........           BL       GUI_ALLOC_UnlockH
   \   0000010C   08009DE5           LDR      R0,[SP, #+8]
   \   00000110   010080E2           ADD      R0,R0,#+1
   \   00000114   08008DE5           STR      R0,[SP, #+8]
   \   00000118   04009DE5           LDR      R0,[SP, #+4]
   \   0000011C   040080E2           ADD      R0,R0,#+4
   \   00000120   04008DE5           STR      R0,[SP, #+4]
   \                     ??_DecodeNextRow_3:
   \   00000124   5010A0E3           MOV      R1,#+80
   \   00000128   741C81E3           ORR      R1,R1,#0x7400
   \   0000012C   08009DE5           LDR      R0,[SP, #+8]
   \   00000130   041091E7           LDR      R1,[R1, +R4]
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   B00000AA           BGE      ??_DecodeNextRow_13
   \   0000013C   18009DE5           LDR      R0,[SP, #+24]
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   AD00001A           BNE      ??_DecodeNextRow_13
   \   00000148   5400A0E3           MOV      R0,#+84
   \   0000014C   04109DE5           LDR      R1,[SP, #+4]
   \   00000150   740C80E3           ORR      R0,R0,#0x7400
   \   00000154   019090E7           LDR      R9,[R0, +R1]
   \   00000158   280080E3           ORR      R0,R0,#0x28
   \   0000015C   00609DE5           LDR      R6,[SP, #+0]
   \   00000160   040090E7           LDR      R0,[R0, +R4]
   \   00000164   ........           BL       GUI_ALLOC_LockH
   \   00000168   867380E0           ADD      R7,R0,R6, LSL #+7
   \   0000016C   0C00A0E3           MOV      R0,#+12
   \   00000170   730C80E3           ORR      R0,R0,#0x7300
   \   00000174   191080E2           ADD      R1,R0,#+25
   \   00000178   042089E0           ADD      R2,R9,R4
   \   0000017C   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000180   D02EA0E3           MOV      R2,#+3328
   \   00000184   011184E0           ADD      R1,R4,R1, LSL #+2
   \   00000188   018090E7           LDR      R8,[R0, +R1]
   \   0000018C   190080E2           ADD      R0,R0,#+25
   \   00000190   041089E0           ADD      R1,R9,R4
   \   00000194   010080E0           ADD      R0,R0,R1
   \   00000198   10008DE5           STR      R0,[SP, #+16]
   \   0000019C   10109DE5           LDR      R1,[SP, #+16]
   \   000001A0   BC00A0E3           MOV      R0,#+188
   \   000001A4   0D10D1E5           LDRB     R1,[R1, #+13]
   \   000001A8   800E80E3           ORR      R0,R0,#0x800
   \   000001AC   824101E1           SMLABB   R1,R2,R1,R4
   \   000001B0   01A080E0           ADD      R10,R0,R1
   \   000001B4   240094E5           LDR      R0,[R4, #+36]
   \   000001B8   FF10A0E3           MOV      R1,#+255
   \   000001BC   200401E0           AND      R0,R1,R0, LSR #+8
   \   000001C0   00619AE7           LDR      R6,[R10, +R0, LSL #+2]
   \   000001C4   000056E3           CMP      R6,#+0
   \   000001C8   0400004A           BMI      ??_DecodeNextRow_14
   \   000001CC   0A0086E0           ADD      R0,R6,R10
   \   000001D0   0014D0E5           LDRB     R1,[R0, #+1024]
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   ........           BL       _GetBitsNoMarker
   \   000001DC   0C0000EA           B        ??_DecodeNextRow_15
   \                     ??_DecodeNextRow_14:
   \   000001E0   0810A0E3           MOV      R1,#+8
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeNextRow_16:
   \   000001EC   0600E0E1           MVN      R0,R6
   \   000001F0   016080E2           ADD      R6,R0,#+1
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           BL       _GetBitsNoMarker
   \   00000200   000046E0           SUB      R0,R6,R0
   \   00000204   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   00000208   006590E5           LDR      R6,[R0, #+1280]
   \   0000020C   000056E3           CMP      R6,#+0
   \   00000210   F5FFFF4A           BMI      ??_DecodeNextRow_16
   \                     ??_DecodeNextRow_15:
   \   00000214   000056E3           CMP      R6,#+0
   \   00000218   0D00000A           BEQ      ??_DecodeNextRow_17
   \   0000021C   0610A0E1           MOV      R1,R6
   \   00000220   0400A0E1           MOV      R0,R4
   \   00000224   ........           BL       _GetBitsNoMarker
   \   00000228   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   00000230   061191E7           LDR      R1,[R1, +R6, LSL #+2]
   \   00000234   010050E1           CMP      R0,R1
   \   00000238   040000AA           BGE      ??_DecodeNextRow_18
   \   0000023C   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   00000244   061191E7           LDR      R1,[R1, +R6, LSL #+2]
   \   00000248   006081E0           ADD      R6,R1,R0
   \   0000024C   000000EA           B        ??_DecodeNextRow_17
   \                     ??_DecodeNextRow_18:
   \   00000250   0060A0E1           MOV      R6,R0
   \                     ??_DecodeNextRow_17:
   \   00000254   6410A0E3           MOV      R1,#+100
   \   00000258   090184E0           ADD      R0,R4,R9, LSL #+2
   \   0000025C   731C81E3           ORR      R1,R1,#0x7300
   \   00000260   001091E7           LDR      R1,[R1, +R0]
   \   00000264   D02EA0E3           MOV      R2,#+3328
   \   00000268   069081E0           ADD      R9,R1,R6
   \   0000026C   6410A0E3           MOV      R1,#+100
   \   00000270   731C81E3           ORR      R1,R1,#0x7300
   \   00000274   009081E7           STR      R9,[R1, +R0]
   \   00000278   B000D8E1           LDRH     R0,[R8, #+0]
   \   0000027C   01B0A0E3           MOV      R11,#+1
   \   00000280   890060E1           SMULBB   R0,R9,R0
   \   00000284   B000C7E1           STRH     R0,[R7, #+0]
   \   00000288   00009DE5           LDR      R0,[SP, #+0]
   \   0000028C   14109DE5           LDR      R1,[SP, #+20]
   \   00000290   0160D0E7           LDRB     R6,[R0, +R1]
   \   00000294   10109DE5           LDR      R1,[SP, #+16]
   \   00000298   BC00A0E3           MOV      R0,#+188
   \   0000029C   1110D1E5           LDRB     R1,[R1, #+17]
   \   000002A0   800E80E3           ORR      R0,R0,#0x800
   \   000002A4   824101E1           SMLABB   R1,R2,R1,R4
   \   000002A8   01A080E0           ADD      R10,R0,R1
   \                     ??_DecodeNextRow_8:
   \   000002AC   240094E5           LDR      R0,[R4, #+36]
   \   000002B0   FF10A0E3           MOV      R1,#+255
   \   000002B4   200401E0           AND      R0,R1,R0, LSR #+8
   \   000002B8   00919AE7           LDR      R9,[R10, +R0, LSL #+2]
   \   000002BC   000059E3           CMP      R9,#+0
   \   000002C0   0400004A           BMI      ??_DecodeNextRow_19
   \   000002C4   0A0089E0           ADD      R0,R9,R10
   \   000002C8   0014D0E5           LDRB     R1,[R0, #+1024]
   \   000002CC   0400A0E1           MOV      R0,R4
   \   000002D0   ........           BL       _GetBitsNoMarker
   \   000002D4   0C0000EA           B        ??_DecodeNextRow_20
   \                     ??_DecodeNextRow_19:
   \   000002D8   0810A0E3           MOV      R1,#+8
   \   000002DC   0400A0E1           MOV      R0,R4
   \   000002E0   ........           BL       _GetBitsNoMarker
   \                     ??_DecodeNextRow_21:
   \   000002E4   0900E0E1           MVN      R0,R9
   \   000002E8   019080E2           ADD      R9,R0,#+1
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   0400A0E1           MOV      R0,R4
   \   000002F4   ........           BL       _GetBitsNoMarker
   \   000002F8   000049E0           SUB      R0,R9,R0
   \   000002FC   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   00000300   009590E5           LDR      R9,[R0, #+1280]
   \   00000304   000059E3           CMP      R9,#+0
   \   00000308   F5FFFF4A           BMI      ??_DecodeNextRow_21
   \                     ??_DecodeNextRow_20:
   \   0000030C   4902A0E1           ASR      R0,R9,#+4
   \   00000310   0F9019E2           ANDS     R9,R9,#0xF
   \   00000314   2D00000A           BEQ      ??_DecodeNextRow_22
   \   00000318   000050E3           CMP      R0,#+0
   \   0000031C   1600000A           BEQ      ??_DecodeNextRow_23
   \   00000320   0B2080E0           ADD      R2,R0,R11
   \   00000324   400052E3           CMP      R2,#+64
   \   00000328   020000BA           BLT      ??_DecodeNextRow_24
   \                     ??_DecodeNextRow_25:
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   18108DE5           STR      R1,[SP, #+24]
   \   00000334   73FFFFEA           B        ??_DecodeNextRow_12
   \                     ??_DecodeNextRow_24:
   \   00000338   06005BE1           CMP      R11,R6
   \   0000033C   0D0000AA           BGE      ??_DecodeNextRow_26
   \   00000340   0B1046E0           SUB      R1,R6,R11
   \   00000344   010050E1           CMP      R0,R1
   \   00000348   0010A0B1           MOVLT    R1,R0
   \   0000034C   010000BA           BLT      ??_DecodeNextRow_27
   \   00000350   000051E3           CMP      R1,#+0
   \   00000354   0700000A           BEQ      ??_DecodeNextRow_26
   \                     ??_DecodeNextRow_27:
   \   00000358   0500DBE7           LDRB     R0,[R11, +R5]
   \   0000035C   011041E2           SUB      R1,R1,#+1
   \   00000360   0030A0E3           MOV      R3,#+0
   \   00000364   800087E0           ADD      R0,R7,R0, LSL #+1
   \   00000368   B030C0E1           STRH     R3,[R0, #+0]
   \   0000036C   01B08BE2           ADD      R11,R11,#+1
   \   00000370   000051E3           CMP      R1,#+0
   \   00000374   F7FFFF1A           BNE      ??_DecodeNextRow_27
   \                     ??_DecodeNextRow_26:
   \   00000378   02B0A0E1           MOV      R11,R2
   \                     ??_DecodeNextRow_23:
   \   0000037C   0910A0E1           MOV      R1,R9
   \   00000380   0400A0E1           MOV      R0,R4
   \   00000384   ........           BL       _GetBitsNoMarker
   \   00000388   ............       ADRL     R1,_aExtendTest
   \              ....        
   \   00000390   091191E7           LDR      R1,[R1, +R9, LSL #+2]
   \   00000394   010050E1           CMP      R0,R1
   \   00000398   040000AA           BGE      ??_DecodeNextRow_28
   \   0000039C   ............       ADRL     R1,_aExtendOffset
   \              ....        
   \   000003A4   091191E7           LDR      R1,[R1, +R9, LSL #+2]
   \   000003A8   009081E0           ADD      R9,R1,R0
   \   000003AC   000000EA           B        ??_DecodeNextRow_29
   \                     ??_DecodeNextRow_28:
   \   000003B0   0090A0E1           MOV      R9,R0
   \                     ??_DecodeNextRow_29:
   \   000003B4   8B1088E0           ADD      R1,R8,R11, LSL #+1
   \   000003B8   B010D1E1           LDRH     R1,[R1, #+0]
   \   000003BC   0500DBE7           LDRB     R0,[R11, +R5]
   \   000003C0   890161E1           SMULBB   R1,R9,R1
   \   000003C4   800087E0           ADD      R0,R7,R0, LSL #+1
   \   000003C8   B010C0E1           STRH     R1,[R0, #+0]
   \   000003CC   3AFFFFEA           B        ??_DecodeNextRow_7
   \                     ??_DecodeNextRow_22:
   \   000003D0   0F0050E3           CMP      R0,#+15
   \   000003D4   3BFFFF1A           BNE      ??_DecodeNextRow_9
   \   000003D8   0F008BE2           ADD      R0,R11,#+15
   \   000003DC   400050E3           CMP      R0,#+64
   \   000003E0   D1FFFFAA           BGE      ??_DecodeNextRow_25
   \   000003E4   06005BE1           CMP      R11,R6
   \   000003E8   32FFFFAA           BGE      ??_DecodeNextRow_5
   \   000003EC   0B1046E0           SUB      R1,R6,R11
   \   000003F0   110051E3           CMP      R1,#+17
   \   000003F4   25FFFFBA           BLT      ??_DecodeNextRow_4
   \   000003F8   1010A0E3           MOV      R1,#+16
   \   000003FC   25FFFFEA           B        ??_DecodeNextRow_6
   2115              }
   2116              pContext->RestartsLeft--;
   \                     ??_DecodeNextRow_13:
   \   00000400   4000A0E3           MOV      R0,#+64
   \   00000404   740C80E3           ORR      R0,R0,#0x7400
   \   00000408   040090E7           LDR      R0,[R0, +R4]
   \   0000040C   4010A0E3           MOV      R1,#+64
   \   00000410   010040E2           SUB      R0,R0,#+1
   \   00000414   741C81E3           ORR      R1,R1,#0x7400
   \   00000418   040081E7           STR      R0,[R1, +R4]
   2117            }
   \   0000041C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000420   081081E3           ORR      R1,R1,#0x8
   \   00000424   010080E2           ADD      R0,R0,#+1
   \   00000428   0C008DE5           STR      R0,[SP, #+12]
   \   0000042C   041091E7           LDR      R1,[R1, +R4]
   \   00000430   010050E1           CMP      R0,R1
   \   00000434   05FFFFBA           BLT      ??_DecodeNextRow_1
   2118            GUI_UNLOCK_H(pBlockMaxZagSet);
   \                     ??_DecodeNextRow_0:
   \   00000438   ........           BL       GUI_ALLOC_UnlockH
   2119            return 0;
   \   0000043C   0000A0E3           MOV      R0,#+0
   \   00000440   1CD08DE2           ADD      SP,SP,#+28
   \   00000444   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2120          }
   2121          
   2122          /*********************************************************************
   2123          *
   2124          *       _LoadNextRow
   2125          *
   2126          * Purpose:
   2127          *   Loads the next row of already decoded MCUs for progressive scans
   2128          */

   \                                 In section .text, align 4, keep-with-next
   2129          static int _LoadNextRow(GUI_JPEG_DCONTEXT * pContext) {
   \                     _LoadNextRow:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
   2130            U16 * p;
   2131            U16 * q;
   2132            int MCU_Row;
   2133            int MCU_Block;
   2134            int RowBlock;
   2135            int ComponentNumber;
   2136            int ComponentId;
   2137            int aBlockX_MCU[MAX_COMPONENTS];
   2138            int BlockX_MCU_Off;
   2139            int BlockY_MCU_Off;
   2140            I16 * pDC;
   2141            I16 * pAC;
   2142            int i;
   2143            int BlockX;
   2144            int BlockY;
   2145            RowBlock = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   1C108DE5           STR      R1,[SP, #+28]
   2146            GUI_MEMSET((U8 *)aBlockX_MCU, 0, sizeof(aBlockX_MCU));
   \   00000014   1020A0E3           MOV      R2,#+16
   \   00000018   2C008DE2           ADD      R0,SP,#+44
   \   0000001C   ........           BL       GUI__memset
   2147            for (MCU_Row = 0; MCU_Row < pContext->MCUsPerRow; MCU_Row++) {
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   4800A0E3           MOV      R0,#+72
   \   00000028   18108DE5           STR      R1,[SP, #+24]
   \   0000002C   740C80E3           ORR      R0,R0,#0x7400
   \   00000030   040090E7           LDR      R0,[R0, +R4]
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   F00000BA           BLT      ??_LoadNextRow_0
   2148              BlockX_MCU_Off = BlockY_MCU_Off = 0;
   \                     ??_LoadNextRow_1:
   \   0000003C   0010A0E3           MOV      R1,#+0
   2149              for (MCU_Block = 0; MCU_Block < pContext->NumBlocksPerMCU; MCU_Block++) {
   \   00000040   5000A0E3           MOV      R0,#+80
   \   00000044   04108DE5           STR      R1,[SP, #+4]
   \   00000048   14108DE5           STR      R1,[SP, #+20]
   \   0000004C   10408DE5           STR      R4,[SP, #+16]
   \   00000050   740C80E3           ORR      R0,R0,#0x7400
   \   00000054   040090E7           LDR      R0,[R0, +R4]
   \   00000058   0050A0E3           MOV      R5,#+0
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   DE0000BA           BLT      ??_LoadNextRow_2
   2150                ComponentId = pContext->aMCU_Org[MCU_Block];
   \                     ??_LoadNextRow_3:
   \   00000064   5400A0E3           MOV      R0,#+84
   \   00000068   10109DE5           LDR      R1,[SP, #+16]
   \   0000006C   740C80E3           ORR      R0,R0,#0x7400
   \   00000070   016090E7           LDR      R6,[R0, +R1]
   2151                p = (U16 *)GUI_LOCK_H(pContext->hBlocks) + RowBlock * 64;
   \   00000074   280080E3           ORR      R0,R0,#0x28
   \   00000078   1C709DE5           LDR      R7,[SP, #+28]
   \   0000007C   040090E7           LDR      R0,[R0, +R4]
   \   00000080   ........           BL       GUI_ALLOC_LockH
   \   00000084   877380E0           ADD      R7,R0,R7, LSL #+7
   2152                q = pContext->apQuantTbl[pContext->aCompQuant[ComponentId]];
   \   00000088   1D00A0E3           MOV      R0,#+29
   \   0000008C   730C80E3           ORR      R0,R0,#0x7300
   \   00000090   041086E0           ADD      R1,R6,R4
   \   00000094   010080E0           ADD      R0,R0,R1
   \   00000098   24008DE5           STR      R0,[SP, #+36]
   \   0000009C   24109DE5           LDR      R1,[SP, #+36]
   \   000000A0   0C00A0E3           MOV      R0,#+12
   \   000000A4   0810D1E5           LDRB     R1,[R1, #+8]
   \   000000A8   730C80E3           ORR      R0,R0,#0x7300
   \   000000AC   011184E0           ADD      R1,R4,R1, LSL #+2
   \   000000B0   010090E7           LDR      R0,[R0, +R1]
   \   000000B4   28008DE5           STR      R0,[SP, #+40]
   2153                BlockX = aBlockX_MCU[ComponentId] + BlockX_MCU_Off;
   \   000000B8   2C008DE2           ADD      R0,SP,#+44
   \   000000BC   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   000000C0   008085E0           ADD      R8,R5,R0
   2154                BlockY = pContext->aBlockY_MCU[ComponentId] + BlockY_MCU_Off;
   \   000000C4   060184E0           ADD      R0,R4,R6, LSL #+2
   \   000000C8   0C008DE5           STR      R0,[SP, #+12]
   \   000000CC   F800A0E3           MOV      R0,#+248
   \   000000D0   0C109DE5           LDR      R1,[SP, #+12]
   \   000000D4   730C80E3           ORR      R0,R0,#0x7300
   \   000000D8   010090E7           LDR      R0,[R0, +R1]
   \   000000DC   04109DE5           LDR      R1,[SP, #+4]
   \   000000E0   009081E0           ADD      R9,R1,R0
   2155                pDC = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aDC_Coeffs[ComponentId], BlockX, BlockY);
   \   000000E4   060284E0           ADD      R0,R4,R6, LSL #+4
   \   000000E8   20008DE5           STR      R0,[SP, #+32]
   \   000000EC   7800A0E3           MOV      R0,#+120
   \   000000F0   20109DE5           LDR      R1,[SP, #+32]
   \   000000F4   730C80E3           ORR      R0,R0,#0x7300
   \   000000F8   01A080E0           ADD      R10,R0,R1
   \   000000FC   A000A0E3           MOV      R0,#+160
   \   00000100   840C80E3           ORR      R0,R0,#0x8400
   \   00000104   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   1900000A           BEQ      ??_LoadNextRow_4
   \   00000110   B000A0E3           MOV      R0,#+176
   \   00000114   0C109DE5           LDR      R1,[SP, #+12]
   \   00000118   840C80E3           ORR      R0,R0,#0x8400
   \   0000011C   010090E7           LDR      R0,[R0, +R1]
   \   00000120   00008DE5           STR      R0,[SP, #+0]
   \   00000124   000059E1           CMP      R9,R0
   \   00000128   1C0000BA           BLT      ??_LoadNextRow_5
   \   0000012C   A800A0E3           MOV      R0,#+168
   \   00000130   840C80E3           ORR      R0,R0,#0x8400
   \   00000134   040090E7           LDR      R0,[R0, +R4]
   \   00000138   00109DE5           LDR      R1,[SP, #+0]
   \   0000013C   000081E0           ADD      R0,R1,R0
   \   00000140   010040E2           SUB      R0,R0,#+1
   \   00000144   090050E1           CMP      R0,R9
   \   00000148   140000BA           BLT      ??_LoadNextRow_5
   \   0000014C   08B09AE5           LDR      R11,[R10, #+8]
   \   00000150   0C009AE5           LDR      R0,[R10, #+12]
   \   00000154   ........           BL       GUI_ALLOC_LockH
   \   00000158   00109DE5           LDR      R1,[SP, #+0]
   \   0000015C   011049E0           SUB      R1,R9,R1
   \   00000160   9B0101E0           MUL      R1,R11,R1
   \                     ??_LoadNextRow_6:
   \   00000164   00209AE5           LDR      R2,[R10, #+0]
   \   00000168   920101E0           MUL      R1,R2,R1
   \   0000016C   9B1821E0           MLA      R1,R11,R8,R1
   \   00000170   000081E0           ADD      R0,R1,R0
   \   00000174   0A0000EA           B        ??_LoadNextRow_7
   \                     ??_LoadNextRow_4:
   \   00000178   00009AE5           LDR      R0,[R10, #+0]
   \   0000017C   000058E1           CMP      R8,R0
   \   00000180   04009AB5           LDRLT    R0,[R10, #+4]
   \   00000184   000059B1           CMPLT    R9,R0
   \   00000188   040000AA           BGE      ??_LoadNextRow_5
   \   0000018C   08B09AE5           LDR      R11,[R10, #+8]
   \   00000190   0C009AE5           LDR      R0,[R10, #+12]
   \   00000194   ........           BL       GUI_ALLOC_LockH
   \   00000198   9B0901E0           MUL      R1,R11,R9
   \   0000019C   F0FFFFEA           B        ??_LoadNextRow_6
   \                     ??_LoadNextRow_5:
   \   000001A0   0000A0E3           MOV      R0,#+0
   \                     ??_LoadNextRow_7:
   \   000001A4   08008DE5           STR      R0,[SP, #+8]
   2156                pAC = _CoeffBufferGetP_Locked(pContext, ComponentId, &pContext->aAC_Coeffs[ComponentId], BlockX, BlockY);
   \   000001A8   B800A0E3           MOV      R0,#+184
   \   000001AC   20109DE5           LDR      R1,[SP, #+32]
   \   000001B0   730C80E3           ORR      R0,R0,#0x7300
   \   000001B4   01A080E0           ADD      R10,R0,R1
   \   000001B8   A000A0E3           MOV      R0,#+160
   \   000001BC   840C80E3           ORR      R0,R0,#0x8400
   \   000001C0   0400D0E7           LDRB     R0,[R0, +R4]
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   1900000A           BEQ      ??_LoadNextRow_8
   \   000001CC   B000A0E3           MOV      R0,#+176
   \   000001D0   0C109DE5           LDR      R1,[SP, #+12]
   \   000001D4   840C80E3           ORR      R0,R0,#0x8400
   \   000001D8   010090E7           LDR      R0,[R0, +R1]
   \   000001DC   00008DE5           STR      R0,[SP, #+0]
   \   000001E0   000059E1           CMP      R9,R0
   \   000001E4   1C0000BA           BLT      ??_LoadNextRow_9
   \   000001E8   A800A0E3           MOV      R0,#+168
   \   000001EC   840C80E3           ORR      R0,R0,#0x8400
   \   000001F0   040090E7           LDR      R0,[R0, +R4]
   \   000001F4   00109DE5           LDR      R1,[SP, #+0]
   \   000001F8   000081E0           ADD      R0,R1,R0
   \   000001FC   010040E2           SUB      R0,R0,#+1
   \   00000200   090050E1           CMP      R0,R9
   \   00000204   140000BA           BLT      ??_LoadNextRow_9
   \   00000208   08B09AE5           LDR      R11,[R10, #+8]
   \   0000020C   0C009AE5           LDR      R0,[R10, #+12]
   \   00000210   ........           BL       GUI_ALLOC_LockH
   \   00000214   00109DE5           LDR      R1,[SP, #+0]
   \   00000218   011049E0           SUB      R1,R9,R1
   \   0000021C   9B0101E0           MUL      R1,R11,R1
   \                     ??_LoadNextRow_10:
   \   00000220   00209AE5           LDR      R2,[R10, #+0]
   \   00000224   920101E0           MUL      R1,R2,R1
   \   00000228   9B1821E0           MLA      R1,R11,R8,R1
   \   0000022C   008081E0           ADD      R8,R1,R0
   \   00000230   0A0000EA           B        ??_LoadNextRow_11
   \                     ??_LoadNextRow_8:
   \   00000234   00009AE5           LDR      R0,[R10, #+0]
   \   00000238   000058E1           CMP      R8,R0
   \   0000023C   04009AB5           LDRLT    R0,[R10, #+4]
   \   00000240   000059B1           CMPLT    R9,R0
   \   00000244   040000AA           BGE      ??_LoadNextRow_9
   \   00000248   08B09AE5           LDR      R11,[R10, #+8]
   \   0000024C   0C009AE5           LDR      R0,[R10, #+12]
   \   00000250   ........           BL       GUI_ALLOC_LockH
   \   00000254   9B0901E0           MUL      R1,R11,R9
   \   00000258   F0FFFFEA           B        ??_LoadNextRow_10
   \                     ??_LoadNextRow_9:
   \   0000025C   0080A0E3           MOV      R8,#+0
   2157                if (pDC && pAC) {
   \                     ??_LoadNextRow_11:
   \   00000260   08009DE5           LDR      R0,[SP, #+8]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   00005813           CMPNE    R8,#+0
   \   0000026C   2000000A           BEQ      ??_LoadNextRow_12
   2158                  *p = *pDC;
   \   00000270   B000D0E1           LDRH     R0,[R0, #+0]
   2159                  GUI_MEMCPY((void *)(p + 1), (void *)(pAC + 1), 63 * sizeof(I16));
   \   00000274   7E20A0E3           MOV      R2,#+126
   \   00000278   021088E2           ADD      R1,R8,#+2
   \   0000027C   B000C7E1           STRH     R0,[R7, #+0]
   \   00000280   020087E2           ADD      R0,R7,#+2
   \   00000284   ........           BL       __aeabi_memcpy
   2160                  for (i = 63; i > 0; i--) {
   \   00000288   3F00A0E3           MOV      R0,#+63
   2161                    if (*(p + _aCoeffOrder[i])) {
   \                     ??_LoadNextRow_13:
   \   0000028C   ............       ADRL     R1,_aCoeffOrder
   \              ....        
   \   00000294   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000298   811087E0           ADD      R1,R7,R1, LSL #+1
   \   0000029C   B010D1E1           LDRH     R1,[R1, #+0]
   \   000002A0   000051E3           CMP      R1,#+0
   \   000002A4   0200001A           BNE      ??_LoadNextRow_14
   2162                      break;
   2163                    }
   2164                  }
   \   000002A8   010040E2           SUB      R0,R0,#+1
   \   000002AC   010050E3           CMP      R0,#+1
   \   000002B0   F5FFFFAA           BGE      ??_LoadNextRow_13
   2165                  for (; i >= 0; i--) {
   \                     ??_LoadNextRow_14:
   \   000002B4   000050E3           CMP      R0,#+0
   \   000002B8   0D00004A           BMI      ??_LoadNextRow_12
   2166                    if (*(p + _aCoeffOrder[i])) {
   \                     ??_LoadNextRow_15:
   \   000002BC   ............       ADRL     R1,_aCoeffOrder
   \              ....        
   \   000002C4   0110D0E7           LDRB     R1,[R0, +R1]
   \   000002C8   8110A0E1           LSL      R1,R1,#+1
   \   000002CC   B72091E1           LDRH     R2,[R1, +R7]
   \   000002D0   000052E3           CMP      R2,#+0
   \   000002D4   0400000A           BEQ      ??_LoadNextRow_16
   2167                      *(p + _aCoeffOrder[i]) *= *(q + i);
   \   000002D8   28309DE5           LDR      R3,[SP, #+40]
   \   000002DC   803083E0           ADD      R3,R3,R0, LSL #+1
   \   000002E0   B030D3E1           LDRH     R3,[R3, #+0]
   \   000002E4   820362E1           SMULBB   R2,R2,R3
   \   000002E8   B72081E1           STRH     R2,[R1, +R7]
   2168                    }
   2169                  }
   \                     ??_LoadNextRow_16:
   \   000002EC   010050E2           SUBS     R0,R0,#+1
   \   000002F0   F1FFFF5A           BPL      ??_LoadNextRow_15
   2170                }
   2171                if (p) {
   \                     ??_LoadNextRow_12:
   \   000002F4   000057E3           CMP      R7,#+0
   \   000002F8   0000000A           BEQ      ??_LoadNextRow_17
   2172                  GUI_UNLOCK_H(p);
   \   000002FC   ........           BL       GUI_ALLOC_UnlockH
   2173                }
   2174                if (pAC) {
   \                     ??_LoadNextRow_17:
   \   00000300   000058E3           CMP      R8,#+0
   \   00000304   0000000A           BEQ      ??_LoadNextRow_18
   2175                  GUI_UNLOCK_H(pAC);
   \   00000308   ........           BL       GUI_ALLOC_UnlockH
   2176                }
   2177                if (pDC) {
   \                     ??_LoadNextRow_18:
   \   0000030C   08009DE5           LDR      R0,[SP, #+8]
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   0000000A           BEQ      ??_LoadNextRow_19
   2178                  GUI_UNLOCK_H(pDC);
   \   00000318   ........           BL       GUI_ALLOC_UnlockH
   2179                }
   2180                RowBlock++;
   \                     ??_LoadNextRow_19:
   \   0000031C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000320   010080E2           ADD      R0,R0,#+1
   \   00000324   1C008DE5           STR      R0,[SP, #+28]
   2181                if (pContext->NumCompsPerScan == 1) {
   \   00000328   2D00A0E3           MOV      R0,#+45
   \   0000032C   730C80E3           ORR      R0,R0,#0x7300
   \   00000330   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000334   010050E3           CMP      R0,#+1
   \   00000338   0300001A           BNE      ??_LoadNextRow_20
   2182                  aBlockX_MCU[ComponentId]++;
   \   0000033C   2C008DE2           ADD      R0,SP,#+44
   \   00000340   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   00000344   010080E2           ADD      R0,R0,#+1
   \   00000348   160000EA           B        ??_LoadNextRow_21
   2183                } else {
   2184                  if (++BlockX_MCU_Off == pContext->aCompHSamp[ComponentId]) {
   \                     ??_LoadNextRow_20:
   \   0000034C   1D00A0E3           MOV      R0,#+29
   \   00000350   730C80E3           ORR      R0,R0,#0x7300
   \   00000354   041086E0           ADD      R1,R6,R4
   \   00000358   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000035C   015085E2           ADD      R5,R5,#+1
   \   00000360   000055E1           CMP      R5,R0
   \   00000364   1100001A           BNE      ??_LoadNextRow_22
   2185                    BlockX_MCU_Off = 0;
   2186                    if (++BlockY_MCU_Off == pContext->aCompVSamp[ComponentId]) {
   \   00000368   04009DE5           LDR      R0,[SP, #+4]
   \   0000036C   24109DE5           LDR      R1,[SP, #+36]
   \   00000370   010080E2           ADD      R0,R0,#+1
   \   00000374   04008DE5           STR      R0,[SP, #+4]
   \   00000378   0410D1E5           LDRB     R1,[R1, #+4]
   \   0000037C   0050A0E3           MOV      R5,#+0
   \   00000380   010050E1           CMP      R0,R1
   \   00000384   0900001A           BNE      ??_LoadNextRow_22
   2187                      BlockY_MCU_Off = 0;
   2188                      aBlockX_MCU[ComponentId] += pContext->aCompHSamp[ComponentId];
   \   00000388   1D10A0E3           MOV      R1,#+29
   \   0000038C   04508DE5           STR      R5,[SP, #+4]
   \   00000390   731C81E3           ORR      R1,R1,#0x7300
   \   00000394   042086E0           ADD      R2,R6,R4
   \   00000398   2C008DE2           ADD      R0,SP,#+44
   \   0000039C   0210D1E7           LDRB     R1,[R1, +R2]
   \   000003A0   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   000003A4   000081E0           ADD      R0,R1,R0
   \                     ??_LoadNextRow_21:
   \   000003A8   2C108DE2           ADD      R1,SP,#+44
   \   000003AC   060181E7           STR      R0,[R1, +R6, LSL #+2]
   2189                    }
   2190                  }
   2191                }
   2192              }
   \                     ??_LoadNextRow_22:
   \   000003B0   14009DE5           LDR      R0,[SP, #+20]
   \   000003B4   5010A0E3           MOV      R1,#+80
   \   000003B8   010080E2           ADD      R0,R0,#+1
   \   000003BC   14008DE5           STR      R0,[SP, #+20]
   \   000003C0   10009DE5           LDR      R0,[SP, #+16]
   \   000003C4   741C81E3           ORR      R1,R1,#0x7400
   \   000003C8   040080E2           ADD      R0,R0,#+4
   \   000003CC   10008DE5           STR      R0,[SP, #+16]
   \   000003D0   14009DE5           LDR      R0,[SP, #+20]
   \   000003D4   041091E7           LDR      R1,[R1, +R4]
   \   000003D8   010050E1           CMP      R0,R1
   \   000003DC   20FFFFBA           BLT      ??_LoadNextRow_3
   2193            }
   \                     ??_LoadNextRow_2:
   \   000003E0   18009DE5           LDR      R0,[SP, #+24]
   \   000003E4   4810A0E3           MOV      R1,#+72
   \   000003E8   010080E2           ADD      R0,R0,#+1
   \   000003EC   18008DE5           STR      R0,[SP, #+24]
   \   000003F0   741C81E3           ORR      R1,R1,#0x7400
   \   000003F4   041091E7           LDR      R1,[R1, +R4]
   \   000003F8   010050E1           CMP      R0,R1
   \   000003FC   0EFFFFBA           BLT      ??_LoadNextRow_1
   \                     ??_LoadNextRow_0:
   \   00000400   2D00A0E3           MOV      R0,#+45
   \   00000404   730C80E3           ORR      R0,R0,#0x7300
   \   00000408   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000040C   010050E3           CMP      R0,#+1
   \   00000410   0A00001A           BNE      ??_LoadNextRow_23
   2194            if (pContext->NumCompsPerScan == 1) {
   2195              pContext->aBlockY_MCU[pContext->aCompList[0]]++;
   \   00000414   2E00A0E3           MOV      R0,#+46
   \   00000418   730C80E3           ORR      R0,R0,#0x7300
   \   0000041C   CA1080E2           ADD      R1,R0,#+202
   \   00000420   0420D0E7           LDRB     R2,[R0, +R4]
   \   00000424   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000428   000184E0           ADD      R0,R4,R0, LSL #+2
   \   0000042C   000091E7           LDR      R0,[R1, +R0]
   \   00000430   022184E0           ADD      R2,R4,R2, LSL #+2
   \   00000434   010080E2           ADD      R0,R0,#+1
   \   00000438   020081E7           STR      R0,[R1, +R2]
   \   0000043C   170000EA           B        ??_LoadNextRow_24
   2196            } else {
   2197              for (ComponentNumber = 0; ComponentNumber < pContext->NumCompsPerScan; ComponentNumber++) {
   \                     ??_LoadNextRow_23:
   \   00000440   2E00A0E3           MOV      R0,#+46
   \   00000444   730C80E3           ORR      R0,R0,#0x7300
   \   00000448   01C040E2           SUB      R12,R0,#+1
   \   0000044C   04C0DCE7           LDRB     R12,[R12, +R4]
   \   00000450   0010A0E3           MOV      R1,#+0
   \   00000454   0420A0E1           MOV      R2,R4
   \   00000458   0D3040E2           SUB      R3,R0,#+13
   \   0000045C   01005CE3           CMP      R12,#+1
   \   00000460   0E0000BA           BLT      ??_LoadNextRow_24
   2198                ComponentId = pContext->aCompList[ComponentNumber];
   \                     ??_LoadNextRow_25:
   \   00000464   0260D0E7           LDRB     R6,[R0, +R2]
   2199                pContext->aBlockY_MCU[ComponentId] += pContext->aCompVSamp[ComponentId];
   \   00000468   CAE080E2           ADD      LR,R0,#+202
   2200              }
   \   0000046C   011081E2           ADD      R1,R1,#+1
   \   00000470   045086E0           ADD      R5,R6,R4
   \   00000474   06C184E0           ADD      R12,R4,R6, LSL #+2
   \   00000478   0550D3E7           LDRB     R5,[R3, +R5]
   \   0000047C   0CE09EE7           LDR      LR,[LR, +R12]
   \   00000480   012082E2           ADD      R2,R2,#+1
   \   00000484   0EE085E0           ADD      LR,R5,LR
   \   00000488   CA5080E2           ADD      R5,R0,#+202
   \   0000048C   0CE085E7           STR      LR,[R5, +R12]
   \   00000490   01C040E2           SUB      R12,R0,#+1
   \   00000494   04C0DCE7           LDRB     R12,[R12, +R4]
   \   00000498   0C0051E1           CMP      R1,R12
   \   0000049C   F0FFFFBA           BLT      ??_LoadNextRow_25
   2201            }
   2202            return 0;
   \                     ??_LoadNextRow_24:
   \   000004A0   0000A0E3           MOV      R0,#+0
   \   000004A4   3CD08DE2           ADD      SP,SP,#+60
   \   000004A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2203          }
   2204          
   2205          /*********************************************************************
   2206          *
   2207          *       _ConvertH1V1
   2208          *
   2209          * Purpose:
   2210          *   YCbCr conversion to RGB.
   2211          *   Horizontal resolution 1 pixel, vertical resolution 1 pixel, 3 blocks per MCU
   2212          */

   \                                 In section .text, align 4, keep-with-next
   2213          static void _ConvertH1V1(GUI_JPEG_DCONTEXT * pContext) {
   \                     _ConvertH1V1:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2214            int * pCRR;
   2215            int * pCBB;
   2216            I32 * pCRG;
   2217            I32 * pCBG;
   2218            int Row;
   2219            int i;
   2220            int j;
   2221            U8 * pDst;
   2222            U8 * pSrc;
   2223            pCRR = pContext->aCRR;
   \   00000008   A000A0E3           MOV      R0,#+160
   \   0000000C   740C80E3           ORR      R0,R0,#0x7400
   \   00000010   045080E0           ADD      R5,R0,R4
   2224            pCBB = pContext->aCBB;
   \   00000014   400E80E2           ADD      R0,R0,#+1024
   \   00000018   046080E0           ADD      R6,R0,R4
   2225            pCRG = pContext->aCRG;
   \   0000001C   400E80E3           ORR      R0,R0,#0x400
   \   00000020   047080E0           ADD      R7,R0,R4
   2226            pCBG = pContext->aCBG;
   2227            Row = pContext->MaxMCU_ySize - pContext->MCULinesLeft;
   \   00000024   1490A0E3           MOV      R9,#+20
   \   00000028   400E80E2           ADD      R0,R0,#+1024
   \   0000002C   749C89E3           ORR      R9,R9,#0x7400
   \   00000030   048080E0           ADD      R8,R0,R4
   \   00000034   04A089E0           ADD      R10,R9,R4
   \   00000038   14009AE5           LDR      R0,[R10, #+20]
   \   0000003C   7C109AE5           LDR      R1,[R10, #+124]
   \   00000040   04D04DE2           SUB      SP,SP,#+4
   \   00000044   01B040E0           SUB      R11,R0,R1
   2228            pDst = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   00000048   80009AE5           LDR      R0,[R10, #+128]
   \   0000004C   ........           BL       GUI_ALLOC_LockH
   2229            pSrc = pContext->pSampleBuf + Row * 8;
   \   00000050   74109AE5           LDR      R1,[R10, #+116]
   2230            for (i = pContext->MaxMCUsPerRow; i > 0; i--) {
   \   00000054   04A099E7           LDR      R10,[R9, +R4]
   \   00000058   8B1181E0           ADD      R1,R1,R11, LSL #+3
   \   0000005C   01005AE3           CMP      R10,#+1
   \   00000060   1C0000BA           BLT      ??_ConvertH1V1_0
   \   00000064   ............       ADRL     R2,_aLimit
   \              ....        
   2231              for (j = 0; j < 8; j ++) {
   \                     ??_ConvertH1V1_1:
   \   0000006C   0130A0E1           MOV      R3,R1
   \   00000070   08C0A0E3           MOV      R12,#+8
   2232                int y;
   2233                int cb;
   2234                int cr;
   2235          #if (USE_LIMIT_TABLE == 0)
   2236                int v;
   2237          #endif
   2238                y =  *(pSrc + j);
   \                     ??_ConvertH1V1_2:
   \   00000074   40E0D3E4           LDRB     LR,[R3], #+64
   2239                cb = *(pSrc + j + 64);
   \   00000078   4040D3E4           LDRB     R4,[R3], #+64
   2240                cr = *(pSrc + j + 128);
   \   0000007C   7F9053E4           LDRB     R9,[R3], #-127
   2241          #if USE_LIMIT_TABLE
   2242                *(pDst + 0) = LIMIT(y + pCRR[cr]);
   2243                *(pDst + 1) = LIMIT(y + ((pCRG[cr] + pCBG[cb]) >> 16));
   2244                *(pDst + 2) = LIMIT(y + pCBB[cb]);
   2245          #else
   2246                v = y + pCRR[cr];
   2247                LIMIT(v);
   2248                *(pDst + 0) = v;
   2249                v = y + ((pCRG[cr] + pCBG[cb]) >> 16);
   2250                LIMIT(v);
   2251                *(pDst + 1) = v;
   2252                v = y + pCBB[cb];
   2253                LIMIT(v);
   2254                *(pDst + 1) = v;
   2255          #endif
   2256                pDst += 4;
   2257              }
   \   00000080   01C05CE2           SUBS     R12,R12,#+1
   \   00000084   09B195E7           LDR      R11,[R5, +R9, LSL #+2]
   \   00000088   0EB08BE0           ADD      R11,R11,LR
   \   0000008C   02B08BE0           ADD      R11,R11,R2
   \   00000090   00B1DBE5           LDRB     R11,[R11, #+256]
   \   00000094   01B0C0E4           STRB     R11,[R0], #+1
   \   00000098   099197E7           LDR      R9,[R7, +R9, LSL #+2]
   \   0000009C   04B198E7           LDR      R11,[R8, +R4, LSL #+2]
   \   000000A0   09908BE0           ADD      R9,R11,R9
   \   000000A4   49988EE0           ADD      R9,LR,R9, ASR #+16
   \   000000A8   029089E0           ADD      R9,R9,R2
   \   000000AC   0091D9E5           LDRB     R9,[R9, #+256]
   \   000000B0   0190C0E4           STRB     R9,[R0], #+1
   \   000000B4   044196E7           LDR      R4,[R6, +R4, LSL #+2]
   \   000000B8   0EE084E0           ADD      LR,R4,LR
   \   000000BC   02E08EE0           ADD      LR,LR,R2
   \   000000C0   00E1DEE5           LDRB     LR,[LR, #+256]
   \   000000C4   02E0C0E4           STRB     LR,[R0], #+2
   \   000000C8   E9FFFF1A           BNE      ??_ConvertH1V1_2
   2258              pSrc += 64 * 3;
   \   000000CC   C01081E2           ADD      R1,R1,#+192
   2259            }
   \   000000D0   01A05AE2           SUBS     R10,R10,#+1
   \   000000D4   E4FFFF1A           BNE      ??_ConvertH1V1_1
   2260            GUI_UNLOCK_H(pDst);
   \                     ??_ConvertH1V1_0:
   \   000000D8   04D08DE2           ADD      SP,SP,#+4
   \   000000DC   F04FBDE8           POP      {R4-R11,LR}
   \   000000E0   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
   2261          }
   2262          
   2263          /*********************************************************************
   2264          *
   2265          *       _ConvertH2V2
   2266          *
   2267          * Purpose:
   2268          *   YCbCr conversion to RGB.
   2269          *   Horizontal resolution 2 pixel, vertical resolution 2 pixel, 6 blocks per MCU
   2270          */

   \                                 In section .text, align 4, keep-with-next
   2271          static void _ConvertH2V2(GUI_JPEG_DCONTEXT * pContext) {
   \                     _ConvertH2V2:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   2272            int * pCRR;
   2273            int * pCBB;
   2274            I32 * pCRG;
   2275            I32 * pCBG;
   2276            int Row;
   2277            int i;
   2278            int l;
   2279            int j;
   2280            U8 * pDst_0;
   2281            U8 * pDst_1;
   2282            U8 * pY;
   2283            U8 * pC;
   2284            pCRR = pContext->aCRR;
   \   00000004   A010A0E3           MOV      R1,#+160
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   741C81E3           ORR      R1,R1,#0x7400
   \   00000010   14D04DE2           SUB      SP,SP,#+20
   \   00000014   061081E0           ADD      R1,R1,R6
   \   00000018   0C108DE5           STR      R1,[SP, #+12]
   2285            pCBB = pContext->aCBB;
   \   0000001C   A010A0E3           MOV      R1,#+160
   \   00000020   781C81E3           ORR      R1,R1,#0x7800
   \   00000024   061081E0           ADD      R1,R1,R6
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   2286            pCRG = pContext->aCRG;
   \   0000002C   A010A0E3           MOV      R1,#+160
   \   00000030   7C1C81E3           ORR      R1,R1,#0x7C00
   2287            pCBG = pContext->aCBG;
   \   00000034   A000A0E3           MOV      R0,#+160
   2288            Row = pContext->MaxMCU_ySize - pContext->MCULinesLeft;
   \   00000038   1470A0E3           MOV      R7,#+20
   \   0000003C   061081E0           ADD      R1,R1,R6
   \   00000040   800C80E3           ORR      R0,R0,#0x8000
   \   00000044   747C87E3           ORR      R7,R7,#0x7400
   \   00000048   04108DE5           STR      R1,[SP, #+4]
   \   0000004C   064080E0           ADD      R4,R0,R6
   \   00000050   069087E0           ADD      R9,R7,R6
   \   00000054   140099E5           LDR      R0,[R9, #+20]
   \   00000058   7C1099E5           LDR      R1,[R9, #+124]
   \   0000005C   018040E0           SUB      R8,R0,R1
   2289            pDst_0 = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   00000060   800099E5           LDR      R0,[R9, #+128]
   \   00000064   ........           BL       GUI_ALLOC_LockH
   \   00000068   0050A0E1           MOV      R5,R0
   2290            pDst_1 = (U8 *)GUI_LOCK_H(pContext->hScanLine1);
   \   0000006C   840099E5           LDR      R0,[R9, #+132]
   \   00000070   ........           BL       GUI_ALLOC_LockH
   2291            if (Row < 8) {
   \   00000074   742099E5           LDR      R2,[R9, #+116]
   \   00000078   080058E3           CMP      R8,#+8
   2292              pY = pContext->pSampleBuf + Row * 8;
   2293            } else {
   2294              pY = pContext->pSampleBuf + 64 * 2 + (Row & 7) * 8;
   \   0000007C   071008A2           ANDGE    R1,R8,#0x7
   \   00000080   881182B0           ADDLT    R1,R2,R8, LSL #+3
   \   00000084   811182A0           ADDGE    R1,R2,R1, LSL #+3
   2295            }
   2296            pC = pContext->pSampleBuf + 64 * 4 + (Row >> 1) * 8;
   \   00000088   C830A0E1           ASR      R3,R8,#+1
   2297            for (i = pContext->MaxMCUsPerRow; i > 0; i--) {
   \   0000008C   06C097E7           LDR      R12,[R7, +R6]
   \   00000090   801081A2           ADDGE    R1,R1,#+128
   \   00000094   832182E0           ADD      R2,R2,R3, LSL #+3
   \   00000098   402F82E2           ADD      R2,R2,#+256
   \   0000009C   00C08DE5           STR      R12,[SP, #+0]
   \   000000A0   01005CE3           CMP      R12,#+1
   \   000000A4   4E0000BA           BLT      ??_ConvertH2V2_0
   \   000000A8   ............       ADRL     R3,_aLimit
   \              ....        
   2298              for (l = 0; l < 2; l++) {
   \                     ??_ConvertH2V2_1:
   \   000000B0   02C0A0E3           MOV      R12,#+2
   2299                for (j = 0; j < 8; j += 2) {
   \                     ??_ConvertH2V2_2:
   \   000000B4   01E0A0E1           MOV      LR,R1
   \   000000B8   0460A0E3           MOV      R6,#+4
   2300                  int cb;
   2301                  int cr;
   2302                  int rc;
   2303                  int gc;
   2304                  int bc;
   2305                  int yy;
   2306          #if (USE_LIMIT_TABLE == 0)
   2307                  int v;
   2308          #endif
   2309                  cb = *(pC + 0);
   \                     ??_ConvertH2V2_3:
   \   000000BC   4090D2E4           LDRB     R9,[R2], #+64
   2310                  cr = *(pC + 64);
   \   000000C0   3F8052E4           LDRB     R8,[R2], #-63
   2311                  rc = *(pCRR + cr);
   \   000000C4   0C709DE5           LDR      R7,[SP, #+12]
   2312                  gc = (*(pCRG + cr) + *(pCBG + cb)) >> 16;
   \   000000C8   04A09DE5           LDR      R10,[SP, #+4]
   \   000000CC   087197E7           LDR      R7,[R7, +R8, LSL #+2]
   \   000000D0   08819AE7           LDR      R8,[R10, +R8, LSL #+2]
   \   000000D4   09A194E7           LDR      R10,[R4, +R9, LSL #+2]
   2313                  bc = *(pCBB + cb);
   2314                  #ifdef _DEBUG
   2315                  if (gc > 511) {
   2316                    GUI_DEBUG_ERROROUT("GUI_JPEG: Illegal value!");
   2317                    goto _ConvertH2V2_skip;
   2318                  }
   2319                  if (gc < -256) {
   2320                    GUI_DEBUG_ERROROUT("GUI_JPEG: Illegal value!");
   2321                    goto _ConvertH2V2_skip;
   2322                  }
   2323                  #endif
   2324          #if USE_LIMIT_TABLE
   2325                  yy = *(pY + j);
   2326                  *(pDst_0 + 0) = LIMIT(yy + rc);
   2327                  *(pDst_0 + 1) = LIMIT(yy + gc);
   2328                  *(pDst_0 + 2) = LIMIT(yy + bc);
   2329                  yy = *(pY + j + 1);
   2330                  *(pDst_0 + 4) = LIMIT(yy + rc);
   2331                  *(pDst_0 + 5) = LIMIT(yy + gc);
   2332                  *(pDst_0 + 6) = LIMIT(yy + bc);
   2333                  yy = *(pY + j + 8);
   2334                  *(pDst_1 + 0) = LIMIT(yy + rc);
   2335                  *(pDst_1 + 1) = LIMIT(yy + gc);
   2336                  *(pDst_1 + 2) = LIMIT(yy + bc);
   2337                  yy = *(pY + j + 8 + 1);
   2338                  *(pDst_1 + 4) = LIMIT(yy + rc);
   2339                  *(pDst_1 + 5) = LIMIT(yy + gc);
   2340                  *(pDst_1 + 6) = LIMIT(yy + bc);
   2341          #else
   2342                  yy = *(pY + j);
   2343                  v = (yy + rc);
   2344                  LIMIT(v);
   2345                  *(pDst_0 + 0) = v;
   2346                  v = (yy + gc);
   2347                  LIMIT(v);
   2348                  *(pDst_0 + 1) = v;
   2349                  v = (yy + bc);
   2350                  LIMIT(v);
   2351                  *(pDst_0 + 2) = v;
   2352          
   2353                  yy = *(pY + j + 1);
   2354                  v = (yy + rc);
   2355                  LIMIT(v);
   2356                  *(pDst_0 + 4) = v;
   2357                  v = (yy + gc);
   2358                  LIMIT(v);
   2359                  *(pDst_0 + 5) = v;
   2360                  v = (yy + bc);
   2361                  LIMIT(v);
   2362                  *(pDst_0 + 6) = v;
   2363          
   2364                  yy = *(pY + j + 8);
   2365                  v = (yy + rc);
   2366                  LIMIT(v);
   2367                  *(pDst_1 + 0) = v;
   2368                  v = (yy + gc);
   2369                  LIMIT(v);
   2370                  *(pDst_1 + 1) = v;
   2371                  v = (yy + bc);
   2372                  LIMIT(v);
   2373                  *(pDst_1 + 2) = v;
   2374          
   2375                  yy = *(pY + j + 8 + 1);
   2376                  v = (yy + rc);
   2377                  LIMIT(v);
   2378                  *(pDst_1 + 4) = v;
   2379                  v = (yy + gc);
   2380                  LIMIT(v);
   2381                  *(pDst_1 + 5) = v;
   2382                  v = (yy + bc);
   2383                  LIMIT(v);
   2384                  *(pDst_1 + 6) = v;
   2385          #endif
   2386                  pDst_0 += 8;
   2387                  pDst_1 += 8;
   2388                  pC++;
   2389                }
   \   000000D8   016056E2           SUBS     R6,R6,#+1
   \   000000DC   08808AE0           ADD      R8,R10,R8
   \   000000E0   08A09DE5           LDR      R10,[SP, #+8]
   \   000000E4   09919AE7           LDR      R9,[R10, +R9, LSL #+2]
   \   000000E8   01A0DEE4           LDRB     R10,[LR], #+1
   \   000000EC   0AB087E0           ADD      R11,R7,R10
   \   000000F0   03B08BE0           ADD      R11,R11,R3
   \   000000F4   00B1DBE5           LDRB     R11,[R11, #+256]
   \   000000F8   01B0C5E4           STRB     R11,[R5], #+1
   \   000000FC   48B88AE0           ADD      R11,R10,R8, ASR #+16
   \   00000100   03B08BE0           ADD      R11,R11,R3
   \   00000104   00B1DBE5           LDRB     R11,[R11, #+256]
   \   00000108   0AA089E0           ADD      R10,R9,R10
   \   0000010C   03A08AE0           ADD      R10,R10,R3
   \   00000110   01B0C5E4           STRB     R11,[R5], #+1
   \   00000114   00A1DAE5           LDRB     R10,[R10, #+256]
   \   00000118   02A0C5E4           STRB     R10,[R5], #+2
   \   0000011C   07A0DEE4           LDRB     R10,[LR], #+7
   \   00000120   0AB087E0           ADD      R11,R7,R10
   \   00000124   03B08BE0           ADD      R11,R11,R3
   \   00000128   00B1DBE5           LDRB     R11,[R11, #+256]
   \   0000012C   01B0C5E4           STRB     R11,[R5], #+1
   \   00000130   48B88AE0           ADD      R11,R10,R8, ASR #+16
   \   00000134   03B08BE0           ADD      R11,R11,R3
   \   00000138   00B1DBE5           LDRB     R11,[R11, #+256]
   \   0000013C   0AA089E0           ADD      R10,R9,R10
   \   00000140   03A08AE0           ADD      R10,R10,R3
   \   00000144   01B0C5E4           STRB     R11,[R5], #+1
   \   00000148   00A1DAE5           LDRB     R10,[R10, #+256]
   \   0000014C   02A0C5E4           STRB     R10,[R5], #+2
   \   00000150   01A0DEE4           LDRB     R10,[LR], #+1
   \   00000154   0AB087E0           ADD      R11,R7,R10
   \   00000158   03B08BE0           ADD      R11,R11,R3
   \   0000015C   00B1DBE5           LDRB     R11,[R11, #+256]
   \   00000160   01B0C0E4           STRB     R11,[R0], #+1
   \   00000164   48B88AE0           ADD      R11,R10,R8, ASR #+16
   \   00000168   03B08BE0           ADD      R11,R11,R3
   \   0000016C   00B1DBE5           LDRB     R11,[R11, #+256]
   \   00000170   0AA089E0           ADD      R10,R9,R10
   \   00000174   03A08AE0           ADD      R10,R10,R3
   \   00000178   01B0C0E4           STRB     R11,[R0], #+1
   \   0000017C   00A1DAE5           LDRB     R10,[R10, #+256]
   \   00000180   02A0C0E4           STRB     R10,[R0], #+2
   \   00000184   07A05EE4           LDRB     R10,[LR], #-7
   \   00000188   0A7087E0           ADD      R7,R7,R10
   \   0000018C   037087E0           ADD      R7,R7,R3
   \   00000190   0071D7E5           LDRB     R7,[R7, #+256]
   \   00000194   0170C0E4           STRB     R7,[R0], #+1
   \   00000198   48788AE0           ADD      R7,R10,R8, ASR #+16
   \   0000019C   037087E0           ADD      R7,R7,R3
   \   000001A0   0071D7E5           LDRB     R7,[R7, #+256]
   \   000001A4   0170C0E4           STRB     R7,[R0], #+1
   \   000001A8   0A7089E0           ADD      R7,R9,R10
   \   000001AC   037087E0           ADD      R7,R7,R3
   \   000001B0   0071D7E5           LDRB     R7,[R7, #+256]
   \   000001B4   0270C0E4           STRB     R7,[R0], #+2
   \   000001B8   BFFFFF1A           BNE      ??_ConvertH2V2_3
   2390                pY += 64;
   \   000001BC   401081E2           ADD      R1,R1,#+64
   2391              }
   \   000001C0   01C05CE2           SUBS     R12,R12,#+1
   \   000001C4   BAFFFF1A           BNE      ??_ConvertH2V2_2
   2392              pY += 64 * 6 - 64 * 2;
   2393              pC += 64 * 6 - 8;
   2394            }
   \   000001C8   00E09DE5           LDR      LR,[SP, #+0]
   \   000001CC   401F81E2           ADD      R1,R1,#+256
   \   000001D0   01E04EE2           SUB      LR,LR,#+1
   \   000001D4   5E2F82E2           ADD      R2,R2,#+376
   \   000001D8   00E08DE5           STR      LR,[SP, #+0]
   \   000001DC   01005EE3           CMP      LR,#+1
   \   000001E0   B2FFFFAA           BGE      ??_ConvertH2V2_1
   2395          #ifdef _DEBUG
   2396          _ConvertH2V2_skip:
   2397          #endif
   2398            GUI_UNLOCK_H(pDst_0);
   \                     ??_ConvertH2V2_0:
   \   000001E4   ........           BL       GUI_ALLOC_UnlockH
   2399            GUI_UNLOCK_H(pDst_1);
   \   000001E8   14D08DE2           ADD      SP,SP,#+20
   \   000001EC   F04FBDE8           POP      {R4-R11,LR}
   \   000001F0   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
   2400          }
   2401          
   2402          /*********************************************************************
   2403          *
   2404          *       _ConvertH2V1
   2405          *
   2406          * Purpose:
   2407          *   YCbCr conversion to RGB.
   2408          *   Horizontal resolution 2 pixel, vertical resolution 1 pixel, 4 blocks per MCU
   2409          */

   \                                 In section .text, align 4, keep-with-next
   2410          static void _ConvertH2V1(GUI_JPEG_DCONTEXT * pContext) {
   \                     _ConvertH2V1:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   2411            int * pCRR;
   2412            int * pCBB;
   2413            I32 * pCRG;
   2414            I32 * pCBG;
   2415            int Row;
   2416            int i;
   2417            int l;
   2418            int j;
   2419            U8 * pDst;
   2420            U8 * pY;
   2421            U8 * pC;
   2422            pCRR = pContext->aCRR;
   \   00000004   A010A0E3           MOV      R1,#+160
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   741C81E3           ORR      R1,R1,#0x7400
   \   00000010   0CD04DE2           SUB      SP,SP,#+12
   \   00000014   061081E0           ADD      R1,R1,R6
   \   00000018   08108DE5           STR      R1,[SP, #+8]
   2423            pCBB = pContext->aCBB;
   2424            pCRG = pContext->aCRG;
   \   0000001C   A000A0E3           MOV      R0,#+160
   \   00000020   A010A0E3           MOV      R1,#+160
   \   00000024   7C0C80E3           ORR      R0,R0,#0x7C00
   \   00000028   781C81E3           ORR      R1,R1,#0x7800
   \   0000002C   064080E0           ADD      R4,R0,R6
   2425            pCBG = pContext->aCBG;
   2426            Row = pContext->MaxMCU_ySize - pContext->MCULinesLeft;
   \   00000030   1470A0E3           MOV      R7,#+20
   \   00000034   061081E0           ADD      R1,R1,R6
   \   00000038   400E80E2           ADD      R0,R0,#+1024
   \   0000003C   747C87E3           ORR      R7,R7,#0x7400
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   065080E0           ADD      R5,R0,R6
   \   00000048   068087E0           ADD      R8,R7,R6
   \   0000004C   140098E5           LDR      R0,[R8, #+20]
   \   00000050   7C1098E5           LDR      R1,[R8, #+124]
   \   00000054   019040E0           SUB      R9,R0,R1
   2427            pDst = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   00000058   800098E5           LDR      R0,[R8, #+128]
   \   0000005C   ........           BL       GUI_ALLOC_LockH
   2428            pY = pContext->pSampleBuf + Row * 8;
   \   00000060   741098E5           LDR      R1,[R8, #+116]
   2429            pC = pContext->pSampleBuf + 64 * 2 + Row * 8;
   2430            for (i = pContext->MaxMCUsPerRow; i > 0; i--) {
   \   00000064   06C097E7           LDR      R12,[R7, +R6]
   \   00000068   891181E0           ADD      R1,R1,R9, LSL #+3
   \   0000006C   802081E2           ADD      R2,R1,#+128
   \   00000070   00C08DE5           STR      R12,[SP, #+0]
   \   00000074   01005CE3           CMP      R12,#+1
   \   00000078   330000BA           BLT      ??_ConvertH2V1_0
   \   0000007C   ............       ADRL     R3,_aLimit
   \              ....        
   2431              for (l = 0; l < 2; l++) {
   \                     ??_ConvertH2V1_1:
   \   00000084   02C0A0E3           MOV      R12,#+2
   2432                for (j = 0; j < 4; j++) {
   \                     ??_ConvertH2V1_2:
   \   00000088   01E0A0E1           MOV      LR,R1
   \   0000008C   0460A0E3           MOV      R6,#+4
   2433                  int cb;
   2434                  int cr;
   2435                  int rc;
   2436                  int gc;
   2437                  int bc;
   2438                  int yy;
   2439          #if (USE_LIMIT_TABLE == 0)
   2440                  int v;
   2441          #endif
   2442                  cb = *(pC + 0);
   \                     ??_ConvertH2V1_3:
   \   00000090   4090D2E4           LDRB     R9,[R2], #+64
   2443                  cr = *(pC + 64);
   \   00000094   3F8052E4           LDRB     R8,[R2], #-63
   2444                  rc = pCRR[cr];
   \   00000098   08709DE5           LDR      R7,[SP, #+8]
   2445                  gc = ((pCRG[cr] + pCBG[cb]) >> 16);
   \   0000009C   09A195E7           LDR      R10,[R5, +R9, LSL #+2]
   \   000000A0   087197E7           LDR      R7,[R7, +R8, LSL #+2]
   \   000000A4   088194E7           LDR      R8,[R4, +R8, LSL #+2]
   2446                  bc = pCBB[cb];
   2447          #if USE_LIMIT_TABLE
   2448                  yy = *(pY + (j << 1));
   2449                  *(pDst + 0) = LIMIT(yy + rc);
   2450                  *(pDst + 1) = LIMIT(yy + gc);
   2451                  *(pDst + 2) = LIMIT(yy + bc);
   2452                  yy = *(pY + (j << 1) + 1);
   2453                  *(pDst + 4) = LIMIT(yy + rc);
   2454                  *(pDst + 5) = LIMIT(yy + gc);
   2455                  *(pDst + 6) = LIMIT(yy + bc);
   2456          #else
   2457                  yy = *(pY + (j << 1));
   2458                  v = (yy + rc);
   2459                  LIMIT(v);
   2460                  *(pDst + 0) = v;
   2461                  v = (yy + gc);
   2462                  LIMIT(v);
   2463                  *(pDst + 1) = v;
   2464                  v = (yy + bc);
   2465                  LIMIT(v);
   2466                  *(pDst + 2) = v;
   2467          
   2468                  yy = *(pY + (j << 1) + 1);
   2469                  v = (yy + rc);
   2470                  LIMIT(v);
   2471                  *(pDst + 4) = v;
   2472                  v = (yy + gc);
   2473                  LIMIT(v);
   2474                  *(pDst + 5) = v;
   2475                  v = (yy + bc);
   2476                  LIMIT(v);
   2477                  *(pDst + 6) = v;
   2478          #endif
   2479                  pDst += 8;
   2480                  pC++;
   2481                }
   \   000000A8   016056E2           SUBS     R6,R6,#+1
   \   000000AC   08808AE0           ADD      R8,R10,R8
   \   000000B0   04A09DE5           LDR      R10,[SP, #+4]
   \   000000B4   09919AE7           LDR      R9,[R10, +R9, LSL #+2]
   \   000000B8   01A0DEE4           LDRB     R10,[LR], #+1
   \   000000BC   0AB087E0           ADD      R11,R7,R10
   \   000000C0   03B08BE0           ADD      R11,R11,R3
   \   000000C4   00B1DBE5           LDRB     R11,[R11, #+256]
   \   000000C8   01B0C0E4           STRB     R11,[R0], #+1
   \   000000CC   48B88AE0           ADD      R11,R10,R8, ASR #+16
   \   000000D0   03B08BE0           ADD      R11,R11,R3
   \   000000D4   00B1DBE5           LDRB     R11,[R11, #+256]
   \   000000D8   0AA089E0           ADD      R10,R9,R10
   \   000000DC   03A08AE0           ADD      R10,R10,R3
   \   000000E0   01B0C0E4           STRB     R11,[R0], #+1
   \   000000E4   00A1DAE5           LDRB     R10,[R10, #+256]
   \   000000E8   02A0C0E4           STRB     R10,[R0], #+2
   \   000000EC   01A0DEE4           LDRB     R10,[LR], #+1
   \   000000F0   0A7087E0           ADD      R7,R7,R10
   \   000000F4   037087E0           ADD      R7,R7,R3
   \   000000F8   0071D7E5           LDRB     R7,[R7, #+256]
   \   000000FC   0170C0E4           STRB     R7,[R0], #+1
   \   00000100   48788AE0           ADD      R7,R10,R8, ASR #+16
   \   00000104   037087E0           ADD      R7,R7,R3
   \   00000108   0071D7E5           LDRB     R7,[R7, #+256]
   \   0000010C   0170C0E4           STRB     R7,[R0], #+1
   \   00000110   0A7089E0           ADD      R7,R9,R10
   \   00000114   037087E0           ADD      R7,R7,R3
   \   00000118   0071D7E5           LDRB     R7,[R7, #+256]
   \   0000011C   0270C0E4           STRB     R7,[R0], #+2
   \   00000120   DAFFFF1A           BNE      ??_ConvertH2V1_3
   2482                pY += 64;
   \   00000124   401081E2           ADD      R1,R1,#+64
   2483              }
   \   00000128   01C05CE2           SUBS     R12,R12,#+1
   \   0000012C   D5FFFF1A           BNE      ??_ConvertH2V1_2
   2484              pY += 64 * 4 - 64 * 2;
   2485              pC += 64 * 4 - 8;
   2486            }
   \   00000130   00E09DE5           LDR      LR,[SP, #+0]
   \   00000134   801081E2           ADD      R1,R1,#+128
   \   00000138   01E04EE2           SUB      LR,LR,#+1
   \   0000013C   F82082E2           ADD      R2,R2,#+248
   \   00000140   00E08DE5           STR      LR,[SP, #+0]
   \   00000144   01005EE3           CMP      LR,#+1
   \   00000148   CDFFFFAA           BGE      ??_ConvertH2V1_1
   2487            GUI_UNLOCK_H(pDst);
   \                     ??_ConvertH2V1_0:
   \   0000014C   0CD08DE2           ADD      SP,SP,#+12
   \   00000150   F04FBDE8           POP      {R4-R11,LR}
   \   00000154   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
   2488          }
   2489          
   2490          /*********************************************************************
   2491          *
   2492          *       _ConvertH1V2
   2493          *
   2494          * Purpose:
   2495          *   YCbCr conversion to RGB.
   2496          *   Horizontal resolution 1 pixel, vertical resolution 2 pixel, 4 blocks per MCU
   2497          */

   \                                 In section .text, align 4, keep-with-next
   2498          static void _ConvertH1V2(GUI_JPEG_DCONTEXT * pContext) {
   \                     _ConvertH1V2:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   2499            int * pCRR;
   2500            int * pCBB;
   2501            I32 * pCRG;
   2502            I32 * pCBG;
   2503            int Row;
   2504            int i;
   2505            int j;
   2506            U8 * pDst_0;
   2507            U8 * pDst_1;
   2508            U8 * pY;
   2509            U8 * pC;
   2510            pCRR = pContext->aCRR;
   \   00000004   A010A0E3           MOV      R1,#+160
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   741C81E3           ORR      R1,R1,#0x7400
   \   00000010   14D04DE2           SUB      SP,SP,#+20
   \   00000014   051081E0           ADD      R1,R1,R5
   \   00000018   0C108DE5           STR      R1,[SP, #+12]
   2511            pCBB = pContext->aCBB;
   \   0000001C   A010A0E3           MOV      R1,#+160
   \   00000020   781C81E3           ORR      R1,R1,#0x7800
   \   00000024   051081E0           ADD      R1,R1,R5
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   2512            pCRG = pContext->aCRG;
   \   0000002C   A010A0E3           MOV      R1,#+160
   \   00000030   7C1C81E3           ORR      R1,R1,#0x7C00
   \   00000034   051081E0           ADD      R1,R1,R5
   \   00000038   04108DE5           STR      R1,[SP, #+4]
   2513            pCBG = pContext->aCBG;
   \   0000003C   A010A0E3           MOV      R1,#+160
   \   00000040   801C81E3           ORR      R1,R1,#0x8000
   2514            Row = pContext->MaxMCU_ySize - pContext->MCULinesLeft;
   \   00000044   1460A0E3           MOV      R6,#+20
   \   00000048   051081E0           ADD      R1,R1,R5
   \   0000004C   746C86E3           ORR      R6,R6,#0x7400
   \   00000050   00108DE5           STR      R1,[SP, #+0]
   \   00000054   058086E0           ADD      R8,R6,R5
   \   00000058   140098E5           LDR      R0,[R8, #+20]
   \   0000005C   7C1098E5           LDR      R1,[R8, #+124]
   \   00000060   017040E0           SUB      R7,R0,R1
   2515            pDst_0 = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   \   00000064   800098E5           LDR      R0,[R8, #+128]
   \   00000068   ........           BL       GUI_ALLOC_LockH
   \   0000006C   0040A0E1           MOV      R4,R0
   2516            pDst_1 = (U8 *)GUI_LOCK_H(pContext->hScanLine1);
   \   00000070   840098E5           LDR      R0,[R8, #+132]
   \   00000074   ........           BL       GUI_ALLOC_LockH
   2517            if (Row < 8) {
   \   00000078   742098E5           LDR      R2,[R8, #+116]
   \   0000007C   080057E3           CMP      R7,#+8
   2518              pY = pContext->pSampleBuf + Row * 8;
   2519            } else {
   2520              pY = pContext->pSampleBuf + 64 * 1 + (Row & 7) * 8;
   \   00000080   071007A2           ANDGE    R1,R7,#0x7
   \   00000084   871182B0           ADDLT    R1,R2,R7, LSL #+3
   \   00000088   811182A0           ADDGE    R1,R2,R1, LSL #+3
   2521            }
   2522            pC = pContext->pSampleBuf + 64 * 2 + (Row >> 1) * 8;
   \   0000008C   C730A0E1           ASR      R3,R7,#+1
   \   00000090   832182E0           ADD      R2,R2,R3, LSL #+3
   2523            for (i = pContext->MaxMCUsPerRow; i > 0; i--) {
   \   00000094   053096E7           LDR      R3,[R6, +R5]
   \   00000098   401081A2           ADDGE    R1,R1,#+64
   \   0000009C   802082E2           ADD      R2,R2,#+128
   \   000000A0   010053E3           CMP      R3,#+1
   \   000000A4   300000BA           BLT      ??_ConvertH1V2_0
   \   000000A8   ............       ADRL     R12,_aLimit
   \              ....        
   2524              for (j = 0; j < 8; j++) {
   \                     ??_ConvertH1V2_1:
   \   000000B0   02E0A0E1           MOV      LR,R2
   \   000000B4   0150A0E1           MOV      R5,R1
   \   000000B8   0860A0E3           MOV      R6,#+8
   2525                int cb;
   2526                int cr;
   2527                int rc;
   2528                int gc;
   2529                int bc;
   2530                int yy;
   2531          #if (USE_LIMIT_TABLE == 0)
   2532                int v;
   2533          #endif
   2534                cb = *(pC +  0 + j);
   \                     ??_ConvertH1V2_2:
   \   000000BC   4090DEE4           LDRB     R9,[LR], #+64
   2535                cr = *(pC + 64 + j);
   \   000000C0   3F805EE4           LDRB     R8,[LR], #-63
   2536                rc = pCRR[cr];
   \   000000C4   0C709DE5           LDR      R7,[SP, #+12]
   2537                gc = ((pCRG[cr] + pCBG[cb]) >> 16);
   \   000000C8   04A09DE5           LDR      R10,[SP, #+4]
   \   000000CC   087197E7           LDR      R7,[R7, +R8, LSL #+2]
   \   000000D0   08819AE7           LDR      R8,[R10, +R8, LSL #+2]
   \   000000D4   00A09DE5           LDR      R10,[SP, #+0]
   2538                bc = pCBB[cb];
   2539          #if USE_LIMIT_TABLE
   2540                yy = *(pY + j);
   2541                *(pDst_0 + 0) = LIMIT(yy + rc);
   2542                *(pDst_0 + 1) = LIMIT(yy + gc);
   2543                *(pDst_0 + 2) = LIMIT(yy + bc);
   2544                yy = *(pY + 8 + j);
   2545                *(pDst_1 + 0) = LIMIT(yy + rc);
   2546                *(pDst_1 + 1) = LIMIT(yy + gc);
   2547                *(pDst_1 + 2) = LIMIT(yy + bc);
   2548          #else
   2549                yy = *(pY + j);
   2550                v = (yy + rc);
   2551                LIMIT(v);
   2552                *(pDst_0 + 0) = v;
   2553                v = (yy + gc);
   2554                LIMIT(v);
   2555                *(pDst_0 + 1) = v;
   2556                v = (yy + bc);
   2557                LIMIT(v);
   2558                *(pDst_0 + 2) = v;
   2559          
   2560                yy = *(pY + 8 + j);
   2561                v = (yy + rc);
   2562                LIMIT(v);
   2563                *(pDst_1 + 0) = v;
   2564                v = (yy + gc);
   2565                LIMIT(v);
   2566                *(pDst_1 + 1) = v;
   2567                v = (yy + bc);
   2568                LIMIT(v);
   2569                *(pDst_1 + 2) = v;
   2570          #endif
   2571                pDst_0 += 4;
   2572                pDst_1 += 4;
   2573              }
   \   000000D8   016056E2           SUBS     R6,R6,#+1
   \   000000DC   09A19AE7           LDR      R10,[R10, +R9, LSL #+2]
   \   000000E0   08808AE0           ADD      R8,R10,R8
   \   000000E4   08A09DE5           LDR      R10,[SP, #+8]
   \   000000E8   09919AE7           LDR      R9,[R10, +R9, LSL #+2]
   \   000000EC   08A0D5E4           LDRB     R10,[R5], #+8
   \   000000F0   0AB087E0           ADD      R11,R7,R10
   \   000000F4   0CB08BE0           ADD      R11,R11,R12
   \   000000F8   00B1DBE5           LDRB     R11,[R11, #+256]
   \   000000FC   01B0C4E4           STRB     R11,[R4], #+1
   \   00000100   48B88AE0           ADD      R11,R10,R8, ASR #+16
   \   00000104   0CB08BE0           ADD      R11,R11,R12
   \   00000108   00B1DBE5           LDRB     R11,[R11, #+256]
   \   0000010C   0AA089E0           ADD      R10,R9,R10
   \   00000110   0CA08AE0           ADD      R10,R10,R12
   \   00000114   01B0C4E4           STRB     R11,[R4], #+1
   \   00000118   00A1DAE5           LDRB     R10,[R10, #+256]
   \   0000011C   02A0C4E4           STRB     R10,[R4], #+2
   \   00000120   07A055E4           LDRB     R10,[R5], #-7
   \   00000124   0A7087E0           ADD      R7,R7,R10
   \   00000128   0C7087E0           ADD      R7,R7,R12
   \   0000012C   0071D7E5           LDRB     R7,[R7, #+256]
   \   00000130   0170C0E4           STRB     R7,[R0], #+1
   \   00000134   48788AE0           ADD      R7,R10,R8, ASR #+16
   \   00000138   0C7087E0           ADD      R7,R7,R12
   \   0000013C   0071D7E5           LDRB     R7,[R7, #+256]
   \   00000140   0170C0E4           STRB     R7,[R0], #+1
   \   00000144   0A7089E0           ADD      R7,R9,R10
   \   00000148   0C7087E0           ADD      R7,R7,R12
   \   0000014C   0071D7E5           LDRB     R7,[R7, #+256]
   \   00000150   0270C0E4           STRB     R7,[R0], #+2
   \   00000154   D8FFFF1A           BNE      ??_ConvertH1V2_2
   2574              pY += 64 * 4;
   2575              pC += 64 * 4;
   2576            }
   \   00000158   013043E2           SUB      R3,R3,#+1
   \   0000015C   401F81E2           ADD      R1,R1,#+256
   \   00000160   402F82E2           ADD      R2,R2,#+256
   \   00000164   010053E3           CMP      R3,#+1
   \   00000168   D0FFFFAA           BGE      ??_ConvertH1V2_1
   2577            GUI_UNLOCK_H(pDst_0);
   \                     ??_ConvertH1V2_0:
   \   0000016C   ........           BL       GUI_ALLOC_UnlockH
   2578            GUI_UNLOCK_H(pDst_1);
   \   00000170   14D08DE2           ADD      SP,SP,#+20
   \   00000174   F04FBDE8           POP      {R4-R11,LR}
   \   00000178   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
   2579          }
   2580          
   2581          /*********************************************************************
   2582          *
   2583          *       _ConvertGray
   2584          *
   2585          * Purpose:
   2586          *   YCbCr conversion to RGB. 1 block per MCU.
   2587          */
   2588          static void _ConvertGray(GUI_JPEG_DCONTEXT * pContext) {
   2589            int Row;
   2590            int i;
   2591            U8 * pDst;
   2592            U8 * pSrc;
   2593            Row = pContext->MaxMCU_ySize - pContext->MCULinesLeft;
   2594            pDst = (U8 *)GUI_LOCK_H(pContext->hScanLine0);
   2595            pSrc = pContext->pSampleBuf + Row * 8;
   2596            for (i = pContext->MaxMCUsPerRow; i > 0; i--) {
   2597              GUI_MEMCPY(pDst, pSrc, 8);
   2598              pSrc += 64;
   2599              pDst += 8;
   2600            }
   2601            GUI_UNLOCK_H(pDst);
   2602          }
   2603          
   2604          /*********************************************************************
   2605          *
   2606          *       _DrawBanding
   2607          *
   2608          * Purpose:
   2609          *   Draws one JPEG frame band by band. The file will be scanned multiple times.
   2610          */

   \                                 In section .text, align 4, keep-with-next
   2611          static int _DrawBanding(GUI_HMEM hContext, int x0, int y0, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), tLCDDEV_Color2Index * pfColor2Index) {
   \                     _DrawBanding:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   2612            GUI_JPEG_DCONTEXT * pContext;
   2613            unsigned Band;
   2614            int r = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   2615            int i;
   2616          
   2617            /* Allocate coefficient buffer */
   2618            if (GUI_JPEG__AllocBandingCoeffBuffer(hContext) != 0) {
   \   00000010   1C70A0E3           MOV      R7,#+28
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   04108DE5           STR      R1,[SP, #+4]
   \   00000020   737C87E3           ORR      R7,R7,#0x7300
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0070D7E7           LDRB     R7,[R7, +R0]
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
   \   00000030   0080A0E3           MOV      R8,#+0
   \   00000034   010057E3           CMP      R7,#+1
   \   00000038   340000BA           BLT      ??_DrawBanding_0
   \   0000003C   010017E3           TST      R7,#0x1
   \   00000040   0E00000A           BEQ      ??_DrawBanding_1
   \   00000044   0130A0E3           MOV      R3,#+1
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       _CoeffBufferAllocBanding
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   1700001A           BNE      ??_DrawBanding_2
   \   00000060   0830A0E3           MOV      R3,#+8
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0210A0E3           MOV      R1,#+2
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       _CoeffBufferAllocBanding
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   1000001A           BNE      ??_DrawBanding_2
   \   0000007C   0180A0E3           MOV      R8,#+1
   \                     ??_DrawBanding_1:
   \   00000080   A770B0E1           LSRS     R7,R7,#+1
   \   00000084   2100000A           BEQ      ??_DrawBanding_0
   \                     ??_DrawBanding_3:
   \   00000088   0130A0E3           MOV      R3,#+1
   \   0000008C   0820A0E1           MOV      R2,R8
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       _CoeffBufferAllocBanding
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0600001A           BNE      ??_DrawBanding_2
   \   000000A4   0830A0E3           MOV      R3,#+8
   \   000000A8   0820A0E1           MOV      R2,R8
   \   000000AC   0210A0E3           MOV      R1,#+2
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       _CoeffBufferAllocBanding
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0100000A           BEQ      ??_DrawBanding_4
   2619              return 1;
   \                     ??_DrawBanding_2:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   4B0000EA           B        ??_DrawBanding_5
   2620            }
   \                     ??_DrawBanding_4:
   \   000000C8   018088E2           ADD      R8,R8,#+1
   \   000000CC   0130A0E3           MOV      R3,#+1
   \   000000D0   0820A0E1           MOV      R2,R8
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       _CoeffBufferAllocBanding
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   F5FFFF1A           BNE      ??_DrawBanding_2
   \   000000E8   0830A0E3           MOV      R3,#+8
   \   000000EC   0820A0E1           MOV      R2,R8
   \   000000F0   0210A0E3           MOV      R1,#+2
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       _CoeffBufferAllocBanding
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   EEFFFF1A           BNE      ??_DrawBanding_2
   \   00000104   018088E2           ADD      R8,R8,#+1
   \   00000108   017057E2           SUBS     R7,R7,#+1
   \   0000010C   DDFFFF1A           BNE      ??_DrawBanding_3
   2621            pContext = JPEG_LOCK_H(hContext);
   \                     ??_DrawBanding_0:
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       GUI_ALLOC_LockH
   \   00000118   A490A0E3           MOV      R9,#+164
   \   0000011C   0070A0E1           MOV      R7,R0
   \   00000120   849C89E3           ORR      R9,R9,#0x8400
   2622            for (Band = 0; Band < pContext->NumBands; Band++) {
   \   00000124   070099E7           LDR      R0,[R9, +R7]
   \   00000128   0080A0E3           MOV      R8,#+0
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   2E00000A           BEQ      ??_DrawBanding_6
   \   00000134   030000EA           B        ??_DrawBanding_7
   2623              int BlockY;
   2624              /* Start reading and process markers until SOF marker */
   2625              if (Band) {
   \                     ??_DrawBanding_8:
   \   00000138   000058E3           CMP      R8,#+0
   \   0000013C   0100000A           BEQ      ??_DrawBanding_7
   2626                GUI_JPEG__ReadUntilSOF(hContext);
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       GUI_JPEG__ReadUntilSOF
   2627              }
   2628              /* Decode one band of data */
   2629              GUI_JPEG__DecodeProgressiveBanding(pContext);
   \                     ??_DrawBanding_7:
   \   00000148   0700A0E1           MOV      R0,R7
   \   0000014C   ........           BL       GUI_JPEG__DecodeProgressiveBanding
   2630              /* Draw one band of data */
   2631              for (i = 0; i < pContext->ySize; i++) {
   \   00000150   00A0A0E3           MOV      R10,#+0
   \   00000154   08B09DE5           LDR      R11,[SP, #+8]
   \   00000158   0D0000EA           B        ??_DrawBanding_9
   2632                /* Load line */
   2633                if (GUI_JPEG__DecodeLine(pContext)) {
   2634                  r = 1;
   2635                  break;
   2636                }
   2637                /* Calculate block */
   2638                BlockY = i >> 3;
   2639                /* Skip rest of file */
   2640                if (BlockY > (pContext->FirstBlockOfBand + pContext->NumBlocksPerBand - 1)) {
   2641                  break;
   2642                }
   2643                /* Draw the line */
   2644                if ((BlockY >= pContext->FirstBlockOfBand) && (BlockY <= (pContext->FirstBlockOfBand + pContext->NumBlocksPerBand - 1))) {
   \                     ??_DrawBanding_10:
   \   0000015C   010050E1           CMP      R0,R1
   \   00000160   090000BA           BLT      ??_DrawBanding_11
   2645                  pContext->pfWritePixels(x0, y0 + i, pContext, pfGetColor, pfColor2Index);
   \   00000164   30009DE5           LDR      R0,[SP, #+48]
   \   00000168   08C0A0E3           MOV      R12,#+8
   \   0000016C   00008DE5           STR      R0,[SP, #+0]
   \   00000170   74CC8CE3           ORR      R12,R12,#0x7400
   \   00000174   0630A0E1           MOV      R3,R6
   \   00000178   0720A0E1           MOV      R2,R7
   \   0000017C   0B10A0E1           MOV      R1,R11
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   07C09CE7           LDR      R12,[R12, +R7]
   \   00000188   3CFF2FE1           BLX      R12
   2646                }
   \                     ??_DrawBanding_11:
   \   0000018C   01A08AE2           ADD      R10,R10,#+1
   \   00000190   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBanding_9:
   \   00000194   BE00D7E1           LDRH     R0,[R7, #+14]
   \   00000198   00005AE1           CMP      R10,R0
   \   0000019C   0D0000AA           BGE      ??_DrawBanding_12
   \   000001A0   0700A0E1           MOV      R0,R7
   \   000001A4   ........           BL       GUI_JPEG__DecodeLine
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   0110A013           MOVNE    R1,#+1
   \   000001B0   04108D15           STRNE    R1,[SP, #+4]
   \   000001B4   0700001A           BNE      ??_DrawBanding_12
   \   000001B8   072089E0           ADD      R2,R9,R7
   \   000001BC   081092E5           LDR      R1,[R2, #+8]
   \   000001C0   042092E5           LDR      R2,[R2, #+4]
   \   000001C4   CA01A0E1           ASR      R0,R10,#+3
   \   000001C8   022081E0           ADD      R2,R1,R2
   \   000001CC   012042E2           SUB      R2,R2,#+1
   \   000001D0   000052E1           CMP      R2,R0
   \   000001D4   E0FFFFAA           BGE      ??_DrawBanding_10
   2647              }
   2648              /* Set parameters for next band */
   2649              GUI_JPEG__SetNextBand(pContext);
   \                     ??_DrawBanding_12:
   \   000001D8   0700A0E1           MOV      R0,R7
   \   000001DC   ........           BL       GUI_JPEG__SetNextBand
   2650            }
   \   000001E0   070099E7           LDR      R0,[R9, +R7]
   \   000001E4   018088E2           ADD      R8,R8,#+1
   \   000001E8   000058E1           CMP      R8,R0
   \   000001EC   D1FFFF3A           BCC      ??_DrawBanding_8
   2651            GUI_UNLOCK_H(pContext);
   \                     ??_DrawBanding_6:
   \   000001F0   ........           BL       GUI_ALLOC_UnlockH
   2652            return r;
   \   000001F4   04009DE5           LDR      R0,[SP, #+4]
   \                     ??_DrawBanding_5:
   \   000001F8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000001FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2653          }
   2654          
   2655          /*********************************************************************
   2656          *
   2657          *       _DrawAtOnce
   2658          *
   2659          * Purpose:
   2660          *   Draws one JPEG frame at once, that means scanning of the file is required only one time.
   2661          */
   2662          static int _DrawAtOnce(GUI_JPEG_DCONTEXT * pContext, int x0, int y0, GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt), tLCDDEV_Color2Index * pfColor2Index) {
   2663            int i, r;
   2664            r = 0;
   2665            /* Iterate over all lines */
   2666            for (i = 0; i < pContext->ySize; i++) {
   2667              /* Decode line */
   2668              if (GUI_JPEG__DecodeLine(pContext)) {
   2669                r = 1;
   2670                break;
   2671              }
   2672              /* Draw the line */
   2673              pContext->pfWritePixels(x0, y0 + i, pContext, pfGetColor, pfColor2Index);
   2674            }
   2675            return r;
   2676          }
   2677          
   2678          /*********************************************************************
   2679          *
   2680          *       _Draw
   2681          */

   \                                 In section .text, align 4, keep-with-next
   2682          static int _Draw(GUI_HMEM hContext, GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0) {
   \                     _Draw:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0360A0E1           MOV      R6,R3
   2683            GUI_JPEG_DCONTEXT * pContext;
   2684            #if (GUI_WINSUPPORT)
   2685              GUI_RECT Rect;
   2686            #endif
   2687            tLCDDEV_Color2Index * pfColor2Index;
   2688            GUI_JPEG_INFO Info;
   2689            GUI_COLOR (* pfGetColor)(const U8 ** ppData, unsigned SkipCnt);
   2690            int r;
   2691            int OldIndex;
   2692          
   2693            pContext = JPEG_LOCK_H(hContext);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0090A0E1           MOV      R9,R0
   2694            /* Remember old foreground color */
   2695            OldIndex = LCD_GetColorIndex();
   \   00000018   ........           BL       LCD_GetColorIndex
   \   0000001C   10008DE5           STR      R0,[SP, #+16]
   2696            /* Get size of image */
   2697            pContext->pParam = p;
   \   00000020   18009DE5           LDR      R0,[SP, #+24]
   \   00000024   040089E5           STR      R0,[R9, #+4]
   2698            pContext->pfGetData = pfGetData;
   \   00000028   14009DE5           LDR      R0,[SP, #+20]
   \   0000002C   000089E5           STR      R0,[R9, #+0]
   2699            GUI_UNLOCK_H(pContext);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
   2700            if (GUI_JPEG__GetInfoEx(hContext, &Info)) {
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       GUI_JPEG__ReadUntilSOF
   \   0000003C   0090A0E1           MOV      R9,R0
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       GUI_ALLOC_LockH
   \   00000048   BC70D0E1           LDRH     R7,[R0, #+12]
   \   0000004C   BE80D0E1           LDRH     R8,[R0, #+14]
   \   00000050   ........           BL       GUI_ALLOC_UnlockH
   \   00000054   000059E3           CMP      R9,#+0
   2701              return 1;
   \   00000058   0100A013           MOVNE    R0,#+1
   \   0000005C   9C00001A           BNE      ??_Draw_0
   \   00000060   ........           LDR      R0,??DataTable13
   2702            }
   2703            /* Iterate over all windows */
   2704            #if (GUI_WINSUPPORT)
   2705              WM_ADDORG(x0,y0);
   \   00000064   ........           LDR      R1,??DataTable13
   \   00000068   400090E5           LDR      R0,[R0, #+64]
   \   0000006C   441091E5           LDR      R1,[R1, #+68]
   \   00000070   066080E0           ADD      R6,R0,R6
   \   00000074   40009DE5           LDR      R0,[SP, #+64]
   2706              Rect.x1 = (Rect.x0 = x0) + Info.XSize - 1;
   \   00000078   B460CDE1           STRH     R6,[SP, #+4]
   \   0000007C   000081E0           ADD      R0,R1,R0
   \   00000080   40008DE5           STR      R0,[SP, #+64]
   \   00000084   F400DDE1           LDRSH    R0,[SP, #+4]
   2707              Rect.y1 = (Rect.y0 = y0) + Info.YSize - 1;
   \   00000088   40109DE5           LDR      R1,[SP, #+64]
   \   0000008C   000087E0           ADD      R0,R7,R0
   \   00000090   010040E2           SUB      R0,R0,#+1
   \   00000094   B800CDE1           STRH     R0,[SP, #+8]
   \   00000098   B610CDE1           STRH     R1,[SP, #+6]
   \   0000009C   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000A0   000088E0           ADD      R0,R8,R0
   \   000000A4   010040E2           SUB      R0,R0,#+1
   \   000000A8   BA00CDE1           STRH     R0,[SP, #+10]
   2708              WM_ITERATE_START(&Rect) {
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           BL       WM__InitIVRSearch
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   8100000A           BEQ      ??_Draw_1
   2709            #endif
   2710              pContext = JPEG_LOCK_H(hContext);
   \                     ??_Draw_2:
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       GUI_ALLOC_LockH
   2711              GUI_MEMSET((U8 *)pContext, 0, sizeof(GUI_JPEG_DCONTEXT));
   \   000000C4   C020A0E3           MOV      R2,#+192
   \   000000C8   0040A0E1           MOV      R4,R0
   \   000000CC   842C82E3           ORR      R2,R2,#0x8400
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   ........           BL       GUI__memset
   2712              pContext->pParam = p;
   \   000000D8   18009DE5           LDR      R0,[SP, #+24]
   \   000000DC   040084E5           STR      R0,[R4, #+4]
   2713              pContext->pfGetData = pfGetData;
   \   000000E0   14009DE5           LDR      R0,[SP, #+20]
   \   000000E4   000084E5           STR      R0,[R4, #+0]
   2714              GUI_UNLOCK_H(pContext);
   \   000000E8   ........           BL       GUI_ALLOC_UnlockH
   2715              /* Initialize drawing and allocate memory */
   2716              r = GUI_JPEG__InitDraw(hContext);
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           BL       GUI_JPEG__ReadUntilSOF
   \   000000F4   0040B0E1           MOVS     R4,R0
   \   000000F8   1C00001A           BNE      ??_Draw_3
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           BL       _InitFrame
   \   00000104   0040B0E1           MOVS     R4,R0
   \   00000108   1800001A           BNE      ??_Draw_3
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       GUI_ALLOC_LockH
   \   00000114   0070A0E1           MOV      R7,R0
   \   00000118   1100A0E3           MOV      R0,#+17
   \   0000011C   740C80E3           ORR      R0,R0,#0x7400
   \   00000120   0700D0E7           LDRB     R0,[R0, +R7]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   0C00000A           BEQ      ??_Draw_4
   \   00000130   ........           BL       _CalcBanding
   \   00000134   0040B0E1           MOVS     R4,R0
   \   00000138   0B00001A           BNE      ??_Draw_5
   \   0000013C   A000A0E3           MOV      R0,#+160
   \   00000140   840C80E3           ORR      R0,R0,#0x8400
   \   00000144   0700D0E7           LDRB     R0,[R0, +R7]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0600001A           BNE      ??_Draw_5
   \   00000150   ........           BL       GUI_ALLOC_UnlockH
   \   00000154   0500A0E1           MOV      R0,R5
   \   00000158   ........           BL       _DecodeProgressive
   \   0000015C   0040A0E1           MOV      R4,R0
   \   00000160   020000EA           B        ??_Draw_3
   \                     ??_Draw_4:
   \   00000164   ........           BL       _InitScan
   \   00000168   0040A0E1           MOV      R4,R0
   \                     ??_Draw_5:
   \   0000016C   ........           BL       GUI_ALLOC_UnlockH
   2717              pContext = JPEG_LOCK_H(hContext);
   \                     ??_Draw_3:
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       GUI_ALLOC_LockH
   2718              if (pContext->ScanType == GRAYSCALE) {
   \   00000178   0870A0E3           MOV      R7,#+8
   \   0000017C   0090A0E1           MOV      R9,R0
   \   00000180   747C87E3           ORR      R7,R7,#0x7400
   \   00000184   09A087E0           ADD      R10,R7,R9
   \   00000188   0A00DAE5           LDRB     R0,[R10, #+10]
   \   0000018C   000050E3           CMP      R0,#+0
   2719                pfGetColor = GUI_JPEG__GetColorGray;
   2720              } else {
   2721                pfGetColor = GUI_JPEG__GetColorRGB;
   2722              }
   2723              /* Calculate function pointer for drawing one line of data */
   2724              if ((LCD_GetBitsPerPixelEx(GUI_Context.SelLayer) == (sizeof(LCD_PIXELINDEX) << 3)) && (pContext->ScanType != GRAYSCALE)) {
   \   00000190   ........           LDR      R0,??DataTable13
   \   00000194   ........           LDREQ    R8,??DataTable13_1
   \   00000198   ........           LDRNE    R8,??DataTable13_2
   \   0000019C   1100D0E5           LDRB     R0,[R0, #+17]
   \   000001A0   ........           BL       LCD_GetBitsPerPixelEx
   \   000001A4   200050E3           CMP      R0,#+32
   \   000001A8   0F00001A           BNE      ??_Draw_6
   \   000001AC   0A00DAE5           LDRB     R0,[R10, #+10]
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   0C00000A           BEQ      ??_Draw_6
   2725                GUI_HMEM hBmpLine;
   2726                int xSize;
   2727                xSize = pContext->xSize;
   2728                pContext->pfWritePixels = _WritePixelsOptRGB;
   \   000001B8   ........           LDR      R0,??DataTable13_3
   \   000001BC   BCA0D9E1           LDRH     R10,[R9, #+12]
   \   000001C0   090087E7           STR      R0,[R7, +R9]
   2729                GUI_UNLOCK_H(pContext);
   \   000001C4   ........           BL       GUI_ALLOC_UnlockH
   2730                hBmpLine = GUI_ALLOC_AllocZero(xSize * sizeof(LCD_PIXELINDEX));
   \   000001C8   0A01A0E1           LSL      R0,R10,#+2
   \   000001CC   ........           BL       GUI_ALLOC_AllocZero
   \   000001D0   00A0A0E1           MOV      R10,R0
   2731                pContext = JPEG_LOCK_H(hContext);
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   ........           BL       GUI_ALLOC_LockH
   \   000001DC   0090A0E1           MOV      R9,R0
   2732                pContext->hBmpLine = hBmpLine;
   \   000001E0   040087E3           ORR      R0,R7,#0x4
   \   000001E4   09A080E7           STR      R10,[R0, +R9]
   \   000001E8   010000EA           B        ??_Draw_7
   2733              } else {
   2734                pContext->pfWritePixels = _WritePixels;
   \                     ??_Draw_6:
   \   000001EC   ........           LDR      R0,??DataTable13_4
   \   000001F0   090087E7           STR      R0,[R7, +R9]
   2735              }
   2736              /* Get the right color conversion routine */
   2737              pfColor2Index = GUI_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \                     ??_Draw_7:
   \   000001F4   ........           LDR      R0,??DataTable13
   \   000001F8   1100D0E5           LDRB     R0,[R0, #+17]
   \   000001FC   ........           BL       GUI_GetpfColor2IndexEx
   \   00000200   00A0A0E1           MOV      R10,R0
   2738              /* 'banding' or 'at once'  */
   2739              if (r == 0) {
   \   00000204   000054E3           CMP      R4,#+0
   \   00000208   2700001A           BNE      ??_Draw_8
   2740                if (pContext->BandingRequired == 0) {
   \   0000020C   A000A0E3           MOV      R0,#+160
   \   00000210   840C80E3           ORR      R0,R0,#0x8400
   \   00000214   0900D0E7           LDRB     R0,[R0, +R9]
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   1700001A           BNE      ??_Draw_9
   2741                  r = _DrawAtOnce(pContext, x0, y0, pfGetColor, pfColor2Index);
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   0C108DE5           STR      R1,[SP, #+12]
   \   00000228   40B09DE5           LDR      R11,[SP, #+64]
   \   0000022C   080000EA           B        ??_Draw_10
   \                     ??_Draw_11:
   \   00000230   00A08DE5           STR      R10,[SP, #+0]
   \   00000234   0830A0E1           MOV      R3,R8
   \   00000238   0920A0E1           MOV      R2,R9
   \   0000023C   0B10A0E1           MOV      R1,R11
   \   00000240   0600A0E1           MOV      R0,R6
   \   00000244   09C097E7           LDR      R12,[R7, +R9]
   \   00000248   3CFF2FE1           BLX      R12
   \   0000024C   014084E2           ADD      R4,R4,#+1
   \   00000250   01B08BE2           ADD      R11,R11,#+1
   \                     ??_Draw_10:
   \   00000254   BE00D9E1           LDRH     R0,[R9, #+14]
   \   00000258   000054E1           CMP      R4,R0
   \   0000025C   050000AA           BGE      ??_Draw_12
   \   00000260   0900A0E1           MOV      R0,R9
   \   00000264   ........           BL       GUI_JPEG__DecodeLine
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   EFFFFF0A           BEQ      ??_Draw_11
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   0C108DE5           STR      R1,[SP, #+12]
   2742                } else {
   \                     ??_Draw_12:
   \   00000278   0C409DE5           LDR      R4,[SP, #+12]
   \   0000027C   0A0000EA           B        ??_Draw_8
   2743                  GUI_UNLOCK_H(pContext);
   \                     ??_Draw_9:
   \   00000280   ........           BL       GUI_ALLOC_UnlockH
   2744                  r = _DrawBanding(hContext, x0, y0, pfGetColor, pfColor2Index);
   \   00000284   00A08DE5           STR      R10,[SP, #+0]
   \   00000288   0830A0E1           MOV      R3,R8
   \   0000028C   40209DE5           LDR      R2,[SP, #+64]
   \   00000290   0610A0E1           MOV      R1,R6
   \   00000294   0500A0E1           MOV      R0,R5
   \   00000298   ........           BL       _DrawBanding
   \   0000029C   0040A0E1           MOV      R4,R0
   2745                  pContext = JPEG_LOCK_H(hContext);
   \   000002A0   0500A0E1           MOV      R0,R5
   \   000002A4   ........           BL       GUI_ALLOC_LockH
   \   000002A8   0090A0E1           MOV      R9,R0
   2746                }
   2747              }
   2748              /* Free allocated memory */
   2749              GUI_JPEG__Free(pContext);
   \                     ??_Draw_8:
   \   000002AC   0900A0E1           MOV      R0,R9
   \   000002B0   ........           BL       GUI_JPEG__Free
   2750              GUI_UNLOCK_H(pContext);
   \   000002B4   ........           BL       GUI_ALLOC_UnlockH
   2751            #if (GUI_WINSUPPORT)
   2752              } WM_ITERATE_END();
   \   000002B8   ........           BL       WM__GetNextIVR
   \   000002BC   000050E3           CMP      R0,#+0
   \   000002C0   7DFFFF1A           BNE      ??_Draw_2
   2753            #endif
   2754            /* Restore foreground color */
   2755            LCD_SetColor(LCD_Index2Color(OldIndex));
   \                     ??_Draw_1:
   \   000002C4   10009DE5           LDR      R0,[SP, #+16]
   \   000002C8   ........           BL       LCD_Index2Color
   \   000002CC   ........           BL       LCD_SetColor
   2756            return r;
   \   000002D0   0400A0E1           MOV      R0,R4
   \                     ??_Draw_0:
   \   000002D4   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000002D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2757          }
   2758          
   2759          /*********************************************************************
   2760          *
   2761          *       Private code
   2762          *
   2763          **********************************************************************
   2764          */
   2765          /*********************************************************************
   2766          *
   2767          *       GUI_JPEG__GetData
   2768          *
   2769          * Purpose:
   2770          *   This routine is called by _FillInputBuffer when GUI_JPEG_Draw() is
   2771          *   executed. It is responsible for setting the data pointer to a valid
   2772          *   data location with at least one valid byte.
   2773          *
   2774          * Parameters:
   2775          *   p           - Pointer to application defined data.
   2776          *   ppData      - Pointer to data pointer. This pointer should be set to
   2777          *                 a valid location.
   2778          *   NumBytesReq - Number of bytes requested.
   2779          *   Off         - Data offset from beginning of the data stream.
   2780          *
   2781          * Return value:
   2782          *   Number of data bytes available.
   2783          */

   \                                 In section .text, align 4, keep-with-next
   2784          int GUI_JPEG__GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Off) {
   \                     GUI_JPEG__GetData:
   \   00000000   00402DE9           PUSH     {LR}
   2785            int RemBytes, NumBytes;
   2786            GUI_JPEG_PARAM * pParam;
   2787            NumBytes = 0;
   2788            pParam = (GUI_JPEG_PARAM *)p;
   2789            RemBytes = pParam->FileSize - Off;
   \   00000004   04E090E5           LDR      LR,[R0, #+4]
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   03E04EE0           SUB      LR,LR,R3
   2790            if (RemBytes > 0) {
   \   00000010   01005EE3           CMP      LR,#+1
   \   00000014   050000BA           BLT      ??GUI_JPEG__GetData_0
   2791              NumBytes = ((unsigned)RemBytes > NumBytesReq) ? NumBytesReq : RemBytes;
   2792              *ppData  = pParam->pFileData + Off;
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0E0052E1           CMP      R2,LR
   \   00000020   000083E0           ADD      R0,R3,R0
   \   00000024   02C0A031           MOVCC    R12,R2
   \   00000028   0EC0A021           MOVCS    R12,LR
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   2793            }
   2794            return NumBytes;
   \                     ??GUI_JPEG__GetData_0:
   \   00000030   0C00A0E1           MOV      R0,R12
   \   00000034   0080BDE8           POP      {PC}             ;; return
   2795          }
   2796          
   2797          /*********************************************************************
   2798          *
   2799          *       GUI_JPEG__ReadUntilSOF
   2800          *
   2801          * Purpose:
   2802          *   Process all markers until (and including) the SOFx marker to get basic file information.
   2803          */

   \                                 In section .text, align 4, keep-with-next
   2804          int GUI_JPEG__ReadUntilSOF(GUI_HMEM hContext) {
   \                     GUI_JPEG__ReadUntilSOF:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   2805            GUI_JPEG_DCONTEXT * pContext;
   2806            U8 Marker;
   2807            int r = 0;
   \   00000008   0040A0E3           MOV      R4,#+0
   2808          
   2809            pContext = JPEG_LOCK_H(hContext);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
   2810            pContext->StartOfFile = 1;
   \   00000014   147085E2           ADD      R7,R5,#+20
   \   00000018   0160A0E3           MOV      R6,#+1
   2811            pContext->pfGetU8 = _GetU8;
   \   0000001C   ........           LDR      R0,??DataTable13_5
   \   00000020   0460C7E5           STRB     R6,[R7, #+4]
   \   00000024   0C0087E5           STR      R0,[R7, #+12]
   2812            pContext->NumBytesInBuffer = 0;
   \   00000028   144085E5           STR      R4,[R5, #+20]
   2813            if (_ReadFirstMarker(pContext, &Marker)) {
   \   0000002C   02108DE2           ADD      R1,SP,#+2
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       _GetU8
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1D00001A           BNE      ??GUI_JPEG__ReadUntilSOF_0
   \   00000040   01108DE2           ADD      R1,SP,#+1
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0C2097E5           LDR      R2,[R7, #+12]
   \   0000004C   32FF2FE1           BLX      R2
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200DD05           LDRBEQ   R0,[SP, #+2]
   \   00000058   FF005003           CMPEQ    R0,#+255
   \   0000005C   0100DD05           LDRBEQ   R0,[SP, #+1]
   \   00000060   D8005003           CMPEQ    R0,#+216
   \   00000064   1300001A           BNE      ??GUI_JPEG__ReadUntilSOF_0
   \   00000068   D810A0E3           MOV      R1,#+216
   \   0000006C   0010CDE5           STRB     R1,[SP, #+0]
   2814              r = 1;
   2815            } else {
   2816              if (Marker != M_SOI) {
   2817                r = 1;
   2818              } else {
   2819                if (_ReadMarkers(pContext, &Marker)) {
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           BL       _ReadMarkers
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0C00001A           BNE      ??GUI_JPEG__ReadUntilSOF_0
   2820                  r = 1;
   2821                } else {
   2822                  switch (Marker) {
   \   00000084   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000088   C00040E2           SUB      R0,R0,#+192
   \   0000008C   010050E3           CMP      R0,#+1
   \   00000090   0400009A           BLS      ??GUI_JPEG__ReadUntilSOF_1
   \   00000094   020050E2           SUBS     R0,R0,#+2
   \   00000098   0700001A           BNE      ??GUI_JPEG__ReadUntilSOF_2
   2823                  case M_SOF2: /* Progressive, Huffman */
   2824                    pContext->IsProgressive = 1;
   \   0000009C   1100A0E3           MOV      R0,#+17
   \   000000A0   740C80E3           ORR      R0,R0,#0x7400
   \   000000A4   0560C0E7           STRB     R6,[R0, +R5]
   2825                    /* No break here... */
   2826                  case M_SOF0: /* Baseline */
   2827                  case M_SOF1: /* Extended sequential, Huffman */
   2828                    if (_GetSOF(pContext)) {
   \                     ??GUI_JPEG__ReadUntilSOF_1:
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       _GetSOF
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0000000A           BEQ      ??GUI_JPEG__ReadUntilSOF_2
   2829                      r = 1;
   \                     ??GUI_JPEG__ReadUntilSOF_0:
   \   000000B8   0140A0E3           MOV      R4,#+1
   2830                    }
   2831                    break;
   2832                  }
   2833                }
   2834              }
   2835            }
   2836            GUI_UNLOCK_H(pContext);
   \                     ??GUI_JPEG__ReadUntilSOF_2:
   \   000000BC   ........           BL       GUI_ALLOC_UnlockH
   2837            return r;
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   04D08DE2           ADD      SP,SP,#+4
   \   000000C8   F080BDE8           POP      {R4-R7,PC}       ;; return
   2838          }
   2839          
   2840          /*********************************************************************
   2841          *
   2842          *       GUI_JPEG__DecodeProgressiveBanding
   2843          *
   2844          * Purpose:
   2845          *   Decodes the coefficients of one band of a progressive scan
   2846          */

   \                                 In section .text, align 4, keep-with-next
   2847          int GUI_JPEG__DecodeProgressiveBanding(GUI_JPEG_DCONTEXT * pContext) {
   \                     GUI_JPEG__DecodeProgressiveBanding:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   2848            int i;
   2849            U8 NumCompsPerFrame;
   2850            NumCompsPerFrame = pContext->NumCompsPerFrame;
   2851            if (NumCompsPerFrame == 4) {
   \   00000004   1C50A0E3           MOV      R5,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   735C85E3           ORR      R5,R5,#0x7300
   \   00000010   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   040050E3           CMP      R0,#+4
   \   0000001C   2B00001A           BNE      ??GUI_JPEG__DecodeProgressiveBanding_0
   2852              return 1; /* Error: Unsupported color space */
   \                     ??GUI_JPEG__DecodeProgressiveBanding_1:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   3E0000EA           B        ??GUI_JPEG__DecodeProgressiveBanding_2
   2853            }
   2854            while (1) {
   2855              int DC_OnlyScan;
   2856              int RefinementScan;
   2857              int (* pfDecodeBlock)(GUI_JPEG_DCONTEXT * pContext, int ComponentId, int BlockX, int BlockY);
   2858              /* Initialize scan by reading the markers including the SOS marker */
   2859              if (_InitScan(pContext)) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_3:
   \   00000028   580085E2           ADD      R0,R5,#+88
   \   0000002C   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000030   5B2085E2           ADD      R2,R5,#+91
   \   00000034   0420D2E7           LDRB     R2,[R2, +R4]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   59C085E2           ADD      R12,R5,#+89
   \   00000040   0010A013           MOVNE    R1,#+0
   \   00000044   0110A003           MOVEQ    R1,#+1
   \   00000048   04C0DCE7           LDRB     R12,[R12, +R4]
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   0130A013           MOVNE    R3,#+1
   \   00000054   0030A003           MOVEQ    R3,#+0
   \   00000058   00005CE1           CMP      R12,R0
   \   0000005C   EFFFFF3A           BCC      ??GUI_JPEG__DecodeProgressiveBanding_1
   2860                /* Break if there is nothing else to scan */
   2861                break;
   2862              }
   2863              DC_OnlyScan    = (pContext->SpectralStart  ? 0 : 1);
   2864              RefinementScan = (pContext->SuccessiveHigh ? 1 : 0);
   2865              if (pContext->SpectralStart > pContext->SpectralEnd) {
   2866                return 1; /* Error: Bad SOS spectral */
   2867              }
   2868              if (DC_OnlyScan) {
   \   00000060   000051E3           CMP      R1,#+0
   \   00000064   0200000A           BEQ      ??GUI_JPEG__DecodeProgressiveBanding_4
   2869                if (pContext->SpectralEnd) {
   \   00000068   00005CE3           CMP      R12,#+0
   \   0000006C   0400000A           BEQ      ??GUI_JPEG__DecodeProgressiveBanding_5
   \   00000070   EAFFFFEA           B        ??GUI_JPEG__DecodeProgressiveBanding_1
   2870                  return 1; /* Error: Bad SOS spectral */
   2871                }
   2872              } else if (pContext->NumCompsPerScan != 1) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_4:
   \   00000074   110085E2           ADD      R0,R5,#+17
   \   00000078   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   E6FFFF1A           BNE      ??GUI_JPEG__DecodeProgressiveBanding_1
   2873                return 1; /* Error: Bad SOS spectral */
   2874              }
   2875              if (RefinementScan && (pContext->SuccessiveLow != pContext->SuccessiveHigh)) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_5:
   \   00000084   000053E3           CMP      R3,#+0
   \   00000088   0300000A           BEQ      ??GUI_JPEG__DecodeProgressiveBanding_6
   \   0000008C   5A0085E2           ADD      R0,R5,#+90
   \   00000090   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000094   020050E1           CMP      R0,R2
   \   00000098   E0FFFF1A           BNE      ??GUI_JPEG__DecodeProgressiveBanding_1
   2876                return 1; /* Error: Bad SOS successive */
   2877              }
   2878              /* Set the right decoding routine */
   2879              if (DC_OnlyScan) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_6:
   \   0000009C   000051E3           CMP      R1,#+0
   \   000000A0   0300000A           BEQ      ??GUI_JPEG__DecodeProgressiveBanding_7
   2880                if (RefinementScan) {
   \   000000A4   000053E3           CMP      R3,#+0
   2881                  pfDecodeBlock = _DecodeBlockDC_RefineBanding;
   \   000000A8   ........           LDRNE    R1,??DataTable13_6
   \   000000AC   ........           LDREQ    R1,??DataTable13_7
   \   000000B0   020000EA           B        ??GUI_JPEG__DecodeProgressiveBanding_8
   2882                } else {
   2883                  pfDecodeBlock = _DecodeBlockDC_FirstBanding;
   2884                }
   2885              } else {
   2886                if (RefinementScan) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_7:
   \   000000B4   000053E3           CMP      R3,#+0
   2887                  pfDecodeBlock = _DecodeBlockAC_RefineBanding;
   \   000000B8   ........           LDRNE    R1,??DataTable13_8
   2888                } else {
   2889                  pfDecodeBlock = _DecodeBlockAC_FirstBanding;
   \   000000BC   ........           LDREQ    R1,??DataTable13_9
   2890                }
   2891              }
   2892              /* Decode... */
   2893              if (_DecodeScanProg(pContext, pfDecodeBlock)) {
   \                     ??GUI_JPEG__DecodeProgressiveBanding_8:
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       _DecodeScanProg
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   D3FFFF1A           BNE      ??GUI_JPEG__DecodeProgressiveBanding_1
   \                     ??GUI_JPEG__DecodeProgressiveBanding_0:
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       _InitScan
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   D1FFFF0A           BEQ      ??GUI_JPEG__DecodeProgressiveBanding_3
   2894                return 1;
   2895              }
   2896            }
   2897            pContext->NumCompsPerScan = pContext->NumCompsPerFrame;
   \   000000E0   0400D5E7           LDRB     R0,[R5, +R4]
   \   000000E4   111085E2           ADD      R1,R5,#+17
   2898            for (i = 0; i < pContext->NumCompsPerScan; i++) {
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0400C1E7           STRB     R0,[R1, +R4]
   \   000000F0   0430A0E1           MOV      R3,R4
   \   000000F4   01C081E2           ADD      R12,R1,#+1
   \   000000F8   010050E3           CMP      R0,#+1
   \   000000FC   050000BA           BLT      ??GUI_JPEG__DecodeProgressiveBanding_9
   2899              pContext->aCompList[i] = i;
   \                     ??GUI_JPEG__DecodeProgressiveBanding_10:
   \   00000100   0320CCE7           STRB     R2,[R12, +R3]
   2900            }
   \   00000104   0400D1E7           LDRB     R0,[R1, +R4]
   \   00000108   012082E2           ADD      R2,R2,#+1
   \   0000010C   013083E2           ADD      R3,R3,#+1
   \   00000110   000052E1           CMP      R2,R0
   \   00000114   F9FFFFBA           BLT      ??GUI_JPEG__DecodeProgressiveBanding_10
   2901            _CalcMCUBlockOrder(pContext);
   \                     ??GUI_JPEG__DecodeProgressiveBanding_9:
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       _CalcMCUBlockOrder
   2902            return 0;
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??GUI_JPEG__DecodeProgressiveBanding_2:
   \   00000124   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000128   3080BDE8           POP      {R4,R5,PC}       ;; return
   2903          }
   2904          
   2905          /*********************************************************************
   2906          *
   2907          *       GUI_JPEG__Free
   2908          *
   2909          * Purpose:
   2910          *   Frees all allocated data of the given decoding context
   2911          */

   \                                 In section .text, align 4, keep-with-next
   2912          void GUI_JPEG__Free(GUI_JPEG_DCONTEXT * pContext) {
   \                     GUI_JPEG__Free:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   9400A0E3           MOV      R0,#+148
   \   0000000C   740C80E3           ORR      R0,R0,#0x7400
   \   00000010   040090E7           LDR      R0,[R0, +R4]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000000A           BEQ      ??GUI_JPEG__Free_0
   2913            int i;
   2914            if (pContext->hScanLine0) {
   2915              GUI_ALLOC_Free(pContext->hScanLine0);
   \   0000001C   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG__Free_0:
   \   00000020   9800A0E3           MOV      R0,#+152
   \   00000024   740C80E3           ORR      R0,R0,#0x7400
   \   00000028   040090E7           LDR      R0,[R0, +R4]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0000000A           BEQ      ??GUI_JPEG__Free_1
   2916            }
   2917            if (pContext->hScanLine1) {
   2918              GUI_ALLOC_Free(pContext->hScanLine1);
   \   00000034   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG__Free_1:
   \   00000038   7C00A0E3           MOV      R0,#+124
   \   0000003C   740C80E3           ORR      R0,R0,#0x7400
   \   00000040   040090E7           LDR      R0,[R0, +R4]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0000000A           BEQ      ??GUI_JPEG__Free_2
   2919            }
   2920            if (pContext->hBlocks) {
   2921              GUI_ALLOC_Free(pContext->hBlocks);
   \   0000004C   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG__Free_2:
   \   00000050   8400A0E3           MOV      R0,#+132
   \   00000054   740C80E3           ORR      R0,R0,#0x7400
   \   00000058   040090E7           LDR      R0,[R0, +R4]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0000000A           BEQ      ??GUI_JPEG__Free_3
   2922            }
   2923            if (pContext->hSampleBuf) {
   2924              GUI_ALLOC_Free(pContext->hSampleBuf);
   \   00000064   ........           BL       GUI_ALLOC_Free
   2925            }
   2926            for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \                     ??GUI_JPEG__Free_3:
   \   00000068   8450A0E3           MOV      R5,#+132
   \   0000006C   735C85E3           ORR      R5,R5,#0x7300
   \   00000070   686045E2           SUB      R6,R5,#+104
   \   00000074   0400D6E7           LDRB     R0,[R6, +R4]
   \   00000078   0070A0E3           MOV      R7,#+0
   \   0000007C   0480A0E1           MOV      R8,R4
   \   00000080   010050E3           CMP      R0,#+1
   \   00000084   0D0000BA           BLT      ??GUI_JPEG__Free_4
   2927              GUI_HMEM hMem;
   2928              hMem = pContext->aAC_Coeffs[i].hData;
   \                     ??GUI_JPEG__Free_5:
   \   00000088   080085E0           ADD      R0,R5,R8
   \   0000008C   400090E5           LDR      R0,[R0, #+64]
   2929              if (hMem) {
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0000000A           BEQ      ??GUI_JPEG__Free_6
   2930                GUI_ALLOC_Free(hMem);
   \   00000098   ........           BL       GUI_ALLOC_Free
   2931              }
   2932              hMem = pContext->aDC_Coeffs[i].hData;
   \                     ??GUI_JPEG__Free_6:
   \   0000009C   080095E7           LDR      R0,[R5, +R8]
   2933              if (hMem) {
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0000000A           BEQ      ??GUI_JPEG__Free_7
   2934                GUI_ALLOC_Free(hMem);
   \   000000A8   ........           BL       GUI_ALLOC_Free
   2935              }
   2936            }
   \                     ??GUI_JPEG__Free_7:
   \   000000AC   0400D6E7           LDRB     R0,[R6, +R4]
   \   000000B0   017087E2           ADD      R7,R7,#+1
   \   000000B4   108088E2           ADD      R8,R8,#+16
   \   000000B8   000057E1           CMP      R7,R0
   \   000000BC   F1FFFFBA           BLT      ??GUI_JPEG__Free_5
   \                     ??GUI_JPEG__Free_4:
   \   000000C0   880085E2           ADD      R0,R5,#+136
   \   000000C4   040090E7           LDR      R0,[R0, +R4]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0000000A           BEQ      ??GUI_JPEG__Free_8
   2937            if (pContext->hBmpLine) {
   2938              GUI_ALLOC_Free(pContext->hBmpLine);
   \   000000D0   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG__Free_8:
   \   000000D4   FC0085E2           ADD      R0,R5,#+252
   \   000000D8   040090E7           LDR      R0,[R0, +R4]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0000000A           BEQ      ??GUI_JPEG__Free_9
   2939            }
   2940            if (pContext->hBlockMaxZagSet) {
   2941              GUI_ALLOC_Free(pContext->hBlockMaxZagSet);
   \   000000E4   ........           BL       GUI_ALLOC_Free
   2942            }
   2943          }
   \                     ??GUI_JPEG__Free_9:
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return
   2944          
   2945          /*********************************************************************
   2946          *
   2947          *       GUI_JPEG__SkipLine
   2948          *
   2949          * Purpose:
   2950          *   Decodes a line on demand and does the YCbCr->RGB conversion. After
   2951          *   calling this routine the output buffer contains one line of RGB data.
   2952          */

   \                                 In section .text, align 4, keep-with-next
   2953          int GUI_JPEG__SkipLine(GUI_JPEG_DCONTEXT * pContext) {
   \                     GUI_JPEG__SkipLine:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   2954            if (pContext->MCULinesLeft == 0) {
   \   00000004   1050A0E3           MOV      R5,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   745C85E3           ORR      R5,R5,#0x7400
   \   00000010   046085E0           ADD      R6,R5,R4
   \   00000014   800096E5           LDR      R0,[R6, #+128]
   \   00000018   08D04DE2           SUB      SP,SP,#+8
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1A00001A           BNE      ??GUI_JPEG__SkipLine_0
   2955              if (pContext->IsProgressive) {
   \   00000024   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0400000A           BEQ      ??GUI_JPEG__SkipLine_1
   2956                if (_LoadNextRow(pContext)) {
   \   00000034   ........           BL       _LoadNextRow
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1100000A           BEQ      ??GUI_JPEG__SkipLine_2
   2957                  return 1;
   \                     ??GUI_JPEG__SkipLine_3:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   180000EA           B        ??GUI_JPEG__SkipLine_4
   2958                }
   2959              } else {
   2960                if (_DecodeNextRow(pContext)) {
   \                     ??GUI_JPEG__SkipLine_1:
   \   00000048   ........           BL       _DecodeNextRow
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   FAFFFF1A           BNE      ??GUI_JPEG__SkipLine_3
   2961                  return 1;
   2962                }
   2963                if (pContext->TotalLinesLeft <= pContext->MaxMCU_ySize) {
   \   00000054   180096E5           LDR      R0,[R6, #+24]
   \   00000058   7C1096E5           LDR      R1,[R6, #+124]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   060000BA           BLT      ??GUI_JPEG__SkipLine_5
   2964                  U8 Marker;
   2965                  if (_ReadMarkers(pContext, &Marker)) {
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       _ReadMarkers
   \   00000070   000050E3           CMP      R0,#+0
   2966                    return 1;
   2967                  }
   2968                  if (Marker != M_EOI) {
   \   00000074   0000DD05           LDRBEQ   R0,[SP, #+0]
   \   00000078   D9005003           CMPEQ    R0,#+217
   \   0000007C   EFFFFF1A           BNE      ??GUI_JPEG__SkipLine_3
   2969                    return 1;
   2970                  }
   2971                }
   2972                pContext->TransformationRequired = 1;
   \                     ??GUI_JPEG__SkipLine_5:
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   0400C5E7           STRB     R0,[R5, +R4]
   2973              }
   2974              pContext->MCULinesLeft = pContext->MaxMCU_ySize;
   \                     ??GUI_JPEG__SkipLine_2:
   \   00000088   180096E5           LDR      R0,[R6, #+24]
   \   0000008C   800086E5           STR      R0,[R6, #+128]
   2975            }
   2976            pContext->MCULinesLeft--;
   \                     ??GUI_JPEG__SkipLine_0:
   \   00000090   800096E5           LDR      R0,[R6, #+128]
   \   00000094   010040E2           SUB      R0,R0,#+1
   \   00000098   800086E5           STR      R0,[R6, #+128]
   2977            pContext->TotalLinesLeft--;
   \   0000009C   7C0096E5           LDR      R0,[R6, #+124]
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   7C0086E5           STR      R0,[R6, #+124]
   2978            return 0;
   \   000000A8   0000A0E3           MOV      R0,#+0
   \                     ??GUI_JPEG__SkipLine_4:
   \   000000AC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000B0   7080BDE8           POP      {R4-R6,PC}       ;; return
   2979          }
   2980          
   2981          /*********************************************************************
   2982          *
   2983          *       GUI_JPEG__DecodeLine
   2984          *
   2985          * Purpose:
   2986          *   Decodes a line on demand and does the DPCM and the YCbCr->RGB conversion.
   2987          *   After calling this routine the output buffer contains one line of
   2988          *   valid RGB data.
   2989          */

   \                                 In section .text, align 4, keep-with-next
   2990          int GUI_JPEG__DecodeLine(GUI_JPEG_DCONTEXT * pContext) {
   \                     GUI_JPEG__DecodeLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   2991            /* Decode a new line if buffer is empty */
   2992            if (pContext->MCULinesLeft == 0) {
   \   00000004   1060A0E3           MOV      R6,#+16
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   746C86E3           ORR      R6,R6,#0x7400
   \   00000010   054086E0           ADD      R4,R6,R5
   \   00000014   800094E5           LDR      R0,[R4, #+128]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1B00001A           BNE      ??GUI_JPEG__DecodeLine_1
   2993              if (pContext->IsProgressive) {
   \   00000024   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   0400000A           BEQ      ??GUI_JPEG__DecodeLine_2
   2994                if (_LoadNextRow(pContext)) {
   \   00000034   ........           BL       _LoadNextRow
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0F00000A           BEQ      ??GUI_JPEG__DecodeLine_3
   2995                  return 1;
   \                     ??GUI_JPEG__DecodeLine_4:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   630000EA           B        ??GUI_JPEG__DecodeLine_5
   2996                }
   2997              } else {
   2998                if (_DecodeNextRow(pContext)) {
   \                     ??GUI_JPEG__DecodeLine_2:
   \   00000048   ........           BL       _DecodeNextRow
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   FAFFFF1A           BNE      ??GUI_JPEG__DecodeLine_4
   2999                  return 1;
   3000                }
   3001                if (pContext->TotalLinesLeft <= pContext->MaxMCU_ySize) {
   \   00000054   180094E5           LDR      R0,[R4, #+24]
   \   00000058   7C1094E5           LDR      R1,[R4, #+124]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   060000BA           BLT      ??GUI_JPEG__DecodeLine_3
   3002                  U8 Marker;
   3003                  if (_ReadMarkers(pContext, &Marker)) {
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       _ReadMarkers
   \   00000070   000050E3           CMP      R0,#+0
   3004                    return 1;
   3005                  }
   3006                  if (Marker != M_EOI) {
   \   00000074   0000DD05           LDRBEQ   R0,[SP, #+0]
   \   00000078   D9005003           CMPEQ    R0,#+217
   \   0000007C   EFFFFF1A           BNE      ??GUI_JPEG__DecodeLine_4
   3007                    return 1;
   3008                  }
   3009                }
   3010              }
   3011              pContext->TransformationRequired = 1;
   \                     ??GUI_JPEG__DecodeLine_3:
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   0500C6E7           STRB     R0,[R6, +R5]
   3012              pContext->MCULinesLeft = pContext->MaxMCU_ySize;
   \   00000088   180094E5           LDR      R0,[R4, #+24]
   \   0000008C   800084E5           STR      R0,[R4, #+128]
   \   00000090   020000EA           B        ??GUI_JPEG__DecodeLine_6
   3013            }
   3014            if (pContext->TransformationRequired) {
   \                     ??GUI_JPEG__DecodeLine_1:
   \   00000094   0500D6E7           LDRB     R0,[R6, +R5]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0300000A           BEQ      ??GUI_JPEG__DecodeLine_7
   3015              _TransformRow(pContext);
   \                     ??GUI_JPEG__DecodeLine_6:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       _TransformRow
   3016              pContext->TransformationRequired = 0;
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   0500C6E7           STRB     R0,[R6, +R5]
   3017            }
   3018            /* Do the color convertion */
   3019            switch (pContext->ScanType) {
   \                     ??GUI_JPEG__DecodeLine_7:
   \   000000B0   0200D4E5           LDRB     R0,[R4, #+2]
   \   000000B4   040050E3           CMP      R0,#+4
   \   000000B8   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GUI_JPEG__DecodeLine_0:
   \   000000BC   3E00008A           BHI      ??GUI_JPEG__DecodeLine_8
   \   000000C0   170000EA           B        ??GUI_JPEG__DecodeLine_9
   \   000000C4   130000EA           B        ??GUI_JPEG__DecodeLine_10
   \   000000C8   090000EA           B        ??GUI_JPEG__DecodeLine_11
   \   000000CC   0B0000EA           B        ??GUI_JPEG__DecodeLine_12
   \   000000D0   FFFFFFEA           B        ??GUI_JPEG__DecodeLine_13
   3020            case YH2V2:
   3021              if ((pContext->MCULinesLeft & 1) == 0) {
   \                     ??GUI_JPEG__DecodeLine_13:
   \   000000D4   8000D4E5           LDRB     R0,[R4, #+128]
   \   000000D8   010010E3           TST      R0,#0x1
   \   000000DC   0200001A           BNE      ??GUI_JPEG__DecodeLine_14
   3022                _ConvertH2V2(pContext);
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           BL       _ConvertH2V2
   3023                pContext->BufferIndex = 0;
   \   000000E8   310000EA           B        ??GUI_JPEG__DecodeLine_15
   3024              } else {
   3025                pContext->BufferIndex = 1;
   \                     ??GUI_JPEG__DecodeLine_14:
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   300000EA           B        ??GUI_JPEG__DecodeLine_16
   3026              }
   3027              break;
   3028            case YH2V1:
   3029              _ConvertH2V1(pContext);
   \                     ??GUI_JPEG__DecodeLine_11:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           BL       _ConvertH2V1
   3030              pContext->BufferIndex = 0;
   \   000000FC   2C0000EA           B        ??GUI_JPEG__DecodeLine_15
   3031              break;
   3032            case YH1V2:
   3033              if ((pContext->MCULinesLeft & 1) == 0) {
   \                     ??GUI_JPEG__DecodeLine_12:
   \   00000100   8000D4E5           LDRB     R0,[R4, #+128]
   \   00000104   010010E3           TST      R0,#0x1
   \   00000108   F7FFFF1A           BNE      ??GUI_JPEG__DecodeLine_14
   3034                _ConvertH1V2(pContext);
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       _ConvertH1V2
   3035                pContext->BufferIndex = 0;
   \   00000114   260000EA           B        ??GUI_JPEG__DecodeLine_15
   3036              } else {
   3037                pContext->BufferIndex = 1;
   3038              }
   3039              break;
   3040            case YH1V1:
   3041              _ConvertH1V1(pContext);
   \                     ??GUI_JPEG__DecodeLine_10:
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   ........           BL       _ConvertH1V1
   3042              pContext->BufferIndex = 0;
   \   00000120   230000EA           B        ??GUI_JPEG__DecodeLine_15
   3043              break;
   3044            case GRAYSCALE:
   3045              _ConvertGray(pContext);
   \                     ??GUI_JPEG__DecodeLine_9:
   \   00000124   180094E5           LDR      R0,[R4, #+24]
   \   00000128   801094E5           LDR      R1,[R4, #+128]
   \   0000012C   015040E0           SUB      R5,R0,R1
   \   00000130   840094E5           LDR      R0,[R4, #+132]
   \   00000134   ........           BL       GUI_ALLOC_LockH
   \   00000138   0060A0E1           MOV      R6,R0
   \   0000013C   780094E5           LDR      R0,[R4, #+120]
   \   00000140   047094E5           LDR      R7,[R4, #+4]
   \   00000144   855180E0           ADD      R5,R0,R5, LSL #+3
   \   00000148   010057E3           CMP      R7,#+1
   \   0000014C   170000BA           BLT      ??GUI_JPEG__DecodeLine_17
   \   00000150   010017E3           TST      R7,#0x1
   \   00000154   0500000A           BEQ      ??GUI_JPEG__DecodeLine_18
   \   00000158   0820A0E3           MOV      R2,#+8
   \   0000015C   0510A0E1           MOV      R1,R5
   \   00000160   0600A0E1           MOV      R0,R6
   \   00000164   ........           BL       __aeabi_memcpy
   \   00000168   405085E2           ADD      R5,R5,#+64
   \   0000016C   086086E2           ADD      R6,R6,#+8
   \                     ??GUI_JPEG__DecodeLine_18:
   \   00000170   A770B0E1           LSRS     R7,R7,#+1
   \   00000174   0D00000A           BEQ      ??GUI_JPEG__DecodeLine_17
   \                     ??GUI_JPEG__DecodeLine_19:
   \   00000178   0820A0E3           MOV      R2,#+8
   \   0000017C   0510A0E1           MOV      R1,R5
   \   00000180   0600A0E1           MOV      R0,R6
   \   00000184   ........           BL       __aeabi_memcpy
   \   00000188   405085E2           ADD      R5,R5,#+64
   \   0000018C   086086E2           ADD      R6,R6,#+8
   \   00000190   0820A0E3           MOV      R2,#+8
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   0600A0E1           MOV      R0,R6
   \   0000019C   ........           BL       __aeabi_memcpy
   \   000001A0   405085E2           ADD      R5,R5,#+64
   \   000001A4   086086E2           ADD      R6,R6,#+8
   \   000001A8   017057E2           SUBS     R7,R7,#+1
   \   000001AC   F1FFFF1A           BNE      ??GUI_JPEG__DecodeLine_19
   \                     ??GUI_JPEG__DecodeLine_17:
   \   000001B0   ........           BL       GUI_ALLOC_UnlockH
   3046              pContext->BufferIndex = 0;
   \                     ??GUI_JPEG__DecodeLine_15:
   \   000001B4   0000A0E3           MOV      R0,#+0
   \                     ??GUI_JPEG__DecodeLine_16:
   \   000001B8   8C00C4E5           STRB     R0,[R4, #+140]
   3047              break;
   3048            }
   3049            pContext->MCULinesLeft--;
   \                     ??GUI_JPEG__DecodeLine_8:
   \   000001BC   800094E5           LDR      R0,[R4, #+128]
   \   000001C0   010040E2           SUB      R0,R0,#+1
   \   000001C4   800084E5           STR      R0,[R4, #+128]
   3050            pContext->TotalLinesLeft--;
   \   000001C8   7C0094E5           LDR      R0,[R4, #+124]
   \   000001CC   010040E2           SUB      R0,R0,#+1
   \   000001D0   7C0084E5           STR      R0,[R4, #+124]
   3051            return 0;
   \   000001D4   0000A0E3           MOV      R0,#+0
   \                     ??GUI_JPEG__DecodeLine_5:
   \   000001D8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000001DC   F080BDE8           POP      {R4-R7,PC}       ;; return
   3052          }
   3053          
   3054          /*********************************************************************
   3055          *
   3056          *       GUI_JPEG__GetColorRGB
   3057          *
   3058          * Purpose:
   3059          *   Reads one RGB pixel from the given pointer and increments the pointer
   3060          */

   \                                 In section .text, align 4, keep-with-next
   3061          GUI_COLOR GUI_JPEG__GetColorRGB(const U8 ** ppData, unsigned SkipCnt) {
   \                     GUI_JPEG__GetColorRGB:
   \   00000000   00402DE9           PUSH     {LR}
   3062            U32 r, g, b;
   3063            const U8 * pData;
   3064            pData = *ppData;
   \   00000004   002090E5           LDR      R2,[R0, #+0]
   3065            r = *(pData + 0);
   \   00000008   0030D2E5           LDRB     R3,[R2, #+0]
   3066            g = *(pData + 1);
   \   0000000C   01C0D2E5           LDRB     R12,[R2, #+1]
   3067            b = *(pData + 2);
   \   00000010   02E0D2E5           LDRB     LR,[R2, #+2]
   3068            (*ppData) += SkipCnt << 2;
   \   00000014   011182E0           ADD      R1,R2,R1, LSL #+2
   \   00000018   001080E5           STR      R1,[R0, #+0]
   3069            return r | (g << 8) | (b << 16);
   \   0000001C   0C0483E1           ORR      R0,R3,R12, LSL #+8
   \   00000020   0E0880E1           ORR      R0,R0,LR, LSL #+16
   \   00000024   0080BDE8           POP      {PC}             ;; return
   3070          }
   3071          
   3072          /*********************************************************************
   3073          *
   3074          *       GUI_JPEG__GetColorGray
   3075          *
   3076          * Purpose:
   3077          *   Reads one gray pixel from the given pointer and increments the pointer
   3078          */

   \                                 In section .text, align 4, keep-with-next
   3079          GUI_COLOR GUI_JPEG__GetColorGray(const U8 ** ppData, unsigned SkipCnt) {
   3080            U32 u;
   3081            const U8 * pData;
   3082            pData = *ppData;
   3083            u = *pData;
   \                     GUI_JPEG__GetColorGray:
   \   00000000   002090E5           LDR      R2,[R0, #+0]
   \   00000004   0030D2E5           LDRB     R3,[R2, #+0]
   3084            (*ppData) += SkipCnt;
   \   00000008   021081E0           ADD      R1,R1,R2
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   3085            return u * 0x10101;
   \   00000010   ........           LDR      R1,??DataTable13_10  ;; 0x10101
   \   00000014   910300E0           MUL      R0,R1,R3
   \   00000018   1EFF2FE1           BX       LR               ;; return
   3086          }
   3087          
   3088          /*********************************************************************
   3089          *
   3090          *       GUI_JPEG__InitDraw
   3091          */

   \                                 In section .text, align 4, keep-with-next
   3092          int GUI_JPEG__InitDraw(GUI_HMEM hContext) {
   \                     GUI_JPEG__InitDraw:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   3093            GUI_JPEG_DCONTEXT * pContext;
   3094            int r;
   3095            
   3096            r = GUI_JPEG__ReadUntilSOF(hContext); /* Get basic file information */
   \   00000008   ........           BL       GUI_JPEG__ReadUntilSOF
   \   0000000C   0050B0E1           MOVS     R5,R0
   3097            if (r == 0) {
   \   00000010   1B00001A           BNE      ??GUI_JPEG__InitDraw_0
   3098              r = _InitFrame(hContext); /* Allocate memory and initialize variables */
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       _InitFrame
   \   0000001C   0050B0E1           MOVS     R5,R0
   3099              if (r == 0) {
   \   00000020   1700001A           BNE      ??GUI_JPEG__InitDraw_0
   3100                pContext = JPEG_LOCK_H(hContext);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   0060A0E1           MOV      R6,R0
   3101                if (pContext->IsProgressive) {
   \   00000030   1100A0E3           MOV      R0,#+17
   \   00000034   740C80E3           ORR      R0,R0,#0x7400
   \   00000038   0600D0E7           LDRB     R0,[R0, +R6]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   0B00000A           BEQ      ??GUI_JPEG__InitDraw_1
   3102                  r = _CalcBanding(pContext); /* Do 'per scan' initialization */
   \   00000048   ........           BL       _CalcBanding
   \   0000004C   0050B0E1           MOVS     R5,R0
   3103                  if (r == 0) {
   \   00000050   0A00001A           BNE      ??GUI_JPEG__InitDraw_2
   3104                    if (pContext->BandingRequired == 0) {
   \   00000054   A000A0E3           MOV      R0,#+160
   \   00000058   840C80E3           ORR      R0,R0,#0x8400
   \   0000005C   0600D0E7           LDRB     R0,[R0, +R6]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0500001A           BNE      ??GUI_JPEG__InitDraw_2
   3105                      GUI_UNLOCK_H(pContext);
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
   3106                      return _DecodeProgressive(hContext);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   7040BDE8           POP      {R4-R6,LR}
   \   00000074   ........           B        _DecodeProgressive  ;; tailcall
   3107                    }
   3108                  }
   3109                } else {
   3110                  r = _InitScan(pContext);
   \                     ??GUI_JPEG__InitDraw_1:
   \   00000078   ........           BL       _InitScan
   \   0000007C   0050A0E1           MOV      R5,R0
   3111                }
   3112                GUI_UNLOCK_H(pContext);
   \                     ??GUI_JPEG__InitDraw_2:
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
   3113              }
   3114            }
   3115            return r;
   \                     ??GUI_JPEG__InitDraw_0:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   7080BDE8           POP      {R4-R6,PC}       ;; return
   3116          }
   3117          
   3118          /*********************************************************************
   3119          *
   3120          *       GUI_JPEG__SetNextBand
   3121          *
   3122          * Purpose:
   3123          *   Initializes decoding of the next band
   3124          */

   \                                 In section .text, align 4, keep-with-next
   3125          void GUI_JPEG__SetNextBand(GUI_JPEG_DCONTEXT * pContext) {
   \                     GUI_JPEG__SetNextBand:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   3126            int i;
   3127            /* Increment blocks */
   3128            pContext->FirstBlockOfBand += pContext->NumBlocksPerBand;
   \   00000004   AC60A0E3           MOV      R6,#+172
   \   00000008   846C86E3           ORR      R6,R6,#0x8400
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0410C6E3           BIC      R1,R6,#0x4
   \   00000014   040096E7           LDR      R0,[R6, +R4]
   \   00000018   041091E7           LDR      R1,[R1, +R4]
   3129            for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \   0000001C   1DB0A0E3           MOV      R11,#+29
   \   00000020   000081E0           ADD      R0,R1,R0
   \   00000024   73BC8BE3           ORR      R11,R11,#0x7300
   \   00000028   040086E7           STR      R0,[R6, +R4]
   \   0000002C   0150CBE3           BIC      R5,R11,#0x1
   \   00000030   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000034   04D04DE2           SUB      SP,SP,#+4
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   0480A0E1           MOV      R8,R4
   \   00000040   0490A0E1           MOV      R9,R4
   \   00000044   04A086E2           ADD      R10,R6,#+4
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0E0000BA           BLT      ??GUI_JPEG__SetNextBand_0
   3130              if (pContext->aCompHSamp[0] == 2) {
   \                     ??GUI_JPEG__SetNextBand_1:
   \   00000050   0410DBE7           LDRB     R1,[R11, +R4]
   \   00000054   040096E7           LDR      R0,[R6, +R4]
   \   00000058   020051E3           CMP      R1,#+2
   \   0000005C   0300001A           BNE      ??GUI_JPEG__SetNextBand_2
   3131                pContext->aFirstBlockOfBand[i] = (pContext->FirstBlockOfBand / (2 - pContext->aCompVSamp[i] + 1));
   \   00000060   051085E2           ADD      R1,R5,#+5
   \   00000064   0810D1E7           LDRB     R1,[R1, +R8]
   \   00000068   031061E2           RSB      R1,R1,#+3
   \   0000006C   ........           BL       __aeabi_idiv
   3132              } else {
   3133                pContext->aFirstBlockOfBand[i] = pContext->FirstBlockOfBand;
   \                     ??GUI_JPEG__SetNextBand_2:
   \   00000070   09008AE7           STR      R0,[R10, +R9]
   3134              }
   3135            }
   \   00000074   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000078   017087E2           ADD      R7,R7,#+1
   \   0000007C   049089E2           ADD      R9,R9,#+4
   \   00000080   018088E2           ADD      R8,R8,#+1
   \   00000084   000057E1           CMP      R7,R0
   \   00000088   F0FFFFBA           BLT      ??GUI_JPEG__SetNextBand_1
   3136            /* Clear coefficient buffer */
   3137            for (i = 0; i < pContext->NumCompsPerFrame; i++) {
   \                     ??GUI_JPEG__SetNextBand_0:
   \   0000008C   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000090   0060A0E3           MOV      R6,#+0
   \   00000094   0470A0E1           MOV      R7,R4
   \   00000098   9C8085E2           ADD      R8,R5,#+156
   \   0000009C   5C9085E2           ADD      R9,R5,#+92
   \   000000A0   010050E3           CMP      R0,#+1
   \   000000A4   1A0000BA           BLT      ??GUI_JPEG__SetNextBand_3
   3138              COEFF_BUFFER * pBuffer;
   3139              U8 * pData;
   3140              pBuffer = &pContext->aDC_Coeffs[i];
   \                     ??GUI_JPEG__SetNextBand_4:
   \   000000A8   07A089E0           ADD      R10,R9,R7
   3141              pData = (U8 *)GUI_LOCK_H(pBuffer->hData);
   \   000000AC   0C009AE5           LDR      R0,[R10, #+12]
   \   000000B0   ........           BL       GUI_ALLOC_LockH
   3142              GUI_MEMSET(pData, 0, pBuffer->BlockSize * pBuffer->NumBlocksX * pBuffer->NumBlocksY);
   \   000000B4   08109AE5           LDR      R1,[R10, #+8]
   \   000000B8   00209AE5           LDR      R2,[R10, #+0]
   \   000000BC   04309AE5           LDR      R3,[R10, #+4]
   \   000000C0   920101E0           MUL      R1,R2,R1
   \   000000C4   930102E0           MUL      R2,R3,R1
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   ........           BL       GUI__memset
   3143              GUI_UNLOCK_H(pData);
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   3144              pBuffer = &pContext->aAC_Coeffs[i];
   \   000000D4   07A088E0           ADD      R10,R8,R7
   3145              pData = (U8 *)GUI_LOCK_H(pBuffer->hData);
   \   000000D8   0C009AE5           LDR      R0,[R10, #+12]
   \   000000DC   ........           BL       GUI_ALLOC_LockH
   3146              GUI_MEMSET(pData, 0, pBuffer->BlockSize * pBuffer->NumBlocksX * pBuffer->NumBlocksY);
   \   000000E0   08109AE5           LDR      R1,[R10, #+8]
   \   000000E4   00209AE5           LDR      R2,[R10, #+0]
   \   000000E8   04309AE5           LDR      R3,[R10, #+4]
   \   000000EC   920101E0           MUL      R1,R2,R1
   \   000000F0   930102E0           MUL      R2,R3,R1
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   ........           BL       GUI__memset
   3147              GUI_UNLOCK_H(pData);
   \   000000FC   ........           BL       GUI_ALLOC_UnlockH
   3148            }
   \   00000100   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000104   016086E2           ADD      R6,R6,#+1
   \   00000108   107087E2           ADD      R7,R7,#+16
   \   0000010C   000056E1           CMP      R6,R0
   \   00000110   E4FFFFBA           BLT      ??GUI_JPEG__SetNextBand_4
   3149            GUI_MEMSET((U8 *)pContext->aBlockY_MCU, 0, sizeof(pContext->aBlockY_MCU));
   \                     ??GUI_JPEG__SetNextBand_3:
   \   00000114   DC0085E2           ADD      R0,R5,#+220
   \   00000118   1020A0E3           MOV      R2,#+16
   \   0000011C   0010A0E3           MOV      R1,#+0
   \   00000120   040080E0           ADD      R0,R0,R4
   \   00000124   ........           BL       GUI__memset
   3150            pContext->TotalLinesLeft = pContext->ySize;
   \   00000128   BE10D4E1           LDRH     R1,[R4, #+14]
   \   0000012C   5C0F85E2           ADD      R0,R5,#+368
   3151            pContext->MCULinesLeft   = 0;
   3152          }
   \   00000130   04D08DE2           ADD      SP,SP,#+4
   \   00000134   041080E7           STR      R1,[R0, +R4]
   \   00000138   040080E2           ADD      R0,R0,#+4
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   041080E7           STR      R1,[R0, +R4]
   \   00000144   F08FBDE8           POP      {R4-R11,PC}      ;; return
   3153          
   3154          /*********************************************************************
   3155          *
   3156          *       GUI_JPEG__AllocBandingCoeffBuffer
   3157          *
   3158          * Purpose:
   3159          *   Allocates the coefficient buffer for banding scan
   3160          */

   \                                 In section .text, align 4, keep-with-next
   3161          int GUI_JPEG__AllocBandingCoeffBuffer(GUI_HMEM hContext) {
   \                     GUI_JPEG__AllocBandingCoeffBuffer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   3162            GUI_JPEG_DCONTEXT * pContext;
   3163            int i, NumCompsPerFrame;
   3164            pContext = JPEG_LOCK_H(hContext);
   3165            NumCompsPerFrame = pContext->NumCompsPerFrame;
   \   00000004   1C50A0E3           MOV      R5,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   735C85E3           ORR      R5,R5,#0x7300
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050D5E7           LDRB     R5,[R5, +R0]
   3166            GUI_UNLOCK_H(pContext);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
   3167            /* Allocate coefficient buffer */
   3168            for (i = 0; i < NumCompsPerFrame; i++) {
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   010055E3           CMP      R5,#+1
   \   00000024   340000BA           BLT      ??GUI_JPEG__AllocBandingCoeffBuffer_0
   \   00000028   010015E3           TST      R5,#0x1
   \   0000002C   0E00000A           BEQ      ??GUI_JPEG__AllocBandingCoeffBuffer_1
   3169              if (_CoeffBufferAllocBanding(hContext, DC_COEFFS, i, 1)) {
   \   00000030   0130A0E3           MOV      R3,#+1
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       _CoeffBufferAllocBanding
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1000001A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_2
   3170                return 1;
   3171              }
   3172              if (_CoeffBufferAllocBanding(hContext, AC_COEFFS, i, 8)) {
   \   0000004C   0830A0E3           MOV      R3,#+8
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0210A0E3           MOV      R1,#+2
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       _CoeffBufferAllocBanding
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0900001A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_2
   \   00000068   0160A0E3           MOV      R6,#+1
   \                     ??GUI_JPEG__AllocBandingCoeffBuffer_1:
   \   0000006C   A550B0E1           LSRS     R5,R5,#+1
   \   00000070   2100000A           BEQ      ??GUI_JPEG__AllocBandingCoeffBuffer_0
   \                     ??GUI_JPEG__AllocBandingCoeffBuffer_3:
   \   00000074   0130A0E3           MOV      R3,#+1
   \   00000078   0620A0E1           MOV      R2,R6
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _CoeffBufferAllocBanding
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0100000A           BEQ      ??GUI_JPEG__AllocBandingCoeffBuffer_4
   \                     ??GUI_JPEG__AllocBandingCoeffBuffer_2:
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   7080BDE8           POP      {R4-R6,PC}
   \                     ??GUI_JPEG__AllocBandingCoeffBuffer_4:
   \   00000098   0830A0E3           MOV      R3,#+8
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   0210A0E3           MOV      R1,#+2
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       _CoeffBufferAllocBanding
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   F6FFFF1A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_2
   \   000000B4   016086E2           ADD      R6,R6,#+1
   \   000000B8   0130A0E3           MOV      R3,#+1
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       _CoeffBufferAllocBanding
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   EEFFFF1A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_2
   \   000000D4   0830A0E3           MOV      R3,#+8
   \   000000D8   0620A0E1           MOV      R2,R6
   \   000000DC   0210A0E3           MOV      R1,#+2
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       _CoeffBufferAllocBanding
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   E7FFFF1A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_2
   3173                return 1;
   3174              }
   3175            }
   \   000000F0   016086E2           ADD      R6,R6,#+1
   \   000000F4   015055E2           SUBS     R5,R5,#+1
   \   000000F8   DDFFFF1A           BNE      ??GUI_JPEG__AllocBandingCoeffBuffer_3
   3176            return 0;
   \                     ??GUI_JPEG__AllocBandingCoeffBuffer_0:
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   7080BDE8           POP      {R4-R6,PC}       ;; return
   3177          }
   3178          
   3179          /*********************************************************************
   3180          *
   3181          *       GUI_JPEG__GetInfoEx
   3182          */

   \                                 In section .text, align 4, keep-with-next
   3183          int GUI_JPEG__GetInfoEx(GUI_HMEM hContext, GUI_JPEG_INFO * pInfo) {
   \                     GUI_JPEG__GetInfoEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   3184            GUI_JPEG_DCONTEXT * pContext;
   3185            int r;
   3186          
   3187            r = GUI_JPEG__ReadUntilSOF(hContext);
   \   0000000C   ........           BL       GUI_JPEG__ReadUntilSOF
   \   00000010   0060A0E1           MOV      R6,R0
   3188            if (pInfo) {
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   0600000A           BEQ      ??GUI_JPEG__GetInfoEx_0
   3189              pContext = JPEG_LOCK_H(hContext);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   3190              pInfo->XSize = pContext->xSize;
   \   00000024   BC10D0E1           LDRH     R1,[R0, #+12]
   \   00000028   001085E5           STR      R1,[R5, #+0]
   3191              pInfo->YSize = pContext->ySize;
   \   0000002C   BE00D0E1           LDRH     R0,[R0, #+14]
   \   00000030   040085E5           STR      R0,[R5, #+4]
   3192              GUI_UNLOCK_H(pContext);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
   3193            }
   3194            return r;
   \                     ??GUI_JPEG__GetInfoEx_0:
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
   3195          }
   3196          
   3197          /*********************************************************************
   3198          *
   3199          *       Public code
   3200          *
   3201          **********************************************************************
   3202          */
   3203          /*********************************************************************
   3204          *
   3205          *       GUI_JPEG_GetInfoEx
   3206          */

   \                                 In section .text, align 4, keep-with-next
   3207          int GUI_JPEG_GetInfoEx(GUI_GET_DATA_FUNC * pfGetData, void * p, GUI_JPEG_INFO * pInfo) {
   \                     GUI_JPEG_GetInfoEx:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   3208            int r;
   3209            GUI_HMEM            hContext;
   3210            GUI_JPEG_DCONTEXT * pContext;
   3211          
   3212            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
   3213            hContext = GUI_ALLOC_AllocZero((GUI_ALLOC_DATATYPE)sizeof(GUI_JPEG_DCONTEXT));
   \   00000014   C000A0E3           MOV      R0,#+192
   \   00000018   840C80E3           ORR      R0,R0,#0x8400
   \   0000001C   ........           BL       GUI_ALLOC_AllocZero
   \   00000020   0080B0E1           MOVS     R8,R0
   3214            if (hContext) {
   \   00000024   1100000A           BEQ      ??GUI_JPEG_GetInfoEx_0
   3215              pContext = JPEG_LOCK_H(hContext);
   \   00000028   ........           BL       GUI_ALLOC_LockH
   3216              pContext->pParam    = p;
   \   0000002C   045080E5           STR      R5,[R0, #+4]
   3217              pContext->pfGetData = pfGetData;
   \   00000030   004080E5           STR      R4,[R0, #+0]
   3218              GUI_UNLOCK_H(pContext);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
   3219              r = GUI_JPEG__GetInfoEx(hContext, pInfo);
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           BL       GUI_JPEG__ReadUntilSOF
   \   00000040   0070A0E1           MOV      R7,R0
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   0600000A           BEQ      ??GUI_JPEG_GetInfoEx_1
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   BC10D0E1           LDRH     R1,[R0, #+12]
   \   00000058   001086E5           STR      R1,[R6, #+0]
   \   0000005C   BE00D0E1           LDRH     R0,[R0, #+14]
   \   00000060   040086E5           STR      R0,[R6, #+4]
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
   3220              GUI_ALLOC_Free(hContext);
   \                     ??GUI_JPEG_GetInfoEx_1:
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_ALLOC_Free
   3221            }
   3222            GUI_UNLOCK();
   \                     ??GUI_JPEG_GetInfoEx_0:
   \   00000070   ........           BL       GUI_Unlock
   3223            return r;
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   F081BDE8           POP      {R4-R8,PC}       ;; return
   3224          }
   3225          
   3226          /*********************************************************************
   3227          *
   3228          *       GUI_JPEG_GetInfo
   3229          */

   \                                 In section .text, align 4, keep-with-next
   3230          int GUI_JPEG_GetInfo(const void * pFileData, int DataSize, GUI_JPEG_INFO * pInfo) {
   \                     GUI_JPEG_GetInfo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0240A0E1           MOV      R4,R2
   3231            int r;
   3232            GUI_JPEG_PARAM Param;
   3233            Param.FileSize  = DataSize;
   \   0000000C   04108DE5           STR      R1,[SP, #+4]
   3234            Param.pFileData = (const U8 *)pFileData;
   \   00000010   00008DE5           STR      R0,[SP, #+0]
   3235            r = GUI_JPEG_GetInfoEx(GUI_JPEG__GetData, &Param, pInfo);
   \   00000014   ........           BL       GUI_Lock
   \   00000018   C000A0E3           MOV      R0,#+192
   \   0000001C   840C80E3           ORR      R0,R0,#0x8400
   \   00000020   ........           BL       GUI_ALLOC_AllocZero
   \   00000024   0050B0E1           MOVS     R5,R0
   \   00000028   1200000A           BEQ      ??GUI_JPEG_GetInfo_0
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   ........           LDR      R1,??DataTable13_11
   \   00000034   04D080E5           STR      SP,[R0, #+4]
   \   00000038   001080E5           STR      R1,[R0, #+0]
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       GUI_JPEG__ReadUntilSOF
   \   00000048   0060A0E1           MOV      R6,R0
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   0600000A           BEQ      ??GUI_JPEG_GetInfo_1
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   BC10D0E1           LDRH     R1,[R0, #+12]
   \   00000060   001084E5           STR      R1,[R4, #+0]
   \   00000064   BE00D0E1           LDRH     R0,[R0, #+14]
   \   00000068   040084E5           STR      R0,[R4, #+4]
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \                     ??GUI_JPEG_GetInfo_1:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG_GetInfo_0:
   \   00000078   ........           BL       GUI_Unlock
   3236            return r;
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   08D08DE2           ADD      SP,SP,#+8
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   3237          }
   3238          
   3239          /*********************************************************************
   3240          *
   3241          *       GUI_JPEG_DrawEx
   3242          */

   \                                 In section .text, align 4, keep-with-next
   3243          int GUI_JPEG_DrawEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0) {
   \                     GUI_JPEG_DrawEx:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   3244            int r = 1;
   \   00000018   0180A0E3           MOV      R8,#+1
   3245            GUI_HMEM            hContext;
   3246          
   3247            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
   3248            hContext = GUI_ALLOC_AllocZero((GUI_ALLOC_DATATYPE)sizeof(GUI_JPEG_DCONTEXT));
   \   00000020   C000A0E3           MOV      R0,#+192
   \   00000024   840C80E3           ORR      R0,R0,#0x8400
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   0090B0E1           MOVS     R9,R0
   3249            if (hContext) {
   \   00000030   0700000A           BEQ      ??GUI_JPEG_DrawEx_0
   3250              r = _Draw(hContext, pfGetData, p, x0, y0);
   \   00000034   00708DE5           STR      R7,[SP, #+0]
   \   00000038   0630A0E1           MOV      R3,R6
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   ........           BL       _Draw
   \   00000048   0080A0E1           MOV      R8,R0
   3251              GUI_ALLOC_Free(hContext);
   \   0000004C   0900A0E1           MOV      R0,R9
   \   00000050   ........           BL       GUI_ALLOC_Free
   3252            }
   3253            GUI_UNLOCK();
   \                     ??GUI_JPEG_DrawEx_0:
   \   00000054   ........           BL       GUI_Unlock
   3254            return r;
   \   00000058   0800A0E1           MOV      R0,R8
   \   0000005C   04D08DE2           ADD      SP,SP,#+4
   \   00000060   F083BDE8           POP      {R4-R9,PC}       ;; return
   3255          }
   3256          
   3257          /*********************************************************************
   3258          *
   3259          *       GUI_JPEG_Draw
   3260          */

   \                                 In section .text, align 4, keep-with-next
   3261          int GUI_JPEG_Draw(const void * pFileData, int DataSize, int x0, int y0) {
   \                     GUI_JPEG_Draw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
   3262            int r;
   3263            GUI_JPEG_PARAM Param;
   3264            Param.FileSize  = DataSize;
   \   00000010   08108DE5           STR      R1,[SP, #+8]
   3265            Param.pFileData = (const U8 *)pFileData;
   \   00000014   04008DE5           STR      R0,[SP, #+4]
   3266            r = GUI_JPEG_DrawEx(GUI_JPEG__GetData, &Param, x0, y0);
   \   00000018   0160A0E3           MOV      R6,#+1
   \   0000001C   ........           BL       GUI_Lock
   \   00000020   C000A0E3           MOV      R0,#+192
   \   00000024   840C80E3           ORR      R0,R0,#0x8400
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   0070B0E1           MOVS     R7,R0
   \   00000030   0700000A           BEQ      ??GUI_JPEG_Draw_0
   \   00000034   00508DE5           STR      R5,[SP, #+0]
   \   00000038   0430A0E1           MOV      R3,R4
   \   0000003C   04208DE2           ADD      R2,SP,#+4
   \   00000040   ........           LDR      R1,??DataTable13_11
   \   00000044   ........           BL       _Draw
   \   00000048   0060A0E1           MOV      R6,R0
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           BL       GUI_ALLOC_Free
   \                     ??GUI_JPEG_Draw_0:
   \   00000054   ........           BL       GUI_Unlock
   3267            return r;
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12
   \   00000060   F080BDE8           POP      {R4-R7,PC}       ;; return
   3268          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     _GetU8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     _GetStuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     _DecodeBlockDC_First

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     _DecodeBlockDC_Refine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   ........           DC32     _DecodeBlockAC_Refine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     _DecodeBlockAC_First

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   000B4DFF           DC32     0xff4d0b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   00AF1DFF           DC32     0xff1daf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   A2C50100           DC32     0x1c5a2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   EA660100           DC32     0x166ea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   ........           DC32     GUI_JPEG__GetColorGray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   ........           DC32     GUI_JPEG__GetColorRGB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   ........           DC32     _WritePixelsOptRGB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   ........           DC32     _WritePixels

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   ........           DC32     _GetU8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   ........           DC32     _DecodeBlockDC_RefineBanding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   ........           DC32     _DecodeBlockDC_FirstBanding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   ........           DC32     _DecodeBlockAC_RefineBanding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   ........           DC32     _DecodeBlockAC_FirstBanding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   01010100           DC32     0x10101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   ........           DC32     GUI_JPEG__GetData
   3269          
   3270          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GUI_JPEG_Draw                      32
     GUI_JPEG_DrawEx                    32
     GUI_JPEG_GetInfo                   24
     GUI_JPEG_GetInfoEx                 24
     GUI_JPEG__AllocBandingCoeffBuffer
                                        16
     GUI_JPEG__DecodeLine               24
     GUI_JPEG__DecodeProgressiveBanding
                                        16
     GUI_JPEG__Free                     24
     GUI_JPEG__GetColorGray              0
     GUI_JPEG__GetColorRGB               4
     GUI_JPEG__GetData                   4
     GUI_JPEG__GetInfoEx                16
     GUI_JPEG__InitDraw                 16
     GUI_JPEG__ReadUntilSOF             24
     GUI_JPEG__SetNextBand              40
     GUI_JPEG__SkipLine                 24
     _CalcBanding                       32
     _CalcMCUBlockOrder                 72
     _CheckHuffmanTables                32
     _CoeffBufferAlloc                  24
     _CoeffBufferAllocBanding           32
     _ConvertH1V1                       40
     _ConvertH1V2                       56
     _ConvertH2V1                       48
     _ConvertH2V2                       56
     _CreateHuffmanTable              1320
     _DecodeBlockAC_First               48
     _DecodeBlockAC_FirstBanding        40
     _DecodeBlockAC_Refine              56
     _DecodeBlockAC_RefineBanding        0
     _DecodeBlockDC_First               40
     _DecodeBlockDC_FirstBanding        32
     _DecodeBlockDC_Refine              32
     _DecodeBlockDC_RefineBanding       32
     _DecodeNextRow                     64
     _DecodeProgressive                 40
     _DecodeScanProg                    80
     _Draw                              64
     _DrawBanding                       48
     _GetBitsNoMarker                   24
     _GetDHT                            32
     _GetDQT                            40
     _GetSOF                            40
     _GetSOS                            48
     _GetStuff                           0
     _GetU8                             16
     _IDCT                              56
     _InitFrame                         48
     _InitScan                          16
     _LoadNextRow                       96
     _ProcessRestart                    24
     _ReadMarkers                       24
     _SkipVariable                      24
     _TransformRow                     160
     _WritePixels                       32
     _WritePixelsOptRGB                 64


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _aLimit                         768
     _aCoeffOrder                     80
     _aExtendTest                     64
     _aExtendOffset                   64
     _GetU8                          160
     _GetStuff                        52
     _GetBitsNoMarker                464
     _SkipVariable                   216
     _GetDQT                         352
     _GetSOF                         472
     _GetDHT                         400
     _GetSOS                         640
     _ReadMarkers                   1240
     _CalcMCUBlockOrder              564
     _ProcessRestart                 328
     _CoeffBufferAlloc               268
     _CoeffBufferAllocBanding        272
     _DecodeBlockDC_First            464
     _DecodeBlockDC_Refine           260
     _DecodeBlockAC_First            624
     _DecodeBlockAC_Refine           892
     _DecodeBlockDC_FirstBanding     444
     _DecodeBlockDC_RefineBanding    256
     _DecodeBlockAC_FirstBanding     600
     _DecodeBlockAC_RefineBanding      8
     _DecodeScanProg                 592
     _CreateHuffmanTable             544
     _CheckHuffmanTables             328
     _InitScan                       280
     _CalcBanding                    280
     _DecodeProgressive              576
     _WritePixels                    220
     _WritePixelsOptRGB              184
     _InitFrame                      980
     _IDCT                          1236
     _TransformRow                   144
     _DecodeNextRow                 1096
     _LoadNextRow                   1196
     _ConvertH1V1                    228
     _ConvertH2V2                    500
     _ConvertH2V1                    344
     _ConvertH1V2                    380
     _DrawBanding                    512
     _Draw                           732
     GUI_JPEG__GetData                56
     GUI_JPEG__ReadUntilSOF          204
     GUI_JPEG__DecodeProgressiveBanding
                                     300
     GUI_JPEG__Free                  236
     GUI_JPEG__SkipLine              180
     GUI_JPEG__DecodeLine            480
     GUI_JPEG__GetColorRGB            40
     GUI_JPEG__GetColorGray           28
     GUI_JPEG__InitDraw              140
     GUI_JPEG__SetNextBand           328
     GUI_JPEG__AllocBandingCoeffBuffer
                                     260
     GUI_JPEG__GetInfoEx              64
     GUI_JPEG_GetInfoEx              124
     GUI_JPEG_GetInfo                136
     GUI_JPEG_DrawEx                 100
     GUI_JPEG_Draw                   100
     ??DataTable5                      4
     ??DataTable5_1                    4
     ??DataTable7                      4
     ??DataTable7_1                    4
     ??DataTable7_2                    4
     ??DataTable7_3                    4
     ??DataTable7_4                    4
     ??DataTable7_5                    4
     ??DataTable7_6                    4
     ??DataTable7_7                    4
     ??DataTable13                     4
     ??DataTable13_1                   4
     ??DataTable13_2                   4
     ??DataTable13_3                   4
     ??DataTable13_4                   4
     ??DataTable13_5                   4
     ??DataTable13_6                   4
     ??DataTable13_7                   4
     ??DataTable13_8                   4
     ??DataTable13_9                   4
     ??DataTable13_10                  4
     ??DataTable13_11                  4

 
 23 168 bytes in section .text
 
 23 168 bytes of CODE memory

Errors: none
Warnings: none
