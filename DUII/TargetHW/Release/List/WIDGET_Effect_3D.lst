###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:39 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WIDGET_Effect_3D.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WIDGET_Effect_3D.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WIDGET_Effect_3D.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WIDGET_Effect_3D.c
     19          Purpose     : Effect routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "WIDGET.h"
     27          #include "GUI_Debug.h"
     28          #include "GUI.h"
     29          #include "GUI_Private.h"
     30          #include "WM_Intern.h"
     31          
     32          #if GUI_WINSUPPORT
     33          
     34          /*********************************************************************
     35          *
     36          *       Static data
     37          *
     38          **********************************************************************
     39          */

   \                                 In section .data, align 4
     40          static GUI_COLOR _aColor[] = {
   \                     _aColor:
   \   00000000   000000005555       DC32 0, 5592405, 8421504, 12632256, 16777215
   \              550080808000
   \              C0C0C000FFFF
   \              FF00        
     41            0x000000, 0x555555, 0x808080, 0xc0c0c0, 0xffffff
     42          };
     43          
     44          /*********************************************************************
     45          *
     46          *       Static routines
     47          *
     48          **********************************************************************
     49          */
     50          /*********************************************************************
     51          *
     52          *       _DrawUpRect
     53          *
     54          *  Function description
     55          *    Draws an "Up" effect arround a given rectangle.
     56          *    This effect is used in different situations, but typically for an unpressed button
     57          *    which is supposed to "stick out".
     58          *
     59          * Add. info:
     60          *   This routine does not preserve the drawing colors for speed
     61          *   reasons. If this is required, it should be done in the calling
     62          *   routine.
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static void _DrawUpRect(const GUI_RECT* pRect) {
   \                     _DrawUpRect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     65            GUI_RECT r;
     66            r = *pRect;
     67            LCD_SetColor(_aColor[0]);
   \   00000004   ........           LDR      R8,??DataTable4
   \   00000008   F050D0E1           LDRSH    R5,[R0, #+0]
   \   0000000C   F260D0E1           LDRSH    R6,[R0, #+2]
   \   00000010   F470D0E1           LDRSH    R7,[R0, #+4]
   \   00000014   F640D0E1           LDRSH    R4,[R0, #+6]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   000098E5           LDR      R0,[R8, #+0]
   \   00000020   ........           BL       LCD_SetColor
     68            GUI_DrawRect(r.x0, r.y0, r.x1, r.y1);          /* Draw rectangle around it */
   \   00000024   0430A0E1           MOV      R3,R4
   \   00000028   0720A0E1           MOV      R2,R7
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       GUI_DrawRect
     69           /* Draw the bright sides */
     70            LCD_SetColor(_aColor[4]);
   \   00000038   100098E5           LDR      R0,[R8, #+16]
   \   0000003C   ........           BL       LCD_SetColor
     71            GUI_DrawHLine(r.y0 + 1, r.x0 + 1, r.x1 - 2);    /* Draw top line */
   \   00000040   016086E2           ADD      R6,R6,#+1
   \   00000044   015085E2           ADD      R5,R5,#+1
   \   00000048   022047E2           SUB      R2,R7,#+2
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       GUI_DrawHLine
     72            GUI_DrawVLine(r.x0 + 1, r.y0 + 1, r.y1 - 2);
   \   00000058   029044E2           SUB      R9,R4,#+2
   \   0000005C   0920A0E1           MOV      R2,R9
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       GUI_DrawVLine
     73            /* Draw the dark sides */
     74            LCD_SetColor(_aColor[1]);
   \   0000006C   040098E5           LDR      R0,[R8, #+4]
   \   00000070   ........           BL       LCD_SetColor
     75            GUI_DrawHLine(r.y1-1, r.x0 + 1, r.x1 - 1);
   \   00000074   017047E2           SUB      R7,R7,#+1
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   010044E2           SUB      R0,R4,#+1
   \   00000084   ........           BL       GUI_DrawHLine
     76            GUI_DrawVLine(r.x1-1, r.y0 + 1, r.y1 - 2);
   \   00000088   0920A0E1           MOV      R2,R9
   \   0000008C   0610A0E1           MOV      R1,R6
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   04D08DE2           ADD      SP,SP,#+4
   \   00000098   F043BDE8           POP      {R4-R9,LR}
   \   0000009C   ........           B        GUI_DrawVLine    ;; tailcall
     77          }
     78          
     79          /*********************************************************************
     80          *
     81          *       _DrawDownRect
     82          *
     83          * Function description
     84          *   Draws an "Down" effect arround a given rectangle.
     85          *   This effect is used in different situations, but typically for an edit widget
     86          *   which is supposed to "sunken".
     87          *
     88          * Add. info:
     89          *   This routine does not preserve the drawing colors for speed
     90          *   reasons. If this is required, it should be done in the calling
     91          *   routine.
     92          */

   \                                 In section .text, align 4, keep-with-next
     93          static void _DrawDownRect(const GUI_RECT* pRect) {
   \                     _DrawDownRect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     94            GUI_RECT r;
     95            r = *pRect;
   \   00000004   F040D0E1           LDRSH    R4,[R0, #+0]
   \   00000008   F250D0E1           LDRSH    R5,[R0, #+2]
   \   0000000C   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000010   F670D0E1           LDRSH    R7,[R0, #+6]
   \   00000014   ........           LDR      R0,??DataTable4
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
     96            LCD_SetColor(_aColor[0]);  /* TBD: Use halftone */
   \   00000020   ........           BL       LCD_SetColor
     97          /*  GUI_DrawRect(0, 0, r.x1, r.y1);*/
     98            /* Draw the upper left sides */
     99            LCD_SetColor(_aColor[2]);
   \   00000024   ........           LDR      R0,??DataTable4
   \   00000028   080090E5           LDR      R0,[R0, #+8]
   \   0000002C   ........           BL       LCD_SetColor
    100            GUI_DrawHLine(r.y0, r.x0, r.x1);
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_DrawHLine
    101            GUI_DrawVLine(r.x0, r.y0 + 1, r.y1);
   \   00000040   018085E2           ADD      R8,R5,#+1
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       GUI_DrawVLine
    102            LCD_SetColor(_aColor[0]);
   \   00000054   ........           LDR      R0,??DataTable4
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           BL       LCD_SetColor
    103            GUI_DrawHLine(r.y0 + 1, r.x0 + 1, r.x1 - 1);
   \   00000060   019084E2           ADD      R9,R4,#+1
   \   00000064   01A046E2           SUB      R10,R6,#+1
   \   00000068   0A20A0E1           MOV      R2,R10
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   0800A0E1           MOV      R0,R8
   \   00000074   ........           BL       GUI_DrawHLine
   \   00000078   01B047E2           SUB      R11,R7,#+1
   \   0000007C   0B20A0E1           MOV      R2,R11
   \   00000080   021085E2           ADD      R1,R5,#+2
   \   00000084   0900A0E1           MOV      R0,R9
    104            GUI_DrawVLine(r.x0 + 1, r.y0 + 2, r.y1 - 1);
   \   00000088   ........           BL       GUI_DrawVLine
    105            /* Draw the lower right sides */
    106            LCD_SetColor(_aColor[4]);
   \   0000008C   ........           LDR      R0,??DataTable4
   \   00000090   100090E5           LDR      R0,[R0, #+16]
   \   00000094   ........           BL       LCD_SetColor
    107            GUI_DrawHLine(r.y1, r.x0 + 1, r.x1);
   \   00000098   0620A0E1           MOV      R2,R6
   \   0000009C   0910A0E1           MOV      R1,R9
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   ........           BL       GUI_DrawHLine
    108            GUI_DrawVLine(r.x1, r.y0 + 1, r.y1);
   \   000000A8   0720A0E1           MOV      R2,R7
   \   000000AC   0810A0E1           MOV      R1,R8
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           BL       GUI_DrawVLine
    109            LCD_SetColor(_aColor[3]);
   \   000000B8   ........           LDR      R0,??DataTable4
   \   000000BC   0C0090E5           LDR      R0,[R0, #+12]
   \   000000C0   ........           BL       LCD_SetColor
    110            GUI_DrawHLine(r.y1 - 1, r. x0 + 2, r.x1-1);
   \   000000C4   0A20A0E1           MOV      R2,R10
   \   000000C8   021084E2           ADD      R1,R4,#+2
   \   000000CC   0B00A0E1           MOV      R0,R11
   \   000000D0   ........           BL       GUI_DrawHLine
    111            GUI_DrawVLine(r.x1 - 1, r. y0 + 2, r.y1-1);
   \   000000D4   0B20A0E1           MOV      R2,R11
   \   000000D8   021085E2           ADD      R1,R5,#+2
   \   000000DC   0A00A0E1           MOV      R0,R10
   \   000000E0   04D08DE2           ADD      SP,SP,#+4
   \   000000E4   F04FBDE8           POP      {R4-R11,LR}
   \   000000E8   ........           B        GUI_DrawVLine    ;; tailcall
    112          }
    113          
    114          /*********************************************************************
    115          *
    116          *       _DrawDown
    117          *
    118          * Function description
    119          *   Gets the rectangle of the current window and uses _DrawDownRect()
    120          *   for drawing the effect.
    121          */

   \                                 In section .text, align 4, keep-with-next
    122          static void _DrawDown(void) {
   \                     _DrawDown:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    123            GUI_RECT r;
    124            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
    125            _DrawDownRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawDownRect
    126          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    127          
    128          /*********************************************************************
    129          *
    130          *       Public routines
    131          *
    132          **********************************************************************
    133          */
    134          /*********************************************************************
    135          *
    136          *       WIDGET_EFFECT_3D_DrawUp
    137          *
    138          *  Function description
    139          *    Used by FRAMEWIN; does not need to be public otherwise.
    140          */

   \                                 In section .text, align 4, keep-with-next
    141          void WIDGET_EFFECT_3D_DrawUp(void) {
   \                     WIDGET_EFFECT_3D_DrawUp:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    142            GUI_RECT r;
    143            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
    144            _DrawUpRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawUpRect
    145          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    146          
    147          /*********************************************************************
    148          *
    149          *       WIDGET_EFFECT_3D_SetColor
    150          */

   \                                 In section .text, align 4, keep-with-next
    151          void WIDGET_EFFECT_3D_SetColor(unsigned Index, GUI_COLOR Color) {
    152            if (Index < GUI_COUNTOF(_aColor)) {
   \                     WIDGET_EFFECT_3D_SetColor:
   \   00000000   050050E3           CMP      R0,#+5
    153              _aColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable4
   \   00000008   00118237           STRCC    R1,[R2, +R0, LSL #+2]
    154            }
    155          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    156          
    157          /*********************************************************************
    158          *
    159          *       WIDGET_EFFECT_3D_GetColor
    160          */

   \                                 In section .text, align 4, keep-with-next
    161          GUI_COLOR WIDGET_EFFECT_3D_GetColor(unsigned Index) {
    162            GUI_COLOR r;
    163            r = 0;
   \                     WIDGET_EFFECT_3D_GetColor:
   \   00000000   0010A0E3           MOV      R1,#+0
    164            if (Index < GUI_COUNTOF(_aColor)) {
   \   00000004   050050E3           CMP      R0,#+5
    165              r = _aColor[Index];
   \   00000008   ........           LDRCC    R1,??DataTable4
   \   0000000C   00119137           LDRCC    R1,[R1, +R0, LSL #+2]
    166            }
    167            return r;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    168          }
    169          
    170          /*********************************************************************
    171          *
    172          *       WIDGET_EFFECT_3D_GetNumColors
    173          */

   \                                 In section .text, align 4, keep-with-next
    174          int WIDGET_EFFECT_3D_GetNumColors(void) {
    175            return GUI_COUNTOF(_aColor);
   \                     WIDGET_EFFECT_3D_GetNumColors:
   \   00000000   0500A0E3           MOV      R0,#+5
   \   00000004   1EFF2FE1           BX       LR               ;; return
    176          }
    177          
    178          /*********************************************************************
    179          *
    180          *       WIDGET_Effect_3D
    181          *
    182          * Purpose:
    183          *   Structure of type WIDGET_EFFECT which contains the function pointers
    184          *   used to draw the effect. It also contains the effect size
    185          *   which specifies the number of pixels used by the effect frame.
    186          */

   \                                 In section .rodata, align 4, keep-with-next
    187          const WIDGET_EFFECT WIDGET_Effect_3D = {
   \                     WIDGET_Effect_3D:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   02000000....       DC32 2, WIDGET_EFFECT_3D_DrawUp, _DrawUpRect, _DrawDown, _DrawDownRect
   \              ............
   \              ............
   \              ....        
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     _aColor
    188            2,
    189            WIDGET_EFFECT_3D_DrawUp,
    190            _DrawUpRect,
    191            _DrawDown,
    192            _DrawDownRect,
    193          };
    194          
    195          #else                            /* Avoid problems with empty object modules */
    196            void WIDGET_Effect_3D_C(void) {}
    197          #endif /* GUI_WINSUPPORT */
    198          
    199          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     WIDGET_EFFECT_3D_DrawUp           16
     WIDGET_EFFECT_3D_GetColor          0
     WIDGET_EFFECT_3D_GetNumColors      0
     WIDGET_EFFECT_3D_SetColor          0
     _DrawDown                         16
     _DrawDownRect                     40
     _DrawUpRect                       32


   Section sizes:

     Function/Label                Bytes
     --------------                -----
     _aColor                         20
     _DrawUpRect                    160
     _DrawDownRect                  236
     _DrawDown                       32
     WIDGET_EFFECT_3D_DrawUp         32
     WIDGET_EFFECT_3D_SetColor       16
     WIDGET_EFFECT_3D_GetColor       24
     WIDGET_EFFECT_3D_GetNumColors    8
     WIDGET_Effect_3D                28
     ??DataTable4                     4

 
  20 bytes in section .data
  28 bytes in section .rodata
 512 bytes in section .text
 
 512 bytes of CODE  memory
  28 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
