###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:41 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_GetInvalidRect.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\WM_GetInvalidRect.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_GetInvalidRect.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_GetInvalidRect.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_GetInvalidRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_GetInvalidRect.c
     19          Purpose     : Windows manager, submodule
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          
     34          /*********************************************************************
     35          *
     36          *       WM_GetInvalidRect
     37          *
     38          * Return value:
     39          *   0 if window is valid (there is no invalid rectangle)
     40          *   1 if there is an invalid rectangle
     41          *   
     42          */

   \                                 In section .text, align 4, keep-with-next
     43          int WM_GetInvalidRect(WM_HWIN hWin, GUI_RECT * pRect) {
   \                     WM_GetInvalidRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     44            int IsInvalid = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     45            if (hWin) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0C00000A           BEQ      ??WM_GetInvalidRect_0
     46              WM_Obj * pWin;
     47              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     48              pWin = WM_HANDLE2PTR(hWin);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   0010A0E1           MOV      R1,R0
     49              if (pWin->Status & WM_SF_INVALID) {
   \   00000028   2800D1E5           LDRB     R0,[R1, #+40]
   \   0000002C   200010E3           TST      R0,#0x20
   \   00000030   0400000A           BEQ      ??WM_GetInvalidRect_1
     50                IsInvalid = 1;
   \   00000034   0160A0E3           MOV      R6,#+1
     51                *pRect = pWin->InvalidRect;
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   081081E2           ADD      R1,R1,#+8
   \   00000040   0820A0E3           MOV      R2,#+8
   \   00000044   ........           BL       __aeabi_memcpy
     52              }
     53              WM_UNLOCK();
   \                     ??WM_GetInvalidRect_1:
   \   00000048   ........           BL       GUI_Unlock
     54            }
     55            return IsInvalid;
   \                     ??WM_GetInvalidRect_0:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
     56          }
     57          
     58          #else
     59            void WM_GetInvalidRect_C(void) {} /* avoid empty object files */
     60          #endif   /* GUI_WINSUPPORT */
     61          
     62          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     WM_GetInvalidRect     16


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     WM_GetInvalidRect   84

 
 84 bytes in section .text
 
 84 bytes of CODE memory

Errors: none
Warnings: none
