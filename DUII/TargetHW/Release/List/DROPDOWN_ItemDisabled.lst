###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:33 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\DROPDOWN_ItemDisabled.c             #
#    Command line =  C:\DUII\TargetHW\GUI\DROPDOWN_ItemDisabled.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\DROPDOWN_ItemDisabled.lst  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\DROPDOWN_ItemDisabled.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\DROPDOWN_ItemDisabled.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : DROPDOWN_ItemDisabled.c
     19          Purpose     : Implementation of dropdown widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "LISTBOX.h"
     26          #include "DROPDOWN_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *       Public routines
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       DROPDOWN_SetItemDisabled
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void DROPDOWN_SetItemDisabled(DROPDOWN_Handle hObj, unsigned Index, int OnOff) {
   \                     DROPDOWN_SetItemDisabled:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     41            DROPDOWN_Obj * pObj;
     42            GUI_ARRAY hDisabled;
     43            int RequiredSize;
     44            U16 NumItems;
     45            U16 * pNumItems;
     46            WM_HMEM hNew;
     47            U8 * pNew;
     48            U8 * pOld;
     49            U8 * pDisabled;
     50          
     51            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   4C00000A           BEQ      ??DROPDOWN_SetItemDisabled_0
     52              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     53              pObj = DROPDOWN_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
     54              hDisabled = pObj->hDisabled;
   \   00000024   947090E5           LDR      R7,[R0, #+148]
     55              NumItems = GUI_ARRAY_GetNumItems(pObj->Handles);
   \   00000028   3C0090E5           LDR      R0,[R0, #+60]
   \   0000002C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000030   0080A0E1           MOV      R8,R0
     56              GUI_UNLOCK_H(pObj);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     57              if (Index < NumItems) {
   \   00000038   0888A0E1           MOV      R8,R8, LSL #+16
   \   0000003C   280855E1           CMP      R5,R8, LSR #+16
   \   00000040   4000002A           BCS      ??DROPDOWN_SetItemDisabled_1
     58                RequiredSize = ((Index + 8) / 8) + sizeof(U16); /* One bit per entry + number of entries */
   \   00000044   080085E2           ADD      R0,R5,#+8
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   A09181E0           ADD      R9,R1,R0, LSR #+3
     59                if (hDisabled) {
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   2200000A           BEQ      ??DROPDOWN_SetItemDisabled_2
     60                  /* If handle already exists, check if size is sufficient */
     61                  pNumItems = (U16 *)GUI_LOCK_H(hDisabled);
     62                  NumItems = *pNumItems;
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI_ALLOC_LockH
   \   00000060   B080D0E1           LDRH     R8,[R0, #+0]
     63                  GUI_UNLOCK_H(pNumItems);
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
     64                  if ((unsigned)NumItems < (Index + 1)) {
   \   00000068   010085E2           ADD      R0,R5,#+1
   \   0000006C   000058E1           CMP      R8,R0
   \   00000070   2700002A           BCS      ??DROPDOWN_SetItemDisabled_3
     65                    /* Enlarge memory block */
     66                    hNew = GUI_ALLOC_AllocZero(RequiredSize);
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   ........           BL       GUI_ALLOC_AllocZero
   \   0000007C   0090B0E1           MOVS     R9,R0
     67                    if (hNew) {
   \   00000080   2300000A           BEQ      ??DROPDOWN_SetItemDisabled_3
     68                      pNew = (U8 *)GUI_LOCK_H(hNew);
   \   00000084   ........           BL       GUI_ALLOC_LockH
   \   00000088   00A0A0E1           MOV      R10,R0
     69                      pOld = (U8 *)GUI_LOCK_H(hDisabled);
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   0010A0E1           MOV      R1,R0
     70                      GUI_MEMCPY(pNew, pOld, ((NumItems + 7) / 8) + sizeof(U16));
   \   00000098   070088E2           ADD      R0,R8,#+7
   \   0000009C   4021A0E1           ASR      R2,R0,#+2
   \   000000A0   A20E80E0           ADD      R0,R0,R2, LSR #+29
   \   000000A4   0220A0E3           MOV      R2,#+2
   \   000000A8   C02182E0           ADD      R2,R2,R0, ASR #+3
   \   000000AC   0A00A0E1           MOV      R0,R10
   \   000000B0   ........           BL       __aeabi_memcpy
     71                      *(U16 *)pNew = Index + 1;        /* Save number of items */
   \   000000B4   010085E2           ADD      R0,R5,#+1
   \   000000B8   B000CAE1           STRH     R0,[R10, #+0]
     72                      GUI_ALLOC_Free(hDisabled); /* Free old memory */
   \   000000BC   0700A0E1           MOV      R0,R7
   \   000000C0   ........           BL       GUI_ALLOC_Free
     73                      pObj = DROPDOWN_LOCK_H(hObj);
     74                      pObj->hDisabled = hNew;          /* Use new handle */
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   949080E5           STR      R9,[R0, #+148]
     75                      GUI_UNLOCK_H(pNew);
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
     76                      GUI_UNLOCK_H(pOld);
   \   000000D4   ........           BL       GUI_ALLOC_UnlockH
     77                      GUI_UNLOCK_H(pObj);
   \   000000D8   ........           BL       GUI_ALLOC_UnlockH
     78                      hDisabled = hNew;
   \   000000DC   0970A0E1           MOV      R7,R9
   \   000000E0   0B0000EA           B        ??DROPDOWN_SetItemDisabled_3
     79                    }
     80                  }
     81                } else {
     82                  /* Create memory block */
     83                  hDisabled = GUI_ALLOC_AllocZero(RequiredSize);
   \                     ??DROPDOWN_SetItemDisabled_2:
   \   000000E4   0900A0E1           MOV      R0,R9
   \   000000E8   ........           BL       GUI_ALLOC_AllocZero
   \   000000EC   0070B0E1           MOVS     R7,R0
     84                  if (hDisabled) {
   \   000000F0   1400000A           BEQ      ??DROPDOWN_SetItemDisabled_1
     85                    pNumItems = (U16 *)GUI_LOCK_H(hDisabled);
     86                    *pNumItems = Index + 1;
   \   000000F4   ........           BL       GUI_ALLOC_LockH
   \   000000F8   011085E2           ADD      R1,R5,#+1
   \   000000FC   B010C0E1           STRH     R1,[R0, #+0]
     87                    GUI_UNLOCK_H(pNumItems);
   \   00000100   ........           BL       GUI_ALLOC_UnlockH
     88                    pObj = DROPDOWN_LOCK_H(hObj);
     89                    pObj->hDisabled = hDisabled;
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       GUI_ALLOC_LockH
   \   0000010C   947080E5           STR      R7,[R0, #+148]
     90                    GUI_UNLOCK_H(pObj);
   \   00000110   ........           BL       GUI_ALLOC_UnlockH
     91                  }
     92                }
     93                /* Save disabled state of item */
     94                if (hDisabled) {
     95                  pDisabled = (U8 *)GUI_LOCK_H(hDisabled) + sizeof(U16);
   \                     ??DROPDOWN_SetItemDisabled_3:
   \   00000114   0700A0E1           MOV      R0,R7
   \   00000118   ........           BL       GUI_ALLOC_LockH
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   072005E2           AND      R2,R5,#0x7
   \   00000124   1112A0E1           LSL      R1,R1,R2
   \   00000128   020080E2           ADD      R0,R0,#+2
   \   0000012C   A521A0E1           LSR      R2,R5,#+3
   \   00000130   0030D2E7           LDRB     R3,[R2, +R0]
   \   00000134   000056E3           CMP      R6,#+0
     96                  if (OnOff) {
     97                    *(pDisabled + (Index >> 3)) |=  (1 << (Index & 7));
   \   00000138   03108111           ORRNE    R1,R1,R3
     98                  } else {
     99                    *(pDisabled + (Index >> 3)) &= ~(1 << (Index & 7));
   \   0000013C   0110C301           BICEQ    R1,R3,R1
   \   00000140   0010C2E7           STRB     R1,[R2, +R0]
    100                  }
    101                  GUI_UNLOCK_H(pDisabled);
   \   00000144   ........           BL       GUI_ALLOC_UnlockH
    102                }
    103              }
    104              WM_UNLOCK();
   \                     ??DROPDOWN_SetItemDisabled_1:
   \   00000148   ........           BL       GUI_Unlock
    105            }
    106          }
   \                     ??DROPDOWN_SetItemDisabled_0:
   \   0000014C   F087BDE8           POP      {R4-R10,PC}      ;; return
    107          
    108          /*********************************************************************
    109          *
    110          *       DROPDOWN_GetItemDisabled
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          unsigned DROPDOWN_GetItemDisabled(DROPDOWN_Handle hObj, unsigned Index) {
   \                     DROPDOWN_GetItemDisabled:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
    113            unsigned r;
    114            DROPDOWN_Obj * pObj;
    115            GUI_ARRAY hDisabled;
    116            U16 NumItems;
    117            U16 * p;
    118            U8 * pDisabled;
    119            r = 0;
   \   00000010   0050A0E3           MOV      R5,#+0
    120            if (hObj) {
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   1D00000A           BEQ      ??DROPDOWN_GetItemDisabled_0
    121              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    122              pObj = DROPDOWN_LOCK_H(hObj);
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0060A0E1           MOV      R6,R0
    123              NumItems = GUI_ARRAY_GetNumItems(pObj->Handles);
   \   0000002C   3C0096E5           LDR      R0,[R6, #+60]
   \   00000030   ........           BL       GUI_ARRAY_GetNumItems
   \   00000034   0070A0E1           MOV      R7,R0
    124              hDisabled = pObj->hDisabled;
   \   00000038   946096E5           LDR      R6,[R6, #+148]
    125              GUI_UNLOCK_H(pObj);
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
    126              if ((Index < NumItems) && hDisabled) {
   \   00000040   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000044   270854E1           CMP      R4,R7, LSR #+16
   \   00000048   1000002A           BCS      ??DROPDOWN_GetItemDisabled_1
   \   0000004C   000056E3           CMP      R6,#+0
   \   00000050   0E00000A           BEQ      ??DROPDOWN_GetItemDisabled_1
    127                p = (U16 *)GUI_LOCK_H(hDisabled);
    128                NumItems = *p; /* Current number of items */
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   B070D0E1           LDRH     R7,[R0, #+0]
    129                GUI_UNLOCK_H(p);
   \   00000060   ........           BL       GUI_ALLOC_UnlockH
    130                if (Index < (unsigned)NumItems) {
   \   00000064   070054E1           CMP      R4,R7
   \   00000068   0800002A           BCS      ??DROPDOWN_GetItemDisabled_1
    131                  pDisabled = (U8 *)GUI_LOCK_H(hDisabled) + sizeof(U16);
    132                  r = *(pDisabled + (Index >> 3)) & (1 << (Index & 7)) ? 1 : 0;
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI_ALLOC_LockH
   \   00000074   A40180E0           ADD      R0,R0,R4, LSR #+3
   \   00000078   0200D0E5           LDRB     R0,[R0, #+2]
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   072004E2           AND      R2,R4,#0x7
   \   00000084   110210E1           TST      R0,R1, LSL R2
   \   00000088   0150A013           MOVNE    R5,#+1
    133                  GUI_UNLOCK_H(pDisabled);
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
    134                }
    135              }
    136              WM_UNLOCK();
   \                     ??DROPDOWN_GetItemDisabled_1:
   \   00000090   ........           BL       GUI_Unlock
    137            }
    138            return r;
   \                     ??DROPDOWN_GetItemDisabled_0:
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   04D08DE2           ADD      SP,SP,#+4
   \   0000009C   F080BDE8           POP      {R4-R7,PC}       ;; return
    139          }
    140          
    141          #else                            /* Avoid problems with empty object modules */
    142            void DROPDOWN_ItemDisabled_C(void);
    143            void DROPDOWN_ItemDisabled_C(void) {}
    144          #endif

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     DROPDOWN_GetItemDisabled     24
     DROPDOWN_SetItemDisabled     32


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     DROPDOWN_SetItemDisabled  336
     DROPDOWN_GetItemDisabled  160

 
 496 bytes in section .text
 
 496 bytes of CODE memory

Errors: none
Warnings: none
