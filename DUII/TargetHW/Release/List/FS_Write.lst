###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:37 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Write.c                           #
#    Command line =  C:\DUII\TargetHW\FS\FS_Write.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Write.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Write.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Write.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Write.c
     19          Purpose     : Implementation of FS_Write
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include <stdio.h>
     31          #include "FS_Int.h"
     32          #include "FS_OS.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       FS_Write
     44          *
     45          *  Function description:
     46          *    Internal version of FS_Write.
     47          *    Write data to a file.
     48          *
     49          *  Parameters:
     50          *    pFile       - Pointer to a FS_FILE data structure.
     51          *    pData       - Pointer to the data
     52          *    NumBytes    - Number of bytes to be written
     53          *  
     54          *  Return value:
     55          *    Number of bytes written.
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          U32 FS__Write(FS_FILE *pFile, const void *pData, U32 NumBytes) {
   \                     FS__Write:
   \   00000000   10402DE9           PUSH     {R4,LR}
     58            char          InUse;
     59            U32           NumBytesWritten;
     60            FS_FILE_OBJ * pFileObj;
     61            FS_DEVICE   * pDevice = NULL;
   \   00000004   0030A0E3           MOV      R3,#+0
     62          
     63            if (NumBytes == 0) {
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0100001A           BNE      ??FS__Write_0
     64              return 0;
   \                     ??FS__Write_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1080BDE8           POP      {R4,PC}
     65            }
     66            if (pFile == NULL) {
   \                     ??FS__Write_0:
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1200000A           BEQ      ??FS__Write_2
     67              return 0;  /* No pointer to a FS_FILE structure */
     68            }
     69            NumBytesWritten = 0;
     70            //
     71            // Load file information
     72            //
     73            FS_LOCK_SYS();
     74            InUse   = pFile->InUse;
     75            pFileObj = pFile->pFileObj;
   \   00000020   00E090E5           LDR      LR,[R0, #+0]
   \   00000024   0AC0D0E5           LDRB     R12,[R0, #+10]
     76            if (pFileObj) {
   \   00000028   00005EE3           CMP      LR,#+0
     77              if (pFileObj->pVolume) {
   \   0000002C   08409E15           LDRNE    R4,[LR, #+8]
   \   00000030   00005413           CMPNE    R4,#+0
     78                pDevice = &pFileObj->pVolume->Partition.Device;
   \   00000034   0430A011           MOVNE    R3,R4
     79              }
     80            }
     81            FS_UNLOCK_SYS();
     82            if ((InUse == 0) || (pFileObj == (FS_FILE_OBJ*)NULL)) {
   \   00000038   00005CE3           CMP      R12,#+0
   \   0000003C   00005E13           CMPNE    LR,#+0
     83              FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: FS__Write: Invalid file handle.\n"));
     84              return 0;
     85            }
     86            if (pDevice == NULL) {
   \   00000040   00005313           CMPNE    R3,#+0
   \   00000044   F1FFFF0A           BEQ      ??FS__Write_1
     87              FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: FS__Write: volume already unmounted.\n"));
     88              return 0;
     89            }
     90            //
     91            // Lock driver before performing operation
     92            //
     93            FS_LOCK_DRIVER(pDevice);
     94            //
     95            // Multi-tasking environments with per-driver-locking:
     96            // Make sure that relevant file information has not changed (an other task may have closed the file, unmounted the volume etc.)
     97            // If it has, no action is performed.
     98            //
     99          #if FS_OS_LOCK_PER_DRIVER
    100            FS_LOCK_SYS();
    101            if (pFileObj != pFile->pFileObj || (pFile->pFileObj == NULL)) {
    102              InUse = 0;
    103            }
    104            if (pFile->InUse == 0) {
    105              InUse = 0;
    106            }
    107            FS_UNLOCK_SYS();
    108            if (InUse == 0) {      // Let's make sure the file is still valid
    109              FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: File handle has been invalidated by other thread during wait"));
    110            } else
    111          #endif
    112            //
    113            // All checks and locking operations completed. Call the File system (FAT/EFS) layer.
    114            //
    115            {
    116              NumBytesWritten = 0;
    117              if ((pFile->AccessFlags & FS_FILE_ACCESS_FLAG_W) == 0) {
   \   00000048   0BC0D0E5           LDRB     R12,[R0, #+11]
   \   0000004C   0030A0E3           MOV      R3,#+0
   \   00000050   10001CE3           TST      R12,#0x10
    118                pFile->Error    = FS_ERR_READONLY;             /* Open mode does now allow write access */
   \   00000054   0510E003           MVNEQ    R1,#+5
   \   00000058   B810C001           STRHEQ   R1,[R0, #+8]
   \   0000005C   0100000A           BEQ      ??FS__Write_3
    119              } else {
    120          #if FS_SUPPORT_JOURNAL
    121                if (pFileObj->pVolume->Partition.Device.Data.JournalIsActive == 1) {
    122                  FS_VOLUME * pVolume;
    123                  pVolume = pFileObj->pVolume;
    124                  do {
    125                    U32 NumBytesWrittenAtOnce;
    126                    U32 NumBytesAtOnce;
    127                    I32 SpaceInJournal;
    128          
    129                    SpaceInJournal  = (FS__JOURNAL_GetNumFreeSectors(pVolume) - 2) * 15 / 16;   // Reserve 2 sectors and about 8% for management
    130                    if (SpaceInJournal <= 0) {
    131                      NumBytesWritten = FS_FWRITE(pFile, pData, NumBytes); /* Execute the FSL function */
    132                      FS_DEBUG_ERROROUT((FS_MTYPE_JOURNAL, "Insufficient space in journal!"));
    133                      break;
    134                    }
    135                    SpaceInJournal *= pVolume->FSInfo.Info.BytesPerSector;                     // Convert number of sectors into number of bytes
    136                    NumBytesAtOnce = MIN((U32)SpaceInJournal, NumBytes);
    137          
    138                    FS_JOURNAL_BEGIN (pFileObj->pVolume);
    139                    NumBytesWrittenAtOnce = FS_FWRITE(pFile, pData, NumBytesAtOnce); /* Execute the FSL function */
    140                    FS_JOURNAL_END   (pFileObj->pVolume);
    141                    NumBytesWritten += NumBytesWrittenAtOnce;
    142                    if (NumBytesWrittenAtOnce != NumBytesAtOnce) {
    143                      break;
    144                    }
    145                    NumBytes -= NumBytesAtOnce;
    146                    pData     = NumBytesAtOnce + (const U8*)pData;
    147                  } while (NumBytes);
    148                } else
    149          #endif
    150                {
    151                  NumBytesWritten = FS_FWRITE(pFile, pData, NumBytes); /* Execute the FSL function */
   \   00000060   ........           BL       FS_FAT_Write
   \   00000064   0030A0E1           MOV      R3,R0
    152                }
    153              }
    154            }
    155          
    156            FS_UNLOCK_DRIVER(pDevice);
    157            return NumBytesWritten;  
   \                     ??FS__Write_3:
   \   00000068   0300A0E1           MOV      R0,R3
   \                     ??FS__Write_2:
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    158          }
    159          
    160          /*********************************************************************
    161          *
    162          *       FS_Write
    163          *
    164          *  Function description:
    165          *    API function. Write data to a file.
    166          *
    167          *  Parameters:
    168          *    pFile       - Pointer to a FS_FILE data structure.
    169          *    pData       - Pointer to the data
    170          *    NumBytes    - Number of bytes to be written
    171          *  
    172          *  Return value:
    173          *    Number of bytes written.
    174          */

   \                                 In section .text, align 4, keep-with-next
    175          U32 FS_Write(FS_FILE *pFile, const void *pData, U32 NumBytes) {
   \                     FS_Write:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    176            U32 NumBytesWritten;
    177          
    178            FS_LOCK();
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
    179            NumBytesWritten = FS__Write(pFile, pData, NumBytes);
   \   0000001C   000056E3           CMP      R6,#+0
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00005413           CMPNE    R4,#+0
   \   00000028   1600000A           BEQ      ??FS_Write_0
   \   0000002C   002094E5           LDR      R2,[R4, #+0]
   \   00000030   0A10D4E5           LDRB     R1,[R4, #+10]
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   08309215           LDRNE    R3,[R2, #+8]
   \   0000003C   00005313           CMPNE    R3,#+0
   \   00000040   0300A011           MOVNE    R0,R3
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   00005213           CMPNE    R2,#+0
   \   0000004C   00005013           CMPNE    R0,#+0
   \   00000050   0C00000A           BEQ      ??FS_Write_0
   \   00000054   0B00D4E5           LDRB     R0,[R4, #+11]
   \   00000058   0070A0E3           MOV      R7,#+0
   \   0000005C   100010E3           TST      R0,#0x10
   \   00000060   0500000A           BEQ      ??FS_Write_1
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       FS_FAT_Write
   \   00000074   0070A0E1           MOV      R7,R0
   \   00000078   030000EA           B        ??FS_Write_2
   \                     ??FS_Write_1:
   \   0000007C   0500E0E3           MVN      R0,#+5
   \   00000080   B800C4E1           STRH     R0,[R4, #+8]
   \   00000084   000000EA           B        ??FS_Write_2
   \                     ??FS_Write_0:
   \   00000088   0070A0E3           MOV      R7,#+0
    180            FS_UNLOCK();
   \                     ??FS_Write_2:
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   ........           BL       FS_OS_Unlock
    181            return NumBytesWritten;  
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   04D08DE2           ADD      SP,SP,#+4
   \   0000009C   F080BDE8           POP      {R4-R7,PC}       ;; return
    182          }
    183          
    184          /*************************** End of file ****************************/
    185          

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     FS_Write      24
     FS__Write      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__Write       112
     FS_Write        160

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none
