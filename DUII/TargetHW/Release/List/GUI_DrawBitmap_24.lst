###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_24.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap_24.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawBitmap_24.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawBitmap_24.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawBitmap_24.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawBitmap_24.c
     19          Purpose     : Drawing routine for drawing true color bitmaps
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DrawBitmap
     36          *
     37          * Purpose:
     38          *   The function draws true color 24bpp bitmaps.
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          static void _DrawBitmap(int x0,int y0,int xSize, int ySize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap:
   \   00000000   F54F2DE9           PUSH     {R0,R2,R4-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable1
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0360A0E1           MOV      R6,R3
   \   00000014   38709DE5           LDR      R7,[SP, #+56]
   \   00000018   1100D0E5           LDRB     R0,[R0, #+17]
     41            U8 r, g, b;
     42            const U8 GUI_UNI_PTR * pSrc;
     43            U32 Color;
     44            LCD_PIXELINDEX Index;
     45            int BytesPerLine;
     46            tLCDDEV_Color2Index * pfColor2Index;
     47            LCD_API_NEXT_PIXEL * pNextPixel_API;
     48          
     49            GUI_USE_PARA(pLogPal);
     50            /* 
     51             * Get function pointer for color conversion 
     52             */
     53            pfColor2Index = LCD_GetpfColor2IndexEx(GUI_Context.SelLayer);
   \   0000001C   ........           BL       LCD_GetpfColor2IndexEx
   \   00000020   0050A0E1           MOV      R5,R0
     54            BytesPerLine = xSize * 3;
   \   00000024   10009DE5           LDR      R0,[SP, #+16]
     55            if ((xMag | yMag) == 1) {
   \   00000028   44109DE5           LDR      R1,[SP, #+68]
   \   0000002C   800080E0           ADD      R0,R0,R0, LSL #+1
   \   00000030   04008DE5           STR      R0,[SP, #+4]
   \   00000034   40009DE5           LDR      R0,[SP, #+64]
   \   00000038   000081E1           ORR      R0,R1,R0
   \   0000003C   010050E3           CMP      R0,#+1
   \   00000040   6D00001A           BNE      ??_DrawBitmap_0
     56              int x, x1, y1, Diff;
     57              y1 = y0 + ySize - 1;
   \   00000044   040086E0           ADD      R0,R6,R4
   \   00000048   019040E2           SUB      R9,R0,#+1
     58              x1 = x0 + xSize - 1;
   \   0000004C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000050   10109DE5           LDR      R1,[SP, #+16]
   \   00000054   000081E0           ADD      R0,R1,R0
   \   00000058   01A040E2           SUB      R10,R0,#+1
   \   0000005C   ........           LDR      R0,??DataTable1
   \   00000060   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000064   000054E1           CMP      R4,R0
   \   00000068   040000AA           BGE      ??_DrawBitmap_1
     59              /*
     60               * Clip Y
     61               */
     62              if (y0 < GUI_Context.ClipRect.y0) {
     63                Diff = GUI_Context.ClipRect.y0 - y0;
   \   0000006C   041040E0           SUB      R1,R0,R4
     64                y0   = GUI_Context.ClipRect.y0;
   \   00000070   0040A0E1           MOV      R4,R0
     65                #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     66                  pPixel += (U32)Diff * (U32)BytesPerLine;
   \   00000074   04009DE5           LDR      R0,[SP, #+4]
     67                #else
     68                  pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
     69                #endif
     70                ySize -= Diff;
   \   00000078   016046E0           SUB      R6,R6,R1
   \   0000007C   907127E0           MLA      R7,R0,R1,R7
     71              }
     72              Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??_DrawBitmap_1:
   \   00000080   ........           LDR      R0,??DataTable1
   \   00000084   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   00000088   000049E0           SUB      R0,R9,R0
     73              if (Diff > 0) {
   \   0000008C   010050E3           CMP      R0,#+1
     74                ySize -= Diff;
   \   00000090   006046A0           SUBGE    R6,R6,R0
     75              }
     76              if (ySize <=0) {
   \   00000094   010056E3           CMP      R6,#+1
   \   00000098   8E0000BA           BLT      ??_DrawBitmap_2
     77          		  return;
     78              }
     79              /* 
     80               * Clip right side 
     81               */
     82              Diff = x1 - GUI_Context.ClipRect.x1;
   \   0000009C   ........           LDR      R0,??DataTable1
   \   000000A0   FC00D0E1           LDRSH    R0,[R0, #+12]
   \   000000A4   00004AE0           SUB      R0,R10,R0
     83              if (Diff > 0) {
   \   000000A8   010050E3           CMP      R0,#+1
     84                xSize -= Diff;
   \   000000AC   10109DA5           LDRGE    R1,[SP, #+16]
   \   000000B0   000041A0           SUBGE    R0,R1,R0
   \   000000B4   10008DA5           STRGE    R0,[SP, #+16]
   \   000000B8   ........           LDR      R0,??DataTable1
   \   000000BC   0C109DE5           LDR      R1,[SP, #+12]
   \   000000C0   F800D0E1           LDRSH    R0,[R0, #+8]
   \   000000C4   000051E1           CMP      R1,R0
   \   000000C8   080000AA           BGE      ??_DrawBitmap_3
     85              }
     86              /*
     87               * Clip left side 
     88               */
     89              if (x0 < GUI_Context.ClipRect.x0) {
     90                Diff = GUI_Context.ClipRect.x0 - x0;
   \   000000CC   010040E0           SUB      R0,R0,R1
     91          			xSize -= Diff;
   \   000000D0   10109DE5           LDR      R1,[SP, #+16]
   \   000000D4   001041E0           SUB      R1,R1,R0
   \   000000D8   10108DE5           STR      R1,[SP, #+16]
     92                pPixel += Diff * 3; 
   \   000000DC   801080E0           ADD      R1,R0,R0, LSL #+1
   \   000000E0   077081E0           ADD      R7,R1,R7
     93                x0 += Diff; 
   \   000000E4   0C109DE5           LDR      R1,[SP, #+12]
   \   000000E8   010080E0           ADD      R0,R0,R1
   \   000000EC   0C008DE5           STR      R0,[SP, #+12]
     94              }
     95              if (xSize <=0) {
   \                     ??_DrawBitmap_3:
   \   000000F0   10009DE5           LDR      R0,[SP, #+16]
   \   000000F4   010050E3           CMP      R0,#+1
   \   000000F8   760000BA           BLT      ??_DrawBitmap_2
     96          		  return;
     97              }
     98              /*
     99               * Driver is not able to manage the complete bitmap
    100               */
    101              pNextPixel_API = LCD_GetNextPixelAPI();
   \   000000FC   ........           BL       LCD_GetNextPixelAPI
   \   00000100   0080A0E1           MOV      R8,R0
    102              /*
    103               * Rectangle filling with index values
    104               */
    105              pNextPixel_API->pfStart(x0, y0, x1, y1); /* Initialize drawing routine of the driver */
   \   00000104   0930A0E1           MOV      R3,R9
   \   00000108   0A20A0E1           MOV      R2,R10
   \   0000010C   0410A0E1           MOV      R1,R4
   \   00000110   0C009DE5           LDR      R0,[SP, #+12]
   \   00000114   00C098E5           LDR      R12,[R8, #+0]
   \   00000118   3CFF2FE1           BLX      R12
   \   0000011C   030000EA           B        ??_DrawBitmap_4
    106              while (ySize--) {
    107                pSrc = pPixel;
    108                for (x = 0; x < xSize; x++) {
    109                  /*
    110                   * Get RGB and calculate index value
    111                   */
    112                  r = *(pSrc + 0);
    113                  g = *(pSrc + 1);
    114                  b = *(pSrc + 2);
    115                  pSrc += 3;
    116                  Color = ((U32)b << 16) | ((U16)g << 8) | r;
    117                  Index = pfColor2Index(Color);
    118                  pNextPixel_API->pfSetPixel(Index); /* Send index value to the driver */
    119                }
    120                if (ySize) {
    121                  pNextPixel_API->pfNextLine(); /* Increment line */
   \                     ??_DrawBitmap_5:
   \   00000120   080098E5           LDR      R0,[R8, #+8]
   \   00000124   30FF2FE1           BLX      R0
    122                  pPixel += BytesPerLine;
   \   00000128   04009DE5           LDR      R0,[SP, #+4]
   \   0000012C   077080E0           ADD      R7,R0,R7
    123                }
   \                     ??_DrawBitmap_4:
   \   00000130   10009DE5           LDR      R0,[SP, #+16]
   \   00000134   0790A0E1           MOV      R9,R7
   \   00000138   014040E2           SUB      R4,R0,#+1
   \   0000013C   016046E2           SUB      R6,R6,#+1
   \   00000140   0030D9E5           LDRB     R3,[R9, #+0]
   \   00000144   0110D9E5           LDRB     R1,[R9, #+1]
   \   00000148   010014E3           TST      R4,#0x1
   \   0000014C   0800000A           BEQ      ??_DrawBitmap_6
   \   00000150   0200D9E5           LDRB     R0,[R9, #+2]
   \   00000154   0114A0E1           LSL      R1,R1,#+8
   \   00000158   000881E1           ORR      R0,R1,R0, LSL #+16
   \   0000015C   000083E1           ORR      R0,R3,R0
   \   00000160   35FF2FE1           BLX      R5
   \   00000164   041098E5           LDR      R1,[R8, #+4]
   \   00000168   31FF2FE1           BLX      R1
   \   0000016C   0330F9E5           LDRB     R3,[R9, #+3]!
   \   00000170   0110D9E5           LDRB     R1,[R9, #+1]
   \                     ??_DrawBitmap_6:
   \   00000174   A440B0E1           LSRS     R4,R4,#+1
   \   00000178   1300000A           BEQ      ??_DrawBitmap_7
   \                     ??_DrawBitmap_8:
   \   0000017C   0200D9E5           LDRB     R0,[R9, #+2]
   \   00000180   0114A0E1           LSL      R1,R1,#+8
   \   00000184   000881E1           ORR      R0,R1,R0, LSL #+16
   \   00000188   000083E1           ORR      R0,R3,R0
   \   0000018C   35FF2FE1           BLX      R5
   \   00000190   041098E5           LDR      R1,[R8, #+4]
   \   00000194   31FF2FE1           BLX      R1
   \   00000198   0320F9E5           LDRB     R2,[R9, #+3]!
   \   0000019C   01C0D9E5           LDRB     R12,[R9, #+1]
   \   000001A0   0200D9E5           LDRB     R0,[R9, #+2]
   \   000001A4   0C14A0E1           LSL      R1,R12,#+8
   \   000001A8   000881E1           ORR      R0,R1,R0, LSL #+16
   \   000001AC   000082E1           ORR      R0,R2,R0
   \   000001B0   35FF2FE1           BLX      R5
   \   000001B4   041098E5           LDR      R1,[R8, #+4]
   \   000001B8   31FF2FE1           BLX      R1
   \   000001BC   0330F9E5           LDRB     R3,[R9, #+3]!
   \   000001C0   0110D9E5           LDRB     R1,[R9, #+1]
   \   000001C4   014054E2           SUBS     R4,R4,#+1
   \   000001C8   EBFFFF1A           BNE      ??_DrawBitmap_8
   \                     ??_DrawBitmap_7:
   \   000001CC   0200D9E5           LDRB     R0,[R9, #+2]
   \   000001D0   0114A0E1           LSL      R1,R1,#+8
   \   000001D4   000881E1           ORR      R0,R1,R0, LSL #+16
   \   000001D8   000083E1           ORR      R0,R3,R0
   \   000001DC   35FF2FE1           BLX      R5
   \   000001E0   041098E5           LDR      R1,[R8, #+4]
   \   000001E4   31FF2FE1           BLX      R1
   \   000001E8   000056E3           CMP      R6,#+0
   \   000001EC   CBFFFF1A           BNE      ??_DrawBitmap_5
    124              }
    125              pNextPixel_API->pfEnd(); /* Done */
   \   000001F0   0C0098E5           LDR      R0,[R8, #+12]
   \   000001F4   30FF2FE1           BLX      R0
   \   000001F8   360000EA           B        ??_DrawBitmap_2
    126            } else {
    127              /*
    128               * Magnified output
    129               */
    130              U32 PrevColor;
    131              int x, y, yi;
    132              PrevColor = GUI_INVALID_COLOR;
   \                     ??_DrawBitmap_0:
   \   000001FC   F014E0E3           MVN      R1,#-268435456
   \   00000200   08108DE5           STR      R1,[SP, #+8]
    133              for (y = y0, yi = 0; yi < ySize; yi++, y += yMag, pPixel += BytesPerLine) {
   \   00000204   010056E3           CMP      R6,#+1
   \   00000208   320000BA           BLT      ??_DrawBitmap_2
   \   0000020C   00608DE5           STR      R6,[SP, #+0]
    134                int yMax;
    135                yMax = y + yMag - 1;
   \                     ??_DrawBitmap_9:
   \   00000210   44009DE5           LDR      R0,[SP, #+68]
    136                pSrc = pPixel;
   \   00000214   0790A0E1           MOV      R9,R7
   \   00000218   000084E0           ADD      R0,R4,R0
   \   0000021C   016040E2           SUB      R6,R0,#+1
    137                /* Draw if within clip area */
    138                if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \   00000220   ........           LDR      R0,??DataTable1
   \   00000224   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000228   000056E1           CMP      R6,R0
   \   0000022C   200000BA           BLT      ??_DrawBitmap_10
   \   00000230   ........           LDR      R0,??DataTable1
   \   00000234   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   00000238   040050E1           CMP      R0,R4
   \   0000023C   1C0000BA           BLT      ??_DrawBitmap_10
    139                  int xi;
    140                  for (x = x0, xi = 0; xi < xSize; xi++, x += xMag) {
   \   00000240   10009DE5           LDR      R0,[SP, #+16]
   \   00000244   0C809DE5           LDR      R8,[SP, #+12]
   \   00000248   010050E3           CMP      R0,#+1
   \   0000024C   180000BA           BLT      ??_DrawBitmap_10
   \   00000250   00A0A0E1           MOV      R10,R0
    141                    /*
    142                     * Get RGB and calculate index value
    143                     */
    144                    r = *(pSrc + 0);
   \                     ??_DrawBitmap_11:
   \   00000254   0110D9E4           LDRB     R1,[R9], #+1
    145                    g = *(pSrc + 1);
   \   00000258   0120D9E4           LDRB     R2,[R9], #+1
    146                    b = *(pSrc + 2);
   \   0000025C   0100D9E4           LDRB     R0,[R9], #+1
    147                    pSrc += 3;
    148                    Color = ((U32)b << 16) | ((U16)g << 8) | r;
   \   00000260   0224A0E1           LSL      R2,R2,#+8
   \   00000264   000882E1           ORR      R0,R2,R0, LSL #+16
   \   00000268   00B081E1           ORR      R11,R1,R0
    149                    if (Color != PrevColor) {
   \   0000026C   08009DE5           LDR      R0,[SP, #+8]
   \   00000270   00005BE1           CMP      R11,R0
   \   00000274   0300000A           BEQ      ??_DrawBitmap_12
    150                      LCD_SetColorIndex(pfColor2Index(Color));
   \   00000278   0B00A0E1           MOV      R0,R11
   \   0000027C   35FF2FE1           BLX      R5
   \   00000280   ........           BL       LCD_SetColorIndex
    151                      PrevColor = Color;
   \   00000284   08B08DE5           STR      R11,[SP, #+8]
    152                    }
    153                    LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_12:
   \   00000288   40009DE5           LDR      R0,[SP, #+64]
   \   0000028C   0630A0E1           MOV      R3,R6
   \   00000290   000088E0           ADD      R0,R8,R0
   \   00000294   012040E2           SUB      R2,R0,#+1
   \   00000298   0410A0E1           MOV      R1,R4
   \   0000029C   0800A0E1           MOV      R0,R8
   \   000002A0   ........           BL       LCD_FillRect
    154                  }
   \   000002A4   40009DE5           LDR      R0,[SP, #+64]
   \   000002A8   01A05AE2           SUBS     R10,R10,#+1
   \   000002AC   088080E0           ADD      R8,R0,R8
   \   000002B0   E7FFFF1A           BNE      ??_DrawBitmap_11
    155                }
    156              }
   \                     ??_DrawBitmap_10:
   \   000002B4   44009DE5           LDR      R0,[SP, #+68]
   \   000002B8   044080E0           ADD      R4,R0,R4
   \   000002BC   04009DE5           LDR      R0,[SP, #+4]
   \   000002C0   077080E0           ADD      R7,R0,R7
   \   000002C4   00009DE5           LDR      R0,[SP, #+0]
   \   000002C8   010040E2           SUB      R0,R0,#+1
   \   000002CC   00008DE5           STR      R0,[SP, #+0]
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   CDFFFF1A           BNE      ??_DrawBitmap_9
   \                     ??_DrawBitmap_2:
   \   000002D8   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000002DC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    157            }
    158          }
    159          

   \                                 In section .rodata, align 4, keep-with-next
    160          const GUI_BITMAP_METHODS GUI_BitmapMethods24 = {
   \                     GUI_BitmapMethods24:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _DrawBitmap, LCD_Index2Color_888
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    161            _DrawBitmap,
    162            LCD_Index2Color_888
    163          };
    164          
    165          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function    .cstack
     --------    -------
     _DrawBitmap     56


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _DrawBitmap          736
     GUI_BitmapMethods24   12
     ??DataTable1           4

 
  12 bytes in section .rodata
 740 bytes in section .text
 
 740 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
