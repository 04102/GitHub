###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\SCROLLBAR.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\SCROLLBAR.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\SCROLLBAR.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\SCROLLBAR.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\SCROLLBAR.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : SCROLLBAR.c
     19          Purpose     : Implementation of scrollbar widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "GUI_Private.h"
     26          #include "SCROLLBAR_Private.h"
     27          #include "WIDGET.h"
     28          #include "WM_Intern.h"
     29          
     30          #if GUI_WINSUPPORT
     31          
     32          /*********************************************************************
     33          *
     34          *       Defaults
     35          *
     36          **********************************************************************
     37          */
     38          #ifndef   SCROLLBAR_DRAW_SKIN_DEFAULT
     39            #define SCROLLBAR_DRAW_SKIN_DEFAULT NULL
     40          #endif
     41          
     42          /*********************************************************************
     43          *
     44          *       Module internal data
     45          *
     46          **********************************************************************
     47          */

   \                                 In section .data, align 4
     48          SCROLLBAR_PROPS SCROLLBAR__DefaultProps = {
   \                     SCROLLBAR__DefaultProps:
   \   00000000   C0C0C0008080       DC32 12632256, 8421504, 0, 0H
   \              800000000000
   \              00000000    
     49            {
     50              SCROLLBAR_COLOR_THUMB_DEFAULT,
     51              SCROLLBAR_COLOR_SHAFT_DEFAULT,
     52              SCROLLBAR_COLOR_ARROW_DEFAULT,
     53            },
     54            {
     55              SCROLLBAR_DRAW_SKIN_DEFAULT,
     56            }
     57          };
     58          
     59          I16 SCROLLBAR__DefaultWidth = SCROLLBAR_DEFAULT_WIDTH;
   \                     SCROLLBAR__DefaultWidth:
   \   00000010   0B00               DC16 11
   \   00000012   0000               DC8 0, 0
     60          
     61          WIDGET_SKIN const * SCROLLBAR__pSkinDefault = &SCROLLBAR__SkinClassic;
   \                     SCROLLBAR__pSkinDefault:
   \   00000014   ........           DC32 SCROLLBAR__SkinClassic
     62          
     63          /*********************************************************************
     64          *
     65          *       Static routines
     66          *
     67          **********************************************************************
     68          */
     69          /*********************************************************************
     70          *
     71          *       _ScrollbarPressed
     72          */
     73          static void _ScrollbarPressed(SCROLLBAR_Handle hObj) {
     74            SCROLLBAR_OBJ * pObj;
     75            U16 Status;
     76          
     77            pObj = SCROLLBAR_LOCK_H(hObj);
     78            Status = pObj->Widget.Win.Status;
     79            GUI_UNLOCK_H(pObj);
     80            WIDGET_OrState(hObj, SCROLLBAR_STATE_PRESSED);
     81            if (Status & WM_SF_ISVIS) {
     82              WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
     83            }
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       _DeleteTimer
     89          */
     90          static void _DeleteTimer(SCROLLBAR_Handle hObj) {
     91            #ifdef GUI_X_CREATE_TIMER
     92              GUI_USE_PARA(hObj);
     93            #else
     94              SCROLLBAR_OBJ * pObj;
     95              pObj = SCROLLBAR_LOCK_H(hObj);
     96              WM_DeleteTimer(pObj->hTimer);
     97              pObj->hTimer = 0;
     98              pObj->TimerStep = 0;
     99              GUI_UNLOCK_H(pObj);
    100            #endif
    101          }
    102          
    103          /*********************************************************************
    104          *
    105          *       _ScrollbarReleased
    106          */
    107          static void _ScrollbarReleased(SCROLLBAR_Handle hObj) {
    108            SCROLLBAR_OBJ * pObj;
    109            U16 Status;
    110          
    111            WIDGET_AndState(hObj, SCROLLBAR_STATE_PRESSED);
    112            pObj = SCROLLBAR_LOCK_H(hObj);
    113            if (pObj->TimerStep) {
    114              _DeleteTimer(hObj);
    115            }
    116            Status = pObj->Widget.Win.Status;
    117            pObj->State = PRESSED_STATE_NONE;
    118            GUI_UNLOCK_H(pObj);
    119            if (Status & WM_SF_ISVIS) {
    120              WM_NotifyParent(hObj, WM_NOTIFICATION_RELEASED);
    121            }
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       _RestartTimer
    127          */
    128          static void _RestartTimer(SCROLLBAR_OBJ * pObj, int Period) {
    129            #ifdef GUI_X_CREATE_TIMER
    130              GUI_USE_PARA(pObj);
    131              GUI_USE_PARA(Period);
    132            #else
    133              WM_RestartTimer(pObj->hTimer, Period);
    134            #endif
    135          }
    136          
    137          /*********************************************************************
    138          *
    139          *       _CreateTimer
    140          */
    141          static void _CreateTimer(SCROLLBAR_Handle hObj, int Dir, int Period) {
    142            SCROLLBAR_OBJ * pObj;
    143            WM_HMEM hTimer;
    144          
    145            hTimer = WM_CreateTimer(hObj, SCROLLBAR_TIMER_ID, Period, 0);
    146            pObj = SCROLLBAR_LOCK_H(hObj);
    147            pObj->hTimer    = hTimer;
    148            pObj->TimerStep = Dir;
    149            GUI_UNLOCK_H(pObj);
    150          }
    151          
    152          /*********************************************************************
    153          *
    154          *       _OnTouch
    155          */

   \                                 In section .text, align 4, keep-with-next
    156          static void _OnTouch(SCROLLBAR_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnTouch:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    157            SCROLLBAR_OBJ * pObj;
    158            SCROLLBAR_POSITIONS Pos;
    159            GUI_PID_STATE * pState;
    160            int Sel, Range, x, TimerStep, TimerStepNew, temp;
    161            U16 State;
    162          
    163            if (pMsg->Data.p) {  // Something happened in our area (pressed or released)
   \   00000004   0C9091E5           LDR      R9,[R1, #+12]
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   000059E3           CMP      R9,#+0
   \   00000014   CD00000A           BEQ      ??_OnTouch_0
    164              pState = (GUI_PID_STATE *)pMsg->Data.p;
    165              if (pState->Pressed) {
   \   00000018   0800D9E5           LDRB     R0,[R9, #+8]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   A800000A           BEQ      ??_OnTouch_1
    166                pObj = SCROLLBAR_LOCK_H(hObj);
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   0070A0E1           MOV      R7,R0
    167                Sel = pObj->v;
   \   00000030   504097E5           LDR      R4,[R7, #+80]
    168                pObj->pfCalcPositions(hObj, &Pos);
   \   00000034   04108DE2           ADD      R1,SP,#+4
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   482097E5           LDR      R2,[R7, #+72]
   \   00000040   32FF2FE1           BLX      R2
    169                Range = pObj->NumItems - pObj->PageSize;
    170                //
    171                // Swap mouse coordinates if necessary
    172                //
    173                if (pObj->Widget.State & WIDGET_STATE_VERTICAL) {
   \   00000044   B263D7E1           LDRH     R6,[R7, #+50]
   \   00000048   4C0097E5           LDR      R0,[R7, #+76]
   \   0000004C   541097E5           LDR      R1,[R7, #+84]
   \   00000050   080016E3           TST      R6,#0x8
   \   00000054   018040E0           SUB      R8,R0,R1
   \   00000058   0300000A           BEQ      ??_OnTouch_2
    174                  temp = pState->x;
    175                  pState->x = pState->y;
   \   0000005C   041099E5           LDR      R1,[R9, #+4]
   \   00000060   000099E5           LDR      R0,[R9, #+0]
   \   00000064   001089E5           STR      R1,[R9, #+0]
    176                  pState->y = temp;
   \   00000068   040089E5           STR      R0,[R9, #+4]
    177                }
    178                x = pState->x;
    179                TimerStepNew = 0;
    180                State = pObj->Widget.State;
    181                if (pObj->State == PRESSED_STATE_THUMB) {
   \                     ??_OnTouch_2:
   \   0000006C   580097E5           LDR      R0,[R7, #+88]
   \   00000070   009099E5           LDR      R9,[R9, #+0]
   \   00000074   00B0A0E3           MOV      R11,#+0
   \   00000078   00A0A0E3           MOV      R10,#+0
   \   0000007C   030050E3           CMP      R0,#+3
   \   00000080   1300001A           BNE      ??_OnTouch_3
    182                  //
    183                  // No timer used for moving with thumb
    184                  //
    185                  _DeleteTimer(hObj);
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       GUI_ALLOC_LockH
   \   0000008C   0040A0E1           MOV      R4,R0
   \   00000090   640094E5           LDR      R0,[R4, #+100]
   \   00000094   ........           BL       WM_DeleteTimer
   \   00000098   64A084E5           STR      R10,[R4, #+100]
   \   0000009C   5CA084E5           STR      R10,[R4, #+92]
   \   000000A0   ........           BL       GUI_ALLOC_UnlockH
    186                  //
    187                  // Calculate new position
    188                  //
    189                  x = x - Pos.ThumbSize / 2 - Pos.x1_LeftArrow - 1;
    190                  Sel = pObj->TouchPos = (int)GUI__DivideRound32((I32)Range * x, Pos.xSizeMoveable);
   \   000000A4   24009DE5           LDR      R0,[SP, #+36]
   \   000000A8   08209DE5           LDR      R2,[SP, #+8]
   \   000000AC   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000B0   C00049E0           SUB      R0,R9,R0, ASR #+1
   \   000000B4   020040E0           SUB      R0,R0,R2
   \   000000B8   012040E2           SUB      R2,R0,#+1
   \   000000BC   920800E0           MUL      R0,R2,R8
   \   000000C0   20109DE5           LDR      R1,[SP, #+32]
   \   000000C4   ........           BL       GUI__DivideRound32
   \   000000C8   600087E5           STR      R0,[R7, #+96]
   \   000000CC   0040A0E1           MOV      R4,R0
    191                  GUI_UNLOCK_H(pObj);
   \   000000D0   500000EA           B        ??_OnTouch_4
    192                } else {
    193                  pObj->State = PRESSED_STATE_NONE;
   \                     ??_OnTouch_3:
   \   000000D4   58A087E5           STR      R10,[R7, #+88]
    194                  if (x <= Pos.x1_LeftArrow) {         // left arrow (line left)
   \   000000D8   08009DE5           LDR      R0,[SP, #+8]
   \   000000DC   090050E1           CMP      R0,R9
   \   000000E0   040000BA           BLT      ??_OnTouch_5
    195                    Sel--;
   \   000000E4   014044E2           SUB      R4,R4,#+1
    196                    TimerStepNew = -1;
   \   000000E8   0AB0E0E1           MVN      R11,R10
    197                    pObj->State = PRESSED_STATE_LEFT;
   \   000000EC   0200A0E3           MOV      R0,#+2
   \                     ??_OnTouch_6:
   \   000000F0   580087E5           STR      R0,[R7, #+88]
   \   000000F4   200000EA           B        ??_OnTouch_7
    198                  } else if (x < Pos.x0_Thumb) {       // left area  (page left)
   \                     ??_OnTouch_5:
   \   000000F8   0C109DE5           LDR      R1,[SP, #+12]
   \   000000FC   010059E1           CMP      R9,R1
   \   00000100   030000AA           BGE      ??_OnTouch_8
    199                    Sel -= pObj->PageSize;
   \   00000104   54B097E5           LDR      R11,[R7, #+84]
   \   00000108   0B4044E0           SUB      R4,R4,R11
    200                    TimerStepNew = -pObj->PageSize;
   \   0000010C   00B06BE2           RSB      R11,R11,#+0
   \   00000110   190000EA           B        ??_OnTouch_7
    201                  } else if (x <= Pos.x1_Thumb) {      // Thumb area
   \                     ??_OnTouch_8:
   \   00000114   10109DE5           LDR      R1,[SP, #+16]
   \   00000118   090051E1           CMP      R1,R9
   \   0000011C   0C0000BA           BLT      ??_OnTouch_9
    202                    if (Pos.xSizeMoveable > 0) {
   \   00000120   20109DE5           LDR      R1,[SP, #+32]
   \   00000124   010051E3           CMP      R1,#+1
   \   00000128   070000BA           BLT      ??_OnTouch_10
    203                      x = x - Pos.ThumbSize / 2 - Pos.x1_LeftArrow - 1;
   \   0000012C   24209DE5           LDR      R2,[SP, #+36]
   \   00000130   A22F82E0           ADD      R2,R2,R2, LSR #+31
   \   00000134   C22049E0           SUB      R2,R9,R2, ASR #+1
   \   00000138   000042E0           SUB      R0,R2,R0
   \   0000013C   019040E2           SUB      R9,R0,#+1
    204                      Sel = (int)GUI__DivideRound32((I32)Range * x, Pos.xSizeMoveable);
   \   00000140   990800E0           MUL      R0,R9,R8
   \   00000144   ........           BL       GUI__DivideRound32
   \   00000148   0040A0E1           MOV      R4,R0
    205                    }
    206                    pObj->State = PRESSED_STATE_THUMB;
   \                     ??_OnTouch_10:
   \   0000014C   0300A0E3           MOV      R0,#+3
   \   00000150   E6FFFFEA           B        ??_OnTouch_6
    207                  } else if (x < Pos.x0_RightArrow) {  // right area (page right)
   \                     ??_OnTouch_9:
   \   00000154   14009DE5           LDR      R0,[SP, #+20]
   \   00000158   000059E1           CMP      R9,R0
    208                    Sel += pObj->PageSize;
   \   0000015C   54B097B5           LDRLT    R11,[R7, #+84]
   \   00000160   04408BB0           ADDLT    R4,R11,R4
    209                    TimerStepNew = +pObj->PageSize;
   \   00000164   040000BA           BLT      ??_OnTouch_7
    210                  } else  if (x <= Pos.x1_RightArrow) { // right arrow (line right)
   \   00000168   18009DE5           LDR      R0,[SP, #+24]
   \   0000016C   090050E1           CMP      R0,R9
    211                    Sel++;
    212                    TimerStepNew = +1;
   \   00000170   01B0A0A3           MOVGE    R11,#+1
   \   00000174   014084A2           ADDGE    R4,R4,#+1
    213                    pObj->State = PRESSED_STATE_RIGHT;
   \   00000178   58B087A5           STRGE    R11,[R7, #+88]
    214                  }
    215                  TimerStep = pObj->TimerStep;
    216                  //
    217                  // Remember position
    218                  //
    219                  x = x - Pos.ThumbSize / 2 - Pos.x1_LeftArrow - 1;
    220                  pObj->TouchPos = (int)GUI__DivideRound32((I32)Range * x, Pos.xSizeMoveable);
   \                     ??_OnTouch_7:
   \   0000017C   24009DE5           LDR      R0,[SP, #+36]
   \   00000180   08209DE5           LDR      R2,[SP, #+8]
   \   00000184   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000188   C00049E0           SUB      R0,R9,R0, ASR #+1
   \   0000018C   5C1097E5           LDR      R1,[R7, #+92]
   \   00000190   020040E0           SUB      R0,R0,R2
   \   00000194   012040E2           SUB      R2,R0,#+1
   \   00000198   00108DE5           STR      R1,[SP, #+0]
   \   0000019C   920800E0           MUL      R0,R2,R8
   \   000001A0   20109DE5           LDR      R1,[SP, #+32]
   \   000001A4   ........           BL       GUI__DivideRound32
   \   000001A8   600087E5           STR      R0,[R7, #+96]
    221                  GUI_UNLOCK_H(pObj);
   \   000001AC   ........           BL       GUI_ALLOC_UnlockH
    222                  if (TimerStepNew) {
   \   000001B0   00005BE3           CMP      R11,#+0
   \   000001B4   00009DE5           LDR      R0,[SP, #+0]
   \   000001B8   0D00000A           BEQ      ??_OnTouch_11
    223                    if (!TimerStep) {
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   1500001A           BNE      ??_OnTouch_12
    224                      _CreateTimer(hObj, TimerStepNew, 400);
   \   000001C4   D210A0E3           MOV      R1,#+210
   \   000001C8   0030A0E3           MOV      R3,#+0
   \   000001CC   642FA0E3           MOV      R2,#+400
   \   000001D0   401E81E3           ORR      R1,R1,#0x400
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   ........           BL       WM_CreateTimer
   \   000001DC   0070A0E1           MOV      R7,R0
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   ........           BL       GUI_ALLOC_LockH
   \   000001E8   647080E5           STR      R7,[R0, #+100]
   \   000001EC   5CB080E5           STR      R11,[R0, #+92]
   \   000001F0   080000EA           B        ??_OnTouch_4
    225                    }
    226                  } else {
    227                    if (TimerStep) {
   \                     ??_OnTouch_11:
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   0700000A           BEQ      ??_OnTouch_12
    228                      _DeleteTimer(hObj);
   \   000001FC   0500A0E1           MOV      R0,R5
   \   00000200   ........           BL       GUI_ALLOC_LockH
   \   00000204   0070A0E1           MOV      R7,R0
   \   00000208   640097E5           LDR      R0,[R7, #+100]
   \   0000020C   ........           BL       WM_DeleteTimer
   \   00000210   64A087E5           STR      R10,[R7, #+100]
   \   00000214   5CA087E5           STR      R10,[R7, #+92]
   \                     ??_OnTouch_4:
   \   00000218   ........           BL       GUI_ALLOC_UnlockH
    229                    }
    230                  }
    231                }
    232                WM_SetCapture(hObj, 1);
   \                     ??_OnTouch_12:
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           BL       WM_SetCapture
    233                SCROLLBAR_SetValue(hObj, Sel);
   \   00000228   000055E3           CMP      R5,#+0
   \   0000022C   1700000A           BEQ      ??_OnTouch_13
   \   00000230   ........           BL       GUI_Lock
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   ........           BL       GUI_ALLOC_LockH
   \   0000023C   4C1090E5           LDR      R1,[R0, #+76]
   \   00000240   542090E5           LDR      R2,[R0, #+84]
   \   00000244   021051E0           SUBS     R1,R1,R2
   \   00000248   0010A043           MOVMI    R1,#+0
   \   0000024C   000054E3           CMP      R4,#+0
   \   00000250   0040A043           MOVMI    R4,#+0
   \   00000254   040051E1           CMP      R1,R4
   \   00000258   0140A0D1           MOVLE    R4,R1
   \   0000025C   501090E5           LDR      R1,[R0, #+80]
   \   00000260   040051E1           CMP      R1,R4
   \   00000264   0100001A           BNE      ??_OnTouch_14
   \   00000268   ........           BL       GUI_ALLOC_UnlockH
   \   0000026C   060000EA           B        ??_OnTouch_15
   \                     ??_OnTouch_14:
   \   00000270   504080E5           STR      R4,[R0, #+80]
   \   00000274   0500A0E1           MOV      R0,R5
   \   00000278   ........           BL       WM_InvalidateWindow
   \   0000027C   ........           BL       GUI_ALLOC_UnlockH
   \   00000280   0510A0E3           MOV      R1,#+5
   \   00000284   0500A0E1           MOV      R0,R5
   \   00000288   ........           BL       WM_NotifyParent
   \                     ??_OnTouch_15:
   \   0000028C   ........           BL       GUI_Unlock
    234                if ((State & SCROLLBAR_STATE_PRESSED) == 0){   
   \                     ??_OnTouch_13:
   \   00000290   400F16E3           TST      R6,#0x100
   \   00000294   2D00001A           BNE      ??_OnTouch_0
    235                  _ScrollbarPressed(hObj);
   \   00000298   0500A0E1           MOV      R0,R5
   \   0000029C   ........           BL       GUI_ALLOC_LockH
   \   000002A0   284090E5           LDR      R4,[R0, #+40]
   \   000002A4   0448A0E1           LSL      R4,R4,#+16
   \   000002A8   2448A0E1           LSR      R4,R4,#+16
   \   000002AC   ........           BL       GUI_ALLOC_UnlockH
   \   000002B0   401FA0E3           MOV      R1,#+256
   \   000002B4   0500A0E1           MOV      R0,R5
   \   000002B8   ........           BL       WIDGET_OrState
   \   000002BC   020014E3           TST      R4,#0x2
   \   000002C0   2200000A           BEQ      ??_OnTouch_0
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   1E0000EA           B        ??_OnTouch_16
    236                }
    237              } else {
    238                //
    239                // React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown)
    240                //
    241                pObj = SCROLLBAR_LOCK_H(hObj);
    242                State = pObj->Widget.State;
   \                     ??_OnTouch_1:
   \   000002CC   ........           BL       GUI_ALLOC_LockH
   \   000002D0   B263D0E1           LDRH     R6,[R0, #+50]
    243                GUI_UNLOCK_H(pObj);
   \   000002D4   ........           BL       GUI_ALLOC_UnlockH
    244                if (State & SCROLLBAR_STATE_PRESSED) {   
   \   000002D8   400F16E3           TST      R6,#0x100
   \   000002DC   1B00000A           BEQ      ??_OnTouch_0
    245                  _ScrollbarReleased(hObj);
   \   000002E0   401FA0E3           MOV      R1,#+256
   \   000002E4   0500A0E1           MOV      R0,R5
   \   000002E8   ........           BL       WIDGET_AndState
   \   000002EC   0500A0E1           MOV      R0,R5
   \   000002F0   ........           BL       GUI_ALLOC_LockH
   \   000002F4   0040A0E1           MOV      R4,R0
   \   000002F8   5C0094E5           LDR      R0,[R4, #+92]
   \   000002FC   00A0A0E3           MOV      R10,#+0
   \   00000300   000050E3           CMP      R0,#+0
   \   00000304   0700000A           BEQ      ??_OnTouch_17
   \   00000308   0500A0E1           MOV      R0,R5
   \   0000030C   ........           BL       GUI_ALLOC_LockH
   \   00000310   0060A0E1           MOV      R6,R0
   \   00000314   640096E5           LDR      R0,[R6, #+100]
   \   00000318   ........           BL       WM_DeleteTimer
   \   0000031C   64A086E5           STR      R10,[R6, #+100]
   \   00000320   5CA086E5           STR      R10,[R6, #+92]
   \   00000324   ........           BL       GUI_ALLOC_UnlockH
   \                     ??_OnTouch_17:
   \   00000328   286094E5           LDR      R6,[R4, #+40]
   \   0000032C   58A084E5           STR      R10,[R4, #+88]
   \   00000330   0668A0E1           LSL      R6,R6,#+16
   \   00000334   2668A0E1           LSR      R6,R6,#+16
   \   00000338   ........           BL       GUI_ALLOC_UnlockH
   \   0000033C   020016E3           TST      R6,#0x2
   \   00000340   0200000A           BEQ      ??_OnTouch_0
   \   00000344   0210A0E3           MOV      R1,#+2
   \                     ??_OnTouch_16:
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           BL       WM_NotifyParent
    246                }
    247              }
    248            }
    249          }
   \                     ??_OnTouch_0:
   \   00000350   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000354   F08FBDE8           POP      {R4-R11,PC}      ;; return
    250          
    251          /*********************************************************************
    252          *
    253          *       _OnKey
    254          */

   \                                 In section .text, align 4, keep-with-next
    255          static void  _OnKey(SCROLLBAR_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnKey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    256            SCROLLBAR_OBJ * pObj;
    257            const WM_KEY_INFO * pKeyInfo;
    258            int Key, PageSize;
    259          
    260            pObj = SCROLLBAR_LOCK_H(hObj); {
    261              PageSize = pObj->PageSize;
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   545090E5           LDR      R5,[R0, #+84]
    262            } GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    263            pKeyInfo = (const WM_KEY_INFO *)(pMsg->Data.p);
   \   00000018   0C0096E5           LDR      R0,[R6, #+12]
    264            Key = pKeyInfo->Key;
    265            if (pKeyInfo->PressedCnt > 0) {
   \   0000001C   041090E5           LDR      R1,[R0, #+4]
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   470000BA           BLT      ??_OnKey_1
    266              switch (Key) {
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   100040E2           SUB      R0,R0,#+16
   \   00000030   120050E3           CMP      R0,#+18
   \   00000034   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_OnKey_0:
   \   00000038   4200008A           BHI      ??_OnKey_1
   \   0000003C   3F0000EA           B        ??_OnKey_2
   \   00000040   3E0000EA           B        ??_OnKey_2
   \   00000044   3A0000EA           B        ??_OnKey_3
   \   00000048   390000EA           B        ??_OnKey_3
   \   0000004C   3D0000EA           B        ??_OnKey_1
   \   00000050   3C0000EA           B        ??_OnKey_1
   \   00000054   3B0000EA           B        ??_OnKey_1
   \   00000058   3A0000EA           B        ??_OnKey_1
   \   0000005C   390000EA           B        ??_OnKey_1
   \   00000060   380000EA           B        ??_OnKey_1
   \   00000064   370000EA           B        ??_OnKey_1
   \   00000068   360000EA           B        ??_OnKey_1
   \   0000006C   350000EA           B        ??_OnKey_1
   \   00000070   340000EA           B        ??_OnKey_1
   \   00000074   330000EA           B        ??_OnKey_1
   \   00000078   320000EA           B        ??_OnKey_1
   \   0000007C   310000EA           B        ??_OnKey_1
   \   00000080   000000EA           B        ??_OnKey_4
   \   00000084   080000EA           B        ??_OnKey_5
    267                case GUI_KEY_PGUP:
    268                  SCROLLBAR_AddValue(hObj,  PageSize);
   \                     ??_OnKey_4:
   \   00000088   000054E3           CMP      R4,#+0
   \   0000008C   2D00000A           BEQ      ??_OnKey_1
   \   00000090   ........           BL       GUI_Lock
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       GUI_ALLOC_LockH
   \   0000009C   506090E5           LDR      R6,[R0, #+80]
   \   000000A0   ........           BL       GUI_ALLOC_UnlockH
   \   000000A4   065085E0           ADD      R5,R5,R6
   \   000000A8   070000EA           B        ??_OnKey_6
    269                  break;
    270                case GUI_KEY_PGDOWN:
    271                  SCROLLBAR_AddValue(hObj,  -PageSize);
   \                     ??_OnKey_5:
   \   000000AC   000054E3           CMP      R4,#+0
   \   000000B0   2400000A           BEQ      ??_OnKey_1
   \   000000B4   ........           BL       GUI_Lock
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   506090E5           LDR      R6,[R0, #+80]
   \   000000C4   ........           BL       GUI_ALLOC_UnlockH
   \   000000C8   055046E0           SUB      R5,R6,R5
   \                     ??_OnKey_6:
   \   000000CC   ........           BL       GUI_Lock
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       GUI_ALLOC_LockH
   \   000000D8   4C1090E5           LDR      R1,[R0, #+76]
   \   000000DC   542090E5           LDR      R2,[R0, #+84]
   \   000000E0   021051E0           SUBS     R1,R1,R2
   \   000000E4   0010A043           MOVMI    R1,#+0
   \   000000E8   000055E3           CMP      R5,#+0
   \   000000EC   0050A043           MOVMI    R5,#+0
   \   000000F0   050051E1           CMP      R1,R5
   \   000000F4   502090E5           LDR      R2,[R0, #+80]
   \   000000F8   0510A0C1           MOVGT    R1,R5
   \   000000FC   010052E1           CMP      R2,R1
   \   00000100   0100001A           BNE      ??_OnKey_7
   \   00000104   ........           BL       GUI_ALLOC_UnlockH
   \   00000108   060000EA           B        ??_OnKey_8
   \                     ??_OnKey_7:
   \   0000010C   501080E5           STR      R1,[R0, #+80]
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       WM_InvalidateWindow
   \   00000118   ........           BL       GUI_ALLOC_UnlockH
   \   0000011C   0510A0E3           MOV      R1,#+5
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       WM_NotifyParent
   \                     ??_OnKey_8:
   \   00000128   ........           BL       GUI_Unlock
   \   0000012C   7040BDE8           POP      {R4-R6,LR}
   \   00000130   ........           B        GUI_Unlock       ;; tailcall
    272                  break;
    273                case GUI_KEY_RIGHT:
    274                case GUI_KEY_DOWN:
    275                  SCROLLBAR_Inc(hObj);
   \                     ??_OnKey_3:
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   7040BDE8           POP      {R4-R6,LR}
   \   0000013C   ........           B        SCROLLBAR_Inc    ;; tailcall
    276                  break;                    /* Send to parent by not doing anything */
    277                case GUI_KEY_LEFT:
    278                case GUI_KEY_UP:
    279                  SCROLLBAR_Dec(hObj);
   \                     ??_OnKey_2:
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       SCROLLBAR_Dec
    280                  break;                    /* Send to parent by not doing anything */
   \                     ??_OnKey_1:
   \   00000148   7080BDE8           POP      {R4-R6,PC}       ;; return
    281                default:
    282                  return;
    283              }
    284            }
    285          }
    286          
    287          /*********************************************************************
    288          *
    289          *       _OnSetScrollState
    290          */
    291          static void _OnSetScrollState(SCROLLBAR_Handle hObj, const WM_SCROLL_STATE* pState) {
    292            SCROLLBAR_OBJ * pObj;
    293            
    294            pObj = SCROLLBAR_LOCK_H(hObj);
    295            if (  (pState->NumItems != pObj->NumItems)
    296                || (pObj->PageSize   != pState->PageSize)
    297                || (pObj->v          != pState->v))
    298            {
    299              pObj->NumItems = pState->NumItems;
    300              pObj->PageSize = pState->PageSize;
    301              pObj->v        = pState->v;
    302              WM_InvalidateWindow(hObj);
    303              GUI_UNLOCK_H(pObj);
    304              WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
    305            } else {
    306              GUI_UNLOCK_H(pObj);
    307            }
    308          }
    309          
    310          /*********************************************************************
    311          *
    312          *       _OnTimer
    313          */

   \                                 In section .text, align 4, keep-with-next
    314          static void _OnTimer(SCROLLBAR_Handle hObj) {
   \                     _OnTimer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    315            SCROLLBAR_OBJ * pObj;
    316            int Delete;
    317          
    318            pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
    319            if (pObj->TimerStep) {
   \   00000014   5C6095E5           LDR      R6,[R5, #+92]
   \   00000018   000056E3           CMP      R6,#+0
   \   0000001C   2F00000A           BEQ      ??_OnTimer_0
    320              SCROLLBAR_AddValue(hObj, pObj->TimerStep);
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   1E00000A           BEQ      ??_OnTimer_1
   \   00000028   ........           BL       GUI_Lock
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ALLOC_LockH
   \   00000034   507090E5           LDR      R7,[R0, #+80]
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   \   0000003C   076086E0           ADD      R6,R6,R7
   \   00000040   ........           BL       GUI_Lock
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       GUI_ALLOC_LockH
   \   0000004C   4C1090E5           LDR      R1,[R0, #+76]
   \   00000050   542090E5           LDR      R2,[R0, #+84]
   \   00000054   021051E0           SUBS     R1,R1,R2
   \   00000058   0010A043           MOVMI    R1,#+0
   \   0000005C   000056E3           CMP      R6,#+0
   \   00000060   0060A043           MOVMI    R6,#+0
   \   00000064   060051E1           CMP      R1,R6
   \   00000068   502090E5           LDR      R2,[R0, #+80]
   \   0000006C   0610A0C1           MOVGT    R1,R6
   \   00000070   010052E1           CMP      R2,R1
   \   00000074   0100001A           BNE      ??_OnTimer_2
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
   \   0000007C   060000EA           B        ??_OnTimer_3
   \                     ??_OnTimer_2:
   \   00000080   501080E5           STR      R1,[R0, #+80]
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       WM_InvalidateWindow
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
   \   00000090   0510A0E3           MOV      R1,#+5
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       WM_NotifyParent
   \                     ??_OnTimer_3:
   \   0000009C   ........           BL       GUI_Unlock
   \   000000A0   ........           BL       GUI_Unlock
    321            }
    322            //
    323            // Check if timer needs to be stopped
    324            //
    325            if (pObj->TimerStep > 0) {
   \                     ??_OnTimer_1:
   \   000000A4   5C0095E5           LDR      R0,[R5, #+92]
   \   000000A8   010050E3           CMP      R0,#+1
   \   000000AC   0B0000BA           BLT      ??_OnTimer_0
    326              Delete = (pObj->v >= pObj->TouchPos) ? 1 : 0;
   \   000000B0   600095E5           LDR      R0,[R5, #+96]
   \   000000B4   501095E5           LDR      R1,[R5, #+80]
   \   000000B8   000051E1           CMP      R1,R0
   \   000000BC   030000BA           BLT      ??_OnTimer_4
    327              if (pObj->v > pObj->TouchPos) {
   \   000000C0   010050E1           CMP      R0,R1
   \   000000C4   0B0000DA           BLE      ??_OnTimer_5
   \   000000C8   0100A0E1           MOV      R0,R1
   \   000000CC   090000EA           B        ??_OnTimer_5
    328                pObj->v = pObj->TouchPos;
    329              }
    330            } else {
    331              Delete = (pObj->v <= pObj->TouchPos) ? 1 : 0;
    332              if (pObj->v < pObj->TouchPos) {
    333                pObj->v = pObj->TouchPos;
    334              }
    335            }
    336            //
    337            // Delete or restart timer
    338            //
    339            if (Delete) {
    340              _DeleteTimer(hObj);
    341            } else {
    342              _RestartTimer(pObj, 50);
   \                     ??_OnTimer_4:
   \   000000D0   3210A0E3           MOV      R1,#+50
   \   000000D4   640095E5           LDR      R0,[R5, #+100]
   \   000000D8   ........           BL       WM_RestartTimer
    343            }
   \   000000DC   0F0000EA           B        ??_OnTimer_6
   \                     ??_OnTimer_0:
   \   000000E0   500095E5           LDR      R0,[R5, #+80]
   \   000000E4   601095E5           LDR      R1,[R5, #+96]
   \   000000E8   000051E1           CMP      R1,R0
   \   000000EC   F7FFFFBA           BLT      ??_OnTimer_4
   \   000000F0   010050E1           CMP      R0,R1
   \   000000F4   0100A0B1           MOVLT    R0,R1
   \                     ??_OnTimer_5:
   \   000000F8   500085E5           STR      R0,[R5, #+80]
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       GUI_ALLOC_LockH
   \   00000104   0040A0E1           MOV      R4,R0
   \   00000108   640094E5           LDR      R0,[R4, #+100]
   \   0000010C   ........           BL       WM_DeleteTimer
   \   00000110   0060A0E3           MOV      R6,#+0
   \   00000114   646084E5           STR      R6,[R4, #+100]
   \   00000118   5C6084E5           STR      R6,[R4, #+92]
   \   0000011C   ........           BL       GUI_ALLOC_UnlockH
    344            GUI_UNLOCK_H(pObj);
   \                     ??_OnTimer_6:
   \   00000120   04D08DE2           ADD      SP,SP,#+4
   \   00000124   F040BDE8           POP      {R4-R7,LR}
   \   00000128   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
    345          }
    346          
    347          /*********************************************************************
    348          *
    349          *       Private routines
    350          *
    351          **********************************************************************
    352          */
    353          /*********************************************************************
    354          *
    355          *       SCROLLBAR__Rect2VRect
    356          *
    357          * Purpose:
    358          *   Convert rectangle in real coordinates into virtual coordinates
    359          *
    360          * Add. info:
    361          *   This function could eventually be made none-static and move into
    362          *   a module of its own.
    363          */

   \                                 In section .text, align 4, keep-with-next
    364          void SCROLLBAR__Rect2VRect(const WIDGET * pWidget, GUI_RECT * pRect) {
    365            int xSize, x0, x1;
    366          
    367            if (pWidget->State & WIDGET_STATE_VERTICAL) {
   \                     SCROLLBAR__Rect2VRect:
   \   00000000   3220D0E5           LDRB     R2,[R0, #+50]
   \   00000004   080012E3           TST      R2,#0x8
   \   00000008   0E00000A           BEQ      ??SCROLLBAR__Rect2VRect_0
    368              xSize = pWidget->Win.Rect.x1 - pWidget->Win.Rect.x0 + 1;
   \   0000000C   F420D0E1           LDRSH    R2,[R0, #+4]
   \   00000010   F000D0E1           LDRSH    R0,[R0, #+0]
    369              x0 = pRect->x0;
    370              x1 = pRect->x1;
    371              pRect->x0 = pRect->y0;
   \   00000014   F2C0D1E1           LDRSH    R12,[R1, #+2]
   \   00000018   F430D1E1           LDRSH    R3,[R1, #+4]
   \   0000001C   000042E0           SUB      R0,R2,R0
   \   00000020   F020D1E1           LDRSH    R2,[R1, #+0]
   \   00000024   B0C0C1E1           STRH     R12,[R1, #+0]
    372              pRect->x1 = pRect->y1;
   \   00000028   F6C0D1E1           LDRSH    R12,[R1, #+6]
   \   0000002C   010080E2           ADD      R0,R0,#+1
    373              pRect->y1 = xSize - 1 - x0;
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   B4C0C1E1           STRH     R12,[R1, #+4]
   \   00000038   022040E0           SUB      R2,R0,R2
   \   0000003C   B620C1E1           STRH     R2,[R1, #+6]
    374              pRect->y0 = xSize - 1 - x1;
   \   00000040   030040E0           SUB      R0,R0,R3
   \   00000044   B200C1E1           STRH     R0,[R1, #+2]
    375            }
    376          }
   \                     ??SCROLLBAR__Rect2VRect_0:
   \   00000048   1EFF2FE1           BX       LR               ;; return
    377          
    378          /*********************************************************************
    379          *
    380          *       SCROLLBAR_LockH
    381          */
    382          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    383          SCROLLBAR_OBJ * SCROLLBAR_LockH(SCROLLBAR_Handle h) {
    384            SCROLLBAR_OBJ * p = (SCROLLBAR_OBJ *)GUI_LOCK_H(h);
    385            if (p) {
    386              if (p->DebugId != SCROLLBAR_ID) {
    387                GUI_DEBUG_ERROROUT("SCROLLBAR.c: Wrong handle type or Object not init'ed");
    388                return 0;
    389              }
    390            }
    391            return p;
    392          }
    393          #endif
    394          
    395          /*********************************************************************
    396          *
    397          *       SCROLLBAR__InvalidatePartner
    398          */

   \                                 In section .text, align 4, keep-with-next
    399          void SCROLLBAR__InvalidatePartner(SCROLLBAR_Handle hObj) {     /* Invalidate the partner, since it is also affected */
   \                     SCROLLBAR__InvalidatePartner:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    400            WM_InvalidateWindow(WM_GetScrollPartner(hObj));
   \   00000008   ........           BL       WM_GetScrollPartner
   \   0000000C   ........           BL       WM_InvalidateWindow
    401            WM_SendMessageNoPara(WM_GetParent(hObj), WM_NOTIFY_CLIENTCHANGE);   /* Client area may have changed */
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       WM_GetParent
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   2510A0E3           MOV      R1,#+37
   \   00000020   ........           B        WM_SendMessageNoPara  ;; tailcall
    402          }
    403          
    404          /*********************************************************************
    405          *
    406          *       Exported routines:  Callback
    407          *
    408          **********************************************************************
    409          */
    410          /*********************************************************************
    411          *
    412          *       SCROLLBAR_Callback
    413          */

   \                                 In section .text, align 4, keep-with-next
    414          void SCROLLBAR_Callback (WM_MESSAGE *pMsg) {
   \                     SCROLLBAR_Callback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    415            SCROLLBAR_Handle hObj;
    416            SCROLLBAR_OBJ * pObj;
    417            WIDGET_PAINT * pfPaint;
    418          
    419            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
    420            /* Let widget handle the standard messages */
    421            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           BL       WIDGET_HandleActive
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   5300000A           BEQ      ??SCROLLBAR_Callback_0
    422              return;
    423            }
    424            switch (pMsg->MsgId) {
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   0B0050E2           SUBS     R0,R0,#+11
   \   00000028   0D00000A           BEQ      ??SCROLLBAR_Callback_1
   \   0000002C   010050E2           SUBS     R0,R0,#+1
   \   00000030   1B00000A           BEQ      ??SCROLLBAR_Callback_2
   \   00000034   020050E2           SUBS     R0,R0,#+2
   \   00000038   1D00000A           BEQ      ??SCROLLBAR_Callback_3
   \   0000003C   010050E2           SUBS     R0,R0,#+1
   \   00000040   0F00000A           BEQ      ??SCROLLBAR_Callback_4
   \   00000044   140050E2           SUBS     R0,R0,#+20
   \   00000048   3A00000A           BEQ      ??SCROLLBAR_Callback_5
   \   0000004C   010050E2           SUBS     R0,R0,#+1
   \   00000050   1B00000A           BEQ      ??SCROLLBAR_Callback_6
   \   00000054   EF0050E2           SUBS     R0,R0,#+239
   \   00000058   0500A001           MOVEQ    R0,R5
   \   0000005C   ........           BLEQ     _OnTimer
   \   00000060   400000EA           B        ??SCROLLBAR_Callback_7
    425            case WM_DELETE:
    426              SCROLLBAR__InvalidatePartner(hObj);
   \                     ??SCROLLBAR_Callback_1:
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       WM_GetScrollPartner
   \   0000006C   ........           BL       WM_InvalidateWindow
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       WM_GetParent
   \   00000078   2510A0E3           MOV      R1,#+37
   \   0000007C   ........           BL       WM_SendMessageNoPara
    427              break;
   \   00000080   380000EA           B        ??SCROLLBAR_Callback_7
    428            case WM_PAINT:
    429              GUI_DEBUG_LOG("SCROLLBAR: _Callback(WM_PAINT)\n");
    430              pObj = SCROLLBAR_LOCK_H(hObj);
    431              pfPaint = pObj->pWidgetSkin->pfPaint;
   \                     ??SCROLLBAR_Callback_4:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       GUI_ALLOC_LockH
   \   0000008C   440090E5           LDR      R0,[R0, #+68]
   \   00000090   004090E5           LDR      R4,[R0, #+0]
    432              GUI_UNLOCK_H(pObj);
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    433              pfPaint(hObj);
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   34FF2FE1           BLX      R4
    434              //_Paint(hObj);
    435              return;
   \   000000A0   7080BDE8           POP      {R4-R6,PC}
    436            case WM_TOUCH:
    437              _OnTouch(hObj, pMsg);
   \                     ??SCROLLBAR_Callback_2:
   \   000000A4   0410A0E1           MOV      R1,R4
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       _OnTouch
    438              break;
   \   000000B0   2C0000EA           B        ??SCROLLBAR_Callback_7
    439            case WM_KEY:
    440              _OnKey(hObj, pMsg);
   \                     ??SCROLLBAR_Callback_3:
   \   000000B4   0410A0E1           MOV      R1,R4
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           BL       _OnKey
    441              break;
   \   000000C0   280000EA           B        ??SCROLLBAR_Callback_7
    442            case WM_SET_SCROLL_STATE:
    443              _OnSetScrollState(hObj, (const WM_SCROLL_STATE*)pMsg->Data.p);
   \                     ??SCROLLBAR_Callback_6:
   \   000000C4   0C6094E5           LDR      R6,[R4, #+12]
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           BL       GUI_ALLOC_LockH
   \   000000D0   001096E5           LDR      R1,[R6, #+0]
   \   000000D4   4C2090E5           LDR      R2,[R0, #+76]
   \   000000D8   020051E1           CMP      R1,R2
   \   000000DC   0900001A           BNE      ??SCROLLBAR_Callback_8
   \   000000E0   542090E5           LDR      R2,[R0, #+84]
   \   000000E4   083096E5           LDR      R3,[R6, #+8]
   \   000000E8   030052E1           CMP      R2,R3
   \   000000EC   0500001A           BNE      ??SCROLLBAR_Callback_8
   \   000000F0   502090E5           LDR      R2,[R0, #+80]
   \   000000F4   043096E5           LDR      R3,[R6, #+4]
   \   000000F8   030052E1           CMP      R2,R3
   \   000000FC   0100001A           BNE      ??SCROLLBAR_Callback_8
   \                     ??SCROLLBAR_Callback_9:
   \   00000100   ........           BL       GUI_ALLOC_UnlockH
   \   00000104   170000EA           B        ??SCROLLBAR_Callback_7
   \                     ??SCROLLBAR_Callback_8:
   \   00000108   4C1080E5           STR      R1,[R0, #+76]
   \   0000010C   081096E5           LDR      R1,[R6, #+8]
   \   00000110   541080E5           STR      R1,[R0, #+84]
   \   00000114   041096E5           LDR      R1,[R6, #+4]
   \   00000118   501080E5           STR      R1,[R0, #+80]
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           BL       WM_InvalidateWindow
   \   00000124   ........           BL       GUI_ALLOC_UnlockH
   \   00000128   0510A0E3           MOV      R1,#+5
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           BL       WM_NotifyParent
   \   00000134   0B0000EA           B        ??SCROLLBAR_Callback_7
    444              break;
    445            case WM_GET_SCROLL_STATE:
    446              pObj = SCROLLBAR_LOCK_H(hObj);
   \                     ??SCROLLBAR_Callback_5:
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   ........           BL       GUI_ALLOC_LockH
    447              ((WM_SCROLL_STATE *)pMsg->Data.p)->NumItems = pObj->NumItems;
   \   00000140   0C1094E5           LDR      R1,[R4, #+12]
   \   00000144   4C2090E5           LDR      R2,[R0, #+76]
   \   00000148   002081E5           STR      R2,[R1, #+0]
    448              ((WM_SCROLL_STATE *)pMsg->Data.p)->PageSize = pObj->PageSize;
   \   0000014C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000150   542090E5           LDR      R2,[R0, #+84]
   \   00000154   082081E5           STR      R2,[R1, #+8]
    449              ((WM_SCROLL_STATE *)pMsg->Data.p)->v        = pObj->v;
   \   00000158   0C1094E5           LDR      R1,[R4, #+12]
   \   0000015C   500090E5           LDR      R0,[R0, #+80]
   \   00000160   040081E5           STR      R0,[R1, #+4]
    450              GUI_UNLOCK_H(pObj);
   \   00000164   E5FFFFEA           B        ??SCROLLBAR_Callback_9
    451              break;
    452            case WM_TIMER:
    453              _OnTimer(hObj);
    454              break;
    455            }
    456            WM_DefaultProc(pMsg);
   \                     ??SCROLLBAR_Callback_7:
   \   00000168   0400A0E1           MOV      R0,R4
   \   0000016C   ........           BL       WM_DefaultProc
    457          }
   \                     ??SCROLLBAR_Callback_0:
   \   00000170   7080BDE8           POP      {R4-R6,PC}       ;; return
    458          
    459          /*********************************************************************
    460          *
    461          *       Exported routines:  Create
    462          *
    463          **********************************************************************
    464          */
    465          
    466          /* Note: the parameters to a create function may vary.
    467                   Some widgets may have multiple create functions */
    468          
    469          /*********************************************************************
    470          *
    471          *       SCROLLBAR_CreateEx
    472          */

   \                                 In section .text, align 4, keep-with-next
    473          SCROLLBAR_Handle SCROLLBAR_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    474                                              int WinFlags, int ExFlags, int Id)
    475          {
   \                     SCROLLBAR_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   00B0A0E1           MOV      R11,R0
   \   0000000C   01A0A0E1           MOV      R10,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   40609DE5           LDR      R6,[SP, #+64]
   \   0000001C   44709DE5           LDR      R7,[SP, #+68]
   \   00000020   48809DE5           LDR      R8,[SP, #+72]
   \   00000024   4C909DE5           LDR      R9,[SP, #+76]
    476            SCROLLBAR_Handle hObj;
    477            SCROLLBAR_OBJ * pObj;
    478            GUI_RECT Rect;
    479            U16 InitState;
    480          
    481            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    482            /* Set defaults if necessary */
    483            if ((xsize == 0) && (ysize == 0)) {
   \   0000002C   050094E1           ORRS     R0,R4,R5
   \   00000030   1400001A           BNE      ??SCROLLBAR_CreateEx_0
    484              WM_GetInsideRectEx(hParent, &Rect);
   \   00000034   10108DE2           ADD      R1,SP,#+16
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   ........           BL       WM_GetInsideRectEx
    485              if (ExFlags & SCROLLBAR_CF_VERTICAL) {
   \   00000040   ........           LDR      R4,??DataTable0
   \   00000044   F601DDE1           LDRSH    R0,[SP, #+22]
   \   00000048   F411DDE1           LDRSH    R1,[SP, #+20]
   \   0000004C   F041D4E1           LDRSH    R4,[R4, #+16]
   \   00000050   080018E3           TST      R8,#0x8
   \   00000054   0600000A           BEQ      ??SCROLLBAR_CreateEx_1
    486                xsize = SCROLLBAR__DefaultWidth;
    487                x0    = Rect.x1 + 1 - xsize;
    488                y0    = Rect.y0;
   \   00000058   F2A1DDE1           LDRSH    R10,[SP, #+18]
   \   0000005C   0450A0E1           MOV      R5,R4
   \   00000060   011081E2           ADD      R1,R1,#+1
    489                ysize = Rect.y1 - Rect.y0 + 1;
   \   00000064   0A0040E0           SUB      R0,R0,R10
   \   00000068   05B041E0           SUB      R11,R1,R5
   \   0000006C   014080E2           ADD      R4,R0,#+1
   \   00000070   040000EA           B        ??SCROLLBAR_CreateEx_0
    490              } else {
    491                ysize = SCROLLBAR__DefaultWidth;
    492                y0    = Rect.y1 + 1 - ysize;
    493                x0    = Rect.x0;
   \                     ??SCROLLBAR_CreateEx_1:
   \   00000074   F0B1DDE1           LDRSH    R11,[SP, #+16]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   04A040E0           SUB      R10,R0,R4
    494                xsize = Rect.x1 - Rect.x0 + 1;
   \   00000080   0B0041E0           SUB      R0,R1,R11
   \   00000084   015080E2           ADD      R5,R0,#+1
    495              }
    496            }
    497            /* Create the window */
    498            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, SCROLLBAR_Callback,
    499                                          sizeof(SCROLLBAR_OBJ) - sizeof(WM_Obj));
   \                     ??SCROLLBAR_CreateEx_0:
   \   00000088   3C00A0E3           MOV      R0,#+60
   \   0000008C   0C008DE5           STR      R0,[SP, #+12]
   \   00000090   ........           LDR      R0,??DataTable0_1
   \   00000094   04708DE5           STR      R7,[SP, #+4]
   \   00000098   08008DE5           STR      R0,[SP, #+8]
   \   0000009C   00608DE5           STR      R6,[SP, #+0]
   \   000000A0   0430A0E1           MOV      R3,R4
   \   000000A4   0520A0E1           MOV      R2,R5
   \   000000A8   0A10A0E1           MOV      R1,R10
   \   000000AC   0B00A0E1           MOV      R0,R11
   \   000000B0   ........           BL       WM_CreateWindowAsChild
   \   000000B4   0050B0E1           MOVS     R5,R0
    500            if (hObj) {
   \   000000B8   2400000A           BEQ      ??SCROLLBAR_CreateEx_2
    501              pObj = (SCROLLBAR_OBJ *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   000000BC   ........           BL       GUI_ALLOC_LockH
    502              /* Handle SpecialFlags */
    503              InitState = 0;
   \   000000C0   0020A0E3           MOV      R2,#+0
    504              if (ExFlags & SCROLLBAR_CF_VERTICAL) {
   \   000000C4   080018E3           TST      R8,#0x8
    505                InitState |= WIDGET_CF_VERTICAL;
   \   000000C8   0820A013           MOVNE    R2,#+8
    506              }
    507              if (ExFlags & SCROLLBAR_CF_FOCUSSABLE) {
   \   000000CC   100018E3           TST      R8,#0x10
    508                InitState |= WIDGET_STATE_FOCUSSABLE;
   \   000000D0   10208213           ORRNE    R2,R2,#0x10
    509              }
    510              if ((Id != GUI_ID_HSCROLL) && (Id != GUI_ID_VSCROLL)) {
   \   000000D4   FF0059E3           CMP      R9,#+255
   \   000000D8   FE005913           CMPNE    R9,#+254
   \   000000DC   0060A0E1           MOV      R6,R0
   \   000000E0   0070A0E3           MOV      R7,#+0
    511                InitState |= WIDGET_STATE_FOCUSSABLE;
   \   000000E4   10208213           ORRNE    R2,R2,#0x10
    512              }
    513              /* init widget specific variables */
    514              WIDGET__Init(&pObj->Widget, Id, InitState);
   \   000000E8   0910A0E1           MOV      R1,R9
   \   000000EC   ........           BL       WIDGET__Init
    515              /* init member variables */
    516              SCROLLBAR_INIT_ID(pObj);
    517              pObj->Props         = SCROLLBAR__DefaultProps;
   \   000000F0   ........           LDR      R4,??DataTable0
   \   000000F4   340086E2           ADD      R0,R6,#+52
   \   000000F8   0E10B4E8           LDM      R4!,{R1-R3,R12}
   \   000000FC   104044E2           SUB      R4,R4,#+16
   \   00000100   0E10A0E8           STM      R0!,{R1-R3,R12}
    518              pObj->NumItems      = 100;
   \   00000104   6400A0E3           MOV      R0,#+100
   \   00000108   4C0086E5           STR      R0,[R6, #+76]
    519              pObj->PageSize      =  10;
   \   0000010C   0A00A0E3           MOV      R0,#+10
   \   00000110   540086E5           STR      R0,[R6, #+84]
    520              pObj->v             =   0;
   \   00000114   507086E5           STR      R7,[R6, #+80]
    521              pObj->pWidgetSkin = SCROLLBAR__pSkinDefault;
   \   00000118   140094E5           LDR      R0,[R4, #+20]
   \   0000011C   440086E5           STR      R0,[R6, #+68]
    522              GUI_UNLOCK_H(pObj);
   \   00000120   ........           BL       GUI_ALLOC_UnlockH
    523              SCROLLBAR__pSkinDefault->pfCreate(hObj);
   \   00000124   141094E5           LDR      R1,[R4, #+20]
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   041091E5           LDR      R1,[R1, #+4]
   \   00000130   31FF2FE1           BLX      R1
    524              SCROLLBAR__InvalidatePartner(hObj);
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   ........           BL       WM_GetScrollPartner
   \   0000013C   ........           BL       WM_InvalidateWindow
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           BL       WM_GetParent
   \   00000148   2510A0E3           MOV      R1,#+37
   \   0000014C   ........           BL       WM_SendMessageNoPara
    525            } else {
    526              GUI_DEBUG_ERROROUT_IF(hObj==0, "SCROLLBAR_Create failed")
    527            }
    528            WM_UNLOCK();
   \                     ??SCROLLBAR_CreateEx_2:
   \   00000150   ........           BL       GUI_Unlock
    529            return hObj;
   \   00000154   0500A0E1           MOV      R0,R5
   \   00000158   1CD08DE2           ADD      SP,SP,#+28
   \   0000015C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    530          }
    531          
    532          /*********************************************************************
    533          *
    534          *       Exported routines:  Various methods
    535          *
    536          **********************************************************************
    537          */
    538          /*********************************************************************
    539          *
    540          *       SCROLLBAR_Dec
    541          */

   \                                 In section .text, align 4, keep-with-next
    542          void SCROLLBAR_Dec(SCROLLBAR_Handle hObj) {
   \                     SCROLLBAR_Dec:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    543            SCROLLBAR_AddValue(hObj, -1);
   \   0000000C   1E00000A           BEQ      ??SCROLLBAR_Dec_0
   \   00000010   ........           BL       GUI_Lock
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   505090E5           LDR      R5,[R0, #+80]
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
   \   00000024   015045E2           SUB      R5,R5,#+1
   \   00000028   ........           BL       GUI_Lock
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ALLOC_LockH
   \   00000034   4C1090E5           LDR      R1,[R0, #+76]
   \   00000038   542090E5           LDR      R2,[R0, #+84]
   \   0000003C   021051E0           SUBS     R1,R1,R2
   \   00000040   0010A043           MOVMI    R1,#+0
   \   00000044   000055E3           CMP      R5,#+0
   \   00000048   0050A043           MOVMI    R5,#+0
   \   0000004C   050051E1           CMP      R1,R5
   \   00000050   502090E5           LDR      R2,[R0, #+80]
   \   00000054   0510A0C1           MOVGT    R1,R5
   \   00000058   010052E1           CMP      R2,R1
   \   0000005C   0100001A           BNE      ??SCROLLBAR_Dec_1
   \   00000060   ........           BL       GUI_ALLOC_UnlockH
   \   00000064   060000EA           B        ??SCROLLBAR_Dec_2
   \                     ??SCROLLBAR_Dec_1:
   \   00000068   501080E5           STR      R1,[R0, #+80]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       WM_InvalidateWindow
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
   \   00000078   0510A0E3           MOV      R1,#+5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       WM_NotifyParent
   \                     ??SCROLLBAR_Dec_2:
   \   00000084   ........           BL       GUI_Unlock
   \   00000088   ........           BL       GUI_Unlock
    544          }
   \                     ??SCROLLBAR_Dec_0:
   \   0000008C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000090   3080BDE8           POP      {R4,R5,PC}       ;; return
    545          
    546          /*********************************************************************
    547          *
    548          *       SCROLLBAR_Inc
    549          */

   \                                 In section .text, align 4, keep-with-next
    550          void SCROLLBAR_Inc(SCROLLBAR_Handle hObj) {
   \                     SCROLLBAR_Inc:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    551            SCROLLBAR_AddValue(hObj,  1);
   \   0000000C   1E00000A           BEQ      ??SCROLLBAR_Inc_0
   \   00000010   ........           BL       GUI_Lock
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   505090E5           LDR      R5,[R0, #+80]
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
   \   00000024   015085E2           ADD      R5,R5,#+1
   \   00000028   ........           BL       GUI_Lock
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ALLOC_LockH
   \   00000034   4C1090E5           LDR      R1,[R0, #+76]
   \   00000038   542090E5           LDR      R2,[R0, #+84]
   \   0000003C   021051E0           SUBS     R1,R1,R2
   \   00000040   0010A043           MOVMI    R1,#+0
   \   00000044   000055E3           CMP      R5,#+0
   \   00000048   0050A043           MOVMI    R5,#+0
   \   0000004C   050051E1           CMP      R1,R5
   \   00000050   502090E5           LDR      R2,[R0, #+80]
   \   00000054   0510A0C1           MOVGT    R1,R5
   \   00000058   010052E1           CMP      R2,R1
   \   0000005C   0100001A           BNE      ??SCROLLBAR_Inc_1
   \   00000060   ........           BL       GUI_ALLOC_UnlockH
   \   00000064   060000EA           B        ??SCROLLBAR_Inc_2
   \                     ??SCROLLBAR_Inc_1:
   \   00000068   501080E5           STR      R1,[R0, #+80]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       WM_InvalidateWindow
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
   \   00000078   0510A0E3           MOV      R1,#+5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       WM_NotifyParent
   \                     ??SCROLLBAR_Inc_2:
   \   00000084   ........           BL       GUI_Unlock
   \   00000088   ........           BL       GUI_Unlock
    552          }
   \                     ??SCROLLBAR_Inc_0:
   \   0000008C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000090   3080BDE8           POP      {R4,R5,PC}       ;; return
    553          
    554          /*********************************************************************
    555          *
    556          *       SCROLLBAR_AddValue
    557          */

   \                                 In section .text, align 4, keep-with-next
    558          void SCROLLBAR_AddValue(SCROLLBAR_Handle hObj, int Add) {
   \                     SCROLLBAR_AddValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    559            SCROLLBAR_OBJ * pObj;
    560            int v;
    561          
    562            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1E00000A           BEQ      ??SCROLLBAR_AddValue_0
    563              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    564              pObj = SCROLLBAR_LOCK_H(hObj);
    565              v = pObj->v;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   506090E5           LDR      R6,[R0, #+80]
    566              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    567              SCROLLBAR_SetValue(hObj, v + Add);
   \   00000028   065085E0           ADD      R5,R5,R6
   \   0000002C   ........           BL       GUI_Lock
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   4C1090E5           LDR      R1,[R0, #+76]
   \   0000003C   542090E5           LDR      R2,[R0, #+84]
   \   00000040   021051E0           SUBS     R1,R1,R2
   \   00000044   0010A043           MOVMI    R1,#+0
   \   00000048   000055E3           CMP      R5,#+0
   \   0000004C   0050A043           MOVMI    R5,#+0
   \   00000050   050051E1           CMP      R1,R5
   \   00000054   502090E5           LDR      R2,[R0, #+80]
   \   00000058   0510A0C1           MOVGT    R1,R5
   \   0000005C   010052E1           CMP      R2,R1
   \   00000060   0100001A           BNE      ??SCROLLBAR_AddValue_1
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
   \   00000068   060000EA           B        ??SCROLLBAR_AddValue_2
   \                     ??SCROLLBAR_AddValue_1:
   \   0000006C   501080E5           STR      R1,[R0, #+80]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       WM_InvalidateWindow
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
   \   0000007C   0510A0E3           MOV      R1,#+5
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       WM_NotifyParent
   \                     ??SCROLLBAR_AddValue_2:
   \   00000088   ........           BL       GUI_Unlock
    568              WM_UNLOCK();
   \   0000008C   ........           BL       GUI_Unlock
    569            }
    570          }
   \                     ??SCROLLBAR_AddValue_0:
   \   00000090   7080BDE8           POP      {R4-R6,PC}       ;; return
    571          
    572          /*********************************************************************
    573          *
    574          *       SCROLLBAR_SetValue
    575          */

   \                                 In section .text, align 4, keep-with-next
    576          void SCROLLBAR_SetValue(SCROLLBAR_Handle hObj, int v) {
   \                     SCROLLBAR_SetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    577            SCROLLBAR_OBJ * pObj;
    578            int Max;
    579            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1700000A           BEQ      ??SCROLLBAR_SetValue_0
    580              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    581              pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    582              Max = pObj->NumItems - pObj->PageSize;
   \   00000024   4C1090E5           LDR      R1,[R0, #+76]
   \   00000028   542090E5           LDR      R2,[R0, #+84]
   \   0000002C   021051E0           SUBS     R1,R1,R2
    583              if (Max < 0) {
    584                Max = 0;
   \   00000030   0010A043           MOVMI    R1,#+0
    585              }
    586              /* Put in min/max range */
    587              if (v < 0) {
   \   00000034   000055E3           CMP      R5,#+0
    588                v = 0;
   \   00000038   0050A043           MOVMI    R5,#+0
    589              }
    590              if (v > Max) {
   \   0000003C   050051E1           CMP      R1,R5
   \   00000040   0150A0D1           MOVLE    R5,R1
    591                v = Max;
    592              }
    593              if (pObj->v != v) {
   \   00000044   501090E5           LDR      R1,[R0, #+80]
   \   00000048   050051E1           CMP      R1,R5
   \   0000004C   0700000A           BEQ      ??SCROLLBAR_SetValue_1
    594                pObj->v = v;
   \   00000050   505080E5           STR      R5,[R0, #+80]
    595                WM_InvalidateWindow(hObj);
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_InvalidateWindow
    596                GUI_UNLOCK_H(pObj);
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
    597                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   00000060   0510A0E3           MOV      R1,#+5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       WM_NotifyParent
   \   0000006C   000000EA           B        ??SCROLLBAR_SetValue_2
    598              } else {
    599                GUI_UNLOCK_H(pObj);
   \                     ??SCROLLBAR_SetValue_1:
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
    600              }
    601              WM_UNLOCK();
   \                     ??SCROLLBAR_SetValue_2:
   \   00000074   ........           BL       GUI_Unlock
    602            }
    603          }
   \                     ??SCROLLBAR_SetValue_0:
   \   00000078   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
    604          
    605          /*********************************************************************
    606          *
    607          *       SCROLLBAR_SetNumItems
    608          */

   \                                 In section .text, align 4, keep-with-next
    609          void SCROLLBAR_SetNumItems(SCROLLBAR_Handle hObj, int NumItems) {
   \                     SCROLLBAR_SetNumItems:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    610            SCROLLBAR_OBJ * pObj;
    611          
    612            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??SCROLLBAR_SetNumItems_0
    613              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    614              pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    615              if (pObj->NumItems != NumItems) {
   \   00000024   4C1090E5           LDR      R1,[R0, #+76]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??SCROLLBAR_SetNumItems_1
    616                pObj->NumItems = NumItems;
   \   00000030   4C5080E5           STR      R5,[R0, #+76]
    617                WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    618              }
    619              GUI_UNLOCK_H(pObj);
   \                     ??SCROLLBAR_SetNumItems_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
    620              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
    621            }
    622          }
   \                     ??SCROLLBAR_SetNumItems_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    623          
    624          /*********************************************************************
    625          *
    626          *       SCROLLBAR_SetPageSize
    627          */

   \                                 In section .text, align 4, keep-with-next
    628          void SCROLLBAR_SetPageSize(SCROLLBAR_Handle hObj, int PageSize) {
   \                     SCROLLBAR_SetPageSize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    629            SCROLLBAR_OBJ * pObj;
    630          
    631            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??SCROLLBAR_SetPageSize_0
    632              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    633              pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    634              if (pObj->PageSize != PageSize) {
   \   00000024   541090E5           LDR      R1,[R0, #+84]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??SCROLLBAR_SetPageSize_1
    635                pObj->PageSize = PageSize;
   \   00000030   545080E5           STR      R5,[R0, #+84]
    636                WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    637              }
    638              GUI_UNLOCK_H(pObj);
   \                     ??SCROLLBAR_SetPageSize_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
    639              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
    640            }
    641          }
   \                     ??SCROLLBAR_SetPageSize_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    642          
    643          /*********************************************************************
    644          *
    645          *       SCROLLBAR_SetState
    646          */

   \                                 In section .text, align 4, keep-with-next
    647          void  SCROLLBAR_SetState   (SCROLLBAR_Handle hObj, const WM_SCROLL_STATE* pState) {
   \                     SCROLLBAR_SetState:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0160A0E1           MOV      R6,R1
    648            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3000000A           BEQ      ??SCROLLBAR_SetState_0
    649              SCROLLBAR_SetPageSize(hObj, pState->PageSize);
   \   00000018   085096E5           LDR      R5,[R6, #+8]
   \   0000001C   ........           BL       GUI_Lock
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   541090E5           LDR      R1,[R0, #+84]
   \   0000002C   050051E1           CMP      R1,R5
   \   00000030   0200000A           BEQ      ??SCROLLBAR_SetState_1
   \   00000034   545080E5           STR      R5,[R0, #+84]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       WM_InvalidateWindow
   \                     ??SCROLLBAR_SetState_1:
   \   00000040   ........           BL       GUI_ALLOC_UnlockH
   \   00000044   ........           BL       GUI_Unlock
   \   00000048   007096E5           LDR      R7,[R6, #+0]
   \   0000004C   ........           BL       GUI_Lock
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       GUI_ALLOC_LockH
   \   00000058   4C1090E5           LDR      R1,[R0, #+76]
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0200000A           BEQ      ??SCROLLBAR_SetState_2
   \   00000064   4C7080E5           STR      R7,[R0, #+76]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       WM_InvalidateWindow
   \                     ??SCROLLBAR_SetState_2:
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
   \   00000074   ........           BL       GUI_Unlock
   \   00000078   046096E5           LDR      R6,[R6, #+4]
   \   0000007C   ........           BL       GUI_Lock
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       GUI_ALLOC_LockH
   \   00000088   4C1090E5           LDR      R1,[R0, #+76]
   \   0000008C   542090E5           LDR      R2,[R0, #+84]
   \   00000090   021051E0           SUBS     R1,R1,R2
   \   00000094   0010A043           MOVMI    R1,#+0
   \   00000098   000056E3           CMP      R6,#+0
   \   0000009C   0060A043           MOVMI    R6,#+0
   \   000000A0   060051E1           CMP      R1,R6
   \   000000A4   502090E5           LDR      R2,[R0, #+80]
   \   000000A8   0610A0C1           MOVGT    R1,R6
   \   000000AC   010052E1           CMP      R2,R1
   \   000000B0   0100001A           BNE      ??SCROLLBAR_SetState_3
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
   \   000000B8   060000EA           B        ??SCROLLBAR_SetState_4
   \                     ??SCROLLBAR_SetState_3:
   \   000000BC   501080E5           STR      R1,[R0, #+80]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       WM_InvalidateWindow
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
   \   000000CC   0510A0E3           MOV      R1,#+5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       WM_NotifyParent
   \                     ??SCROLLBAR_SetState_4:
   \   000000D8   ........           BL       GUI_Unlock
    650              SCROLLBAR_SetNumItems(hObj, pState->NumItems);
    651              SCROLLBAR_SetValue   (hObj, pState->v);
    652            }
    653          }
   \                     ??SCROLLBAR_SetState_0:
   \   000000DC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000E0   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     SCROLLBAR__DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     SCROLLBAR_Callback
    654          
    655          #else /* avoid empty object files */
    656          
    657          void SCROLLBAR_C(void);
    658          void SCROLLBAR_C(void){}
    659          
    660          #endif  /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     SCROLLBAR_AddValue               16
     SCROLLBAR_Callback               16
     SCROLLBAR_CreateEx               64
     SCROLLBAR_Dec                    16
     SCROLLBAR_Inc                    16
     SCROLLBAR_SetNumItems            16
     SCROLLBAR_SetPageSize            16
     SCROLLBAR_SetState               24
     SCROLLBAR_SetValue               16
     SCROLLBAR__InvalidatePartner      8
     SCROLLBAR__Rect2VRect             0
     _OnKey                           16
     _OnTimer                         24
     _OnTouch                         80


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     SCROLLBAR__DefaultProps        24
     SCROLLBAR__DefaultWidth
     SCROLLBAR__pSkinDefault
     _OnTouch                      856
     _OnKey                        332
     _OnTimer                      300
     SCROLLBAR__Rect2VRect          76
     SCROLLBAR__InvalidatePartner   36
     SCROLLBAR_Callback            372
     SCROLLBAR_CreateEx            352
     SCROLLBAR_Dec                 148
     SCROLLBAR_Inc                 148
     SCROLLBAR_AddValue            148
     SCROLLBAR_SetValue            128
     SCROLLBAR_SetNumItems          76
     SCROLLBAR_SetPageSize          76
     SCROLLBAR_SetState            228
     ??DataTable0                    4
     ??DataTable0_1                  4

 
    24 bytes in section .data
 3 284 bytes in section .text
 
 3 284 bytes of CODE memory
    24 bytes of DATA memory

Errors: none
Warnings: none
