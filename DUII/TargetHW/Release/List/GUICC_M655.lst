###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:34 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_M655.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_M655.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_M655.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_M655.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_M655.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_M655.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          
     32          #define B_BITS 6
     33          #define G_BITS 5
     34          #define R_BITS 5
     35          
     36          #define R_MASK ((1 << R_BITS) -1)
     37          #define G_MASK ((1 << G_BITS) -1)
     38          #define B_MASK ((1 << B_BITS) -1)
     39          
     40          /*********************************************************************
     41          *
     42          *       Static code,
     43          *
     44          *       LCD_FIXEDPALETTE == 655, 65536 colors, RRRRRGGGGGBBBBBB
     45          *
     46          **********************************************************************
     47          */
     48          /*********************************************************************
     49          *
     50          *       _Color2Index_M655
     51          */

   \                                 In section .text, align 4, keep-with-next
     52          static unsigned _Color2Index_M655(LCD_COLOR Color) {
     53            int r, g, b;
     54            r = (Color >> (8  - R_BITS)) & R_MASK;
     55            g = (Color >> (16 - G_BITS)) & G_MASK;
     56            b = (Color >> (24 - B_BITS)) & B_MASK;
     57            return b + (g << B_BITS) + (r << (G_BITS + B_BITS));
   \                     _Color2Index_M655:
   \   00000000   3F10A0E3           MOV      R1,#+63
   \   00000004   1F20A0E3           MOV      R2,#+31
   \   00000008   201901E0           AND      R1,R1,R0, LSR #+18
   \   0000000C   A02502E0           AND      R2,R2,R0, LSR #+11
   \   00000010   021381E0           ADD      R1,R1,R2, LSL #+6
   \   00000014   1F20A0E3           MOV      R2,#+31
   \   00000018   A00102E0           AND      R0,R2,R0, LSR #+3
   \   0000001C   800581E0           ADD      R0,R1,R0, LSL #+11
   \   00000020   1EFF2FE1           BX       LR               ;; return
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       _Index2Color_M655
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static LCD_COLOR _Index2Color_M655(unsigned Index) {
     65            unsigned int r, g, b;
     66            /* Separate the color masks */
     67            b = Index                        & B_MASK;
     68            g = (Index >> B_BITS)            & G_MASK;
     69            r = (Index >> (B_BITS + G_BITS)) & R_MASK;
     70            /* Convert the color masks */
     71            r = r * 255 / R_MASK;
     72            g = g * 255 / G_MASK;
     73            b = b * 255 / B_MASK;
     74            return r + (g << 8) + (((U32)b) << 16);
   \                     _Index2Color_M655:
   \   00000000   1F10A0E3           MOV      R1,#+31
   \   00000004   A01501E0           AND      R1,R1,R0, LSR #+11
   \   00000008   ........           LDR      R3,??DataTable1  ;; 0x84210842
   \   0000000C   011461E0           RSB      R1,R1,R1, LSL #+8
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   9133A2E0           UMLAL    R3,R2,R1,R3
   \   00000018   1F10A0E3           MOV      R1,#+31
   \   0000001C   201301E0           AND      R1,R1,R0, LSR #+6
   \   00000020   ........           LDR      R12,??DataTable1  ;; 0x84210842
   \   00000024   011461E0           RSB      R1,R1,R1, LSL #+8
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   91CCA3E0           UMLAL    R12,R3,R1,R12
   \   00000030   3F0000E2           AND      R0,R0,#0x3F
   \   00000034   2312A0E1           LSR      R1,R3,#+4
   \   00000038   0114A0E1           LSL      R1,R1,#+8
   \   0000003C   221281E0           ADD      R1,R1,R2, LSR #+4
   \   00000040   ........           LDR      R3,??DataTable1_1  ;; 0x82082082
   \   00000044   000460E0           RSB      R0,R0,R0, LSL #+8
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   9033A2E0           UMLAL    R3,R2,R0,R3
   \   00000050   A202A0E1           LSR      R0,R2,#+5
   \   00000054   000881E0           ADD      R0,R1,R0, LSL #+16
   \   00000058   1EFF2FE1           BX       LR               ;; return
     75          }
     76          
     77          /*********************************************************************
     78          *
     79          *       _GetIndexMask_M655
     80          */

   \                                 In section .text, align 4, keep-with-next
     81          static unsigned _GetIndexMask_M655(void) {
     82            return 0xffff;
   \                     _GetIndexMask_M655:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   FF0C80E3           ORR      R0,R0,#0xFF00
   \   00000008   1EFF2FE1           BX       LR               ;; return
     83          }
     84          
     85          /*********************************************************************
     86          *
     87          *       Public data
     88          *
     89          **********************************************************************
     90          */
     91          /*********************************************************************
     92          *
     93          *       LCD_API_ColorConv_M655
     94          *
     95          * Purpose
     96          *   API table for this color conversion mode. Only used by memory
     97          *   devices in this mode.
     98          */

   \                                 In section .rodata, align 4, keep-with-next
     99          const LCD_API_COLOR_CONV LCD_API_ColorConv_M655 = {
   \                     LCD_API_ColorConv_M655:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_M655, _Index2Color_M655, _GetIndexMask_M655
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   42082184           DC32     0x84210842

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   82200882           DC32     0x82082082
    100            _Color2Index_M655,
    101            _Index2Color_M655,
    102            _GetIndexMask_M655
    103          };
    104          
    105          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _Color2Index_M655       0
     _GetIndexMask_M655      0
     _Index2Color_M655       0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Color2Index_M655        36
     _Index2Color_M655        92
     _GetIndexMask_M655       12
     LCD_API_ColorConv_M655   12
     ??DataTable1              4
     ??DataTable1_1            4

 
  12 bytes in section .rodata
 148 bytes in section .text
 
 148 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
