###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_SelectLayer.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_SelectLayer.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_SelectLayer.lst        #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_SelectLayer.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_SelectLayer.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_SelectLayer.c.C
     19          Purpose     : Selection of Layer
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28            #include "WM_Intern_ConfDep.h"
     29          #endif
     30          
     31          /*********************************************************************
     32          *
     33          *       Static data
     34          *
     35          **********************************************************************
     36          */

   \                                 In section .bss, align 4
     37          static unsigned  _aCursorLayer[GUI_NUM_LAYERS];
   \                     _aCursorLayer:
   \   00000000                      DS8 64
     38          
     39          /*********************************************************************
     40          *
     41          *       Public code
     42          *
     43          **********************************************************************
     44          */
     45          /*********************************************************************
     46          *
     47          *       GUI_SelectLayer
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          unsigned GUI_SelectLayer(unsigned Index) {
   \                     GUI_SelectLayer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     50            unsigned OldIndex;
     51            OldIndex = GUI_Context.SelLayer;
   \   00000004   ........           LDR      R5,??DataTable2
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1160D5E5           LDRB     R6,[R5, #+17]
     52            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
     53            if (Index < GUI_NUM_LAYERS) {
   \   00000014   100054E3           CMP      R4,#+16
   \   00000018   0100002A           BCS      ??GUI_SelectLayer_0
     54              GUI_Context.SelLayer = Index;
   \   0000001C   1140C5E5           STRB     R4,[R5, #+17]
     55              GUI_SelectLCD();
   \   00000020   ........           BL       GUI_SelectLCD
     56            }
     57            #if (GUI_WINSUPPORT)
     58              #if (GUI_NUM_LAYERS > 1)
     59                WM__TOUCHED_LAYER = Index;
   \                     ??GUI_SelectLayer_0:
   \   00000024   ........           LDR      R0,??DataTable2_1
   \   00000028   004080E5           STR      R4,[R0, #+0]
     60              #endif
     61            #endif
     62            GUI_UNLOCK();
   \   0000002C   ........           BL       GUI_Unlock
     63            return OldIndex;
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
     64          }
     65          
     66          /*********************************************************************
     67          *
     68          *       GUI_AssignCursorLayer
     69          */

   \                                 In section .text, align 4, keep-with-next
     70          void GUI_AssignCursorLayer(unsigned LayerIndex, unsigned CursorLayer) {
   \                     GUI_AssignCursorLayer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     71            GUI_DEVICE * pDevice;
     72          
     73            pDevice = GUI_DEVICE__GetpDriver(LayerIndex);
   \   00000010   ........           BL       GUI_DEVICE__GetpDriver
   \   00000014   00008DE5           STR      R0,[SP, #+0]
     74            if (pDevice) {
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0800000A           BEQ      ??GUI_AssignCursorLayer_0
     75              if (pDevice->pDeviceAPI->pfGetDevFunc(&pDevice, LCD_DEVFUNC_SETPOS)) {
   \   00000020   00209DE5           LDR      R2,[SP, #+0]
   \   00000024   0310A0E3           MOV      R1,#+3
   \   00000028   0C2092E5           LDR      R2,[R2, #+12]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   242092E5           LDR      R2,[R2, #+36]
   \   00000034   32FF2FE1           BLX      R2
   \   00000038   000050E3           CMP      R0,#+0
     76                _aCursorLayer[LayerIndex] = CursorLayer;
   \   0000003C   ........           LDRNE    R0,??DataTable2_2
   \   00000040   04518017           STRNE    R5,[R0, +R4, LSL #+2]
     77              }
     78            }
     79          }
   \                     ??GUI_AssignCursorLayer_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
     80          
     81          /*********************************************************************
     82          *
     83          *       GUI_GetCursorLayer
     84          */

   \                                 In section .text, align 4, keep-with-next
     85          unsigned GUI_GetCursorLayer(unsigned Index) {
     86            unsigned r;
     87            r = 0;
   \                     GUI_GetCursorLayer:
   \   00000000   0010A0E3           MOV      R1,#+0
     88            if (Index < GUI_COUNTOF(_aCursorLayer)) {
   \   00000004   100050E3           CMP      R0,#+16
     89              r = _aCursorLayer[Index];
   \   00000008   ........           LDRCC    R1,??DataTable2_2
   \   0000000C   00119137           LDRCC    R1,[R1, +R0, LSL #+2]
     90            }
     91            return r;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       GUI_SetLayerPosEx
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          int GUI_SetLayerPosEx(unsigned LayerIndex, int xPos, int yPos) {
   \                     GUI_SetLayerPosEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     99            int r;
    100            
    101            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    102            r = LCD_SetPosEx(LayerIndex, xPos, yPos);
   \   00000014   0620A0E1           MOV      R2,R6
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       LCD_SetPosEx
   \   00000024   0040A0E1           MOV      R4,R0
    103            GUI_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    104            return r;
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   7080BDE8           POP      {R4-R6,PC}       ;; return
    105          }
    106          
    107          /*********************************************************************
    108          *
    109          *       GUI_SetLayerSizeEx
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          int GUI_SetLayerSizeEx(unsigned LayerIndex, int xSize, int ySize) {
   \                     GUI_SetLayerSizeEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    112            int r;
    113            
    114            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    115            r = LCD_SetSizeEx(LayerIndex, xSize, ySize);
   \   00000014   0620A0E1           MOV      R2,R6
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       LCD_SetSizeEx
   \   00000024   0040A0E1           MOV      R4,R0
    116            GUI_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    117            return r;
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   7080BDE8           POP      {R4-R6,PC}       ;; return
    118          }
    119          
    120          /*********************************************************************
    121          *
    122          *       GUI_SetLayerVisEx
    123          */

   \                                 In section .text, align 4, keep-with-next
    124          int GUI_SetLayerVisEx(unsigned LayerIndex, int OnOff) {
   \                     GUI_SetLayerVisEx:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    125            int r;
    126            
    127            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    128            r = LCD_SetVisEx(LayerIndex, OnOff);
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       LCD_SetVisEx
   \   00000020   0040A0E1           MOV      R4,R0
    129            GUI_UNLOCK();
   \   00000024   ........           BL       GUI_Unlock
    130            return r;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    131          }
    132          
    133          /*********************************************************************
    134          *
    135          *       GUI_SetLayerAlphaEx
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          int GUI_SetLayerAlphaEx(unsigned LayerIndex, int Alpha) {
   \                     GUI_SetLayerAlphaEx:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    138            int r;
    139            
    140            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    141            r = LCD_SetAlphaEx(LayerIndex, Alpha);
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       LCD_SetAlphaEx
   \   00000020   0040A0E1           MOV      R4,R0
    142            GUI_UNLOCK();
   \   00000024   ........           BL       GUI_Unlock
    143            return r;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    144          }
    145          
    146          /*********************************************************************
    147          *
    148          *       GUI_GetLayerPosEx
    149          */

   \                                 In section .text, align 4, keep-with-next
    150          void GUI_GetLayerPosEx(unsigned LayerIndex, int * pxPos, int * pyPos) {
   \                     GUI_GetLayerPosEx:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    151            int r;
    152            
    153            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    154            r = LCD_GetPosEx(LayerIndex, pxPos, pyPos);
    155            if (r) {
   \   00000014   0620A0E1           MOV      R2,R6
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       LCD_GetPosEx
   \   00000024   000050E3           CMP      R0,#+0
    156              *pxPos = 0;
   \   00000028   0000A013           MOVNE    R0,#+0
   \   0000002C   00008515           STRNE    R0,[R5, #+0]
    157              *pyPos = 0;
   \   00000030   00008615           STRNE    R0,[R6, #+0]
    158            }
    159            GUI_UNLOCK();
   \   00000034   ........           BL       GUI_Unlock
    160          }
   \   00000038   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     WM__TouchedLayer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     _aCursorLayer
    161          
    162          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     GUI_AssignCursorLayer     16
     GUI_GetCursorLayer         0
     GUI_GetLayerPosEx         16
     GUI_SelectLayer           16
     GUI_SetLayerAlphaEx       16
     GUI_SetLayerPosEx         16
     GUI_SetLayerSizeEx        16
     GUI_SetLayerVisEx         16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _aCursorLayer           64
     GUI_SelectLayer         56
     GUI_AssignCursorLayer   76
     GUI_GetCursorLayer      24
     GUI_SetLayerPosEx       52
     GUI_SetLayerSizeEx      52
     GUI_SetLayerVisEx       52
     GUI_SetLayerAlphaEx     52
     GUI_GetLayerPosEx       60
     ??DataTable2             4
     ??DataTable2_1           4
     ??DataTable2_2           4

 
  64 bytes in section .bss
 436 bytes in section .text
 
 436 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: none
