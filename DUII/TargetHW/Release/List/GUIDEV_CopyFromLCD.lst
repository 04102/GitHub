###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_CopyFromLCD.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_CopyFromLCD.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDEV_CopyFromLCD.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDEV_CopyFromLCD.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_CopyFromLCD.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_CopyFromLCD.c
     19          Purpose     : Implementation of memory devices
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /* Memory device capabilities are compiled only if support for them is enabled. */ 
     26          #if GUI_SUPPORT_MEMDEV
     27          
     28          /*********************************************************************
     29          *
     30          *       defines
     31          *
     32          **********************************************************************
     33          */
     34          
     35          #define LCD_LIMIT(Var, Op, Limit) if (Var Op Limit) Var = Limit
     36          
     37          /*********************************************************************
     38          *
     39          *       public code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       GUI_MEMDEV_CopyFromLCD
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          void GUI_MEMDEV_CopyFromLCD(GUI_MEMDEV_Handle hMem) {
   \                     GUI_MEMDEV_CopyFromLCD:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0060A0E1           MOV      R6,R0
     48            GUI_MEMDEV * pDev;
     49            LCD_RECT r;
     50            int y;
     51            int XMax;
     52            unsigned BitsPerPixelDev;
     53            unsigned BitsPerPixelLCD;
     54            unsigned BytesPerPixelDev;
     55            unsigned BytesPerPixelLCD;
     56            GUI_USAGE * pUsage;
     57            GUI_MEMDEV_Handle hMemOld;
     58            LCD_PIXELINDEX * pData;
     59            tLCDDEV_Index2Color *   pfIndex2Color_DEV;
     60            tLCDDEV_Index2Color *   pfIndex2Color_LCD;
     61          
     62            GUI_LOCK();
   \   0000000C   ........           BL       GUI_Lock
     63            /* Make sure memory handle is valid */
     64            if (!hMem) {
   \   00000010   000056E3           CMP      R6,#+0
     65              hMem = GUI_Context.hDevData;
   \   00000014   C4029F05           LDREQ    R0,??GUI_MEMDEV_CopyFromLCD_0
   \   00000018   88609005           LDREQ    R6,[R0, #+136]
     66            }
     67            if (hMem) {
   \   0000001C   000056E3           CMP      R6,#+0
   \   00000020   AB00000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_1
     68              pDev    = (GUI_MEMDEV *)GUI_LOCK_H(hMem);
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           BL       GUI_ALLOC_LockH
     69              pUsage  = 0;
     70              hMemOld = GUI_Context.hDevData;
   \   0000002C   AC829FE5           LDR      R8,??GUI_MEMDEV_CopyFromLCD_0
   \   00000030   0040A0E1           MOV      R4,R0
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   885098E5           LDR      R5,[R8, #+136]
     71              GUI_MEMDEV_Select(hMem);
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       GUI_MEMDEV_Select
     72              if (pDev->hUsage) {
   \   00000044   140094E5           LDR      R0,[R4, #+20]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_2
     73                pUsage = GUI_USAGE_H2P(pDev->hUsage);
   \   00000050   ........           BL       GUI_ALLOC_h2p
   \   00000054   0070A0E1           MOV      R7,R0
     74              }
     75              /*
     76              * Get number of bytes per pixel (Device)
     77              */
     78              BitsPerPixelDev = GUI_MEMDEV_GetBitsPerPixel(hMem);
   \                     ??GUI_MEMDEV_CopyFromLCD_2:
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           BL       GUI_MEMDEV_GetBitsPerPixel
     79              if (BitsPerPixelDev <= 8) {
   \   00000060   090050E3           CMP      R0,#+9
     80                BytesPerPixelDev = 1;
   \   00000064   0110A033           MOVCC    R1,#+1
   \   00000068   0200003A           BCC      ??GUI_MEMDEV_CopyFromLCD_3
     81              } else if (BitsPerPixelDev <= 16) {
   \   0000006C   110050E3           CMP      R0,#+17
     82                BytesPerPixelDev = 2;
   \   00000070   0210A033           MOVCC    R1,#+2
     83              } else {
     84                BytesPerPixelDev = 4;
   \   00000074   0410A023           MOVCS    R1,#+4
   \                     ??GUI_MEMDEV_CopyFromLCD_3:
   \   00000078   18108DE5           STR      R1,[SP, #+24]
     85              }
     86              /*
     87              * Get number of bytes per pixel (LCD)
     88              */
     89              BitsPerPixelLCD = LCD_GetBitsPerPixel();
   \   0000007C   ........           BL       LCD_GetBitsPerPixel
     90              if (BitsPerPixelLCD <= 8) {
   \   00000080   090050E3           CMP      R0,#+9
     91                BytesPerPixelLCD = 1;
   \   00000084   0110A033           MOVCC    R1,#+1
   \   00000088   0200003A           BCC      ??GUI_MEMDEV_CopyFromLCD_4
     92              } else if (BitsPerPixelLCD <= 16) {
   \   0000008C   110050E3           CMP      R0,#+17
     93                BytesPerPixelLCD = 2;
   \   00000090   0210A033           MOVCC    R1,#+2
     94              } else {
     95                BytesPerPixelLCD = 4;
   \   00000094   0410A023           MOVCS    R1,#+4
   \                     ??GUI_MEMDEV_CopyFromLCD_4:
   \   00000098   14108DE5           STR      R1,[SP, #+20]
     96              }
     97              GUI_MEMDEV_Select(hMemOld);
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           BL       GUI_MEMDEV_Select
     98              /*
     99              * Do operation only if color depth of device > display
    100              */
    101              if (BytesPerPixelLCD <= BytesPerPixelDev) {
   \   000000A4   18009DE5           LDR      R0,[SP, #+24]
   \   000000A8   14109DE5           LDR      R1,[SP, #+20]
   \   000000AC   010050E1           CMP      R0,R1
   \   000000B0   8600003A           BCC      ??GUI_MEMDEV_CopyFromLCD_5
    102                /* Get bounding rectangle */
    103                r.y0 = pDev->y0;
   \   000000B4   F600D4E1           LDRSH    R0,[R4, #+6]
   \   000000B8   10008DE5           STR      R0,[SP, #+16]
    104                r.x0 = pDev->x0;
   \   000000BC   F410D4E1           LDRSH    R1,[R4, #+4]
    105                r.x1 = pDev->x0 + pDev->XSize - 1;
   \   000000C0   F830D4E1           LDRSH    R3,[R4, #+8]
   \   000000C4   0150A0E1           MOV      R5,R1
   \   000000C8   011083E0           ADD      R1,R3,R1
   \   000000CC   011041E2           SUB      R1,R1,#+1
   \   000000D0   0118A0E1           LSL      R1,R1,#+16
   \   000000D4   4118A0E1           ASR      R1,R1,#+16
   \   000000D8   0C108DE5           STR      R1,[SP, #+12]
    106                r.y1 = pDev->y0 + pDev->YSize - 1;
   \   000000DC   FA20D4E1           LDRSH    R2,[R4, #+10]
    107                /* Make sure bounds are within LCD area so we can call driver directly */
    108                LCD_LIMIT(r.x0, <, 0);
   \   000000E0   000055E3           CMP      R5,#+0
   \   000000E4   0050A043           MOVMI    R5,#+0
   \   000000E8   000082E0           ADD      R0,R2,R0
   \   000000EC   010040E2           SUB      R0,R0,#+1
   \   000000F0   0008A0E1           LSL      R0,R0,#+16
   \   000000F4   4008A0E1           ASR      R0,R0,#+16
   \   000000F8   08008DE5           STR      R0,[SP, #+8]
    109                LCD_LIMIT(r.y0, <, 0);
   \   000000FC   10009DE5           LDR      R0,[SP, #+16]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0010A043           MOVMI    R1,#+0
   \   00000108   10108D45           STRMI    R1,[SP, #+16]
    110                LCD_LIMIT(r.x1, >, LCD_GetVXSize() - 1);
   \   0000010C   ........           BL       LCD_GetVXSize
   \   00000110   0C109DE5           LDR      R1,[SP, #+12]
   \   00000114   010040E2           SUB      R0,R0,#+1
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   040000AA           BGE      ??GUI_MEMDEV_CopyFromLCD_6
   \   00000120   ........           BL       LCD_GetVXSize
   \   00000124   010040E2           SUB      R0,R0,#+1
   \   00000128   0008A0E1           LSL      R0,R0,#+16
   \   0000012C   4008A0E1           ASR      R0,R0,#+16
   \   00000130   0C008DE5           STR      R0,[SP, #+12]
    111                LCD_LIMIT(r.y1, >, LCD_GetVYSize() - 1);
   \                     ??GUI_MEMDEV_CopyFromLCD_6:
   \   00000134   ........           BL       LCD_GetVYSize
   \   00000138   08109DE5           LDR      R1,[SP, #+8]
   \   0000013C   010040E2           SUB      R0,R0,#+1
   \   00000140   010050E1           CMP      R0,R1
   \   00000144   040000AA           BGE      ??GUI_MEMDEV_CopyFromLCD_7
   \   00000148   ........           BL       LCD_GetVYSize
   \   0000014C   010040E2           SUB      R0,R0,#+1
   \   00000150   0008A0E1           LSL      R0,R0,#+16
   \   00000154   4008A0E1           ASR      R0,R0,#+16
   \   00000158   08008DE5           STR      R0,[SP, #+8]
    112                XMax = r.x1;
   \                     ??GUI_MEMDEV_CopyFromLCD_7:
   \   0000015C   0C109DE5           LDR      R1,[SP, #+12]
    113                for (y = r.y0; y <= r.y1; y++) {
   \   00000160   10609DE5           LDR      R6,[SP, #+16]
   \   00000164   08009DE5           LDR      R0,[SP, #+8]
   \   00000168   1C108DE5           STR      R1,[SP, #+28]
   \   0000016C   060050E1           CMP      R0,R6
   \   00000170   1E0000BA           BLT      ??GUI_MEMDEV_CopyFromLCD_8
   \   00000174   0090A0E3           MOV      R9,#+0
    114                  pData = (LCD_PIXELINDEX *)GUI_MEMDEV__XY2PTREx(pDev, 0, y - r.y0);
   \                     ??GUI_MEMDEV_CopyFromLCD_9:
   \   00000178   0920A0E1           MOV      R2,R9
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   ........           BL       GUI_MEMDEV__XY2PTREx
    115                  LCD_ReadRect(r.x0, y, XMax, y, (LCD_PIXELINDEX *)pData, GUI_Context.apDevice[GUI_Context.SelLayer]);
   \   00000188   1110D8E5           LDRB     R1,[R8, #+17]
   \   0000018C   0630A0E1           MOV      R3,R6
   \   00000190   1C209DE5           LDR      R2,[SP, #+28]
   \   00000194   011188E0           ADD      R1,R8,R1, LSL #+2
   \   00000198   481091E5           LDR      R1,[R1, #+72]
   \   0000019C   00008DE5           STR      R0,[SP, #+0]
   \   000001A0   04108DE5           STR      R1,[SP, #+4]
   \   000001A4   0610A0E1           MOV      R1,R6
   \   000001A8   0500A0E1           MOV      R0,R5
   \   000001AC   ........           BL       LCD_ReadRect
    116                  if (pUsage) {
   \   000001B0   000057E3           CMP      R7,#+0
   \   000001B4   0800000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_10
    117                    GUI_USAGE_AddHLine(pUsage, r.x0, y, r.x1 - r.x0 + 1);
   \   000001B8   0C009DE5           LDR      R0,[SP, #+12]
   \   000001BC   08C097E5           LDR      R12,[R7, #+8]
   \   000001C0   050040E0           SUB      R0,R0,R5
   \   000001C4   013080E2           ADD      R3,R0,#+1
   \   000001C8   0620A0E1           MOV      R2,R6
   \   000001CC   0510A0E1           MOV      R1,R5
   \   000001D0   0700A0E1           MOV      R0,R7
   \   000001D4   04C09CE5           LDR      R12,[R12, #+4]
   \   000001D8   3CFF2FE1           BLX      R12
    118                  }
    119                }
   \                     ??GUI_MEMDEV_CopyFromLCD_10:
   \   000001DC   08009DE5           LDR      R0,[SP, #+8]
   \   000001E0   016086E2           ADD      R6,R6,#+1
   \   000001E4   019089E2           ADD      R9,R9,#+1
   \   000001E8   060050E1           CMP      R0,R6
   \   000001EC   E1FFFFAA           BGE      ??GUI_MEMDEV_CopyFromLCD_9
    120                pfIndex2Color_DEV = pDev->pDevice->pColorConvAPI->pfIndex2Color;
   \                     ??GUI_MEMDEV_CopyFromLCD_8:
   \   000001F0   000094E5           LDR      R0,[R4, #+0]
   \   000001F4   100090E5           LDR      R0,[R0, #+16]
   \   000001F8   046090E5           LDR      R6,[R0, #+4]
    121                pfIndex2Color_LCD = LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer);
   \   000001FC   1100D8E5           LDRB     R0,[R8, #+17]
   \   00000200   ........           BL       LCD_GetpfIndex2ColorEx
   \   00000204   0070A0E1           MOV      R7,R0
    122                /*
    123                * Conversion required if color conversion routines are different
    124                */
    125                if (pfIndex2Color_DEV != pfIndex2Color_LCD) {
   \   00000208   070056E1           CMP      R6,R7
   \   0000020C   2F00000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_5
    126                  U32 Color;
    127                  unsigned NumPixels;
    128                  /*
    129                  * Currently only 32 bpp devices are supported
    130                  */
    131                  if (BytesPerPixelDev == 4) {
   \   00000210   18009DE5           LDR      R0,[SP, #+24]
   \   00000214   040050E3           CMP      R0,#+4
   \   00000218   2C00001A           BNE      ??GUI_MEMDEV_CopyFromLCD_5
    132                    for (y = r.y0; y <= r.y1; y++) {
   \   0000021C   10609DE5           LDR      R6,[SP, #+16]
   \   00000220   08009DE5           LDR      R0,[SP, #+8]
   \   00000224   060050E1           CMP      R0,R6
   \   00000228   280000BA           BLT      ??GUI_MEMDEV_CopyFromLCD_5
   \   0000022C   0080A0E3           MOV      R8,#+0
    133                      U32 * pDst;
    134                      NumPixels = r.x1 - r.x0 + 1;
   \                     ??GUI_MEMDEV_CopyFromLCD_11:
   \   00000230   0C009DE5           LDR      R0,[SP, #+12]
    135                      pDst = (U32 *)GUI_MEMDEV__XY2PTREx(pDev, 0, y - r.y0) + NumPixels;
   \   00000234   0820A0E1           MOV      R2,R8
   \   00000238   050040E0           SUB      R0,R0,R5
   \   0000023C   01A080E2           ADD      R10,R0,#+1
   \   00000240   0010A0E3           MOV      R1,#+0
   \   00000244   0400A0E1           MOV      R0,R4
   \   00000248   ........           BL       GUI_MEMDEV__XY2PTREx
   \   0000024C   0A9180E0           ADD      R9,R0,R10, LSL #+2
    136                      switch (BytesPerPixelLCD) {
   \   00000250   14009DE5           LDR      R0,[SP, #+20]
   \   00000254   020050E2           SUBS     R0,R0,#+2
   \   00000258   0200000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_12
   \   0000025C   020050E2           SUBS     R0,R0,#+2
   \   00000260   0B00000A           BEQ      ??GUI_MEMDEV_CopyFromLCD_13
   \   00000264   140000EA           B        ??GUI_MEMDEV_CopyFromLCD_14
    137                      case 2: {
    138                          U16 * pSrc;
    139                          U16 PixelIndex;
    140                          pSrc = (U16 *)GUI_MEMDEV__XY2PTREx(pDev, 0, y - r.y0) + NumPixels;
   \                     ??GUI_MEMDEV_CopyFromLCD_12:
   \   00000268   0820A0E1           MOV      R2,R8
   \   0000026C   0010A0E3           MOV      R1,#+0
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   ........           BL       GUI_MEMDEV__XY2PTREx
   \   00000278   8AB080E0           ADD      R11,R0,R10, LSL #+1
    141                          do {
    142                            PixelIndex = *(--pSrc);
    143                            Color = pfIndex2Color_LCD(PixelIndex);
    144                            *(--pDst) = Color;
   \                     ??GUI_MEMDEV_CopyFromLCD_15:
   \   0000027C   B2007BE1           LDRH     R0,[R11, #-2]!
   \   00000280   37FF2FE1           BLX      R7
   \   00000284   040029E5           STR      R0,[R9, #-4]!
    145                          } while (--NumPixels);
   \   00000288   01A05AE2           SUBS     R10,R10,#+1
   \   0000028C   FAFFFF1A           BNE      ??GUI_MEMDEV_CopyFromLCD_15
   \   00000290   090000EA           B        ??GUI_MEMDEV_CopyFromLCD_14
    146                        }
    147                        break;
    148                      case 4: {
    149                          U32 * pSrc;
    150                          U32 PixelIndex;
    151                          pSrc = (U32 *)GUI_MEMDEV__XY2PTREx(pDev, 0, y - r.y0) + NumPixels;
   \                     ??GUI_MEMDEV_CopyFromLCD_13:
   \   00000294   0820A0E1           MOV      R2,R8
   \   00000298   0010A0E3           MOV      R1,#+0
   \   0000029C   0400A0E1           MOV      R0,R4
   \   000002A0   ........           BL       GUI_MEMDEV__XY2PTREx
   \   000002A4   0AB180E0           ADD      R11,R0,R10, LSL #+2
    152                          do {
    153                            PixelIndex = *(--pSrc);
    154                            Color = pfIndex2Color_LCD(PixelIndex);
    155                            *(--pDst) = Color;
   \                     ??GUI_MEMDEV_CopyFromLCD_16:
   \   000002A8   04003BE5           LDR      R0,[R11, #-4]!
   \   000002AC   37FF2FE1           BLX      R7
   \   000002B0   040029E5           STR      R0,[R9, #-4]!
    156                          } while (--NumPixels);
   \   000002B4   01A05AE2           SUBS     R10,R10,#+1
   \   000002B8   FAFFFF1A           BNE      ??GUI_MEMDEV_CopyFromLCD_16
    157                        }
    158                        break;
    159                      }
    160                    }
   \                     ??GUI_MEMDEV_CopyFromLCD_14:
   \   000002BC   08009DE5           LDR      R0,[SP, #+8]
   \   000002C0   016086E2           ADD      R6,R6,#+1
   \   000002C4   018088E2           ADD      R8,R8,#+1
   \   000002C8   060050E1           CMP      R0,R6
   \   000002CC   D7FFFFAA           BGE      ??GUI_MEMDEV_CopyFromLCD_11
    161                  }
    162                }
    163              }
    164              GUI_UNLOCK_H(pDev);
   \                     ??GUI_MEMDEV_CopyFromLCD_5:
   \   000002D0   ........           BL       GUI_ALLOC_UnlockH
    165            }
    166            GUI_UNLOCK();
   \                     ??GUI_MEMDEV_CopyFromLCD_1:
   \   000002D4   24D08DE2           ADD      SP,SP,#+36
   \   000002D8   F04FBDE8           POP      {R4-R11,LR}
   \   000002DC   ........           B        GUI_Unlock       ;; tailcall
   \                     ??GUI_MEMDEV_CopyFromLCD_0:
   \   000002E0   ........           DC32     GUI_Context
    167          }
    168          
    169          #else
    170          
    171          void GUI_MEMDEV_CopyFromLCD_C(void);
    172          void GUI_MEMDEV_CopyFromLCD_C(void) {} /* avoid empty object files */
    173          
    174          #endif /* GUI_MEMDEV_SUPPORT */
    175          
    176          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     GUI_MEMDEV_CopyFromLCD     72


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     GUI_MEMDEV_CopyFromLCD  740

 
 740 bytes in section .text
 
 740 bytes of CODE memory

Errors: none
Warnings: none
