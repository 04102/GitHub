###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_16.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_16.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDRV_Lin_OSX_16.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDRV_Lin_OSX_16.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_16.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OSX_16.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y * (vxSizePhys >> 1) + ((U32)x >> 1))
     91          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y *  vxSizePhys       +       x      )
     92          
     93          #define LOG2PHYS_X(vxSize, vySize, x, y) vySize - 1 - (y)
     94          #define LOG2PHYS_Y(vxSize, vySize, x, y) x
     95          
     96          /*********************************************************************
     97          *
     98          *       Types
     99          *
    100          **********************************************************************
    101          */
    102          typedef struct {
    103            U32 VRAMAddr;
    104            int xSize, ySize;
    105            int vxSize, vySize;
    106            int vxSizePhys;
    107            int xPos, yPos;
    108            int Alpha;
    109            int IsVisible;
    110            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    111          } DRIVER_CONTEXT;
    112          
    113          /*********************************************************************
    114          *
    115          *       Static functions
    116          *
    117          **********************************************************************
    118          */
    119          /*********************************************************************
    120          *
    121          *       _SetPixelIndex
    122          *
    123          * Purpose:
    124          *   Sets the index of the given pixel. The upper layers
    125          *   calling this routine make sure that the coordinates are in range, so
    126          *   that no check on the parameters needs to be performed.
    127          */

   \                                 In section .text, align 4, keep-with-next
    128          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   00402DE9           PUSH     {LR}
    129            DRIVER_CONTEXT * pContext;
    130            U32 Off;
    131            int xPhys, yPhys;
    132          
    133            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    134            //
    135            //  Convert logical into physical coordinates
    136            //
    137            xPhys = LOG2PHYS_X(pContext->vxSize, pContext->vySize, x, y);
    138            yPhys = LOG2PHYS_Y(pContext->vxSize, pContext->vySize, x, y);
    139            //
    140            // Write into hardware
    141            //
    142            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    143            Off      = XY2OFF16(pContext->vxSizePhys, xPhys, yPhys);
    144            WRITE_MEM16(pContext->VRAMAddr, Off, PixelIndex);
   \   00000008   14C090E5           LDR      R12,[R0, #+20]
   \   0000000C   10E090E5           LDR      LR,[R0, #+16]
   \   00000010   9CE121E0           MLA      R1,R12,R1,LR
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   011041E2           SUB      R1,R1,#+1
   \   0000001C   021041E0           SUB      R1,R1,R2
   \   00000020   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000024   B030C0E1           STRH     R3,[R0, #+0]
    145          }
   \   00000028   0080BDE8           POP      {PC}             ;; return
    146          
    147          /*********************************************************************
    148          *
    149          *       _GetPixelIndex
    150          *
    151          * Purpose:
    152          *   Returns the index of the given pixel. The upper layers
    153          *   calling this routine make sure that the coordinates are in range, so
    154          *   that no check on the parameters needs to be performed.
    155          */

   \                                 In section .text, align 4, keep-with-next
    156          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    157            DRIVER_CONTEXT * pContext;
    158            U32 Off;
    159            LCD_PIXELINDEX PixelIndex;
    160            int xPhys, yPhys;
    161          
    162            pContext   = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    163            //
    164            //  Convert logical into physical coordinates
    165            //
    166            xPhys = LOG2PHYS_X(pContext->vxSize, pContext->vySize, x, y);
    167            yPhys = LOG2PHYS_Y(pContext->vxSize, pContext->vySize, x, y);
    168            //
    169            // Read from hardware
    170            //
    171            Off        = XY2OFF16(pContext->vxSizePhys, xPhys, yPhys);
    172            PixelIndex = READ_MEM16(pContext->VRAMAddr, Off);
    173            return PixelIndex;
   \   00000004   143090E5           LDR      R3,[R0, #+20]
   \   00000008   10C090E5           LDR      R12,[R0, #+16]
   \   0000000C   93C121E0           MLA      R1,R3,R1,R12
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   021041E0           SUB      R1,R1,R2
   \   0000001C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000020   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000024   1EFF2FE1           BX       LR               ;; return
    174          }
    175          
    176          /*********************************************************************
    177          *
    178          *       _XorPixel
    179          */

   \                                 In section .text, align 4, keep-with-next
    180          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    181            LCD_PIXELINDEX PixelIndex;
    182            LCD_PIXELINDEX IndexMask;
    183            
    184            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080096E5           LDR      R0,[R6, #+8]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   141090E5           LDR      R1,[R0, #+20]
   \   00000018   102090E5           LDR      R2,[R0, #+16]
   \   0000001C   912422E0           MLA      R2,R1,R4,R2
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   011042E2           SUB      R1,R2,#+1
   \   00000028   051041E0           SUB      R1,R1,R5
   \   0000002C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000030   B070D0E1           LDRH     R7,[R0, #+0]
    185            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000034   100096E5           LDR      R0,[R6, #+16]
   \   00000038   04D04DE2           SUB      SP,SP,#+4
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
   \   00000040   30FF2FE1           BLX      R0
    186            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000044   081096E5           LDR      R1,[R6, #+8]
   \   00000048   070020E0           EOR      R0,R0,R7
   \   0000004C   142091E5           LDR      R2,[R1, #+20]
   \   00000050   103091E5           LDR      R3,[R1, #+16]
   \   00000054   923423E0           MLA      R3,R2,R4,R3
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   012043E2           SUB      R2,R3,#+1
   \   00000060   052042E0           SUB      R2,R2,R5
   \   00000064   821081E0           ADD      R1,R1,R2, LSL #+1
   \   00000068   B000C1E1           STRH     R0,[R1, #+0]
    187          }
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   F080BDE8           POP      {R4-R7,PC}       ;; return
    188          
    189          /*********************************************************************
    190          *
    191          *       _DrawHLine, not optimized
    192          */

   \                                 In section .text, align 4, keep-with-next
    193          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    194            LCD_PIXELINDEX ColorIndex;
    195          
    196            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1B00000A           BEQ      ??_DrawHLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   2A0000BA           BLT      ??_DrawHLine_1
    197              for (; x0 <= x1; x0++) {
    198                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   101090E5           LDR      R1,[R0, #+16]
   \   00000038   921721E0           MLA      R1,R2,R7,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   051041E0           SUB      R1,R1,R5
   \   00000048   810080E0           ADD      R0,R0,R1, LSL #+1
   \   0000004C   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000050   100094E5           LDR      R0,[R4, #+16]
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   30FF2FE1           BLX      R0
   \   0000005C   081094E5           LDR      R1,[R4, #+8]
   \   00000060   080020E0           EOR      R0,R0,R8
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   102091E5           LDR      R2,[R1, #+16]
   \   0000006C   932722E0           MLA      R2,R3,R7,R2
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   012042E2           SUB      R2,R2,#+1
   \   00000078   052042E0           SUB      R2,R2,R5
   \   0000007C   821081E0           ADD      R1,R1,R2, LSL #+1
    199              }
   \   00000080   017087E2           ADD      R7,R7,#+1
   \   00000084   B000C1E1           STRH     R0,[R1, #+0]
   \   00000088   070056E1           CMP      R6,R7
   \   0000008C   E6FFFFAA           BGE      ??_DrawHLine_2
   \   00000090   F081BDE8           POP      {R4-R8,PC}
    200            } else {
    201              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawHLine_0:
   \   00000094   ........           LDR      R0,??DataTable15_1
   \   00000098   070056E1           CMP      R6,R7
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   0B0000BA           BLT      ??_DrawHLine_1
    202              for (; x0 <= x1; x0++) {
    203                _SetPixelIndex(pDevice, x0, y, ColorIndex);
   \                     ??_DrawHLine_3:
   \   000000A8   081094E5           LDR      R1,[R4, #+8]
   \   000000AC   143091E5           LDR      R3,[R1, #+20]
   \   000000B0   102091E5           LDR      R2,[R1, #+16]
   \   000000B4   932722E0           MLA      R2,R3,R7,R2
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
   \   000000BC   012042E2           SUB      R2,R2,#+1
   \   000000C0   052042E0           SUB      R2,R2,R5
   \   000000C4   821081E0           ADD      R1,R1,R2, LSL #+1
    204              }
   \   000000C8   017087E2           ADD      R7,R7,#+1
   \   000000CC   B000C1E1           STRH     R0,[R1, #+0]
   \   000000D0   070056E1           CMP      R6,R7
   \   000000D4   F3FFFFAA           BGE      ??_DrawHLine_3
    205            }
    206          }
   \                     ??_DrawHLine_1:
   \   000000D8   F081BDE8           POP      {R4-R8,PC}       ;; return
    207          
    208          /*********************************************************************
    209          *
    210          *       _DrawVLine
    211          */

   \                                 In section .text, align 4, keep-with-next
    212          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    213            DRIVER_CONTEXT * pContext;
    214            U32 Off, RemPixels;
    215            U32 Data, ColorMask;
    216            U32 * pDest;
    217            int x0, x1, y;
    218            LCD_PIXELINDEX ColorIndex;
    219          
    220            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1B00000A           BEQ      ??_DrawVLine_0
   \   00000024   050056E1           CMP      R6,R5
   \   00000028   4E0000BA           BLT      ??_DrawVLine_1
    221              for (; y0 <= y1; y0++) {
    222                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   080097E5           LDR      R0,[R7, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   101090E5           LDR      R1,[R0, #+16]
   \   00000038   921421E0           MLA      R1,R2,R4,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   051041E0           SUB      R1,R1,R5
   \   00000048   810080E0           ADD      R0,R0,R1, LSL #+1
   \   0000004C   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000050   100097E5           LDR      R0,[R7, #+16]
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   30FF2FE1           BLX      R0
   \   0000005C   081097E5           LDR      R1,[R7, #+8]
   \   00000060   080020E0           EOR      R0,R0,R8
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   102091E5           LDR      R2,[R1, #+16]
   \   0000006C   932422E0           MLA      R2,R3,R4,R2
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   012042E2           SUB      R2,R2,#+1
   \   00000078   052042E0           SUB      R2,R2,R5
   \   0000007C   821081E0           ADD      R1,R1,R2, LSL #+1
    223              }
   \   00000080   015085E2           ADD      R5,R5,#+1
   \   00000084   B000C1E1           STRH     R0,[R1, #+0]
   \   00000088   050056E1           CMP      R6,R5
   \   0000008C   E6FFFFAA           BGE      ??_DrawVLine_2
   \   00000090   F081BDE8           POP      {R4-R8,PC}
    224            } else {
    225              ColorIndex = LCD__GetColorIndex();
    226              pContext  = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawVLine_0:
   \   00000094   081097E5           LDR      R1,[R7, #+8]
   \   00000098   ........           LDR      R0,??DataTable15_1
    227              x0        = pContext->vySize - y1 - 1;
    228              x1        = pContext->vySize - y0 - 1;
    229              y         = x;
    230              Off       = XY2OFF32(pContext->vxSizePhys, x0, y);
    231              RemPixels = x1 - x0 + 1;
    232              pDest     = OFF2PTR32(pContext->VRAMAddr, Off);
   \   0000009C   14C091E5           LDR      R12,[R1, #+20]
   \   000000A0   103091E5           LDR      R3,[R1, #+16]
   \   000000A4   CCC0A0E1           ASR      R12,R12,#+1
   \   000000A8   062043E0           SUB      R2,R3,R6
   \   000000AC   9C040EE0           MUL      LR,R12,R4
   \   000000B0   053043E0           SUB      R3,R3,R5
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   012042E2           SUB      R2,R2,#+1
   \   000000BC   013043E2           SUB      R3,R3,#+1
   \   000000C0   001091E5           LDR      R1,[R1, #+0]
   \   000000C4   023043E0           SUB      R3,R3,R2
   \   000000C8   A2C08EE0           ADD      R12,LR,R2, LSR #+1
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   013083E2           ADD      R3,R3,#+1
   \   000000D4   0C1181E0           ADD      R1,R1,R12, LSL #+2
    233              //
    234              // First DWORD
    235              //
    236              if (x0 & 1) {
   \   000000D8   010012E3           TST      R2,#0x1
   \   000000DC   0500000A           BEQ      ??_DrawVLine_3
    237                Data = READ_MEM32P(pDest);
    238                #if (LCD_ENDIAN_BIG == 0)
    239                  Data &= 0xFFFF;
    240                  Data |= (((U32)ColorIndex) << 16);
    241                #else
    242                  Data &= 0xFFFF0000;
    243                  Data |= ColorIndex;
    244                #endif
    245                WRITE_MEM32P(pDest, Data);
   \   000000E0   B020D1E1           LDRH     R2,[R1, #+0]
   \   000000E4   00C8A0E1           LSL      R12,R0,#+16
    246                pDest++;
    247                RemPixels--;
   \   000000E8   013043E2           SUB      R3,R3,#+1
   \   000000EC   0228A0E1           LSL      R2,R2,#+16
   \   000000F0   22288CE1           ORR      R2,R12,R2, LSR #+16
   \   000000F4   042081E4           STR      R2,[R1], #+4
    248              }
    249              //
    250              // Complete DWORDS
    251              //
    252              ColorMask = ColorIndex * 0x00010001;
   \                     ??_DrawVLine_3:
   \   000000F8   002880E0           ADD      R2,R0,R0, LSL #+16
    253              if (RemPixels >= 16) {
   \   000000FC   100053E3           CMP      R3,#+16
   \   00000100   0A00003A           BCC      ??_DrawVLine_4
    254                do {
    255                  WRITE_MEM32P(pDest,     ColorMask);
   \                     ??_DrawVLine_5:
   \   00000104   042081E4           STR      R2,[R1], #+4
    256                  WRITE_MEM32P(pDest + 1, ColorMask);
   \   00000108   042081E4           STR      R2,[R1], #+4
    257                  WRITE_MEM32P(pDest + 2, ColorMask);
   \   0000010C   042081E4           STR      R2,[R1], #+4
    258                  WRITE_MEM32P(pDest + 3, ColorMask);
   \   00000110   042081E4           STR      R2,[R1], #+4
    259                  WRITE_MEM32P(pDest + 4, ColorMask);
   \   00000114   042081E4           STR      R2,[R1], #+4
    260                  WRITE_MEM32P(pDest + 5, ColorMask);
   \   00000118   042081E4           STR      R2,[R1], #+4
    261                  WRITE_MEM32P(pDest + 6, ColorMask);
   \   0000011C   042081E4           STR      R2,[R1], #+4
    262                  WRITE_MEM32P(pDest + 7, ColorMask);
    263                  pDest += 8;
    264                } while ((RemPixels -= 16) >= 16);
   \   00000120   103043E2           SUB      R3,R3,#+16
   \   00000124   042081E4           STR      R2,[R1], #+4
   \   00000128   100053E3           CMP      R3,#+16
   \   0000012C   F4FFFF2A           BCS      ??_DrawVLine_5
    265              }
    266              if (RemPixels >= 2) {
   \                     ??_DrawVLine_4:
   \   00000130   020053E3           CMP      R3,#+2
   \   00000134   0300003A           BCC      ??_DrawVLine_6
    267                do {
    268                  WRITE_MEM32P(pDest, ColorMask);
    269                  pDest++;
    270                } while ((RemPixels -= 2) >= 2);
   \                     ??_DrawVLine_7:
   \   00000138   023043E2           SUB      R3,R3,#+2
   \   0000013C   042081E4           STR      R2,[R1], #+4
   \   00000140   020053E3           CMP      R3,#+2
   \   00000144   FBFFFF2A           BCS      ??_DrawVLine_7
    271              }
    272              //
    273              // Last DWORD
    274              //
    275              if (RemPixels > 0) {
   \                     ??_DrawVLine_6:
   \   00000148   000053E3           CMP      R3,#+0
   \   0000014C   0500000A           BEQ      ??_DrawVLine_1
    276                Data = READ_MEM32P(pDest);
    277                #if (LCD_ENDIAN_BIG == 0)
    278                  Data &= 0xFFFF0000;
    279                  Data |= ColorIndex & 0xFFFF;
    280                #else
    281                  Data &= 0xFFFF;
    282                  Data |= (((U32)ColorIndex) << 16);
    283                #endif
    284                WRITE_MEM32P(pDest, Data);
   \   00000150   002091E5           LDR      R2,[R1, #+0]
   \   00000154   0008A0E1           LSL      R0,R0,#+16
   \   00000158   2228A0E1           LSR      R2,R2,#+16
   \   0000015C   2008A0E1           LSR      R0,R0,#+16
   \   00000160   020880E1           ORR      R0,R0,R2, LSL #+16
   \   00000164   000081E5           STR      R0,[R1, #+0]
    285              }
    286            }
    287          }
   \                     ??_DrawVLine_1:
   \   00000168   F081BDE8           POP      {R4-R8,PC}       ;; return
    288          
    289          /*********************************************************************
    290          *
    291          *       _FillRect
    292          */

   \                                 In section .text, align 4, keep-with-next
    293          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0370A0E1           MOV      R7,R3
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   18809DE5           LDR      R8,[SP, #+24]
   \   00000018   050057E1           CMP      R7,R5
   \   0000001C   070000BA           BLT      ??_FillRect_0
    294            #ifdef LCD_FILL_RECT
    295               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    296            #else
    297              for (; x0 <= x1; x0++) {
    298                _DrawVLine(pDevice, x0, y0, y1);
   \                     ??_FillRect_1:
   \   00000020   0830A0E1           MOV      R3,R8
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawVLine
    299              }
   \   00000034   015085E2           ADD      R5,R5,#+1
   \   00000038   050057E1           CMP      R7,R5
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    300            #endif
    301          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    302          
    303          /*********************************************************************
    304          *
    305          *       Draw Bitmap 1 BPP
    306          */

   \                                 In section .text, align 4, keep-with-next
    307          static void _DrawBitLine1BPP_Swap(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * pData, int ySize, const LCD_PIXELINDEX * pTrans, int BytesPerLine, U8 Pos) {
   \                     _DrawBitLine1BPP_Swap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    308            DRIVER_CONTEXT * pContext;
    309            LCD_PIXELINDEX Index, Index0, Index1, IndexMask;
    310            U32 Off;
    311            U8 Mask;
    312            U16 * pDest;
    313            int x0, y0;
    314          
    315            pContext  = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   08A090E5           LDR      R10,[R0, #+8]
   \   00000008   0140A0E1           MOV      R4,R1
    316            y0        = x;
    317            x0        = pContext->vySize - y - 1;
   \   0000000C   10109AE5           LDR      R1,[R10, #+16]
    318            IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000010   100090E5           LDR      R0,[R0, #+16]
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   021041E0           SUB      R1,R1,R2
   \   0000001C   0350A0E1           MOV      R5,R3
   \   00000020   28609DE5           LDR      R6,[SP, #+40]
   \   00000024   2C709DE5           LDR      R7,[SP, #+44]
   \   00000028   30809DE5           LDR      R8,[SP, #+48]
   \   0000002C   3490DDE5           LDRB     R9,[SP, #+52]
   \   00000030   01B041E2           SUB      R11,R1,#+1
   \   00000034   080090E5           LDR      R0,[R0, #+8]
   \   00000038   30FF2FE1           BLX      R0
    319            Off       = XY2OFF16(pContext->vxSizePhys, x0, y0);
   \   0000003C   14109AE5           LDR      R1,[R10, #+20]
    320            pDest     = OFF2PTR16(pContext->VRAMAddr, Off);
    321            Index0    = *(pTrans + 0);
    322            Index1    = *(pTrans + 1);
    323            Mask      = 0x80 >> (Pos & 0x7);
   \   00000040   80C0A0E3           MOV      R12,#+128
   \   00000044   91B42EE0           MLA      LR,R1,R4,R11
   \   00000048   074009E2           AND      R4,R9,#0x7
   \   0000004C   3CC4A0E1           LSR      R12,R12,R4
    324            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000050   ........           LDR      R4,??DataTable15
   \   00000054   00109AE5           LDR      R1,[R10, #+0]
   \   00000058   1040D4E5           LDRB     R4,[R4, #+16]
   \   0000005C   8E1081E0           ADD      R1,R1,LR, LSL #+1
   \   00000060   002097E5           LDR      R2,[R7, #+0]
   \   00000064   034004E2           AND      R4,R4,#0x3
   \   00000068   043097E5           LDR      R3,[R7, #+4]
   \   0000006C   030054E3           CMP      R4,#+3
   \   00000070   04F18F90           ADDLS    PC,PC,R4, LSL #+2
   \                     ??_DrawBitLine1BPP_Swap_0:
   \   00000074   5C00008A           BHI      ??_DrawBitLine1BPP_Swap_1
   \   00000078   020000EA           B        ??_DrawBitLine1BPP_Swap_2
   \   0000007C   2A0000EA           B        ??_DrawBitLine1BPP_Swap_3
   \   00000080   4E0000EA           B        ??_DrawBitLine1BPP_Swap_4
   \   00000084   280000EA           B        ??_DrawBitLine1BPP_Swap_3
    325            case 0:
    326              while (ySize >= 4) {
   \                     ??_DrawBitLine1BPP_Swap_2:
   \   00000088   040056E3           CMP      R6,#+4
   \   0000008C   1B0000BA           BLT      ??_DrawBitLine1BPP_Swap_5
    327                do {
    328                  Index = (*pData & Mask) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_Swap_6:
   \   00000090   0000D5E5           LDRB     R0,[R5, #+0]
    329                  WRITE_MEM16P(pDest, Index);
    330                  pData += BytesPerLine;
    331                  pDest--;
    332                  Index = (*pData & Mask) ? Index1 : Index0;
    333                  WRITE_MEM16P(pDest, Index);
    334                  pData += BytesPerLine;
    335                  pDest--;
    336                  Index = (*pData & Mask) ? Index1 : Index0;
    337                  WRITE_MEM16P(pDest, Index);
    338                  pData += BytesPerLine;
    339                  pDest--;
    340                  Index = (*pData & Mask) ? Index1 : Index0;
    341                  WRITE_MEM16P(pDest, Index);
    342                  pData += BytesPerLine;
    343                  pDest--;
    344                  ySize -= 4;
   \   00000094   046046E2           SUB      R6,R6,#+4
   \   00000098   00001CE1           TST      R12,R0
   \   0000009C   0300A011           MOVNE    R0,R3
   \   000000A0   0200A001           MOVEQ    R0,R2
   \   000000A4   B20041E0           STRH     R0,[R1], #-2
   \   000000A8   050088E0           ADD      R0,R8,R5
   \   000000AC   00E0D0E5           LDRB     LR,[R0, #+0]
   \   000000B0   000088E0           ADD      R0,R8,R0
   \   000000B4   0E001CE1           TST      R12,LR
   \   000000B8   03E0A011           MOVNE    LR,R3
   \   000000BC   02E0A001           MOVEQ    LR,R2
   \   000000C0   B2E041E0           STRH     LR,[R1], #-2
   \   000000C4   00E0D0E5           LDRB     LR,[R0, #+0]
   \   000000C8   000088E0           ADD      R0,R8,R0
   \   000000CC   005088E0           ADD      R5,R8,R0
   \   000000D0   0E001CE1           TST      R12,LR
   \   000000D4   03E0A011           MOVNE    LR,R3
   \   000000D8   02E0A001           MOVEQ    LR,R2
   \   000000DC   B2E041E0           STRH     LR,[R1], #-2
   \   000000E0   00E0D0E5           LDRB     LR,[R0, #+0]
   \   000000E4   0E001CE1           TST      R12,LR
   \   000000E8   03E0A011           MOVNE    LR,R3
   \   000000EC   02E0A001           MOVEQ    LR,R2
   \   000000F0   B2E041E0           STRH     LR,[R1], #-2
    345                } while (ySize >= 4);
   \   000000F4   040056E3           CMP      R6,#+4
   \   000000F8   E4FFFFAA           BGE      ??_DrawBitLine1BPP_Swap_6
   \   000000FC   E1FFFFEA           B        ??_DrawBitLine1BPP_Swap_2
    346              }
    347              if (ySize) { 
   \                     ??_DrawBitLine1BPP_Swap_5:
   \   00000100   000056E3           CMP      R6,#+0
   \   00000104   3800000A           BEQ      ??_DrawBitLine1BPP_Swap_1
    348          	    do {
    349                  Index = (*pData & Mask) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_Swap_7:
   \   00000108   0000D5E5           LDRB     R0,[R5, #+0]
    350                  WRITE_MEM16P(pDest, Index);
    351                  pData += BytesPerLine;
   \   0000010C   055088E0           ADD      R5,R8,R5
   \   00000110   00001CE1           TST      R12,R0
   \   00000114   03E0A011           MOVNE    LR,R3
   \   00000118   02E0A001           MOVEQ    LR,R2
   \   0000011C   B2E041E0           STRH     LR,[R1], #-2
    352                  pDest--;
    353                } while (--ySize);
   \   00000120   016056E2           SUBS     R6,R6,#+1
   \   00000124   F7FFFF1A           BNE      ??_DrawBitLine1BPP_Swap_7
   \   00000128   2F0000EA           B        ??_DrawBitLine1BPP_Swap_1
    354              }
    355              break;
    356            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    357            case LCD_DRAWMODE_XOR:
    358              do {
    359                if (*pData & Mask) {
   \                     ??_DrawBitLine1BPP_Swap_3:
   \   0000012C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000130   01001CE1           TST      R12,R1
   \   00000134   0400000A           BEQ      ??_DrawBitLine1BPP_Swap_8
    360                  Index = READ_MEM16(pContext->VRAMAddr, Off);
    361                  Index ^= IndexMask;
    362                  WRITE_MEM16(pContext->VRAMAddr, Off, Index);
   \   00000138   00209AE5           LDR      R2,[R10, #+0]
   \   0000013C   8E10A0E1           LSL      R1,LR,#+1
   \   00000140   B23091E1           LDRH     R3,[R1, +R2]
   \   00000144   033020E0           EOR      R3,R0,R3
   \   00000148   B23081E1           STRH     R3,[R1, +R2]
    363                }
    364                pData += BytesPerLine;
   \                     ??_DrawBitLine1BPP_Swap_8:
   \   0000014C   055088E0           ADD      R5,R8,R5
    365                Off--;
   \   00000150   01E04EE2           SUB      LR,LR,#+1
    366              } while (--ySize);
   \   00000154   016056E2           SUBS     R6,R6,#+1
   \   00000158   F3FFFF1A           BNE      ??_DrawBitLine1BPP_Swap_3
   \   0000015C   220000EA           B        ??_DrawBitLine1BPP_Swap_1
    367              break;
    368            case LCD_DRAWMODE_TRANS:
    369              while (ySize >= 4) {
    370                do {
    371                  if (*pData & Mask) {
   \                     ??_DrawBitLine1BPP_Swap_9:
   \   00000160   0000D5E5           LDRB     R0,[R5, #+0]
    372                    WRITE_MEM16P(pDest, Index1);
    373                  }
    374                  pData += BytesPerLine;
    375                  pDest--;
    376                  if (*pData & Mask) {
   \   00000164   0CE0A0E1           MOV      LR,R12
    377                    WRITE_MEM16P(pDest, Index1);
    378                  }
    379                  pData += BytesPerLine;
    380                  pDest--;
    381                  if (*pData & Mask) {
    382                    WRITE_MEM16P(pDest, Index1);
    383                  }
    384                  pData += BytesPerLine;
    385                  pDest--;
    386                  if (*pData & Mask) {
    387                    WRITE_MEM16P(pDest, Index1);
    388                  }
    389                  pData += BytesPerLine;
    390                  pDest--;
    391                  ySize -= 4;
   \   00000168   046046E2           SUB      R6,R6,#+4
   \   0000016C   00001CE1           TST      R12,R0
   \   00000170   B030C111           STRHNE   R3,[R1, #+0]
   \   00000174   050088E0           ADD      R0,R8,R5
   \   00000178   0020D0E5           LDRB     R2,[R0, #+0]
   \   0000017C   021041E2           SUB      R1,R1,#+2
   \   00000180   000088E0           ADD      R0,R8,R0
   \   00000184   02001EE1           TST      LR,R2
   \   00000188   B030C111           STRHNE   R3,[R1, #+0]
   \   0000018C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000190   021041E2           SUB      R1,R1,#+2
   \   00000194   000088E0           ADD      R0,R8,R0
   \   00000198   02001EE1           TST      LR,R2
   \   0000019C   B030C111           STRHNE   R3,[R1, #+0]
   \   000001A0   0020D0E5           LDRB     R2,[R0, #+0]
   \   000001A4   021041E2           SUB      R1,R1,#+2
   \   000001A8   005088E0           ADD      R5,R8,R0
   \   000001AC   02001EE1           TST      LR,R2
   \   000001B0   B030C111           STRHNE   R3,[R1, #+0]
   \   000001B4   021041E2           SUB      R1,R1,#+2
    392                } while (ySize >= 4);
   \   000001B8   040056E3           CMP      R6,#+4
   \   000001BC   E7FFFFAA           BGE      ??_DrawBitLine1BPP_Swap_9
    393              }
   \                     ??_DrawBitLine1BPP_Swap_4:
   \   000001C0   040056E3           CMP      R6,#+4
   \   000001C4   E5FFFFAA           BGE      ??_DrawBitLine1BPP_Swap_9
    394              if (ySize) { 
   \   000001C8   000056E3           CMP      R6,#+0
   \   000001CC   0600000A           BEQ      ??_DrawBitLine1BPP_Swap_1
    395          	    do {
    396                  if (*pData & Mask) {
   \                     ??_DrawBitLine1BPP_Swap_10:
   \   000001D0   0000D5E5           LDRB     R0,[R5, #+0]
    397                    WRITE_MEM16P(pDest, Index1);
    398                  }
    399                  pData += BytesPerLine;
   \   000001D4   055088E0           ADD      R5,R8,R5
   \   000001D8   00001CE1           TST      R12,R0
   \   000001DC   B030C111           STRHNE   R3,[R1, #+0]
    400                  pDest--;
   \   000001E0   021041E2           SUB      R1,R1,#+2
    401                } while (--ySize);
   \   000001E4   016056E2           SUBS     R6,R6,#+1
   \   000001E8   F8FFFF1A           BNE      ??_DrawBitLine1BPP_Swap_10
    402              }
    403              break;
    404            }
    405          }
   \                     ??_DrawBitLine1BPP_Swap_1:
   \   000001EC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000001F0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    406          
    407          /*********************************************************************
    408          *
    409          *       Draw Bitmap 2 BPP, not optimized
    410          */

   \                                 In section .text, align 4, keep-with-next
    411          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    412            LCD_PIXELINDEX Pixels, PixelIndex;
    413            int CurrentPixel, Shift, Index;
    414          
    415            Pixels       = *p;
    416            CurrentPixel = Diff;
    417            x           += Diff;
    418            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable15
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24409DE5           LDR      R4,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00E0D3E5           LDRB     LR,[R3, #+0]
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   3200000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    419            case 0:
    420              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000034   C060A0E3           MOV      R6,#+192
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1700000A           BEQ      ??_DrawBitLine2BPP_2
    421                do {
    422                  Shift = (3 - CurrentPixel) << 1;
    423                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    424                  PixelIndex = *(pTrans + Index);
    425                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine2BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   03706CE2           RSB      R7,R12,#+3
   \   00000048   14A098E5           LDR      R10,[R8, #+20]
   \   0000004C   109098E5           LDR      R9,[R8, #+16]
   \   00000050   9A9129E0           MLA      R9,R10,R1,R9
   \   00000054   008098E5           LDR      R8,[R8, #+0]
   \   00000058   019049E2           SUB      R9,R9,#+1
   \   0000005C   029049E0           SUB      R9,R9,R2
   \   00000060   8770A0E1           LSL      R7,R7,#+1
   \   00000064   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000068   0790A0E1           MOV      R9,R7
   \   0000006C   069069E2           RSB      R9,R9,#+6
   \   00000070   56990EE0           AND      R9,LR,R6, ASR R9
   \   00000074   3977A0E1           LSR      R7,R9,R7
   \   00000078   077195E7           LDR      R7,[R5, +R7, LSL #+2]
    426                  if (++CurrentPixel == 4) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   B070C8E1           STRH     R7,[R8, #+0]
   \   00000084   04005CE3           CMP      R12,#+4
    427                    CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    428                    Pixels = *(++p);
   \   0000008C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000090   011081E2           ADD      R1,R1,#+1
    429                  }
    430          		  } while (--xsize);
   \   00000094   014054E2           SUBS     R4,R4,#+1
   \   00000098   E8FFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   0000009C   F087BDE8           POP      {R4-R10,PC}
    431              } else {
    432                do {
    433                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_2:
   \   000000A0   03506CE2           RSB      R5,R12,#+3
   \   000000A4   8570A0E1           LSL      R7,R5,#+1
    434                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    435                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   085090E5           LDR      R5,[R0, #+8]
    436                  if (++CurrentPixel == 4) {
   \   000000AC   01C08CE2           ADD      R12,R12,#+1
   \   000000B0   149095E5           LDR      R9,[R5, #+20]
   \   000000B4   108095E5           LDR      R8,[R5, #+16]
   \   000000B8   998128E0           MLA      R8,R9,R1,R8
   \   000000BC   005095E5           LDR      R5,[R5, #+0]
   \   000000C0   018048E2           SUB      R8,R8,#+1
   \   000000C4   028048E0           SUB      R8,R8,R2
   \   000000C8   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000000CC   0780A0E1           MOV      R8,R7
   \   000000D0   068068E2           RSB      R8,R8,#+6
   \   000000D4   56880EE0           AND      R8,LR,R6, ASR R8
   \   000000D8   3877A0E1           LSR      R7,R8,R7
   \   000000DC   B070C5E1           STRH     R7,[R5, #+0]
   \   000000E0   04005CE3           CMP      R12,#+4
    437                    CurrentPixel = 0;
   \   000000E4   00C0A003           MOVEQ    R12,#+0
    438                    Pixels = *(++p);
   \   000000E8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000EC   011081E2           ADD      R1,R1,#+1
    439                  }
    440          		  } while (--xsize);
   \   000000F0   014054E2           SUBS     R4,R4,#+1
   \   000000F4   E9FFFF1A           BNE      ??_DrawBitLine2BPP_2
   \   000000F8   F087BDE8           POP      {R4-R10,PC}
    441              }
    442              break;
    443            case LCD_DRAWMODE_TRANS:
    444              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   000000FC   C060A0E3           MOV      R6,#+192
   \   00000100   000055E3           CMP      R5,#+0
   \   00000104   1800000A           BEQ      ??_DrawBitLine2BPP_4
    445                do {
    446                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   00000108   03706CE2           RSB      R7,R12,#+3
   \   0000010C   8770A0E1           LSL      R7,R7,#+1
    447                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000110   0780A0E1           MOV      R8,R7
   \   00000114   068068E2           RSB      R8,R8,#+6
   \   00000118   56880EE0           AND      R8,LR,R6, ASR R8
   \   0000011C   3877B0E1           LSRS     R7,R8,R7
    448                  if (Index) {
   \   00000120   0900000A           BEQ      ??_DrawBitLine2BPP_6
    449                    PixelIndex = *(pTrans + Index);
    450                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000124   088090E5           LDR      R8,[R0, #+8]
   \   00000128   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000012C   14A098E5           LDR      R10,[R8, #+20]
   \   00000130   109098E5           LDR      R9,[R8, #+16]
   \   00000134   9A9129E0           MLA      R9,R10,R1,R9
   \   00000138   008098E5           LDR      R8,[R8, #+0]
   \   0000013C   019049E2           SUB      R9,R9,#+1
   \   00000140   029049E0           SUB      R9,R9,R2
   \   00000144   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000148   B070C8E1           STRH     R7,[R8, #+0]
    451                  }
    452                  x++;
    453                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_6:
   \   0000014C   01C08CE2           ADD      R12,R12,#+1
   \   00000150   04005CE3           CMP      R12,#+4
    454                    CurrentPixel = 0;
   \   00000154   00C0A003           MOVEQ    R12,#+0
    455                    Pixels = *(++p);
   \   00000158   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   0000015C   011081E2           ADD      R1,R1,#+1
    456                  }
    457          		  } while (--xsize);
   \   00000160   014054E2           SUBS     R4,R4,#+1
   \   00000164   E7FFFF1A           BNE      ??_DrawBitLine2BPP_5
   \   00000168   F087BDE8           POP      {R4-R10,PC}
    458              } else {
    459                do {
    460                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   0000016C   03506CE2           RSB      R5,R12,#+3
   \   00000170   8570A0E1           LSL      R7,R5,#+1
    461                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000174   0750A0E1           MOV      R5,R7
   \   00000178   065065E2           RSB      R5,R5,#+6
   \   0000017C   56550EE0           AND      R5,LR,R6, ASR R5
   \   00000180   3577B0E1           LSRS     R7,R5,R7
    462                  if (Index) {
   \   00000184   0800000A           BEQ      ??_DrawBitLine2BPP_7
    463                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000188   085090E5           LDR      R5,[R0, #+8]
   \   0000018C   149095E5           LDR      R9,[R5, #+20]
   \   00000190   108095E5           LDR      R8,[R5, #+16]
   \   00000194   998128E0           MLA      R8,R9,R1,R8
   \   00000198   005095E5           LDR      R5,[R5, #+0]
   \   0000019C   018048E2           SUB      R8,R8,#+1
   \   000001A0   028048E0           SUB      R8,R8,R2
   \   000001A4   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000001A8   B070C5E1           STRH     R7,[R5, #+0]
    464                  }
    465                  x++;
    466                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   000001AC   01C08CE2           ADD      R12,R12,#+1
   \   000001B0   04005CE3           CMP      R12,#+4
    467                    CurrentPixel = 0;
   \   000001B4   00C0A003           MOVEQ    R12,#+0
    468                    Pixels = *(++p);
   \   000001B8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001BC   011081E2           ADD      R1,R1,#+1
    469                  }
    470          		  } while (--xsize);
   \   000001C0   014054E2           SUBS     R4,R4,#+1
   \   000001C4   E8FFFF1A           BNE      ??_DrawBitLine2BPP_4
    471              }
    472              break;
    473            }
    474          }
   \   000001C8   F087BDE8           POP      {R4-R10,PC}      ;; return
    475          
    476          /*********************************************************************
    477          *
    478          *       Draw Bitmap 4 BPP, not optimized
    479          */

   \                                 In section .text, align 4, keep-with-next
    480          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    481            LCD_PIXELINDEX Pixels, PixelIndex;
    482            int CurrentPixel, Shift, Index;
    483          
    484            Pixels       = *p;
    485            CurrentPixel = Diff;
    486            x           += Diff;
    487            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable15
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24409DE5           LDR      R4,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00E0D3E5           LDRB     LR,[R3, #+0]
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   3200000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    488            case 0:
    489              if (pTrans) {
   \                     ??_DrawBitLine4BPP_0:
   \   00000034   F060A0E3           MOV      R6,#+240
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1700000A           BEQ      ??_DrawBitLine4BPP_2
    490                do {
    491                  Shift = (1 - CurrentPixel) << 2;
    492                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    493                  PixelIndex = *(pTrans + Index);
    494                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine4BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   01706CE2           RSB      R7,R12,#+1
   \   00000048   14A098E5           LDR      R10,[R8, #+20]
   \   0000004C   109098E5           LDR      R9,[R8, #+16]
   \   00000050   9A9129E0           MLA      R9,R10,R1,R9
   \   00000054   008098E5           LDR      R8,[R8, #+0]
   \   00000058   019049E2           SUB      R9,R9,#+1
   \   0000005C   029049E0           SUB      R9,R9,R2
   \   00000060   0771A0E1           LSL      R7,R7,#+2
   \   00000064   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000068   0790A0E1           MOV      R9,R7
   \   0000006C   049069E2           RSB      R9,R9,#+4
   \   00000070   56990EE0           AND      R9,LR,R6, ASR R9
   \   00000074   3977A0E1           LSR      R7,R9,R7
   \   00000078   077195E7           LDR      R7,[R5, +R7, LSL #+2]
    495                  if (++CurrentPixel == 2) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   B070C8E1           STRH     R7,[R8, #+0]
   \   00000084   02005CE3           CMP      R12,#+2
    496                    CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    497                    Pixels = *(++p);
   \   0000008C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000090   011081E2           ADD      R1,R1,#+1
    498                  }
    499          		  } while (--xsize);
   \   00000094   014054E2           SUBS     R4,R4,#+1
   \   00000098   E8FFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   0000009C   F087BDE8           POP      {R4-R10,PC}
    500              } else {
    501                do {
    502                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_2:
   \   000000A0   01506CE2           RSB      R5,R12,#+1
   \   000000A4   0571A0E1           LSL      R7,R5,#+2
    503                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    504                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   085090E5           LDR      R5,[R0, #+8]
    505                  if (++CurrentPixel == 2) {
   \   000000AC   01C08CE2           ADD      R12,R12,#+1
   \   000000B0   149095E5           LDR      R9,[R5, #+20]
   \   000000B4   108095E5           LDR      R8,[R5, #+16]
   \   000000B8   998128E0           MLA      R8,R9,R1,R8
   \   000000BC   005095E5           LDR      R5,[R5, #+0]
   \   000000C0   018048E2           SUB      R8,R8,#+1
   \   000000C4   028048E0           SUB      R8,R8,R2
   \   000000C8   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000000CC   0780A0E1           MOV      R8,R7
   \   000000D0   048068E2           RSB      R8,R8,#+4
   \   000000D4   56880EE0           AND      R8,LR,R6, ASR R8
   \   000000D8   3877A0E1           LSR      R7,R8,R7
   \   000000DC   B070C5E1           STRH     R7,[R5, #+0]
   \   000000E0   02005CE3           CMP      R12,#+2
    506                    CurrentPixel = 0;
   \   000000E4   00C0A003           MOVEQ    R12,#+0
    507                    Pixels = *(++p);
   \   000000E8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000EC   011081E2           ADD      R1,R1,#+1
    508                  }
    509          		  } while (--xsize);
   \   000000F0   014054E2           SUBS     R4,R4,#+1
   \   000000F4   E9FFFF1A           BNE      ??_DrawBitLine4BPP_2
   \   000000F8   F087BDE8           POP      {R4-R10,PC}
    510              }
    511              break;
    512            case LCD_DRAWMODE_TRANS:
    513              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   000000FC   F060A0E3           MOV      R6,#+240
   \   00000100   000055E3           CMP      R5,#+0
   \   00000104   1800000A           BEQ      ??_DrawBitLine4BPP_4
    514                do {
    515                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   00000108   01706CE2           RSB      R7,R12,#+1
   \   0000010C   0771A0E1           LSL      R7,R7,#+2
    516                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000110   0780A0E1           MOV      R8,R7
   \   00000114   048068E2           RSB      R8,R8,#+4
   \   00000118   56880EE0           AND      R8,LR,R6, ASR R8
   \   0000011C   3877B0E1           LSRS     R7,R8,R7
    517                  if (Index) {
   \   00000120   0900000A           BEQ      ??_DrawBitLine4BPP_6
    518                    PixelIndex = *(pTrans + Index);
    519                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000124   088090E5           LDR      R8,[R0, #+8]
   \   00000128   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000012C   14A098E5           LDR      R10,[R8, #+20]
   \   00000130   109098E5           LDR      R9,[R8, #+16]
   \   00000134   9A9129E0           MLA      R9,R10,R1,R9
   \   00000138   008098E5           LDR      R8,[R8, #+0]
   \   0000013C   019049E2           SUB      R9,R9,#+1
   \   00000140   029049E0           SUB      R9,R9,R2
   \   00000144   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000148   B070C8E1           STRH     R7,[R8, #+0]
    520                  }
    521                  x++;
    522                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_6:
   \   0000014C   01C08CE2           ADD      R12,R12,#+1
   \   00000150   02005CE3           CMP      R12,#+2
    523                    CurrentPixel = 0;
   \   00000154   00C0A003           MOVEQ    R12,#+0
    524                    Pixels = *(++p);
   \   00000158   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   0000015C   011081E2           ADD      R1,R1,#+1
    525                  }
    526          		  } while (--xsize);
   \   00000160   014054E2           SUBS     R4,R4,#+1
   \   00000164   E7FFFF1A           BNE      ??_DrawBitLine4BPP_5
   \   00000168   F087BDE8           POP      {R4-R10,PC}
    527              } else {
    528                do {
    529                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   0000016C   01506CE2           RSB      R5,R12,#+1
   \   00000170   0571A0E1           LSL      R7,R5,#+2
    530                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000174   0750A0E1           MOV      R5,R7
   \   00000178   045065E2           RSB      R5,R5,#+4
   \   0000017C   56550EE0           AND      R5,LR,R6, ASR R5
   \   00000180   3577B0E1           LSRS     R7,R5,R7
    531                  if (Index) {
   \   00000184   0800000A           BEQ      ??_DrawBitLine4BPP_7
    532                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000188   085090E5           LDR      R5,[R0, #+8]
   \   0000018C   149095E5           LDR      R9,[R5, #+20]
   \   00000190   108095E5           LDR      R8,[R5, #+16]
   \   00000194   998128E0           MLA      R8,R9,R1,R8
   \   00000198   005095E5           LDR      R5,[R5, #+0]
   \   0000019C   018048E2           SUB      R8,R8,#+1
   \   000001A0   028048E0           SUB      R8,R8,R2
   \   000001A4   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000001A8   B070C5E1           STRH     R7,[R5, #+0]
    533                  }
    534                  x++;
    535                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   000001AC   01C08CE2           ADD      R12,R12,#+1
   \   000001B0   02005CE3           CMP      R12,#+2
    536                    CurrentPixel = 0;
   \   000001B4   00C0A003           MOVEQ    R12,#+0
    537                    Pixels = *(++p);
   \   000001B8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001BC   011081E2           ADD      R1,R1,#+1
    538                  }
    539          		  } while (--xsize);
   \   000001C0   014054E2           SUBS     R4,R4,#+1
   \   000001C4   E8FFFF1A           BNE      ??_DrawBitLine4BPP_4
    540              }
    541              break;
    542            }
    543          }
   \   000001C8   F087BDE8           POP      {R4-R10,PC}      ;; return
    544          
    545          /*********************************************************************
    546          *
    547          *       Draw Bitmap 8 BPP
    548          */

   \                                 In section .text, align 4, keep-with-next
    549          static void _DrawBitLine8BPP_Swap(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * pData, int ySize, const LCD_PIXELINDEX * pTrans, int BytesPerLine) {
   \                     _DrawBitLine8BPP_Swap:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14C09DE5           LDR      R12,[SP, #+20]
   \   00000008   10409DE5           LDR      R4,[SP, #+16]
   \   0000000C   18E09DE5           LDR      LR,[SP, #+24]
    550            DRIVER_CONTEXT * pContext;
    551            LCD_PIXELINDEX Index;
    552            U32 Off;
    553            U8 Pixel;
    554            U16 * pDest;
    555            int x0, y0;
    556            
    557            if (pTrans == NULL) {
   \   00000010   00005CE3           CMP      R12,#+0
   \   00000014   5400000A           BEQ      ??_DrawBitLine8BPP_Swap_0
    558              return; // Because it makes no sense to use 8bpp bitmaps without palette with a 16bpp configuration
    559            }
    560            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000018   080090E5           LDR      R0,[R0, #+8]
    561            y0        = x;
    562            x0        = pContext->vySize - y - 1;
    563            Off      = XY2OFF16(pContext->vxSizePhys, x0, y0);
    564            pDest    = OFF2PTR16(pContext->VRAMAddr, Off);
   \   0000001C   145090E5           LDR      R5,[R0, #+20]
   \   00000020   106090E5           LDR      R6,[R0, #+16]
   \   00000024   956121E0           MLA      R1,R5,R1,R6
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   021041E0           SUB      R1,R1,R2
   \   00000030   810080E0           ADD      R0,R0,R1, LSL #+1
    565            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000034   ........           LDR      R1,??DataTable15
   \   00000038   020040E2           SUB      R0,R0,#+2
   \   0000003C   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000040   031011E2           ANDS     R1,R1,#0x3
   \   00000044   0200000A           BEQ      ??_DrawBitLine8BPP_Swap_1
   \   00000048   021051E2           SUBS     R1,R1,#+2
   \   0000004C   3A00000A           BEQ      ??_DrawBitLine8BPP_Swap_2
   \   00000050   7080BDE8           POP      {R4-R6,PC}
    566            case 0:
    567              while (ySize >= 4) {
   \                     ??_DrawBitLine8BPP_Swap_1:
   \   00000054   040054E3           CMP      R4,#+4
   \   00000058   130000BA           BLT      ??_DrawBitLine8BPP_Swap_3
    568                do {
    569                  Index = *(pTrans + *pData);
    570                  WRITE_MEM16P(pDest, Index);
   \                     ??_DrawBitLine8BPP_Swap_4:
   \   0000005C   0010D3E5           LDRB     R1,[R3, #+0]
    571                  pData += BytesPerLine;
    572                  pDest--;
    573                  Index = *(pTrans + *pData);
    574                  WRITE_MEM16P(pDest, Index);
    575                  pData += BytesPerLine;
    576                  pDest--;
    577                  Index = *(pTrans + *pData);
    578                  WRITE_MEM16P(pDest, Index);
    579                  pData += BytesPerLine;
    580                  pDest--;
    581                  Index = *(pTrans + *pData);
    582                  WRITE_MEM16P(pDest, Index);
    583                  pData += BytesPerLine;
    584                  pDest--;
    585                  ySize -= 4;
   \   00000060   044044E2           SUB      R4,R4,#+4
    586                } while (ySize >= 4);
   \   00000064   040054E3           CMP      R4,#+4
   \   00000068   01119CE7           LDR      R1,[R12, +R1, LSL #+2]
   \   0000006C   B21040E0           STRH     R1,[R0], #-2
   \   00000070   03108EE0           ADD      R1,LR,R3
   \   00000074   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000078   01108EE0           ADD      R1,LR,R1
   \   0000007C   02219CE7           LDR      R2,[R12, +R2, LSL #+2]
   \   00000080   B22040E0           STRH     R2,[R0], #-2
   \   00000084   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000088   01108EE0           ADD      R1,LR,R1
   \   0000008C   01308EE0           ADD      R3,LR,R1
   \   00000090   02219CE7           LDR      R2,[R12, +R2, LSL #+2]
   \   00000094   B22040E0           STRH     R2,[R0], #-2
   \   00000098   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000009C   02219CE7           LDR      R2,[R12, +R2, LSL #+2]
   \   000000A0   B22040E0           STRH     R2,[R0], #-2
   \   000000A4   ECFFFFAA           BGE      ??_DrawBitLine8BPP_Swap_4
   \   000000A8   E9FFFFEA           B        ??_DrawBitLine8BPP_Swap_1
    587              }
    588              if (ySize) { 
   \                     ??_DrawBitLine8BPP_Swap_3:
   \   000000AC   000054E3           CMP      R4,#+0
   \   000000B0   2D00000A           BEQ      ??_DrawBitLine8BPP_Swap_0
    589          	    do {
    590                  Index = *(pTrans + *pData);
    591                  WRITE_MEM16P(pDest, Index);
   \                     ??_DrawBitLine8BPP_Swap_5:
   \   000000B4   0010D3E5           LDRB     R1,[R3, #+0]
    592                  pData += BytesPerLine;
   \   000000B8   03308EE0           ADD      R3,LR,R3
    593                  pDest--;
    594                } while (--ySize);
   \   000000BC   014054E2           SUBS     R4,R4,#+1
   \   000000C0   01119CE7           LDR      R1,[R12, +R1, LSL #+2]
   \   000000C4   B21040E0           STRH     R1,[R0], #-2
   \   000000C8   F9FFFF1A           BNE      ??_DrawBitLine8BPP_Swap_5
   \   000000CC   7080BDE8           POP      {R4-R6,PC}
    595              }
    596              break;
    597            case LCD_DRAWMODE_TRANS:
    598              while (ySize >= 4) {
    599                do {
    600                  Pixel = *pData;
   \                     ??_DrawBitLine8BPP_Swap_6:
   \   000000D0   0010D3E5           LDRB     R1,[R3, #+0]
    601                  if (Pixel) {
    602                    Index = *(pTrans + Pixel);
    603                    WRITE_MEM16P(pDest, Index);
    604                  }
    605                  pData += BytesPerLine;
    606                  pDest--;
    607                  Pixel = *pData;
    608                  if (Pixel) {
    609                    Index = *(pTrans + Pixel);
    610                    WRITE_MEM16P(pDest, Index);
    611                  }
    612                  pData += BytesPerLine;
    613                  pDest--;
    614                  Pixel = *pData;
    615                  if (Pixel) {
    616                    Index = *(pTrans + Pixel);
    617                    WRITE_MEM16P(pDest, Index);
    618                  }
    619                  pData += BytesPerLine;
    620                  pDest--;
    621                  Pixel = *pData;
    622                  if (Pixel) {
    623                    Index = *(pTrans + Pixel);
    624                    WRITE_MEM16P(pDest, Index);
    625                  }
    626                  pData += BytesPerLine;
    627                  pDest--;
    628                  ySize -= 4;
   \   000000D4   044044E2           SUB      R4,R4,#+4
   \   000000D8   000051E3           CMP      R1,#+0
   \   000000DC   01119C17           LDRNE    R1,[R12, +R1, LSL #+2]
   \   000000E0   B010C011           STRHNE   R1,[R0, #+0]
   \   000000E4   03108EE0           ADD      R1,LR,R3
   \   000000E8   0020D1E5           LDRB     R2,[R1, #+0]
   \   000000EC   020040E2           SUB      R0,R0,#+2
   \   000000F0   01108EE0           ADD      R1,LR,R1
   \   000000F4   000052E3           CMP      R2,#+0
   \   000000F8   02219C17           LDRNE    R2,[R12, +R2, LSL #+2]
   \   000000FC   B020C011           STRHNE   R2,[R0, #+0]
   \   00000100   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000104   020040E2           SUB      R0,R0,#+2
   \   00000108   01108EE0           ADD      R1,LR,R1
   \   0000010C   000052E3           CMP      R2,#+0
   \   00000110   02219C17           LDRNE    R2,[R12, +R2, LSL #+2]
   \   00000114   01308EE0           ADD      R3,LR,R1
   \   00000118   B020C011           STRHNE   R2,[R0, #+0]
   \   0000011C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000120   020040E2           SUB      R0,R0,#+2
   \   00000124   000052E3           CMP      R2,#+0
   \   00000128   02219C17           LDRNE    R2,[R12, +R2, LSL #+2]
   \   0000012C   B020C011           STRHNE   R2,[R0, #+0]
   \   00000130   020040E2           SUB      R0,R0,#+2
    629                } while (ySize >= 4);
   \   00000134   040054E3           CMP      R4,#+4
   \   00000138   E4FFFFAA           BGE      ??_DrawBitLine8BPP_Swap_6
    630              }
   \                     ??_DrawBitLine8BPP_Swap_2:
   \   0000013C   040054E3           CMP      R4,#+4
   \   00000140   E2FFFFAA           BGE      ??_DrawBitLine8BPP_Swap_6
    631              if (ySize) { 
   \   00000144   000054E3           CMP      R4,#+0
   \   00000148   0700000A           BEQ      ??_DrawBitLine8BPP_Swap_0
    632          	    do {
    633                  Pixel = *pData;
   \                     ??_DrawBitLine8BPP_Swap_7:
   \   0000014C   0020D3E5           LDRB     R2,[R3, #+0]
    634                  if (Pixel) {
    635                    Index = *(pTrans + Pixel);
    636                    WRITE_MEM16P(pDest, Index);
    637                  }
    638                  pData += BytesPerLine;
   \   00000150   03308EE0           ADD      R3,LR,R3
   \   00000154   000052E3           CMP      R2,#+0
   \   00000158   02119C17           LDRNE    R1,[R12, +R2, LSL #+2]
   \   0000015C   B010C011           STRHNE   R1,[R0, #+0]
    639                  pDest--;
   \   00000160   020040E2           SUB      R0,R0,#+2
    640                } while (--ySize);
   \   00000164   014054E2           SUBS     R4,R4,#+1
   \   00000168   F7FFFF1A           BNE      ??_DrawBitLine8BPP_Swap_7
   \                     ??_DrawBitLine8BPP_Swap_0:
   \   0000016C   7080BDE8           POP      {R4-R6,PC}       ;; return
    641              }
    642              break;
    643            }
    644          }
    645          
    646          /*********************************************************************
    647          *
    648          *       Draw Bitmap 16 BPP
    649          */

   \                                 In section .text, align 4, keep-with-next
    650          static void _DrawBitLine16BPP_Swap(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR * pData, int ySize, int BytesPerLine) {
   \                     _DrawBitLine16BPP_Swap:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10E09DE5           LDR      LR,[SP, #+16]
    651            DRIVER_CONTEXT * pContext;
    652            U32 Off;
    653            U16 * pDest;
    654            int WordsPerLine;
    655          
    656            pContext     = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000008   084090E5           LDR      R4,[R0, #+8]
    657            WordsPerLine = BytesPerLine >> 1;
   \   0000000C   CE00A0E1           ASR      R0,LR,#+1
    658            y            = pContext->vySize - y - 1;
    659            Off          = XY2OFF16(pContext->vxSizePhys, y, x);
    660            pDest        = OFF2PTR16(pContext->VRAMAddr, Off);
   \   00000010   105094E5           LDR      R5,[R4, #+16]
   \   00000014   14E094E5           LDR      LR,[R4, #+20]
   \   00000018   022045E0           SUB      R2,R5,R2
   \   0000001C   9E2121E0           MLA      R1,LR,R1,R2
   \   00000020   002094E5           LDR      R2,[R4, #+0]
   \   00000024   0CC09DE5           LDR      R12,[SP, #+12]
   \   00000028   811082E0           ADD      R1,R2,R1, LSL #+1
   \   0000002C   021041E2           SUB      R1,R1,#+2
    661            while (ySize >= 4) {
   \                     ??_DrawBitLine16BPP_Swap_0:
   \   00000030   04005CE3           CMP      R12,#+4
   \   00000034   0F0000BA           BLT      ??_DrawBitLine16BPP_Swap_1
    662              do {
    663                WRITE_MEM16P(pDest, *pData);
   \                     ??_DrawBitLine16BPP_Swap_2:
   \   00000038   B020D3E1           LDRH     R2,[R3, #+0]
    664                pDest--;
    665                pData += WordsPerLine;
    666                WRITE_MEM16P(pDest, *pData);
    667                pDest--;
    668                pData += WordsPerLine;
    669                WRITE_MEM16P(pDest, *pData);
    670                pDest--;
    671                pData += WordsPerLine;
    672                WRITE_MEM16P(pDest, *pData);
    673                pDest--;
    674                pData += WordsPerLine;
    675                ySize -= 4;
   \   0000003C   04C04CE2           SUB      R12,R12,#+4
    676              } while (ySize >= 4);
   \   00000040   04005CE3           CMP      R12,#+4
   \   00000044   B22041E0           STRH     R2,[R1], #-2
   \   00000048   802083E0           ADD      R2,R3,R0, LSL #+1
   \   0000004C   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000050   802082E0           ADD      R2,R2,R0, LSL #+1
   \   00000054   B23041E0           STRH     R3,[R1], #-2
   \   00000058   B030D2E1           LDRH     R3,[R2, #+0]
   \   0000005C   802082E0           ADD      R2,R2,R0, LSL #+1
   \   00000060   B23041E0           STRH     R3,[R1], #-2
   \   00000064   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000068   B23041E0           STRH     R3,[R1], #-2
   \   0000006C   803082E0           ADD      R3,R2,R0, LSL #+1
   \   00000070   F0FFFFAA           BGE      ??_DrawBitLine16BPP_Swap_2
   \   00000074   EDFFFFEA           B        ??_DrawBitLine16BPP_Swap_0
    677            }
    678            if (ySize) { 
   \                     ??_DrawBitLine16BPP_Swap_1:
   \   00000078   00005CE3           CMP      R12,#+0
   \   0000007C   0400000A           BEQ      ??_DrawBitLine16BPP_Swap_3
    679          	  do {
    680                WRITE_MEM16P(pDest, *pData);
   \                     ??_DrawBitLine16BPP_Swap_4:
   \   00000080   B020D3E1           LDRH     R2,[R3, #+0]
    681                pData += WordsPerLine;
   \   00000084   803083E0           ADD      R3,R3,R0, LSL #+1
    682                pDest--;
    683              } while (--ySize);
   \   00000088   01C05CE2           SUBS     R12,R12,#+1
   \   0000008C   B22041E0           STRH     R2,[R1], #-2
   \   00000090   FAFFFF1A           BNE      ??_DrawBitLine16BPP_Swap_4
    684            }
    685          }
   \                     ??_DrawBitLine16BPP_Swap_3:
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
    686          
    687          /*********************************************************************
    688          *
    689          *       _DrawBitmap
    690          */

   \                                 In section .text, align 4, keep-with-next
    691          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    692                                 int xSize, int ySize,
    693                                 int BitsPerPixel, 
    694                                 int BytesPerLine,
    695                                 const U8 GUI_UNI_PTR * pData, int Diff,
    696                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   44009DE5           LDR      R0,[SP, #+68]
   \   00000010   0190A0E1           MOV      R9,R1
    697            int i;
    698          
    699            //
    700            // Use _DrawBitLineXBPP and _DrawBitLineXBPP_Swap
    701            //
    702            switch (BitsPerPixel) {
   \   00000014   010040E2           SUB      R0,R0,#+1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   40809DE5           LDR      R8,[SP, #+64]
   \   00000020   48509DE5           LDR      R5,[SP, #+72]
   \   00000024   4CB09DE5           LDR      R11,[SP, #+76]
   \   00000028   54609DE5           LDR      R6,[SP, #+84]
   \   0000002C   0F0050E3           CMP      R0,#+15
   \   00000030   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000034   E700008A           BHI      ??_DrawBitmap_1
   \   00000038   0E0000EA           B        ??_DrawBitmap_2
   \   0000003C   470000EA           B        ??_DrawBitmap_3
   \   00000040   E40000EA           B        ??_DrawBitmap_1
   \   00000044   6F0000EA           B        ??_DrawBitmap_4
   \   00000048   E20000EA           B        ??_DrawBitmap_1
   \   0000004C   E10000EA           B        ??_DrawBitmap_1
   \   00000050   E00000EA           B        ??_DrawBitmap_1
   \   00000054   950000EA           B        ??_DrawBitmap_5
   \   00000058   DE0000EA           B        ??_DrawBitmap_1
   \   0000005C   DD0000EA           B        ??_DrawBitmap_1
   \   00000060   DC0000EA           B        ??_DrawBitmap_1
   \   00000064   DB0000EA           B        ??_DrawBitmap_1
   \   00000068   DA0000EA           B        ??_DrawBitmap_1
   \   0000006C   D90000EA           B        ??_DrawBitmap_1
   \   00000070   D80000EA           B        ??_DrawBitmap_1
   \   00000074   B20000EA           B        ??_DrawBitmap_6
    703            case 1:
    704              xSize += Diff & 7;
   \                     ??_DrawBitmap_2:
   \   00000078   50209DE5           LDR      R2,[SP, #+80]
    705              for (i = Diff; i < xSize; i++) {
   \   0000007C   50A09DE5           LDR      R10,[SP, #+80]
   \   00000080   072002E2           AND      R2,R2,#0x7
   \   00000084   031082E0           ADD      R1,R2,R3
   \   00000088   18108DE5           STR      R1,[SP, #+24]
   \   0000008C   01005AE1           CMP      R10,R1
   \   00000090   D00000AA           BGE      ??_DrawBitmap_1
   \   00000094   0A1041E0           SUB      R1,R1,R10
   \   00000098   09908AE0           ADD      R9,R10,R9
   \   0000009C   14108DE5           STR      R1,[SP, #+20]
   \   000000A0   010011E3           TST      R1,#0x1
   \   000000A4   0B00000A           BEQ      ??_DrawBitmap_7
    706                _DrawBitLine1BPP_Swap(pDevice, x0 + i, y0, pData + (i >> 3), ySize, pTrans, BytesPerLine, i);
   \   000000A8   FF000AE2           AND      R0,R10,#0xFF
   \   000000AC   0C008DE5           STR      R0,[SP, #+12]
   \   000000B0   08508DE5           STR      R5,[SP, #+8]
   \   000000B4   04608DE5           STR      R6,[SP, #+4]
   \   000000B8   00808DE5           STR      R8,[SP, #+0]
   \   000000BC   CA318BE0           ADD      R3,R11,R10, ASR #+3
   \   000000C0   0720A0E1           MOV      R2,R7
   \   000000C4   0910A0E1           MOV      R1,R9
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           BL       _DrawBitLine1BPP_Swap
   \   000000D0   01A08AE2           ADD      R10,R10,#+1
   \   000000D4   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_7:
   \   000000D8   14109DE5           LDR      R1,[SP, #+20]
   \   000000DC   A110A0E1           LSR      R1,R1,#+1
   \   000000E0   10108DE5           STR      R1,[SP, #+16]
   \   000000E4   000051E3           CMP      R1,#+0
   \   000000E8   BA00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   000000EC   FF000AE2           AND      R0,R10,#0xFF
   \   000000F0   0C008DE5           STR      R0,[SP, #+12]
   \   000000F4   08508DE5           STR      R5,[SP, #+8]
   \   000000F8   04608DE5           STR      R6,[SP, #+4]
   \   000000FC   00808DE5           STR      R8,[SP, #+0]
   \   00000100   CA318BE0           ADD      R3,R11,R10, ASR #+3
   \   00000104   0720A0E1           MOV      R2,R7
   \   00000108   0910A0E1           MOV      R1,R9
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           BL       _DrawBitLine1BPP_Swap
   \   00000114   01A08AE2           ADD      R10,R10,#+1
   \   00000118   FF000AE2           AND      R0,R10,#0xFF
   \   0000011C   0C008DE5           STR      R0,[SP, #+12]
   \   00000120   08508DE5           STR      R5,[SP, #+8]
   \   00000124   04608DE5           STR      R6,[SP, #+4]
   \   00000128   00808DE5           STR      R8,[SP, #+0]
   \   0000012C   CA318BE0           ADD      R3,R11,R10, ASR #+3
   \   00000130   0720A0E1           MOV      R2,R7
   \   00000134   011089E2           ADD      R1,R9,#+1
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       _DrawBitLine1BPP_Swap
    707              }
   \   00000140   10109DE5           LDR      R1,[SP, #+16]
   \   00000144   01A08AE2           ADD      R10,R10,#+1
   \   00000148   011041E2           SUB      R1,R1,#+1
   \   0000014C   10108DE5           STR      R1,[SP, #+16]
   \   00000150   029089E2           ADD      R9,R9,#+2
   \   00000154   000051E3           CMP      R1,#+0
   \   00000158   E3FFFF1A           BNE      ??_DrawBitmap_8
   \   0000015C   9D0000EA           B        ??_DrawBitmap_1
    708              break;
    709            case 2:
    710              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000160   010058E3           CMP      R8,#+1
   \   00000164   9B0000BA           BLT      ??_DrawBitmap_1
   \   00000168   010018E3           TST      R8,#0x1
   \   0000016C   0800000A           BEQ      ??_DrawBitmap_9
    711                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000170   50009DE5           LDR      R0,[SP, #+80]
   \   00000174   04308DE5           STR      R3,[SP, #+4]
   \   00000178   00008DE5           STR      R0,[SP, #+0]
   \   0000017C   08608DE5           STR      R6,[SP, #+8]
   \   00000180   0B30A0E1           MOV      R3,R11
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       _DrawBitLine2BPP
    712                pData += BytesPerLine;
   \   0000018C   0BB085E0           ADD      R11,R5,R11
   \   00000190   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitmap_9:
   \   00000194   A880B0E1           LSRS     R8,R8,#+1
   \   00000198   8E00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   0000019C   18009DE5           LDR      R0,[SP, #+24]
   \   000001A0   08608DE5           STR      R6,[SP, #+8]
   \   000001A4   04008DE5           STR      R0,[SP, #+4]
   \   000001A8   50009DE5           LDR      R0,[SP, #+80]
   \   000001AC   0B30A0E1           MOV      R3,R11
   \   000001B0   00008DE5           STR      R0,[SP, #+0]
   \   000001B4   0720A0E1           MOV      R2,R7
   \   000001B8   0910A0E1           MOV      R1,R9
   \   000001BC   0400A0E1           MOV      R0,R4
   \   000001C0   ........           BL       _DrawBitLine2BPP
   \   000001C4   18009DE5           LDR      R0,[SP, #+24]
   \   000001C8   0BA085E0           ADD      R10,R5,R11
   \   000001CC   04008DE5           STR      R0,[SP, #+4]
   \   000001D0   50009DE5           LDR      R0,[SP, #+80]
   \   000001D4   08608DE5           STR      R6,[SP, #+8]
   \   000001D8   00008DE5           STR      R0,[SP, #+0]
   \   000001DC   0A30A0E1           MOV      R3,R10
   \   000001E0   012087E2           ADD      R2,R7,#+1
   \   000001E4   0910A0E1           MOV      R1,R9
   \   000001E8   0400A0E1           MOV      R0,R4
   \   000001EC   ........           BL       _DrawBitLine2BPP
    713              }
   \   000001F0   018048E2           SUB      R8,R8,#+1
   \   000001F4   0AB085E0           ADD      R11,R5,R10
   \   000001F8   027087E2           ADD      R7,R7,#+2
   \   000001FC   000058E3           CMP      R8,#+0
   \   00000200   E5FFFF1A           BNE      ??_DrawBitmap_10
   \   00000204   730000EA           B        ??_DrawBitmap_1
    714              break;
    715            case 4:
    716              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   00000208   010058E3           CMP      R8,#+1
   \   0000020C   710000BA           BLT      ??_DrawBitmap_1
   \   00000210   010018E3           TST      R8,#0x1
   \   00000214   0800000A           BEQ      ??_DrawBitmap_11
    717                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000218   50009DE5           LDR      R0,[SP, #+80]
   \   0000021C   04308DE5           STR      R3,[SP, #+4]
   \   00000220   00008DE5           STR      R0,[SP, #+0]
   \   00000224   08608DE5           STR      R6,[SP, #+8]
   \   00000228   0B30A0E1           MOV      R3,R11
   \   0000022C   0400A0E1           MOV      R0,R4
   \   00000230   ........           BL       _DrawBitLine4BPP
    718                pData += BytesPerLine;
   \   00000234   0BB085E0           ADD      R11,R5,R11
   \   00000238   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitmap_11:
   \   0000023C   A880B0E1           LSRS     R8,R8,#+1
   \   00000240   6400000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000244   18009DE5           LDR      R0,[SP, #+24]
   \   00000248   08608DE5           STR      R6,[SP, #+8]
   \   0000024C   04008DE5           STR      R0,[SP, #+4]
   \   00000250   50009DE5           LDR      R0,[SP, #+80]
   \   00000254   0B30A0E1           MOV      R3,R11
   \   00000258   00008DE5           STR      R0,[SP, #+0]
   \   0000025C   0720A0E1           MOV      R2,R7
   \   00000260   0910A0E1           MOV      R1,R9
   \   00000264   0400A0E1           MOV      R0,R4
   \   00000268   ........           BL       _DrawBitLine4BPP
   \   0000026C   18009DE5           LDR      R0,[SP, #+24]
   \   00000270   0BA085E0           ADD      R10,R5,R11
   \   00000274   04008DE5           STR      R0,[SP, #+4]
   \   00000278   50009DE5           LDR      R0,[SP, #+80]
   \   0000027C   08608DE5           STR      R6,[SP, #+8]
   \   00000280   00008DE5           STR      R0,[SP, #+0]
   \   00000284   0A30A0E1           MOV      R3,R10
   \   00000288   012087E2           ADD      R2,R7,#+1
   \   0000028C   0910A0E1           MOV      R1,R9
   \   00000290   0400A0E1           MOV      R0,R4
   \   00000294   ........           BL       _DrawBitLine4BPP
    719              }
   \   00000298   018048E2           SUB      R8,R8,#+1
   \   0000029C   0AB085E0           ADD      R11,R5,R10
   \   000002A0   027087E2           ADD      R7,R7,#+2
   \   000002A4   000058E3           CMP      R8,#+0
   \   000002A8   E5FFFF1A           BNE      ??_DrawBitmap_12
   \   000002AC   490000EA           B        ??_DrawBitmap_1
    720              break;
    721            case 8:
    722              for (i = 0; i < xSize; i++) {
   \                     ??_DrawBitmap_5:
   \   000002B0   010053E3           CMP      R3,#+1
   \   000002B4   470000BA           BLT      ??_DrawBitmap_1
   \   000002B8   03A0A0E1           MOV      R10,R3
   \   000002BC   01001AE3           TST      R10,#0x1
   \   000002C0   0700000A           BEQ      ??_DrawBitmap_13
    723                _DrawBitLine8BPP_Swap(pDevice, x0 + i, y0, pData + i, ySize, pTrans, BytesPerLine);
   \   000002C4   08508DE5           STR      R5,[SP, #+8]
   \   000002C8   04608DE5           STR      R6,[SP, #+4]
   \   000002CC   00808DE5           STR      R8,[SP, #+0]
   \   000002D0   0B30A0E1           MOV      R3,R11
   \   000002D4   0400A0E1           MOV      R0,R4
   \   000002D8   ........           BL       _DrawBitLine8BPP_Swap
   \   000002DC   019089E2           ADD      R9,R9,#+1
   \   000002E0   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_13:
   \   000002E4   AAA0B0E1           LSRS     R10,R10,#+1
   \   000002E8   3A00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   000002EC   08508DE5           STR      R5,[SP, #+8]
   \   000002F0   04608DE5           STR      R6,[SP, #+4]
   \   000002F4   00808DE5           STR      R8,[SP, #+0]
   \   000002F8   0B30A0E1           MOV      R3,R11
   \   000002FC   0720A0E1           MOV      R2,R7
   \   00000300   0910A0E1           MOV      R1,R9
   \   00000304   0400A0E1           MOV      R0,R4
   \   00000308   ........           BL       _DrawBitLine8BPP_Swap
   \   0000030C   08508DE5           STR      R5,[SP, #+8]
   \   00000310   04608DE5           STR      R6,[SP, #+4]
   \   00000314   00808DE5           STR      R8,[SP, #+0]
   \   00000318   01308BE2           ADD      R3,R11,#+1
   \   0000031C   0720A0E1           MOV      R2,R7
   \   00000320   011089E2           ADD      R1,R9,#+1
   \   00000324   0400A0E1           MOV      R0,R4
   \   00000328   ........           BL       _DrawBitLine8BPP_Swap
    724              }
   \   0000032C   01A04AE2           SUB      R10,R10,#+1
   \   00000330   029089E2           ADD      R9,R9,#+2
   \   00000334   02B08BE2           ADD      R11,R11,#+2
   \   00000338   00005AE3           CMP      R10,#+0
   \   0000033C   EAFFFF1A           BNE      ??_DrawBitmap_14
   \   00000340   240000EA           B        ??_DrawBitmap_1
    725              break;
    726            case 16:
    727              for (i = Diff; i < xSize; i++) {
   \                     ??_DrawBitmap_6:
   \   00000344   50A09DE5           LDR      R10,[SP, #+80]
   \   00000348   03005AE1           CMP      R10,R3
   \   0000034C   210000AA           BGE      ??_DrawBitmap_1
   \   00000350   8A608BE0           ADD      R6,R11,R10, LSL #+1
   \   00000354   0AB043E0           SUB      R11,R3,R10
   \   00000358   01001BE3           TST      R11,#0x1
   \   0000035C   0700000A           BEQ      ??_DrawBitmap_15
    728                _DrawBitLine16BPP_Swap(pDevice, x0 + i, y0, (U16 *)(pData + (i << 1)), ySize, BytesPerLine);
   \   00000360   04508DE5           STR      R5,[SP, #+4]
   \   00000364   00808DE5           STR      R8,[SP, #+0]
   \   00000368   0630A0E1           MOV      R3,R6
   \   0000036C   09108AE0           ADD      R1,R10,R9
   \   00000370   0400A0E1           MOV      R0,R4
   \   00000374   ........           BL       _DrawBitLine16BPP_Swap
   \   00000378   01A08AE2           ADD      R10,R10,#+1
   \   0000037C   026086E2           ADD      R6,R6,#+2
   \                     ??_DrawBitmap_15:
   \   00000380   ABB0B0E1           LSRS     R11,R11,#+1
   \   00000384   1300000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   00000388   04508DE5           STR      R5,[SP, #+4]
   \   0000038C   00808DE5           STR      R8,[SP, #+0]
   \   00000390   0630A0E1           MOV      R3,R6
   \   00000394   0720A0E1           MOV      R2,R7
   \   00000398   09108AE0           ADD      R1,R10,R9
   \   0000039C   0400A0E1           MOV      R0,R4
   \   000003A0   ........           BL       _DrawBitLine16BPP_Swap
   \   000003A4   01A08AE2           ADD      R10,R10,#+1
   \   000003A8   04508DE5           STR      R5,[SP, #+4]
   \   000003AC   00808DE5           STR      R8,[SP, #+0]
   \   000003B0   023086E2           ADD      R3,R6,#+2
   \   000003B4   0720A0E1           MOV      R2,R7
   \   000003B8   09108AE0           ADD      R1,R10,R9
   \   000003BC   0400A0E1           MOV      R0,R4
   \   000003C0   ........           BL       _DrawBitLine16BPP_Swap
    729              }
   \   000003C4   01B04BE2           SUB      R11,R11,#+1
   \   000003C8   01A08AE2           ADD      R10,R10,#+1
   \   000003CC   046086E2           ADD      R6,R6,#+4
   \   000003D0   00005BE3           CMP      R11,#+0
   \   000003D4   EBFFFF1A           BNE      ??_DrawBitmap_16
    730              break;
    731            }
    732          }
   \                     ??_DrawBitmap_1:
   \   000003D8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000003DC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    733          
    734          /*********************************************************************
    735          *
    736          *       _SetOrg
    737          */

   \                                 In section .text, align 4, keep-with-next
    738          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    739            #ifndef WIN32
    740              DRIVER_CONTEXT * pContext;
    741            #endif
    742            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    743          
    744            #ifdef WIN32
    745              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    746            #else
    747              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
    748              Data.xPos = pContext->vySize - pContext->ySize  - y;
   \   00000024   10C093E5           LDR      R12,[R3, #+16]
   \   00000028   083093E5           LDR      R3,[R3, #+8]
    749              Data.yPos = x;
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   03304CE0           SUB      R3,R12,R3
   \   00000034   022043E0           SUB      R2,R3,R2
   \   00000038   00208DE5           STR      R2,[SP, #+0]
    750              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   180090E5           LDR      R0,[R0, #+24]
   \   00000048   ........           BL       LCD_X_DisplayDriver
    751            #endif
    752          }
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    753          
    754          /*********************************************************************
    755          *
    756          *       _InitOnce
    757          *
    758          * Purpose:
    759          *   Allocates a fixed block for the context of the driver
    760          *
    761          * Return value:
    762          *   0 on success, 1 on error
    763          */
    764          static int _InitOnce(GUI_DEVICE * pDevice) {
    765            if (pDevice->u.pContext == NULL) {
    766              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    767              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    768            }
    769            return pDevice->u.pContext ? 0 : 1;
    770          }
    771          
    772          /*********************************************************************
    773          *
    774          *       _GetRect
    775          */

   \                                 In section .text, align 4, keep-with-next
    776          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    777            DRIVER_CONTEXT * pContext;
    778          
    779            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    780            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    781            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    782            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    783            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    784          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    785          
    786          /*********************************************************************
    787          *
    788          *       _GetDevProp
    789          */

   \                                 In section .text, align 4, keep-with-next
    790          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    791            DRIVER_CONTEXT * pContext;
    792          
    793            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    794            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0D0000EA           B        ??_GetDevProp_8
   \   00000044   0A0000EA           B        ??_GetDevProp_7
   \   00000048   0B0000EA           B        ??_GetDevProp_8
    795            case LCD_DEVCAP_XSIZE:
    796              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    797            case LCD_DEVCAP_YSIZE:
    798              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    799            case LCD_DEVCAP_VXSIZE:
    800              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    801            case LCD_DEVCAP_VYSIZE:
    802              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    803            case LCD_DEVCAP_BITSPERPIXEL:
    804              return 16;
   \                     ??_GetDevProp_6:
   \   0000006C   1000A0E3           MOV      R0,#+16
   \   00000070   1EFF2FE1           BX       LR
    805            case LCD_DEVCAP_NUMCOLORS:
    806              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    807            case LCD_DEVCAP_XMAG:
    808              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    809            case LCD_DEVCAP_YMAG:
    810              return 1;
    811            case LCD_DEVCAP_MIRROR_X:
    812              return 1;
    813            case LCD_DEVCAP_MIRROR_Y:
    814              return 0;
    815            case LCD_DEVCAP_SWAP_XY:
    816              return 1;
    817            }
    818            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    819          }
    820          
    821          /*********************************************************************
    822          *
    823          *       _GetDevData
    824          */

   \                                 In section .text, align 4, keep-with-next
    825          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    826            GUI_USE_PARA(pDevice);
    827            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    828            #if GUI_SUPPORT_MEMDEV
    829              case LCD_DEVDATA_MEMDEV:
    830                return (void *)&GUI_MEMDEV_DEVICE_16;
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   1EFF2FE1           BX       LR
    831            #endif
    832            }
    833            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    834          }
    835          
    836          /*********************************************************************
    837          *
    838          *       Functions available by _GetDevFunc()
    839          *
    840          **********************************************************************
    841          */
    842          /*********************************************************************
    843          *
    844          *       _SetVRAMAddr
    845          */

   \                                 In section .text, align 4, keep-with-next
    846          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    847            DRIVER_CONTEXT * pContext;
    848            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    849          
    850            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    851            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    852              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    853              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    854              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    855              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    856            }
    857            #ifdef WIN32
    858              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    859            #endif
    860          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    861          
    862          /*********************************************************************
    863          *
    864          *       _SetVSize
    865          */

   \                                 In section .text, align 4, keep-with-next
    866          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    867            DRIVER_CONTEXT * pContext;
    868          
    869            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    870            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    871              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    872              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    873              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    874              pContext->vxSizePhys = ySize;
   \   00000044   14608015           STRNE    R6,[R0, #+20]
    875            }
    876            #ifdef WIN32
    877              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    878            #endif
    879          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    880          
    881          /*********************************************************************
    882          *
    883          *       _SetSize
    884          */

   \                                 In section .text, align 4, keep-with-next
    885          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    886            DRIVER_CONTEXT * pContext;
    887            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    888          
    889            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    890            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    891              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    892              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    893                pContext->vxSizePhys = ySize;
    894              }
    895              pContext->xSize = xSize;
    896              pContext->ySize = ySize;
    897              Data.xSize = xSize;
    898              Data.ySize = ySize;
    899              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14608005           STREQ    R6,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    900            }
    901          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    902          
    903          /*********************************************************************
    904          *
    905          *       _SetPos
    906          */

   \                                 In section .text, align 4, keep-with-next
    907          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    908            DRIVER_CONTEXT * pContext;
    909            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    910          
    911            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    912            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    913              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    914              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    915              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    916              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    917              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    918              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    919            }
    920          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    921          
    922          /*********************************************************************
    923          *
    924          *       _GetPos
    925          */

   \                                 In section .text, align 4, keep-with-next
    926          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    927            DRIVER_CONTEXT * pContext;
    928          
    929            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    930            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    931              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    932              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    933              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    934            }
    935          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    936          
    937          /*********************************************************************
    938          *
    939          *       _SetAlpha
    940          */

   \                                 In section .text, align 4, keep-with-next
    941          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    942            DRIVER_CONTEXT * pContext;
    943            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    944          
    945            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    946            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    947              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    948              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    949              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    950              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    951            }
    952          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    953          
    954          /*********************************************************************
    955          *
    956          *       _SetVis
    957          */

   \                                 In section .text, align 4, keep-with-next
    958          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    959            DRIVER_CONTEXT * pContext;
    960            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    961          
    962            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    963            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    964              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    965              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    966              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    967              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    968            }
    969          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    970          
    971          /*********************************************************************
    972          *
    973          *       _Init
    974          */

   \                                 In section .text, align 4, keep-with-next
    975          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    976            int r;
    977          
    978            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    979            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    980            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    981          }
    982          
    983          /*********************************************************************
    984          *
    985          *       _On
    986          */

   \                                 In section .text, align 4, keep-with-next
    987          static void _On (GUI_DEVICE * pDevice) {
    988            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    989          }
    990          
    991          /*********************************************************************
    992          *
    993          *       _Off
    994          */

   \                                 In section .text, align 4, keep-with-next
    995          static void _Off (GUI_DEVICE * pDevice) {
    996            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    997          }
    998          
    999          /*********************************************************************
   1000          *
   1001          *       _SetLUTEntry
   1002          */

   \                                 In section .text, align 4, keep-with-next
   1003          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1004            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1005          
   1006            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
   1007            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
   1008            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1009          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1010          
   1011          /*********************************************************************
   1012          *
   1013          *       _SetAlphaMode
   1014          */

   \                                 In section .text, align 4, keep-with-next
   1015          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1016            LCD_X_SETALPHAMODE_INFO Data = {0};
   1017          
   1018            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1019            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1020          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1021          
   1022          /*********************************************************************
   1023          *
   1024          *       _SetChromaMode
   1025          */

   \                                 In section .text, align 4, keep-with-next
   1026          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1027            LCD_X_SETCHROMAMODE_INFO Data = {0};
   1028          
   1029            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1030            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1031          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1032          
   1033          /*********************************************************************
   1034          *
   1035          *       _SetChroma
   1036          */

   \                                 In section .text, align 4, keep-with-next
   1037          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1038            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1039          
   1040            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1041            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   1042            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1043          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1044          
   1045          /*********************************************************************
   1046          *
   1047          *       _SetFunc
   1048          */

   \                                 In section .text, align 4, keep-with-next
   1049          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1050            DRIVER_CONTEXT * pContext;
   1051          
   1052            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1053            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
   1054              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1055              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
   1056              case LCD_DEVFUNC_FILLRECT:
   1057                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
   1058                break;
   1059              }
   1060            }
   1061          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1062          
   1063          /*********************************************************************
   1064          *
   1065          *       _GetDevFunc
   1066          */

   \                                 In section .text, align 4, keep-with-next
   1067          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
   1068            GUI_USE_PARA(ppDevice);
   1069            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   021041E2           SUB      R1,R1,#+2
   \   00000004   140051E3           CMP      R1,#+20
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   1400008A           BHI      ??_GetDevFunc_1
   \   00000010   1F0000EA           B        ??_GetDevFunc_2
   \   00000014   1A0000EA           B        ??_GetDevFunc_3
   \   00000018   1B0000EA           B        ??_GetDevFunc_4
   \   0000001C   100000EA           B        ??_GetDevFunc_1
   \   00000020   1D0000EA           B        ??_GetDevFunc_5
   \   00000024   0E0000EA           B        ??_GetDevFunc_1
   \   00000028   0D0000EA           B        ??_GetDevFunc_1
   \   0000002C   0E0000EA           B        ??_GetDevFunc_6
   \   00000030   0F0000EA           B        ??_GetDevFunc_7
   \   00000034   100000EA           B        ??_GetDevFunc_8
   \   00000038   190000EA           B        ??_GetDevFunc_9
   \   0000003C   080000EA           B        ??_GetDevFunc_1
   \   00000040   190000EA           B        ??_GetDevFunc_10
   \   00000044   1A0000EA           B        ??_GetDevFunc_11
   \   00000048   1B0000EA           B        ??_GetDevFunc_12
   \   0000004C   040000EA           B        ??_GetDevFunc_1
   \   00000050   030000EA           B        ??_GetDevFunc_1
   \   00000054   1A0000EA           B        ??_GetDevFunc_13
   \   00000058   1B0000EA           B        ??_GetDevFunc_14
   \   0000005C   1C0000EA           B        ??_GetDevFunc_15
   \   00000060   1D0000EA           B        ??_GetDevFunc_16
   1070            case LCD_DEVFUNC_READRECT:
   1071              return (void (*)(void))NULL;
   \                     ??_GetDevFunc_1:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   1EFF2FE1           BX       LR
   1072            case LCD_DEVFUNC_SET_VRAM_ADDR:
   1073              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_6:
   \   0000006C   ........           LDR      R0,??DataTable16_1
   \   00000070   1EFF2FE1           BX       LR
   1074            case LCD_DEVFUNC_SET_VSIZE:
   1075              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_7:
   \   00000074   ........           LDR      R0,??DataTable16_2
   \   00000078   1EFF2FE1           BX       LR
   1076            case LCD_DEVFUNC_SET_SIZE:
   1077              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_8:
   \   0000007C   ........           LDR      R0,??DataTable16_3
   \   00000080   1EFF2FE1           BX       LR
   1078            case LCD_DEVFUNC_SETPOS:
   1079              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_3:
   \   00000084   ........           LDR      R0,??DataTable16_4
   \   00000088   1EFF2FE1           BX       LR
   1080            case LCD_DEVFUNC_GETPOS:
   1081              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_4:
   \   0000008C   ........           LDR      R0,??DataTable16_5
   \   00000090   1EFF2FE1           BX       LR
   1082            case LCD_DEVFUNC_SETALPHA:
   1083              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_2:
   \   00000094   ........           LDR      R0,??DataTable16_6
   \   00000098   1EFF2FE1           BX       LR
   1084            case LCD_DEVFUNC_SETVIS:
   1085              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_5:
   \   0000009C   ........           LDR      R0,??DataTable16_7
   \   000000A0   1EFF2FE1           BX       LR
   1086            case LCD_DEVFUNC_INIT:
   1087              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_9:
   \   000000A4   ........           LDR      R0,??DataTable16_8
   \   000000A8   1EFF2FE1           BX       LR
   1088            case LCD_DEVFUNC_ON:
   1089              return (void (*)(void))_On;
   \                     ??_GetDevFunc_10:
   \   000000AC   ........           LDR      R0,??DataTable16_9
   \   000000B0   1EFF2FE1           BX       LR
   1090            case LCD_DEVFUNC_OFF:
   1091              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_11:
   \   000000B4   ........           LDR      R0,??DataTable16_10
   \   000000B8   1EFF2FE1           BX       LR
   1092            case LCD_DEVFUNC_SETLUTENTRY:
   1093              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_12:
   \   000000BC   ........           LDR      R0,??DataTable16_11
   \   000000C0   1EFF2FE1           BX       LR
   1094          
   1095            case LCD_DEVFUNC_ALPHAMODE:
   1096              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_13:
   \   000000C4   ........           LDR      R0,??DataTable16_12
   \   000000C8   1EFF2FE1           BX       LR
   1097            case LCD_DEVFUNC_CHROMAMODE:
   1098              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_14:
   \   000000CC   ........           LDR      R0,??DataTable16_13
   \   000000D0   1EFF2FE1           BX       LR
   1099            case LCD_DEVFUNC_CHROMA:
   1100              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_15:
   \   000000D4   ........           LDR      R0,??DataTable16_14
   \   000000D8   1EFF2FE1           BX       LR
   1101            
   1102            case LCD_DEVFUNC_SETFUNC:
   1103              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_16:
   \   000000DC   ........           LDR      R0,??DataTable16_15
   \   000000E0   1EFF2FE1           BX       LR               ;; return
   1104            }
   1105            return NULL;
   1106          }
   1107          
   1108          /*********************************************************************
   1109          *
   1110          *       Public data
   1111          *
   1112          **********************************************************************
   1113          */
   1114          /*********************************************************************
   1115          *
   1116          *       GUI_DEVICE_API structure
   1117          */

   \                                 In section .rodata, align 4, keep-with-next
   1118          const GUI_DEVICE_API GUIDRV_Lin_OSX_16_API = {
   \                     GUIDRV_Lin_OSX_16_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1119            //
   1120            // Data
   1121            //
   1122            DEVICE_CLASS_DRIVER,
   1123            //
   1124            // Drawing functions
   1125            //
   1126            _DrawBitmap,
   1127            _DrawHLine,
   1128            _DrawVLine,
   1129            _FillRect,
   1130            _GetPixelIndex,
   1131            _SetPixelIndex,
   1132            _XorPixel,
   1133            //
   1134            // Set origin
   1135            //
   1136            _SetOrg,
   1137            //
   1138            // Request information
   1139            //
   1140            _GetDevFunc,
   1141            _GetDevProp,
   1142            _GetDevData,
   1143            _GetRect,
   1144          };
   1145          
   1146          #else
   1147          
   1148          void GUIDRV_Lin_OSX_16_C(void);   // Avoid empty object files
   1149          void GUIDRV_Lin_OSX_16_C(void) {}
   1150          
   1151          #endif
   1152          
   1153          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     _DrawBitLine16BPP_Swap     12
     _DrawBitLine1BPP_Swap      40
     _DrawBitLine2BPP           32
     _DrawBitLine4BPP           32
     _DrawBitLine8BPP_Swap      16
     _DrawBitmap                64
     _DrawHLine                 24
     _DrawVLine                 24
     _FillRect                  24
     _GetDevData                 0
     _GetDevFunc                 0
     _GetDevProp                 0
     _GetPixelIndex              0
     _GetPos                    16
     _GetRect                    0
     _Init                      16
     _Off                        8
     _On                         8
     _SetAlpha                  16
     _SetAlphaMode               8
     _SetChroma                 24
     _SetChromaMode              8
     _SetFunc                   16
     _SetLUTEntry               24
     _SetOrg                    24
     _SetPixelIndex              4
     _SetPos                    24
     _SetSize                   24
     _SetVRAMAddr               16
     _SetVSize                  16
     _SetVis                    16
     _XorPixel                  24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            44
     _GetPixelIndex            40
     _XorPixel                116
     _DrawHLine               220
     _DrawVLine               364
     _FillRect                 68
     _DrawBitLine1BPP_Swap    500
     _DrawBitLine2BPP         460
     _DrawBitLine4BPP         460
     _DrawBitLine8BPP_Swap    368
     _DrawBitLine16BPP_Swap   152
     _DrawBitmap              992
     _SetOrg                   84
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              228
     GUIDRV_Lin_OSX_16_API     52
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 5 584 bytes in section .text
 
 5 584 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
