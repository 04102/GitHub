###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawRoundedRect.c               #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawRoundedRect.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawRoundedRect.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawRoundedRect.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawRoundedRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawRoundedRect.c
     19          Purpose     : Implementation of GUI_DrawRoundedRect
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <math.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DrawRoundedRect
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DrawRoundedRect(int x0, int y0, int x1, int y1, int r) {
   \                     _DrawRoundedRect:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
     38          #if defined(GUI_OPTIMIZE_ROUNDING)
     39          
     40            I32 rr;
     41            int y, yt, yb, x, xs, xe, l, xOld, MinSize;
     42          
     43            MinSize = ((y1 - y0 + 1) < (x1 - x0 + 1)) ? y1 - y0 + 1 : x1 - x0 + 1;
     44            if (MinSize < ((r - 2) << 1)) {
     45              r = (MinSize >> 1) + 1;
     46            }
     47            rr = (I32)r * r;
     48            xOld = -1;
     49            if (r > 0) {
     50              for (y = r - 1; y; y--) {
     51                x = GUI__sqrt32(rr - (I32)y * y);
     52                xs = x0 + r - x - 1;
     53                xe = x1 - r + x + 1;
     54                yt = y0 + (r - y) - 1;
     55                yb = y1 - (r - y) + 1;
     56                l = x - xOld;
     57                if (l > 1) {
     58                  LCD_DrawHLine(xs,         yt, xs + l - 1);
     59                  LCD_DrawHLine(xe - l + 1, yt, xe        );
     60                  LCD_DrawHLine(xs,         yb, xs + l - 1);
     61                  LCD_DrawHLine(xe - l + 1, yb, xe        );
     62                } else {
     63                  LCD_DrawPixel(xs, yt);
     64                  LCD_DrawPixel(xe, yt);
     65                  LCD_DrawPixel(xs, yb);
     66                  LCD_DrawPixel(xe, yb);
     67                }
     68                xOld = x;
     69              }
     70            }
     71            LCD_DrawHLine(x0 + r, y0, x1 - r);
     72            LCD_DrawHLine(x0 + r, y1, x1 - r);
     73            LCD_DrawVLine(x0, y0 + r - 1, y1 - r + 1);
     74            LCD_DrawVLine(x1, y0 + r - 1, y1 - r + 1);
     75          
     76          #else
     77          
     78            I32 rr;
     79            int i, y, ye, x, xs, xe, l, xOld;
     80          
     81            if (((y1 - y0 + 1) >= (r << 1)) && ((x1 - x0 + 1) >= (r << 1))) {
   \   00000008   18209DE5           LDR      R2,[SP, #+24]
   \   0000000C   48009DE5           LDR      R0,[SP, #+72]
   \   00000010   021043E0           SUB      R1,R3,R2
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   800051E1           CMP      R1,R0, LSL #+1
   \   0000001C   680000BA           BLT      ??_DrawRoundedRect_0
   \   00000020   1C109DE5           LDR      R1,[SP, #+28]
   \   00000024   14209DE5           LDR      R2,[SP, #+20]
   \   00000028   021041E0           SUB      R1,R1,R2
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   800051E1           CMP      R1,R0, LSL #+1
   \   00000034   620000BA           BLT      ??_DrawRoundedRect_0
     82              rr = (I32)r * r;
   \   00000038   48109DE5           LDR      R1,[SP, #+72]
     83              y  = r;
     84              xOld = -1;
     85              for (i = y0; i <= (y0 + r); i++, y--, xOld = x) {
   \   0000003C   18509DE5           LDR      R5,[SP, #+24]
   \   00000040   0120A0E1           MOV      R2,R1
   \   00000044   920101E0           MUL      R1,R2,R1
   \   00000048   0240A0E1           MOV      R4,R2
   \   0000004C   10108DE5           STR      R1,[SP, #+16]
   \   00000050   1C109DE5           LDR      R1,[SP, #+28]
   \   00000054   00A0E0E3           MVN      R10,#+0
   \   00000058   021041E0           SUB      R1,R1,R2
   \   0000005C   0C108DE5           STR      R1,[SP, #+12]
   \   00000060   14109DE5           LDR      R1,[SP, #+20]
   \   00000064   011082E0           ADD      R1,R2,R1
   \   00000068   08108DE5           STR      R1,[SP, #+8]
   \   0000006C   051082E0           ADD      R1,R2,R5
   \   00000070   04108DE5           STR      R1,[SP, #+4]
   \   00000074   050051E1           CMP      R1,R5
   \   00000078   370000BA           BLT      ??_DrawRoundedRect_1
   \   0000007C   00308DE5           STR      R3,[SP, #+0]
     86                x = GUI__sqrt32(rr - (I32)y * y);
   \                     ??_DrawRoundedRect_2:
   \   00000080   940401E0           MUL      R1,R4,R4
   \   00000084   10009DE5           LDR      R0,[SP, #+16]
   \   00000088   010040E0           SUB      R0,R0,R1
   \   0000008C   ........           BL       GUI__sqrt32
   \   00000090   0060A0E1           MOV      R6,R0
     87                xs = x0 + r - x;
   \   00000094   08009DE5           LDR      R0,[SP, #+8]
     88                xe = x1 - r + x;
     89                ye = y1 - (i - y0);
     90                l = x - xOld;
   \   00000098   0AB046E0           SUB      R11,R6,R10
   \   0000009C   067040E0           SUB      R7,R0,R6
   \   000000A0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000A4   00909DE5           LDR      R9,[SP, #+0]
   \   000000A8   008086E0           ADD      R8,R6,R0
     91                if (l > 1) {
   \   000000AC   02005BE3           CMP      R11,#+2
   \   000000B0   140000BA           BLT      ??_DrawRoundedRect_3
   \   000000B4   0B0087E0           ADD      R0,R7,R11
   \   000000B8   01A040E2           SUB      R10,R0,#+1
   \   000000BC   0A20A0E1           MOV      R2,R10
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   0700A0E1           MOV      R0,R7
     92                  LCD_DrawHLine(xs,          i, xs + l - 1);
   \   000000C8   ........           BL       LCD_DrawHLine
   \   000000CC   0B0048E0           SUB      R0,R8,R11
   \   000000D0   01B080E2           ADD      R11,R0,#+1
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0510A0E1           MOV      R1,R5
   \   000000DC   0B00A0E1           MOV      R0,R11
     93                  LCD_DrawHLine(xe - l + 1,  i, xe        );
   \   000000E0   ........           BL       LCD_DrawHLine
     94                  LCD_DrawHLine(xs,         ye, xs + l - 1);
   \   000000E4   0A20A0E1           MOV      R2,R10
   \   000000E8   0910A0E1           MOV      R1,R9
   \   000000EC   0700A0E1           MOV      R0,R7
   \   000000F0   ........           BL       LCD_DrawHLine
     95                  LCD_DrawHLine(xe - l + 1, ye, xe        );
   \   000000F4   0820A0E1           MOV      R2,R8
   \   000000F8   0910A0E1           MOV      R1,R9
   \   000000FC   0B00A0E1           MOV      R0,R11
   \   00000100   ........           BL       LCD_DrawHLine
   \   00000104   0B0000EA           B        ??_DrawRoundedRect_4
     96                } else {
     97                  LCD_DrawPixel(xs,  i);
   \                     ??_DrawRoundedRect_3:
   \   00000108   0510A0E1           MOV      R1,R5
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   ........           BL       LCD_DrawPixel
     98                  LCD_DrawPixel(xe,  i);
   \   00000114   0510A0E1           MOV      R1,R5
   \   00000118   0800A0E1           MOV      R0,R8
   \   0000011C   ........           BL       LCD_DrawPixel
     99                  LCD_DrawPixel(xs, ye);
   \   00000120   0910A0E1           MOV      R1,R9
   \   00000124   0700A0E1           MOV      R0,R7
   \   00000128   ........           BL       LCD_DrawPixel
    100                  LCD_DrawPixel(xe, ye);
   \   0000012C   0910A0E1           MOV      R1,R9
   \   00000130   0800A0E1           MOV      R0,R8
   \   00000134   ........           BL       LCD_DrawPixel
    101                }
    102              }
   \                     ??_DrawRoundedRect_4:
   \   00000138   00109DE5           LDR      R1,[SP, #+0]
   \   0000013C   04009DE5           LDR      R0,[SP, #+4]
   \   00000140   015085E2           ADD      R5,R5,#+1
   \   00000144   011041E2           SUB      R1,R1,#+1
   \   00000148   014044E2           SUB      R4,R4,#+1
   \   0000014C   06A0A0E1           MOV      R10,R6
   \   00000150   00108DE5           STR      R1,[SP, #+0]
   \   00000154   050050E1           CMP      R0,R5
   \   00000158   C8FFFFAA           BGE      ??_DrawRoundedRect_2
    103              LCD_DrawHLine(x0 + r + 1, y0, x1 - r - 1);
   \                     ??_DrawRoundedRect_1:
   \   0000015C   08009DE5           LDR      R0,[SP, #+8]
   \   00000160   18109DE5           LDR      R1,[SP, #+24]
   \   00000164   014080E2           ADD      R4,R0,#+1
   \   00000168   0C009DE5           LDR      R0,[SP, #+12]
   \   0000016C   015040E2           SUB      R5,R0,#+1
   \   00000170   0520A0E1           MOV      R2,R5
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           BL       LCD_DrawHLine
    104              LCD_DrawHLine(x0 + r + 1, y1, x1 - r - 1);
   \   0000017C   0520A0E1           MOV      R2,R5
   \   00000180   20109DE5           LDR      R1,[SP, #+32]
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       LCD_DrawHLine
    105              LCD_DrawVLine(x0, y0 + r + 1, y1 - r - 1);
   \   0000018C   04009DE5           LDR      R0,[SP, #+4]
   \   00000190   48109DE5           LDR      R1,[SP, #+72]
   \   00000194   014080E2           ADD      R4,R0,#+1
   \   00000198   20009DE5           LDR      R0,[SP, #+32]
   \   0000019C   010040E0           SUB      R0,R0,R1
   \   000001A0   015040E2           SUB      R5,R0,#+1
   \   000001A4   0520A0E1           MOV      R2,R5
   \   000001A8   0410A0E1           MOV      R1,R4
   \   000001AC   14009DE5           LDR      R0,[SP, #+20]
   \   000001B0   ........           BL       LCD_DrawVLine
    106              LCD_DrawVLine(x1, y0 + r + 1, y1 - r - 1);
   \   000001B4   0520A0E1           MOV      R2,R5
   \   000001B8   0410A0E1           MOV      R1,R4
   \   000001BC   1C009DE5           LDR      R0,[SP, #+28]
   \   000001C0   ........           BL       LCD_DrawVLine
    107            }
    108          
    109          #endif
    110          }
   \                     ??_DrawRoundedRect_0:
   \   000001C4   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000001C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       Public code
    115          *
    116          **********************************************************************
    117          */
    118          /*********************************************************************
    119          *
    120          *       GUI_DrawRoundedRect
    121          */

   \                                 In section .text, align 4, keep-with-next
    122          void GUI_DrawRoundedRect(int x0, int y0, int x1, int y1, int r) {
   \                     GUI_DrawRoundedRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   28409DE5           LDR      R4,[SP, #+40]
    123            #if (GUI_WINSUPPORT)
    124              GUI_RECT Rect;
    125            #endif
    126            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    127            #if (GUI_WINSUPPORT)
    128              WM_ADDORG(x0,y0);
   \   00000020   ........           LDR      R0,??DataTable0
   \   00000024   401090E5           LDR      R1,[R0, #+64]
   \   00000028   440090E5           LDR      R0,[R0, #+68]
   \   0000002C   066081E0           ADD      R6,R1,R6
   \   00000030   088080E0           ADD      R8,R0,R8
    129              WM_ADDORG(x1,y1);
   \   00000034   077081E0           ADD      R7,R1,R7
   \   00000038   055080E0           ADD      R5,R0,R5
    130              Rect.x0 = x0; Rect.x1 = x1;
   \   0000003C   B460CDE1           STRH     R6,[SP, #+4]
   \   00000040   B870CDE1           STRH     R7,[SP, #+8]
    131              Rect.y0 = y0; Rect.y1 = y1;
   \   00000044   B680CDE1           STRH     R8,[SP, #+6]
   \   00000048   BA50CDE1           STRH     R5,[SP, #+10]
    132              WM_ITERATE_START(&Rect); {
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   ........           BL       WM__InitIVRSearch
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0800000A           BEQ      ??GUI_DrawRoundedRect_0
    133            #endif
    134            _DrawRoundedRect(x0, y0, x1, y1, r);
   \                     ??GUI_DrawRoundedRect_1:
   \   0000005C   00408DE5           STR      R4,[SP, #+0]
   \   00000060   0530A0E1           MOV      R3,R5
   \   00000064   0720A0E1           MOV      R2,R7
   \   00000068   0810A0E1           MOV      R1,R8
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       _DrawRoundedRect
    135            #if (GUI_WINSUPPORT)
    136              } WM_ITERATE_END();
   \   00000074   ........           BL       WM__GetNextIVR
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   F6FFFF1A           BNE      ??GUI_DrawRoundedRect_1
    137            #endif
    138            GUI_UNLOCK();
   \                     ??GUI_DrawRoundedRect_0:
   \   00000080   ........           BL       GUI_Unlock
    139          }
   \   00000084   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000088   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     GUI_Context
    140          
    141          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_DrawRoundedRect     40
     _DrawRoundedRect        72


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _DrawRoundedRect     460
     GUI_DrawRoundedRect  140
     ??DataTable0           4

 
 604 bytes in section .text
 
 604 bytes of CODE memory

Errors: none
Warnings: none
