###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     20/Nov/2015  12:00:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\adc.c                             #
#    Command line =  C:\DUII\TargetHW\Setup\adc.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\adc.lst                    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\adc.o                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\adc.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDConf.c
     19          Purpose     : Display controller configuration (single layer)
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          //#define	LED_TEMP_TEST_CODE	1
     24          
     25          #include "RTOS.h"
     26          #include "adc.h"
     27          #include "Global.h"
     28          #include "SPI_API.h"
     29          #ifdef	LED_TEMP_TEST_CODE
     30          #include "DataHandler.h"
     31          #endif
     32          
     33          /*********************************************************************
     34          *
     35          *       Defines
     36          *
     37          **********************************************************************
     38          */
     39          
     40          #define AT91C_ID_TSADC_BIT                (20)                             // Touch Screen / ADC Controller
     41          
     42          //
     43          // ADC
     44          //
     45          #define TSADCC_CR							(*(volatile U32*) (0xFFFD0000))	// Control register
     46          #define TSADCC_MR							(*(volatile U32*) (0xFFFD0004))	// Mode register
     47          #define TSADCC_TRGR							(*(volatile U32*) (0xFFFD0008))	// Trigger register
     48          #define TSADCC_TSR							(*(volatile U32*) (0xFFFD000C))	// Touch Screen register
     49          #define TSADCC_CHER							(*(volatile U32*) (0xFFFD0010)) // (TSADC_CHER) Channel Enable Register
     50          #define TSADCC_CHDR							(*(volatile U32*) (0xFFFD0014)) // (TSADC_CHDR) Channel Disable Register
     51          #define TSADCC_CHSR							(*(volatile U32*) (0xFFFD0018)) // (TSADC_CHSR) Channel Status Register
     52          #define TSADCC_SR							(*(volatile U32*) (0xFFFD001C))	// Status register
     53          #define TSADCC_LCDR							(*(volatile U32*) (0xFFFD0020)) // (TSADC_LCDR) Last Converted Register
     54          #define TSADCC_IER							(*(volatile U32*) (0xFFFD0024)) // (TSADC_IER) Interrupt Enable Register
     55          #define TSADCC_IDR							(*(volatile U32*) (0xFFFD0028)) // (TSADC_IDR) Interrupt Disable Register
     56          #define TSADCC_IMR							(*(volatile U32*) (0xFFFD002C)) // (TSADC_IMR) Interrupt Mask Register
     57          #define TSADCC_CDR0							(*(volatile U32*) (0xFFFD0030))	// Channel data register 0
     58          #define TSADCC_CDR1							(*(volatile U32*) (0xFFFD0034))	// Channel data register 1
     59          #define TSADCC_CDR2							(*(volatile U32*) (0xFFFD0038))	// Channel data register 2
     60          #define TSADCC_CDR3							(*(volatile U32*) (0xFFFD003C))	// Channel data register 3
     61          #define TSADCC_CDR4							(*(volatile U32*) (0xFFFD0040))	// Channel data register 4
     62          #define TSADCC_CDR5							(*(volatile U32*) (0xFFFD0044))	// Channel data register 5
     63          
     64          #define TSADCC_ADCCLK						(1000000)						// ADC clock frequency to use
     65          
     66          /*********************************************************************
     67          *
     68          *       InitADC
     69          *
     70          * Purpose:
     71          *   Initializes the A/D converter
     72          *
     73          */

   \                                 In section .text, align 4, keep-with-next
     74          void InitADC(void) {
     75          
     76            //
     77            // Setup the ports
     78            //
     79            PMC_PCER			|= (1 << AT91C_ID_TSADC_BIT);  // Enable ADC clock
   \                     InitADC:
   \   00000000   0C00A0E3           MOV      R0,#+12
   \   00000004   800E80E3           ORR      R0,R0,#0x800
   \   00000008   FC0B10E5           LDR      R0,[R0, #-3068]
   \   0000000C   0C10A0E3           MOV      R1,#+12
   \   00000010   400980E3           ORR      R0,R0,#0x100000
   \   00000014   801E81E3           ORR      R1,R1,#0x800
   \   00000018   FC0B01E5           STR      R0,[R1, #-3068]
     80            PIOA_ASR        = 0                           // Setup ports to peripheral A
     81                              | (0x01 << 17)              // PA17: AD0
     82                              | (0x01 << 18)              // PA18: AD1
     83                              | (0x01 << 19)              // PA19: AD2
     84                              | (0x01 << 20)              // PA20: AD3
     85                              ;
   \   0000001C   7809A0E3           MOV      R0,#+1966080
   \   00000020   6C10A0E3           MOV      R1,#+108
   \   00000024   FC0B01E5           STR      R0,[R1, #-3068]
     86            PIOA_ODR        = 0                           // disable port output
     87                              | (0x01 << 17)              // PA17: AD0
     88                              | (0x01 << 18)              // PA18: AD1
     89                              | (0x01 << 19)              // PA19: AD2
     90                              | (0x01 << 20)              // PA20: AD3
     91                              ;	
   \   00000028   1010A0E3           MOV      R1,#+16
   \   0000002C   FC0B01E5           STR      R0,[R1, #-3068]
     92            PIOA_PUDR       = 0							// disable pullups
     93                              | (0x01 << 17)              // PA17: AD0
     94                              | (0x01 << 18)              // PA18: AD1
     95                              | (0x01 << 19)              // PA19: AD2
     96                              | (0x01 << 20)              // PA20: AD3
     97          					;
   \   00000030   5C10A0E3           MOV      R1,#+92
   \   00000034   FC0B01E5           STR      R0,[R1, #-3068]
     98            PIOA_PDR        = 0                           // disable port so they can be used as A-Ds
     99                              | (0x01 << 17)              // PA17: AD0
    100                              | (0x01 << 18)              // PA18: AD1
    101                              | (0x01 << 19)              // PA19: AD2
    102                              | (0x01 << 20)              // PA20: AD3
    103                              ;
   \   00000038   FB10E0E3           MVN      R1,#+251
   \   0000003C   B01EC1E3           BIC      R1,R1,#0xB00
   \   00000040   000081E5           STR      R0,[R1, #+0]
    104            PIOD_PDR =		0							// disable PIO port D pins 6 and 7 so they can be used as A-Ds
    105          	  				| (1 << 6)
    106          					| (1 << 7)
    107          					;
   \   00000044   600EA0E3           MOV      R0,#+1536
   \   00000048   C010A0E3           MOV      R1,#+192
   \   0000004C   FC1B00E5           STR      R1,[R0, #-3068]
    108          
    109            // setup the touchscreen adc
    110            TSADCC_CHER =		0
    111          	  				| (1 << 0)					// channel 0		// 12V power line
    112          //	  				| (1 << 1)					// channel 1
    113          //	  				| (1 << 2)					// channel 2
    114          //	  				| (1 << 3)					// channel 3
    115          	  				| (1 << 4)					// channel 4		// light sensor
    116          	  				| (1 << 5)					// channel 5		// temperature sensor
    117          					;
   \   00000050   FF04A0E3           MOV      R0,#-16777216
   \   00000054   FD0880E3           ORR      R0,R0,#0xFD0000
   \   00000058   3110A0E3           MOV      R1,#+49
   \   0000005C   101080E5           STR      R1,[R0, #+16]
    118          
    119            TSADCC_MR       = 0							// adc mode register
    120          // KMC TEST - try 10 bit mode	  				| (1 << 4)					// low res
    121          	  				| (0 << 4)					// high res
    122                              | (0x3F <<  8)				// Prescaler rate selection (PRESCAL = (MCK / (2 * ADCCLK)) + 1))
    123                              | (0x7F << 16)				// Start Up Time (STARTUP = (time[s] * ADCCLK) / (1000000 * 8) - 1))
    124                              | (0x0F << 24)				// Track and Hold time (SHTIM = (time[ns] x ADCCLK) / 1000000000 - 1)
    125          					;
   \   00000060   ........           LDR      R1,??DataTable1  ;; 0xf7f3f00
   \   00000064   041080E5           STR      R1,[R0, #+4]
    126          
    127            TSADCC_TRGR	  =	0x06;						// continuous mode
   \   00000068   0610A0E3           MOV      R1,#+6
   \   0000006C   081080E5           STR      R1,[R0, #+8]
    128          
    129            TSADCC_IDR	  =	0;							// disable interrupts
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   281080E5           STR      R1,[R0, #+40]
    130          
    131            TSADCC_CR =		0x02;						// start conversions
   \   00000078   0210A0E3           MOV      R1,#+2
   \   0000007C   001080E5           STR      R1,[R0, #+0]
    132          
    133          } // InitADC
   \   00000080   1EFF2FE1           BX       LR               ;; return
    134          					/*********************************************************************
    135          *
    136          *       unsigned char GetADC( unsigned char channel)
    137          *
    138          * Function decription:
    139          *   Checks if a valid touch AD conversion has been done.
    140          *
    141          * Return value:
    142          *   adc result of specified channel
    143          */
    144          
    145          // KMC TEST - try 10 bit mode	unsigned char GetADC(unsigned char channel) {
    146          // KMC TEST - try 10 bit mode	unsigned char adc_result;

   \                                 In section .text, align 4, keep-with-next
    147          unsigned int GetADC(unsigned char channel) {
    148          	unsigned int adc_result;
    149          	
    150          	switch (channel) {
   \                     GetADC:
   \   00000000   050050E3           CMP      R0,#+5
   \   00000004   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GetADC_0:
   \   00000008   1600008A           BHI      ??GetADC_1
   \   0000000C   040000EA           B        ??GetADC_2
   \   00000010   060000EA           B        ??GetADC_3
   \   00000014   080000EA           B        ??GetADC_4
   \   00000018   0A0000EA           B        ??GetADC_5
   \   0000001C   0C0000EA           B        ??GetADC_6
   \   00000020   0E0000EA           B        ??GetADC_7
    151          		case 0:
    152          			adc_result = TSADCC_CDR0;
   \                     ??GetADC_2:
   \   00000024   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   00000028   001090E5           LDR      R1,[R0, #+0]
    153          			break;
   \   0000002C   0D0000EA           B        ??GetADC_1
    154          		case 1:
    155          			adc_result = TSADCC_CDR1;
   \                     ??GetADC_3:
   \   00000030   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   00000034   041090E5           LDR      R1,[R0, #+4]
    156          			break;
   \   00000038   0A0000EA           B        ??GetADC_1
    157          		case 2:
    158          			adc_result = TSADCC_CDR2;
   \                     ??GetADC_4:
   \   0000003C   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   00000040   081090E5           LDR      R1,[R0, #+8]
    159          			break;
   \   00000044   070000EA           B        ??GetADC_1
    160          		case 3:
    161          			adc_result = TSADCC_CDR3;
   \                     ??GetADC_5:
   \   00000048   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   0000004C   0C1090E5           LDR      R1,[R0, #+12]
    162          			break;
   \   00000050   040000EA           B        ??GetADC_1
    163          		case 4:
    164          			adc_result = TSADCC_CDR4;
   \                     ??GetADC_6:
   \   00000054   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   00000058   101090E5           LDR      R1,[R0, #+16]
    165          			break;
   \   0000005C   010000EA           B        ??GetADC_1
    166          		case 5:
    167          #ifdef LED_TEMP_TEST_CODE
    168          			{
    169          				int temp;
    170          				
    171          				temp = (int) (200.0 * (1.0 + DataValues[Y_G].fVal)); // scale -1G = 0, +1G = 400
    172          				if (temp > 400)
    173          					temp = 400; // ensure proper ranges
    174          				if (temp < 0)
    175          					temp = 0;
    176          				adc_result = temp + 200;  // -1G = 200 value, +1G = 600 value
    177          			}
    178          #else
    179          			adc_result = TSADCC_CDR5;
   \                     ??GetADC_7:
   \   00000060   ........           LDR      R0,??DataTable1_1  ;; 0xfffd0030
   \   00000064   141090E5           LDR      R1,[R0, #+20]
    180          #endif
    181          			break;
    182          	} // switch
    183          
    184            return (adc_result);
   \                     ??GetADC_1:
   \   00000068   0100A0E1           MOV      R0,R1
   \   0000006C   1EFF2FE1           BX       LR               ;; return
    185          
    186          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   003F7F0F           DC32     0xf7f3f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   3000FDFF           DC32     0xfffd0030
    187          
    188          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     GetADC        0
     InitADC       0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     InitADC         132
     GetADC          112
     ??DataTable1      4
     ??DataTable1_1    4

 
 252 bytes in section .text
 
 252 bytes of CODE memory

Errors: none
Warnings: none
