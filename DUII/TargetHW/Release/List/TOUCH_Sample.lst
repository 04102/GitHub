###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     30/Sep/2010  16:54:53 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\TOUCH_Sample.c                              #
#    Command line =  C:\DUII\DUII\TOUCH_Sample.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --require_prototypes --fpu=None      #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I           #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4\arm\INC\" --cpu_mode arm -Ohs              #
#    List file    =  C:\DUII\TargetHW\Release\List\TOUCH_Sample.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\TOUCH_Sample.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\TOUCH_Sample.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : TOUCH_Sample.c
     19          Purpose     : Shows how to access a touch panel without using buttons
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI.h"
     24          
     25          void MainTask(void);
     26          
     27          /*********************************************************************
     28          *
     29          *       Public code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       MainTask
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void MainTask(void) {
   \                     MainTask:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     38            GUI_Init();
   \   00000008   ........           BL       GUI_Init
     39            GUI_CURSOR_Show();
   \   0000000C   ........           BL       GUI_CURSOR_Show
     40            GUI_CURSOR_Select(&GUI_CursorCrossL);
   \   00000010   E8009FE5           LDR      R0,??MainTask_0+0x4
   \   00000014   ........           BL       GUI_CURSOR_Select
     41            GUI_SetBkColor(GUI_WHITE);
   \   00000018   FF04E0E3           MVN      R0,#-16777216
   \   0000001C   ........           BL       GUI_SetBkColor
     42            GUI_SetColor(GUI_BLACK);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   ........           BL       GUI_SetColor
     43            GUI_Clear();
   \   00000028   ........           BL       GUI_Clear
     44            GUI_DispString("Measurement of\nA/D converter values");
   \   0000002C   D0409FE5           LDR      R4,??MainTask_0+0x8
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_DispString
   \   00000038   BC508FE2           ADR      R5,??MainTask_0  ;; 0x78, 0x3A, 0x00, 0x00
     45            while (1) {
     46              GUI_PID_STATE TouchState;
     47              int xPhys, yPhys;
     48              GUI_TOUCH_GetState(&TouchState);  /* Get the touch position in pixel */
   \                     ??MainTask_1:
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           BL       GUI_TOUCH_GetState
     49              xPhys = GUI_TOUCH_GetxPhys();     /* Get the A/D mesurement result in x */
   \   00000044   ........           BL       GUI_TOUCH_GetxPhys
   \   00000048   0060A0E1           MOV      R6,R0
     50              yPhys = GUI_TOUCH_GetyPhys();     /* Get the A/D mesurement result in y */
   \   0000004C   ........           BL       GUI_TOUCH_GetyPhys
   \   00000050   0070A0E1           MOV      R7,R0
     51              /* Display the measurement result */
     52              GUI_SetColor(GUI_BLUE);
   \   00000054   FF08A0E3           MOV      R0,#+16711680
   \   00000058   ........           BL       GUI_SetColor
     53              GUI_DispStringAt("Analog input:\n", 0, 20);
   \   0000005C   1420A0E3           MOV      R2,#+20
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   240084E2           ADD      R0,R4,#+36
   \   00000068   ........           BL       GUI_DispStringAt
     54              GUI_GotoY(GUI_GetDispPosY() + 2);
   \   0000006C   ........           BL       GUI_GetDispPosY
   \   00000070   020080E2           ADD      R0,R0,#+2
   \   00000074   ........           BL       GUI_GotoY
     55              GUI_DispString("x:");
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       GUI_DispString
     56              GUI_DispDec(xPhys, 4);
   \   00000080   0410A0E3           MOV      R1,#+4
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   ........           BL       GUI_DispDec
     57              GUI_DispString(", y:");
   \   0000008C   340084E2           ADD      R0,R4,#+52
   \   00000090   ........           BL       GUI_DispString
     58              GUI_DispDec(yPhys, 4);
   \   00000094   0410A0E3           MOV      R1,#+4
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           BL       GUI_DispDec
     59              /* Display the according position */
     60              GUI_SetColor(GUI_RED);
   \   000000A0   FF00A0E3           MOV      R0,#+255
   \   000000A4   ........           BL       GUI_SetColor
     61              GUI_GotoY(GUI_GetDispPosY() + 4);
   \   000000A8   ........           BL       GUI_GetDispPosY
   \   000000AC   040080E2           ADD      R0,R0,#+4
   \   000000B0   ........           BL       GUI_GotoY
     62              GUI_DispString("\nPosition:\n");
   \   000000B4   3C0084E2           ADD      R0,R4,#+60
   \   000000B8   ........           BL       GUI_DispString
     63              GUI_GotoY(GUI_GetDispPosY() + 2);
   \   000000BC   ........           BL       GUI_GetDispPosY
   \   000000C0   020080E2           ADD      R0,R0,#+2
   \   000000C4   ........           BL       GUI_GotoY
     64              GUI_DispString("x:");
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           BL       GUI_DispString
     65              GUI_DispDec(TouchState.x,4);
   \   000000D0   0410A0E3           MOV      R1,#+4
   \   000000D4   00009DE5           LDR      R0,[SP, #+0]
   \   000000D8   ........           BL       GUI_DispDec
     66              GUI_DispString(", y:");
   \   000000DC   340084E2           ADD      R0,R4,#+52
   \   000000E0   ........           BL       GUI_DispString
     67              GUI_DispDec(TouchState.y,4);
   \   000000E4   0410A0E3           MOV      R1,#+4
   \   000000E8   04009DE5           LDR      R0,[SP, #+4]
   \   000000EC   ........           BL       GUI_DispDec
     68              /* Wait a while */
     69              GUI_Delay(100);
   \   000000F0   6400A0E3           MOV      R0,#+100
   \   000000F4   ........           BL       GUI_Delay
   \   000000F8   CFFFFFEA           B        ??MainTask_1
   \                     ??MainTask_0:
   \   000000FC   783A0000           DC8      0x78, 0x3A, 0x00, 0x00
   \   00000100   ........           DC32     GUI_CursorCrossL
   \   00000104   ........           DC32     `?<Constant "Measurement of\\nA/D co...">`
     70            };
     71          }

   \                                 In section .rodata, align 4
   \                     `?<Constant "Measurement of\\nA/D co...">`:
   \   00000000   4D6561737572       DC8 "Measurement of\012A/D converter values"
   \              656D656E7420
   \              6F660A412F44
   \              20636F6E7665
   \              727465722076
   \              616C75657300
   \   00000024   416E616C6F67       DC8 "Analog input:\012"
   \              20696E707574
   \              3A0A00      
   \   00000033   00                 DC8 0
   \   00000034   2C20793A00         DC8 ", y:"
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   0A506F736974       DC8 "\012Position:\012"
   \              696F6E3A0A00

   \                                 In section .rodata, align 4
   \   00000000   783A00             DC8 "x:"
   \   00000003   00                 DC8 0
     72          
     73          /*************************** End of file ****************************/
     74          

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     MainTask     32


   Section sizes:

     Function/Label                          Bytes
     --------------                          -----
     MainTask                                 264
     ?<Constant "Measurement of\nA/D co...">   72
     ?<Constant "x:">                           4

 
  76 bytes in section .rodata
 264 bytes in section .text
 
 264 bytes of CODE  memory
  76 bytes of CONST memory

Errors: none
Warnings: none
