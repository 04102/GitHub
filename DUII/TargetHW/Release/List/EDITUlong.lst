###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:11 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\EDITUlong.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\EDITUlong.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\EDITUlong.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\EDITUlong.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\EDITUlong.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : EDITUlong.c
     19          Purpose     : Edit unsigned long values
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "EDIT_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *       Defines
     33          *
     34          **********************************************************************
     35          */
     36          #define EDIT_ULONG_MAXLEN 10
     37          
     38          /*********************************************************************
     39          *
     40          *       Static routines
     41          *
     42          **********************************************************************
     43          */
     44          /*********************************************************************
     45          *
     46          *       _IncrementCursor
     47          */
     48          static void _IncrementCursor(EDIT_Handle hObj, EDIT_Obj * pObj) {
     49            EDIT__SetCursorPos(hObj, pObj->CursorPos + 1);
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       _DecChar2Int
     55          */
     56          static int _DecChar2Int(int Char) {
     57            if ((Char >= '0') && (Char <= '9')) {
     58              return Char - '0';
     59            }
     60            return -1;
     61          }
     62          
     63          /*********************************************************************
     64          *
     65          *       _UpdateBuffer
     66          */

   \                                 In section .text, align 4, keep-with-next
     67          static void _UpdateBuffer(EDIT_Handle hObj) {
   \                     _UpdateBuffer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     68            char acValue[EDIT_ULONG_MAXLEN] = {0};
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   00C0A0E3           MOV      R12,#+0
   \   00000018   0C10A1E8           STM      R1!,{R2,R3,R12}
     69            int NumDigits = 0;
   \   0000001C   0040A0E3           MOV      R4,#+0
     70            U32 Value;
     71            char * s;
     72            EDIT_Obj * pObj;
     73            pObj = EDIT_LOCK_H(hObj);
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0050A0E1           MOV      R5,R0
     74            s = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000028   340095E5           LDR      R0,[R5, #+52]
   \   0000002C   ........           BL       GUI_ALLOC_LockH
     75            /* Convert an unsigned long value into text */
     76            Value = pObj->CurrentValue;
   \   00000030   481095E5           LDR      R1,[R5, #+72]
   \   00000034   0D20A0E1           MOV      R2,SP
     77            /* Fill the buffer with the digits (reverse order) */
     78            while (Value) {
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0B00000A           BEQ      ??_UpdateBuffer_0
     79              U8 c = Value % 10;
     80              acValue[NumDigits++] = '0' + c;
   \                     ??_UpdateBuffer_1:
   \   00000040   ........           LDR      R12,??DataTable3  ;; 0xcccccccd
   \   00000044   0AE0A0E3           MOV      LR,#+10
   \   00000048   91CC83E0           UMULL    R12,R3,R1,R12
   \   0000004C   014084E2           ADD      R4,R4,#+1
   \   00000050   A331A0E1           LSR      R3,R3,#+3
   \   00000054   03C0A0E1           MOV      R12,R3
   \   00000058   8C0E6CE1           SMULBB   R12,R12,LR
   \   0000005C   0C1041E0           SUB      R1,R1,R12
   \   00000060   301081E2           ADD      R1,R1,#+48
   \   00000064   0110C2E4           STRB     R1,[R2], #+1
     81              Value /= 10;
   \   00000068   0310B0E1           MOVS     R1,R3
   \   0000006C   F3FFFF1A           BNE      ??_UpdateBuffer_1
     82            }
     83            /* Fill with leading spaces */
     84            while (NumDigits < pObj->MaxLen) {
   \                     ??_UpdateBuffer_0:
   \   00000070   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000074   3020A0E3           MOV      R2,#+48
   \   00000078   010054E1           CMP      R4,R1
   \   0000007C   170000BA           BLT      ??_UpdateBuffer_2
   \                     ??_UpdateBuffer_3:
   \   00000080   000054E3           CMP      R4,#+0
   \   00000084   1100000A           BEQ      ??_UpdateBuffer_4
   \   00000088   0D1084E0           ADD      R1,R4,SP
   \   0000008C   0420A0E1           MOV      R2,R4
   \   00000090   011041E2           SUB      R1,R1,#+1
   \   00000094   010012E3           TST      R2,#0x1
     85              acValue[NumDigits++] = '0';
     86            }
     87            /* Reverse order */
     88            while (NumDigits) {
     89              *(s++) = acValue[--NumDigits];
   \   00000098   0010D115           LDRBNE   R1,[R1, #+0]
   \   0000009C   01404412           SUBNE    R4,R4,#+1
   \   000000A0   0110C014           STRBNE   R1,[R0], #+1
   \   000000A4   A210B0E1           LSRS     R1,R2,#+1
   \   000000A8   0800000A           BEQ      ??_UpdateBuffer_4
   \   000000AC   0D2084E0           ADD      R2,R4,SP
   \   000000B0   022042E2           SUB      R2,R2,#+2
   \                     ??_UpdateBuffer_5:
   \   000000B4   0130D2E5           LDRB     R3,[R2, #+1]
   \   000000B8   011041E2           SUB      R1,R1,#+1
   \   000000BC   000051E3           CMP      R1,#+0
   \   000000C0   0130C0E4           STRB     R3,[R0], #+1
   \   000000C4   023052E4           LDRB     R3,[R2], #-2
   \   000000C8   0130C0E4           STRB     R3,[R0], #+1
   \   000000CC   F8FFFF1A           BNE      ??_UpdateBuffer_5
     90            }
     91            GUI_UNLOCK_H(pObj);
   \                     ??_UpdateBuffer_4:
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
     92            GUI_UNLOCK_H(s);
   \   000000D4   ........           BL       GUI_ALLOC_UnlockH
     93          }
   \   000000D8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000DC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??_UpdateBuffer_2:
   \   000000E0   0D20C4E7           STRB     R2,[R4, +SP]
   \   000000E4   F813D5E1           LDRSH    R1,[R5, #+56]
   \   000000E8   014084E2           ADD      R4,R4,#+1
   \   000000EC   010054E1           CMP      R4,R1
   \   000000F0   FAFFFFBA           BLT      ??_UpdateBuffer_2
   \   000000F4   E1FFFFEA           B        ??_UpdateBuffer_3
     94          
     95          /*********************************************************************
     96          *
     97          *       _EditULong
     98          */

   \                                 In section .text, align 4, keep-with-next
     99          static void _EditULong(int Digit, EDIT_Obj * pObj, EDIT_Handle hObj) {
   \                     _EditULong:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    100            U32 Result = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    101            int i, j, Pos = 0;
   \   00000010   0060A0E3           MOV      R6,#+0
    102            char * s;
    103            s = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000014   340091E5           LDR      R0,[R1, #+52]
   \   00000018   ........           BL       GUI_ALLOC_LockH
    104            for (i = 0; i < pObj->MaxLen; i++) {
   \   0000001C   04209DE5           LDR      R2,[SP, #+4]
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   F823D2E1           LDRSH    R2,[R2, #+56]
   \   00000028   010052E3           CMP      R2,#+1
   \   0000002C   430000BA           BLT      ??_EditULong_0
   \   00000030   04E09DE5           LDR      LR,[SP, #+4]
   \   00000034   04C09DE5           LDR      R12,[SP, #+4]
   \   00000038   40E09EE5           LDR      LR,[LR, #+64]
   \   0000003C   013042E2           SUB      R3,R2,#+1
   \   00000040   00E08DE5           STR      LR,[SP, #+0]
   \   00000044   4CC09CE5           LDR      R12,[R12, #+76]
   \   00000048   ........           LDR      LR,??DataTable3_1
    105              int Index = pObj->MaxLen - i - 1;
    106              if (Index == pObj->CursorPos) {
   \                     ??_EditULong_1:
   \   0000004C   0070D3E7           LDRB     R7,[R3, +R0]
   \   00000050   0C0053E1           CMP      R3,R12
   \   00000054   308047E2           SUB      R8,R7,#+48
   \   00000058   2A00001A           BNE      ??_EditULong_2
    107                /* In this case we need to check if an overflow occures */
    108                char c;
    109                int Value;
    110                U32 OldResult;
    111                /* Calculate old value (until cursor position) */
    112                c         = *(s + Index);
    113                Value     = _DecChar2Int(c);
   \   0000005C   0A0058E3           CMP      R8,#+10
   \   00000060   1500002A           BCS      ??_EditULong_3
   \   00000064   307047E2           SUB      R7,R7,#+48
    114                OldResult = Result;
    115                if (Value >= 0) {
   \   00000068   000057E3           CMP      R7,#+0
    116                  OldResult += GUI_Pow10[Pos] * Value;
   \   0000006C   06919E57           LDRPL    R9,[LR, +R6, LSL #+2]
   \   00000070   0580A0E1           MOV      R8,R5
   \   00000074   97892850           MLAPL    R8,R7,R9,R8
    117                }
    118                /* Calculate new value (until cursor position).
    119                 * A multiplication like Result += GUI_Pow10[Pos++] * Digit
    120                 * does not work, because in this case we have no chance to
    121                 * notice an overflow.
    122                 */
    123                for (j = 0; j < Digit; j++) {
   \                     ??_EditULong_4:
   \   00000078   010054E3           CMP      R4,#+1
   \   0000007C   180000BA           BLT      ??_EditULong_5
   \   00000080   010014E3           TST      R4,#0x1
   \   00000084   0400000A           BEQ      ??_EditULong_6
    124                  U32 NewResult;
    125                  NewResult = Result + GUI_Pow10[Pos];
   \   00000088   06A19EE7           LDR      R10,[LR, +R6, LSL #+2]
   \   0000008C   05A08AE0           ADD      R10,R10,R5
    126                  /* Check if we have an overflow */
    127                  if (NewResult < Result) {
   \   00000090   05005AE1           CMP      R10,R5
   \   00000094   0600003A           BCC      ??_EditULong_7
    128                    Result = pObj->Max;
    129                    break;
    130                  }
    131                  Result = NewResult;
   \   00000098   0A50A0E1           MOV      R5,R10
   \                     ??_EditULong_6:
   \   0000009C   A490B0E1           LSRS     R9,R4,#+1
   \   000000A0   0F00000A           BEQ      ??_EditULong_5
   \                     ??_EditULong_8:
   \   000000A4   06B19EE7           LDR      R11,[LR, +R6, LSL #+2]
   \   000000A8   05A08BE0           ADD      R10,R11,R5
   \   000000AC   05005AE1           CMP      R10,R5
   \   000000B0   0400002A           BCS      ??_EditULong_9
   \                     ??_EditULong_7:
   \   000000B4   00509DE5           LDR      R5,[SP, #+0]
   \   000000B8   090000EA           B        ??_EditULong_5
   \                     ??_EditULong_3:
   \   000000BC   0070E0E3           MVN      R7,#+0
   \   000000C0   0580A0E1           MOV      R8,R5
   \   000000C4   EBFFFFEA           B        ??_EditULong_4
   \                     ??_EditULong_9:
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   05A08BE0           ADD      R10,R11,R5
   \   000000D0   05005AE1           CMP      R10,R5
   \   000000D4   F6FFFF3A           BCC      ??_EditULong_7
   \   000000D8   0A50A0E1           MOV      R5,R10
    132                }
   \   000000DC   019059E2           SUBS     R9,R9,#+1
   \   000000E0   EFFFFF1A           BNE      ??_EditULong_8
    133                /* Check if we have an overflow */
    134                if (Digit > Value) {
   \                     ??_EditULong_5:
   \   000000E4   040057E1           CMP      R7,R4
   \   000000E8   040000AA           BGE      ??_EditULong_10
    135                  if (Result < OldResult) {
   \   000000EC   080055E1           CMP      R5,R8
   \   000000F0   0200002A           BCS      ??_EditULong_10
    136                    Result = pObj->Max;
   \                     ??_EditULong_11:
   \   000000F4   04009DE5           LDR      R0,[SP, #+4]
   \   000000F8   405090E5           LDR      R5,[R0, #+64]
    137                    break;
   \   000000FC   0F0000EA           B        ??_EditULong_0
    138                  }
    139                }
    140                Pos++;
   \                     ??_EditULong_10:
   \   00000100   016086E2           ADD      R6,R6,#+1
   \   00000104   090000EA           B        ??_EditULong_12
    141              } else {
    142                /* If current index is not the cursor position */
    143                char c = *(s + Index);
    144                int Value = _DecChar2Int(c);
   \                     ??_EditULong_2:
   \   00000108   0A0058E3           CMP      R8,#+10
   \   0000010C   0700002A           BCS      ??_EditULong_12
   \   00000110   307057E2           SUBS     R7,R7,#+48
    145                if (Value >= 0) {
   \   00000114   0500004A           BMI      ??_EditULong_12
    146                  U32 OldResult;
    147                  OldResult = Result;
    148                  Result += GUI_Pow10[Pos++] * Value;
   \   00000118   06919EE7           LDR      R9,[LR, +R6, LSL #+2]
   \   0000011C   0580A0E1           MOV      R8,R5
   \   00000120   975925E0           MLA      R5,R7,R9,R5
   \   00000124   016086E2           ADD      R6,R6,#+1
    149                  /* Check if we have an overflow */
    150                  if (Result < OldResult) {
   \   00000128   080055E1           CMP      R5,R8
   \   0000012C   F0FFFF3A           BCC      ??_EditULong_11
    151                    Result = pObj->Max;
    152                    break;
    153                  }
    154                }
    155              }
    156            }
   \                     ??_EditULong_12:
   \   00000130   011081E2           ADD      R1,R1,#+1
   \   00000134   013043E2           SUB      R3,R3,#+1
   \   00000138   020051E1           CMP      R1,R2
   \   0000013C   C2FFFFBA           BLT      ??_EditULong_1
    157            GUI_UNLOCK_H(s);
   \                     ??_EditULong_0:
   \   00000140   ........           BL       GUI_ALLOC_UnlockH
    158            EDIT__SetValueUnsigned(hObj, Result);
   \   00000144   08009DE5           LDR      R0,[SP, #+8]
   \   00000148   0510A0E1           MOV      R1,R5
   \   0000014C   0CD08DE2           ADD      SP,SP,#+12
   \   00000150   F04FBDE8           POP      {R4-R11,LR}
   \   00000154   ........           B        EDIT__SetValueUnsigned  ;; tailcall
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       _AddPosition
    164          */
    165          static void _AddPosition(EDIT_Obj * pObj, EDIT_Handle hObj, int Sign) {
    166            int Pos;
    167            I32 v, NewValue;
    168            v = Sign;
    169            Pos = pObj->MaxLen - pObj->CursorPos-1;
    170            if (pObj->NumDecs && (Pos > pObj->NumDecs)) {
    171              Pos--;
    172            }
    173            while (Pos--) {
    174              v *= 10;
    175            }
    176            NewValue = pObj->CurrentValue + v;
    177            /*
    178             * Check if overflow occurs
    179             */
    180            if (v > 0) {
    181              /* If result of addition is less than previous value he have an overflow */
    182              if (((U32)pObj->CurrentValue + v) < (U32)pObj->CurrentValue) {
    183                NewValue = pObj->Max; /* Set maximum value */
    184              }
    185            } else if (v < 0) {
    186              /* If result of addition is more than previous value he have an overflow */
    187              if (((U32)pObj->CurrentValue + v) > (U32)pObj->CurrentValue) {
    188                NewValue = pObj->Min; /* Set minimum value */
    189              }
    190            }
    191            EDIT__SetValueUnsigned(hObj, NewValue);
    192          }
    193          
    194          /*********************************************************************
    195          *
    196          *       _AddKey
    197          */

   \                                 In section .text, align 4, keep-with-next
    198          static void _AddKey(EDIT_Handle hObj, int Key) {
   \                     _AddKey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    199            EDIT_Obj * pObj;
    200            pObj = EDIT_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050B0E1           MOVS     R5,R0
    201            if (pObj) {
   \   00000014   3A00000A           BEQ      ??_AddKey_1
    202              switch (Key) {
   \   00000018   100046E2           SUB      R0,R6,#+16
   \   0000001C   030050E3           CMP      R0,#+3
   \   00000020   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_AddKey_0:
   \   00000024   2A00008A           BHI      ??_AddKey_2
   \   00000028   260000EA           B        ??_AddKey_3
   \   0000002C   010000EA           B        ??_AddKey_4
   \   00000030   2F0000EA           B        ??_AddKey_5
   \   00000034   210000EA           B        ??_AddKey_6
    203              case GUI_KEY_UP:
    204                _AddPosition(pObj, hObj, 1);
   \                     ??_AddKey_4:
   \   00000038   0100A0E3           MOV      R0,#+1
   \                     ??_AddKey_7:
   \   0000003C   F813D5E1           LDRSH    R1,[R5, #+56]
   \   00000040   4C2095E5           LDR      R2,[R5, #+76]
   \   00000044   021041E0           SUB      R1,R1,R2
   \   00000048   4420D5E5           LDRB     R2,[R5, #+68]
   \   0000004C   011041E2           SUB      R1,R1,#+1
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   0100000A           BEQ      ??_AddKey_8
   \   00000058   010052E1           CMP      R2,R1
   \   0000005C   011041B2           SUBLT    R1,R1,#+1
   \                     ??_AddKey_8:
   \   00000060   000051E3           CMP      R1,#+0
   \   00000064   0A20A0E3           MOV      R2,#+10
   \   00000068   0300000A           BEQ      ??_AddKey_9
   \                     ??_AddKey_10:
   \   0000006C   011041E2           SUB      R1,R1,#+1
   \   00000070   920000E0           MUL      R0,R2,R0
   \   00000074   000051E3           CMP      R1,#+0
   \   00000078   FBFFFF1A           BNE      ??_AddKey_10
   \                     ??_AddKey_9:
   \   0000007C   482095E5           LDR      R2,[R5, #+72]
   \   00000080   010050E3           CMP      R0,#+1
   \   00000084   021080E0           ADD      R1,R0,R2
   \   00000088   060000AA           BGE      ??_AddKey_11
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0700005A           BPL      ??_AddKey_12
   \   00000094   020080E0           ADD      R0,R0,R2
   \   00000098   000052E1           CMP      R2,R0
   \   0000009C   0400002A           BCS      ??_AddKey_12
   \   000000A0   3C1095E5           LDR      R1,[R5, #+60]
   \   000000A4   020000EA           B        ??_AddKey_12
   \                     ??_AddKey_11:
   \   000000A8   020080E0           ADD      R0,R0,R2
   \   000000AC   020050E1           CMP      R0,R2
   \   000000B0   40109535           LDRCC    R1,[R5, #+64]
   \                     ??_AddKey_12:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       EDIT__SetValueUnsigned
    205                break;
   \   000000BC   100000EA           B        ??_AddKey_1
    206              case GUI_KEY_DOWN:
    207                _AddPosition(pObj, hObj, -1);
   \                     ??_AddKey_6:
   \   000000C0   0000E0E3           MVN      R0,#+0
   \   000000C4   DCFFFFEA           B        ??_AddKey_7
    208                break;
    209              case GUI_KEY_RIGHT:
    210                _IncrementCursor(hObj, pObj);
    211                break;
    212              case GUI_KEY_LEFT:
    213                EDIT__SetCursorPos(hObj, pObj->CursorPos - 1);
   \                     ??_AddKey_3:
   \   000000C8   4C0095E5           LDR      R0,[R5, #+76]
   \   000000CC   011040E2           SUB      R1,R0,#+1
   \   000000D0   090000EA           B        ??_AddKey_13
    214                break;
    215              default:
    216                {
    217                  int Digit = _DecChar2Int(Key);
   \                     ??_AddKey_2:
   \   000000D4   300046E2           SUB      R0,R6,#+48
   \   000000D8   0A0050E3           CMP      R0,#+10
   \   000000DC   0800002A           BCS      ??_AddKey_1
   \   000000E0   300056E2           SUBS     R0,R6,#+48
    218                  if (Digit >= 0) {
   \   000000E4   0600004A           BMI      ??_AddKey_1
    219                    _EditULong(Digit, pObj, hObj);
   \   000000E8   0420A0E1           MOV      R2,R4
   \   000000EC   0510A0E1           MOV      R1,R5
   \   000000F0   ........           BL       _EditULong
    220                    _IncrementCursor(hObj, pObj);
   \                     ??_AddKey_5:
   \   000000F4   4C0095E5           LDR      R0,[R5, #+76]
   \   000000F8   011080E2           ADD      R1,R0,#+1
   \                     ??_AddKey_13:
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       EDIT__SetCursorPos
    221                  }
    222                }
    223                break;
    224              }
    225            }
    226            GUI_UNLOCK_H(pObj);
   \                     ??_AddKey_1:
   \   00000104   ........           BL       GUI_ALLOC_UnlockH
    227            _UpdateBuffer(hObj);
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   7040BDE8           POP      {R4-R6,LR}
   \   00000110   ........           B        _UpdateBuffer    ;; tailcall
    228          }
    229          
    230          /*********************************************************************
    231          *
    232          *       Exported routines
    233          *
    234          **********************************************************************
    235          */
    236          /*********************************************************************
    237          *
    238          *       EDIT_SetUlongMode
    239          */

   \                                 In section .text, align 4, keep-with-next
    240          void EDIT_SetUlongMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
   \                     EDIT_SetUlongMode:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    241            EDIT_Obj * pObj;
    242            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    243            if (hEdit) {
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   1A00000A           BEQ      ??EDIT_SetUlongMode_0
    244              pObj = EDIT_LOCK_H(hEdit);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
    245              if (Value > Max) {
   \   0000002C   050057E1           CMP      R7,R5
    246                Value = Max;
   \   00000030   0750A031           MOVCC    R5,R7
   \   00000034   0100003A           BCC      ??EDIT_SetUlongMode_1
    247              } else if (Value < Min) {
   \   00000038   060055E1           CMP      R5,R6
   \   0000003C   0650A031           MOVCC    R5,R6
    248                Value = Min;
    249              }
    250              pObj->pfAddKeyEx    = _AddKey;
   \                     ??EDIT_SetUlongMode_1:
   \   00000040   ........           LDR      R1,??DataTable3_2
   \   00000044   581080E5           STR      R1,[R0, #+88]
    251              pObj->pfUpdateBuffer= _UpdateBuffer;
   \   00000048   ........           LDR      R1,??DataTable3_3
   \   0000004C   5C1080E5           STR      R1,[R0, #+92]
    252              pObj->CurrentValue  = Value;
   \   00000050   485080E5           STR      R5,[R0, #+72]
    253              pObj->CursorPos     = 0;
   \   00000054   0050A0E3           MOV      R5,#+0
   \   00000058   4C5080E5           STR      R5,[R0, #+76]
    254              pObj->Min           = Min;
   \   0000005C   3C6080E5           STR      R6,[R0, #+60]
    255              pObj->Max           = Max;
   \   00000060   407080E5           STR      R7,[R0, #+64]
    256              pObj->EditMode      = GUI_EDIT_MODE_OVERWRITE;
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   5410C0E5           STRB     R1,[R0, #+84]
    257              if (pObj->MaxLen > EDIT_ULONG_MAXLEN) {
   \   0000006C   F813D0E1           LDRSH    R1,[R0, #+56]
   \   00000070   0B0051E3           CMP      R1,#+11
    258                pObj->MaxLen = EDIT_ULONG_MAXLEN;
   \   00000074   0A10A0A3           MOVGE    R1,#+10
   \   00000078   B813C0A1           STRHGE   R1,[R0, #+56]
    259              }
    260              GUI_UNLOCK_H(pObj);
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
    261              _UpdateBuffer(hEdit);
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _UpdateBuffer
    262              WM_Invalidate(hEdit);
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       WM_InvalidateWindow
    263            }
    264            WM_UNLOCK();
   \                     ??EDIT_SetUlongMode_0:
   \   00000090   04D08DE2           ADD      SP,SP,#+4
   \   00000094   F040BDE8           POP      {R4-R7,LR}
   \   00000098   ........           B        GUI_Unlock       ;; tailcall
    265          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   CDCCCCCC           DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI_Pow10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     _AddKey

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     _UpdateBuffer

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   0000               DC8 0, 0
    266          
    267          #else  /* avoid empty object files */
    268          
    269          void EDITUlong_C(void);
    270          void EDITUlong_C(void){}
    271          
    272          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     EDIT_SetUlongMode     24
     _AddKey               16
     _EditULong            48
     _UpdateBuffer         24


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     _UpdateBuffer      248
     _EditULong         344
     _AddKey            276
     EDIT_SetUlongMode  156
     ??DataTable3         4
     ??DataTable3_1       4
     ??DataTable3_2       4
     ??DataTable3_3       4
     ?<Constant {0}>     12

 
    12 bytes in section .rodata
 1 040 bytes in section .text
 
 1 040 bytes of CODE  memory
    12 bytes of CONST memory

Errors: none
Warnings: none
