###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:29:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\SFScreens.c                                 #
#    Command line =  C:\DUII\DUII\SFScreens.c -D DEBUG=1 -D SDRAM_TARGET=1    #
#                    -D USB_IS_HIGH_SPEED -D NOPROFILER -D OS_TRACE=0 -D      #
#                    OS_VIEW_ENABLE=0 -lCN C:\DUII\TargetHW\Release\List\ -o  #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\SFScreens.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\SFScreens.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\SFScreens.c
      1          //
      2          //	SFScreens.c
      3          //
      4          //	Gathers user input for start/finish coordinates
      5          //
      6          #include <stdio.h>
      7          #include <stdlib.h>
      8          #include <string.h>
      9          #include "DUII.h"
     10          #include "GUI.h"
     11          #include "commondefs.h"
     12          #include "ConfigScreens.h"
     13          #include "DataHandler.h"
     14          #include "InputScreens.h"
     15          #include "KeyboardAccess.h"
     16          #include "SFScreens.h"
     17          #include "Utilities.h"
     18          #include "GeneralConfig.h"
     19          #include "StandardList.h"
     20          #include "RaceSetupScreens.h"
     21          #include "FlashReadWrite.h"
     22          #include "TrackSettingsScreens.h"
     23          #include "DragAutoXScreens.h"
     24          
     25          
     26          /*********************************************************************
     27          *
     28          *       Public Variables
     29          *
     30          **********************************************************************
     31          */

   \                                 In section .bss, align 4
     32          WM_HWIN hWaitingForCamera;
   \                     hWaitingForCamera:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
     33          
     34          /*********************************************************************
     35          *
     36          *       External data and code
     37          *
     38          **********************************************************************
     39          */
     40          extern GUI_CONST_STORAGE GUI_BITMAP bmTapScreenAtSF;
     41          extern GUI_CONST_STORAGE GUI_BITMAP bmGPSsignal;
     42          extern GUI_CONST_STORAGE GUI_BITMAP bmBlueButton;
     43          extern GUI_CONST_STORAGE GUI_BITMAP bmleftarrow;
     44          extern GUI_CONST_STORAGE GUI_BITMAP bmWaitingForCamera;
     45          extern GUI_CONST_STORAGE GUI_BITMAP bmAutoXPresstoStage;
     46          extern GUI_CONST_STORAGE GUI_BITMAP bmChooseGauges;
     47          extern GUI_CONST_STORAGE GUI_BITMAP bmSweepTachButtonOn;
     48          extern GUI_CONST_STORAGE GUI_BITMAP bmAnalogGaugeButtonOn;
     49          extern GUI_CONST_STORAGE GUI_BITMAP bmDigitalGaugeButtonOn;
     50          extern GUI_CONST_STORAGE GUI_BITMAP bmReadytoLaunchBurnout;
     51          extern GUI_CONST_STORAGE GUI_BITMAP bmReadyToLaunchCorvette;
     52          extern GUI_CONST_STORAGE GUI_BITMAP bmSweepTachButtonOff;
     53          extern GUI_CONST_STORAGE GUI_BITMAP bmAnalogGaugeButtonOff;
     54          extern GUI_CONST_STORAGE GUI_BITMAP bmDigitalGaugeButtonOff;
     55          extern GUI_CONST_STORAGE GUI_BITMAP bmAutocrossTouchToStage;
     56          extern GUI_CONST_STORAGE GUI_BITMAP bmDragTouchToStage;
     57          extern GUI_CONST_STORAGE GUI_BITMAP bmAutocrossStageBackground;
     58          extern GUI_CONST_STORAGE GUI_BITMAP bmAutocrossTouchToStage;
     59          extern GUI_CONST_STORAGE GUI_BITMAP bmDragAnalogGaugeButtonOn;
     60          extern GUI_CONST_STORAGE GUI_BITMAP bmDragDigitalGaugeButtonOn;
     61          extern GUI_CONST_STORAGE GUI_BITMAP bmDragSweepTachButtonOn;
     62          extern GUI_CONST_STORAGE GUI_BITMAP bmAutoXAnalogGaugeButtonOn;
     63          extern GUI_CONST_STORAGE GUI_BITMAP bmAutoXDigitalGaugeButtonOn;
     64          extern GUI_CONST_STORAGE GUI_BITMAP bmAutoXSweepTachButtonOn;
     65          extern GUI_CONST_STORAGE GUI_BITMAP bmDragStageBackground;
     66          extern GUI_CONST_STORAGE GUI_BITMAP bmOneEighthOn;
     67          extern GUI_CONST_STORAGE GUI_BITMAP bmOneQuarterOn;
     68          extern GUI_CONST_STORAGE GUI_BITMAP bmOneThousandOn;
     69          extern GUI_CONST_STORAGE GUI_BITMAP bmOneEighthOff;
     70          extern GUI_CONST_STORAGE GUI_BITMAP bmOneQuarterOff;
     71          extern GUI_CONST_STORAGE GUI_BITMAP bmOneThousandOff;
     72          
     73          
     74          /*********************************************************************
     75          *
     76          *       Local Prototypes
     77          *
     78          **********************************************************************
     79          */
     80          void SFScreensSaveData(void);
     81          static void TapAtSFScreenCallback(WM_MESSAGE * pMsg);
     82          static void StageScreenCallback(WM_MESSAGE * pMsg);
     83          static void WaitingForSatellitesCallback(WM_MESSAGE * pMsg);
     84          static void WaitingForCameraCallback(WM_MESSAGE * pMsg);
     85          char ValidateSFCoordinates(void);
     86          int InvalidSFDataPopUp(void);
     87          static void LaunchScreenCallback(WM_MESSAGE * pMsg);
     88          int LaunchDetected(void);
     89          void SetGaugeButtonGraphics(void);
     90          void SetDistanceButtonGraphics(void);
     91          
     92          
     93          /*********************************************************************
     94          *
     95          *       Tables and Constants
     96          *
     97          **********************************************************************
     98          */
     99          
    100          // +/-2.6
    101          #define	MAX_LONGITUDE_STRING	10
    102          // +/-3.6
    103          #define	MAX_LATITUDE_STRING		11
    104          // +/-3.6
    105          #define	MAX_HEADING_STRING		10
    106          
    107          #define	START_BUTTON			GUI_ID_USER + 1
    108          #define	CANCEL_BUTTON			GUI_ID_USER + 2
    109          #define	RUN_WITHOUT_BUTTON		GUI_ID_USER + 3
    110          #define	SWEEPTACH_BUTTON		GUI_ID_USER + 4
    111          #define	ANALOGGAUGE_BUTTON		GUI_ID_USER + 5
    112          #define	DIGITALGAUGE_BUTTON		GUI_ID_USER + 6
    113          #define	STAGE_BUTTON			GUI_ID_USER + 7
    114          #ifdef _WINDOWS
    115          #define	LAUNCH_BUTTON			GUI_ID_USER + 8
    116          #endif
    117          #define	DRAG_1_8_MILE_BUTTON	GUI_ID_USER + 9
    118          #define	DRAG_1000_FEET_BUTTON	GUI_ID_USER + 10
    119          #define	DRAG_1_4_MILE_BUTTON	GUI_ID_USER + 11
    120          
    121          #define	WAIT_FOR_SATELLITE_TIME		500
    122          #define	WAIT_FOR_CAMERA_TIME		500
    123          #define	TOTAL_WAIT_FOR_CAMERA_TIME	10000
    124          #define	WAIT_FOR_LAUNCH_TIME		50
    125          
    126          #define	LEFT	18
    127          #define	TOP		10
    128          
    129          
    130          /*********************************************************************
    131          *
    132          *       Local Variables
    133          *
    134          **********************************************************************
    135          */

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    136          static WM_HWIN hSFScreens, hTapAtSFScreen, hWaitingForSatellites, hStageScreen, hLaunchScreen;
   \                     hTapAtSFScreen:
   \   00000000                      DS8 4
    137          BUTTON_Handle hSweepTachButton, hAnalogGaugeButton, hDigitalGaugeButton, hStageButton;
    138          BUTTON_Handle h1_8thMile, h1000ft, h1_4Mile;
    139          
    140          #ifdef _WINDOWS
    141          BUTTON_Handle hLaunchButton;
    142          #endif
    143          static void *pSFKeyboard = 0;
    144          static WM_HTIMER hWaitForSatelliteTimer = 0;
    145          static WM_HTIMER hWaitForCameraTimer = 0;
    146          static WM_HTIMER hWaitForLaunchTimer = 0;
    147          enum GUI_RACE_MODES raceMode;
    148          char WorkString[20];
    149          static int totalWaitForCameraTime;
    150          
    151          /*********************************************************************
    152          *
    153          *       Public code
    154          *
    155          **********************************************************************
    156          */
    157          WM_HWIN hSFScreen;
    158          

   \                                 In section .text, align 4, keep-with-next
    159          void DisplaySFKeyboard(int screenID, WM_HWIN hPrev)
    160          {
   \                     DisplaySFKeyboard:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0100B0E1           MOVS     R0,R1
    161          	float fData;
    162          	char *pTitle;
    163          	int size, id;
    164          
    165          	if (hPrev)
   \   00000010   0000000A           BEQ      ??DisplaySFKeyboard_1
    166          		WM_DeleteWindow(hPrev);
   \   00000014   ........           BL       WM_DeleteWindow
    167          
    168          	if (pSFKeyboard)
   \                     ??DisplaySFKeyboard_1:
   \   00000018   ........           LDR      R4,??DataTable32
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??DisplaySFKeyboard_2
    169          		DestroyKeyboard(pSFKeyboard);
   \   00000028   ........           BL       DestroyKeyboard
    170          
    171          	SetLastScreen(SFSCREENS_TYPE, screenID);
   \                     ??DisplaySFKeyboard_2:
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   1500A0E3           MOV      R0,#+21
   \   00000034   ........           BL       SetLastScreen
    172          	hSFScreen = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW, SFScreensCallback, 0);
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   ........           LDR      R0,??DataTable32_1
   \   00000044   443FA0E3           MOV      R3,#+272
   \   00000048   04008DE5           STR      R0,[SP, #+4]
   \   0000004C   0200A0E3           MOV      R0,#+2
   \   00000050   00008DE5           STR      R0,[SP, #+0]
   \   00000054   782FA0E3           MOV      R2,#+480
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   ........           BL       WM_CreateWindow
    173          
    174          	switch (screenID)
   \   00000064   015045E2           SUB      R5,R5,#+1
   \   00000068   040084E5           STR      R0,[R4, #+4]
   \   0000006C   070055E3           CMP      R5,#+7
   \   00000070   05F18F90           ADDLS    PC,PC,R5, LSL #+2
   \                     ??DisplaySFKeyboard_0:
   \   00000074   0700008A           BHI      ??DisplaySFKeyboard_3
   \   00000078   0E0000EA           B        ??DisplaySFKeyboard_4
   \   0000007C   150000EA           B        ??DisplaySFKeyboard_5
   \   00000080   1B0000EA           B        ??DisplaySFKeyboard_6
   \   00000084   220000EA           B        ??DisplaySFKeyboard_7
   \   00000088   290000EA           B        ??DisplaySFKeyboard_8
   \   0000008C   2F0000EA           B        ??DisplaySFKeyboard_9
   \   00000090   360000EA           B        ??DisplaySFKeyboard_10
   \   00000094   3D0000EA           B        ??DisplaySFKeyboard_11
    175          	{
    176          	default:
    177          	case LONGITUDE_SCREEN:
    178          		fData = trackData.startLineLong;
   \                     ??DisplaySFKeyboard_3:
   \   00000098   ........           LDR      R0,??DataTable32_2
   \   0000009C   D801C0E1           LDRD     R0,R1,[R0, #+24]
   \   000000A0   ........           BL       __aeabi_d2f
    179          		pTitle = "Enter S/F Longitude";
   \   000000A4   ............       ADRL     R5,`?<Constant "Enter S/F Longitude">`
   \              ....        
    180          		size = MAX_LONGITUDE_STRING;
   \   000000AC   0A60A0E3           MOV      R6,#+10
    181          		id = LONGITUDE_SCREEN;
   \   000000B0   0070A0E3           MOV      R7,#+0
    182          		break;
   \   000000B4   3B0000EA           B        ??DisplaySFKeyboard_12
    183          	case LATITUDE_SCREEN:
    184          		fData = trackData.startLineLat;
   \                     ??DisplaySFKeyboard_4:
   \   000000B8   ........           LDR      R0,??DataTable32_2
   \   000000BC   D001C0E1           LDRD     R0,R1,[R0, #+16]
   \   000000C0   ........           BL       __aeabi_d2f
    185          		pTitle = "Enter S/F Latitude";
   \   000000C4   ............       ADRL     R5,`?<Constant "Enter S/F Latitude">`
   \              ....        
    186          		size = MAX_LATITUDE_STRING;
   \   000000CC   0B60A0E3           MOV      R6,#+11
    187          		id = LATITUDE_SCREEN;
   \   000000D0   0170A0E3           MOV      R7,#+1
    188          		break;
   \   000000D4   330000EA           B        ??DisplaySFKeyboard_12
    189          	case HEADING_SCREEN:
    190          		fData = trackData.startLineHeading;
   \                     ??DisplaySFKeyboard_5:
   \   000000D8   ........           LDR      R0,??DataTable32_2
    191          		pTitle = "Enter S/F Heading";
   \   000000DC   ............       ADRL     R5,`?<Constant "Enter S/F Heading">`
   \              ....        
   \   000000E4   240090E5           LDR      R0,[R0, #+36]
    192          		size = MAX_HEADING_STRING;
   \   000000E8   0A60A0E3           MOV      R6,#+10
    193          		id = HEADING_SCREEN;
   \   000000EC   0270A0E3           MOV      R7,#+2
    194          		break;
   \   000000F0   2C0000EA           B        ??DisplaySFKeyboard_12
    195          	case START_LONGITUDE_SCREEN:
    196          		fData = trackData.startLineLong;
   \                     ??DisplaySFKeyboard_6:
   \   000000F4   ........           LDR      R0,??DataTable32_2
   \   000000F8   D801C0E1           LDRD     R0,R1,[R0, #+24]
   \   000000FC   ........           BL       __aeabi_d2f
    197          		pTitle = "Enter Start Line Longitude";
   \   00000100   ............       ADRL     R5,`?<Constant "Enter Start Line Long...">`
   \              ....        
    198          		size = MAX_LONGITUDE_STRING;
   \   00000108   0A60A0E3           MOV      R6,#+10
    199          		id = START_LONGITUDE_SCREEN;
   \   0000010C   0370A0E3           MOV      R7,#+3
    200          		break;
   \   00000110   240000EA           B        ??DisplaySFKeyboard_12
    201          	case START_LATITUDE_SCREEN:
    202          		fData = trackData.startLineLat;
   \                     ??DisplaySFKeyboard_7:
   \   00000114   ........           LDR      R0,??DataTable32_2
   \   00000118   D001C0E1           LDRD     R0,R1,[R0, #+16]
   \   0000011C   ........           BL       __aeabi_d2f
    203          		pTitle = "Enter Start Line Latitude";
   \   00000120   ............       ADRL     R5,`?<Constant "Enter Start Line Lati...">`
   \              ....        
    204          		size = MAX_LATITUDE_STRING;
   \   00000128   0B60A0E3           MOV      R6,#+11
    205          		id = START_LATITUDE_SCREEN;
   \   0000012C   0470A0E3           MOV      R7,#+4
    206          		break;
   \   00000130   1C0000EA           B        ??DisplaySFKeyboard_12
    207          	case START_HEADING_SCREEN:
    208          		fData = trackData.startLineHeading;
   \                     ??DisplaySFKeyboard_8:
   \   00000134   ........           LDR      R0,??DataTable32_2
    209          		pTitle = "Enter Start Line Heading";
   \   00000138   ............       ADRL     R5,`?<Constant "Enter Start Line Heading">`
   \              ....        
   \   00000140   240090E5           LDR      R0,[R0, #+36]
    210          		size = MAX_HEADING_STRING;
   \   00000144   0A60A0E3           MOV      R6,#+10
    211          		id = START_HEADING_SCREEN;
   \   00000148   0570A0E3           MOV      R7,#+5
    212          		break;
   \   0000014C   150000EA           B        ??DisplaySFKeyboard_12
    213          	case FINISH_LONGITUDE_SCREEN:
    214          		fData = trackData.finishLineLong;
   \                     ??DisplaySFKeyboard_9:
   \   00000150   ........           LDR      R0,??DataTable32_2
   \   00000154   D003C0E1           LDRD     R0,R1,[R0, #+48]
   \   00000158   ........           BL       __aeabi_d2f
    215          		pTitle = "Enter Finish Line Longitude";
   \   0000015C   ............       ADRL     R5,`?<Constant "Enter Finish Line Lon...">`
   \              ....        
    216          		size = MAX_LONGITUDE_STRING;
   \   00000164   0A60A0E3           MOV      R6,#+10
    217          		id = FINISH_LONGITUDE_SCREEN;
   \   00000168   0670A0E3           MOV      R7,#+6
    218          		break;
   \   0000016C   0D0000EA           B        ??DisplaySFKeyboard_12
    219          	case FINISH_LATITUDE_SCREEN:
    220          		fData = trackData.finishLineLat;
   \                     ??DisplaySFKeyboard_10:
   \   00000170   ........           LDR      R0,??DataTable32_2
   \   00000174   D802C0E1           LDRD     R0,R1,[R0, #+40]
   \   00000178   ........           BL       __aeabi_d2f
    221          		pTitle = "Enter Finish Line Latitude";
   \   0000017C   ............       ADRL     R5,`?<Constant "Enter Finish Line Lat...">`
   \              ....        
    222          		size = MAX_LATITUDE_STRING;
   \   00000184   0B60A0E3           MOV      R6,#+11
    223          		id = FINISH_LATITUDE_SCREEN;
   \   00000188   0770A0E3           MOV      R7,#+7
    224          		break;
   \   0000018C   050000EA           B        ??DisplaySFKeyboard_12
    225          	case FINISH_HEADING_SCREEN:
    226          		fData = trackData.finishLineHeading;
   \                     ??DisplaySFKeyboard_11:
   \   00000190   ........           LDR      R0,??DataTable32_2
    227          		pTitle = "Enter Finish Line Heading";
   \   00000194   ............       ADRL     R5,`?<Constant "Enter Finish Line Hea...">`
   \              ....        
   \   0000019C   3C0090E5           LDR      R0,[R0, #+60]
    228          		size = MAX_HEADING_STRING;
   \   000001A0   0A60A0E3           MOV      R6,#+10
    229          		id = FINISH_HEADING_SCREEN;
   \   000001A4   0870A0E3           MOV      R7,#+8
    230          		break;
    231          	}
    232          
    233          	sprintf(WorkString, "%f", fData);
   \                     ??DisplaySFKeyboard_12:
   \   000001A8   ........           BL       __aeabi_f2d
   \   000001AC   0020A0E1           MOV      R2,R0
   \   000001B0   0130A0E1           MOV      R3,R1
   \   000001B4   ........           ADR      R1,??DataTable24  ;; 0x25, 0x66, 0x00, 0x00
   \   000001B8   080084E2           ADD      R0,R4,#+8
   \   000001BC   ........           BL       sprintf
    234          	trim(WorkString);
   \   000001C0   080084E2           ADD      R0,R4,#+8
   \   000001C4   ........           BL       trim
    235          	pSFKeyboard = CreateKeyboard(pTitle, WorkString, NUMERIC, true, size, id, hSFScreen, true);
   \   000001C8   0100A0E3           MOV      R0,#+1
   \   000001CC   0C008DE5           STR      R0,[SP, #+12]
   \   000001D0   040094E5           LDR      R0,[R4, #+4]
   \   000001D4   04708DE5           STR      R7,[SP, #+4]
   \   000001D8   08008DE5           STR      R0,[SP, #+8]
   \   000001DC   00608DE5           STR      R6,[SP, #+0]
   \   000001E0   0130A0E3           MOV      R3,#+1
   \   000001E4   0220A0E3           MOV      R2,#+2
   \   000001E8   081084E2           ADD      R1,R4,#+8
   \   000001EC   0500A0E1           MOV      R0,R5
   \   000001F0   ........           BL       CreateKeyboard
   \   000001F4   000084E5           STR      R0,[R4, #+0]
    236          }
   \   000001F8   14D08DE2           ADD      SP,SP,#+20
   \   000001FC   F080BDE8           POP      {R4-R7,PC}       ;; return
    237          

   \                                 In section .text, align 4, keep-with-next
    238          void SFScreensSaveData(void)
    239          {
   \                     SFScreensSaveData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    240          	switch (GetLastScreen(SFSCREENS_TYPE))
   \   00000008   1500A0E3           MOV      R0,#+21
   \   0000000C   ........           BL       GetLastScreen
   \   00000010   080050E3           CMP      R0,#+8
   \   00000014   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??SFScreensSaveData_0:
   \   00000018   3F00008A           BHI      ??SFScreensSaveData_1
   \   0000001C   070000EA           B        ??SFScreensSaveData_2
   \   00000020   100000EA           B        ??SFScreensSaveData_3
   \   00000024   190000EA           B        ??SFScreensSaveData_4
   \   00000028   040000EA           B        ??SFScreensSaveData_2
   \   0000002C   0D0000EA           B        ??SFScreensSaveData_3
   \   00000030   160000EA           B        ??SFScreensSaveData_4
   \   00000034   1D0000EA           B        ??SFScreensSaveData_5
   \   00000038   260000EA           B        ??SFScreensSaveData_6
   \   0000003C   2F0000EA           B        ??SFScreensSaveData_7
    241          	{
    242          	case LONGITUDE_SCREEN:
    243          	case START_LONGITUDE_SCREEN:
    244          		trackData.startLineLong = atof(WorkString);
   \                     ??SFScreensSaveData_2:
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           LDR      R0,??DataTable34
   \   0000004C   ........           BL       __iar_Stod
   \   00000050   03008DE8           STM      SP,{R0,R1}
   \   00000054   ........           LDR      R0,??DataTable32_2
   \   00000058   00209DE5           LDR      R2,[SP, #+0]
   \   0000005C   0130A0E1           MOV      R3,R1
   \   00000060   F821C0E1           STRD     R2,R3,[R0, #+24]
    245          		break;
   \   00000064   2C0000EA           B        ??SFScreensSaveData_1
    246          
    247          	case LATITUDE_SCREEN:
    248          	case START_LATITUDE_SCREEN:
    249          		trackData.startLineLat = atof(WorkString);
   \                     ??SFScreensSaveData_3:
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   ........           LDR      R0,??DataTable34
   \   00000074   ........           BL       __iar_Stod
   \   00000078   03008DE8           STM      SP,{R0,R1}
   \   0000007C   ........           LDR      R0,??DataTable32_2
   \   00000080   00209DE5           LDR      R2,[SP, #+0]
   \   00000084   0130A0E1           MOV      R3,R1
   \   00000088   F021C0E1           STRD     R2,R3,[R0, #+16]
    250          		break;
   \   0000008C   220000EA           B        ??SFScreensSaveData_1
    251          
    252          	case HEADING_SCREEN:
    253          	case START_HEADING_SCREEN:
    254          		trackData.startLineHeading = atof(WorkString);
   \                     ??SFScreensSaveData_4:
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   ........           LDR      R0,??DataTable34
   \   0000009C   ........           BL       __iar_Stod
   \   000000A0   ........           BL       __aeabi_d2f
   \   000000A4   ........           LDR      R1,??DataTable32_2
   \   000000A8   240081E5           STR      R0,[R1, #+36]
    255          		break;
   \   000000AC   1A0000EA           B        ??SFScreensSaveData_1
    256          
    257          	case FINISH_LONGITUDE_SCREEN:
    258          		trackData.finishLineLong = atof(WorkString);
   \                     ??SFScreensSaveData_5:
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   ........           LDR      R0,??DataTable34
   \   000000BC   ........           BL       __iar_Stod
   \   000000C0   03008DE8           STM      SP,{R0,R1}
   \   000000C4   ........           LDR      R0,??DataTable32_2
   \   000000C8   00209DE5           LDR      R2,[SP, #+0]
   \   000000CC   0130A0E1           MOV      R3,R1
   \   000000D0   F023C0E1           STRD     R2,R3,[R0, #+48]
    259          		break;
   \   000000D4   100000EA           B        ??SFScreensSaveData_1
    260          
    261          	case FINISH_LATITUDE_SCREEN:
    262          		trackData.finishLineLat = atof(WorkString);
   \                     ??SFScreensSaveData_6:
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   ........           LDR      R0,??DataTable34
   \   000000E4   ........           BL       __iar_Stod
   \   000000E8   03008DE8           STM      SP,{R0,R1}
   \   000000EC   ........           LDR      R0,??DataTable32_2
   \   000000F0   00209DE5           LDR      R2,[SP, #+0]
   \   000000F4   0130A0E1           MOV      R3,R1
   \   000000F8   F822C0E1           STRD     R2,R3,[R0, #+40]
    263          		break;
   \   000000FC   060000EA           B        ??SFScreensSaveData_1
    264          
    265          	case FINISH_HEADING_SCREEN:
    266          		trackData.finishLineHeading = atof(WorkString);
   \                     ??SFScreensSaveData_7:
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   ........           LDR      R0,??DataTable34
   \   0000010C   ........           BL       __iar_Stod
   \   00000110   ........           BL       __aeabi_d2f
   \   00000114   ........           LDR      R1,??DataTable32_2
   \   00000118   3C0081E5           STR      R0,[R1, #+60]
    267          		break;
    268          	}
    269          
    270          	alteredTrackData = true;
   \                     ??SFScreensSaveData_1:
   \   0000011C   ........           LDR      R0,??DataTable41
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   0010C0E5           STRB     R1,[R0, #+0]
    271          }
   \   00000128   0CD08DE2           ADD      SP,SP,#+12
   \   0000012C   0080BDE8           POP      {PC}             ;; return
    272          

   \                                 In section .text, align 4, keep-with-next
    273          void SFScreensCallback(WM_MESSAGE * pMsg)
    274          {
   \                     SFScreensCallback:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    275          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   010050E2           SUBS     R0,R0,#+1
   \   00000010   3C00000A           BEQ      ??SFScreensCallback_0
   \   00000014   0A0050E2           SUBS     R0,R0,#+10
   \   00000018   3000000A           BEQ      ??SFScreensCallback_1
   \   0000001C   0F0050E2           SUBS     R0,R0,#+15
   \   00000020   1400000A           BEQ      ??SFScreensCallback_2
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   0400000A           BEQ      ??SFScreensCallback_3
   \   0000002C   010050E2           SUBS     R0,R0,#+1
   \   00000030   1200000A           BEQ      ??SFScreensCallback_4
   \   00000034   F70050E2           SUBS     R0,R0,#+247
   \   00000038   1D00000A           BEQ      ??SFScreensCallback_5
   \   0000003C   2F0000EA           B        ??SFScreensCallback_6
    276          	{
    277          		case KB_CANCEL_MSG:
    278          			DeleteSFScreensKeyboards();
   \                     ??SFScreensCallback_3:
   \   00000040   ........           LDR      R4,??DataTable32
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0200000A           BEQ      ??SFScreensCallback_7
   \   00000050   ........           BL       DestroyKeyboard
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   000084E5           STR      R0,[R4, #+0]
    279          			DisplayNewScreenList(TRACK_SETTINGS_SCREENS_TYPE, GetLastScreen(TRACK_SETTINGS_SCREENS_TYPE), hSFScreens);
   \                     ??SFScreensCallback_7:
   \   0000005C   0D00A0E3           MOV      R0,#+13
   \   00000060   ........           BL       GetLastScreen
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \                     ??SFScreensCallback_8:
   \   0000006C   1040BDE8           POP      {R4,LR}
   \   00000070   0D00A0E3           MOV      R0,#+13
   \   00000074   ........           B        DisplayNewScreenList  ;; tailcall
    280          			break;
    281          
    282          		case KB_SAVE_MSG:
    283          			SFScreensSaveData();
   \                     ??SFScreensCallback_2:
   \   00000078   1040BDE8           POP      {R4,LR}
   \   0000007C   ........           B        SFScreensSaveData  ;; tailcall
    284          			break;
    285          
    286          		case KB_SAVE_AND_EXIT_MSG:
    287          			SFScreensSaveData();
   \                     ??SFScreensCallback_4:
   \   00000080   ........           BL       SFScreensSaveData
    288          			DeleteSFScreensKeyboards();
   \   00000084   ........           LDR      R4,??DataTable32
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0200000A           BEQ      ??SFScreensCallback_9
   \   00000094   ........           BL       DestroyKeyboard
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   000084E5           STR      R0,[R4, #+0]
    289          			DisplayNewScreenList(TRACK_SETTINGS_SCREENS_TYPE, GetLastScreen(TRACK_SETTINGS_SCREENS_TYPE), hSFScreens);
   \                     ??SFScreensCallback_9:
   \   000000A0   0D00A0E3           MOV      R0,#+13
   \   000000A4   ........           BL       GetLastScreen
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   EDFFFFEA           B        ??SFScreensCallback_8
    290          			break;
    291          
    292          		case WM_TIMER:
    293          			if (pMsg->Data.v == hScreenTimer)
   \                     ??SFScreensCallback_5:
   \   000000B4   ........           LDR      R0,??DataTable40
   \   000000B8   0C1094E5           LDR      R1,[R4, #+12]
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000051E1           CMP      R1,R0
   \   000000C4   0F00001A           BNE      ??SFScreensCallback_0
    294          			{
    295          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   000000C8   7D10A0E3           MOV      R1,#+125
   \   000000CC   ........           BL       WM_RestartTimer
    296          				WM_InvalidateRect(pMsg->hWin, &BannerRect);
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   1040BDE8           POP      {R4,LR}
   \   000000D8   ........           LDR      R1,??DataTable40_1
   \   000000DC   ........           B        WM_InvalidateRect  ;; tailcall
    297          			}
    298          			break;
    299          
    300          		case WM_CREATE:
    301          			SFScreensIgnoreNextKeyRelease();
    302          			break;
    303          
    304          		case WM_DELETE:
    305          			DeleteSFScreensKeyboards();
   \                     ??SFScreensCallback_1:
   \   000000E0   ........           LDR      R4,??DataTable32
   \   000000E4   000094E5           LDR      R0,[R4, #+0]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0500000A           BEQ      ??SFScreensCallback_0
   \   000000F0   ........           BL       DestroyKeyboard
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   000084E5           STR      R0,[R4, #+0]
   \   000000FC   1080BDE8           POP      {R4,PC}
    306          			break;
    307          
    308          		default:
    309          			WM_DefaultProc(pMsg);
   \                     ??SFScreensCallback_6:
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       WM_DefaultProc
    310          	}
    311          }
   \                     ??SFScreensCallback_0:
   \   00000108   1080BDE8           POP      {R4,PC}          ;; return
    312          
    313          

   \                                 In section .text, align 4, keep-with-next
    314          void SFScreensIgnoreNextKeyRelease(void)
    315          {
    316          }
   \                     SFScreensIgnoreNextKeyRelease:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    317          

   \                                 In section .text, align 4, keep-with-next
    318          void DeleteSFScreensKeyboards(void)
    319          {
   \                     DeleteSFScreensKeyboards:
   \   00000000   10402DE9           PUSH     {R4,LR}
    320          	if (pSFKeyboard)
   \   00000004   ........           LDR      R4,??DataTable32
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??DeleteSFScreensKeyboards_0
    321          	{
    322          		DestroyKeyboard(pSFKeyboard);
   \   00000014   ........           BL       DestroyKeyboard
    323          		pSFKeyboard = 0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   000084E5           STR      R0,[R4, #+0]
    324          	}
    325          }
   \                     ??DeleteSFScreensKeyboards_0:
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    326          

   \                                 In section .text, align 4, keep-with-next
    327          char ValidateSFCoordinates(void)
    328          {
   \                     ValidateSFCoordinates:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    329          	char results = true;
    330          
    331          	if ((trackData.startLineHeading < 0.0) || (trackData.startLineHeading > 360.0))
   \   00000004   ........           LDR      R4,??DataTable32_2
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   240094E5           LDR      R0,[R4, #+36]
   \   00000010   ........           BL       __aeabi_cfcmple
   \   00000014   0CD04DE2           SUB      SP,SP,#+12
   \   00000018   0150A0E3           MOV      R5,#+1
   \   0000001C   0300003A           BCC      ??ValidateSFCoordinates_0
   \   00000020   5013A0E3           MOV      R1,#+1073741825
   \   00000024   ED1781E3           ORR      R1,R1,#0x3B40000
   \   00000028   ........           BL       __aeabi_cfrcmple
   \   0000002C   0000008A           BHI      ??ValidateSFCoordinates_1
    332          		results = false;
   \                     ??ValidateSFCoordinates_0:
   \   00000030   0050A0E3           MOV      R5,#+0
    333          	if ((trackData.startLineLong < -180.0) || (trackData.startLineLong > 180.0))
   \                     ??ValidateSFCoordinates_1:
   \   00000034   D801C4E1           LDRD     R0,R1,[R4, #+24]
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   ........           LDR      R3,??DataTable41_1  ;; 0xc0668000
   \   00000040   ........           BL       __aeabi_cdcmple
   \   00000044   0300003A           BCC      ??ValidateSFCoordinates_2
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   8034C3E3           BIC      R3,R3,#0x80000000
   \   00000050   ........           BL       __aeabi_cdrcmple
   \   00000054   0000008A           BHI      ??ValidateSFCoordinates_3
    334          		results = false;
   \                     ??ValidateSFCoordinates_2:
   \   00000058   0050A0E3           MOV      R5,#+0
    335          	if ((trackData.startLineLat < -90.0) || (trackData.startLineLat > 90.0))
   \                     ??ValidateSFCoordinates_3:
   \   0000005C   D001C4E1           LDRD     R0,R1,[R4, #+16]
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   ........           LDR      R3,??DataTable42  ;; 0xc0568000
   \   00000068   ........           BL       __aeabi_cdcmple
   \   0000006C   0300003A           BCC      ??ValidateSFCoordinates_4
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   8034C3E3           BIC      R3,R3,#0x80000000
   \   00000078   ........           BL       __aeabi_cdrcmple
   \   0000007C   0000008A           BHI      ??ValidateSFCoordinates_5
    336          		results = false;
   \                     ??ValidateSFCoordinates_4:
   \   00000080   0050A0E3           MOV      R5,#+0
    337          	if ((trackData.finishLineHeading < 0.0) || (trackData.finishLineHeading > 360.0))
   \                     ??ValidateSFCoordinates_5:
   \   00000084   3C0094E5           LDR      R0,[R4, #+60]
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   ........           BL       __aeabi_cfcmple
   \   00000090   0300003A           BCC      ??ValidateSFCoordinates_6
   \   00000094   5013A0E3           MOV      R1,#+1073741825
   \   00000098   ED1781E3           ORR      R1,R1,#0x3B40000
   \   0000009C   ........           BL       __aeabi_cfrcmple
   \   000000A0   0000008A           BHI      ??ValidateSFCoordinates_7
    338          		results = false;
   \                     ??ValidateSFCoordinates_6:
   \   000000A4   0050A0E3           MOV      R5,#+0
    339          	if ((trackData.finishLineLong < -180.0) || (trackData.finishLineLong > 180.0))
   \                     ??ValidateSFCoordinates_7:
   \   000000A8   D003C4E1           LDRD     R0,R1,[R4, #+48]
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   ........           LDR      R3,??DataTable41_1  ;; 0xc0668000
   \   000000B4   ........           BL       __aeabi_cdcmple
   \   000000B8   0300003A           BCC      ??ValidateSFCoordinates_8
   \   000000BC   0120A0E3           MOV      R2,#+1
   \   000000C0   8034C3E3           BIC      R3,R3,#0x80000000
   \   000000C4   ........           BL       __aeabi_cdrcmple
   \   000000C8   0000008A           BHI      ??ValidateSFCoordinates_9
    340          		results = false;
   \                     ??ValidateSFCoordinates_8:
   \   000000CC   0050A0E3           MOV      R5,#+0
    341          	if ((trackData.finishLineLat < -90.0) || (trackData.finishLineLat > 90.0))
   \                     ??ValidateSFCoordinates_9:
   \   000000D0   D802C4E1           LDRD     R0,R1,[R4, #+40]
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   ........           LDR      R3,??DataTable42  ;; 0xc0568000
   \   000000DC   ........           BL       __aeabi_cdcmple
   \   000000E0   0500003A           BCC      ??ValidateSFCoordinates_10
   \   000000E4   0120A0E3           MOV      R2,#+1
   \   000000E8   8034C3E3           BIC      R3,R3,#0x80000000
   \   000000EC   ........           BL       __aeabi_cdrcmple
   \   000000F0   0100009A           BLS      ??ValidateSFCoordinates_10
    342          		results = false;
    343          
    344          	if (results == false)
   \   000000F4   000055E3           CMP      R5,#+0
   \   000000F8   5600001A           BNE      ??ValidateSFCoordinates_11
    345          	{
    346          		if (InvalidSFDataPopUp() == GUI_ID_CANCEL)
   \                     ??ValidateSFCoordinates_10:
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   ........           BL       SetPopupDefaults
   \   00000104   ........           BL       WM_GetDesktopWindow
   \   00000108   0030A0E1           MOV      R3,R0
   \   0000010C   0A00A0E3           MOV      R0,#+10
   \   00000110   04008DE5           STR      R0,[SP, #+4]
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   ........           LDR      R2,??DataTable42_1
   \   0000011C   0610A0E3           MOV      R1,#+6
   \   00000120   ............       ADRL     R0,InvalidSFResources
   \              ....        
   \   00000128   ........           BL       GUI_ExecDialogBox
   \   0000012C   020050E3           CMP      R0,#+2
    347          			return false;			// go back and fix it
   \   00000130   0000A003           MOVEQ    R0,#+0
   \   00000134   4800000A           BEQ      ??ValidateSFCoordinates_12
    348          		else
    349          		{
    350          			// Auto-fix the data
    351          			if (trackData.startLineHeading < 0.0)
   \   00000138   240094E5           LDR      R0,[R4, #+36]
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   ........           BL       __aeabi_cfcmple
    352          				trackData.startLineHeading = 0.0;
   \   00000144   24108435           STRCC    R1,[R4, #+36]
   \   00000148   0400003A           BCC      ??ValidateSFCoordinates_13
    353          			else if (trackData.startLineHeading > 360.0)
   \   0000014C   5013A0E3           MOV      R1,#+1073741825
   \   00000150   ED1781E3           ORR      R1,R1,#0x3B40000
   \   00000154   ........           BL       __aeabi_cfrcmple
    354          				trackData.startLineHeading = 360.0;
   \   00000158   0100C193           BICLS    R0,R1,#0x1
   \   0000015C   24008495           STRLS    R0,[R4, #+36]
    355          
    356          			if (trackData.startLineLong < -180.0)
   \                     ??ValidateSFCoordinates_13:
   \   00000160   D801C4E1           LDRD     R0,R1,[R4, #+24]
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   ........           LDR      R3,??DataTable41_1  ;; 0xc0668000
   \   0000016C   ........           BL       __aeabi_cdcmple
    357          				trackData.startLineLong = -180.0;
   \   00000170   0000A033           MOVCC    R0,#+0
   \   00000174   0400003A           BCC      ??ValidateSFCoordinates_14
    358          			else if (trackData.startLineLong > 180.0)
   \   00000178   0120A0E3           MOV      R2,#+1
   \   0000017C   8034C3E3           BIC      R3,R3,#0x80000000
   \   00000180   ........           BL       __aeabi_cdrcmple
   \   00000184   0200008A           BHI      ??ValidateSFCoordinates_15
    359          				trackData.startLineLong = 180.0;
   \   00000188   0000A0E3           MOV      R0,#+0
   \                     ??ValidateSFCoordinates_14:
   \   0000018C   0310A0E1           MOV      R1,R3
   \   00000190   F801C4E1           STRD     R0,R1,[R4, #+24]
    360          
    361          			if (trackData.startLineLat < -90.0)
   \                     ??ValidateSFCoordinates_15:
   \   00000194   D001C4E1           LDRD     R0,R1,[R4, #+16]
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   ........           LDR      R3,??DataTable42  ;; 0xc0568000
   \   000001A0   ........           BL       __aeabi_cdcmple
    362          				trackData.startLineLat = -90.0;
   \   000001A4   0000A033           MOVCC    R0,#+0
   \   000001A8   0400003A           BCC      ??ValidateSFCoordinates_16
    363          			else if (trackData.startLineLat > 90.0)
   \   000001AC   0120A0E3           MOV      R2,#+1
   \   000001B0   8034C3E3           BIC      R3,R3,#0x80000000
   \   000001B4   ........           BL       __aeabi_cdrcmple
   \   000001B8   0200008A           BHI      ??ValidateSFCoordinates_17
    364          				trackData.startLineLat = 90.0;
   \   000001BC   0000A0E3           MOV      R0,#+0
   \                     ??ValidateSFCoordinates_16:
   \   000001C0   0310A0E1           MOV      R1,R3
   \   000001C4   F001C4E1           STRD     R0,R1,[R4, #+16]
    365          
    366          			if (trackData.finishLineHeading < 0.0)
   \                     ??ValidateSFCoordinates_17:
   \   000001C8   3C0094E5           LDR      R0,[R4, #+60]
   \   000001CC   0010A0E3           MOV      R1,#+0
   \   000001D0   ........           BL       __aeabi_cfcmple
    367          				trackData.finishLineHeading = 0.0;
   \   000001D4   3C108435           STRCC    R1,[R4, #+60]
   \   000001D8   0400003A           BCC      ??ValidateSFCoordinates_18
    368          			else if (trackData.finishLineHeading > 360.0)
   \   000001DC   5013A0E3           MOV      R1,#+1073741825
   \   000001E0   ED1781E3           ORR      R1,R1,#0x3B40000
   \   000001E4   ........           BL       __aeabi_cfrcmple
    369          				trackData.finishLineHeading = 360.0;
   \   000001E8   0100C193           BICLS    R0,R1,#0x1
   \   000001EC   3C008495           STRLS    R0,[R4, #+60]
    370          
    371          			if (trackData.finishLineLong < -180.0)
   \                     ??ValidateSFCoordinates_18:
   \   000001F0   D003C4E1           LDRD     R0,R1,[R4, #+48]
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   ........           LDR      R3,??DataTable41_1  ;; 0xc0668000
   \   000001FC   ........           BL       __aeabi_cdcmple
    372          				trackData.finishLineLong = -180.0;
   \   00000200   0000A033           MOVCC    R0,#+0
   \   00000204   0400003A           BCC      ??ValidateSFCoordinates_19
    373          			else if (trackData.finishLineLong > 180.0)
   \   00000208   0120A0E3           MOV      R2,#+1
   \   0000020C   8034C3E3           BIC      R3,R3,#0x80000000
   \   00000210   ........           BL       __aeabi_cdrcmple
   \   00000214   0200008A           BHI      ??ValidateSFCoordinates_20
    374          				trackData.finishLineLong = 180.0;
   \   00000218   0000A0E3           MOV      R0,#+0
   \                     ??ValidateSFCoordinates_19:
   \   0000021C   0310A0E1           MOV      R1,R3
   \   00000220   F003C4E1           STRD     R0,R1,[R4, #+48]
    375          
    376          			if (trackData.finishLineLat < -90.0)
   \                     ??ValidateSFCoordinates_20:
   \   00000224   D802C4E1           LDRD     R0,R1,[R4, #+40]
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   ........           LDR      R3,??DataTable42  ;; 0xc0568000
   \   00000230   ........           BL       __aeabi_cdcmple
    377          				trackData.finishLineLat = -90.0;
   \   00000234   0000A033           MOVCC    R0,#+0
   \   00000238   0400003A           BCC      ??ValidateSFCoordinates_21
    378          			else if (trackData.finishLineLat > 90.0)
   \   0000023C   0120A0E3           MOV      R2,#+1
   \   00000240   8034C3E3           BIC      R3,R3,#0x80000000
   \   00000244   ........           BL       __aeabi_cdrcmple
   \   00000248   0200008A           BHI      ??ValidateSFCoordinates_11
    379          				trackData.finishLineLat = 90.0;
   \   0000024C   0000A0E3           MOV      R0,#+0
   \                     ??ValidateSFCoordinates_21:
   \   00000250   0310A0E1           MOV      R1,R3
   \   00000254   F802C4E1           STRD     R0,R1,[R4, #+40]
    380          
    381          			return true;
   \                     ??ValidateSFCoordinates_11:
   \   00000258   0100A0E3           MOV      R0,#+1
   \                     ??ValidateSFCoordinates_12:
   \   0000025C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000260   3080BDE8           POP      {R4,R5,PC}       ;; return
    382          		}
    383          	}
    384          	return true;
    385          }
    386          

   \                                 In section .text, align 4, keep-with-next
    387          static const GUI_WIDGET_CREATE_INFO InvalidSFResources[] = {
   \                     InvalidSFResources:
   \   00000000                      ; Initializer data, 144 bytes
   \   00000000   ............       DC32 FRAMEWIN_CreateIndirect, `?<Constant "Settings Error">`
   \              ....        
   \   00000008   000028001400       DC16 0, 40, 20, 380, 220, 0
   \              7C01DC000000
   \   00000014   00000000....       DC32 0, TEXT_CreateIndirect, `?<Constant "The values you entere...">`
   \              ............
   \   00000020   000000000A00       DC16 0, 0, 10, 360, 30, 2
   \              68011E000200
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   ............       DC32 TEXT_CreateIndirect, `?<Constant "valid start/finish co...">`
   \              ....        
   \   00000038   000000002800       DC16 0, 0, 40, 360, 30, 2
   \              68011E000200
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   ............       DC32 TEXT_CreateIndirect, `?<Constant "Would you like to aut...">`
   \              ....        
   \   00000050   000000004600       DC16 0, 0, 70, 360, 30, 2
   \              68011E000200
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \   00000060   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Auto-fix">`
   \              ....        
   \   00000068   010023007300       DC16 1, 35, 115, 120, 60
   \              78003C00    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0
   \   00000078   ............       DC32 BUTTON_CreateIndirect, `?<Constant "Go Back">`
   \              ....        
   \   00000080   0200C3007300       DC16 2, 195, 115, 120, 60
   \              78003C00    
   \   0000008A   000000000000       DC8 0, 0, 0, 0, 0, 0
    388          	{ FRAMEWIN_CreateIndirect, "Settings Error", 0, 40, 20, 380, 220, 0, 0 },
    389          	{ TEXT_CreateIndirect, "The values you entered are not", 0, 0, 10, 360, 30, TEXT_CF_HCENTER },
    390          	{ TEXT_CreateIndirect, "valid start/finish coordinates.", 0, 0, 40, 360, 30, TEXT_CF_HCENTER },
    391          	{ TEXT_CreateIndirect, "Would you like to auto-fix or go back?", 0, 0, 70, 360, 30, TEXT_CF_HCENTER },
    392          	{ BUTTON_CreateIndirect, "Auto-fix",	GUI_ID_OK, 35, 115, 120, 60 },
    393          	{ BUTTON_CreateIndirect, "Go Back", GUI_ID_CANCEL, 195, 115, 120, 60 },
    394          };
    395          
    396          //
    397          // Tell user about the bad Start/Finish Coordinates data
    398          //
    399          // Returns	GUI_ID_OK - continue
    400          //			GUI_ID_CANCEL - go back and fix it
    401          //

   \                                 In section .text, align 4, keep-with-next
    402          int InvalidSFDataPopUp(void)
    403          {
   \                     InvalidSFDataPopUp:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    404          	SetPopupDefaults(WARNING_POPUP);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   ........           BL       SetPopupDefaults
    405          	return GUI_ExecDialogBox(InvalidSFResources, GUI_COUNTOF(InvalidSFResources), &popupCallback, WM_GetDesktopWindow(), 10, 10);
   \   00000010   ........           BL       WM_GetDesktopWindow
   \   00000014   0A10A0E3           MOV      R1,#+10
   \   00000018   04108DE5           STR      R1,[SP, #+4]
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0030A0E1           MOV      R3,R0
   \   00000024   ........           LDR      R2,??DataTable42_1
   \   00000028   0610A0E3           MOV      R1,#+6
   \   0000002C   ............       ADRL     R0,InvalidSFResources
   \              ....        
   \   00000034   ........           BL       GUI_ExecDialogBox
   \   00000038   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    406          }
    407          
    408          
    409          ///////////////////////////////////////////////////////////////////////////
    410          //
    411          // Special intermediate screen(s)
    412          //

   \                                 In section .text, align 4, keep-with-next
    413          void DisplayWaitingForCameraScreen(WM_HWIN hPrev)
    414          {
   \                     DisplayWaitingForCameraScreen:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    415          BUTTON_Handle hBtn;
    416          
    417          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0100000A           BEQ      ??DisplayWaitingForCameraScreen_0
    418          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    419          
    420          	if ((hWaitingForCamera = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, WaitingForCameraCallback, 0)) <= 0)
   \   00000014   0000A0E3           MOV      R0,#+0
   \                     ??DisplayWaitingForCameraScreen_0:
   \   00000018   08008DE5           STR      R0,[SP, #+8]
   \   0000001C   ........           LDR      R0,??DataTable43
   \   00000020   443FA0E3           MOV      R3,#+272
   \   00000024   04008DE5           STR      R0,[SP, #+4]
   \   00000028   0200A0E3           MOV      R0,#+2
   \   0000002C   800D80E3           ORR      R0,R0,#0x2000
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   782FA0E3           MOV      R2,#+480
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           BL       WM_CreateWindow
   \   00000044   ........           LDR      R4,??DataTable43_1
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   \   00000050   000000AA           BGE      ??DisplayWaitingForCameraScreen_1
    421          		SystemError();
   \   00000054   ........           BL       SystemError
    422          
    423          	hBtn = BUTTON_CreateEx(139, 200, BUTTON_WIDTH, BUTTON_HEIGHT, hWaitingForCamera, WM_CF_SHOW, 0, RUN_WITHOUT_BUTTON);
   \                     ??DisplayWaitingForCameraScreen_1:
   \   00000058   0300A0E3           MOV      R0,#+3
   \   0000005C   800E80E3           ORR      R0,R0,#0x800
   \   00000060   0C008DE5           STR      R0,[SP, #+12]
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   08008DE5           STR      R0,[SP, #+8]
   \   0000006C   0200A0E3           MOV      R0,#+2
   \   00000070   04008DE5           STR      R0,[SP, #+4]
   \   00000074   000094E5           LDR      R0,[R4, #+0]
   \   00000078   2730A0E3           MOV      R3,#+39
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   CA20A0E3           MOV      R2,#+202
   \   00000084   C810A0E3           MOV      R1,#+200
   \   00000088   8B00A0E3           MOV      R0,#+139
   \   0000008C   ........           BL       BUTTON_CreateEx
   \   00000090   0050A0E1           MOV      R5,R0
    424          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmBlueButton);
   \   00000094   ........           LDR      R2,??DataTable46
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   ........           BL       BUTTON_SetBitmap
    425          	BUTTON_SetText(hBtn, "Run Without");
   \   000000A0   ............       ADRL     R1,`?<Constant "Run Without">`
   \              ....        
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       BUTTON_SetText
    426          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000000B0   FF24E0E3           MVN      R2,#-16777216
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           BL       BUTTON_SetTextColor
    427          
    428          	SetScreenType(WAITING_FOR_CAMERA_SCREEN_TYPE);
   \   000000C0   1900A0E3           MOV      R0,#+25
   \   000000C4   ........           BL       SetScreenType
    429          	hWaitForCameraTimer = WM_CreateTimer(hWaitingForCamera, 0, WAIT_FOR_CAMERA_TIME, 0);
   \   000000C8   0030A0E3           MOV      R3,#+0
   \   000000CC   7D2FA0E3           MOV      R2,#+500
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   000094E5           LDR      R0,[R4, #+0]
   \   000000D8   ........           BL       WM_CreateTimer
   \   000000DC   040084E5           STR      R0,[R4, #+4]
    430          	totalWaitForCameraTime = 0;
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   080084E5           STR      R0,[R4, #+8]
    431          }
   \   000000E8   14D08DE2           ADD      SP,SP,#+20
   \   000000EC   3080BDE8           POP      {R4,R5,PC}       ;; return
    432          

   \                                 In section .text, align 4, keep-with-next
    433          static void WaitingForCameraCallback(WM_MESSAGE * pMsg)
    434          {
   \                     WaitingForCameraCallback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    435          	if (pMsg->MsgId == WM_NOTIFY_PARENT)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   260050E3           CMP      R0,#+38
   \   00000014   1000001A           BNE      ??WaitingForCameraCallback_0
    436          	{
    437          		if (pMsg->Data.v == WM_NOTIFICATION_CLICKED)
   \   00000018   0C0094E5           LDR      R0,[R4, #+12]
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   3D00001A           BNE      ??WaitingForCameraCallback_1
    438          			if (WM_GetId(pMsg->hWinSrc) == RUN_WITHOUT_BUTTON)
   \   00000024   080094E5           LDR      R0,[R4, #+8]
   \   00000028   ........           BL       WM_GetId
   \   0000002C   0310A0E3           MOV      R1,#+3
   \   00000030   801E81E3           ORR      R1,R1,#0x800
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   3700001A           BNE      ??WaitingForCameraCallback_1
    439          			{
    440          				GaugeScreensIgnoreNextKeyRelease();		// Exiting this screen by PRESSING a button (ie touch screen currently PRESSED), tell next screen to ignore the next key release
   \   0000003C   ........           BL       GaugeScreensIgnoreNextKeyRelease
    441          				raceModeState = RM_CAMERA_RECORDING;		// Note: Run Without is equivelent to camera ready as we will record whether or not the camera is there
   \   00000040   ........           LDR      R0,??DataTable46_1
   \   00000044   0710A0E3           MOV      R1,#+7
   \   00000048   0010C0E5           STRB     R1,[R0, #+0]
    442          				GoRacingStateMachine(hWaitingForCamera);
   \   0000004C   ........           LDR      R0,??DataTable43_1
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \                     ??WaitingForCameraCallback_2:
   \   00000054   ........           BL       GoRacingStateMachine
   \   00000058   2F0000EA           B        ??WaitingForCameraCallback_1
    443          			}
    444          	}
    445          	else if (pMsg->MsgId == WM_PAINT)
   \                     ??WaitingForCameraCallback_0:
   \   0000005C   0F0050E3           CMP      R0,#+15
   \   00000060   0900001A           BNE      ??WaitingForCameraCallback_3
    446          	{
    447          		GUI_Clear();
   \   00000064   ........           BL       GUI_Clear
    448          		GUI_DrawBitmap(&bmWaitingForCamera, LEFT, TOP);
   \   00000068   0A20A0E3           MOV      R2,#+10
   \   0000006C   1210A0E3           MOV      R1,#+18
   \   00000070   ........           LDR      R0,??DataTable46_2
   \   00000074   ........           BL       GUI_DrawBitmap
    449          		GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   00000078   E520A0E3           MOV      R2,#+229
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   ........           LDR      R0,??DataTable46_3
   \   00000084   ........           BL       GUI_DrawBitmap
   \   00000088   230000EA           B        ??WaitingForCameraCallback_1
    450          	}
    451          	else if (pMsg->MsgId == WM_TIMER)
   \                     ??WaitingForCameraCallback_3:
   \   0000008C   1310A0E3           MOV      R1,#+19
   \   00000090   401F81E3           ORR      R1,R1,#0x100
   \   00000094   010050E1           CMP      R0,R1
   \   00000098   1D00001A           BNE      ??WaitingForCameraCallback_4
    452          	{
    453          		if (pMsg->Data.v == hWaitForCameraTimer)
   \   0000009C   ........           LDR      R5,??DataTable43_1
   \   000000A0   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A4   041095E5           LDR      R1,[R5, #+4]
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   1A00001A           BNE      ??WaitingForCameraCallback_1
    454          		{
    455          			if (GetValue(CAMERA_STATUS).iVal == CAMERA_STATUS_RECORDING)
   \   000000B0   4B10A0E3           MOV      R1,#+75
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   ........           BL       GetValue
   \   000000BC   00009DE5           LDR      R0,[SP, #+0]
   \   000000C0   030050E3           CMP      R0,#+3
   \   000000C4   0400001A           BNE      ??WaitingForCameraCallback_5
    456          			{
    457          				raceModeState = RM_CAMERA_RECORDING;
   \                     ??WaitingForCameraCallback_6:
   \   000000C8   ........           LDR      R0,??DataTable46_1
   \   000000CC   0710A0E3           MOV      R1,#+7
   \   000000D0   0010C0E5           STRB     R1,[R0, #+0]
    458          				GoRacingStateMachine(hWaitingForCamera);
   \   000000D4   000095E5           LDR      R0,[R5, #+0]
   \   000000D8   DDFFFFEA           B        ??WaitingForCameraCallback_2
    459          			}
    460          			else
    461          			{
    462          				// Keep checking for camera every 1/2 second.  If the camera becomes ready then proceed.
    463          				// If the camera is not ready within 10 seconds proceed without it.
    464          				totalWaitForCameraTime += WAIT_FOR_CAMERA_TIME;
   \                     ??WaitingForCameraCallback_5:
   \   000000DC   080095E5           LDR      R0,[R5, #+8]
    465          				if (totalWaitForCameraTime > TOTAL_WAIT_FOR_CAMERA_TIME)
   \   000000E0   1110A0E3           MOV      R1,#+17
   \   000000E4   7D0F80E2           ADD      R0,R0,#+500
   \   000000E8   9C1D81E3           ORR      R1,R1,#0x2700
   \   000000EC   080085E5           STR      R0,[R5, #+8]
   \   000000F0   010050E1           CMP      R0,R1
   \   000000F4   F3FFFFAA           BGE      ??WaitingForCameraCallback_6
    466          				{
    467          					raceModeState = RM_CAMERA_RECORDING;		// Note: Timing out is equivelent to camera ready as we will record whether or not the camera is there
    468          					GoRacingStateMachine(hWaitingForCamera);
    469          				}
    470          				else
    471          				{
    472          					WM_RestartTimer(hWaitForCameraTimer, WAIT_FOR_CAMERA_TIME);
   \   000000F8   7D1FA0E3           MOV      R1,#+500
   \   000000FC   040095E5           LDR      R0,[R5, #+4]
   \   00000100   ........           BL       WM_RestartTimer
    473          					WM_InvalidateRect(pMsg->hWin, &BannerRect);
   \   00000104   ........           LDR      R1,??DataTable40_1
   \   00000108   040094E5           LDR      R0,[R4, #+4]
   \   0000010C   ........           BL       WM_InvalidateRect
   \   00000110   010000EA           B        ??WaitingForCameraCallback_1
    474          				}
    475          			}
    476          		}
    477          	}
    478          	else WM_DefaultProc(pMsg);
   \                     ??WaitingForCameraCallback_4:
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       WM_DefaultProc
    479          }
   \                     ??WaitingForCameraCallback_1:
   \   0000011C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000120   3080BDE8           POP      {R4,R5,PC}       ;; return
    480          

   \                                 In section .text, align 4, keep-with-next
    481          void DisplayAutoXStageScreen(WM_HWIN hPrev)
    482          {
   \                     DisplayAutoXStageScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    483          
    484          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??DisplayAutoXStageScreen_0
    485          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    486          
    487          	SetScreenScrollingHOnly();
   \                     ??DisplayAutoXStageScreen_0:
   \   00000014   ........           LDR      R0,??DataTable46_4
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    488          	SetScreenType(WAITING_FOR_STAGE_SCREEN_TYPE);
   \   00000020   1D00A0E3           MOV      R0,#+29
   \   00000024   ........           BL       SetScreenType
    489          
    490          	if ((hStageScreen = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, StageScreenCallback, 0)) <= 0)
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   08008DE5           STR      R0,[SP, #+8]
   \   00000030   ........           LDR      R0,??DataTable46_5
   \   00000034   443FA0E3           MOV      R3,#+272
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   800D80E3           ORR      R0,R0,#0x2000
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   782FA0E3           MOV      R2,#+480
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   ........           BL       WM_CreateWindow
   \   00000058   ........           LDR      R4,??DataTable46_6
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   000084E5           STR      R0,[R4, #+0]
   \   00000064   000000AA           BGE      ??DisplayAutoXStageScreen_1
    491          		SystemError();
   \   00000068   ........           BL       SystemError
    492          
    493          	hStageButton = BUTTON_CreateEx(210, 0, 270, 272, hStageScreen, WM_CF_SHOW, 0, STAGE_BUTTON);
   \                     ??DisplayAutoXStageScreen_1:
   \   0000006C   0700A0E3           MOV      R0,#+7
   \   00000070   800E80E3           ORR      R0,R0,#0x800
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   04008DE5           STR      R0,[SP, #+4]
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   443FA0E3           MOV      R3,#+272
   \   00000090   00008DE5           STR      R0,[SP, #+0]
   \   00000094   022043E2           SUB      R2,R3,#+2
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   D200A0E3           MOV      R0,#+210
   \   000000A0   ........           BL       BUTTON_CreateEx
   \   000000A4   100084E5           STR      R0,[R4, #+16]
    494          	BUTTON_SetBitmap(hStageButton, BUTTON_BI_UNPRESSED, &bmAutocrossTouchToStage);
   \   000000A8   ........           LDR      R2,??DataTable46_7
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   ........           BL       BUTTON_SetBitmap
    495          	hSweepTachButton = BUTTON_CreateEx(24, 29, 103, 66, hStageScreen, WM_CF_SHOW, 0, SWEEPTACH_BUTTON);
   \   000000B4   0400A0E3           MOV      R0,#+4
   \   000000B8   800E80E3           ORR      R0,R0,#0x800
   \   000000BC   0C008DE5           STR      R0,[SP, #+12]
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   08008DE5           STR      R0,[SP, #+8]
   \   000000C8   0200A0E3           MOV      R0,#+2
   \   000000CC   04008DE5           STR      R0,[SP, #+4]
   \   000000D0   000094E5           LDR      R0,[R4, #+0]
   \   000000D4   4230A0E3           MOV      R3,#+66
   \   000000D8   00008DE5           STR      R0,[SP, #+0]
   \   000000DC   6720A0E3           MOV      R2,#+103
   \   000000E0   1D10A0E3           MOV      R1,#+29
   \   000000E4   1800A0E3           MOV      R0,#+24
   \   000000E8   ........           BL       BUTTON_CreateEx
   \   000000EC   040084E5           STR      R0,[R4, #+4]
    496          	hAnalogGaugeButton = BUTTON_CreateEx(24, 97, 103, 66, hStageScreen, WM_CF_SHOW, 0, ANALOGGAUGE_BUTTON);
   \   000000F0   0500A0E3           MOV      R0,#+5
   \   000000F4   800E80E3           ORR      R0,R0,#0x800
   \   000000F8   0C008DE5           STR      R0,[SP, #+12]
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   08008DE5           STR      R0,[SP, #+8]
   \   00000104   0200A0E3           MOV      R0,#+2
   \   00000108   04008DE5           STR      R0,[SP, #+4]
   \   0000010C   000094E5           LDR      R0,[R4, #+0]
   \   00000110   4230A0E3           MOV      R3,#+66
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   6720A0E3           MOV      R2,#+103
   \   0000011C   6110A0E3           MOV      R1,#+97
   \   00000120   1800A0E3           MOV      R0,#+24
   \   00000124   ........           BL       BUTTON_CreateEx
   \   00000128   080084E5           STR      R0,[R4, #+8]
    497          	hDigitalGaugeButton = BUTTON_CreateEx(24, 164, 103, 66, hStageScreen, WM_CF_SHOW, 0, DIGITALGAUGE_BUTTON);
   \   0000012C   0600A0E3           MOV      R0,#+6
   \   00000130   800E80E3           ORR      R0,R0,#0x800
   \   00000134   0C008DE5           STR      R0,[SP, #+12]
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   08008DE5           STR      R0,[SP, #+8]
   \   00000140   0200A0E3           MOV      R0,#+2
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   000094E5           LDR      R0,[R4, #+0]
   \   0000014C   4230A0E3           MOV      R3,#+66
   \   00000150   00008DE5           STR      R0,[SP, #+0]
   \   00000154   6720A0E3           MOV      R2,#+103
   \   00000158   A410A0E3           MOV      R1,#+164
   \   0000015C   1800A0E3           MOV      R0,#+24
   \   00000160   ........           BL       BUTTON_CreateEx
   \   00000164   0C0084E5           STR      R0,[R4, #+12]
    498          
    499          	SetGaugeButtonGraphics();
   \   00000168   10D08DE2           ADD      SP,SP,#+16
   \   0000016C   1040BDE8           POP      {R4,LR}
   \   00000170   ........           B        SetGaugeButtonGraphics  ;; tailcall
    500          }
    501          
    502          

   \                                 In section .text, align 4, keep-with-next
    503          static void StageScreenCallback(WM_MESSAGE * pMsg)
    504          {
   \                     StageScreenCallback:
   \   00000000   00402DE9           PUSH     {LR}
    505          	if (pMsg->MsgId == WM_NOTIFY_PARENT)
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   260051E3           CMP      R1,#+38
   \   00000010   3200001A           BNE      ??StageScreenCallback_1
    506          	{
    507          		if (pMsg->Data.v == WM_NOTIFICATION_CLICKED)
   \   00000014   0C1090E5           LDR      R1,[R0, #+12]
   \   00000018   010051E3           CMP      R1,#+1
   \   0000001C   4000001A           BNE      ??StageScreenCallback_2
    508          		{
    509          			switch (WM_GetId(pMsg->hWinSrc))
   \   00000020   080090E5           LDR      R0,[R0, #+8]
   \   00000024   ........           BL       WM_GetId
   \   00000028   040040E2           SUB      R0,R0,#+4
   \   0000002C   800E40E2           SUB      R0,R0,#+2048
   \   00000030   070050E3           CMP      R0,#+7
   \   00000034   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??StageScreenCallback_0:
   \   00000038   3900008A           BHI      ??StageScreenCallback_2
   \   0000003C   0D0000EA           B        ??StageScreenCallback_3
   \   00000040   150000EA           B        ??StageScreenCallback_4
   \   00000044   170000EA           B        ??StageScreenCallback_5
   \   00000048   030000EA           B        ??StageScreenCallback_6
   \   0000004C   340000EA           B        ??StageScreenCallback_2
   \   00000050   170000EA           B        ??StageScreenCallback_7
   \   00000054   1B0000EA           B        ??StageScreenCallback_8
   \   00000058   1D0000EA           B        ??StageScreenCallback_9
    510          			{
    511          			case STAGE_BUTTON:
    512          #ifdef _WINDOWS
    513          				GaugeScreensIgnoreNextKeyRelease();		// Windows sim uses a key press to launch, real hardware uses accelerometer - so we DO NOT want to ignore
    514          														// the next key release on the hardware
    515          #endif
    516          				raceModeState = RM_STAGED;
   \                     ??StageScreenCallback_6:
   \   0000005C   ........           LDR      R0,??DataTable46_1
   \   00000060   0910A0E3           MOV      R1,#+9
   \   00000064   0010C0E5           STRB     R1,[R0, #+0]
    517          				GoRacingStateMachine(hStageScreen);
   \   00000068   ........           LDR      R0,??DataTable46_6
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   ........           BL       GoRacingStateMachine
    518          				break;
   \   00000074   2A0000EA           B        ??StageScreenCallback_2
    519          			case SWEEPTACH_BUTTON:
    520          				if (selectedRaceMode == DRAG_MODE)
   \                     ??StageScreenCallback_3:
   \   00000078   ........           LDR      R0,??DataTable46_8
   \   0000007C   0010A0E3           MOV      R1,#+0
   \                     ??StageScreenCallback_10:
   \   00000080   ........           LDR      R2,??DataTable46_9
   \   00000084   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000088   040052E3           CMP      R2,#+4
    521          					sysData.lastDragDisplay = SG_SWEEPTACH;
   \   0000008C   D210C005           STRBEQ   R1,[R0, #+210]
    522          				else sysData.lastAutoXDisplay = SG_SWEEPTACH;
   \   00000090   D410C015           STRBNE   R1,[R0, #+212]
    523          				SetGaugeButtonGraphics();
   \   00000094   ........           BL       SetGaugeButtonGraphics
    524          				break;
   \   00000098   210000EA           B        ??StageScreenCallback_2
    525          			case ANALOGGAUGE_BUTTON:
    526          				if (selectedRaceMode == DRAG_MODE)
   \                     ??StageScreenCallback_4:
   \   0000009C   ........           LDR      R0,??DataTable46_8
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   F5FFFFEA           B        ??StageScreenCallback_10
    527          					sysData.lastDragDisplay = SG_ANALOG;
    528          				else sysData.lastAutoXDisplay = SG_ANALOG;
    529          				SetGaugeButtonGraphics();
    530          				break;
    531          			case DIGITALGAUGE_BUTTON:
    532          				if (selectedRaceMode == DRAG_MODE)
   \                     ??StageScreenCallback_5:
   \   000000A8   0210A0E3           MOV      R1,#+2
   \   000000AC   ........           LDR      R0,??DataTable46_8
   \   000000B0   F2FFFFEA           B        ??StageScreenCallback_10
    533          					sysData.lastDragDisplay = SG_DIGITAL;
    534          				else sysData.lastAutoXDisplay = SG_DIGITAL;
    535          				SetGaugeButtonGraphics();
    536          				break;
    537          			case DRAG_1_8_MILE_BUTTON:
    538          				sysData.dragDistance = DD_1_8;
   \                     ??StageScreenCallback_7:
   \   000000B4   ........           LDR      R0,??DataTable46_8
   \   000000B8   0210A0E3           MOV      R1,#+2
   \                     ??StageScreenCallback_11:
   \   000000BC   D610C0E5           STRB     R1,[R0, #+214]
    539          				SetDistanceButtonGraphics();
   \   000000C0   ........           BL       SetDistanceButtonGraphics
    540          				break;
   \   000000C4   160000EA           B        ??StageScreenCallback_2
    541          
    542          			case DRAG_1000_FEET_BUTTON:
    543          				sysData.dragDistance = DD_1000;
   \                     ??StageScreenCallback_8:
   \   000000C8   ........           LDR      R0,??DataTable46_8
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   F9FFFFEA           B        ??StageScreenCallback_11
    544          				SetDistanceButtonGraphics();
    545          				break;
    546          
    547          			case DRAG_1_4_MILE_BUTTON:
    548          				sysData.dragDistance = DD_1_4;
   \                     ??StageScreenCallback_9:
   \   000000D4   ........           LDR      R0,??DataTable46_8
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   F6FFFFEA           B        ??StageScreenCallback_11
    549          				SetDistanceButtonGraphics();
    550          				break;
    551          			}
    552          		}
    553          	}
    554          	else if (pMsg->MsgId == WM_PAINT)
   \                     ??StageScreenCallback_1:
   \   000000E0   0F0051E3           CMP      R1,#+15
   \   000000E4   0D00001A           BNE      ??StageScreenCallback_12
    555          	{
    556          		GUI_Clear();
   \   000000E8   ........           BL       GUI_Clear
    557          		if (selectedRaceMode == AUTOXRALLY_MODE)
   \   000000EC   ........           LDR      R0,??DataTable46_9
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000F8   0210A0E1           MOV      R1,R2
   \   000000FC   010050E3           CMP      R0,#+1
    558          			GUI_DrawBitmap(&bmAutocrossStageBackground, 0, 0);
   \   00000100   ........           LDREQ    R0,??DataTable46_10
    559          		else GUI_DrawBitmap(&bmDragStageBackground, 0, 0);
   \   00000104   ........           LDRNE    R0,??DataTable46_11
   \   00000108   ........           BL       GUI_DrawBitmap
    560          		GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   0000010C   E520A0E3           MOV      R2,#+229
   \   00000110   0010A0E3           MOV      R1,#+0
   \   00000114   ........           LDR      R0,??DataTable46_3
   \   00000118   ........           BL       GUI_DrawBitmap
   \   0000011C   000000EA           B        ??StageScreenCallback_2
    561          	}
    562          	else WM_DefaultProc(pMsg);
   \                     ??StageScreenCallback_12:
   \   00000120   ........           BL       WM_DefaultProc
    563          }
   \                     ??StageScreenCallback_2:
   \   00000124   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000128   0080BDE8           POP      {PC}             ;; return
    564          
    565          

   \                                 In section .text, align 4, keep-with-next
    566          void DisplayDragStageScreen(WM_HWIN hPrev)
    567          {
   \                     DisplayDragStageScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    568          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??DisplayDragStageScreen_0
    569          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    570          
    571          	SetScreenScrollingHOnly();
   \                     ??DisplayDragStageScreen_0:
   \   00000014   ........           LDR      R0,??DataTable46_4
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    572          	SetScreenType(WAITING_FOR_STAGE_SCREEN_TYPE);
   \   00000020   1D00A0E3           MOV      R0,#+29
   \   00000024   ........           BL       SetScreenType
    573          
    574          	if ((hStageScreen = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, StageScreenCallback, 0)) <= 0)
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   08008DE5           STR      R0,[SP, #+8]
   \   00000030   ........           LDR      R0,??DataTable46_5
   \   00000034   443FA0E3           MOV      R3,#+272
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   800D80E3           ORR      R0,R0,#0x2000
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   782FA0E3           MOV      R2,#+480
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   ........           BL       WM_CreateWindow
   \   00000058   ........           LDR      R4,??DataTable46_6
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   000084E5           STR      R0,[R4, #+0]
   \   00000064   000000AA           BGE      ??DisplayDragStageScreen_1
    575          		SystemError();
   \   00000068   ........           BL       SystemError
    576          
    577          	hStageButton = BUTTON_CreateEx(210, 0, 270, 272, hStageScreen, WM_CF_SHOW, 0, STAGE_BUTTON);
   \                     ??DisplayDragStageScreen_1:
   \   0000006C   0700A0E3           MOV      R0,#+7
   \   00000070   800E80E3           ORR      R0,R0,#0x800
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   04008DE5           STR      R0,[SP, #+4]
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   443FA0E3           MOV      R3,#+272
   \   00000090   00008DE5           STR      R0,[SP, #+0]
   \   00000094   022043E2           SUB      R2,R3,#+2
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   D200A0E3           MOV      R0,#+210
   \   000000A0   ........           BL       BUTTON_CreateEx
   \   000000A4   100084E5           STR      R0,[R4, #+16]
    578          	BUTTON_SetBitmap(hStageButton, BUTTON_BI_UNPRESSED, &bmDragTouchToStage);
   \   000000A8   ........           LDR      R2,??DataTable46_12
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   ........           BL       BUTTON_SetBitmap
    579          	hSweepTachButton = BUTTON_CreateEx(24, 29, 103, 66, hStageScreen, WM_CF_SHOW, 0, SWEEPTACH_BUTTON);
   \   000000B4   0400A0E3           MOV      R0,#+4
   \   000000B8   800E80E3           ORR      R0,R0,#0x800
   \   000000BC   0C008DE5           STR      R0,[SP, #+12]
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   08008DE5           STR      R0,[SP, #+8]
   \   000000C8   0200A0E3           MOV      R0,#+2
   \   000000CC   04008DE5           STR      R0,[SP, #+4]
   \   000000D0   000094E5           LDR      R0,[R4, #+0]
   \   000000D4   4230A0E3           MOV      R3,#+66
   \   000000D8   00008DE5           STR      R0,[SP, #+0]
   \   000000DC   6720A0E3           MOV      R2,#+103
   \   000000E0   1D10A0E3           MOV      R1,#+29
   \   000000E4   1800A0E3           MOV      R0,#+24
   \   000000E8   ........           BL       BUTTON_CreateEx
   \   000000EC   040084E5           STR      R0,[R4, #+4]
    580          	hAnalogGaugeButton = BUTTON_CreateEx(24, 97, 103, 66, hStageScreen, WM_CF_SHOW, 0, ANALOGGAUGE_BUTTON);
   \   000000F0   0500A0E3           MOV      R0,#+5
   \   000000F4   800E80E3           ORR      R0,R0,#0x800
   \   000000F8   0C008DE5           STR      R0,[SP, #+12]
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   08008DE5           STR      R0,[SP, #+8]
   \   00000104   0200A0E3           MOV      R0,#+2
   \   00000108   04008DE5           STR      R0,[SP, #+4]
   \   0000010C   000094E5           LDR      R0,[R4, #+0]
   \   00000110   4230A0E3           MOV      R3,#+66
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   6720A0E3           MOV      R2,#+103
   \   0000011C   6110A0E3           MOV      R1,#+97
   \   00000120   1800A0E3           MOV      R0,#+24
   \   00000124   ........           BL       BUTTON_CreateEx
   \   00000128   080084E5           STR      R0,[R4, #+8]
    581          	hDigitalGaugeButton = BUTTON_CreateEx(24, 164, 103, 66, hStageScreen, WM_CF_SHOW, 0, DIGITALGAUGE_BUTTON);
   \   0000012C   0600A0E3           MOV      R0,#+6
   \   00000130   800E80E3           ORR      R0,R0,#0x800
   \   00000134   0C008DE5           STR      R0,[SP, #+12]
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   08008DE5           STR      R0,[SP, #+8]
   \   00000140   0200A0E3           MOV      R0,#+2
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   000094E5           LDR      R0,[R4, #+0]
   \   0000014C   4230A0E3           MOV      R3,#+66
   \   00000150   00008DE5           STR      R0,[SP, #+0]
   \   00000154   6720A0E3           MOV      R2,#+103
   \   00000158   A410A0E3           MOV      R1,#+164
   \   0000015C   1800A0E3           MOV      R0,#+24
   \   00000160   ........           BL       BUTTON_CreateEx
   \   00000164   0C0084E5           STR      R0,[R4, #+12]
    582          	SetGaugeButtonGraphics();
   \   00000168   ........           BL       SetGaugeButtonGraphics
    583          
    584          	h1_8thMile = BUTTON_CreateEx(131, 29, 72, 65, hStageScreen, WM_CF_SHOW, 0, DRAG_1_8_MILE_BUTTON);
   \   0000016C   0900A0E3           MOV      R0,#+9
   \   00000170   800E80E3           ORR      R0,R0,#0x800
   \   00000174   0C008DE5           STR      R0,[SP, #+12]
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   08008DE5           STR      R0,[SP, #+8]
   \   00000180   0200A0E3           MOV      R0,#+2
   \   00000184   04008DE5           STR      R0,[SP, #+4]
   \   00000188   000094E5           LDR      R0,[R4, #+0]
   \   0000018C   4130A0E3           MOV      R3,#+65
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   4820A0E3           MOV      R2,#+72
   \   00000198   1D10A0E3           MOV      R1,#+29
   \   0000019C   8300A0E3           MOV      R0,#+131
   \   000001A0   ........           BL       BUTTON_CreateEx
   \   000001A4   140084E5           STR      R0,[R4, #+20]
    585          	h1_4Mile = BUTTON_CreateEx(131, 97, 72, 65, hStageScreen, WM_CF_SHOW, 0, DRAG_1_4_MILE_BUTTON);
   \   000001A8   0B00A0E3           MOV      R0,#+11
   \   000001AC   800E80E3           ORR      R0,R0,#0x800
   \   000001B0   0C008DE5           STR      R0,[SP, #+12]
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   08008DE5           STR      R0,[SP, #+8]
   \   000001BC   0200A0E3           MOV      R0,#+2
   \   000001C0   04008DE5           STR      R0,[SP, #+4]
   \   000001C4   000094E5           LDR      R0,[R4, #+0]
   \   000001C8   4130A0E3           MOV      R3,#+65
   \   000001CC   00008DE5           STR      R0,[SP, #+0]
   \   000001D0   4820A0E3           MOV      R2,#+72
   \   000001D4   6110A0E3           MOV      R1,#+97
   \   000001D8   8300A0E3           MOV      R0,#+131
   \   000001DC   ........           BL       BUTTON_CreateEx
   \   000001E0   1C0084E5           STR      R0,[R4, #+28]
    586          	h1000ft = BUTTON_CreateEx(131, 164, 72, 65, hStageScreen, WM_CF_SHOW, 0, DRAG_1000_FEET_BUTTON);
   \   000001E4   0A00A0E3           MOV      R0,#+10
   \   000001E8   800E80E3           ORR      R0,R0,#0x800
   \   000001EC   0C008DE5           STR      R0,[SP, #+12]
   \   000001F0   0000A0E3           MOV      R0,#+0
   \   000001F4   08008DE5           STR      R0,[SP, #+8]
   \   000001F8   0200A0E3           MOV      R0,#+2
   \   000001FC   04008DE5           STR      R0,[SP, #+4]
   \   00000200   000094E5           LDR      R0,[R4, #+0]
   \   00000204   4130A0E3           MOV      R3,#+65
   \   00000208   00008DE5           STR      R0,[SP, #+0]
   \   0000020C   4820A0E3           MOV      R2,#+72
   \   00000210   A410A0E3           MOV      R1,#+164
   \   00000214   8300A0E3           MOV      R0,#+131
   \   00000218   ........           BL       BUTTON_CreateEx
   \   0000021C   180084E5           STR      R0,[R4, #+24]
    587          	SetDistanceButtonGraphics();
   \   00000220   10D08DE2           ADD      SP,SP,#+16
   \   00000224   1040BDE8           POP      {R4,LR}
   \   00000228   ........           B        SetDistanceButtonGraphics  ;; tailcall
    588          }
    589          
    590          

   \                                 In section .text, align 4, keep-with-next
    591          void SetDistanceButtonGraphics(void)
    592          {
   \                     SetDistanceButtonGraphics:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    593          	if (sysData.dragDistance == DD_1_8)
   \   00000004   ........           LDR      R1,??DataTable46_8
   \   00000008   ........           LDR      R4,??DataTable46_6
   \   0000000C   D610D1E5           LDRB     R1,[R1, #+214]
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   1C0094E5           LDR      R0,[R4, #+28]
   \   00000018   020051E3           CMP      R1,#+2
   \   0000001C   0800001A           BNE      ??SetDistanceButtonGraphics_0
    594          	{
    595          		BUTTON_SetBitmap(h1_4Mile, BUTTON_BI_UNPRESSED, &bmOneQuarterOff);
   \   00000020   ........           LDR      R2,??DataTable46_13
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   ........           BL       BUTTON_SetBitmap
    596          		BUTTON_SetBitmap(h1000ft, BUTTON_BI_UNPRESSED, &bmOneThousandOff);
   \   0000002C   ........           LDR      R2,??DataTable46_14
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   180094E5           LDR      R0,[R4, #+24]
   \   00000038   ........           BL       BUTTON_SetBitmap
    597          		BUTTON_SetBitmap(h1_8thMile, BUTTON_BI_UNPRESSED, &bmOneEighthOn);
   \   0000003C   ........           LDR      R2,??DataTable46_15
   \   00000040   0F0000EA           B        ??SetDistanceButtonGraphics_1
    598          	}
    599          	else if (sysData.dragDistance == DD_1000)
   \                     ??SetDistanceButtonGraphics_0:
   \   00000044   ........           LDR      R5,??DataTable46_16
   \   00000048   010051E3           CMP      R1,#+1
   \   0000004C   0400001A           BNE      ??SetDistanceButtonGraphics_2
    600          	{
    601          		BUTTON_SetBitmap(h1_4Mile, BUTTON_BI_UNPRESSED, &bmOneQuarterOff);
   \   00000050   ........           LDR      R2,??DataTable46_13
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ........           BL       BUTTON_SetBitmap
    602          		BUTTON_SetBitmap(h1000ft, BUTTON_BI_UNPRESSED, &bmOneThousandOn);
   \   0000005C   ........           LDR      R2,??DataTable46_17
   \   00000060   030000EA           B        ??SetDistanceButtonGraphics_3
    603          		BUTTON_SetBitmap(h1_8thMile, BUTTON_BI_UNPRESSED, &bmOneEighthOff);
    604          	}
    605          	else
    606          	{
    607          		BUTTON_SetBitmap(h1_4Mile, BUTTON_BI_UNPRESSED, &bmOneQuarterOn);
   \                     ??SetDistanceButtonGraphics_2:
   \   00000064   ........           LDR      R2,??DataTable46_18
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   ........           BL       BUTTON_SetBitmap
    608          		BUTTON_SetBitmap(h1000ft, BUTTON_BI_UNPRESSED, &bmOneThousandOff);
   \   00000070   ........           LDR      R2,??DataTable46_14
   \                     ??SetDistanceButtonGraphics_3:
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   180094E5           LDR      R0,[R4, #+24]
   \   0000007C   ........           BL       BUTTON_SetBitmap
    609          		BUTTON_SetBitmap(h1_8thMile, BUTTON_BI_UNPRESSED, &bmOneEighthOff);
   \   00000080   0520A0E1           MOV      R2,R5
   \                     ??SetDistanceButtonGraphics_1:
   \   00000084   140094E5           LDR      R0,[R4, #+20]
   \   00000088   04D08DE2           ADD      SP,SP,#+4
   \   0000008C   3040BDE8           POP      {R4,R5,LR}
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   ........           B        BUTTON_SetBitmap  ;; tailcall
    610          	}
    611          }
    612          

   \                                 In section .text, align 4, keep-with-next
    613          void SetGaugeButtonGraphics(void)
    614          {
   \                     SetGaugeButtonGraphics:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    615          	enum SELECTED_GAUGE selectedGauge;
    616          
    617          	if (selectedRaceMode == DRAG_MODE)
   \   00000004   ........           LDR      R2,??DataTable46_9
   \   00000008   ........           LDR      R4,??DataTable46_6
   \   0000000C   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   040094E5           LDR      R0,[R4, #+4]
   \   00000018   ........           LDR      R1,??DataTable46_8
   \   0000001C   040052E3           CMP      R2,#+4
   \   00000020   1400001A           BNE      ??SetGaugeButtonGraphics_0
    618          	{
    619          		selectedGauge = (enum SELECTED_GAUGE)sysData.lastDragDisplay;
   \   00000024   D250D1E5           LDRB     R5,[R1, #+210]
    620          
    621          		if (selectedGauge == SG_SWEEPTACH)
    622          			BUTTON_SetBitmap(hSweepTachButton, BUTTON_BI_UNPRESSED, &bmDragSweepTachButtonOn);
    623          		else BUTTON_SetBitmap(hSweepTachButton, BUTTON_BI_UNPRESSED, &bmSweepTachButtonOff);
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   000055E3           CMP      R5,#+0
   \   00000030   ........           LDREQ    R2,??DataTable46_19
   \   00000034   ........           LDRNE    R2,??DataTable46_20
   \   00000038   ........           BL       BUTTON_SetBitmap
    624          		if (selectedGauge == SG_ANALOG)
   \   0000003C   080094E5           LDR      R0,[R4, #+8]
   \   00000040   010055E3           CMP      R5,#+1
   \   00000044   0400001A           BNE      ??SetGaugeButtonGraphics_1
    625          			BUTTON_SetBitmap(hAnalogGaugeButton, BUTTON_BI_UNPRESSED, &bmDragAnalogGaugeButtonOn);
   \   00000048   ........           LDR      R2,??DataTable46_21
   \                     ??SetGaugeButtonGraphics_2:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   ........           BL       BUTTON_SetBitmap
    626          		else BUTTON_SetBitmap(hAnalogGaugeButton, BUTTON_BI_UNPRESSED, &bmAnalogGaugeButtonOff);
    627          		if (selectedGauge == SG_DIGITAL)
    628          			BUTTON_SetBitmap(hDigitalGaugeButton, BUTTON_BI_UNPRESSED, &bmDragDigitalGaugeButtonOn);
    629          		else BUTTON_SetBitmap(hDigitalGaugeButton, BUTTON_BI_UNPRESSED, &bmDigitalGaugeButtonOff);
   \                     ??SetGaugeButtonGraphics_3:
   \   00000054   ........           LDR      R2,??DataTable46_22
   \   00000058   160000EA           B        ??SetGaugeButtonGraphics_4
   \                     ??SetGaugeButtonGraphics_1:
   \   0000005C   ........           LDR      R2,??DataTable46_23
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   ........           BL       BUTTON_SetBitmap
   \   00000068   020055E3           CMP      R5,#+2
   \   0000006C   F8FFFF1A           BNE      ??SetGaugeButtonGraphics_3
   \   00000070   ........           LDR      R2,??DataTable46_24
   \   00000074   0F0000EA           B        ??SetGaugeButtonGraphics_4
    630          	}
    631          	else
    632          	{
    633          		selectedGauge = (enum SELECTED_GAUGE)sysData.lastAutoXDisplay;
   \                     ??SetGaugeButtonGraphics_0:
   \   00000078   D450D1E5           LDRB     R5,[R1, #+212]
    634          
    635          		if (selectedGauge == SG_SWEEPTACH)
    636          			BUTTON_SetBitmap(hSweepTachButton, BUTTON_BI_UNPRESSED, &bmAutoXSweepTachButtonOn);
    637          		else BUTTON_SetBitmap(hSweepTachButton, BUTTON_BI_UNPRESSED, &bmSweepTachButtonOff);
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   ........           LDREQ    R2,??DataTable46_25
   \   00000088   ........           LDRNE    R2,??DataTable46_20
   \   0000008C   ........           BL       BUTTON_SetBitmap
    638          		if (selectedGauge == SG_ANALOG)
   \   00000090   010055E3           CMP      R5,#+1
   \   00000094   080094E5           LDR      R0,[R4, #+8]
    639          			BUTTON_SetBitmap(hAnalogGaugeButton, BUTTON_BI_UNPRESSED, &bmAutoXAnalogGaugeButtonOn);
   \   00000098   ........           LDREQ    R2,??DataTable46_26
   \   0000009C   EAFFFF0A           BEQ      ??SetGaugeButtonGraphics_2
    640          		else BUTTON_SetBitmap(hAnalogGaugeButton, BUTTON_BI_UNPRESSED, &bmAnalogGaugeButtonOff);
   \   000000A0   ........           LDR      R2,??DataTable46_23
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   ........           BL       BUTTON_SetBitmap
    641          		if (selectedGauge == SG_DIGITAL)
   \   000000AC   020055E3           CMP      R5,#+2
   \   000000B0   E7FFFF1A           BNE      ??SetGaugeButtonGraphics_3
    642          			BUTTON_SetBitmap(hDigitalGaugeButton, BUTTON_BI_UNPRESSED, &bmAutoXDigitalGaugeButtonOn);
   \   000000B4   ........           LDR      R2,??DataTable46_27
   \                     ??SetGaugeButtonGraphics_4:
   \   000000B8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000BC   04D08DE2           ADD      SP,SP,#+4
   \   000000C0   3040BDE8           POP      {R4,R5,LR}
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   ........           B        BUTTON_SetBitmap  ;; tailcall
    643          		else BUTTON_SetBitmap(hDigitalGaugeButton, BUTTON_BI_UNPRESSED, &bmDigitalGaugeButtonOff);
    644          	}
    645          }
    646          
    647          
    648          #define	READY_TO_LAUNCH_X	20
    649          #define	READY_TO_LAUNCH_Y	40
    650          

   \                                 In section .text, align 4, keep-with-next
    651          void DisplayLaunchScreen(WM_HWIN hPrev)
    652          {
   \                     DisplayLaunchScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    653          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??DisplayLaunchScreen_0
    654          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    655          
    656          	SetScreenScrollingHOnly();
   \                     ??DisplayLaunchScreen_0:
   \   00000014   ........           LDR      R0,??DataTable46_4
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    657          	SetScreenType(WAITING_FOR_LAUNCH_SCREEN_TYPE);
   \   00000020   1E00A0E3           MOV      R0,#+30
   \   00000024   ........           BL       SetScreenType
    658          
    659          	if ((hLaunchScreen = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, LaunchScreenCallback, 0)) <= 0)
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   08008DE5           STR      R0,[SP, #+8]
   \   00000030   ........           LDR      R0,??DataTable46_28
   \   00000034   443FA0E3           MOV      R3,#+272
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   800D80E3           ORR      R0,R0,#0x2000
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   782FA0E3           MOV      R2,#+480
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   ........           BL       WM_CreateWindow
   \   00000058   ........           LDR      R4,??DataTable46_29
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   000084E5           STR      R0,[R4, #+0]
   \   00000064   000000AA           BGE      ??DisplayLaunchScreen_1
    660          		SystemError();
   \   00000068   ........           BL       SystemError
    661          
    662          #ifdef _WINDOWS
    663          	hLaunchButton = BUTTON_CreateEx(READY_TO_LAUNCH_X, READY_TO_LAUNCH_Y, 415, 167, hLaunchScreen, WM_CF_SHOW, 0, LAUNCH_BUTTON);
    664          	if (selectedRaceMode == AUTOXRALLY_MODE)
    665          		BUTTON_SetBitmap(hLaunchButton, BUTTON_BI_UNPRESSED, &bmReadyToLaunchCorvette);
    666          	else BUTTON_SetBitmap(hLaunchButton, BUTTON_BI_UNPRESSED, &bmReadytoLaunchBurnout);
    667          #endif
    668          
    669          	hWaitForLaunchTimer = WM_CreateTimer(hLaunchScreen, 0, WAIT_FOR_LAUNCH_TIME, 0);
   \                     ??DisplayLaunchScreen_1:
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   3220A0E3           MOV      R2,#+50
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   ........           BL       WM_CreateTimer
   \   00000080   040084E5           STR      R0,[R4, #+4]
    670          }
   \   00000084   10D08DE2           ADD      SP,SP,#+16
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
    671          

   \                                 In section .text, align 4, keep-with-next
    672          static void LaunchScreenCallback(WM_MESSAGE * pMsg)
    673          {
   \                     LaunchScreenCallback:
   \   00000000   00402DE9           PUSH     {LR}
    674          	if (pMsg->MsgId == WM_PAINT)
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0F0051E3           CMP      R1,#+15
   \   00000010   0D00001A           BNE      ??LaunchScreenCallback_0
    675          	{
    676          		GUI_Clear();
   \   00000014   ........           BL       GUI_Clear
    677          #ifndef _WINDOWS
    678          		if (selectedRaceMode == AUTOXRALLY_MODE)
   \   00000018   ........           LDR      R0,??DataTable46_9
   \   0000001C   2820A0E3           MOV      R2,#+40
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   1410A0E3           MOV      R1,#+20
   \   00000028   010050E3           CMP      R0,#+1
    679          			GUI_DrawBitmap(&bmReadyToLaunchCorvette, READY_TO_LAUNCH_X, READY_TO_LAUNCH_Y);
   \   0000002C   ........           LDREQ    R0,??DataTable46_30
    680          		else GUI_DrawBitmap(&bmReadytoLaunchBurnout, READY_TO_LAUNCH_X, READY_TO_LAUNCH_Y);
   \   00000030   ........           LDRNE    R0,??DataTable46_31
   \   00000034   ........           BL       GUI_DrawBitmap
    681          #endif
    682          		GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   00000038   E520A0E3           MOV      R2,#+229
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           LDR      R0,??DataTable46_3
   \   00000044   ........           BL       GUI_DrawBitmap
   \   00000048   190000EA           B        ??LaunchScreenCallback_1
    683          	}
    684          	else if (pMsg->MsgId == WM_TIMER)
   \                     ??LaunchScreenCallback_0:
   \   0000004C   1320A0E3           MOV      R2,#+19
   \   00000050   402F82E3           ORR      R2,R2,#0x100
   \   00000054   020051E1           CMP      R1,R2
   \   00000058   1400001A           BNE      ??LaunchScreenCallback_2
    685          	{
    686          		if (pMsg->Data.v == hWaitForLaunchTimer)
   \   0000005C   ........           LDR      R1,??DataTable46_29
   \   00000060   0C0090E5           LDR      R0,[R0, #+12]
   \   00000064   042091E5           LDR      R2,[R1, #+4]
   \   00000068   020050E1           CMP      R0,R2
   \   0000006C   1000001A           BNE      ??LaunchScreenCallback_1
   \   00000070   ........           LDR      R0,??DataTable46_32
   \   00000074   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000078   0C0050E3           CMP      R0,#+12
   \   0000007C   11005013           CMPNE    R0,#+17
   \   00000080   0D005013           CMPNE    R0,#+13
   \   00000084   0300000A           BEQ      ??LaunchScreenCallback_3
    687          		{
    688          			if (LaunchDetected())
    689          			{
    690          #ifdef _WINDOWS
    691          				GaugeScreensIgnoreNextKeyRelease();		// Windows sim uses a key press to launch, real hardware uses accelerometer - so we DO NOT want to ignore
    692          														// the next key release on the hardware
    693          #endif
    694          				raceModeState = RM_LAUNCH_DETECTED;
    695          				GoRacingStateMachine(hLaunchScreen);
    696          			}
    697          			else WM_RestartTimer(hWaitForLaunchTimer, WAIT_FOR_LAUNCH_TIME);
   \   00000088   3210A0E3           MOV      R1,#+50
   \   0000008C   0200A0E1           MOV      R0,R2
   \   00000090   ........           BL       WM_RestartTimer
   \   00000094   060000EA           B        ??LaunchScreenCallback_1
   \                     ??LaunchScreenCallback_3:
   \   00000098   ........           LDR      R0,??DataTable46_1
   \   0000009C   0A20A0E3           MOV      R2,#+10
   \   000000A0   0020C0E5           STRB     R2,[R0, #+0]
   \   000000A4   000091E5           LDR      R0,[R1, #+0]
   \   000000A8   ........           BL       GoRacingStateMachine
   \   000000AC   000000EA           B        ??LaunchScreenCallback_1
    698          		}
    699          	}
    700          #ifdef _WINDOWS
    701          	else if (pMsg->MsgId == WM_NOTIFY_PARENT)
    702          	{
    703          		if (pMsg->Data.v == WM_NOTIFICATION_CLICKED)
    704          		{
    705          			if (WM_GetId(pMsg->hWinSrc) == LAUNCH_BUTTON)
    706          			{
    707          				GaugeScreensIgnoreNextKeyRelease();
    708          				raceModeState = RM_LAUNCH_DETECTED;
    709          				GoRacingStateMachine(hLaunchScreen);
    710          				unsavedSysData.systemMode = DU2_AUTOX_WAITFINISH;
    711          			}
    712          		}
    713          	}
    714          #endif
    715          	else WM_DefaultProc(pMsg);
   \                     ??LaunchScreenCallback_2:
   \   000000B0   ........           BL       WM_DefaultProc
    716          }
   \                     ??LaunchScreenCallback_1:
   \   000000B4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000B8   0080BDE8           POP      {PC}             ;; return
    717          

   \                                 In section .text, align 4, keep-with-next
    718          int LaunchDetected(void)
    719          {
   \                     LaunchDetected:
   \   00000000   ........           LDR      R0,??DataTable46_32
   \   00000004   8800D0E5           LDRB     R0,[R0, #+136]
   \   00000008   0C0050E3           CMP      R0,#+12
   \   0000000C   11005013           CMPNE    R0,#+17
   \   00000010   0D005013           CMPNE    R0,#+13
   \   00000014   0100001A           BNE      ??LaunchDetected_0
    720          	if ((unsavedSysData.systemMode == DU2_AUTOX) || (unsavedSysData.systemMode == DU2_AUTOX_WAITFINISH) || (unsavedSysData.systemMode == DU2_DRAG))
    721          		return true;
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   1EFF2FE1           BX       LR
    722          	else return false;
   \                     ??LaunchDetected_0:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1EFF2FE1           BX       LR               ;; return
    723          }
    724          
    725          

   \                                 In section .text, align 4, keep-with-next
    726          void DisplayTapAtSFScreen(WM_HWIN hPrev)
    727          {
   \                     DisplayTapAtSFScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    728          BUTTON_Handle hButton;
    729          
    730          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??DisplayTapAtSFScreen_0
    731          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    732          
    733          	SetScreenScrollingHOnly();
   \                     ??DisplayTapAtSFScreen_0:
   \   00000014   ........           LDR      R0,??DataTable46_4
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    734          	SetScreenType(WAITING_FOR_SF_SCREEN_TYPE);
   \   00000020   1A00A0E3           MOV      R0,#+26
   \   00000024   ........           BL       SetScreenType
    735          
    736          	if ((hTapAtSFScreen = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, TapAtSFScreenCallback, 0)) <= 0)
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   08008DE5           STR      R0,[SP, #+8]
   \   00000030   ........           LDR      R0,??DataTable46_33
   \   00000034   443FA0E3           MOV      R3,#+272
   \   00000038   04008DE5           STR      R0,[SP, #+4]
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   800D80E3           ORR      R0,R0,#0x2000
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   782FA0E3           MOV      R2,#+480
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   ........           BL       WM_CreateWindow
   \   00000058   ........           LDR      R4,??DataTable46_34
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   000084E5           STR      R0,[R4, #+0]
   \   00000064   000000AA           BGE      ??DisplayTapAtSFScreen_1
    737          		SystemError();
   \   00000068   ........           BL       SystemError
    738          
    739          // KMC 2/11/12 - fix to shrink TapScreenAtSF button to allow laft arrow button to be seen
    740          //	hButton = BUTTON_CreateEx(0, 0, 480, 272, hTapAtSFScreen, WM_CF_SHOW, 0, START_BUTTON);
    741          	hButton = BUTTON_CreateEx(30, 0, 440, 272, hTapAtSFScreen, WM_CF_SHOW, 0, START_BUTTON);
   \                     ??DisplayTapAtSFScreen_1:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   800E80E3           ORR      R0,R0,#0x800
   \   00000074   0C008DE5           STR      R0,[SP, #+12]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   04008DE5           STR      R0,[SP, #+4]
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   443FA0E3           MOV      R3,#+272
   \   00000090   00008DE5           STR      R0,[SP, #+0]
   \   00000094   6E2FA0E3           MOV      R2,#+440
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   1E00A0E3           MOV      R0,#+30
   \   000000A0   ........           BL       BUTTON_CreateEx
    742          	BUTTON_SetBitmap(hButton, BUTTON_BI_UNPRESSED, &bmTapScreenAtSF);
   \   000000A4   10D08DE2           ADD      SP,SP,#+16
   \   000000A8   1040BDE8           POP      {R4,LR}
   \   000000AC   ........           LDR      R2,??DataTable46_35
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   ........           B        BUTTON_SetBitmap  ;; tailcall
    743          }
    744          

   \                                 In section .text, align 4, keep-with-next
    745          WM_HWIN GetSFWindowHandle(void)
    746          {
    747          	return hTapAtSFScreen;
   \                     GetSFWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable46_34
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    748          }
    749          
    750          

   \                                 In section .text, align 4, keep-with-next
    751          WM_HWIN GetLaunchScreenWindowHandle(void)
    752          {
    753          	return hLaunchScreen;
   \                     GetLaunchScreenWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable46_29
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    754          }
    755          

   \                                 In section .text, align 4, keep-with-next
    756          WM_HWIN GetStageWindowHandle(void)
    757          {
    758          	return hStageScreen;
   \                     GetStageWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable46_6
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    759          }
    760          

   \                                 In section .text, align 4, keep-with-next
    761          static void TapAtSFScreenCallback(WM_MESSAGE * pMsg)
    762          {
   \                     TapAtSFScreenCallback:
   \   00000000   00402DE9           PUSH     {LR}
    763          	if (pMsg->MsgId == WM_NOTIFY_PARENT)
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   260051E3           CMP      R1,#+38
   \   00000010   0C00001A           BNE      ??TapAtSFScreenCallback_0
    764          	{
    765          		if (pMsg->Data.v == WM_NOTIFICATION_CLICKED)
   \   00000014   0C1090E5           LDR      R1,[R0, #+12]
   \   00000018   010051E3           CMP      R1,#+1
   \   0000001C   1200001A           BNE      ??TapAtSFScreenCallback_1
    766          			if (WM_GetId(pMsg->hWinSrc) == START_BUTTON)
   \   00000020   080090E5           LDR      R0,[R0, #+8]
   \   00000024   ........           BL       WM_GetId
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   801E81E3           ORR      R1,R1,#0x800
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   0C00001A           BNE      ??TapAtSFScreenCallback_1
    767          				StartPressed(hTapAtSFScreen);
   \   00000038   ........           LDR      R0,??DataTable46_34
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   ........           BL       StartPressed
   \   00000044   080000EA           B        ??TapAtSFScreenCallback_1
    768          	}
    769          	else if (pMsg->MsgId == WM_PAINT)
   \                     ??TapAtSFScreenCallback_0:
   \   00000048   0F0051E3           CMP      R1,#+15
   \   0000004C   0500001A           BNE      ??TapAtSFScreenCallback_2
    770          	{
    771          		GUI_Clear();
   \   00000050   ........           BL       GUI_Clear
    772          		GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   00000054   E520A0E3           MOV      R2,#+229
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   ........           LDR      R0,??DataTable46_3
   \   00000060   ........           BL       GUI_DrawBitmap
   \   00000064   000000EA           B        ??TapAtSFScreenCallback_1
    773          	}
    774          	else WM_DefaultProc(pMsg);
   \                     ??TapAtSFScreenCallback_2:
   \   00000068   ........           BL       WM_DefaultProc
    775          }
   \                     ??TapAtSFScreenCallback_1:
   \   0000006C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000070   0080BDE8           POP      {PC}             ;; return

   \                                 In section .bss, align 4
   \                     hWaitingForSatellites:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
    776          
    777          enum WFSTYPE typeSave;
    778          WM_HWIN parentSave;
   \                     parentSave:
   \   00000008                      DS8 4
   \                     raceMode:
   \   0000000C                      DS8 1
   \                     typeSave:
   \   0000000D                      DS8 1

   \                                 In section .bss, align 4
   \                     hStageScreen:
   \   00000000                      DS8 4
   \                     hSweepTachButton:
   \   00000004                      DS8 4
   \                     hAnalogGaugeButton:
   \   00000008                      DS8 4
   \                     hDigitalGaugeButton:
   \   0000000C                      DS8 4
   \                     hStageButton:
   \   00000010                      DS8 4
   \                     h1_8thMile:
   \   00000014                      DS8 4
   \                     h1000ft:
   \   00000018                      DS8 4
   \                     h1_4Mile:
   \   0000001C                      DS8 4

   \                                 In section .bss, align 4
   \                     hLaunchScreen:
   \   00000000                      DS8 4
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
   \                     pSFKeyboard:
   \   00000000                      DS8 4
   \                     hSFScreen:
   \   00000004                      DS8 4
   \                     WorkString:
   \   00000008                      DS8 20
    779          

   \                                 In section .text, align 4, keep-with-next
    780          void DisplayWaitingForSatellites(enum WFSTYPE type, enum GUI_RACE_MODES mode, WM_HWIN hPrev)
    781          {
   \                     DisplayWaitingForSatellites:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    782          	BUTTON_Handle hBtn;
    783          
    784          	if ((typeSave = type) == DISPLAY_TRACKLIST_TYPE)
   \   00000004   ........           LDR      R4,??DataTable46_36
   \   00000008   010050E3           CMP      R0,#+1
    785          	{
    786          		parentSave = hPrev;
   \   0000000C   08208405           STREQ    R2,[R4, #+8]
    787          	}
    788          	else
    789          	{
    790          		raceMode = mode;
   \   00000010   0C10C415           STRBNE   R1,[R4, #+12]
   \   00000014   14D04DE2           SUB      SP,SP,#+20
   \   00000018   0D00C4E5           STRB     R0,[R4, #+13]
    791          		if (hPrev)
   \   0000001C   00005213           CMPNE    R2,#+0
   \   00000020   0100000A           BEQ      ??DisplayWaitingForSatellites_0
    792          			WM_DeleteWindow(hPrev);
   \   00000024   0200A0E1           MOV      R0,R2
   \   00000028   ........           BL       WM_DeleteWindow
    793          	}
    794          
    795          	SetScreenType(WAITING_FOR_SATELLITES_SCREEN_TYPE);
   \                     ??DisplayWaitingForSatellites_0:
   \   0000002C   1700A0E3           MOV      R0,#+23
   \   00000030   ........           BL       SetScreenType
    796          
    797          	SetScreenScrollingHOnly();
   \   00000034   ........           LDR      R0,??DataTable46_4
   \   00000038   0210A0E3           MOV      R1,#+2
   \   0000003C   001080E5           STR      R1,[R0, #+0]
    798          
    799          //	if ((hWaitingForSatellites = WM_CreateWindow(0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW | WM_CF_MEMDEV_ON_REDRAW, WaitingForSatellitesCallback, 0)) <= 0)
    800          	if ((hWaitingForSatellites = WM_CreateWindow(0, 0, XSIZE_PHYS, YSIZE_PHYS, WM_CF_SHOW, WaitingForSatellitesCallback, 0)) <= 0)
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   08008DE5           STR      R0,[SP, #+8]
   \   00000048   ........           LDR      R0,??DataTable46_37
   \   0000004C   00108DE5           STR      R1,[SP, #+0]
   \   00000050   04008DE5           STR      R0,[SP, #+4]
   \   00000054   443FA0E3           MOV      R3,#+272
   \   00000058   782FA0E3           MOV      R2,#+480
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   ........           BL       WM_CreateWindow
   \   00000068   000084E5           STR      R0,[R4, #+0]
   \   0000006C   010050E3           CMP      R0,#+1
   \   00000070   000000AA           BGE      ??DisplayWaitingForSatellites_1
    801          		SystemError();
   \   00000074   ........           BL       SystemError
    802          
    803          	hBtn = BUTTON_CreateEx(139, 200, BUTTON_WIDTH, BUTTON_HEIGHT, hWaitingForSatellites, WM_CF_SHOW, 0, CANCEL_BUTTON);
   \                     ??DisplayWaitingForSatellites_1:
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   800E80E3           ORR      R0,R0,#0x800
   \   00000080   0C008DE5           STR      R0,[SP, #+12]
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   08008DE5           STR      R0,[SP, #+8]
   \   0000008C   0200A0E3           MOV      R0,#+2
   \   00000090   04008DE5           STR      R0,[SP, #+4]
   \   00000094   000094E5           LDR      R0,[R4, #+0]
   \   00000098   2730A0E3           MOV      R3,#+39
   \   0000009C   00008DE5           STR      R0,[SP, #+0]
   \   000000A0   CA20A0E3           MOV      R2,#+202
   \   000000A4   C810A0E3           MOV      R1,#+200
   \   000000A8   8B00A0E3           MOV      R0,#+139
   \   000000AC   ........           BL       BUTTON_CreateEx
   \   000000B0   0050A0E1           MOV      R5,R0
    804          	BUTTON_SetFont(hBtn, &GUI_Font24_ASCII);
   \   000000B4   ........           LDR      R1,??DataTable46_38
   \   000000B8   ........           BL       BUTTON_SetFont
    805          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmBlueButton);
   \   000000BC   ........           LDR      R2,??DataTable46
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           BL       BUTTON_SetBitmap
    806          	BUTTON_SetText(hBtn, "Cancel");
   \   000000CC   ............       ADRL     R1,`?<Constant "Cancel">`
   \              ....        
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           BL       BUTTON_SetText
    807          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000000DC   FF24E0E3           MVN      R2,#-16777216
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       BUTTON_SetTextColor
    808          
    809          	hWaitForSatelliteTimer = WM_CreateTimer(hWaitingForSatellites, 0, WAIT_FOR_SATELLITE_TIME, 0);
   \   000000EC   0030A0E3           MOV      R3,#+0
   \   000000F0   7D2FA0E3           MOV      R2,#+500
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   000094E5           LDR      R0,[R4, #+0]
   \   000000FC   ........           BL       WM_CreateTimer
   \   00000100   040084E5           STR      R0,[R4, #+4]
    810          }
   \   00000104   14D08DE2           ADD      SP,SP,#+20
   \   00000108   3080BDE8           POP      {R4,R5,PC}       ;; return
    811          

   \                                 In section .text, align 4, keep-with-next
    812          static void WaitingForSatellitesCallback(WM_MESSAGE * pMsg)
    813          {
   \                     WaitingForSatellitesCallback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    814          	if (pMsg->MsgId == WM_NOTIFY_PARENT)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   260050E3           CMP      R0,#+38
   \   00000014   2400001A           BNE      ??WaitingForSatellitesCallback_0
    815          	{
    816          		if (pMsg->Data.v == WM_NOTIFICATION_CLICKED)
   \   00000018   0C0094E5           LDR      R0,[R4, #+12]
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   5B00001A           BNE      ??WaitingForSatellitesCallback_1
    817          			if (WM_GetId(pMsg->hWinSrc) == CANCEL_BUTTON)
   \   00000024   080094E5           LDR      R0,[R4, #+8]
   \   00000028   ........           BL       WM_GetId
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   801E81E3           ORR      R1,R1,#0x800
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   5500001A           BNE      ??WaitingForSatellitesCallback_1
    818          			{
    819          				if (typeSave == DISPLAY_TRACKLIST_TYPE)
   \   0000003C   ........           LDR      R5,??DataTable46_36
   \   00000040   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   0F00001A           BNE      ??WaitingForSatellitesCallback_2
    820          					sysData.radius = WHOLE_WORLD;
   \   0000004C   ........           LDR      R0,??DataTable46_8
   \   00000050   5010A0E3           MOV      R1,#+80
   \   00000054   C31C81E3           ORR      R1,R1,#0xC300
   \   00000058   B41080E5           STR      R1,[R0, #+180]
   \                     ??WaitingForSatellitesCallback_3:
   \   0000005C   ........           LDR      R0,??DataTable46_4
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   001080E5           STR      R1,[R0, #+0]
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   ........           BL       WM_DeleteWindow
   \   00000070   0500A0E3           MOV      R0,#+5
   \   00000074   ........           BL       SetScreenType
   \   00000078   ........           BL       SetWorkingTrackName
   \   0000007C   080095E5           LDR      R0,[R5, #+8]
   \   00000080   ........           BL       FinishDisplayTrackSelection
   \   00000084   ........           BL       GUI_Clear
   \   00000088   410000EA           B        ??WaitingForSatellitesCallback_1
    821          				KillWaitingForSatelliteScreen(false);
   \                     ??WaitingForSatellitesCallback_2:
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   F1FFFF1A           BNE      ??WaitingForSatellitesCallback_3
   \   00000094   ........           LDR      R0,??DataTable46_1
   \   00000098   0210A0E3           MOV      R1,#+2
   \                     ??WaitingForSatellitesCallback_4:
   \   0000009C   0010C0E5           STRB     R1,[R0, #+0]
   \   000000A0   000095E5           LDR      R0,[R5, #+0]
   \   000000A4   ........           BL       GoRacingStateMachine
   \   000000A8   390000EA           B        ??WaitingForSatellitesCallback_1
    822          			}
    823          	}
    824          	else if (pMsg->MsgId == WM_PAINT)
   \                     ??WaitingForSatellitesCallback_0:
   \   000000AC   0F0050E3           CMP      R0,#+15
   \   000000B0   1900001A           BNE      ??WaitingForSatellitesCallback_5
    825          	{
    826          		GUI_Clear();
   \   000000B4   ........           BL       GUI_Clear
    827          		GUI_SetFont(&GUI_Font24_ASCII);
   \   000000B8   ........           LDR      R0,??DataTable46_38
   \   000000BC   ........           BL       GUI_SetFont
    828          		GUI_SetColor(GUI_WHITE);
   \   000000C0   FF04E0E3           MVN      R0,#-16777216
   \   000000C4   ........           BL       GUI_SetColor
    829          		GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   000000C8   0200A0E3           MOV      R0,#+2
   \   000000CC   ........           BL       GUI_SetTextMode
    830          		GUI_DrawBitmap(&bmGPSsignal, LEFT, TOP);
   \   000000D0   0A20A0E3           MOV      R2,#+10
   \   000000D4   1210A0E3           MOV      R1,#+18
   \   000000D8   ........           LDR      R0,??DataTable46_39
   \   000000DC   ........           BL       GUI_DrawBitmap
    831          		GUI_DispStringAt("Waiting for", LEFT + 50, TOP + 50);
   \   000000E0   3C20A0E3           MOV      R2,#+60
   \   000000E4   4410A0E3           MOV      R1,#+68
   \   000000E8   ............       ADRL     R0,`?<Constant "Waiting for">`
   \              ....        
   \   000000F0   ........           BL       GUI_DispStringAt
    832          		GUI_DispStringAt("satellite signal", LEFT + 50, TOP + 75);
   \   000000F4   5520A0E3           MOV      R2,#+85
   \   000000F8   4410A0E3           MOV      R1,#+68
   \   000000FC   ............       ADRL     R0,`?<Constant "satellite signal">`
   \              ....        
   \   00000104   ........           BL       GUI_DispStringAt
    833          
    834          		GUI_DrawBitmap(&bmleftarrow, 0, 229);
   \   00000108   E520A0E3           MOV      R2,#+229
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   ........           LDR      R0,??DataTable46_3
   \   00000114   ........           BL       GUI_DrawBitmap
   \   00000118   1D0000EA           B        ??WaitingForSatellitesCallback_1
    835          	}
    836          	else if (pMsg->MsgId == WM_TIMER)
   \                     ??WaitingForSatellitesCallback_5:
   \   0000011C   1310A0E3           MOV      R1,#+19
   \   00000120   401F81E3           ORR      R1,R1,#0x100
   \   00000124   010050E1           CMP      R0,R1
   \   00000128   1700001A           BNE      ??WaitingForSatellitesCallback_6
    837          	{
    838          		if (pMsg->Data.v == hWaitForSatelliteTimer)
   \   0000012C   ........           LDR      R5,??DataTable46_36
   \   00000130   0C0094E5           LDR      R0,[R4, #+12]
   \   00000134   041095E5           LDR      R1,[R5, #+4]
   \   00000138   010050E1           CMP      R0,R1
   \   0000013C   1400001A           BNE      ??WaitingForSatellitesCallback_1
    839          		{
    840          			if (HaveSatelliteReception())
   \   00000140   1510A0E3           MOV      R1,#+21
   \   00000144   0D00A0E1           MOV      R0,SP
   \   00000148   ........           BL       GetValue
   \   0000014C   00009DE5           LDR      R0,[SP, #+0]
   \   00000150   040050E3           CMP      R0,#+4
   \   00000154   0500003A           BCC      ??WaitingForSatellitesCallback_7
    841          				KillWaitingForSatelliteScreen(true);
   \   00000158   0D00D5E5           LDRB     R0,[R5, #+13]
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   BDFFFF1A           BNE      ??WaitingForSatellitesCallback_3
   \   00000164   ........           LDR      R0,??DataTable46_1
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   CAFFFFEA           B        ??WaitingForSatellitesCallback_4
    842          			else
    843          			{
    844          				WM_RestartTimer(hWaitForSatelliteTimer, WAIT_FOR_SATELLITE_TIME);
   \                     ??WaitingForSatellitesCallback_7:
   \   00000170   7D1FA0E3           MOV      R1,#+500
   \   00000174   040095E5           LDR      R0,[R5, #+4]
   \   00000178   ........           BL       WM_RestartTimer
    845          				WM_InvalidateRect(pMsg->hWin, &BannerRect);
   \   0000017C   ........           LDR      R1,??DataTable46_40
   \   00000180   040094E5           LDR      R0,[R4, #+4]
   \   00000184   ........           BL       WM_InvalidateRect
   \   00000188   010000EA           B        ??WaitingForSatellitesCallback_1
    846          			}
    847          		}
    848          	}
    849          	else WM_DefaultProc(pMsg);
   \                     ??WaitingForSatellitesCallback_6:
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   ........           BL       WM_DefaultProc
    850          }
   \                     ??WaitingForSatellitesCallback_1:
   \   00000194   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000198   3080BDE8           POP      {R4,R5,PC}       ;; return
    851          

   \                                 In section .text, align 4, keep-with-next
    852          int HaveSatelliteReception(void)
    853          {
   \                     HaveSatelliteReception:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    854          	if ((GetValue(GPS_NUMSAT).uVal) < GPS_GOOD)
   \   00000008   1510A0E3           MOV      R1,#+21
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       GetValue
   \   00000014   00009DE5           LDR      R0,[SP, #+0]
    855          		return false;
    856          	else return true;
   \   00000018   0CD08DE2           ADD      SP,SP,#+12
   \   0000001C   040050E3           CMP      R0,#+4
   \   00000020   0000A033           MOVCC    R0,#+0
   \   00000024   0100A023           MOVCS    R0,#+1
   \   00000028   0080BDE8           POP      {PC}             ;; return
    857          }
    858          

   \                                 In section .text, align 4, keep-with-next
    859          void KillWaitingForSatelliteScreen(char foundSatellites)
    860          {
   \                     KillWaitingForSatelliteScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
    861          	if (typeSave == GO_RACING_TYPE)
   \   00000004   ........           LDR      R4,??DataTable46_36
   \   00000008   0D10D4E5           LDRB     R1,[R4, #+13]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0700001A           BNE      ??KillWaitingForSatelliteScreen_0
    862          	{
    863          		if (foundSatellites)
   \   00000014   000050E3           CMP      R0,#+0
    864          			raceModeState = RM_FOUND_SATELLITES;
    865          		else raceModeState = RM_CANCELLED_WFS;
   \   00000018   ........           LDR      R1,??DataTable46_1
   \   0000001C   0100A013           MOVNE    R0,#+1
   \   00000020   0200A003           MOVEQ    R0,#+2
   \   00000024   0000C1E5           STRB     R0,[R1, #+0]
    866          		GoRacingStateMachine(hWaitingForSatellites);
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   ........           B        GoRacingStateMachine  ;; tailcall
    867          	}
    868          	else
    869          	{
    870          		ResumeScreenScrolling();
   \                     ??KillWaitingForSatelliteScreen_0:
   \   00000034   ........           LDR      R0,??DataTable46_4
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
    871          		WM_DeleteWindow(hWaitingForSatellites);
   \   00000040   000094E5           LDR      R0,[R4, #+0]
   \   00000044   ........           BL       WM_DeleteWindow
    872          		SetScreenType(RACE_SETUP_SCREENS_TYPE);
   \   00000048   0500A0E3           MOV      R0,#+5
   \   0000004C   ........           BL       SetScreenType
    873          		SetWorkingTrackName();
   \   00000050   ........           BL       SetWorkingTrackName
    874          		FinishDisplayTrackSelection(parentSave);
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   ........           BL       FinishDisplayTrackSelection
    875          		GUI_Clear();
   \   0000005C   1040BDE8           POP      {R4,LR}
   \   00000060   ........           B        GUI_Clear        ;; tailcall
    876          	}
    877          }
    878          

   \                                 In section .bss, align 4
    879          static WM_HWIN hDragAutoXGauges;
   \                     hDragAutoXGauges:
   \   00000000                      DS8 4
    880          
    881          
    882          

   \                                 In section .text, align 4, keep-with-next
    883          WM_HWIN GetDragAutoXGaugesWindowHandle(void)
    884          {
    885          	return hDragAutoXGauges;
   \                     GetDragAutoXGaugesWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable46_41
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    886          }
    887          
    888          
    889          /*********************************************************************
    890          *
    891          */

   \                                 In section .text, align 4, keep-with-next
    892          void DragAutoXGauges(WM_HWIN hPrev)
    893          {
   \                     DragAutoXGauges:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    894          	enum SELECTED_GAUGE screen;
    895          
    896          	if (hPrev)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0000000A           BEQ      ??DragAutoXGauges_0
    897          		WM_DeleteWindow(hPrev);
   \   00000010   ........           BL       WM_DeleteWindow
    898          
    899          	SetScreenType(DRAG_AUTOX_GAUGE_SCREEN_TYPE);
   \                     ??DragAutoXGauges_0:
   \   00000014   1F00A0E3           MOV      R0,#+31
   \   00000018   ........           BL       SetScreenType
    900          
    901          	GUI_Clear();
   \   0000001C   ........           BL       GUI_Clear
    902          
    903          	if (selectedRaceMode == DRAG_MODE)
   \   00000020   ........           LDR      R1,??DataTable46_9
   \   00000024   ........           LDR      R0,??DataTable46_8
   \   00000028   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000002C   040051E3           CMP      R1,#+4
    904          		screen = (enum SELECTED_GAUGE)sysData.lastDragDisplay;
   \   00000030   D200D005           LDRBEQ   R0,[R0, #+210]
    905          	else screen = (enum SELECTED_GAUGE)sysData.lastAutoXDisplay;
   \   00000034   D400D015           LDRBNE   R0,[R0, #+212]
    906          
    907          	switch (screen)
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??DragAutoXGauges_1
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   0500000A           BEQ      ??DragAutoXGauges_2
   \   00000048   0200003A           BCC      ??DragAutoXGauges_3
   \   0000004C   060000EA           B        ??DragAutoXGauges_4
    908          	{
    909          	case SG_SWEEPTACH:
    910          		hDragAutoXGauges = Display_DAXRPMSweepScreen();
   \                     ??DragAutoXGauges_1:
   \   00000050   ........           BL       Display_DAXRPMSweepScreen
   \   00000054   020000EA           B        ??DragAutoXGauges_5
    911          		return;
    912          	case SG_ANALOG:
    913          		hDragAutoXGauges = Display_DAXGaugeScreen();
   \                     ??DragAutoXGauges_3:
   \   00000058   ........           BL       Display_DAXGaugeScreen
   \   0000005C   000000EA           B        ??DragAutoXGauges_5
    914          		return;
    915          	case SG_DIGITAL:
    916          		hDragAutoXGauges = Display_DAXDigitalGaugeScreen();
   \                     ??DragAutoXGauges_2:
   \   00000060   ........           BL       Display_DAXDigitalGaugeScreen
   \                     ??DragAutoXGauges_5:
   \   00000064   ........           LDR      R1,??DataTable46_41
   \   00000068   000081E5           STR      R0,[R1, #+0]
    917          		break;
   \                     ??DragAutoXGauges_4:
   \   0000006C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000070   0080BDE8           POP      {PC}             ;; return
    918          	}
    919          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   25660000           DC8      0x25, 0x66, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     pSFKeyboard

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   ........           DC32     SFScreensCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \   00000000   ........           DC32     trackData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     pSFKeyboard+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_1:
   \   00000000   ........           DC32     BannerRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     alteredTrackData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_1:
   \   00000000   008066C0           DC32     0xc0668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   008056C0           DC32     0xc0568000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   ........           DC32     popupCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     WaitingForCameraCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_1:
   \   00000000   ........           DC32     hWaitingForCamera

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     bmBlueButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_1:
   \   00000000   ........           DC32     raceModeState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_2:
   \   00000000   ........           DC32     bmWaitingForCamera

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_3:
   \   00000000   ........           DC32     bmleftarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_4:
   \   00000000   ........           DC32     screen_scrolling

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_5:
   \   00000000   ........           DC32     StageScreenCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_6:
   \   00000000   ........           DC32     hStageScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_7:
   \   00000000   ........           DC32     bmAutocrossTouchToStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_8:
   \   00000000   ........           DC32     sysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_9:
   \   00000000   ........           DC32     selectedRaceMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_10:
   \   00000000   ........           DC32     bmAutocrossStageBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_11:
   \   00000000   ........           DC32     bmDragStageBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_12:
   \   00000000   ........           DC32     bmDragTouchToStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_13:
   \   00000000   ........           DC32     bmOneQuarterOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_14:
   \   00000000   ........           DC32     bmOneThousandOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_15:
   \   00000000   ........           DC32     bmOneEighthOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_16:
   \   00000000   ........           DC32     bmOneEighthOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_17:
   \   00000000   ........           DC32     bmOneThousandOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_18:
   \   00000000   ........           DC32     bmOneQuarterOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_19:
   \   00000000   ........           DC32     bmDragSweepTachButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_20:
   \   00000000   ........           DC32     bmSweepTachButtonOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_21:
   \   00000000   ........           DC32     bmDragAnalogGaugeButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_22:
   \   00000000   ........           DC32     bmDigitalGaugeButtonOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_23:
   \   00000000   ........           DC32     bmAnalogGaugeButtonOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_24:
   \   00000000   ........           DC32     bmDragDigitalGaugeButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_25:
   \   00000000   ........           DC32     bmAutoXSweepTachButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_26:
   \   00000000   ........           DC32     bmAutoXAnalogGaugeButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_27:
   \   00000000   ........           DC32     bmAutoXDigitalGaugeButtonOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_28:
   \   00000000   ........           DC32     LaunchScreenCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_29:
   \   00000000   ........           DC32     hLaunchScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_30:
   \   00000000   ........           DC32     bmReadyToLaunchCorvette

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_31:
   \   00000000   ........           DC32     bmReadytoLaunchBurnout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_32:
   \   00000000   ........           DC32     unsavedSysData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_33:
   \   00000000   ........           DC32     TapAtSFScreenCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_34:
   \   00000000   ........           DC32     hTapAtSFScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_35:
   \   00000000   ........           DC32     bmTapScreenAtSF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_36:
   \   00000000   ........           DC32     hWaitingForSatellites

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_37:
   \   00000000   ........           DC32     WaitingForSatellitesCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_38:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_39:
   \   00000000   ........           DC32     bmGPSsignal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_40:
   \   00000000   ........           DC32     BannerRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_41:
   \   00000000   ........           DC32     hDragAutoXGauges

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter S/F Longitude">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 47, 70, 32
   \              532F4620    
   \   0000000A   4C6F6E676974       DC8 76, 111, 110, 103, 105, 116, 117, 100, 101, 0
   \              75646500    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter S/F Latitude">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 47, 70, 32
   \              532F4620    
   \   0000000A   4C6174697475       DC8 76, 97, 116, 105, 116, 117, 100, 101, 0, 0
   \              64650000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter S/F Heading">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 47, 70, 32
   \              532F4620    
   \   0000000A   48656164696E       DC8 72, 101, 97, 100, 105, 110, 103, 0, 0, 0
   \              67000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Start Line Long...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 116, 97, 114
   \              53746172    
   \   0000000A   74204C696E65       DC8 116, 32, 76, 105, 110, 101, 32, 76, 111, 110
   \              204C6F6E    
   \   00000014   676974756465       DC8 103, 105, 116, 117, 100, 101, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Start Line Lati...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 116, 97, 114
   \              53746172    
   \   0000000A   74204C696E65       DC8 116, 32, 76, 105, 110, 101, 32, 76, 97, 116
   \              204C6174    
   \   00000014   697475646500       DC8 105, 116, 117, 100, 101, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Start Line Heading">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 83, 116, 97, 114
   \              53746172    
   \   0000000A   74204C696E65       DC8 116, 32, 76, 105, 110, 101, 32, 72, 101, 97
   \              20486561    
   \   00000014   64696E670000       DC8 100, 105, 110, 103, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Finish Line Lon...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 70, 105, 110, 105
   \              46696E69    
   \   0000000A   7368204C696E       DC8 115, 104, 32, 76, 105, 110, 101, 32, 76, 111
   \              65204C6F    
   \   00000014   6E6769747564       DC8 110, 103, 105, 116, 117, 100, 101, 0
   \              6500        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Finish Line Lat...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 70, 105, 110, 105
   \              46696E69    
   \   0000000A   7368204C696E       DC8 115, 104, 32, 76, 105, 110, 101, 32, 76, 97
   \              65204C61    
   \   00000014   746974756465       DC8 116, 105, 116, 117, 100, 101, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enter Finish Line Hea...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   456E74657220       DC8 69, 110, 116, 101, 114, 32, 70, 105, 110, 105
   \              46696E69    
   \   0000000A   7368204C696E       DC8 115, 104, 32, 76, 105, 110, 101, 32, 72, 101
   \              65204865    
   \   00000014   6164696E6700       DC8 97, 100, 105, 110, 103, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Run Without">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   52756E205769       DC8 82, 117, 110, 32, 87, 105, 116, 104, 111, 117
   \              74686F75    
   \   0000000A   7400               DC8 116, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Cancel">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   43616E63656C       DC8 67, 97, 110, 99, 101, 108, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Settings Error">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   53657474696E       DC8 83, 101, 116, 116, 105, 110, 103, 115, 32, 69
   \              67732045    
   \   0000000A   72726F720000       DC8 114, 114, 111, 114, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "The values you entere...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   546865207661       DC8 84, 104, 101, 32, 118, 97, 108, 117, 101, 115
   \              6C756573    
   \   0000000A   20796F752065       DC8 32, 121, 111, 117, 32, 101, 110, 116, 101, 114
   \              6E746572    
   \   00000014   656420617265       DC8 101, 100, 32, 97, 114, 101, 32, 110, 111, 116
   \              206E6F74    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Waiting for">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   57616974696E       DC8 87, 97, 105, 116, 105, 110, 103, 32, 102, 111
   \              6720666F    
   \   0000000A   7200               DC8 114, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "satellite signal">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   736174656C6C       DC8 115, 97, 116, 101, 108, 108, 105, 116, 101, 32
   \              69746520    
   \   0000000A   7369676E616C       DC8 115, 105, 103, 110, 97, 108, 0, 0, 0, 0
   \              00000000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "valid start/finish co...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   76616C696420       DC8 118, 97, 108, 105, 100, 32, 115, 116, 97, 114
   \              73746172    
   \   0000000A   742F66696E69       DC8 116, 47, 102, 105, 110, 105, 115, 104, 32, 99
   \              73682063    
   \   00000014   6F6F7264696E       DC8 111, 111, 114, 100, 105, 110, 97, 116, 101, 115
   \              61746573    
   \   0000001E   2E00               DC8 46, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Would you like to aut...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   576F756C6420       DC8 87, 111, 117, 108, 100, 32, 121, 111, 117, 32
   \              796F7520    
   \   0000000A   6C696B652074       DC8 108, 105, 107, 101, 32, 116, 111, 32, 97, 117
   \              6F206175    
   \   00000014   746F2D666978       DC8 116, 111, 45, 102, 105, 120, 32, 111, 114, 32
   \              206F7220    
   \   0000001E   676F20626163       DC8 103, 111, 32, 98, 97, 99, 107, 63, 0, 0
   \              6B3F0000    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Auto-fix">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4175746F2D66       DC8 65, 117, 116, 111, 45, 102, 105, 120, 0, 0
   \              69780000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Go Back">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   476F20426163       DC8 71, 111, 32, 66, 97, 99, 107, 0
   \              6B00        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%f">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   25660000           DC8 37, 102, 0, 0
    920          
    921          
    922          
    923          /*************************** End of file ****************************/
    924          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     DeleteSFScreensKeyboards            8
     DisplayAutoXStageScreen            24
     DisplayDragStageScreen             24
     DisplayLaunchScreen                24
     DisplaySFKeyboard                  40
     DisplayTapAtSFScreen               24
     DisplayWaitingForCameraScreen      32
     DisplayWaitingForSatellites        32
     DragAutoXGauges                     8
     GetDragAutoXGaugesWindowHandle      0
     GetLaunchScreenWindowHandle         0
     GetSFWindowHandle                   0
     GetStageWindowHandle                0
     HaveSatelliteReception             16
     InvalidSFDataPopUp                 16
     KillWaitingForSatelliteScreen       8
     LaunchDetected                      0
     LaunchScreenCallback                8
     SFScreensCallback                   8
     SFScreensIgnoreNextKeyRelease       0
     SFScreensSaveData                  16
     SetDistanceButtonGraphics          16
     SetGaugeButtonGraphics             16
     StageScreenCallback                 8
     TapAtSFScreenCallback               8
     ValidateSFCoordinates              24
     WaitingForCameraCallback           24
     WaitingForSatellitesCallback       24


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     hWaitingForCamera                        12
     hWaitForCameraTimer
     totalWaitForCameraTime
     hSFScreens                                4
     hTapAtSFScreen                            4
     DisplaySFKeyboard                       512
     SFScreensSaveData                       304
     SFScreensCallback                       268
     SFScreensIgnoreNextKeyRelease             4
     DeleteSFScreensKeyboards                 36
     ValidateSFCoordinates                   612
     InvalidSFResources                      144
     InvalidSFDataPopUp                       64
     DisplayWaitingForCameraScreen           240
     WaitingForCameraCallback                292
     DisplayAutoXStageScreen                 372
     StageScreenCallback                     300
     DisplayDragStageScreen                  556
     SetDistanceButtonGraphics               152
     SetGaugeButtonGraphics                  204
     DisplayLaunchScreen                     140
     LaunchScreenCallback                    188
     LaunchDetected                           40
     DisplayTapAtSFScreen                    184
     GetSFWindowHandle                        12
     GetLaunchScreenWindowHandle              12
     GetStageWindowHandle                     12
     TapAtSFScreenCallback                   116
     hWaitingForSatellites                    14
     hWaitForSatelliteTimer
     parentSave
     raceMode
     typeSave
     hStageScreen                             32
     hSweepTachButton
     hAnalogGaugeButton
     hDigitalGaugeButton
     hStageButton
     h1_8thMile
     h1000ft
     h1_4Mile
     hLaunchScreen                             8
     hWaitForLaunchTimer
     pSFKeyboard                              28
     hSFScreen
     WorkString
     DisplayWaitingForSatellites             268
     WaitingForSatellitesCallback            412
     HaveSatelliteReception                   44
     KillWaitingForSatelliteScreen           100
     hDragAutoXGauges                          4
     GetDragAutoXGaugesWindowHandle           12
     DragAutoXGauges                         116
     ??DataTable24                             4
     ??DataTable32                             4
     ??DataTable32_1                           4
     ??DataTable32_2                           4
     ??DataTable34                             4
     ??DataTable40                             4
     ??DataTable40_1                           4
     ??DataTable41                             4
     ??DataTable41_1                           4
     ??DataTable42                             4
     ??DataTable42_1                           4
     ??DataTable43                             4
     ??DataTable43_1                           4
     ??DataTable46                             4
     ??DataTable46_1                           4
     ??DataTable46_2                           4
     ??DataTable46_3                           4
     ??DataTable46_4                           4
     ??DataTable46_5                           4
     ??DataTable46_6                           4
     ??DataTable46_7                           4
     ??DataTable46_8                           4
     ??DataTable46_9                           4
     ??DataTable46_10                          4
     ??DataTable46_11                          4
     ??DataTable46_12                          4
     ??DataTable46_13                          4
     ??DataTable46_14                          4
     ??DataTable46_15                          4
     ??DataTable46_16                          4
     ??DataTable46_17                          4
     ??DataTable46_18                          4
     ??DataTable46_19                          4
     ??DataTable46_20                          4
     ??DataTable46_21                          4
     ??DataTable46_22                          4
     ??DataTable46_23                          4
     ??DataTable46_24                          4
     ??DataTable46_25                          4
     ??DataTable46_26                          4
     ??DataTable46_27                          4
     ??DataTable46_28                          4
     ??DataTable46_29                          4
     ??DataTable46_30                          4
     ??DataTable46_31                          4
     ??DataTable46_32                          4
     ??DataTable46_33                          4
     ??DataTable46_34                          4
     ??DataTable46_35                          4
     ??DataTable46_36                          4
     ??DataTable46_37                          4
     ??DataTable46_38                          4
     ??DataTable46_39                          4
     ??DataTable46_40                          4
     ??DataTable46_41                          4
     ?<Constant "Enter S/F Longitude">        20
     ?<Constant "Enter S/F Latitude">         20
     ?<Constant "Enter S/F Heading">          20
     ?<Constant "Enter Start Line Long...">   28
     ?<Constant "Enter Start Line Lati...">   28
     ?<Constant "Enter Start Line Heading">   28
     ?<Constant "Enter Finish Line Lon...">   28
     ?<Constant "Enter Finish Line Lat...">   28
     ?<Constant "Enter Finish Line Hea...">   28
     ?<Constant "Run Without">                12
     ?<Constant "Cancel">                      8
     ?<Constant "Settings Error">             16
     ?<Constant "The values you entere...">   32
     ?<Constant "Waiting for">                12
     ?<Constant "satellite signal">           20
     ?<Constant "valid start/finish co...">   32
     ?<Constant "Would you like to aut...">   40
     ?<Constant "Auto-fix">                   12
     ?<Constant "Go Back">                     8
     ?<Constant "%f">                          4

 
   106 bytes in section .bss
   144 bytes in section .rodata
 6 216 bytes in section .text
 
 6 216 bytes of CODE  memory
   144 bytes of CONST memory
   106 bytes of DATA  memory

Errors: none
Warnings: none
