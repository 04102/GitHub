###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\CHECKBOX_Skin.c                     #
#    Command line =  C:\DUII\TargetHW\GUI\CHECKBOX_Skin.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\CHECKBOX_Skin.lst          #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\CHECKBOX_Skin.o             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\CHECKBOX_Skin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : CHECKBOX_Skin.c
     19          Purpose     : Implementation of framewindow widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "CHECKBOX_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(CHECKBOX_Handle hObj) {
   \                     _Paint:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0090A0E1           MOV      R9,R0
     40            CHECKBOX_Obj * pObj;
     41            WIDGET_DRAW_ITEM_FUNC * pfDrawSkin;
     42            WIDGET_ITEM_DRAW_INFO ItemInfo;
     43            int xSize, ySize, CurrentState;
     44            U16 State;
     45            WM_HMEM hText;
     46          
     47            //
     48            // Get properties
     49            //
     50            pObj = CHECKBOX_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
     51            pfDrawSkin = pObj->Props.SkinPrivate.pfDrawSkin;
   \   00000010   504090E5           LDR      R4,[R0, #+80]
     52            CurrentState = pObj->CurrentState;
   \   00000014   7550D0E5           LDRB     R5,[R0, #+117]
     53            hText = pObj->hpText;
   \   00000018   786090E5           LDR      R6,[R0, #+120]
     54            State = pObj->Widget.State;
   \   0000001C   B273D0E1           LDRH     R7,[R0, #+50]
     55            GUI_UNLOCK_H(pObj);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
     56            //
     57            // Get size
     58            //
     59            xSize = WM_GetWindowSizeX(hObj);
   \   00000024   0900A0E1           MOV      R0,R9
   \   00000028   ........           BL       WM_GetWindowSizeX
   \   0000002C   0080A0E1           MOV      R8,R0
     60            ySize = WM_GetWindowSizeY(hObj);
   \   00000030   0900A0E1           MOV      R0,R9
   \   00000034   ........           BL       WM_GetWindowSizeY
     61            //
     62            // Fill item info structure
     63            //
     64            ItemInfo.hWin = hObj;
   \   00000038   00908DE5           STR      R9,[SP, #+0]
     65            ItemInfo.x0 = ItemInfo.y0 = 0;
     66            ItemInfo.x1 = xSize - 1;
     67            ItemInfo.y1 = ySize - 1;
   \   0000003C   010040E2           SUB      R0,R0,#+1
   \   00000040   0090A0E3           MOV      R9,#+0
   \   00000044   012048E2           SUB      R2,R8,#+1
   \   00000048   18008DE5           STR      R0,[SP, #+24]
     68            //
     69            // Draw background
     70            //
     71            ItemInfo.Cmd = WIDGET_ITEM_DRAW_BUTTON;
   \   0000004C   0510A0E3           MOV      R1,#+5
   \   00000050   10908DE5           STR      R9,[SP, #+16]
   \   00000054   0C908DE5           STR      R9,[SP, #+12]
   \   00000058   14208DE5           STR      R2,[SP, #+20]
   \   0000005C   04108DE5           STR      R1,[SP, #+4]
     72            pfDrawSkin(&ItemInfo);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   34FF2FE1           BLX      R4
     73            //
     74            // Draw bitmap
     75            //
     76            if (CurrentState) {
   \   00000068   000055E3           CMP      R5,#+0
   \   0000006C   0400000A           BEQ      ??_Paint_0
     77              ItemInfo.Cmd = WIDGET_ITEM_DRAW_BITMAP;
   \   00000070   0410A0E3           MOV      R1,#+4
   \   00000074   04108DE5           STR      R1,[SP, #+4]
     78              ItemInfo.ItemIndex = CurrentState;
   \   00000078   08508DE5           STR      R5,[SP, #+8]
     79              pfDrawSkin(&ItemInfo);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   34FF2FE1           BLX      R4
     80            }
     81            //
     82            // Draw text
     83            //
     84            if (hText) {
   \                     ??_Paint_0:
   \   00000084   000056E3           CMP      R6,#+0
   \   00000088   0800000A           BEQ      ??_Paint_1
     85              ItemInfo.Cmd = WIDGET_ITEM_DRAW_TEXT;
   \   0000008C   1010A0E3           MOV      R1,#+16
   \   00000090   04108DE5           STR      R1,[SP, #+4]
     86              ItemInfo.p = GUI_LOCK_H(hText);
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           BL       GUI_ALLOC_LockH
   \   0000009C   1C008DE5           STR      R0,[SP, #+28]
     87              pfDrawSkin(&ItemInfo);
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   34FF2FE1           BLX      R4
     88              GUI_UNLOCK_H(ItemInfo.p);
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
   \   000000AC   1C908DE5           STR      R9,[SP, #+28]
     89            }
     90            //
     91            // Draw focus frame
     92            //
     93            if ((State & WIDGET_STATE_FOCUS) && (hText)) {
   \                     ??_Paint_1:
   \   000000B0   010017E3           TST      R7,#0x1
   \   000000B4   00005613           CMPNE    R6,#+0
   \   000000B8   0700000A           BEQ      ??_Paint_2
     94              ItemInfo.Cmd = WIDGET_ITEM_DRAW_FOCUS;
   \   000000BC   0810A0E3           MOV      R1,#+8
   \   000000C0   04108DE5           STR      R1,[SP, #+4]
     95              ItemInfo.p = GUI_LOCK_H(hText);
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   1C008DE5           STR      R0,[SP, #+28]
     96              pfDrawSkin(&ItemInfo);
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   34FF2FE1           BLX      R4
     97              GUI_UNLOCK_H(ItemInfo.p);
   \   000000D8   ........           BL       GUI_ALLOC_UnlockH
     98            }
     99          }
   \                     ??_Paint_2:
   \   000000DC   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000000E0   F083BDE8           POP      {R4-R9,PC}       ;; return
    100          
    101          /*********************************************************************
    102          *
    103          *       _Create
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          static void _Create(CHECKBOX_Handle hObj) {
   \                     _Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    106            CHECKBOX_Obj * pObj;
    107            CHECKBOX_SKIN_PRIVATE * pSkinPrivate;
    108            WIDGET_ITEM_DRAW_INFO ItemInfo;
    109          
    110            //
    111            // Get properties
    112            //
    113            pObj = CHECKBOX_LOCK_H(hObj);
    114            pSkinPrivate = (CHECKBOX_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate;
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   700090E5           LDR      R0,[R0, #+112]
   \   00000014   085090E5           LDR      R5,[R0, #+8]
    115            GUI_UNLOCK_H(pObj);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    116            //
    117            // Create
    118            //
    119            ItemInfo.Cmd = WIDGET_ITEM_CREATE;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04108DE5           STR      R1,[SP, #+4]
    120            ItemInfo.hWin = hObj;
   \   00000024   00408DE5           STR      R4,[SP, #+0]
    121            pSkinPrivate->pfDrawSkin(&ItemInfo);
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   041095E5           LDR      R1,[R5, #+4]
   \   00000030   31FF2FE1           BLX      R1
    122          }
   \   00000034   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    123          
    124          /*********************************************************************
    125          *
    126          *        Private data
    127          *
    128          **********************************************************************
    129          */
    130          /*********************************************************************
    131          *
    132          *       _Skin
    133          */

   \                                 In section .data, align 4
    134          static WIDGET_SKIN _Skin = {
   \                     _Skin:
   \   00000000   ............       DC32 _Paint, _Create, CHECKBOX__DefaultProps + 18H
   \              ............
    135            _Paint,
    136            _Create,
    137            &CHECKBOX__DefaultProps.SkinPrivate
    138          };
    139          
    140          /*********************************************************************
    141          *
    142          *        Public code
    143          *
    144          **********************************************************************
    145          */
    146          /*********************************************************************
    147          *
    148          *       CHECKBOX_SetSkin
    149          */

   \                                 In section .text, align 4, keep-with-next
    150          void CHECKBOX_SetSkin(CHECKBOX_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
   \                     CHECKBOX_SetSkin:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    151            CHECKBOX_Obj * pObj;
    152          
    153            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    154            pObj = CHECKBOX_LOCK_H(hObj);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
    155            //
    156            // Enable skinning
    157            //
    158            pObj->pWidgetSkin = &_Skin;
   \   0000001C   ........           LDR      R1,??DataTable1
   \   00000020   701080E5           STR      R1,[R0, #+112]
    159            //
    160            // Set private callback function
    161            //
    162            pObj->Props.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   00000024   505080E5           STR      R5,[R0, #+80]
    163            GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    164            //
    165            // Invalidate widget
    166            //
    167            WM_SetHasTrans(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_SetHasTrans
    168            WM_InvalidateWindow(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
    169            WM_UNLOCK();
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3040BDE8           POP      {R4,R5,LR}
   \   00000044   ........           B        GUI_Unlock       ;; tailcall
    170          }
    171          
    172          /*********************************************************************
    173          *
    174          *       CHECKBOX_SetDefaultSkin
    175          */

   \                                 In section .text, align 4, keep-with-next
    176          void CHECKBOX_SetDefaultSkin(WIDGET_DRAW_ITEM_FUNC * pfDrawSkin) {
    177            CHECKBOX__pSkinDefault = &_Skin;
   \                     CHECKBOX_SetDefaultSkin:
   \   00000000   ........           LDR      R1,??DataTable1_1
   \   00000004   ........           LDR      R2,??DataTable1
   \   00000008   002081E5           STR      R2,[R1, #+0]
    178            CHECKBOX__DefaultProps.SkinPrivate.pfDrawSkin = pfDrawSkin;
   \   0000000C   ........           LDR      R1,??DataTable1_2
   \   00000010   1C0081E5           STR      R0,[R1, #+28]
    179          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _Skin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     CHECKBOX__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     CHECKBOX__DefaultProps
    180          
    181          #else
    182            void CHECKBOX_Skin_C(void);
    183            void CHECKBOX_Skin_C(void) {} /* avoid empty object files */
    184          #endif /* GUI_WINSUPPORT */
    185          
    186          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     CHECKBOX_SetDefaultSkin      0
     CHECKBOX_SetSkin            16
     _Create                     48
     _Paint                      64


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _Paint                   228
     _Create                   60
     _Skin                     12
     CHECKBOX_SetSkin          72
     CHECKBOX_SetDefaultSkin   24
     ??DataTable1               4
     ??DataTable1_1             4
     ??DataTable1_2             4

 
  12 bytes in section .data
 396 bytes in section .text
 
 396 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
