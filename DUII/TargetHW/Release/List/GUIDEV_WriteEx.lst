###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_WriteEx.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_WriteEx.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDEV_WriteEx.lst         #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDEV_WriteEx.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_WriteEx.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_WriteEx.C
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /* Memory device capabilities are compiled only if support for them is enabled.*/ 
     28          #if GUI_SUPPORT_MEMDEV
     29          
     30          /*********************************************************************
     31          *
     32          *       static code
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       _GetPixelIndex
     39          *
     40          */
     41          static int _GetPixelIndex(const U8 * pData, int x, int y, int bpp, int BytesPerLine) {
     42            switch (bpp) {
     43            case 8:
     44              return (int)(*(pData + (y * BytesPerLine) + x));
     45            case 16:
     46              return (int)(*(const U16 *)(pData + (y * BytesPerLine) + (x << 1)));
     47            case 32:
     48              return (int)(*(const U32 *)(pData + (y * BytesPerLine) + (x << 2)));
     49            default:
     50              return 0;
     51            }
     52          }
     53          
     54          /*********************************************************************
     55          *
     56          *       _DrawHLineAlpha
     57          */

   \                                 In section .text, align 4, keep-with-next
     58          static void _DrawHLineAlpha(int x0, int y, int x1, int Intens) {
   \                     _DrawHLineAlpha:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0070A0E1           MOV      R7,R0
     59            GUI_MEMDEV * pDev;
     60            GUI_USAGE_h hUsage; 
     61            LCD_COLOR Color1, Color2;
     62            int Len;
     63            LCD_PIXELINDEX ColorIndex;
     64            
     65            pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
   \   00000008   ........           LDR      R0,??DataTable4
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0180A0E1           MOV      R8,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0340A0E1           MOV      R4,R3
   \   0000001C   880090E5           LDR      R0,[R0, #+136]
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   0090A0E1           MOV      R9,R0
     66            hUsage = pDev->hUsage; 
     67            Len    = x1 - x0 + 1;
   \   00000028   070045E0           SUB      R0,R5,R7
   \   0000002C   015080E2           ADD      R5,R0,#+1
     68            ColorIndex = LCD__GetColorIndex();
   \   00000030   ........           LDR      R0,??DataTable4_1
   \   00000034   146099E5           LDR      R6,[R9, #+20]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
     69            if (hUsage) {
   \   0000003C   000056E3           CMP      R6,#+0
   \   00000040   00A090E5           LDR      R10,[R0, #+0]
   \   00000044   0C00000A           BEQ      ??_DrawHLineAlpha_0
     70              GUI_USAGE_AddHLine(GUI_USAGE_H2P(hUsage), x0, y, Len);
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   00B0A0E1           MOV      R11,R0
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       GUI_ALLOC_h2p
   \   0000005C   00C0A0E1           MOV      R12,R0
   \   00000060   08C09CE5           LDR      R12,[R12, #+8]
   \   00000064   0530A0E1           MOV      R3,R5
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0B00A0E1           MOV      R0,R11
   \   00000074   04C09CE5           LDR      R12,[R12, #+4]
   \   00000078   3CFF2FE1           BLX      R12
     71            }
     72            Color1 = LCD_Index2Color(ColorIndex);
   \                     ??_DrawHLineAlpha_0:
   \   0000007C   0A00A0E1           MOV      R0,R10
   \   00000080   ........           BL       LCD_Index2Color
   \   00000084   0060A0E1           MOV      R6,R0
     73            switch (pDev->BitsPerPixel) {
   \   00000088   100099E5           LDR      R0,[R9, #+16]
   \   0000008C   080050E2           SUBS     R0,R0,#+8
   \   00000090   0400000A           BEQ      ??_DrawHLineAlpha_1
   \   00000094   080050E2           SUBS     R0,R0,#+8
   \   00000098   1100000A           BEQ      ??_DrawHLineAlpha_2
   \   0000009C   100050E2           SUBS     R0,R0,#+16
   \   000000A0   1E00000A           BEQ      ??_DrawHLineAlpha_3
   \   000000A4   2B0000EA           B        ??_DrawHLineAlpha_4
     74            case 8: {
     75                U8 * pData;
     76                pData  = (U8 *) GUI_MEMDEV__XY2PTR(x0, y);
   \                     ??_DrawHLineAlpha_1:
   \   000000A8   0810A0E1           MOV      R1,R8
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           BL       GUI_MEMDEV__XY2PTR
   \   000000B4   0070A0E1           MOV      R7,R0
     77                do {
     78                  Color2 = LCD_Index2Color(*(pData));
   \                     ??_DrawHLineAlpha_5:
   \   000000B8   0000D7E5           LDRB     R0,[R7, #+0]
   \   000000BC   ........           BL       LCD_Index2Color
     79                  Color2 = LCD_MixColors256(Color1, Color2, Intens);
   \   000000C0   0010A0E1           MOV      R1,R0
   \   000000C4   0420A0E1           MOV      R2,R4
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   ........           BL       LCD_MixColors256
     80                  *(pData++) = LCD_Color2Index(Color2);
   \   000000D0   ........           BL       LCD_Color2Index
   \   000000D4   0100C7E4           STRB     R0,[R7], #+1
     81                } while (--Len);
   \   000000D8   015055E2           SUBS     R5,R5,#+1
   \   000000DC   F5FFFF1A           BNE      ??_DrawHLineAlpha_5
   \   000000E0   1C0000EA           B        ??_DrawHLineAlpha_4
     82              }
     83              break;
     84            case 16: {
     85                U16 * pData;
     86                pData  = (U16 *) GUI_MEMDEV__XY2PTR(x0, y);
   \                     ??_DrawHLineAlpha_2:
   \   000000E4   0810A0E1           MOV      R1,R8
   \   000000E8   0700A0E1           MOV      R0,R7
   \   000000EC   ........           BL       GUI_MEMDEV__XY2PTR
   \   000000F0   0070A0E1           MOV      R7,R0
     87                do {
     88                  Color2 = LCD_Index2Color(*(pData));
   \                     ??_DrawHLineAlpha_6:
   \   000000F4   B000D7E1           LDRH     R0,[R7, #+0]
   \   000000F8   ........           BL       LCD_Index2Color
     89                  Color2 = LCD_MixColors256(Color1, Color2, Intens);
   \   000000FC   0010A0E1           MOV      R1,R0
   \   00000100   0420A0E1           MOV      R2,R4
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           BL       LCD_MixColors256
     90                  *(pData++) = LCD_Color2Index(Color2);
   \   0000010C   ........           BL       LCD_Color2Index
   \   00000110   B200C7E0           STRH     R0,[R7], #+2
     91                } while (--Len);
   \   00000114   015055E2           SUBS     R5,R5,#+1
   \   00000118   F5FFFF1A           BNE      ??_DrawHLineAlpha_6
   \   0000011C   0D0000EA           B        ??_DrawHLineAlpha_4
     92              }
     93              break;
     94            case 32: {
     95                U32 * pData;
     96                pData  = (U32 *) GUI_MEMDEV__XY2PTR(x0, y);
   \                     ??_DrawHLineAlpha_3:
   \   00000120   0810A0E1           MOV      R1,R8
   \   00000124   0700A0E1           MOV      R0,R7
   \   00000128   ........           BL       GUI_MEMDEV__XY2PTR
   \   0000012C   0070A0E1           MOV      R7,R0
     97                do {
     98                  Color2 = LCD_Index2Color(*(pData));
   \                     ??_DrawHLineAlpha_7:
   \   00000130   000097E5           LDR      R0,[R7, #+0]
   \   00000134   ........           BL       LCD_Index2Color
   \   00000138   0010A0E1           MOV      R1,R0
     99                  Color2 = LCD_MixColors256(Color1, Color2, Intens);
   \   0000013C   0420A0E1           MOV      R2,R4
   \   00000140   0600A0E1           MOV      R0,R6
   \   00000144   ........           BL       LCD_MixColors256
    100                  *(pData++) = LCD_Color2Index(Color2);
   \   00000148   ........           BL       LCD_Color2Index
   \   0000014C   040087E4           STR      R0,[R7], #+4
    101                } while (--Len);
   \   00000150   015055E2           SUBS     R5,R5,#+1
   \   00000154   F5FFFF1A           BNE      ??_DrawHLineAlpha_7
    102              }
    103              break;
    104            }
    105          }
   \                     ??_DrawHLineAlpha_4:
   \   00000158   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000015C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    106          
    107          /*********************************************************************
    108          *
    109          *       _DrawBitmapLineEx
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          static void _DrawBitmapLineEx(int x0, int y0, int xOff, int yOff, int xSize, int xMag, int Alpha,
    112                                        int bpp, int BytesPerLine, const U8 * pData) {
   \                     _DrawBitmapLineEx:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    113            int x, xi, xAct, xStart, xMagAbs, xiMag, xMin, xMax, Cached;
    114            LCD_PIXELINDEX Index = 0, IndexPrev = 0;
   \   00000008   ........           LDR      R1,??DataTable4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   F810D1E1           LDRSH    R1,[R1, #+8]
   \   00000014   14D04DE2           SUB      SP,SP,#+20
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   041041E0           SUB      R1,R1,R4
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    115            GUI_DEVICE * pDevice;
    116          
    117            //
    118            // Use clipping rect
    119            //
    120            xMin = GUI_Context.ClipRect.x0 - x0;
    121            xMax = GUI_Context.ClipRect.x1 - x0;
   \   00000024   ........           LDR      R1,??DataTable4
   \   00000028   04008DE5           STR      R0,[SP, #+4]
   \   0000002C   FC10D1E1           LDRSH    R1,[R1, #+12]
   \   00000030   50209DE5           LDR      R2,[SP, #+80]
   \   00000034   54309DE5           LDR      R3,[SP, #+84]
   \   00000038   041041E0           SUB      R1,R1,R4
   \   0000003C   10108DE5           STR      R1,[SP, #+16]
    122            //
    123            // Init some values
    124            //
    125            xMagAbs =  (xMag > 0) ? xMag : -xMag;
   \   00000040   44109DE5           LDR      R1,[SP, #+68]
    126            x       =  (xOff * xMagAbs) / 1000;
    127            xiMag   =  (xOff * xMagAbs) % 1000;
    128            xStart  = -1;
   \   00000044   00B0E0E1           MVN      R11,R0
   \   00000048   000051E3           CMP      R1,#+0
   \   0000004C   00106142           RSBMI    R1,R1,#+0
   \   00000050   0C108DE5           STR      R1,[SP, #+12]
   \   00000054   14109DE5           LDR      R1,[SP, #+20]
   \   00000058   0CC09DE5           LDR      R12,[SP, #+12]
    129            Cached  =  0;
    130            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
    131            for (xi = 0; xi < xSize; xi++) {
   \   0000005C   0080A0E3           MOV      R8,#+0
   \   00000060   9C0101E0           MUL      R1,R12,R1
   \   00000064   ........           LDR      R12,??DataTable4_2  ;; 0x10624dd3
   \   00000068   91ECCCE0           SMULL    LR,R12,R1,R12
   \   0000006C   4C63B0E1           ASRS     R6,R12,#+6
   \   00000070   01608642           ADDMI    R6,R6,#+1
   \   00000074   FACFA0E3           MOV      R12,#+1000
   \   00000078   9C060EE0           MUL      LR,R12,R6
   \   0000007C   ........           LDR      R12,??DataTable4
   \   00000080   0E7041E0           SUB      R7,R1,LR
   \   00000084   11C0DCE5           LDRB     R12,[R12, #+17]
   \   00000088   ........           LDR      LR,??DataTable4
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   0CC18EE0           ADD      R12,LR,R12, LSL #+2
   \   00000094   48A09CE5           LDR      R10,[R12, #+72]
   \   00000098   40C09DE5           LDR      R12,[SP, #+64]
   \   0000009C   01005CE3           CMP      R12,#+1
   \   000000A0   740000BA           BLT      ??_DrawBitmapLineEx_0
   \   000000A4   40C09DE5           LDR      R12,[SP, #+64]
   \   000000A8   01904CE2           SUB      R9,R12,#+1
   \   000000AC   18C09DE5           LDR      R12,[SP, #+24]
   \   000000B0   923C23E0           MLA      R3,R2,R12,R3
   \   000000B4   08308DE5           STR      R3,[SP, #+8]
    132              xiMag += xMagAbs;
   \                     ??_DrawBitmapLineEx_1:
   \   000000B8   0C209DE5           LDR      R2,[SP, #+12]
   \   000000BC   077082E0           ADD      R7,R2,R7
    133              if (xiMag >= 1000) {  
   \   000000C0   FA0F57E3           CMP      R7,#+1000
   \   000000C4   450000BA           BLT      ??_DrawBitmapLineEx_2
    134                if (x <= xMax) {
   \   000000C8   10209DE5           LDR      R2,[SP, #+16]
   \   000000CC   060052E1           CMP      R2,R6
   \   000000D0   600000BA           BLT      ??_DrawBitmapLineEx_3
    135                  xAct  = (xMag > 0) ? xi : xSize - xi - 1;
   \   000000D4   44209DE5           LDR      R2,[SP, #+68]
    136                  Index = _GetPixelIndex(pData, xOff + xAct, yOff, bpp, BytesPerLine);
   \   000000D8   14309DE5           LDR      R3,[SP, #+20]
   \   000000DC   010052E3           CMP      R2,#+1
   \   000000E0   0820A0A1           MOVGE    R2,R8
   \   000000E4   0920A0B1           MOVLT    R2,R9
   \   000000E8   032082E0           ADD      R2,R2,R3
   \   000000EC   4C309DE5           LDR      R3,[SP, #+76]
   \   000000F0   083053E2           SUBS     R3,R3,#+8
   \   000000F4   0A00000A           BEQ      ??_DrawBitmapLineEx_4
   \   000000F8   083053E2           SUBS     R3,R3,#+8
   \   000000FC   0400000A           BEQ      ??_DrawBitmapLineEx_5
   \   00000100   103053E2           SUBS     R3,R3,#+16
   \   00000104   08309D05           LDREQ    R3,[SP, #+8]
   \   00000108   0020A013           MOVNE    R2,#+0
   \   0000010C   02219307           LDREQ    R2,[R3, +R2, LSL #+2]
   \   00000110   050000EA           B        ??_DrawBitmapLineEx_6
   \                     ??_DrawBitmapLineEx_5:
   \   00000114   08309DE5           LDR      R3,[SP, #+8]
   \   00000118   822083E0           ADD      R2,R3,R2, LSL #+1
   \   0000011C   B020D2E1           LDRH     R2,[R2, #+0]
   \   00000120   010000EA           B        ??_DrawBitmapLineEx_6
   \                     ??_DrawBitmapLineEx_4:
   \   00000124   08309DE5           LDR      R3,[SP, #+8]
   \   00000128   0320D2E7           LDRB     R2,[R2, +R3]
   \                     ??_DrawBitmapLineEx_6:
   \   0000012C   04208DE5           STR      R2,[SP, #+4]
    137                  if ((Index != IndexPrev) || (xStart == -1)) {
   \   00000130   000052E1           CMP      R2,R0
   \   00000134   0200001A           BNE      ??_DrawBitmapLineEx_7
   \   00000138   01007BE3           CMN      R11,#+1
   \   0000013C   2100001A           BNE      ??_DrawBitmapLineEx_8
   \   00000140   1D0000EA           B        ??_DrawBitmapLineEx_9
    138                    if ((xStart != -1) && (x > xMin)) {
   \                     ??_DrawBitmapLineEx_7:
   \   00000144   01007BE3           CMN      R11,#+1
   \   00000148   1B00000A           BEQ      ??_DrawBitmapLineEx_9
   \   0000014C   00109DE5           LDR      R1,[SP, #+0]
   \   00000150   060051E1           CMP      R1,R6
   \   00000154   180000AA           BGE      ??_DrawBitmapLineEx_9
    139                      //
    140                      // Clear cache
    141                      //
    142                      if (xStart < xMin) {
   \   00000158   01005BE1           CMP      R11,R1
   \   0000015C   01B0A0B1           MOVLT    R11,R1
    143                        xStart = xMin;
    144                      }
    145                      LCD_SetColorIndex(IndexPrev);
   \   00000160   ........           BL       LCD_SetColorIndex
    146                      if (Alpha == 256 || !GUI_Context.hDevData) {
   \   00000164   48009DE5           LDR      R0,[SP, #+72]
   \   00000168   400F50E3           CMP      R0,#+256
   \   0000016C   0300000A           BEQ      ??_DrawBitmapLineEx_10
   \   00000170   ........           LDR      R0,??DataTable4
   \   00000174   880090E5           LDR      R0,[R0, #+136]
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   0800001A           BNE      ??_DrawBitmapLineEx_11
    147                        pDevice->pDeviceAPI->pfDrawHLine(pDevice, x0 + xStart, y0, x0 + x - 1);
   \                     ??_DrawBitmapLineEx_10:
   \   00000180   040086E0           ADD      R0,R6,R4
   \   00000184   0CC09AE5           LDR      R12,[R10, #+12]
   \   00000188   013040E2           SUB      R3,R0,#+1
   \   0000018C   0520A0E1           MOV      R2,R5
   \   00000190   04108BE0           ADD      R1,R11,R4
   \   00000194   0A00A0E1           MOV      R0,R10
   \   00000198   08C09CE5           LDR      R12,[R12, #+8]
   \   0000019C   3CFF2FE1           BLX      R12
   \   000001A0   050000EA           B        ??_DrawBitmapLineEx_9
    148                      } else {
    149                        _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
   \                     ??_DrawBitmapLineEx_11:
   \   000001A4   040086E0           ADD      R0,R6,R4
   \   000001A8   012040E2           SUB      R2,R0,#+1
   \   000001AC   48309DE5           LDR      R3,[SP, #+72]
   \   000001B0   0510A0E1           MOV      R1,R5
   \   000001B4   04008BE0           ADD      R0,R11,R4
   \   000001B8   ........           BL       _DrawHLineAlpha
    150                      }
    151                    }
    152                    IndexPrev = Index;
   \                     ??_DrawBitmapLineEx_9:
   \   000001BC   04009DE5           LDR      R0,[SP, #+4]
    153                    xStart    = x;
   \   000001C0   06B0A0E1           MOV      R11,R6
    154                    Cached    = 1;
   \   000001C4   0110A0E3           MOV      R1,#+1
    155                  }
    156                  do {
    157                    x++;
    158                    xiMag -= 1000;
   \                     ??_DrawBitmapLineEx_8:
   \   000001C8   E720E0E3           MVN      R2,#+231
   \   000001CC   C02FC2E3           BIC      R2,R2,#0x300
   \   000001D0   077082E0           ADD      R7,R2,R7
   \   000001D4   016086E2           ADD      R6,R6,#+1
    159                  } while (xiMag >= 1000);
   \   000001D8   FA0F57E3           CMP      R7,#+1000
   \   000001DC   F9FFFFAA           BGE      ??_DrawBitmapLineEx_8
    160                } else {
   \                     ??_DrawBitmapLineEx_2:
   \   000001E0   40209DE5           LDR      R2,[SP, #+64]
   \   000001E4   018088E2           ADD      R8,R8,#+1
   \   000001E8   019049E2           SUB      R9,R9,#+1
   \   000001EC   020058E1           CMP      R8,R2
   \   000001F0   B0FFFFBA           BLT      ??_DrawBitmapLineEx_1
    161                  x = xMax + 1;
    162                  break;
    163                }
    164              }
    165            }
    166            if (Cached && (x > xMin)) {
   \                     ??_DrawBitmapLineEx_12:
   \   000001F4   000051E3           CMP      R1,#+0
   \   000001F8   1E00000A           BEQ      ??_DrawBitmapLineEx_0
   \   000001FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000200   060050E1           CMP      R0,R6
   \   00000204   1B0000AA           BGE      ??_DrawBitmapLineEx_0
    167              //
    168              // Clear cache
    169              //
    170              if (xStart < xMin) {
   \   00000208   00005BE1           CMP      R11,R0
   \   0000020C   00B0A0B1           MOVLT    R11,R0
    171                xStart = xMin;
    172              }
    173              LCD_SetColorIndex(Index);
   \   00000210   04009DE5           LDR      R0,[SP, #+4]
   \   00000214   ........           BL       LCD_SetColorIndex
    174              if (Alpha == 256 || !GUI_Context.hDevData) {
   \   00000218   48009DE5           LDR      R0,[SP, #+72]
   \   0000021C   400F50E3           CMP      R0,#+256
   \   00000220   0300000A           BEQ      ??_DrawBitmapLineEx_13
   \   00000224   ........           LDR      R0,??DataTable4
   \   00000228   880090E5           LDR      R0,[R0, #+136]
   \   0000022C   000050E3           CMP      R0,#+0
   \   00000230   0A00001A           BNE      ??_DrawBitmapLineEx_14
    175                pDevice->pDeviceAPI->pfDrawHLine(pDevice, x0 + xStart, y0, x0 + x - 1);
   \                     ??_DrawBitmapLineEx_13:
   \   00000234   040086E0           ADD      R0,R6,R4
   \   00000238   0CC09AE5           LDR      R12,[R10, #+12]
   \   0000023C   013040E2           SUB      R3,R0,#+1
   \   00000240   0520A0E1           MOV      R2,R5
   \   00000244   04108BE0           ADD      R1,R11,R4
   \   00000248   0A00A0E1           MOV      R0,R10
   \   0000024C   08C09CE5           LDR      R12,[R12, #+8]
   \   00000250   3CFF2FE1           BLX      R12
   \   00000254   070000EA           B        ??_DrawBitmapLineEx_0
    176              } else {
   \                     ??_DrawBitmapLineEx_3:
   \   00000258   016082E2           ADD      R6,R2,#+1
   \   0000025C   E4FFFFEA           B        ??_DrawBitmapLineEx_12
    177                _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
   \                     ??_DrawBitmapLineEx_14:
   \   00000260   040086E0           ADD      R0,R6,R4
   \   00000264   012040E2           SUB      R2,R0,#+1
   \   00000268   48309DE5           LDR      R3,[SP, #+72]
   \   0000026C   0510A0E1           MOV      R1,R5
   \   00000270   04008BE0           ADD      R0,R11,R4
   \   00000274   ........           BL       _DrawHLineAlpha
    178              }
    179            }
    180          }
   \                     ??_DrawBitmapLineEx_0:
   \   00000278   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000027C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    181          
    182          /*********************************************************************
    183          *
    184          *       _DrawBitmapEx
    185          */

   \                                 In section .text, align 4, keep-with-next
    186          static void _DrawBitmapEx(int x0, int y0, int xOff, int yOff, int xSize, int ySize, int xMag, int yMag,
    187                                    int Alpha, int BmpSizeX, int BmpSizeY, int bpp, int BytesPerLine, const U8 * pData) {
   \                     _DrawBitmapEx:
   \   00000000   FA4F2DE9           PUSH     {R1,R3-R11,LR}
   \   00000004   0240A0E1           MOV      R4,R2
    188            int y, yi, yMin, yMax, yEnd, yPrev;
    189          
    190            yMin = GUI_Context.ClipRect.y0;
   \   00000008   ........           LDR      R2,??DataTable4
   \   0000000C   24D04DE2           SUB      SP,SP,#+36
   \   00000010   FA30D2E1           LDRSH    R3,[R2, #+10]
    191            yMax = GUI_Context.ClipRect.y1;
   \   00000014   FE20D2E1           LDRSH    R2,[R2, #+14]
   \   00000018   58509DE5           LDR      R5,[SP, #+88]
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   5C609DE5           LDR      R6,[SP, #+92]
   \   00000024   64109DE5           LDR      R1,[SP, #+100]
   \   00000028   68009DE5           LDR      R0,[SP, #+104]
   \   0000002C   20308DE5           STR      R3,[SP, #+32]
   \   00000030   1C208DE5           STR      R2,[SP, #+28]
    192            if (xMag < 0) {
   \   00000034   000055E3           CMP      R5,#+0
   \   00000038   0800005A           BPL      ??_DrawBitmapEx_0
    193              x0 -= (BmpSizeX - (xOff << 1) - xSize) * xMag / 1000;
   \   0000003C   50209DE5           LDR      R2,[SP, #+80]
   \   00000040   841041E0           SUB      R1,R1,R4, LSL #+1
   \   00000044   021041E0           SUB      R1,R1,R2
   \   00000048   950101E0           MUL      R1,R5,R1
   \   0000004C   ........           LDR      R2,??DataTable4_2  ;; 0x10624dd3
   \   00000050   9132C2E0           SMULL    R3,R2,R1,R2
   \   00000054   4213B0E1           ASRS     R1,R2,#+6
   \   00000058   01108142           ADDMI    R1,R1,#+1
   \   0000005C   017047E0           SUB      R7,R7,R1
    194            }
    195            if (yMag < 0) {
   \                     ??_DrawBitmapEx_0:
   \   00000060   000056E3           CMP      R6,#+0
   \   00000064   0800005A           BPL      ??_DrawBitmapEx_1
    196              y0 -= (BmpSizeY - 1) * yMag / 1000;
   \   00000068   010040E2           SUB      R0,R0,#+1
   \   0000006C   960000E0           MUL      R0,R6,R0
   \   00000070   ........           LDR      R2,??DataTable4_2  ;; 0x10624dd3
   \   00000074   24109DE5           LDR      R1,[SP, #+36]
   \   00000078   9032C2E0           SMULL    R3,R2,R0,R2
   \   0000007C   4203B0E1           ASRS     R0,R2,#+6
   \   00000080   01008042           ADDMI    R0,R0,#+1
   \   00000084   000041E0           SUB      R0,R1,R0
   \   00000088   24008DE5           STR      R0,[SP, #+36]
    197            }
    198            yEnd  = y0 + GUI__DivideRound32(((I32)(yOff) * yMag), 1000);
   \                     ??_DrawBitmapEx_1:
   \   0000008C   28009DE5           LDR      R0,[SP, #+40]
   \   00000090   24809DE5           LDR      R8,[SP, #+36]
   \   00000094   960000E0           MUL      R0,R6,R0
   \   00000098   FA1FA0E3           MOV      R1,#+1000
   \   0000009C   ........           BL       GUI__DivideRound32
    199            yPrev = yEnd + 1;
    200            for (yi = yOff; yi < (yOff + ySize); yi++) {
   \   000000A0   28909DE5           LDR      R9,[SP, #+40]
   \   000000A4   54209DE5           LDR      R2,[SP, #+84]
   \   000000A8   088080E0           ADD      R8,R0,R8
   \   000000AC   010088E2           ADD      R0,R8,#+1
   \   000000B0   091082E0           ADD      R1,R2,R9
   \   000000B4   18008DE5           STR      R0,[SP, #+24]
   \   000000B8   010059E1           CMP      R9,R1
   \   000000BC   2E0000AA           BGE      ??_DrawBitmapEx_2
    201              y = yEnd;
    202              yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1) * yMag), 1000);
   \                     ??_DrawBitmapEx_3:
   \   000000C0   01B089E2           ADD      R11,R9,#+1
   \   000000C4   08A0A0E1           MOV      R10,R8
   \   000000C8   960B00E0           MUL      R0,R6,R11
   \   000000CC   24809DE5           LDR      R8,[SP, #+36]
   \   000000D0   FA1FA0E3           MOV      R1,#+1000
   \   000000D4   ........           BL       GUI__DivideRound32
   \   000000D8   088080E0           ADD      R8,R0,R8
    203              if (y != yPrev) {
   \   000000DC   18009DE5           LDR      R0,[SP, #+24]
   \   000000E0   00005AE1           CMP      R10,R0
   \   000000E4   1E00000A           BEQ      ??_DrawBitmapEx_4
    204                yPrev = y;
   \   000000E8   18A08DE5           STR      R10,[SP, #+24]
    205                do {
    206                  if ((y >= yMin) && (y <= yMax)) {
   \                     ??_DrawBitmapEx_5:
   \   000000EC   20009DE5           LDR      R0,[SP, #+32]
   \   000000F0   00005AE1           CMP      R10,R0
   \   000000F4   1C009DA5           LDRGE    R0,[SP, #+28]
   \   000000F8   0A0050A1           CMPGE    R0,R10
   \   000000FC   0F0000BA           BLT      ??_DrawBitmapEx_6
    207                    _DrawBitmapLineEx(x0, y, xOff, yi, xSize, xMag, Alpha, bpp, BytesPerLine, pData);
   \   00000100   74009DE5           LDR      R0,[SP, #+116]
   \   00000104   04508DE5           STR      R5,[SP, #+4]
   \   00000108   14008DE5           STR      R0,[SP, #+20]
   \   0000010C   70009DE5           LDR      R0,[SP, #+112]
   \   00000110   0930A0E1           MOV      R3,R9
   \   00000114   10008DE5           STR      R0,[SP, #+16]
   \   00000118   6C009DE5           LDR      R0,[SP, #+108]
   \   0000011C   0420A0E1           MOV      R2,R4
   \   00000120   0C008DE5           STR      R0,[SP, #+12]
   \   00000124   60009DE5           LDR      R0,[SP, #+96]
   \   00000128   0A10A0E1           MOV      R1,R10
   \   0000012C   08008DE5           STR      R0,[SP, #+8]
   \   00000130   50009DE5           LDR      R0,[SP, #+80]
   \   00000134   00008DE5           STR      R0,[SP, #+0]
   \   00000138   0700A0E1           MOV      R0,R7
   \   0000013C   ........           BL       _DrawBitmapLineEx
    208                  }
    209                } while ((yMag < 0) ? (--y > yEnd) : (++y < yEnd));
   \                     ??_DrawBitmapEx_6:
   \   00000140   000056E3           CMP      R6,#+0
   \   00000144   0300005A           BPL      ??_DrawBitmapEx_7
   \   00000148   01A04AE2           SUB      R10,R10,#+1
   \   0000014C   0A0058E1           CMP      R8,R10
   \   00000150   E5FFFFBA           BLT      ??_DrawBitmapEx_5
   \   00000154   020000EA           B        ??_DrawBitmapEx_4
   \                     ??_DrawBitmapEx_7:
   \   00000158   01A08AE2           ADD      R10,R10,#+1
   \   0000015C   08005AE1           CMP      R10,R8
   \   00000160   E1FFFFBA           BLT      ??_DrawBitmapEx_5
    210              }
    211            }
   \                     ??_DrawBitmapEx_4:
   \   00000164   28009DE5           LDR      R0,[SP, #+40]
   \   00000168   54109DE5           LDR      R1,[SP, #+84]
   \   0000016C   0B90A0E1           MOV      R9,R11
   \   00000170   000081E0           ADD      R0,R1,R0
   \   00000174   000059E1           CMP      R9,R0
   \   00000178   D0FFFFBA           BLT      ??_DrawBitmapEx_3
    212          }
   \                     ??_DrawBitmapEx_2:
   \   0000017C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000180   F08FBDE8           POP      {R4-R11,PC}      ;; return
    213          
    214          /*********************************************************************
    215          *
    216          *       _WriteExToActiveAt
    217          */

   \                                 In section .text, align 4, keep-with-next
    218          static void _WriteExToActiveAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
   \                     _WriteExToActiveAt:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   68609DE5           LDR      R6,[SP, #+104]
    219            GUI_MEMDEV * pDev;
    220            GUI_USAGE_h  hUsage; 
    221            GUI_USAGE *  pUsage;
    222            U8 * pData;
    223            int yAct, yPrev, ySize, yi;
    224            int BytesPerLine, bpp;
    225            int xOff, xSize, y0;
    226          
    227            pDev         = GUI_MEMDEV_H2P(hMem);
   \   00000014   ........           BL       GUI_ALLOC_h2p
   \   00000018   0070A0E1           MOV      R7,R0
    228            hUsage       = pDev->hUsage;
   \   0000001C   FA10D7E1           LDRSH    R1,[R7, #+10]
   \   00000020   140097E5           LDR      R0,[R7, #+20]
    229            ySize        = pDev->YSize;
    230            BytesPerLine = pDev->BytesPerLine;
    231            pData        = (U8 *)(pDev + 1);
    232            bpp          = pDev->BitsPerPixel;
    233            yPrev        = y + 1;
   \   00000024   018085E2           ADD      R8,R5,#+1
   \   00000028   38108DE5           STR      R1,[SP, #+56]
   \   0000002C   0C3097E5           LDR      R3,[R7, #+12]
    234            if (hUsage) {
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   34308DE5           STR      R3,[SP, #+52]
   \   00000038   183087E2           ADD      R3,R7,#+24
   \   0000003C   30308DE5           STR      R3,[SP, #+48]
   \   00000040   103097E5           LDR      R3,[R7, #+16]
   \   00000044   2C308DE5           STR      R3,[SP, #+44]
   \   00000048   6B00000A           BEQ      ??_WriteExToActiveAt_0
    235              pUsage = GUI_USAGE_H2P(hUsage);
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   0090A0E1           MOV      R9,R0
    236              for (yi = 0; yi < ySize; yi++) {
   \   00000054   38009DE5           LDR      R0,[SP, #+56]
   \   00000058   00A0A0E3           MOV      R10,#+0
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   7B0000BA           BLT      ??_WriteExToActiveAt_1
    237                yAct = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
   \                     ??_WriteExToActiveAt_2:
   \   00000064   960A00E0           MUL      R0,R6,R10
   \   00000068   FA1FA0E3           MOV      R1,#+1000
   \   0000006C   ........           BL       GUI__DivideRound32
   \   00000070   05B080E0           ADD      R11,R0,R5
    238                if (yAct != yPrev) {
   \   00000074   08005BE1           CMP      R11,R8
   \   00000078   5A00000A           BEQ      ??_WriteExToActiveAt_3
    239                  xOff  = 0;
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   28108DE5           STR      R1,[SP, #+40]
    240                  xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   00000084   083099E5           LDR      R3,[R9, #+8]
   \   00000088   0A20A0E1           MOV      R2,R10
   \   0000008C   28108DE2           ADD      R1,SP,#+40
   \   00000090   0900A0E1           MOV      R0,R9
   \   00000094   143093E5           LDR      R3,[R3, #+20]
   \   00000098   33FF2FE1           BLX      R3
   \   0000009C   0080A0E1           MOV      R8,R0
    241                  if (xSize == pDev->XSize) {
   \   000000A0   F800D7E1           LDRSH    R0,[R7, #+8]
   \   000000A4   000058E1           CMP      R8,R0
   \   000000A8   2900001A           BNE      ??_WriteExToActiveAt_4
    242                    //
    243                    // If the entire line is affected, calculate the number of entire lines
    244                    //
    245                    y0 = yi;
   \   000000AC   3CA08DE5           STR      R10,[SP, #+60]
   \   000000B0   000000EA           B        ??_WriteExToActiveAt_5
    246                    while (GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1) == xSize) {
    247                      yi++;
   \                     ??_WriteExToActiveAt_6:
   \   000000B4   0BA0A0E1           MOV      R10,R11
    248                    }
   \                     ??_WriteExToActiveAt_5:
   \   000000B8   083099E5           LDR      R3,[R9, #+8]
   \   000000BC   01B08AE2           ADD      R11,R10,#+1
   \   000000C0   0B20A0E1           MOV      R2,R11
   \   000000C4   28108DE2           ADD      R1,SP,#+40
   \   000000C8   0900A0E1           MOV      R0,R9
   \   000000CC   143093E5           LDR      R3,[R3, #+20]
   \   000000D0   33FF2FE1           BLX      R3
   \   000000D4   080050E1           CMP      R0,R8
   \   000000D8   F5FFFF0A           BEQ      ??_WriteExToActiveAt_6
   \   000000DC   30109DE5           LDR      R1,[SP, #+48]
   \   000000E0   F800D7E1           LDRSH    R0,[R7, #+8]
   \   000000E4   24108DE5           STR      R1,[SP, #+36]
   \   000000E8   34109DE5           LDR      R1,[SP, #+52]
   \   000000EC   3C309DE5           LDR      R3,[SP, #+60]
   \   000000F0   20108DE5           STR      R1,[SP, #+32]
   \   000000F4   2C109DE5           LDR      R1,[SP, #+44]
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   1C108DE5           STR      R1,[SP, #+28]
   \   00000100   FA10D7E1           LDRSH    R1,[R7, #+10]
   \   00000104   14008DE5           STR      R0,[SP, #+20]
   \   00000108   00008DE5           STR      R0,[SP, #+0]
   \   0000010C   18108DE5           STR      R1,[SP, #+24]
   \   00000110   6C109DE5           LDR      R1,[SP, #+108]
   \   00000114   0C608DE5           STR      R6,[SP, #+12]
   \   00000118   10108DE5           STR      R1,[SP, #+16]
   \   0000011C   40109DE5           LDR      R1,[SP, #+64]
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   08108DE5           STR      R1,[SP, #+8]
   \   00000128   3C109DE5           LDR      R1,[SP, #+60]
   \   0000012C   01104AE0           SUB      R1,R10,R1
   \   00000130   011081E2           ADD      R1,R1,#+1
   \   00000134   04108DE5           STR      R1,[SP, #+4]
   \   00000138   0510A0E1           MOV      R1,R5
    249                    _DrawBitmapEx(x, y, 0, y0, pDev->XSize, yi - y0 + 1, xMag, yMag, Alpha,
    250                                  pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
   \   0000013C   ........           BL       _DrawBitmapEx
    251                    yPrev = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
   \   00000140   960A00E0           MUL      R0,R6,R10
   \   00000144   FA1FA0E3           MOV      R1,#+1000
   \   00000148   ........           BL       GUI__DivideRound32
   \   0000014C   058080E0           ADD      R8,R0,R5
   \   00000150   240000EA           B        ??_WriteExToActiveAt_3
    252                  } else {
    253                    //
    254                    // Draw the partial line which needs to be drawn
    255                    //
    256                    while (xSize) {
   \                     ??_WriteExToActiveAt_4:
   \   00000154   000058E3           CMP      R8,#+0
   \   00000158   2100000A           BEQ      ??_WriteExToActiveAt_7
    257                      _DrawBitmapEx(x, y, xOff, yi, xSize, 1, xMag, yMag, Alpha,
    258                                    pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
   \                     ??_WriteExToActiveAt_8:
   \   0000015C   30009DE5           LDR      R0,[SP, #+48]
   \   00000160   0A30A0E1           MOV      R3,R10
   \   00000164   24008DE5           STR      R0,[SP, #+36]
   \   00000168   34009DE5           LDR      R0,[SP, #+52]
   \   0000016C   28209DE5           LDR      R2,[SP, #+40]
   \   00000170   20008DE5           STR      R0,[SP, #+32]
   \   00000174   2C009DE5           LDR      R0,[SP, #+44]
   \   00000178   0510A0E1           MOV      R1,R5
   \   0000017C   1C008DE5           STR      R0,[SP, #+28]
   \   00000180   FA00D7E1           LDRSH    R0,[R7, #+10]
   \   00000184   18008DE5           STR      R0,[SP, #+24]
   \   00000188   F800D7E1           LDRSH    R0,[R7, #+8]
   \   0000018C   0C608DE5           STR      R6,[SP, #+12]
   \   00000190   00808DE5           STR      R8,[SP, #+0]
   \   00000194   14008DE5           STR      R0,[SP, #+20]
   \   00000198   6C009DE5           LDR      R0,[SP, #+108]
   \   0000019C   10008DE5           STR      R0,[SP, #+16]
   \   000001A0   40009DE5           LDR      R0,[SP, #+64]
   \   000001A4   08008DE5           STR      R0,[SP, #+8]
   \   000001A8   0100A0E3           MOV      R0,#+1
   \   000001AC   04008DE5           STR      R0,[SP, #+4]
   \   000001B0   0400A0E1           MOV      R0,R4
   \   000001B4   ........           BL       _DrawBitmapEx
    259                      xOff += xSize;
   \   000001B8   28009DE5           LDR      R0,[SP, #+40]
    260                      xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
   \   000001BC   0A20A0E1           MOV      R2,R10
   \   000001C0   000088E0           ADD      R0,R8,R0
   \   000001C4   28008DE5           STR      R0,[SP, #+40]
   \   000001C8   083099E5           LDR      R3,[R9, #+8]
   \   000001CC   28108DE2           ADD      R1,SP,#+40
   \   000001D0   0900A0E1           MOV      R0,R9
   \   000001D4   143093E5           LDR      R3,[R3, #+20]
   \   000001D8   33FF2FE1           BLX      R3
   \   000001DC   0080B0E1           MOVS     R8,R0
   \   000001E0   DDFFFF1A           BNE      ??_WriteExToActiveAt_8
    261                    }
    262                    yPrev = yAct;
   \                     ??_WriteExToActiveAt_7:
   \   000001E4   0B80A0E1           MOV      R8,R11
    263                  }
    264                }
    265              }
   \                     ??_WriteExToActiveAt_3:
   \   000001E8   38009DE5           LDR      R0,[SP, #+56]
   \   000001EC   01A08AE2           ADD      R10,R10,#+1
   \   000001F0   00005AE1           CMP      R10,R0
   \   000001F4   160000AA           BGE      ??_WriteExToActiveAt_1
   \   000001F8   99FFFFEA           B        ??_WriteExToActiveAt_2
    266            } else {
   \                     ??_WriteExToActiveAt_0:
   \   000001FC   F800D7E1           LDRSH    R0,[R7, #+8]
   \   00000200   18108DE5           STR      R1,[SP, #+24]
   \   00000204   30209DE5           LDR      R2,[SP, #+48]
   \   00000208   6C109DE5           LDR      R1,[SP, #+108]
   \   0000020C   24208DE5           STR      R2,[SP, #+36]
   \   00000210   10108DE5           STR      R1,[SP, #+16]
   \   00000214   34209DE5           LDR      R2,[SP, #+52]
   \   00000218   40109DE5           LDR      R1,[SP, #+64]
   \   0000021C   20208DE5           STR      R2,[SP, #+32]
   \   00000220   08108DE5           STR      R1,[SP, #+8]
   \   00000224   2C209DE5           LDR      R2,[SP, #+44]
   \   00000228   38109DE5           LDR      R1,[SP, #+56]
   \   0000022C   1C208DE5           STR      R2,[SP, #+28]
   \   00000230   14008DE5           STR      R0,[SP, #+20]
   \   00000234   04108DE5           STR      R1,[SP, #+4]
   \   00000238   00008DE5           STR      R0,[SP, #+0]
   \   0000023C   0C608DE5           STR      R6,[SP, #+12]
   \   00000240   0030A0E3           MOV      R3,#+0
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   0400A0E1           MOV      R0,R4
    267              _DrawBitmapEx(x, y, 0, 0, pDev->XSize, ySize, xMag, yMag, Alpha,
    268                            pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
   \   00000250   ........           BL       _DrawBitmapEx
    269            }
    270          }
   \                     ??_WriteExToActiveAt_1:
   \   00000254   44D08DE2           ADD      SP,SP,#+68       ;; stack cleaning
   \   00000258   F08FBDE8           POP      {R4-R11,PC}      ;; return
    271          
    272          /*********************************************************************
    273          *
    274          *        public code
    275          *
    276          **********************************************************************
    277          */
    278          /*********************************************************************
    279          *
    280          *       GUI_MEMDEV_WriteExAt
    281          */

   \                                 In section .text, align 4, keep-with-next
    282          void GUI_MEMDEV_WriteExAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
   \                     GUI_MEMDEV_WriteExAt:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   30909DE5           LDR      R9,[SP, #+48]
   \   00000018   34A09DE5           LDR      R10,[SP, #+52]
    283            if (hMem) {
   \   0000001C   000056E3           CMP      R6,#+0
   \   00000020   1500000A           BEQ      ??GUI_MEMDEV_WriteExAt_0
    284              GUI_MEMDEV* pDevData;
    285              GUI_RECT ClipRectPrev;
    286              GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    287              pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           BL       GUI_ALLOC_h2p
    288              if (x == GUI_POS_AUTO) {
   \   00000030   FE10E0E3           MVN      R1,#+254
   \   00000034   F01EC1E3           BIC      R1,R1,#0xF00
    289                x = pDevData->x0;
    290                y = pDevData->y0;
    291              }
    292              ClipRectPrev = GUI_Context.ClipRect;
   \   00000038   ........           LDR      R11,??DataTable4
   \   0000003C   010057E1           CMP      R7,R1
   \   00000040   F470D001           LDRSHEQ  R7,[R0, #+4]
   \   00000044   F680D001           LDRSHEQ  R8,[R0, #+6]
   \   00000048   08409BE5           LDR      R4,[R11, #+8]
   \   0000004C   0C509BE5           LDR      R5,[R11, #+12]
    293              LCD_SetClipRectMax();
   \   00000050   ........           BL       LCD_SetClipRectMax
    294              _WriteExToActiveAt(hMem, x, y, xMag, yMag, Alpha);
   \   00000054   04A08DE5           STR      R10,[SP, #+4]
   \   00000058   00908DE5           STR      R9,[SP, #+0]
   \   0000005C   08309DE5           LDR      R3,[SP, #+8]
   \   00000060   0820A0E1           MOV      R2,R8
   \   00000064   0710A0E1           MOV      R1,R7
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   ........           BL       _WriteExToActiveAt
    295              GUI_Context.ClipRect = ClipRectPrev;
   \   00000070   08408BE5           STR      R4,[R11, #+8]
   \   00000074   0C508BE5           STR      R5,[R11, #+12]
    296              GUI_UNLOCK();
   \   00000078   ........           BL       GUI_Unlock
    297            }
    298          }
   \                     ??GUI_MEMDEV_WriteExAt_0:
   \   0000007C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000080   F08FBDE8           POP      {R4-R11,PC}      ;; return
    299          
    300          /*********************************************************************
    301          *
    302          *       GUI_MEMDEV_WriteEx
    303          */

   \                                 In section .text, align 4, keep-with-next
    304          void GUI_MEMDEV_WriteEx(GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha) {
   \                     GUI_MEMDEV_WriteEx:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   03B0A0E1           MOV      R11,R3
    305            GUI_MEMDEV_WriteExAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO, xMag, yMag, Alpha);
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   1300000A           BEQ      ??GUI_MEMDEV_WriteEx_0
   \   0000001C   ........           BL       GUI_Lock
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   ........           LDR      R10,??DataTable4
   \   0000002C   F480D0E1           LDRSH    R8,[R0, #+4]
   \   00000030   F690D0E1           LDRSH    R9,[R0, #+6]
   \   00000034   08409AE5           LDR      R4,[R10, #+8]
   \   00000038   0C509AE5           LDR      R5,[R10, #+12]
   \   0000003C   ........           BL       LCD_SetClipRectMax
   \   00000040   08009DE5           LDR      R0,[SP, #+8]
   \   00000044   04B08DE5           STR      R11,[SP, #+4]
   \   00000048   00008DE5           STR      R0,[SP, #+0]
   \   0000004C   0730A0E1           MOV      R3,R7
   \   00000050   0920A0E1           MOV      R2,R9
   \   00000054   0810A0E1           MOV      R1,R8
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           BL       _WriteExToActiveAt
   \   00000060   08408AE5           STR      R4,[R10, #+8]
   \   00000064   0C508AE5           STR      R5,[R10, #+12]
   \   00000068   ........           BL       GUI_Unlock
    306          }
   \                     ??GUI_MEMDEV_WriteEx_0:
   \   0000006C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000070   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   D34D6210           DC32     0x10624dd3
    307          
    308          #else
    309          
    310          void GUIDEV_WriteEx_C(void);
    311          void GUIDEV_WriteEx_C(void) {}
    312          
    313          #endif /* GUI_SUPPORT_MEMDEV */
    314          
    315          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUI_MEMDEV_WriteEx       48
     GUI_MEMDEV_WriteExAt     48
     _DrawBitmapEx            80
     _DrawBitmapLineEx        64
     _DrawHLineAlpha          40
     _WriteExToActiveAt      104


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _DrawHLineAlpha       352
     _DrawBitmapLineEx     640
     _DrawBitmapEx         388
     _WriteExToActiveAt    604
     GUI_MEMDEV_WriteExAt  132
     GUI_MEMDEV_WriteEx    116
     ??DataTable4            4
     ??DataTable4_1          4
     ??DataTable4_2          4

 
 2 244 bytes in section .text
 
 2 244 bytes of CODE memory

Errors: none
Warnings: none
