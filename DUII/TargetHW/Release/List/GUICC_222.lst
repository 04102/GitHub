###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:32 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_222.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_222.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_222.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_222.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_222.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_222.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code, LCD_FIXEDPALETTE == 222, 64 colors
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _Color2Index_222
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static unsigned _Color2Index_222(LCD_COLOR Color) {
     36            int r, g, b;
     37            r = ( (Color        & 255) + 0x2a) / 0x55;
     38            g = (((Color >>  8) & 255) + 0x2a) / 0x55;
     39            b = (((Color >> 16) & 255) + 0x2a) / 0x55;
     40            return r + (g << 2) + (b << 4);
   \                     _Color2Index_222:
   \   00000000   FF1000E2           AND      R1,R0,#0xFF
   \   00000004   2A1081E2           ADD      R1,R1,#+42
   \   00000008   C120A0E3           MOV      R2,#+193
   \   0000000C   0118A0E1           LSL      R1,R1,#+16
   \   00000010   C02C82E3           ORR      R2,R2,#0xC000
   \   00000014   2118A0E1           LSR      R1,R1,#+16
   \   00000018   910202E0           MUL      R2,R1,R2
   \   0000001C   C130A0E3           MOV      R3,#+193
   \   00000020   221BA0E1           LSR      R1,R2,#+22
   \   00000024   2024A0E1           LSR      R2,R0,#+8
   \   00000028   FF2002E2           AND      R2,R2,#0xFF
   \   0000002C   2A2082E2           ADD      R2,R2,#+42
   \   00000030   0228A0E1           LSL      R2,R2,#+16
   \   00000034   C03C83E3           ORR      R3,R3,#0xC000
   \   00000038   2228A0E1           LSR      R2,R2,#+16
   \   0000003C   920303E0           MUL      R3,R2,R3
   \   00000040   2008A0E1           LSR      R0,R0,#+16
   \   00000044   232BA0E1           LSR      R2,R3,#+22
   \   00000048   FF0000E2           AND      R0,R0,#0xFF
   \   0000004C   021181E0           ADD      R1,R1,R2, LSL #+2
   \   00000050   2A0080E2           ADD      R0,R0,#+42
   \   00000054   C120A0E3           MOV      R2,#+193
   \   00000058   0008A0E1           LSL      R0,R0,#+16
   \   0000005C   C02C82E3           ORR      R2,R2,#0xC000
   \   00000060   2008A0E1           LSR      R0,R0,#+16
   \   00000064   900202E0           MUL      R2,R0,R2
   \   00000068   220BA0E1           LSR      R0,R2,#+22
   \   0000006C   000281E0           ADD      R0,R1,R0, LSL #+4
   \   00000070   1EFF2FE1           BX       LR               ;; return
     41          }
     42          
     43          /*********************************************************************
     44          *
     45          *       _Index2Color_222
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          static LCD_COLOR _Index2Color_222(unsigned Index) {
     48            U16P r, g, b;
     49            r = ((Index >> 0) & 3) * 0x55;
     50            g = ((Index >> 2) & 3) * 0x55;
     51            b =  (Index >> 4)      * 0x55;
     52            return (((U32)b) << 16) | (g << 8) | r;
   \                     _Index2Color_222:
   \   00000000   5510A0E3           MOV      R1,#+85
   \   00000004   2022A0E1           LSR      R2,R0,#+4
   \   00000008   0330A0E3           MOV      R3,#+3
   \   0000000C   910202E0           MUL      R2,R1,R2
   \   00000010   203103E0           AND      R3,R3,R0, LSR #+2
   \   00000014   810363E1           SMULBB   R3,R1,R3
   \   00000018   030000E2           AND      R0,R0,#0x3
   \   0000001C   0228A0E1           LSL      R2,R2,#+16
   \   00000020   0338A0E1           LSL      R3,R3,#+16
   \   00000024   810060E1           SMULBB   R0,R1,R0
   \   00000028   2228A0E1           LSR      R2,R2,#+16
   \   0000002C   2334A0E1           LSR      R3,R3,#+8
   \   00000030   022883E1           ORR      R2,R3,R2, LSL #+16
   \   00000034   0008A0E1           LSL      R0,R0,#+16
   \   00000038   200882E1           ORR      R0,R2,R0, LSR #+16
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     53          }
     54          
     55          /*********************************************************************
     56          *
     57          *       _GetIndexMask_222
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          static unsigned _GetIndexMask_222(void) {
     60            return 0x0003f;
   \                     _GetIndexMask_222:
   \   00000000   3F00A0E3           MOV      R0,#+63
   \   00000004   1EFF2FE1           BX       LR               ;; return
     61          }
     62          
     63          /*********************************************************************
     64          *
     65          *       Public data
     66          *
     67          **********************************************************************
     68          */
     69          /*********************************************************************
     70          *
     71          *       LCD_API_ColorConv_222
     72          *
     73          * Purpose
     74          *   API table for this color conversion mode. Only used by memory
     75          *   devices in this mode.
     76          */

   \                                 In section .rodata, align 4, keep-with-next
     77          const LCD_API_COLOR_CONV LCD_API_ColorConv_222 = {
   \                     LCD_API_ColorConv_222:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_222, _Index2Color_222, _GetIndexMask_222
   \              ............
     78            _Color2Index_222,
     79            _Index2Color_222,
     80            _GetIndexMask_222
     81          };
     82          
     83          /*********************************************************************
     84          *
     85          *       Static code, LCD_FIXEDPALETTE == 222, 64 colors, SWAP_RB
     86          *
     87          **********************************************************************
     88          */
     89          /*********************************************************************
     90          *
     91          *       _Color2Index_M222
     92          */

   \                                 In section .text, align 4, keep-with-next
     93          static unsigned _Color2Index_M222(LCD_COLOR Color) {
     94            int r, g, b;
     95            r = ( (Color        & 255) + 0x2a) / 0x55;
     96            g = (((Color >>  8) & 255) + 0x2a) / 0x55;
     97            b = (((Color >> 16) & 255) + 0x2a) / 0x55;
     98            return b + (g << 2) + (r << 4);
   \                     _Color2Index_M222:
   \   00000000   2018A0E1           LSR      R1,R0,#+16
   \   00000004   FF1001E2           AND      R1,R1,#0xFF
   \   00000008   2A1081E2           ADD      R1,R1,#+42
   \   0000000C   C120A0E3           MOV      R2,#+193
   \   00000010   0118A0E1           LSL      R1,R1,#+16
   \   00000014   C02C82E3           ORR      R2,R2,#0xC000
   \   00000018   2118A0E1           LSR      R1,R1,#+16
   \   0000001C   910202E0           MUL      R2,R1,R2
   \   00000020   C130A0E3           MOV      R3,#+193
   \   00000024   221BA0E1           LSR      R1,R2,#+22
   \   00000028   2024A0E1           LSR      R2,R0,#+8
   \   0000002C   FF2002E2           AND      R2,R2,#0xFF
   \   00000030   2A2082E2           ADD      R2,R2,#+42
   \   00000034   0228A0E1           LSL      R2,R2,#+16
   \   00000038   C03C83E3           ORR      R3,R3,#0xC000
   \   0000003C   2228A0E1           LSR      R2,R2,#+16
   \   00000040   920303E0           MUL      R3,R2,R3
   \   00000044   FF0000E2           AND      R0,R0,#0xFF
   \   00000048   232BA0E1           LSR      R2,R3,#+22
   \   0000004C   021181E0           ADD      R1,R1,R2, LSL #+2
   \   00000050   2A0080E2           ADD      R0,R0,#+42
   \   00000054   C120A0E3           MOV      R2,#+193
   \   00000058   0008A0E1           LSL      R0,R0,#+16
   \   0000005C   C02C82E3           ORR      R2,R2,#0xC000
   \   00000060   2008A0E1           LSR      R0,R0,#+16
   \   00000064   900202E0           MUL      R2,R0,R2
   \   00000068   220BA0E1           LSR      R0,R2,#+22
   \   0000006C   000281E0           ADD      R0,R1,R0, LSL #+4
   \   00000070   1EFF2FE1           BX       LR               ;; return
     99          }
    100          
    101          /*********************************************************************
    102          *
    103          *       LCD_Index2Color_M222
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          static LCD_COLOR _Index2Color_M222(unsigned Index) {
    106            U16P r, g, b;
    107            r = ((Index >> 0) & 3) * 0x55;
    108            g = ((Index >> 2) & 3) * 0x55;
    109            b =  (Index >> 4)      * 0x55;
    110            return (((U32)r) << 16) | (g << 8) | b;
   \                     _Index2Color_M222:
   \   00000000   0330A0E3           MOV      R3,#+3
   \   00000004   5510A0E3           MOV      R1,#+85
   \   00000008   032000E2           AND      R2,R0,#0x3
   \   0000000C   203103E0           AND      R3,R3,R0, LSR #+2
   \   00000010   810262E1           SMULBB   R2,R1,R2
   \   00000014   810363E1           SMULBB   R3,R1,R3
   \   00000018   2002A0E1           LSR      R0,R0,#+4
   \   0000001C   910000E0           MUL      R0,R1,R0
   \   00000020   0228A0E1           LSL      R2,R2,#+16
   \   00000024   0338A0E1           LSL      R3,R3,#+16
   \   00000028   2228A0E1           LSR      R2,R2,#+16
   \   0000002C   2334A0E1           LSR      R3,R3,#+8
   \   00000030   022883E1           ORR      R2,R3,R2, LSL #+16
   \   00000034   0008A0E1           LSL      R0,R0,#+16
   \   00000038   200882E1           ORR      R0,R2,R0, LSR #+16
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    111          }
    112          
    113          /*********************************************************************
    114          *
    115          *       _GetIndexMask_M222
    116          */

   \                                 In section .text, align 4, keep-with-next
    117          static unsigned _GetIndexMask_M222(void) {
    118            return 0x003f;
   \                     _GetIndexMask_M222:
   \   00000000   3F00A0E3           MOV      R0,#+63
   \   00000004   1EFF2FE1           BX       LR               ;; return
    119          }
    120          
    121          /*********************************************************************
    122          *
    123          *       Public data
    124          *
    125          **********************************************************************
    126          */
    127          /*********************************************************************
    128          *
    129          *       LCD_API_ColorConv_M222
    130          *
    131          * Purpose
    132          *   API table for this color conversion mode. Only used by memory
    133          *   devices in this mode.
    134          */

   \                                 In section .rodata, align 4, keep-with-next
    135          const LCD_API_COLOR_CONV LCD_API_ColorConv_M222 = {
   \                     LCD_API_ColorConv_M222:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_M222, _Index2Color_M222, _GetIndexMask_M222
   \              ............
    136            _Color2Index_M222,
    137            _Index2Color_M222,
    138            _GetIndexMask_M222
    139          };
    140          
    141          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _Color2Index_222        0
     _Color2Index_M222       0
     _GetIndexMask_222       0
     _GetIndexMask_M222      0
     _Index2Color_222        0
     _Index2Color_M222       0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Color2Index_222        116
     _Index2Color_222         64
     _GetIndexMask_222         8
     LCD_API_ColorConv_222    12
     _Color2Index_M222       116
     _Index2Color_M222        64
     _GetIndexMask_M222        8
     LCD_API_ColorConv_M222   12

 
  24 bytes in section .rodata
 376 bytes in section .text
 
 376 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
