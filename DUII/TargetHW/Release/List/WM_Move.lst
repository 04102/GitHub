###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:26 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_Move.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\WM_Move.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_Move.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_Move.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_Move.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_Move.C
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          
     34          
     35          /*********************************************************************
     36          *
     37          *       _MoveDescendents
     38          *
     39          * Description
     40          *   Moves _MoveDescendents.
     41          *   Since the parent has already been moved, there is no need to
     42          *   take care of invalidation.
     43          *
     44          * Parameters
     45          *   hWin    The first of all descendants to be moved (first child)
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          static void _MoveDescendents(WM_HWIN hWin, int dx, int dy) {
   \                     _MoveDescendents:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     48            WM_Obj* pWin;
     49          
     50            for (;hWin; hWin = pWin->hNext) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   1300000A           BEQ      ??_MoveDescendents_0
     51              pWin = WM_HANDLE2PTR(hWin);
   \                     ??_MoveDescendents_1:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   0070A0E1           MOV      R7,R0
     52              GUI_MoveRect(&pWin->Rect, dx, dy);
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   ........           BL       GUI_MoveRect
     53              GUI_MoveRect(&pWin->InvalidRect, dx, dy);
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   080087E2           ADD      R0,R7,#+8
   \   00000040   ........           BL       GUI_MoveRect
     54              _MoveDescendents(pWin->hFirstChild, dx, dy);  /* Children need to be moved along ...*/
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   1C0097E5           LDR      R0,[R7, #+28]
   \   00000050   ........           BL       _MoveDescendents
     55              WM__SendMsgNoData(hWin, WM_MOVE);
   \   00000054   0310A0E3           MOV      R1,#+3
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       WM__SendMsgNoData
     56            }
   \   00000060   204097E5           LDR      R4,[R7, #+32]
   \   00000064   000054E3           CMP      R4,#+0
   \   00000068   EBFFFF1A           BNE      ??_MoveDescendents_1
     57          }
   \                     ??_MoveDescendents_0:
   \   0000006C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000070   F080BDE8           POP      {R4-R7,PC}       ;; return
     58          
     59          /*********************************************************************
     60          *
     61          *       Public module internal code
     62          *
     63          **********************************************************************
     64          */
     65          /*********************************************************************
     66          *
     67          *       WM__MoveWindow
     68          */

   \                                 In section .text, align 4, keep-with-next
     69          void WM__MoveWindow(WM_HWIN hWin, int dx, int dy) {
   \                     WM__MoveWindow:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     70            GUI_RECT r;
     71          
     72            WM_Obj* pWin;
     73            if ((hWin) && (dx || dy)) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0CD04DE2           SUB      SP,SP,#+12
   \   00000018   05009611           ORRSNE   R0,R6,R5
   \   0000001C   3400000A           BEQ      ??WM__MoveWindow_0
     74              pWin = WM_HANDLE2PTR(hWin);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   0070A0E1           MOV      R7,R0
     75              r = pWin->Rect;
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   0820A0E3           MOV      R2,#+8
   \   00000038   ........           BL       __aeabi_memcpy
     76              GUI_MoveRect(&pWin->Rect, dx, dy);
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   ........           BL       GUI_MoveRect
     77              GUI_MoveRect(&pWin->InvalidRect, dx, dy);
   \   0000004C   0620A0E1           MOV      R2,R6
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   080087E2           ADD      R0,R7,#+8
   \   00000058   ........           BL       GUI_MoveRect
     78              _MoveDescendents(pWin->hFirstChild, dx, dy);  // Children need to be moved along
   \   0000005C   1C8097E5           LDR      R8,[R7, #+28]
   \   00000060   000058E3           CMP      R8,#+0
   \   00000064   1300000A           BEQ      ??WM__MoveWindow_1
   \                     ??WM__MoveWindow_2:
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_ALLOC_h2p
   \   00000070   0090A0E1           MOV      R9,R0
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   ........           BL       GUI_MoveRect
   \   00000080   0620A0E1           MOV      R2,R6
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   080089E2           ADD      R0,R9,#+8
   \   0000008C   ........           BL       GUI_MoveRect
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   1C0099E5           LDR      R0,[R9, #+28]
   \   0000009C   ........           BL       _MoveDescendents
   \   000000A0   0310A0E3           MOV      R1,#+3
   \   000000A4   0800A0E1           MOV      R0,R8
   \   000000A8   ........           BL       WM__SendMsgNoData
   \   000000AC   208099E5           LDR      R8,[R9, #+32]
   \   000000B0   000058E3           CMP      R8,#+0
   \   000000B4   EBFFFF1A           BNE      ??WM__MoveWindow_2
     79              //
     80              // Invalidate old and new area
     81              //
     82              if ((pWin->Status & WM_SF_ISVIS) && (pWin->hParent)) {
   \                     ??WM__MoveWindow_1:
   \   000000B8   2800D7E5           LDRB     R0,[R7, #+40]
   \   000000BC   020010E3           TST      R0,#0x2
   \   000000C0   18109715           LDRNE    R1,[R7, #+24]
   \   000000C4   00005113           CMPNE    R1,#+0
   \   000000C8   0600000A           BEQ      ??WM__MoveWindow_3
     83                WM__InvalidateParent(&pWin->Rect, pWin->hParent, pWin->hNext); // Invalidate new area
   \   000000CC   202097E5           LDR      R2,[R7, #+32]
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           BL       WM__InvalidateParent
     84                WM__InvalidateParent(&r,          pWin->hParent, pWin->hNext); // Invalidate old area
   \   000000D8   202097E5           LDR      R2,[R7, #+32]
   \   000000DC   181097E5           LDR      R1,[R7, #+24]
   \   000000E0   0D00A0E1           MOV      R0,SP
   \   000000E4   ........           BL       WM__InvalidateParent
     85              }
     86              WM__SendMsgNoData(hWin, WM_MOVE);             // Notify window it has been moved
   \                     ??WM__MoveWindow_3:
   \   000000E8   0310A0E3           MOV      R1,#+3
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       WM__SendMsgNoData
     87            }
     88          }
   \                     ??WM__MoveWindow_0:
   \   000000F4   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000F8   F083BDE8           POP      {R4-R9,PC}       ;; return
     89          
     90          /*********************************************************************
     91          *
     92          *       WM__MoveTo
     93          */

   \                                 In section .text, align 4, keep-with-next
     94          void WM__MoveTo(WM_HWIN hWin, int x, int y) {
   \                     WM__MoveTo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     95            if (hWin) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0600000A           BEQ      ??WM__MoveTo_0
     96              WM_Obj* pWin = WM_HANDLE2PTR(hWin);
   \   00000018   ........           BL       GUI_ALLOC_h2p
     97              x -= pWin->Rect.x0;
     98              y -= pWin->Rect.y0;
     99              WM__MoveWindow(hWin, x, y);
   \   0000001C   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000020   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000024   012046E0           SUB      R2,R6,R1
   \   00000028   001045E0           SUB      R1,R5,R0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM__MoveWindow
    100            }
    101          }
   \                     ??WM__MoveTo_0:
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
    102          
    103          /*********************************************************************
    104          *
    105          *       Public API code
    106          *
    107          **********************************************************************
    108          */
    109          /*********************************************************************
    110          *
    111          *       WM_MoveWindow
    112          */

   \                                 In section .text, align 4, keep-with-next
    113          void WM_MoveWindow(WM_HWIN hWin, int dx, int dy) {
   \                     WM_MoveWindow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    114            WM_LOCK(); {
   \   00000010   ........           BL       GUI_Lock
    115              WM__MoveWindow(hWin, dx, dy);
   \   00000014   0620A0E1           MOV      R2,R6
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       WM__MoveWindow
    116            } WM_UNLOCK();
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   ........           B        GUI_Unlock       ;; tailcall
    117          }
    118          
    119          /*********************************************************************
    120          *
    121          *       WM_MoveTo
    122          */

   \                                 In section .text, align 4, keep-with-next
    123          void WM_MoveTo(WM_HWIN hWin, int x, int y) {
   \                     WM_MoveTo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    124            WM_LOCK(); {
   \   00000010   ........           BL       GUI_Lock
    125              WM__MoveTo(hWin, x, y);
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0700000A           BEQ      ??WM_MoveTo_0
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000028   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000002C   012046E0           SUB      R2,R6,R1
   \   00000030   001045E0           SUB      R1,R5,R0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM__MoveWindow
    126            } WM_UNLOCK();
   \                     ??WM_MoveTo_0:
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   ........           B        GUI_Unlock       ;; tailcall
    127          }
    128          
    129          #else
    130            void WM_Move_c(void) {} /* avoid empty object files */
    131          #endif   /* GUI_WINSUPPORT */
    132          
    133          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     WM_MoveTo            16
     WM_MoveWindow        16
     WM__MoveTo           16
     WM__MoveWindow       40
     _MoveDescendents     24


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     _MoveDescendents  116
     WM__MoveWindow    252
     WM__MoveTo         56
     WM_MoveWindow      44
     WM_MoveTo          68

 
 536 bytes in section .text
 
 536 bytes of CODE memory

Errors: none
Warnings: none
