###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:22 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_ReadRect.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_ReadRect.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LCD_ReadRect.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LCD_ReadRect.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_ReadRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCD_ReadRect.c
     19          Purpose     : Implementation of LCD_ReadRect
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          #define CLIP_X() \
     28            if (x0 < GUI_Context.ClipRect.x0) { x0 = GUI_Context.ClipRect.x0; } \
     29            if (x1 > GUI_Context.ClipRect.x1) { x1 = GUI_Context.ClipRect.x1; }
     30          
     31          #define CLIP_Y() \
     32            if (y0 < GUI_Context.ClipRect.y0) { y0 = GUI_Context.ClipRect.y0; } \
     33            if (y1 > GUI_Context.ClipRect.y1) { y1 = GUI_Context.ClipRect.y1; }
     34          
     35          /*********************************************************************
     36          *
     37          *       Public code
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       LCD_ReadRectEx
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          static void LCD_ReadRectEx(int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer, GUI_DEVICE * pDevice) {
   \                     LCD_ReadRectEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
     46            void       (*(* pfGetDevFunc)(GUI_DEVICE ** ppDevice, int Index))(void);
     47            unsigned   (* pfGetPixelIndex)(GUI_DEVICE *, int, int);
     48            void       (* pfReadRect)     (GUI_DEVICE *, int, int, int, int, LCD_PIXELINDEX *);
     49            
     50            pfGetDevFunc    = pDevice->pDeviceAPI->pfGetDevFunc;
   \   0000000C   34009DE5           LDR      R0,[SP, #+52]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0C0090E5           LDR      R0,[R0, #+12]
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   242090E5           LDR      R2,[R0, #+36]
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   30809DE5           LDR      R8,[SP, #+48]
     51            pfGetPixelIndex = pDevice->pDeviceAPI->pfGetPixelIndex;
   \   00000028   149090E5           LDR      R9,[R0, #+20]
     52            if (pfGetDevFunc) {
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0400000A           BEQ      ??LCD_ReadRectEx_0
     53              pfReadRect = (void (*)(GUI_DEVICE *, int, int, int, int, LCD_PIXELINDEX *))pfGetDevFunc(&pDevice, LCD_DEVFUNC_READRECT);
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   34008DE2           ADD      R0,SP,#+52
   \   0000003C   32FF2FE1           BLX      R2
   \   00000040   00C0B0E1           MOVS     R12,R0
     54            } else {
     55              pfReadRect = NULL;
     56            }
     57            if (!pfReadRect) {
   \   00000044   2B00001A           BNE      ??LCD_ReadRectEx_1
     58              U8 * pData;
     59              int BytesPerPixel;
     60              int BitsPerPixel;
     61              BitsPerPixel = LCD_GetBitsPerPixel();
   \                     ??LCD_ReadRectEx_0:
   \   00000048   ........           BL       LCD_GetBitsPerPixel
     62              if (BitsPerPixel <= 8) {
   \   0000004C   090050E3           CMP      R0,#+9
     63                BytesPerPixel = 1;
   \   00000050   01B0A0B3           MOVLT    R11,#+1
   \   00000054   020000BA           BLT      ??LCD_ReadRectEx_2
     64              } else if (BitsPerPixel <= 16) {
   \   00000058   110050E3           CMP      R0,#+17
     65                BytesPerPixel = 2;
   \   0000005C   02B0A0B3           MOVLT    R11,#+2
     66              } else {
     67                BytesPerPixel = 4;
   \   00000060   04B0A0A3           MOVGE    R11,#+4
     68              }
     69              pData = (U8 *)pBuffer;
   \                     ??LCD_ReadRectEx_2:
   \   00000064   050057E1           CMP      R7,R5
   \   00000068   290000BA           BLT      ??LCD_ReadRectEx_3
     70              while (y0 <= y1) {
     71                int x;
     72                for (x = x0; x <= x1; x++) {
   \                     ??LCD_ReadRectEx_4:
   \   0000006C   04A0A0E1           MOV      R10,R4
   \   00000070   0A0056E1           CMP      R6,R10
   \   00000074   1B0000BA           BLT      ??LCD_ReadRectEx_5
     73                  switch (BytesPerPixel) {
   \                     ??LCD_ReadRectEx_6:
   \   00000078   01005BE2           SUBS     R0,R11,#+1
   \   0000007C   0400000A           BEQ      ??LCD_ReadRectEx_7
   \   00000080   010050E2           SUBS     R0,R0,#+1
   \   00000084   0800000A           BEQ      ??LCD_ReadRectEx_8
   \   00000088   020050E2           SUBS     R0,R0,#+2
   \   0000008C   0C00000A           BEQ      ??LCD_ReadRectEx_9
   \   00000090   100000EA           B        ??LCD_ReadRectEx_10
     74                  case 1:
     75                    *((U8 *)pData) = pfGetPixelIndex(pDevice, x, y0);
   \                     ??LCD_ReadRectEx_7:
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0A10A0E1           MOV      R1,R10
   \   0000009C   34009DE5           LDR      R0,[SP, #+52]
   \   000000A0   39FF2FE1           BLX      R9
   \   000000A4   0000C8E5           STRB     R0,[R8, #+0]
     76                    break;
   \   000000A8   0A0000EA           B        ??LCD_ReadRectEx_10
     77                  case 2:
     78                    *((U16 *)pData) = pfGetPixelIndex(pDevice, x, y0);
   \                     ??LCD_ReadRectEx_8:
   \   000000AC   0520A0E1           MOV      R2,R5
   \   000000B0   0A10A0E1           MOV      R1,R10
   \   000000B4   34009DE5           LDR      R0,[SP, #+52]
   \   000000B8   39FF2FE1           BLX      R9
   \   000000BC   B000C8E1           STRH     R0,[R8, #+0]
     79                    break;
   \   000000C0   040000EA           B        ??LCD_ReadRectEx_10
     80                  case 4:
     81                    *((U32 *)pData) = pfGetPixelIndex(pDevice, x, y0);
   \                     ??LCD_ReadRectEx_9:
   \   000000C4   0520A0E1           MOV      R2,R5
   \   000000C8   0A10A0E1           MOV      R1,R10
   \   000000CC   34009DE5           LDR      R0,[SP, #+52]
   \   000000D0   39FF2FE1           BLX      R9
   \   000000D4   000088E5           STR      R0,[R8, #+0]
     82                    break;
     83                  }
     84                  pData += BytesPerPixel;
     85                }
   \                     ??LCD_ReadRectEx_10:
   \   000000D8   01A08AE2           ADD      R10,R10,#+1
   \   000000DC   08808BE0           ADD      R8,R11,R8
   \   000000E0   0A0056E1           CMP      R6,R10
   \   000000E4   E3FFFFAA           BGE      ??LCD_ReadRectEx_6
     86                y0++;
   \                     ??LCD_ReadRectEx_5:
   \   000000E8   015085E2           ADD      R5,R5,#+1
   \   000000EC   050057E1           CMP      R7,R5
   \   000000F0   070000BA           BLT      ??LCD_ReadRectEx_3
   \   000000F4   DCFFFFEA           B        ??LCD_ReadRectEx_4
     87              }
     88            } else {
     89              pfReadRect(pDevice, x0, y0, x1, y1, pBuffer);
   \                     ??LCD_ReadRectEx_1:
   \   000000F8   04808DE5           STR      R8,[SP, #+4]
   \   000000FC   00708DE5           STR      R7,[SP, #+0]
   \   00000100   0630A0E1           MOV      R3,R6
   \   00000104   0520A0E1           MOV      R2,R5
   \   00000108   0410A0E1           MOV      R1,R4
   \   0000010C   34009DE5           LDR      R0,[SP, #+52]
   \   00000110   3CFF2FE1           BLX      R12
     90            }
     91          }
   \                     ??LCD_ReadRectEx_3:
   \   00000114   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000118   F08FBDE8           POP      {R4-R11,PC}      ;; return
     92          
     93          /*********************************************************************
     94          *
     95          *       GUI_ReadRectEx
     96          */

   \                                 In section .text, align 4, keep-with-next
     97          void GUI_ReadRectEx(int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer, GUI_DEVICE * pDevice) {
   \                     GUI_ReadRectEx:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     98            CLIP_X();
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   F850D4E1           LDRSH    R5,[R4, #+8]
   \   00000010   18C09DE5           LDR      R12,[SP, #+24]
   \   00000014   1CE09DE5           LDR      LR,[SP, #+28]
   \   00000018   050050E1           CMP      R0,R5
   \   0000001C   0500A0B1           MOVLT    R0,R5
   \   00000020   FC50D4E1           LDRSH    R5,[R4, #+12]
   \   00000024   020055E1           CMP      R5,R2
   \   00000028   0520A0B1           MOVLT    R2,R5
     99            if (x1 < x0) {
   \   0000002C   000052E1           CMP      R2,R0
   \   00000030   130000BA           BLT      ??GUI_ReadRectEx_0
   \   00000034   FA50D4E1           LDRSH    R5,[R4, #+10]
    100              return;
    101            }
    102            CLIP_Y();
   \   00000038   FE40D4E1           LDRSH    R4,[R4, #+14]
   \   0000003C   050051E1           CMP      R1,R5
   \   00000040   0510A0B1           MOVLT    R1,R5
   \   00000044   030054E1           CMP      R4,R3
   \   00000048   0430A0B1           MOVLT    R3,R4
    103            if (y1 < y0) {
   \   0000004C   010053E1           CMP      R3,R1
   \   00000050   010000AA           BGE      ??GUI_ReadRectEx_1
   \   00000054   0A0000EA           B        ??GUI_ReadRectEx_0
    104              return;
    105            }
    106            while ((pDevice->pDeviceAPI->DeviceClassIndex != DEVICE_CLASS_DRIVER) &&
    107                   (pDevice->pDeviceAPI->DeviceClassIndex != DEVICE_CLASS_MEMDEV) &&
    108                   pDevice->pNext) {
    109              pDevice = pDevice->pNext;
   \                     ??GUI_ReadRectEx_2:
   \   00000058   04E0A0E1           MOV      LR,R4
    110            }
   \                     ??GUI_ReadRectEx_1:
   \   0000005C   0C409EE5           LDR      R4,[LR, #+12]
   \   00000060   005094E5           LDR      R5,[R4, #+0]
   \   00000064   000055E3           CMP      R5,#+0
   \   00000068   04005513           CMPNE    R5,#+4
   \   0000006C   00409E15           LDRNE    R4,[LR, #+0]
   \   00000070   00005413           CMPNE    R4,#+0
   \   00000074   F7FFFF1A           BNE      ??GUI_ReadRectEx_2
    111            LCD_ReadRectEx(x0, y0, x1, y1, pBuffer, pDevice);
   \   00000078   04E08DE5           STR      LR,[SP, #+4]
   \   0000007C   00C08DE5           STR      R12,[SP, #+0]
   \   00000080   ........           BL       LCD_ReadRectEx
    112          }
   \                     ??GUI_ReadRectEx_0:
   \   00000084   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000088   3080BDE8           POP      {R4,R5,PC}       ;; return
    113          
    114          /*********************************************************************
    115          *
    116          *       LCD_ReadRect
    117          */

   \                                 In section .text, align 4, keep-with-next
    118          void LCD_ReadRect(int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer, GUI_DEVICE * pDevice) {
   \                     LCD_ReadRect:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   \   0000000C   14E09DE5           LDR      LR,[SP, #+20]
   \   00000010   000000EA           B        ??LCD_ReadRect_0
    119            while ((pDevice->pDeviceAPI->DeviceClassIndex != DEVICE_CLASS_DRIVER) &&
    120                   pDevice->pNext) {
    121              pDevice = pDevice->pNext;
   \                     ??LCD_ReadRect_1:
   \   00000014   04E0A0E1           MOV      LR,R4
    122            }
   \                     ??LCD_ReadRect_0:
   \   00000018   0C409EE5           LDR      R4,[LR, #+12]
   \   0000001C   004094E5           LDR      R4,[R4, #+0]
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   00409E15           LDRNE    R4,[LR, #+0]
   \   00000028   00005413           CMPNE    R4,#+0
   \   0000002C   F8FFFF1A           BNE      ??LCD_ReadRect_1
    123            LCD_ReadRectEx(x0, y0, x1, y1, pBuffer, pDevice);
   \   00000030   04E08DE5           STR      LR,[SP, #+4]
   \   00000034   00C08DE5           STR      R12,[SP, #+0]
   \   00000038   ........           BL       LCD_ReadRectEx
    124          }
   \   0000003C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
    125          
    126          /*********************************************************************
    127          *
    128          *       GUI_ReadRect
    129          */

   \                                 In section .text, align 4, keep-with-next
    130          void GUI_ReadRect(int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer, GUI_DEVICE * pDevice) {
   \                     GUI_ReadRect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    131            GUI_ReadRectEx(x0, y0, x1, y1, pBuffer, pDevice);
   \   00000004   ........           LDR      LR,??DataTable1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   F890DEE1           LDRSH    R9,[LR, #+8]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0CD04DE2           SUB      SP,SP,#+12
   \   00000018   090050E1           CMP      R0,R9
   \   0000001C   0900A0B1           MOVLT    R0,R9
   \   00000020   FC90DEE1           LDRSH    R9,[LR, #+12]
   \   00000024   0150A0E1           MOV      R5,R1
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   020059E1           CMP      R9,R2
   \   00000030   0920A0B1           MOVLT    R2,R9
   \   00000034   28709DE5           LDR      R7,[SP, #+40]
   \   00000038   2CC09DE5           LDR      R12,[SP, #+44]
   \   0000003C   000052E1           CMP      R2,R0
   \   00000040   130000BA           BLT      ??GUI_ReadRect_0
   \   00000044   FA90DEE1           LDRSH    R9,[LR, #+10]
   \   00000048   FEE0DEE1           LDRSH    LR,[LR, #+14]
   \   0000004C   090051E1           CMP      R1,R9
   \   00000050   0910A0B1           MOVLT    R1,R9
   \   00000054   03005EE1           CMP      LR,R3
   \   00000058   0E30A0B1           MOVLT    R3,LR
   \   0000005C   010053E1           CMP      R3,R1
   \   00000060   010000AA           BGE      ??GUI_ReadRect_1
   \   00000064   0A0000EA           B        ??GUI_ReadRect_0
   \                     ??GUI_ReadRect_2:
   \   00000068   0EC0A0E1           MOV      R12,LR
   \                     ??GUI_ReadRect_1:
   \   0000006C   0CE09CE5           LDR      LR,[R12, #+12]
   \   00000070   00909EE5           LDR      R9,[LR, #+0]
   \   00000074   000059E3           CMP      R9,#+0
   \   00000078   04005913           CMPNE    R9,#+4
   \   0000007C   00E09C15           LDRNE    LR,[R12, #+0]
   \   00000080   00005E13           CMPNE    LR,#+0
   \   00000084   F7FFFF1A           BNE      ??GUI_ReadRect_2
   \   00000088   04C08DE5           STR      R12,[SP, #+4]
   \   0000008C   00708DE5           STR      R7,[SP, #+0]
   \   00000090   ........           BL       LCD_ReadRectEx
    132            GUI__ExpandPixelIndices(pBuffer, (x1 - x0 + 1) * (y1 - y0 + 1), LCD_GetBitsPerPixel());
   \                     ??GUI_ReadRect_0:
   \   00000094   ........           BL       LCD_GetBitsPerPixel
   \   00000098   0020A0E1           MOV      R2,R0
   \   0000009C   040046E0           SUB      R0,R6,R4
   \   000000A0   051048E0           SUB      R1,R8,R5
   \   000000A4   010080E2           ADD      R0,R0,#+1
   \   000000A8   013081E2           ADD      R3,R1,#+1
   \   000000AC   930001E0           MUL      R1,R3,R0
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
   \   000000B8   F043BDE8           POP      {R4-R9,LR}
   \   000000BC   ........           B        GUI__ExpandPixelIndices  ;; tailcall
    133          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    134          
    135          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     GUI_ReadRect       40
     GUI_ReadRectEx     24
     LCD_ReadRect       16
     LCD_ReadRectEx     48


   Section sizes:

     Function/Label Bytes
     -------------- -----
     LCD_ReadRectEx  284
     GUI_ReadRectEx  140
     LCD_ReadRect     68
     GUI_ReadRect    192
     ??DataTable1      4

 
 688 bytes in section .text
 
 688 bytes of CODE memory

Errors: none
Warnings: none
