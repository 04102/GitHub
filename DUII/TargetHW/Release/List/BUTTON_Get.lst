###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:46 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\BUTTON_Get.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\BUTTON_Get.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\BUTTON_Get.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\BUTTON_Get.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\BUTTON_Get.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : BUTTON_Get.c
     19          Purpose     : Button widget, various (optional) Get routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include "BUTTON.h"
     25          #include "BUTTON_Private.h"
     26          #include "GUI_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *       Exported functions
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       BUTTON_GetFont     
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          const GUI_FONT GUI_UNI_PTR * BUTTON_GetFont(BUTTON_Handle hObj) {
   \                     BUTTON_GetFont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
     41            const GUI_FONT GUI_UNI_PTR * pFont = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
     42            if (hObj) {
   \   00000010   0500000A           BEQ      ??BUTTON_GetFont_0
     43              BUTTON_Obj * pObj;
     44              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
     45              pObj = BUTTON_LOCK_H(hObj);
     46              pFont = pObj->Props.pFont;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   545090E5           LDR      R5,[R0, #+84]
     47              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
     48              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
     49            }
     50            return pFont;
   \                     ??BUTTON_GetFont_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
     51          }
     52          
     53          /*********************************************************************
     54          *
     55          *       BUTTON_GetText  
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          void BUTTON_GetText(BUTTON_Handle hObj, char * pBuffer, int MaxLen) {
   \                     BUTTON_GetText:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0260A0E1           MOV      R6,R2
     58            if (hObj) {
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   1700000A           BEQ      ??BUTTON_GetText_0
     59              BUTTON_Obj * pObj;
     60              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     61              pObj = BUTTON_LOCK_H(hObj);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       GUI_ALLOC_LockH
     62              if (pObj->hpText) {
   \   00000028   640090E5           LDR      R0,[R0, #+100]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0E00000A           BEQ      ??BUTTON_GetText_1
     63                const char * pText = (const char *)GUI_LOCK_H(pObj->hpText);
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   0050A0E1           MOV      R5,R0
     64                int Len = strlen(pText);
   \   0000003C   ........           BL       strlen
   \   00000040   0070A0E1           MOV      R7,R0
     65                if (Len > (MaxLen - 1)) {
   \   00000044   010046E2           SUB      R0,R6,#+1
   \   00000048   070050E1           CMP      R0,R7
     66                  Len = MaxLen - 1;
   \   0000004C   0070A0B1           MOVLT    R7,R0
     67                }
     68                GUI_MEMCPY((void *)pBuffer, (const void *)pText, Len);
   \   00000050   0720A0E1           MOV      R2,R7
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       __aeabi_memcpy
     69                GUI_UNLOCK_H(pText);
   \   00000060   ........           BL       GUI_ALLOC_UnlockH
     70                *(pBuffer + Len) = 0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0400C7E7           STRB     R0,[R7, +R4]
   \   0000006C   000000EA           B        ??BUTTON_GetText_2
     71              } else {
     72                *pBuffer = 0;     /* Empty string */
   \                     ??BUTTON_GetText_1:
   \   00000070   0000C4E5           STRB     R0,[R4, #+0]
     73              }
     74              GUI_UNLOCK_H(pObj);
   \                     ??BUTTON_GetText_2:
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
     75              WM_UNLOCK();
   \   00000078   ........           BL       GUI_Unlock
     76            }
     77          }
   \                     ??BUTTON_GetText_0:
   \   0000007C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000080   F080BDE8           POP      {R4-R7,PC}       ;; return
     78          
     79          #else                            /* Avoid problems with empty object modules */
     80            void BUTTON_Get_C(void) {}
     81          #endif

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     BUTTON_GetFont     16
     BUTTON_GetText     24


   Section sizes:

     Function/Label Bytes
     -------------- -----
     BUTTON_GetFont   56
     BUTTON_GetText  132

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
