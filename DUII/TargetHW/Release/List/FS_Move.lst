###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:03 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Move.c                            #
#    Command line =  C:\DUII\TargetHW\FS\FS_Move.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Move.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Move.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Move.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Move.c
     19          Purpose     : Implementation of FS_Move
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          #include "FS_ConfDefaults.h"        /* FS Configuration */
     30          #include "FS_Int.h"
     31          #include "FS_OS.h"
     32          #include "FS_CLib.h"
     33          
     34          
     35          /*********************************************************************
     36          *
     37          *       Public code
     38          *
     39          **********************************************************************
     40          */
     41          
     42          
     43          /*********************************************************************
     44          *
     45          *       FS_Move
     46          *
     47          *  Function description:
     48          *    Moves a file/directory.
     49          *
     50          *  Parameters:
     51          *    sFullNameSrc     - Fully qualified file name of the source file, e.g. ram:Src.txt
     52          *    sFullNameDest    - Fully qualified file name of the source file, e.g. ram:Dest.txt
     53          *
     54          *  Return value:
     55          *    ==0         - File has been moved.
     56          *    ==-1        - An error has occurred.
     57          *
     58          *  Notes
     59          *    (1) Move or copy
     60          *        If the files are on the same volume, the file is moved,
     61          *        otherwise copied and the original deleted.
     62          */

   \                                 In section .text, align 4, keep-with-next
     63          int FS_Move(const char * sFullNameSrc, const char * sFullNameDest) {
   \                     FS_Move:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0150A0E1           MOV      R5,R1
     64            const char * sPathNameSrc;
     65            const char * sPathNameDest;
     66            FS_VOLUME  * pVolumeSrc;
     67            FS_VOLUME  * pVolumeDest;
     68            int          r;
     69          
     70            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
     71            r = -1;
   \   00000018   0060E0E3           MVN      R6,#+0
     72            /* Find correct FSL  (device:unit:name) */
     73            pVolumeSrc  = FS__FindVolume(sFullNameSrc,  &sPathNameSrc );
   \   0000001C   04108DE2           ADD      R1,SP,#+4
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0070A0E1           MOV      R7,R0
     74            pVolumeDest = FS__FindVolume(sFullNameDest, &sPathNameDest);
     75            if (pVolumeSrc == pVolumeDest) {        /* Note 1 */
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       FS__FindVolume
   \   00000038   000057E1           CMP      R7,R0
   \   0000003C   0B00001A           BNE      ??FS_Move_0
     76              if (FS__AutoMount(pVolumeSrc) == FS_MOUNT_RW)  {
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           BL       FS__AutoMount
   \   00000048   030050E3           CMP      R0,#+3
   \   0000004C   0F00001A           BNE      ??FS_Move_1
     77                FS_LOCK_DRIVER(&pVolumeSrc->Partition.Device);
     78                FS_JOURNAL_BEGIN(pVolumeSrc);
     79                r = FS_MOVE(sPathNameSrc, sPathNameDest, pVolumeSrc);      /* Call the FSL function to move the file/directory  */
   \   00000050   0720A0E1           MOV      R2,R7
   \   00000054   00109DE5           LDR      R1,[SP, #+0]
   \   00000058   04009DE5           LDR      R0,[SP, #+4]
   \   0000005C   ........           BL       FS_FAT_Move
   \   00000060   0060B0E1           MOVS     R6,R0
     80                FS_JOURNAL_END  (pVolumeSrc);
     81                FS_UNLOCK_DRIVER(&pVolumeSrc->Partition.Device);
     82                if (r) {
   \   00000064   0900000A           BEQ      ??FS_Move_1
     83                  r = -1;
   \   00000068   0060E0E3           MVN      R6,#+0
   \   0000006C   070000EA           B        ??FS_Move_1
     84                }
     85              }
     86            } else {
     87              if (FS__CopyFile(sFullNameSrc, sFullNameDest) == 0) {
   \                     ??FS_Move_0:
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       FS__CopyFile
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0200001A           BNE      ??FS_Move_1
     88                r = FS__Remove(sFullNameSrc);
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       FS__Remove
   \   0000008C   0060A0E1           MOV      R6,R0
     89              }
     90            }
     91            FS_UNLOCK();
   \                     ??FS_Move_1:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   ........           BL       FS_OS_Unlock
     92            return r;
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   0CD08DE2           ADD      SP,SP,#+12
   \   000000A0   F080BDE8           POP      {R4-R7,PC}       ;; return
     93          }
     94          
     95          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     FS_Move      32


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS_Move         164

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
