###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_SetString.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_SetString.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTBOX_SetString.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTBOX_SetString.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_SetString.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_SetString.c
     19          Purpose     : Implementation of LISTBOX_SetString
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include "LISTBOX_Private.h"
     25          
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          
     30          /*********************************************************************
     31          *
     32          *       Public routines
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       LISTBOX_SetString
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void LISTBOX_SetString(LISTBOX_Handle hObj, const char* s, unsigned int Index) {
   \                     LISTBOX_SetString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     41            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   2400000A           BEQ      ??LISTBOX_SetString_0
     42              LISTBOX_Obj * pObj;
     43              unsigned NumItems;
     44              GUI_ARRAY ItemArray;
     45              LISTBOX_ITEM * pItem;
     46              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     47          
     48              pObj = LISTBOX_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0070A0E1           MOV      R7,R0
     49              NumItems = LISTBOX__GetNumItems(pObj);
   \   00000028   ........           BL       LISTBOX__GetNumItems
   \   0000002C   0080A0E1           MOV      R8,R0
     50              ItemArray = pObj->ItemArray;
   \   00000030   347097E5           LDR      R7,[R7, #+52]
     51              GUI_UNLOCK_H(pObj);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
     52              if (Index < NumItems) {
   \   00000038   080056E1           CMP      R6,R8
   \   0000003C   1900002A           BCS      ??LISTBOX_SetString_1
     53                pItem = (LISTBOX_ITEM *)GUI_ARRAY_ResizeItemLocked(ItemArray, Index, sizeof(LISTBOX_ITEM) + strlen(s));
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       strlen
   \   00000048   0C2080E2           ADD      R2,R0,#+12
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           BL       GUI_ARRAY_ResizeItemLocked
     54                if (pItem) {
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   1100000A           BEQ      ??LISTBOX_SetString_1
     55                  strcpy(pItem->acText, s);
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   090080E2           ADD      R0,R0,#+9
   \   00000068   ........           BL       strcpy
     56                  GUI_UNLOCK_H(pItem);
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
     57                  pObj = LISTBOX_LOCK_H(hObj);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       GUI_ALLOC_LockH
   \   00000078   0070A0E1           MOV      R7,R0
     58                  pObj->ContentSizeX = 0;
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   B609C7E1           STRH     R0,[R7, #+150]
     59                  LISTBOX__InvalidateItemSize(pObj, Index);
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           BL       LISTBOX__InvalidateItemSize
     60                  GUI_UNLOCK_H(pObj);
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
     61                  LISTBOX_UpdateScrollers(hObj);
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       LISTBOX_UpdateScrollers
     62                  LISTBOX__InvalidateItem(hObj, Index);
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       LISTBOX__InvalidateItem
     63                }
     64              }
     65              WM_UNLOCK();
   \                     ??LISTBOX_SetString_1:
   \   000000A8   ........           BL       GUI_Unlock
     66            }
     67          }
   \                     ??LISTBOX_SetString_0:
   \   000000AC   F081BDE8           POP      {R4-R8,PC}       ;; return
     68          
     69          
     70          #else                            /* Avoid problems with empty object modules */
     71            void LISTBOX_SetString_C(void) {}
     72          #endif

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     LISTBOX_SetString     24


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     LISTBOX_SetString  176

 
 176 bytes in section .text
 
 176 bytes of CODE memory

Errors: none
Warnings: none
