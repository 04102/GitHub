###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_AssignCache.c                     #
#    Command line =  C:\DUII\TargetHW\FS\FS_AssignCache.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_AssignCache.lst         #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_AssignCache.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_AssignCache.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_AssignCache.c
     19          Purpose     : Implementation of Cache functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          #if (FS_SUPPORT_CACHE)
     33          
     34          /*********************************************************************
     35          *
     36          *       Global code
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       FS_AssignCache
     44          *
     45          *  Function description:
     46          *    Adds a cache to a device
     47          *
     48          *  Return value
     49          *    Number of sectors which fit in cache
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          U32 FS_AssignCache(const char * pName, void * pData, I32 NumBytes, FS_INIT_CACHE * pfInit) {
   \                     FS_AssignCache:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     52            U32 r;
     53            FS_VOLUME * pVolume;
     54          
     55            FS_LOCK();
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
     56            pVolume = FS__FindVolume(pName, NULL);
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0040B0E1           MOVS     R4,R0
     57            r = 0;
   \   0000002C   0080A0E3           MOV      R8,#+0
     58            if (pVolume) {
   \   00000030   1600000A           BEQ      ??FS_AssignCache_0
     59              FS_DEVICE    * pDevice;
     60          
     61              pDevice   = &pVolume->Partition.Device;
     62              FS_LOCK_DRIVER(pDevice);
     63              if (pDevice->Data.pCacheAPI) {
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0C309015           LDRNE    R3,[R0, #+12]
   \   00000040   00005313           CMPNE    R3,#+0
   \   00000044   0400000A           BEQ      ??FS_AssignCache_1
   \   00000048   7110A0E3           MOV      R1,#+113
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   33FF2FE1           BLX      R3
     64                FS__CACHE_CommandVolume(pVolume, FS_CMD_CACHE_CLEAN, NULL);
     65              }
     66              
     67              if (NumBytes == 0) {
   \                     ??FS_AssignCache_1:
   \   0000005C   000056E3           CMP      R6,#+0
     68                pfInit = NULL;
   \   00000060   0070A003           MOVEQ    R7,#+0
     69              }
     70              if (pData == NULL) {
   \   00000064   000055E3           CMP      R5,#+0
     71                pfInit = NULL;
     72              }
     73              if (pfInit) {
   \   00000068   00005713           CMPNE    R7,#+0
   \   0000006C   0500000A           BEQ      ??FS_AssignCache_2
     74                r = (*pfInit)(pDevice, pData, NumBytes);
   \   00000070   0620A0E1           MOV      R2,R6
   \   00000074   0510A0E1           MOV      R1,R5
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   37FF2FE1           BLX      R7
   \   00000080   0080A0E1           MOV      R8,R0
   \   00000084   010000EA           B        ??FS_AssignCache_0
     75              } else {
     76                pDevice->Data.pCacheAPI  = NULL;
   \                     ??FS_AssignCache_2:
   \   00000088   088084E5           STR      R8,[R4, #+8]
     77                pDevice->Data.pCacheData = NULL;
   \   0000008C   0C8084E5           STR      R8,[R4, #+12]
     78                r = 0;
     79              }
     80              FS_UNLOCK_DRIVER(pDevice);
     81            }
     82            FS_UNLOCK();
   \                     ??FS_AssignCache_0:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   ........           BL       FS_OS_Unlock
     83            return r;
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   F081BDE8           POP      {R4-R8,PC}       ;; return
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       FS__CACHE_CommandDeviceNL
     89          *
     90          *  Function description:
     91          *    Function that sends a command to a cache module, if attached to the specific volume.
     92          *    This function does not lock.
     93          *
     94          *  Return value:
     95          *    Unsupported command:    -1
     96          *    Supported commands:     <0: Error. Precise value depends on command
     97          */

   \                                 In section .text, align 4, keep-with-next
     98          int FS__CACHE_CommandDeviceNL(FS_DEVICE * pDevice, int Cmd, void * pData) {
   \                     FS__CACHE_CommandDeviceNL:
   \   00000000   00402DE9           PUSH     {LR}
     99            int r;
    100            const FS_CACHE_API * pCacheAPI;
    101          
    102            r = -1;
    103            pCacheAPI = pDevice->Data.pCacheAPI;
   \   00000004   08C090E5           LDR      R12,[R0, #+8]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    104            if (pCacheAPI) {
   \   0000000C   00005CE3           CMP      R12,#+0
    105              if (pCacheAPI->pfCommand) {
   \   00000010   0CC09C15           LDRNE    R12,[R12, #+12]
   \   00000014   0030E0E3           MVN      R3,#+0
   \   00000018   00005C13           CMPNE    R12,#+0
   \   0000001C   0100000A           BEQ      ??FS__CACHE_CommandDeviceNL_0
    106                r = pCacheAPI->pfCommand(pDevice, Cmd, pData);
   \   00000020   3CFF2FE1           BLX      R12
   \   00000024   0030A0E1           MOV      R3,R0
    107              }
    108            }
    109            return r;
   \                     ??FS__CACHE_CommandDeviceNL_0:
   \   00000028   0300A0E1           MOV      R0,R3
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   0080BDE8           POP      {PC}             ;; return
    110          }
    111          
    112          
    113          /*********************************************************************
    114          *
    115          *       FS__CACHE_CommandDevice
    116          *
    117          *  Function description:
    118          *    Function that sends a command to a cache module, if attached to the specific volume.
    119          *    This function does a driver lock and simply calls the non-locking function.
    120          *
    121          *  Return value:
    122          *    Unsupported command:    -1
    123          *    Supported commands:     <0: Error. Precise value depends on command
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          int FS__CACHE_CommandDevice(FS_DEVICE * pDevice, int Cmd, void * pData) {
   \                     FS__CACHE_CommandDevice:
   \   00000000   00402DE9           PUSH     {LR}
    126            int r;
    127          
    128            r = -1;
    129            FS_LOCK_DRIVER(pDevice);
    130            r = FS__CACHE_CommandDeviceNL(pDevice, Cmd, pData);
   \   00000004   08C090E5           LDR      R12,[R0, #+8]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   00005CE3           CMP      R12,#+0
   \   00000010   0CC09C15           LDRNE    R12,[R12, #+12]
   \   00000014   0030E0E3           MVN      R3,#+0
   \   00000018   00005C13           CMPNE    R12,#+0
   \   0000001C   0100000A           BEQ      ??FS__CACHE_CommandDevice_0
   \   00000020   3CFF2FE1           BLX      R12
   \   00000024   0030A0E1           MOV      R3,R0
    131            FS_UNLOCK_DRIVER(pDevice);
    132            return r;
   \                     ??FS__CACHE_CommandDevice_0:
   \   00000028   0300A0E1           MOV      R0,R3
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   0080BDE8           POP      {PC}             ;; return
    133          }
    134          
    135          
    136          
    137          /*********************************************************************
    138          *
    139          *       FS__CACHE_CommandVolume
    140          *
    141          *  Function description:
    142          *    Function that sends a command to a cache module, if attached to the specific volume.
    143          *    This function extracts the device pointer from pVolume and calls the
    144          *    FS__CACHE_CommandDevice.
    145          *
    146          *  Return value:
    147          *    Unsupported command:    -1
    148          *    Supported commands:     <0: Error. Precise value depends on command
    149          */

   \                                 In section .text, align 4, keep-with-next
    150          int FS__CACHE_CommandVolume(FS_VOLUME * pVolume, int Cmd, void * pData) {
   \                     FS__CACHE_CommandVolume:
   \   00000000   00402DE9           PUSH     {LR}
    151            int r;
    152          
    153            r = -1;
    154            if (pVolume) {
   \   00000004   000050E3           CMP      R0,#+0
    155              FS_DEVICE * pDevice;
    156          
    157              pDevice = &pVolume->Partition.Device;
    158              r = FS__CACHE_CommandDevice(pDevice, Cmd, pData);
   \   00000008   08C09015           LDRNE    R12,[R0, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   00005C13           CMPNE    R12,#+0
   \   00000014   0CC09C15           LDRNE    R12,[R12, #+12]
   \   00000018   0030E0E3           MVN      R3,#+0
   \   0000001C   00005C13           CMPNE    R12,#+0
   \   00000020   0100000A           BEQ      ??FS__CACHE_CommandVolume_0
   \   00000024   3CFF2FE1           BLX      R12
   \   00000028   0030A0E1           MOV      R3,R0
    159            }
    160            return r;
   \                     ??FS__CACHE_CommandVolume_0:
   \   0000002C   0300A0E1           MOV      R0,R3
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   0080BDE8           POP      {PC}             ;; return
    161          }
    162          
    163          /*********************************************************************
    164          *
    165          *       FS__CACHE_CleanNL
    166          *
    167          *  Function description:
    168          *    Function that sends a command to a cache module, if attached to the specific volume.
    169          *    This function extracts the device pointer from pVolume and calls the
    170          *    FS__CACHE_CommandDevice.
    171          *
    172          *  Return value:
    173          *    Unsupported command:    -1
    174          *    Supported commands:     <0: Error. Precise value depends on command
    175          */

   \                                 In section .text, align 4, keep-with-next
    176          void  FS__CACHE_CleanNL(FS_DEVICE * pDevice) {
    177            FS__CACHE_CommandDeviceNL(pDevice,  FS_CMD_CACHE_CLEAN, NULL);
   \                     FS__CACHE_CleanNL:
   \   00000000   081090E5           LDR      R1,[R0, #+8]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0C309115           LDRNE    R3,[R1, #+12]
   \   0000000C   00005313           CMPNE    R3,#+0
   \   00000010   0000001A           BNE      ??FS__CACHE_CleanNL_0
   \   00000014   1EFF2FE1           BX       LR
   \                     ??FS__CACHE_CleanNL_0:
   \   00000018   00402DE9           PUSH     {LR}
   \   0000001C   7110A0E3           MOV      R1,#+113
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   5C1D81E3           ORR      R1,R1,#0x1700
   \   0000002C   33FF2FE1           BLX      R3
    178          }
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   0080BDE8           POP      {PC}             ;; return
    179          
    180          /*********************************************************************
    181          *
    182          *       FS__CACHE_Clean
    183          *
    184          *  Function description:
    185          *    Function that sends a command to a cache module, if attached to the specific volume.
    186          *    This function extracts the device pointer from pVolume and calls the
    187          *    FS__CACHE_CommandDevice.
    188          *
    189          *  Return value:
    190          *    Unsupported command:    -1
    191          *    Supported commands:     <0: Error. Precise value depends on command
    192          */

   \                                 In section .text, align 4, keep-with-next
    193          void  FS__CACHE_Clean(FS_VOLUME * pVolume) {
    194            FS_DEVICE * pDevice;
    195          
    196            pDevice = &pVolume->Partition.Device;
    197            FS_LOCK_DRIVER(pDevice);
    198            FS__CACHE_CleanNL(pDevice);
   \                     FS__CACHE_Clean:
   \   00000000   081090E5           LDR      R1,[R0, #+8]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0C309115           LDRNE    R3,[R1, #+12]
   \   0000000C   00005313           CMPNE    R3,#+0
   \   00000010   0000001A           BNE      ??FS__CACHE_Clean_0
   \   00000014   1EFF2FE1           BX       LR
   \                     ??FS__CACHE_Clean_0:
   \   00000018   00402DE9           PUSH     {LR}
   \   0000001C   7110A0E3           MOV      R1,#+113
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   5C1D81E3           ORR      R1,R1,#0x1700
   \   0000002C   33FF2FE1           BLX      R3
    199            FS_UNLOCK_DRIVER(pDevice);
    200          }
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   0080BDE8           POP      {PC}             ;; return
    201          
    202          /*********************************************************************
    203          *
    204          *       FS_CACHE_Command
    205          *
    206          *  Function description:
    207          *    Sends a command to cache module.
    208          *
    209          *  Return value:
    210          *    Unsupported command:    -1
    211          *    Supported commands:     <0: Error. Precise value depends on command
    212          */

   \                                 In section .text, align 4, keep-with-next
    213          int FS_CACHE_Command(const char * pName, int Cmd, void * pData) {
   \                     FS_CACHE_Command:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    214            int r;
    215            FS_VOLUME * pVolume;
    216          
    217            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    218            pVolume = FS__FindVolume(pName, NULL);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS__FindVolume
    219            r = FS__CACHE_CommandVolume(pVolume, Cmd, pData);
   \   00000024   0040E0E3           MVN      R4,#+0
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0900000A           BEQ      ??FS_CACHE_Command_0
   \   00000030   081090E5           LDR      R1,[R0, #+8]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   0C309115           LDRNE    R3,[R1, #+12]
   \   0000003C   00005313           CMPNE    R3,#+0
   \   00000040   0300000A           BEQ      ??FS_CACHE_Command_1
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   33FF2FE1           BLX      R3
   \   00000050   0040A0E1           MOV      R4,R0
    220            FS_UNLOCK();
   \                     ??FS_CACHE_Command_1:
   \   00000054   0000A0E3           MOV      R0,#+0
   \                     ??FS_CACHE_Command_0:
   \   00000058   ........           BL       FS_OS_Unlock
    221            return r;
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    222          }
    223          
    224          /*********************************************************************
    225          *
    226          *       FS_CACHE_SetMode
    227          *
    228          *  Function description:
    229          *    Sets the mode of a specific cache.
    230          */

   \                                 In section .text, align 4, keep-with-next
    231          int FS_CACHE_SetMode(const char * pName, int TypeMask, int ModeMask) {
   \                     FS_CACHE_SetMode:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    232            int r;
    233            CACHE_MODE CacheMode;
    234          
    235            CacheMode.TypeMask = TypeMask;
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
    236            CacheMode.ModeMask = ModeMask;
   \   00000010   04208DE5           STR      R2,[SP, #+4]
    237            r = FS_CACHE_Command(pName, FS_CMD_CACHE_SET_MODE, &CacheMode);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0040E0E3           MVN      R4,#+0
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0A00000A           BEQ      ??FS_CACHE_SetMode_0
   \   00000034   081090E5           LDR      R1,[R0, #+8]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0C309115           LDRNE    R3,[R1, #+12]
   \   00000040   00005313           CMPNE    R3,#+0
   \   00000044   0400000A           BEQ      ??FS_CACHE_SetMode_1
   \   00000048   7010A0E3           MOV      R1,#+112
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000054   33FF2FE1           BLX      R3
   \   00000058   0040A0E1           MOV      R4,R0
   \                     ??FS_CACHE_SetMode_1:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \                     ??FS_CACHE_SetMode_0:
   \   00000060   ........           BL       FS_OS_Unlock
    238            return r;
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   08D08DE2           ADD      SP,SP,#+8
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    239          }
    240          
    241          /*********************************************************************
    242          *
    243          *       FS_CACHE_SetQuota
    244          *
    245          *  Function description:
    246          *    Sets the quotas of a specific drive cache.
    247          */

   \                                 In section .text, align 4, keep-with-next
    248          int FS_CACHE_SetQuota(const char * pName, int TypeMask, U32 NumSectors) {
   \                     FS_CACHE_SetQuota:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    249            int r;
    250            CACHE_QUOTA CacheQuota;
    251          
    252            CacheQuota.TypeMask   = TypeMask;
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
    253            CacheQuota.NumSectors = NumSectors;
   \   00000010   04208DE5           STR      R2,[SP, #+4]
    254            r = FS_CACHE_Command(pName, FS_CMD_CACHE_SET_QUOTA, &CacheQuota);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       FS_OS_Lock
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__FindVolume
   \   00000028   0040E0E3           MVN      R4,#+0
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0A00000A           BEQ      ??FS_CACHE_SetQuota_0
   \   00000034   081090E5           LDR      R1,[R0, #+8]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0C309115           LDRNE    R3,[R1, #+12]
   \   00000040   00005313           CMPNE    R3,#+0
   \   00000044   0400000A           BEQ      ??FS_CACHE_SetQuota_1
   \   00000048   7210A0E3           MOV      R1,#+114
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000054   33FF2FE1           BLX      R3
   \   00000058   0040A0E1           MOV      R4,R0
   \                     ??FS_CACHE_SetQuota_1:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \                     ??FS_CACHE_SetQuota_0:
   \   00000060   ........           BL       FS_OS_Unlock
    255            return r;
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   08D08DE2           ADD      SP,SP,#+8
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    256          }
    257          
    258          /*********************************************************************
    259          *
    260          *       FS_CACHE_Clean
    261          *
    262          *  Function description:
    263          *    Cleans the cache module if any dirty sectors need to be written.
    264          *
    265          */

   \                                 In section .text, align 4, keep-with-next
    266          void FS_CACHE_Clean(const char * pName) {
   \                     FS_CACHE_Clean:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    267            FS_VOLUME * pVolume;
    268          
    269            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    270            pVolume = FS__FindVolume(pName, NULL);
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       FS__FindVolume
    271            if (pVolume) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0900000A           BEQ      ??FS_CACHE_Clean_0
    272              FS__CACHE_Clean(pVolume);
   \   00000024   081090E5           LDR      R1,[R0, #+8]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0C309115           LDRNE    R3,[R1, #+12]
   \   00000030   00005313           CMPNE    R3,#+0
   \   00000034   0300000A           BEQ      ??FS_CACHE_Clean_1
   \   00000038   7110A0E3           MOV      R1,#+113
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000044   33FF2FE1           BLX      R3
    273            }
    274            FS_UNLOCK();
   \                     ??FS_CACHE_Clean_1:
   \   00000048   0000A0E3           MOV      R0,#+0
   \                     ??FS_CACHE_Clean_0:
   \   0000004C   1040BDE8           POP      {R4,LR}
   \   00000050   ........           B        FS_OS_Unlock     ;; tailcall
    275          }
    276          
    277          /*********************************************************************
    278          *
    279          *       FS_CACHE_Invalidate
    280          *
    281          *  Function description:
    282          *    Invalidates the cache entries.
    283          *
    284          *  Parameters:
    285          *    sVolumeName    - name of the volume to invalidate the cache.
    286          *  
    287          *  Return value:
    288          *    == 0      - Success
    289          *    != 0      - Error
    290          */

   \                                 In section .text, align 4, keep-with-next
    291          int FS_CACHE_Invalidate(const char * sVolumeName) {
   \                     FS_CACHE_Invalidate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    292            FS_VOLUME * pVolume;
    293            int         r = -1;
   \   0000000C   0050E0E3           MVN      R5,#+0
    294          
    295            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    296            pVolume = FS__FindVolume(sVolumeName, NULL);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS__FindVolume
    297            if (pVolume) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0A00000A           BEQ      ??FS_CACHE_Invalidate_0
    298              r = FS__CACHE_CommandVolume(pVolume, FS_CMD_CACHE_INVALIDATE, pVolume->Partition.Device.Data.pCacheData);
   \   0000002C   081090E5           LDR      R1,[R0, #+8]
   \   00000030   0C2090E5           LDR      R2,[R0, #+12]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   0C309115           LDRNE    R3,[R1, #+12]
   \   0000003C   00005313           CMPNE    R3,#+0
   \   00000040   0300000A           BEQ      ??FS_CACHE_Invalidate_1
   \   00000044   7410A0E3           MOV      R1,#+116
   \   00000048   5C1D81E3           ORR      R1,R1,#0x1700
   \   0000004C   33FF2FE1           BLX      R3
   \   00000050   0050A0E1           MOV      R5,R0
    299            }
    300            FS_UNLOCK();
   \                     ??FS_CACHE_Invalidate_1:
   \   00000054   0000A0E3           MOV      R0,#+0
   \                     ??FS_CACHE_Invalidate_0:
   \   00000058   ........           BL       FS_OS_Unlock
    301            return r;
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    302          }
    303          
    304          
    305          #endif /* FS_SUPPORT_CACHE */
    306          
    307          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     FS_AssignCache                24
     FS_CACHE_Clean                 8
     FS_CACHE_Command              16
     FS_CACHE_Invalidate           16
     FS_CACHE_SetMode              16
     FS_CACHE_SetQuota             16
     FS__CACHE_Clean                8
     FS__CACHE_CleanNL              8
     FS__CACHE_CommandDevice        8
     FS__CACHE_CommandDeviceNL      8
     FS__CACHE_CommandVolume        8


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     FS_AssignCache             160
     FS__CACHE_CommandDeviceNL   52
     FS__CACHE_CommandDevice     52
     FS__CACHE_CommandVolume     56
     FS__CACHE_CleanNL           56
     FS__CACHE_Clean             56
     FS_CACHE_Command           100
     FS_CACHE_SetMode           112
     FS_CACHE_SetQuota          112
     FS_CACHE_Clean              84
     FS_CACHE_Invalidate        104

 
 944 bytes in section .text
 
 944 bytes of CODE memory

Errors: none
Warnings: none
