###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:29:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\GMeter.cpp                                  #
#    Command line =  C:\DUII\DUII\GMeter.cpp -D DEBUG=1 -D SDRAM_TARGET=1 -D  #
#                    USB_IS_HIGH_SPEED -D NOPROFILER -D OS_TRACE=0 -D         #
#                    OS_VIEW_ENABLE=0 -lCN C:\DUII\TargetHW\Release\List\ -o  #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --eec++ --no_static_destruction                          #
#    List file    =  C:\DUII\TargetHW\Release\List\GMeter.lst                 #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GMeter.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\GMeter.cpp
      1          
      2          
      3          /****************************************************************
      4          *							Track Systems						*
      5          -----------------------------------------------------------------
      6          File: GMeter.cpp
      7          Description: gauge object header file
      8          -----------------------------------------------------------------
      9          */
     10          #include "GUI.h"
     11          #include "GMeter.hpp"
     12          #include <math.h>
     13          #include "commondefs.h"
     14          #include "GMeterScreen.h"
     15          #include "ConfigScreens.h"
     16          #include "RunningGauges.h"
     17          #include "DUII.h"
     18          #include "DataHandler.h"
     19          
     20          
     21          extern WM_HWIN hGMeterScreen;
     22          extern "C" {
     23          extern GUI_CONST_STORAGE GUI_BITMAP bmGMeterBackground;
     24          }
     25          
     26          #define	RIGHT_COLUMN	385
     27          // 2 second persist time
     28          #define	PERSIST_TIME	3500
     29          #define	PRIME_DOT       0x0000FF00
     30          #define	NUM_DOTS		(PERSIST_TIME / G_METER_SCREEN_REFRESH_TIME)
     31          #define	START_COLOR		GUI_DARKGRAY
     32          #define	FINISH_COLOR	GUI_LIGHTGRAY
     33          //#define	COLOR_STEP		((FINISH_COLOR - START_COLOR) / NUM_DOTS)
     34          #define	COLOR_STEP		0x00040404
     35          
     36          struct DOT {
     37          	int x;
     38          	int y;
     39          };
     40          

   \                                 In section .bss, align 4
     41          struct DOT dotArray[NUM_DOTS];
   \                     dotArray:
   \   00000000                      DS8 560
     42          int dotIndex = 0;
   \                     dotIndex:
   \   00000230                      DS8 4
     43          
     44          

   \                                 In section .text, align 4, keep-with-next
     45          GMeter::GMeter(int iMaxG)
     46          {
   \                     _ZN6GMeterC1Ei:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     47          
     48          	xCenter = yCenter = 0;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   205084E5           STR      R5,[R4, #+32]
   \   00000010   1C5084E5           STR      R5,[R4, #+28]
     49          	mMemBackground = 0;
   \   00000014   405084E5           STR      R5,[R4, #+64]
     50          	
     51          	x = GMETER_CIRCLE_X;
   \   00000018   7300A0E3           MOV      R0,#+115
   \   0000001C   0C0084E5           STR      R0,[R4, #+12]
     52          	y = GMETER_CIRCLE_Y;
   \   00000020   0A00A0E3           MOV      R0,#+10
   \   00000024   100084E5           STR      R0,[R4, #+16]
     53          
     54          	Radius = GMETER_RADIUS;
   \   00000028   7D00A0E3           MOV      R0,#+125
   \   0000002C   240084E5           STR      R0,[R4, #+36]
     55          	MaxG = iMaxG;
   \   00000030   001084E5           STR      R1,[R4, #+0]
     56          
     57          	dPixelsPerG = Radius / MaxG;
   \   00000034   ........           BL       __aeabi_idiv
   \   00000038   ........           BL       __aeabi_i2f
   \   0000003C   280084E5           STR      R0,[R4, #+40]
     58          
     59          	xMaxValue = 0;
   \   00000040   2C5084E5           STR      R5,[R4, #+44]
     60          	xMinValue = 0;
   \   00000044   345084E5           STR      R5,[R4, #+52]
     61          	yMaxValue = 0;
   \   00000048   305084E5           STR      R5,[R4, #+48]
     62          	yMinValue = 0;
   \   0000004C   385084E5           STR      R5,[R4, #+56]
     63          	
     64          	xValue = yValue = 0;		// KMC added, these were not initialized on target hardware!
   \   00000050   085084E5           STR      R5,[R4, #+8]
   \   00000054   045084E5           STR      R5,[R4, #+4]
     65          	new_x1 = new_y1 = 0;
     66          
     67          	// Initialize dot array
     68          	GUI__memset((unsigned char *)dotArray, 0, sizeof(dotArray));
   \   00000058   ........           LDR      R6,??DataTable9
   \   0000005C   185084E5           STR      R5,[R4, #+24]
   \   00000060   145084E5           STR      R5,[R4, #+20]
   \   00000064   8C2FA0E3           MOV      R2,#+560
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI__memset
     69          	dotIndex = 0;
   \   00000074   305286E5           STR      R5,[R6, #+560]
     70          
     71          	CreateBackground();
   \   00000078   240094E5           LDR      R0,[R4, #+36]
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   011080E0           ADD      R1,R0,R1
   \   00000084   1C1084E5           STR      R1,[R4, #+28]
   \   00000088   101094E5           LDR      R1,[R4, #+16]
   \   0000008C   010080E0           ADD      R0,R0,R1
   \   00000090   200084E5           STR      R0,[R4, #+32]
     72          }
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
     73          

   \                                 In section .text, align 4, keep-with-next
     74          GMeter::~GMeter()
     75          {
   \                     _ZN6GMeterD1Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     76          	GUI_MEMDEV_Delete(mMemBackground);
   \   00000008   400094E5           LDR      R0,[R4, #+64]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
     77          }
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return
     78          

   \                                 In section .text, align 4, keep-with-next
     79          void GMeter::DrawControl()
     80          {
   \                     _ZN6GMeter11DrawControlEv:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0040A0E1           MOV      R4,R0
     81          	int loopCounter;
     82          	GUI_FONT fOldFont;
     83          	char str[10];
     84          	GUI_COLOR color, OldColor;
     85          	float temp;
     86          
     87          	OldColor = GUI_GetColor();
   \   0000000C   ........           BL       GUI_GetColor
   \   00000010   0090A0E1           MOV      R9,R0
     88          	fOldFont = *GUI_GetFont();
   \   00000014   0C508DE2           ADD      R5,SP,#+12
   \   00000018   ........           BL       GUI_GetFont
   \   0000001C   0E50B0E8           LDM      R0!,{R1-R3,R12,LR}
   \   00000020   0E50A5E8           STM      R5!,{R1-R3,R12,LR}
   \   00000024   0E10B0E8           LDM      R0!,{R1-R3,R12}
     89          
     90          	GUI_DrawBitmap(&bmGMeterBackground, 0, 0);
   \   00000028   ........           LDR      R0,??DataTable9_1
   \   0000002C   0E10A5E8           STM      R5!,{R1-R3,R12}
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   ........           BL       GUI_DrawBitmap
     91          
     92          	// Draw all the dots, starting with the oldest and moving to the current one - so the most current is drawn on top
     93          	GUI_SetColor(color = START_COLOR);
   \   0000003C   ........           LDR      R11,??DataTable9_2  ;; 0x404040
   \   00000040   0B00A0E1           MOV      R0,R11
   \   00000044   ........           BL       GUI_SetColor
     94          
     95          	for (loopCounter = 0; loopCounter < NUM_DOTS; loopCounter++)
   \   00000048   ........           LDR      R6,??DataTable9_3  ;; 0xd3d3d3
   \   0000004C   0050A0E3           MOV      R5,#+0
   \   00000050   017086E2           ADD      R7,R6,#+1
   \   00000054   2B82A0E1           MOV      R8,R11, LSR #+4
   \   00000058   ........           LDR      R10,??DataTable9
     96          	{
     97          		int index;
     98          		if ((index = loopCounter + dotIndex) >= NUM_DOTS)
   \                     ??DrawControl_0:
   \   0000005C   30029AE5           LDR      R0,[R10, #+560]
   \   00000060   051080E0           ADD      R1,R0,R5
   \   00000064   460051E3           CMP      R1,#+70
     99          			index -= NUM_DOTS;
   \   00000068   461041A2           SUBGE    R1,R1,#+70
    100          
    101          		x = dotArray[index].x;
   \   0000006C   81019AE7           LDR      R0,[R10, +R1, LSL #+3]
    102          		y = dotArray[index].y;
   \   00000070   81118AE0           ADD      R1,R10,R1, LSL #+3
   \   00000074   0C0084E5           STR      R0,[R4, #+12]
   \   00000078   041091E5           LDR      R1,[R1, #+4]
    103          		if ((x != 0) && (y != 0))		// Only draw dots once set
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   101084E5           STR      R1,[R4, #+16]
   \   00000084   00005113           CMPNE    R1,#+0
   \   00000088   1800000A           BEQ      ??DrawControl_1
    104          		{
    105          			if (loopCounter >= NUM_DOTS - 1)
   \   0000008C   450055E3           CMP      R5,#+69
   \   00000090   140000BA           BLT      ??DrawControl_2
    106          			{	// Final dot - current position
    107          				// Draw red line from center to current g-spot (if valid data available)
    108          				GUI_SetColor(GUI_RED);
   \   00000094   FF00A0E3           MOV      R0,#+255
   \   00000098   ........           BL       GUI_SetColor
    109          				GUI_SetPenSize(5);
   \   0000009C   0500A0E3           MOV      R0,#+5
   \   000000A0   ........           BL       GUI_SetPenSize
    110          				GUI_DrawLine(xCenter, yCenter, new_x1, new_y1);
   \   000000A4   183094E5           LDR      R3,[R4, #+24]
   \   000000A8   142094E5           LDR      R2,[R4, #+20]
   \   000000AC   201094E5           LDR      R1,[R4, #+32]
   \   000000B0   1C0094E5           LDR      R0,[R4, #+28]
   \   000000B4   ........           BL       GUI_DrawLine
    111          
    112          				GUI_SetColor(GUI_BLACK);	// Set color for final dot
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   ........           BL       GUI_SetColor
    113          				GUI_FillCircle(x, y, GMETER_MARKER_DIA + 1);
   \   000000C0   0920A0E3           MOV      R2,#+9
   \   000000C4   101094E5           LDR      R1,[R4, #+16]
   \   000000C8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000CC   ........           BL       GUI_FillCircle
    114          				GUI_SetColor(PRIME_DOT);	// Set color for final dot
   \   000000D0   FF0CA0E3           MOV      R0,#+65280
   \   000000D4   ........           BL       GUI_SetColor
    115          				GUI_FillCircle(x, y, GMETER_MARKER_DIA);
   \   000000D8   0820A0E3           MOV      R2,#+8
   \   000000DC   101094E5           LDR      R1,[R4, #+16]
   \   000000E0   0C0094E5           LDR      R0,[R4, #+12]
   \   000000E4   000000EA           B        ??DrawControl_3
    116          			}
    117          			else GUI_FillCircle(x, y, GMETER_MARKER_DIA);
   \                     ??DrawControl_2:
   \   000000E8   0820A0E3           MOV      R2,#+8
   \                     ??DrawControl_3:
   \   000000EC   ........           BL       GUI_FillCircle
    118          		}
    119          		if ((color += COLOR_STEP) > FINISH_COLOR)
   \                     ??DrawControl_1:
   \   000000F0   0BB088E0           ADD      R11,R8,R11
   \   000000F4   07005BE1           CMP      R11,R7
    120          			color = FINISH_COLOR;
   \   000000F8   06B0A021           MOVCS    R11,R6
    121          		GUI_SetColor(color);
   \   000000FC   0B00A0E1           MOV      R0,R11
   \   00000100   ........           BL       GUI_SetColor
    122          	}
   \   00000104   015085E2           ADD      R5,R5,#+1
   \   00000108   460055E3           CMP      R5,#+70
   \   0000010C   D2FFFFBA           BLT      ??DrawControl_0
    123          
    124          	//
    125          	// Draw static text and current values and peaks
    126          	//
    127          	GUI_SetTextMode(GUI_TM_TRANS);			// All text transparent
   \   00000110   0200A0E3           MOV      R0,#+2
   \   00000114   ........           BL       GUI_SetTextMode
    128          
    129          	// Font for current values
    130          	GUI_SetFont(&GUI_FontD32);
   \   00000118   ........           LDR      R8,??DataTable9_4
   \   0000011C   0800A0E1           MOV      R0,R8
   \   00000120   ........           BL       GUI_SetFont
    131          
    132          	// Draw current Y
    133          	GUI_SetColor(GUI_YELLOW);
   \   00000124   FF50A0E3           MOV      R5,#+255
   \   00000128   FF5C85E3           ORR      R5,R5,#0xFF00
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           BL       GUI_SetColor
    134          	if ((temp = -yValue) < 0)
   \   00000134   080094E5           LDR      R0,[R4, #+8]
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   800420E2           EOR      R0,R0,#0x80000000
   \   00000140   ........           BL       __aeabi_cfcmple
    135          		temp = 0;
   \   00000144   0000A033           MOVCC    R0,#+0
    136          	sprintf(str, "%.2f", temp);				// Current Left
   \   00000148   ............       ADRL     R6,`?<Constant "%.2f">`
   \              ....        
   \   00000150   ........           BL       __aeabi_f2d
   \   00000154   0020A0E1           MOV      R2,R0
   \   00000158   0130A0E1           MOV      R3,R1
   \   0000015C   0610A0E1           MOV      R1,R6
   \   00000160   0D00A0E1           MOV      R0,SP
   \   00000164   ........           BL       sprintf
    137          	GUI_DispStringAt(str, 0, 100);
   \   00000168   6420A0E3           MOV      R2,#+100
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           BL       GUI_DispStringAt
    138          
    139          	if ((temp = yValue) < 0)
   \   00000178   080094E5           LDR      R0,[R4, #+8]
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   ........           BL       __aeabi_cfcmple
    140          		temp = 0;
   \   00000184   0000A033           MOVCC    R0,#+0
    141          	sprintf(str, "%.2f", temp);				// Current Right
   \   00000188   ........           BL       __aeabi_f2d
   \   0000018C   0020A0E1           MOV      R2,R0
   \   00000190   0130A0E1           MOV      R3,R1
   \   00000194   0610A0E1           MOV      R1,R6
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   ........           BL       sprintf
    142          	GUI_DispStringAt(str, RIGHT_COLUMN, 100);
   \   000001A0   8170A0E3           MOV      R7,#+129
   \   000001A4   407F87E3           ORR      R7,R7,#0x100
   \   000001A8   6420A0E3           MOV      R2,#+100
   \   000001AC   0710A0E1           MOV      R1,R7
   \   000001B0   0D00A0E1           MOV      R0,SP
   \   000001B4   ........           BL       GUI_DispStringAt
    143          
    144          	// Draw current X
    145          	GUI_SetColor(GUI_RED);
   \   000001B8   FF00A0E3           MOV      R0,#+255
   \   000001BC   ........           BL       GUI_SetColor
    146          	if ((temp = xValue) < 0)
   \   000001C0   040094E5           LDR      R0,[R4, #+4]
   \   000001C4   0010A0E3           MOV      R1,#+0
   \   000001C8   ........           BL       __aeabi_cfcmple
    147          		temp = 0;
   \   000001CC   0000A033           MOVCC    R0,#+0
    148          	sprintf(str, "%.2f", temp);			// Current Braking
   \   000001D0   ........           BL       __aeabi_f2d
   \   000001D4   0020A0E1           MOV      R2,R0
   \   000001D8   0130A0E1           MOV      R3,R1
   \   000001DC   0610A0E1           MOV      R1,R6
   \   000001E0   0D00A0E1           MOV      R0,SP
   \   000001E4   ........           BL       sprintf
    149          	GUI_DispStringAt(str, RIGHT_COLUMN, 5);
   \   000001E8   0520A0E3           MOV      R2,#+5
   \   000001EC   0710A0E1           MOV      R1,R7
   \   000001F0   0D00A0E1           MOV      R0,SP
   \   000001F4   ........           BL       GUI_DispStringAt
    150          
    151          	GUI_SetColor(GUI_GREEN);
   \   000001F8   FF0CA0E3           MOV      R0,#+65280
   \   000001FC   ........           BL       GUI_SetColor
    152          	if ((temp = -xValue) < 0)
   \   00000200   040094E5           LDR      R0,[R4, #+4]
   \   00000204   0010A0E3           MOV      R1,#+0
   \   00000208   800420E2           EOR      R0,R0,#0x80000000
   \   0000020C   ........           BL       __aeabi_cfcmple
    153          		temp = 0;
   \   00000210   0000A033           MOVCC    R0,#+0
    154          	sprintf(str, "%.2f", temp);			// Current Acceleration
   \   00000214   ........           BL       __aeabi_f2d
   \   00000218   0020A0E1           MOV      R2,R0
   \   0000021C   0130A0E1           MOV      R3,R1
   \   00000220   0610A0E1           MOV      R1,R6
   \   00000224   0D00A0E1           MOV      R0,SP
   \   00000228   ........           BL       sprintf
    155          	GUI_DispStringAt(str, RIGHT_COLUMN, 236);
   \   0000022C   EC20A0E3           MOV      R2,#+236
   \   00000230   0710A0E1           MOV      R1,R7
   \   00000234   0D00A0E1           MOV      R0,SP
   \   00000238   ........           BL       GUI_DispStringAt
    156          
    157          	// Draw static text
    158          	GUI_SetFont(&GUI_Font20B_ASCII);
   \   0000023C   ........           LDR      R0,??DataTable9_5
   \   00000240   ........           BL       GUI_SetFont
    159          	GUI_SetColor(GUI_LIGHTGRAY);
   \   00000244   ........           LDR      R0,??DataTable9_3  ;; 0xd3d3d3
   \   00000248   ........           BL       GUI_SetColor
    160          	GUI_DispStringAt("Bmax", RIGHT_COLUMN + 45, 44);
   \   0000024C   2DA087E2           ADD      R10,R7,#+45
   \   00000250   2C20A0E3           MOV      R2,#+44
   \   00000254   0A10A0E1           MOV      R1,R10
   \   00000258   ........           ADR      R0,`?<Constant "Bmax">`
   \   0000025C   ........           BL       GUI_DispStringAt
    161          	GUI_DispStringAt("Rmax", RIGHT_COLUMN + 45, 140);
   \   00000260   8C20A0E3           MOV      R2,#+140
   \   00000264   0A10A0E1           MOV      R1,R10
   \   00000268   ........           ADR      R0,`?<Constant "Rmax">`
   \   0000026C   ........           BL       GUI_DispStringAt
    162          	GUI_DispStringAt("Amax", RIGHT_COLUMN + 45, 205);
   \   00000270   CD20A0E3           MOV      R2,#+205
   \   00000274   0A10A0E1           MOV      R1,R10
   \   00000278   ........           ADR      R0,`?<Constant "Amax">`
   \   0000027C   ........           BL       GUI_DispStringAt
    163          	GUI_DispStringAt("Lmax", 0, 140);
   \   00000280   8C20A0E3           MOV      R2,#+140
   \   00000284   0010A0E3           MOV      R1,#+0
   \   00000288   ........           ADR      R0,`?<Constant "Lmax">`
   \   0000028C   ........           BL       GUI_DispStringAt
    164          
    165          	// Show the peak values - uses same font
    166          	GUI_SetColor(GUI_RED);
   \   00000290   FF00A0E3           MOV      R0,#+255
   \   00000294   ........           BL       GUI_SetColor
    167          	sprintf(str, "%.2f", xMaxValue);		// Max Braking
   \   00000298   2C0094E5           LDR      R0,[R4, #+44]
   \   0000029C   ........           BL       __aeabi_f2d
   \   000002A0   0020A0E1           MOV      R2,R0
   \   000002A4   0130A0E1           MOV      R3,R1
   \   000002A8   0610A0E1           MOV      R1,R6
   \   000002AC   0D00A0E1           MOV      R0,SP
   \   000002B0   ........           BL       sprintf
    168          	GUI_DispStringAt(str, RIGHT_COLUMN, 44);
   \   000002B4   2C20A0E3           MOV      R2,#+44
   \   000002B8   0710A0E1           MOV      R1,R7
   \   000002BC   0D00A0E1           MOV      R0,SP
   \   000002C0   ........           BL       GUI_DispStringAt
    169          	
    170          	GUI_SetColor(GUI_GREEN);
   \   000002C4   FF0CA0E3           MOV      R0,#+65280
   \   000002C8   ........           BL       GUI_SetColor
    171          	sprintf(str, "%.2f", xMinValue);		// Max Accel
   \   000002CC   340094E5           LDR      R0,[R4, #+52]
   \   000002D0   ........           BL       __aeabi_f2d
   \   000002D4   0020A0E1           MOV      R2,R0
   \   000002D8   0130A0E1           MOV      R3,R1
   \   000002DC   0610A0E1           MOV      R1,R6
   \   000002E0   0D00A0E1           MOV      R0,SP
   \   000002E4   ........           BL       sprintf
    172          	GUI_DispStringAt(str, RIGHT_COLUMN, 205);
   \   000002E8   CD20A0E3           MOV      R2,#+205
   \   000002EC   0710A0E1           MOV      R1,R7
   \   000002F0   0D00A0E1           MOV      R0,SP
   \   000002F4   ........           BL       GUI_DispStringAt
    173          
    174          	GUI_SetColor(GUI_YELLOW);
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   ........           BL       GUI_SetColor
    175          	sprintf(str, "%.2f", yMinValue);		// Max Left
   \   00000300   380094E5           LDR      R0,[R4, #+56]
   \   00000304   ........           BL       __aeabi_f2d
   \   00000308   0020A0E1           MOV      R2,R0
   \   0000030C   0130A0E1           MOV      R3,R1
   \   00000310   0610A0E1           MOV      R1,R6
   \   00000314   0D00A0E1           MOV      R0,SP
   \   00000318   ........           BL       sprintf
    176          	GUI_DispStringAt(str, 60, 140);
   \   0000031C   8C20A0E3           MOV      R2,#+140
   \   00000320   3C10A0E3           MOV      R1,#+60
   \   00000324   0D00A0E1           MOV      R0,SP
   \   00000328   ........           BL       GUI_DispStringAt
    177          
    178          	sprintf(str, "%.2f", yMaxValue);		// Max right
   \   0000032C   300094E5           LDR      R0,[R4, #+48]
   \   00000330   ........           BL       __aeabi_f2d
   \   00000334   0020A0E1           MOV      R2,R0
   \   00000338   0130A0E1           MOV      R3,R1
   \   0000033C   0610A0E1           MOV      R1,R6
   \   00000340   0D00A0E1           MOV      R0,SP
   \   00000344   ........           BL       sprintf
    179          	GUI_DispStringAt(str, RIGHT_COLUMN, 140);
   \   00000348   8C20A0E3           MOV      R2,#+140
   \   0000034C   0710A0E1           MOV      R1,R7
   \   00000350   0D00A0E1           MOV      R0,SP
   \   00000354   ........           BL       GUI_DispStringAt
    180          
    181          	// Draw totalG in center
    182          	GUI_SetColor(GUI_WHITE);
   \   00000358   FF0885E3           ORR      R0,R5,#0xFF0000
   \   0000035C   ........           BL       GUI_SetColor
    183          	GUI_SetFont(&GUI_FontD32);
   \   00000360   0800A0E1           MOV      R0,R8
   \   00000364   ........           BL       GUI_SetFont
    184          	sprintf(str, "%0.2f", totalG);
   \   00000368   3C0094E5           LDR      R0,[R4, #+60]
   \   0000036C   ........           BL       __aeabi_f2d
   \   00000370   0020A0E1           MOV      R2,R0
   \   00000374   0130A0E1           MOV      R3,R1
   \   00000378   ........           ADR      R1,`?<Constant "%0.2f">`
   \   0000037C   0D00A0E1           MOV      R0,SP
   \   00000380   ........           BL       sprintf
    185          	GUI_DispStringHCenterAt(str, xCenter, yCenter - 16);
   \   00000384   200094E5           LDR      R0,[R4, #+32]
   \   00000388   1C1094E5           LDR      R1,[R4, #+28]
   \   0000038C   102040E2           SUB      R2,R0,#+16
   \   00000390   0D00A0E1           MOV      R0,SP
   \   00000394   ........           BL       GUI_DispStringHCenterAt
    186          
    187          	GUI_SetFont(&fOldFont);
   \   00000398   0C008DE2           ADD      R0,SP,#+12
   \   0000039C   ........           BL       GUI_SetFont
    188          	GUI_SetColor(OldColor);
   \   000003A0   0900A0E1           MOV      R0,R9
   \   000003A4   ........           BL       GUI_SetColor
    189          
    190          	// draw navigation arrow
    191          	GUI_DrawBitmap(&bmthreewayarrow, 0, 229);
   \   000003A8   E520A0E3           MOV      R2,#+229
   \   000003AC   0010A0E3           MOV      R1,#+0
   \   000003B0   ........           LDR      R0,??DataTable9_6
   \   000003B4   ........           BL       GUI_DrawBitmap
    192          
    193          #ifdef	INCLUDE_RACE_HELP
    194          	// If the help screen is still being displayed then show the appropriate help screen
    195          	if (raceTimerActive)
    196          	{
    197          		CheckRaceHelpScreen(GMETER);
    198          	}
    199          #endif
    200          }
   \   000003B8   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000003BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    201          
    202          

   \                                 In section .text, align 4, keep-with-next
    203          void GMeter::CreateBackground()
    204          {
    205          	// Note - background is now all handled by a static image
    206          	xCenter = x + Radius;
   \                     _ZN6GMeter16CreateBackgroundEv:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   242090E5           LDR      R2,[R0, #+36]
   \   00000008   011082E0           ADD      R1,R2,R1
   \   0000000C   1C1080E5           STR      R1,[R0, #+28]
    207          	yCenter = y + Radius;
   \   00000010   101090E5           LDR      R1,[R0, #+16]
   \   00000014   011082E0           ADD      R1,R2,R1
   \   00000018   201080E5           STR      R1,[R0, #+32]
    208          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    209          

   \                                 In section .text, align 4, keep-with-next
    210          void GMeter::SetValue(float dXValue, float dYValue)
    211          {
   \                     _ZN6GMeter8SetValueEff:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0080A0E1           MOV      R8,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
    212          	xValue = dXValue;
   \   0000000C   041088E5           STR      R1,[R8, #+4]
    213          	yValue = dYValue;
   \   00000010   082088E5           STR      R2,[R8, #+8]
    214          
    215          	xMaxValue = GetValue(MAX_X_G).fVal;
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       GetValue
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
    216          	xMinValue = -GetValue(MIN_X_G).fVal;
   \   00000024   0610A0E3           MOV      R1,#+6
   \   00000028   2C0088E5           STR      R0,[R8, #+44]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       GetValue
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
    217          	yMaxValue = GetValue(MAX_Y_G).fVal;
   \   00000038   0410A0E3           MOV      R1,#+4
   \   0000003C   800420E2           EOR      R0,R0,#0x80000000
   \   00000040   340088E5           STR      R0,[R8, #+52]
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           BL       GetValue
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
    218          	yMinValue = -GetValue(MIN_Y_G).fVal;
   \   00000050   0710A0E3           MOV      R1,#+7
   \   00000054   300088E5           STR      R0,[R8, #+48]
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           BL       GetValue
   \   00000060   00009DE5           LDR      R0,[SP, #+0]
    219          
    220          	totalG = GetValue(COMBINED_G).fVal;
   \   00000064   5010A0E3           MOV      R1,#+80
   \   00000068   800420E2           EOR      R0,R0,#0x80000000
   \   0000006C   380088E5           STR      R0,[R8, #+56]
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       GetValue
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   3C0088E5           STR      R0,[R8, #+60]
   \   00000080   280098E5           LDR      R0,[R8, #+40]
   \   00000084   ........           BL       __aeabi_f2d
   \   00000088   0020A0E1           MOV      R2,R0
   \   0000008C   0130A0E1           MOV      R3,R1
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   4014A0E3           MOV      R1,#+1073741824
   \   00000098   ........           BL       __aeabi_dmul
   \   0000009C   0060A0E1           MOV      R6,R0
   \   000000A0   0170A0E1           MOV      R7,R1
   \   000000A4   000098E5           LDR      R0,[R8, #+0]
   \   000000A8   ........           BL       __aeabi_i2f
   \   000000AC   ........           BL       __aeabi_f2d
   \   000000B0   0040A0E1           MOV      R4,R0
   \   000000B4   0150A0E1           MOV      R5,R1
   \   000000B8   1C9098E5           LDR      R9,[R8, #+28]
   \   000000BC   080098E5           LDR      R0,[R8, #+8]
   \   000000C0   ........           BL       __aeabi_f2d
   \   000000C4   0620A0E1           MOV      R2,R6
   \   000000C8   0730A0E1           MOV      R3,R7
   \   000000CC   ........           BL       __aeabi_dmul
   \   000000D0   0420A0E1           MOV      R2,R4
   \   000000D4   0530A0E1           MOV      R3,R5
   \   000000D8   ........           BL       __aeabi_ddiv
   \   000000DC   ........           BL       __aeabi_d2iz
   \   000000E0   099080E0           ADD      R9,R0,R9
   \   000000E4   149088E5           STR      R9,[R8, #+20]
    221          
    222          	// Calculate current "G-Spot"  ;)
    223          	new_x1 = (int)(xCenter + (int) (2.0 * dPixelsPerG * yValue / (float) MaxG));
    224          	new_y1 = (int)(yCenter + (int) (2.0 * dPixelsPerG * -xValue / (float) MaxG));
   \   000000E8   040098E5           LDR      R0,[R8, #+4]
   \   000000EC   20A098E5           LDR      R10,[R8, #+32]
   \   000000F0   800420E2           EOR      R0,R0,#0x80000000
   \   000000F4   ........           BL       __aeabi_f2d
   \   000000F8   0020A0E1           MOV      R2,R0
   \   000000FC   0130A0E1           MOV      R3,R1
   \   00000100   0600A0E1           MOV      R0,R6
   \   00000104   0710A0E1           MOV      R1,R7
   \   00000108   ........           BL       __aeabi_dmul
   \   0000010C   0420A0E1           MOV      R2,R4
   \   00000110   0530A0E1           MOV      R3,R5
   \   00000114   ........           BL       __aeabi_ddiv
   \   00000118   ........           BL       __aeabi_d2iz
   \   0000011C   0A0080E0           ADD      R0,R0,R10
   \   00000120   180088E5           STR      R0,[R8, #+24]
    225          
    226          	// Save new g-spot to the next place in the array
    227          	dotArray[dotIndex].x = new_x1;
   \   00000124   ........           LDR      R0,??DataTable9
    228          	dotArray[dotIndex].y = new_y1;
    229          
    230          	if (++dotIndex >= NUM_DOTS)
    231          		dotIndex = 0;
    232          }
   \   00000128   08D08DE2           ADD      SP,SP,#+8
   \   0000012C   301290E5           LDR      R1,[R0, #+560]
   \   00000130   819180E7           STR      R9,[R0, +R1, LSL #+3]
   \   00000134   183098E5           LDR      R3,[R8, #+24]
   \   00000138   812180E0           ADD      R2,R0,R1, LSL #+3
   \   0000013C   043082E5           STR      R3,[R2, #+4]
   \   00000140   011081E2           ADD      R1,R1,#+1
   \   00000144   301280E5           STR      R1,[R0, #+560]
   \   00000148   460051E3           CMP      R1,#+70
   \   0000014C   0010A0A3           MOVGE    R1,#+0
   \   00000150   301280A5           STRGE    R1,[R0, #+560]
   \   00000154   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp GMeter::subobject GMeter(int)
   \                     _ZN6GMeterC2Ei:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   205084E5           STR      R5,[R4, #+32]
   \   00000010   1C5084E5           STR      R5,[R4, #+28]
   \   00000014   405084E5           STR      R5,[R4, #+64]
   \   00000018   7300A0E3           MOV      R0,#+115
   \   0000001C   0C0084E5           STR      R0,[R4, #+12]
   \   00000020   0A00A0E3           MOV      R0,#+10
   \   00000024   100084E5           STR      R0,[R4, #+16]
   \   00000028   7D00A0E3           MOV      R0,#+125
   \   0000002C   240084E5           STR      R0,[R4, #+36]
   \   00000030   001084E5           STR      R1,[R4, #+0]
   \   00000034   ........           BL       __aeabi_idiv
   \   00000038   ........           BL       __aeabi_i2f
   \   0000003C   280084E5           STR      R0,[R4, #+40]
   \   00000040   2C5084E5           STR      R5,[R4, #+44]
   \   00000044   345084E5           STR      R5,[R4, #+52]
   \   00000048   305084E5           STR      R5,[R4, #+48]
   \   0000004C   385084E5           STR      R5,[R4, #+56]
   \   00000050   085084E5           STR      R5,[R4, #+8]
   \   00000054   045084E5           STR      R5,[R4, #+4]
   \   00000058   ........           LDR      R6,??DataTable9
   \   0000005C   185084E5           STR      R5,[R4, #+24]
   \   00000060   145084E5           STR      R5,[R4, #+20]
   \   00000064   8C2FA0E3           MOV      R2,#+560
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI__memset
   \   00000074   305286E5           STR      R5,[R6, #+560]
   \   00000078   240094E5           LDR      R0,[R4, #+36]
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   011080E0           ADD      R1,R0,R1
   \   00000084   1C1084E5           STR      R1,[R4, #+28]
   \   00000088   101094E5           LDR      R1,[R4, #+16]
   \   0000008C   010080E0           ADD      R0,R0,R1
   \   00000090   200084E5           STR      R0,[R4, #+32]
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp GMeter::subobject ~GMeter()
   \                     _ZN6GMeterD2Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   400094E5           LDR      R0,[R4, #+64]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     dotArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   ........           DC32     bmGMeterBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   40404000           DC32     0x404040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   D3D3D300           DC32     0xd3d3d3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   ........           DC32     GUI_FontD32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   ........           DC32     GUI_Font20B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   ........           DC32     bmthreewayarrow

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252E32660000       DC8 37, 46, 50, 102, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Bmax">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   426D61780000       DC8 66, 109, 97, 120, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rmax">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   526D61780000       DC8 82, 109, 97, 120, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Amax">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416D61780000       DC8 65, 109, 97, 120, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Lmax">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4C6D61780000       DC8 76, 109, 97, 120, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%0.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   25302E326600       DC8 37, 48, 46, 50, 102, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GMeter::CreateBackground()          0
     GMeter::DrawControl()              88
     GMeter::GMeter(int)                16
     GMeter::SetValue(float, float)     40
     GMeter::subobject GMeter(int)      16
     GMeter::subobject ~GMeter()         8
     GMeter::~GMeter()                   8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     dotArray                        564
     dotIndex
     GMeter::GMeter(int)             156
     GMeter::~GMeter()                24
     GMeter::DrawControl()           960
     GMeter::CreateBackground()       32
     GMeter::SetValue(float, float)  344
     GMeter::subobject GMeter(int)   156
     GMeter::subobject ~GMeter()      24
     ??DataTable9                      4
     ??DataTable9_1                    4
     ??DataTable9_2                    4
     ??DataTable9_3                    4
     ??DataTable9_4                    4
     ??DataTable9_5                    4
     ??DataTable9_6                    4
     ?<Constant "%.2f">                8
     ?<Constant "Bmax">                8
     ?<Constant "Rmax">                8
     ?<Constant "Amax">                8
     ?<Constant "Lmax">                8
     ?<Constant "%0.2f">               8

 
   564 bytes in section .bss
 1 772 bytes in section .text
 
 1 772 bytes of CODE memory
   564 bytes of DATA memory

Errors: none
Warnings: none
