###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     06/Aug/2010  11:20:22 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\SDCardRWTest.c                              #
#    Command line =  C:\DUII\DUII\SDCardRWTest.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --require_prototypes --fpu=None      #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I           #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4\arm\INC\" --cpu_mode arm -Ohs              #
#    List file    =  C:\DUII\TargetHW\Release\List\SDCardRWTest.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\SDCardRWTest.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\SDCardRWTest.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2008  SEGGER Microcontroller GmbH & Co. KG        *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.52e                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : GUI_HelloWorld.c
     31          Purpose : emWin and embOS demo application
     32          --------  END-OF-HEADER  ---------------------------------------------
     33          */
     34          
     35          #include "GUI.h"
     36          #include "FS.h"
     37          #include <stdio.h>
     38          #include <string.h>
     39          #if	_WINDOWS
     40          #include "SIMConf.h"
     41          #endif
     42          #include "BSP.h"
     43          

   \                                 In section .bss, align 4
     44          char oneKbuffer[1024+2];
   \                     oneKbuffer:
   \   00000000                      DS8 1028
     45          

   \                                 In section .rodata, align 4
   \                     `?<Constant "FS_IsHLFormatted retu...">`:
   \   00000000   46535F497348       DC8 "FS_IsHLFormatted returned an error\012"
   \              4C466F726D61
   \              747465642072
   \              657475726E65
   \              6420616E2065
   \              72726F720A00
   \   00000024   57726974696E       DC8 "Writing file: %d"
   \              672066696C65
   \              3A20256400  
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   25735C666966       DC8 "%s\\fifty_K_%d.txt"
   \              74795F4B5F25
   \              642E74787400
   \   0000004A   0000               DC8 0, 0
   \   0000004C   577269746520       DC8 "Write Error\012"
   \              4572726F720A
   \              00          
   \   00000059   000000             DC8 0, 0, 0
   \   0000005C   436F756C6420       DC8 "Could not close file\012"
   \              6E6F7420636C
   \              6F7365206669
   \              6C650A00    
   \   00000072   0000               DC8 0, 0
   \   00000074   436F756C6420       DC8 "Could not open file: %s to write.\012"
   \              6E6F74206F70
   \              656E2066696C
   \              653A20257320
   \              746F20777269
   \              74652E0A00  
   \   00000097   00                 DC8 0
   \   00000098   436F756C6420       DC8 "Could not open file: %s to read.\012"
   \              6E6F74206F70
   \              656E2066696C
   \              653A20257320
   \              746F20726561
   \              642E0A00    
   \   000000BA   0000               DC8 0, 0
   \   000000BC   526561642065       DC8 "Read error count: %d"
   \              72726F722063
   \              6F756E743A20
   \              256400      
   \   000000D1   000000             DC8 0, 0, 0
   \   000000D4   546573742043       DC8 "Test Complete"
   \              6F6D706C6574
   \              6500        
   \   000000E2   0000               DC8 0, 0
     46          const char TEST_STRING[] = "This line right here is 64 characters long including the CR....\n";
   \                     TEST_STRING:
   \   000000E4   54686973206C       DC8 54H, 68H, 69H, 73H, 20H, 6CH, 69H, 6EH
   \              696E        
   \   000000EC   652072696768       DC8 65H, 20H, 72H, 69H, 67H, 68H, 74H, 20H
   \              7420        
   \   000000F4   686572652069       DC8 68H, 65H, 72H, 65H, 20H, 69H, 73H, 20H
   \              7320        
   \   000000FC   363420636861       DC8 36H, 34H, 20H, 63H, 68H, 61H, 72H, 61H
   \              7261        
   \   00000104   637465727320       DC8 63H, 74H, 65H, 72H, 73H, 20H, 6CH, 6FH
   \              6C6F        
   \   0000010C   6E6720696E63       DC8 6EH, 67H, 20H, 69H, 6EH, 63H, 6CH, 75H
   \              6C75        
   \   00000114   64696E672074       DC8 64H, 69H, 6EH, 67H, 20H, 74H, 68H, 65H
   \              6865        
   \   0000011C   2043522E2E2E       DC8 20H, 43H, 52H, 2EH, 2EH, 2EH, 2EH, 0AH
   \              2E0A        
   \   00000124   00                 DC8 0
   \   00000125   000000             DC8 0, 0, 0
     47          
     48          /*********************************************************************
     49          *
     50          *       main()
     51          */
     52          void MainTask(void);

   \                                 In section .text, align 4, keep-with-next
     53          void MainTask(void)
     54          {
   \                     MainTask:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5BDF4DE2           SUB      SP,SP,#+364
     55          FS_FILE    * pFile;
     56          char         ac[256], kmc[100];
     57          int r, i, j, error;
     58          const char * sVolName = "";
   \   00000008   924F8FE2           ADR      R4,??MainTask_0  ;; ""
   \   0000000C   00408DE5           STR      R4,[SP, #+0]
     59          
     60          	GUI_Init();
   \   00000010   ........           BL       GUI_Init
     61            	GUI_SetFont(&GUI_Font32_ASCII);
   \   00000014   48029FE5           LDR      R0,??MainTask_0+0xC
   \   00000018   ........           BL       GUI_SetFont
     62          	
     63            	//
     64            	// Initialize file system
     65            	//
     66            	FS_Init();
   \   0000001C   ........           BL       FS_Init
     67          	FS_FAT_SupportLFN();
   \   00000020   ........           BL       FS_FAT_SupportLFN
     68          
     69          #ifdef _WINDOWS
     70          	SIM_Init();
     71          #endif
     72          
     73            	//
     74            	// Check if low-level format is required
     75            	//
     76            	FS_FormatLLIfRequired("");
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FS_FormatLLIfRequired
     77            
     78            	//
     79            	// Check if volume needs to be high level formatted.
     80            	//
     81            	if ((r = FS_IsHLFormatted("")) == 0) {
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       FS_IsHLFormatted
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0300001A           BNE      ??MainTask_1
     82              	FS_Format("", NULL);
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       FS_Format
   \   00000048   030000EA           B        ??MainTask_2
     83            	}
     84            	else if (r == -1)
   \                     ??MainTask_1:
   \   0000004C   010070E3           CMN      R0,#+1
   \   00000050   0100001A           BNE      ??MainTask_2
     85            	{
     86          		GUI_DispString("FS_IsHLFormatted returned an error\n");
   \   00000054   0C029FE5           LDR      R0,??MainTask_0+0x10
   \   00000058   ........           BL       GUI_DispString
     87             }
     88            
     89            	// prepare buffer
     90          	oneKbuffer[0] = 0;
   \                     ??MainTask_2:
   \   0000005C   08429FE5           LDR      R4,??MainTask_0+0x14
   \   00000060   0050A0E3           MOV      R5,#+0
   \   00000064   0050C4E5           STRB     R5,[R4, #+0]
     91          	for (i=0; i < 16; i++)
   \   00000068   1070A0E3           MOV      R7,#+16
   \   0000006C   F4619FE5           LDR      R6,??MainTask_0+0x10
     92          	{
     93          		strcat(oneKbuffer, TEST_STRING);
   \                     ??MainTask_3:
   \   00000070   E41086E2           ADD      R1,R6,#+228
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       strcat
     94          	}
   \   0000007C   017057E2           SUBS     R7,R7,#+1
   \   00000080   FAFFFF1A           BNE      ??MainTask_3
     95          
     96          	error = 0;
   \   00000084   0070A0E3           MOV      R7,#+0
     97          
     98          	for (j = 0; j < 50; j++)
   \   00000088   00A0A0E3           MOV      R10,#+0
   \   0000008C   04808DE2           ADD      R8,SP,#+4
     99          	{
    100          		//  
    101          		// Write a 50k file
    102          		//
    103          
    104          		sprintf(kmc, "Writing file: %d", j+1);
   \                     ??MainTask_4:
   \   00000090   01908AE2           ADD      R9,R10,#+1
   \   00000094   0920A0E1           MOV      R2,R9
   \   00000098   241086E2           ADD      R1,R6,#+36
   \   0000009C   04008DE2           ADD      R0,SP,#+4
   \   000000A0   ........           BL       sprintf
    105          		GUI_DispStringAt(kmc, 100, 0);
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   6410A0E3           MOV      R1,#+100
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           BL       GUI_DispStringAt
    106          		
    107          		// Start LED timed section
    108          		BSP_SetLED(1);
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   ........           BL       BSP_SetLED
    109          		
    110          		sprintf(ac, "%s\\fifty_K_%d.txt", sVolName, j);
   \   000000BC   0A30A0E1           MOV      R3,R10
   \   000000C0   00209DE5           LDR      R2,[SP, #+0]
   \   000000C4   381086E2           ADD      R1,R6,#+56
   \   000000C8   68008DE2           ADD      R0,SP,#+104
   \   000000CC   ........           BL       sprintf
    111          		pFile = FS_FOpen(ac, "w");
   \   000000D0   611F8FE2           ADR      R1,??MainTask_0+0x4  ;; "w"
   \   000000D4   68008DE2           ADD      R0,SP,#+104
   \   000000D8   ........           BL       FS_FOpen
   \   000000DC   00A0B0E1           MOVS     R10,R0
    112          		if (pFile) {
   \   000000E0   1500000A           BEQ      ??MainTask_5
    113          			for (i = 0; i < 50; i++)
   \   000000E4   32B0A0E3           MOV      R11,#+50
    114          			{
    115          				if (FS_Write(pFile, oneKbuffer, 1024) != 1024)
   \                     ??MainTask_6:
   \   000000E8   402EA0E3           MOV      R2,#+1024
   \   000000EC   0410A0E1           MOV      R1,R4
   \   000000F0   0A00A0E1           MOV      R0,R10
   \   000000F4   ........           BL       FS_Write
   \   000000F8   400E50E3           CMP      R0,#+1024
   \   000000FC   0300000A           BEQ      ??MainTask_7
    116          					GUI_DispStringAt("Write Error\n", 0, 100);
   \   00000100   6420A0E3           MOV      R2,#+100
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   4C0086E2           ADD      R0,R6,#+76
   \   0000010C   ........           BL       GUI_DispStringAt
    117          			}
   \                     ??MainTask_7:
   \   00000110   01B05BE2           SUBS     R11,R11,#+1
   \   00000114   F3FFFF1A           BNE      ??MainTask_6
    118          			if (FS_FClose(pFile))
   \   00000118   0A00A0E1           MOV      R0,R10
   \   0000011C   ........           BL       FS_FClose
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   0C00000A           BEQ      ??MainTask_8
    119          					GUI_DispStringAt("Could not close file\n", 0, 130);
   \   00000128   8220A0E3           MOV      R2,#+130
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   5C0086E2           ADD      R0,R6,#+92
   \   00000134   ........           BL       GUI_DispStringAt
   \   00000138   070000EA           B        ??MainTask_8
    120          		}  
    121          		else {
    122          			sprintf(kmc,"Could not open file: %s to write.\n", ac);
   \                     ??MainTask_5:
   \   0000013C   68208DE2           ADD      R2,SP,#+104
   \   00000140   741086E2           ADD      R1,R6,#+116
   \   00000144   04008DE2           ADD      R0,SP,#+4
   \   00000148   ........           BL       sprintf
    123          			GUI_DispStringAt(kmc, 0, 160);
   \   0000014C   A020A0E3           MOV      R2,#+160
   \   00000150   0010A0E3           MOV      R1,#+0
   \   00000154   04008DE2           ADD      R0,SP,#+4
   \   00000158   ........           BL       GUI_DispStringAt
    124          		}
    125          	  
    126          		// End LED timed section
    127          		BSP_ClrLED(1);
   \                     ??MainTask_8:
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   ........           BL       BSP_ClrLED
    128          
    129          		//
    130          		// Verify data that was written
    131          		//
    132          		pFile = FS_FOpen(ac, "r");
   \   00000164   F4108FE2           ADR      R1,??MainTask_0+0x8  ;; "r"
   \   00000168   68008DE2           ADD      R0,SP,#+104
   \   0000016C   ........           BL       FS_FOpen
   \   00000170   00A0B0E1           MOVS     R10,R0
    133          		if (pFile) {
   \   00000174   1A00000A           BEQ      ??MainTask_9
    134          			for (i = 0; i < 800; i++)
   \   00000178   00B0A0E3           MOV      R11,#+0
    135          			{
    136          				if (FS_Read(pFile, kmc, 64) != 64)
   \                     ??MainTask_10:
   \   0000017C   4020A0E3           MOV      R2,#+64
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   0A00A0E1           MOV      R0,R10
   \   00000188   ........           BL       FS_Read
   \   0000018C   400050E3           CMP      R0,#+64
   \   00000190   0100000A           BEQ      ??MainTask_11
    137          				{
    138          					error++;
   \                     ??MainTask_12:
   \   00000194   017087E2           ADD      R7,R7,#+1
    139          					break;
   \   00000198   080000EA           B        ??MainTask_13
    140          				}
    141          				kmc[64] = 0;		// terminate the string
   \                     ??MainTask_11:
   \   0000019C   4050C8E5           STRB     R5,[R8, #+64]
    142          				// test string
    143          				if (strcmp(kmc, TEST_STRING) != 0)
   \   000001A0   E41086E2           ADD      R1,R6,#+228
   \   000001A4   04008DE2           ADD      R0,SP,#+4
   \   000001A8   ........           BL       strcmp
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   F7FFFF1A           BNE      ??MainTask_12
    144          				{
    145          				  	error++;
    146          					break;
    147          				}
    148          			}
   \   000001B4   01B08BE2           ADD      R11,R11,#+1
   \   000001B8   C80F5BE3           CMP      R11,#+800
   \   000001BC   EEFFFFBA           BLT      ??MainTask_10
    149          			if (FS_FClose(pFile))
   \                     ??MainTask_13:
   \   000001C0   0A00A0E1           MOV      R0,R10
   \   000001C4   ........           BL       FS_FClose
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0D00000A           BEQ      ??MainTask_14
    150          			{
    151          				GUI_DispStringAt("Could not close file\n", 0, 180);
   \   000001D0   B420A0E3           MOV      R2,#+180
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   5C0086E2           ADD      R0,R6,#+92
   \   000001DC   ........           BL       GUI_DispStringAt
    152          				error++;
   \   000001E0   070000EA           B        ??MainTask_15
    153          			}
    154          		}  
    155          		else {
    156          			sprintf(kmc,"Could not open file: %s to read.\n", ac);
   \                     ??MainTask_9:
   \   000001E4   68208DE2           ADD      R2,SP,#+104
   \   000001E8   981086E2           ADD      R1,R6,#+152
   \   000001EC   04008DE2           ADD      R0,SP,#+4
   \   000001F0   ........           BL       sprintf
    157          			GUI_DispStringAt(kmc, 0, 200);
   \   000001F4   C820A0E3           MOV      R2,#+200
   \   000001F8   0010A0E3           MOV      R1,#+0
   \   000001FC   04008DE2           ADD      R0,SP,#+4
   \   00000200   ........           BL       GUI_DispStringAt
    158          			error++;
   \                     ??MainTask_15:
   \   00000204   017087E2           ADD      R7,R7,#+1
    159          		}
    160          		
    161          
    162          		sprintf(kmc, "Read error count: %d", error);
   \                     ??MainTask_14:
   \   00000208   0720A0E1           MOV      R2,R7
   \   0000020C   BC1086E2           ADD      R1,R6,#+188
   \   00000210   04008DE2           ADD      R0,SP,#+4
   \   00000214   ........           BL       sprintf
    163          		GUI_DispStringAt(kmc, 100, 35);
   \   00000218   2320A0E3           MOV      R2,#+35
   \   0000021C   6410A0E3           MOV      R1,#+100
   \   00000220   04008DE2           ADD      R0,SP,#+4
   \   00000224   ........           BL       GUI_DispStringAt
    164          	 
    165          #ifdef _WINDOWS
    166          		if (SIM_Tick())
    167          			return;
    168          #endif
    169          	  	GUI_Delay(10);			// Give print a chance to write
   \   00000228   0A00A0E3           MOV      R0,#+10
   \   0000022C   ........           BL       GUI_Delay
    170          	}
   \   00000230   09A0A0E1           MOV      R10,R9
   \   00000234   32005AE3           CMP      R10,#+50
   \   00000238   94FFFFBA           BLT      ??MainTask_4
    171          
    172          	GUI_DispStringAt("Test Complete", 100, 70);
   \   0000023C   4620A0E3           MOV      R2,#+70
   \   00000240   6410A0E3           MOV      R1,#+100
   \   00000244   D40086E2           ADD      R0,R6,#+212
   \   00000248   ........           BL       GUI_DispStringAt
    173          
    174          #ifdef _WINDOWS
    175          	return;
    176          #else
    177          	while (1)
    178          	  	GUI_Delay(10);
   \                     ??MainTask_16:
   \   0000024C   0A00A0E3           MOV      R0,#+10
   \   00000250   ........           BL       GUI_Delay
   \   00000254   FCFFFFEA           B        ??MainTask_16
   \                     ??MainTask_0:
   \   00000258   00000000           DC8      "",0x0,0x0,0x0
   \   0000025C   77000000           DC8      "w",0x0,0x0
   \   00000260   72000000           DC8      "r",0x0,0x0
   \   00000264   ........           DC32     GUI_Font32_ASCII
   \   00000268   ........           DC32     `?<Constant "FS_IsHLFormatted retu...">`
   \   0000026C   ........           DC32     oneKbuffer
    179          #endif
    180          }

   \                                 In section .rodata, align 1
   \   00000000   00                 DC8 ""

   \                                 In section .rodata, align 2
   \   00000000   7700               DC8 "w"

   \                                 In section .rodata, align 2
   \   00000000   7200               DC8 "r"
    181          /****** End of File *************************************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     MainTask    400


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     oneKbuffer      1028
     TEST_STRING      296
     MainTask         624
     ?<Constant "">     1
     ?<Constant "w">    2
     ?<Constant "r">    2

 
 1 028 bytes in section .bss
   301 bytes in section .rodata
   624 bytes in section .text
 
   624 bytes of CODE  memory
   301 bytes of CONST memory
 1 028 bytes of DATA  memory

Errors: none
Warnings: none
