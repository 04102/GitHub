###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_CriticalHandle.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\WM_CriticalHandle.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_CriticalHandle.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_CriticalHandle.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_CriticalHandle.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_CriticalHandle.c
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          #include "GUI_Debug.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Public code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       WM__AddCriticalHandle
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          void WM__AddCriticalHandle(WM_CRITICAL_HANDLE* pCriticalHandle) {
     39            pCriticalHandle->pNext   = WM__pFirstCriticalHandle;
   \                     WM__AddCriticalHandle:
   \   00000000   ........           LDR      R1,??DataTable1
   \   00000004   002091E5           LDR      R2,[R1, #+0]
   \   00000008   002080E5           STR      R2,[R0, #+0]
     40            WM__pFirstCriticalHandle = pCriticalHandle;
   \   0000000C   000081E5           STR      R0,[R1, #+0]
     41          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     42          
     43          /*********************************************************************
     44          *
     45          *       WM__RemoveCriticalHandle
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          void WM__RemoveCriticalHandle(WM_CRITICAL_HANDLE* pCriticalHandle) {
     48            if (WM__pFirstCriticalHandle) {
   \                     WM__RemoveCriticalHandle:
   \   00000000   ........           LDR      R1,??DataTable1
   \   00000004   002091E5           LDR      R2,[R1, #+0]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0D00000A           BEQ      ??WM__RemoveCriticalHandle_0
     49              WM_CRITICAL_HANDLE *pCH, *pLast = 0;
   \   00000010   0030A0E3           MOV      R3,#+0
     50              for (pCH = WM__pFirstCriticalHandle; pCH; pCH = pCH->pNext) {
     51                if (pCH == pCriticalHandle) {
   \                     ??WM__RemoveCriticalHandle_1:
   \   00000014   000052E1           CMP      R2,R0
   \   00000018   0600001A           BNE      ??WM__RemoveCriticalHandle_2
     52                  if (pLast) {
   \   0000001C   000092E5           LDR      R0,[R2, #+0]
   \   00000020   000053E3           CMP      R3,#+0
   \   00000024   0100000A           BEQ      ??WM__RemoveCriticalHandle_3
     53                    pLast->pNext = pCH->pNext;
   \   00000028   000083E5           STR      R0,[R3, #+0]
   \   0000002C   1EFF2FE1           BX       LR
     54                  } else if (pCH->pNext) {
   \                     ??WM__RemoveCriticalHandle_3:
   \   00000030   000081E5           STR      R0,[R1, #+0]
     55                    WM__pFirstCriticalHandle = pCH->pNext;
   \   00000034   1EFF2FE1           BX       LR
     56                  } else {
     57                    WM__pFirstCriticalHandle = 0;
     58                  }
     59                  break;
     60                }
     61                pLast = pCH;
   \                     ??WM__RemoveCriticalHandle_2:
   \   00000038   0230A0E1           MOV      R3,R2
     62              }
   \   0000003C   002092E5           LDR      R2,[R2, #+0]
   \   00000040   000052E3           CMP      R2,#+0
   \   00000044   F2FFFF1A           BNE      ??WM__RemoveCriticalHandle_1
     63            }
     64          }
   \                     ??WM__RemoveCriticalHandle_0:
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     WM__pFirstCriticalHandle
     65          
     66          #else
     67            void WM_CriticalHandle_C(void) {} /* avoid empty object files */
     68          #endif   /* GUI_WINSUPPORT */
     69          
     70          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     WM__AddCriticalHandle         0
     WM__RemoveCriticalHandle      0


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     WM__AddCriticalHandle      20
     WM__RemoveCriticalHandle   76
     ??DataTable1                4

 
 100 bytes in section .text
 
 100 bytes of CODE memory

Errors: none
Warnings: none
