###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:40 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DispChar.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DispChar.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DispChar.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DispChar.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DispChar.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DispChar.c
     19          Purpose     : Implementation of optional routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       CL_DispChar
     34          */
     35          #if (GUI_WINSUPPORT)
     36          static void CL_DispChar(U16 c) {
     37            GUI_RECT r;
     38            WM_ADDORG(GUI_Context.DispPosX, GUI_Context.DispPosY);
     39            r.x1 = (r.x0 = GUI_Context.DispPosX) + GUI_GetCharDistX(c) + GUI__GetOverlap(c) - 1;
     40            r.y1 = (r.y0 = GUI_Context.DispPosY) + GUI_GetFontSizeY()  - 1;
     41            WM_ITERATE_START(&r) {
     42              GL_DispChar(c);
     43            } WM_ITERATE_END();
     44            if (c != '\n') {
     45              GUI_Context.DispPosX = r.x1 + 1;
     46            }
     47            WM_SUBORG(GUI_Context.DispPosX, GUI_Context.DispPosY);
     48          }
     49          #endif
     50          
     51          /*********************************************************************
     52          *
     53          *       Public code
     54          *
     55          **********************************************************************
     56          */
     57          /*********************************************************************
     58          *
     59          *       GUI_DispChar
     60          */

   \                                 In section .text, align 4, keep-with-next
     61          void GUI_DispChar(U16 c) {
   \                     GUI_DispChar:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
     62            GUI_LOCK();
   \   0000000C   ........           BL       GUI_Lock
     63            #if (GUI_WINSUPPORT)
     64              CL_DispChar(c);
   \   00000010   ........           LDR      R5,??DataTable1
   \   00000014   F202D5E1           LDRSH    R0,[R5, #+34]
   \   00000018   401095E5           LDR      R1,[R5, #+64]
   \   0000001C   006081E0           ADD      R6,R1,R0
   \   00000020   F402D5E1           LDRSH    R0,[R5, #+36]
   \   00000024   441095E5           LDR      R1,[R5, #+68]
   \   00000028   B262C5E1           STRH     R6,[R5, #+34]
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   B402C5E1           STRH     R0,[R5, #+36]
   \   00000034   B060CDE1           STRH     R6,[SP, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       GUI_GetCharDistX
   \   00000040   066080E0           ADD      R6,R0,R6
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       GUI__GetOverlap
   \   0000004C   060080E0           ADD      R0,R0,R6
   \   00000050   F462D5E1           LDRSH    R6,[R5, #+36]
   \   00000054   010040E2           SUB      R0,R0,#+1
   \   00000058   B400CDE1           STRH     R0,[SP, #+4]
   \   0000005C   B260CDE1           STRH     R6,[SP, #+2]
   \   00000060   ........           BL       GUI_GetFontSizeY
   \   00000064   060080E0           ADD      R0,R0,R6
   \   00000068   010040E2           SUB      R0,R0,#+1
   \   0000006C   B600CDE1           STRH     R0,[SP, #+6]
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       WM__InitIVRSearch
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0400000A           BEQ      ??GUI_DispChar_0
   \                     ??GUI_DispChar_1:
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       GL_DispChar
   \   00000088   ........           BL       WM__GetNextIVR
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   FAFFFF1A           BNE      ??GUI_DispChar_1
   \                     ??GUI_DispChar_0:
   \   00000094   0A0054E3           CMP      R4,#+10
   \   00000098   F400DD11           LDRSHNE  R0,[SP, #+4]
   \   0000009C   401095E5           LDR      R1,[R5, #+64]
   \   000000A0   01008012           ADDNE    R0,R0,#+1
   \   000000A4   B202C511           STRHNE   R0,[R5, #+34]
   \   000000A8   F202D5E1           LDRSH    R0,[R5, #+34]
   \   000000AC   010040E0           SUB      R0,R0,R1
   \   000000B0   B202C5E1           STRH     R0,[R5, #+34]
   \   000000B4   F402D5E1           LDRSH    R0,[R5, #+36]
   \   000000B8   441095E5           LDR      R1,[R5, #+68]
   \   000000BC   010040E0           SUB      R0,R0,R1
   \   000000C0   B402C5E1           STRH     R0,[R5, #+36]
     65            #else
     66              GL_DispChar(c);
     67            #endif
     68            GUI_UNLOCK();
   \   000000C4   ........           BL       GUI_Unlock
     69          }
   \   000000C8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000CC   7080BDE8           POP      {R4-R6,PC}       ;; return
     70          
     71          /*********************************************************************
     72          *
     73          *       GUI_DispCharAt
     74          */

   \                                 In section .text, align 4, keep-with-next
     75          void GUI_DispCharAt(U16 c, I16P x, I16P y) {
   \                     GUI_DispCharAt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
     76            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
     77            GUI_Context.DispPosX = x;
     78            GUI_Context.DispPosY = y;
   \   00000018   ........           LDR      R5,??DataTable1
     79            #if (GUI_WINSUPPORT)
     80              CL_DispChar(c);
   \   0000001C   400095E5           LDR      R0,[R5, #+64]
   \   00000020   441095E5           LDR      R1,[R5, #+68]
   \   00000024   066080E0           ADD      R6,R0,R6
   \   00000028   B472C5E1           STRH     R7,[R5, #+36]
   \   0000002C   070081E0           ADD      R0,R1,R7
   \   00000030   B402C5E1           STRH     R0,[R5, #+36]
   \   00000034   B262C5E1           STRH     R6,[R5, #+34]
   \   00000038   B060CDE1           STRH     R6,[SP, #+0]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       GUI_GetCharDistX
   \   00000044   066080E0           ADD      R6,R0,R6
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI__GetOverlap
   \   00000050   060080E0           ADD      R0,R0,R6
   \   00000054   F462D5E1           LDRSH    R6,[R5, #+36]
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   B400CDE1           STRH     R0,[SP, #+4]
   \   00000060   B260CDE1           STRH     R6,[SP, #+2]
   \   00000064   ........           BL       GUI_GetFontSizeY
   \   00000068   060080E0           ADD      R0,R0,R6
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   B600CDE1           STRH     R0,[SP, #+6]
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           BL       WM__InitIVRSearch
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0400000A           BEQ      ??GUI_DispCharAt_0
   \                     ??GUI_DispCharAt_1:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       GL_DispChar
   \   0000008C   ........           BL       WM__GetNextIVR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   FAFFFF1A           BNE      ??GUI_DispCharAt_1
   \                     ??GUI_DispCharAt_0:
   \   00000098   0A0054E3           CMP      R4,#+10
   \   0000009C   F400DD11           LDRSHNE  R0,[SP, #+4]
   \   000000A0   401095E5           LDR      R1,[R5, #+64]
   \   000000A4   01008012           ADDNE    R0,R0,#+1
   \   000000A8   B202C511           STRHNE   R0,[R5, #+34]
   \   000000AC   F202D5E1           LDRSH    R0,[R5, #+34]
   \   000000B0   010040E0           SUB      R0,R0,R1
   \   000000B4   B202C5E1           STRH     R0,[R5, #+34]
   \   000000B8   F402D5E1           LDRSH    R0,[R5, #+36]
   \   000000BC   441095E5           LDR      R1,[R5, #+68]
   \   000000C0   010040E0           SUB      R0,R0,R1
   \   000000C4   B402C5E1           STRH     R0,[R5, #+36]
     81            #else
     82              GL_DispChar(c);
     83            #endif
     84            GUI_UNLOCK();
   \   000000C8   ........           BL       GUI_Unlock
     85          }
   \   000000CC   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000D0   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
     86          
     87          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     GUI_DispChar       24
     GUI_DispCharAt     32


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI_DispChar    208
     GUI_DispCharAt  212
     ??DataTable1      4

 
 424 bytes in section .text
 
 424 bytes of CODE memory

Errors: none
Warnings: none
