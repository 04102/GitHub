###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:04 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_Show.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\WM_Show.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_Show.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_Show.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_Show.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_Show.c
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          #include "GUI_Debug.h"
     27          #define WM_DEBUG_LEVEL 1
     28          
     29          /*********************************************************************
     30          *
     31          *       Public code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       WM_InvalidateWindowAndDescs
     38          *
     39          * Function description
     40          *  Invalidate window and all descendents (children and grandchildren and ...
     41          */

   \                                 In section .text, align 4, keep-with-next
     42          void WM_InvalidateWindowAndDescs(WM_HWIN hWin) {
   \                     WM_InvalidateWindowAndDescs:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
     43            WM_HWIN hChild;
     44            if (hWin) {
   \   0000000C   0C00000A           BEQ      ??WM_InvalidateWindowAndDescs_0
     45              WM_InvalidateWindow(hWin);    /* Invalidate window itself */
   \   00000010   ........           BL       WM_InvalidateWindow
     46              for (hChild = WM_GetFirstChild(hWin); hChild;) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       WM_GetFirstChild
   \   0000001C   0040B0E1           MOVS     R4,R0
   \   00000020   0700000A           BEQ      ??WM_InvalidateWindowAndDescs_0
     47                WM_Obj* pChild = WM_H2P(hChild);
   \                     ??WM_InvalidateWindowAndDescs_1:
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_h2p
   \   0000002C   0050A0E1           MOV      R5,R0
     48                WM_InvalidateWindowAndDescs(hChild);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindowAndDescs
     49                hChild = pChild->hNext;
   \   00000038   204095E5           LDR      R4,[R5, #+32]
   \   0000003C   000054E3           CMP      R4,#+0
   \   00000040   F7FFFF1A           BNE      ??WM_InvalidateWindowAndDescs_1
     50              }
     51            }
     52          }
   \                     ??WM_InvalidateWindowAndDescs_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
     53          
     54          /*********************************************************************
     55          *
     56          *       WM_ShowWindow
     57          */

   \                                 In section .text, align 4, keep-with-next
     58          void WM_ShowWindow(WM_HWIN hWin) {
   \                     WM_ShowWindow:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
     59            if (hWin) {
   \   0000000C   1600000A           BEQ      ??WM_ShowWindow_0
     60              WM_Obj *pWin;
     61              WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
     62              pWin = WM_H2P(hWin);  
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
     63              if ((pWin->Status & WM_SF_ISVIS) == 0) {  /* First check if this is necessary at all */
   \   0000001C   281090E5           LDR      R1,[R0, #+40]
   \   00000020   020011E3           TST      R1,#0x2
   \   00000024   0F00001A           BNE      ??WM_ShowWindow_1
     64                pWin->Status |= WM_SF_ISVIS;  /* Set Visibility flag */
   \   00000028   021081E3           ORR      R1,R1,#0x2
   \   0000002C   281080E5           STR      R1,[R0, #+40]
     65                WM_InvalidateWindowAndDescs(hWin);    /* Mark content as invalid */
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       WM_GetFirstChild
   \   00000040   0040B0E1           MOVS     R4,R0
   \   00000044   0700000A           BEQ      ??WM_ShowWindow_1
   \                     ??WM_ShowWindow_2:
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_ALLOC_h2p
   \   00000050   0050A0E1           MOV      R5,R0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_InvalidateWindowAndDescs
   \   0000005C   204095E5           LDR      R4,[R5, #+32]
   \   00000060   000054E3           CMP      R4,#+0
   \   00000064   F7FFFF1A           BNE      ??WM_ShowWindow_2
     66                #if WM_SUPPORT_NOTIFY_VIS_CHANGED
     67                  WM__NotifyVisChanged(hWin, &pWin->Rect);
     68                #endif
     69              }
     70              WM_UNLOCK();
   \                     ??WM_ShowWindow_1:
   \   00000068   ........           BL       GUI_Unlock
     71            }
     72          }
   \                     ??WM_ShowWindow_0:
   \   0000006C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
     73          
     74          #else
     75            void WM_Show_c(void) {} /* avoid empty object files */
     76          #endif   /* GUI_WINSUPPORT */
     77          
     78          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     WM_InvalidateWindowAndDescs     16
     WM_ShowWindow                   16


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     WM_InvalidateWindowAndDescs   76
     WM_ShowWindow                116

 
 192 bytes in section .text
 
 192 bytes of CODE memory

Errors: none
Warnings: none
