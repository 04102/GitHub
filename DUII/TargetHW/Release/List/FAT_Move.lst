###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FAT_Move.c                           #
#    Command line =  C:\DUII\TargetHW\FS\FAT_Move.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FAT_Move.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FAT_Move.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FAT_Move.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FAT_Move.c
     19          Purpose     : FAT routines for moving files or directory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FAT_Intern.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Static code
     35          *
     36          **********************************************************************
     37          */
     38          
     39          /*********************************************************************
     40          *
     41          *       Public code
     42          *
     43          **********************************************************************
     44          */
     45          
     46          /*********************************************************************
     47          *
     48          *       FS__FAT_Move
     49          *
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          char FS__FAT_Move(FS_VOLUME * pVolume, U32 DirStartOld, U32 DirStartNew, const char * sOldName, const char * sNewName, FS_SB * pSB) {
   \                     FS__FAT_Move:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
     52            U16             Date;
     53            U16             Time;
     54            U32             ClusterId;
     55            U32             Size;
     56            U8              Attrib;
     57            char            r;
     58            FS_FAT_DENTRY * pDirEntryCheck;
     59            FS_FAT_DENTRY * pDirEntry;
     60            I32             LongDirEntryIndex = -1;
     61            U32             OldDirSectorNo;
     62          
     63            r                   = 1;
     64            //
     65            // Check at first if the directory entry already exists in the target directory
     66            //
     67            pDirEntryCheck = FS_FAT_FindDirEntry(pVolume, pSB, sNewName, 0, DirStartNew, 0, NULL);
     68            if(pDirEntryCheck) {
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   08008DE5           STR      R0,[SP, #+8]
   \   00000014   04008DE5           STR      R0,[SP, #+4]
   \   00000018   20009DE5           LDR      R0,[SP, #+32]
   \   0000001C   48609DE5           LDR      R6,[SP, #+72]
   \   00000020   4C509DE5           LDR      R5,[SP, #+76]
   \   00000024   0010E0E3           MVN      R1,#+0
   \   00000028   0370A0E1           MOV      R7,R3
   \   0000002C   14108DE5           STR      R1,[SP, #+20]
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   0620A0E1           MOV      R2,R6
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       FS_FAT_FindDirEntry
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100000A           BEQ      ??FS__FAT_Move_0
     69              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS__FAT_Move: name %s already in target directory.\n", sNewName));
     70              return 1;
   \                     ??FS__FAT_Move_1:
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   520000EA           B        ??FS__FAT_Move_2
     71            }
     72            //
     73            //  Find old entry
     74            //
     75            pDirEntry = FS_FAT_FindDirEntry(pVolume, pSB, sOldName, 0, DirStartOld, 0, &LongDirEntryIndex);
   \                     ??FS__FAT_Move_0:
   \   00000058   14008DE2           ADD      R0,SP,#+20
   \   0000005C   08008DE5           STR      R0,[SP, #+8]
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   04008DE5           STR      R0,[SP, #+4]
   \   00000068   1C009DE5           LDR      R0,[SP, #+28]
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       FS_FAT_FindDirEntry
   \   00000084   0070B0E1           MOVS     R7,R0
     76            if (pDirEntry == NULL) {
   \   00000088   F0FFFF0A           BEQ      ??FS__FAT_Move_1
     77              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS__FAT_Move: source file/directory %s does not exist.\n", sOldName));
     78              return 1;
     79            }
     80            //
     81            //  We need to remember the sector number of the old directory entry 
     82            //  since we need to mark the directory entry as deleted.
     83            //
     84            OldDirSectorNo = pSB->SectorNo;
   \   0000008C   001095E5           LDR      R1,[R5, #+0]
     85            //
     86            // Save the old directory entry
     87            // 
     88            Attrib    = pDirEntry->data[DIR_ENTRY_OFF_ATTRIBUTES];
     89            Time      = FS_LoadU16LE(&pDirEntry->data[DIR_ENTRY_OFF_CREATION_TIME]);
   \   00000090   0E0087E2           ADD      R0,R7,#+14
   \   00000094   18108DE5           STR      R1,[SP, #+24]
   \   00000098   0B80D7E5           LDRB     R8,[R7, #+11]
   \   0000009C   ........           BL       FS_LoadU16LE
   \   000000A0   0090A0E1           MOV      R9,R0
     90            Date      = FS_LoadU16LE(&pDirEntry->data[DIR_ENTRY_OFF_CREATION_DATE]);
   \   000000A4   100087E2           ADD      R0,R7,#+16
   \   000000A8   ........           BL       FS_LoadU16LE
   \   000000AC   00A0A0E1           MOV      R10,R0
     91            ClusterId = FS_FAT_GetFirstCluster(pDirEntry);
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   ........           BL       FS_FAT_GetFirstCluster
   \   000000B8   00B0A0E1           MOV      R11,R0
     92            Size      = FS_LoadU32LE(&pDirEntry->data[DIR_ENTRY_OFF_SIZE]);
   \   000000BC   1C0087E2           ADD      R0,R7,#+28
   \   000000C0   ........           BL       FS_LoadU32LE
     93            if (Attrib & FS_FAT_ATTR_READ_ONLY) {
   \   000000C4   010018E3           TST      R8,#0x1
   \   000000C8   E0FFFF1A           BNE      ??FS__FAT_Move_1
   \   000000CC   ........           LDR      R12,??DataTable1_1
   \   000000D0   10A08DE5           STR      R10,[SP, #+16]
   \   000000D4   00C09CE5           LDR      R12,[R12, #+0]
   \   000000D8   0C908DE5           STR      R9,[SP, #+12]
   \   000000DC   08008DE5           STR      R0,[SP, #+8]
   \   000000E0   04808DE5           STR      R8,[SP, #+4]
   \   000000E4   00B08DE5           STR      R11,[SP, #+0]
   \   000000E8   20309DE5           LDR      R3,[SP, #+32]
   \   000000EC   0620A0E1           MOV      R2,R6
   \   000000F0   0510A0E1           MOV      R1,R5
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   08C09CE5           LDR      R12,[R12, #+8]
     94              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS__FAT_Move: source file/directory %s is read-only.\n", sOldName));
     95              return 1;
     96            }
     97            //
     98            // Create the new directory entry
     99            // 
    100            if (FAT_pDirEntryAPI->pfCreateDirEntry(pVolume, pSB, sNewName, DirStartNew, ClusterId, Attrib, Size, Time, Date)) {
   \   000000FC   3CFF2FE1           BLX      R12
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   D1FFFF0A           BEQ      ??FS__FAT_Move_1
    101              r = 0;
    102            } else {
    103              FS_DEBUG_ERROROUT((FS_MTYPE_FS, "FS__FAT_Move: directory entry %s could not be created in target directory.\n", sNewName));
    104              return 1;
    105            }
    106            //
    107            //  In case of a directory we need to update the ".." directory entry.
    108            // 
    109            if ((Attrib & FS_FAT_ATTR_DIRECTORY) == FS_FAT_ATTR_DIRECTORY) {
   \   00000108   100018E3           TST      R8,#0x10
   \   0000010C   0F00000A           BEQ      ??FS__FAT_Move_3
    110              FS_FAT_DENTRY * pSubDirEntry;
    111              pSubDirEntry = FS_FAT_FindDirEntry(pVolume, pSB, "..", 0, ClusterId, FS_FAT_ATTR_DIRECTORY, NULL);
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   08008DE5           STR      R0,[SP, #+8]
   \   00000118   1000A0E3           MOV      R0,#+16
   \   0000011C   04008DE5           STR      R0,[SP, #+4]
   \   00000120   00B08DE5           STR      R11,[SP, #+0]
   \   00000124   0030A0E3           MOV      R3,#+0
   \   00000128   ........           ADR      R2,??DataTable1  ;; 0x2E, 0x2E, 0x00, 0x00
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           BL       FS_FAT_FindDirEntry
    112              if (pSubDirEntry) {
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0100000A           BEQ      ??FS__FAT_Move_4
    113                FS_FAT_WriteDirEntryCluster(pSubDirEntry, DirStartNew);
   \   00000140   20109DE5           LDR      R1,[SP, #+32]
   \   00000144   ........           BL       FS_FAT_WriteDirEntryCluster
    114              }
    115              FS__SB_MarkDirty(pSB);
   \                     ??FS__FAT_Move_4:
   \   00000148   0500A0E1           MOV      R0,R5
   \   0000014C   ........           BL       FS__SB_MarkDirty
    116            }
    117            //
    118            // Set and mark old directory entry as invalid
    119            //   
    120            FS__SB_SetSector(pSB, OldDirSectorNo, FS_SB_TYPE_DIRECTORY);
   \                     ??FS__FAT_Move_3:
   \   00000150   0120A0E3           MOV      R2,#+1
   \   00000154   18109DE5           LDR      R1,[SP, #+24]
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           BL       FS__SB_SetSector
    121            FS__SB_Read(pSB);
   \   00000160   0500A0E1           MOV      R0,R5
   \   00000164   ........           BL       FS__SB_Read
    122            pDirEntry->data[0]  = 0xe5;
   \   00000168   E500A0E3           MOV      R0,#+229
   \   0000016C   0000C7E5           STRB     R0,[R7, #+0]
    123            FS__SB_MarkDirty(pSB); 
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       FS__SB_MarkDirty
   \   00000178   ........           LDR      R0,??DataTable1_1
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   0CC090E5           LDR      R12,[R0, #+12]
   \   00000184   00005CE3           CMP      R12,#+0
   \   00000188   0400000A           BEQ      ??FS__FAT_Move_5
    124            if (FAT_pDirEntryAPI->pfDelLongEntry) {
    125              FAT_pDirEntryAPI->pfDelLongEntry(pVolume, pSB, DirStartOld, LongDirEntryIndex);
   \   0000018C   14309DE5           LDR      R3,[SP, #+20]
   \   00000190   1C209DE5           LDR      R2,[SP, #+28]
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   3CFF2FE1           BLX      R12
    126            }
    127            return r;
   \                     ??FS__FAT_Move_5:
   \   000001A0   0000A0E3           MOV      R0,#+0
   \                     ??FS__FAT_Move_2:
   \   000001A4   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000001A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    128          }
    129          
    130          /*********************************************************************
    131          *
    132          *       FS_FAT_Move
    133          *
    134          *  Description:
    135          *    Rename a existing file/directory.
    136          *
    137          *  Parameters:
    138          *    sOldName    - path to the file/directory.
    139          *    sNewName    - new file/directory name.
    140          *    pVolume     - Pointer to an FS_VOLUME data structure.
    141          *
    142          *  Return value:
    143          *    0         O.K.
    144          *    1         Error
    145          */

   \                                 In section .text, align 4, keep-with-next
    146          int FS_FAT_Move(const char * sOldName, const char * sNewName, FS_VOLUME * pVolume) {
   \                     FS_FAT_Move:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0240A0E1           MOV      R4,R2
    147            const char     * pNewName;
    148            const char     * pOldName;
    149            int              r;
    150            FS_SB            SB;
    151            U32              DirStartOld;
    152            U32              DirStartNew;
    153            //
    154            // Search directory
    155            // 
    156            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   18008DE2           ADD      R0,SP,#+24
   \   0000001C   ........           BL       FS__SB_Create
    157            if (FS_FAT_FindPath(pVolume, &SB, sOldName, &pOldName, &DirStartOld) == 0) {
   \   00000020   14008DE2           ADD      R0,SP,#+20
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   0C308DE2           ADD      R3,SP,#+12
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   18108DE2           ADD      R1,SP,#+24
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       FS_FAT_FindPath
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0300001A           BNE      ??FS_FAT_Move_0
    158              FS__SB_Delete(&SB);
   \                     ??FS_FAT_Move_1:
   \   00000044   18008DE2           ADD      R0,SP,#+24
   \   00000048   ........           BL       FS__SB_Delete
    159              return 1;  /* Directory not found */
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   1A0000EA           B        ??FS_FAT_Move_2
    160            }
    161            if (FS_FAT_FindPath(pVolume, &SB, sNewName, &pNewName, &DirStartNew) == 0) {
   \                     ??FS_FAT_Move_0:
   \   00000054   10008DE2           ADD      R0,SP,#+16
   \   00000058   00008DE5           STR      R0,[SP, #+0]
   \   0000005C   08308DE2           ADD      R3,SP,#+8
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   18108DE2           ADD      R1,SP,#+24
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       FS_FAT_FindPath
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   F2FFFF0A           BEQ      ??FS_FAT_Move_1
    162              FS__SB_Delete(&SB);
    163              return 1;  /* Directory not found */
    164            }
    165            r = 1;       /* No error so far */
    166            //
    167            // check if entry exists
    168            //
    169            if (*pNewName == 0) {
   \   00000078   08009DE5           LDR      R0,[SP, #+8]
    170              pNewName = pOldName;
    171            }
    172            r = FS__FAT_Move(pVolume, DirStartOld, DirStartNew, pOldName, pNewName, &SB);
   \   0000007C   0C309DE5           LDR      R3,[SP, #+12]
   \   00000080   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000084   10209DE5           LDR      R2,[SP, #+16]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0C109D05           LDREQ    R1,[SP, #+12]
   \   00000090   18008DE2           ADD      R0,SP,#+24
   \   00000094   08108D05           STREQ    R1,[SP, #+8]
   \   00000098   04008DE5           STR      R0,[SP, #+4]
   \   0000009C   08009DE5           LDR      R0,[SP, #+8]
   \   000000A0   14109DE5           LDR      R1,[SP, #+20]
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       FS__FAT_Move
   \   000000B0   0040A0E1           MOV      R4,R0
    173            FS__SB_Delete(&SB);
   \   000000B4   18008DE2           ADD      R0,SP,#+24
   \   000000B8   ........           BL       FS__SB_Delete
    174          
    175            return r;
   \   000000BC   0400A0E1           MOV      R0,R4
   \                     ??FS_FAT_Move_2:
   \   000000C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000000C4   7080BDE8           POP      {R4-R6,PC}       ;; return
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   2E2E0000           DC8      0x2E, 0x2E, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     FAT_pDirEntryAPI

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "..">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   2E2E0000           DC8 46, 46, 0, 0
    177          
    178          /*************************** End of file ****************************/
    179          

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     FS_FAT_Move      56
     FS__FAT_Move     72


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     FS__FAT_Move      428
     FS_FAT_Move       200
     ??DataTable1        4
     ??DataTable1_1      4
     ?<Constant "..">    4

 
   4 bytes in section .rodata
 636 bytes in section .text
 
 636 bytes of CODE  memory
   4 bytes of CONST memory

Errors: none
Warnings: none
