###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\RADIO_SkinClassic.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\RADIO_SkinClassic.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\RADIO_SkinClassic.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\RADIO_SkinClassic.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\RADIO_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : RADIO_SkinClassic.c
     19          Purpose     : Implementation of RADIO widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "RADIO_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Paint
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Paint(RADIO_Handle hObj) {
   \                     _Paint:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     40            RADIO_Obj * pObj;
     41            const GUI_BITMAP * pBmRadio;
     42            const GUI_BITMAP * pBmCheck;
     43            const char * pText;
     44            GUI_FONTINFO FontInfo;
     45            GUI_RECT Rect, r, rFocus = {0};
   \   00000004   ........           ADR      R1,`?<Constant {0}>`
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   002091E5           LDR      R2,[R1, #+0]
   \   00000014   043091E5           LDR      R3,[R1, #+4]
   \   00000018   10008DE2           ADD      R0,SP,#+16
   \   0000001C   0C0080E8           STM      R0,{R2,R3}
     46            int i, y, HasFocus, FontDistY, Sel, Height;
     47            U8 SpaceAbove, CHeight, FocusBorder;
     48          
     49            pObj = RADIO_LOCK_H(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   0050A0E1           MOV      R5,R0
     50            Sel = pObj->Sel;
   \   0000002C   F016D5E1           LDRSH    R1,[R5, #+96]
   \   00000030   20108DE5           STR      R1,[SP, #+32]
     51            Height = pObj->Props.apBmRadio[RADIO_BI_ACTIV]->YSize + RADIO_BORDER * 2;
   \   00000034   480095E5           LDR      R0,[R5, #+72]
     52            /* Init some data */
     53            WIDGET__GetClientRect(&pObj->Widget, &rFocus);
   \   00000038   10108DE2           ADD      R1,SP,#+16
   \   0000003C   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000040   048080E2           ADD      R8,R0,#+4
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       WIDGET__GetClientRect
     54            HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
   \   0000004C   3210D5E5           LDRB     R1,[R5, #+50]
     55            pBmRadio  = pObj->Props.apBmRadio[WM__IsEnabled(hObj)];
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   011001E2           AND      R1,R1,#0x1
   \   00000058   0C108DE5           STR      R1,[SP, #+12]
   \   0000005C   ........           BL       WM__IsEnabled
   \   00000060   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000064   446090E5           LDR      R6,[R0, #+68]
     56            pBmCheck  = pObj->Props.pBmCheck;
   \   00000068   4C7095E5           LDR      R7,[R5, #+76]
     57            rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
   \   0000006C   F000D6E1           LDRSH    R0,[R6, #+0]
   \   00000070   030080E2           ADD      R0,R0,#+3
   \   00000074   B401CDE1           STRH     R0,[SP, #+20]
     58            rFocus.y1 = Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
   \   00000078   F416D5E1           LDRSH    R1,[R5, #+100]
   \   0000007C   F226D5E1           LDRSH    R2,[R5, #+98]
   \   00000080   0800A0E1           MOV      R0,R8
   \   00000084   011041E2           SUB      R1,R1,#+1
   \   00000088   810200E1           SMLABB   R0,R1,R2,R0
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   B601CDE1           STRH     R0,[SP, #+22]
     59          
     60            /* Select font and text color */
     61            LCD_SetColor(pObj->Props.TextColor);
   \   00000094   380095E5           LDR      R0,[R5, #+56]
   \   00000098   ........           BL       LCD_SetColor
     62            GUI_SetFont(pObj->Props.pFont);
   \   0000009C   400095E5           LDR      R0,[R5, #+64]
   \   000000A0   ........           BL       GUI_SetFont
     63            GUI_SetTextMode(GUI_TM_TRANS);
   \   000000A4   0200A0E3           MOV      R0,#+2
   \   000000A8   ........           BL       GUI_SetTextMode
     64          
     65            /* Get font infos */
     66            GUI_GetFontInfo(pObj->Props.pFont, &FontInfo);
   \   000000AC   24108DE2           ADD      R1,SP,#+36
   \   000000B0   400095E5           LDR      R0,[R5, #+64]
   \   000000B4   ........           BL       GUI_GetFontInfo
     67            FontDistY   = GUI_GetFontDistY();
   \   000000B8   ........           BL       GUI_GetFontDistY
     68            CHeight     = FontInfo.CHeight;
   \   000000BC   2810DDE5           LDRB     R1,[SP, #+40]
     69            SpaceAbove  = FontInfo.Baseline - CHeight;
   \   000000C0   2630DDE5           LDRB     R3,[SP, #+38]
   \   000000C4   013043E0           SUB      R3,R3,R1
   \   000000C8   FF3003E2           AND      R3,R3,#0xFF
   \   000000CC   1C308DE5           STR      R3,[SP, #+28]
     70            Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
   \   000000D0   F030D6E1           LDRSH    R3,[R6, #+0]
     71            Rect.y0     = (CHeight <= Height) ? ((Height - CHeight) / 2) : 0;
   \   000000D4   010058E1           CMP      R8,R1
   \   000000D8   063083E2           ADD      R3,R3,#+6
   \   000000DC   BA30CDE1           STRH     R3,[SP, #+10]
   \   000000E0   030000BA           BLT      ??_Paint_0
   \   000000E4   012048E0           SUB      R2,R8,R1
   \   000000E8   A22F82E0           ADD      R2,R2,R2, LSR #+31
   \   000000EC   C280A0E1           ASR      R8,R2,#+1
   \   000000F0   000000EA           B        ??_Paint_1
   \                     ??_Paint_0:
   \   000000F4   0080A0E3           MOV      R8,#+0
     72            Rect.y1     = Rect.y0 + CHeight - 1;
     73            FocusBorder = (FontDistY <= 12) ? 2 : 3;
   \                     ??_Paint_1:
   \   000000F8   0D0050E3           CMP      R0,#+13
   \   000000FC   081081E0           ADD      R1,R1,R8
   \   00000100   02A0A0B3           MOVLT    R10,#+2
   \   00000104   03A0A0A3           MOVGE    R10,#+3
     74            if (Rect.y0 < FocusBorder) {
   \   00000108   0808A0E1           MOV      R0,R8, LSL #+16
   \   0000010C   011041E2           SUB      R1,R1,#+1
   \   00000110   40085AE1           CMP      R10,R0, ASR #+16
   \   00000114   B810CDE1           STRH     R1,[SP, #+8]
     75              FocusBorder = Rect.y0;
   \   00000118   FFA008C2           ANDGT    R10,R8,#0xFF
     76            }
     77          
     78            /* Clear inside ... Just in case      */
     79            /* Fill with parents background color */
     80          #if WM_SUPPORT_TRANSPARENCY
     81            if (!WM_GetHasTrans(hObj))
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           BL       WM_GetHasTrans
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0500001A           BNE      ??_Paint_2
     82          #endif
     83            {
     84              if (pObj->Props.BkColor != GUI_INVALID_COLOR) {
   \   0000012C   340095E5           LDR      R0,[R5, #+52]
   \   00000130   F014E0E3           MVN      R1,#-268435456
   \   00000134   010050E1           CMP      R0,R1
     85                LCD_SetBkColor(pObj->Props.BkColor);
     86              } else {
     87                LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
   \   00000138   ........           LDREQ    R0,??DataTable3  ;; 0xc0c0c0
   \   0000013C   ........           BL       LCD_SetBkColor
     88              }
     89              GUI_Clear();
   \   00000140   ........           BL       GUI_Clear
     90            }
     91          
     92            /* Iterate over all items */
     93            for (i = 0; i < pObj->NumItems; i++) {
   \                     ??_Paint_2:
   \   00000144   00106AE2           RSB      R1,R10,#+0
   \   00000148   18108DE5           STR      R1,[SP, #+24]
   \   0000014C   B406D5E1           LDRH     R0,[R5, #+100]
   \   00000150   0090A0E3           MOV      R9,#+0
   \   00000154   010050E3           CMP      R0,#+1
   \   00000158   4B0000BA           BLT      ??_Paint_3
     94              y = i * pObj->Spacing;
   \                     ??_Paint_4:
   \   0000015C   B206D5E1           LDRH     R0,[R5, #+98]
   \   00000160   90090AE0           MUL      R10,R0,R9
     95              /* Draw the radio button bitmap */
     96              GUI_UNLOCK_H(pObj);
   \   00000164   ........           BL       GUI_ALLOC_UnlockH
     97              GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
   \   00000168   02208AE2           ADD      R2,R10,#+2
   \   0000016C   0210A0E3           MOV      R1,#+2
   \   00000170   0600A0E1           MOV      R0,R6
   \   00000174   ........           BL       GUI_DrawBitmap
     98              /* Draw the check bitmap */
     99              if (Sel == i) {
   \   00000178   20009DE5           LDR      R0,[SP, #+32]
   \   0000017C   090050E1           CMP      R0,R9
   \   00000180   0D00001A           BNE      ??_Paint_5
    100                GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
    101                                         RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
   \   00000184   B200D6E1           LDRH     R0,[R6, #+2]
   \   00000188   B210D7E1           LDRH     R1,[R7, #+2]
   \   0000018C   B020D7E1           LDRH     R2,[R7, #+0]
   \   00000190   010040E0           SUB      R0,R0,R1
   \   00000194   B010D6E1           LDRH     R1,[R6, #+0]
   \   00000198   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000019C   C0008AE0           ADD      R0,R10,R0, ASR #+1
   \   000001A0   021041E0           SUB      R1,R1,R2
   \   000001A4   022080E2           ADD      R2,R0,#+2
   \   000001A8   A10F81E0           ADD      R0,R1,R1, LSR #+31
   \   000001AC   0210A0E3           MOV      R1,#+2
   \   000001B0   C01081E0           ADD      R1,R1,R0, ASR #+1
   \   000001B4   0700A0E1           MOV      R0,R7
   \   000001B8   ........           BL       GUI_DrawBitmap
    102              }
    103              pObj = RADIO_LOCK_H(hObj);
   \                     ??_Paint_5:
   \   000001BC   0400A0E1           MOV      R0,R4
   \   000001C0   ........           BL       GUI_ALLOC_LockH
   \   000001C4   0050A0E1           MOV      R5,R0
    104              /* Draw text if available */
    105              pText = (const char *)GUI_ARRAY_GetpItemLocked(pObj->TextArray, i);
   \   000001C8   0910A0E1           MOV      R1,R9
   \   000001CC   5C0095E5           LDR      R0,[R5, #+92]
   \   000001D0   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000001D4   00B0B0E1           MOVS     R11,R0
    106              if (pText) {
   \   000001D8   2700000A           BEQ      ??_Paint_6
    107                if (*pText) {
   \   000001DC   0000DBE5           LDRB     R0,[R11, #+0]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   2300000A           BEQ      ??_Paint_7
    108                  r = Rect;
   \   000001E8   FA10DDE1           LDRSH    R1,[SP, #+10]
   \   000001EC   B280CDE1           STRH     R8,[SP, #+2]
    109                  r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
   \   000001F0   0B00A0E1           MOV      R0,R11
   \   000001F4   B010CDE1           STRH     R1,[SP, #+0]
   \   000001F8   FC12DDE1           LDRSH    R1,[SP, #+44]
   \   000001FC   B410CDE1           STRH     R1,[SP, #+4]
   \   00000200   F810DDE1           LDRSH    R1,[SP, #+8]
   \   00000204   B610CDE1           STRH     R1,[SP, #+6]
   \   00000208   ........           BL       GUI_GetStringDistX
   \   0000020C   F010DDE1           LDRSH    R1,[SP, #+0]
    110                  GUI_MoveRect(&r, 0, y);
   \   00000210   0A20A0E1           MOV      R2,R10
   \   00000214   000081E0           ADD      R0,R1,R0
   \   00000218   020040E2           SUB      R0,R0,#+2
   \   0000021C   B400CDE1           STRH     R0,[SP, #+4]
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   0D00A0E1           MOV      R0,SP
   \   00000228   ........           BL       GUI_MoveRect
    111                  GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
   \   0000022C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000230   1C109DE5           LDR      R1,[SP, #+28]
   \   00000234   012040E0           SUB      R2,R0,R1
   \   00000238   F010DDE1           LDRSH    R1,[SP, #+0]
   \   0000023C   0B00A0E1           MOV      R0,R11
   \   00000240   ........           BL       GUI_DispStringAt
    112                  /* Calculate focus rect */
    113                  if (HasFocus && ((pObj->Sel == i) || (pObj->GroupId))) {
   \   00000244   0C009DE5           LDR      R0,[SP, #+12]
   \   00000248   000050E3           CMP      R0,#+0
   \   0000024C   0900000A           BEQ      ??_Paint_7
   \   00000250   F006D5E1           LDRSH    R0,[R5, #+96]
   \   00000254   090050E1           CMP      R0,R9
   \   00000258   0200000A           BEQ      ??_Paint_8
   \   0000025C   6600D5E5           LDRB     R0,[R5, #+102]
   \   00000260   000050E3           CMP      R0,#+0
   \   00000264   0300000A           BEQ      ??_Paint_7
    114                    GUI__ReduceRect(&rFocus, &r, -FocusBorder);
   \                     ??_Paint_8:
   \   00000268   18209DE5           LDR      R2,[SP, #+24]
   \   0000026C   0D10A0E1           MOV      R1,SP
   \   00000270   10008DE2           ADD      R0,SP,#+16
   \   00000274   ........           BL       GUI__ReduceRect
    115                  }
    116                }
    117                GUI_UNLOCK_H(pText);
   \                     ??_Paint_7:
   \   00000278   ........           BL       GUI_ALLOC_UnlockH
    118              }
    119            }
   \                     ??_Paint_6:
   \   0000027C   B406D5E1           LDRH     R0,[R5, #+100]
   \   00000280   019089E2           ADD      R9,R9,#+1
   \   00000284   000059E1           CMP      R9,R0
   \   00000288   B3FFFFBA           BLT      ??_Paint_4
    120          
    121            /* Draw the focus rect */
    122            if (HasFocus) {
   \                     ??_Paint_3:
   \   0000028C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000290   000050E3           CMP      R0,#+0
   \   00000294   0400000A           BEQ      ??_Paint_9
    123              LCD_SetColor(pObj->Props.FocusColor);
   \   00000298   3C0095E5           LDR      R0,[R5, #+60]
   \   0000029C   ........           BL       LCD_SetColor
    124              GUI_DrawFocusRect(&rFocus, 0);
   \   000002A0   0010A0E3           MOV      R1,#+0
   \   000002A4   10008DE2           ADD      R0,SP,#+16
   \   000002A8   ........           BL       GUI_DrawFocusRect
    125            }
    126            GUI_UNLOCK_H(pObj);
   \                     ??_Paint_9:
   \   000002AC   ........           BL       GUI_ALLOC_UnlockH
    127          }
   \   000002B0   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000002B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    128          
    129          /*********************************************************************
    130          *
    131          *       _Create
    132          */

   \                                 In section .text, align 4, keep-with-next
    133          static void _Create(RADIO_Handle hObj) {
    134            // Nothing special to do...
    135            GUI_USE_PARA(hObj);
    136          }
   \                     _Create:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    137          
    138          /*********************************************************************
    139          *
    140          *       _GetButtonSize
    141          */

   \                                 In section .text, align 4, keep-with-next
    142          static unsigned _GetButtonSize(RADIO_Handle hObj) {
   \                     _GetButtonSize:
   \   00000000   10402DE9           PUSH     {R4,LR}
    143            RADIO_Obj * pObj;
    144            unsigned ButtonSize;
    145            
    146            pObj = RADIO_LOCK_H(hObj);
    147            ButtonSize = pObj->Props.apBmRadio[RADIO_BI_ACTIV]->YSize;
   \   00000004   ........           BL       GUI_ALLOC_LockH
   \   00000008   480090E5           LDR      R0,[R0, #+72]
   \   0000000C   B240D0E1           LDRH     R4,[R0, #+2]
    148            GUI_UNLOCK_H(pObj);
   \   00000010   ........           BL       GUI_ALLOC_UnlockH
    149            return ButtonSize;
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
    150          }
    151          
    152          /*********************************************************************
    153          *
    154          *        Private data
    155          *
    156          **********************************************************************
    157          */
    158          /*********************************************************************
    159          *
    160          *       _SkinPrivate
    161          */

   \                                 In section .data, align 4
    162          static RADIO_SKIN_PRIVATE _SkinPrivate = {
   \                     _SkinPrivate:
   \   00000000   ........           DC32 _GetButtonSize
   \   00000004   00000000           DC8 0, 0, 0, 0
    163            _GetButtonSize
    164          };
    165          
    166          /*********************************************************************
    167          *
    168          *       RADIO__SkinClassic
    169          */

   \                                 In section .text, align 4, keep-with-next
    170          const WIDGET_SKIN RADIO__SkinClassic = {
   \                     RADIO__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create, _SkinPrivate
   \              ............
    171            _Paint,
    172            _Create,
    173            &_SkinPrivate
    174          };
    175          
    176          /*********************************************************************
    177          *
    178          *        Public code
    179          *
    180          **********************************************************************
    181          */
    182          /*********************************************************************
    183          *
    184          *       RADIO_SetSkinClassic
    185          */

   \                                 In section .text, align 4, keep-with-next
    186          void RADIO_SetSkinClassic(RADIO_Handle hObj) {
   \                     RADIO_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    187            RADIO_Obj * pObj;
    188          
    189            pObj = RADIO_LOCK_H(hObj);
    190            pObj->pWidgetSkin = &RADIO__SkinClassic;
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   ........           ADR      R1,RADIO__SkinClassic
   \   00000010   581080E5           STR      R1,[R0, #+88]
    191            GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    192            WM_InvalidateWindow(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        WM_InvalidateWindow  ;; tailcall
    193          }
    194          
    195          /*********************************************************************
    196          *
    197          *       RADIO_SetDefaultSkinClassic
    198          */

   \                                 In section .text, align 4, keep-with-next
    199          void RADIO_SetDefaultSkinClassic(void) {
    200            RADIO__pSkinDefault = &RADIO__SkinClassic;
   \                     RADIO_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable3_1
   \   00000004   ........           ADR      R1,RADIO__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    201          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   C0C0C000           DC32     0xc0c0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     RADIO__pSkinDefault

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0
    202          
    203          
    204          #else                            /* Avoid empty object files */
    205            void RADIO_SkinClassic_C(void);
    206            void RADIO_SkinClassic_C(void) {}
    207          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     RADIO_SetDefaultSkinClassic      0
     RADIO_SetSkinClassic             8
     _Create                          0
     _GetButtonSize                   8
     _Paint                          88


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     _Paint                       696
     _Create                        4
     _GetButtonSize                28
     _SkinPrivate                   8
     RADIO__SkinClassic            12
     RADIO_SetSkinClassic          36
     RADIO_SetDefaultSkinClassic   16
     ??DataTable3                   4
     ??DataTable3_1                 4
     ?<Constant {0}>                8

 
   8 bytes in section .data
 808 bytes in section .text
 
 808 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
