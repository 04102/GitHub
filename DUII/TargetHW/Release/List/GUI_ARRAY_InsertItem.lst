###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:54 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_ARRAY_InsertItem.c              #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_ARRAY_InsertItem.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_ARRAY_InsertItem.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_ARRAY_InsertItem.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_ARRAY_InsertItem.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_ARRAY_InsertItem.c
     19          Purpose     : Array handling routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_ARRAY_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       public code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       GUI_ARRAY_InsertBlankItem
     38          *
     39          * Purpose:
     40          *   Inserts a blank element in a GUI_ARRAY_OBJ.
     41          *
     42          * Parameters:
     43          *   Index   Index of the element to insert before
     44          *           0 means: Insert before first element
     45          *           1 means: Insert before second element
     46          *
     47          * Return value:
     48          *   1 if successful
     49          *   0 if failed
     50          *
     51          * Notes:
     52          *   (1) Index changes
     53          *       The index of all items after the one inserted will change
     54          *       (Increment by 1)
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          char GUI_ARRAY_InsertBlankItem(GUI_ARRAY hArray, unsigned int Index) {
   \                     GUI_ARRAY_InsertBlankItem:
   \   00000000   E04F2DE9           PUSH     {R5-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   0170A0E1           MOV      R7,R1
     57            GUI_ARRAY_OBJ * pThis;
     58            U16 NumItems;
     59            WM_HMEM haHandle;
     60            
     61            if (hArray) {
   \   0000000C   000056E3           CMP      R6,#+0
   \   00000010   2600000A           BEQ      ??GUI_ARRAY_InsertBlankItem_0
     62              pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \   00000014   ........           BL       GUI_ALLOC_LockH
     63              NumItems = pThis->NumItems;
   \   00000018   B080D0E1           LDRH     R8,[R0, #+0]
     64              haHandle = pThis->haHandle;
   \   0000001C   049090E5           LDR      R9,[R0, #+4]
     65              GUI_UNLOCK_H(pThis);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
     66              if (Index >= (unsigned)NumItems) {
   \   00000024   080057E1           CMP      R7,R8
   \   00000028   2000002A           BCS      ??GUI_ARRAY_InsertBlankItem_0
     67                GUI_DEBUG_ERROROUT("GUI_ARRAY_InsertBlankItem: Illegal index");
     68              } else {
     69                WM_HMEM hNewBuffer;
     70                hNewBuffer = GUI_ALLOC_AllocZero(sizeof(WM_HMEM) * (NumItems + 1));
   \   0000002C   010088E2           ADD      R0,R8,#+1
   \   00000030   0001A0E1           LSL      R0,R0,#+2
   \   00000034   ........           BL       GUI_ALLOC_AllocZero
   \   00000038   0050B0E1           MOVS     R5,R0
     71                if (hNewBuffer == 0) {
   \   0000003C   1B00000A           BEQ      ??GUI_ARRAY_InsertBlankItem_0
     72                  GUI_DEBUG_ERROROUT("GUI_ARRAY_InsertBlankItem: Failed to alloc buffer");
     73                } else {
     74                  WM_HMEM * pOldBuffer;
     75                  WM_HMEM * pNewBuffer;
     76                  pNewBuffer = (WM_HMEM *)GUI_LOCK_H(hNewBuffer);
   \   00000040   ........           BL       GUI_ALLOC_LockH
   \   00000044   00A0A0E1           MOV      R10,R0
     77                  pOldBuffer = (WM_HMEM *)GUI_LOCK_H(haHandle);
   \   00000048   0900A0E1           MOV      R0,R9
   \   0000004C   ........           BL       GUI_ALLOC_LockH
   \   00000050   00B0A0E1           MOV      R11,R0
     78                  GUI_MEMCPY(pNewBuffer, pOldBuffer, Index * sizeof(WM_HMEM));
   \   00000054   0721A0E1           LSL      R2,R7,#+2
   \   00000058   0B10A0E1           MOV      R1,R11
   \   0000005C   0A00A0E1           MOV      R0,R10
   \   00000060   ........           BL       __aeabi_memcpy4
     79                  GUI_MEMCPY(pNewBuffer + (Index + 1), pOldBuffer + Index, (NumItems - Index) * sizeof(WM_HMEM));
   \   00000064   070048E0           SUB      R0,R8,R7
   \   00000068   0021A0E1           LSL      R2,R0,#+2
   \   0000006C   07018AE0           ADD      R0,R10,R7, LSL #+2
   \   00000070   07118BE0           ADD      R1,R11,R7, LSL #+2
   \   00000074   040080E2           ADD      R0,R0,#+4
   \   00000078   ........           BL       __aeabi_memcpy
     80                  GUI_UNLOCK_H(pNewBuffer);
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
     81                  GUI_UNLOCK_H(pOldBuffer);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
     82                  GUI_ALLOC_Free(haHandle);
   \   00000084   0900A0E1           MOV      R0,R9
   \   00000088   ........           BL       GUI_ALLOC_Free
     83                  pThis = (GUI_ARRAY_OBJ *)GUI_LOCK_H(hArray);
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   ........           BL       GUI_ALLOC_LockH
     84                  pThis->haHandle = hNewBuffer;
   \   00000094   045080E5           STR      R5,[R0, #+4]
     85                  pThis->NumItems++;
   \   00000098   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000009C   011081E2           ADD      R1,R1,#+1
   \   000000A0   B010C0E1           STRH     R1,[R0, #+0]
     86                  GUI_UNLOCK_H(pThis);
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
     87                  return 1;               /* Successfull */
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   E08FBDE8           POP      {R5-R11,PC}
     88                }
     89              }
     90            }
     91            return 0;                   /* Failed */
   \                     ??GUI_ARRAY_InsertBlankItem_0:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   E08FBDE8           POP      {R5-R11,PC}      ;; return
     92          }
     93          
     94          /*********************************************************************
     95          *
     96          *       GUI_ARRAY_InsertItem
     97          *
     98          * Purpose:
     99          *   Inserts an element in a GUI_ARRAY_OBJ.
    100          *
    101          *
    102          * Parameters:
    103          *   Index   Index of the element to insert before
    104          *           0 means: Insert before first element
    105          *           1 means: Insert before second element
    106          *
    107          * Return value:
    108          *   Handle of allocated memory block if successful
    109          *   0 if failed
    110          *
    111          * Notes:
    112          *   (1) Index changes
    113          *       The index of all items after the one inserted will change
    114          *       (Increment by 1)
    115          */

   \                                 In section .text, align 4, keep-with-next
    116          WM_HMEM GUI_ARRAY_InsertItem(GUI_ARRAY hArray, unsigned int Index, int Len) {
   \                     GUI_ARRAY_InsertItem:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    117            WM_HMEM hNewBuffer = 0;
   \   00000014   0070A0E3           MOV      R7,#+0
    118            if (GUI_ARRAY_InsertBlankItem(hArray, Index)) {
   \   00000018   ........           BL       GUI_ARRAY_InsertBlankItem
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500000A           BEQ      ??GUI_ARRAY_InsertItem_0
    119              hNewBuffer = GUI_ARRAY_SetItem(hArray, Index, 0, Len);
   \   00000024   0630A0E1           MOV      R3,R6
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_ARRAY_SetItem
   \   00000038   0070A0E1           MOV      R7,R0
    120            }
    121            return hNewBuffer;
   \                     ??GUI_ARRAY_InsertItem_0:
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   F080BDE8           POP      {R4-R7,PC}       ;; return
    122          }
    123          
    124          #else  /* avoid empty object files */
    125          
    126          void GUI_ARRAY_InsertItem_C(void);
    127          void GUI_ARRAY_InsertItem_C(void){}
    128          
    129          #endif

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_ARRAY_InsertBlankItem     40
     GUI_ARRAY_InsertItem          24


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GUI_ARRAY_InsertBlankItem  184
     GUI_ARRAY_InsertItem        72

 
 256 bytes in section .text
 
 256 bytes of CODE memory

Errors: none
Warnings: none
