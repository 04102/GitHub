###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawGraph.c                     #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawGraph.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawGraph.lst          #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawGraph.o             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawGraph.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawPolyline.c
     19          Purpose     : Implementation of GUI_DrawPolyline
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DrawGraph
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DrawGraph(I16 *pay, int NumPoints, int xOff, int yOff) {
   \                     _DrawGraph:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   0160A0E1           MOV      R6,R1
   \   00000008   ........           LDR      R1,??DataTable1
     38            int i;
     39            int y0, y1;
     40            int yClip0, yClip1;
     41            /* Perform high level clipping in x */
     42            yClip0 = GUI_Context.pClipRect_HL->y0;
     43            yClip1 = GUI_Context.pClipRect_HL->y1;
     44            i=0;
   \   0000000C   0070A0E3           MOV      R7,#+0
   \   00000010   141091E5           LDR      R1,[R1, #+20]
   \   00000014   F240D1E1           LDRSH    R4,[R1, #+2]
   \   00000018   F650D1E1           LDRSH    R5,[R1, #+6]
     45            if (GUI_Context.pClipRect_HL) {
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0800000A           BEQ      ??_DrawGraph_0
   \   00000024   F030D1E1           LDRSH    R3,[R1, #+0]
     46              if (xOff < GUI_Context.pClipRect_HL->x0)
     47                i = GUI_Context.pClipRect_HL->x0 - xOff;
   \   00000028   F410D1E1           LDRSH    R1,[R1, #+4]
   \   0000002C   030052E1           CMP      R2,R3
   \   00000030   027043B0           SUBLT    R7,R3,R2
   \   00000034   023086E0           ADD      R3,R6,R2
   \   00000038   013043E2           SUB      R3,R3,#+1
   \   0000003C   030051E1           CMP      R1,R3
     48              if (xOff+NumPoints-1 > GUI_Context.pClipRect_HL->x1)
     49                NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
   \   00000040   021041B0           SUBLT    R1,R1,R2
   \   00000044   016081B2           ADDLT    R6,R1,#+1
     50            }
     51            /* Start drawing if there is something left to do after x-clipping */
     52            if (i < NumPoints) {
   \                     ??_DrawGraph_0:
   \   00000048   060057E1           CMP      R7,R6
   \   0000004C   290000AA           BGE      ??_DrawGraph_1
     53              y0 = *(pay + i++) + yOff;
   \   00000050   871080E0           ADD      R1,R0,R7, LSL #+1
   \   00000054   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000058   00309DE5           LDR      R3,[SP, #+0]
   \   0000005C   017087E2           ADD      R7,R7,#+1
   \   00000060   011083E0           ADD      R1,R3,R1
   \   00000064   060057E1           CMP      R7,R6
   \   00000068   220000AA           BGE      ??_DrawGraph_1
   \   0000006C   078082E0           ADD      R8,R2,R7
   \   00000070   879080E0           ADD      R9,R0,R7, LSL #+1
     54              /* Iterate */
     55              for (; i < NumPoints; i++) {
     56                /* Perform high level clipping in y */
     57                y1 = *(pay + i) + yOff;
   \                     ??_DrawGraph_2:
   \   00000074   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000078   00209DE5           LDR      R2,[SP, #+0]
     58                if ((y0 >= yClip0) || (y1 >= yClip0)) {
   \   0000007C   040051E1           CMP      R1,R4
   \   00000080   00A082E0           ADD      R10,R2,R0
   \   00000084   04005AB1           CMPLT    R10,R4
   \   00000088   140000BA           BLT      ??_DrawGraph_3
     59                  if ((y0 <= yClip1) || (y1 <= yClip1)) {
   \   0000008C   010055E1           CMP      R5,R1
   \   00000090   0A0055B1           CMPLT    R5,R10
   \   00000094   110000BA           BLT      ??_DrawGraph_3
     60                    int y01;
     61                    y01 = (y1 + y0) / 2;
   \   00000098   0A0081E0           ADD      R0,R1,R10
   \   0000009C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000A0   C0B0A0E1           ASR      R11,R0,#+1
     62                    if (y0 <= y1) {
   \   000000A4   010048E2           SUB      R0,R8,#+1
   \   000000A8   01005AE1           CMP      R10,R1
   \   000000AC   040000BA           BLT      ??_DrawGraph_4
     63                      LCD_DrawVLine(i + xOff - 1, y0, y01);
   \   000000B0   0B20A0E1           MOV      R2,R11
   \   000000B4   ........           BL       LCD_DrawVLine
     64                      LCD_DrawVLine(i + xOff, y01, y1);
   \   000000B8   0A20A0E1           MOV      R2,R10
   \   000000BC   0B10A0E1           MOV      R1,R11
   \   000000C0   040000EA           B        ??_DrawGraph_5
     65                    } else {
     66                      LCD_DrawVLine(i + xOff - 1, y01, y0);
   \                     ??_DrawGraph_4:
   \   000000C4   0120A0E1           MOV      R2,R1
   \   000000C8   0B10A0E1           MOV      R1,R11
   \   000000CC   ........           BL       LCD_DrawVLine
     67                      LCD_DrawVLine(i + xOff, y1, y01);
   \   000000D0   0B20A0E1           MOV      R2,R11
   \   000000D4   0A10A0E1           MOV      R1,R10
   \                     ??_DrawGraph_5:
   \   000000D8   0800A0E1           MOV      R0,R8
   \   000000DC   ........           BL       LCD_DrawVLine
     68                    }
     69                  }
     70                }
     71                y0 = y1;
     72              }
   \                     ??_DrawGraph_3:
   \   000000E0   017087E2           ADD      R7,R7,#+1
   \   000000E4   0A10A0E1           MOV      R1,R10
   \   000000E8   029089E2           ADD      R9,R9,#+2
   \   000000EC   018088E2           ADD      R8,R8,#+1
   \   000000F0   060057E1           CMP      R7,R6
   \   000000F4   DEFFFFBA           BLT      ??_DrawGraph_2
     73            }
     74          }
   \                     ??_DrawGraph_1:
   \   000000F8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
     75          
     76          /*********************************************************************
     77          *
     78          *       Public code
     79          *
     80          **********************************************************************
     81          */
     82          /*********************************************************************
     83          *
     84          *       GUI_DrawGraph
     85          */  

   \                                 In section .text, align 4, keep-with-next
     86          void GUI_DrawGraph(I16 *pay, int NumPoints, int x0, int y0) {
   \                     GUI_DrawGraph:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     87            GUI_LOCK();
   \   00000018   ........           BL       GUI_Lock
     88            #if (GUI_WINSUPPORT)
     89              WM_ADDORG(x0,y0);
   \   0000001C   ........           LDR      R0,??DataTable1
   \   00000020   401090E5           LDR      R1,[R0, #+64]
   \   00000024   440090E5           LDR      R0,[R0, #+68]
   \   00000028   066081E0           ADD      R6,R1,R6
   \   0000002C   077080E0           ADD      R7,R0,R7
     90              WM_ITERATE_START(NULL); {
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   ........           BL       WM__InitIVRSearch
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0700000A           BEQ      ??GUI_DrawGraph_0
     91            #endif
     92            _DrawGraph(pay, NumPoints, x0, y0);
   \                     ??GUI_DrawGraph_1:
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       _DrawGraph
     93            #if (GUI_WINSUPPORT)
     94              } WM_ITERATE_END();
   \   00000054   ........           BL       WM__GetNextIVR
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   F7FFFF1A           BNE      ??GUI_DrawGraph_1
     95            #endif
     96            GUI_UNLOCK();
   \                     ??GUI_DrawGraph_0:
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   ........           B        GUI_Unlock       ;; tailcall
     97          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
     98          
     99          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     GUI_DrawGraph     24
     _DrawGraph        40


   Section sizes:

     Function/Label Bytes
     -------------- -----
     _DrawGraph      256
     GUI_DrawGraph   108
     ??DataTable1      4

 
 368 bytes in section .text
 
 368 bytes of CODE memory

Errors: none
Warnings: none
