###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:07 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_323.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_323.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_323.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_323.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_323.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_323.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code,
     28          *
     29          *       LCD_FIXEDPALETTE == 323, 256 colors, BBBGGRRR
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _Color2Index_323
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static unsigned _Color2Index_323(LCD_COLOR Color) {
     38            int r, g, b;
     39            r = Color & 255;
     40            g = (Color >> 8 ) & 255;
     41            b = Color >> 16;
     42            r = (r * 7 + 127) / 255;
     43            g = (g + 42) / 85;
     44            b = (b * 7 + 127) / 255;
     45            return r + (g << 3) + (b << 5);
   \                     _Color2Index_323:
   \   00000000   FF1000E2           AND      R1,R0,#0xFF
   \   00000004   811161E0           RSB      R1,R1,R1, LSL #+3
   \   00000008   ........           LDR      R2,??DataTable2  ;; 0x80808081
   \   0000000C   7F1081E2           ADD      R1,R1,#+127
   \   00000010   9132C2E0           SMULL    R3,R2,R1,R2
   \   00000014   C130A0E3           MOV      R3,#+193
   \   00000018   012082E0           ADD      R2,R2,R1
   \   0000001C   C213B0E1           ASRS     R1,R2,#+7
   \   00000020   2024A0E1           LSR      R2,R0,#+8
   \   00000024   FF2002E2           AND      R2,R2,#0xFF
   \   00000028   2A2082E2           ADD      R2,R2,#+42
   \   0000002C   0228A0E1           LSL      R2,R2,#+16
   \   00000030   C03C83E3           ORR      R3,R3,#0xC000
   \   00000034   2228A0E1           LSR      R2,R2,#+16
   \   00000038   920303E0           MUL      R3,R2,R3
   \   0000003C   01108142           ADDMI    R1,R1,#+1
   \   00000040   232BA0E1           LSR      R2,R3,#+22
   \   00000044   821181E0           ADD      R1,R1,R2, LSL #+3
   \   00000048   2008A0E1           LSR      R0,R0,#+16
   \   0000004C   800160E0           RSB      R0,R0,R0, LSL #+3
   \   00000050   ........           LDR      R2,??DataTable2  ;; 0x80808081
   \   00000054   7F0080E2           ADD      R0,R0,#+127
   \   00000058   9032C2E0           SMULL    R3,R2,R0,R2
   \   0000005C   002082E0           ADD      R2,R2,R0
   \   00000060   C203B0E1           ASRS     R0,R2,#+7
   \   00000064   01008042           ADDMI    R0,R0,#+1
   \   00000068   800281E0           ADD      R0,R1,R0, LSL #+5
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     46          }
     47          
     48          /*********************************************************************
     49          *
     50          *       _Index2Color_323
     51          */

   \                                 In section .text, align 4, keep-with-next
     52          static LCD_COLOR _Index2Color_323(unsigned Index) {
     53            int r, g, b;
     54            r =  (Index & 7)       * 255 / 7;
     55            g = ((Index >> 3) & 3) *  85;
     56            b = ((Index >> 5) & 7) * 255 / 7;
     57            return r + (g << 8) + (((U32)b) << 16);
   \                     _Index2Color_323:
   \   00000000   071000E2           AND      R1,R0,#0x7
   \   00000004   ........           LDR      R3,??DataTable2_1  ;; 0x92492492
   \   00000008   011461E0           RSB      R1,R1,R1, LSL #+8
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   9133A2E0           UMLAL    R3,R2,R1,R3
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   A01101E0           AND      R1,R1,R0, LSR #+3
   \   0000001C   5530A0E3           MOV      R3,#+85
   \   00000020   830161E1           SMULBB   R1,R3,R1
   \   00000024   ........           LDR      R3,??DataTable2_1  ;; 0x92492492
   \   00000028   0114A0E1           LSL      R1,R1,#+8
   \   0000002C   221181E0           ADD      R1,R1,R2, LSR #+2
   \   00000030   0720A0E3           MOV      R2,#+7
   \   00000034   A00202E0           AND      R0,R2,R0, LSR #+5
   \   00000038   000460E0           RSB      R0,R0,R0, LSL #+8
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   9033A2E0           UMLAL    R3,R2,R0,R3
   \   00000044   2201A0E1           LSR      R0,R2,#+2
   \   00000048   000881E0           ADD      R0,R1,R0, LSL #+16
   \   0000004C   1EFF2FE1           BX       LR               ;; return
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       _GetIndexMask_323
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static unsigned _GetIndexMask_323(void) {
     65            return 0xff;
   \                     _GetIndexMask_323:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   1EFF2FE1           BX       LR               ;; return
     66          }
     67          
     68          /*********************************************************************
     69          *
     70          *       Public data
     71          *
     72          **********************************************************************
     73          */
     74          /*********************************************************************
     75          *
     76          *       LCD_API_ColorConv_323
     77          *
     78          * Purpose
     79          *   API table for this color conversion mode. Only used by memory
     80          *   devices in this mode.
     81          */

   \                                 In section .rodata, align 4, keep-with-next
     82          const LCD_API_COLOR_CONV LCD_API_ColorConv_323 = {
   \                     LCD_API_ColorConv_323:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_323, _Index2Color_323, _GetIndexMask_323
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   81808080           DC32     0x80808081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   92244992           DC32     0x92492492
     83            _Color2Index_323,
     84            _Index2Color_323,
     85            _GetIndexMask_323
     86          };
     87          
     88          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _Color2Index_323       0
     _GetIndexMask_323      0
     _Index2Color_323       0


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _Color2Index_323       112
     _Index2Color_323        80
     _GetIndexMask_323        8
     LCD_API_ColorConv_323   12
     ??DataTable2             4
     ??DataTable2_1           4

 
  12 bytes in section .rodata
 208 bytes in section .text
 
 208 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
