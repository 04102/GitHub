###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:24 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_RLE16.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_RLE16.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LCD_RLE16.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LCD_RLE16.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_RLE16.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDRLE16.c
     19          Purpose     : Drawing routines for run length encoded bitmaps
     20                        with 8 bpp
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          #include <stddef.h>           /* needed for definition of NULL */
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Static data
     31          *
     32          **********************************************************************
     33          */
     34          
     35          static struct {
     36            int x, y;
     37            const U8 GUI_UNI_PTR * pPixel;
     38            const U8 GUI_UNI_PTR * pPixelStart;

   \                                 In section .bss, align 4
     39          } _Cache;
   \                     _Cache:
   \   00000000                      DS8 16
   \   00000010                      DS8 1
     40          
     41          static U8  _BitmapSwapRB;
     42          
     43          /*********************************************************************
     44          *
     45          *       Static code
     46          *
     47          **********************************************************************
     48          */
     49          /*********************************************************************
     50          *
     51          *       _Read16
     52          */
     53          static U16 _Read16(const U8 GUI_UNI_PTR ** ppData) {
     54            const U8 GUI_UNI_PTR * pData;
     55            U16  Value;
     56            pData = *ppData;
     57            Value = *pData;
     58            Value |= (U16)(*(pData + 1) << 8);
     59            pData += 2;
     60            *ppData = pData;
     61            return Value;
     62          }
     63          
     64          /*********************************************************************
     65          *
     66          *       _DrawBitmap_RLE16
     67          */
     68          static LCD_PIXELINDEX _GetPixelIndex(const U8 GUI_UNI_PTR ** ppPixel) {
     69            U16 Data = _Read16(ppPixel);
     70            if (_BitmapSwapRB) {
     71              return LCD_Color2Index(LCD_Index2Color_M565(Data));
     72            }
     73            return LCD_Color2Index(LCD_Index2Color_565(Data));
     74          }
     75          
     76          /*********************************************************************
     77          *
     78          *       _DrawBitmap_RLE
     79          */

   \                                 In section .text, align 4, keep-with-next
     80          static void _DrawBitmap_RLE(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag) {
   \                     _DrawBitmap_RLE:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
     81            LCD_PIXELINDEX OldColorIndex, PixelIndex;
     82            int xi, y, xL, yL;
     83            const U8 GUI_UNI_PTR * pPixelOrg;
     84            char NoTrans, IsMagnified;
     85            pPixelOrg     = pPixel;
     86            NoTrans       = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
   \   00000004   ........           LDR      R5,??DataTable4
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   1010D5E5           LDRB     R1,[R5, #+16]
   \   00000010   10D04DE2           SUB      SP,SP,#+16
   \   00000014   40809DE5           LDR      R8,[SP, #+64]
   \   00000018   A11002E0           AND      R1,R2,R1, LSR #+1
   \   0000001C   011021E2           EOR      R1,R1,#0x1
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     87            IsMagnified   = ((yMag | xMag) != 1);
   \   00000024   48109DE5           LDR      R1,[SP, #+72]
   \   00000028   44209DE5           LDR      R2,[SP, #+68]
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   011082E1           ORR      R1,R2,R1
   \   00000034   010051E3           CMP      R1,#+1
   \   00000038   0120A013           MOVNE    R2,#+1
   \   0000003C   0020A003           MOVEQ    R2,#+0
   \   00000040   00208DE5           STR      R2,[SP, #+0]
   \   00000044   ........           LDR      R2,??DataTable4_1
     88            OldColorIndex = LCD__GetColorIndex();
     89           /* Check if we can limit the number of lines due to clipping) */
     90            if (yMag == 1) {
   \   00000048   48109DE5           LDR      R1,[SP, #+72]
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   002092E5           LDR      R2,[R2, #+0]
   \   00000058   010051E3           CMP      R1,#+1
   \   0000005C   08208DE5           STR      R2,[SP, #+8]
   \   00000060   0600001A           BNE      ??_DrawBitmap_RLE_0
   \   00000064   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000068   10209DE5           LDR      R2,[SP, #+16]
   \   0000006C   021041E0           SUB      R1,R1,R2
   \   00000070   18209DE5           LDR      R2,[SP, #+24]
   \   00000074   011081E2           ADD      R1,R1,#+1
   \   00000078   020051E1           CMP      R1,R2
     91              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1) {
     92                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   0000007C   18108DB5           STRLT    R1,[SP, #+24]
     93              }
     94            }
     95            /* Init variables for looping */
     96            xi = y = 0;
   \                     ??_DrawBitmap_RLE_0:
   \   00000080   00109DE5           LDR      R1,[SP, #+0]
   \   00000084   0060A0E3           MOV      R6,#+0
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   0E00001A           BNE      ??_DrawBitmap_RLE_1
     97            /* Check if we can use the cache to save some unnecessary iterations */
     98            if (!IsMagnified) {
     99              int yDiff = GUI_Context.ClipRect.y0 - y0;
    100              if ((_Cache.pPixelStart == pPixel) && (yDiff > _Cache.y)) {
   \   00000094   ........           LDR      R1,??DataTable4_2
   \   00000098   0C1091E5           LDR      R1,[R1, #+12]
   \   0000009C   080051E1           CMP      R1,R8
   \   000000A0   0A00001A           BNE      ??_DrawBitmap_RLE_1
   \   000000A4   ........           LDR      R1,??DataTable4_2
   \   000000A8   FA20D5E1           LDRSH    R2,[R5, #+10]
   \   000000AC   10309DE5           LDR      R3,[SP, #+16]
   \   000000B0   041091E5           LDR      R1,[R1, #+4]
   \   000000B4   032042E0           SUB      R2,R2,R3
   \   000000B8   020051E1           CMP      R1,R2
   \   000000BC   030000AA           BGE      ??_DrawBitmap_RLE_1
    101                /* Accept cache values */
    102                y      = _Cache.y;
   \   000000C0   0160A0E1           MOV      R6,R1
    103                xi     = _Cache.x;
   \   000000C4   ........           LDR      R1,??DataTable4_2
   \   000000C8   007091E5           LDR      R7,[R1, #+0]
    104                pPixel = _Cache.pPixel;
   \   000000CC   088091E5           LDR      R8,[R1, #+8]
    105              }
    106            }
    107            /* Init values for caching */
    108            _Cache.pPixel = _Cache.pPixelStart = pPixelOrg;
   \                     ??_DrawBitmap_RLE_1:
   \   000000D0   ........           LDR      R1,??DataTable4_2
   \   000000D4   0C0081E5           STR      R0,[R1, #+12]
   \   000000D8   0100A0E1           MOV      R0,R1
   \   000000DC   0C1091E5           LDR      R1,[R1, #+12]
   \   000000E0   081080E5           STR      R1,[R0, #+8]
    109            _Cache.x = _Cache.y = 0;
   \   000000E4   ........           LDR      R1,??DataTable4_2
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   040081E5           STR      R0,[R1, #+4]
   \   000000F0   000081E5           STR      R0,[R1, #+0]
    110            /* Repeat until we have reached bottom */
    111            for (; y < ysize; ) {
   \                     ??_DrawBitmap_RLE_2:
   \   000000F4   18009DE5           LDR      R0,[SP, #+24]
   \   000000F8   000056E1           CMP      R6,R0
   \   000000FC   830000AA           BGE      ??_DrawBitmap_RLE_3
    112              U8 NumCompressedPixels = *pPixel++;
   \   00000100   01B0D8E4           LDRB     R11,[R8], #+1
    113              if (NumCompressedPixels) {
   \   00000104   00005BE3           CMP      R11,#+0
   \   00000108   3E00000A           BEQ      ??_DrawBitmap_RLE_4
    114                PixelIndex = _GetPixelIndex(&pPixel);
   \   0000010C   0000D8E5           LDRB     R0,[R8, #+0]
   \   00000110   0110D8E5           LDRB     R1,[R8, #+1]
   \   00000114   028088E2           ADD      R8,R8,#+2
   \   00000118   010480E1           ORR      R0,R0,R1, LSL #+8
   \   0000011C   ........           LDR      R1,??DataTable4_2
   \   00000120   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   0100000A           BEQ      ??_DrawBitmap_RLE_5
   \   0000012C   ........           BL       LCD_Index2Color_M565
   \   00000130   000000EA           B        ??_DrawBitmap_RLE_6
   \                     ??_DrawBitmap_RLE_5:
   \   00000134   ........           BL       LCD_Index2Color_565
   \                     ??_DrawBitmap_RLE_6:
   \   00000138   ........           BL       LCD_Color2Index
   \   0000013C   0090A0E1           MOV      R9,R0
    115                /* Save cache info */
    116                _Cache.pPixel = pPixel - 3;
   \   00000140   ........           LDR      R0,??DataTable4_2
   \   00000144   031048E2           SUB      R1,R8,#+3
   \   00000148   081080E5           STR      R1,[R0, #+8]
    117                _Cache.x      = xi;
   \   0000014C   007080E5           STR      R7,[R0, #+0]
    118                _Cache.y      = y;
   \   00000150   046080E5           STR      R6,[R0, #+4]
    119                LCD__SetColorIndex(PixelIndex);
   \   00000154   ........           LDR      R0,??DataTable4_1
   \   00000158   000090E5           LDR      R0,[R0, #+0]
   \   0000015C   009080E5           STR      R9,[R0, #+0]
    120                while (NumCompressedPixels) {
    121                  int xi1 = xi + NumCompressedPixels;
    122                  if (xi1 >= xsize) {
   \                     ??_DrawBitmap_RLE_7:
   \   00000160   14009DE5           LDR      R0,[SP, #+20]
   \   00000164   07A08BE0           ADD      R10,R11,R7
   \   00000168   00005AE1           CMP      R10,R0
   \   0000016C   00A0A0C1           MOVGT    R10,R0
    123                    xi1 = xsize;
    124                  }
    125                  NumCompressedPixels -= (xi1 - xi);
   \   00000170   0A004BE0           SUB      R0,R11,R10
   \   00000174   00B087E0           ADD      R11,R7,R0
    126                  if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
   \   00000178   000059E3           CMP      R9,#+0
   \   0000017C   04009D05           LDREQ    R0,[SP, #+4]
   \   00000180   FFB00BE2           AND      R11,R11,#0xFF
   \   00000184   00005003           CMPEQ    R0,#+0
   \   00000188   1600000A           BEQ      ??_DrawBitmap_RLE_8
    127                    if (IsMagnified) {
   \   0000018C   00009DE5           LDR      R0,[SP, #+0]
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   0D00000A           BEQ      ??_DrawBitmap_RLE_9
    128                      xL = xMag * xi + x0;
    129                      yL = yMag * y + y0;
   \   00000198   48109DE5           LDR      R1,[SP, #+72]
   \   0000019C   10209DE5           LDR      R2,[SP, #+16]
   \   000001A0   962121E0           MLA      R1,R6,R1,R2
    130                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
   \   000001A4   48209DE5           LDR      R2,[SP, #+72]
   \   000001A8   44009DE5           LDR      R0,[SP, #+68]
   \   000001AC   022081E0           ADD      R2,R1,R2
   \   000001B0   013042E2           SUB      R3,R2,#+1
   \   000001B4   974020E0           MLA      R0,R7,R0,R4
   \   000001B8   44209DE5           LDR      R2,[SP, #+68]
   \   000001BC   07C04AE0           SUB      R12,R10,R7
   \   000001C0   9C0222E0           MLA      R2,R12,R2,R0
   \   000001C4   012042E2           SUB      R2,R2,#+1
   \   000001C8   ........           BL       LCD_FillRect
   \   000001CC   050000EA           B        ??_DrawBitmap_RLE_8
    131                    } else {
    132                      LCD_DrawHLine(x0 + xi, y + y0, xi1 + x0 - 1);
   \                     ??_DrawBitmap_RLE_9:
   \   000001D0   04008AE0           ADD      R0,R10,R4
   \   000001D4   012040E2           SUB      R2,R0,#+1
   \   000001D8   10009DE5           LDR      R0,[SP, #+16]
   \   000001DC   061080E0           ADD      R1,R0,R6
   \   000001E0   040087E0           ADD      R0,R7,R4
   \   000001E4   ........           BL       LCD_DrawHLine
    133                    }
    134                  }
    135                  xi = xi1;
    136                  if (xi1 == xsize) {
   \                     ??_DrawBitmap_RLE_8:
   \   000001E8   14009DE5           LDR      R0,[SP, #+20]
   \   000001EC   0A70A0E1           MOV      R7,R10
   \   000001F0   00005AE1           CMP      R10,R0
    137                    y++;
   \   000001F4   01608602           ADDEQ    R6,R6,#+1
    138                    xi = 0;
   \   000001F8   0070A003           MOVEQ    R7,#+0
    139                  }
    140                }
   \   000001FC   00005BE3           CMP      R11,#+0
   \   00000200   D6FFFF1A           BNE      ??_DrawBitmap_RLE_7
   \   00000204   BAFFFFEA           B        ??_DrawBitmap_RLE_2
    141              } else {
    142                U8 NumPixels = *pPixel++;
   \                     ??_DrawBitmap_RLE_4:
   \   00000208   01A0D8E4           LDRB     R10,[R8], #+1
    143                do {
    144                  PixelIndex = _GetPixelIndex(&pPixel);
   \                     ??_DrawBitmap_RLE_10:
   \   0000020C   0000D8E5           LDRB     R0,[R8, #+0]
   \   00000210   0110D8E5           LDRB     R1,[R8, #+1]
   \   00000214   028088E2           ADD      R8,R8,#+2
   \   00000218   010480E1           ORR      R0,R0,R1, LSL #+8
   \   0000021C   ........           LDR      R1,??DataTable4_2
   \   00000220   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000224   000051E3           CMP      R1,#+0
   \   00000228   0100000A           BEQ      ??_DrawBitmap_RLE_11
   \   0000022C   ........           BL       LCD_Index2Color_M565
   \   00000230   000000EA           B        ??_DrawBitmap_RLE_12
   \                     ??_DrawBitmap_RLE_11:
   \   00000234   ........           BL       LCD_Index2Color_565
   \                     ??_DrawBitmap_RLE_12:
   \   00000238   ........           BL       LCD_Color2Index
   \   0000023C   0090A0E1           MOV      R9,R0
    145                  if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
   \   00000240   000059E3           CMP      R9,#+0
   \   00000244   04009D05           LDREQ    R0,[SP, #+4]
   \   00000248   00005003           CMPEQ    R0,#+0
   \   0000024C   2200000A           BEQ      ??_DrawBitmap_RLE_13
    146                    int x = x0 + xi;
    147                    if (IsMagnified) {
   \   00000250   00009DE5           LDR      R0,[SP, #+0]
   \   00000254   041087E0           ADD      R1,R7,R4
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0E00000A           BEQ      ??_DrawBitmap_RLE_14
    148                      LCD_SetColorIndex(PixelIndex);
   \   00000260   0900A0E1           MOV      R0,R9
   \   00000264   ........           BL       LCD_SetColorIndex
    149                      xL = xMag * xi + x0;
    150                      yL = yMag * y + y0;
   \   00000268   48109DE5           LDR      R1,[SP, #+72]
   \   0000026C   10209DE5           LDR      R2,[SP, #+16]
   \   00000270   962121E0           MLA      R1,R6,R1,R2
    151                      LCD_FillRect(xL, yL, xL + xMag - 1 , yL + yMag - 1);
   \   00000274   48209DE5           LDR      R2,[SP, #+72]
   \   00000278   44009DE5           LDR      R0,[SP, #+68]
   \   0000027C   022081E0           ADD      R2,R1,R2
   \   00000280   974020E0           MLA      R0,R7,R0,R4
   \   00000284   013042E2           SUB      R3,R2,#+1
   \   00000288   44209DE5           LDR      R2,[SP, #+68]
   \   0000028C   022080E0           ADD      R2,R0,R2
   \   00000290   012042E2           SUB      R2,R2,#+1
   \   00000294   ........           BL       LCD_FillRect
   \   00000298   0F0000EA           B        ??_DrawBitmap_RLE_13
    152                    } else {
    153                      if ((y + y0) >= GUI_Context.ClipRect.y0) {
   \                     ??_DrawBitmap_RLE_14:
   \   0000029C   10009DE5           LDR      R0,[SP, #+16]
   \   000002A0   062080E0           ADD      R2,R0,R6
   \   000002A4   FA00D5E1           LDRSH    R0,[R5, #+10]
   \   000002A8   000052E1           CMP      R2,R0
    154                        if (x >= GUI_Context.ClipRect.x0) {
   \   000002AC   F800D5A1           LDRSHGE  R0,[R5, #+8]
   \   000002B0   000051A1           CMPGE    R1,R0
    155                          if (x <= GUI_Context.ClipRect.x1) {
   \   000002B4   FC00D5A1           LDRSHGE  R0,[R5, #+12]
   \   000002B8   010050A1           CMPGE    R0,R1
   \   000002BC   060000BA           BLT      ??_DrawBitmap_RLE_13
   \   000002C0   1100D5E5           LDRB     R0,[R5, #+17]
   \   000002C4   0930A0E1           MOV      R3,R9
   \   000002C8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000002CC   480090E5           LDR      R0,[R0, #+72]
   \   000002D0   0CC090E5           LDR      R12,[R0, #+12]
   \   000002D4   18C09CE5           LDR      R12,[R12, #+24]
    156                            LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y + y0, PixelIndex);
   \   000002D8   3CFF2FE1           BLX      R12
    157                          }
    158                        }
    159                      }
    160                    }
    161                  }
    162                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE_13:
   \   000002DC   14009DE5           LDR      R0,[SP, #+20]
   \   000002E0   017087E2           ADD      R7,R7,#+1
   \   000002E4   000057E1           CMP      R7,R0
   \   000002E8   040000BA           BLT      ??_DrawBitmap_RLE_15
    163                    y++;
    164                    xi = 0;
    165                    if (y >= ysize) {
   \   000002EC   18009DE5           LDR      R0,[SP, #+24]
   \   000002F0   016086E2           ADD      R6,R6,#+1
   \   000002F4   0070A0E3           MOV      R7,#+0
   \   000002F8   000056E1           CMP      R6,R0
   \   000002FC   7CFFFFAA           BGE      ??_DrawBitmap_RLE_2
    166                      break;
    167                    }
    168                  }
    169                } while (--NumPixels);
   \                     ??_DrawBitmap_RLE_15:
   \   00000300   01A04AE2           SUB      R10,R10,#+1
   \   00000304   FFA01AE2           ANDS     R10,R10,#0xFF
   \   00000308   BFFFFF1A           BNE      ??_DrawBitmap_RLE_10
   \   0000030C   78FFFFEA           B        ??_DrawBitmap_RLE_2
    170              }
    171            }
    172            LCD__SetColorIndex(OldColorIndex);
   \                     ??_DrawBitmap_RLE_3:
   \   00000310   ........           LDR      R0,??DataTable4_1
   \   00000314   08109DE5           LDR      R1,[SP, #+8]
   \   00000318   000090E5           LDR      R0,[R0, #+0]
    173          }
   \   0000031C   1CD08DE2           ADD      SP,SP,#+28
   \   00000320   001080E5           STR      R1,[R0, #+0]
   \   00000324   F08FBDE8           POP      {R4-R11,PC}      ;; return
    174          
    175          /*********************************************************************
    176          *
    177          *       _DrawBitmap_RLE16
    178          */

   \                                 In section .text, align 4, keep-with-next
    179          static void _DrawBitmap_RLE16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE16:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   28E09DE5           LDR      LR,[SP, #+40]
   \   00000010   2C409DE5           LDR      R4,[SP, #+44]
    180            GUI_USE_PARA(pLogPal);
    181            _BitmapSwapRB = 0;
   \   00000014   ........           LDR      R5,??DataTable4_2
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   1060C5E5           STRB     R6,[R5, #+16]
    182            _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
   \   00000020   08408DE5           STR      R4,[SP, #+8]
   \   00000024   04E08DE5           STR      LR,[SP, #+4]
   \   00000028   00C08DE5           STR      R12,[SP, #+0]
   \   0000002C   ........           BL       _DrawBitmap_RLE
    183          }
   \   00000030   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
    184          
    185          /*********************************************************************
    186          *
    187          *       _DrawBitmap_RLEM16
    188          */

   \                                 In section .text, align 4, keep-with-next
    189          static void _DrawBitmap_RLEM16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLEM16:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   28E09DE5           LDR      LR,[SP, #+40]
   \   00000010   2C409DE5           LDR      R4,[SP, #+44]
    190            GUI_USE_PARA(pLogPal);
    191            _BitmapSwapRB = 1;
   \   00000014   ........           LDR      R5,??DataTable4_2
   \   00000018   0160A0E3           MOV      R6,#+1
   \   0000001C   1060C5E5           STRB     R6,[R5, #+16]
    192            _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
   \   00000020   08408DE5           STR      R4,[SP, #+8]
   \   00000024   04E08DE5           STR      LR,[SP, #+4]
   \   00000028   00C08DE5           STR      R12,[SP, #+0]
   \   0000002C   ........           BL       _DrawBitmap_RLE
    193          }
   \   00000030   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
    194          
    195          /*********************************************************************
    196          *
    197          *       Public data
    198          *
    199          **********************************************************************
    200          */
    201          /*********************************************************************
    202          *
    203          *       GUI_BitmapMethodsRLE16
    204          */

   \                                 In section .rodata, align 4, keep-with-next
    205          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE16 = {
   \                     GUI_BitmapMethodsRLE16:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ........0000       DC32 _DrawBitmap_RLE16, 0
   \              0000        
   \   00000008   00000000           DC8 0, 0, 0, 0
    206            _DrawBitmap_RLE16,
    207            NULL
    208          };
    209          
    210          /*********************************************************************
    211          *
    212          *       GUI_BitmapMethodsRLEM16
    213          */

   \                                 In section .rodata, align 4, keep-with-next
    214          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLEM16 = {
   \                     GUI_BitmapMethodsRLEM16:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ........0000       DC32 _DrawBitmap_RLEM16, 0
   \              0000        
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     _Cache
    215            _DrawBitmap_RLEM16,
    216            NULL
    217          };
    218          
    219          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _DrawBitmap_RLE        64
     _DrawBitmap_RLE16      32
     _DrawBitmap_RLEM16     32


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _Cache                    17
     _BitmapSwapRB
     _DrawBitmap_RLE          808
     _DrawBitmap_RLE16         56
     _DrawBitmap_RLEM16        56
     GUI_BitmapMethodsRLE16    12
     GUI_BitmapMethodsRLEM16   12
     ??DataTable4               4
     ??DataTable4_1             4
     ??DataTable4_2             4

 
  17 bytes in section .bss
  24 bytes in section .rodata
 932 bytes in section .text
 
 932 bytes of CODE  memory
  24 bytes of CONST memory
  17 bytes of DATA  memory

Errors: none
Warnings: none
