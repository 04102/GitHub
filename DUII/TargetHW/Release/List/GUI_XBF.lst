###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_XBF.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_XBF.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_XBF.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_XBF.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_XBF.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_XBF.c
     19          Purpose     : Implementation of external binary fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Private code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI_XBF__ClearLine
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          void GUI_XBF__ClearLine(const char GUI_UNI_PTR * s, int Len) {
   \                     GUI_XBF__ClearLine:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0180A0E1           MOV      R8,R1
     36            U16 c;
     37            I16 XDist;
     38            int yDist, DispPosX, DispPosY;
     39            LCD_COLOR OldColor;
     40            OldColor = GUI_GetColor();
   \   0000000C   ........           BL       GUI_GetColor
     41            GUI_SetColor((GUI_Context.TextMode & GUI_TM_REV) ? GUI_GetColor() : GUI_GetBkColor());
   \   00000010   ........           LDR      R5,??DataTable3
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   2A00D5E5           LDRB     R0,[R5, #+42]
   \   0000001C   040010E3           TST      R0,#0x4
   \   00000020   0100000A           BEQ      ??GUI_XBF__ClearLine_0
   \   00000024   ........           BL       GUI_GetColor
   \   00000028   000000EA           B        ??GUI_XBF__ClearLine_1
   \                     ??GUI_XBF__ClearLine_0:
   \   0000002C   ........           BL       GUI_GetBkColor
   \                     ??GUI_XBF__ClearLine_1:
   \   00000030   ........           BL       GUI_SetColor
     42            yDist    = GUI_Context.pAFont->YDist * GUI_Context.pAFont->YMag;
   \   00000034   1C0095E5           LDR      R0,[R5, #+28]
     43            DispPosX = GUI_Context.DispPosX;
     44            DispPosY = GUI_Context.DispPosY;
   \   00000038   F462D5E1           LDRSH    R6,[R5, #+36]
   \   0000003C   1910D0E5           LDRB     R1,[R0, #+25]
   \   00000040   1B00D0E5           LDRB     R0,[R0, #+27]
     45            XDist    = 0;
   \   00000044   0070A0E3           MOV      R7,#+0
   \   00000048   018058E2           SUBS     R8,R8,#+1
   \   0000004C   800161E1           SMULBB   R1,R0,R1
   \   00000050   F202D5E1           LDRSH    R0,[R5, #+34]
   \   00000054   14108DE5           STR      R1,[SP, #+20]
   \   00000058   0C008DE5           STR      R0,[SP, #+12]
   \   0000005C   2C00004A           BMI      ??GUI_XBF__ClearLine_2
     46            while (--Len >= 0) {
     47              c = GUI_UC__GetCharCodeInc(&s);
   \                     ??GUI_XBF__ClearLine_3:
   \   00000060   18008DE2           ADD      R0,SP,#+24
   \   00000064   ........           BL       GUI_UC__GetCharCodeInc
   \   00000068   0090A0E1           MOV      R9,R0
     48              XDist += GUI_XBF__GetCharDistX(c);
   \   0000006C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000070   1CB090E5           LDR      R11,[R0, #+28]
   \   00000074   B000DBE1           LDRH     R0,[R11, #+0]
   \   00000078   000059E1           CMP      R9,R0
   \   0000007C   B210DB21           LDRHCS   R1,[R11, #+2]
   \   00000080   09005121           CMPCS    R1,R9
   \   00000084   1E00003A           BCC      ??GUI_XBF__ClearLine_4
   \   00000088   000049E0           SUB      R0,R9,R0
   \   0000008C   06C0A0E3           MOV      R12,#+6
   \   00000090   9C0000E0           MUL      R0,R12,R0
   \   00000094   10D08DE5           STR      SP,[SP, #+16]
   \   00000098   0D30A0E1           MOV      R3,SP
   \   0000009C   04209BE5           LDR      R2,[R11, #+4]
   \   000000A0   0410A0E3           MOV      R1,#+4
   \   000000A4   120080E2           ADD      R0,R0,#+18
   \   000000A8   08C09BE5           LDR      R12,[R11, #+8]
   \   000000AC   3CFF2FE1           BLX      R12
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0200001A           BNE      ??GUI_XBF__ClearLine_5
   \   000000B8   10008DE2           ADD      R0,SP,#+16
   \   000000BC   ........           BL       GUI__Read32
   \   000000C0   00A0A0E1           MOV      R10,R0
   \                     ??GUI_XBF__ClearLine_5:
   \   000000C4   00005AE3           CMP      R10,#+0
   \   000000C8   0D00000A           BEQ      ??GUI_XBF__ClearLine_4
   \   000000CC   08108DE2           ADD      R1,SP,#+8
   \   000000D0   04108DE5           STR      R1,[SP, #+4]
   \   000000D4   08308DE2           ADD      R3,SP,#+8
   \   000000D8   04209BE5           LDR      R2,[R11, #+4]
   \   000000DC   0210A0E3           MOV      R1,#+2
   \   000000E0   0A00A0E1           MOV      R0,R10
   \   000000E4   08C09BE5           LDR      R12,[R11, #+8]
   \   000000E8   3CFF2FE1           BLX      R12
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0100A013           MOVNE    R0,#+1
   \   000000F4   0300001A           BNE      ??GUI_XBF__ClearLine_6
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   ........           BL       GUI__Read16
   \   00000100   000000EA           B        ??GUI_XBF__ClearLine_6
   \                     ??GUI_XBF__ClearLine_4:
   \   00000104   0000A0E3           MOV      R0,#+0
     49            }
   \                     ??GUI_XBF__ClearLine_6:
   \   00000108   077080E0           ADD      R7,R0,R7
   \   0000010C   018058E2           SUBS     R8,R8,#+1
   \   00000110   D2FFFF5A           BPL      ??GUI_XBF__ClearLine_3
     50            XDist += GUI__GetOverlap(c);
   \                     ??GUI_XBF__ClearLine_2:
   \   00000114   0908A0E1           LSL      R0,R9,#+16
   \   00000118   2008A0E1           LSR      R0,R0,#+16
   \   0000011C   ........           BL       GUI__GetOverlap
     51            LCD_FillRect(DispPosX, 
     52                         DispPosY, 
     53                         DispPosX + XDist, 
     54                         DispPosY + yDist);
   \   00000120   14109DE5           LDR      R1,[SP, #+20]
   \   00000124   070080E0           ADD      R0,R0,R7
   \   00000128   063081E0           ADD      R3,R1,R6
   \   0000012C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000130   0008A0E1           LSL      R0,R0,#+16
   \   00000134   402881E0           ADD      R2,R1,R0, ASR #+16
   \   00000138   0610A0E1           MOV      R1,R6
   \   0000013C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000140   ........           BL       LCD_FillRect
     55            GUI_SetColor(OldColor);
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       GUI_SetColor
     56            //
     57            // Avoid background pixels to be drawn twice
     58            //
     59            GUI__CharHasTrans = 1;
   \   0000014C   ........           LDR      R0,??DataTable3_1
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   0010C0E5           STRB     R1,[R0, #+0]
     60          }
   \   00000158   1CD08DE2           ADD      SP,SP,#+28
   \   0000015C   F08FBDE8           POP      {R4-R11,PC}      ;; return
     61          
     62          /*********************************************************************
     63          *
     64          *       GUI_XBF__GetOff
     65          */

   \                                 In section .text, align 4, keep-with-next
     66          int GUI_XBF__GetOff(const GUI_XBF_DATA * pXBF_Data, unsigned c, U32 * pOff) {
   \                     GUI_XBF__GetOff:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   00C0A0E1           MOV      R12,R0
     67            U8 aBuffer[4];
     68            const U8 * pBuffer;
     69          
     70            pBuffer = aBuffer;
   \   0000000C   04D08DE5           STR      SP,[SP, #+4]
     71            c -= pXBF_Data->First;
     72            if (pXBF_Data->pfGetData(18 + (c << 1) + (c << 2), 4, pXBF_Data->pVoid, aBuffer)) { /* Get offset of character data */
   \   00000010   B0E0DCE1           LDRH     LR,[R12, #+0]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   0E0040E0           SUB      R0,R0,LR
   \   00000020   06E0A0E3           MOV      LR,#+6
   \   00000024   9E0000E0           MUL      R0,LR,R0
   \   00000028   04209CE5           LDR      R2,[R12, #+4]
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   0410A0E3           MOV      R1,#+4
   \   00000034   120080E2           ADD      R0,R0,#+18
   \   00000038   08C09CE5           LDR      R12,[R12, #+8]
   \   0000003C   3CFF2FE1           BLX      R12
   \   00000040   000050E3           CMP      R0,#+0
     73              return 1;
   \   00000044   0100A013           MOVNE    R0,#+1
   \   00000048   0300001A           BNE      ??GUI_XBF__GetOff_0
     74            }
     75            *pOff  = GUI__Read32(&pBuffer);
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   ........           BL       GUI__Read32
   \   00000054   000084E5           STR      R0,[R4, #+0]
     76            return 0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \                     ??GUI_XBF__GetOff_0:
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
     77          }
     78          
     79          /*********************************************************************
     80          *
     81          *       GUI_XBF__GetOffAndSize
     82          */

   \                                 In section .text, align 4, keep-with-next
     83          int GUI_XBF__GetOffAndSize(const GUI_XBF_DATA * pXBF_Data, unsigned c, U32 * pOff, U16 * pSize) {
   \                     GUI_XBF__GetOffAndSize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0240A0E1           MOV      R4,R2
     84            U8 aBuffer[6];
     85            const U8 * pBuffer;
     86          
     87            pBuffer = aBuffer;
   \   0000000C   04208DE2           ADD      R2,SP,#+4
   \   00000010   00C0A0E1           MOV      R12,R0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
     88            c -= pXBF_Data->First;
     89            if (pXBF_Data->pfGetData(18 + (c << 1) + (c << 2), 6, pXBF_Data->pVoid, aBuffer)) { /* Get offset and size of character data */
   \   00000018   B0E0DCE1           LDRH     LR,[R12, #+0]
   \   0000001C   0100A0E1           MOV      R0,R1
   \   00000020   0610A0E3           MOV      R1,#+6
   \   00000024   0E0040E0           SUB      R0,R0,LR
   \   00000028   910000E0           MUL      R0,R1,R0
   \   0000002C   0350A0E1           MOV      R5,R3
   \   00000030   04209CE5           LDR      R2,[R12, #+4]
   \   00000034   04308DE2           ADD      R3,SP,#+4
   \   00000038   120080E2           ADD      R0,R0,#+18
   \   0000003C   08C09CE5           LDR      R12,[R12, #+8]
   \   00000040   3CFF2FE1           BLX      R12
   \   00000044   000050E3           CMP      R0,#+0
     90              return 1;
   \   00000048   0100A013           MOVNE    R0,#+1
   \   0000004C   0600001A           BNE      ??GUI_XBF__GetOffAndSize_0
     91            }
     92            *pOff  = GUI__Read32(&pBuffer);
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           BL       GUI__Read32
   \   00000058   000084E5           STR      R0,[R4, #+0]
     93            *pSize = GUI__Read16(&pBuffer);
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           BL       GUI__Read16
   \   00000064   B000C5E1           STRH     R0,[R5, #+0]
     94            return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \                     ??GUI_XBF__GetOffAndSize_0:
   \   0000006C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
     95          }
     96          
     97          /*********************************************************************
     98          *
     99          *       GUI_XBF__GetCharDistX
    100          */

   \                                 In section .text, align 4, keep-with-next
    101          int GUI_XBF__GetCharDistX(U16P c) {
   \                     GUI_XBF__GetCharDistX:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    102            U8 aBuffer[2];
    103            const U8 * pBuffer;
    104            U16 DistX;
    105            U32 Off;
    106            const GUI_XBF_DATA * pXBF_Data;
    107          
    108            pXBF_Data = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
   \   00000004   ........           LDR      R1,??DataTable3
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   1C1091E5           LDR      R1,[R1, #+28]
   \   00000010   1C5091E5           LDR      R5,[R1, #+28]
    109            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   00000014   B0C0D5E1           LDRH     R12,[R5, #+0]
   \   00000018   0C0050E1           CMP      R0,R12
   \   0000001C   B210D521           LDRHCS   R1,[R5, #+2]
   \   00000020   00005121           CMPCS    R1,R0
   \   00000024   0100002A           BCS      ??GUI_XBF__GetCharDistX_0
    110              return 0;
   \                     ??GUI_XBF__GetCharDistX_1:
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   1C0000EA           B        ??GUI_XBF__GetCharDistX_2
    111            }
    112            GUI_XBF__GetOff(pXBF_Data, c, &Off);
   \                     ??GUI_XBF__GetCharDistX_0:
   \   00000030   0C0040E0           SUB      R0,R0,R12
   \   00000034   06C0A0E3           MOV      R12,#+6
   \   00000038   9C0000E0           MUL      R0,R12,R0
   \   0000003C   0CD08DE5           STR      SP,[SP, #+12]
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   042095E5           LDR      R2,[R5, #+4]
   \   00000048   0410A0E3           MOV      R1,#+4
   \   0000004C   120080E2           ADD      R0,R0,#+18
   \   00000050   08C095E5           LDR      R12,[R5, #+8]
   \   00000054   3CFF2FE1           BLX      R12
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0200001A           BNE      ??GUI_XBF__GetCharDistX_3
   \   00000060   0C008DE2           ADD      R0,SP,#+12
   \   00000064   ........           BL       GUI__Read32
   \   00000068   0040A0E1           MOV      R4,R0
    113            if (!Off) {
   \                     ??GUI_XBF__GetCharDistX_3:
   \   0000006C   000054E3           CMP      R4,#+0
   \   00000070   ECFFFF0A           BEQ      ??GUI_XBF__GetCharDistX_1
    114              return 0; /* Character not available */
    115            }
    116            pBuffer = aBuffer;
   \   00000074   08108DE2           ADD      R1,SP,#+8
   \   00000078   04108DE5           STR      R1,[SP, #+4]
    117            if (pXBF_Data->pfGetData(Off, 2, pXBF_Data->pVoid, aBuffer)) {
   \   0000007C   08308DE2           ADD      R3,SP,#+8
   \   00000080   042095E5           LDR      R2,[R5, #+4]
   \   00000084   0210A0E3           MOV      R1,#+2
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   08C095E5           LDR      R12,[R5, #+8]
   \   00000090   3CFF2FE1           BLX      R12
   \   00000094   000050E3           CMP      R0,#+0
    118              return 1;
   \   00000098   0100A013           MOVNE    R0,#+1
    119            }
    120            DistX = GUI__Read16(&pBuffer);
    121            return DistX;
   \   0000009C   04008D02           ADDEQ    R0,SP,#+4
   \   000000A0   ........           BLEQ     GUI__Read16
   \                     ??GUI_XBF__GetCharDistX_2:
   \   000000A4   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
    122          }
    123          
    124          /*********************************************************************
    125          *
    126          *       GUI_XBF__GetFontInfo
    127          */

   \                                 In section .text, align 4, keep-with-next
    128          void GUI_XBF__GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO * pInfo) {
    129            pInfo->Baseline = pFont->Baseline;
   \                     GUI_XBF__GetFontInfo:
   \   00000000   2020D0E5           LDRB     R2,[R0, #+32]
   \   00000004   0220C1E5           STRB     R2,[R1, #+2]
    130            pInfo->LHeight  = pFont->LHeight;
   \   00000008   2120D0E5           LDRB     R2,[R0, #+33]
   \   0000000C   0320C1E5           STRB     R2,[R1, #+3]
    131            pInfo->CHeight  = pFont->CHeight;
   \   00000010   2200D0E5           LDRB     R0,[R0, #+34]
   \   00000014   0400C1E5           STRB     R0,[R1, #+4]
    132            pInfo->Flags    = GUI_FONTINFO_FLAG_PROP;
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   B000C1E1           STRH     R0,[R1, #+0]
    133          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
    134          
    135          /*********************************************************************
    136          *
    137          *       GUI_XBF__IsInFont
    138          */

   \                                 In section .text, align 4, keep-with-next
    139          char GUI_XBF__IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
   \                     GUI_XBF__IsInFont:
   \   00000000   10402DE9           PUSH     {R4,LR}
    140            U32 Off;
    141            const GUI_XBF_DATA * pXBF_Data;
    142          
    143            pXBF_Data = (const GUI_XBF_DATA *)pFont->p.pFontData;
   \   00000004   1CE090E5           LDR      LR,[R0, #+28]
   \   00000008   01C0A0E1           MOV      R12,R1
    144            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   0000000C   B000DEE1           LDRH     R0,[LR, #+0]
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   00005CE1           CMP      R12,R0
   \   00000018   B210DE21           LDRHCS   R1,[LR, #+2]
   \   0000001C   0C005121           CMPCS    R1,R12
   \   00000020   1100003A           BCC      ??GUI_XBF__IsInFont_0
    145              return 1;
    146            }
    147            GUI_XBF__GetOff(pXBF_Data, c, &Off);
   \   00000024   00004CE0           SUB      R0,R12,R0
   \   00000028   06C0A0E3           MOV      R12,#+6
   \   0000002C   9C0000E0           MUL      R0,R12,R0
   \   00000030   04D08DE5           STR      SP,[SP, #+4]
   \   00000034   0D30A0E1           MOV      R3,SP
   \   00000038   04209EE5           LDR      R2,[LR, #+4]
   \   0000003C   0410A0E3           MOV      R1,#+4
   \   00000040   120080E2           ADD      R0,R0,#+18
   \   00000044   08C09EE5           LDR      R12,[LR, #+8]
   \   00000048   3CFF2FE1           BLX      R12
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0200001A           BNE      ??GUI_XBF__IsInFont_1
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           BL       GUI__Read32
   \   0000005C   0040A0E1           MOV      R4,R0
    148            if (!Off) {
   \                     ??GUI_XBF__IsInFont_1:
   \   00000060   000054E3           CMP      R4,#+0
    149              return 0; /* Character not available */
   \   00000064   0000A003           MOVEQ    R0,#+0
   \   00000068   0000000A           BEQ      ??GUI_XBF__IsInFont_2
    150            }
    151            return 1;
   \                     ??GUI_XBF__IsInFont_0:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \                     ??GUI_XBF__IsInFont_2:
   \   00000070   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000074   1080BDE8           POP      {R4,PC}          ;; return
    152          }
    153          
    154          /*********************************************************************
    155          *
    156          *       GUI_XBF__GetCharInfo
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          int GUI_XBF__GetCharInfo(U16P c, GUI_CHARINFO_EXT * pInfo) {
   \                     GUI_XBF__GetCharInfo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    159            U8 aBuffer[2];
    160            const U8 * pBuffer;
    161            U32 Off;
    162            const GUI_XBF_DATA * pXBF_Data;
    163          
    164            pXBF_Data = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
   \   00000008   ........           LDR      R1,??DataTable3
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   1C1091E5           LDR      R1,[R1, #+28]
   \   00000014   1C6091E5           LDR      R6,[R1, #+28]
    165            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   00000018   B0C0D6E1           LDRH     R12,[R6, #+0]
   \   0000001C   0C0050E1           CMP      R0,R12
   \   00000020   B210D621           LDRHCS   R1,[R6, #+2]
   \   00000024   00005121           CMPCS    R1,R0
   \   00000028   0100002A           BCS      ??GUI_XBF__GetCharInfo_0
    166              return 1;
   \                     ??GUI_XBF__GetCharInfo_1:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   230000EA           B        ??GUI_XBF__GetCharInfo_2
    167            }
    168            GUI_XBF__GetOff(pXBF_Data, c, &Off);
   \                     ??GUI_XBF__GetCharInfo_0:
   \   00000034   0C0040E0           SUB      R0,R0,R12
   \   00000038   06C0A0E3           MOV      R12,#+6
   \   0000003C   9C0000E0           MUL      R0,R12,R0
   \   00000040   04208DE2           ADD      R2,SP,#+4
   \   00000044   0C208DE5           STR      R2,[SP, #+12]
   \   00000048   04308DE2           ADD      R3,SP,#+4
   \   0000004C   042096E5           LDR      R2,[R6, #+4]
   \   00000050   0410A0E3           MOV      R1,#+4
   \   00000054   120080E2           ADD      R0,R0,#+18
   \   00000058   08C096E5           LDR      R12,[R6, #+8]
   \   0000005C   3CFF2FE1           BLX      R12
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0200001A           BNE      ??GUI_XBF__GetCharInfo_3
   \   00000068   0C008DE2           ADD      R0,SP,#+12
   \   0000006C   ........           BL       GUI__Read32
   \   00000070   0050A0E1           MOV      R5,R0
    169            if (!Off) {
   \                     ??GUI_XBF__GetCharInfo_3:
   \   00000074   000055E3           CMP      R5,#+0
   \   00000078   EBFFFF0A           BEQ      ??GUI_XBF__GetCharInfo_1
    170              return 1; /* Character not available */
    171            }
    172            pBuffer = aBuffer;
   \   0000007C   08108DE2           ADD      R1,SP,#+8
   \   00000080   00108DE5           STR      R1,[SP, #+0]
    173            if (pXBF_Data->pfGetData(Off, 4, pXBF_Data->pVoid, aBuffer)) {
   \   00000084   08308DE2           ADD      R3,SP,#+8
   \   00000088   042096E5           LDR      R2,[R6, #+4]
   \   0000008C   0410A0E3           MOV      R1,#+4
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   08C096E5           LDR      R12,[R6, #+8]
   \   00000098   3CFF2FE1           BLX      R12
   \   0000009C   000050E3           CMP      R0,#+0
    174              return 1;
   \   000000A0   0100A013           MOVNE    R0,#+1
   \   000000A4   0600001A           BNE      ??GUI_XBF__GetCharInfo_2
    175            }
    176            pInfo->XDist = GUI__Read16(&pBuffer);
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   ........           BL       GUI__Read16
   \   000000B0   0400C4E5           STRB     R0,[R4, #+4]
    177            pInfo->XSize = GUI__Read16(&pBuffer);
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   ........           BL       GUI__Read16
   \   000000BC   0000C4E5           STRB     R0,[R4, #+0]
    178            return 0; /* ok */
   \   000000C0   0000A0E3           MOV      R0,#+0
   \                     ??GUI_XBF__GetCharInfo_2:
   \   000000C4   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   000000C8   7080BDE8           POP      {R4-R6,PC}       ;; return
    179          }
    180          
    181          /*********************************************************************
    182          *
    183          *       Public code
    184          *
    185          **********************************************************************
    186          */
    187          /*********************************************************************
    188          *
    189          *       GUI_XBF_CreateFont
    190          */

   \                                 In section .text, align 4, keep-with-next
    191          int GUI_XBF_CreateFont(GUI_FONT * pFont, GUI_XBF_DATA * pXBF_Data, const GUI_XBF_TYPE * pFontType, GUI_XBF_GET_DATA_FUNC * pfGetData, void * pVoid) {
   \                     GUI_XBF_CreateFont:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    192            U32 Id;
    193            U8 aBuffer[18];
    194            const U8 * pBuffer;
    195          
    196            pBuffer = aBuffer;
   \   00000010   04108DE2           ADD      R1,SP,#+4
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0370B0E1           MOVS     R7,R3
   \   0000001C   30209DE5           LDR      R2,[SP, #+48]
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    197            if (!pfGetData) {
   \   00000024   0100001A           BNE      ??GUI_XBF_CreateFont_0
    198              GUI_DEBUG_ERROROUT("GUI_XBF_CreateFont: No get data function passed!");
    199              return 1;
   \                     ??GUI_XBF_CreateFont_1:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   350000EA           B        ??GUI_XBF_CreateFont_2
    200            }
    201            /* Set void pointer which is passed to GetData function */
    202            pXBF_Data->pVoid = pVoid;
   \                     ??GUI_XBF_CreateFont_0:
   \   00000030   042085E5           STR      R2,[R5, #+4]
    203            if (pfGetData( 0, 18, pVoid, aBuffer)) { /* Get data */
   \   00000034   04308DE2           ADD      R3,SP,#+4
   \   00000038   1210A0E3           MOV      R1,#+18
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   37FF2FE1           BLX      R7
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   F6FFFF1A           BNE      ??GUI_XBF_CreateFont_1
    204              return 1;
    205            }
    206            /* Read and check ID */
    207            Id = GUI__Read32(&pBuffer);
    208            if (Id != 0x58495547) { /* 'GUIX' */
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       GUI__Read32
   \   00000054   ........           LDR      R1,??DataTable3_2  ;; 0x58495547
   \   00000058   010050E1           CMP      R0,R1
    209              GUI_DEBUG_ERROROUT("GUI_XBF_CreateFont: ID of font wrong!");
    210              return 1;
   \   0000005C   0100A013           MOVNE    R0,#+1
   \   00000060   2800001A           BNE      ??GUI_XBF_CreateFont_2
    211            }
    212            /* Fill GUI_FONT structure */
    213            pFont->YSize     = (U8)GUI__Read16(&pBuffer);
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           BL       GUI__Read16
   \   0000006C   1800C4E5           STRB     R0,[R4, #+24]
    214            pFont->YDist     = (U8)GUI__Read16(&pBuffer);
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       GUI__Read16
   \   00000078   1900C4E5           STRB     R0,[R4, #+25]
    215            pFont->Baseline  = (U8)GUI__Read16(&pBuffer);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           BL       GUI__Read16
   \   00000084   2000C4E5           STRB     R0,[R4, #+32]
    216            pFont->LHeight   = (U8)GUI__Read16(&pBuffer);
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           BL       GUI__Read16
   \   00000090   2100C4E5           STRB     R0,[R4, #+33]
    217            pFont->CHeight   = (U8)GUI__Read16(&pBuffer);
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           BL       GUI__Read16
   \   0000009C   2200C4E5           STRB     R0,[R4, #+34]
    218            pFont->XMag = 1;
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   1A00C4E5           STRB     R0,[R4, #+26]
    219            pFont->YMag = 1;
   \   000000A8   1B00C4E5           STRB     R0,[R4, #+27]
    220            /* Fill GUI_XBF_DATA structure */
    221            pXBF_Data->First = GUI__Read16(&pBuffer);
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           BL       GUI__Read16
   \   000000B4   B000C5E1           STRH     R0,[R5, #+0]
    222            pXBF_Data->Last  = GUI__Read16(&pBuffer);
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       GUI__Read16
   \   000000C0   B200C5E1           STRH     R0,[R5, #+2]
    223            /* Store function pointer for getting data */
    224            pXBF_Data->pfGetData = pfGetData;
   \   000000C4   087085E5           STR      R7,[R5, #+8]
    225            /* Use font data pointer for storing address of GUI_XBF_DATA structure */
    226            pFont->p.pFontData = pXBF_Data;
   \   000000C8   1C5084E5           STR      R5,[R4, #+28]
    227            /* Set function pointers */
    228            pFont->pfDispChar     = pFontType->pfDispChar;
   \   000000CC   000096E5           LDR      R0,[R6, #+0]
   \   000000D0   000084E5           STR      R0,[R4, #+0]
    229            pFont->pfGetCharDistX = pFontType->pfGetCharDistX;
   \   000000D4   040096E5           LDR      R0,[R6, #+4]
   \   000000D8   040084E5           STR      R0,[R4, #+4]
    230            pFont->pfGetFontInfo  = pFontType->pfGetFontInfo;
   \   000000DC   080096E5           LDR      R0,[R6, #+8]
   \   000000E0   080084E5           STR      R0,[R4, #+8]
    231            pFont->pfIsInFont     = pFontType->pfIsInFont;
   \   000000E4   0C0096E5           LDR      R0,[R6, #+12]
   \   000000E8   0C0084E5           STR      R0,[R4, #+12]
    232            pFont->pfGetCharInfo  = pFontType->pfGetCharInfo;
   \   000000EC   100096E5           LDR      R0,[R6, #+16]
   \   000000F0   100084E5           STR      R0,[R4, #+16]
    233            pFont->pafEncode      = pFontType->pafEncode;
   \   000000F4   140096E5           LDR      R0,[R6, #+20]
   \   000000F8   140084E5           STR      R0,[R4, #+20]
    234            /* Use the new font */
    235            GUI_SetFont(pFont);
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       GUI_SetFont
    236            return 0;
   \   00000104   0000A0E3           MOV      R0,#+0
   \                     ??GUI_XBF_CreateFont_2:
   \   00000108   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000010C   F080BDE8           POP      {R4-R7,PC}       ;; return
    237          }
    238          
    239          /*********************************************************************
    240          *
    241          *       GUI_XBF_DeleteFont
    242          */

   \                                 In section .text, align 4, keep-with-next
    243          void GUI_XBF_DeleteFont(GUI_FONT * pFont) {
    244            GUI_USE_PARA(pFont);
    245          }
   \                     GUI_XBF_DeleteFont:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI__CharHasTrans

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   47554958           DC32     0x58495547
    246          
    247          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     GUI_XBF_CreateFont         48
     GUI_XBF_DeleteFont          0
     GUI_XBF__ClearLine         64
     GUI_XBF__GetCharDistX      32
     GUI_XBF__GetCharInfo       32
     GUI_XBF__GetFontInfo        0
     GUI_XBF__GetOff            16
     GUI_XBF__GetOffAndSize     24
     GUI_XBF__IsInFont          16


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     GUI_XBF__ClearLine      352
     GUI_XBF__GetOff         100
     GUI_XBF__GetOffAndSize  116
     GUI_XBF__GetCharDistX   172
     GUI_XBF__GetFontInfo     36
     GUI_XBF__IsInFont       120
     GUI_XBF__GetCharInfo    204
     GUI_XBF_CreateFont      272
     GUI_XBF_DeleteFont        4
     ??DataTable3              4
     ??DataTable3_1            4
     ??DataTable3_2            4

 
 1 388 bytes in section .text
 
 1 388 bytes of CODE memory

Errors: none
Warnings: none
