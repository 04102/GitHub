###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:07 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTVIEW_SetItemText.c              #
#    Command line =  C:\DUII\TargetHW\GUI\LISTVIEW_SetItemText.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTVIEW_SetItemText.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTVIEW_SetItemText.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTVIEW_SetItemText.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTVIEW_SetItemText.c
     19          Purpose     : Implementation of LISTVIEW_SetItemText
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "LISTVIEW_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Public routines
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       LISTVIEW_SetItemText
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          void LISTVIEW_SetItemText(LISTVIEW_Handle hObj, unsigned Column, unsigned Row, const char * s) {
   \                     LISTVIEW_SetItemText:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0370A0E1           MOV      R7,R3
     40            if (hObj && s) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   00005713           CMPNE    R7,#+0
   \   0000001C   2A00000A           BEQ      ??LISTVIEW_SetItemText_0
     41              GUI_ARRAY RowArray;
     42              GUI_ARRAY CellArray;
     43              unsigned NumColumns, NumRows;
     44              LISTVIEW_Obj* pObj;
     45              WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
     46              pObj = LISTVIEW_LOCK_H(hObj);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   0080A0E1           MOV      R8,R0
     47              NumColumns = LISTVIEW__GetNumColumns(pObj);
   \   00000030   ........           BL       LISTVIEW__GetNumColumns
   \   00000034   0090A0E1           MOV      R9,R0
     48              NumRows    = LISTVIEW__GetNumRows(pObj);
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           BL       LISTVIEW__GetNumRows
   \   00000040   00A0A0E1           MOV      R10,R0
     49              RowArray   = pObj->RowArray;
   \   00000044   388098E5           LDR      R8,[R8, #+56]
     50              GUI_UNLOCK_H(pObj);
   \   00000048   ........           BL       GUI_ALLOC_UnlockH
     51              if ((Column < NumColumns) && (Row < NumRows)) {
   \   0000004C   090055E1           CMP      R5,R9
   \   00000050   0A005631           CMPCC    R6,R10
   \   00000054   1B00002A           BCS      ??LISTVIEW_SetItemText_1
     52                LISTVIEW_ROW  * pRow;
     53                LISTVIEW_CELL * pCell;
     54                int NumBytes;
     55                NumBytes = GUI__strlen(s) + 1;
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           BL       GUI__strlen
   \   00000060   0090A0E1           MOV      R9,R0
     56                pRow  = (LISTVIEW_ROW  *)GUI_ARRAY_GetpItemLocked(RowArray, Row);
     57                CellArray = pRow->CellArray;
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000070   008090E5           LDR      R8,[R0, #+0]
     58                GUI_UNLOCK_H(pRow);
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
     59                pCell = (LISTVIEW_CELL *)GUI_ARRAY_ResizeItemLocked(CellArray, Column, sizeof(LISTVIEW_CELL) + NumBytes);
   \   00000078   092089E2           ADD      R2,R9,#+9
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   0800A0E1           MOV      R0,R8
   \   00000084   ........           BL       GUI_ARRAY_ResizeItemLocked
   \   00000088   0050B0E1           MOVS     R5,R0
     60                if (pCell) {
   \   0000008C   0D00000A           BEQ      ??LISTVIEW_SetItemText_1
     61                  pObj = LISTVIEW_LOCK_H(hObj);
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       GUI_ALLOC_LockH
   \   00000098   0080A0E1           MOV      R8,R0
     62                  strcpy(pCell->acText, s);
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   040085E2           ADD      R0,R5,#+4
   \   000000A4   ........           BL       strcpy
     63                  GUI_UNLOCK_H(pCell);
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
     64                  pObj->IsPresorted = 0;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   A900C8E5           STRB     R0,[R8, #+169]
     65                  LISTVIEW__InvalidateRow(hObj, pObj, Row);
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   0810A0E1           MOV      R1,R8
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       LISTVIEW__InvalidateRow
     66                  GUI_UNLOCK_H(pObj);
   \   000000C4   ........           BL       GUI_ALLOC_UnlockH
     67                }
     68              }
     69              WM_UNLOCK();
   \                     ??LISTVIEW_SetItemText_1:
   \   000000C8   ........           BL       GUI_Unlock
     70            }
     71          }
   \                     ??LISTVIEW_SetItemText_0:
   \   000000CC   F087BDE8           POP      {R4-R10,PC}      ;; return
     72          
     73          #else                            /* Avoid problems with empty object modules */
     74            void LISTVIEW_SetItemText_C(void);
     75            void LISTVIEW_SetItemText_C(void) {}
     76          #endif
     77          
     78          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     LISTVIEW_SetItemText     32


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     LISTVIEW_SetItemText  208

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
