###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:55 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_TOUCH_DriverAnalog.c            #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_TOUCH_DriverAnalog.c -D         #
#                    DEBUG=1 -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D        #
#                    NOPROFILER -D OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN        #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_TOUCH_DriverAnalog.lst #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_TOUCH_DriverAnalog.o    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_TOUCH_DriverAnalog.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_TOUCH_DriverAnalog.c
     19          Purpose     : Touch screen manager
     20          ----------------------------------------------------------------------
     21          This module handles the touch screen. It is configured in the file
     22          GUITouch.conf.h (Should be located in the Config\ directory).
     23          ----------------------------------------------------------------------
     24          */
     25          
     26          #include <stdlib.h>
     27          
     28          #include "GUI_Private.h"
     29          
     30          /* Generate code only if configuration says so ! */
     31          #if GUI_SUPPORT_TOUCH
     32          
     33          #if (GUI_SUPPORT_TOUCH == 2)
     34            #include "GUITouchConf.h"
     35          #endif
     36          
     37          /*********************************************************************
     38          *
     39          *       Defines, config defaults
     40          *
     41          **********************************************************************
     42          */
     43          
     44          #ifndef GUI_TOUCH_AD_LEFT         /* max value returned by AD-converter */
     45            #define GUI_TOUCH_AD_LEFT 0
     46          #endif
     47          
     48          #ifndef GUI_TOUCH_AD_RIGHT        /* min value returned by AD-converter */
     49            #define GUI_TOUCH_AD_RIGHT 0
     50          #endif
     51          
     52          #ifndef GUI_TOUCH_AD_TOP          /* max value returned by AD-converter */
     53            #define GUI_TOUCH_AD_TOP 0
     54          #endif
     55          
     56          #ifndef GUI_TOUCH_AD_BOTTOM       /* min value returned by AD-converter */
     57            #define GUI_TOUCH_AD_BOTTOM 0
     58          #endif
     59          
     60          #ifndef GUI_TOUCH_SWAP_XY         /* Is XY of touch swapped ? */
     61            #define GUI_TOUCH_SWAP_XY 0
     62          #endif
     63          
     64          #ifndef GUI_TOUCH_MIRROR_X
     65            #define GUI_TOUCH_MIRROR_X 0
     66          #endif
     67          
     68          #ifndef GUI_TOUCH_MIRROR_Y
     69            #define GUI_TOUCH_MIRROR_Y 0
     70          #endif
     71          
     72          /*********************************************************************
     73          *
     74          *       Types
     75          *
     76          **********************************************************************
     77          */
     78          
     79          typedef struct { int Min; int Max; } MIN_MAX_T;
     80          
     81          /*********************************************************************
     82          *
     83          *       Static data
     84          *
     85          **********************************************************************
     86          */
     87          
     88          static int _xPhys, _yPhys;
     89          

   \                                 In section .bss, align 4
   \   00000000                      DS8 4
     90          static unsigned _OrientationPhys = (GUI_TOUCH_MIRROR_X << 0) | (GUI_TOUCH_MIRROR_X << 1) | (GUI_TOUCH_SWAP_XY << 2);
     91          static unsigned _OrientationLog;
     92          
     93          static MIN_MAX_T _xyMinMax[2];
     94          static int       _CalibrationDone;
     95          
     96          #ifndef WIN32
     97          
     98          static int _xMin;
     99          static int _xMax;
    100          static int _yMin;
    101          static int _yMax;
    102          
    103          #endif
    104          
    105          /*********************************************************************
    106          *
    107          *       Static code
    108          *
    109          **********************************************************************
    110          */
    111          /*********************************************************************
    112          *
    113          *       _AD2X
    114          *
    115          * Purpose:
    116          *   Convert physical value into (logical) coordinates.
    117          */
    118          #ifndef WIN32
    119          static int _AD2X(int adx) {
    120            I32 r;
    121            int xSize;
    122            r = adx - _xyMinMax[GUI_COORD_X].Min;
    123            if ((_OrientationLog & GUI_SWAP_XY) == 0) {
    124              xSize = LCD_GetXSizeEx(GUI_Context.SelLayer);
    125            } else {
    126              xSize = LCD_GetYSizeEx(GUI_Context.SelLayer);
    127            }
    128            r *= xSize - 1;
    129            return r / (_xyMinMax[GUI_COORD_X].Max - _xyMinMax[GUI_COORD_X].Min);    
    130          }
    131          
    132          /*********************************************************************
    133          *
    134          *       _AD2Y
    135          *
    136          * Purpose:
    137          *   Convert physical value into (logical) coordinates.
    138          */
    139          static int _AD2Y(int ady) {
    140            I32 r = ady - _xyMinMax[GUI_COORD_Y].Min;
    141            int ySize;
    142            if ((_OrientationLog & GUI_SWAP_XY) == 0) {
    143              ySize = LCD_GetYSizeEx(GUI_Context.SelLayer);
    144            } else {
    145              ySize = LCD_GetXSizeEx(GUI_Context.SelLayer);
    146            }
    147            r *= ySize - 1;
    148            return r/(_xyMinMax[GUI_COORD_Y].Max - _xyMinMax[GUI_COORD_Y].Min);    
    149          }
    150          #endif
    151          
    152          /*********************************************************************
    153          *
    154          *       _Log2Phys
    155          */
    156          static int _Log2Phys(int l, I32 l0, I32 l1, I32 p0, I32 p1) {
    157            return p0 + ((p1 - p0) * (I32)(l - l0)) / (l1 - l0);
    158          }
    159          
    160          /*********************************************************************
    161          *
    162          *       _StoreUnstable
    163          */
    164          static void _StoreUnstable(int x, int y) {
    165            static int _xLast = -1;
    166            static int _yLast = -1;
    167            int xOut, yOut;
    168          
    169            if ((x != -1) && (y != -1) && (_xLast != -1) && (_yLast != -1)) {
    170              xOut = _xLast;    
    171              yOut = _yLast;    
    172            } else {
    173              xOut = -1;
    174              yOut = -1;    
    175            }
    176            _xLast = x;
    177            _yLast = y;
    178            GUI_TOUCH_StoreUnstable(xOut, yOut);
    179          }
    180          
    181          /*********************************************************************
    182          *
    183          *       Public code
    184          *
    185          **********************************************************************
    186          */
    187          /*********************************************************************
    188          *
    189          *       GUI_TOUCH_SetOrientationPhys
    190          */

   \                                 In section .text, align 4, keep-with-next
    191          void GUI_TOUCH_SetOrientationPhys(unsigned Orientation) {
    192            _OrientationPhys = Orientation;
    193          }
   \                     GUI_TOUCH_SetOrientationPhys:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    194          
    195          /*********************************************************************
    196          *
    197          *       GUI_TOUCH_SetOrientation
    198          */

   \                                 In section .text, align 4, keep-with-next
    199          void GUI_TOUCH_SetOrientation(unsigned Orientation) {
    200            _OrientationLog = Orientation;
   \                     GUI_TOUCH_SetOrientation:
   \   00000000   ........           LDR      R1,??DataTable6
   \   00000004   180081E5           STR      R0,[R1, #+24]
    201          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    202          
    203          /*********************************************************************
    204          *
    205          *       GUI_TOUCH_GetxPhys
    206          */

   \                                 In section .text, align 4, keep-with-next
    207          int  GUI_TOUCH_GetxPhys(void) {
    208            return _xPhys;
   \                     GUI_TOUCH_GetxPhys:
   \   00000000   ........           LDR      R0,??DataTable6
   \   00000004   100090E5           LDR      R0,[R0, #+16]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    209          }
    210          
    211          /*********************************************************************
    212          *
    213          *       GUI_TOUCH_GetyPhys
    214          */

   \                                 In section .text, align 4, keep-with-next
    215          int  GUI_TOUCH_GetyPhys(void) {
    216            return _yPhys;
   \                     GUI_TOUCH_GetyPhys:
   \   00000000   ........           LDR      R0,??DataTable6
   \   00000004   140090E5           LDR      R0,[R0, #+20]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    217          }
    218          
    219          /*********************************************************************
    220          *
    221          *       GUI_TOUCH_SetDefaultCalibration
    222          */

   \                                 In section .text, align 4, keep-with-next
    223          void GUI_TOUCH_SetDefaultCalibration(void) {
    224            _xyMinMax[0].Min = GUI_TOUCH_AD_LEFT;
   \                     GUI_TOUCH_SetDefaultCalibration:
   \   00000000   ........           LDR      R0,??DataTable6
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   001080E5           STR      R1,[R0, #+0]
    225            _xyMinMax[0].Max = GUI_TOUCH_AD_RIGHT;
   \   0000000C   041080E5           STR      R1,[R0, #+4]
    226            _xyMinMax[1].Min = GUI_TOUCH_AD_TOP;
   \   00000010   081080E5           STR      R1,[R0, #+8]
    227            _xyMinMax[1].Max = GUI_TOUCH_AD_BOTTOM;
   \   00000014   0C1080E5           STR      R1,[R0, #+12]
    228          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
    229          
    230          /*********************************************************************
    231          *
    232          *       GUI_TOUCH_Calibrate
    233          */

   \                                 In section .text, align 4, keep-with-next
    234          int GUI_TOUCH_Calibrate(int Coord, int Log0, int Log1, int Phys0, int Phys1) {
   \                     GUI_TOUCH_Calibrate:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    235            int l0, l1, xSize, ySize;
    236            if ((_OrientationLog & GUI_SWAP_XY) == 0) {
   \   00000004   ........           LDR      R9,??DataTable6
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   1810D9E5           LDRB     R1,[R9, #+24]
   \   00000010   ........           LDR      R11,??DataTable6_1
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   28809DE5           LDR      R8,[SP, #+40]
   \   00000028   1100DBE5           LDRB     R0,[R11, #+17]
   \   0000002C   040011E3           TST      R1,#0x4
   \   00000030   0400001A           BNE      ??GUI_TOUCH_Calibrate_0
    237              xSize = LCD_GetXSizeEx(GUI_Context.SelLayer);
   \   00000034   ........           BL       LCD_GetXSizeEx
   \   00000038   00A0A0E1           MOV      R10,R0
    238              ySize = LCD_GetYSizeEx(GUI_Context.SelLayer);
   \   0000003C   1100DBE5           LDRB     R0,[R11, #+17]
   \   00000040   ........           BL       LCD_GetYSizeEx
   \   00000044   030000EA           B        ??GUI_TOUCH_Calibrate_1
    239            } else {
    240              xSize = LCD_GetYSizeEx(GUI_Context.SelLayer);
   \                     ??GUI_TOUCH_Calibrate_0:
   \   00000048   ........           BL       LCD_GetYSizeEx
   \   0000004C   00A0A0E1           MOV      R10,R0
    241              ySize = LCD_GetXSizeEx(GUI_Context.SelLayer);
   \   00000050   1100DBE5           LDRB     R0,[R11, #+17]
   \   00000054   ........           BL       LCD_GetXSizeEx
    242            }
    243            l0 = 0;
    244            l1 = (Coord == GUI_COORD_X) ? xSize - 1 : ySize - 1;
   \                     ??GUI_TOUCH_Calibrate_1:
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   01A04A02           SUBEQ    R10,R10,#+1
   \   00000060   01A04012           SUBNE    R10,R0,#+1
    245            if (labs(Phys0 - Phys1) < 20) {
   \   00000064   080057E0           SUBS     R0,R7,R8
   \   00000068   00006042           RSBMI    R0,R0,#+0
   \   0000006C   140050E3           CMP      R0,#+20
   \   00000070   010000AA           BGE      ??GUI_TOUCH_Calibrate_2
    246              return 1;
   \                     ??GUI_TOUCH_Calibrate_3:
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   140000EA           B        ??GUI_TOUCH_Calibrate_4
    247            }
    248            if (labs(Log0 - Log1) < 20) {
   \                     ??GUI_TOUCH_Calibrate_2:
   \   0000007C   060055E0           SUBS     R0,R5,R6
   \   00000080   00006042           RSBMI    R0,R0,#+0
   \   00000084   140050E3           CMP      R0,#+20
   \   00000088   F9FFFFBA           BLT      ??GUI_TOUCH_Calibrate_3
    249              return 1;
    250            }
    251            _xyMinMax[Coord].Min = _Log2Phys(l0, Log0, Log1, Phys0, Phys1);  
   \   0000008C   078048E0           SUB      R8,R8,R7
   \   00000090   056046E0           SUB      R6,R6,R5
   \   00000094   950800E0           MUL      R0,R5,R8
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   ........           BL       __aeabi_idiv
   \   000000A0   000047E0           SUB      R0,R7,R0
   \   000000A4   840189E7           STR      R0,[R9, +R4, LSL #+3]
    252            _xyMinMax[Coord].Max = _Log2Phys(l1, Log0, Log1, Phys0, Phys1);
   \   000000A8   05104AE0           SUB      R1,R10,R5
   \   000000AC   910800E0           MUL      R0,R1,R8
   \   000000B0   0610A0E1           MOV      R1,R6
   \   000000B4   ........           BL       __aeabi_idiv
   \   000000B8   070080E0           ADD      R0,R0,R7
   \   000000BC   841189E0           ADD      R1,R9,R4, LSL #+3
   \   000000C0   040081E5           STR      R0,[R1, #+4]
    253            _CalibrationDone = 1;
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   1C0089E5           STR      R0,[R9, #+28]
    254            return 0;
   \   000000CC   0000A0E3           MOV      R0,#+0
   \                     ??GUI_TOUCH_Calibrate_4:
   \   000000D0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000D4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    255          }
    256          
    257          /*********************************************************************
    258          *
    259          *       GUI_TOUCH_GetCalData
    260          */

   \                                 In section .text, align 4, keep-with-next
    261          void GUI_TOUCH_GetCalData(int Coord, int* pMin,int* pMax) {
    262            *pMin = _xyMinMax[Coord].Min;
   \                     GUI_TOUCH_GetCalData:
   \   00000000   ........           LDR      R3,??DataTable6
   \   00000004   80C193E7           LDR      R12,[R3, +R0, LSL #+3]
    263            *pMax = _xyMinMax[Coord].Max; 
   \   00000008   800183E0           ADD      R0,R3,R0, LSL #+3
   \   0000000C   00C081E5           STR      R12,[R1, #+0]
   \   00000010   040090E5           LDR      R0,[R0, #+4]
   \   00000014   000082E5           STR      R0,[R2, #+0]
    264          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
    265            
    266          /*********************************************************************
    267          *
    268          *       GUI_TOUCH_Exec
    269          */

   \                                 In section .text, align 4, keep-with-next
    270          void GUI_TOUCH_Exec(void) {
   \                     GUI_TOUCH_Exec:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    271            #ifndef WIN32
    272            static U8 ReadState;
    273            int x, y;
    274            int xLog, yLog;
    275            int xSize, ySize;
    276            if (_CalibrationDone == 0) {
   \   00000004   ........           LDR      R4,??DataTable6
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1000001A           BNE      ??GUI_TOUCH_Exec_0
    277              if ((((_OrientationPhys & GUI_SWAP_XY) == 0) && ((_OrientationPhys & GUI_MIRROR_X) == 0)) || (((_OrientationPhys & GUI_SWAP_XY) == 1) && ((_OrientationPhys & GUI_MIRROR_Y) == 0))) {
    278                _xyMinMax[0].Min = GUI_TOUCH_AD_LEFT;
   \   00000014   000084E5           STR      R0,[R4, #+0]
    279                _xyMinMax[0].Max = GUI_TOUCH_AD_RIGHT;
   \   00000018   040084E5           STR      R0,[R4, #+4]
    280              } else {
    281                _xyMinMax[0].Min = GUI_TOUCH_AD_RIGHT;
    282                _xyMinMax[0].Max = GUI_TOUCH_AD_LEFT;
    283              }
    284              if ((((_OrientationPhys & GUI_SWAP_XY) == 0) && ((_OrientationPhys & GUI_MIRROR_Y) == 0)) || (((_OrientationPhys & GUI_SWAP_XY) == 1) && ((_OrientationPhys & GUI_MIRROR_X) == 0))) {
    285                _xyMinMax[1].Min = GUI_TOUCH_AD_TOP;
   \   0000001C   080084E5           STR      R0,[R4, #+8]
    286                _xyMinMax[1].Max = GUI_TOUCH_AD_BOTTOM;
   \   00000020   0C0084E5           STR      R0,[R4, #+12]
    287              } else {
    288                _xyMinMax[1].Min = GUI_TOUCH_AD_BOTTOM;
    289                _xyMinMax[1].Max = GUI_TOUCH_AD_TOP;
    290              }
    291              _CalibrationDone = 1;
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   1C0084E5           STR      R0,[R4, #+28]
    292            }
    293            /* calculate Min / Max values */
    294            if (_xyMinMax[GUI_COORD_X].Min < _xyMinMax[GUI_COORD_X].Max) {
    295              _xMin = _xyMinMax[GUI_COORD_X].Min;
    296              _xMax = _xyMinMax[GUI_COORD_X].Max;
    297            } else {
    298              _xMax = _xyMinMax[GUI_COORD_X].Min;
   \                     ??GUI_TOUCH_Exec_1:
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
    299              _xMin = _xyMinMax[GUI_COORD_X].Max;
   \   00000030   041094E5           LDR      R1,[R4, #+4]
   \                     ??GUI_TOUCH_Exec_2:
   \   00000034   201084E5           STR      R1,[R4, #+32]
    300            }
    301            if (_xyMinMax[GUI_COORD_Y].Min < _xyMinMax[GUI_COORD_Y].Max) {
   \   00000038   0C1094E5           LDR      R1,[R4, #+12]
   \   0000003C   082094E5           LDR      R2,[R4, #+8]
   \   00000040   240084E5           STR      R0,[R4, #+36]
   \   00000044   010052E1           CMP      R2,R1
    302              _yMin = _xyMinMax[GUI_COORD_Y].Min;
   \   00000048   0200A0B1           MOVLT    R0,R2
    303              _yMax = _xyMinMax[GUI_COORD_Y].Max;
   \   0000004C   0120A0B1           MOVLT    R2,R1
   \   00000050   0100A0A1           MOVGE    R0,R1
   \   00000054   040000EA           B        ??GUI_TOUCH_Exec_3
    304            } else {
   \                     ??GUI_TOUCH_Exec_0:
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   001094E5           LDR      R1,[R4, #+0]
   \   00000060   000051E1           CMP      R1,R0
   \   00000064   F0FFFFAA           BGE      ??GUI_TOUCH_Exec_1
   \   00000068   F1FFFFEA           B        ??GUI_TOUCH_Exec_2
   \                     ??GUI_TOUCH_Exec_3:
   \   0000006C   280084E5           STR      R0,[R4, #+40]
    305              _yMax = _xyMinMax[GUI_COORD_Y].Min;
    306              _yMin = _xyMinMax[GUI_COORD_Y].Max;
    307            }
    308            /* Execute the state machine which reads the touch */
    309            switch (ReadState) {
   \   00000070   3800D4E5           LDRB     R0,[R4, #+56]
   \   00000074   2C2084E5           STR      R2,[R4, #+44]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0500001A           BNE      ??GUI_TOUCH_Exec_4
    310            case 0:
    311              _yPhys = TOUCH_X_MeasureY();
   \   00000080   ........           BL       GUI_TOUCH_X_MeasureY
   \   00000084   140084E5           STR      R0,[R4, #+20]
    312              TOUCH_X_ActivateY();  /* Prepare X- measurement */
   \   00000088   ........           BL       GUI_TOUCH_X_ActivateY
    313              ReadState++;
   \   0000008C   3800D4E5           LDRB     R0,[R4, #+56]
   \   00000090   010080E2           ADD      R0,R0,#+1
   \   00000094   610000EA           B        ??GUI_TOUCH_Exec_5
    314              break;
    315            default:
    316              _xPhys = TOUCH_X_MeasureX();
   \                     ??GUI_TOUCH_Exec_4:
   \   00000098   ........           BL       GUI_TOUCH_X_MeasureX
   \   0000009C   100084E5           STR      R0,[R4, #+16]
    317              TOUCH_X_ActivateX();  /* Prepare Y- measurement */
   \   000000A0   ........           BL       GUI_TOUCH_X_ActivateX
    318              /* Convert values into logical values */
    319              if ((_xPhys < _xMin) || (_xPhys > _xMax)  || (_yPhys < _yMin) || (_yPhys > _yMax)) {
   \   000000A4   100094E5           LDR      R0,[R4, #+16]
   \   000000A8   201094E5           LDR      R1,[R4, #+32]
   \   000000AC   010050E1           CMP      R0,R1
   \   000000B0   241094A5           LDRGE    R1,[R4, #+36]
   \   000000B4   000051A1           CMPGE    R1,R0
   \   000000B8   050000BA           BLT      ??GUI_TOUCH_Exec_6
   \   000000BC   141094E5           LDR      R1,[R4, #+20]
   \   000000C0   282094E5           LDR      R2,[R4, #+40]
   \   000000C4   020051E1           CMP      R1,R2
   \   000000C8   2C2094A5           LDRGE    R2,[R4, #+44]
   \   000000CC   010052A1           CMPGE    R2,R1
   \   000000D0   050000AA           BGE      ??GUI_TOUCH_Exec_7
    320                _StoreUnstable(-1, -1);
   \                     ??GUI_TOUCH_Exec_6:
   \   000000D4   0020E0E3           MVN      R2,#+0
   \   000000D8   0210A0E1           MOV      R1,R2
   \   000000DC   302084E5           STR      R2,[R4, #+48]
   \   000000E0   342084E5           STR      R2,[R4, #+52]
   \   000000E4   0100A0E1           MOV      R0,R1
   \   000000E8   4A0000EA           B        ??GUI_TOUCH_Exec_8
    321              } else {
    322                x = _AD2X(_xPhys);
   \                     ??GUI_TOUCH_Exec_7:
   \   000000EC   001094E5           LDR      R1,[R4, #+0]
   \   000000F0   ........           LDR      R6,??DataTable6_1
   \   000000F4   015040E0           SUB      R5,R0,R1
   \   000000F8   1810D4E5           LDRB     R1,[R4, #+24]
   \   000000FC   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000100   040011E3           TST      R1,#0x4
   \   00000104   0100000A           BEQ      ??GUI_TOUCH_Exec_9
   \   00000108   ........           BL       LCD_GetYSizeEx
   \   0000010C   000000EA           B        ??GUI_TOUCH_Exec_10
   \                     ??GUI_TOUCH_Exec_9:
   \   00000110   ........           BL       LCD_GetXSizeEx
   \                     ??GUI_TOUCH_Exec_10:
   \   00000114   011040E2           SUB      R1,R0,#+1
   \   00000118   910500E0           MUL      R0,R1,R5
   \   0000011C   041094E5           LDR      R1,[R4, #+4]
   \   00000120   002094E5           LDR      R2,[R4, #+0]
   \   00000124   021041E0           SUB      R1,R1,R2
   \   00000128   ........           BL       __aeabi_idiv
   \   0000012C   0050A0E1           MOV      R5,R0
    323                y = _AD2Y(_yPhys);
   \   00000130   140094E5           LDR      R0,[R4, #+20]
   \   00000134   081094E5           LDR      R1,[R4, #+8]
   \   00000138   017040E0           SUB      R7,R0,R1
   \   0000013C   1810D4E5           LDRB     R1,[R4, #+24]
   \   00000140   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000144   040011E3           TST      R1,#0x4
   \   00000148   0100000A           BEQ      ??GUI_TOUCH_Exec_11
   \   0000014C   ........           BL       LCD_GetXSizeEx
   \   00000150   000000EA           B        ??GUI_TOUCH_Exec_12
   \                     ??GUI_TOUCH_Exec_11:
   \   00000154   ........           BL       LCD_GetYSizeEx
   \                     ??GUI_TOUCH_Exec_12:
   \   00000158   011040E2           SUB      R1,R0,#+1
   \   0000015C   910700E0           MUL      R0,R1,R7
   \   00000160   0C1094E5           LDR      R1,[R4, #+12]
   \   00000164   082094E5           LDR      R2,[R4, #+8]
   \   00000168   021041E0           SUB      R1,R1,R2
   \   0000016C   ........           BL       __aeabi_idiv
   \   00000170   1810D4E5           LDRB     R1,[R4, #+24]
   \   00000174   0070A0E1           MOV      R7,R0
   \   00000178   1100D6E5           LDRB     R0,[R6, #+17]
   \   0000017C   040011E3           TST      R1,#0x4
   \   00000180   0D00001A           BNE      ??GUI_TOUCH_Exec_13
    324                /*
    325                * Consider logical orientation
    326                */
    327                if ((_OrientationLog & GUI_SWAP_XY) == 0) {
    328                  xSize = LCD_GetXSizeEx(GUI_Context.SelLayer);
   \   00000184   ........           BL       LCD_GetXSizeEx
   \   00000188   0080A0E1           MOV      R8,R0
    329                  ySize = LCD_GetYSizeEx(GUI_Context.SelLayer);
   \   0000018C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000190   ........           BL       LCD_GetYSizeEx
    330                  if (_OrientationLog & GUI_MIRROR_X) {
   \   00000194   181094E5           LDR      R1,[R4, #+24]
   \   00000198   010011E3           TST      R1,#0x1
    331                    xLog = xSize - x - 1;
   \   0000019C   05204810           SUBNE    R2,R8,R5
   \   000001A0   01304212           SUBNE    R3,R2,#+1
    332                  } else {
    333                    xLog = x;
   \   000001A4   0530A001           MOVEQ    R3,R5
    334                  }
    335                  if (_OrientationLog & GUI_MIRROR_Y) {
   \   000001A8   020011E3           TST      R1,#0x2
    336                    yLog = ySize - y - 1;
   \   000001AC   07004010           SUBNE    R0,R0,R7
   \   000001B0   01504012           SUBNE    R5,R0,#+1
   \   000001B4   0750A001           MOVEQ    R5,R7
   \   000001B8   0B0000EA           B        ??GUI_TOUCH_Exec_14
    337                  } else {
    338                    yLog = y;
    339                  }
    340                } else {
    341                  xSize = LCD_GetYSizeEx(GUI_Context.SelLayer);
   \                     ??GUI_TOUCH_Exec_13:
   \   000001BC   ........           BL       LCD_GetYSizeEx
   \   000001C0   0080A0E1           MOV      R8,R0
    342                  ySize = LCD_GetXSizeEx(GUI_Context.SelLayer);
   \   000001C4   1100D6E5           LDRB     R0,[R6, #+17]
   \   000001C8   ........           BL       LCD_GetXSizeEx
    343                  if (_OrientationLog & GUI_MIRROR_X) {
   \   000001CC   181094E5           LDR      R1,[R4, #+24]
   \   000001D0   010011E3           TST      R1,#0x1
    344                    yLog = xSize - x - 1;
   \   000001D4   05204810           SUBNE    R2,R8,R5
   \   000001D8   01504212           SUBNE    R5,R2,#+1
    345                  } else {
    346                    yLog = x;
    347                  }
    348                  if (_OrientationLog & GUI_MIRROR_Y) {
   \   000001DC   020011E3           TST      R1,#0x2
    349                    xLog = ySize - y - 1;
   \   000001E0   07004010           SUBNE    R0,R0,R7
   \   000001E4   01304012           SUBNE    R3,R0,#+1
    350                  } else {
    351                    xLog = y;
   \   000001E8   0730A001           MOVEQ    R3,R7
    352                  }
    353                }
    354                _StoreUnstable(xLog, yLog);
   \                     ??GUI_TOUCH_Exec_14:
   \   000001EC   0020E0E3           MVN      R2,#+0
   \   000001F0   020053E1           CMP      R3,R2
   \   000001F4   02005511           CMPNE    R5,R2
   \   000001F8   30009415           LDRNE    R0,[R4, #+48]
   \   000001FC   303084E5           STR      R3,[R4, #+48]
   \   00000200   02005011           CMPNE    R0,R2
   \   00000204   34109415           LDRNE    R1,[R4, #+52]
   \   00000208   345084E5           STR      R5,[R4, #+52]
   \   0000020C   02005111           CMPNE    R1,R2
   \   00000210   0200A001           MOVEQ    R0,R2
   \   00000214   0010A001           MOVEQ    R1,R0
   \                     ??GUI_TOUCH_Exec_8:
   \   00000218   ........           BL       GUI_TOUCH_StoreUnstable
    355              }
    356              /* Reset state machine */
    357              ReadState = 0;
   \   0000021C   0000A0E3           MOV      R0,#+0
   \                     ??GUI_TOUCH_Exec_5:
   \   00000220   3800C4E5           STRB     R0,[R4, #+56]
    358              break;
    359            }
    360            #endif /* WIN32 */
    361          }
   \   00000224   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .data, align 4
   \                     _xyMinMax:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   00000000           DC8 0, 0, 0, 0
   \   00000014   00000000           DC8 0, 0, 0, 0
   \   00000018   00000000           DC8 0, 0, 0, 0
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   00000000           DC8 0, 0, 0, 0
   \   00000024   00000000           DC8 0, 0, 0, 0
   \   00000028   00000000           DC8 0, 0, 0, 0
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   FFFFFFFF           DC32 -1
   \   00000034   FFFFFFFF           DC32 -1
   \   00000038   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     _xyMinMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     GUI_Context
    362          
    363          #else
    364          
    365          void GUI_TOUCH_DriverAnalog_C(void);  /* Avoid "no prototype" warnings */
    366          void GUI_TOUCH_DriverAnalog_C(void) {}
    367          
    368          #endif    /* defined(GUI_SUPPORT_TOUCH) && GUI_SUPPORT_TOUCH */
    369          
    370          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     GUI_TOUCH_Calibrate                40
     GUI_TOUCH_Exec                     24
     GUI_TOUCH_GetCalData                0
     GUI_TOUCH_GetxPhys                  0
     GUI_TOUCH_GetyPhys                  0
     GUI_TOUCH_SetDefaultCalibration
                                         0
     GUI_TOUCH_SetOrientation            0
     GUI_TOUCH_SetOrientationPhys        0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _OrientationPhys                  4
     GUI_TOUCH_SetOrientationPhys      4
     GUI_TOUCH_SetOrientation         12
     GUI_TOUCH_GetxPhys               12
     GUI_TOUCH_GetyPhys               12
     GUI_TOUCH_SetDefaultCalibration
                                      28
     GUI_TOUCH_Calibrate             216
     GUI_TOUCH_GetCalData             28
     GUI_TOUCH_Exec                  552
     _xyMinMax                        57
     _xPhys
     _yPhys
     _OrientationLog
     _CalibrationDone
     _xMin
     _xMax
     _yMin
     _yMax
     _xLast
     _yLast
     ReadState
     ??DataTable6                      4
     ??DataTable6_1                    4

 
   4 bytes in section .bss
  57 bytes in section .data
 872 bytes in section .text
 
 872 bytes of CODE memory
  61 bytes of DATA memory

Errors: none
Warnings: none
