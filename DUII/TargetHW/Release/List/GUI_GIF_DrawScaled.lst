###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_GIF_DrawScaled.c                #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_GIF_DrawScaled.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_GIF_DrawScaled.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_GIF_DrawScaled.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_GIF_DrawScaled.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_GIF_DrawScaled.c
     19          Purpose     : Implementation of GUI_GIF... functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          
     25          #include "GUI_GIF_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _ClearUnusedPixelsScaled
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _ClearUnusedPixelsScaled(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo, int Num, int Denom) {
   \                     _ClearUnusedPixelsScaled:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   30809DE5           LDR      R8,[SP, #+48]
   \   0000001C   34909DE5           LDR      R9,[SP, #+52]
     38            LCD_SetColorIndex(LCD_GetBkColorIndex());
   \   00000020   ........           BL       LCD_GetBkColorIndex
   \   00000024   ........           BL       LCD_SetColorIndex
     39            if (pDescriptor->YPos > pInfo->yPos) {
   \   00000028   040096E5           LDR      R0,[R6, #+4]
   \   0000002C   04B097E5           LDR      R11,[R7, #+4]
   \   00000030   00005BE1           CMP      R11,R0
   \   00000034   200000AA           BGE      ??_ClearUnusedPixelsScaled_0
     40              LCD_FillRect(x0 + pInfo->xPos * (U32)Num / Denom,
     41                           y0 + pInfo->yPos * (U32)Num / Denom,
     42                           x0 + (pInfo->xPos + pInfo->xSize) * (U32)Num / Denom - 1,
     43                           y0 + pDescriptor->YPos * (U32)Num / Denom - 1);
   \   00000038   980000E0           MUL      R0,R8,R0
   \   0000003C   0910A0E1           MOV      R1,R9
   \   00000040   ........           BL       __aeabi_uidiv
   \   00000044   050080E0           ADD      R0,R0,R5
   \   00000048   00A097E5           LDR      R10,[R7, #+0]
   \   0000004C   013040E2           SUB      R3,R0,#+1
   \   00000050   00308DE5           STR      R3,[SP, #+0]
   \   00000054   080097E5           LDR      R0,[R7, #+8]
   \   00000058   0910A0E1           MOV      R1,R9
   \   0000005C   0A0080E0           ADD      R0,R0,R10
   \   00000060   980000E0           MUL      R0,R8,R0
   \   00000064   ........           BL       __aeabi_uidiv
   \   00000068   040080E0           ADD      R0,R0,R4
   \   0000006C   012040E2           SUB      R2,R0,#+1
   \   00000070   00309DE5           LDR      R3,[SP, #+0]
   \   00000074   980B00E0           MUL      R0,R8,R11
   \   00000078   00208DE5           STR      R2,[SP, #+0]
   \   0000007C   04308DE5           STR      R3,[SP, #+4]
   \   00000080   0910A0E1           MOV      R1,R9
   \   00000084   ........           BL       __aeabi_uidiv
   \   00000088   051080E0           ADD      R1,R0,R5
   \   0000008C   00209DE5           LDR      R2,[SP, #+0]
   \   00000090   04B09DE5           LDR      R11,[SP, #+4]
   \   00000094   00108DE5           STR      R1,[SP, #+0]
   \   00000098   980A00E0           MUL      R0,R8,R10
   \   0000009C   04208DE5           STR      R2,[SP, #+4]
   \   000000A0   0910A0E1           MOV      R1,R9
   \   000000A4   ........           BL       __aeabi_uidiv
   \   000000A8   040080E0           ADD      R0,R0,R4
   \   000000AC   0B30A0E1           MOV      R3,R11
   \   000000B0   04209DE5           LDR      R2,[SP, #+4]
   \   000000B4   00109DE5           LDR      R1,[SP, #+0]
   \   000000B8   ........           BL       LCD_FillRect
     44            }
     45            if (pDescriptor->XPos > pInfo->xPos) {
   \                     ??_ClearUnusedPixelsScaled_0:
   \   000000BC   001096E5           LDR      R1,[R6, #+0]
   \   000000C0   08108DE5           STR      R1,[SP, #+8]
   \   000000C4   00A097E5           LDR      R10,[R7, #+0]
   \   000000C8   01005AE1           CMP      R10,R1
   \   000000CC   210000AA           BGE      ??_ClearUnusedPixelsScaled_1
     46              LCD_FillRect(x0 + pInfo->xPos * (U32)Num / Denom,
     47                           y0 + pInfo->yPos * (U32)Num / Denom,
     48                           x0 + pDescriptor->XPos * (U32)Num / Denom - 1,
     49                           y0 + (pInfo->yPos + pInfo->ySize) * (U32)Num / Denom - 1);
   \   000000D0   04B097E5           LDR      R11,[R7, #+4]
   \   000000D4   0C0097E5           LDR      R0,[R7, #+12]
   \   000000D8   0910A0E1           MOV      R1,R9
   \   000000DC   0B0080E0           ADD      R0,R0,R11
   \   000000E0   980000E0           MUL      R0,R8,R0
   \   000000E4   ........           BL       __aeabi_uidiv
   \   000000E8   050080E0           ADD      R0,R0,R5
   \   000000EC   013040E2           SUB      R3,R0,#+1
   \   000000F0   08009DE5           LDR      R0,[SP, #+8]
   \   000000F4   00308DE5           STR      R3,[SP, #+0]
   \   000000F8   980000E0           MUL      R0,R8,R0
   \   000000FC   0910A0E1           MOV      R1,R9
   \   00000100   ........           BL       __aeabi_uidiv
   \   00000104   040080E0           ADD      R0,R0,R4
   \   00000108   012040E2           SUB      R2,R0,#+1
   \   0000010C   00309DE5           LDR      R3,[SP, #+0]
   \   00000110   980B00E0           MUL      R0,R8,R11
   \   00000114   00208DE5           STR      R2,[SP, #+0]
   \   00000118   04308DE5           STR      R3,[SP, #+4]
   \   0000011C   0910A0E1           MOV      R1,R9
   \   00000120   ........           BL       __aeabi_uidiv
   \   00000124   051080E0           ADD      R1,R0,R5
   \   00000128   00209DE5           LDR      R2,[SP, #+0]
   \   0000012C   04B09DE5           LDR      R11,[SP, #+4]
   \   00000130   00108DE5           STR      R1,[SP, #+0]
   \   00000134   980A00E0           MUL      R0,R8,R10
   \   00000138   04208DE5           STR      R2,[SP, #+4]
   \   0000013C   0910A0E1           MOV      R1,R9
   \   00000140   ........           BL       __aeabi_uidiv
   \   00000144   040080E0           ADD      R0,R0,R4
   \   00000148   0B30A0E1           MOV      R3,R11
   \   0000014C   04209DE5           LDR      R2,[SP, #+4]
   \   00000150   00109DE5           LDR      R1,[SP, #+0]
   \   00000154   ........           BL       LCD_FillRect
     50            }
     51            if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
   \                     ??_ClearUnusedPixelsScaled_1:
   \   00000158   040097E5           LDR      R0,[R7, #+4]
   \   0000015C   0C1097E5           LDR      R1,[R7, #+12]
   \   00000160   0C2096E5           LDR      R2,[R6, #+12]
   \   00000164   000081E0           ADD      R0,R1,R0
   \   00000168   041096E5           LDR      R1,[R6, #+4]
   \   0000016C   01B082E0           ADD      R11,R2,R1
   \   00000170   00005BE1           CMP      R11,R0
   \   00000174   210000AA           BGE      ??_ClearUnusedPixelsScaled_2
     52              LCD_FillRect(x0 + pInfo->xPos * (U32)Num / Denom,
     53                           y0 + (pDescriptor->YPos + pDescriptor->YSize) * (U32)Num / Denom - 1,
     54                           x0 + (pInfo->xPos + pInfo->xSize) * (U32)Num / Denom - 1,
     55                           y0 + (pInfo->yPos + pInfo->ySize) * (U32)Num / Denom - 1);
   \   00000178   980000E0           MUL      R0,R8,R0
   \   0000017C   0910A0E1           MOV      R1,R9
   \   00000180   ........           BL       __aeabi_uidiv
   \   00000184   050080E0           ADD      R0,R0,R5
   \   00000188   00A097E5           LDR      R10,[R7, #+0]
   \   0000018C   013040E2           SUB      R3,R0,#+1
   \   00000190   00308DE5           STR      R3,[SP, #+0]
   \   00000194   080097E5           LDR      R0,[R7, #+8]
   \   00000198   0910A0E1           MOV      R1,R9
   \   0000019C   0A0080E0           ADD      R0,R0,R10
   \   000001A0   980000E0           MUL      R0,R8,R0
   \   000001A4   ........           BL       __aeabi_uidiv
   \   000001A8   040080E0           ADD      R0,R0,R4
   \   000001AC   012040E2           SUB      R2,R0,#+1
   \   000001B0   00309DE5           LDR      R3,[SP, #+0]
   \   000001B4   980B00E0           MUL      R0,R8,R11
   \   000001B8   00208DE5           STR      R2,[SP, #+0]
   \   000001BC   04308DE5           STR      R3,[SP, #+4]
   \   000001C0   0910A0E1           MOV      R1,R9
   \   000001C4   ........           BL       __aeabi_uidiv
   \   000001C8   050080E0           ADD      R0,R0,R5
   \   000001CC   011040E2           SUB      R1,R0,#+1
   \   000001D0   00209DE5           LDR      R2,[SP, #+0]
   \   000001D4   04B09DE5           LDR      R11,[SP, #+4]
   \   000001D8   00108DE5           STR      R1,[SP, #+0]
   \   000001DC   980A00E0           MUL      R0,R8,R10
   \   000001E0   04208DE5           STR      R2,[SP, #+4]
   \   000001E4   0910A0E1           MOV      R1,R9
   \   000001E8   ........           BL       __aeabi_uidiv
   \   000001EC   040080E0           ADD      R0,R0,R4
   \   000001F0   0B30A0E1           MOV      R3,R11
   \   000001F4   04209DE5           LDR      R2,[SP, #+4]
   \   000001F8   00109DE5           LDR      R1,[SP, #+0]
   \   000001FC   ........           BL       LCD_FillRect
     56            }
     57            if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
   \                     ??_ClearUnusedPixelsScaled_2:
   \   00000200   000097E5           LDR      R0,[R7, #+0]
   \   00000204   081097E5           LDR      R1,[R7, #+8]
   \   00000208   00A081E0           ADD      R10,R1,R0
   \   0000020C   000096E5           LDR      R0,[R6, #+0]
   \   00000210   081096E5           LDR      R1,[R6, #+8]
   \   00000214   006081E0           ADD      R6,R1,R0
   \   00000218   0A0056E1           CMP      R6,R10
   \   0000021C   1B0000AA           BGE      ??_ClearUnusedPixelsScaled_3
     58              LCD_FillRect(x0 + (pDescriptor->XPos + pDescriptor->XSize) * (U32)Num / Denom - 1,
     59                           y0 + pInfo->yPos * (U32)Num / Denom,
     60                           x0 + (pInfo->xPos + pInfo->xSize) * (U32)Num / Denom - 1,
     61                           y0 + (pInfo->yPos + pInfo->ySize) * (U32)Num / Denom - 1);
   \   00000220   04B097E5           LDR      R11,[R7, #+4]
   \   00000224   0C0097E5           LDR      R0,[R7, #+12]
   \   00000228   0910A0E1           MOV      R1,R9
   \   0000022C   0B0080E0           ADD      R0,R0,R11
   \   00000230   980000E0           MUL      R0,R8,R0
   \   00000234   ........           BL       __aeabi_uidiv
   \   00000238   050080E0           ADD      R0,R0,R5
   \   0000023C   017040E2           SUB      R7,R0,#+1
   \   00000240   980A00E0           MUL      R0,R8,R10
   \   00000244   0910A0E1           MOV      R1,R9
   \   00000248   ........           BL       __aeabi_uidiv
   \   0000024C   040080E0           ADD      R0,R0,R4
   \   00000250   012040E2           SUB      R2,R0,#+1
   \   00000254   07A0A0E1           MOV      R10,R7
   \   00000258   980B00E0           MUL      R0,R8,R11
   \   0000025C   0270A0E1           MOV      R7,R2
   \   00000260   0910A0E1           MOV      R1,R9
   \   00000264   ........           BL       __aeabi_uidiv
   \   00000268   055080E0           ADD      R5,R0,R5
   \   0000026C   980600E0           MUL      R0,R8,R6
   \   00000270   0910A0E1           MOV      R1,R9
   \   00000274   ........           BL       __aeabi_uidiv
   \   00000278   040080E0           ADD      R0,R0,R4
   \   0000027C   010040E2           SUB      R0,R0,#+1
   \   00000280   0A30A0E1           MOV      R3,R10
   \   00000284   0720A0E1           MOV      R2,R7
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   ........           BL       LCD_FillRect
     62            }
     63          }
   \                     ??_ClearUnusedPixelsScaled_3:
   \   00000290   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000294   F08FBDE8           POP      {R4-R11,PC}      ;; return
     64          
     65          /*********************************************************************
     66          *
     67          *       _SkipPixels
     68          */
     69          static void _SkipPixels(GUI_GIF_CONTEXT * pContext, int SkipCnt) {
     70            while (SkipCnt--) {
     71              if (pContext->sp > pContext->aDecompBuffer) {
     72                --pContext->sp;
     73              } else {
     74                GUI_GIF__GetNextByte(pContext);
     75              }
     76            }
     77          }
     78          
     79          /*********************************************************************
     80          *
     81          *       _DrawLineScaled
     82          */

   \                                 In section .text, align 4, keep-with-next
     83          static int _DrawLineScaled(GUI_GIF_CONTEXT * pContext, int x0, int y0, int xSize, int Transparency, int Disposal, int NumColors, const LCD_PIXELINDEX * pTrans, int Num, int Denom, unsigned NumLines) {
   \                     _DrawLineScaled:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
     84            int BkColorIndex;
     85            unsigned Compare, Current;
     86            int SkipCnt, NumReps, Index;
     87            Current = Denom / 2;
   \   0000000C   44009DE5           LDR      R0,[SP, #+68]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   A00F81E0           ADD      R0,R1,R0, LSR #+31
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   C070A0E1           ASR      R7,R0,#+1
     88            Compare = Denom;
   \   00000024   0180A0E1           MOV      R8,R1
     89            BkColorIndex = LCD_GetBkColorIndex();
   \   00000028   ........           BL       LCD_GetBkColorIndex
   \   0000002C   04008DE5           STR      R0,[SP, #+4]
     90            Index = 0;
   \   00000030   08009DE5           LDR      R0,[SP, #+8]
   \   00000034   48109DE5           LDR      R1,[SP, #+72]
   \   00000038   D0A0A0E3           MOV      R10,#+208
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   0090A0E3           MOV      R9,#+0
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   F0AD8AE3           ORR      R10,R10,#0x3C00
     91            /*
     92             * Iterate over the original pixels
     93             */
     94            do {
     95              SkipCnt = 0;
   \                     ??_DrawLineScaled_0:
   \   0000004C   00B0A0E3           MOV      R11,#+0
     96              /*
     97               * Find out how many source pixels can be skipped
     98               */
     99              while (Current += Num, Current < Compare) {
   \                     ??_DrawLineScaled_1:
   \   00000050   40009DE5           LDR      R0,[SP, #+64]
   \   00000054   077080E0           ADD      R7,R0,R7
   \   00000058   080057E1           CMP      R7,R8
   \   0000005C   1000002A           BCS      ??_DrawLineScaled_2
    100                SkipCnt++;
    101                if (xSize-- == 0) {
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   01B08BE2           ADD      R11,R11,#+1
   \   00000068   016040E2           SUB      R6,R0,#+1
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F6FFFF1A           BNE      ??_DrawLineScaled_1
    102                  _SkipPixels(pContext, SkipCnt - 1);
   \   00000074   01505BE2           SUBS     R5,R11,#+1
   \   00000078   2B00000A           BEQ      ??_DrawLineScaled_3
   \                     ??_DrawLineScaled_4:
   \   0000007C   1610A0E3           MOV      R1,#+22
   \   00000080   04009AE7           LDR      R0,[R10, +R4]
   \   00000084   C41D81E3           ORR      R1,R1,#0x3100
   \   00000088   041081E0           ADD      R1,R1,R4
   \   0000008C   015045E2           SUB      R5,R5,#+1
   \   00000090   000051E1           CMP      R1,R0
   \   00000094   1000003A           BCC      ??_DrawLineScaled_5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GUI_GIF__GetNextByte
   \   000000A0   0F0000EA           B        ??_DrawLineScaled_6
    103                  return 0;
    104                }
    105              }
    106              /*
    107               * Get color
    108               */
    109              if (xSize) {
   \                     ??_DrawLineScaled_2:
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   1000001A           BNE      ??_DrawLineScaled_7
    110                if (pContext->sp > pContext->aDecompBuffer) {
    111                  Index = *--(pContext->sp);
    112                } else {
    113                  Index = GUI_GIF__GetNextByte(pContext);
    114                }
    115                if (Index == -2) {
    116                  return 0; /* End code */
    117                }
    118                if ((Index < 0) || (Index >= NumColors)) {
    119                  return 1; /* If Index out of legal range stop decompressing, error */
    120                }
    121              }
    122              /*
    123               * Skip the number of pixels that are irrelevant
    124               */
    125              _SkipPixels(pContext, SkipCnt);
   \                     ??_DrawLineScaled_8:
   \   000000AC   00005BE3           CMP      R11,#+0
   \   000000B0   2B00000A           BEQ      ??_DrawLineScaled_9
   \                     ??_DrawLineScaled_10:
   \   000000B4   1610A0E3           MOV      R1,#+22
   \   000000B8   04009AE7           LDR      R0,[R10, +R4]
   \   000000BC   C41D81E3           ORR      R1,R1,#0x3100
   \   000000C0   041081E0           ADD      R1,R1,R4
   \   000000C4   01B04BE2           SUB      R11,R11,#+1
   \   000000C8   000051E1           CMP      R1,R0
   \   000000CC   2000003A           BCC      ??_DrawLineScaled_11
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       GUI_GIF__GetNextByte
   \   000000D8   1F0000EA           B        ??_DrawLineScaled_12
   \                     ??_DrawLineScaled_5:
   \   000000DC   010040E2           SUB      R0,R0,#+1
   \   000000E0   04008AE7           STR      R0,[R10, +R4]
   \                     ??_DrawLineScaled_6:
   \   000000E4   000055E3           CMP      R5,#+0
   \   000000E8   E3FFFF1A           BNE      ??_DrawLineScaled_4
   \   000000EC   0E0000EA           B        ??_DrawLineScaled_3
   \                     ??_DrawLineScaled_7:
   \   000000F0   1610A0E3           MOV      R1,#+22
   \   000000F4   04009AE7           LDR      R0,[R10, +R4]
   \   000000F8   C41D81E3           ORR      R1,R1,#0x3100
   \   000000FC   041081E0           ADD      R1,R1,R4
   \   00000100   000051E1           CMP      R1,R0
   \   00000104   0300002A           BCS      ??_DrawLineScaled_13
   \   00000108   010040E2           SUB      R0,R0,#+1
   \   0000010C   04008AE7           STR      R0,[R10, +R4]
   \   00000110   0090D0E5           LDRB     R9,[R0, #+0]
   \   00000114   020000EA           B        ??_DrawLineScaled_14
   \                     ??_DrawLineScaled_13:
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       GUI_GIF__GetNextByte
   \   00000120   0090A0E1           MOV      R9,R0
   \                     ??_DrawLineScaled_14:
   \   00000124   020079E3           CMN      R9,#+2
   \   00000128   0200001A           BNE      ??_DrawLineScaled_15
   \                     ??_DrawLineScaled_3:
   \   0000012C   0000A0E3           MOV      R0,#+0
   \                     ??_DrawLineScaled_16:
   \   00000130   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000134   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??_DrawLineScaled_15:
   \   00000138   000059E3           CMP      R9,#+0
   \   0000013C   0200004A           BMI      ??_DrawLineScaled_17
   \   00000140   38009DE5           LDR      R0,[SP, #+56]
   \   00000144   000059E1           CMP      R9,R0
   \   00000148   D7FFFFBA           BLT      ??_DrawLineScaled_8
   \                     ??_DrawLineScaled_17:
   \   0000014C   0100A0E3           MOV      R0,#+1
   \   00000150   F6FFFFEA           B        ??_DrawLineScaled_16
   \                     ??_DrawLineScaled_11:
   \   00000154   010040E2           SUB      R0,R0,#+1
   \   00000158   04008AE7           STR      R0,[R10, +R4]
   \                     ??_DrawLineScaled_12:
   \   0000015C   00005BE3           CMP      R11,#+0
   \   00000160   D3FFFF1A           BNE      ??_DrawLineScaled_10
    126              /*
    127               * Find out how many times this pixel needs to be repeated
    128               */
    129              NumReps = 1;
   \                     ??_DrawLineScaled_9:
   \   00000164   01B0A0E3           MOV      R11,#+1
   \   00000168   000000EA           B        ??_DrawLineScaled_18
    130              while (Compare += Denom, Current >= Compare) {
    131                NumReps++;
   \                     ??_DrawLineScaled_19:
   \   0000016C   01B08BE2           ADD      R11,R11,#+1
    132              }
   \                     ??_DrawLineScaled_18:
   \   00000170   44009DE5           LDR      R0,[SP, #+68]
   \   00000174   088080E0           ADD      R8,R0,R8
   \   00000178   080057E1           CMP      R7,R8
   \   0000017C   FAFFFF2A           BCS      ??_DrawLineScaled_19
    133              /*
    134               * Draw the pixel
    135               */
    136              if (Index >= 0) {
   \   00000180   000059E3           CMP      R9,#+0
   \   00000184   2200004A           BMI      ??_DrawLineScaled_20
    137                if ((NumReps == 1) && (NumLines == 1)) {
   \   00000188   01005BE3           CMP      R11,#+1
   \   0000018C   48009D05           LDREQ    R0,[SP, #+72]
   \   00000190   01005003           CMPEQ    R0,#+1
   \   00000194   0D00001A           BNE      ??_DrawLineScaled_21
    138                  if (Index != Transparency) {
   \   00000198   30009DE5           LDR      R0,[SP, #+48]
   \   0000019C   000059E1           CMP      R9,R0
   \   000001A0   0500000A           BEQ      ??_DrawLineScaled_22
    139                    LCD_SetPixelIndex(x0, y0, *(pTrans + Index));
   \   000001A4   3C009DE5           LDR      R0,[SP, #+60]
   \   000001A8   092190E7           LDR      R2,[R0, +R9, LSL #+2]
   \                     ??_DrawLineScaled_23:
   \   000001AC   08109DE5           LDR      R1,[SP, #+8]
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   ........           BL       LCD_SetPixelIndex
   \   000001B8   150000EA           B        ??_DrawLineScaled_20
    140                  } else if (Disposal == 2) {
   \                     ??_DrawLineScaled_22:
   \   000001BC   34009DE5           LDR      R0,[SP, #+52]
   \   000001C0   020050E3           CMP      R0,#+2
   \   000001C4   1200001A           BNE      ??_DrawLineScaled_20
    141                    LCD_SetPixelIndex(x0, y0, BkColorIndex);
   \   000001C8   04209DE5           LDR      R2,[SP, #+4]
   \   000001CC   F6FFFFEA           B        ??_DrawLineScaled_23
    142                  }
    143                } else {
    144                  if (Index != Transparency) {
   \                     ??_DrawLineScaled_21:
   \   000001D0   30009DE5           LDR      R0,[SP, #+48]
   \   000001D4   000059E1           CMP      R9,R0
    145                    LCD_SetColorIndex(*(pTrans + Index));
   \   000001D8   3C009D15           LDRNE    R0,[SP, #+60]
   \   000001DC   09019017           LDRNE    R0,[R0, +R9, LSL #+2]
   \   000001E0   0300001A           BNE      ??_DrawLineScaled_24
    146                    LCD_FillRect(x0, y0, x0 + NumReps - 1, y0 + NumLines - 1);
    147                  } else if (Disposal == 2) {
   \   000001E4   34009DE5           LDR      R0,[SP, #+52]
   \   000001E8   020050E3           CMP      R0,#+2
   \   000001EC   0800001A           BNE      ??_DrawLineScaled_20
    148                    LCD_SetColorIndex(BkColorIndex);
   \   000001F0   04009DE5           LDR      R0,[SP, #+4]
   \                     ??_DrawLineScaled_24:
   \   000001F4   ........           BL       LCD_SetColorIndex
    149                    LCD_FillRect(x0, y0, x0 + NumReps - 1, y0 + NumLines - 1);
   \   000001F8   00009DE5           LDR      R0,[SP, #+0]
   \   000001FC   08109DE5           LDR      R1,[SP, #+8]
   \   00000200   013040E2           SUB      R3,R0,#+1
   \   00000204   0B0085E0           ADD      R0,R5,R11
   \   00000208   012040E2           SUB      R2,R0,#+1
   \   0000020C   0500A0E1           MOV      R0,R5
   \   00000210   ........           BL       LCD_FillRect
    150                  }
    151                }
    152              }
    153              x0 += NumReps;
   \                     ??_DrawLineScaled_20:
   \   00000214   05508BE0           ADD      R5,R11,R5
    154            } while (xSize-- > 0);
   \   00000218   016056E2           SUBS     R6,R6,#+1
   \   0000021C   8AFFFFAA           BGE      ??_DrawLineScaled_0
   \   00000220   C1FFFFEA           B        ??_DrawLineScaled_3
    155            return 0;
    156          }
    157          
    158          /*********************************************************************
    159          *
    160          *       _SkipLine
    161          */
    162          static int _SkipLine(GUI_GIF_CONTEXT * pContext, int Width) {
    163            while (Width--) {
    164              if (pContext->sp > pContext->aDecompBuffer) {
    165                --pContext->sp;
    166              } else {
    167                GUI_GIF__GetNextByte(pContext);
    168              }
    169            }
    170            return 0;
    171          }
    172          
    173          /*********************************************************************
    174          *
    175          *       _DrawNonInterlacedScaled
    176          */

   \                                 In section .text, align 4, keep-with-next
    177          static int _DrawNonInterlacedScaled(GUI_GIF_CONTEXT * pContext, int x0, int y0, int Width, int Height, int Transparency, int Disposal, int NumColors, const LCD_PIXELINDEX * pTrans, int Num, int Denom) {
   \                     _DrawNonInterlacedScaled:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   68609DE5           LDR      R6,[SP, #+104]
   \   0000000C   0050A0E1           MOV      R5,R0
    178            int SkipCnt, NumReps, y;
    179            unsigned Compare, Current;
    180            Current = Denom / 2;
   \   00000010   A60F86E0           ADD      R0,R6,R6, LSR #+31
   \   00000014   C080A0E1           ASR      R8,R0,#+1
    181            Compare = Denom;
    182            y = 0;
   \   00000018   1600A0E3           MOV      R0,#+22
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   C40D80E3           ORR      R0,R0,#0x3100
   \   00000024   D090A0E3           MOV      R9,#+208
   \   00000028   0670A0E1           MOV      R7,R6
   \   0000002C   1C108DE5           STR      R1,[SP, #+28]
   \   00000030   054080E0           ADD      R4,R0,R5
   \   00000034   F09D89E3           ORR      R9,R9,#0x3C00
    183            /*
    184             * Iterate over the original pixels
    185             */
    186            do {
    187              SkipCnt = 0;
   \                     ??_DrawNonInterlacedScaled_0:
   \   00000038   00A0A0E3           MOV      R10,#+0
   \   0000003C   000000EA           B        ??_DrawNonInterlacedScaled_1
    188              /*
    189               * Find out how many source lines can be skipped
    190               */
    191              while (Current += Num, Current < Compare) {
    192                SkipCnt++;
   \                     ??_DrawNonInterlacedScaled_2:
   \   00000040   01A08AE2           ADD      R10,R10,#+1
    193              }
   \                     ??_DrawNonInterlacedScaled_1:
   \   00000044   64009DE5           LDR      R0,[SP, #+100]
   \   00000048   088080E0           ADD      R8,R0,R8
   \   0000004C   070058E1           CMP      R8,R7
   \   00000050   FAFFFF3A           BCC      ??_DrawNonInterlacedScaled_2
    194              /*
    195               * Skip the number of lines that are irrelevant
    196               */
    197              y += SkipCnt + 1;
   \   00000054   1C109DE5           LDR      R1,[SP, #+28]
   \   00000058   01208AE2           ADD      R2,R10,#+1
   \   0000005C   011082E0           ADD      R1,R2,R1
   \   00000060   1C108DE5           STR      R1,[SP, #+28]
    198              while (--SkipCnt >= 0) {
   \                     ??_DrawNonInterlacedScaled_3:
   \   00000064   01A05AE2           SUBS     R10,R10,#+1
   \   00000068   0E00004A           BMI      ??_DrawNonInterlacedScaled_4
    199                /* Skip one line of pixel data */
    200                if (_SkipLine(pContext, Width)) {
   \   0000006C   28B09DE5           LDR      R11,[SP, #+40]
   \   00000070   00005BE3           CMP      R11,#+0
   \   00000074   FAFFFF0A           BEQ      ??_DrawNonInterlacedScaled_3
   \                     ??_DrawNonInterlacedScaled_5:
   \   00000078   050099E7           LDR      R0,[R9, +R5]
   \   0000007C   01B04BE2           SUB      R11,R11,#+1
   \   00000080   000054E1           CMP      R4,R0
   \   00000084   0200003A           BCC      ??_DrawNonInterlacedScaled_6
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       GUI_GIF__GetNextByte
   \   00000090   010000EA           B        ??_DrawNonInterlacedScaled_7
   \                     ??_DrawNonInterlacedScaled_6:
   \   00000094   010040E2           SUB      R0,R0,#+1
   \   00000098   050089E7           STR      R0,[R9, +R5]
   \                     ??_DrawNonInterlacedScaled_7:
   \   0000009C   00005BE3           CMP      R11,#+0
   \   000000A0   F4FFFF1A           BNE      ??_DrawNonInterlacedScaled_5
   \   000000A4   EEFFFFEA           B        ??_DrawNonInterlacedScaled_3
    201                  return 1; /* Error */
    202                }
    203              }
    204              /*
    205               * Find out how many times this line needs to be repeated
    206               */
    207              NumReps = 1;
   \                     ??_DrawNonInterlacedScaled_4:
   \   000000A8   01A0A0E3           MOV      R10,#+1
   \   000000AC   000000EA           B        ??_DrawNonInterlacedScaled_8
    208              while (Compare += Denom, Current >= Compare) {
    209                NumReps++;
   \                     ??_DrawNonInterlacedScaled_9:
   \   000000B0   01A08AE2           ADD      R10,R10,#+1
    210              }
   \                     ??_DrawNonInterlacedScaled_8:
   \   000000B4   077086E0           ADD      R7,R6,R7
   \   000000B8   070058E1           CMP      R8,R7
   \   000000BC   FBFFFF2A           BCS      ??_DrawNonInterlacedScaled_9
    211              /*
    212               * Draw the line
    213               */
    214              _DrawLineScaled(pContext, x0, y0, Width, Transparency, Disposal, NumColors, pTrans, Num, Denom, NumReps);
   \   000000C0   64009DE5           LDR      R0,[SP, #+100]
   \   000000C4   18A08DE5           STR      R10,[SP, #+24]
   \   000000C8   10008DE5           STR      R0,[SP, #+16]
   \   000000CC   60009DE5           LDR      R0,[SP, #+96]
   \   000000D0   14608DE5           STR      R6,[SP, #+20]
   \   000000D4   0C008DE5           STR      R0,[SP, #+12]
   \   000000D8   5C009DE5           LDR      R0,[SP, #+92]
   \   000000DC   28309DE5           LDR      R3,[SP, #+40]
   \   000000E0   08008DE5           STR      R0,[SP, #+8]
   \   000000E4   58009DE5           LDR      R0,[SP, #+88]
   \   000000E8   24209DE5           LDR      R2,[SP, #+36]
   \   000000EC   04008DE5           STR      R0,[SP, #+4]
   \   000000F0   54009DE5           LDR      R0,[SP, #+84]
   \   000000F4   20109DE5           LDR      R1,[SP, #+32]
   \   000000F8   00008DE5           STR      R0,[SP, #+0]
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           BL       _DrawLineScaled
    215              y0 += NumReps;
   \   00000104   24109DE5           LDR      R1,[SP, #+36]
    216            } while (y < Height);
   \   00000108   1C009DE5           LDR      R0,[SP, #+28]
   \   0000010C   01108AE0           ADD      R1,R10,R1
   \   00000110   24108DE5           STR      R1,[SP, #+36]
   \   00000114   50109DE5           LDR      R1,[SP, #+80]
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   C5FFFFBA           BLT      ??_DrawNonInterlacedScaled_0
    217            return 0;
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   2CD08DE2           ADD      SP,SP,#+44
   \   00000128   F08FBDE8           POP      {R4-R11,PC}      ;; return
    218          }
    219          
    220          /*********************************************************************
    221          *
    222          *       _DrawInterlacedLineScaled
    223          */

   \                                 In section .text, align 4, keep-with-next
    224          static int _DrawInterlacedLineScaled(GUI_GIF_CONTEXT * pContext, int x0, int y0, int Width, int Height, int Transparency, int Disposal, int NumColors, const LCD_PIXELINDEX * pTrans, int Num, int Denom, int yPos) {
   \                     _DrawInterlacedLineScaled:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   60E09DE5           LDR      LR,[SP, #+96]
   \   0000000C   0050A0E1           MOV      R5,R0
    225            int SkipCnt, NumReps, y, yCompare;
    226            unsigned Compare, Current;
    227            Current = Denom / 2;
   \   00000010   AE6F8EE0           ADD      R6,LR,LR, LSR #+31
   \   00000014   C6A0A0E1           ASR      R10,R6,#+1
   \   00000018   48009DE5           LDR      R0,[SP, #+72]
   \   0000001C   58109DE5           LDR      R1,[SP, #+88]
   \   00000020   5CC09DE5           LDR      R12,[SP, #+92]
   \   00000024   64409DE5           LDR      R4,[SP, #+100]
    228            Compare = Denom;
   \   00000028   0E60A0E1           MOV      R6,LR
    229            y = yCompare = 0;
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   0080A0E3           MOV      R8,#+0
    230            /*
    231             * Iterate over the original pixels
    232             */
    233            do {
    234              SkipCnt = 0;
   \                     ??_DrawInterlacedLineScaled_0:
   \   00000034   0090A0E3           MOV      R9,#+0
   \   00000038   000000EA           B        ??_DrawInterlacedLineScaled_1
    235              /*
    236               * Find out how many source lines can be skipped
    237               */
    238              while (Current += Num, Current < Compare) {
    239                SkipCnt++;
   \                     ??_DrawInterlacedLineScaled_2:
   \   0000003C   019089E2           ADD      R9,R9,#+1
    240              }
   \                     ??_DrawInterlacedLineScaled_1:
   \   00000040   0AA08CE0           ADD      R10,R12,R10
   \   00000044   06005AE1           CMP      R10,R6
   \   00000048   FBFFFF3A           BCC      ??_DrawInterlacedLineScaled_2
    241              /*
    242               * Skip the number of lines that are irrelevant
    243               */
    244              y += SkipCnt + 1;
   \   0000004C   01B089E2           ADD      R11,R9,#+1
   \   00000050   08808BE0           ADD      R8,R11,R8
    245              /*
    246               * Find out how many times this line needs to be repeated
    247               */
    248              NumReps = 1;
   \   00000054   01B0A0E3           MOV      R11,#+1
   \   00000058   000000EA           B        ??_DrawInterlacedLineScaled_3
    249              while (Compare += Denom, Current >= Compare) {
    250                NumReps++;
   \                     ??_DrawInterlacedLineScaled_4:
   \   0000005C   01B08BE2           ADD      R11,R11,#+1
    251              }
   \                     ??_DrawInterlacedLineScaled_3:
   \   00000060   06608EE0           ADD      R6,LR,R6
   \   00000064   06005AE1           CMP      R10,R6
   \   00000068   FBFFFF2A           BCS      ??_DrawInterlacedLineScaled_4
    252              /*
    253               * Draw the line
    254               */
    255              if (yCompare == yPos) {
   \   0000006C   040057E1           CMP      R7,R4
   \   00000070   1000001A           BNE      ??_DrawInterlacedLineScaled_5
    256                if (_DrawLineScaled(pContext, x0, y0, Width, Transparency, Disposal, NumColors, pTrans, Num, Denom, NumReps)) {
   \   00000074   54009DE5           LDR      R0,[SP, #+84]
   \   00000078   0C108DE5           STR      R1,[SP, #+12]
   \   0000007C   08008DE5           STR      R0,[SP, #+8]
   \   00000080   50009DE5           LDR      R0,[SP, #+80]
   \   00000084   18B08DE5           STR      R11,[SP, #+24]
   \   00000088   04008DE5           STR      R0,[SP, #+4]
   \   0000008C   4C009DE5           LDR      R0,[SP, #+76]
   \   00000090   14E08DE5           STR      LR,[SP, #+20]
   \   00000094   00008DE5           STR      R0,[SP, #+0]
   \   00000098   10C08DE5           STR      R12,[SP, #+16]
   \   0000009C   20109DE5           LDR      R1,[SP, #+32]
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       _DrawLineScaled
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   1C00000A           BEQ      ??_DrawInterlacedLineScaled_6
    257                  return 1; /* Error */
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   1A0000EA           B        ??_DrawInterlacedLineScaled_6
    258                }
    259                return 0; /* Line has been drawn, return */
    260              }
    261              if (yCompare > yPos) {
   \                     ??_DrawInterlacedLineScaled_5:
   \   000000B8   070054E1           CMP      R4,R7
   \   000000BC   040000BA           BLT      ??_DrawInterlacedLineScaled_7
    262                break;
    263              }
    264              y0 += NumReps;
    265              yCompare += SkipCnt + 1;
   \   000000C0   019089E2           ADD      R9,R9,#+1
   \   000000C4   02208BE0           ADD      R2,R11,R2
   \   000000C8   077089E0           ADD      R7,R9,R7
    266            } while (y < Height);
   \   000000CC   000058E1           CMP      R8,R0
   \   000000D0   D7FFFFBA           BLT      ??_DrawInterlacedLineScaled_0
    267            /* If the line is not drawn, the data pointer needs to be incremented */
    268            _SkipLine(pContext, Width);
   \                     ??_DrawInterlacedLineScaled_7:
   \   000000D4   1600A0E3           MOV      R0,#+22
   \   000000D8   0340A0E1           MOV      R4,R3
   \   000000DC   C40D80E3           ORR      R0,R0,#0x3100
   \   000000E0   D070A0E3           MOV      R7,#+208
   \   000000E4   056080E0           ADD      R6,R0,R5
   \   000000E8   F07D87E3           ORR      R7,R7,#0x3C00
   \   000000EC   000054E3           CMP      R4,#+0
   \   000000F0   0A00000A           BEQ      ??_DrawInterlacedLineScaled_8
   \                     ??_DrawInterlacedLineScaled_9:
   \   000000F4   050097E7           LDR      R0,[R7, +R5]
   \   000000F8   014044E2           SUB      R4,R4,#+1
   \   000000FC   000056E1           CMP      R6,R0
   \   00000100   0200003A           BCC      ??_DrawInterlacedLineScaled_10
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           BL       GUI_GIF__GetNextByte
   \   0000010C   010000EA           B        ??_DrawInterlacedLineScaled_11
   \                     ??_DrawInterlacedLineScaled_10:
   \   00000110   010040E2           SUB      R0,R0,#+1
   \   00000114   050087E7           STR      R0,[R7, +R5]
   \                     ??_DrawInterlacedLineScaled_11:
   \   00000118   000054E3           CMP      R4,#+0
   \   0000011C   F4FFFF1A           BNE      ??_DrawInterlacedLineScaled_9
    269            return 0;
   \                     ??_DrawInterlacedLineScaled_8:
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??_DrawInterlacedLineScaled_6:
   \   00000124   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000128   F08FBDE8           POP      {R4-R11,PC}      ;; return
    270          }
    271          
    272          /*********************************************************************
    273          *
    274          *       _DrawInterlacedScaled
    275          */
    276          static int _DrawInterlacedScaled(GUI_GIF_CONTEXT * pContext, int x0, int y0, int Width, int Height, int Transparency, int Disposal, int NumColors, const LCD_PIXELINDEX * pTrans, int Num, int Denom) {
    277            int YCnt, YPos, Pass;
    278            for (YCnt = 0, YPos = 0, Pass = 0; YCnt < Height; YCnt++) {
    279              if (_DrawInterlacedLineScaled(pContext, x0, y0, Width, Height, Transparency, Disposal, NumColors, pTrans, Num, Denom, YPos)) {
    280                return 1; /* Error */
    281              }
    282              YPos += GUI_GIF__aInterlaceOffset[Pass];
    283              if (YPos >= Height) {
    284                ++Pass;
    285                YPos = GUI_GIF__aInterlaceYPos[Pass];
    286              }
    287            }
    288            return 0;
    289          }
    290          
    291          /*********************************************************************
    292          *
    293          *       _DrawFromDataBlockScaled
    294          */

   \                                 In section .text, align 4, keep-with-next
    295          static int _DrawFromDataBlockScaled(GUI_GIF_CONTEXT * pContext, IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal, int Num, int Denom) {
   \                     _DrawFromDataBlockScaled:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0190A0E1           MOV      R9,R1
    296            int Codesize, Interlace;
    297            int Width, Height, NumColors;
    298            LCD_LOGPALETTE LogPalette;
    299            const LCD_PIXELINDEX * pTrans;
    300            const U8 * pData;
    301            x0 += pDescriptor->XPos * (U32)Num / Denom;
   \   00000010   000099E5           LDR      R0,[R9, #+0]
   \   00000014   68109DE5           LDR      R1,[SP, #+104]
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   910000E0           MUL      R0,R1,R0
   \   00000020   0360A0E1           MOV      R6,R3
   \   00000024   6C109DE5           LDR      R1,[SP, #+108]
   \   00000028   ........           BL       __aeabi_uidiv
   \   0000002C   055080E0           ADD      R5,R0,R5
    302            y0 += pDescriptor->YPos * (U32)Num / Denom;
   \   00000030   040099E5           LDR      R0,[R9, #+4]
   \   00000034   68109DE5           LDR      R1,[SP, #+104]
    303            Width     = pDescriptor->XSize;
   \   00000038   087099E5           LDR      R7,[R9, #+8]
   \   0000003C   910000E0           MUL      R0,R1,R0
   \   00000040   6C109DE5           LDR      R1,[SP, #+108]
   \   00000044   ........           BL       __aeabi_uidiv
   \   00000048   066080E0           ADD      R6,R0,R6
    304            Height    = pDescriptor->YSize;
   \   0000004C   0C8099E5           LDR      R8,[R9, #+12]
    305            NumColors = pDescriptor->NumColors;
   \   00000050   140099E5           LDR      R0,[R9, #+20]
    306            /* Get color translation table  */
    307            LogPalette.NumEntries  = NumColors;
    308            LogPalette.HasTrans    = 0;
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   3010CDE5           STRB     R1,[SP, #+48]
    309            LogPalette.pPalEntries = pContext->aColorTable;
   \   0000005C   0810A0E3           MOV      R1,#+8
   \   00000060   F41D81E3           ORR      R1,R1,#0x3D00
   \   00000064   24008DE5           STR      R0,[SP, #+36]
   \   00000068   2C008DE5           STR      R0,[SP, #+44]
   \   0000006C   041081E0           ADD      R1,R1,R4
   \   00000070   34108DE5           STR      R1,[SP, #+52]
    310            if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
   \   00000074   2C008DE2           ADD      R0,SP,#+44
   \   00000078   ........           BL       LCD_GetpPalConvTable
   \   0000007C   20008DE5           STR      R0,[SP, #+32]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0100001A           BNE      ??_DrawFromDataBlockScaled_0
    311              return 1; /* Error */
   \                     ??_DrawFromDataBlockScaled_1:
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   470000EA           B        ??_DrawFromDataBlockScaled_2
    312            }
    313            if (GUI_GIF__ReadData(pContext, 1, &pData, 0)) {
   \                     ??_DrawFromDataBlockScaled_0:
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   28208DE2           ADD      R2,SP,#+40
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       GUI_GIF__ReadData
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   F6FFFF1A           BNE      ??_DrawFromDataBlockScaled_1
    314              return 1; /* Error */
    315            }
    316            if ((!Width) || (!Height)) {
   \   000000AC   000057E3           CMP      R7,#+0
   \   000000B0   00005813           CMPNE    R8,#+0
   \   000000B4   F3FFFF0A           BEQ      ??_DrawFromDataBlockScaled_1
    317              return 1; /* Error */
    318            }
    319            Codesize  = *pData;                    /* Read the LZW codesize */
    320            GUI_GIF__InitLZW(pContext, Codesize);            /* Initialize the LZW stack with the LZW codesize */
   \   000000B8   28009DE5           LDR      R0,[SP, #+40]
   \   000000BC   0010D0E5           LDRB     R1,[R0, #+0]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       GUI_GIF__InitLZW
    321            Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
    322            if (!Interlace) {
   \   000000C8   1000D9E5           LDRB     R0,[R9, #+16]
   \   000000CC   400010E3           TST      R0,#0x40
   \   000000D0   1200001A           BNE      ??_DrawFromDataBlockScaled_3
    323              return _DrawNonInterlacedScaled(pContext, x0, y0, Width, Height, Transparency, Disposal, NumColors, pTrans, Num, Denom);
   \   000000D4   6C009DE5           LDR      R0,[SP, #+108]
   \   000000D8   00808DE5           STR      R8,[SP, #+0]
   \   000000DC   18008DE5           STR      R0,[SP, #+24]
   \   000000E0   68009DE5           LDR      R0,[SP, #+104]
   \   000000E4   0730A0E1           MOV      R3,R7
   \   000000E8   14008DE5           STR      R0,[SP, #+20]
   \   000000EC   20009DE5           LDR      R0,[SP, #+32]
   \   000000F0   0620A0E1           MOV      R2,R6
   \   000000F4   10008DE5           STR      R0,[SP, #+16]
   \   000000F8   24009DE5           LDR      R0,[SP, #+36]
   \   000000FC   0510A0E1           MOV      R1,R5
   \   00000100   0C008DE5           STR      R0,[SP, #+12]
   \   00000104   64009DE5           LDR      R0,[SP, #+100]
   \   00000108   08008DE5           STR      R0,[SP, #+8]
   \   0000010C   60009DE5           LDR      R0,[SP, #+96]
   \   00000110   04008DE5           STR      R0,[SP, #+4]
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       _DrawNonInterlacedScaled
   \   0000011C   230000EA           B        ??_DrawFromDataBlockScaled_2
    324            }
    325            return _DrawInterlacedScaled(pContext, x0, y0, Width, Height, Transparency, Disposal, NumColors, pTrans, Num, Denom);
   \                     ??_DrawFromDataBlockScaled_3:
   \   00000120   0090A0E3           MOV      R9,#+0
   \   00000124   00A0A0E3           MOV      R10,#+0
   \   00000128   010058E3           CMP      R8,#+1
   \   0000012C   1E0000BA           BLT      ??_DrawFromDataBlockScaled_4
   \   00000130   08B0A0E1           MOV      R11,R8
   \                     ??_DrawFromDataBlockScaled_5:
   \   00000134   6C009DE5           LDR      R0,[SP, #+108]
   \   00000138   1C908DE5           STR      R9,[SP, #+28]
   \   0000013C   18008DE5           STR      R0,[SP, #+24]
   \   00000140   68009DE5           LDR      R0,[SP, #+104]
   \   00000144   00808DE5           STR      R8,[SP, #+0]
   \   00000148   14008DE5           STR      R0,[SP, #+20]
   \   0000014C   20009DE5           LDR      R0,[SP, #+32]
   \   00000150   0730A0E1           MOV      R3,R7
   \   00000154   10008DE5           STR      R0,[SP, #+16]
   \   00000158   24009DE5           LDR      R0,[SP, #+36]
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   0C008DE5           STR      R0,[SP, #+12]
   \   00000164   64009DE5           LDR      R0,[SP, #+100]
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   08008DE5           STR      R0,[SP, #+8]
   \   00000170   60009DE5           LDR      R0,[SP, #+96]
   \   00000174   04008DE5           STR      R0,[SP, #+4]
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   ........           BL       _DrawInterlacedLineScaled
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   BFFFFF1A           BNE      ??_DrawFromDataBlockScaled_1
   \   00000188   ........           LDR      R0,??DataTable2
   \   0000018C   0A0190E7           LDR      R0,[R0, +R10, LSL #+2]
   \   00000190   099080E0           ADD      R9,R0,R9
   \   00000194   080059E1           CMP      R9,R8
   \   00000198   ........           LDRGE    R0,??DataTable2_1
   \   0000019C   01A08AA2           ADDGE    R10,R10,#+1
   \   000001A0   0A9190A7           LDRGE    R9,[R0, +R10, LSL #+2]
   \   000001A4   01B05BE2           SUBS     R11,R11,#+1
   \   000001A8   E1FFFF1A           BNE      ??_DrawFromDataBlockScaled_5
   \                     ??_DrawFromDataBlockScaled_4:
   \   000001AC   0000A0E3           MOV      R0,#+0
   \                     ??_DrawFromDataBlockScaled_2:
   \   000001B0   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   000001B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    326          }
    327          
    328          /*********************************************************************
    329          *
    330          *       Public code
    331          *
    332          **********************************************************************
    333          */
    334          /*********************************************************************
    335          *
    336          *       GUI_GIF_DrawSubScaledEx
    337          */

   \                                 In section .text, align 4, keep-with-next
    338          int  GUI_GIF_DrawSubScaledEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0, int Index, int Num, int Denom) {
   \                     GUI_GIF_DrawSubScaledEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0080A0E1           MOV      R8,R0
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   02A0A0E1           MOV      R10,R2
   \   00000014   03B0A0E1           MOV      R11,R3
   \   00000018   48409DE5           LDR      R4,[SP, #+72]
    339            int Result, OldColorIndex;
    340            GUI_HMEM          hContext;
    341            GUI_GIF_CONTEXT * pContext;
    342            #if (GUI_WINSUPPORT)
    343              GUI_RECT r;
    344              int Width, Height;
    345            #endif
    346          
    347            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    348            hContext = GUI_ALLOC_AllocZero(sizeof(GUI_GIF_CONTEXT));
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   410C80E3           ORR      R0,R0,#0x4100
   \   00000028   ........           BL       GUI_ALLOC_AllocZero
   \   0000002C   0060B0E1           MOVS     R6,R0
    349            if (hContext) {
   \   00000030   4300000A           BEQ      ??GUI_GIF_DrawSubScaledEx_0
    350              pContext = (GUI_GIF_CONTEXT *)GUI_ALLOC_h2p(hContext);
   \   00000034   ........           BL       GUI_ALLOC_h2p
   \   00000038   0070A0E1           MOV      R7,R0
    351              pContext->pfGetData = pfGetData;
   \   0000003C   088087E5           STR      R8,[R7, #+8]
    352              pContext->pParam    = p;
   \   00000040   0C9087E5           STR      R9,[R7, #+12]
    353              #if (GUI_WINSUPPORT)
    354              {
    355                const U8 * pData;
    356                GUI_GIF__ReadData(pContext, 10, &pData, 1);
   \   00000044   0130A0E3           MOV      R3,#+1
   \   00000048   04208DE2           ADD      R2,SP,#+4
   \   0000004C   0A10A0E3           MOV      R1,#+10
   \   00000050   ........           BL       GUI_GIF__ReadData
    357                pData += 6;
   \   00000054   04009DE5           LDR      R0,[SP, #+4]
   \   00000058   060080E2           ADD      R0,R0,#+6
   \   0000005C   04008DE5           STR      R0,[SP, #+4]
    358                Width  = GUI__Read16(&pData);
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   ........           BL       GUI__Read16
   \   00000068   0080A0E1           MOV      R8,R0
    359                Height = GUI__Read16(&pData);
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   ........           BL       GUI__Read16
   \   00000074   0090A0E1           MOV      R9,R0
    360              }
    361              #endif
    362              OldColorIndex = LCD_GetColorIndex();
   \   00000078   ........           BL       LCD_GetColorIndex
   \   0000007C   18008DE5           STR      R0,[SP, #+24]
    363              #if (GUI_WINSUPPORT)
    364                WM_ADDORG(x0,y0);
   \   00000080   ........           LDR      R0,??DataTable2_2
   \   00000084   401090E5           LDR      R1,[R0, #+64]
   \   00000088   440090E5           LDR      R0,[R0, #+68]
   \   0000008C   0AA081E0           ADD      R10,R1,R10
   \   00000090   0BB080E0           ADD      R11,R0,R11
    365                r.x1 = (r.x0 = x0) + Width  * (U32)Num / Denom - 1;
   \   00000094   B0A1CDE1           STRH     R10,[SP, #+16]
   \   00000098   F001DDE1           LDRSH    R0,[SP, #+16]
   \   0000009C   44109DE5           LDR      R1,[SP, #+68]
    366                r.y1 = (r.y0 = y0) + Height * (U32)Num / Denom - 1;
   \   000000A0   B2B1CDE1           STRH     R11,[SP, #+18]
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   910800E0           MUL      R0,R1,R8
   \   000000AC   0410A0E1           MOV      R1,R4
   \   000000B0   ........           BL       __aeabi_uidiv
   \   000000B4   00109DE5           LDR      R1,[SP, #+0]
   \   000000B8   F281DDE1           LDRSH    R8,[SP, #+18]
   \   000000BC   010080E0           ADD      R0,R0,R1
   \   000000C0   010040E2           SUB      R0,R0,#+1
   \   000000C4   44109DE5           LDR      R1,[SP, #+68]
   \   000000C8   B401CDE1           STRH     R0,[SP, #+20]
   \   000000CC   910900E0           MUL      R0,R1,R9
   \   000000D0   0410A0E1           MOV      R1,R4
   \   000000D4   ........           BL       __aeabi_uidiv
   \   000000D8   080080E0           ADD      R0,R0,R8
   \   000000DC   010040E2           SUB      R0,R0,#+1
   \   000000E0   B601CDE1           STRH     R0,[SP, #+22]
    367                WM_ITERATE_START(&r) {
   \   000000E4   10008DE2           ADD      R0,SP,#+16
   \   000000E8   ........           BL       WM__InitIVRSearch
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0F00000A           BEQ      ??GUI_GIF_DrawSubScaledEx_1
    368              #endif
    369              Result = GUI_GIF__DrawFromFilePointer(pContext, x0, y0, Index, Num, Denom, _DrawFromDataBlockScaled, _ClearUnusedPixelsScaled);
   \                     ??GUI_GIF_DrawSubScaledEx_2:
   \   000000F4   ........           LDR      R0,??DataTable2_3
   \   000000F8   04408DE5           STR      R4,[SP, #+4]
   \   000000FC   0C008DE5           STR      R0,[SP, #+12]
   \   00000100   ........           LDR      R0,??DataTable2_4
   \   00000104   40309DE5           LDR      R3,[SP, #+64]
   \   00000108   08008DE5           STR      R0,[SP, #+8]
   \   0000010C   44009DE5           LDR      R0,[SP, #+68]
   \   00000110   0B20A0E1           MOV      R2,R11
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   0A10A0E1           MOV      R1,R10
   \   0000011C   0700A0E1           MOV      R0,R7
   \   00000120   ........           BL       GUI_GIF__DrawFromFilePointer
   \   00000124   0050A0E1           MOV      R5,R0
    370              #if (GUI_WINSUPPORT)
    371                } WM_ITERATE_END();
   \   00000128   ........           BL       WM__GetNextIVR
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   EFFFFF1A           BNE      ??GUI_GIF_DrawSubScaledEx_2
    372              #endif
    373              LCD_SetColorIndex(OldColorIndex);
   \                     ??GUI_GIF_DrawSubScaledEx_1:
   \   00000134   18009DE5           LDR      R0,[SP, #+24]
   \   00000138   ........           BL       LCD_SetColorIndex
    374              GUI_ALLOC_Free(hContext);
   \   0000013C   0600A0E1           MOV      R0,R6
   \   00000140   ........           BL       GUI_ALLOC_Free
    375            }
    376            GUI_UNLOCK();
   \                     ??GUI_GIF_DrawSubScaledEx_0:
   \   00000144   ........           BL       GUI_Unlock
    377            return Result;
   \   00000148   0500A0E1           MOV      R0,R5
   \   0000014C   1CD08DE2           ADD      SP,SP,#+28
   \   00000150   F08FBDE8           POP      {R4-R11,PC}      ;; return
    378          }
    379          
    380          /*********************************************************************
    381          *
    382          *       GUI_GIF_DrawSubScaled
    383          */

   \                                 In section .text, align 4, keep-with-next
    384          int  GUI_GIF_DrawSubScaled(const void * pGIF, U32 NumBytes, int x0, int y0, int Index, int Num, int Denom) {
   \                     GUI_GIF_DrawSubScaled:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   24E09DE5           LDR      LR,[SP, #+36]
   \   00000010   28409DE5           LDR      R4,[SP, #+40]
    385            GUI_GIF_PARAM Param;
    386            Param.pFileData = (const U8 *)pGIF;
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
    387            Param.FileSize  = NumBytes;
   \   00000018   10108DE5           STR      R1,[SP, #+16]
    388            return GUI_GIF_DrawSubScaledEx(GUI_GIF__GetData, &Param, x0, y0, Index, Num, Denom);
   \   0000001C   08408DE5           STR      R4,[SP, #+8]
   \   00000020   04E08DE5           STR      LR,[SP, #+4]
   \   00000024   00C08DE5           STR      R12,[SP, #+0]
   \   00000028   0C108DE2           ADD      R1,SP,#+12
   \   0000002C   ........           LDR      R0,??DataTable2_5
   \   00000030   ........           BL       GUI_GIF_DrawSubScaledEx
   \   00000034   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
    389          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_GIF__aInterlaceOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     GUI_GIF__aInterlaceYPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     _ClearUnusedPixelsScaled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     _DrawFromDataBlockScaled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     GUI_GIF__GetData
    390          
    391          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_GIF_DrawSubScaled         32
     GUI_GIF_DrawSubScaledEx       64
     _ClearUnusedPixelsScaled      48
     _DrawFromDataBlockScaled      96
     _DrawInterlacedLineScaled     72
     _DrawLineScaled               48
     _DrawNonInterlacedScaled      80


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     _ClearUnusedPixelsScaled   664
     _DrawLineScaled            548
     _DrawNonInterlacedScaled   300
     _DrawInterlacedLineScaled  300
     _DrawFromDataBlockScaled   440
     GUI_GIF_DrawSubScaledEx    340
     GUI_GIF_DrawSubScaled       60
     ??DataTable2                 4
     ??DataTable2_1               4
     ??DataTable2_2               4
     ??DataTable2_3               4
     ??DataTable2_4               4
     ??DataTable2_5               4

 
 2 676 bytes in section .text
 
 2 676 bytes of CODE memory

Errors: none
Warnings: none
