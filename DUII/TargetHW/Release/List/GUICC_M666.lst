###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:35 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_M666.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_M666.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_M666.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_M666.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_M666.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_M666.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code,
     28          *
     29          *       LCD_FIXEDPALETTE == 666, 262144 colors, RRRRRRGGGGGGBBBBBB
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _Color2Index_M666
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static unsigned _Color2Index_M666(LCD_COLOR Color) {
     38            unsigned r, g, b;
     39            b = (Color >>  2) & 0x3f;
     40            g = (Color >> 10) & 0x3f;
     41            r = (Color >> 18) & 0x3f;
     42            return r + (g << 6) + (b << 12);
   \                     _Color2Index_M666:
   \   00000000   3F10A0E3           MOV      R1,#+63
   \   00000004   3F20A0E3           MOV      R2,#+63
   \   00000008   201901E0           AND      R1,R1,R0, LSR #+18
   \   0000000C   202502E0           AND      R2,R2,R0, LSR #+10
   \   00000010   021381E0           ADD      R1,R1,R2, LSL #+6
   \   00000014   3F20A0E3           MOV      R2,#+63
   \   00000018   200102E0           AND      R0,R2,R0, LSR #+2
   \   0000001C   000681E0           ADD      R0,R1,R0, LSL #+12
   \   00000020   1EFF2FE1           BX       LR               ;; return
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       _Index2Color_M666
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          static LCD_COLOR _Index2Color_M666(unsigned Index) {
     50            unsigned r, g, b;
     51            b = (Index & 0x00003f) <<  2;
     52            g = (Index & 0x000fc0) >>  4; 
     53            r = (Index & 0x03f000) >> 10; 
     54            return r + (g << 8) + (((U32)b) << 16);
   \                     _Index2Color_M666:
   \   00000000   FC10A0E3           MOV      R1,#+252
   \   00000004   FC20A0E3           MOV      R2,#+252
   \   00000008   201501E0           AND      R1,R1,R0, LSR #+10
   \   0000000C   202202E0           AND      R2,R2,R0, LSR #+4
   \   00000010   021481E0           ADD      R1,R1,R2, LSL #+8
   \   00000014   3F0000E2           AND      R0,R0,#0x3F
   \   00000018   000981E0           ADD      R0,R1,R0, LSL #+18
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     55          }
     56          
     57          /*********************************************************************
     58          *
     59          *       _GetIndexMask_M666
     60          */

   \                                 In section .text, align 4, keep-with-next
     61          static unsigned _GetIndexMask_M666(void) {
     62            return (unsigned)0x3ffff;
   \                     _GetIndexMask_M666:
   \   00000000   FC04E0E3           MVN      R0,#-67108864
   \   00000004   FF07C0E3           BIC      R0,R0,#0x3FC0000
   \   00000008   1EFF2FE1           BX       LR               ;; return
     63          }
     64          
     65          /*********************************************************************
     66          *
     67          *       Public data
     68          *
     69          **********************************************************************
     70          */
     71          /*********************************************************************
     72          *
     73          *       LCD_API_ColorConv_M666
     74          *
     75          * Purpose
     76          *   API table for this color conversion mode. Only used by memory
     77          *   devices in this mode.
     78          */

   \                                 In section .rodata, align 4, keep-with-next
     79          const LCD_API_COLOR_CONV LCD_API_ColorConv_M666 = {
   \                     LCD_API_ColorConv_M666:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_M666, _Index2Color_M666, _GetIndexMask_M666
   \              ............
     80            _Color2Index_M666,
     81            _Index2Color_M666,
     82            _GetIndexMask_M666
     83          };
     84          
     85          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     _Color2Index_M666       0
     _GetIndexMask_M666      0
     _Index2Color_M666       0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     _Color2Index_M666        36
     _Index2Color_M666        32
     _GetIndexMask_M666       12
     LCD_API_ColorConv_M666   12

 
 12 bytes in section .rodata
 80 bytes in section .text
 
 80 bytes of CODE  memory
 12 bytes of CONST memory

Errors: none
Warnings: none
