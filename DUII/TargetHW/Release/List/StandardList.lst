###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     02/Feb/2016  18:29:38 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\StandardList.c                              #
#    Command line =  C:\DUII\DUII\StandardList.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\StandardList.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\StandardList.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\StandardList.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <stdarg.h>
     25          #include "DUII.h"
     26          #include "GUI.h"
     27          #include "commondefs.h"
     28          #include "StandardList.h"
     29          
     30          
     31          /*********************************************************************
     32          *
     33          *       Public Variables
     34          *
     35          **********************************************************************
     36          */
     37          
     38          /*********************************************************************
     39          *
     40          *       External data and code
     41          *
     42          **********************************************************************
     43          */
     44          // Note that the button bitmaps must be encoded for the appropriate color
     45          // conversion selected in LCDConf.c
     46          extern GUI_CONST_STORAGE GUI_BITMAP bmYellowButton;
     47          extern GUI_CONST_STORAGE GUI_BITMAP bmOrangeButton;
     48          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenButton;
     49          extern GUI_CONST_STORAGE GUI_BITMAP bmRedButton;
     50          extern GUI_CONST_STORAGE GUI_BITMAP bmBlueButton;
     51          extern GUI_CONST_STORAGE GUI_BITMAP bmTransparentButton;
     52          extern GUI_CONST_STORAGE GUI_BITMAP bmBlackBlankButton;
     53          extern GUI_CONST_STORAGE GUI_BITMAP bmTopFakeButton;
     54          
     55          
     56          /*********************************************************************
     57          *
     58          *       Local Prototypes
     59          *
     60          **********************************************************************
     61          */
     62          
     63          
     64          /*********************************************************************
     65          *
     66          *       Tables and Constants
     67          *
     68          **********************************************************************
     69          */
     70          #define	POSITION_ONE	topPosition + (2 * (gap + BUTTON_HEIGHT))
     71          #define	POSITION_TWO	topPosition + (3 * (gap + BUTTON_HEIGHT))
     72          #define	POSITION_THREE	topPosition + (4 * (gap + BUTTON_HEIGHT))
     73          #define	POSITION_FOUR	topPosition + gap + BUTTON_HEIGHT
     74          #define	POSITION_FIVE	topPosition = 51
     75          
     76          /*********************************************************************
     77          *
     78          *       Local Variables
     79          *
     80          **********************************************************************
     81          */

   \                                 In section .bss, align 4
     82          BUTTON_Handle hBtn1, hBtn2, hBtn3, hBtn4, hBtn5;
   \                     hBtn1:
   \   00000000                      DS8 4
   \                     hBtn2:
   \   00000004                      DS8 4
   \                     hBtn3:
   \   00000008                      DS8 4
   \                     hBtn4:
   \   0000000C                      DS8 4
   \                     hBtn5:
   \   00000010                      DS8 4
     83          
     84          /*********************************************************************
     85          *
     86          *       Public code
     87          *
     88          **********************************************************************
     89          */

   \                                 In section .text, align 4, keep-with-next
     90          void DisplayStdListScreen(WM_HWIN hParent,...)
     91          {
   \                     DisplayStdListScreen:
   \   00000000   0E002DE9           PUSH     {R1-R3}
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   48D04DE2           SUB      SP,SP,#+72
   \   0000000C   0040A0E1           MOV      R4,R0
     92          	int top = 0;
     93          	int topPosition, gap;
     94          	const GUI_BITMAP *pGraphic;
     95          	BUTTON_Handle hBtn;
     96          
     97          	char **pList;
     98          	int listWheelID;
     99          	LISTWHEEL_Handle *pWheel;
    100          	int selection;
    101          	enum LIST_TYPE lType;
    102          	char *pText;
    103          	char *pButtonOneText;
    104          	int buttonOneID;
    105          	char *pButtonTwoText;
    106          	int buttonTwoID;
    107          	char *pButtonThreeText;
    108          	int buttonThreeID;
    109          	char *pButtonFourText;
    110          	int buttonFourID;
    111          	char *pButtonFiveText;
    112          	int buttonFiveID;
    113          	va_list ap;
    114          
    115          	va_start(ap, hParent);
   \   00000010   6C008DE2           ADD      R0,SP,#+108
    116          	pList = va_arg(ap, char **);
   \   00000014   042090E4           LDR      R2,[R0], #+4
    117          	listWheelID = va_arg(ap, int);
    118          	pWheel = va_arg(ap, long *);
    119          	selection = va_arg(ap, int);
    120          	lType = va_arg(ap, enum LIST_TYPE);
    121          	pText = va_arg(ap, char *);
    122          	pButtonOneText = va_arg(ap, char *);
    123          	buttonOneID = va_arg(ap, int);
    124          	pButtonTwoText = va_arg(ap, char *);
    125          	buttonTwoID = va_arg(ap, int);
    126          	pButtonThreeText = va_arg(ap, char *);
    127          	buttonThreeID = va_arg(ap, int);
    128          	pButtonFourText = va_arg(ap, char *);
    129          	buttonFourID = va_arg(ap, int);
    130          	pButtonFiveText = va_arg(ap, char *);
    131          	buttonFiveID = va_arg(ap, int);
    132          	va_end(ap);
    133          
    134          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000018   ........           LDR      R10,??DataTable2
   \   0000001C   40208DE5           STR      R2,[SP, #+64]
   \   00000020   042090E4           LDR      R2,[R0], #+4
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   14208DE5           STR      R2,[SP, #+20]
   \   0000002C   048090E4           LDR      R8,[R0], #+4
   \   00000030   049090E4           LDR      R9,[R0], #+4
   \   00000034   040080E2           ADD      R0,R0,#+4
   \   00000038   002090E5           LDR      R2,[R0, #+0]
   \   0000003C   047050E5           LDRB     R7,[R0, #-4]
   \   00000040   3C208DE5           STR      R2,[SP, #+60]
   \   00000044   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000048   38208DE5           STR      R2,[SP, #+56]
   \   0000004C   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000050   34208DE5           STR      R2,[SP, #+52]
   \   00000054   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000058   30208DE5           STR      R2,[SP, #+48]
   \   0000005C   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000060   2C208DE5           STR      R2,[SP, #+44]
   \   00000064   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000068   28208DE5           STR      R2,[SP, #+40]
   \   0000006C   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000070   24208DE5           STR      R2,[SP, #+36]
   \   00000074   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000078   20208DE5           STR      R2,[SP, #+32]
   \   0000007C   0420B0E5           LDR      R2,[R0, #+4]!
   \   00000080   1C208DE5           STR      R2,[SP, #+28]
   \   00000084   04B0B0E5           LDR      R11,[R0, #+4]!
   \   00000088   0420B0E5           LDR      R2,[R0, #+4]!
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   18208DE5           STR      R2,[SP, #+24]
   \   00000094   ........           BL       BUTTON_SetDefaultFont
    135          
    136          	if (listWheelID)
   \   00000098   14009DE5           LDR      R0,[SP, #+20]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   2000000A           BEQ      ??DisplayStdListScreen_2
    137          	{
    138          		*pWheel = LISTWHEEL_CreateEx(SPINNER_START + 16, 50, 205, 205, hParent, WM_CF_SHOW | WM_CF_HASTRANS, 0, listWheelID, pList);
   \   000000A4   40009DE5           LDR      R0,[SP, #+64]
   \   000000A8   08508DE5           STR      R5,[SP, #+8]
   \   000000AC   10008DE5           STR      R0,[SP, #+16]
   \   000000B0   14009DE5           LDR      R0,[SP, #+20]
   \   000000B4   00408DE5           STR      R4,[SP, #+0]
   \   000000B8   0C008DE5           STR      R0,[SP, #+12]
   \   000000BC   0300A0E3           MOV      R0,#+3
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
   \   000000C4   CD30A0E3           MOV      R3,#+205
   \   000000C8   CD20A0E3           MOV      R2,#+205
   \   000000CC   3210A0E3           MOV      R1,#+50
   \   000000D0   400FA0E3           MOV      R0,#+256
   \   000000D4   ........           BL       LISTWHEEL_CreateEx
   \   000000D8   000088E5           STR      R0,[R8, #+0]
    139          		// Show 5 entries
    140          		LISTWHEEL_SetLineHeight(*pWheel, 41);
   \   000000DC   2910A0E3           MOV      R1,#+41
   \   000000E0   ........           BL       LISTWHEEL_SetLineHeight
    141          		LISTWHEEL_SetSnapPosition(*pWheel, 87);
   \   000000E4   5710A0E3           MOV      R1,#+87
   \   000000E8   000098E5           LDR      R0,[R8, #+0]
   \   000000EC   ........           BL       LISTWHEEL_SetSnapPosition
    142          		LISTWHEEL_SetFont(*pWheel, &GUI_Font24_ASCII);
   \   000000F0   0A10A0E1           MOV      R1,R10
   \   000000F4   000098E5           LDR      R0,[R8, #+0]
   \   000000F8   ........           BL       LISTWHEEL_SetFont
    143          		LISTWHEEL_SetTextAlign(*pWheel, GUI_TA_LEFT);
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   000098E5           LDR      R0,[R8, #+0]
   \   00000104   ........           BL       LISTWHEEL_SetTextAlign
    144          
    145          		if (selection < 0)	// Safety check!
   \   00000108   000059E3           CMP      R9,#+0
    146          			selection = 0;
   \   0000010C   0090A043           MOVMI    R9,#+0
    147          
    148          		LISTWHEEL_SetPos(*pWheel, selection);
   \   00000110   0910A0E1           MOV      R1,R9
   \   00000114   000098E5           LDR      R0,[R8, #+0]
   \   00000118   ........           BL       LISTWHEEL_SetPos
    149          		LISTWHEEL_SetSel(*pWheel, selection);
   \   0000011C   0910A0E1           MOV      R1,R9
   \   00000120   000098E5           LDR      R0,[R8, #+0]
   \   00000124   ........           BL       LISTWHEEL_SetSel
    150          	}
    151          
    152          	topPosition = 38;
    153          	gap = 6;
    154          
    155          	switch (lType)
   \                     ??DisplayStdListScreen_2:
   \   00000128   010047E2           SUB      R0,R7,#+1
   \   0000012C   2680A0E3           MOV      R8,#+38
   \   00000130   0690A0E3           MOV      R9,#+6
   \   00000134   050050E3           CMP      R0,#+5
   \   00000138   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??DisplayStdListScreen_0:
   \   0000013C   9E00008A           BHI      ??DisplayStdListScreen_3
   \   00000140   7E0000EA           B        ??DisplayStdListScreen_4
   \   00000144   5D0000EA           B        ??DisplayStdListScreen_5
   \   00000148   3D0000EA           B        ??DisplayStdListScreen_6
   \   0000014C   210000EA           B        ??DisplayStdListScreen_7
   \   00000150   990000EA           B        ??DisplayStdListScreen_3
   \   00000154   FFFFFFEA           B        ??DisplayStdListScreen_8
    156          	{
    157          		case FIVE_BOTTON_NO_TEXT:
    158          			hBtn5 = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS, POSITION_FIVE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonFiveID);
   \                     ??DisplayStdListScreen_8:
   \   00000158   18009DE5           LDR      R0,[SP, #+24]
   \   0000015C   3380A0E3           MOV      R8,#+51
   \   00000160   0C008DE5           STR      R0,[SP, #+12]
   \   00000164   0200A0E3           MOV      R0,#+2
   \   00000168   04008DE5           STR      R0,[SP, #+4]
   \   0000016C   08508DE5           STR      R5,[SP, #+8]
   \   00000170   00408DE5           STR      R4,[SP, #+0]
   \   00000174   2730A0E3           MOV      R3,#+39
   \   00000178   CA20A0E3           MOV      R2,#+202
   \   0000017C   3310A0E3           MOV      R1,#+51
   \   00000180   1E00A0E3           MOV      R0,#+30
   \   00000184   ........           BL       BUTTON_CreateEx
   \   00000188   ........           LDR      R10,??DataTable2_1
    159          			BUTTON_SetBitmap(hBtn5, BUTTON_BI_UNPRESSED, &bmOrangeButton);
   \   0000018C   ........           LDR      R2,??DataTable2_2
   \   00000190   10008AE5           STR      R0,[R10, #+16]
   \   00000194   0010A0E3           MOV      R1,#+0
   \   00000198   ........           BL       BUTTON_SetBitmap
    160          			BUTTON_SetText(hBtn5, pButtonFiveText);
   \   0000019C   0B10A0E1           MOV      R1,R11
   \   000001A0   10009AE5           LDR      R0,[R10, #+16]
   \   000001A4   ........           BL       BUTTON_SetText
    161          			BUTTON_SetTextColor(hBtn5, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0010A0E3           MOV      R1,#+0
   \   000001B0   10009AE5           LDR      R0,[R10, #+16]
   \   000001B4   ........           BL       BUTTON_SetTextColor
    162          			BUTTON_SetTextColor(hBtn5, BUTTON_BI_PRESSED, GUI_BLACK);
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   10009AE5           LDR      R0,[R10, #+16]
   \   000001C4   ........           BL       BUTTON_SetTextColor
    163          			BUTTON_SetFocussable(hBtn5, 0);
   \   000001C8   0010A0E3           MOV      R1,#+0
   \   000001CC   10009AE5           LDR      R0,[R10, #+16]
   \   000001D0   ........           BL       BUTTON_SetFocussable
    164          			gap = 3;
   \   000001D4   0390A0E3           MOV      R9,#+3
    165          
    166          		case FOUR_BUTTON:
    167          			hBtn4 = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS, POSITION_FOUR, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonFourID);
   \                     ??DisplayStdListScreen_7:
   \   000001D8   1C009DE5           LDR      R0,[SP, #+28]
   \   000001DC   08508DE5           STR      R5,[SP, #+8]
   \   000001E0   0C008DE5           STR      R0,[SP, #+12]
   \   000001E4   0200A0E3           MOV      R0,#+2
   \   000001E8   04008DE5           STR      R0,[SP, #+4]
   \   000001EC   080089E0           ADD      R0,R9,R8
   \   000001F0   271080E2           ADD      R1,R0,#+39
   \   000001F4   00408DE5           STR      R4,[SP, #+0]
   \   000001F8   2730A0E3           MOV      R3,#+39
   \   000001FC   CA20A0E3           MOV      R2,#+202
   \   00000200   1E00A0E3           MOV      R0,#+30
   \   00000204   ........           BL       BUTTON_CreateEx
   \   00000208   ........           LDR      R10,??DataTable2_1
    168          			BUTTON_SetBitmap(hBtn4, BUTTON_BI_UNPRESSED, &bmBlueButton);
   \   0000020C   ........           LDR      R2,??DataTable2_3
   \   00000210   0C008AE5           STR      R0,[R10, #+12]
   \   00000214   0010A0E3           MOV      R1,#+0
   \   00000218   ........           BL       BUTTON_SetBitmap
    169          			BUTTON_SetText(hBtn4, pButtonFourText);
   \   0000021C   20109DE5           LDR      R1,[SP, #+32]
   \   00000220   0C009AE5           LDR      R0,[R10, #+12]
   \   00000224   ........           BL       BUTTON_SetText
    170          			BUTTON_SetTextColor(hBtn4, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000228   FF24E0E3           MVN      R2,#-16777216
   \   0000022C   0010A0E3           MOV      R1,#+0
   \   00000230   0C009AE5           LDR      R0,[R10, #+12]
   \   00000234   ........           BL       BUTTON_SetTextColor
    171          			BUTTON_SetFocussable(hBtn4, 0);
   \   00000238   0010A0E3           MOV      R1,#+0
   \   0000023C   0C009AE5           LDR      R0,[R10, #+12]
   \   00000240   ........           BL       BUTTON_SetFocussable
    172          
    173          		case THREE_BUTTON:
    174          			hBtn3 = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS, POSITION_THREE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonThreeID);
   \                     ??DisplayStdListScreen_6:
   \   00000244   24009DE5           LDR      R0,[SP, #+36]
   \   00000248   08508DE5           STR      R5,[SP, #+8]
   \   0000024C   0C008DE5           STR      R0,[SP, #+12]
   \   00000250   0200A0E3           MOV      R0,#+2
   \   00000254   04008DE5           STR      R0,[SP, #+4]
   \   00000258   270089E2           ADD      R0,R9,#+39
   \   0000025C   001188E0           ADD      R1,R8,R0, LSL #+2
   \   00000260   00408DE5           STR      R4,[SP, #+0]
   \   00000264   2730A0E3           MOV      R3,#+39
   \   00000268   CA20A0E3           MOV      R2,#+202
   \   0000026C   1E00A0E3           MOV      R0,#+30
   \   00000270   ........           BL       BUTTON_CreateEx
   \   00000274   ........           LDR      R10,??DataTable2_1
    175          			BUTTON_SetBitmap(hBtn3, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000278   ........           LDR      R2,??DataTable2_4
   \   0000027C   08008AE5           STR      R0,[R10, #+8]
   \   00000280   0010A0E3           MOV      R1,#+0
   \   00000284   ........           BL       BUTTON_SetBitmap
    176          			BUTTON_SetText(hBtn3, pButtonThreeText);
   \   00000288   28109DE5           LDR      R1,[SP, #+40]
   \   0000028C   08009AE5           LDR      R0,[R10, #+8]
   \   00000290   ........           BL       BUTTON_SetText
    177          			BUTTON_SetTextColor(hBtn3, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000294   0020A0E3           MOV      R2,#+0
   \   00000298   0010A0E3           MOV      R1,#+0
   \   0000029C   08009AE5           LDR      R0,[R10, #+8]
   \   000002A0   ........           BL       BUTTON_SetTextColor
    178          			BUTTON_SetTextColor(hBtn3, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000002A4   FF24E0E3           MVN      R2,#-16777216
   \   000002A8   0110A0E3           MOV      R1,#+1
   \   000002AC   08009AE5           LDR      R0,[R10, #+8]
   \   000002B0   ........           BL       BUTTON_SetTextColor
    179          			BUTTON_SetFocussable(hBtn3, 0);
   \   000002B4   0010A0E3           MOV      R1,#+0
   \   000002B8   08009AE5           LDR      R0,[R10, #+8]
   \   000002BC   ........           BL       BUTTON_SetFocussable
    180          
    181          		case TWO_BUTTON:
    182          			hBtn2 = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS, POSITION_TWO, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonTwoID);
   \                     ??DisplayStdListScreen_5:
   \   000002C0   2C009DE5           LDR      R0,[SP, #+44]
   \   000002C4   08508DE5           STR      R5,[SP, #+8]
   \   000002C8   0C008DE5           STR      R0,[SP, #+12]
   \   000002CC   0200A0E3           MOV      R0,#+2
   \   000002D0   04008DE5           STR      R0,[SP, #+4]
   \   000002D4   270089E2           ADD      R0,R9,#+39
   \   000002D8   800080E0           ADD      R0,R0,R0, LSL #+1
   \   000002DC   081080E0           ADD      R1,R0,R8
   \   000002E0   00408DE5           STR      R4,[SP, #+0]
   \   000002E4   2730A0E3           MOV      R3,#+39
   \   000002E8   CA20A0E3           MOV      R2,#+202
   \   000002EC   1E00A0E3           MOV      R0,#+30
   \   000002F0   ........           BL       BUTTON_CreateEx
   \   000002F4   ........           LDR      R10,??DataTable2_1
    183          			BUTTON_SetBitmap(hBtn2, BUTTON_BI_UNPRESSED, &bmYellowButton);
   \   000002F8   ........           LDR      R2,??DataTable2_5
   \   000002FC   04008AE5           STR      R0,[R10, #+4]
   \   00000300   0010A0E3           MOV      R1,#+0
   \   00000304   ........           BL       BUTTON_SetBitmap
    184          			BUTTON_SetText(hBtn2, pButtonTwoText);
   \   00000308   30109DE5           LDR      R1,[SP, #+48]
   \   0000030C   04009AE5           LDR      R0,[R10, #+4]
   \   00000310   ........           BL       BUTTON_SetText
    185          			BUTTON_SetTextColor(hBtn2, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   0010A0E3           MOV      R1,#+0
   \   0000031C   04009AE5           LDR      R0,[R10, #+4]
   \   00000320   ........           BL       BUTTON_SetTextColor
    186          			BUTTON_SetTextColor(hBtn2, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000324   FF24E0E3           MVN      R2,#-16777216
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   04009AE5           LDR      R0,[R10, #+4]
   \   00000330   ........           BL       BUTTON_SetTextColor
    187          			BUTTON_SetFocussable(hBtn2, 0);
   \   00000334   0010A0E3           MOV      R1,#+0
   \   00000338   04009AE5           LDR      R0,[R10, #+4]
   \   0000033C   ........           BL       BUTTON_SetFocussable
    188          
    189          		case ONE_BUTTON:
    190          			hBtn1 = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS, POSITION_ONE, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonOneID);
   \                     ??DisplayStdListScreen_4:
   \   00000340   34009DE5           LDR      R0,[SP, #+52]
   \   00000344   08508DE5           STR      R5,[SP, #+8]
   \   00000348   0C008DE5           STR      R0,[SP, #+12]
   \   0000034C   0200A0E3           MOV      R0,#+2
   \   00000350   04008DE5           STR      R0,[SP, #+4]
   \   00000354   270089E2           ADD      R0,R9,#+39
   \   00000358   801088E0           ADD      R1,R8,R0, LSL #+1
   \   0000035C   00408DE5           STR      R4,[SP, #+0]
   \   00000360   2730A0E3           MOV      R3,#+39
   \   00000364   CA20A0E3           MOV      R2,#+202
   \   00000368   1E00A0E3           MOV      R0,#+30
   \   0000036C   ........           BL       BUTTON_CreateEx
   \   00000370   ........           LDR      R10,??DataTable2_1
    191          			BUTTON_SetBitmap(hBtn1, BUTTON_BI_UNPRESSED, &bmGreenButton);
   \   00000374   ........           LDR      R2,??DataTable2_6
   \   00000378   00008AE5           STR      R0,[R10, #+0]
   \   0000037C   0010A0E3           MOV      R1,#+0
   \   00000380   ........           BL       BUTTON_SetBitmap
    192          			BUTTON_SetText(hBtn1, pButtonOneText);
   \   00000384   38109DE5           LDR      R1,[SP, #+56]
   \   00000388   00009AE5           LDR      R0,[R10, #+0]
   \   0000038C   ........           BL       BUTTON_SetText
    193          			BUTTON_SetTextColor(hBtn1, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0010A0E3           MOV      R1,#+0
   \   00000398   00009AE5           LDR      R0,[R10, #+0]
   \   0000039C   ........           BL       BUTTON_SetTextColor
    194          			BUTTON_SetTextColor(hBtn1, BUTTON_BI_PRESSED, GUI_WHITE);
   \   000003A0   FF24E0E3           MVN      R2,#-16777216
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   00009AE5           LDR      R0,[R10, #+0]
   \   000003AC   ........           BL       BUTTON_SetTextColor
    195          			BUTTON_SetFocussable(hBtn1, 0);
   \   000003B0   0010A0E3           MOV      R1,#+0
   \   000003B4   00009AE5           LDR      R0,[R10, #+0]
   \   000003B8   ........           BL       BUTTON_SetFocussable
    196          			break;
    197          	}
    198          
    199          	// Display static text
    200          	switch (lType)
   \                     ??DisplayStdListScreen_3:
   \   000003BC   060057E3           CMP      R7,#+6
   \   000003C0   07F18F90           ADDLS    PC,PC,R7, LSL #+2
   \                     ??DisplayStdListScreen_1:
   \   000003C4   0E00008A           BHI      ??DisplayStdListScreen_9
   \   000003C8   050000EA           B        ??DisplayStdListScreen_10
   \   000003CC   0A0000EA           B        ??DisplayStdListScreen_11
   \   000003D0   090000EA           B        ??DisplayStdListScreen_11
   \   000003D4   080000EA           B        ??DisplayStdListScreen_11
   \   000003D8   040000EA           B        ??DisplayStdListScreen_12
   \   000003DC   270000EA           B        ??DisplayStdListScreen_13
   \   000003E0   260000EA           B        ??DisplayStdListScreen_13
    201          	{
    202          	case TEXT_ONLY:
    203          		top = 129;
   \                     ??DisplayStdListScreen_10:
   \   000003E4   8150A0E3           MOV      R5,#+129
    204          		pGraphic = &bmTransparentButton;
   \   000003E8   ........           LDR      R6,??DataTable2_7
    205          		break;
   \   000003EC   040000EA           B        ??DisplayStdListScreen_9
    206          
    207          	case FOUR_BUTTON:
    208          		top = 45;
   \                     ??DisplayStdListScreen_12:
   \   000003F0   2D50A0E3           MOV      R5,#+45
    209          		pGraphic = &bmTopFakeButton;
   \   000003F4   ........           LDR      R6,??DataTable2_8
    210          		break;
   \   000003F8   010000EA           B        ??DisplayStdListScreen_9
    211          
    212          	case THREE_BUTTON:
    213          	case TWO_BUTTON:
    214          	case ONE_BUTTON:
    215          		top = 83;
   \                     ??DisplayStdListScreen_11:
   \   000003FC   5350A0E3           MOV      R5,#+83
    216          		pGraphic = &bmBlackBlankButton;
   \   00000400   ........           LDR      R6,??DataTable2_9
    217          		break;
    218          
    219          	case FIVE_BOTTON_NO_TEXT:
    220          	case FOUR_BUTTON_NO_TEXT:
    221          		return;
    222          	}
    223          
    224          	hBtn = BUTTON_CreateEx(SPINNER_SCREEN_BUTTON_POS,  top, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
   \                     ??DisplayStdListScreen_9:
   \   00000404   0000A0E3           MOV      R0,#+0
   \   00000408   0C008DE5           STR      R0,[SP, #+12]
   \   0000040C   08008DE5           STR      R0,[SP, #+8]
   \   00000410   0200A0E3           MOV      R0,#+2
   \   00000414   04008DE5           STR      R0,[SP, #+4]
   \   00000418   00408DE5           STR      R4,[SP, #+0]
   \   0000041C   2730A0E3           MOV      R3,#+39
   \   00000420   CA20A0E3           MOV      R2,#+202
   \   00000424   0510A0E1           MOV      R1,R5
   \   00000428   1E00A0E3           MOV      R0,#+30
   \   0000042C   ........           BL       BUTTON_CreateEx
   \   00000430   0040A0E1           MOV      R4,R0
    225          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, pGraphic);
   \   00000434   0620A0E1           MOV      R2,R6
   \   00000438   0010A0E3           MOV      R1,#+0
   \   0000043C   ........           BL       BUTTON_SetBitmap
    226          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000440   FF54E0E3           MVN      R5,#-16777216
   \   00000444   0520A0E1           MOV      R2,R5
   \   00000448   0010A0E3           MOV      R1,#+0
   \   0000044C   0400A0E1           MOV      R0,R4
   \   00000450   ........           BL       BUTTON_SetTextColor
    227          	BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000454   0520A0E1           MOV      R2,R5
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   0400A0E1           MOV      R0,R4
   \   00000460   ........           BL       BUTTON_SetTextColor
    228          	BUTTON_SetTextColor(hBtn, BUTTON_BI_DISABLED, GUI_WHITE);
   \   00000464   0520A0E1           MOV      R2,R5
   \   00000468   0210A0E3           MOV      R1,#+2
   \   0000046C   0400A0E1           MOV      R0,R4
   \   00000470   ........           BL       BUTTON_SetTextColor
    229          	BUTTON_SetText(hBtn, pText);
   \   00000474   3C109DE5           LDR      R1,[SP, #+60]
   \   00000478   0400A0E1           MOV      R0,R4
   \   0000047C   ........           BL       BUTTON_SetText
    230          }
   \                     ??DisplayStdListScreen_13:
   \   00000480   48D08DE2           ADD      SP,SP,#+72
   \   00000484   F00FBDE8           POP      {R4-R11}
   \   00000488   10F09DE4           LDR      PC,[SP], #+16    ;; return
    231          
    232          

   \                                 In section .text, align 4, keep-with-next
    233          void DisplayTripleListScreen(WM_HWIN hParent,
    234          			char *pList1[], int listWheelID1, LISTWHEEL_Handle *pWheel1, int selection1,
    235          			char *pList2[], int listWheelID2, LISTWHEEL_Handle *pWheel2, int selection2,
    236          			char *pList3[], int listWheelID3, LISTWHEEL_Handle *pWheel3, int selection3,
    237          			char *pText,
    238          			//char *pOptionText1, char *pOptionText2,
    239          			char *pButtonText, int buttonID)
    240          {
   \                     DisplayTripleListScreen:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
    241          	BUTTON_Handle hBtn;
    242          
    243          	BUTTON_SetDefaultFont(&GUI_Font24_ASCII);
   \   00000004   ........           LDR      R7,??DataTable2
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   03A0A0E1           MOV      R10,R3
   \   00000014   40B09DE5           LDR      R11,[SP, #+64]
   \   00000018   4C809DE5           LDR      R8,[SP, #+76]
   \   0000001C   50909DE5           LDR      R9,[SP, #+80]
   \   00000020   5C509DE5           LDR      R5,[SP, #+92]
   \   00000024   60609DE5           LDR      R6,[SP, #+96]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           BL       BUTTON_SetDefaultFont
    244          
    245          	// Display first (left) wheel
    246          	*pWheel1 = LISTWHEEL_CreateEx(TRIPLE_SPINNER_START_1, 50, 69, 208, hParent, WM_CF_SHOW | WM_CF_HASTRANS, 0, listWheelID1, pList1);
   \   00000030   14009DE5           LDR      R0,[SP, #+20]
   \   00000034   00408DE5           STR      R4,[SP, #+0]
   \   00000038   10008DE5           STR      R0,[SP, #+16]
   \   0000003C   18009DE5           LDR      R0,[SP, #+24]
   \   00000040   D030A0E3           MOV      R3,#+208
   \   00000044   0C008DE5           STR      R0,[SP, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   08008DE5           STR      R0,[SP, #+8]
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   04008DE5           STR      R0,[SP, #+4]
   \   00000058   4520A0E3           MOV      R2,#+69
   \   0000005C   3210A0E3           MOV      R1,#+50
   \   00000060   E100A0E3           MOV      R0,#+225
   \   00000064   ........           BL       LISTWHEEL_CreateEx
   \   00000068   00008AE5           STR      R0,[R10, #+0]
    247          	LISTWHEEL_SetLineHeight(*pWheel1, 41);
   \   0000006C   2910A0E3           MOV      R1,#+41
   \   00000070   ........           BL       LISTWHEEL_SetLineHeight
    248          	LISTWHEEL_SetSnapPosition(*pWheel1, 87);
   \   00000074   5710A0E3           MOV      R1,#+87
   \   00000078   00009AE5           LDR      R0,[R10, #+0]
   \   0000007C   ........           BL       LISTWHEEL_SetSnapPosition
    249          	LISTWHEEL_SetFont(*pWheel1, &GUI_Font24_ASCII);
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   00009AE5           LDR      R0,[R10, #+0]
   \   00000088   ........           BL       LISTWHEEL_SetFont
    250          	LISTWHEEL_SetTextAlign(*pWheel1, GUI_TA_CENTER);
   \   0000008C   0210A0E3           MOV      R1,#+2
   \   00000090   00009AE5           LDR      R0,[R10, #+0]
   \   00000094   ........           BL       LISTWHEEL_SetTextAlign
    251          	if (selection1 < 0)	// Safety check!
   \   00000098   00005BE3           CMP      R11,#+0
    252          		selection1 = 0;
   \   0000009C   00B0A043           MOVMI    R11,#+0
    253          	LISTWHEEL_SetPos(*pWheel1, selection1);
   \   000000A0   0B10A0E1           MOV      R1,R11
   \   000000A4   00009AE5           LDR      R0,[R10, #+0]
   \   000000A8   ........           BL       LISTWHEEL_SetPos
    254          	LISTWHEEL_SetSel(*pWheel1, selection1);
   \   000000AC   0B10A0E1           MOV      R1,R11
   \   000000B0   00009AE5           LDR      R0,[R10, #+0]
   \   000000B4   ........           BL       LISTWHEEL_SetSel
    255          
    256          	// Display second (middle) wheel
    257          	*pWheel2 = LISTWHEEL_CreateEx(TRIPLE_SPINNER_START_2, 50, 69, 208, hParent, WM_CF_SHOW | WM_CF_HASTRANS, 0, listWheelID2, pList2);
   \   000000B8   44009DE5           LDR      R0,[SP, #+68]
   \   000000BC   00408DE5           STR      R4,[SP, #+0]
   \   000000C0   10008DE5           STR      R0,[SP, #+16]
   \   000000C4   48009DE5           LDR      R0,[SP, #+72]
   \   000000C8   D030A0E3           MOV      R3,#+208
   \   000000CC   0C008DE5           STR      R0,[SP, #+12]
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   08008DE5           STR      R0,[SP, #+8]
   \   000000D8   0300A0E3           MOV      R0,#+3
   \   000000DC   04008DE5           STR      R0,[SP, #+4]
   \   000000E0   4520A0E3           MOV      R2,#+69
   \   000000E4   3210A0E3           MOV      R1,#+50
   \   000000E8   4C0FA0E3           MOV      R0,#+304
   \   000000EC   ........           BL       LISTWHEEL_CreateEx
   \   000000F0   000088E5           STR      R0,[R8, #+0]
    258          	LISTWHEEL_SetLineHeight(*pWheel2, 41);
   \   000000F4   2910A0E3           MOV      R1,#+41
   \   000000F8   ........           BL       LISTWHEEL_SetLineHeight
    259          	LISTWHEEL_SetSnapPosition(*pWheel2, 87);
   \   000000FC   5710A0E3           MOV      R1,#+87
   \   00000100   000098E5           LDR      R0,[R8, #+0]
   \   00000104   ........           BL       LISTWHEEL_SetSnapPosition
    260          	LISTWHEEL_SetFont(*pWheel2, &GUI_Font24_ASCII);
   \   00000108   0710A0E1           MOV      R1,R7
   \   0000010C   000098E5           LDR      R0,[R8, #+0]
   \   00000110   ........           BL       LISTWHEEL_SetFont
    261          	LISTWHEEL_SetTextAlign(*pWheel2, GUI_TA_CENTER);
   \   00000114   0210A0E3           MOV      R1,#+2
   \   00000118   000098E5           LDR      R0,[R8, #+0]
   \   0000011C   ........           BL       LISTWHEEL_SetTextAlign
    262          	if (selection2 < 0)	// Safety check!
   \   00000120   000059E3           CMP      R9,#+0
    263          		selection2 = 0;
   \   00000124   0090A043           MOVMI    R9,#+0
    264          	LISTWHEEL_SetPos(*pWheel2, selection2);
   \   00000128   0910A0E1           MOV      R1,R9
   \   0000012C   000098E5           LDR      R0,[R8, #+0]
   \   00000130   ........           BL       LISTWHEEL_SetPos
    265          	LISTWHEEL_SetSel(*pWheel2, selection2);
   \   00000134   0910A0E1           MOV      R1,R9
   \   00000138   000098E5           LDR      R0,[R8, #+0]
   \   0000013C   ........           BL       LISTWHEEL_SetSel
    266          
    267          	// Display third (right) wheel
    268          	*pWheel3 = LISTWHEEL_CreateEx(TRIPLE_SPINNER_START_3, 50, 69, 208, hParent, WM_CF_SHOW | WM_CF_HASTRANS, 0, listWheelID3, pList3);
   \   00000140   54009DE5           LDR      R0,[SP, #+84]
   \   00000144   00408DE5           STR      R4,[SP, #+0]
   \   00000148   10008DE5           STR      R0,[SP, #+16]
   \   0000014C   58009DE5           LDR      R0,[SP, #+88]
   \   00000150   D030A0E3           MOV      R3,#+208
   \   00000154   0C008DE5           STR      R0,[SP, #+12]
   \   00000158   0000A0E3           MOV      R0,#+0
   \   0000015C   08008DE5           STR      R0,[SP, #+8]
   \   00000160   0300A0E3           MOV      R0,#+3
   \   00000164   04008DE5           STR      R0,[SP, #+4]
   \   00000168   4520A0E3           MOV      R2,#+69
   \   0000016C   3210A0E3           MOV      R1,#+50
   \   00000170   5F0F80E3           ORR      R0,R0,#0x17C
   \   00000174   ........           BL       LISTWHEEL_CreateEx
   \   00000178   000085E5           STR      R0,[R5, #+0]
    269          	LISTWHEEL_SetLineHeight(*pWheel3, 41);
   \   0000017C   2910A0E3           MOV      R1,#+41
   \   00000180   ........           BL       LISTWHEEL_SetLineHeight
    270          	LISTWHEEL_SetSnapPosition(*pWheel3, 87);
   \   00000184   5710A0E3           MOV      R1,#+87
   \   00000188   000095E5           LDR      R0,[R5, #+0]
   \   0000018C   ........           BL       LISTWHEEL_SetSnapPosition
    271          	LISTWHEEL_SetFont(*pWheel3, &GUI_Font24_ASCII);
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   000095E5           LDR      R0,[R5, #+0]
   \   00000198   ........           BL       LISTWHEEL_SetFont
    272          	LISTWHEEL_SetTextAlign(*pWheel3, GUI_TA_CENTER);
   \   0000019C   0210A0E3           MOV      R1,#+2
   \   000001A0   000095E5           LDR      R0,[R5, #+0]
   \   000001A4   ........           BL       LISTWHEEL_SetTextAlign
    273          	if (selection3 < 0)	// Safety check!
   \   000001A8   000056E3           CMP      R6,#+0
    274          		selection3 = 0;
   \   000001AC   0060A043           MOVMI    R6,#+0
    275          	LISTWHEEL_SetPos(*pWheel3, selection3);
   \   000001B0   0610A0E1           MOV      R1,R6
   \   000001B4   000095E5           LDR      R0,[R5, #+0]
   \   000001B8   ........           BL       LISTWHEEL_SetPos
    276          	LISTWHEEL_SetSel(*pWheel3, selection3);
   \   000001BC   0610A0E1           MOV      R1,R6
   \   000001C0   000095E5           LDR      R0,[R5, #+0]
   \   000001C4   ........           BL       LISTWHEEL_SetSel
    277          
    278          	// Display first (standard) line of text
    279          	hBtn = BUTTON_CreateEx(TRIPLE_SPINNER_TEXT_START,  129, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
   \   000001C8   0000A0E3           MOV      R0,#+0
   \   000001CC   0C008DE5           STR      R0,[SP, #+12]
   \   000001D0   08008DE5           STR      R0,[SP, #+8]
   \   000001D4   0200A0E3           MOV      R0,#+2
   \   000001D8   04008DE5           STR      R0,[SP, #+4]
   \   000001DC   00408DE5           STR      R4,[SP, #+0]
   \   000001E0   2730A0E3           MOV      R3,#+39
   \   000001E4   CA20A0E3           MOV      R2,#+202
   \   000001E8   8110A0E3           MOV      R1,#+129
   \   000001EC   1600A0E3           MOV      R0,#+22
   \   000001F0   ........           BL       BUTTON_CreateEx
   \   000001F4   0060A0E1           MOV      R6,R0
    280          	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmTransparentButton);
   \   000001F8   ........           LDR      R2,??DataTable2_7
   \   000001FC   0010A0E3           MOV      R1,#+0
   \   00000200   ........           BL       BUTTON_SetBitmap
    281          	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   00000204   FF54E0E3           MVN      R5,#-16777216
   \   00000208   0520A0E1           MOV      R2,R5
   \   0000020C   0010A0E3           MOV      R1,#+0
   \   00000210   0600A0E1           MOV      R0,R6
   \   00000214   ........           BL       BUTTON_SetTextColor
    282          	BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
   \   00000218   0520A0E1           MOV      R2,R5
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   0600A0E1           MOV      R0,R6
   \   00000224   ........           BL       BUTTON_SetTextColor
    283          	BUTTON_SetText(hBtn, pText);
   \   00000228   64109DE5           LDR      R1,[SP, #+100]
   \   0000022C   0600A0E1           MOV      R0,R6
   \   00000230   ........           BL       BUTTON_SetText
    284          
    285          	//if (pOptionText1)
    286          	//{
    287          	//	// Display second (optional) line of text
    288          	//	hBtn = BUTTON_CreateEx(BUTTON_LEFT,  160, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
    289          	//	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmBlackBlankButton);
    290          	//	BUTTON_SetFont(hBtn, &GUI_Font20_ASCII);
    291          	//	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_GREEN);
    292          	//	BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_GREEN);
    293          	//	BUTTON_SetText(hBtn, pOptionText1);
    294          	//}
    295          
    296          	//if (pOptionText2)
    297          	//{
    298          	//	// Display third (standard) line of text
    299          	//	hBtn = BUTTON_CreateEx(BUTTON_LEFT,  185, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, 0);
    300          	//	BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmBlackBlankButton);
    301          	//	BUTTON_SetFont(hBtn, &GUI_Font16_ASCII);
    302          	//	BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
    303          	//	BUTTON_SetTextColor(hBtn, BUTTON_BI_PRESSED, GUI_WHITE);
    304          	//	BUTTON_SetText(hBtn, pOptionText2);
    305          	//}
    306          
    307          	// Display optional bottom button
    308          	if (pButtonText)
   \   00000234   68009DE5           LDR      R0,[SP, #+104]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   1900000A           BEQ      ??DisplayTripleListScreen_0
    309          	{
    310          		hBtn = BUTTON_CreateEx(TRIPLE_SPINNER_TEXT_START, 218, BUTTON_WIDTH, BUTTON_HEIGHT, hParent, WM_CF_SHOW, 0, buttonID);
   \   00000240   6C009DE5           LDR      R0,[SP, #+108]
   \   00000244   00408DE5           STR      R4,[SP, #+0]
   \   00000248   0C008DE5           STR      R0,[SP, #+12]
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   08008DE5           STR      R0,[SP, #+8]
   \   00000254   0200A0E3           MOV      R0,#+2
   \   00000258   04008DE5           STR      R0,[SP, #+4]
   \   0000025C   2730A0E3           MOV      R3,#+39
   \   00000260   CA20A0E3           MOV      R2,#+202
   \   00000264   DA10A0E3           MOV      R1,#+218
   \   00000268   1600A0E3           MOV      R0,#+22
   \   0000026C   ........           BL       BUTTON_CreateEx
   \   00000270   0060A0E1           MOV      R6,R0
    311          		BUTTON_SetBitmap(hBtn, BUTTON_BI_UNPRESSED, &bmRedButton);
   \   00000274   ........           LDR      R2,??DataTable2_4
   \   00000278   0010A0E3           MOV      R1,#+0
   \   0000027C   ........           BL       BUTTON_SetBitmap
    312          		BUTTON_SetText(hBtn, pButtonText);
   \   00000280   68109DE5           LDR      R1,[SP, #+104]
   \   00000284   0600A0E1           MOV      R0,R6
   \   00000288   ........           BL       BUTTON_SetText
    313          		BUTTON_SetTextColor(hBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   0000028C   0520A0E1           MOV      R2,R5
   \   00000290   0010A0E3           MOV      R1,#+0
   \   00000294   0600A0E1           MOV      R0,R6
   \   00000298   ........           BL       BUTTON_SetTextColor
    314          		BUTTON_SetFocussable(hBtn, 0);
   \   0000029C   0010A0E3           MOV      R1,#+0
   \   000002A0   0600A0E1           MOV      R0,R6
   \   000002A4   ........           BL       BUTTON_SetFocussable
    315          	}
    316          }
   \                     ??DisplayTripleListScreen_0:
   \   000002A8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000002AC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    317          

   \                                 In section .text, align 4, keep-with-next
    318          GUI_HWIN GetButtonID(int button)
    319          {
    320          	switch (button)
   \                     GetButtonID:
   \   00000000   020040E2           SUB      R0,R0,#+2
   \   00000004   040050E3           CMP      R0,#+4
   \   00000008   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GetButtonID_0:
   \   0000000C   0400008A           BHI      ??GetButtonID_1
   \   00000010   060000EA           B        ??GetButtonID_2
   \   00000014   080000EA           B        ??GetButtonID_3
   \   00000018   0A0000EA           B        ??GetButtonID_4
   \   0000001C   0C0000EA           B        ??GetButtonID_5
   \   00000020   0B0000EA           B        ??GetButtonID_5
    321          	{
    322          	default:
    323          	case ONE_BUTTON:			return hBtn1;
   \                     ??GetButtonID_1:
   \   00000024   ........           LDR      R0,??DataTable2_1
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   1EFF2FE1           BX       LR
    324          	case TWO_BUTTON:			return hBtn2;
   \                     ??GetButtonID_2:
   \   00000030   ........           LDR      R0,??DataTable2_1
   \   00000034   040090E5           LDR      R0,[R0, #+4]
   \   00000038   1EFF2FE1           BX       LR
    325          	case THREE_BUTTON:			return hBtn3;
   \                     ??GetButtonID_3:
   \   0000003C   ........           LDR      R0,??DataTable2_1
   \   00000040   080090E5           LDR      R0,[R0, #+8]
   \   00000044   1EFF2FE1           BX       LR
    326          	case FOUR_BUTTON:			return hBtn4;
   \                     ??GetButtonID_4:
   \   00000048   ........           LDR      R0,??DataTable2_1
   \   0000004C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000050   1EFF2FE1           BX       LR
    327          	case FIVE_BOTTON_NO_TEXT:
    328          	case FOUR_BUTTON_NO_TEXT:	return hBtn5;
   \                     ??GetButtonID_5:
   \   00000054   ........           LDR      R0,??DataTable2_1
   \   00000058   100090E5           LDR      R0,[R0, #+16]
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    329          	}
    330          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Font24_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     hBtn1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     bmOrangeButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     bmBlueButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     bmRedButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     bmYellowButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   ........           DC32     bmGreenButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   ........           DC32     bmTransparentButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     bmTopFakeButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   ........           DC32     bmBlackBlankButton
    331          
    332          
    333          /*************************** End of file ****************************/
    334          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     DisplayStdListScreen       120
     DisplayTripleListScreen     64
     GetButtonID                  0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     hBtn1                     20
     hBtn2
     hBtn3
     hBtn4
     hBtn5
     DisplayStdListScreen    1164
     DisplayTripleListScreen  688
     GetButtonID               96
     ??DataTable2               4
     ??DataTable2_1             4
     ??DataTable2_2             4
     ??DataTable2_3             4
     ??DataTable2_4             4
     ??DataTable2_5             4
     ??DataTable2_6             4
     ??DataTable2_7             4
     ??DataTable2_8             4
     ??DataTable2_9             4

 
    20 bytes in section .bss
 1 988 bytes in section .text
 
 1 988 bytes of CODE memory
    20 bytes of DATA memory

Errors: none
Warnings: none
