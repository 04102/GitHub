###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:18 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_Screen2Win.c                     #
#    Command line =  C:\DUII\TargetHW\GUI\WM_Screen2Win.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_Screen2Win.lst          #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_Screen2Win.o             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_Screen2Win.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_Screen2hWin.c
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _Screen2hWin
     36          
     37            This routine is recursive.
     38            It checks if the given coordinates are in the window or a decendant.
     39            Returns:
     40            0:   If coordinates are neither in the given window nor a decendent
     41            !=0  Handle of the topmost visible decendent in which the given
     42                 coordinate falls.
     43          
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          static WM_HWIN _Screen2hWin(WM_HWIN hWin, WM_HWIN hStop, int x, int y) {
   \                     _Screen2hWin:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     46            WM_Obj * pWin;
     47            WM_HWIN hChild;
     48            WM_HWIN hHit;
     49            
     50            if (hWin == 0) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0100001A           BNE      ??_Screen2hWin_0
     51              return 0;
   \                     ??_Screen2hWin_1:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1D0000EA           B        ??_Screen2hWin_2
     52            }
     53            pWin = WM_HANDLE2PTR(hWin);
   \                     ??_Screen2hWin_0:
   \   00000028   ........           BL       GUI_ALLOC_h2p
     54            /* First check if the  coordinates are in the given window. If not, return 0 */
     55            if (WM__IsInWindow(pWin, x, y) == 0) {
   \   0000002C   2810D0E5           LDRB     R1,[R0, #+40]
   \   00000030   020011E3           TST      R1,#0x2
   \   00000034   F9FFFF0A           BEQ      ??_Screen2hWin_1
   \   00000038   F010D0E1           LDRSH    R1,[R0, #+0]
   \   0000003C   010056E1           CMP      R6,R1
   \   00000040   F410D0A1           LDRSHGE  R1,[R0, #+4]
   \   00000044   060051A1           CMPGE    R1,R6
   \   00000048   F210D0A1           LDRSHGE  R1,[R0, #+2]
   \   0000004C   010057A1           CMPGE    R7,R1
   \   00000050   F610D0A1           LDRSHGE  R1,[R0, #+6]
   \   00000054   070051A1           CMPGE    R1,R7
   \   00000058   F0FFFFBA           BLT      ??_Screen2hWin_1
     56              return 0;
     57            }
     58            /* If the coordinates are in a child, search deeper ... */
     59            for (hChild = pWin->hFirstChild; hChild && (hChild != hStop); ) {
   \   0000005C   1C8090E5           LDR      R8,[R0, #+28]
   \   00000060   0A0000EA           B        ??_Screen2hWin_3
     60              WM_Obj* pChild = WM_HANDLE2PTR(hChild);
   \                     ??_Screen2hWin_4:
   \   00000064   0800A0E1           MOV      R0,R8
   \   00000068   ........           BL       GUI_ALLOC_h2p
   \   0000006C   0090A0E1           MOV      R9,R0
     61              if ((hHit = _Screen2hWin(hChild, hStop, x, y)) != 0) {
   \   00000070   0730A0E1           MOV      R3,R7
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   ........           BL       _Screen2hWin
   \   00000084   000050E3           CMP      R0,#+0
     62                hWin = hHit;        /* Found a window */
   \   00000088   0040A011           MOVNE    R4,R0
     63              }
     64              hChild = pChild->hNext;
   \   0000008C   208099E5           LDR      R8,[R9, #+32]
     65            }
   \                     ??_Screen2hWin_3:
   \   00000090   000058E3           CMP      R8,#+0
   \   00000094   05005811           CMPNE    R8,R5
   \   00000098   F1FFFF1A           BNE      ??_Screen2hWin_4
     66            return hWin;            /* No Child affected ... The parent is the right one */
   \   0000009C   0400A0E1           MOV      R0,R4
   \                     ??_Screen2hWin_2:
   \   000000A0   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000A4   F083BDE8           POP      {R4-R9,PC}       ;; return
     67          }
     68          
     69          /*********************************************************************
     70          *
     71          *       _Screen2hWinStop
     72          */
     73          static WM_HWIN _Screen2hWinStop(WM_HWIN hStop, int x, int y) {
     74            WM_HWIN r;
     75            #if (GUI_NUM_LAYERS == 1)
     76              r = _Screen2hWin(WM__FirstWin, hStop, x, y);
     77            #else
     78              r = _Screen2hWin(WM_GetDesktopWindowEx(WM__TOUCHED_LAYER), hStop, x, y);
     79            #endif
     80            return r;
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       Public code
     86          *
     87          **********************************************************************
     88          */
     89          /*********************************************************************
     90          *
     91          *       WM__IsInWindow
     92          */

   \                                 In section .text, align 4, keep-with-next
     93          int WM__IsInWindow(WM_Obj * pWin, int x, int y) {
     94            if (   (pWin->Status & WM_SF_ISVIS)
     95                && (x >= pWin->Rect.x0)
     96                && (x <= pWin->Rect.x1)
     97                && (y >= pWin->Rect.y0)
     98                && (y <= pWin->Rect.y1))
   \                     WM__IsInWindow:
   \   00000000   2830D0E5           LDRB     R3,[R0, #+40]
   \   00000004   020013E3           TST      R3,#0x2
   \   00000008   0A00000A           BEQ      ??WM__IsInWindow_0
   \   0000000C   F030D0E1           LDRSH    R3,[R0, #+0]
   \   00000010   030051E1           CMP      R1,R3
   \   00000014   F430D0A1           LDRSHGE  R3,[R0, #+4]
   \   00000018   010053A1           CMPGE    R3,R1
   \   0000001C   F210D0A1           LDRSHGE  R1,[R0, #+2]
   \   00000020   010052A1           CMPGE    R2,R1
   \   00000024   F600D0A1           LDRSHGE  R0,[R0, #+6]
   \   00000028   020050A1           CMPGE    R0,R2
   \   0000002C   010000BA           BLT      ??WM__IsInWindow_0
     99            {
    100              return 1;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   1EFF2FE1           BX       LR
    101            }
    102            return 0;
   \                     ??WM__IsInWindow_0:
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    103          }
    104          
    105          /*********************************************************************
    106          *
    107          *       WM_Screen2hWin
    108          */

   \                                 In section .text, align 4, keep-with-next
    109          WM_HWIN WM_Screen2hWin(int x, int y) {
   \                     WM_Screen2hWin:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    110            WM_HWIN r;
    111            WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
    112            r = _Screen2hWinStop(0, x, y);
   \   00000010   ........           LDR      R0,??DataTable1
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   ........           BL       WM_GetDesktopWindowEx
   \   0000001C   0060B0E1           MOVS     R6,R0
   \   00000020   1E00000A           BEQ      ??WM_Screen2hWin_0
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   2810D0E5           LDRB     R1,[R0, #+40]
   \   0000002C   020011E3           TST      R1,#0x2
   \   00000030   1900000A           BEQ      ??WM_Screen2hWin_1
   \   00000034   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000038   010054E1           CMP      R4,R1
   \   0000003C   F410D0A1           LDRSHGE  R1,[R0, #+4]
   \   00000040   040051A1           CMPGE    R1,R4
   \   00000044   F210D0A1           LDRSHGE  R1,[R0, #+2]
   \   00000048   010055A1           CMPGE    R5,R1
   \   0000004C   F610D0A1           LDRSHGE  R1,[R0, #+6]
   \   00000050   050051A1           CMPGE    R1,R5
   \   00000054   100000BA           BLT      ??WM_Screen2hWin_1
   \   00000058   1C7090E5           LDR      R7,[R0, #+28]
   \   0000005C   000057E3           CMP      R7,#+0
   \   00000060   0E00000A           BEQ      ??WM_Screen2hWin_0
   \                     ??WM_Screen2hWin_2:
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           BL       GUI_ALLOC_h2p
   \   0000006C   0080A0E1           MOV      R8,R0
   \   00000070   0530A0E1           MOV      R3,R5
   \   00000074   0420A0E1           MOV      R2,R4
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   ........           BL       _Screen2hWin
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   207098E5           LDR      R7,[R8, #+32]
   \   0000008C   0060A011           MOVNE    R6,R0
   \   00000090   000057E3           CMP      R7,#+0
   \   00000094   F2FFFF1A           BNE      ??WM_Screen2hWin_2
   \   00000098   000000EA           B        ??WM_Screen2hWin_0
   \                     ??WM_Screen2hWin_1:
   \   0000009C   0060A0E3           MOV      R6,#+0
    113            WM_UNLOCK();
   \                     ??WM_Screen2hWin_0:
   \   000000A0   ........           BL       GUI_Unlock
    114            return r;
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   F081BDE8           POP      {R4-R8,PC}       ;; return
    115          }
    116          
    117          /*********************************************************************
    118          *
    119          *       WM_Screen2hWinEx
    120          */

   \                                 In section .text, align 4, keep-with-next
    121          WM_HWIN WM_Screen2hWinEx(WM_HWIN hStop, int x, int y) {
   \                     WM_Screen2hWinEx:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    122            WM_HWIN r;
    123            WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    124            r = _Screen2hWinStop(hStop, x, y);
   \   00000018   ........           LDR      R0,??DataTable1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   ........           BL       WM_GetDesktopWindowEx
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   1F00000A           BEQ      ??WM_Screen2hWinEx_0
   \   0000002C   ........           BL       GUI_ALLOC_h2p
   \   00000030   2810D0E5           LDRB     R1,[R0, #+40]
   \   00000034   020011E3           TST      R1,#0x2
   \   00000038   1A00000A           BEQ      ??WM_Screen2hWinEx_1
   \   0000003C   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000040   010055E1           CMP      R5,R1
   \   00000044   F410D0A1           LDRSHGE  R1,[R0, #+4]
   \   00000048   050051A1           CMPGE    R1,R5
   \   0000004C   F210D0A1           LDRSHGE  R1,[R0, #+2]
   \   00000050   010056A1           CMPGE    R6,R1
   \   00000054   F610D0A1           LDRSHGE  R1,[R0, #+6]
   \   00000058   060051A1           CMPGE    R1,R6
   \   0000005C   110000BA           BLT      ??WM_Screen2hWinEx_1
   \   00000060   1C8090E5           LDR      R8,[R0, #+28]
   \   00000064   0A0000EA           B        ??WM_Screen2hWinEx_2
   \                     ??WM_Screen2hWinEx_3:
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_ALLOC_h2p
   \   00000070   0090A0E1           MOV      R9,R0
   \   00000074   0630A0E1           MOV      R3,R6
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   0800A0E1           MOV      R0,R8
   \   00000084   ........           BL       _Screen2hWin
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0070A011           MOVNE    R7,R0
   \   00000090   208099E5           LDR      R8,[R9, #+32]
   \                     ??WM_Screen2hWinEx_2:
   \   00000094   000058E3           CMP      R8,#+0
   \   00000098   0300000A           BEQ      ??WM_Screen2hWinEx_0
   \   0000009C   040058E1           CMP      R8,R4
   \   000000A0   F0FFFF1A           BNE      ??WM_Screen2hWinEx_3
   \   000000A4   000000EA           B        ??WM_Screen2hWinEx_0
   \                     ??WM_Screen2hWinEx_1:
   \   000000A8   0070A0E3           MOV      R7,#+0
    125            WM_UNLOCK();
   \                     ??WM_Screen2hWinEx_0:
   \   000000AC   ........           BL       GUI_Unlock
    126            return r;
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   04D08DE2           ADD      SP,SP,#+4
   \   000000B8   F083BDE8           POP      {R4-R9,PC}       ;; return
    127          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     WM__TouchedLayer
    128          
    129          #else                                       /* Avoid empty object files */
    130            void WM_Screen2Win(void) {}
    131          #endif   /* GUI_WINSUPPORT */
    132          
    133          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     WM_Screen2hWin       24
     WM_Screen2hWinEx     32
     WM__IsInWindow        0
     _Screen2hWin         32


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     _Screen2hWin      168
     WM__IsInWindow     64
     WM_Screen2hWin    172
     WM_Screen2hWinEx  188
     ??DataTable1        4

 
 596 bytes in section .text
 
 596 bytes of CODE memory

Errors: none
Warnings: none
