###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:26 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\PROGBAR_SkinClassic.c               #
#    Command line =  C:\DUII\TargetHW\GUI\PROGBAR_SkinClassic.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\PROGBAR_SkinClassic.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\PROGBAR_SkinClassic.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\PROGBAR_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : PROGBAR_SkinClassic.c
     19          Purpose     : Implementation of PROGBAR widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "PROGBAR_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _DrawPart
     38          */
     39          static void _DrawPart(const PROGBAR_Obj * pObj, int Index,
     40          										  int xText, int yText, const char* pText) {
     41            LCD_SetBkColor(pObj->Props.aBarColor[Index]);
     42            LCD_SetColor(pObj->Props.aTextColor[Index]);
     43            GUI_Clear();
     44            if (pText) {
     45              GUI_GotoXY(xText, yText);
     46              GUI_DispString(pText);
     47            }
     48          }
     49          
     50          /*********************************************************************
     51          *
     52          *       _Paint
     53          */

   \                                 In section .text, align 4, keep-with-next
     54          static void _Paint(PROGBAR_Handle hObj) {
   \                     _Paint:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
     55            PROGBAR_Obj * pObj;
     56            GUI_RECT r, rInside, rClient, rText;
     57            const char* pText;
     58            int tm, Pos;
     59            
     60            pObj = PROGBAR_LOCK_H(hObj);
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   0040A0E1           MOV      R4,R0
     61            WM_GetClientRect(&rClient);
   \   00000010   18008DE2           ADD      R0,SP,#+24
   \   00000014   ........           BL       WM_GetClientRect
     62            GUI__ReduceRect(&rInside, &rClient, pObj->Widget.pEffect->EffectSize);
   \   00000018   2C0094E5           LDR      R0,[R4, #+44]
   \   0000001C   18108DE2           ADD      R1,SP,#+24
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   10008DE2           ADD      R0,SP,#+16
   \   00000028   ........           BL       GUI__ReduceRect
     63            Pos  = PROGBAR__Value2Pos(pObj, pObj->v);
   \   0000002C   341094E5           LDR      R1,[R4, #+52]
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       PROGBAR__Value2Pos
   \   00000038   0050A0E1           MOV      R5,R0
     64            if (pObj->Flags & PROGBAR_CF_VERTICAL) {
   \   0000003C   6800D4E5           LDRB     R0,[R4, #+104]
   \   00000040   010010E3           TST      R0,#0x1
   \   00000044   1A00000A           BEQ      ??_Paint_0
     65              //
     66              // Draw lower part
     67              //
     68              r    = rInside;
   \   00000048   10108DE2           ADD      R1,SP,#+16
   \   0000004C   002091E5           LDR      R2,[R1, #+0]
   \   00000050   043091E5           LDR      R3,[R1, #+4]
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   0C0080E8           STM      R0,{R2,R3}
     69              r.y0 = Pos;
   \   0000005C   B250CDE1           STRH     R5,[SP, #+2]
     70              WM_SetUserClipArea(&r);
   \   00000060   ........           BL       WM_SetUserClipRect
     71              _DrawPart(pObj, 0, 0, 0, 0);
   \   00000064   500094E5           LDR      R0,[R4, #+80]
   \   00000068   ........           BL       LCD_SetBkColor
   \   0000006C   580094E5           LDR      R0,[R4, #+88]
   \   00000070   ........           BL       LCD_SetColor
   \   00000074   ........           BL       GUI_Clear
     72              //
     73              // Draw upper part
     74              //
     75              r    = rInside;
   \   00000078   10108DE2           ADD      R1,SP,#+16
   \   0000007C   002091E5           LDR      R2,[R1, #+0]
   \   00000080   043091E5           LDR      R3,[R1, #+4]
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   0C0080E8           STM      R0,{R2,R3}
     76              r.y1 = Pos - 1;
   \   0000008C   010045E2           SUB      R0,R5,#+1
   \   00000090   B600CDE1           STRH     R0,[SP, #+6]
     77              WM_SetUserClipArea(&r);
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           BL       WM_SetUserClipRect
     78              _DrawPart(pObj, 1, 0, 0, 0);
   \   0000009C   540094E5           LDR      R0,[R4, #+84]
   \   000000A0   ........           BL       LCD_SetBkColor
   \   000000A4   5C0094E5           LDR      R0,[R4, #+92]
   \   000000A8   ........           BL       LCD_SetColor
   \   000000AC   ........           BL       GUI_Clear
   \   000000B0   3C0000EA           B        ??_Paint_1
     79            } else {
     80              pText = PROGBAR__GetTextLocked(pObj);
   \                     ??_Paint_0:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       PROGBAR__GetTextLocked
   \   000000BC   0060B0E1           MOVS     R6,R0
     81              if (pText) {
   \   000000C0   0500000A           BEQ      ??_Paint_2
     82                GUI_SetFont(pObj->Props.pFont);
   \   000000C4   4C0094E5           LDR      R0,[R4, #+76]
   \   000000C8   ........           BL       GUI_SetFont
     83                PROGBAR__GetTextRect(pObj, &rText, pText);
   \   000000CC   0620A0E1           MOV      R2,R6
   \   000000D0   08108DE2           ADD      R1,SP,#+8
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       PROGBAR__GetTextRect
     84              }
     85              tm = GUI_SetTextMode(GUI_TM_TRANS);
   \                     ??_Paint_2:
   \   000000DC   0200A0E3           MOV      R0,#+2
   \   000000E0   ........           BL       GUI_SetTextMode
   \   000000E4   0070A0E1           MOV      R7,R0
     86              //
     87              // Draw left bar
     88              //
     89              r    = rInside;
   \   000000E8   10308DE2           ADD      R3,SP,#+16
   \   000000EC   000093E5           LDR      R0,[R3, #+0]
   \   000000F0   041093E5           LDR      R1,[R3, #+4]
   \   000000F4   0D20A0E1           MOV      R2,SP
   \   000000F8   030082E8           STM      R2,{R0,R1}
     90              r.x1 = Pos - 1;
   \   000000FC   010045E2           SUB      R0,R5,#+1
   \   00000100   B400CDE1           STRH     R0,[SP, #+4]
     91              WM_SetUserClipArea(&r);
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           BL       WM_SetUserClipRect
     92              _DrawPart(pObj, 0, rText.x0, rText.y0, pText);
   \   0000010C   FA80DDE1           LDRSH    R8,[SP, #+10]
   \   00000110   F890DDE1           LDRSH    R9,[SP, #+8]
   \   00000114   500094E5           LDR      R0,[R4, #+80]
   \   00000118   ........           BL       LCD_SetBkColor
   \   0000011C   580094E5           LDR      R0,[R4, #+88]
   \   00000120   ........           BL       LCD_SetColor
   \   00000124   ........           BL       GUI_Clear
   \   00000128   000056E3           CMP      R6,#+0
   \   0000012C   0400000A           BEQ      ??_Paint_3
   \   00000130   0810A0E1           MOV      R1,R8
   \   00000134   0900A0E1           MOV      R0,R9
   \   00000138   ........           BL       GUI_GotoXY
   \   0000013C   0600A0E1           MOV      R0,R6
   \   00000140   ........           BL       GUI_DispString
     93              //
     94              // Draw right bar
     95              //
     96              r    = rInside;
   \                     ??_Paint_3:
   \   00000144   10308DE2           ADD      R3,SP,#+16
   \   00000148   000093E5           LDR      R0,[R3, #+0]
   \   0000014C   041093E5           LDR      R1,[R3, #+4]
   \   00000150   0D20A0E1           MOV      R2,SP
   \   00000154   030082E8           STM      R2,{R0,R1}
     97              r.x0 = Pos;
   \   00000158   B050CDE1           STRH     R5,[SP, #+0]
     98              WM_SetUserClipArea(&r);
   \   0000015C   0D00A0E1           MOV      R0,SP
   \   00000160   ........           BL       WM_SetUserClipRect
     99              _DrawPart(pObj, 1, rText.x0, rText.y0, pText);
   \   00000164   FA50DDE1           LDRSH    R5,[SP, #+10]
   \   00000168   F880DDE1           LDRSH    R8,[SP, #+8]
   \   0000016C   540094E5           LDR      R0,[R4, #+84]
   \   00000170   ........           BL       LCD_SetBkColor
   \   00000174   5C0094E5           LDR      R0,[R4, #+92]
   \   00000178   ........           BL       LCD_SetColor
   \   0000017C   ........           BL       GUI_Clear
   \   00000180   000056E3           CMP      R6,#+0
   \   00000184   0400000A           BEQ      ??_Paint_4
   \   00000188   0510A0E1           MOV      R1,R5
   \   0000018C   0800A0E1           MOV      R0,R8
   \   00000190   ........           BL       GUI_GotoXY
   \   00000194   0600A0E1           MOV      R0,R6
   \   00000198   ........           BL       GUI_DispString
    100              GUI_SetTextMode(tm);
   \                     ??_Paint_4:
   \   0000019C   0700A0E1           MOV      R0,R7
   \   000001A0   ........           BL       GUI_SetTextMode
    101              GUI_UNLOCK_H(pText);
   \   000001A4   ........           BL       GUI_ALLOC_UnlockH
    102            }
    103            WM_SetUserClipArea(NULL);
   \                     ??_Paint_1:
   \   000001A8   0000A0E3           MOV      R0,#+0
   \   000001AC   ........           BL       WM_SetUserClipRect
    104            WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &rClient);
   \   000001B0   18108DE2           ADD      R1,SP,#+24
   \   000001B4   0400A0E1           MOV      R0,R4
   \   000001B8   ........           BL       WIDGET__EFFECT_DrawDownRect
    105            GUI_UNLOCK_H(pObj);
   \   000001BC   ........           BL       GUI_ALLOC_UnlockH
    106          }
   \   000001C0   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000001C4   F083BDE8           POP      {R4-R9,PC}       ;; return
    107          
    108          /*********************************************************************
    109          *
    110          *       _Create
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          static void _Create(PROGBAR_Handle hObj) {
    113            // Nothing special to do...
    114            GUI_USE_PARA(hObj);
    115          }
   \                     _Create:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    116          
    117          /*********************************************************************
    118          *
    119          *        Private data
    120          *
    121          **********************************************************************
    122          */
    123          /*********************************************************************
    124          *
    125          *       PROGBAR__SkinClassic
    126          */

   \                                 In section .text, align 4, keep-with-next
    127          const WIDGET_SKIN PROGBAR__SkinClassic = {
   \                     PROGBAR__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0
    128            _Paint,
    129            _Create,
    130          };
    131          
    132          /*********************************************************************
    133          *
    134          *        Public code
    135          *
    136          **********************************************************************
    137          */
    138          /*********************************************************************
    139          *
    140          *       PROGBAR_SetSkinClassic
    141          */

   \                                 In section .text, align 4, keep-with-next
    142          void PROGBAR_SetSkinClassic(PROGBAR_Handle hObj) {
   \                     PROGBAR_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    143            PROGBAR_Obj * pObj;
    144          
    145            pObj = PROGBAR_LOCK_H(hObj);
    146            pObj->pWidgetSkin = &PROGBAR__SkinClassic;
   \   00000008   ........           BL       GUI_ALLOC_LockH
   \   0000000C   ........           ADR      R1,PROGBAR__SkinClassic
   \   00000010   641080E5           STR      R1,[R0, #+100]
    147            GUI_UNLOCK_H(pObj);
   \   00000014   ........           BL       GUI_ALLOC_UnlockH
    148            WM_InvalidateWindow(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        WM_InvalidateWindow  ;; tailcall
    149          }
    150          
    151          /*********************************************************************
    152          *
    153          *       PROGBAR_SetDefaultSkinClassic
    154          */

   \                                 In section .text, align 4, keep-with-next
    155          void PROGBAR_SetDefaultSkinClassic(void) {
    156            PROGBAR__pSkinDefault = &PROGBAR__SkinClassic;
   \                     PROGBAR_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable1
   \   00000004   ........           ADR      R1,PROGBAR__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    157          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     PROGBAR__pSkinDefault
    158          
    159          
    160          #else                            /* Avoid empty object files */
    161            void PROGBAR_SkinClassic_C(void);
    162            void PROGBAR_SkinClassic_C(void) {}
    163          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function                      .cstack
     --------                      -------
     PROGBAR_SetDefaultSkinClassic      0
     PROGBAR_SetSkinClassic             8
     _Create                            0
     _Paint                            64


   Section sizes:

     Function/Label                Bytes
     --------------                -----
     _Paint                         456
     _Create                          4
     PROGBAR__SkinClassic            12
     PROGBAR_SetSkinClassic          36
     PROGBAR_SetDefaultSkinClassic   16
     ??DataTable1                     4

 
 528 bytes in section .text
 
 528 bytes of CODE memory

Errors: none
Warnings: none
