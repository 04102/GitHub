###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_Lib.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_Lib.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIAA_Lib.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIAA_Lib.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_Lib.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIAALib.C
     19          Purpose     : Antialiasing library
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdio.h>
     24          #include <string.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Static data
     31          *
     32          **********************************************************************
     33          */
     34          

   \                                 In section .bss, align 4
     35          static U8 *  _pAABuffer;
     36          static U8 *  _pBuffer;
     37          static int  _x0, _x1, _y, _x0_InUse, _x1_InUse, _BufferSize;
     38          static GUI_RECT _ClipRect_HL;
     39          
     40          static       tLCD_HL_APIList   _DrawAPICopy;    /* Copy of device function ptr list */
   \                     _DrawAPICopy:
   \   00000000                      DS8 8
   \   00000008                      DS8 8
   \   00000010                      DS8 4
   \   00000014                      DS8 4
   \   00000018                      DS8 4
   \   0000001C                      DS8 4
   \   00000020                      DS8 4
   \   00000024                      DS8 4
   \   00000028                      DS8 4
   \   0000002C                      DS8 4
   \   00000030                      DS8 4
     41          static const tLCD_HL_APIList * _pLCD_HLPrev;    /* Copy of device function ptr list */
     42          
     43          /*********************************************************************
     44          *
     45          *       Static code
     46          *
     47          **********************************************************************
     48          */
     49          /*********************************************************************
     50          *
     51          *       _CleanLine
     52          */
     53          static void _CleanLine(void) {
     54            GUI_MEMSET(_pBuffer, 0, _x1 - _x0+1);
     55            _y = -16383;  /* Invalidate */  
     56            _x0_InUse =  16383;
     57            _x1_InUse = -16383;
     58          }
     59          
     60          /*********************************************************************
     61          *
     62          *       _FlushLine
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static void _FlushLine(void) {
   \                     _FlushLine:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     65            int Intens, i, j, iEnd, IMax;
     66            iEnd = _x1_InUse - _x0;
   \   00000004   ........           LDR      R4,??DataTable9
   \   00000008   180094E5           LDR      R0,[R4, #+24]
   \   0000000C   281094E5           LDR      R1,[R4, #+40]
     67            IMax = GUI_Context.AA_Factor * GUI_Context.AA_Factor;
   \   00000010   ........           LDR      R6,??DataTable9_1
   \   00000014   005041E0           SUB      R5,R1,R0
   \   00000018   9810D6E5           LDRB     R1,[R6, #+152]
   \   0000001C   04D04DE2           SUB      SP,SP,#+4
   \   00000020   810167E1           SMULBB   R7,R1,R1
   \   00000024   2C1094E5           LDR      R1,[R4, #+44]
   \   00000028   011041E2           SUB      R1,R1,#+1
   \   0000002C   050051E1           CMP      R1,R5
     68            /* Make sure not to exceed buffer */
     69            if (iEnd > (_BufferSize - 1)) {
     70              iEnd = _BufferSize - 1;
   \   00000030   0150A0B1           MOVLT    R5,R1
     71            }
     72            for (i =_x0_InUse - _x0; i <= iEnd; i++) {
   \   00000034   241094E5           LDR      R1,[R4, #+36]
   \   00000038   008041E0           SUB      R8,R1,R0
   \   0000003C   080055E1           CMP      R5,R8
   \   00000040   2B0000BA           BLT      ??_FlushLine_0
     73              Intens = *(_pBuffer + i);
   \                     ??_FlushLine_1:
   \   00000044   140094E5           LDR      R0,[R4, #+20]
   \   00000048   0010D8E7           LDRB     R1,[R8, +R0]
     74              if (Intens) {
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   2400000A           BEQ      ??_FlushLine_2
     75                /* Check we can use line draw */
     76                if (Intens == IMax) {
   \   00000054   070051E1           CMP      R1,R7
   \   00000058   1800001A           BNE      ??_FlushLine_3
     77                  for (j = i; j < iEnd; ) {
   \   0000005C   0890A0E1           MOV      R9,R8
   \   00000060   000089E0           ADD      R0,R9,R0
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   000000EA           B        ??_FlushLine_4
     78                    if (*(_pBuffer + j + 1) != IMax) {
     79                      break;
     80                    }
     81                    j++;
   \                     ??_FlushLine_5:
   \   0000006C   019089E2           ADD      R9,R9,#+1
   \                     ??_FlushLine_4:
   \   00000070   050059E1           CMP      R9,R5
   \   00000074   020000AA           BGE      ??_FlushLine_6
   \   00000078   0110D0E4           LDRB     R1,[R0], #+1
   \   0000007C   070051E1           CMP      R1,R7
   \   00000080   F9FFFF0A           BEQ      ??_FlushLine_5
     82                  }
     83                  /* Draw the full pixel(s) */
     84                  if (j != i) {
   \                     ??_FlushLine_6:
   \   00000084   182094E5           LDR      R2,[R4, #+24]
   \   00000088   201094E5           LDR      R1,[R4, #+32]
   \   0000008C   020088E0           ADD      R0,R8,R2
   \   00000090   080059E1           CMP      R9,R8
   \   00000094   0500000A           BEQ      ??_FlushLine_7
     85                    _pLCD_HLPrev->pfDrawHLine(_x0 + i, _y, _x0 + j);
   \   00000098   303094E5           LDR      R3,[R4, #+48]
   \   0000009C   022089E0           ADD      R2,R9,R2
   \   000000A0   003093E5           LDR      R3,[R3, #+0]
   \   000000A4   33FF2FE1           BLX      R3
     86                    i = j;
   \   000000A8   0980A0E1           MOV      R8,R9
   \   000000AC   0D0000EA           B        ??_FlushLine_2
     87                  } else {
     88                    LCD_HL_DrawPixel (_x0 + i, _y);
   \                     ??_FlushLine_7:
   \   000000B0   942096E5           LDR      R2,[R6, #+148]
   \   000000B4   042092E5           LDR      R2,[R2, #+4]
   \   000000B8   32FF2FE1           BLX      R2
   \   000000BC   090000EA           B        ??_FlushLine_2
     89                  }
     90                } else {
     91                  LCD_SetPixelAA(_x0 + i, _y, (15 * Intens + IMax / 2) / IMax);
   \                     ??_FlushLine_3:
   \   000000C0   010261E0           RSB      R0,R1,R1, LSL #+4
   \   000000C4   A71F87E0           ADD      R1,R7,R7, LSR #+31
   \   000000C8   C10080E0           ADD      R0,R0,R1, ASR #+1
   \   000000CC   0710A0E1           MOV      R1,R7
   \   000000D0   ........           BL       __aeabi_idiv
   \   000000D4   FF2000E2           AND      R2,R0,#0xFF
   \   000000D8   180094E5           LDR      R0,[R4, #+24]
   \   000000DC   201094E5           LDR      R1,[R4, #+32]
   \   000000E0   000088E0           ADD      R0,R8,R0
   \   000000E4   ........           BL       LCD_SetPixelAA
     92                }
     93              }    
     94            }
   \                     ??_FlushLine_2:
   \   000000E8   018088E2           ADD      R8,R8,#+1
   \   000000EC   080055E1           CMP      R5,R8
   \   000000F0   D3FFFFAA           BGE      ??_FlushLine_1
     95            _CleanLine();
   \                     ??_FlushLine_0:
   \   000000F4   1C0094E5           LDR      R0,[R4, #+28]
   \   000000F8   181094E5           LDR      R1,[R4, #+24]
   \   000000FC   010040E0           SUB      R0,R0,R1
   \   00000100   012080E2           ADD      R2,R0,#+1
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   140094E5           LDR      R0,[R4, #+20]
   \   0000010C   ........           BL       GUI__memset
   \   00000110   FE00E0E3           MVN      R0,#+254
   \   00000114   FC0DC0E3           BIC      R0,R0,#0x3F00
   \   00000118   001060E2           RSB      R1,R0,#+0
   \   0000011C   200084E5           STR      R0,[R4, #+32]
   \   00000120   241084E5           STR      R1,[R4, #+36]
   \   00000124   280084E5           STR      R0,[R4, #+40]
     96          }
   \   00000128   04D08DE2           ADD      SP,SP,#+4
   \   0000012C   F083BDE8           POP      {R4-R9,PC}       ;; return
     97          
     98          /*********************************************************************
     99          *
    100          *       _DrawHLine
    101          *
    102          * Purpose:
    103          *   This is the redirected DrawHLine routine which is called
    104          *   instead of the default output routine. Its job is to do
    105          *   antialiasing and then perform the drawing operations.
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          static void _DrawHLine  (int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F04D2DE9           PUSH     {R4-R8,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0180A0E1           MOV      R8,R1
    108            int x0Real, x1Real, x0_Off, x1_Off, iRem;
    109            U8 * pDest;
    110          /* Make sure there is something to do */
    111            if (x1<x0)
   \   00000010   040055E1           CMP      R5,R4
   \   00000014   550000BA           BLT      ??_DrawHLine_0
    112              return;
    113          /* Flush line if we are in an other pixel (real) line */
    114            if (y/GUI_Context.AA_Factor != _y) {
   \   00000018   ........           LDR      R7,??DataTable9_1
   \   0000001C   0800A0E1           MOV      R0,R8
   \   00000020   9810D7E5           LDRB     R1,[R7, #+152]
   \   00000024   ........           BL       __aeabi_idiv
   \   00000028   ........           LDR      R6,??DataTable9
   \   0000002C   201096E5           LDR      R1,[R6, #+32]
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   0400000A           BEQ      ??_DrawHLine_1
    115              _FlushLine();
   \   00000038   ........           BL       _FlushLine
    116              _y = y / GUI_Context.AA_Factor;
   \   0000003C   0800A0E1           MOV      R0,R8
   \   00000040   9810D7E5           LDRB     R1,[R7, #+152]
   \   00000044   ........           BL       __aeabi_idiv
   \   00000048   200086E5           STR      R0,[R6, #+32]
    117            }
    118            x0Real = x0 / GUI_Context.AA_Factor;
   \                     ??_DrawHLine_1:
   \   0000004C   9880D7E5           LDRB     R8,[R7, #+152]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   18A096E5           LDR      R10,[R6, #+24]
   \   00000058   0810A0E1           MOV      R1,R8
   \   0000005C   ........           BL       __aeabi_idiv
   \   00000060   00B0A0E1           MOV      R11,R0
    119            x1Real = x1 / GUI_Context.AA_Factor;
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   0810A0E1           MOV      R1,R8
   \   0000006C   ........           BL       __aeabi_idiv
    120          /* Handle used area (speed optimization for drawing) */
    121            if (x0Real < _x0_InUse) {
   \   00000070   241096E5           LDR      R1,[R6, #+36]
   \   00000074   01005BE1           CMP      R11,R1
   \   00000078   0B10A0D1           MOVLE    R1,R11
   \   0000007C   241086E5           STR      R1,[R6, #+36]
    122              _x0_InUse = x0Real;
    123            }
    124            if (x1Real > _x1_InUse) {
   \   00000080   281096E5           LDR      R1,[R6, #+40]
   \   00000084   000051E1           CMP      R1,R0
   \   00000088   0010A0B1           MOVLT    R1,R0
   \   0000008C   281086E5           STR      R1,[R6, #+40]
    125              _x1_InUse = x1Real;
    126            }
    127          /* Clip (should not be necessary ... Just to be on the safe side ! */
    128            if (x0Real < _x0) {
   \   00000090   0A005BE1           CMP      R11,R10
    129              x0 = _x0 * GUI_Context.AA_Factor;
   \   00000094   980A04B0           MULLT    R4,R8,R10
    130            }
    131            if (x1Real > _x1) {
   \   00000098   1C1096E5           LDR      R1,[R6, #+28]
   \   0000009C   000051E1           CMP      R1,R0
    132              x1 = (_x1 + 1) * GUI_Context.AA_Factor - 1;
   \   000000A0   010081B2           ADDLT    R0,R1,#+1
   \   000000A4   0010E0B3           MVNLT    R1,#+0
   \   000000A8   981025B0           MLALT    R5,R8,R0,R1
    133            }
    134          /* Make sure there is still something to do (after clipping) */
    135            if (x1 < x0) {
   \   000000AC   040055E1           CMP      R5,R4
   \   000000B0   2E0000BA           BLT      ??_DrawHLine_0
    136              return;
    137            }
    138          /* Inc. hit counters in buffer */
    139            {
    140              x0_Off = x0 / GUI_Context.AA_Factor - _x0;
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   0810A0E1           MOV      R1,R8
   \   000000BC   ........           BL       __aeabi_idiv
   \   000000C0   0AB040E0           SUB      R11,R0,R10
    141              x1_Off = x1 / GUI_Context.AA_Factor - _x0;
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   0810A0E1           MOV      R1,R8
   \   000000CC   ........           BL       __aeabi_idiv
   \   000000D0   0A0040E0           SUB      R0,R0,R10
    142              iRem = x1_Off - x0_Off + 1;
   \   000000D4   0B1040E0           SUB      R1,R0,R11
   \   000000D8   012081E2           ADD      R2,R1,#+1
    143              pDest = _pBuffer + x0_Off;
   \   000000DC   141096E5           LDR      R1,[R6, #+20]
    144              if (iRem == 1) {
   \   000000E0   010052E3           CMP      R2,#+1
   \   000000E4   01108BE0           ADD      R1,R11,R1
   \   000000E8   0400001A           BNE      ??_DrawHLine_2
    145                *(pDest) += x1 - x0 + 1;
   \   000000EC   0000D1E5           LDRB     R0,[R1, #+0]
   \   000000F0   000085E0           ADD      R0,R5,R0
   \   000000F4   040040E0           SUB      R0,R0,R4
   \   000000F8   010080E2           ADD      R0,R0,#+1
   \   000000FC   1A0000EA           B        ??_DrawHLine_3
    146              } else {
    147                /* First Pixel */
    148                *pDest++ += ((x0_Off + _x0 + 1) * GUI_Context.AA_Factor - x0);
   \                     ??_DrawHLine_2:
   \   00000100   0130A0E1           MOV      R3,R1
   \   00000104   00C0D3E5           LDRB     R12,[R3, #+0]
   \   00000108   0BE08AE0           ADD      LR,R10,R11
   \   0000010C   01E08EE2           ADD      LR,LR,#+1
   \   00000110   8EC80CE1           SMLABB   R12,LR,R8,R12
   \   00000114   012042E2           SUB      R2,R2,#+1
   \   00000118   04C04CE0           SUB      R12,R12,R4
   \   0000011C   011083E2           ADD      R1,R3,#+1
   \   00000120   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000124   020052E3           CMP      R2,#+2
   \   00000128   080000BA           BLT      ??_DrawHLine_4
   \   0000012C   012042E2           SUB      R2,R2,#+1
    149                /* Middle Pixels */
    150                for (;--iRem > 1; ) {
    151                  *pDest++ += GUI_Context.AA_Factor;
   \                     ??_DrawHLine_5:
   \   00000130   0130A0E1           MOV      R3,R1
   \   00000134   00C0D3E5           LDRB     R12,[R3, #+0]
   \   00000138   98E0D7E5           LDRB     LR,[R7, #+152]
   \   0000013C   011083E2           ADD      R1,R3,#+1
   \   00000140   012052E2           SUBS     R2,R2,#+1
   \   00000144   0CC08EE0           ADD      R12,LR,R12
   \   00000148   00C0C3E5           STRB     R12,[R3, #+0]
    152                }
   \   0000014C   F7FFFF1A           BNE      ??_DrawHLine_5
    153                /* Last Pixel */
    154                *pDest += (1 + x1 - (x1_Off + _x0) * GUI_Context.AA_Factor);
   \                     ??_DrawHLine_4:
   \   00000150   9830D7E5           LDRB     R3,[R7, #+152]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   00008AE0           ADD      R0,R10,R0
   \   0000015C   930000E0           MUL      R0,R3,R0
   \   00000160   022085E0           ADD      R2,R5,R2
   \   00000164   012082E2           ADD      R2,R2,#+1
   \   00000168   000042E0           SUB      R0,R2,R0
   \                     ??_DrawHLine_3:
   \   0000016C   0000C1E5           STRB     R0,[R1, #+0]
   \                     ??_DrawHLine_0:
   \   00000170   F08DBDE8           POP      {R4-R8,R10,R11,PC}  ;; return
    155              }
    156            }
    157          }
    158          
    159          /*********************************************************************
    160          *
    161          *       CalcClipRectHL
    162          */
    163          static void CalcClipRectHL(void) {
    164            _ClipRect_HL.x0 =  GUI_Context.ClipRect.x0      * GUI_Context.AA_Factor;
    165            _ClipRect_HL.y0 =  GUI_Context.ClipRect.y0      * GUI_Context.AA_Factor;
    166            _ClipRect_HL.x1 = (GUI_Context.ClipRect.x1 + 1) * GUI_Context.AA_Factor - 1;
    167            _ClipRect_HL.y1 = (GUI_Context.ClipRect.y1 + 1) * GUI_Context.AA_Factor - 1;
    168          }
    169          
    170          /*********************************************************************
    171          *
    172          *       Public code
    173          *
    174          **********************************************************************
    175          */
    176          /*********************************************************************
    177          *
    178          *       GUI_AA_Init
    179          */

   \                                 In section .text, align 4, keep-with-next
    180          int GUI_AA_Init(int x0, int x1) {
   \                     GUI_AA_Init:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    181            int r = 0;
    182            /* Allocate fixed buffer on first use */
    183            if (_pAABuffer == NULL) {
   \   00000004   ........           LDR      R4,??DataTable9
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   100094E5           LDR      R0,[R4, #+16]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500001A           BNE      ??GUI_AA_Init_0
    184              _BufferSize = LCD_GetVXSizeMax();
   \   00000020   ........           BL       LCD_GetVXSizeMax
   \   00000024   2C0084E5           STR      R0,[R4, #+44]
    185              _pAABuffer = (U8 *)GUI_ALLOC_GetFixedBlock(_BufferSize);
   \   00000028   ........           BL       GUI_ALLOC_GetFixedBlock
    186              if (_pAABuffer == NULL) {
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   100084E5           STR      R0,[R4, #+16]
    187                r = 1;
   \   00000034   0170A003           MOVEQ    R7,#+1
    188              }
    189            }
    190            /* Bounds checking:
    191               Make sure x0, x1 are in legal range ...
    192               (The important point is that they span no more than configured as
    193                buffer size)
    194            */
    195            if (x0 < 0) {
   \                     ??GUI_AA_Init_0:
   \   00000038   000055E3           CMP      R5,#+0
    196              x0 = 0;
    197            }
    198            if ((x1 - x0) > _BufferSize - 1) {
   \   0000003C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000040   0050A043           MOVMI    R5,#+0
   \   00000044   011040E2           SUB      R1,R0,#+1
   \   00000048   052046E0           SUB      R2,R6,R5
    199              x1 = x0 + _BufferSize - 1;
    200            }
    201            /* Is there anything to do at all ??? */
    202            if (x1 < x0) {
    203              x1 = x0;   /* Not really ... */
    204              r = 1;
    205            }
    206            _DrawAPICopy = *GUI_Context.pLCD_HL; /* Copy API table */
   \   0000004C   ........           LDR      R8,??DataTable9_1
   \   00000050   020051E1           CMP      R1,R2
   \   00000054   050080B0           ADDLT    R0,R0,R5
   \   00000058   942098E5           LDR      R2,[R8, #+148]
   \   0000005C   016040B2           SUBLT    R6,R0,#+1
   \   00000060   000092E5           LDR      R0,[R2, #+0]
   \   00000064   041092E5           LDR      R1,[R2, #+4]
   \   00000068   050056E1           CMP      R6,R5
   \   0000006C   030084E8           STM      R4,{R0,R1}
    207            _pLCD_HLPrev = GUI_Context.pLCD_HL; /* Remember list ptr (for restore) */
    208            _DrawAPICopy.pfDrawHLine = _DrawHLine;  /* modify function ptr. for hline */
   \   00000070   ........           LDR      R0,??DataTable9_2
   \   00000074   0560A0B1           MOVLT    R6,R5
   \   00000078   000084E5           STR      R0,[R4, #+0]
   \   0000007C   302084E5           STR      R2,[R4, #+48]
    209            GUI_Context.pLCD_HL = &_DrawAPICopy;      /* Use copy of fp-list */
    210            _pBuffer = _pAABuffer;
   \   00000080   100094E5           LDR      R0,[R4, #+16]
    211            _x0 = x0;
    212            _x1 = x1;
    213            _CleanLine();
   \   00000084   051046E0           SUB      R1,R6,R5
   \   00000088   012081E2           ADD      R2,R1,#+1
   \   0000008C   0170A0B3           MOVLT    R7,#+1
   \   00000090   944088E5           STR      R4,[R8, #+148]
   \   00000094   140084E5           STR      R0,[R4, #+20]
   \   00000098   185084E5           STR      R5,[R4, #+24]
   \   0000009C   1C6084E5           STR      R6,[R4, #+28]
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   ........           BL       GUI__memset
   \   000000A8   FE00E0E3           MVN      R0,#+254
   \   000000AC   FC0DC0E3           BIC      R0,R0,#0x3F00
   \   000000B0   200084E5           STR      R0,[R4, #+32]
   \   000000B4   001060E2           RSB      R1,R0,#+0
   \   000000B8   280084E5           STR      R0,[R4, #+40]
    214            CalcClipRectHL();
   \   000000BC   9800D8E5           LDRB     R0,[R8, #+152]
   \   000000C0   F820D8E1           LDRSH    R2,[R8, #+8]
   \   000000C4   241084E5           STR      R1,[R4, #+36]
   \   000000C8   0010A0E1           MOV      R1,R0
   \   000000CC   820162E1           SMULBB   R2,R2,R1
   \   000000D0   B820C4E1           STRH     R2,[R4, #+8]
   \   000000D4   FA20D8E1           LDRSH    R2,[R8, #+10]
   \   000000D8   820161E1           SMULBB   R1,R2,R1
   \   000000DC   0020E0E3           MVN      R2,#+0
   \   000000E0   BA10C4E1           STRH     R1,[R4, #+10]
   \   000000E4   FC10D8E1           LDRSH    R1,[R8, #+12]
   \   000000E8   011081E2           ADD      R1,R1,#+1
   \   000000EC   902121E0           MLA      R1,R0,R1,R2
   \   000000F0   BC10C4E1           STRH     R1,[R4, #+12]
   \   000000F4   FE10D8E1           LDRSH    R1,[R8, #+14]
   \   000000F8   011081E2           ADD      R1,R1,#+1
   \   000000FC   902121E0           MLA      R1,R0,R1,R2
    215            GUI_Context.pClipRect_HL = &_ClipRect_HL;
   \   00000100   080084E2           ADD      R0,R4,#+8
   \   00000104   140088E5           STR      R0,[R8, #+20]
   \   00000108   BE10C4E1           STRH     R1,[R4, #+14]
    216            return r;
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   F081BDE8           POP      {R4-R8,PC}       ;; return
    217          }
    218          
    219          /*********************************************************************
    220          *
    221          *       GUI_AA_Init_HiRes
    222          */

   \                                 In section .text, align 4, keep-with-next
    223          int GUI_AA_Init_HiRes(int x0, int x1) {
   \                     GUI_AA_Init_HiRes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   ........           LDR      R1,??DataTable9_1
   \   00000010   9850D1E5           LDRB     R5,[R1, #+152]
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   ........           BL       __aeabi_idiv
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           BL       __aeabi_idiv
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   ........           B        GUI_AA_Init      ;; tailcall
    224            x0 /= GUI_Context.AA_Factor;
    225            x1 /= GUI_Context.AA_Factor;
    226            return GUI_AA_Init(x0, x1);
    227          }
    228          
    229          /*********************************************************************
    230          *
    231          *       GUI_AA_SetFactor
    232          */

   \                                 In section .text, align 4, keep-with-next
    233          void GUI_AA_SetFactor(int Factor) {
    234            GUI_Context.AA_Factor = Factor;
   \                     GUI_AA_SetFactor:
   \   00000000   ........           LDR      R2,??DataTable9_1
   \   00000004   9800C2E5           STRB     R0,[R2, #+152]
    235            CalcClipRectHL();      /* High level clipping depends on quality factor */
   \   00000008   9810D2E5           LDRB     R1,[R2, #+152]
   \   0000000C   F8C0D2E1           LDRSH    R12,[R2, #+8]
   \   00000010   ........           LDR      R0,??DataTable9
   \   00000014   0130A0E1           MOV      R3,R1
   \   00000018   8C036CE1           SMULBB   R12,R12,R3
   \   0000001C   B8C0C0E1           STRH     R12,[R0, #+8]
   \   00000020   FAC0D2E1           LDRSH    R12,[R2, #+10]
   \   00000024   8C0363E1           SMULBB   R3,R12,R3
   \   00000028   00C0E0E3           MVN      R12,#+0
   \   0000002C   BA30C0E1           STRH     R3,[R0, #+10]
   \   00000030   FC30D2E1           LDRSH    R3,[R2, #+12]
   \   00000034   FE20D2E1           LDRSH    R2,[R2, #+14]
   \   00000038   013083E2           ADD      R3,R3,#+1
   \   0000003C   012082E2           ADD      R2,R2,#+1
   \   00000040   91C323E0           MLA      R3,R1,R3,R12
   \   00000044   91C222E0           MLA      R2,R1,R2,R12
   \   00000048   BC30C0E1           STRH     R3,[R0, #+12]
   \   0000004C   BE20C0E1           STRH     R2,[R0, #+14]
    236          }
   \   00000050   1EFF2FE1           BX       LR               ;; return
    237          
    238          /*********************************************************************
    239          *
    240          *       GUI_AA_GetFactor
    241          */

   \                                 In section .text, align 4, keep-with-next
    242          int GUI_AA_GetFactor(void) {
    243            return GUI_Context.AA_Factor;
   \                     GUI_AA_GetFactor:
   \   00000000   ........           LDR      R0,??DataTable9_1
   \   00000004   9800D0E5           LDRB     R0,[R0, #+152]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    244          }
    245          
    246          /*********************************************************************
    247          *
    248          *       GUI_AA_DisableHiRes
    249          */

   \                                 In section .text, align 4, keep-with-next
    250          void GUI_AA_DisableHiRes(void) {
    251            GUI_Context.AA_HiResEnable = 0;
   \                     GUI_AA_DisableHiRes:
   \   00000000   ........           LDR      R0,??DataTable9_1
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   9910C0E5           STRB     R1,[R0, #+153]
    252          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    253          
    254          /*********************************************************************
    255          *
    256          *       GUI_AA_EnableHiRes
    257          */

   \                                 In section .text, align 4, keep-with-next
    258          void GUI_AA_EnableHiRes(void) {
    259            GUI_Context.AA_HiResEnable =1;
   \                     GUI_AA_EnableHiRes:
   \   00000000   ........           LDR      R0,??DataTable9_1
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   9910C0E5           STRB     R1,[R0, #+153]
    260          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    261          
    262          /*********************************************************************
    263          *
    264          *       GUI_AA_HiRes2Pixel
    265          */

   \                                 In section .text, align 4, keep-with-next
    266          I16 GUI_AA_HiRes2Pixel(int HiRes) {
   \                     GUI_AA_HiRes2Pixel:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           LDR      R1,??DataTable9_1
   \   00000008   9810D1E5           LDRB     R1,[R1, #+152]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0000000A           BEQ      ??GUI_AA_HiRes2Pixel_0
   \   00000014   ........           BL       __aeabi_idiv
   \                     ??GUI_AA_HiRes2Pixel_0:
   \   00000018   0008A0E1           LSL      R0,R0,#+16
   \   0000001C   4008A0E1           ASR      R0,R0,#+16
   \   00000020   0080BDE8           POP      {PC}             ;; return
    267            return GUI_Context.AA_Factor ? (HiRes / GUI_Context.AA_Factor) : HiRes;
    268          }
    269          
    270          /*********************************************************************
    271          *
    272          *       GUI_AA_Exit
    273          */

   \                                 In section .text, align 4, keep-with-next
    274          void GUI_AA_Exit(void) {
   \                     GUI_AA_Exit:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    275            _FlushLine();
   \   00000008   ........           BL       _FlushLine
    276            /* restore previous settings */
    277            GUI_Context.pLCD_HL = _pLCD_HLPrev;
   \   0000000C   ........           LDR      R1,??DataTable9
   \   00000010   ........           LDR      R0,??DataTable9_1
   \   00000014   301091E5           LDR      R1,[R1, #+48]
    278            GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
    279          }
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   941080E5           STR      R1,[R0, #+148]
   \   00000020   081080E2           ADD      R1,R0,#+8
   \   00000024   141080E5           STR      R1,[R0, #+20]
   \   00000028   0080BDE8           POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     _DrawAPICopy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   ........           DC32     _DrawHLine
    280          
    281          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_AA_DisableHiRes      0
     GUI_AA_EnableHiRes       0
     GUI_AA_Exit              8
     GUI_AA_GetFactor         0
     GUI_AA_HiRes2Pixel       4
     GUI_AA_Init             24
     GUI_AA_Init_HiRes       16
     GUI_AA_SetFactor         0
     _DrawHLine              40
     _FlushLine              32


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _DrawAPICopy          52
     _ClipRect_HL
     _pAABuffer
     _pBuffer
     _x0
     _x1
     _y
     _x0_InUse
     _x1_InUse
     _BufferSize
     _pLCD_HLPrev
     _FlushLine           304
     _DrawHLine           372
     GUI_AA_Init          276
     GUI_AA_Init_HiRes     56
     GUI_AA_SetFactor      84
     GUI_AA_GetFactor      12
     GUI_AA_DisableHiRes   16
     GUI_AA_EnableHiRes    16
     GUI_AA_HiRes2Pixel    36
     GUI_AA_Exit           44
     ??DataTable9           4
     ??DataTable9_1         4
     ??DataTable9_2         4

 
    52 bytes in section .bss
 1 228 bytes in section .text
 
 1 228 bytes of CODE memory
    52 bytes of DATA memory

Errors: none
Warnings: none
