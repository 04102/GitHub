###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:56 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_CRC32.c                           #
#    Command line =  C:\DUII\TargetHW\FS\FS_CRC32.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_CRC32.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_CRC32.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_CRC32.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          ----------------------------------------------------------------------
     19          File        : FS_CRC32.c
     20          Purpose     : Compute CRC32 in high speed.
     21                        A CRC table with 256 entries is used.
     22                        The polynom used is the mirrored version of 0x04c11DB7,
     23                        which is for V.42, MPEG-2, PNG and others.
     24                        The intial value can be freely chosen; 0xFFFFFFFF is
     25                        recommended.
     26          
     27          ---------------------------END-OF-HEADER------------------------------
     28          */
     29          
     30          /*********************************************************************
     31          *
     32          *       Includes
     33          *
     34          **********************************************************************
     35          */
     36          
     37          #include "FS_Int.h"
     38          
     39          
     40          /*********************************************************************
     41          *
     42          *       Static const
     43          *
     44          **********************************************************************
     45          */

   \                                 In section .text, align 4, keep-with-next
     46          static const U32 _aCRC[256] = {
   \                     _aCRC:
   \   00000000                      ; Initializer data, 1024 bytes
   \   00000000   000000009630       DC32 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324
   \              07772C610EEE
   \              BA51099919C4
   \              6D078FF46A70
   \              35A563E9A395
   \              649E3288DB0E
   \              A4B8DC79    
   \   00000028   1EE9D5E088D9       DC32 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214
   \              D2972B4CB609
   \              BD7CB17E072D
   \              B8E7911DBF90
   \              6410B71DF220
   \              B06A4871B9F3
   \              DE41BE84    
   \   00000050   7DD4DA1AEBE4       DC32 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465
   \              DD6D51B5D4F4
   \              C785D3835698
   \              6C13C0A86B64
   \              7AF962FDECC9
   \              658A4F5C0114
   \              D96C0663    
   \   00000078   633D0FFAF50D       DC32 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443
   \              088DC8206E3B
   \              5E10694CE441
   \              60D5727167A2
   \              D1E4033C47D4
   \              044BFD850DD2
   \              6BB50AA5    
   \   000000A0   FAA8B5356C98       DC32 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546
   \              B242D6C9BBDB
   \              40F9BCACE36C
   \              D832755CDF45
   \              CF0DD6DC593D
   \              D1ABAC30D926
   \              3A00DE51    
   \   000000C8   8051D7C81661       DC32 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812
   \              D0BFB5F4B421
   \              23C4B3569995
   \              BACF0FA5BDB8
   \              9EB802280888
   \              055FB2D90CC6
   \              24E90BB1    
   \   000000F0   877C6F2F114C       DC32 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215
   \              6858AB1D61C1
   \              3D2D66B69041
   \              DC760671DB01
   \              BC20D2982A10
   \              D5EF8985B171
   \              1FB5B606    
   \   00000118   A5E4BF9F33D4       DC32 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297
   \              B8E8A2C90778
   \              34F9000F8EA8
   \              099618980EE1
   \              BB0D6A7F2D3D
   \              6D08976C6491
   \              015C63E6    
   \   00000140   F4516B6B6261       DC32 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704
   \              6C1CD8306585
   \              4E0062F2ED95
   \              066C7BA5011B
   \              C1F4088257C4
   \              0FF5C6D9B065
   \              50E9B712    
   \   00000168   EAB8BE8B7C88       DC32 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538
   \              B9FCDF1DDD62
   \              492DDA15F37C
   \              D38C654CD4FB
   \              5861B24DCE51
   \              B53A7400BCA3
   \              E230BBD4    
   \   00000190   41A5DF4AD795       DC32 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277
   \              D83D6DC4D1A4
   \              FBF4D6D36AE9
   \              6943FCD96E34
   \              468867ADD0B8
   \              60DA732D0444
   \              E51D0333    
   \   000001B8   5F4C0AAAC97C       DC32 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015
   \              0DDD3C710550
   \              AA4102271010
   \              0BBE86200CC9
   \              25B56857B385
   \              6F2009D466B9
   \              9FE461CE    
   \   000001E0   0EF9DE5E98C9       DC32 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646
   \              D9292298D0B0
   \              B4A8D7C7173D
   \              B359810DB42E
   \              3B5CBDB7AD6C
   \              BAC02083B8ED
   \              B6B3BF9A    
   \   00000208   0CE2B6039AD2       DC32 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376
   \              B1743947D5EA
   \              AF77D29D1526
   \              DB048316DC73
   \              120B63E3843B
   \              64943E6A6D0D
   \              A85A6A7A    
   \   00000230   0BCF0EE49DFF       DC32 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355
   \              099327AE000A
   \              B19E077D4493
   \              0FF0D2A30887
   \              68F2011EFEC2
   \              06695D5762F7
   \              CB676580    
   \   00000258   71366C19E706       DC32 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637
   \              6B6E761BD4FE
   \              E02BD3895A7A
   \              DA10CC4ADD67
   \              6FDFB9F9F9EF
   \              BE8E43BEB717
   \              D58EB060    
   \   00000280   E8A3D6D67E93       DC32 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148
   \              D1A1C4C2D838
   \              52F2DF4FF167
   \              BBD16757BCA6
   \              DD06B53F4B36
   \              B248DA2B0DD8
   \              4C1B0AAF    
   \   000002A8   F64A0336607A       DC32 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366
   \              0441C3EF60DF
   \              55DF67A8EF8E
   \              6E3179BE6946
   \              8CB361CB1A83
   \              66BCA0D26F25
   \              36E26852    
   \   000002D0   95770CCC0347       DC32 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625
   \              0BBBB9160222
   \              2F260555BE3B
   \              BAC5280BBDB2
   \              925AB42B046A
   \              B35CA7FFD7C2
   \              31CFD0B5    
   \   000002F8   8B9ED92C1DAE       DC32 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371
   \              DE5BB0C2649B
   \              26F263EC9CA3
   \              6A750A936D02
   \              A906099C3F36
   \              0EEB85670772
   \              13570005    
   \   00000320   824ABF95147A       DC32 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610
   \              B8E2AE2BB17B
   \              381BB60C9B8E
   \              D2920DBED5E5
   \              B7EFDC7C21DF
   \              DB0BD4D2D386
   \              42E2D4F1    
   \   00000348   F8B3DD686E83       DC32 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116
   \              DA1FCD16BE81
   \              5B26B9F6E177
   \              B06F7747B718
   \              E65A0888706A
   \              0FFFCA3B0666
   \              5C0B0111    
   \   00000370   FF9E658F69AE       DC32 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263
   \              62F8D3FF6B61
   \              45CF6C1678E2
   \              0AA0EED20DD7
   \              5483044EC2B3
   \              0339612667A7
   \              F71660D0    
   \   00000398   4D476949DB77       DC32 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897
   \              6E3E4A6AD1AE
   \              DC5AD6D9660B
   \              DF40F03BD837
   \              53AEBCA9C59E
   \              BBDE7FCFB247
   \              E9FFB530    
   \   000003C0   1CF2BDBD8AC2       DC32 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456
   \              BACA3093B353
   \              A6A3B4240536
   \              D0BA9306D7CD
   \              2957DE54BF67
   \              D9232E7A66B3
   \              B84A61C4    
   \   000003E8   021B685D942B       DC32 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117
   \              6F2A37BE0BB4
   \              A18E0CC31BDF
   \              055A8DEF022D
     47            0x00000000UL, 0x77073096UL, 0xEE0E612CUL, 0x990951BAUL,
     48            0x076DC419UL, 0x706AF48FUL, 0xE963A535UL, 0x9E6495A3UL,
     49            0x0EDB8832UL, 0x79DCB8A4UL, 0xE0D5E91EUL, 0x97D2D988UL,
     50            0x09B64C2BUL, 0x7EB17CBDUL, 0xE7B82D07UL, 0x90BF1D91UL,
     51            0x1DB71064UL, 0x6AB020F2UL, 0xF3B97148UL, 0x84BE41DEUL,
     52            0x1ADAD47DUL, 0x6DDDE4EBUL, 0xF4D4B551UL, 0x83D385C7UL,
     53            0x136C9856UL, 0x646BA8C0UL, 0xFD62F97AUL, 0x8A65C9ECUL,
     54            0x14015C4FUL, 0x63066CD9UL, 0xFA0F3D63UL, 0x8D080DF5UL,
     55            0x3B6E20C8UL, 0x4C69105EUL, 0xD56041E4UL, 0xA2677172UL,
     56            0x3C03E4D1UL, 0x4B04D447UL, 0xD20D85FDUL, 0xA50AB56BUL,
     57            0x35B5A8FAUL, 0x42B2986CUL, 0xDBBBC9D6UL, 0xACBCF940UL,
     58            0x32D86CE3UL, 0x45DF5C75UL, 0xDCD60DCFUL, 0xABD13D59UL,
     59            0x26D930ACUL, 0x51DE003AUL, 0xC8D75180UL, 0xBFD06116UL,
     60            0x21B4F4B5UL, 0x56B3C423UL, 0xCFBA9599UL, 0xB8BDA50FUL,
     61            0x2802B89EUL, 0x5F058808UL, 0xC60CD9B2UL, 0xB10BE924UL,
     62            0x2F6F7C87UL, 0x58684C11UL, 0xC1611DABUL, 0xB6662D3DUL,
     63            0x76DC4190UL, 0x01DB7106UL, 0x98D220BCUL, 0xEFD5102AUL,
     64            0x71B18589UL, 0x06B6B51FUL, 0x9FBFE4A5UL, 0xE8B8D433UL,
     65            0x7807C9A2UL, 0x0F00F934UL, 0x9609A88EUL, 0xE10E9818UL,
     66            0x7F6A0DBBUL, 0x086D3D2DUL, 0x91646C97UL, 0xE6635C01UL,
     67            0x6B6B51F4UL, 0x1C6C6162UL, 0x856530D8UL, 0xF262004EUL,
     68            0x6C0695EDUL, 0x1B01A57BUL, 0x8208F4C1UL, 0xF50FC457UL,
     69            0x65B0D9C6UL, 0x12B7E950UL, 0x8BBEB8EAUL, 0xFCB9887CUL,
     70            0x62DD1DDFUL, 0x15DA2D49UL, 0x8CD37CF3UL, 0xFBD44C65UL,
     71            0x4DB26158UL, 0x3AB551CEUL, 0xA3BC0074UL, 0xD4BB30E2UL,
     72            0x4ADFA541UL, 0x3DD895D7UL, 0xA4D1C46DUL, 0xD3D6F4FBUL,
     73            0x4369E96AUL, 0x346ED9FCUL, 0xAD678846UL, 0xDA60B8D0UL,
     74            0x44042D73UL, 0x33031DE5UL, 0xAA0A4C5FUL, 0xDD0D7CC9UL,
     75            0x5005713CUL, 0x270241AAUL, 0xBE0B1010UL, 0xC90C2086UL,
     76            0x5768B525UL, 0x206F85B3UL, 0xB966D409UL, 0xCE61E49FUL,
     77            0x5EDEF90EUL, 0x29D9C998UL, 0xB0D09822UL, 0xC7D7A8B4UL,
     78            0x59B33D17UL, 0x2EB40D81UL, 0xB7BD5C3BUL, 0xC0BA6CADUL,
     79            0xEDB88320UL, 0x9ABFB3B6UL, 0x03B6E20CUL, 0x74B1D29AUL,
     80            0xEAD54739UL, 0x9DD277AFUL, 0x04DB2615UL, 0x73DC1683UL,
     81            0xE3630B12UL, 0x94643B84UL, 0x0D6D6A3EUL, 0x7A6A5AA8UL,
     82            0xE40ECF0BUL, 0x9309FF9DUL, 0x0A00AE27UL, 0x7D079EB1UL,
     83            0xF00F9344UL, 0x8708A3D2UL, 0x1E01F268UL, 0x6906C2FEUL,
     84            0xF762575DUL, 0x806567CBUL, 0x196C3671UL, 0x6E6B06E7UL,
     85            0xFED41B76UL, 0x89D32BE0UL, 0x10DA7A5AUL, 0x67DD4ACCUL,
     86            0xF9B9DF6FUL, 0x8EBEEFF9UL, 0x17B7BE43UL, 0x60B08ED5UL,
     87            0xD6D6A3E8UL, 0xA1D1937EUL, 0x38D8C2C4UL, 0x4FDFF252UL,
     88            0xD1BB67F1UL, 0xA6BC5767UL, 0x3FB506DDUL, 0x48B2364BUL,
     89            0xD80D2BDAUL, 0xAF0A1B4CUL, 0x36034AF6UL, 0x41047A60UL,
     90            0xDF60EFC3UL, 0xA867DF55UL, 0x316E8EEFUL, 0x4669BE79UL,
     91            0xCB61B38CUL, 0xBC66831AUL, 0x256FD2A0UL, 0x5268E236UL,
     92            0xCC0C7795UL, 0xBB0B4703UL, 0x220216B9UL, 0x5505262FUL,
     93            0xC5BA3BBEUL, 0xB2BD0B28UL, 0x2BB45A92UL, 0x5CB36A04UL,
     94            0xC2D7FFA7UL, 0xB5D0CF31UL, 0x2CD99E8BUL, 0x5BDEAE1DUL,
     95            0x9B64C2B0UL, 0xEC63F226UL, 0x756AA39CUL, 0x026D930AUL,
     96            0x9C0906A9UL, 0xEB0E363FUL, 0x72076785UL, 0x05005713UL,
     97            0x95BF4A82UL, 0xE2B87A14UL, 0x7BB12BAEUL, 0x0CB61B38UL,
     98            0x92D28E9BUL, 0xE5D5BE0DUL, 0x7CDCEFB7UL, 0x0BDBDF21UL,
     99            0x86D3D2D4UL, 0xF1D4E242UL, 0x68DDB3F8UL, 0x1FDA836EUL,
    100            0x81BE16CDUL, 0xF6B9265BUL, 0x6FB077E1UL, 0x18B74777UL,
    101            0x88085AE6UL, 0xFF0F6A70UL, 0x66063BCAUL, 0x11010B5CUL,
    102            0x8F659EFFUL, 0xF862AE69UL, 0x616BFFD3UL, 0x166CCF45UL,
    103            0xA00AE278UL, 0xD70DD2EEUL, 0x4E048354UL, 0x3903B3C2UL,
    104            0xA7672661UL, 0xD06016F7UL, 0x4969474DUL, 0x3E6E77DBUL,
    105            0xAED16A4AUL, 0xD9D65ADCUL, 0x40DF0B66UL, 0x37D83BF0UL,
    106            0xA9BCAE53UL, 0xDEBB9EC5UL, 0x47B2CF7FUL, 0x30B5FFE9UL,
    107            0xBDBDF21CUL, 0xCABAC28AUL, 0x53B39330UL, 0x24B4A3A6UL,
    108            0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL,
    109            0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL,
    110            0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL,
    111          };
    112          
    113          /*********************************************************************
    114          *
    115          *       Static code
    116          *
    117          **********************************************************************
    118          */
    119          
    120          /*********************************************************************
    121          *
    122          *       CRC_CalcFast
    123          *
    124          *  Function description
    125          *    Build CRC table. This code has been used to build the table.
    126          *
    127          *  Notes
    128          *    (1) The same code can also be used to build a CRC table for any other polynom
    129          *     
    130          */
    131          #if 0
    132          static void _BuildTable(void) {
    133            U32 Polynom;
    134            U32 i, n, v;
    135          
    136            Polynom = 0xEDB88320;    // Normal form is 0x04C11DB7
    137            printf("static const U32 _aCRC[256] = {\n");
    138            for (n = 0; n < 256; n++) {
    139              v = n;
    140              i = 8;
    141              do {
    142                if (v & 1) {
    143                  v = (v >> 1) ^ Polynom;
    144                } else {
    145                  v >>= 1;
    146                }
    147              } while (--i);
    148              _aCRC[n] = v;
    149            }
    150            for (n = 0; n < 256; n += 4) {
    151              printf("0x%.8X, 0x%.8X, 0x%.8X, 0x%.8X, \n", _aCRC[n], _aCRC[n+1], _aCRC[n+2], _aCRC[n+3]);
    152            }
    153            printf("}\n");
    154          }
    155          #endif
    156          /*********************************************************************
    157          *
    158          *       Public code
    159          *
    160          **********************************************************************
    161          */
    162          
    163          /*********************************************************************
    164          *
    165          *       CRC_CalcFast
    166          */

   \                                 In section .text, align 4, keep-with-next
    167          U32 FS_CRC32_Calc(const U8* pData, unsigned NumBytes, U32 crc) {
    168            //
    169            // Calculate CRC in units of 8 bytes
    170            //
    171            if (NumBytes >= 8) {
   \                     FS_CRC32_Calc:
   \   00000000   080051E3           CMP      R1,#+8
   \   00000004   2B00003A           BCC      ??FS_CRC32_Calc_0
    172              do {
    173                crc ^= *pData++;
   \                     ??FS_CRC32_Calc_1:
   \   00000008   0130D0E4           LDRB     R3,[R0], #+1
    174                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    175                crc ^= *pData++;
    176                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    177                crc ^= *pData++;
    178                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    179                crc ^= *pData++;
    180                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    181                crc ^= *pData++;
    182                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    183                crc ^= *pData++;
    184                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    185                crc ^= *pData++;
    186                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    187                crc ^= *pData++;
    188                crc  = _aCRC[crc & 0xFF] ^ (U32)(crc >> 8);
    189                NumBytes -= 8;
   \   0000000C   081041E2           SUB      R1,R1,#+8
    190              } while (NumBytes >= 8);
   \   00000010   080051E3           CMP      R1,#+8
   \   00000014   023023E0           EOR      R3,R3,R2
   \   00000018   ........           ADR      R2,_aCRC
   \   0000001C   FFC003E2           AND      R12,R3,#0xFF
   \   00000020   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   00000024   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   00000028   01C0D0E4           LDRB     R12,[R0], #+1
   \   0000002C   03302CE0           EOR      R3,R12,R3
   \   00000030   FFC003E2           AND      R12,R3,#0xFF
   \   00000034   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   00000038   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   0000003C   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000040   03302CE0           EOR      R3,R12,R3
   \   00000044   FFC003E2           AND      R12,R3,#0xFF
   \   00000048   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   0000004C   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   00000050   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000054   03302CE0           EOR      R3,R12,R3
   \   00000058   FFC003E2           AND      R12,R3,#0xFF
   \   0000005C   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   00000060   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   00000064   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000068   03302CE0           EOR      R3,R12,R3
   \   0000006C   FFC003E2           AND      R12,R3,#0xFF
   \   00000070   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   00000074   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   00000078   01C0D0E4           LDRB     R12,[R0], #+1
   \   0000007C   03302CE0           EOR      R3,R12,R3
   \   00000080   FFC003E2           AND      R12,R3,#0xFF
   \   00000084   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   00000088   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   0000008C   01C0D0E4           LDRB     R12,[R0], #+1
   \   00000090   03302CE0           EOR      R3,R12,R3
   \   00000094   FFC003E2           AND      R12,R3,#0xFF
   \   00000098   0CC192E7           LDR      R12,[R2, +R12, LSL #+2]
   \   0000009C   23342CE0           EOR      R3,R12,R3, LSR #+8
   \   000000A0   01C0D0E4           LDRB     R12,[R0], #+1
   \   000000A4   03302CE0           EOR      R3,R12,R3
   \   000000A8   FFC003E2           AND      R12,R3,#0xFF
   \   000000AC   0C2192E7           LDR      R2,[R2, +R12, LSL #+2]
   \   000000B0   232422E0           EOR      R2,R2,R3, LSR #+8
   \   000000B4   D3FFFF2A           BCS      ??FS_CRC32_Calc_1
    191            }
    192            //
    193            // Calculate CRC in units of bytes
    194            //
    195            if (NumBytes) {
   \                     ??FS_CRC32_Calc_0:
   \   000000B8   000051E3           CMP      R1,#+0
   \   000000BC   ........           ADR      R12,_aCRC
   \   000000C0   0600000A           BEQ      ??FS_CRC32_Calc_2
    196              do {
    197                crc ^= *pData++;
   \                     ??FS_CRC32_Calc_3:
   \   000000C4   0130D0E4           LDRB     R3,[R0], #+1
    198                crc  = _aCRC[crc & 0xFF] ^ (crc >> 8);
    199              } while (--NumBytes);
   \   000000C8   011051E2           SUBS     R1,R1,#+1
   \   000000CC   022023E0           EOR      R2,R3,R2
   \   000000D0   FF3002E2           AND      R3,R2,#0xFF
   \   000000D4   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   000000D8   222423E0           EOR      R2,R3,R2, LSR #+8
   \   000000DC   F8FFFF1A           BNE      ??FS_CRC32_Calc_3
    200            }
    201            return crc;
   \                     ??FS_CRC32_Calc_2:
   \   000000E0   0200A0E1           MOV      R0,R2
   \   000000E4   1EFF2FE1           BX       LR               ;; return
    202          }
    203          
    204          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     FS_CRC32_Calc      0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     _aCRC          1024
     FS_CRC32_Calc   232

 
 1 256 bytes in section .text
 
 1 256 bytes of CODE memory

Errors: none
Warnings: none
