###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:38 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_BMP_Serialize.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_BMP_Serialize.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_BMP_Serialize.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_BMP_Serialize.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_BMP_Serialize.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_BMP_Serialize.c
     19          Purpose     : Implementation of GUI_BMP_Serialize
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          
     32          #define DIB_HEADER_MARKER ((U16) ('M' << 8) | 'B') /* DIB Header Marker - used in writing DIBs to files */
     33          
     34          #define SIZEOF_BITMAPFILEHEADER 14
     35          #define SIZEOF_BITMAPINFOHEADER 40
     36          
     37          /*********************************************************************
     38          *
     39          *       Static code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       _SendU16
     46          */
     47          static void _SendU16(GUI_CALLBACK_VOID_U8_P * pfSerialize, U16 Data, void * p) {
     48            (*pfSerialize)((U8)Data, p);
     49            (*pfSerialize)(Data >> 8, p);
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       _SendU32
     55          */
     56          static void _SendU32(GUI_CALLBACK_VOID_U8_P * pfSerialize, U32 Data, void * p) {
     57            _SendU16(pfSerialize, (U16)Data, p);
     58            _SendU16(pfSerialize, Data >> 16, p);
     59          }
     60          
     61          /*********************************************************************
     62          *
     63          *       Exported routines
     64          *
     65          **********************************************************************
     66          */
     67          /*********************************************************************
     68          *
     69          *       GUI_BMP_SerializeEx
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          void GUI_BMP_SerializeEx(GUI_CALLBACK_VOID_U8_P * pfSerialize, int x0, int y0, int xSize, int ySize, void * p) {
   \                     GUI_BMP_SerializeEx:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   38709DE5           LDR      R7,[SP, #+56]
   \   00000010   3C509DE5           LDR      R5,[SP, #+60]
     72            int x, y, i, BPP, BytesPerLine, NumColors, Padding;
     73            U32 BitmapOffset, FileSize;
     74            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
     75            BPP          = LCD_GetBitsPerPixel();
   \   00000018   ........           BL       LCD_GetBitsPerPixel
   \   0000001C   0060A0E1           MOV      R6,R0
     76            BytesPerLine = ((BPP > 8) ? (2 * xSize + 2) : (xSize + 3)) & ~3;
   \   00000020   090056E3           CMP      R6,#+9
   \   00000024   10009DE5           LDR      R0,[SP, #+16]
   \   00000028   040000BA           BLT      ??GUI_BMP_SerializeEx_0
   \   0000002C   8000A0E1           LSL      R0,R0,#+1
   \   00000030   021080E2           ADD      R1,R0,#+2
   \   00000034   0390C1E3           BIC      R9,R1,#0x3
   \   00000038   0080A0E3           MOV      R8,#+0
   \   0000003C   040000EA           B        ??GUI_BMP_SerializeEx_1
   \                     ??GUI_BMP_SerializeEx_0:
   \   00000040   030080E2           ADD      R0,R0,#+3
   \   00000044   0390C0E3           BIC      R9,R0,#0x3
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   1086A0E1           LSL      R8,R0,R6
   \   00000050   10009DE5           LDR      R0,[SP, #+16]
   \                     ??GUI_BMP_SerializeEx_1:
   \   00000054   000049E0           SUB      R0,R9,R0
   \   00000058   00008DE5           STR      R0,[SP, #+0]
     77            NumColors    = (BPP > 8) ? 0 : (1 << BPP);
     78            Padding      = BytesPerLine - ((BPP > 8) ? (2 * xSize) : xSize);
     79            /* Write BITMAPFILEHEADER */
     80            BitmapOffset   = SIZEOF_BITMAPFILEHEADER
     81                           + SIZEOF_BITMAPINFOHEADER
     82                           + NumColors * 4;
   \   0000005C   3600A0E3           MOV      R0,#+54
   \   00000060   08A180E0           ADD      R10,R0,R8, LSL #+2
     83            FileSize       = BitmapOffset
     84                           + ySize * BytesPerLine;
     85            _SendU16(pfSerialize, DIB_HEADER_MARKER, p);       /* bfType */
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   4200A0E3           MOV      R0,#+66
   \   0000006C   34FF2FE1           BLX      R4
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   4D00A0E3           MOV      R0,#+77
   \   00000078   34FF2FE1           BLX      R4
     86            _SendU32(pfSerialize, FileSize, p);                /* bfSize */
   \   0000007C   99A72BE0           MLA      R11,R9,R7,R10
   \   00000080   0510A0E1           MOV      R1,R5
   \   00000084   FF000BE2           AND      R0,R11,#0xFF
   \   00000088   34FF2FE1           BLX      R4
   \   0000008C   0B98A0E1           LSL      R9,R11,#+16
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   290CA0E1           LSR      R0,R9,#+24
   \   00000098   34FF2FE1           BLX      R4
   \   0000009C   2B98A0E1           LSR      R9,R11,#+16
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   FF0009E2           AND      R0,R9,#0xFF
   \   000000A8   34FF2FE1           BLX      R4
   \   000000AC   0510A0E1           MOV      R1,R5
   \   000000B0   2904A0E1           LSR      R0,R9,#+8
   \   000000B4   34FF2FE1           BLX      R4
     87            _SendU32(pfSerialize, 0, p);                       /* bfReserved1, bfReserved2 */
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   34FF2FE1           BLX      R4
   \   000000C4   0510A0E1           MOV      R1,R5
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   34FF2FE1           BLX      R4
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   34FF2FE1           BLX      R4
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   34FF2FE1           BLX      R4
     88            _SendU32(pfSerialize, BitmapOffset, p);            /* bfOffBits */
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   FF000AE2           AND      R0,R10,#0xFF
   \   000000F0   34FF2FE1           BLX      R4
   \   000000F4   0A98A0E1           LSL      R9,R10,#+16
   \   000000F8   0510A0E1           MOV      R1,R5
   \   000000FC   290CA0E1           LSR      R0,R9,#+24
   \   00000100   34FF2FE1           BLX      R4
   \   00000104   2A98A0E1           LSR      R9,R10,#+16
   \   00000108   0510A0E1           MOV      R1,R5
   \   0000010C   FF0009E2           AND      R0,R9,#0xFF
   \   00000110   34FF2FE1           BLX      R4
   \   00000114   0510A0E1           MOV      R1,R5
   \   00000118   2904A0E1           LSR      R0,R9,#+8
   \   0000011C   34FF2FE1           BLX      R4
     89            /* Write BITMAPINFOHEADER */
     90            _SendU32(pfSerialize, SIZEOF_BITMAPINFOHEADER, p); /* biSize */
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   2800A0E3           MOV      R0,#+40
   \   00000128   34FF2FE1           BLX      R4
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   34FF2FE1           BLX      R4
   \   00000138   0510A0E1           MOV      R1,R5
   \   0000013C   0000A0E3           MOV      R0,#+0
   \   00000140   34FF2FE1           BLX      R4
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   34FF2FE1           BLX      R4
     91            _SendU32(pfSerialize, xSize, p);                   /* biWidth */
   \   00000150   10909DE5           LDR      R9,[SP, #+16]
   \   00000154   0510A0E1           MOV      R1,R5
   \   00000158   FF0009E2           AND      R0,R9,#0xFF
   \   0000015C   34FF2FE1           BLX      R4
   \   00000160   09A8A0E1           LSL      R10,R9,#+16
   \   00000164   0510A0E1           MOV      R1,R5
   \   00000168   2A0CA0E1           LSR      R0,R10,#+24
   \   0000016C   34FF2FE1           BLX      R4
   \   00000170   2998A0E1           LSR      R9,R9,#+16
   \   00000174   0510A0E1           MOV      R1,R5
   \   00000178   FF0009E2           AND      R0,R9,#0xFF
   \   0000017C   34FF2FE1           BLX      R4
   \   00000180   0510A0E1           MOV      R1,R5
   \   00000184   2904A0E1           LSR      R0,R9,#+8
   \   00000188   34FF2FE1           BLX      R4
     92            _SendU32(pfSerialize, ySize, p);                   /* biHeighth */
   \   0000018C   0510A0E1           MOV      R1,R5
   \   00000190   FF0007E2           AND      R0,R7,#0xFF
   \   00000194   34FF2FE1           BLX      R4
   \   00000198   0798A0E1           LSL      R9,R7,#+16
   \   0000019C   0510A0E1           MOV      R1,R5
   \   000001A0   290CA0E1           LSR      R0,R9,#+24
   \   000001A4   34FF2FE1           BLX      R4
   \   000001A8   2798A0E1           LSR      R9,R7,#+16
   \   000001AC   0510A0E1           MOV      R1,R5
   \   000001B0   FF0009E2           AND      R0,R9,#0xFF
   \   000001B4   34FF2FE1           BLX      R4
   \   000001B8   0510A0E1           MOV      R1,R5
   \   000001BC   2904A0E1           LSR      R0,R9,#+8
   \   000001C0   34FF2FE1           BLX      R4
     93            _SendU16(pfSerialize, 1, p);                       /* biPlanes */
   \   000001C4   0510A0E1           MOV      R1,R5
   \   000001C8   0100A0E3           MOV      R0,#+1
   \   000001CC   34FF2FE1           BLX      R4
   \   000001D0   0510A0E1           MOV      R1,R5
   \   000001D4   0000A0E3           MOV      R0,#+0
   \   000001D8   34FF2FE1           BLX      R4
     94            _SendU16(pfSerialize, (BPP  <= 8) ? 8 : 16, p);    /* biBitCount */
   \   000001DC   090056E3           CMP      R6,#+9
   \   000001E0   0890A0B3           MOVLT    R9,#+8
   \   000001E4   1090A0A3           MOVGE    R9,#+16
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   0900A0E1           MOV      R0,R9
   \   000001F0   34FF2FE1           BLX      R4
   \   000001F4   0510A0E1           MOV      R1,R5
   \   000001F8   2904A0E1           LSR      R0,R9,#+8
   \   000001FC   34FF2FE1           BLX      R4
     95            _SendU32(pfSerialize, 0, p);                       /* biCompression */
   \   00000200   0510A0E1           MOV      R1,R5
   \   00000204   0000A0E3           MOV      R0,#+0
   \   00000208   34FF2FE1           BLX      R4
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   0000A0E3           MOV      R0,#+0
   \   00000214   34FF2FE1           BLX      R4
   \   00000218   0510A0E1           MOV      R1,R5
   \   0000021C   0000A0E3           MOV      R0,#+0
   \   00000220   34FF2FE1           BLX      R4
   \   00000224   0510A0E1           MOV      R1,R5
   \   00000228   0000A0E3           MOV      R0,#+0
   \   0000022C   34FF2FE1           BLX      R4
     96            _SendU32(pfSerialize, 0, p);                       /* biSizeImage */
   \   00000230   0510A0E1           MOV      R1,R5
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   34FF2FE1           BLX      R4
   \   0000023C   0510A0E1           MOV      R1,R5
   \   00000240   0000A0E3           MOV      R0,#+0
   \   00000244   34FF2FE1           BLX      R4
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   34FF2FE1           BLX      R4
   \   00000254   0510A0E1           MOV      R1,R5
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   34FF2FE1           BLX      R4
     97            _SendU32(pfSerialize, 0, p);                       /* biXPelsPerMeter */
   \   00000260   0510A0E1           MOV      R1,R5
   \   00000264   0000A0E3           MOV      R0,#+0
   \   00000268   34FF2FE1           BLX      R4
   \   0000026C   0510A0E1           MOV      R1,R5
   \   00000270   0000A0E3           MOV      R0,#+0
   \   00000274   34FF2FE1           BLX      R4
   \   00000278   0510A0E1           MOV      R1,R5
   \   0000027C   0000A0E3           MOV      R0,#+0
   \   00000280   34FF2FE1           BLX      R4
   \   00000284   0510A0E1           MOV      R1,R5
   \   00000288   0000A0E3           MOV      R0,#+0
   \   0000028C   34FF2FE1           BLX      R4
     98            _SendU32(pfSerialize, 0, p);                       /* biYPelsPerMeter */
   \   00000290   0510A0E1           MOV      R1,R5
   \   00000294   0000A0E3           MOV      R0,#+0
   \   00000298   34FF2FE1           BLX      R4
   \   0000029C   0510A0E1           MOV      R1,R5
   \   000002A0   0000A0E3           MOV      R0,#+0
   \   000002A4   34FF2FE1           BLX      R4
   \   000002A8   0510A0E1           MOV      R1,R5
   \   000002AC   0000A0E3           MOV      R0,#+0
   \   000002B0   34FF2FE1           BLX      R4
   \   000002B4   0510A0E1           MOV      R1,R5
   \   000002B8   0000A0E3           MOV      R0,#+0
   \   000002BC   34FF2FE1           BLX      R4
     99            _SendU32(pfSerialize, NumColors, p);               /* biClrUsed */
   \   000002C0   0510A0E1           MOV      R1,R5
   \   000002C4   FF0008E2           AND      R0,R8,#0xFF
   \   000002C8   34FF2FE1           BLX      R4
   \   000002CC   0898A0E1           LSL      R9,R8,#+16
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   290CA0E1           LSR      R0,R9,#+24
   \   000002D8   34FF2FE1           BLX      R4
   \   000002DC   2898A0E1           LSR      R9,R8,#+16
   \   000002E0   0510A0E1           MOV      R1,R5
   \   000002E4   FF0009E2           AND      R0,R9,#0xFF
   \   000002E8   34FF2FE1           BLX      R4
   \   000002EC   0510A0E1           MOV      R1,R5
   \   000002F0   2904A0E1           LSR      R0,R9,#+8
   \   000002F4   34FF2FE1           BLX      R4
    100            _SendU32(pfSerialize, 0, p);                       /* biClrImportant */
   \   000002F8   0510A0E1           MOV      R1,R5
   \   000002FC   0000A0E3           MOV      R0,#+0
   \   00000300   34FF2FE1           BLX      R4
   \   00000304   0510A0E1           MOV      R1,R5
   \   00000308   0000A0E3           MOV      R0,#+0
   \   0000030C   34FF2FE1           BLX      R4
   \   00000310   0510A0E1           MOV      R1,R5
   \   00000314   0000A0E3           MOV      R0,#+0
   \   00000318   34FF2FE1           BLX      R4
   \   0000031C   0510A0E1           MOV      R1,R5
   \   00000320   0000A0E3           MOV      R0,#+0
   \   00000324   34FF2FE1           BLX      R4
    101            /* Write palette */
    102            for (i = 0; i < NumColors; i++) {
   \   00000328   0090A0E3           MOV      R9,#+0
   \   0000032C   010058E3           CMP      R8,#+1
   \   00000330   170000BA           BLT      ??GUI_BMP_SerializeEx_2
    103              U32 Color;
    104              Color = GUI_Index2Color(i);
   \                     ??GUI_BMP_SerializeEx_3:
   \   00000334   0900A0E1           MOV      R0,R9
   \   00000338   ........           BL       GUI_Index2Color
    105              Color = ((Color >> 16) & 255) | (Color & 0xff00) | ((Color & 0xff) << 16);
    106              _SendU32(pfSerialize, Color, p);
   \   0000033C   FF10A0E3           MOV      R1,#+255
   \   00000340   201801E0           AND      R1,R1,R0, LSR #+16
   \   00000344   FF2C00E2           AND      R2,R0,#0xFF00
   \   00000348   011082E1           ORR      R1,R2,R1
   \   0000034C   FF0000E2           AND      R0,R0,#0xFF
   \   00000350   00A881E1           ORR      R10,R1,R0, LSL #+16
   \   00000354   0510A0E1           MOV      R1,R5
   \   00000358   FF000AE2           AND      R0,R10,#0xFF
   \   0000035C   34FF2FE1           BLX      R4
   \   00000360   0AB8A0E1           LSL      R11,R10,#+16
   \   00000364   0510A0E1           MOV      R1,R5
   \   00000368   2B0CA0E1           LSR      R0,R11,#+24
   \   0000036C   34FF2FE1           BLX      R4
   \   00000370   2A08A0E1           LSR      R0,R10,#+16
   \   00000374   0510A0E1           MOV      R1,R5
   \   00000378   34FF2FE1           BLX      R4
   \   0000037C   0510A0E1           MOV      R1,R5
   \   00000380   0000A0E3           MOV      R0,#+0
   \   00000384   34FF2FE1           BLX      R4
    107            }
   \   00000388   019089E2           ADD      R9,R9,#+1
   \   0000038C   080059E1           CMP      R9,R8
   \   00000390   E7FFFFBA           BLT      ??GUI_BMP_SerializeEx_3
    108            /* Write pixels */
    109            for (y = ySize - 1; y >= 0; y--) {
   \                     ??GUI_BMP_SerializeEx_2:
   \   00000394   017057E2           SUBS     R7,R7,#+1
   \   00000398   4500004A           BMI      ??GUI_BMP_SerializeEx_4
   \   0000039C   0C009DE5           LDR      R0,[SP, #+12]
   \   000003A0   008087E0           ADD      R8,R7,R0
    110              for (x = 0; x < xSize; x++) {
   \                     ??GUI_BMP_SerializeEx_5:
   \   000003A4   10009DE5           LDR      R0,[SP, #+16]
   \   000003A8   010050E3           CMP      R0,#+1
   \   000003AC   290000BA           BLT      ??GUI_BMP_SerializeEx_6
   \   000003B0   08909DE5           LDR      R9,[SP, #+8]
   \   000003B4   00A0A0E1           MOV      R10,R0
    111                if (BPP <= 8) {
   \                     ??GUI_BMP_SerializeEx_7:
   \   000003B8   090056E3           CMP      R6,#+9
   \   000003BC   0810A0E1           MOV      R1,R8
   \   000003C0   0900A0E1           MOV      R0,R9
   \   000003C4   030000AA           BGE      ??GUI_BMP_SerializeEx_8
    112                  pfSerialize(LCD_GetPixelIndex(x0 + x, y0 + y), p);
   \   000003C8   ........           BL       LCD_GetPixelIndex
   \   000003CC   0510A0E1           MOV      R1,R5
   \   000003D0   FF0000E2           AND      R0,R0,#0xFF
   \   000003D4   1B0000EA           B        ??GUI_BMP_SerializeEx_9
    113                } else {
    114                  U16 Color16;
    115                  U32 Color = LCD_GetPixelColor(x0 + x, y0 + y);
   \                     ??GUI_BMP_SerializeEx_8:
   \   000003D8   ........           BL       LCD_GetPixelColor
    116                  int b = ((Color >> 16) * 31 + 127) / 255;
    117                  int g = (((Color >> 8) & 255) * 31 + 127) / 255;
    118                  int r = ((Color & 255) * 31 + 127) / 255;
    119                  Color16 = (r << 10) | (g << 5) | b;       /* 16 bpp Bitmaps in windows are 555: rrrrrgggggbbbbb */
    120                  _SendU16(pfSerialize, Color16, p);
   \   000003DC   FF1000E2           AND      R1,R0,#0xFF
   \   000003E0   811261E0           RSB      R1,R1,R1, LSL #+5
   \   000003E4   ........           LDR      R3,??DataTable0  ;; 0x80808081
   \   000003E8   7F1081E2           ADD      R1,R1,#+127
   \   000003EC   913382E0           UMULL    R3,R2,R1,R3
   \   000003F0   ........           LDR      R12,??DataTable0  ;; 0x80808081
   \   000003F4   A213A0E1           LSR      R1,R2,#+7
   \   000003F8   FF20A0E3           MOV      R2,#+255
   \   000003FC   202402E0           AND      R2,R2,R0, LSR #+8
   \   00000400   822262E0           RSB      R2,R2,R2, LSL #+5
   \   00000404   7F2082E2           ADD      R2,R2,#+127
   \   00000408   92CC83E0           UMULL    R12,R3,R2,R12
   \   0000040C   2008A0E1           LSR      R0,R0,#+16
   \   00000410   A323A0E1           LSR      R2,R3,#+7
   \   00000414   8222A0E1           LSL      R2,R2,#+5
   \   00000418   800260E0           RSB      R0,R0,R0, LSL #+5
   \   0000041C   ........           LDR      R3,??DataTable0  ;; 0x80808081
   \   00000420   011582E1           ORR      R1,R2,R1, LSL #+10
   \   00000424   7F0080E2           ADD      R0,R0,#+127
   \   00000428   903382E0           UMULL    R3,R2,R0,R3
   \   0000042C   A2B381E1           ORR      R11,R1,R2, LSR #+7
   \   00000430   0510A0E1           MOV      R1,R5
   \   00000434   FF000BE2           AND      R0,R11,#0xFF
   \   00000438   34FF2FE1           BLX      R4
   \   0000043C   0BB8A0E1           LSL      R11,R11,#+16
   \   00000440   0510A0E1           MOV      R1,R5
   \   00000444   2B0CA0E1           LSR      R0,R11,#+24
   \                     ??GUI_BMP_SerializeEx_9:
   \   00000448   34FF2FE1           BLX      R4
    121                }
    122              }
   \   0000044C   019089E2           ADD      R9,R9,#+1
   \   00000450   01A05AE2           SUBS     R10,R10,#+1
   \   00000454   D7FFFF1A           BNE      ??GUI_BMP_SerializeEx_7
    123              /* Align pointer to next U32 */
    124              for (i = 0; i < Padding; i++) {
   \                     ??GUI_BMP_SerializeEx_6:
   \   00000458   00009DE5           LDR      R0,[SP, #+0]
   \   0000045C   010050E3           CMP      R0,#+1
   \   00000460   0F0000BA           BLT      ??GUI_BMP_SerializeEx_10
   \   00000464   0090A0E1           MOV      R9,R0
   \   00000468   010019E3           TST      R9,#0x1
   \   0000046C   0200000A           BEQ      ??GUI_BMP_SerializeEx_11
    125                pfSerialize(0, p);
   \   00000470   0510A0E1           MOV      R1,R5
   \   00000474   0000A0E3           MOV      R0,#+0
   \   00000478   34FF2FE1           BLX      R4
   \                     ??GUI_BMP_SerializeEx_11:
   \   0000047C   A990B0E1           LSRS     R9,R9,#+1
   \   00000480   0700000A           BEQ      ??GUI_BMP_SerializeEx_10
   \                     ??GUI_BMP_SerializeEx_12:
   \   00000484   0510A0E1           MOV      R1,R5
   \   00000488   0000A0E3           MOV      R0,#+0
   \   0000048C   34FF2FE1           BLX      R4
   \   00000490   0510A0E1           MOV      R1,R5
   \   00000494   0000A0E3           MOV      R0,#+0
   \   00000498   34FF2FE1           BLX      R4
    126              }
   \   0000049C   019059E2           SUBS     R9,R9,#+1
   \   000004A0   F7FFFF1A           BNE      ??GUI_BMP_SerializeEx_12
    127            }
   \                     ??GUI_BMP_SerializeEx_10:
   \   000004A4   017047E2           SUB      R7,R7,#+1
   \   000004A8   018048E2           SUB      R8,R8,#+1
   \   000004AC   000057E3           CMP      R7,#+0
   \   000004B0   BBFFFF5A           BPL      ??GUI_BMP_SerializeEx_5
    128            GUI_UNLOCK();
   \                     ??GUI_BMP_SerializeEx_4:
   \   000004B4   14D08DE2           ADD      SP,SP,#+20
   \   000004B8   F04FBDE8           POP      {R4-R11,LR}
   \   000004BC   ........           B        GUI_Unlock       ;; tailcall
    129          }
    130          
    131          /*********************************************************************
    132          *
    133          *       GUI_BMP_Serialize
    134          */

   \                                 In section .text, align 4, keep-with-next
    135          void GUI_BMP_Serialize(GUI_CALLBACK_VOID_U8_P * pfSerialize, void * p) {
   \                     GUI_BMP_Serialize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    136            GUI_BMP_SerializeEx(pfSerialize, 0, 0, LCD_GetXSize(), LCD_GetYSize(), p);
   \   00000010   ........           BL       LCD_GetYSize
   \   00000014   0060A0E1           MOV      R6,R0
   \   00000018   ........           BL       LCD_GetXSize
   \   0000001C   0030A0E1           MOV      R3,R0
   \   00000020   04508DE5           STR      R5,[SP, #+4]
   \   00000024   00608DE5           STR      R6,[SP, #+0]
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_BMP_SerializeEx
    137          }
   \   00000038   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   81808080           DC32     0x80808081
    138          
    139          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_BMP_Serialize       24
     GUI_BMP_SerializeEx     56


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     GUI_BMP_SerializeEx 1216
     GUI_BMP_Serialize     64
     ??DataTable0           4

 
 1 284 bytes in section .text
 
 1 284 bytes of CODE memory

Errors: none
Warnings: none
