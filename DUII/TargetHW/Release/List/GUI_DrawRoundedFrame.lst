###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:41 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawRoundedFrame.c              #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawRoundedFrame.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawRoundedFrame.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawRoundedFrame.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawRoundedFrame.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawRoundedFrame.c
     19          Purpose     : Implementation of GUI_DrawRoundedFrame
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <math.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DrawRoundedFrame
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DrawRoundedFrame(int x0, int y0, int x1, int y1, int r, int w) {
   \                     _DrawRoundedFrame:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
     38          #if defined(GUI_OPTIMIZE_ROUNDING)
     39          
     40            I32 rr0, rr1, yy;
     41            int y, c0, c1, d, xs, xe, MinSize;
     42          
     43            if (w < 1) {
     44              return;
     45            }
     46            MinSize = ((y1 - y0 + 1) < (x1 - x0 + 1)) ? y1 - y0 + 1 : x1 - x0 + 1;
     47            if (MinSize < ((r - 2) << 1)) {
     48              r = (MinSize >> 1) + 1;
     49            }
     50            rr0 = (I32)r * r;
     51            rr1 = (I32)(r - w) * (r - w);
     52            for (y = r - 1; y; y--) {
     53              yy = (I32)y * y;
     54              c0 = GUI__sqrt32(rr0 - yy);
     55              if (y < (r - w)) {
     56                c1 = GUI__sqrt32(rr1 - yy);
     57                d  = c0 - c1;
     58              } else {
     59                d  = c0;
     60              }
     61              xs = x0 + r - c0 - 1;
     62              xe = xs + d - 1;
     63              LCD_DrawHLine(xs, y0 + (r - y) - 1, xe);
     64              LCD_DrawHLine(xs, y1 - (r - y) + 1, xe);
     65              xe = x1 - r + c0 + 1;
     66              xs = xe - d + 1;
     67              LCD_DrawHLine(xs, y0 + (r - y) - 1, xe);
     68              LCD_DrawHLine(xs, y1 - (r - y) + 1, xe);
     69            }
     70            r -= 1;
     71            LCD_FillRect(x0 + r, y0, x1 - r, y0 + w - 1);
     72            LCD_FillRect(x0 + r, y1 - w + 1, x1 - r, y1);
     73            LCD_FillRect(x0, y0 + r, x0 + w - 1, y1 - r);
     74            LCD_FillRect(x1 - w + 1, y0 + r, x1, y1 - r);
     75          
     76          #else
     77          
     78            I32 rr0, rr1;
     79            int i, y, ye, c0, c1, d, xs, xe;
     80          
     81            if (w < 1) {
   \   00000008   54009DE5           LDR      R0,[SP, #+84]
   \   0000000C   50409DE5           LDR      R4,[SP, #+80]
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   740000BA           BLT      ??_DrawRoundedFrame_0
     82              return;
     83            } else {
     84              if (((y1 - y0 + 1) >= (r << 1)) && ((x1 - x0 + 1) >= (r << 1))) {
   \   00000018   20209DE5           LDR      R2,[SP, #+32]
   \   0000001C   021043E0           SUB      R1,R3,R2
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   840051E1           CMP      R1,R4, LSL #+1
   \   00000028   6F0000BA           BLT      ??_DrawRoundedFrame_0
   \   0000002C   24109DE5           LDR      R1,[SP, #+36]
   \   00000030   1C209DE5           LDR      R2,[SP, #+28]
   \   00000034   021041E0           SUB      R1,R1,R2
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   840051E1           CMP      R1,R4, LSL #+1
   \   00000040   690000BA           BLT      ??_DrawRoundedFrame_0
     85                rr0 = (I32)r * r;
   \   00000044   940401E0           MUL      R1,R4,R4
     86                rr1 = (I32)(r - w) * (r - w);
     87                y  = r;
     88                for (i = y0; i < (y0 + r); i++, y--) {
   \   00000048   20609DE5           LDR      R6,[SP, #+32]
   \   0000004C   14108DE5           STR      R1,[SP, #+20]
   \   00000050   54109DE5           LDR      R1,[SP, #+84]
   \   00000054   0450A0E1           MOV      R5,R4
   \   00000058   011044E0           SUB      R1,R4,R1
   \   0000005C   0C108DE5           STR      R1,[SP, #+12]
   \   00000060   0120A0E1           MOV      R2,R1
   \   00000064   920101E0           MUL      R1,R2,R1
   \   00000068   10108DE5           STR      R1,[SP, #+16]
   \   0000006C   061084E0           ADD      R1,R4,R6
   \   00000070   08108DE5           STR      R1,[SP, #+8]
   \   00000074   010056E1           CMP      R6,R1
   \   00000078   350000AA           BGE      ??_DrawRoundedFrame_1
   \   0000007C   24109DE5           LDR      R1,[SP, #+36]
   \   00000080   0370A0E1           MOV      R7,R3
   \   00000084   041041E0           SUB      R1,R1,R4
   \   00000088   04108DE5           STR      R1,[SP, #+4]
   \   0000008C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000090   011084E0           ADD      R1,R4,R1
   \   00000094   00108DE5           STR      R1,[SP, #+0]
     89                  c0 = (int)sqrt((float)(rr0 - (I32)y * y));
   \                     ??_DrawRoundedFrame_2:
   \   00000098   950509E0           MUL      R9,R5,R5
   \   0000009C   14009DE5           LDR      R0,[SP, #+20]
   \   000000A0   090040E0           SUB      R0,R0,R9
   \   000000A4   ........           BL       __aeabi_i2f
   \   000000A8   ........           BL       __aeabi_f2d
   \   000000AC   ........           BL       sqrt
   \   000000B0   ........           BL       __aeabi_d2iz
   \   000000B4   0080A0E1           MOV      R8,R0
     90                  if (y < (r - w)) {
   \   000000B8   0C009DE5           LDR      R0,[SP, #+12]
   \   000000BC   000055E1           CMP      R5,R0
   \   000000C0   040000AA           BGE      ??_DrawRoundedFrame_3
     91                    c1 = GUI__sqrt32(rr1 - (I32)y * y);
     92                    d  = c0 - c1;
   \   000000C4   10009DE5           LDR      R0,[SP, #+16]
   \   000000C8   090040E0           SUB      R0,R0,R9
   \   000000CC   ........           BL       GUI__sqrt32
   \   000000D0   009048E0           SUB      R9,R8,R0
   \   000000D4   000000EA           B        ??_DrawRoundedFrame_4
     93                  } else {
     94                    d  = c0;
   \                     ??_DrawRoundedFrame_3:
   \   000000D8   0890A0E1           MOV      R9,R8
     95                  }
     96                  xs = x0 + r - c0;
   \                     ??_DrawRoundedFrame_4:
   \   000000DC   00009DE5           LDR      R0,[SP, #+0]
     97                  xe = xs + d - 1;
     98                  ye = i;
     99                  LCD_DrawHLine(xs, ye, xe);
   \   000000E0   0610A0E1           MOV      R1,R6
   \   000000E4   08A040E0           SUB      R10,R0,R8
   \   000000E8   09008AE0           ADD      R0,R10,R9
   \   000000EC   01B040E2           SUB      R11,R0,#+1
   \   000000F0   0B20A0E1           MOV      R2,R11
   \   000000F4   0A00A0E1           MOV      R0,R10
   \   000000F8   ........           BL       LCD_DrawHLine
    100                  ye = y1 - (i - y0);
    101                  LCD_DrawHLine(xs, ye, xe);
   \   000000FC   0B20A0E1           MOV      R2,R11
   \   00000100   0710A0E1           MOV      R1,R7
   \   00000104   0A00A0E1           MOV      R0,R10
   \   00000108   ........           BL       LCD_DrawHLine
    102                  xe = x1 - r + c0;
   \   0000010C   04009DE5           LDR      R0,[SP, #+4]
    103                  xs = xe - d + 1;
    104                  ye = i;
    105                  LCD_DrawHLine(xs, i, xe);
   \   00000110   0610A0E1           MOV      R1,R6
   \   00000114   008088E0           ADD      R8,R8,R0
   \   00000118   090048E0           SUB      R0,R8,R9
   \   0000011C   019080E2           ADD      R9,R0,#+1
   \   00000120   0820A0E1           MOV      R2,R8
   \   00000124   0900A0E1           MOV      R0,R9
   \   00000128   ........           BL       LCD_DrawHLine
    106                  ye = y1 - (i - y0);
    107                  LCD_DrawHLine(xs, ye, xe);
   \   0000012C   0820A0E1           MOV      R2,R8
   \   00000130   0710A0E1           MOV      R1,R7
   \   00000134   0900A0E1           MOV      R0,R9
   \   00000138   ........           BL       LCD_DrawHLine
    108                }
   \   0000013C   08009DE5           LDR      R0,[SP, #+8]
   \   00000140   016086E2           ADD      R6,R6,#+1
   \   00000144   015045E2           SUB      R5,R5,#+1
   \   00000148   017047E2           SUB      R7,R7,#+1
   \   0000014C   000056E1           CMP      R6,R0
   \   00000150   D0FFFFBA           BLT      ??_DrawRoundedFrame_2
    109                LCD_FillRect(x0 + r, y0, x1 - r, y0 + w - 1);
   \                     ??_DrawRoundedFrame_1:
   \   00000154   24109DE5           LDR      R1,[SP, #+36]
   \   00000158   20009DE5           LDR      R0,[SP, #+32]
   \   0000015C   041041E0           SUB      R1,R1,R4
   \   00000160   04108DE5           STR      R1,[SP, #+4]
   \   00000164   1C109DE5           LDR      R1,[SP, #+28]
   \   00000168   04209DE5           LDR      R2,[SP, #+4]
   \   0000016C   011084E0           ADD      R1,R4,R1
   \   00000170   00108DE5           STR      R1,[SP, #+0]
   \   00000174   54109DE5           LDR      R1,[SP, #+84]
   \   00000178   000081E0           ADD      R0,R1,R0
   \   0000017C   013040E2           SUB      R3,R0,#+1
   \   00000180   20109DE5           LDR      R1,[SP, #+32]
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   ........           BL       LCD_FillRect
    110                LCD_FillRect(x0 + r, y1 - w + 1, x1 - r, y1);
   \   0000018C   28309DE5           LDR      R3,[SP, #+40]
   \   00000190   54109DE5           LDR      R1,[SP, #+84]
   \   00000194   04209DE5           LDR      R2,[SP, #+4]
   \   00000198   010043E0           SUB      R0,R3,R1
   \   0000019C   011080E2           ADD      R1,R0,#+1
   \   000001A0   00009DE5           LDR      R0,[SP, #+0]
   \   000001A4   ........           BL       LCD_FillRect
    111                LCD_FillRect(x0, y0 + r, x0 + w - 1, y1 - r);
   \   000001A8   28009DE5           LDR      R0,[SP, #+40]
   \   000001AC   54109DE5           LDR      R1,[SP, #+84]
   \   000001B0   044040E0           SUB      R4,R0,R4
   \   000001B4   1C009DE5           LDR      R0,[SP, #+28]
   \   000001B8   0430A0E1           MOV      R3,R4
   \   000001BC   000081E0           ADD      R0,R1,R0
   \   000001C0   012040E2           SUB      R2,R0,#+1
   \   000001C4   08109DE5           LDR      R1,[SP, #+8]
   \   000001C8   1C009DE5           LDR      R0,[SP, #+28]
   \   000001CC   ........           BL       LCD_FillRect
    112                LCD_FillRect(x1 - w + 1, y0 + r, x1, y1 - r);
   \   000001D0   24209DE5           LDR      R2,[SP, #+36]
   \   000001D4   54C09DE5           LDR      R12,[SP, #+84]
   \   000001D8   0430A0E1           MOV      R3,R4
   \   000001DC   0C0042E0           SUB      R0,R2,R12
   \   000001E0   08109DE5           LDR      R1,[SP, #+8]
   \   000001E4   010080E2           ADD      R0,R0,#+1
   \   000001E8   ........           BL       LCD_FillRect
   \                     ??_DrawRoundedFrame_0:
   \   000001EC   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000001F0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    113              }
    114            }
    115          
    116          #endif
    117          }
    118          
    119          /*********************************************************************
    120          *
    121          *       Public code
    122          *
    123          **********************************************************************
    124          */
    125          /*********************************************************************
    126          *
    127          *       GUI_DrawRoundedFrame
    128          */

   \                                 In section .text, align 4, keep-with-next
    129          void GUI_DrawRoundedFrame(int x0, int y0, int x1, int y1, int r, int w) {
   \                     GUI_DrawRoundedFrame:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   34809DE5           LDR      R8,[SP, #+52]
   \   0000000C   0090A0E1           MOV      R9,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   30709DE5           LDR      R7,[SP, #+48]
    130            if (w == 1) {
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0200001A           BNE      ??GUI_DrawRoundedFrame_0
    131              GUI_DrawRoundedRect(x0, y0, x1, y1, r);
   \   00000028   00708DE5           STR      R7,[SP, #+0]
   \   0000002C   ........           BL       GUI_DrawRoundedRect
   \   00000030   1A0000EA           B        ??GUI_DrawRoundedFrame_1
    132            } else {
    133              #if (GUI_WINSUPPORT)
    134                GUI_RECT Rect;
    135              #endif
    136              GUI_LOCK();
   \                     ??GUI_DrawRoundedFrame_0:
   \   00000034   ........           BL       GUI_Lock
    137              #if (GUI_WINSUPPORT)
    138                WM_ADDORG(x0,y0);
   \   00000038   ........           LDR      R0,??DataTable0
   \   0000003C   401090E5           LDR      R1,[R0, #+64]
   \   00000040   440090E5           LDR      R0,[R0, #+68]
   \   00000044   099081E0           ADD      R9,R1,R9
   \   00000048   044080E0           ADD      R4,R0,R4
    139                WM_ADDORG(x1,y1);
   \   0000004C   055081E0           ADD      R5,R1,R5
   \   00000050   066080E0           ADD      R6,R0,R6
    140                Rect.x0 = x0; Rect.x1 = x1;
   \   00000054   B890CDE1           STRH     R9,[SP, #+8]
   \   00000058   BC50CDE1           STRH     R5,[SP, #+12]
    141                Rect.y0 = y0; Rect.y1 = y1;
   \   0000005C   BA40CDE1           STRH     R4,[SP, #+10]
   \   00000060   BE60CDE1           STRH     R6,[SP, #+14]
    142                WM_ITERATE_START(&Rect); {
   \   00000064   08008DE2           ADD      R0,SP,#+8
   \   00000068   ........           BL       WM__InitIVRSearch
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0900000A           BEQ      ??GUI_DrawRoundedFrame_2
    143              #endif
    144              _DrawRoundedFrame(x0, y0, x1, y1, r, w);
   \                     ??GUI_DrawRoundedFrame_3:
   \   00000074   04808DE5           STR      R8,[SP, #+4]
   \   00000078   00708DE5           STR      R7,[SP, #+0]
   \   0000007C   0630A0E1           MOV      R3,R6
   \   00000080   0520A0E1           MOV      R2,R5
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   0900A0E1           MOV      R0,R9
   \   0000008C   ........           BL       _DrawRoundedFrame
    145              #if (GUI_WINSUPPORT)
    146                } WM_ITERATE_END();
   \   00000090   ........           BL       WM__GetNextIVR
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   F5FFFF1A           BNE      ??GUI_DrawRoundedFrame_3
    147              #endif
    148              GUI_UNLOCK();
   \                     ??GUI_DrawRoundedFrame_2:
   \   0000009C   ........           BL       GUI_Unlock
    149            }
    150          }
   \                     ??GUI_DrawRoundedFrame_1:
   \   000000A0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000A4   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     GUI_Context
    151          
    152          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     GUI_DrawRoundedFrame     48
     _DrawRoundedFrame        80


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _DrawRoundedFrame     500
     GUI_DrawRoundedFrame  168
     ??DataTable0            4

 
 672 bytes in section .text
 
 672 bytes of CODE memory

Errors: none
Warnings: none
