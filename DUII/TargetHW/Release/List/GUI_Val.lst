###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:59 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_Val.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_Val.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_Val.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_Val.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_Val.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIVAL.C
     19          Purpose     : Routines to display values as dec, binary or hex
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          #include "GUI_Debug.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Public code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       GUI_DispDecShift
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          void GUI_DispDecShift(I32 v, U8 Len, U8 Shift) {
   \                     GUI_DispDecShift:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
     39          	char ac[12];
     40          	char* s = ac;
   \   00000008   04C08DE2           ADD      R12,SP,#+4
   \   0000000C   00C08DE5           STR      R12,[SP, #+0]
     41            GUI_AddDecShift(v, Len, Shift, &s);
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   ........           BL       GUI_AddDecShift
     42            GUI_DispString(ac);
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   ........           BL       GUI_DispString
     43          }
   \   00000020   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000024   0080BDE8           POP      {PC}             ;; return
     44          
     45          /*********************************************************************
     46          *
     47          *       GUI_DispSDecShift
     48          */

   \                                 In section .text, align 4, keep-with-next
     49          void GUI_DispSDecShift(I32 v, U8 Len, U8 Shift) {
   \                     GUI_DispSDecShift:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0140A0E1           MOV      R4,R1
     50          	char ac[12];
     51          	char* s = ac;
   \   00000010   04208DE2           ADD      R2,SP,#+4
   \   00000014   00208DE5           STR      R2,[SP, #+0]
     52            v = GUI_AddSign(v, &s);
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   ........           BL       GUI_AddSign
     53            if (v > 0) {
   \   00000020   010050E3           CMP      R0,#+1
     54              Len--;
   \   00000024   014044A2           SUBGE    R4,R4,#+1
     55            }
     56            GUI_AddDecShift(v, /*--*/Len, Shift, &s);
   \   00000028   0D30A0E1           MOV      R3,SP
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   FF1004E2           AND      R1,R4,#0xFF
   \   00000034   ........           BL       GUI_AddDecShift
     57            GUI_DispString(ac);
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   ........           BL       GUI_DispString
     58          }
   \   00000040   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
     59          
     60          /*********************************************************************
     61          *
     62          *       GUI_DispDecMin
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          void GUI_DispDecMin(I32 v) {
   \                     GUI_DispDecMin:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
     65          	char ac[12];
     66          	char* s = ac;
   \   00000008   04208DE2           ADD      R2,SP,#+4
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
     67            GUI_AddDecMin(v, &s);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   ........           BL       GUI_AddDecMin
     68            GUI_DispString(ac);
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   ........           BL       GUI_DispString
     69          }
   \   00000020   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000024   0080BDE8           POP      {PC}             ;; return
     70          
     71          /*********************************************************************
     72          *
     73          *       GUI_DispDecSpace
     74          */

   \                                 In section .text, align 4, keep-with-next
     75          void GUI_DispDecSpace(I32 v, U8 MaxDigits) {
   \                     GUI_DispDecSpace:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0150A0E1           MOV      R5,R1
     76          	char ac[12];
     77          	char* s = ac;
   \   0000000C   04108DE2           ADD      R1,SP,#+4
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
     78            U8 Len;
     79            Len = GUI_Long2Len(v);
   \   00000018   ........           BL       GUI_Long2Len
   \   0000001C   006045E0           SUB      R6,R5,R0
     80            while (Len++ < MaxDigits) {
   \   00000020   000CA0E1           MOV      R0,R0, LSL #+24
   \   00000024   200C55E1           CMP      R5,R0, LSR #+24
   \   00000028   0700009A           BLS      ??GUI_DispDecSpace_0
     81              *s++ = ' ';
   \   0000002C   2020A0E3           MOV      R2,#+32
   \   00000030   FF1006E2           AND      R1,R6,#0xFF
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   ........           BL       __aeabi_memset
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   FF6006E2           AND      R6,R6,#0xFF
   \   00000044   000086E0           ADD      R0,R6,R0
   \   00000048   00008DE5           STR      R0,[SP, #+0]
     82            }
     83            GUI_AddDecMin(v, &s);
   \                     ??GUI_DispDecSpace_0:
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       GUI_AddDecMin
     84            GUI_DispString(ac);
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           BL       GUI_DispString
     85          }
   \   00000060   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
     86          
     87          /*********************************************************************
     88          *
     89          *       GUI_DispSDec
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          void GUI_DispSDec(I32 v, U8 Len) {
   \                     GUI_DispSDec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0140A0E1           MOV      R4,R1
     92            GUI_DispSDecShift(v,Len,0);
   \   0000000C   04208DE2           ADD      R2,SP,#+4
   \   00000010   00208DE5           STR      R2,[SP, #+0]
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   ........           BL       GUI_AddSign
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   014044A2           SUBGE    R4,R4,#+1
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   FF1004E2           AND      R1,R4,#0xFF
   \   00000030   ........           BL       GUI_AddDecShift
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   ........           BL       GUI_DispString
     93          }
   \   0000003C   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     94          
     95          /*********************************************************************
     96          *
     97          *       GUI_DispDec
     98          */

   \                                 In section .text, align 4, keep-with-next
     99          void GUI_DispDec(I32 v, U8 Len) {
   \                     GUI_DispDec:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    100            GUI_DispDecShift(v, Len,0);
   \   00000008   04308DE2           ADD      R3,SP,#+4
   \   0000000C   00308DE5           STR      R3,[SP, #+0]
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   ........           BL       GUI_AddDecShift
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   ........           BL       GUI_DispString
    101          }
   \   00000024   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000028   0080BDE8           POP      {PC}             ;; return
    102          
    103          /*********************************************************************
    104          *
    105          *       GUI_DispDecAt
    106          */

   \                                 In section .text, align 4, keep-with-next
    107          void GUI_DispDecAt(I32 v, I16P x, I16P y, U8 Len) {
   \                     GUI_DispDecAt:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0310A0E1           MOV      R1,R3
    108          	char ac[12];
    109          	char* s = ac;
   \   00000010   04308DE2           ADD      R3,SP,#+4
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   00308DE5           STR      R3,[SP, #+0]
    110            GUI_AddDecShift(v, Len, 0, &s);
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   ........           BL       GUI_AddDecShift
    111            GUI_DispStringAt(ac, x, y);
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   ........           BL       GUI_DispStringAt
    112          }
   \   00000038   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    113          
    114          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     GUI_DispDec           24
     GUI_DispDecAt         32
     GUI_DispDecMin        24
     GUI_DispDecShift      24
     GUI_DispDecSpace      32
     GUI_DispSDec          24
     GUI_DispSDecShift     32


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     GUI_DispDecShift    40
     GUI_DispSDecShift   72
     GUI_DispDecMin      40
     GUI_DispDecSpace   104
     GUI_DispSDec        68
     GUI_DispDec         44
     GUI_DispDecAt       64

 
 432 bytes in section .text
 
 432 bytes of CODE memory

Errors: none
Warnings: none
