###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:15 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_SetOrientationC8.c              #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_SetOrientationC8.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_SetOrientationC8.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_SetOrientationC8.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_SetOrientationC8.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_SetOrientationC8.c
     19          Purpose     : Runtime display orientation with 8bpp cache
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #define PIXEL           U8
     24          #define API_NAME        GUI_OrientationAPI_C8
     25          #define BYTES_PER_PIXEL 1
     26          
     27          #include "GUI_SetOrientationCX.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine1BPP(struct GUI_DEVICE *, unsigned int, unsigned int, unsigned char const *, int, int, unsigned long const *)
   \                     _DrawBitLine1BPP:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   40009DE5           LDR      R0,[SP, #+64]
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   003090E5           LDR      R3,[R0, #+0]
   \   00000018   088094E5           LDR      R8,[R4, #+8]
   \   0000001C   0C308DE5           STR      R3,[SP, #+12]
   \   00000020   38609DE5           LDR      R6,[SP, #+56]
   \   00000024   049090E5           LDR      R9,[R0, #+4]
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   01A086E0           ADD      R10,R6,R1
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   3C709DE5           LDR      R7,[SP, #+60]
   \   00000038   08308DE2           ADD      R3,SP,#+8
   \   0000003C   10209DE5           LDR      R2,[SP, #+16]
   \   00000040   0A10A0E1           MOV      R1,R10
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   24C098E5           LDR      R12,[R8, #+36]
   \   0000004C   3CFF2FE1           BLX      R12
   \   00000050   281098E5           LDR      R1,[R8, #+40]
   \   00000054   04209DE5           LDR      R2,[SP, #+4]
   \   00000058   083098E5           LDR      R3,[R8, #+8]
   \   0000005C   00C098E5           LDR      R12,[R8, #+0]
   \   00000060   08009DE5           LDR      R0,[SP, #+8]
   \   00000064   1C1091E5           LDR      R1,[R1, #+28]
   \   00000068   93C222E0           MLA      R2,R3,R2,R12
   \   0000006C   91202BE0           MLA      R11,R1,R0,R2
   \   00000070   ........           LDR      R0,??DataTable5
   \   00000074   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000078   030000E2           AND      R0,R0,#0x3
   \   0000007C   030050E3           CMP      R0,#+3
   \   00000080   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000084   3900008A           BHI      ??_DrawBitLine1BPP_1
   \   00000088   020000EA           B        ??_DrawBitLine1BPP_2
   \   0000008C   1D0000EA           B        ??_DrawBitLine1BPP_3
   \   00000090   0F0000EA           B        ??_DrawBitLine1BPP_4
   \   00000094   1B0000EA           B        ??_DrawBitLine1BPP_3
   \                     ??_DrawBitLine1BPP_2:
   \   00000098   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000009C   8010A0E3           MOV      R1,#+128
   \   000000A0   510610E1           TST      R0,R1, ASR R6
   \   000000A4   0C009D05           LDREQ    R0,[SP, #+12]
   \   000000A8   0900A011           MOVNE    R0,R9
   \   000000AC   0000CBE5           STRB     R0,[R11, #+0]
   \   000000B0   016086E2           ADD      R6,R6,#+1
   \   000000B4   200098E5           LDR      R0,[R8, #+32]
   \   000000B8   080056E3           CMP      R6,#+8
   \   000000BC   0060A003           MOVEQ    R6,#+0
   \   000000C0   01508502           ADDEQ    R5,R5,#+1
   \   000000C4   0BB080E0           ADD      R11,R0,R11
   \   000000C8   017057E2           SUBS     R7,R7,#+1
   \   000000CC   F1FFFF1A           BNE      ??_DrawBitLine1BPP_2
   \   000000D0   260000EA           B        ??_DrawBitLine1BPP_1
   \                     ??_DrawBitLine1BPP_4:
   \   000000D4   0000D5E5           LDRB     R0,[R5, #+0]
   \   000000D8   8010A0E3           MOV      R1,#+128
   \   000000DC   510610E1           TST      R0,R1, ASR R6
   \   000000E0   0090CB15           STRBNE   R9,[R11, #+0]
   \   000000E4   016086E2           ADD      R6,R6,#+1
   \   000000E8   200098E5           LDR      R0,[R8, #+32]
   \   000000EC   080056E3           CMP      R6,#+8
   \   000000F0   0060A003           MOVEQ    R6,#+0
   \   000000F4   01508502           ADDEQ    R5,R5,#+1
   \   000000F8   0BB080E0           ADD      R11,R0,R11
   \   000000FC   017057E2           SUBS     R7,R7,#+1
   \   00000100   F3FFFF1A           BNE      ??_DrawBitLine1BPP_4
   \   00000104   190000EA           B        ??_DrawBitLine1BPP_1
   \                     ??_DrawBitLine1BPP_3:
   \   00000108   0C0094E5           LDR      R0,[R4, #+12]
   \   0000010C   149090E5           LDR      R9,[R0, #+20]
   \   00000110   100094E5           LDR      R0,[R4, #+16]
   \   00000114   080090E5           LDR      R0,[R0, #+8]
   \   00000118   30FF2FE1           BLX      R0
   \   0000011C   00008DE5           STR      R0,[SP, #+0]
   \                     ??_DrawBitLine1BPP_5:
   \   00000120   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000124   8010A0E3           MOV      R1,#+128
   \   00000128   510610E1           TST      R0,R1, ASR R6
   \   0000012C   0600000A           BEQ      ??_DrawBitLine1BPP_6
   \   00000130   10209DE5           LDR      R2,[SP, #+16]
   \   00000134   0A10A0E1           MOV      R1,R10
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   39FF2FE1           BLX      R9
   \   00000140   00109DE5           LDR      R1,[SP, #+0]
   \   00000144   000021E0           EOR      R0,R1,R0
   \   00000148   0000CBE5           STRB     R0,[R11, #+0]
   \                     ??_DrawBitLine1BPP_6:
   \   0000014C   016086E2           ADD      R6,R6,#+1
   \   00000150   200098E5           LDR      R0,[R8, #+32]
   \   00000154   080056E3           CMP      R6,#+8
   \   00000158   0060A003           MOVEQ    R6,#+0
   \   0000015C   01508502           ADDEQ    R5,R5,#+1
   \   00000160   0BB080E0           ADD      R11,R0,R11
   \   00000164   01A08AE2           ADD      R10,R10,#+1
   \   00000168   017057E2           SUBS     R7,R7,#+1
   \   0000016C   EBFFFF1A           BNE      ??_DrawBitLine1BPP_5
   \                     ??_DrawBitLine1BPP_1:
   \   00000170   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000174   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine2BPP(struct GUI_DEVICE *, int, int, unsigned char const *, int, int, unsigned long const *)
   \                     _DrawBitLine2BPP:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0350A0E1           MOV      R5,R3
   \   0000000C   088090E5           LDR      R8,[R0, #+8]
   \   00000010   28409DE5           LDR      R4,[SP, #+40]
   \   00000014   0090D5E5           LDRB     R9,[R5, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   00008DE5           STR      R0,[SP, #+0]
   \   00000020   2C609DE5           LDR      R6,[SP, #+44]
   \   00000024   30709DE5           LDR      R7,[SP, #+48]
   \   00000028   08308DE2           ADD      R3,SP,#+8
   \   0000002C   011084E0           ADD      R1,R4,R1
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   24C098E5           LDR      R12,[R8, #+36]
   \   00000038   3CFF2FE1           BLX      R12
   \   0000003C   281098E5           LDR      R1,[R8, #+40]
   \   00000040   04209DE5           LDR      R2,[SP, #+4]
   \   00000044   083098E5           LDR      R3,[R8, #+8]
   \   00000048   00C098E5           LDR      R12,[R8, #+0]
   \   0000004C   08009DE5           LDR      R0,[SP, #+8]
   \   00000050   1C1091E5           LDR      R1,[R1, #+28]
   \   00000054   93C222E0           MLA      R2,R3,R2,R12
   \   00000058   912020E0           MLA      R0,R1,R0,R2
   \   0000005C   ........           LDR      R1,??DataTable5
   \   00000060   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000064   031011E2           ANDS     R1,R1,#0x3
   \   00000068   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   0000006C   021051E2           SUBS     R1,R1,#+2
   \   00000070   2400000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000074   460000EA           B        ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_0:
   \   00000078   C010A0E3           MOV      R1,#+192
   \   0000007C   000057E3           CMP      R7,#+0
   \   00000080   1000000A           BEQ      ??_DrawBitLine2BPP_3
   \                     ??_DrawBitLine2BPP_4:
   \   00000084   032064E2           RSB      R2,R4,#+3
   \   00000088   8220A0E1           LSL      R2,R2,#+1
   \   0000008C   0230A0E1           MOV      R3,R2
   \   00000090   063063E2           RSB      R3,R3,#+6
   \   00000094   513309E0           AND      R3,R9,R1, ASR R3
   \   00000098   3322A0E1           LSR      R2,R3,R2
   \   0000009C   022197E7           LDR      R2,[R7, +R2, LSL #+2]
   \   000000A0   014084E2           ADD      R4,R4,#+1
   \   000000A4   0020C0E5           STRB     R2,[R0, #+0]
   \   000000A8   202098E5           LDR      R2,[R8, #+32]
   \   000000AC   040054E3           CMP      R4,#+4
   \   000000B0   0040A003           MOVEQ    R4,#+0
   \   000000B4   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   000000B8   000082E0           ADD      R0,R2,R0
   \   000000BC   016056E2           SUBS     R6,R6,#+1
   \   000000C0   EFFFFF1A           BNE      ??_DrawBitLine2BPP_4
   \   000000C4   320000EA           B        ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_3:
   \   000000C8   032064E2           RSB      R2,R4,#+3
   \   000000CC   8220A0E1           LSL      R2,R2,#+1
   \   000000D0   0230A0E1           MOV      R3,R2
   \   000000D4   063063E2           RSB      R3,R3,#+6
   \   000000D8   513309E0           AND      R3,R9,R1, ASR R3
   \   000000DC   3322A0E1           LSR      R2,R3,R2
   \   000000E0   0020C0E5           STRB     R2,[R0, #+0]
   \   000000E4   014084E2           ADD      R4,R4,#+1
   \   000000E8   202098E5           LDR      R2,[R8, #+32]
   \   000000EC   040054E3           CMP      R4,#+4
   \   000000F0   0040A003           MOVEQ    R4,#+0
   \   000000F4   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   000000F8   000082E0           ADD      R0,R2,R0
   \   000000FC   016056E2           SUBS     R6,R6,#+1
   \   00000100   F0FFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   00000104   220000EA           B        ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_1:
   \   00000108   C010A0E3           MOV      R1,#+192
   \   0000010C   000057E3           CMP      R7,#+0
   \   00000110   1000000A           BEQ      ??_DrawBitLine2BPP_5
   \                     ??_DrawBitLine2BPP_6:
   \   00000114   032064E2           RSB      R2,R4,#+3
   \   00000118   8220A0E1           LSL      R2,R2,#+1
   \   0000011C   0230A0E1           MOV      R3,R2
   \   00000120   063063E2           RSB      R3,R3,#+6
   \   00000124   513309E0           AND      R3,R9,R1, ASR R3
   \   00000128   3322B0E1           LSRS     R2,R3,R2
   \   0000012C   02219717           LDRNE    R2,[R7, +R2, LSL #+2]
   \   00000130   014084E2           ADD      R4,R4,#+1
   \   00000134   0020C015           STRBNE   R2,[R0, #+0]
   \   00000138   202098E5           LDR      R2,[R8, #+32]
   \   0000013C   040054E3           CMP      R4,#+4
   \   00000140   0040A003           MOVEQ    R4,#+0
   \   00000144   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   00000148   000082E0           ADD      R0,R2,R0
   \   0000014C   016056E2           SUBS     R6,R6,#+1
   \   00000150   EFFFFF1A           BNE      ??_DrawBitLine2BPP_6
   \   00000154   0E0000EA           B        ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_5:
   \   00000158   032064E2           RSB      R2,R4,#+3
   \   0000015C   8220A0E1           LSL      R2,R2,#+1
   \   00000160   0230A0E1           MOV      R3,R2
   \   00000164   063063E2           RSB      R3,R3,#+6
   \   00000168   513309E0           AND      R3,R9,R1, ASR R3
   \   0000016C   3322B0E1           LSRS     R2,R3,R2
   \   00000170   0020C015           STRBNE   R2,[R0, #+0]
   \   00000174   014084E2           ADD      R4,R4,#+1
   \   00000178   202098E5           LDR      R2,[R8, #+32]
   \   0000017C   040054E3           CMP      R4,#+4
   \   00000180   0040A003           MOVEQ    R4,#+0
   \   00000184   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   00000188   000082E0           ADD      R0,R2,R0
   \   0000018C   016056E2           SUBS     R6,R6,#+1
   \   00000190   F0FFFF1A           BNE      ??_DrawBitLine2BPP_5
   \                     ??_DrawBitLine2BPP_2:
   \   00000194   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000198   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine4BPP(struct GUI_DEVICE *, int, int, unsigned char const *, int, int, unsigned long const *)
   \                     _DrawBitLine4BPP:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0350A0E1           MOV      R5,R3
   \   0000000C   088090E5           LDR      R8,[R0, #+8]
   \   00000010   28409DE5           LDR      R4,[SP, #+40]
   \   00000014   0090D5E5           LDRB     R9,[R5, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   00008DE5           STR      R0,[SP, #+0]
   \   00000020   2C609DE5           LDR      R6,[SP, #+44]
   \   00000024   30709DE5           LDR      R7,[SP, #+48]
   \   00000028   08308DE2           ADD      R3,SP,#+8
   \   0000002C   011084E0           ADD      R1,R4,R1
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   24C098E5           LDR      R12,[R8, #+36]
   \   00000038   3CFF2FE1           BLX      R12
   \   0000003C   281098E5           LDR      R1,[R8, #+40]
   \   00000040   04209DE5           LDR      R2,[SP, #+4]
   \   00000044   083098E5           LDR      R3,[R8, #+8]
   \   00000048   00C098E5           LDR      R12,[R8, #+0]
   \   0000004C   08009DE5           LDR      R0,[SP, #+8]
   \   00000050   1C1091E5           LDR      R1,[R1, #+28]
   \   00000054   93C222E0           MLA      R2,R3,R2,R12
   \   00000058   912020E0           MLA      R0,R1,R0,R2
   \   0000005C   ........           LDR      R1,??DataTable5
   \   00000060   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000064   031011E2           ANDS     R1,R1,#0x3
   \   00000068   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   0000006C   021051E2           SUBS     R1,R1,#+2
   \   00000070   2400000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000074   460000EA           B        ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_0:
   \   00000078   F010A0E3           MOV      R1,#+240
   \   0000007C   000057E3           CMP      R7,#+0
   \   00000080   1000000A           BEQ      ??_DrawBitLine4BPP_3
   \                     ??_DrawBitLine4BPP_4:
   \   00000084   012064E2           RSB      R2,R4,#+1
   \   00000088   0221A0E1           LSL      R2,R2,#+2
   \   0000008C   0230A0E1           MOV      R3,R2
   \   00000090   043063E2           RSB      R3,R3,#+4
   \   00000094   513309E0           AND      R3,R9,R1, ASR R3
   \   00000098   3322A0E1           LSR      R2,R3,R2
   \   0000009C   022197E7           LDR      R2,[R7, +R2, LSL #+2]
   \   000000A0   014084E2           ADD      R4,R4,#+1
   \   000000A4   0020C0E5           STRB     R2,[R0, #+0]
   \   000000A8   202098E5           LDR      R2,[R8, #+32]
   \   000000AC   020054E3           CMP      R4,#+2
   \   000000B0   0040A003           MOVEQ    R4,#+0
   \   000000B4   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   000000B8   000082E0           ADD      R0,R2,R0
   \   000000BC   016056E2           SUBS     R6,R6,#+1
   \   000000C0   EFFFFF1A           BNE      ??_DrawBitLine4BPP_4
   \   000000C4   320000EA           B        ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_3:
   \   000000C8   012064E2           RSB      R2,R4,#+1
   \   000000CC   0221A0E1           LSL      R2,R2,#+2
   \   000000D0   0230A0E1           MOV      R3,R2
   \   000000D4   043063E2           RSB      R3,R3,#+4
   \   000000D8   513309E0           AND      R3,R9,R1, ASR R3
   \   000000DC   3322A0E1           LSR      R2,R3,R2
   \   000000E0   0020C0E5           STRB     R2,[R0, #+0]
   \   000000E4   014084E2           ADD      R4,R4,#+1
   \   000000E8   202098E5           LDR      R2,[R8, #+32]
   \   000000EC   020054E3           CMP      R4,#+2
   \   000000F0   0040A003           MOVEQ    R4,#+0
   \   000000F4   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   000000F8   000082E0           ADD      R0,R2,R0
   \   000000FC   016056E2           SUBS     R6,R6,#+1
   \   00000100   F0FFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   00000104   220000EA           B        ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_1:
   \   00000108   F010A0E3           MOV      R1,#+240
   \   0000010C   000057E3           CMP      R7,#+0
   \   00000110   1000000A           BEQ      ??_DrawBitLine4BPP_5
   \                     ??_DrawBitLine4BPP_6:
   \   00000114   012064E2           RSB      R2,R4,#+1
   \   00000118   0221A0E1           LSL      R2,R2,#+2
   \   0000011C   0230A0E1           MOV      R3,R2
   \   00000120   043063E2           RSB      R3,R3,#+4
   \   00000124   513309E0           AND      R3,R9,R1, ASR R3
   \   00000128   3322B0E1           LSRS     R2,R3,R2
   \   0000012C   02219717           LDRNE    R2,[R7, +R2, LSL #+2]
   \   00000130   014084E2           ADD      R4,R4,#+1
   \   00000134   0020C015           STRBNE   R2,[R0, #+0]
   \   00000138   202098E5           LDR      R2,[R8, #+32]
   \   0000013C   020054E3           CMP      R4,#+2
   \   00000140   0040A003           MOVEQ    R4,#+0
   \   00000144   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   00000148   000082E0           ADD      R0,R2,R0
   \   0000014C   016056E2           SUBS     R6,R6,#+1
   \   00000150   EFFFFF1A           BNE      ??_DrawBitLine4BPP_6
   \   00000154   0E0000EA           B        ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_5:
   \   00000158   012064E2           RSB      R2,R4,#+1
   \   0000015C   0221A0E1           LSL      R2,R2,#+2
   \   00000160   0230A0E1           MOV      R3,R2
   \   00000164   043063E2           RSB      R3,R3,#+4
   \   00000168   513309E0           AND      R3,R9,R1, ASR R3
   \   0000016C   3322B0E1           LSRS     R2,R3,R2
   \   00000170   0020C015           STRBNE   R2,[R0, #+0]
   \   00000174   014084E2           ADD      R4,R4,#+1
   \   00000178   202098E5           LDR      R2,[R8, #+32]
   \   0000017C   020054E3           CMP      R4,#+2
   \   00000180   0040A003           MOVEQ    R4,#+0
   \   00000184   0190F505           LDRBEQ   R9,[R5, #+1]!
   \   00000188   000082E0           ADD      R0,R2,R0
   \   0000018C   016056E2           SUBS     R6,R6,#+1
   \   00000190   F0FFFF1A           BNE      ??_DrawBitLine4BPP_5
   \                     ??_DrawBitLine4BPP_2:
   \   00000194   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000198   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitLine8BPP(struct GUI_DEVICE *, int, int, unsigned char const *, int, unsigned long const *)
   \                     _DrawBitLine8BPP:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   087090E5           LDR      R7,[R0, #+8]
   \   0000000C   04008DE2           ADD      R0,SP,#+4
   \   00000010   0340A0E1           MOV      R4,R3
   \   00000014   00008DE5           STR      R0,[SP, #+0]
   \   00000018   20509DE5           LDR      R5,[SP, #+32]
   \   0000001C   24609DE5           LDR      R6,[SP, #+36]
   \   00000020   08308DE2           ADD      R3,SP,#+8
   \   00000024   0700A0E1           MOV      R0,R7
   \   00000028   24C097E5           LDR      R12,[R7, #+36]
   \   0000002C   3CFF2FE1           BLX      R12
   \   00000030   281097E5           LDR      R1,[R7, #+40]
   \   00000034   04209DE5           LDR      R2,[SP, #+4]
   \   00000038   083097E5           LDR      R3,[R7, #+8]
   \   0000003C   00C097E5           LDR      R12,[R7, #+0]
   \   00000040   08009DE5           LDR      R0,[SP, #+8]
   \   00000044   1C1091E5           LDR      R1,[R1, #+28]
   \   00000048   93C222E0           MLA      R2,R3,R2,R12
   \   0000004C   912020E0           MLA      R0,R1,R0,R2
   \   00000050   ........           LDR      R1,??DataTable5
   \   00000054   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000058   031011E2           ANDS     R1,R1,#0x3
   \   0000005C   0200000A           BEQ      ??_DrawBitLine8BPP_0
   \   00000060   021051E2           SUBS     R1,R1,#+2
   \   00000064   1100000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000068   220000EA           B        ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_0:
   \   0000006C   000056E3           CMP      R6,#+0
   \   00000070   0700000A           BEQ      ??_DrawBitLine8BPP_3
   \                     ??_DrawBitLine8BPP_4:
   \   00000074   0110D4E4           LDRB     R1,[R4], #+1
   \   00000078   015055E2           SUBS     R5,R5,#+1
   \   0000007C   011196E7           LDR      R1,[R6, +R1, LSL #+2]
   \   00000080   0010C0E5           STRB     R1,[R0, #+0]
   \   00000084   201097E5           LDR      R1,[R7, #+32]
   \   00000088   000081E0           ADD      R0,R1,R0
   \   0000008C   F8FFFF1A           BNE      ??_DrawBitLine8BPP_4
   \   00000090   180000EA           B        ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_3:
   \   00000094   0110D4E4           LDRB     R1,[R4], #+1
   \   00000098   015055E2           SUBS     R5,R5,#+1
   \   0000009C   0010C0E5           STRB     R1,[R0, #+0]
   \   000000A0   201097E5           LDR      R1,[R7, #+32]
   \   000000A4   000081E0           ADD      R0,R1,R0
   \   000000A8   F9FFFF1A           BNE      ??_DrawBitLine8BPP_3
   \   000000AC   110000EA           B        ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_1:
   \   000000B0   000056E3           CMP      R6,#+0
   \   000000B4   0800000A           BEQ      ??_DrawBitLine8BPP_5
   \                     ??_DrawBitLine8BPP_6:
   \   000000B8   0110D4E4           LDRB     R1,[R4], #+1
   \   000000BC   000051E3           CMP      R1,#+0
   \   000000C0   01119617           LDRNE    R1,[R6, +R1, LSL #+2]
   \   000000C4   0010C015           STRBNE   R1,[R0, #+0]
   \   000000C8   201097E5           LDR      R1,[R7, #+32]
   \   000000CC   015055E2           SUBS     R5,R5,#+1
   \   000000D0   000081E0           ADD      R0,R1,R0
   \   000000D4   F7FFFF1A           BNE      ??_DrawBitLine8BPP_6
   \   000000D8   060000EA           B        ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_5:
   \   000000DC   0110D4E4           LDRB     R1,[R4], #+1
   \   000000E0   000051E3           CMP      R1,#+0
   \   000000E4   0010C015           STRBNE   R1,[R0, #+0]
   \   000000E8   201097E5           LDR      R1,[R7, #+32]
   \   000000EC   015055E2           SUBS     R5,R5,#+1
   \   000000F0   000081E0           ADD      R0,R1,R0
   \   000000F4   F8FFFF1A           BNE      ??_DrawBitLine8BPP_5
   \                     ??_DrawBitLine8BPP_2:
   \   000000F8   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000FC   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawBitmap_CX(struct GUI_DEVICE *, int, int, int, int, int, int, unsigned char const *, int, unsigned long const *)
   \                     _DrawBitmap_CX:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   5C009DE5           LDR      R0,[SP, #+92]
   \   00000010   082094E5           LDR      R2,[R4, #+8]
   \   00000014   010040E2           SUB      R0,R0,#+1
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   60709DE5           LDR      R7,[SP, #+96]
   \   00000024   64909DE5           LDR      R9,[SP, #+100]
   \   00000028   6C809DE5           LDR      R8,[SP, #+108]
   \   0000002C   18208DE5           STR      R2,[SP, #+24]
   \   00000030   1F0050E3           CMP      R0,#+31
   \   00000034   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitmap_CX_0:
   \   00000038   1C01008A           BHI      ??_DrawBitmap_CX_1
   \   0000003C   1E0000EA           B        ??_DrawBitmap_CX_2
   \   00000040   490000EA           B        ??_DrawBitmap_CX_3
   \   00000044   190100EA           B        ??_DrawBitmap_CX_1
   \   00000048   730000EA           B        ??_DrawBitmap_CX_4
   \   0000004C   170100EA           B        ??_DrawBitmap_CX_1
   \   00000050   160100EA           B        ??_DrawBitmap_CX_1
   \   00000054   150100EA           B        ??_DrawBitmap_CX_1
   \   00000058   9B0000EA           B        ??_DrawBitmap_CX_5
   \   0000005C   130100EA           B        ??_DrawBitmap_CX_1
   \   00000060   120100EA           B        ??_DrawBitmap_CX_1
   \   00000064   110100EA           B        ??_DrawBitmap_CX_1
   \   00000068   100100EA           B        ??_DrawBitmap_CX_1
   \   0000006C   0F0100EA           B        ??_DrawBitmap_CX_1
   \   00000070   0E0100EA           B        ??_DrawBitmap_CX_1
   \   00000074   0D0100EA           B        ??_DrawBitmap_CX_1
   \   00000078   B90000EA           B        ??_DrawBitmap_CX_6
   \   0000007C   0B0100EA           B        ??_DrawBitmap_CX_1
   \   00000080   0A0100EA           B        ??_DrawBitmap_CX_1
   \   00000084   090100EA           B        ??_DrawBitmap_CX_1
   \   00000088   080100EA           B        ??_DrawBitmap_CX_1
   \   0000008C   070100EA           B        ??_DrawBitmap_CX_1
   \   00000090   060100EA           B        ??_DrawBitmap_CX_1
   \   00000094   050100EA           B        ??_DrawBitmap_CX_1
   \   00000098   040100EA           B        ??_DrawBitmap_CX_1
   \   0000009C   030100EA           B        ??_DrawBitmap_CX_1
   \   000000A0   020100EA           B        ??_DrawBitmap_CX_1
   \   000000A4   010100EA           B        ??_DrawBitmap_CX_1
   \   000000A8   000100EA           B        ??_DrawBitmap_CX_1
   \   000000AC   FF0000EA           B        ??_DrawBitmap_CX_1
   \   000000B0   FE0000EA           B        ??_DrawBitmap_CX_1
   \   000000B4   FD0000EA           B        ??_DrawBitmap_CX_1
   \   000000B8   D30000EA           B        ??_DrawBitmap_CX_7
   \                     ??_DrawBitmap_CX_2:
   \   000000BC   58009DE5           LDR      R0,[SP, #+88]
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   F90000BA           BLT      ??_DrawBitmap_CX_1
   \   000000C8   00A0A0E1           MOV      R10,R0
   \   000000CC   30B09DE5           LDR      R11,[SP, #+48]
   \   000000D0   01001AE3           TST      R10,#0x1
   \   000000D4   0900000A           BEQ      ??_DrawBitmap_CX_8
   \   000000D8   68009DE5           LDR      R0,[SP, #+104]
   \   000000DC   08808DE5           STR      R8,[SP, #+8]
   \   000000E0   00008DE5           STR      R0,[SP, #+0]
   \   000000E4   04608DE5           STR      R6,[SP, #+4]
   \   000000E8   0930A0E1           MOV      R3,R9
   \   000000EC   0B20A0E1           MOV      R2,R11
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       _DrawBitLine1BPP
   \   000000F8   099087E0           ADD      R9,R7,R9
   \   000000FC   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_CX_8:
   \   00000100   AAA0B0E1           LSRS     R10,R10,#+1
   \   00000104   E900000A           BEQ      ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_9:
   \   00000108   68009DE5           LDR      R0,[SP, #+104]
   \   0000010C   08808DE5           STR      R8,[SP, #+8]
   \   00000110   00008DE5           STR      R0,[SP, #+0]
   \   00000114   04608DE5           STR      R6,[SP, #+4]
   \   00000118   0930A0E1           MOV      R3,R9
   \   0000011C   0B20A0E1           MOV      R2,R11
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       _DrawBitLine1BPP
   \   0000012C   68009DE5           LDR      R0,[SP, #+104]
   \   00000130   099087E0           ADD      R9,R7,R9
   \   00000134   00008DE5           STR      R0,[SP, #+0]
   \   00000138   08808DE5           STR      R8,[SP, #+8]
   \   0000013C   04608DE5           STR      R6,[SP, #+4]
   \   00000140   0930A0E1           MOV      R3,R9
   \   00000144   01208BE2           ADD      R2,R11,#+1
   \   00000148   0510A0E1           MOV      R1,R5
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           BL       _DrawBitLine1BPP
   \   00000154   01A04AE2           SUB      R10,R10,#+1
   \   00000158   099087E0           ADD      R9,R7,R9
   \   0000015C   02B08BE2           ADD      R11,R11,#+2
   \   00000160   00005AE3           CMP      R10,#+0
   \   00000164   E7FFFF1A           BNE      ??_DrawBitmap_CX_9
   \   00000168   D00000EA           B        ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_3:
   \   0000016C   58009DE5           LDR      R0,[SP, #+88]
   \   00000170   010050E3           CMP      R0,#+1
   \   00000174   CD0000BA           BLT      ??_DrawBitmap_CX_1
   \   00000178   00A0A0E1           MOV      R10,R0
   \   0000017C   30B09DE5           LDR      R11,[SP, #+48]
   \   00000180   01001AE3           TST      R10,#0x1
   \   00000184   0900000A           BEQ      ??_DrawBitmap_CX_10
   \   00000188   68009DE5           LDR      R0,[SP, #+104]
   \   0000018C   08808DE5           STR      R8,[SP, #+8]
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   04608DE5           STR      R6,[SP, #+4]
   \   00000198   0930A0E1           MOV      R3,R9
   \   0000019C   0B20A0E1           MOV      R2,R11
   \   000001A0   0400A0E1           MOV      R0,R4
   \   000001A4   ........           BL       _DrawBitLine2BPP
   \   000001A8   099087E0           ADD      R9,R7,R9
   \   000001AC   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_CX_10:
   \   000001B0   AAA0B0E1           LSRS     R10,R10,#+1
   \   000001B4   BD00000A           BEQ      ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_11:
   \   000001B8   68009DE5           LDR      R0,[SP, #+104]
   \   000001BC   08808DE5           STR      R8,[SP, #+8]
   \   000001C0   00008DE5           STR      R0,[SP, #+0]
   \   000001C4   04608DE5           STR      R6,[SP, #+4]
   \   000001C8   0930A0E1           MOV      R3,R9
   \   000001CC   0B20A0E1           MOV      R2,R11
   \   000001D0   0510A0E1           MOV      R1,R5
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   ........           BL       _DrawBitLine2BPP
   \   000001DC   68009DE5           LDR      R0,[SP, #+104]
   \   000001E0   099087E0           ADD      R9,R7,R9
   \   000001E4   00008DE5           STR      R0,[SP, #+0]
   \   000001E8   08808DE5           STR      R8,[SP, #+8]
   \   000001EC   04608DE5           STR      R6,[SP, #+4]
   \   000001F0   0930A0E1           MOV      R3,R9
   \   000001F4   01208BE2           ADD      R2,R11,#+1
   \   000001F8   0510A0E1           MOV      R1,R5
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       _DrawBitLine2BPP
   \   00000204   01A04AE2           SUB      R10,R10,#+1
   \   00000208   099087E0           ADD      R9,R7,R9
   \   0000020C   02B08BE2           ADD      R11,R11,#+2
   \   00000210   00005AE3           CMP      R10,#+0
   \   00000214   E7FFFF1A           BNE      ??_DrawBitmap_CX_11
   \   00000218   A40000EA           B        ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_4:
   \   0000021C   58009DE5           LDR      R0,[SP, #+88]
   \   00000220   010050E3           CMP      R0,#+1
   \   00000224   A10000BA           BLT      ??_DrawBitmap_CX_1
   \   00000228   00A0A0E1           MOV      R10,R0
   \   0000022C   30B09DE5           LDR      R11,[SP, #+48]
   \   00000230   01001AE3           TST      R10,#0x1
   \   00000234   0900000A           BEQ      ??_DrawBitmap_CX_12
   \   00000238   68009DE5           LDR      R0,[SP, #+104]
   \   0000023C   08808DE5           STR      R8,[SP, #+8]
   \   00000240   00008DE5           STR      R0,[SP, #+0]
   \   00000244   04608DE5           STR      R6,[SP, #+4]
   \   00000248   0930A0E1           MOV      R3,R9
   \   0000024C   0B20A0E1           MOV      R2,R11
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _DrawBitLine4BPP
   \   00000258   099087E0           ADD      R9,R7,R9
   \   0000025C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_CX_12:
   \   00000260   AAA0B0E1           LSRS     R10,R10,#+1
   \   00000264   9100000A           BEQ      ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_13:
   \   00000268   68009DE5           LDR      R0,[SP, #+104]
   \   0000026C   08808DE5           STR      R8,[SP, #+8]
   \   00000270   00008DE5           STR      R0,[SP, #+0]
   \   00000274   04608DE5           STR      R6,[SP, #+4]
   \   00000278   0930A0E1           MOV      R3,R9
   \   0000027C   0B20A0E1           MOV      R2,R11
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           BL       _DrawBitLine4BPP
   \   0000028C   68009DE5           LDR      R0,[SP, #+104]
   \   00000290   099087E0           ADD      R9,R7,R9
   \   00000294   00008DE5           STR      R0,[SP, #+0]
   \   00000298   08808DE5           STR      R8,[SP, #+8]
   \   0000029C   04608DE5           STR      R6,[SP, #+4]
   \   000002A0   0930A0E1           MOV      R3,R9
   \   000002A4   01208BE2           ADD      R2,R11,#+1
   \   000002A8   0510A0E1           MOV      R1,R5
   \   000002AC   0400A0E1           MOV      R0,R4
   \   000002B0   ........           BL       _DrawBitLine4BPP
   \   000002B4   01A04AE2           SUB      R10,R10,#+1
   \   000002B8   099087E0           ADD      R9,R7,R9
   \   000002BC   02B08BE2           ADD      R11,R11,#+2
   \   000002C0   00005AE3           CMP      R10,#+0
   \   000002C4   E7FFFF1A           BNE      ??_DrawBitmap_CX_13
   \   000002C8   780000EA           B        ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_5:
   \   000002CC   58009DE5           LDR      R0,[SP, #+88]
   \   000002D0   010050E3           CMP      R0,#+1
   \   000002D4   750000BA           BLT      ??_DrawBitmap_CX_1
   \   000002D8   00B0A0E1           MOV      R11,R0
   \   000002DC   30A09DE5           LDR      R10,[SP, #+48]
   \   000002E0   01001BE3           TST      R11,#0x1
   \   000002E4   0700000A           BEQ      ??_DrawBitmap_CX_14
   \   000002E8   04808DE5           STR      R8,[SP, #+4]
   \   000002EC   00608DE5           STR      R6,[SP, #+0]
   \   000002F0   0930A0E1           MOV      R3,R9
   \   000002F4   0A20A0E1           MOV      R2,R10
   \   000002F8   0400A0E1           MOV      R0,R4
   \   000002FC   ........           BL       _DrawBitLine8BPP
   \   00000300   099087E0           ADD      R9,R7,R9
   \   00000304   01A08AE2           ADD      R10,R10,#+1
   \                     ??_DrawBitmap_CX_14:
   \   00000308   ABB0B0E1           LSRS     R11,R11,#+1
   \   0000030C   6700000A           BEQ      ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_15:
   \   00000310   04808DE5           STR      R8,[SP, #+4]
   \   00000314   00608DE5           STR      R6,[SP, #+0]
   \   00000318   0930A0E1           MOV      R3,R9
   \   0000031C   0A20A0E1           MOV      R2,R10
   \   00000320   0510A0E1           MOV      R1,R5
   \   00000324   0400A0E1           MOV      R0,R4
   \   00000328   ........           BL       _DrawBitLine8BPP
   \   0000032C   099087E0           ADD      R9,R7,R9
   \   00000330   04808DE5           STR      R8,[SP, #+4]
   \   00000334   00608DE5           STR      R6,[SP, #+0]
   \   00000338   0930A0E1           MOV      R3,R9
   \   0000033C   01208AE2           ADD      R2,R10,#+1
   \   00000340   0510A0E1           MOV      R1,R5
   \   00000344   0400A0E1           MOV      R0,R4
   \   00000348   ........           BL       _DrawBitLine8BPP
   \   0000034C   01B04BE2           SUB      R11,R11,#+1
   \   00000350   099087E0           ADD      R9,R7,R9
   \   00000354   02A08AE2           ADD      R10,R10,#+2
   \   00000358   00005BE3           CMP      R11,#+0
   \   0000035C   EBFFFF1A           BNE      ??_DrawBitmap_CX_15
   \   00000360   520000EA           B        ??_DrawBitmap_CX_1
   \                     ??_DrawBitmap_CX_6:
   \   00000364   58009DE5           LDR      R0,[SP, #+88]
   \   00000368   010050E3           CMP      R0,#+1
   \   0000036C   4F0000BA           BLT      ??_DrawBitmap_CX_1
   \   00000370   30109DE5           LDR      R1,[SP, #+48]
   \   00000374   08108DE5           STR      R1,[SP, #+8]
   \   00000378   58109DE5           LDR      R1,[SP, #+88]
   \   0000037C   04108DE5           STR      R1,[SP, #+4]
   \                     ??_DrawBitmap_CX_16:
   \   00000380   08B094E5           LDR      R11,[R4, #+8]
   \   00000384   0C008DE2           ADD      R0,SP,#+12
   \   00000388   00008DE5           STR      R0,[SP, #+0]
   \   0000038C   0680A0E1           MOV      R8,R6
   \   00000390   09A0A0E1           MOV      R10,R9
   \   00000394   10308DE2           ADD      R3,SP,#+16
   \   00000398   08209DE5           LDR      R2,[SP, #+8]
   \   0000039C   0510A0E1           MOV      R1,R5
   \   000003A0   0B00A0E1           MOV      R0,R11
   \   000003A4   24C09BE5           LDR      R12,[R11, #+36]
   \   000003A8   3CFF2FE1           BLX      R12
   \   000003AC   28109BE5           LDR      R1,[R11, #+40]
   \   000003B0   0C209DE5           LDR      R2,[SP, #+12]
   \   000003B4   08309BE5           LDR      R3,[R11, #+8]
   \   000003B8   00C09BE5           LDR      R12,[R11, #+0]
   \   000003BC   10009DE5           LDR      R0,[SP, #+16]
   \   000003C0   1C1091E5           LDR      R1,[R1, #+28]
   \   000003C4   93C222E0           MLA      R2,R3,R2,R12
   \   000003C8   912020E0           MLA      R0,R1,R0,R2
   \   000003CC   20109BE5           LDR      R1,[R11, #+32]
   \                     ??_DrawBitmap_CX_17:
   \   000003D0   B220DAE0           LDRH     R2,[R10], #+2
   \   000003D4   018058E2           SUBS     R8,R8,#+1
   \   000003D8   0020C0E5           STRB     R2,[R0, #+0]
   \   000003DC   000081E0           ADD      R0,R1,R0
   \   000003E0   FAFFFF1A           BNE      ??_DrawBitmap_CX_17
   \   000003E4   08109DE5           LDR      R1,[SP, #+8]
   \   000003E8   099087E0           ADD      R9,R7,R9
   \   000003EC   011081E2           ADD      R1,R1,#+1
   \   000003F0   08108DE5           STR      R1,[SP, #+8]
   \   000003F4   04109DE5           LDR      R1,[SP, #+4]
   \   000003F8   011041E2           SUB      R1,R1,#+1
   \   000003FC   04108DE5           STR      R1,[SP, #+4]
   \   00000400   000051E3           CMP      R1,#+0
   \   00000404   2900000A           BEQ      ??_DrawBitmap_CX_1
   \   00000408   DCFFFFEA           B        ??_DrawBitmap_CX_16
   \                     ??_DrawBitmap_CX_7:
   \   0000040C   58009DE5           LDR      R0,[SP, #+88]
   \   00000410   010050E3           CMP      R0,#+1
   \   00000414   250000BA           BLT      ??_DrawBitmap_CX_1
   \   00000418   30109DE5           LDR      R1,[SP, #+48]
   \   0000041C   08108DE5           STR      R1,[SP, #+8]
   \   00000420   58109DE5           LDR      R1,[SP, #+88]
   \   00000424   04108DE5           STR      R1,[SP, #+4]
   \                     ??_DrawBitmap_CX_18:
   \   00000428   08B094E5           LDR      R11,[R4, #+8]
   \   0000042C   0C008DE2           ADD      R0,SP,#+12
   \   00000430   00008DE5           STR      R0,[SP, #+0]
   \   00000434   0680A0E1           MOV      R8,R6
   \   00000438   09A0A0E1           MOV      R10,R9
   \   0000043C   10308DE2           ADD      R3,SP,#+16
   \   00000440   08209DE5           LDR      R2,[SP, #+8]
   \   00000444   0510A0E1           MOV      R1,R5
   \   00000448   0B00A0E1           MOV      R0,R11
   \   0000044C   24C09BE5           LDR      R12,[R11, #+36]
   \   00000450   3CFF2FE1           BLX      R12
   \   00000454   28109BE5           LDR      R1,[R11, #+40]
   \   00000458   0C209DE5           LDR      R2,[SP, #+12]
   \   0000045C   08309BE5           LDR      R3,[R11, #+8]
   \   00000460   00C09BE5           LDR      R12,[R11, #+0]
   \   00000464   10009DE5           LDR      R0,[SP, #+16]
   \   00000468   1C1091E5           LDR      R1,[R1, #+28]
   \   0000046C   93C222E0           MLA      R2,R3,R2,R12
   \   00000470   912020E0           MLA      R0,R1,R0,R2
   \   00000474   20109BE5           LDR      R1,[R11, #+32]
   \                     ??_DrawBitmap_CX_19:
   \   00000478   04209AE4           LDR      R2,[R10], #+4
   \   0000047C   018058E2           SUBS     R8,R8,#+1
   \   00000480   0020C0E5           STRB     R2,[R0, #+0]
   \   00000484   000081E0           ADD      R0,R1,R0
   \   00000488   FAFFFF1A           BNE      ??_DrawBitmap_CX_19
   \   0000048C   08109DE5           LDR      R1,[SP, #+8]
   \   00000490   099087E0           ADD      R9,R7,R9
   \   00000494   011081E2           ADD      R1,R1,#+1
   \   00000498   08108DE5           STR      R1,[SP, #+8]
   \   0000049C   04109DE5           LDR      R1,[SP, #+4]
   \   000004A0   011041E2           SUB      R1,R1,#+1
   \   000004A4   04108DE5           STR      R1,[SP, #+4]
   \   000004A8   000051E3           CMP      R1,#+0
   \   000004AC   DDFFFF1A           BNE      ??_DrawBitmap_CX_18
   \                     ??_DrawBitmap_CX_1:
   \   000004B0   68009DE5           LDR      R0,[SP, #+104]
   \   000004B4   20308DE2           ADD      R3,SP,#+32
   \   000004B8   055080E0           ADD      R5,R0,R5
   \   000004BC   1C008DE2           ADD      R0,SP,#+28
   \   000004C0   00008DE5           STR      R0,[SP, #+0]
   \   000004C4   18009DE5           LDR      R0,[SP, #+24]
   \   000004C8   30209DE5           LDR      R2,[SP, #+48]
   \   000004CC   0510A0E1           MOV      R1,R5
   \   000004D0   24C090E5           LDR      R12,[R0, #+36]
   \   000004D4   3CFF2FE1           BLX      R12
   \   000004D8   24008DE2           ADD      R0,SP,#+36
   \   000004DC   00008DE5           STR      R0,[SP, #+0]
   \   000004E0   30009DE5           LDR      R0,[SP, #+48]
   \   000004E4   58109DE5           LDR      R1,[SP, #+88]
   \   000004E8   28308DE2           ADD      R3,SP,#+40
   \   000004EC   000081E0           ADD      R0,R1,R0
   \   000004F0   012040E2           SUB      R2,R0,#+1
   \   000004F4   050086E0           ADD      R0,R6,R5
   \   000004F8   011040E2           SUB      R1,R0,#+1
   \   000004FC   18009DE5           LDR      R0,[SP, #+24]
   \   00000500   24C090E5           LDR      R12,[R0, #+36]
   \   00000504   3CFF2FE1           BLX      R12
   \   00000508   28009DE5           LDR      R0,[SP, #+40]
   \   0000050C   20109DE5           LDR      R1,[SP, #+32]
   \   00000510   18E09DE5           LDR      LR,[SP, #+24]
   \   00000514   010050E1           CMP      R0,R1
   \   00000518   28209DB5           LDRLT    R2,[SP, #+40]
   \   0000051C   28108DB5           STRLT    R1,[SP, #+40]
   \   00000520   24009DE5           LDR      R0,[SP, #+36]
   \   00000524   1C109DE5           LDR      R1,[SP, #+28]
   \   00000528   20208DB5           STRLT    R2,[SP, #+32]
   \   0000052C   010050E1           CMP      R0,R1
   \   00000530   24209DB5           LDRLT    R2,[SP, #+36]
   \   00000534   24108DB5           STRLT    R1,[SP, #+36]
   \   00000538   18109DE5           LDR      R1,[SP, #+24]
   \   0000053C   1C208DB5           STRLT    R2,[SP, #+28]
   \   00000540   000094E5           LDR      R0,[R4, #+0]
   \   00000544   281091E5           LDR      R1,[R1, #+40]
   \   00000548   0020A0E3           MOV      R2,#+0
   \   0000054C   14208DE5           STR      R2,[SP, #+20]
   \   00000550   10208DE5           STR      R2,[SP, #+16]
   \   00000554   18409DE5           LDR      R4,[SP, #+24]
   \   00000558   1CC09DE5           LDR      R12,[SP, #+28]
   \   0000055C   08E09EE5           LDR      LR,[LR, #+8]
   \   00000560   004094E5           LDR      R4,[R4, #+0]
   \   00000564   20209DE5           LDR      R2,[SP, #+32]
   \   00000568   1C3091E5           LDR      R3,[R1, #+28]
   \   0000056C   9E4C2CE0           MLA      R12,LR,R12,R4
   \   00000570   93C222E0           MLA      R2,R3,R2,R12
   \   00000574   18309DE5           LDR      R3,[SP, #+24]
   \   00000578   0C208DE5           STR      R2,[SP, #+12]
   \   0000057C   1C2091E5           LDR      R2,[R1, #+28]
   \   00000580   183093E5           LDR      R3,[R3, #+24]
   \   00000584   930202E0           MUL      R2,R3,R2
   \   00000588   08208DE5           STR      R2,[SP, #+8]
   \   0000058C   1C1091E5           LDR      R1,[R1, #+28]
   \   00000590   1C209DE5           LDR      R2,[SP, #+28]
   \   00000594   8111A0E1           LSL      R1,R1,#+3
   \   00000598   04108DE5           STR      R1,[SP, #+4]
   \   0000059C   24109DE5           LDR      R1,[SP, #+36]
   \   000005A0   021041E0           SUB      R1,R1,R2
   \   000005A4   011081E2           ADD      R1,R1,#+1
   \   000005A8   00108DE5           STR      R1,[SP, #+0]
   \   000005AC   28109DE5           LDR      R1,[SP, #+40]
   \   000005B0   20209DE5           LDR      R2,[SP, #+32]
   \   000005B4   0CC090E5           LDR      R12,[R0, #+12]
   \   000005B8   021041E0           SUB      R1,R1,R2
   \   000005BC   013081E2           ADD      R3,R1,#+1
   \   000005C0   1C209DE5           LDR      R2,[SP, #+28]
   \   000005C4   20109DE5           LDR      R1,[SP, #+32]
   \   000005C8   04C09CE5           LDR      R12,[R12, #+4]
   \   000005CC   3CFF2FE1           BLX      R12
   \   000005D0   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000005D4   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp unsigned int _GetPixelIndex_CX(struct GUI_DEVICE *, int, int)
   \                     _GetPixelIndex_CX:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   084090E5           LDR      R4,[R0, #+8]
   \   0000000C   04008DE2           ADD      R0,SP,#+4
   \   00000010   00008DE5           STR      R0,[SP, #+0]
   \   00000014   08308DE2           ADD      R3,SP,#+8
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   24C094E5           LDR      R12,[R4, #+36]
   \   00000020   3CFF2FE1           BLX      R12
   \   00000024   281094E5           LDR      R1,[R4, #+40]
   \   00000028   04209DE5           LDR      R2,[SP, #+4]
   \   0000002C   083094E5           LDR      R3,[R4, #+8]
   \   00000030   00C094E5           LDR      R12,[R4, #+0]
   \   00000034   08009DE5           LDR      R0,[SP, #+8]
   \   00000038   1C1091E5           LDR      R1,[R1, #+28]
   \   0000003C   93C222E0           MLA      R2,R3,R2,R12
   \   00000040   912020E0           MLA      R0,R1,R0,R2
   \   00000044   10D08DE2           ADD      SP,SP,#+16
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _SetPixelIndex_CX(struct GUI_DEVICE *, int, int, int)
   \                     _SetPixelIndex_CX:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   086094E5           LDR      R6,[R4, #+8]
   \   00000010   04008DE2           ADD      R0,SP,#+4
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   00008DE5           STR      R0,[SP, #+0]
   \   0000001C   08308DE2           ADD      R3,SP,#+8
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   24C096E5           LDR      R12,[R6, #+36]
   \   00000028   3CFF2FE1           BLX      R12
   \   0000002C   281096E5           LDR      R1,[R6, #+40]
   \   00000030   04209DE5           LDR      R2,[SP, #+4]
   \   00000034   083096E5           LDR      R3,[R6, #+8]
   \   00000038   00C096E5           LDR      R12,[R6, #+0]
   \   0000003C   08009DE5           LDR      R0,[SP, #+8]
   \   00000040   1C1091E5           LDR      R1,[R1, #+28]
   \   00000044   93C222E0           MLA      R2,R3,R2,R12
   \   00000048   912020E0           MLA      R0,R1,R0,R2
   \   0000004C   0530A0E1           MOV      R3,R5
   \   00000050   0050C0E5           STRB     R5,[R0, #+0]
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   04209DE5           LDR      R2,[SP, #+4]
   \   0000005C   0CC090E5           LDR      R12,[R0, #+12]
   \   00000060   08109DE5           LDR      R1,[SP, #+8]
   \   00000064   18C09CE5           LDR      R12,[R12, #+24]
   \   00000068   3CFF2FE1           BLX      R12
   \   0000006C   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _XorPixel_CX(struct GUI_DEVICE *, int, int)
   \                     _XorPixel_CX:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   080090E5           LDR      R0,[R0, #+8]
   \   0000001C   30FF2FE1           BLX      R0
   \   00000020   0C3094E5           LDR      R3,[R4, #+12]
   \   00000024   0070A0E1           MOV      R7,R0
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   143093E5           LDR      R3,[R3, #+20]
   \   00000038   33FF2FE1           BLX      R3
   \   0000003C   003027E0           EOR      R3,R7,R0
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   0CC094E5           LDR      R12,[R4, #+12]
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \   00000054   F040BDE8           POP      {R4-R7,LR}
   \   00000058   FF3003E2           AND      R3,R3,#0xFF
   \   0000005C   18C09CE5           LDR      R12,[R12, #+24]
   \   00000060   1CFF2FE1           BX       R12              ;; tailcall

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawHLine_CX(struct GUI_DEVICE *, int, int, int)
   \                     _DrawHLine_CX:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   00208DE5           STR      R2,[SP, #+0]
   \   0000000C   0CC090E5           LDR      R12,[R0, #+12]
   \   00000010   10C09CE5           LDR      R12,[R12, #+16]
   \   00000014   3CFF2FE1           BLX      R12
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _DrawVLine_CX(struct GUI_DEVICE *, int, int, int)
   \                     _DrawVLine_CX:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   00308DE5           STR      R3,[SP, #+0]
   \   0000000C   0CC090E5           LDR      R12,[R0, #+12]
   \   00000010   0130A0E1           MOV      R3,R1
   \   00000014   10C09CE5           LDR      R12,[R12, #+16]
   \   00000018   3CFF2FE1           BLX      R12
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void _FillRect_CX(struct GUI_DEVICE *, int, int, int, int)
   \                     _FillRect_CX:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   085094E5           LDR      R5,[R4, #+8]
   \   00000010   1C008DE2           ADD      R0,SP,#+28
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   00008DE5           STR      R0,[SP, #+0]
   \   0000001C   48709DE5           LDR      R7,[SP, #+72]
   \   00000020   18308DE2           ADD      R3,SP,#+24
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   24C095E5           LDR      R12,[R5, #+36]
   \   0000002C   3CFF2FE1           BLX      R12
   \   00000030   24008DE2           ADD      R0,SP,#+36
   \   00000034   00008DE5           STR      R0,[SP, #+0]
   \   00000038   20308DE2           ADD      R3,SP,#+32
   \   0000003C   0720A0E1           MOV      R2,R7
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   24C095E5           LDR      R12,[R5, #+36]
   \   0000004C   3CFF2FE1           BLX      R12
   \   00000050   20009DE5           LDR      R0,[SP, #+32]
   \   00000054   18109DE5           LDR      R1,[SP, #+24]
   \   00000058   010050E1           CMP      R0,R1
   \   0000005C   20209DB5           LDRLT    R2,[SP, #+32]
   \   00000060   20108DB5           STRLT    R1,[SP, #+32]
   \   00000064   24009DE5           LDR      R0,[SP, #+36]
   \   00000068   1C109DE5           LDR      R1,[SP, #+28]
   \   0000006C   18208DB5           STRLT    R2,[SP, #+24]
   \   00000070   010050E1           CMP      R0,R1
   \   00000074   24209DB5           LDRLT    R2,[SP, #+36]
   \   00000078   24108DB5           STRLT    R1,[SP, #+36]
   \   0000007C   1C208DB5           STRLT    R2,[SP, #+28]
   \   00000080   281095E5           LDR      R1,[R5, #+40]
   \   00000084   1C209DE5           LDR      R2,[SP, #+28]
   \   00000088   083095E5           LDR      R3,[R5, #+8]
   \   0000008C   00C095E5           LDR      R12,[R5, #+0]
   \   00000090   18009DE5           LDR      R0,[SP, #+24]
   \   00000094   1C1091E5           LDR      R1,[R1, #+28]
   \   00000098   93C222E0           MLA      R2,R3,R2,R12
   \   0000009C   912027E0           MLA      R7,R1,R0,R2
   \   000000A0   24009DE5           LDR      R0,[SP, #+36]
   \   000000A4   1C109DE5           LDR      R1,[SP, #+28]
   \   000000A8   0760A0E1           MOV      R6,R7
   \   000000AC   010040E0           SUB      R0,R0,R1
   \   000000B0   018080E2           ADD      R8,R0,#+1
   \   000000B4   ........           LDR      R0,??DataTable5
   \   000000B8   1000D0E5           LDRB     R0,[R0, #+16]
   \   000000BC   010010E3           TST      R0,#0x1
   \   000000C0   1300000A           BEQ      ??_FillRect_CX_0
   \   000000C4   100094E5           LDR      R0,[R4, #+16]
   \   000000C8   080090E5           LDR      R0,[R0, #+8]
   \   000000CC   30FF2FE1           BLX      R0
   \                     ??_FillRect_CX_1:
   \   000000D0   20209DE5           LDR      R2,[SP, #+32]
   \   000000D4   18309DE5           LDR      R3,[SP, #+24]
   \   000000D8   0710A0E1           MOV      R1,R7
   \   000000DC   032042E0           SUB      R2,R2,R3
   \   000000E0   019082E2           ADD      R9,R2,#+1
   \                     ??_FillRect_CX_2:
   \   000000E4   0120A0E1           MOV      R2,R1
   \   000000E8   0030D2E5           LDRB     R3,[R2, #+0]
   \   000000EC   011082E2           ADD      R1,R2,#+1
   \   000000F0   019059E2           SUBS     R9,R9,#+1
   \   000000F4   033020E0           EOR      R3,R0,R3
   \   000000F8   0030C2E5           STRB     R3,[R2, #+0]
   \   000000FC   F8FFFF1A           BNE      ??_FillRect_CX_2
   \   00000100   181095E5           LDR      R1,[R5, #+24]
   \   00000104   018058E2           SUBS     R8,R8,#+1
   \   00000108   077081E0           ADD      R7,R1,R7
   \   0000010C   EFFFFF1A           BNE      ??_FillRect_CX_1
   \   00000110   0E0000EA           B        ??_FillRect_CX_3
   \                     ??_FillRect_CX_0:
   \   00000114   ........           LDR      R0,??DataTable5_1
   \   00000118   18109DE5           LDR      R1,[SP, #+24]
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   00A090E5           LDR      R10,[R0, #+0]
   \   00000124   20009DE5           LDR      R0,[SP, #+32]
   \   00000128   010040E0           SUB      R0,R0,R1
   \   0000012C   019080E2           ADD      R9,R0,#+1
   \                     ??_FillRect_CX_4:
   \   00000130   0920A0E1           MOV      R2,R9
   \   00000134   FF100AE2           AND      R1,R10,#0xFF
   \   00000138   0700A0E1           MOV      R0,R7
   \   0000013C   ........           BL       GUI__memset
   \   00000140   180095E5           LDR      R0,[R5, #+24]
   \   00000144   018058E2           SUBS     R8,R8,#+1
   \   00000148   077080E0           ADD      R7,R0,R7
   \   0000014C   F7FFFF1A           BNE      ??_FillRect_CX_4
   \                     ??_FillRect_CX_3:
   \   00000150   000094E5           LDR      R0,[R4, #+0]
   \   00000154   281095E5           LDR      R1,[R5, #+40]
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   14208DE5           STR      R2,[SP, #+20]
   \   00000160   10208DE5           STR      R2,[SP, #+16]
   \   00000164   0C608DE5           STR      R6,[SP, #+12]
   \   00000168   1C2091E5           LDR      R2,[R1, #+28]
   \   0000016C   183095E5           LDR      R3,[R5, #+24]
   \   00000170   930202E0           MUL      R2,R3,R2
   \   00000174   08208DE5           STR      R2,[SP, #+8]
   \   00000178   1C1091E5           LDR      R1,[R1, #+28]
   \   0000017C   1C209DE5           LDR      R2,[SP, #+28]
   \   00000180   8111A0E1           LSL      R1,R1,#+3
   \   00000184   04108DE5           STR      R1,[SP, #+4]
   \   00000188   24109DE5           LDR      R1,[SP, #+36]
   \   0000018C   021041E0           SUB      R1,R1,R2
   \   00000190   011081E2           ADD      R1,R1,#+1
   \   00000194   00108DE5           STR      R1,[SP, #+0]
   \   00000198   20109DE5           LDR      R1,[SP, #+32]
   \   0000019C   18209DE5           LDR      R2,[SP, #+24]
   \   000001A0   0CC090E5           LDR      R12,[R0, #+12]
   \   000001A4   021041E0           SUB      R1,R1,R2
   \   000001A8   013081E2           ADD      R3,R1,#+1
   \   000001AC   1C209DE5           LDR      R2,[SP, #+28]
   \   000001B0   18109DE5           LDR      R1,[SP, #+24]
   \   000001B4   04C09CE5           LDR      R12,[R12, #+4]
   \   000001B8   3CFF2FE1           BLX      R12
   \   000001BC   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C0   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute struct <unnamed> const GUI_OrientationAPI_C8
   \                     GUI_OrientationAPI_C8:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   ............       DC32 _DrawBitmap_CX, _DrawHLine_CX, _DrawVLine_CX, _FillRect_CX, _GetPixelIndex_CX, _SetPixelIndex_CX, _XorPixel_CX, 1
   \              ............
   \              ............
   \              ............
   \              ........0100
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     LCD_pColorIndex
     28          
     29          /*************************** End of file ****************************/
     30          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _DrawBitLine1BPP      56
     _DrawBitLine2BPP      40
     _DrawBitLine4BPP      40
     _DrawBitLine8BPP      32
     _DrawBitmap_CX        88
     _DrawHLine_CX          8
     _DrawVLine_CX          8
     _FillRect_CX          72
     _GetPixelIndex_CX     24
     _SetPixelIndex_CX     32
     _XorPixel_CX          24


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _DrawBitLine1BPP       376
     _DrawBitLine2BPP       412
     _DrawBitLine4BPP       412
     _DrawBitLine8BPP       256
     _DrawBitmap_CX        1496
     _GetPixelIndex_CX       80
     _SetPixelIndex_CX      116
     _XorPixel_CX           100
     _DrawHLine_CX           32
     _DrawVLine_CX           36
     _FillRect_CX           452
     GUI_OrientationAPI_C8   32
     ??DataTable5             4
     ??DataTable5_1           4

 
    32 bytes in section .rodata
 3 776 bytes in section .text
 
 3 776 bytes of CODE  memory
    32 bytes of CONST memory

Errors: none
Warnings: none
