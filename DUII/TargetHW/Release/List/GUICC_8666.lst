###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:08 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_8666.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_8666.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_8666.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_8666.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_8666.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_866.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       LCD_Color2Index_8666
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          /* not static!!! */unsigned LCD_Color2Index_8666(LCD_COLOR Color) {
     36            int r, g, b, Index;
     37            r = Color & 255;
     38            g = (Color >>  8) & 255;
   \                     LCD_Color2Index_8666:
   \   00000000   FF20A0E3           MOV      R2,#+255
   \   00000004   FF1000E2           AND      R1,R0,#0xFF
   \   00000008   202402E0           AND      R2,R2,R0, LSR #+8
     39            b = (Color >> 16) & 255;
   \   0000000C   FF30A0E3           MOV      R3,#+255
   \   00000010   200803E0           AND      R0,R3,R0, LSR #+16
     40          /* Check if image is a gray scale ... */
     41          	if ((r == g) && (g == b)) {
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   00005201           CMPEQ    R2,R0
   \   0000001C   0600001A           BNE      ??LCD_Color2Index_8666_0
     42              return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135*/
   \   00000020   080081E2           ADD      R0,R1,#+8
   \   00000024   ........           LDR      R1,??DataTable2  ;; 0x78787879
   \   00000028   9021C1E0           SMULL    R2,R1,R0,R1
   \   0000002C   C101B0E1           ASRS     R0,R1,#+3
   \   00000030   01008042           ADDMI    R0,R0,#+1
   \   00000034   780080E2           ADD      R0,R0,#+120
   \   00000038   1EFF2FE1           BX       LR
     43          	}
     44          /* Convert into the 6*6*6 colors ... */
     45            r = (r * 5 + 127) / 255;
     46            g = (g * 5 + 127) / 255;
     47            b = (b * 5 + 127) / 255;
     48            Index = r + 6 * g + 36 * b;
   \                     ??LCD_Color2Index_8666_0:
   \   0000003C   011181E0           ADD      R1,R1,R1, LSL #+2
   \   00000040   ........           LDR      R3,??DataTable2_1  ;; 0x80808081
   \   00000044   7F1081E2           ADD      R1,R1,#+127
   \   00000048   91C3C3E0           SMULL    R12,R3,R1,R3
   \   0000004C   022182E0           ADD      R2,R2,R2, LSL #+2
   \   00000050   013083E0           ADD      R3,R3,R1
   \   00000054   C313B0E1           ASRS     R1,R3,#+7
   \   00000058   ........           LDR      R3,??DataTable2_1  ;; 0x80808081
   \   0000005C   7F2082E2           ADD      R2,R2,#+127
   \   00000060   92C3C3E0           SMULL    R12,R3,R2,R3
   \   00000064   01108142           ADDMI    R1,R1,#+1
   \   00000068   023083E0           ADD      R3,R3,R2
   \   0000006C   C323B0E1           ASRS     R2,R3,#+7
   \   00000070   01208242           ADDMI    R2,R2,#+1
   \   00000074   0630A0E3           MOV      R3,#+6
   \   00000078   931221E0           MLA      R1,R3,R2,R1
   \   0000007C   000180E0           ADD      R0,R0,R0, LSL #+2
   \   00000080   ........           LDR      R2,??DataTable2_1  ;; 0x80808081
   \   00000084   7F0080E2           ADD      R0,R0,#+127
   \   00000088   9032C2E0           SMULL    R3,R2,R0,R2
   \   0000008C   002082E0           ADD      R2,R2,R0
   \   00000090   C203B0E1           ASRS     R0,R2,#+7
   \   00000094   01008042           ADDMI    R0,R0,#+1
   \   00000098   2420A0E3           MOV      R2,#+36
   \   0000009C   921020E0           MLA      R0,R2,R0,R1
     49            return (Index < 108) ? Index : Index + 40;
   \   000000A0   6C0050E3           CMP      R0,#+108
   \   000000A4   280080A2           ADDGE    R0,R0,#+40
   \   000000A8   1EFF2FE1           BX       LR               ;; return
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       LCD_Index2Color_8666
     55          */

   \                                 In section .text, align 4, keep-with-next
     56          /* not static!!! */LCD_COLOR LCD_Index2Color_8666(unsigned Index) {
   \                     LCD_Index2Color_8666:
   \   00000000   10402DE9           PUSH     {R4,LR}
     57            unsigned int r,g;
     58            U32 b;
     59            /* 16 Gray scale range ? */
     60            if ((Index >= 120) && (Index < 136)) {
   \   00000004   781040E2           SUB      R1,R0,#+120
   \   00000008   100051E3           CMP      R1,#+16
   \   0000000C   0200002A           BCS      ??LCD_Index2Color_8666_0
     61              return (U32)0x111111 * (U32)(Index - 120);
   \   00000010   ........           LDR      R2,??DataTable2_2  ;; 0x111111
   \   00000014   920100E0           MUL      R0,R2,R1
   \   00000018   1080BDE8           POP      {R4,PC}
     62          	}
     63            if (Index >= 108) {
   \                     ??LCD_Index2Color_8666_0:
   \   0000001C   6C0050E3           CMP      R0,#+108
   \   00000020   0400003A           BCC      ??LCD_Index2Color_8666_1
     64              if (Index < 148) {
   \   00000024   940050E3           CMP      R0,#+148
   \   00000028   0100002A           BCS      ??LCD_Index2Color_8666_2
     65          			return 0;  /* Black for illegal indices */
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1080BDE8           POP      {R4,PC}
     66              }
     67          		Index -= 40;
   \                     ??LCD_Index2Color_8666_2:
   \   00000034   280040E2           SUB      R0,R0,#+40
     68          	}
     69            r =  (Index % 6)      * (255 / 5);
     70            g = ((Index / 6) % 6) * (255 / 5);
   \                     ??LCD_Index2Color_8666_1:
   \   00000038   ........           LDR      R2,??DataTable2_3  ;; 0xaaaaaaab
     71            b =  (Index / 36)     * (255 / 5);
     72            return r + (g << 8) + ((U32)b << 16);
   \   0000003C   ........           LDR      R4,??DataTable2_3  ;; 0xaaaaaaab
   \   00000040   902281E0           UMULL    R2,R1,R0,R2
   \   00000044   0630A0E3           MOV      R3,#+6
   \   00000048   2121A0E1           LSR      R2,R1,#+2
   \   0000004C   92448EE0           UMULL    R4,LR,R2,R4
   \   00000050   2EE1A0E1           LSR      LR,LR,#+2
   \   00000054   93020CE0           MUL      R12,R3,R2
   \   00000058   930E0EE0           MUL      LR,R3,LR
   \   0000005C   3310A0E3           MOV      R1,#+51
   \   00000060   0CC040E0           SUB      R12,R0,R12
   \   00000064   0E2042E0           SUB      R2,R2,LR
   \   00000068   910C0CE0           MUL      R12,R1,R12
   \   0000006C   910202E0           MUL      R2,R1,R2
   \   00000070   02248CE0           ADD      R2,R12,R2, LSL #+8
   \   00000074   ........           LDR      R12,??DataTable2_4  ;; 0xe38e38e4
   \   00000078   90CC83E0           UMULL    R12,R3,R0,R12
   \   0000007C   A302A0E1           LSR      R0,R3,#+5
   \   00000080   910000E0           MUL      R0,R1,R0
   \   00000084   000882E0           ADD      R0,R2,R0, LSL #+16
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
     73          }
     74          
     75          /*********************************************************************
     76          *
     77          *       _GetIndexMask_8666
     78          */

   \                                 In section .text, align 4, keep-with-next
     79          static unsigned _GetIndexMask_8666(void) {
     80            return 0xff;
   \                     _GetIndexMask_8666:
   \   00000000   FF00A0E3           MOV      R0,#+255
   \   00000004   1EFF2FE1           BX       LR               ;; return
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       Public data
     86          *
     87          **********************************************************************
     88          */
     89          /*********************************************************************
     90          *
     91          *       LCD_API_ColorConv_8666
     92          *
     93          * Purpose
     94          *   API table for this color conversion mode. Only used by memory
     95          *   devices in this mode.
     96          */

   \                                 In section .rodata, align 4, keep-with-next
     97          const LCD_API_COLOR_CONV LCD_API_ColorConv_8666 = {
   \                     LCD_API_ColorConv_8666:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 LCD_Color2Index_8666, LCD_Index2Color_8666, _GetIndexMask_8666
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   79787878           DC32     0x78787879

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   81808080           DC32     0x80808081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   11111100           DC32     0x111111

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ABAAAAAA           DC32     0xaaaaaaab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   E4388EE3           DC32     0xe38e38e4
     98            LCD_Color2Index_8666,
     99            LCD_Index2Color_8666,
    100            _GetIndexMask_8666
    101          };
    102          
    103          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     LCD_Color2Index_8666      0
     LCD_Index2Color_8666      8
     _GetIndexMask_8666        0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     LCD_Color2Index_8666    172
     LCD_Index2Color_8666    140
     _GetIndexMask_8666        8
     LCD_API_ColorConv_8666   12
     ??DataTable2              4
     ??DataTable2_1            4
     ??DataTable2_2            4
     ??DataTable2_3            4
     ??DataTable2_4            4

 
  12 bytes in section .rodata
 340 bytes in section .text
 
 340 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
