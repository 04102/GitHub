###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:30 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_24.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_24.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDRV_Lin_OSX_24.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDRV_Lin_OSX_24.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OSX_24.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OSX_24.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF32(vxSizePhys, x, y)      (((U32)(y * (vxSizePhys + vxSizePhys + vxSizePhys)) + ((unsigned)(x + x + x))) >> 2)
     91          
     92          #define LOG2PHYS_X(vxSize, vySize, x, y) vySize - 1 - (y)
     93          #define LOG2PHYS_Y(vxSize, vySize, x, y) x
     94          
     95          /*********************************************************************
     96          *
     97          *       Types
     98          *
     99          **********************************************************************
    100          */
    101          typedef struct {
    102            U32 VRAMAddr;
    103            int xSize, ySize;
    104            int vxSize, vySize;
    105            int vxSizePhys;
    106            int xPos, yPos;
    107            int Alpha;
    108            int IsVisible;
    109            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    110          } DRIVER_CONTEXT;
    111          
    112          /*********************************************************************
    113          *
    114          *       Static functions
    115          *
    116          **********************************************************************
    117          */
    118          /*********************************************************************
    119          *
    120          *       _SetPixelIndex
    121          *
    122          * Purpose:
    123          *   Sets the index of the given pixel. The upper layers
    124          *   calling this routine make sure that the coordinates are in range, so
    125          *   that no check on the parameters needs to be performed.
    126          */

   \                                 In section .text, align 4, keep-with-next
    127          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   10402DE9           PUSH     {R4,LR}
    128            DRIVER_CONTEXT * pContext;
    129            U32 Off, Data;
    130            int xPhys, yPhys;
    131          
    132            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    133            //
    134            //  Convert logical into physical coordinates
    135            //
    136            xPhys = LOG2PHYS_X(pContext->vxSize, pContext->vySize, x, y);
   \   00000008   10C090E5           LDR      R12,[R0, #+16]
   \   0000000C   01C04CE2           SUB      R12,R12,#+1
   \   00000010   02E04CE0           SUB      LR,R12,R2
    137            yPhys = LOG2PHYS_Y(pContext->vxSize, pContext->vySize, x, y);
    138            //
    139            // Write into hardware
    140            //
    141            Off      = XY2OFF32(pContext->vxSizePhys, xPhys, yPhys);
   \   00000014   142090E5           LDR      R2,[R0, #+20]
    142            Data     = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000018   00C090E5           LDR      R12,[R0, #+0]
   \   0000001C   920101E0           MUL      R1,R2,R1
   \   00000020   8E208EE0           ADD      R2,LR,LR, LSL #+1
   \   00000024   811081E0           ADD      R1,R1,R1, LSL #+1
   \   00000028   011082E0           ADD      R1,R2,R1
    143            PixelIndex &= 0xFFFFFF;
   \   0000002C   0324A0E1           LSL      R2,R3,#+8
   \   00000030   2111A0E1           LSR      R1,R1,#+2
    144            switch (xPhys & 3) {
   \   00000034   03300EE2           AND      R3,LR,#0x3
   \   00000038   01419CE7           LDR      R4,[R12, +R1, LSL #+2]
   \   0000003C   2224A0E1           LSR      R2,R2,#+8
   \   00000040   030053E3           CMP      R3,#+3
   \   00000044   03F18F90           ADDLS    PC,PC,R3, LSL #+2
   \                     ??_SetPixelIndex_0:
   \   00000048   1D00008A           BHI      ??_SetPixelIndex_1
   \   0000004C   020000EA           B        ??_SetPixelIndex_2
   \   00000050   040000EA           B        ??_SetPixelIndex_3
   \   00000054   0E0000EA           B        ??_SetPixelIndex_4
   \   00000058   170000EA           B        ??_SetPixelIndex_5
    145            case 0:
    146              Data &= 0xFF000000;
    147              Data |= PixelIndex;
   \                     ??_SetPixelIndex_2:
   \   0000005C   FF3404E2           AND      R3,R4,#0xFF000000
   \   00000060   034082E1           ORR      R4,R2,R3
    148              break;
   \   00000064   160000EA           B        ??_SetPixelIndex_1
    149            case 1:
    150              Data &= 0x00FFFFFF;
    151              Data |= (PixelIndex << 24);
    152              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_3:
   \   00000068   0434A0E1           LSL      R3,R4,#+8
   \   0000006C   02ECA0E1           LSL      LR,R2,#+24
   \   00000070   23348EE1           ORR      R3,LR,R3, LSR #+8
   \   00000074   01318CE7           STR      R3,[R12, +R1, LSL #+2]
    153              Off++;
    154              Data = READ_MEM32(pContext->VRAMAddr, Off);
    155              Data &= 0xFFFF0000;
    156              Data |= (PixelIndex >> 8);
   \   00000078   003090E5           LDR      R3,[R0, #+0]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   013193E7           LDR      R3,[R3, +R1, LSL #+2]
   \   00000084   4224A0E1           ASR      R2,R2,#+8
   \   00000088   2338A0E1           LSR      R3,R3,#+16
   \   0000008C   034882E1           ORR      R4,R2,R3, LSL #+16
    157              break;
   \   00000090   0B0000EA           B        ??_SetPixelIndex_1
    158            case 2:
    159              Data &= 0x0000FFFF;
    160              Data |= (PixelIndex << 16);
    161              WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_4:
   \   00000094   0438A0E1           LSL      R3,R4,#+16
   \   00000098   02E8A0E1           LSL      LR,R2,#+16
   \   0000009C   23388EE1           ORR      R3,LR,R3, LSR #+16
   \   000000A0   01318CE7           STR      R3,[R12, +R1, LSL #+2]
    162              Off++;
    163              Data = READ_MEM32(pContext->VRAMAddr, Off);
    164              Data &= 0xFFFFFF00;
    165              Data |= (PixelIndex >> 16);
   \   000000A4   003090E5           LDR      R3,[R0, #+0]
   \   000000A8   011081E2           ADD      R1,R1,#+1
   \   000000AC   013193E7           LDR      R3,[R3, +R1, LSL #+2]
   \   000000B0   FF30C3E3           BIC      R3,R3,#0xFF
   \   000000B4   424883E1           ORR      R4,R3,R2, ASR #+16
    166              break;
   \   000000B8   010000EA           B        ??_SetPixelIndex_1
    167            case 3:
    168              Data &= 0x000000FF;
    169              Data |= (PixelIndex << 8);
   \                     ??_SetPixelIndex_5:
   \   000000BC   FF3004E2           AND      R3,R4,#0xFF
   \   000000C0   024483E1           ORR      R4,R3,R2, LSL #+8
    170              break;
    171            }
    172            WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_SetPixelIndex_1:
   \   000000C4   000090E5           LDR      R0,[R0, #+0]
   \   000000C8   014180E7           STR      R4,[R0, +R1, LSL #+2]
    173          }
   \   000000CC   1080BDE8           POP      {R4,PC}          ;; return
    174          
    175          /*********************************************************************
    176          *
    177          *       _GetPixelIndex
    178          *
    179          * Purpose:
    180          *   Returns the index of the given pixel. The upper layers
    181          *   calling this routine make sure that the coordinates are in range, so
    182          *   that no check on the parameters needs to be performed.
    183          */

   \                                 In section .text, align 4, keep-with-next
    184          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    185            DRIVER_CONTEXT * pContext;
    186            U32 Off, Data, PixelIndex;
    187            int xPhys, yPhys;
    188          
    189            pContext   = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    190            //
    191            //  Convert logical into physical coordinates
    192            //
    193            xPhys = LOG2PHYS_X(pContext->vxSize, pContext->vySize, x, y);
   \   00000004   10C090E5           LDR      R12,[R0, #+16]
   \   00000008   01C04CE2           SUB      R12,R12,#+1
   \   0000000C   02304CE0           SUB      R3,R12,R2
    194            yPhys = LOG2PHYS_Y(pContext->vxSize, pContext->vySize, x, y);
    195            //
    196            // Read from hardware
    197            //
    198            Off      = XY2OFF32(pContext->vxSizePhys, xPhys, yPhys);
   \   00000010   14C090E5           LDR      R12,[R0, #+20]
   \   00000014   9C0101E0           MUL      R1,R12,R1
   \   00000018   83C083E0           ADD      R12,R3,R3, LSL #+1
   \   0000001C   811081E0           ADD      R1,R1,R1, LSL #+1
   \   00000020   01108CE0           ADD      R1,R12,R1
    199            Data     = READ_MEM32(pContext->VRAMAddr, Off);
   \   00000024   00C090E5           LDR      R12,[R0, #+0]
   \   00000028   2111A0E1           LSR      R1,R1,#+2
    200            switch (xPhys & 3) {
   \   0000002C   033003E2           AND      R3,R3,#0x3
   \   00000030   01019CE7           LDR      R0,[R12, +R1, LSL #+2]
   \   00000034   030053E3           CMP      R3,#+3
   \   00000038   03F18F90           ADDLS    PC,PC,R3, LSL #+2
   \                     ??_GetPixelIndex_0:
   \   0000003C   1200008A           BHI      ??_GetPixelIndex_1
   \   00000040   020000EA           B        ??_GetPixelIndex_2
   \   00000044   030000EA           B        ??_GetPixelIndex_3
   \   00000048   090000EA           B        ??_GetPixelIndex_4
   \   0000004C   0D0000EA           B        ??_GetPixelIndex_5
    201            case 0:
    202              PixelIndex  = (Data & 0x00FFFFFF);
   \                     ??_GetPixelIndex_2:
   \   00000050   0004A0E1           LSL      R0,R0,#+8
   \   00000054   0B0000EA           B        ??_GetPixelIndex_5
    203              break;
    204            case 1:
    205              PixelIndex  = (Data & 0xFF000000) >> 24;
    206              Off++;
    207              Data        = READ_MEM32(pContext->VRAMAddr, Off);
    208              PixelIndex |= (Data & 0x0000FFFF) << 8;
   \                     ??_GetPixelIndex_3:
   \   00000058   01118CE0           ADD      R1,R12,R1, LSL #+2
   \   0000005C   B410D1E1           LDRH     R1,[R1, #+4]
   \   00000060   0118A0E1           LSL      R1,R1,#+16
   \   00000064   2118A0E1           LSR      R1,R1,#+16
   \   00000068   0114A0E1           LSL      R1,R1,#+8
   \   0000006C   202C81E1           ORR      R2,R1,R0, LSR #+24
    209              break;
   \   00000070   050000EA           B        ??_GetPixelIndex_1
    210            case 2:
    211              PixelIndex  = (Data & 0xFFFF0000) >> 16;
    212              Off++;
    213              Data        = READ_MEM32(pContext->VRAMAddr, Off);
    214              PixelIndex |= (Data & 0x000000FF) << 16;
   \                     ??_GetPixelIndex_4:
   \   00000074   01118CE0           ADD      R1,R12,R1, LSL #+2
   \   00000078   0410D1E5           LDRB     R1,[R1, #+4]
   \   0000007C   0118A0E1           LSL      R1,R1,#+16
   \   00000080   202881E1           ORR      R2,R1,R0, LSR #+16
    215              break;
   \   00000084   000000EA           B        ??_GetPixelIndex_1
    216            case 3:
    217              PixelIndex  = (Data & 0xFFFFFF00) >> 8;
   \                     ??_GetPixelIndex_5:
   \   00000088   2024A0E1           LSR      R2,R0,#+8
    218              break;
    219            }
    220            return PixelIndex;
   \                     ??_GetPixelIndex_1:
   \   0000008C   0200A0E1           MOV      R0,R2
   \   00000090   1EFF2FE1           BX       LR               ;; return
    221          }
    222          
    223          /*********************************************************************
    224          *
    225          *       _XorPixel
    226          */

   \                                 In section .text, align 4, keep-with-next
    227          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    228            LCD_PIXELINDEX PixelIndex;
    229            LCD_PIXELINDEX IndexMask;
    230          
    231            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   142090E5           LDR      R2,[R0, #+20]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   920503E0           MUL      R3,R2,R5
   \   00000020   011041E2           SUB      R1,R1,#+1
   \   00000024   061041E0           SUB      R1,R1,R6
   \   00000028   832083E0           ADD      R2,R3,R3, LSL #+1
   \   0000002C   813081E0           ADD      R3,R1,R1, LSL #+1
   \   00000030   022083E0           ADD      R2,R3,R2
   \   00000034   003090E5           LDR      R3,[R0, #+0]
   \   00000038   2221A0E1           LSR      R2,R2,#+2
   \   0000003C   031001E2           AND      R1,R1,#0x3
   \   00000040   04D04DE2           SUB      SP,SP,#+4
   \   00000044   020193E7           LDR      R0,[R3, +R2, LSL #+2]
   \   00000048   030051E3           CMP      R1,#+3
   \   0000004C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_XorPixel_0:
   \   00000050   1100008A           BHI      ??_XorPixel_1
   \   00000054   0E0000EA           B        ??_XorPixel_2
   \   00000058   060000EA           B        ??_XorPixel_3
   \   0000005C   000000EA           B        ??_XorPixel_4
   \   00000060   0C0000EA           B        ??_XorPixel_5
   \                     ??_XorPixel_4:
   \   00000064   021183E0           ADD      R1,R3,R2, LSL #+2
   \   00000068   0410D1E5           LDRB     R1,[R1, #+4]
   \   0000006C   0118A0E1           LSL      R1,R1,#+16
   \   00000070   207881E1           ORR      R7,R1,R0, LSR #+16
   \   00000074   080000EA           B        ??_XorPixel_1
   \                     ??_XorPixel_3:
   \   00000078   021183E0           ADD      R1,R3,R2, LSL #+2
   \   0000007C   B410D1E1           LDRH     R1,[R1, #+4]
   \   00000080   0118A0E1           LSL      R1,R1,#+16
   \   00000084   2118A0E1           LSR      R1,R1,#+16
   \   00000088   0114A0E1           LSL      R1,R1,#+8
   \   0000008C   207C81E1           ORR      R7,R1,R0, LSR #+24
   \   00000090   010000EA           B        ??_XorPixel_1
   \                     ??_XorPixel_2:
   \   00000094   0004A0E1           LSL      R0,R0,#+8
   \                     ??_XorPixel_5:
   \   00000098   2074A0E1           LSR      R7,R0,#+8
    232            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_XorPixel_1:
   \   0000009C   100094E5           LDR      R0,[R4, #+16]
   \   000000A0   080090E5           LDR      R0,[R0, #+8]
   \   000000A4   30FF2FE1           BLX      R0
    233            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   000000A8   073020E0           EOR      R3,R0,R7
   \   000000AC   0620A0E1           MOV      R2,R6
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   04D08DE2           ADD      SP,SP,#+4
   \   000000BC   F040BDE8           POP      {R4-R7,LR}
   \   000000C0   ........           B        _SetPixelIndex   ;; tailcall
    234          }
    235          
    236          /*********************************************************************
    237          *
    238          *       _DrawHLine
    239          */

   \                                 In section .text, align 4, keep-with-next
    240          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    241            LCD_PIXELINDEX ColorIndex;
    242          
    243            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   0900000A           BEQ      ??_DrawHLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   140000BA           BLT      ??_DrawHLine_1
    244              for (; x0 <= x1; x0++) {
    245                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _XorPixel
    246              }
   \   0000003C   017087E2           ADD      R7,R7,#+1
   \   00000040   070056E1           CMP      R6,R7
   \   00000044   F8FFFFAA           BGE      ??_DrawHLine_2
   \   00000048   F081BDE8           POP      {R4-R8,PC}
    247            } else {
    248              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawHLine_0:
   \   0000004C   ........           LDR      R0,??DataTable14_1
   \   00000050   070056E1           CMP      R6,R7
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   008090E5           LDR      R8,[R0, #+0]
   \   0000005C   070000BA           BLT      ??_DrawHLine_1
    249              for (; x0 <= x1; x0++) {
    250                _SetPixelIndex(pDevice, x0, y, ColorIndex);
   \                     ??_DrawHLine_3:
   \   00000060   0830A0E1           MOV      R3,R8
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       _SetPixelIndex
    251              }
   \   00000074   017087E2           ADD      R7,R7,#+1
   \   00000078   070056E1           CMP      R6,R7
   \   0000007C   F7FFFFAA           BGE      ??_DrawHLine_3
    252            }
    253          }
   \                     ??_DrawHLine_1:
   \   00000080   F081BDE8           POP      {R4-R8,PC}       ;; return
    254          
    255          /*********************************************************************
    256          *
    257          *       _DrawVLine
    258          */

   \                                 In section .text, align 4, keep-with-next
    259          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    260            DRIVER_CONTEXT * pContext;
    261            U32 Off, RemPixels, Data;
    262            int x0, x1, y, Odd;
    263            LCD_PIXELINDEX ColorIndex;
    264          
    265            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   010010E3           TST      R0,#0x1
   \   00000024   0900000A           BEQ      ??_DrawVLine_0
   \   00000028   040056E1           CMP      R6,R4
   \   0000002C   7A0000BA           BLT      ??_DrawVLine_1
    266              for (; y0 <= y1; y0++) {
    267                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   00000030   0420A0E1           MOV      R2,R4
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           BL       _XorPixel
    268              }
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   040056E1           CMP      R6,R4
   \   00000048   F8FFFFAA           BGE      ??_DrawVLine_2
   \   0000004C   720000EA           B        ??_DrawVLine_1
    269            } else {
    270              ColorIndex = LCD__GetColorIndex();
    271              pContext  = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawVLine_0:
   \   00000050   081097E5           LDR      R1,[R7, #+8]
   \   00000054   ........           LDR      R0,??DataTable14_1
    272              x0        = pContext->vySize - y1 - 1;
   \   00000058   10C091E5           LDR      R12,[R1, #+16]
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   06204CE0           SUB      R2,R12,R6
   \   00000064   013042E2           SUB      R3,R2,#+1
    273              x1        = pContext->vySize - y0 - 1;
    274              y         = x;
    275              Off       = XY2OFF32(pContext->vxSizePhys, x0, y);
   \   00000068   142091E5           LDR      R2,[R1, #+20]
    276              RemPixels = x1 - x0 + 1;
   \   0000006C   04C04CE0           SUB      R12,R12,R4
   \   00000070   92050EE0           MUL      LR,R2,R5
   \   00000074   01C04CE2           SUB      R12,R12,#+1
   \   00000078   8E208EE0           ADD      R2,LR,LR, LSL #+1
   \   0000007C   83E083E0           ADD      LR,R3,R3, LSL #+1
   \   00000080   02208EE0           ADD      R2,LR,R2
   \   00000084   03C04CE0           SUB      R12,R12,R3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   2221A0E1           LSR      R2,R2,#+2
   \   00000090   01C08CE2           ADD      R12,R12,#+1
    277              //
    278              // First triple DWORD
    279              //
    280              Odd = x0 & 3;
   \   00000094   033013E2           ANDS     R3,R3,#0x3
    281              if (Odd) {
   \   00000098   2900000A           BEQ      ??_DrawVLine_3
    282                Data  = READ_MEM32(pContext->VRAMAddr, Off);
   \   0000009C   00E091E5           LDR      LR,[R1, #+0]
    283                switch (Odd) {
   \   000000A0   010053E3           CMP      R3,#+1
   \   000000A4   02419EE7           LDR      R4,[LR, +R2, LSL #+2]
   \   000000A8   0400000A           BEQ      ??_DrawVLine_4
   \   000000AC   2400003A           BCC      ??_DrawVLine_3
   \   000000B0   030053E3           CMP      R3,#+3
   \   000000B4   1C00000A           BEQ      ??_DrawVLine_5
   \   000000B8   0F00003A           BCC      ??_DrawVLine_6
   \   000000BC   200000EA           B        ??_DrawVLine_3
    284                case 1:
    285                  Data &= 0x00FFFFFF;
    286                  Data |= ColorIndex << 24;
    287                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_4:
   \   000000C0   0434A0E1           LSL      R3,R4,#+8
   \   000000C4   004CA0E1           LSL      R4,R0,#+24
   \   000000C8   233484E1           ORR      R3,R4,R3, LSR #+8
   \   000000CC   02318EE7           STR      R3,[LR, +R2, LSL #+2]
    288                  Off++;
    289                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    290                  Data &= 0xFFFF0000;
    291                  Data |= ColorIndex >> 8;
   \   000000D0   003091E5           LDR      R3,[R1, #+0]
   \   000000D4   012082E2           ADD      R2,R2,#+1
   \   000000D8   023193E7           LDR      R3,[R3, +R2, LSL #+2]
   \   000000DC   20E4A0E1           LSR      LR,R0,#+8
   \   000000E0   2338A0E1           LSR      R3,R3,#+16
   \   000000E4   03488EE1           ORR      R4,LR,R3, LSL #+16
    292                  RemPixels--;
   \   000000E8   01C05CE2           SUBS     R12,R12,#+1
    293                  if (!RemPixels) {
   \   000000EC   0200001A           BNE      ??_DrawVLine_6
    294                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_7:
   \   000000F0   003091E5           LDR      R3,[R1, #+0]
   \   000000F4   024183E7           STR      R4,[R3, +R2, LSL #+2]
    295                    break;
   \   000000F8   110000EA           B        ??_DrawVLine_3
    296                  }
    297                  // no break here!!!
    298                case 2:
    299                  Data &= 0x0000FFFF;
    300                  Data |= ColorIndex << 16;
    301                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_6:
   \   000000FC   0438A0E1           LSL      R3,R4,#+16
   \   00000100   00E8A0E1           LSL      LR,R0,#+16
   \   00000104   23388EE1           ORR      R3,LR,R3, LSR #+16
   \   00000108   00E091E5           LDR      LR,[R1, #+0]
    302                  Off++;
    303                  Data  = READ_MEM32(pContext->VRAMAddr, Off);
    304                  Data &= 0xFFFFFF00;
    305                  Data |= ColorIndex >> 16;
    306                  RemPixels--;
   \   0000010C   01C05CE2           SUBS     R12,R12,#+1
   \   00000110   02318EE7           STR      R3,[LR, +R2, LSL #+2]
   \   00000114   003091E5           LDR      R3,[R1, #+0]
   \   00000118   012082E2           ADD      R2,R2,#+1
   \   0000011C   023193E7           LDR      R3,[R3, +R2, LSL #+2]
   \   00000120   FF30C3E3           BIC      R3,R3,#0xFF
   \   00000124   204883E1           ORR      R4,R3,R0, LSR #+16
    307                  if (!RemPixels) {
   \   00000128   F0FFFF0A           BEQ      ??_DrawVLine_7
    308                    WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    309                    break;
    310                  }
    311                  // no break here!!!
    312                case 3:
    313                  Data &= 0x000000FF;
    314                  Data |= ColorIndex << 8;
    315                  RemPixels--;
    316                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_5:
   \   0000012C   FF3004E2           AND      R3,R4,#0xFF
   \   00000130   00E091E5           LDR      LR,[R1, #+0]
   \   00000134   003483E1           ORR      R3,R3,R0, LSL #+8
   \   00000138   02318EE7           STR      R3,[LR, +R2, LSL #+2]
   \   0000013C   01C04CE2           SUB      R12,R12,#+1
    317                  Off++;
   \   00000140   012082E2           ADD      R2,R2,#+1
    318                }
    319              }
    320              //
    321              // Complete triple DWORDS
    322              //
    323              if (RemPixels >= 4) {
   \                     ??_DrawVLine_3:
   \   00000144   04005CE3           CMP      R12,#+4
   \   00000148   1200003A           BCC      ??_DrawVLine_8
    324                U32 Data0, Data1, Data2;
    325                Data0 = (ColorIndex      ) | (ColorIndex << 24);
    326                Data1 = (ColorIndex >>  8) | (ColorIndex << 16);
   \   0000014C   00E8A0E1           LSL      LR,R0,#+16
    327                Data2 = (ColorIndex >> 16) | (ColorIndex <<  8);
   \   00000150   0044A0E1           LSL      R4,R0,#+8
   \   00000154   003C80E1           ORR      R3,R0,R0, LSL #+24
   \   00000158   20E48EE1           ORR      LR,LR,R0, LSR #+8
   \   0000015C   204884E1           ORR      R4,R4,R0, LSR #+16
   \   00000160   0251A0E1           LSL      R5,R2,#+2
    328                do {
    329                  WRITE_MEM32(pContext->VRAMAddr, Off + 0, Data0);
   \                     ??_DrawVLine_9:
   \   00000164   006091E5           LDR      R6,[R1, #+0]
    330                  WRITE_MEM32(pContext->VRAMAddr, Off + 1, Data1);
    331                  WRITE_MEM32(pContext->VRAMAddr, Off + 2, Data2);
    332                  Off += 3;
    333                } while ((RemPixels -= 4) >= 4);
   \   00000168   04C04CE2           SUB      R12,R12,#+4
   \   0000016C   063085E7           STR      R3,[R5, +R6]
   \   00000170   006091E5           LDR      R6,[R1, #+0]
   \   00000174   032082E2           ADD      R2,R2,#+3
   \   00000178   066085E0           ADD      R6,R5,R6
   \   0000017C   04E086E5           STR      LR,[R6, #+4]
   \   00000180   006091E5           LDR      R6,[R1, #+0]
   \   00000184   04005CE3           CMP      R12,#+4
   \   00000188   066085E0           ADD      R6,R5,R6
   \   0000018C   084086E5           STR      R4,[R6, #+8]
   \   00000190   0C5085E2           ADD      R5,R5,#+12
   \   00000194   F2FFFF2A           BCS      ??_DrawVLine_9
    334              }
    335              //
    336              // Last triple DWORD
    337              //
    338              if (RemPixels) {
   \                     ??_DrawVLine_8:
   \   00000198   00005CE3           CMP      R12,#+0
   \   0000019C   1E00000A           BEQ      ??_DrawVLine_1
    339                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    340                Data &= 0xFF000000;
    341                Data |= ColorIndex;
   \   000001A0   003091E5           LDR      R3,[R1, #+0]
    342                RemPixels--;
   \   000001A4   01C05CE2           SUBS     R12,R12,#+1
   \   000001A8   02E193E7           LDR      LR,[R3, +R2, LSL #+2]
   \   000001AC   FFE40EE2           AND      LR,LR,#0xFF000000
   \   000001B0   0E4080E1           ORR      R4,R0,LR
    343                if (!RemPixels) {
   \   000001B4   0200001A           BNE      ??_DrawVLine_10
    344                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_11:
   \   000001B8   000091E5           LDR      R0,[R1, #+0]
   \   000001BC   024180E7           STR      R4,[R0, +R2, LSL #+2]
    345                  return;
   \   000001C0   150000EA           B        ??_DrawVLine_1
    346                }
    347                Data &= 0x00FFFFFF;
    348                Data |= ColorIndex << 24;
    349                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawVLine_10:
   \   000001C4   04E4A0E1           LSL      LR,R4,#+8
   \   000001C8   004CA0E1           LSL      R4,R0,#+24
   \   000001CC   2EE484E1           ORR      LR,R4,LR, LSR #+8
   \   000001D0   02E183E7           STR      LR,[R3, +R2, LSL #+2]
    350                Off++;
    351                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    352                Data &= 0xFFFF0000;
    353                Data |= ColorIndex >> 8;
   \   000001D4   003091E5           LDR      R3,[R1, #+0]
   \   000001D8   012082E2           ADD      R2,R2,#+1
   \   000001DC   02E193E7           LDR      LR,[R3, +R2, LSL #+2]
   \   000001E0   2044A0E1           LSR      R4,R0,#+8
   \   000001E4   2EE8A0E1           LSR      LR,LR,#+16
   \   000001E8   0E4884E1           ORR      R4,R4,LR, LSL #+16
    354                RemPixels--;
    355                if (!RemPixels) {
   \   000001EC   01C05CE2           SUBS     R12,R12,#+1
   \   000001F0   F0FFFF0A           BEQ      ??_DrawVLine_11
    356                  WRITE_MEM32(pContext->VRAMAddr, Off, Data);
    357                  return;
    358                }
    359                Data &= 0x0000FFFF;
    360                Data |= ColorIndex << 16;
    361                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   000001F4   04C8A0E1           LSL      R12,R4,#+16
   \   000001F8   00E8A0E1           LSL      LR,R0,#+16
   \   000001FC   2CC88EE1           ORR      R12,LR,R12, LSR #+16
   \   00000200   02C183E7           STR      R12,[R3, +R2, LSL #+2]
    362                Off++;
    363                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    364                Data &= 0xFFFFFF00;
    365                Data |= ColorIndex >> 16;
    366                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \   00000204   001091E5           LDR      R1,[R1, #+0]
   \   00000208   012082E2           ADD      R2,R2,#+1
   \   0000020C   023191E7           LDR      R3,[R1, +R2, LSL #+2]
   \   00000210   FF30C3E3           BIC      R3,R3,#0xFF
   \   00000214   200883E1           ORR      R0,R3,R0, LSR #+16
   \   00000218   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \                     ??_DrawVLine_1:
   \   0000021C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000220   F080BDE8           POP      {R4-R7,PC}       ;; return
    367              }
    368            }
    369          }
    370          
    371          /*********************************************************************
    372          *
    373          *       _FillRect
    374          */

   \                                 In section .text, align 4, keep-with-next
    375          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0370A0E1           MOV      R7,R3
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   18809DE5           LDR      R8,[SP, #+24]
   \   00000018   050057E1           CMP      R7,R5
   \   0000001C   070000BA           BLT      ??_FillRect_0
    376            #ifdef LCD_FILL_RECT
    377               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    378            #else
    379              for (; x0 <= x1; x0++) {
    380                _DrawVLine(pDevice, x0, y0, y1);
   \                     ??_FillRect_1:
   \   00000020   0830A0E1           MOV      R3,R8
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawVLine
    381              }
   \   00000034   015085E2           ADD      R5,R5,#+1
   \   00000038   050057E1           CMP      R7,R5
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    382            #endif
    383          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    384          
    385          /*********************************************************************
    386          *
    387          *       Draw Bitmap 1 BPP
    388          */

   \                                 In section .text, align 4, keep-with-next
    389          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
    390            LCD_PIXELINDEX IndexMask, Index0, Index1, Pixel;
    391          
    392            Index0 = *(pTrans + 0);
   \   00000010   00A090E5           LDR      R10,[R0, #+0]
    393            Index1 = *(pTrans + 1);
   \   00000014   04B090E5           LDR      R11,[R0, #+4]
    394            x += Diff;
    395            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000018   ........           LDR      R0,??DataTable14
   \   0000001C   28709DE5           LDR      R7,[SP, #+40]
   \   00000020   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000024   0250A0E1           MOV      R5,R2
   \   00000028   0360A0E1           MOV      R6,R3
   \   0000002C   030000E2           AND      R0,R0,#0x3
   \   00000030   2C809DE5           LDR      R8,[SP, #+44]
   \   00000034   019087E0           ADD      R9,R7,R1
   \   00000038   030050E3           CMP      R0,#+3
   \   0000003C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000040   5D00008A           BHI      ??_DrawBitLine1BPP_2
   \   00000044   020000EA           B        ??_DrawBitLine1BPP_3
   \   00000048   230000EA           B        ??_DrawBitLine1BPP_4
   \   0000004C   110000EA           B        ??_DrawBitLine1BPP_5
   \   00000050   210000EA           B        ??_DrawBitLine1BPP_4
    396            case 0:
    397              do {
    398                _SetPixelIndex(pDevice, x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
   \                     ??_DrawBitLine1BPP_3:
   \   00000054   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000058   8010A0E3           MOV      R1,#+128
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   510710E1           TST      R0,R1, ASR R7
   \   00000064   0B30A011           MOVNE    R3,R11
   \   00000068   0A30A001           MOVEQ    R3,R10
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       _SetPixelIndex
    399                if (++Diff == 8) {
   \   00000078   017087E2           ADD      R7,R7,#+1
   \   0000007C   080057E3           CMP      R7,#+8
    400                  Diff = 0;
   \   00000080   0070A003           MOVEQ    R7,#+0
    401                  p++;
   \   00000084   01608602           ADDEQ    R6,R6,#+1
   \   00000088   019089E2           ADD      R9,R9,#+1
    402                }
    403              } while (--xsize);
   \   0000008C   018058E2           SUBS     R8,R8,#+1
   \   00000090   EFFFFF1A           BNE      ??_DrawBitLine1BPP_3
   \   00000094   480000EA           B        ??_DrawBitLine1BPP_2
    404              break;
    405            case LCD_DRAWMODE_TRANS:
    406              do {
    407                if (*p & (0x80 >> Diff))
   \                     ??_DrawBitLine1BPP_5:
   \   00000098   0000D6E5           LDRB     R0,[R6, #+0]
   \   0000009C   8010A0E3           MOV      R1,#+128
   \   000000A0   510710E1           TST      R0,R1, ASR R7
   \   000000A4   0400000A           BEQ      ??_DrawBitLine1BPP_6
    408                  _SetPixelIndex(pDevice, x, y, Index1);
   \   000000A8   0B30A0E1           MOV      R3,R11
   \   000000AC   0520A0E1           MOV      R2,R5
   \   000000B0   0910A0E1           MOV      R1,R9
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       _SetPixelIndex
    409                x++;
    410                if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_6:
   \   000000BC   017087E2           ADD      R7,R7,#+1
   \   000000C0   080057E3           CMP      R7,#+8
    411                  Diff = 0;
   \   000000C4   0070A003           MOVEQ    R7,#+0
    412                  p++;
   \   000000C8   01608602           ADDEQ    R6,R6,#+1
   \   000000CC   019089E2           ADD      R9,R9,#+1
    413                }
    414              } while (--xsize);
   \   000000D0   018058E2           SUBS     R8,R8,#+1
   \   000000D4   EFFFFF1A           BNE      ??_DrawBitLine1BPP_5
   \   000000D8   370000EA           B        ??_DrawBitLine1BPP_2
    415              break;
    416            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    417            case LCD_DRAWMODE_XOR:
    418              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_4:
   \   000000DC   100094E5           LDR      R0,[R4, #+16]
   \   000000E0   080090E5           LDR      R0,[R0, #+8]
   \   000000E4   30FF2FE1           BLX      R0
   \   000000E8   00A0A0E1           MOV      R10,R0
   \   000000EC   80B0A0E3           MOV      R11,#+128
    419              do {
    420                if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_7:
   \   000000F0   0000D6E5           LDRB     R0,[R6, #+0]
   \   000000F4   5B0710E1           TST      R0,R11, ASR R7
   \   000000F8   2800000A           BEQ      ??_DrawBitLine1BPP_8
    421                  Pixel = _GetPixelIndex(pDevice, x, y);
   \   000000FC   081094E5           LDR      R1,[R4, #+8]
   \   00000100   143091E5           LDR      R3,[R1, #+20]
   \   00000104   102091E5           LDR      R2,[R1, #+16]
   \   00000108   990303E0           MUL      R3,R9,R3
   \   0000010C   012042E2           SUB      R2,R2,#+1
   \   00000110   052042E0           SUB      R2,R2,R5
   \   00000114   833083E0           ADD      R3,R3,R3, LSL #+1
   \   00000118   82C082E0           ADD      R12,R2,R2, LSL #+1
   \   0000011C   03308CE0           ADD      R3,R12,R3
   \   00000120   001091E5           LDR      R1,[R1, #+0]
   \   00000124   2331A0E1           LSR      R3,R3,#+2
   \   00000128   032002E2           AND      R2,R2,#0x3
   \   0000012C   03C191E7           LDR      R12,[R1, +R3, LSL #+2]
   \   00000130   030052E3           CMP      R2,#+3
   \   00000134   02F18F90           ADDLS    PC,PC,R2, LSL #+2
   \                     ??_DrawBitLine1BPP_1:
   \   00000138   1300008A           BHI      ??_DrawBitLine1BPP_9
   \   0000013C   100000EA           B        ??_DrawBitLine1BPP_10
   \   00000140   080000EA           B        ??_DrawBitLine1BPP_11
   \   00000144   020000EA           B        ??_DrawBitLine1BPP_12
   \   00000148   FFFFFFEA           B        ??_DrawBitLine1BPP_13
   \                     ??_DrawBitLine1BPP_13:
   \   0000014C   2C04A0E1           LSR      R0,R12,#+8
   \   00000150   0D0000EA           B        ??_DrawBitLine1BPP_9
   \                     ??_DrawBitLine1BPP_12:
   \   00000154   030181E0           ADD      R0,R1,R3, LSL #+2
   \   00000158   0400D0E5           LDRB     R0,[R0, #+4]
   \   0000015C   0008A0E1           LSL      R0,R0,#+16
   \   00000160   2C0880E1           ORR      R0,R0,R12, LSR #+16
   \   00000164   080000EA           B        ??_DrawBitLine1BPP_9
   \                     ??_DrawBitLine1BPP_11:
   \   00000168   030181E0           ADD      R0,R1,R3, LSL #+2
   \   0000016C   B400D0E1           LDRH     R0,[R0, #+4]
   \   00000170   0008A0E1           LSL      R0,R0,#+16
   \   00000174   2008A0E1           LSR      R0,R0,#+16
   \   00000178   0004A0E1           LSL      R0,R0,#+8
   \   0000017C   2C0C80E1           ORR      R0,R0,R12, LSR #+24
   \   00000180   010000EA           B        ??_DrawBitLine1BPP_9
   \                     ??_DrawBitLine1BPP_10:
   \   00000184   0C04A0E1           LSL      R0,R12,#+8
   \   00000188   2004A0E1           LSR      R0,R0,#+8
    422                  _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
   \                     ??_DrawBitLine1BPP_9:
   \   0000018C   00302AE0           EOR      R3,R10,R0
   \   00000190   0520A0E1           MOV      R2,R5
   \   00000194   0910A0E1           MOV      R1,R9
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           BL       _SetPixelIndex
    423                }
    424                x++;
    425                if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_8:
   \   000001A0   017087E2           ADD      R7,R7,#+1
   \   000001A4   080057E3           CMP      R7,#+8
    426                  Diff = 0;
   \   000001A8   0070A003           MOVEQ    R7,#+0
    427                  p++;
   \   000001AC   01608602           ADDEQ    R6,R6,#+1
   \   000001B0   019089E2           ADD      R9,R9,#+1
    428                }
    429              } while (--xsize);
   \   000001B4   018058E2           SUBS     R8,R8,#+1
   \   000001B8   CCFFFF1A           BNE      ??_DrawBitLine1BPP_7
    430              break;
    431            }
    432          }
   \                     ??_DrawBitLine1BPP_2:
   \   000001BC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000001C0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    433          
    434          /*********************************************************************
    435          *
    436          *       Draw Bitmap 2 BPP
    437          */

   \                                 In section .text, align 4, keep-with-next
    438          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    439            LCD_PIXELINDEX Pixels, PixelIndex;
    440            int CurrentPixel, Shift, Index;
    441          
    442            Pixels = *p;
    443            CurrentPixel = Diff;
    444            x += Diff;
    445            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   28409DE5           LDR      R4,[SP, #+40]
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   2C809DE5           LDR      R8,[SP, #+44]
   \   00000024   0090D7E5           LDRB     R9,[R7, #+0]
   \   00000028   01A084E0           ADD      R10,R4,R1
   \   0000002C   030010E2           ANDS     R0,R0,#0x3
   \   00000030   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000034   020050E2           SUBS     R0,R0,#+2
   \   00000038   2A00000A           BEQ      ??_DrawBitLine2BPP_1
   \   0000003C   540000EA           B        ??_DrawBitLine2BPP_2
    446            case 0:
    447              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000040   30009DE5           LDR      R0,[SP, #+48]
   \   00000044   C0B0A0E3           MOV      R11,#+192
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1300000A           BEQ      ??_DrawBitLine2BPP_3
    448                do {
    449                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   00000050   030064E2           RSB      R0,R4,#+3
   \   00000054   8000A0E1           LSL      R0,R0,#+1
    450                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    451                  PixelIndex = *(pTrans + Index);
    452                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   061061E2           RSB      R1,R1,#+6
   \   00000060   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000064   3100A0E1           LSR      R0,R1,R0
   \   00000068   30109DE5           LDR      R1,[SP, #+48]
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   00000074   0A10A0E1           MOV      R1,R10
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       _SetPixelIndex
    453                  if (++CurrentPixel == 4) {
   \   00000080   014084E2           ADD      R4,R4,#+1
   \   00000084   040054E3           CMP      R4,#+4
    454                    CurrentPixel = 0;
   \   00000088   0040A003           MOVEQ    R4,#+0
    455                    Pixels = *(++p);
   \   0000008C   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000090   01A08AE2           ADD      R10,R10,#+1
    456                  }
    457                } while (--xsize);
   \   00000094   018058E2           SUBS     R8,R8,#+1
   \   00000098   ECFFFF1A           BNE      ??_DrawBitLine2BPP_4
   \   0000009C   3C0000EA           B        ??_DrawBitLine2BPP_2
    458              } else {
    459                do {
    460                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_3:
   \   000000A0   030064E2           RSB      R0,R4,#+3
   \   000000A4   8000A0E1           LSL      R0,R0,#+1
    461                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    462                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   0010A0E1           MOV      R1,R0
   \   000000AC   061061E2           RSB      R1,R1,#+6
   \   000000B0   5B1109E0           AND      R1,R9,R11, ASR R1
   \   000000B4   3130A0E1           LSR      R3,R1,R0
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0A10A0E1           MOV      R1,R10
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       _SetPixelIndex
    463                  if (++CurrentPixel == 4) {
   \   000000C8   014084E2           ADD      R4,R4,#+1
   \   000000CC   040054E3           CMP      R4,#+4
    464                    CurrentPixel = 0;
   \   000000D0   0040A003           MOVEQ    R4,#+0
    465                    Pixels = *(++p);
   \   000000D4   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   000000D8   01A08AE2           ADD      R10,R10,#+1
    466                  }
    467                } while (--xsize);
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   EEFFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   000000E4   2A0000EA           B        ??_DrawBitLine2BPP_2
    468              }
    469              break;
    470            case LCD_DRAWMODE_TRANS:
    471              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   000000E8   30009DE5           LDR      R0,[SP, #+48]
   \   000000EC   C0B0A0E3           MOV      R11,#+192
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??_DrawBitLine2BPP_5
    472                do {
    473                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_6:
   \   000000F8   030064E2           RSB      R0,R4,#+3
   \   000000FC   8000A0E1           LSL      R0,R0,#+1
    474                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000100   0010A0E1           MOV      R1,R0
   \   00000104   061061E2           RSB      R1,R1,#+6
   \   00000108   5B1109E0           AND      R1,R9,R11, ASR R1
   \   0000010C   3130B0E1           LSRS     R3,R1,R0
    475                  if (Index) {
   \   00000110   0500000A           BEQ      ??_DrawBitLine2BPP_7
    476                    PixelIndex = *(pTrans + Index);
    477                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000114   30009DE5           LDR      R0,[SP, #+48]
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   033190E7           LDR      R3,[R0, +R3, LSL #+2]
   \   00000120   0A10A0E1           MOV      R1,R10
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           BL       _SetPixelIndex
    478                  }
    479                  x++;
    480                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   0000012C   014084E2           ADD      R4,R4,#+1
   \   00000130   040054E3           CMP      R4,#+4
    481                    CurrentPixel = 0;
   \   00000134   0040A003           MOVEQ    R4,#+0
    482                    Pixels = *(++p);
   \   00000138   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   0000013C   01A08AE2           ADD      R10,R10,#+1
    483                  }
    484                } while (--xsize);
   \   00000140   018058E2           SUBS     R8,R8,#+1
   \   00000144   EBFFFF1A           BNE      ??_DrawBitLine2BPP_6
   \   00000148   110000EA           B        ??_DrawBitLine2BPP_2
    485              } else {
    486                do {
    487                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   0000014C   030064E2           RSB      R0,R4,#+3
   \   00000150   8000A0E1           LSL      R0,R0,#+1
    488                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   061061E2           RSB      R1,R1,#+6
   \   0000015C   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000160   3130B0E1           LSRS     R3,R1,R0
    489                  if (Index) {
   \   00000164   0300000A           BEQ      ??_DrawBitLine2BPP_8
    490                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000168   0620A0E1           MOV      R2,R6
   \   0000016C   0A10A0E1           MOV      R1,R10
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       _SetPixelIndex
    491                  }
    492                  x++;
    493                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_8:
   \   00000178   014084E2           ADD      R4,R4,#+1
   \   0000017C   040054E3           CMP      R4,#+4
    494                    CurrentPixel = 0;
   \   00000180   0040A003           MOVEQ    R4,#+0
    495                    Pixels = *(++p);
   \   00000184   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000188   01A08AE2           ADD      R10,R10,#+1
    496                  }
    497                } while (--xsize);
   \   0000018C   018058E2           SUBS     R8,R8,#+1
   \   00000190   EDFFFF1A           BNE      ??_DrawBitLine2BPP_5
    498              }
    499              break;
    500            }
    501          }
   \                     ??_DrawBitLine2BPP_2:
   \   00000194   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000198   F08FBDE8           POP      {R4-R11,PC}      ;; return
    502          
    503          /*********************************************************************
    504          *
    505          *       Draw Bitmap 4 BPP
    506          */

   \                                 In section .text, align 4, keep-with-next
    507          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    508            LCD_PIXELINDEX Pixels, PixelIndex;
    509            int CurrentPixel, Shift, Index;
    510          
    511            Pixels = *p;
    512            CurrentPixel = Diff;
    513            x += Diff;
    514            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   28409DE5           LDR      R4,[SP, #+40]
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   2C809DE5           LDR      R8,[SP, #+44]
   \   00000024   0090D7E5           LDRB     R9,[R7, #+0]
   \   00000028   01A084E0           ADD      R10,R4,R1
   \   0000002C   030010E2           ANDS     R0,R0,#0x3
   \   00000030   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000034   020050E2           SUBS     R0,R0,#+2
   \   00000038   2A00000A           BEQ      ??_DrawBitLine4BPP_1
   \   0000003C   540000EA           B        ??_DrawBitLine4BPP_2
    515            case 0:
    516              if (pTrans) {
   \                     ??_DrawBitLine4BPP_0:
   \   00000040   30009DE5           LDR      R0,[SP, #+48]
   \   00000044   F0B0A0E3           MOV      R11,#+240
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1300000A           BEQ      ??_DrawBitLine4BPP_3
    517                do {
    518                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   00000050   010064E2           RSB      R0,R4,#+1
   \   00000054   0001A0E1           LSL      R0,R0,#+2
    519                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    520                  PixelIndex = *(pTrans + Index);
    521                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   041061E2           RSB      R1,R1,#+4
   \   00000060   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000064   3100A0E1           LSR      R0,R1,R0
   \   00000068   30109DE5           LDR      R1,[SP, #+48]
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   00000074   0A10A0E1           MOV      R1,R10
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           BL       _SetPixelIndex
    522                  if (++CurrentPixel == 2) {
   \   00000080   014084E2           ADD      R4,R4,#+1
   \   00000084   020054E3           CMP      R4,#+2
    523                    CurrentPixel = 0;
   \   00000088   0040A003           MOVEQ    R4,#+0
    524                    Pixels = *(++p);
   \   0000008C   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000090   01A08AE2           ADD      R10,R10,#+1
    525                  }
    526                } while (--xsize);
   \   00000094   018058E2           SUBS     R8,R8,#+1
   \   00000098   ECFFFF1A           BNE      ??_DrawBitLine4BPP_4
   \   0000009C   3C0000EA           B        ??_DrawBitLine4BPP_2
    527              } else {
    528                do {
    529                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_3:
   \   000000A0   010064E2           RSB      R0,R4,#+1
   \   000000A4   0001A0E1           LSL      R0,R0,#+2
    530                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    531                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   0010A0E1           MOV      R1,R0
   \   000000AC   041061E2           RSB      R1,R1,#+4
   \   000000B0   5B1109E0           AND      R1,R9,R11, ASR R1
   \   000000B4   3130A0E1           LSR      R3,R1,R0
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0A10A0E1           MOV      R1,R10
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           BL       _SetPixelIndex
    532                  if (++CurrentPixel == 2) {
   \   000000C8   014084E2           ADD      R4,R4,#+1
   \   000000CC   020054E3           CMP      R4,#+2
    533                    CurrentPixel = 0;
   \   000000D0   0040A003           MOVEQ    R4,#+0
    534                    Pixels = *(++p);
   \   000000D4   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   000000D8   01A08AE2           ADD      R10,R10,#+1
    535                  }
    536                } while (--xsize);
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   EEFFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   000000E4   2A0000EA           B        ??_DrawBitLine4BPP_2
    537              }
    538              break;
    539            case LCD_DRAWMODE_TRANS:
    540              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   000000E8   30009DE5           LDR      R0,[SP, #+48]
   \   000000EC   F0B0A0E3           MOV      R11,#+240
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??_DrawBitLine4BPP_5
    541                do {
    542                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_6:
   \   000000F8   010064E2           RSB      R0,R4,#+1
   \   000000FC   0001A0E1           LSL      R0,R0,#+2
    543                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000100   0010A0E1           MOV      R1,R0
   \   00000104   041061E2           RSB      R1,R1,#+4
   \   00000108   5B1109E0           AND      R1,R9,R11, ASR R1
   \   0000010C   3130B0E1           LSRS     R3,R1,R0
    544                  if (Index) {
   \   00000110   0500000A           BEQ      ??_DrawBitLine4BPP_7
    545                    PixelIndex = *(pTrans + Index);
    546                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000114   30009DE5           LDR      R0,[SP, #+48]
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   033190E7           LDR      R3,[R0, +R3, LSL #+2]
   \   00000120   0A10A0E1           MOV      R1,R10
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           BL       _SetPixelIndex
    547                  }
    548                  x++;
    549                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   0000012C   014084E2           ADD      R4,R4,#+1
   \   00000130   020054E3           CMP      R4,#+2
    550                    CurrentPixel = 0;
   \   00000134   0040A003           MOVEQ    R4,#+0
    551                    Pixels = *(++p);
   \   00000138   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   0000013C   01A08AE2           ADD      R10,R10,#+1
    552                  }
    553                } while (--xsize);
   \   00000140   018058E2           SUBS     R8,R8,#+1
   \   00000144   EBFFFF1A           BNE      ??_DrawBitLine4BPP_6
   \   00000148   110000EA           B        ??_DrawBitLine4BPP_2
    554              } else {
    555                do {
    556                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   0000014C   010064E2           RSB      R0,R4,#+1
   \   00000150   0001A0E1           LSL      R0,R0,#+2
    557                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   041061E2           RSB      R1,R1,#+4
   \   0000015C   5B1109E0           AND      R1,R9,R11, ASR R1
   \   00000160   3130B0E1           LSRS     R3,R1,R0
    558                  if (Index) {
   \   00000164   0300000A           BEQ      ??_DrawBitLine4BPP_8
    559                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000168   0620A0E1           MOV      R2,R6
   \   0000016C   0A10A0E1           MOV      R1,R10
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           BL       _SetPixelIndex
    560                  }
    561                  x++;
    562                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_8:
   \   00000178   014084E2           ADD      R4,R4,#+1
   \   0000017C   020054E3           CMP      R4,#+2
    563                    CurrentPixel = 0;
   \   00000180   0040A003           MOVEQ    R4,#+0
    564                    Pixels = *(++p);
   \   00000184   0190F705           LDRBEQ   R9,[R7, #+1]!
   \   00000188   01A08AE2           ADD      R10,R10,#+1
    565                  }
    566                } while (--xsize);
   \   0000018C   018058E2           SUBS     R8,R8,#+1
   \   00000190   EDFFFF1A           BNE      ??_DrawBitLine4BPP_5
    567              }
    568              break;
    569            }
    570          }
   \                     ??_DrawBitLine4BPP_2:
   \   00000194   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000198   F08FBDE8           POP      {R4-R11,PC}      ;; return
    571          
    572          /*********************************************************************
    573          *
    574          *       Draw Bitmap 8 BPP
    575          */

   \                                 In section .text, align 4, keep-with-next
    576          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    577            LCD_PIXELINDEX Pixel;
    578          
    579            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   20909DE5           LDR      R9,[SP, #+32]
   \   00000024   24809DE5           LDR      R8,[SP, #+36]
   \   00000028   030010E2           ANDS     R0,R0,#0x3
   \   0000002C   0200000A           BEQ      ??_DrawBitLine8BPP_0
   \   00000030   020050E2           SUBS     R0,R0,#+2
   \   00000034   3700000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000038   850000EA           B        ??_DrawBitLine8BPP_2
    580            case 0:
    581              if (pTrans) {
   \                     ??_DrawBitLine8BPP_0:
   \   0000003C   000058E3           CMP      R8,#+0
   \   00000040   1B00000A           BEQ      ??_DrawBitLine8BPP_3
   \   00000044   010059E3           CMP      R9,#+1
   \   00000048   810000BA           BLT      ??_DrawBitLine8BPP_2
   \   0000004C   010019E3           TST      R9,#0x1
   \   00000050   0400000A           BEQ      ??_DrawBitLine8BPP_4
    582                for (; xsize > 0; xsize--, x++, p++) {
    583                  Pixel = *p;
    584                  _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
   \   00000054   0100D6E4           LDRB     R0,[R6], #+1
   \   00000058   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       _SetPixelIndex
   \   00000064   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitLine8BPP_4:
   \   00000068   A990B0E1           LSRS     R9,R9,#+1
   \   0000006C   7800000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_5:
   \   00000070   0100D6E4           LDRB     R0,[R6], #+1
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0710A0E1           MOV      R1,R7
   \   0000007C   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _SetPixelIndex
   \   00000088   0100D6E4           LDRB     R0,[R6], #+1
   \   0000008C   017087E2           ADD      R7,R7,#+1
   \   00000090   0520A0E1           MOV      R2,R5
   \   00000094   003198E7           LDR      R3,[R8, +R0, LSL #+2]
   \   00000098   0710A0E1           MOV      R1,R7
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       _SetPixelIndex
    585                }
   \   000000A4   017087E2           ADD      R7,R7,#+1
   \   000000A8   019059E2           SUBS     R9,R9,#+1
   \   000000AC   EFFFFF1A           BNE      ??_DrawBitLine8BPP_5
   \   000000B0   670000EA           B        ??_DrawBitLine8BPP_2
    586              } else {
   \                     ??_DrawBitLine8BPP_3:
   \   000000B4   010059E3           CMP      R9,#+1
   \   000000B8   650000BA           BLT      ??_DrawBitLine8BPP_2
   \   000000BC   010019E3           TST      R9,#0x1
   \   000000C0   0300000A           BEQ      ??_DrawBitLine8BPP_6
    587                for (; xsize > 0; xsize--, x++, p++) {
    588                  _SetPixelIndex(pDevice, x, y, *p);
   \   000000C4   0130D6E4           LDRB     R3,[R6], #+1
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           BL       _SetPixelIndex
   \   000000D0   017087E2           ADD      R7,R7,#+1
   \                     ??_DrawBitLine8BPP_6:
   \   000000D4   A980B0E1           LSRS     R8,R9,#+1
   \   000000D8   5D00000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_7:
   \   000000DC   0130D6E4           LDRB     R3,[R6], #+1
   \   000000E0   0520A0E1           MOV      R2,R5
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       _SetPixelIndex
   \   000000F0   017087E2           ADD      R7,R7,#+1
   \   000000F4   0130D6E4           LDRB     R3,[R6], #+1
   \   000000F8   0520A0E1           MOV      R2,R5
   \   000000FC   0710A0E1           MOV      R1,R7
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _SetPixelIndex
    589                }
   \   00000108   017087E2           ADD      R7,R7,#+1
   \   0000010C   018058E2           SUBS     R8,R8,#+1
   \   00000110   F1FFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   00000114   4E0000EA           B        ??_DrawBitLine8BPP_2
    590              }
    591              break;
    592            case LCD_DRAWMODE_TRANS:
    593              if (pTrans) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000118   000058E3           CMP      R8,#+0
   \   0000011C   2600000A           BEQ      ??_DrawBitLine8BPP_8
   \   00000120   010059E3           CMP      R9,#+1
   \   00000124   4A0000BA           BLT      ??_DrawBitLine8BPP_2
   \   00000128   019049E2           SUB      R9,R9,#+1
   \   0000012C   0030D6E5           LDRB     R3,[R6, #+0]
   \   00000130   010019E3           TST      R9,#0x1
   \   00000134   0600000A           BEQ      ??_DrawBitLine8BPP_9
    594                for (; xsize > 0; xsize--, x++, p++) {
    595                  Pixel = *p;
    596                  if (Pixel) {
   \   00000138   000053E3           CMP      R3,#+0
   \   0000013C   0200000A           BEQ      ??_DrawBitLine8BPP_10
    597                    _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
   \   00000140   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_10:
   \   0000014C   017087E2           ADD      R7,R7,#+1
   \   00000150   0130F6E5           LDRB     R3,[R6, #+1]!
   \                     ??_DrawBitLine8BPP_9:
   \   00000154   A990B0E1           LSRS     R9,R9,#+1
   \   00000158   1300000A           BEQ      ??_DrawBitLine8BPP_11
   \                     ??_DrawBitLine8BPP_12:
   \   0000015C   000053E3           CMP      R3,#+0
   \   00000160   0400000A           BEQ      ??_DrawBitLine8BPP_13
   \   00000164   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   00000168   0520A0E1           MOV      R2,R5
   \   0000016C   0710A0E1           MOV      R1,R7
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_13:
   \   00000178   0130F6E5           LDRB     R3,[R6, #+1]!
   \   0000017C   017087E2           ADD      R7,R7,#+1
   \   00000180   000053E3           CMP      R3,#+0
   \   00000184   0400000A           BEQ      ??_DrawBitLine8BPP_14
   \   00000188   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   0000018C   0520A0E1           MOV      R2,R5
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_14:
   \   0000019C   017087E2           ADD      R7,R7,#+1
   \   000001A0   0130F6E5           LDRB     R3,[R6, #+1]!
   \   000001A4   019059E2           SUBS     R9,R9,#+1
   \   000001A8   EBFFFF1A           BNE      ??_DrawBitLine8BPP_12
   \                     ??_DrawBitLine8BPP_11:
   \   000001AC   000053E3           CMP      R3,#+0
   \   000001B0   2700000A           BEQ      ??_DrawBitLine8BPP_2
   \   000001B4   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   000001B8   210000EA           B        ??_DrawBitLine8BPP_15
    598                  }
    599                }
    600              } else {
   \                     ??_DrawBitLine8BPP_8:
   \   000001BC   010059E3           CMP      R9,#+1
   \   000001C0   230000BA           BLT      ??_DrawBitLine8BPP_2
   \   000001C4   018049E2           SUB      R8,R9,#+1
   \   000001C8   0030D6E5           LDRB     R3,[R6, #+0]
   \   000001CC   010018E3           TST      R8,#0x1
   \   000001D0   0500000A           BEQ      ??_DrawBitLine8BPP_16
    601                for (; xsize > 0; xsize--, x++, p++) {
    602                  Pixel = *p;
    603                  if (Pixel) {
   \   000001D4   000053E3           CMP      R3,#+0
   \   000001D8   0100000A           BEQ      ??_DrawBitLine8BPP_17
    604                    _SetPixelIndex(pDevice, x, y, Pixel);
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_17:
   \   000001E4   017087E2           ADD      R7,R7,#+1
   \   000001E8   0130F6E5           LDRB     R3,[R6, #+1]!
   \                     ??_DrawBitLine8BPP_16:
   \   000001EC   A880B0E1           LSRS     R8,R8,#+1
   \   000001F0   1100000A           BEQ      ??_DrawBitLine8BPP_18
   \                     ??_DrawBitLine8BPP_19:
   \   000001F4   000053E3           CMP      R3,#+0
   \   000001F8   0300000A           BEQ      ??_DrawBitLine8BPP_20
   \   000001FC   0520A0E1           MOV      R2,R5
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_20:
   \   0000020C   0130F6E5           LDRB     R3,[R6, #+1]!
   \   00000210   017087E2           ADD      R7,R7,#+1
   \   00000214   000053E3           CMP      R3,#+0
   \   00000218   0300000A           BEQ      ??_DrawBitLine8BPP_21
   \   0000021C   0520A0E1           MOV      R2,R5
   \   00000220   0710A0E1           MOV      R1,R7
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           BL       _SetPixelIndex
   \                     ??_DrawBitLine8BPP_21:
   \   0000022C   017087E2           ADD      R7,R7,#+1
   \   00000230   0130F6E5           LDRB     R3,[R6, #+1]!
   \   00000234   018058E2           SUBS     R8,R8,#+1
   \   00000238   EDFFFF1A           BNE      ??_DrawBitLine8BPP_19
   \                     ??_DrawBitLine8BPP_18:
   \   0000023C   000053E3           CMP      R3,#+0
   \   00000240   0300000A           BEQ      ??_DrawBitLine8BPP_2
   \                     ??_DrawBitLine8BPP_15:
   \   00000244   0520A0E1           MOV      R2,R5
   \   00000248   0710A0E1           MOV      R1,R7
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       _SetPixelIndex
    605                  }
    606                }
    607              }
    608              break;
    609            }
    610          }
   \                     ??_DrawBitLine8BPP_2:
   \   00000254   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000258   F083BDE8           POP      {R4-R9,PC}       ;; return
    611          
    612          /*********************************************************************
    613          *
    614          *       Draw Bitmap 32 BPP
    615          */

   \                                 In section .text, align 4, keep-with-next
    616          static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const GUI_UNI_PTR * p, int xsize) {
   \                     _DrawBitLine32BPP:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    617            DRIVER_CONTEXT * pContext;
    618            U32 Off, Data, PixelIndex;
    619            int xPhys, yPhys, Add;
    620          
    621            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
    622            //
    623            //  Convert logical into physical coordinates
    624            //
    625            xPhys = LOG2PHYS_X(pContext->vxSize, pContext->vySize, x, y);
   \   0000000C   10E090E5           LDR      LR,[R0, #+16]
   \   00000010   01404EE2           SUB      R4,LR,#+1
   \   00000014   024044E0           SUB      R4,R4,R2
    626            yPhys = LOG2PHYS_Y(pContext->vxSize, pContext->vySize, x, y);
    627            //
    628            // Write into hardware
    629            //
    630            Off = XY2OFF32(pContext->vxSizePhys, xPhys, yPhys);
   \   00000018   142090E5           LDR      R2,[R0, #+20]
   \   0000001C   920101E0           MUL      R1,R2,R1
   \   00000020   842084E0           ADD      R2,R4,R4, LSL #+1
   \   00000024   811081E0           ADD      R1,R1,R1, LSL #+1
   \   00000028   011082E0           ADD      R1,R2,R1
    631            Add = (pContext->vySize  + pContext->vySize + pContext->vySize) >> 2;
   \   0000002C   8E208EE0           ADD      R2,LR,LR, LSL #+1
    632            switch (xPhys & 3) {
   \   00000030   03E004E2           AND      LR,R4,#0x3
   \   00000034   2111A0E1           LSR      R1,R1,#+2
   \   00000038   03005EE3           CMP      LR,#+3
   \   0000003C   0EF18F90           ADDLS    PC,PC,LR, LSL #+2
   \                     ??_DrawBitLine32BPP_0:
   \   00000040   4500008A           BHI      ??_DrawBitLine32BPP_1
   \   00000044   020000EA           B        ??_DrawBitLine32BPP_2
   \   00000048   0E0000EA           B        ??_DrawBitLine32BPP_3
   \   0000004C   220000EA           B        ??_DrawBitLine32BPP_4
   \   00000050   360000EA           B        ??_DrawBitLine32BPP_5
    633            case 0:
    634              while (xsize--) {
   \                     ??_DrawBitLine32BPP_2:
   \   00000054   00005CE3           CMP      R12,#+0
   \   00000058   3F00000A           BEQ      ??_DrawBitLine32BPP_1
    635                PixelIndex = *p++;
    636                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    637                Data &= 0xFF000000;
    638                Data |= PixelIndex;
    639                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine32BPP_6:
   \   0000005C   004090E5           LDR      R4,[R0, #+0]
   \   00000060   04E093E4           LDR      LR,[R3], #+4
   \   00000064   015194E7           LDR      R5,[R4, +R1, LSL #+2]
   \   00000068   01C04CE2           SUB      R12,R12,#+1
   \   0000006C   FF5405E2           AND      R5,R5,#0xFF000000
   \   00000070   05E08EE1           ORR      LR,LR,R5
   \   00000074   01E184E7           STR      LR,[R4, +R1, LSL #+2]
    640                Off += Add;
   \   00000078   421181E0           ADD      R1,R1,R2, ASR #+2
   \   0000007C   00005CE3           CMP      R12,#+0
   \   00000080   F5FFFF1A           BNE      ??_DrawBitLine32BPP_6
   \   00000084   7080BDE8           POP      {R4-R6,PC}
    641              }
    642              break;
    643            case 1:
    644              while (xsize--) {
   \                     ??_DrawBitLine32BPP_3:
   \   00000088   00005CE3           CMP      R12,#+0
   \   0000008C   3200000A           BEQ      ??_DrawBitLine32BPP_1
    645                PixelIndex = *p++;
    646                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    647                Data &= 0x00FFFFFF;
    648                Data |= (PixelIndex << 24);
    649                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine32BPP_7:
   \   00000090   004090E5           LDR      R4,[R0, #+0]
   \   00000094   04E093E4           LDR      LR,[R3], #+4
   \   00000098   015194E7           LDR      R5,[R4, +R1, LSL #+2]
   \   0000009C   0E6CA0E1           LSL      R6,LR,#+24
   \   000000A0   0554A0E1           LSL      R5,R5,#+8
   \   000000A4   255486E1           ORR      R5,R6,R5, LSR #+8
   \   000000A8   015184E7           STR      R5,[R4, +R1, LSL #+2]
    650                Data = READ_MEM32(pContext->VRAMAddr, (Off + 1));
    651                Data &= 0xFFFF0000;
    652                Data |= (PixelIndex >> 8);
    653                WRITE_MEM32(pContext->VRAMAddr, (Off + 1), Data);
   \   000000AC   004090E5           LDR      R4,[R0, #+0]
   \   000000B0   2EE4A0E1           LSR      LR,LR,#+8
   \   000000B4   014184E0           ADD      R4,R4,R1, LSL #+2
   \   000000B8   045094E5           LDR      R5,[R4, #+4]
   \   000000BC   01C04CE2           SUB      R12,R12,#+1
   \   000000C0   2558A0E1           LSR      R5,R5,#+16
   \   000000C4   05E88EE1           ORR      LR,LR,R5, LSL #+16
   \   000000C8   04E084E5           STR      LR,[R4, #+4]
    654                Off += Add;
   \   000000CC   421181E0           ADD      R1,R1,R2, ASR #+2
   \   000000D0   00005CE3           CMP      R12,#+0
   \   000000D4   EDFFFF1A           BNE      ??_DrawBitLine32BPP_7
   \   000000D8   7080BDE8           POP      {R4-R6,PC}
    655              }
    656              break;
    657            case 2:
    658              while (xsize--) {
   \                     ??_DrawBitLine32BPP_4:
   \   000000DC   00005CE3           CMP      R12,#+0
   \   000000E0   1D00000A           BEQ      ??_DrawBitLine32BPP_1
    659                PixelIndex = *p++;
    660                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    661                Data &= 0x0000FFFF;
    662                Data |= (PixelIndex << 16);
    663                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine32BPP_8:
   \   000000E4   004090E5           LDR      R4,[R0, #+0]
   \   000000E8   04E093E4           LDR      LR,[R3], #+4
   \   000000EC   015184E0           ADD      R5,R4,R1, LSL #+2
   \   000000F0   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000F4   0E68A0E1           LSL      R6,LR,#+16
   \   000000F8   01C04CE2           SUB      R12,R12,#+1
   \   000000FC   0558A0E1           LSL      R5,R5,#+16
   \   00000100   255886E1           ORR      R5,R6,R5, LSR #+16
   \   00000104   015184E7           STR      R5,[R4, +R1, LSL #+2]
    664                Data = READ_MEM32(pContext->VRAMAddr, (Off + 1));
    665                Data &= 0xFFFFFF00;
    666                Data |= (PixelIndex >> 16);
    667                WRITE_MEM32(pContext->VRAMAddr, (Off + 1), Data);
   \   00000108   004090E5           LDR      R4,[R0, #+0]
    668                Off += Add;
   \   0000010C   00005CE3           CMP      R12,#+0
   \   00000110   014184E0           ADD      R4,R4,R1, LSL #+2
   \   00000114   045094E5           LDR      R5,[R4, #+4]
   \   00000118   421181E0           ADD      R1,R1,R2, ASR #+2
   \   0000011C   FF50C5E3           BIC      R5,R5,#0xFF
   \   00000120   2EE885E1           ORR      LR,R5,LR, LSR #+16
   \   00000124   04E084E5           STR      LR,[R4, #+4]
   \   00000128   EDFFFF1A           BNE      ??_DrawBitLine32BPP_8
   \   0000012C   7080BDE8           POP      {R4-R6,PC}
    669              }
    670              break;
    671            case 3:
    672              while (xsize--) {
   \                     ??_DrawBitLine32BPP_5:
   \   00000130   00005CE3           CMP      R12,#+0
   \   00000134   0800000A           BEQ      ??_DrawBitLine32BPP_1
    673                PixelIndex = *p++;
    674                Data  = READ_MEM32(pContext->VRAMAddr, Off);
    675                Data &= 0x000000FF;
    676                Data |= (PixelIndex << 8);
    677                WRITE_MEM32(pContext->VRAMAddr, Off, Data);
   \                     ??_DrawBitLine32BPP_9:
   \   00000138   004090E5           LDR      R4,[R0, #+0]
   \   0000013C   04E093E4           LDR      LR,[R3], #+4
   \   00000140   0151D4E7           LDRB     R5,[R4, +R1, LSL #+2]
   \   00000144   01C04CE2           SUB      R12,R12,#+1
    678                Off += Add;
   \   00000148   00005CE3           CMP      R12,#+0
   \   0000014C   0EE485E1           ORR      LR,R5,LR, LSL #+8
   \   00000150   01E184E7           STR      LR,[R4, +R1, LSL #+2]
   \   00000154   421181E0           ADD      R1,R1,R2, ASR #+2
   \   00000158   F6FFFF1A           BNE      ??_DrawBitLine32BPP_9
    679              }
    680              break;
    681            }
    682          }
   \                     ??_DrawBitLine32BPP_1:
   \   0000015C   7080BDE8           POP      {R4-R6,PC}       ;; return
    683          
    684          /*********************************************************************
    685          *
    686          *       _DrawBitmap
    687          */

   \                                 In section .text, align 4, keep-with-next
    688          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    689                                 int xSize, int ySize,
    690                                 int BitsPerPixel, 
    691                                 int BytesPerLine,
    692                                 const U8 GUI_UNI_PTR * pData, int Diff,
    693                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
    694            int i;
    695          
    696            //
    697            // Use _DrawBitLineXBPP and _DrawBitLineXBPP_Swap
    698            //
    699            switch (BitsPerPixel) {
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   1F0051E3           CMP      R1,#+31
   \   00000034   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   EC00008A           BHI      ??_DrawBitmap_1
   \   0000003C   1E0000EA           B        ??_DrawBitmap_2
   \   00000040   4A0000EA           B        ??_DrawBitmap_3
   \   00000044   E90000EA           B        ??_DrawBitmap_1
   \   00000048   750000EA           B        ??_DrawBitmap_4
   \   0000004C   E70000EA           B        ??_DrawBitmap_1
   \   00000050   E60000EA           B        ??_DrawBitmap_1
   \   00000054   E50000EA           B        ??_DrawBitmap_1
   \   00000058   9E0000EA           B        ??_DrawBitmap_5
   \   0000005C   E30000EA           B        ??_DrawBitmap_1
   \   00000060   E20000EA           B        ??_DrawBitmap_1
   \   00000064   E10000EA           B        ??_DrawBitmap_1
   \   00000068   E00000EA           B        ??_DrawBitmap_1
   \   0000006C   DF0000EA           B        ??_DrawBitmap_1
   \   00000070   DE0000EA           B        ??_DrawBitmap_1
   \   00000074   DD0000EA           B        ??_DrawBitmap_1
   \   00000078   DC0000EA           B        ??_DrawBitmap_1
   \   0000007C   DB0000EA           B        ??_DrawBitmap_1
   \   00000080   DA0000EA           B        ??_DrawBitmap_1
   \   00000084   D90000EA           B        ??_DrawBitmap_1
   \   00000088   D80000EA           B        ??_DrawBitmap_1
   \   0000008C   D70000EA           B        ??_DrawBitmap_1
   \   00000090   D60000EA           B        ??_DrawBitmap_1
   \   00000094   D50000EA           B        ??_DrawBitmap_1
   \   00000098   D40000EA           B        ??_DrawBitmap_1
   \   0000009C   D30000EA           B        ??_DrawBitmap_1
   \   000000A0   D20000EA           B        ??_DrawBitmap_1
   \   000000A4   D10000EA           B        ??_DrawBitmap_1
   \   000000A8   D00000EA           B        ??_DrawBitmap_1
   \   000000AC   CF0000EA           B        ??_DrawBitmap_1
   \   000000B0   CE0000EA           B        ??_DrawBitmap_1
   \   000000B4   CD0000EA           B        ??_DrawBitmap_1
   \   000000B8   AB0000EA           B        ??_DrawBitmap_6
    700            case 1:
    701              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   CA0000BA           BLT      ??_DrawBitmap_1
   \   000000C4   02B0A0E1           MOV      R11,R2
   \   000000C8   10008DE5           STR      R0,[SP, #+16]
   \   000000CC   010010E3           TST      R0,#0x1
   \   000000D0   0800000A           BEQ      ??_DrawBitmap_7
    702                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000000D4   08A08DE5           STR      R10,[SP, #+8]
   \   000000D8   04608DE5           STR      R6,[SP, #+4]
   \   000000DC   00908DE5           STR      R9,[SP, #+0]
   \   000000E0   0830A0E1           MOV      R3,R8
   \   000000E4   0510A0E1           MOV      R1,R5
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       _DrawBitLine1BPP
    703                pData += BytesPerLine;
   \   000000F0   088087E0           ADD      R8,R7,R8
   \   000000F4   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_7:
   \   000000F8   10109DE5           LDR      R1,[SP, #+16]
   \   000000FC   A110A0E1           LSR      R1,R1,#+1
   \   00000100   0C108DE5           STR      R1,[SP, #+12]
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   B800000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   0000010C   08A08DE5           STR      R10,[SP, #+8]
   \   00000110   04608DE5           STR      R6,[SP, #+4]
   \   00000114   00908DE5           STR      R9,[SP, #+0]
   \   00000118   0830A0E1           MOV      R3,R8
   \   0000011C   0B20A0E1           MOV      R2,R11
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       _DrawBitLine1BPP
   \   0000012C   088087E0           ADD      R8,R7,R8
   \   00000130   08A08DE5           STR      R10,[SP, #+8]
   \   00000134   04608DE5           STR      R6,[SP, #+4]
   \   00000138   00908DE5           STR      R9,[SP, #+0]
   \   0000013C   0830A0E1           MOV      R3,R8
   \   00000140   01208BE2           ADD      R2,R11,#+1
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           BL       _DrawBitLine1BPP
    704              }
   \   00000150   0C109DE5           LDR      R1,[SP, #+12]
   \   00000154   088087E0           ADD      R8,R7,R8
   \   00000158   011041E2           SUB      R1,R1,#+1
   \   0000015C   0C108DE5           STR      R1,[SP, #+12]
   \   00000160   02B08BE2           ADD      R11,R11,#+2
   \   00000164   000051E3           CMP      R1,#+0
   \   00000168   E7FFFF1A           BNE      ??_DrawBitmap_8
   \   0000016C   9F0000EA           B        ??_DrawBitmap_1
    705              break;
    706            case 2:
    707              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000170   010050E3           CMP      R0,#+1
   \   00000174   9D0000BA           BLT      ??_DrawBitmap_1
   \   00000178   02B0A0E1           MOV      R11,R2
   \   0000017C   10008DE5           STR      R0,[SP, #+16]
   \   00000180   010010E3           TST      R0,#0x1
   \   00000184   0800000A           BEQ      ??_DrawBitmap_9
    708                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000188   08A08DE5           STR      R10,[SP, #+8]
   \   0000018C   04608DE5           STR      R6,[SP, #+4]
   \   00000190   00908DE5           STR      R9,[SP, #+0]
   \   00000194   0830A0E1           MOV      R3,R8
   \   00000198   0510A0E1           MOV      R1,R5
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       _DrawBitLine2BPP
    709                pData += BytesPerLine;
   \   000001A4   088087E0           ADD      R8,R7,R8
   \   000001A8   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_9:
   \   000001AC   10109DE5           LDR      R1,[SP, #+16]
   \   000001B0   A110A0E1           LSR      R1,R1,#+1
   \   000001B4   0C108DE5           STR      R1,[SP, #+12]
   \   000001B8   000051E3           CMP      R1,#+0
   \   000001BC   8B00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   000001C0   08A08DE5           STR      R10,[SP, #+8]
   \   000001C4   04608DE5           STR      R6,[SP, #+4]
   \   000001C8   00908DE5           STR      R9,[SP, #+0]
   \   000001CC   0830A0E1           MOV      R3,R8
   \   000001D0   0B20A0E1           MOV      R2,R11
   \   000001D4   0510A0E1           MOV      R1,R5
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   ........           BL       _DrawBitLine2BPP
   \   000001E0   088087E0           ADD      R8,R7,R8
   \   000001E4   08A08DE5           STR      R10,[SP, #+8]
   \   000001E8   04608DE5           STR      R6,[SP, #+4]
   \   000001EC   00908DE5           STR      R9,[SP, #+0]
   \   000001F0   0830A0E1           MOV      R3,R8
   \   000001F4   01208BE2           ADD      R2,R11,#+1
   \   000001F8   0510A0E1           MOV      R1,R5
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       _DrawBitLine2BPP
    710              }
   \   00000204   0C109DE5           LDR      R1,[SP, #+12]
   \   00000208   088087E0           ADD      R8,R7,R8
   \   0000020C   011041E2           SUB      R1,R1,#+1
   \   00000210   0C108DE5           STR      R1,[SP, #+12]
   \   00000214   02B08BE2           ADD      R11,R11,#+2
   \   00000218   000051E3           CMP      R1,#+0
   \   0000021C   E7FFFF1A           BNE      ??_DrawBitmap_10
   \   00000220   720000EA           B        ??_DrawBitmap_1
    711              break;
    712            case 4:
    713              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   700000BA           BLT      ??_DrawBitmap_1
   \   0000022C   02B0A0E1           MOV      R11,R2
   \   00000230   10008DE5           STR      R0,[SP, #+16]
   \   00000234   010010E3           TST      R0,#0x1
   \   00000238   0800000A           BEQ      ??_DrawBitmap_11
    714                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   0000023C   08A08DE5           STR      R10,[SP, #+8]
   \   00000240   04608DE5           STR      R6,[SP, #+4]
   \   00000244   00908DE5           STR      R9,[SP, #+0]
   \   00000248   0830A0E1           MOV      R3,R8
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _DrawBitLine4BPP
    715                pData += BytesPerLine;
   \   00000258   088087E0           ADD      R8,R7,R8
   \   0000025C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_11:
   \   00000260   10109DE5           LDR      R1,[SP, #+16]
   \   00000264   A110A0E1           LSR      R1,R1,#+1
   \   00000268   0C108DE5           STR      R1,[SP, #+12]
   \   0000026C   000051E3           CMP      R1,#+0
   \   00000270   5E00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000274   08A08DE5           STR      R10,[SP, #+8]
   \   00000278   04608DE5           STR      R6,[SP, #+4]
   \   0000027C   00908DE5           STR      R9,[SP, #+0]
   \   00000280   0830A0E1           MOV      R3,R8
   \   00000284   0B20A0E1           MOV      R2,R11
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0400A0E1           MOV      R0,R4
   \   00000290   ........           BL       _DrawBitLine4BPP
   \   00000294   088087E0           ADD      R8,R7,R8
   \   00000298   08A08DE5           STR      R10,[SP, #+8]
   \   0000029C   04608DE5           STR      R6,[SP, #+4]
   \   000002A0   00908DE5           STR      R9,[SP, #+0]
   \   000002A4   0830A0E1           MOV      R3,R8
   \   000002A8   01208BE2           ADD      R2,R11,#+1
   \   000002AC   0510A0E1           MOV      R1,R5
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           BL       _DrawBitLine4BPP
    716              }
   \   000002B8   0C109DE5           LDR      R1,[SP, #+12]
   \   000002BC   088087E0           ADD      R8,R7,R8
   \   000002C0   011041E2           SUB      R1,R1,#+1
   \   000002C4   0C108DE5           STR      R1,[SP, #+12]
   \   000002C8   02B08BE2           ADD      R11,R11,#+2
   \   000002CC   000051E3           CMP      R1,#+0
   \   000002D0   E7FFFF1A           BNE      ??_DrawBitmap_12
   \   000002D4   450000EA           B        ??_DrawBitmap_1
    717              break;
    718            case 8:
    719              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_5:
   \   000002D8   010050E3           CMP      R0,#+1
   \   000002DC   430000BA           BLT      ??_DrawBitmap_1
   \   000002E0   00B0A0E1           MOV      R11,R0
   \   000002E4   0290A0E1           MOV      R9,R2
   \   000002E8   01001BE3           TST      R11,#0x1
   \   000002EC   0700000A           BEQ      ??_DrawBitmap_13
    720                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
   \   000002F0   04A08DE5           STR      R10,[SP, #+4]
   \   000002F4   00608DE5           STR      R6,[SP, #+0]
   \   000002F8   0830A0E1           MOV      R3,R8
   \   000002FC   0510A0E1           MOV      R1,R5
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   ........           BL       _DrawBitLine8BPP
    721                pData += BytesPerLine;
   \   00000308   088087E0           ADD      R8,R7,R8
   \   0000030C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_13:
   \   00000310   ABB0B0E1           LSRS     R11,R11,#+1
   \   00000314   3500000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   00000318   04A08DE5           STR      R10,[SP, #+4]
   \   0000031C   00608DE5           STR      R6,[SP, #+0]
   \   00000320   0830A0E1           MOV      R3,R8
   \   00000324   0920A0E1           MOV      R2,R9
   \   00000328   0510A0E1           MOV      R1,R5
   \   0000032C   0400A0E1           MOV      R0,R4
   \   00000330   ........           BL       _DrawBitLine8BPP
   \   00000334   088087E0           ADD      R8,R7,R8
   \   00000338   04A08DE5           STR      R10,[SP, #+4]
   \   0000033C   00608DE5           STR      R6,[SP, #+0]
   \   00000340   0830A0E1           MOV      R3,R8
   \   00000344   012089E2           ADD      R2,R9,#+1
   \   00000348   0510A0E1           MOV      R1,R5
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   ........           BL       _DrawBitLine8BPP
    722              }
   \   00000354   01B04BE2           SUB      R11,R11,#+1
   \   00000358   088087E0           ADD      R8,R7,R8
   \   0000035C   029089E2           ADD      R9,R9,#+2
   \   00000360   00005BE3           CMP      R11,#+0
   \   00000364   EBFFFF1A           BNE      ??_DrawBitmap_14
   \   00000368   200000EA           B        ??_DrawBitmap_1
    723              break;
    724            case 32:
    725              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_6:
   \   0000036C   010050E3           CMP      R0,#+1
   \   00000370   1E0000BA           BLT      ??_DrawBitmap_1
   \   00000374   00A0A0E1           MOV      R10,R0
   \   00000378   0290A0E1           MOV      R9,R2
   \   0000037C   01001AE3           TST      R10,#0x1
   \   00000380   0600000A           BEQ      ??_DrawBitmap_15
    726                _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
   \   00000384   00608DE5           STR      R6,[SP, #+0]
   \   00000388   0830A0E1           MOV      R3,R8
   \   0000038C   0510A0E1           MOV      R1,R5
   \   00000390   0400A0E1           MOV      R0,R4
   \   00000394   ........           BL       _DrawBitLine32BPP
    727                pData += BytesPerLine;
   \   00000398   088087E0           ADD      R8,R7,R8
   \   0000039C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_15:
   \   000003A0   AAA0B0E1           LSRS     R10,R10,#+1
   \   000003A4   1100000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   000003A8   00608DE5           STR      R6,[SP, #+0]
   \   000003AC   0830A0E1           MOV      R3,R8
   \   000003B0   0920A0E1           MOV      R2,R9
   \   000003B4   0510A0E1           MOV      R1,R5
   \   000003B8   0400A0E1           MOV      R0,R4
   \   000003BC   ........           BL       _DrawBitLine32BPP
   \   000003C0   088087E0           ADD      R8,R7,R8
   \   000003C4   00608DE5           STR      R6,[SP, #+0]
   \   000003C8   0830A0E1           MOV      R3,R8
   \   000003CC   012089E2           ADD      R2,R9,#+1
   \   000003D0   0510A0E1           MOV      R1,R5
   \   000003D4   0400A0E1           MOV      R0,R4
   \   000003D8   ........           BL       _DrawBitLine32BPP
    728              }
   \   000003DC   01A04AE2           SUB      R10,R10,#+1
   \   000003E0   088087E0           ADD      R8,R7,R8
   \   000003E4   029089E2           ADD      R9,R9,#+2
   \   000003E8   00005AE3           CMP      R10,#+0
   \   000003EC   EDFFFF1A           BNE      ??_DrawBitmap_16
    729              break;
    730            }
    731          }
   \                     ??_DrawBitmap_1:
   \   000003F0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000003F4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    732          
    733          /*********************************************************************
    734          *
    735          *       _SetOrg
    736          */

   \                                 In section .text, align 4, keep-with-next
    737          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    738            #ifndef WIN32
    739              DRIVER_CONTEXT * pContext;
    740            #endif
    741            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    742          
    743            #ifdef WIN32
    744              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    745            #else
    746              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
    747              Data.xPos = pContext->vySize - pContext->ySize  - y;
   \   00000024   10C093E5           LDR      R12,[R3, #+16]
   \   00000028   083093E5           LDR      R3,[R3, #+8]
    748              Data.yPos = x;
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   03304CE0           SUB      R3,R12,R3
   \   00000034   022043E0           SUB      R2,R3,R2
   \   00000038   00208DE5           STR      R2,[SP, #+0]
    749              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   180090E5           LDR      R0,[R0, #+24]
   \   00000048   ........           BL       LCD_X_DisplayDriver
    750            #endif
    751          }
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    752          
    753          /*********************************************************************
    754          *
    755          *       _InitOnce
    756          *
    757          * Purpose:
    758          *   Allocates a fixed block for the context of the driver
    759          *
    760          * Return value:
    761          *   0 on success, 1 on error
    762          */
    763          static int _InitOnce(GUI_DEVICE * pDevice) {
    764            if (pDevice->u.pContext == NULL) {
    765              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    766              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    767            }
    768            return pDevice->u.pContext ? 0 : 1;
    769          }
    770          
    771          /*********************************************************************
    772          *
    773          *       _GetRect
    774          */

   \                                 In section .text, align 4, keep-with-next
    775          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    776            DRIVER_CONTEXT * pContext;
    777          
    778            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    779            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    780            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    781            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    782            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    783          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    784          
    785          /*********************************************************************
    786          *
    787          *       _GetDevProp
    788          */

   \                                 In section .text, align 4, keep-with-next
    789          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    790            DRIVER_CONTEXT * pContext;
    791          
    792            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    793            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0D0000EA           B        ??_GetDevProp_8
   \   00000044   0A0000EA           B        ??_GetDevProp_7
   \   00000048   0B0000EA           B        ??_GetDevProp_8
    794            case LCD_DEVCAP_XSIZE:
    795              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    796            case LCD_DEVCAP_YSIZE:
    797              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    798            case LCD_DEVCAP_VXSIZE:
    799              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    800            case LCD_DEVCAP_VYSIZE:
    801              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    802            case LCD_DEVCAP_BITSPERPIXEL:
    803              return 24;
   \                     ??_GetDevProp_6:
   \   0000006C   1800A0E3           MOV      R0,#+24
   \   00000070   1EFF2FE1           BX       LR
    804            case LCD_DEVCAP_NUMCOLORS:
    805              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    806            case LCD_DEVCAP_XMAG:
    807              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    808            case LCD_DEVCAP_YMAG:
    809              return 1;
    810            case LCD_DEVCAP_MIRROR_X:
    811              return 1;
    812            case LCD_DEVCAP_MIRROR_Y:
    813              return 0;
    814            case LCD_DEVCAP_SWAP_XY:
    815              return 1;
    816            }
    817            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    818          }
    819          
    820          /*********************************************************************
    821          *
    822          *       _GetDevData
    823          */

   \                                 In section .text, align 4, keep-with-next
    824          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    825            GUI_USE_PARA(pDevice);
    826            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    827            #if GUI_SUPPORT_MEMDEV
    828              case LCD_DEVDATA_MEMDEV:
    829                return (void *)&GUI_MEMDEV_DEVICE_32;
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   1EFF2FE1           BX       LR
    830            #endif
    831            }
    832            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    833          }
    834          
    835          /*********************************************************************
    836          *
    837          *       Static code: Functions available by _GetDevFunc()
    838          *
    839          **********************************************************************
    840          */
    841          /*********************************************************************
    842          *
    843          *       _SetVRAMAddr
    844          */

   \                                 In section .text, align 4, keep-with-next
    845          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    846            DRIVER_CONTEXT * pContext;
    847            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    848          
    849            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    850            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    851              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    852              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    853              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    854              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    855            }
    856            #ifdef WIN32
    857              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    858            #endif
    859          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    860          
    861          /*********************************************************************
    862          *
    863          *       _SetVSize
    864          */

   \                                 In section .text, align 4, keep-with-next
    865          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    866            DRIVER_CONTEXT * pContext;
    867          
    868            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    869            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    870              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    871              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    872              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    873              pContext->vxSizePhys = ySize;
   \   00000044   14608015           STRNE    R6,[R0, #+20]
    874            }
    875            #ifdef WIN32
    876              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    877            #endif
    878          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    879          
    880          /*********************************************************************
    881          *
    882          *       _SetSize
    883          */

   \                                 In section .text, align 4, keep-with-next
    884          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    885            DRIVER_CONTEXT * pContext;
    886            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    887          
    888            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    889            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    890              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    891              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    892                pContext->vxSizePhys = ySize;
    893              }
    894              pContext->xSize = xSize;
    895              pContext->ySize = ySize;
    896              Data.xSize = xSize;
    897              Data.ySize = ySize;
    898              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14608005           STREQ    R6,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    899            }
    900          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    901          
    902          /*********************************************************************
    903          *
    904          *       _SetPos
    905          */

   \                                 In section .text, align 4, keep-with-next
    906          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    907            DRIVER_CONTEXT * pContext;
    908            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    909          
    910            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    911            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    912              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    913              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    914              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    915              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    916              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    917              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    918            }
    919          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    920          
    921          /*********************************************************************
    922          *
    923          *       _GetPos
    924          */

   \                                 In section .text, align 4, keep-with-next
    925          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    926            DRIVER_CONTEXT * pContext;
    927          
    928            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    929            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    930              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    931              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    932              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    933            }
    934          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    935          
    936          /*********************************************************************
    937          *
    938          *       _SetAlpha
    939          */

   \                                 In section .text, align 4, keep-with-next
    940          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    941            DRIVER_CONTEXT * pContext;
    942            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    943          
    944            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    945            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    946              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    947              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    948              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    949              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    950            }
    951          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    952          
    953          /*********************************************************************
    954          *
    955          *       _SetVis
    956          */

   \                                 In section .text, align 4, keep-with-next
    957          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    958            DRIVER_CONTEXT * pContext;
    959            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    960          
    961            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    962            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    963              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    964              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    965              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    966              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    967            }
    968          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    969          
    970          /*********************************************************************
    971          *
    972          *       _Init
    973          */

   \                                 In section .text, align 4, keep-with-next
    974          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    975            int r;
    976          
    977            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    978            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    979            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    980          }
    981          
    982          /*********************************************************************
    983          *
    984          *       _On
    985          */

   \                                 In section .text, align 4, keep-with-next
    986          static void _On (GUI_DEVICE * pDevice) {
    987            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    988          }
    989          
    990          /*********************************************************************
    991          *
    992          *       _Off
    993          */

   \                                 In section .text, align 4, keep-with-next
    994          static void _Off (GUI_DEVICE * pDevice) {
    995            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    996          }
    997          
    998          /*********************************************************************
    999          *
   1000          *       _SetLUTEntry
   1001          */

   \                                 In section .text, align 4, keep-with-next
   1002          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1003            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1004          
   1005            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
   1006            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
   1007            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1008          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1009          
   1010          /*********************************************************************
   1011          *
   1012          *       _SetAlphaMode
   1013          */

   \                                 In section .text, align 4, keep-with-next
   1014          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1015            LCD_X_SETALPHAMODE_INFO Data = {0};
   1016          
   1017            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1018            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1019          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1020          
   1021          /*********************************************************************
   1022          *
   1023          *       _SetChromaMode
   1024          */

   \                                 In section .text, align 4, keep-with-next
   1025          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1026            LCD_X_SETCHROMAMODE_INFO Data = {0};
   1027          
   1028            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1029            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1030          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1031          
   1032          /*********************************************************************
   1033          *
   1034          *       _SetChroma
   1035          */

   \                                 In section .text, align 4, keep-with-next
   1036          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1037            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1038          
   1039            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1040            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   1041            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1042          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1043          
   1044          /*********************************************************************
   1045          *
   1046          *       _SetFunc
   1047          */

   \                                 In section .text, align 4, keep-with-next
   1048          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1049            DRIVER_CONTEXT * pContext;
   1050          
   1051            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1052            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
   1053              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1054              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
   1055              case LCD_DEVFUNC_FILLRECT:
   1056                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
   1057                break;
   1058              }
   1059            }
   1060          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1061          
   1062          /*********************************************************************
   1063          *
   1064          *       _GetDevFunc
   1065          */

   \                                 In section .text, align 4, keep-with-next
   1066          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
   1067            GUI_USE_PARA(ppDevice);
   1068            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   021041E2           SUB      R1,R1,#+2
   \   00000004   140051E3           CMP      R1,#+20
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3200008A           BHI      ??_GetDevFunc_1
   \   00000010   1D0000EA           B        ??_GetDevFunc_2
   \   00000014   180000EA           B        ??_GetDevFunc_3
   \   00000018   190000EA           B        ??_GetDevFunc_4
   \   0000001C   2E0000EA           B        ??_GetDevFunc_1
   \   00000020   1B0000EA           B        ??_GetDevFunc_5
   \   00000024   2C0000EA           B        ??_GetDevFunc_1
   \   00000028   2B0000EA           B        ??_GetDevFunc_1
   \   0000002C   0C0000EA           B        ??_GetDevFunc_6
   \   00000030   0D0000EA           B        ??_GetDevFunc_7
   \   00000034   0E0000EA           B        ??_GetDevFunc_8
   \   00000038   170000EA           B        ??_GetDevFunc_9
   \   0000003C   260000EA           B        ??_GetDevFunc_1
   \   00000040   170000EA           B        ??_GetDevFunc_10
   \   00000044   180000EA           B        ??_GetDevFunc_11
   \   00000048   190000EA           B        ??_GetDevFunc_12
   \   0000004C   220000EA           B        ??_GetDevFunc_1
   \   00000050   210000EA           B        ??_GetDevFunc_1
   \   00000054   180000EA           B        ??_GetDevFunc_13
   \   00000058   190000EA           B        ??_GetDevFunc_14
   \   0000005C   1A0000EA           B        ??_GetDevFunc_15
   \   00000060   1B0000EA           B        ??_GetDevFunc_16
   1069            case LCD_DEVFUNC_SET_VRAM_ADDR:
   1070              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_6:
   \   00000064   ........           LDR      R0,??DataTable16_1
   \   00000068   1EFF2FE1           BX       LR
   1071            case LCD_DEVFUNC_SET_VSIZE:
   1072              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_7:
   \   0000006C   ........           LDR      R0,??DataTable16_2
   \   00000070   1EFF2FE1           BX       LR
   1073            case LCD_DEVFUNC_SET_SIZE:
   1074              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_8:
   \   00000074   ........           LDR      R0,??DataTable16_3
   \   00000078   1EFF2FE1           BX       LR
   1075            case LCD_DEVFUNC_SETPOS:
   1076              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_3:
   \   0000007C   ........           LDR      R0,??DataTable16_4
   \   00000080   1EFF2FE1           BX       LR
   1077            case LCD_DEVFUNC_GETPOS:
   1078              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_4:
   \   00000084   ........           LDR      R0,??DataTable16_5
   \   00000088   1EFF2FE1           BX       LR
   1079            case LCD_DEVFUNC_SETALPHA:
   1080              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_2:
   \   0000008C   ........           LDR      R0,??DataTable16_6
   \   00000090   1EFF2FE1           BX       LR
   1081            case LCD_DEVFUNC_SETVIS:
   1082              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_5:
   \   00000094   ........           LDR      R0,??DataTable16_7
   \   00000098   1EFF2FE1           BX       LR
   1083            case LCD_DEVFUNC_INIT:
   1084              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_9:
   \   0000009C   ........           LDR      R0,??DataTable16_8
   \   000000A0   1EFF2FE1           BX       LR
   1085            case LCD_DEVFUNC_ON:
   1086              return (void (*)(void))_On;
   \                     ??_GetDevFunc_10:
   \   000000A4   ........           LDR      R0,??DataTable16_9
   \   000000A8   1EFF2FE1           BX       LR
   1087            case LCD_DEVFUNC_OFF:
   1088              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_11:
   \   000000AC   ........           LDR      R0,??DataTable16_10
   \   000000B0   1EFF2FE1           BX       LR
   1089            case LCD_DEVFUNC_SETLUTENTRY:
   1090              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_12:
   \   000000B4   ........           LDR      R0,??DataTable16_11
   \   000000B8   1EFF2FE1           BX       LR
   1091          
   1092            case LCD_DEVFUNC_ALPHAMODE:
   1093              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_13:
   \   000000BC   ........           LDR      R0,??DataTable16_12
   \   000000C0   1EFF2FE1           BX       LR
   1094            case LCD_DEVFUNC_CHROMAMODE:
   1095              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_14:
   \   000000C4   ........           LDR      R0,??DataTable16_13
   \   000000C8   1EFF2FE1           BX       LR
   1096            case LCD_DEVFUNC_CHROMA:
   1097              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_15:
   \   000000CC   ........           LDR      R0,??DataTable16_14
   \   000000D0   1EFF2FE1           BX       LR
   1098            
   1099            case LCD_DEVFUNC_SETFUNC:
   1100              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_16:
   \   000000D4   ........           LDR      R0,??DataTable16_15
   \   000000D8   1EFF2FE1           BX       LR
   1101            }
   1102            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   1EFF2FE1           BX       LR               ;; return
   1103          }
   1104          
   1105          /*********************************************************************
   1106          *
   1107          *       Public data
   1108          *
   1109          **********************************************************************
   1110          */
   1111          /*********************************************************************
   1112          *
   1113          *       GUI_DEVICE_API structure
   1114          */

   \                                 In section .rodata, align 4, keep-with-next
   1115          const GUI_DEVICE_API GUIDRV_Lin_OSX_24_API = {
   \                     GUIDRV_Lin_OSX_24_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1116            //
   1117            // Data
   1118            //
   1119            DEVICE_CLASS_DRIVER,
   1120            //
   1121            // Drawing functions
   1122            //
   1123            _DrawBitmap,
   1124            _DrawHLine,
   1125            _DrawVLine,
   1126            _FillRect,
   1127            _GetPixelIndex,
   1128            _SetPixelIndex,
   1129            _XorPixel,
   1130            //
   1131            // Set origin
   1132            //
   1133            _SetOrg,
   1134            //
   1135            // Request information
   1136            //
   1137            _GetDevFunc,
   1138            _GetDevProp,
   1139            _GetDevData,
   1140            _GetRect,
   1141          };
   1142          
   1143          #else
   1144          
   1145          void GUIDRV_Lin_OSX_24_C(void);   // Avoid empty object files
   1146          void GUIDRV_Lin_OSX_24_C(void) {}
   1147          
   1148          #endif
   1149          
   1150          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _DrawBitLine1BPP      40
     _DrawBitLine2BPP      40
     _DrawBitLine32BPP     16
     _DrawBitLine4BPP      40
     _DrawBitLine8BPP      32
     _DrawBitmap           56
     _DrawHLine            24
     _DrawVLine            24
     _FillRect             24
     _GetDevData            0
     _GetDevFunc            0
     _GetDevProp            0
     _GetPixelIndex         4
     _GetPos               16
     _GetRect               0
     _Init                 16
     _Off                   8
     _On                    8
     _SetAlpha             16
     _SetAlphaMode          8
     _SetChroma            24
     _SetChromaMode         8
     _SetFunc              16
     _SetLUTEntry          24
     _SetOrg               24
     _SetPixelIndex         8
     _SetPos               24
     _SetSize              24
     _SetVRAMAddr          16
     _SetVSize             16
     _SetVis               16
     _XorPixel             24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex           208
     _GetPixelIndex           148
     _XorPixel                196
     _DrawHLine               132
     _DrawVLine               548
     _FillRect                 68
     _DrawBitLine1BPP         452
     _DrawBitLine2BPP         412
     _DrawBitLine4BPP         412
     _DrawBitLine8BPP         604
     _DrawBitLine32BPP        352
     _DrawBitmap             1016
     _SetOrg                   84
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              228
     GUIDRV_Lin_OSX_24_API     52
     ??DataTable14              4
     ??DataTable14_1            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 6 348 bytes in section .text
 
 6 348 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
