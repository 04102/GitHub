###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_Timer.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\WM_Timer.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_Timer.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_Timer.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_Timer.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_Timer.c
     19          Purpose     : Implementetion of WM_CreateTimer, WM_DeleteTimer
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          #include "WM_Intern.h"
     25          
     26          
     27          /* Typical configuration: */
     28          
     29          #if GUI_WINSUPPORT && !defined(GUI_X_CREATE_TIMER)   /* If 0, WM will not generate any code */
     30          
     31          /*********************************************************************
     32          *
     33          *       Static code
     34          *
     35          **********************************************************************
     36          */
     37          /*********************************************************************
     38          *
     39          *       _cbTimer
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          static void _cbTimer(GUI_TIMER_MESSAGE * pTM) {
   \                     _cbTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     42            WM_TIMER_OBJ * pObj;
     43            if (pTM->Context) {
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0F00000A           BEQ      ??_cbTimer_0
     44              WM_MESSAGE Msg = {0};
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   00C0A0E3           MOV      R12,#+0
   \   0000002C   0E10A0E8           STM      R0!,{R1-R3,R12}
     45              pObj = (WM_TIMER_OBJ *)GUI_ALLOC_h2p((WM_HTIMER)pTM->Context);
   \   00000030   040094E5           LDR      R0,[R4, #+4]
   \   00000034   ........           BL       GUI_ALLOC_h2p
     46              Msg.MsgId  = WM_TIMER;
   \   00000038   1320A0E3           MOV      R2,#+19
   \   0000003C   402F82E3           ORR      R2,R2,#0x100
   \   00000040   00208DE5           STR      R2,[SP, #+0]
     47              Msg.Data.v = pTM->Context; /* Handle of timer */
   \   00000044   042094E5           LDR      R2,[R4, #+4]
     48              WM_SendMessage(pObj->hWin, &Msg);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0C208DE5           STR      R2,[SP, #+12]
   \   00000050   040090E5           LDR      R0,[R0, #+4]
   \   00000054   ........           BL       WM_SendMessage
     49            }
     50          }
   \                     ??_cbTimer_0:
   \   00000058   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
     51          
     52          /*********************************************************************
     53          *
     54          *       Private code
     55          *
     56          **********************************************************************
     57          */
     58          /*********************************************************************
     59          *
     60          *       WM__DeleteAssocTimer
     61          *
     62          * Purpose:
     63          *   Deletes all timers associated with the given window
     64          */

   \                                 In section .text, align 4, keep-with-next
     65          void WM__DeleteAssocTimer(WM_HWIN hWin) {
   \                     WM__DeleteAssocTimer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
     66            GUI_TIMER_HANDLE hTimer = 0;
     67            WM_TIMER_OBJ * pTimer;
     68            U32 Context, hTimerWM;
     69          
     70            WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
     71            hTimer = GUI_TIMER__GetNextTimer(0, &Context);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   0000A0E3           MOV      R0,#+0
   \                     ??WM__DeleteAssocTimer_0:
   \   00000018   ........           BL       GUI_TIMER__GetNextTimer
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   0E0000EA           B        ??WM__DeleteAssocTimer_1
     72            while (hTimer) {
     73              if (Context) {
     74                pTimer = (WM_TIMER_OBJ *)GUI_ALLOC_h2p(Context);
     75                if (pTimer->hWin == hWin) {
     76                  hTimerWM = Context;
   \                     ??WM__DeleteAssocTimer_2:
   \   00000024   00609DE5           LDR      R6,[SP, #+0]
     77                  hTimer   = GUI_TIMER__GetNextTimer(hTimer, &Context);
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       GUI_TIMER__GetNextTimer
   \   00000034   0050A0E1           MOV      R5,R0
     78                  WM_DeleteTimer(hTimerWM);
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   0700000A           BEQ      ??WM__DeleteAssocTimer_1
   \   00000040   ........           BL       GUI_Lock
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           BL       GUI_ALLOC_h2p
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   ........           BL       GUI_TIMER_Delete
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       GUI_ALLOC_Free
   \   0000005C   ........           BL       GUI_Unlock
     79                  continue;
     80                }
   \                     ??WM__DeleteAssocTimer_1:
   \   00000060   000055E3           CMP      R5,#+0
   \   00000064   0900000A           BEQ      ??WM__DeleteAssocTimer_3
   \   00000068   00009DE5           LDR      R0,[SP, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0300000A           BEQ      ??WM__DeleteAssocTimer_4
   \   00000074   ........           BL       GUI_ALLOC_h2p
   \   00000078   040090E5           LDR      R0,[R0, #+4]
   \   0000007C   040050E1           CMP      R0,R4
   \   00000080   E7FFFF0A           BEQ      ??WM__DeleteAssocTimer_2
     81                hTimer = GUI_TIMER__GetNextTimer(hTimer, &Context);
   \                     ??WM__DeleteAssocTimer_4:
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   E1FFFFEA           B        ??WM__DeleteAssocTimer_0
     82              } else {
     83                hTimer = GUI_TIMER__GetNextTimer(hTimer, &Context);
     84              }
     85            }
     86            WM_UNLOCK();
   \                     ??WM__DeleteAssocTimer_3:
   \   00000090   ........           BL       GUI_Unlock
     87          }
   \   00000094   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
     88          
     89          /*********************************************************************
     90          *
     91          *       Public code
     92          *
     93          **********************************************************************
     94          */
     95          /*********************************************************************
     96          *
     97          *       WM_DeleteTimer
     98          *
     99          * Purpose:
    100          *   API function (optional).
    101          *   Allows the application to delete a timer. 
    102          */

   \                                 In section .text, align 4, keep-with-next
    103          void WM_DeleteTimer(WM_HTIMER hTimer) {
   \                     WM_DeleteTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    104            if (hTimer) {
   \   00000008   0700000A           BEQ      ??WM_DeleteTimer_0
    105              WM_TIMER_OBJ * pTimer;
    106              WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
    107              pTimer = (WM_TIMER_OBJ *) GUI_ALLOC_h2p(hTimer);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       GUI_ALLOC_h2p
    108              GUI_TIMER_Delete(pTimer->hTimer);
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       GUI_TIMER_Delete
    109              GUI_ALLOC_Free(hTimer);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_Free
    110              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    111            }
    112          }
   \                     ??WM_DeleteTimer_0:
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    113          
    114          /*********************************************************************
    115          *
    116          *       WM_CreateTimer
    117          *
    118          *  Returns:    0 if failed, else handle of timer
    119          *  Parameters:
    120          *                hWin        Window handle of the window to receive the WM_TIMER message
    121          *                UserId      User defined Id. If not needed, use 0.
    122          *                Period      Number of time units (ticks)
    123          *                Mode        0: one-shot
    124          *
    125          */

   \                                 In section .text, align 4, keep-with-next
    126          WM_HTIMER WM_CreateTimer(WM_HWIN hWin, int UserId, int Period, int Mode) {
   \                     WM_CreateTimer:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    127            WM_HTIMER hTimer;
    128            GUI_USE_PARA(Mode);
    129            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
    130            hTimer = GUI_ALLOC_AllocZero(sizeof(WM_TIMER_OBJ));
   \   00000014   0C00A0E3           MOV      R0,#+12
   \   00000018   ........           BL       GUI_ALLOC_AllocZero
   \   0000001C   0070B0E1           MOVS     R7,R0
    131            if (hTimer) {
   \   00000020   1200000A           BEQ      ??WM_CreateTimer_0
    132              WM_TIMER_OBJ * pTimer;
    133              pTimer = (WM_TIMER_OBJ *) GUI_ALLOC_h2p(hTimer);
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   0080A0E1           MOV      R8,R0
    134              pTimer->hWin    = hWin;
   \   0000002C   044088E5           STR      R4,[R8, #+4]
    135              pTimer->UserId  = UserId;
   \   00000030   085088E5           STR      R5,[R8, #+8]
    136          #ifndef GUI_X_CREATE_TIMER
    137              pTimer->hTimer  = GUI_TIMER_Create(_cbTimer, GUI_GetTime() + Period, (U32)hTimer, 0);
   \   00000034   ........           BL       GUI_GetTime
   \   00000038   001086E0           ADD      R1,R6,R0
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   ........           LDR      R0,??DataTable1
   \   00000048   ........           BL       GUI_TIMER_Create
   \   0000004C   000088E5           STR      R0,[R8, #+0]
    138          #else
    139              pTimer->hTimer  = GUI_TIMER_Create(_cbTimer, 0, (U32)hTimer, 0);
    140          #endif
    141              if (pTimer->hTimer) {
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200000A           BEQ      ??WM_CreateTimer_1
    142                GUI_TIMER_SetPeriod(pTimer->hTimer, Period);
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   ........           BL       GUI_TIMER_SetPeriod
   \   00000060   020000EA           B        ??WM_CreateTimer_0
    143              } else {
    144                GUI_ALLOC_Free(hTimer);
   \                     ??WM_CreateTimer_1:
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           BL       GUI_ALLOC_Free
    145                hTimer = 0;
   \   0000006C   0070A0E3           MOV      R7,#+0
    146              }
    147            }
    148            WM_UNLOCK();
   \                     ??WM_CreateTimer_0:
   \   00000070   ........           BL       GUI_Unlock
    149            return hTimer;
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   F081BDE8           POP      {R4-R8,PC}       ;; return
    150          }
    151          
    152          /*********************************************************************
    153          *
    154          *       WM_RestartTimer
    155          */

   \                                 In section .text, align 4, keep-with-next
    156          void WM_RestartTimer(WM_HTIMER hTimer, int Period) {
   \                     WM_RestartTimer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    157            if (hTimer) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0B00000A           BEQ      ??WM_RestartTimer_0
    158              WM_TIMER_OBJ * pTimer;
    159              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    160              pTimer = (WM_TIMER_OBJ *)GUI_ALLOC_h2p(hTimer);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   0040A0E1           MOV      R4,R0
    161              if (Period) {
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0200000A           BEQ      ??WM_RestartTimer_1
    162                GUI_TIMER_SetPeriod(pTimer->hTimer, Period);
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   ........           BL       GUI_TIMER_SetPeriod
    163              }
    164              GUI_TIMER_Restart  (pTimer->hTimer);
   \                     ??WM_RestartTimer_1:
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   ........           BL       GUI_TIMER_Restart
    165              WM_UNLOCK();
   \   00000044   ........           BL       GUI_Unlock
    166            }
    167          }
   \                     ??WM_RestartTimer_0:
   \   00000048   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
    168          
    169          /*********************************************************************
    170          *
    171          *       WM_GetTimerId
    172          */

   \                                 In section .text, align 4, keep-with-next
    173          int WM_GetTimerId(WM_HTIMER hTimer) {
   \                     WM_GetTimerId:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    174            WM_TIMER_OBJ * pTimer;
    175            int Id = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    176          
    177            if (hTimer) {
   \   00000010   0500000A           BEQ      ??WM_GetTimerId_0
    178              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    179              pTimer = (WM_TIMER_OBJ *)GUI_LOCK_H(hTimer); {
    180                Id = pTimer->UserId;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   085090E5           LDR      R5,[R0, #+8]
    181              } GUI_UNLOCK_H(pTimer);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    182              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    183            }
    184            return Id;
   \                     ??WM_GetTimerId_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    185          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _cbTimer

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   0000               DC8 0, 0
    186          
    187          #else
    188            void WM_Timer_c(void) {} /* avoid empty object files */
    189          #endif   /* GUI_WINSUPPORT */
    190          
    191          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     WM_CreateTimer           24
     WM_DeleteTimer            8
     WM_GetTimerId            16
     WM_RestartTimer          16
     WM__DeleteAssocTimer     24
     _cbTimer                 24


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _cbTimer               96
     WM__DeleteAssocTimer  156
     WM_DeleteTimer         48
     WM_CreateTimer        124
     WM_RestartTimer        80
     WM_GetTimerId          56
     ??DataTable1            4
     ?<Constant {0}>        16

 
  16 bytes in section .rodata
 564 bytes in section .text
 
 564 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
