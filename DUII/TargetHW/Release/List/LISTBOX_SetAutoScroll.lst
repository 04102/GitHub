###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:49 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_SetAutoScroll.c             #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_SetAutoScroll.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTBOX_SetAutoScroll.lst  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTBOX_SetAutoScroll.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_SetAutoScroll.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_SetAutoScroll.c
     19          Purpose     : Implementation of LISTBOX_SetAutoScroll
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "GUI_ARRAY.h"
     27          #include "LISTBOX_Private.h"
     28          #include "SCROLLBAR.h"
     29          #include "GUI_Debug.h"
     30          #include "GUI_Private.h"
     31          #include "WM_Intern.h"
     32          
     33          #if GUI_WINSUPPORT
     34          
     35          /*********************************************************************
     36          *
     37          *       Exported routines:  Various methods
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       LISTBOX_SetAutoScrollH
     44          */

   \                                 In section .text, align 4, keep-with-next
     45          void LISTBOX_SetAutoScrollH(LISTBOX_Handle hObj, int State) {
   \                     LISTBOX_SetAutoScrollH:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
     46            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1300000A           BEQ      ??LISTBOX_SetAutoScrollH_0
     47              LISTBOX_Obj * pObj;
     48              char Flags, OldFlags;
     49              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     50              pObj = LISTBOX_LOCK_H(hObj);
     51              OldFlags = pObj->Flags;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   9260D0E5           LDRB     R6,[R0, #+146]
     52              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
     53              Flags = OldFlags & (~LISTBOX_SF_AUTOSCROLLBAR_H);
   \   0000002C   FE7006E2           AND      R7,R6,#0xFE
     54              if (State) {
   \   00000030   000055E3           CMP      R5,#+0
     55                Flags |= LISTBOX_SF_AUTOSCROLLBAR_H;
   \   00000034   01708713           ORRNE    R7,R7,#0x1
     56              } else {
     57                WM_SetScrollbarH(hObj, 0);
   \   00000038   0010A003           MOVEQ    R1,#+0
   \   0000003C   0400A001           MOVEQ    R0,R4
   \   00000040   ........           BLEQ     WM_SetScrollbarH
     58              }
     59              if (OldFlags != Flags) {
   \   00000044   070056E1           CMP      R6,R7
   \   00000048   0500000A           BEQ      ??LISTBOX_SetAutoScrollH_1
     60                pObj = LISTBOX_LOCK_H(hObj);
     61                pObj->Flags = Flags;
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   9270C0E5           STRB     R7,[R0, #+146]
     62                GUI_UNLOCK_H(pObj);
   \   00000058   ........           BL       GUI_ALLOC_UnlockH
     63                LISTBOX_UpdateScrollers(hObj);
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       LISTBOX_UpdateScrollers
     64              }
     65              WM_UNLOCK();
   \                     ??LISTBOX_SetAutoScrollH_1:
   \   00000064   ........           BL       GUI_Unlock
     66            }
     67          }
   \                     ??LISTBOX_SetAutoScrollH_0:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
     68          
     69          /*********************************************************************
     70          *
     71          *       LISTBOX_SetAutoScrollV
     72          */

   \                                 In section .text, align 4, keep-with-next
     73          void LISTBOX_SetAutoScrollV(LISTBOX_Handle hObj, int State) {
   \                     LISTBOX_SetAutoScrollV:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
     74            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1300000A           BEQ      ??LISTBOX_SetAutoScrollV_0
     75              LISTBOX_Obj * pObj;
     76              char Flags, OldFlags;
     77              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     78              pObj = LISTBOX_LOCK_H(hObj);
     79              OldFlags = pObj->Flags;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   9260D0E5           LDRB     R6,[R0, #+146]
     80              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
     81              Flags = OldFlags & (~LISTBOX_SF_AUTOSCROLLBAR_V);
   \   0000002C   FD7006E2           AND      R7,R6,#0xFD
     82              if (State) {
   \   00000030   000055E3           CMP      R5,#+0
     83                Flags |= LISTBOX_SF_AUTOSCROLLBAR_V;
   \   00000034   02708713           ORRNE    R7,R7,#0x2
     84              } else {
     85                WM_SetScrollbarV(hObj, 0);
   \   00000038   0010A003           MOVEQ    R1,#+0
   \   0000003C   0400A001           MOVEQ    R0,R4
   \   00000040   ........           BLEQ     WM_SetScrollbarV
     86              }
     87              if (OldFlags != Flags) {
   \   00000044   070056E1           CMP      R6,R7
   \   00000048   0500000A           BEQ      ??LISTBOX_SetAutoScrollV_1
     88                pObj = LISTBOX_LOCK_H(hObj);
     89                pObj->Flags = Flags;
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   9270C0E5           STRB     R7,[R0, #+146]
     90                GUI_UNLOCK_H(pObj);
   \   00000058   ........           BL       GUI_ALLOC_UnlockH
     91                LISTBOX_UpdateScrollers(hObj);
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       LISTBOX_UpdateScrollers
     92              }
     93              WM_UNLOCK();
   \                     ??LISTBOX_SetAutoScrollV_1:
   \   00000064   ........           BL       GUI_Unlock
     94            }
     95          }
   \                     ??LISTBOX_SetAutoScrollV_0:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
     96          
     97          
     98          #else                            /* Avoid problems with empty object modules */
     99            void LISTBOX_SetAutoScroll_C(void) {}
    100          #endif

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     LISTBOX_SetAutoScrollH     24
     LISTBOX_SetAutoScrollV     24


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     LISTBOX_SetAutoScrollH  112
     LISTBOX_SetAutoScrollV  112

 
 224 bytes in section .text
 
 224 bytes of CODE memory

Errors: none
Warnings: none
