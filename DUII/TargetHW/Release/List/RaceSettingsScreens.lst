###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     05/Jan/2011  11:17:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\RaceSettingsScreens.c                       #
#    Command line =  C:\DUII\DUII\RaceSettingsScreens.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ --cpu_mode arm -Ohs --use_c++_inline         #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Release\List\RaceSettingsScreens.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\RaceSettingsScreens.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\RaceSettingsScreens.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.00 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : MainTask.C
     19          Purpose     : Main program, called from after main after initialisation
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include "DUII.h"
     25          #include "GUI.h"
     26          #include "commondefs.h"
     27          #include "DIALOG.h"
     28          #include "ConfigScreens.h"
     29          #include "GeneralConfig.h"
     30          #include "GaugeScreen.h"
     31          #include "FlashReadWrite.h"
     32          #include "GMeterScreen.h"
     33          #include "RunningGauges.h"
     34          #include "RaceSettingsScreens.h"
     35          #include "DataHandler.h"
     36          #include "StandardList.h"
     37          #include "TachSetupScreens.h"
     38          #include "InputScreens.h"
     39          #include "SystemSettingsScreens.h"
     40          
     41          
     42          /*********************************************************************
     43          *
     44          *       Public Variables
     45          *
     46          **********************************************************************
     47          */
     48          
     49          /*********************************************************************
     50          *
     51          *       External data and code
     52          *
     53          **********************************************************************
     54          */
     55          // Note that the button bitmaps must be encoded for the appropriate color
     56          // conversion selected in LCDConf.c
     57          extern GUI_CONST_STORAGE GUI_BITMAP bmBackground;
     58          extern GUI_CONST_STORAGE GUI_BITMAP bmBlankListWheelScreen;
     59          //extern GUI_CONST_STORAGE GUI_BITMAP bmLaunchGForceText;
     60          ////extern GUI_CONST_STORAGE GUI_BITMAP bmLaptimeHold;		// to go to new TrackSettingsScreen
     61          extern GUI_CONST_STORAGE GUI_BITMAP bmTachSetup;
     62          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenCheck;
     63          //extern GUI_CONST_STORAGE GUI_BITMAP bmDriveModeSetup;
     64          extern GUI_CONST_STORAGE GUI_BITMAP bmCameraText;
     65          extern GUI_CONST_STORAGE GUI_BITMAP bmInputsBackground;
     66          extern GUI_CONST_STORAGE GUI_BITMAP bmInputText;
     67          extern GUI_CONST_STORAGE GUI_BITMAP bmBrownInputButton;
     68          extern GUI_CONST_STORAGE GUI_BITMAP bmGreenInputButton;
     69          extern GUI_CONST_STORAGE GUI_BITMAP bmRedInputButton;
     70          
     71          extern void InputsSelectionPaint(int, WM_HWIN);
     72          extern char *apCameras[];
     73          
     74          
     75          /*********************************************************************
     76          *
     77          *       Local Prototypes
     78          *
     79          **********************************************************************
     80          */
     81          void DisplayTachSelection(int, WM_HWIN);
     82          void TachSelectionPaint(int, WM_HWIN);
     83          ////void DisplayHoldtimeSelection(int, WM_HWIN);	// to go to new TrackSettingsScreen
     84          ////void HoldtimeSelectionPaint(int, WM_HWIN);
     85          void DisplayLaunchSelection(int, WM_HWIN);
     86          void LaunchSelectionPaint(int, WM_HWIN);
     87          //void DisplayDrivemodeSelection(int, WM_HWIN);
     88          //void DrivemodeSelectionPaint(int, WM_HWIN);
     89          void DisplayCameraSelection(int, WM_HWIN);
     90          void CameraSelectionPaint(int, WM_HWIN);
     91          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen);
     92          void DisplayCameraSelection(int pixelOffset, WM_HWIN hParent);
     93          static int GetScreenID(int Id);
     94          void RSDisplayInputsSelection(int pixelOffset, WM_HWIN hParent);
     95          void DisplayInputsSelection(int pixelOffset, WM_HWIN hParent, int idA0, int idA1, int idD4, int idA2, int idA3, int idD5);
     96          void InputsSelectionPaint(int, WM_HWIN);
     97          void DisplayGearRatio(int, WM_HWIN);
     98          void GearRatioPaint(int, WM_HWIN);
     99          
    100          //char *LaunchForce[];
    101          ////char *LapHoldTimes[];		// to go to new TrackSettingsScreen
    102          
    103          
    104          /*********************************************************************
    105          *
    106          *       Tables and Constants
    107          *
    108          **********************************************************************
    109          */
    110          struct SCREEN_LIST RaceSettingsScreenList[NUM_RACE_SETTINGS_SCREENS+1] = {
    111          	{ TACH_SELECTION, DisplayTachSelection, TachSelectionPaint },
    112          	{ CAMERA_SELECTION, DisplayCameraSelection, CameraSelectionPaint },
    113          	{ INPUTS_SELECTION, RSDisplayInputsSelection, InputsSelectionPaint },
    114          	{ GEARRATIO_SELECTION, DisplayGearRatio, GearRatioPaint },
    115          	////{ HOLDTIME_SELECTION, DisplayHoldtimeSelection, HoldtimeSelectionPaint },		// to go to new TrackSettingsScreen
    116          //	{ LAUNCH_SELECTION, DisplayLaunchSelection, LaunchSelectionPaint },
    117          	//{ DRIVEMODE_SELECTION, DisplayDrivemodeSelection, DrivemodeSelectionPaint },
    118          	{ -1, NULL, NULL }
    119          };
    120          
    121          //
    122          // Widget IDs
    123          //
    124          #define	CAMERA_LIST					GUI_ID_LISTWHEEL0
    125          ////#define	LAP_HOLD_LIST				GUI_ID_LISTWHEEL1		// to go to new TrackSettingsScreen
    126          //#define	LAUNCH_G_LIST				GUI_ID_LISTWHEEL2
    127          #define	CAMERA_TYPE_BUTTON		GUI_ID_USER + 1
    128          //#define	CAMERA_EDIT_BUTTON		GUI_ID_USER + 2
    129          ////#define	LAPHOLD_TIME_BUTTON		GUI_ID_USER + 3
    130          //#define	LAUNCH_G_FORCE_BUTTON	GUI_ID_USER + 4
    131          //#define	ROLLING_START_BUTTON		GUI_ID_USER + 5
    132          #define	WARNING_BUTTON				GUI_ID_USER + 6
    133          #define	REDLINE_BUTTON				GUI_ID_USER + 7
    134          #define	CYLINDERS_BUTTON			GUI_ID_USER + 8
    135          #define	START_BUTTON				GUI_ID_USER + 9
    136          #define	PEAK_BUTTON					GUI_ID_USER + 10
    137          #define	LAP_BUTTON					GUI_ID_USER + 11
    138          #define	ANALOG0_BUTTON				GUI_ID_USER + 12
    139          #define	ANALOG1_BUTTON				GUI_ID_USER + 13
    140          #define	ANALOG2_BUTTON				GUI_ID_USER + 14
    141          #define	ANALOG3_BUTTON				GUI_ID_USER + 15
    142          #define	DIGITAL4_BUTTON			GUI_ID_USER + 16
    143          #define	DIGITAL5_BUTTON			GUI_ID_USER + 17
    144          #define	SHOW_RPM						GUI_ID_USER + 18
    145          #define	SHOW_SPEED					GUI_ID_USER + 19
    146          
    147          
    148          /*********************************************************************
    149          *
    150          *       Local Variables
    151          *
    152          **********************************************************************
    153          */
    154          static WM_HWIN hRaceSettingsScreens;
    155          static int KMCDialogSemaphone = 0;
    156          static int clickedOnThisScreen;
    157          static BUTTON_Handle hCameraSelectionBtn;
    158          ////static BUTTON_Handle hHoldTimeSelectionBtn;		// to go to new TrackSettingsScreen
    159          //static BUTTON_Handle hLaunchSelectionBtn;
    160          static LISTWHEEL_Handle hCameraListWheel;
    161          ////static LISTWHEEL_Handle hHoldTimeListWheel;		// to go to new TrackSettingsScreen
    162          //static LISTWHEEL_Handle hLaunchListWheel;

   \                                 In section .bss, align 4
    163          static BUTTON_Handle hWarningBtn, hRedlineBtn, hCylBtn, hStartBtn, hPeakBtn, hLapBtn;
   \                     hWarningBtn:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \   00000014                      DS8 4

   \                                 In section .bss, align 4
    164          static BUTTON_Handle hAnalog0, hAnalog1, hAnalog2, hAnalog3, hDigital4, hDigital5;
   \                     hAnalog0:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \   00000014                      DS8 4
    165          
    166          BUTTON_Handle hShowSpeedCheck, hShowRPMCheck;
    167          
    168          /*********************************************************************
    169          *
    170          *       Public code
    171          *
    172          **********************************************************************
    173          */

   \                                 In section .text, align 4, keep-with-next
    174          WM_HWIN GetRaceSettingsWindowHandle(void)
    175          {
    176          	return hRaceSettingsScreens;
   \                     GetRaceSettingsWindowHandle:
   \   00000000   ........           LDR      R0,??DataTable120
   \   00000004   3C0090E5           LDR      R0,[R0, #+60]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    177          }
    178          

   \                                 In section .text, align 4, keep-with-next
    179          void SetRaceSettingsWindowHandle(WM_HWIN hWin)
    180          {
    181          	hRaceSettingsScreens = hWin;
   \                     SetRaceSettingsWindowHandle:
   \   00000000   ........           LDR      R1,??DataTable120
   \   00000004   3C0081E5           STR      R0,[R1, #+60]
    182          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    183          

   \                                 In section .text, align 4, keep-with-next
    184          void RaceSettingsScreensCallback(WM_MESSAGE * pMsg)
    185          {
   \                     RaceSettingsScreensCallback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    186          	int NCode, Id;
    187          //	int Sel;
    188          //	WM_HWIN hDlg;
    189          
    190          //	hDlg = pMsg->hWin;
    191          
    192          	switch(pMsg->MsgId)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   1400000A           BEQ      ??RaceSettingsScreensCallback_3
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   1600000A           BEQ      ??RaceSettingsScreensCallback_4
   \   00000020   170050E2           SUBS     R0,R0,#+23
   \   00000024   3300000A           BEQ      ??RaceSettingsScreensCallback_5
   \   00000028   ED0050E2           SUBS     R0,R0,#+237
   \   0000002C   5400001A           BNE      ??RaceSettingsScreensCallback_6
    193          	{
    194          		case WM_TIMER:
    195          			if (pMsg->Data.v == hScreenTimer)
   \   00000030   ........           LDR      R0,??DataTable120_1
   \   00000034   0C1094E5           LDR      R1,[R4, #+12]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   000051E1           CMP      R1,R0
   \   00000040   0300001A           BNE      ??RaceSettingsScreensCallback_7
    196          			{
    197          				WM_RestartTimer(hScreenTimer, SETUP_SCREEN_REFRESH_TIME);
   \   00000044   FA1FA0E3           MOV      R1,#+1000
   \   00000048   ........           BL       WM_RestartTimer
    198          				WM_InvalidateWindow(pMsg->hWin);
   \   0000004C   040094E5           LDR      R0,[R4, #+4]
   \   00000050   D60000EA           B        ??RaceSettingsScreensCallback_8
    199          			}
    200          			else if (pMsg->Data.v == hScrollTimer)
   \                     ??RaceSettingsScreensCallback_7:
   \   00000054   ........           LDR      R0,??DataTable120_2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000051E1           CMP      R1,R0
   \   00000060   D300001A           BNE      ??RaceSettingsScreensCallback_9
    201          				ProcessAutoLand();
   \   00000064   ........           BL       ProcessAutoLand
   \   00000068   D10000EA           B        ??RaceSettingsScreensCallback_9
    202          			break;
    203          
    204          
    205          		case WM_CREATE:
    206          			RaceSettingsIgnoreNextKeyRelease();
   \                     ??RaceSettingsScreensCallback_3:
   \   0000006C   ........           LDR      R0,??DataTable120
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   441080E5           STR      R1,[R0, #+68]
    207          			break;
   \   00000078   CD0000EA           B        ??RaceSettingsScreensCallback_9
    208          
    209          		case WM_PAINT:
    210          			GUI_Clear();		// Clear the background here (and not in the 'constructor') to reduce flicker
   \                     ??RaceSettingsScreensCallback_4:
   \   0000007C   ........           BL       GUI_Clear
    211          			GUI_SetColor(GUI_WHITE);
   \   00000080   FF04E0E3           MVN      R0,#-16777216
   \   00000084   ........           BL       GUI_SetColor
    212          			GUI_SetFont(&GUI_Font32_ASCII);
   \   00000088   ........           LDR      R0,??DataTable120_3
   \   0000008C   ........           BL       GUI_SetFont
    213          
    214          			// Call paint method of previous screen (so it is valid for peeking)
    215          			RaceSettingsScreenList[GetPrevIndex()].paint(0, hRaceSettingsScreens);
   \   00000090   ........           BL       GetPrevIndex
   \   00000094   0020A0E1           MOV      R2,R0
   \   00000098   ........           LDR      R4,??DataTable120
   \   0000009C   0C50A0E3           MOV      R5,#+12
   \   000000A0   954222E0           MLA      R2,R5,R2,R4
   \   000000A4   3C1094E5           LDR      R1,[R4, #+60]
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   082092E5           LDR      R2,[R2, #+8]
   \   000000B0   32FF2FE1           BLX      R2
    216          			// Call paint method of center screen
    217          			RaceSettingsScreenList[GetLastRaceSettingsScreen()].paint(YSIZE_PHYS, hRaceSettingsScreens);
   \   000000B4   ........           BL       GetLastRaceSettingsScreen
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   954222E0           MLA      R2,R5,R2,R4
   \   000000C0   3C1094E5           LDR      R1,[R4, #+60]
   \   000000C4   440FA0E3           MOV      R0,#+272
   \   000000C8   082092E5           LDR      R2,[R2, #+8]
   \   000000CC   32FF2FE1           BLX      R2
    218          			// Call paint method of next screen (so it is valid for peeking)
    219          			RaceSettingsScreenList[GetNextIndex()].paint(YSIZE_PHYS*2, hRaceSettingsScreens);
   \   000000D0   ........           BL       GetNextIndex
   \   000000D4   0020A0E1           MOV      R2,R0
   \   000000D8   954222E0           MLA      R2,R5,R2,R4
   \   000000DC   3C1094E5           LDR      R1,[R4, #+60]
   \   000000E0   880FA0E3           MOV      R0,#+544
   \   000000E4   082092E5           LDR      R2,[R2, #+8]
   \   000000E8   32FF2FE1           BLX      R2
    220          
    221          			DrawSignalStrength(YSIZE_PHYS);
   \   000000EC   440FA0E3           MOV      R0,#+272
   \   000000F0   ........           BL       DrawSignalStrength
    222          			break;
   \   000000F4   AE0000EA           B        ??RaceSettingsScreensCallback_9
    223          
    224          		case WM_NOTIFY_PARENT:
    225          			Id = WM_GetId(pMsg->hWinSrc);		// Id of widget
   \                     ??RaceSettingsScreensCallback_5:
   \   000000F8   080094E5           LDR      R0,[R4, #+8]
   \   000000FC   ........           BL       WM_GetId
   \   00000100   0050A0E1           MOV      R5,R0
    226          			NCode = pMsg->Data.v;				// Notification code
    227          			switch (NCode)
   \   00000104   0C0094E5           LDR      R0,[R4, #+12]
   \   00000108   010050E2           SUBS     R0,R0,#+1
   \   0000010C   0F00000A           BEQ      ??RaceSettingsScreensCallback_10
   \   00000110   010050E2           SUBS     R0,R0,#+1
   \   00000114   1D00000A           BEQ      ??RaceSettingsScreensCallback_11
   \   00000118   020050E2           SUBS     R0,R0,#+2
    228          			{
    229          				case WM_NOTIFICATION_SEL_CHANGED:
    230          					switch(Id)
   \   0000011C   980F5503           CMPEQ    R5,#+608
   \   00000120   A300001A           BNE      ??RaceSettingsScreensCallback_9
    231          					{
    232          						////case LAP_HOLD_LIST:		// to go to new TrackSettingsScreen
    233          						////	sysData.laptimeHold = (Sel = LISTWHEEL_GetPos(pMsg->hWinSrc)) * 10;
    234          						////	LISTWHEEL_SetSel(pMsg->hWinSrc, Sel);
    235          						////	SetListSelection(hHoldTimeSelectionBtn, hHoldTimeListWheel, LapHoldTimes);
    236          						////	break;
    237          
    238          						//case LAUNCH_G_LIST:
    239          						//	LISTWHEEL_SetSel(pMsg->hWinSrc, LISTWHEEL_GetPos(pMsg->hWinSrc));
    240          						//	SetListSelection(hLaunchSelectionBtn, hLaunchListWheel, LaunchForce);
    241          						//	break;
    242          
    243          						case CAMERA_LIST:
    244          							LISTWHEEL_SetSel(pMsg->hWinSrc, LISTWHEEL_GetPos(pMsg->hWinSrc));
   \   00000124   080094E5           LDR      R0,[R4, #+8]
   \   00000128   ........           BL       LISTWHEEL_GetPos
   \   0000012C   0010A0E1           MOV      R1,R0
   \   00000130   080094E5           LDR      R0,[R4, #+8]
   \   00000134   ........           BL       LISTWHEEL_SetSel
    245          							SetListSelection(hCameraSelectionBtn, hCameraListWheel, apCameras);
   \   00000138   ........           LDR      R4,??DataTable120
   \   0000013C   582084E2           ADD      R2,R4,#+88
   \   00000140   4C1094E5           LDR      R1,[R4, #+76]
   \   00000144   480094E5           LDR      R0,[R4, #+72]
   \   00000148   ........           BL       SetListSelection
    246          							break;
   \   0000014C   980000EA           B        ??RaceSettingsScreensCallback_9
    247          					}
    248          					break;
    249          
    250          				case WM_NOTIFICATION_CLICKED:
    251          					clickedOnThisScreen = true;
   \                     ??RaceSettingsScreensCallback_10:
   \   00000150   ........           LDR      R1,??DataTable120
   \   00000154   0100A0E3           MOV      R0,#+1
   \   00000158   440081E5           STR      R0,[R1, #+68]
    252          					switch (Id)
   \   0000015C   980F55E3           CMP      R5,#+608
   \   00000160   0700001A           BNE      ??RaceSettingsScreensCallback_6
    253          					{
    254          						case CAMERA_LIST:
    255          						////case LAP_HOLD_LIST:		// to go to new TrackSettingsScreen
    256          						//case LAUNCH_G_LIST:
    257          							pressingbutton_semaphore = 1;
   \   00000164   ........           LDR      R1,??DataTable120_4
   \   00000168   000081E5           STR      R0,[R1, #+0]
    258          							if (ScreenMoving())
   \   0000016C   ........           BL       ScreenMoving
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   8E00000A           BEQ      ??RaceSettingsScreensCallback_9
    259          								StartAutoLand(NUM_RACE_SETTINGS_SCREENS);
   \   00000178   0400A0E3           MOV      R0,#+4
   \   0000017C   ........           BL       StartAutoLand
   \   00000180   8B0000EA           B        ??RaceSettingsScreensCallback_9
    260          							break;
    261          
    262          						default:
    263          							WM_DefaultProc(pMsg);
   \                     ??RaceSettingsScreensCallback_6:
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       WM_DefaultProc
   \   0000018C   880000EA           B        ??RaceSettingsScreensCallback_9
    264          					}
    265          					break;
    266          
    267          				case WM_NOTIFICATION_RELEASED:
    268          					pressingbutton_semaphore = 0;
   \                     ??RaceSettingsScreensCallback_11:
   \   00000190   ........           LDR      R0,??DataTable120_4
   \   00000194   0060A0E3           MOV      R6,#+0
    269          					if (!clickedOnThisScreen)
   \   00000198   ........           LDR      R4,??DataTable120
   \   0000019C   006080E5           STR      R6,[R0, #+0]
   \   000001A0   440094E5           LDR      R0,[R4, #+68]
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   8100000A           BEQ      ??RaceSettingsScreensCallback_9
    270          						break;
    271          
    272          					switch (Id)
   \   000001AC   010045E2           SUB      R0,R5,#+1
   \   000001B0   800E40E2           SUB      R0,R0,#+2048
   \   000001B4   120050E3           CMP      R0,#+18
   \   000001B8   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??RaceSettingsScreensCallback_0:
   \   000001BC   7C00008A           BHI      ??RaceSettingsScreensCallback_9
   \   000001C0   110000EA           B        ??RaceSettingsScreensCallback_12
   \   000001C4   7A0000EA           B        ??RaceSettingsScreensCallback_9
   \   000001C8   790000EA           B        ??RaceSettingsScreensCallback_9
   \   000001CC   780000EA           B        ??RaceSettingsScreensCallback_9
   \   000001D0   770000EA           B        ??RaceSettingsScreensCallback_9
   \   000001D4   150000EA           B        ??RaceSettingsScreensCallback_13
   \   000001D8   140000EA           B        ??RaceSettingsScreensCallback_13
   \   000001DC   130000EA           B        ??RaceSettingsScreensCallback_13
   \   000001E0   120000EA           B        ??RaceSettingsScreensCallback_13
   \   000001E4   110000EA           B        ??RaceSettingsScreensCallback_13
   \   000001E8   100000EA           B        ??RaceSettingsScreensCallback_13
   \   000001EC   310000EA           B        ??RaceSettingsScreensCallback_14
   \   000001F0   300000EA           B        ??RaceSettingsScreensCallback_14
   \   000001F4   2F0000EA           B        ??RaceSettingsScreensCallback_14
   \   000001F8   2E0000EA           B        ??RaceSettingsScreensCallback_14
   \   000001FC   2D0000EA           B        ??RaceSettingsScreensCallback_14
   \   00000200   2C0000EA           B        ??RaceSettingsScreensCallback_14
   \   00000204   5A0000EA           B        ??RaceSettingsScreensCallback_15
   \   00000208   4B0000EA           B        ??RaceSettingsScreensCallback_16
    273          					{
    274          						case CAMERA_TYPE_BUTTON:
    275          						//case CAMERA_EDIT_BUTTON:
    276          						////case LAPHOLD_TIME_BUTTON:		// to go to new TrackSettingsScreen
    277          						//case LAUNCH_G_FORCE_BUTTON:
    278          						//case ROLLING_START_BUTTON
    279          							if (!ScreenMoving())
   \                     ??RaceSettingsScreensCallback_12:
   \   0000020C   ........           BL       ScreenMoving
   \   00000210   000050E3           CMP      R0,#+0
    280          							{
    281          								if (!KMCDialogSemaphone)
   \   00000214   40009405           LDREQ    R0,[R4, #+64]
   \   00000218   00005003           CMPEQ    R0,#+0
   \   0000021C   6400001A           BNE      ??RaceSettingsScreensCallback_9
    282          								{
    283          									KMCDialogSemaphone = 1;
   \   00000220   0100A0E3           MOV      R0,#+1
   \   00000224   400084E5           STR      R0,[R4, #+64]
    284          									KMCDialogSemaphone = 0;
   \   00000228   406084E5           STR      R6,[R4, #+64]
   \   0000022C   600000EA           B        ??RaceSettingsScreensCallback_9
    285          								}
    286          							}
    287          							break;
    288          
    289          						case WARNING_BUTTON:
    290          						case REDLINE_BUTTON:
    291          						case CYLINDERS_BUTTON:
    292          						case START_BUTTON:
    293          						case PEAK_BUTTON:
    294          						case LAP_BUTTON:
    295          							if (!ScreenMoving())
   \                     ??RaceSettingsScreensCallback_13:
   \   00000230   ........           BL       ScreenMoving
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   5D00001A           BNE      ??RaceSettingsScreensCallback_9
    296          								DisplayNewScreenList(TACH_SETUP_SCREENS_TYPE, GetScreenID(Id), hRaceSettingsScreens);
   \   0000023C   075045E2           SUB      R5,R5,#+7
   \   00000240   805E45E2           SUB      R5,R5,#+2048
   \   00000244   0A0055E3           CMP      R5,#+10
   \   00000248   05F18F90           ADDLS    PC,PC,R5, LSL #+2
   \                     ??RaceSettingsScreensCallback_1:
   \   0000024C   1400008A           BHI      ??RaceSettingsScreensCallback_17
   \   00000250   110000EA           B        ??RaceSettingsScreensCallback_18
   \   00000254   0E0000EA           B        ??RaceSettingsScreensCallback_19
   \   00000258   0B0000EA           B        ??RaceSettingsScreensCallback_20
   \   0000025C   080000EA           B        ??RaceSettingsScreensCallback_21
   \   00000260   050000EA           B        ??RaceSettingsScreensCallback_22
   \   00000264   0E0000EA           B        ??RaceSettingsScreensCallback_17
   \   00000268   0B0000EA           B        ??RaceSettingsScreensCallback_18
   \   0000026C   060000EA           B        ??RaceSettingsScreensCallback_20
   \   00000270   030000EA           B        ??RaceSettingsScreensCallback_21
   \   00000274   060000EA           B        ??RaceSettingsScreensCallback_19
   \   00000278   FFFFFFEA           B        ??RaceSettingsScreensCallback_22
   \                     ??RaceSettingsScreensCallback_22:
   \   0000027C   0510A0E3           MOV      R1,#+5
   \   00000280   080000EA           B        ??RaceSettingsScreensCallback_23
   \                     ??RaceSettingsScreensCallback_21:
   \   00000284   0410A0E3           MOV      R1,#+4
   \   00000288   060000EA           B        ??RaceSettingsScreensCallback_23
   \                     ??RaceSettingsScreensCallback_20:
   \   0000028C   0310A0E3           MOV      R1,#+3
   \   00000290   040000EA           B        ??RaceSettingsScreensCallback_23
   \                     ??RaceSettingsScreensCallback_19:
   \   00000294   0210A0E3           MOV      R1,#+2
   \   00000298   020000EA           B        ??RaceSettingsScreensCallback_23
   \                     ??RaceSettingsScreensCallback_18:
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   000000EA           B        ??RaceSettingsScreensCallback_23
   \                     ??RaceSettingsScreensCallback_17:
   \   000002A4   0010A0E3           MOV      R1,#+0
   \                     ??RaceSettingsScreensCallback_23:
   \   000002A8   3C2094E5           LDR      R2,[R4, #+60]
   \   000002AC   0600A0E3           MOV      R0,#+6
   \                     ??RaceSettingsScreensCallback_24:
   \   000002B0   ........           BL       DisplayNewScreenList
   \   000002B4   3E0000EA           B        ??RaceSettingsScreensCallback_9
    297          							break;
    298          
    299          						case ANALOG0_BUTTON:
    300          						case ANALOG1_BUTTON:
    301          						case ANALOG2_BUTTON:
    302          						case ANALOG3_BUTTON:
    303          						case DIGITAL4_BUTTON:
    304          						case DIGITAL5_BUTTON:
    305          							if (!ScreenMoving())
   \                     ??RaceSettingsScreensCallback_14:
   \   000002B8   ........           BL       ScreenMoving
   \   000002BC   000050E3           CMP      R0,#+0
   \   000002C0   3B00001A           BNE      ??RaceSettingsScreensCallback_9
    306          								DisplayNewScreenList(INPUTS_SCREENS_TYPE, GetScreenID(Id), hRaceSettingsScreens);
   \   000002C4   075045E2           SUB      R5,R5,#+7
   \   000002C8   805E45E2           SUB      R5,R5,#+2048
   \   000002CC   0A0055E3           CMP      R5,#+10
   \   000002D0   05F18F90           ADDLS    PC,PC,R5, LSL #+2
   \                     ??RaceSettingsScreensCallback_2:
   \   000002D4   1400008A           BHI      ??RaceSettingsScreensCallback_25
   \   000002D8   110000EA           B        ??RaceSettingsScreensCallback_26
   \   000002DC   0E0000EA           B        ??RaceSettingsScreensCallback_27
   \   000002E0   0B0000EA           B        ??RaceSettingsScreensCallback_28
   \   000002E4   080000EA           B        ??RaceSettingsScreensCallback_29
   \   000002E8   050000EA           B        ??RaceSettingsScreensCallback_30
   \   000002EC   0E0000EA           B        ??RaceSettingsScreensCallback_25
   \   000002F0   0B0000EA           B        ??RaceSettingsScreensCallback_26
   \   000002F4   060000EA           B        ??RaceSettingsScreensCallback_28
   \   000002F8   030000EA           B        ??RaceSettingsScreensCallback_29
   \   000002FC   060000EA           B        ??RaceSettingsScreensCallback_27
   \   00000300   FFFFFFEA           B        ??RaceSettingsScreensCallback_30
   \                     ??RaceSettingsScreensCallback_30:
   \   00000304   0510A0E3           MOV      R1,#+5
   \   00000308   080000EA           B        ??RaceSettingsScreensCallback_31
   \                     ??RaceSettingsScreensCallback_29:
   \   0000030C   0410A0E3           MOV      R1,#+4
   \   00000310   060000EA           B        ??RaceSettingsScreensCallback_31
   \                     ??RaceSettingsScreensCallback_28:
   \   00000314   0310A0E3           MOV      R1,#+3
   \   00000318   040000EA           B        ??RaceSettingsScreensCallback_31
   \                     ??RaceSettingsScreensCallback_27:
   \   0000031C   0210A0E3           MOV      R1,#+2
   \   00000320   020000EA           B        ??RaceSettingsScreensCallback_31
   \                     ??RaceSettingsScreensCallback_26:
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   000000EA           B        ??RaceSettingsScreensCallback_31
   \                     ??RaceSettingsScreensCallback_25:
   \   0000032C   0010A0E3           MOV      R1,#+0
   \                     ??RaceSettingsScreensCallback_31:
   \   00000330   3C2094E5           LDR      R2,[R4, #+60]
   \   00000334   0700A0E3           MOV      R0,#+7
   \   00000338   DCFFFFEA           B        ??RaceSettingsScreensCallback_24
    307          							break;
    308          
    309          						case SHOW_SPEED:
    310          							if (!ScreenMoving())
   \                     ??RaceSettingsScreensCallback_16:
   \   0000033C   ........           BL       ScreenMoving
   \   00000340   000050E3           CMP      R0,#+0
   \   00000344   1A00001A           BNE      ??RaceSettingsScreensCallback_9
    311          							{
    312          //								sysData.units = STD;
    313          								BUTTON_SetBitmapEx(hShowSpeedCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   00000348   0F00A0E3           MOV      R0,#+15
   \   0000034C   00008DE5           STR      R0,[SP, #+0]
   \   00000350   0F30A0E3           MOV      R3,#+15
   \   00000354   ........           LDR      R2,??DataTable120_5
   \   00000358   0010A0E3           MOV      R1,#+0
   \   0000035C   500094E5           LDR      R0,[R4, #+80]
   \   00000360   ........           BL       BUTTON_SetBitmapEx
    314          								BUTTON_SetBitmap(hShowRPMCheck, BUTTON_CI_UNPRESSED, NULL);
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0010A0E3           MOV      R1,#+0
   \   0000036C   540094E5           LDR      R0,[R4, #+84]
   \   00000370   0C0000EA           B        ??RaceSettingsScreensCallback_32
    315          								WM_InvalidateWindow(hRaceSettingsScreens);
    316          							}
    317          							break;
    318          
    319          						case SHOW_RPM:
    320          							if (!ScreenMoving())
   \                     ??RaceSettingsScreensCallback_15:
   \   00000374   ........           BL       ScreenMoving
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   0C00001A           BNE      ??RaceSettingsScreensCallback_9
    321          							{
    322          //								sysData.units = STD;
    323          								BUTTON_SetBitmapEx(hShowRPMCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
   \   00000380   0F00A0E3           MOV      R0,#+15
   \   00000384   00008DE5           STR      R0,[SP, #+0]
   \   00000388   0F30A0E3           MOV      R3,#+15
   \   0000038C   ........           LDR      R2,??DataTable120_5
   \   00000390   0010A0E3           MOV      R1,#+0
   \   00000394   540094E5           LDR      R0,[R4, #+84]
   \   00000398   ........           BL       BUTTON_SetBitmapEx
    324          								BUTTON_SetBitmap(hShowSpeedCheck, BUTTON_CI_UNPRESSED, NULL);
   \   0000039C   0020A0E3           MOV      R2,#+0
   \   000003A0   0010A0E3           MOV      R1,#+0
   \   000003A4   500094E5           LDR      R0,[R4, #+80]
   \                     ??RaceSettingsScreensCallback_32:
   \   000003A8   ........           BL       BUTTON_SetBitmap
    325          								WM_InvalidateWindow(hRaceSettingsScreens);
   \   000003AC   3C0094E5           LDR      R0,[R4, #+60]
   \                     ??RaceSettingsScreensCallback_8:
   \   000003B0   ........           BL       WM_InvalidateWindow
    326          							}
    327          							break;
    328          					}
    329          					break;
    330          			}
    331          			break;
    332          
    333          		default:
    334          			WM_DefaultProc(pMsg);
    335          	}
    336          }
   \                     ??RaceSettingsScreensCallback_9:
   \   000003B4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000003B8   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .data, align 4
   \                     RaceSettingsScreenList:
   \   00000000   00000000....       DC32 0, DisplayTachSelection, TachSelectionPaint, 1
   \              ............
   \              01000000    
   \   00000010   ............       DC32 DisplayCameraSelection, CameraSelectionPaint, 2
   \              ....02000000
   \   0000001C   ............       DC32 RSDisplayInputsSelection, InputsSelectionPaint, 3
   \              ....03000000
   \   00000028   ............       DC32 DisplayGearRatio, GearRatioPaint, -1, 0H, 0H
   \              ....FFFFFFFF
   \              000000000000
   \              0000        
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \   00000040   00000000           DC32 0
   \   00000044   00000000           DC8 0, 0, 0, 0
   \   00000048   00000000           DC8 0, 0, 0, 0
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     hShowSpeedCheck:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     hShowRPMCheck:
   \   00000054   00000000           DC8 0, 0, 0, 0
    337          
    338          int GetScreenID(int Id)
    339          {
    340          	switch (Id)
    341          	{
    342          		case WARNING_BUTTON:		return WARNING_RPM;
    343          		case REDLINE_BUTTON:		return REDLINE_RPM;
    344          		case CYLINDERS_BUTTON:	return ENGINE_CYLINDERS;
    345          		case START_BUTTON:		return POWERBAND_RPM;
    346          		case PEAK_BUTTON:			return MAX_RPM;
    347          		case LAP_BUTTON:			return LAP_METER;
    348          		case ANALOG0_BUTTON:		return ANALOG0;
    349          		case ANALOG1_BUTTON:		return ANALOG1;
    350          		case ANALOG2_BUTTON:		return ANALOG2;
    351          		case ANALOG3_BUTTON:		return ANALOG3;
    352          		case DIGITAL4_BUTTON:	return DIGITAL4;
    353          		case DIGITAL5_BUTTON:	return DIGITAL5;
    354          		default:						return 0;
    355          	}
    356          }
    357          
    358          char * apCameras[] = {
   \                     apCameras:
   \   00000058   ............       DC32 `?<Constant "None">`, `?<Constant "ChaseCam SD">`
   \              ....        
   \   00000060   ............       DC32 `?<Constant "GoPro HD">`, `?<Constant "RaceCam HD">`
   \              ....        
   \   00000068   ............       DC32 `?<Constant "Sony HD">`, `?<Constant "Sony SD">`, 0H
   \              ....00000000
    359          	"None",
    360          	"ChaseCam SD", 
    361          	"GoPro HD", 
    362          	"RaceCam HD",
    363          	"Sony HD", 
    364          	"Sony SD", 
    365          	NULL
    366          };
    367          

   \                                 In section .text, align 4, keep-with-next
    368          void DisplayCameraSelection(int pixelOffset, WM_HWIN hParent)
    369          {
   \                     DisplayCameraSelection:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
    370          	DisplayStdListScreen(pixelOffset, hParent, apCameras, CAMERA_LIST, &hCameraListWheel,
    371          			"Camera Type", &hCameraSelectionBtn, CAMERA_TYPE_BUTTON, 0, 0, 0);
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   18308DE5           STR      R3,[SP, #+24]
   \   00000010   14308DE5           STR      R3,[SP, #+20]
   \   00000014   10308DE5           STR      R3,[SP, #+16]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   ........           LDR      R2,??DataTable120
   \   00000020   803E83E3           ORR      R3,R3,#0x800
   \   00000024   0C308DE5           STR      R3,[SP, #+12]
   \   00000028   483082E2           ADD      R3,R2,#+72
   \   0000002C   08308DE5           STR      R3,[SP, #+8]
   \   00000030   ............       ADRL     R3,`?<Constant "Camera Type">`
   \              ....        
   \   00000038   04308DE5           STR      R3,[SP, #+4]
   \   0000003C   4C3082E2           ADD      R3,R2,#+76
   \   00000040   00308DE5           STR      R3,[SP, #+0]
   \   00000044   983FA0E3           MOV      R3,#+608
   \   00000048   582082E2           ADD      R2,R2,#+88
   \   0000004C   ........           BL       DisplayStdListScreen
    372          }
   \   00000050   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000054   0080BDE8           POP      {PC}             ;; return
    373          

   \                                 In section .data, align 4
    374          char *RPM[] = {
   \                     RPM:
   \   00000000   ............       DC32 `?<Constant "5000">`, `?<Constant "5100">`, `?<Constant "5200">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "5300">`, `?<Constant "5400">`, `?<Constant "5500">`
   \              ............
   \   00000018   ............       DC32 `?<Constant "5600">`, `?<Constant "5700">`, `?<Constant "5800">`
   \              ............
   \   00000024   ............       DC32 `?<Constant "5900">`, `?<Constant "6000">`, `?<Constant "6100">`
   \              ............
   \   00000030   ............       DC32 `?<Constant "6200">`, `?<Constant "6300">`, `?<Constant "6400">`
   \              ............
   \   0000003C   ............       DC32 `?<Constant "6500">`, `?<Constant "6600">`, `?<Constant "6700">`
   \              ............
   \   00000048   ............       DC32 `?<Constant "6800">`, `?<Constant "6900">`, `?<Constant "7000">`
   \              ............
   \   00000054   ............       DC32 `?<Constant "7100">`, `?<Constant "7200">`, `?<Constant "7300">`
   \              ............
   \   00000060   ............       DC32 `?<Constant "7400">`, `?<Constant "7500">`, `?<Constant "7600">`
   \              ............
   \   0000006C   ............       DC32 `?<Constant "7700">`, `?<Constant "7800">`, `?<Constant "7900">`
   \              ............
   \   00000078   ............       DC32 `?<Constant "8000">`, `?<Constant "8100">`, `?<Constant "8200">`
   \              ............
   \   00000084   ............       DC32 `?<Constant "8300">`, `?<Constant "8400">`, `?<Constant "8500">`
   \              ............
   \   00000090   ............       DC32 `?<Constant "8600">`, `?<Constant "8700">`, `?<Constant "8800">`
   \              ............
   \   0000009C   ............       DC32 `?<Constant "8900">`, `?<Constant "9000">`, `?<Constant "9100">`
   \              ............
   \   000000A8   ............       DC32 `?<Constant "9200">`, `?<Constant "9300">`, `?<Constant "9400">`
   \              ............
   \   000000B4   ............       DC32 `?<Constant "9500">`, `?<Constant "9600">`, `?<Constant "9700">`
   \              ............
   \   000000C0   ............       DC32 `?<Constant "9800">`, `?<Constant "9900">`, `?<Constant "10000">`
   \              ............
   \   000000CC   ............       DC32 `?<Constant "10100">`, `?<Constant "10200">`
   \              ....        
   \   000000D4   ............       DC32 `?<Constant "10300">`, `?<Constant "10400">`
   \              ....        
   \   000000DC   ............       DC32 `?<Constant "10500">`, `?<Constant "10600">`
   \              ....        
   \   000000E4   ............       DC32 `?<Constant "10700">`, `?<Constant "10800">`
   \              ....        
   \   000000EC   ............       DC32 `?<Constant "10900">`, `?<Constant "11000">`
   \              ....        
   \   000000F4   ............       DC32 `?<Constant "11100">`, `?<Constant "11200">`
   \              ....        
   \   000000FC   ............       DC32 `?<Constant "11300">`, `?<Constant "11400">`
   \              ....        
   \   00000104   ............       DC32 `?<Constant "11500">`, `?<Constant "11600">`
   \              ....        
   \   0000010C   ............       DC32 `?<Constant "11700">`, `?<Constant "11800">`
   \              ....        
   \   00000114   ............       DC32 `?<Constant "11900">`, `?<Constant "12000">`
   \              ....        
   \   0000011C   ............       DC32 `?<Constant "12100">`, `?<Constant "12200">`
   \              ....        
   \   00000124   ............       DC32 `?<Constant "12300">`, `?<Constant "12400">`
   \              ....        
   \   0000012C   ............       DC32 `?<Constant "12500">`, `?<Constant "12600">`
   \              ....        
   \   00000134   ............       DC32 `?<Constant "12700">`, `?<Constant "12800">`
   \              ....        
   \   0000013C   ........0000       DC32 `?<Constant "12900">`, 0H
   \              0000        
    375          	"5000",
    376          	"5100",
    377          	"5200",
    378          	"5300",
    379          	"5400",
    380          	"5500",
    381          	"5600",
    382          	"5700",
    383          	"5800",
    384          	"5900",
    385          	"6000",
    386          	"6100",
    387          	"6200",
    388          	"6300",
    389          	"6400",
    390          	"6500",
    391          	"6600",
    392          	"6700",
    393          	"6800",
    394          	"6900",
    395          	"7000",
    396          	"7100",
    397          	"7200",
    398          	"7300",
    399          	"7400",
    400          	"7500",
    401          	"7600",
    402          	"7700",
    403          	"7800",
    404          	"7900",
    405          	"8000",
    406          	"8100",
    407          	"8200",
    408          	"8300",
    409          	"8400",
    410          	"8500",
    411          	"8600",
    412          	"8700",
    413          	"8800",
    414          	"8900",
    415          	"9000",
    416          	"9100",
    417          	"9200",
    418          	"9300",
    419          	"9400",
    420          	"9500",
    421          	"9600",
    422          	"9700",
    423          	"9800",
    424          	"9900",
    425          	"10000",
    426          	"10100",
    427          	"10200",
    428          	"10300",
    429          	"10400",
    430          	"10500",
    431          	"10600",
    432          	"10700",
    433          	"10800",
    434          	"10900",
    435          	"11000",
    436          	"11100",
    437          	"11200",
    438          	"11300",
    439          	"11400",
    440          	"11500",
    441          	"11600",
    442          	"11700",
    443          	"11800",
    444          	"11900",
    445          	"12000",
    446          	"12100",
    447          	"12200",
    448          	"12300",
    449          	"12400",
    450          	"12500",
    451          	"12600",
    452          	"12700",
    453          	"12800",
    454          	"12900",
    455          	NULL
    456          };
    457          
    458          

   \                                 In section .text, align 4, keep-with-next
    459          void DisplayTachSelection(int pixelOffset, WM_HWIN hParent)
    460          {
   \                     DisplayTachSelection:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   00A0A0E1           MOV      R10,R0
    461          	char scratch[10];
    462          
    463          	hWarningBtn = BUTTON_CreateEx(30, 50 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, WARNING_BUTTON);
   \   00000008   0600A0E3           MOV      R0,#+6
   \   0000000C   1CD04DE2           SUB      SP,SP,#+28
   \   00000010   800E80E3           ORR      R0,R0,#0x800
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   08008DE5           STR      R0,[SP, #+8]
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   0140A0E1           MOV      R4,R1
   \   00000028   32B08AE2           ADD      R11,R10,#+50
   \   0000002C   04008DE5           STR      R0,[SP, #+4]
   \   00000030   00408DE5           STR      R4,[SP, #+0]
   \   00000034   4630A0E3           MOV      R3,#+70
   \   00000038   7820A0E3           MOV      R2,#+120
   \   0000003C   0B10A0E1           MOV      R1,R11
   \   00000040   1E00A0E3           MOV      R0,#+30
   \   00000044   ........           BL       BUTTON_CreateEx
   \   00000048   ........           LDR      R5,??DataTable120_6
    464          	BUTTON_SetFont(hWarningBtn, &GUI_Font24B_ASCII);
   \   0000004C   ........           LDR      R6,??DataTable120_7
   \   00000050   000085E5           STR      R0,[R5, #+0]
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   ........           BL       BUTTON_SetFont
    465          	BUTTON_SetBkColor(hWarningBtn, BUTTON_BI_UNPRESSED, GUI_YELLOW);
   \   0000005C   FF20A0E3           MOV      R2,#+255
   \   00000060   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   ........           BL       BUTTON_SetBkColor
    466          	BUTTON_SetTextColor(hWarningBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   000095E5           LDR      R0,[R5, #+0]
   \   0000007C   ........           BL       BUTTON_SetTextColor
    467          	sprintf(scratch, "%drpm", vehicleData.tach.upperYellowStart);
   \   00000080   ............       ADRL     R7,`?<Constant "%drpm">`
   \              ....        
   \   00000088   ........           LDR      R8,??DataTable120_8
   \   0000008C   0710A0E1           MOV      R1,R7
   \   00000090   202098E5           LDR      R2,[R8, #+32]
   \   00000094   10008DE2           ADD      R0,SP,#+16
   \   00000098   ........           BL       sprintf
    468          	BUTTON_SetText(hWarningBtn, scratch);
   \   0000009C   10108DE2           ADD      R1,SP,#+16
   \   000000A0   000095E5           LDR      R0,[R5, #+0]
   \   000000A4   ........           BL       BUTTON_SetText
    469          
    470          	hRedlineBtn = BUTTON_CreateEx(180, 50 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, REDLINE_BUTTON);
   \   000000A8   0700A0E3           MOV      R0,#+7
   \   000000AC   800E80E3           ORR      R0,R0,#0x800
   \   000000B0   0C008DE5           STR      R0,[SP, #+12]
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   08008DE5           STR      R0,[SP, #+8]
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
   \   000000C4   00408DE5           STR      R4,[SP, #+0]
   \   000000C8   4630A0E3           MOV      R3,#+70
   \   000000CC   7820A0E3           MOV      R2,#+120
   \   000000D0   0B10A0E1           MOV      R1,R11
   \   000000D4   B400A0E3           MOV      R0,#+180
   \   000000D8   ........           BL       BUTTON_CreateEx
   \   000000DC   040085E5           STR      R0,[R5, #+4]
    471          	BUTTON_SetFont(hRedlineBtn, &GUI_Font24B_ASCII);
   \   000000E0   0610A0E1           MOV      R1,R6
   \   000000E4   ........           BL       BUTTON_SetFont
    472          	BUTTON_SetBkColor(hRedlineBtn, BUTTON_BI_UNPRESSED, GUI_RED);
   \   000000E8   FF20A0E3           MOV      R2,#+255
   \   000000EC   0010A0E3           MOV      R1,#+0
   \   000000F0   040095E5           LDR      R0,[R5, #+4]
   \   000000F4   ........           BL       BUTTON_SetBkColor
    473          	BUTTON_SetTextColor(hRedlineBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   040095E5           LDR      R0,[R5, #+4]
   \   00000104   ........           BL       BUTTON_SetTextColor
    474          	sprintf(scratch, "%drpm", vehicleData.tach.upperRedStart);
   \   00000108   242098E5           LDR      R2,[R8, #+36]
   \   0000010C   0710A0E1           MOV      R1,R7
   \   00000110   10008DE2           ADD      R0,SP,#+16
   \   00000114   ........           BL       sprintf
    475          	BUTTON_SetText(hRedlineBtn, scratch);
   \   00000118   10108DE2           ADD      R1,SP,#+16
   \   0000011C   040095E5           LDR      R0,[R5, #+4]
   \   00000120   ........           BL       BUTTON_SetText
    476          
    477          	hCylBtn = BUTTON_CreateEx(330, 50 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, CYLINDERS_BUTTON);
   \   00000124   0800A0E3           MOV      R0,#+8
   \   00000128   800E80E3           ORR      R0,R0,#0x800
   \   0000012C   0C008DE5           STR      R0,[SP, #+12]
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   08008DE5           STR      R0,[SP, #+8]
   \   00000138   4A90A0E3           MOV      R9,#+74
   \   0000013C   0200A0E3           MOV      R0,#+2
   \   00000140   409F89E3           ORR      R9,R9,#0x100
   \   00000144   04008DE5           STR      R0,[SP, #+4]
   \   00000148   00408DE5           STR      R4,[SP, #+0]
   \   0000014C   4630A0E3           MOV      R3,#+70
   \   00000150   7820A0E3           MOV      R2,#+120
   \   00000154   0B10A0E1           MOV      R1,R11
   \   00000158   0900A0E1           MOV      R0,R9
   \   0000015C   ........           BL       BUTTON_CreateEx
   \   00000160   080085E5           STR      R0,[R5, #+8]
    478          	BUTTON_SetFont(hCylBtn, &GUI_Font24B_ASCII);
   \   00000164   0610A0E1           MOV      R1,R6
   \   00000168   ........           BL       BUTTON_SetFont
    479          	BUTTON_SetBkColor(hCylBtn, BUTTON_BI_UNPRESSED, GUI_ORANGE);
   \   0000016C   FF20A0E3           MOV      R2,#+255
   \   00000170   802C82E3           ORR      R2,R2,#0x8000
   \   00000174   0010A0E3           MOV      R1,#+0
   \   00000178   080095E5           LDR      R0,[R5, #+8]
   \   0000017C   ........           BL       BUTTON_SetBkColor
    480          	BUTTON_SetTextColor(hCylBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   080095E5           LDR      R0,[R5, #+8]
   \   0000018C   ........           BL       BUTTON_SetTextColor
    481          	BUTTON_SetText(hCylBtn, GetCylindersText());
   \   00000190   ........           BL       GetCylindersText
   \   00000194   0010A0E1           MOV      R1,R0
   \   00000198   080095E5           LDR      R0,[R5, #+8]
   \   0000019C   ........           BL       BUTTON_SetText
    482          
    483          	hStartBtn = BUTTON_CreateEx(30, 160 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, START_BUTTON);
   \   000001A0   0900A0E3           MOV      R0,#+9
   \   000001A4   800E80E3           ORR      R0,R0,#0x800
   \   000001A8   0C008DE5           STR      R0,[SP, #+12]
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   08008DE5           STR      R0,[SP, #+8]
   \   000001B4   0200A0E3           MOV      R0,#+2
   \   000001B8   A0A08AE2           ADD      R10,R10,#+160
   \   000001BC   04008DE5           STR      R0,[SP, #+4]
   \   000001C0   00408DE5           STR      R4,[SP, #+0]
   \   000001C4   4630A0E3           MOV      R3,#+70
   \   000001C8   7820A0E3           MOV      R2,#+120
   \   000001CC   0A10A0E1           MOV      R1,R10
   \   000001D0   1E00A0E3           MOV      R0,#+30
   \   000001D4   ........           BL       BUTTON_CreateEx
   \   000001D8   0C0085E5           STR      R0,[R5, #+12]
    484          	BUTTON_SetFont(hStartBtn, &GUI_Font24B_ASCII);
   \   000001DC   0610A0E1           MOV      R1,R6
   \   000001E0   ........           BL       BUTTON_SetFont
    485          	BUTTON_SetBkColor(hStartBtn, BUTTON_BI_UNPRESSED, GUI_GREEN);
   \   000001E4   FF2CA0E3           MOV      R2,#+65280
   \   000001E8   0010A0E3           MOV      R1,#+0
   \   000001EC   0C0095E5           LDR      R0,[R5, #+12]
   \   000001F0   ........           BL       BUTTON_SetBkColor
    486          	BUTTON_SetTextColor(hStartBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0010A0E3           MOV      R1,#+0
   \   000001FC   0C0095E5           LDR      R0,[R5, #+12]
   \   00000200   ........           BL       BUTTON_SetTextColor
    487          	sprintf(scratch, "%drpm", vehicleData.tach.greenStart);
   \   00000204   182098E5           LDR      R2,[R8, #+24]
   \   00000208   0710A0E1           MOV      R1,R7
   \   0000020C   10008DE2           ADD      R0,SP,#+16
   \   00000210   ........           BL       sprintf
    488          	BUTTON_SetText(hStartBtn, scratch);
   \   00000214   10108DE2           ADD      R1,SP,#+16
   \   00000218   0C0095E5           LDR      R0,[R5, #+12]
   \   0000021C   ........           BL       BUTTON_SetText
    489          
    490          	hPeakBtn = BUTTON_CreateEx(180, 160 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, PEAK_BUTTON);
   \   00000220   6C0E89E2           ADD      R0,R9,#+1728
   \   00000224   0C008DE5           STR      R0,[SP, #+12]
   \   00000228   0000A0E3           MOV      R0,#+0
   \   0000022C   08008DE5           STR      R0,[SP, #+8]
   \   00000230   0200A0E3           MOV      R0,#+2
   \   00000234   04008DE5           STR      R0,[SP, #+4]
   \   00000238   00408DE5           STR      R4,[SP, #+0]
   \   0000023C   4630A0E3           MOV      R3,#+70
   \   00000240   7820A0E3           MOV      R2,#+120
   \   00000244   0A10A0E1           MOV      R1,R10
   \   00000248   B400A0E3           MOV      R0,#+180
   \   0000024C   ........           BL       BUTTON_CreateEx
   \   00000250   100085E5           STR      R0,[R5, #+16]
    491          	BUTTON_SetFont(hPeakBtn, &GUI_Font24B_ASCII);
   \   00000254   0610A0E1           MOV      R1,R6
   \   00000258   ........           BL       BUTTON_SetFont
    492          	BUTTON_SetBkColor(hPeakBtn, BUTTON_BI_UNPRESSED, GUI_BLUE);
   \   0000025C   FF28A0E3           MOV      R2,#+16711680
   \   00000260   0010A0E3           MOV      R1,#+0
   \   00000264   100095E5           LDR      R0,[R5, #+16]
   \   00000268   ........           BL       BUTTON_SetBkColor
    493          	BUTTON_SetTextColor(hPeakBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0010A0E3           MOV      R1,#+0
   \   00000274   100095E5           LDR      R0,[R5, #+16]
   \   00000278   ........           BL       BUTTON_SetTextColor
    494          	sprintf(scratch, "%drpm", vehicleData.tach.scaleEnd);
   \   0000027C   142098E5           LDR      R2,[R8, #+20]
   \   00000280   0710A0E1           MOV      R1,R7
   \   00000284   10008DE2           ADD      R0,SP,#+16
   \   00000288   ........           BL       sprintf
    495          	BUTTON_SetText(hPeakBtn, scratch);
   \   0000028C   10108DE2           ADD      R1,SP,#+16
   \   00000290   100095E5           LDR      R0,[R5, #+16]
   \   00000294   ........           BL       BUTTON_SetText
    496          
    497          	hLapBtn = BUTTON_CreateEx(330, 160 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, LAP_BUTTON);
   \   00000298   0B00A0E3           MOV      R0,#+11
   \   0000029C   800E80E3           ORR      R0,R0,#0x800
   \   000002A0   0C008DE5           STR      R0,[SP, #+12]
   \   000002A4   0000A0E3           MOV      R0,#+0
   \   000002A8   08008DE5           STR      R0,[SP, #+8]
   \   000002AC   0200A0E3           MOV      R0,#+2
   \   000002B0   04008DE5           STR      R0,[SP, #+4]
   \   000002B4   00408DE5           STR      R4,[SP, #+0]
   \   000002B8   4630A0E3           MOV      R3,#+70
   \   000002BC   7820A0E3           MOV      R2,#+120
   \   000002C0   0A10A0E1           MOV      R1,R10
   \   000002C4   0900A0E1           MOV      R0,R9
   \   000002C8   ........           BL       BUTTON_CreateEx
   \   000002CC   140085E5           STR      R0,[R5, #+20]
    498          	BUTTON_SetFont(hLapBtn, &GUI_Font24B_ASCII);
   \   000002D0   0610A0E1           MOV      R1,R6
   \   000002D4   ........           BL       BUTTON_SetFont
    499          	BUTTON_SetBkColor(hLapBtn, BUTTON_BI_UNPRESSED, GUI_WHITE);
   \   000002D8   FF24E0E3           MVN      R2,#-16777216
   \   000002DC   0010A0E3           MOV      R1,#+0
   \   000002E0   140095E5           LDR      R0,[R5, #+20]
   \   000002E4   ........           BL       BUTTON_SetBkColor
    500          	BUTTON_SetTextColor(hLapBtn, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0010A0E3           MOV      R1,#+0
   \   000002F0   140095E5           LDR      R0,[R5, #+20]
   \   000002F4   ........           BL       BUTTON_SetTextColor
    501          	BUTTON_SetText(hLapBtn, GetLapMeterText());
   \   000002F8   ........           BL       GetLapMeterText
   \   000002FC   0010A0E1           MOV      R1,R0
   \   00000300   140095E5           LDR      R0,[R5, #+20]
   \   00000304   ........           BL       BUTTON_SetText
    502          }
   \   00000308   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   0000030C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    503          
    504          ////char *LapHoldTimes[] = {		// to go to new TrackSettingsScreen
    505          ////	"0 sec",   "10 sec",  "20 sec",  "30 sec",  "40 sec",  "50 sec",  "60 sec",
    506          ////	"70 sec",  "80 sec",  "90 sec",  "100 sec", "110 sec", "120 sec",
    507          ////	"130 sec", "140 sec", "150 sec", "160 sec", "170 sec", "180 sec",
    508          ////	NULL
    509          ////};
    510          ////
    511          ////void DisplayHoldtimeSelection(int pixelOffset, WM_HWIN hParent)
    512          ////{
    513          ////	DisplayStdListScreen(pixelOffset, hParent, LapHoldTimes, LAP_HOLD_LIST, &hHoldTimeListWheel,
    514          ////		"Screen Hold Time", &hHoldTimeSelectionBtn, LAPHOLD_TIME_BUTTON, NO_BUTTON, 0, sysData.laptimeHold / 10);
    515          ////}
    516          
    517          //char *LaunchForce[] = {
    518          //	"0.1 Gs",
    519          //	"0.2 Gs",
    520          //	"0.3 Gs",
    521          //	"0.4 Gs",
    522          //	"0.5 Gs",
    523          //	"0.6 Gs",
    524          //	"0.7 Gs",
    525          //	"0.8 Gs",
    526          //	"0.9 Gs",
    527          //	"1.0 Gs",
    528          //	NULL
    529          //};
    530          //
    531          //void DisplayLaunchSelection(int pixelOffset, WM_HWIN hParent)
    532          //{
    533          //	DisplayStdListScreen(pixelOffset, hParent, LaunchForce, LAUNCH_G_LIST, &hLaunchListWheel,
    534          //			"G-Force", &hLaunchSelectionBtn, LAUNCH_G_FORCE_BUTTON, 0, NULL, 0);
    535          //}
    536          //

   \                                 In section .text, align 4, keep-with-next
    537          void RSDisplayInputsSelection(int pixelOffset, WM_HWIN hParent)
    538          {
   \                     RSDisplayInputsSelection:
   \   00000000   00402DE9           PUSH     {LR}
    539          	DisplayInputsSelection(pixelOffset, hParent, ANALOG0_BUTTON, ANALOG1_BUTTON, DIGITAL4_BUTTON, ANALOG2_BUTTON, ANALOG3_BUTTON, DIGITAL5_BUTTON);
   \   00000004   1120A0E3           MOV      R2,#+17
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   802E82E3           ORR      R2,R2,#0x800
   \   00000010   0C208DE5           STR      R2,[SP, #+12]
   \   00000014   022042E2           SUB      R2,R2,#+2
   \   00000018   08208DE5           STR      R2,[SP, #+8]
   \   0000001C   0120C2E3           BIC      R2,R2,#0x1
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   \   00000024   812EA0E3           MOV      R2,#+2064
   \   00000028   00208DE5           STR      R2,[SP, #+0]
   \   0000002C   033042E2           SUB      R3,R2,#+3
   \   00000030   042042E2           SUB      R2,R2,#+4
   \   00000034   ........           BL       DisplayInputsSelection
    540          }
   \   00000038   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    541          

   \                                 In section .text, align 4, keep-with-next
    542          void DisplayInputsSelection(int pixelOffset, WM_HWIN hParent, int idA0, int idA1, int idD4, int idA2, int idA3, int idD5)
    543          {
   \                     DisplayInputsSelection:
   \   00000000   F94F2DE9           PUSH     {R0,R3-R11,LR}
    544          //	char scratch[10];
    545          
    546          	hAnalog0 = BUTTON_CreateEx(36, 45 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idA0);
   \   00000004   2D8080E2           ADD      R8,R0,#+45
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   08008DE5           STR      R0,[SP, #+8]
   \   00000014   0200A0E3           MOV      R0,#+2
   \   00000018   0140A0E1           MOV      R4,R1
   \   0000001C   0C208DE5           STR      R2,[SP, #+12]
   \   00000020   04008DE5           STR      R0,[SP, #+4]
   \   00000024   44509DE5           LDR      R5,[SP, #+68]
   \   00000028   48609DE5           LDR      R6,[SP, #+72]
   \   0000002C   4C709DE5           LDR      R7,[SP, #+76]
   \   00000030   00408DE5           STR      R4,[SP, #+0]
   \   00000034   4E30A0E3           MOV      R3,#+78
   \   00000038   7920A0E3           MOV      R2,#+121
   \   0000003C   0810A0E1           MOV      R1,R8
   \   00000040   2400A0E3           MOV      R0,#+36
   \   00000044   ........           BL       BUTTON_CreateEx
   \   00000048   ........           LDR      R9,??DataTable120_9
    547          	BUTTON_SetBitmap(hAnalog0, BUTTON_BI_UNPRESSED, &bmBrownInputButton);
   \   0000004C   ........           LDR      R10,??DataTable120_10
   \   00000050   000089E5           STR      R0,[R9, #+0]
   \   00000054   0A20A0E1           MOV      R2,R10
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   ........           BL       BUTTON_SetBitmap
    548          	BUTTON_SetFont(hAnalog0, &GUI_Font24B_ASCII);
   \   00000060   ........           LDR      R11,??DataTable120_7
   \   00000064   000099E5           LDR      R0,[R9, #+0]
   \   00000068   0B10A0E1           MOV      R1,R11
   \   0000006C   ........           BL       BUTTON_SetFont
    549          	BUTTON_SetTextColor(hAnalog0, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   000099E5           LDR      R0,[R9, #+0]
   \   0000007C   ........           BL       BUTTON_SetTextColor
    550          	BUTTON_SetText(hAnalog0, "5.3 volts");
   \   00000080   ............       ADRL     R1,`?<Constant "5.3 volts">`
   \              ....        
   \   00000088   000099E5           LDR      R0,[R9, #+0]
   \   0000008C   ........           BL       BUTTON_SetText
    551          
    552          	hAnalog1 = BUTTON_CreateEx(180, 45 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idA1);
   \   00000090   18009DE5           LDR      R0,[SP, #+24]
   \   00000094   00408DE5           STR      R4,[SP, #+0]
   \   00000098   0C008DE5           STR      R0,[SP, #+12]
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   08008DE5           STR      R0,[SP, #+8]
   \   000000A4   0200A0E3           MOV      R0,#+2
   \   000000A8   04008DE5           STR      R0,[SP, #+4]
   \   000000AC   4E30A0E3           MOV      R3,#+78
   \   000000B0   7920A0E3           MOV      R2,#+121
   \   000000B4   0810A0E1           MOV      R1,R8
   \   000000B8   B400A0E3           MOV      R0,#+180
   \   000000BC   ........           BL       BUTTON_CreateEx
   \   000000C0   040089E5           STR      R0,[R9, #+4]
    553          	BUTTON_SetBitmap(hAnalog1, BUTTON_BI_UNPRESSED, &bmBrownInputButton);
   \   000000C4   0A20A0E1           MOV      R2,R10
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   ........           BL       BUTTON_SetBitmap
    554          	BUTTON_SetFont(hAnalog1, &GUI_Font24B_ASCII);
   \   000000D0   0B10A0E1           MOV      R1,R11
   \   000000D4   040099E5           LDR      R0,[R9, #+4]
   \   000000D8   ........           BL       BUTTON_SetFont
    555          	BUTTON_SetTextColor(hAnalog1, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   040099E5           LDR      R0,[R9, #+4]
   \   000000E8   ........           BL       BUTTON_SetTextColor
    556          	BUTTON_SetText(hAnalog1, "2.3 volts");
   \   000000EC   ............       ADRL     R1,`?<Constant "2.3 volts">`
   \              ....        
   \   000000F4   040099E5           LDR      R0,[R9, #+4]
   \   000000F8   ........           BL       BUTTON_SetText
    557          
    558          	hDigital4 = BUTTON_CreateEx(324, 45 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idD4);
   \   000000FC   40009DE5           LDR      R0,[SP, #+64]
   \   00000100   00408DE5           STR      R4,[SP, #+0]
   \   00000104   0C008DE5           STR      R0,[SP, #+12]
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   08008DE5           STR      R0,[SP, #+8]
   \   00000110   0200A0E3           MOV      R0,#+2
   \   00000114   04008DE5           STR      R0,[SP, #+4]
   \   00000118   4E30A0E3           MOV      R3,#+78
   \   0000011C   7920A0E3           MOV      R2,#+121
   \   00000120   0810A0E1           MOV      R1,R8
   \   00000124   510FA0E3           MOV      R0,#+324
   \   00000128   ........           BL       BUTTON_CreateEx
   \   0000012C   100089E5           STR      R0,[R9, #+16]
    559          	BUTTON_SetBitmap(hDigital4, BUTTON_BI_UNPRESSED, &bmGreenInputButton);
   \   00000130   ........           LDR      R2,??DataTable120_11
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   ........           BL       BUTTON_SetBitmap
    560          	BUTTON_SetFont(hDigital4, &GUI_Font24B_ASCII);
   \   0000013C   0B10A0E1           MOV      R1,R11
   \   00000140   100099E5           LDR      R0,[R9, #+16]
   \   00000144   ........           BL       BUTTON_SetFont
    561          	BUTTON_SetTextColor(hDigital4, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0010A0E3           MOV      R1,#+0
   \   00000150   100099E5           LDR      R0,[R9, #+16]
   \   00000154   ........           BL       BUTTON_SetTextColor
    562          	BUTTON_SetText(hDigital4, "On");
   \   00000158   ........           ADR      R1,??DataTable116  ;; 0x4F, 0x6E, 0x00, 0x00
   \   0000015C   100099E5           LDR      R0,[R9, #+16]
   \   00000160   ........           BL       BUTTON_SetText
    563          
    564          	hAnalog2 = BUTTON_CreateEx(36, 155 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idA2);
   \   00000164   14009DE5           LDR      R0,[SP, #+20]
   \   00000168   0C508DE5           STR      R5,[SP, #+12]
   \   0000016C   9B8080E2           ADD      R8,R0,#+155
   \   00000170   0000A0E3           MOV      R0,#+0
   \   00000174   08008DE5           STR      R0,[SP, #+8]
   \   00000178   0200A0E3           MOV      R0,#+2
   \   0000017C   04008DE5           STR      R0,[SP, #+4]
   \   00000180   00408DE5           STR      R4,[SP, #+0]
   \   00000184   4E30A0E3           MOV      R3,#+78
   \   00000188   7920A0E3           MOV      R2,#+121
   \   0000018C   0810A0E1           MOV      R1,R8
   \   00000190   2400A0E3           MOV      R0,#+36
   \   00000194   ........           BL       BUTTON_CreateEx
   \   00000198   080089E5           STR      R0,[R9, #+8]
    565          	BUTTON_SetBitmap(hAnalog2, BUTTON_BI_UNPRESSED, &bmBrownInputButton);
   \   0000019C   0A20A0E1           MOV      R2,R10
   \   000001A0   0010A0E3           MOV      R1,#+0
   \   000001A4   ........           BL       BUTTON_SetBitmap
    566          	BUTTON_SetFont(hAnalog2, &GUI_Font24B_ASCII);
   \   000001A8   0B10A0E1           MOV      R1,R11
   \   000001AC   080099E5           LDR      R0,[R9, #+8]
   \   000001B0   ........           BL       BUTTON_SetFont
    567          	BUTTON_SetTextColor(hAnalog2, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   080099E5           LDR      R0,[R9, #+8]
   \   000001C0   ........           BL       BUTTON_SetTextColor
    568          	BUTTON_SetText(hAnalog2, "9.1 volts");
   \   000001C4   ............       ADRL     R1,`?<Constant "9.1 volts">`
   \              ....        
   \   000001CC   080099E5           LDR      R0,[R9, #+8]
   \   000001D0   ........           BL       BUTTON_SetText
    569          
    570          	hAnalog3 = BUTTON_CreateEx(180, 155 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idA3);
   \   000001D4   0000A0E3           MOV      R0,#+0
   \   000001D8   08008DE5           STR      R0,[SP, #+8]
   \   000001DC   0200A0E3           MOV      R0,#+2
   \   000001E0   04008DE5           STR      R0,[SP, #+4]
   \   000001E4   0C608DE5           STR      R6,[SP, #+12]
   \   000001E8   00408DE5           STR      R4,[SP, #+0]
   \   000001EC   4E30A0E3           MOV      R3,#+78
   \   000001F0   7920A0E3           MOV      R2,#+121
   \   000001F4   0810A0E1           MOV      R1,R8
   \   000001F8   B400A0E3           MOV      R0,#+180
   \   000001FC   ........           BL       BUTTON_CreateEx
   \   00000200   0C0089E5           STR      R0,[R9, #+12]
    571          	BUTTON_SetBitmap(hAnalog3, BUTTON_BI_UNPRESSED, &bmBrownInputButton);
   \   00000204   0A20A0E1           MOV      R2,R10
   \   00000208   0010A0E3           MOV      R1,#+0
   \   0000020C   ........           BL       BUTTON_SetBitmap
    572          	BUTTON_SetFont(hAnalog3, &GUI_Font24B_ASCII);
   \   00000210   0B10A0E1           MOV      R1,R11
   \   00000214   0C0099E5           LDR      R0,[R9, #+12]
   \   00000218   ........           BL       BUTTON_SetFont
    573          	BUTTON_SetTextColor(hAnalog3, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   0C0099E5           LDR      R0,[R9, #+12]
   \   00000228   ........           BL       BUTTON_SetTextColor
    574          	BUTTON_SetText(hAnalog3, "12 volts");
   \   0000022C   ............       ADRL     R1,`?<Constant "12 volts">`
   \              ....        
   \   00000234   0C0099E5           LDR      R0,[R9, #+12]
   \   00000238   ........           BL       BUTTON_SetText
    575          
    576          	hDigital5 = BUTTON_CreateEx(324, 155 + pixelOffset, 121, 78, hParent, WM_CF_SHOW, 0, idD5);
   \   0000023C   0000A0E3           MOV      R0,#+0
   \   00000240   08008DE5           STR      R0,[SP, #+8]
   \   00000244   0200A0E3           MOV      R0,#+2
   \   00000248   04008DE5           STR      R0,[SP, #+4]
   \   0000024C   0C708DE5           STR      R7,[SP, #+12]
   \   00000250   00408DE5           STR      R4,[SP, #+0]
   \   00000254   4E30A0E3           MOV      R3,#+78
   \   00000258   7920A0E3           MOV      R2,#+121
   \   0000025C   0810A0E1           MOV      R1,R8
   \   00000260   510FA0E3           MOV      R0,#+324
   \   00000264   ........           BL       BUTTON_CreateEx
   \   00000268   140089E5           STR      R0,[R9, #+20]
    577          	BUTTON_SetBitmap(hDigital5, BUTTON_BI_UNPRESSED, &bmRedInputButton);
   \   0000026C   ........           LDR      R2,??DataTable120_12
   \   00000270   0010A0E3           MOV      R1,#+0
   \   00000274   ........           BL       BUTTON_SetBitmap
    578          	BUTTON_SetFont(hDigital5, &GUI_Font24B_ASCII);
   \   00000278   0B10A0E1           MOV      R1,R11
   \   0000027C   140099E5           LDR      R0,[R9, #+20]
   \   00000280   ........           BL       BUTTON_SetFont
    579          	BUTTON_SetTextColor(hDigital5, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   140099E5           LDR      R0,[R9, #+20]
   \   00000290   ........           BL       BUTTON_SetTextColor
    580          	BUTTON_SetText(hDigital5, "Off");
   \   00000294   140099E5           LDR      R0,[R9, #+20]
   \   00000298   1CD08DE2           ADD      SP,SP,#+28
   \   0000029C   F04FBDE8           POP      {R4-R11,LR}
   \   000002A0   ........           ADR      R1,??DataTable119  ;; "Off"
   \   000002A4   ........           B        BUTTON_SetText   ;; tailcall
    581          }
    582          
    583          
    584          //void DisplayDrivemodeSelection(int pixelOffset, WM_HWIN hParent)
    585          //{
    586          //	BUTTON_Handle hBtn;
    587          //
    588          //	hBtn = BUTTON_CreateEx(155,  43 + pixelOffset, 300, 100, hParent, WM_CF_SHOW, 0, SHOW_RPM);
    589          //	BUTTON_SetBkColor(hBtn, BUTTON_CI_UNPRESSED, GUI_WHITE);
    590          //	BUTTON_SetFont(hBtn, &GUI_Font32B_ASCII);
    591          //	BUTTON_SetTextColor(hBtn, BUTTON_CI_UNPRESSED, GUI_BLACK);
    592          //	BUTTON_SetTextColor(hBtn, BUTTON_CI_PRESSED, GUI_RED);
    593          //	BUTTON_SetTextAlign(hBtn, GUI_TA_LEFT | GUI_TA_VCENTER);
    594          //	BUTTON_SetText(hBtn, "  Show RPM");
    595          //
    596          //	hBtn = BUTTON_CreateEx(155,  149 + pixelOffset, 300, 100, hParent, WM_CF_SHOW, 0, SHOW_SPEED);
    597          //	BUTTON_SetBkColor(hBtn, BUTTON_CI_UNPRESSED, GUI_WHITE);
    598          //	BUTTON_SetFont(hBtn, &GUI_Font32B_ASCII);
    599          //	BUTTON_SetTextColor(hBtn, BUTTON_CI_UNPRESSED, GUI_BLACK);
    600          //	BUTTON_SetTextColor(hBtn, BUTTON_CI_PRESSED, GUI_RED);
    601          //	BUTTON_SetTextAlign(hBtn, GUI_TA_LEFT | GUI_TA_VCENTER);
    602          //	BUTTON_SetText(hBtn, "  Show Speed");
    603          //
    604          //	hShowRPMCheck = BUTTON_CreateEx(30,  43 + pixelOffset, 115, 100, hParent, WM_CF_SHOW, 0, SHOW_RPM);
    605          //	BUTTON_SetBkColor(hShowRPMCheck, BUTTON_CI_UNPRESSED, GUI_WHITE);
    606          //	hShowSpeedCheck = BUTTON_CreateEx(30,  149 + pixelOffset, 115, 100, hParent, WM_CF_SHOW, 0, SHOW_SPEED);
    607          //	BUTTON_SetBkColor(hShowSpeedCheck, BUTTON_CI_UNPRESSED, GUI_WHITE);
    608          //
    609          //	//if (sysData.units == STD)
    610          //	//	BUTTON_SetBitmapEx(hStdCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
    611          //	//else BUTTON_SetBitmapEx(hMetricCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
    612          //	BUTTON_SetBitmapEx(hShowRPMCheck, BUTTON_CI_UNPRESSED, &bmGreenCheck, 15, 15);
    613          //}
    614          

   \                                 In section .text, align 4, keep-with-next
    615          void DisplayGearRatio(int pixelOffset, WM_HWIN hParent)
    616          {
   \                     DisplayGearRatio:
   \   00000000   10402DE9           PUSH     {R4,LR}
    617          	BUTTON_Handle hButton;
    618          
    619          	hButton = BUTTON_CreateEx(30, 50 + pixelOffset, 120, 70, hParent, WM_CF_SHOW, 0, WARNING_BUTTON);
   \   00000004   0620A0E3           MOV      R2,#+6
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   802E82E3           ORR      R2,R2,#0x800
   \   00000010   0C208DE5           STR      R2,[SP, #+12]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   08208DE5           STR      R2,[SP, #+8]
   \   0000001C   0220A0E3           MOV      R2,#+2
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   04208DE5           STR      R2,[SP, #+4]
   \   00000028   321080E2           ADD      R1,R0,#+50
   \   0000002C   4630A0E3           MOV      R3,#+70
   \   00000030   7820A0E3           MOV      R2,#+120
   \   00000034   1E00A0E3           MOV      R0,#+30
   \   00000038   ........           BL       BUTTON_CreateEx
   \   0000003C   0040A0E1           MOV      R4,R0
    620          	BUTTON_SetFont(hButton, &GUI_Font24B_ASCII);
   \   00000040   ........           LDR      R1,??DataTable120_7
   \   00000044   ........           BL       BUTTON_SetFont
    621          	BUTTON_SetBkColor(hButton, BUTTON_BI_UNPRESSED, GUI_YELLOW);
   \   00000048   FF20A0E3           MOV      R2,#+255
   \   0000004C   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       BUTTON_SetBkColor
    622          	BUTTON_SetTextColor(hButton, BUTTON_BI_UNPRESSED, GUI_BLACK);
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       BUTTON_SetTextColor
    623          	BUTTON_SetText(hButton, "Gear Ratio");
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   10D08DE2           ADD      SP,SP,#+16
   \   00000074   1040BDE8           POP      {R4,LR}
   \   00000078   ............       ADRL     R1,`?<Constant "Gear Ratio">`
   \              ....        
   \   00000080   ........           B        BUTTON_SetText   ;; tailcall
    624          
    625          }
    626          

   \                                 In section .text, align 4, keep-with-next
    627          void GearRatioPaint(int pixelOffset, WM_HWIN hParent)
    628          {
   \                     GearRatioPaint:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    629          	GUI_DrawBitmap(&bmBackground, 0, pixelOffset);
   \   00000008   0420A0E1           MOV      R2,R4
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable120_13
   \   00000014   ........           BL       GUI_DrawBitmap
    630          //	GUI_DrawBitmap(&bmCameraText, 60, pixelOffset + 1);
    631          	GUI_DrawBitmap(GetNavigationArrow(GEARRATIO_SELECTION), 3, pixelOffset + 238);
   \   00000018   EE2084E2           ADD      R2,R4,#+238
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   0310A0E3           MOV      R1,#+3
   \   00000024   ........           LDR      R0,??DataTable120_14
   \   00000028   ........           B        GUI_DrawBitmap   ;; tailcall
    632          }
    633          
    634          

   \                                 In section .text, align 4, keep-with-next
    635          void InputsSelectionPaint(int pixelOffset, WM_HWIN hParent)
    636          {
   \                     InputsSelectionPaint:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   10D04DE2           SUB      SP,SP,#+16
    637          	GUI_RECT Rect;
    638          
    639          	GUI_DrawBitmap(&bmInputsBackground, 0, pixelOffset);
   \   0000000C   0420A0E1           MOV      R2,R4
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           LDR      R0,??DataTable120_15
   \   00000018   ........           BL       GUI_DrawBitmap
    640          	GUI_DrawBitmap(&bmInputText, 60, pixelOffset + 1);
   \   0000001C   012084E2           ADD      R2,R4,#+1
   \   00000020   3C10A0E3           MOV      R1,#+60
   \   00000024   ........           LDR      R0,??DataTable120_16
   \   00000028   ........           BL       GUI_DrawBitmap
    641          
    642          	Rect.x0 = 3;
   \   0000002C   0310A0E3           MOV      R1,#+3
   \   00000030   B410CDE1           STRH     R1,[SP, #+4]
    643          	Rect.y0 = pixelOffset;
    644          	Rect.x1 = 23;
   \   00000034   1710A0E3           MOV      R1,#+23
    645          	Rect.y1 = YSIZE_PHYS + pixelOffset;
   \   00000038   445F84E2           ADD      R5,R4,#+272
   \   0000003C   B640CDE1           STRH     R4,[SP, #+6]
   \   00000040   B810CDE1           STRH     R1,[SP, #+8]
   \   00000044   BA50CDE1           STRH     R5,[SP, #+10]
    646          	GUI_SetFont(&GUI_Font20B_ASCII);
   \   00000048   ........           LDR      R0,??DataTable120_17
   \   0000004C   ........           BL       GUI_SetFont
    647          	GUI_SetColor(GUI_RED);
   \   00000050   FF00A0E3           MOV      R0,#+255
   \   00000054   ........           BL       GUI_SetColor
    648          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000058   0200A0E3           MOV      R0,#+2
   \   0000005C   ........           BL       GUI_SetTextMode
    649          	GUI_DispStringInRectEx("ANALOG",
    650          		&Rect,
    651          		GUI_TA_HCENTER,
    652          		6,
    653          		GUI_ROTATE_CCW);
   \   00000060   ........           LDR      R6,??DataTable120_18
   \   00000064   0630A0E3           MOV      R3,#+6
   \   00000068   00608DE5           STR      R6,[SP, #+0]
   \   0000006C   0220A0E3           MOV      R2,#+2
   \   00000070   04108DE2           ADD      R1,SP,#+4
   \   00000074   ............       ADRL     R0,`?<Constant "ANALOG">`
   \              ....        
   \   0000007C   ........           BL       GUI_DispStringInRectEx
    654          
    655          	Rect.x0 = XSIZE_PHYS - 23;
   \   00000080   C910A0E3           MOV      R1,#+201
   \   00000084   401F81E3           ORR      R1,R1,#0x100
   \   00000088   B410CDE1           STRH     R1,[SP, #+4]
    656          	Rect.y0 = pixelOffset;
    657          	Rect.x1 = XSIZE_PHYS - 3;
   \   0000008C   141081E3           ORR      R1,R1,#0x14
   \   00000090   B640CDE1           STRH     R4,[SP, #+6]
   \   00000094   B810CDE1           STRH     R1,[SP, #+8]
    658          	Rect.y1 = YSIZE_PHYS + pixelOffset;
   \   00000098   BA50CDE1           STRH     R5,[SP, #+10]
    659          	GUI_SetColor(GUI_GREEN);
   \   0000009C   FF0CA0E3           MOV      R0,#+65280
   \   000000A0   ........           BL       GUI_SetColor
    660          	GUI_DispStringInRectEx("DIGITAL",
    661          		&Rect,
    662          		GUI_TA_HCENTER,
    663          		20,
    664          		GUI_ROTATE_CCW);
   \   000000A4   00608DE5           STR      R6,[SP, #+0]
   \   000000A8   1430A0E3           MOV      R3,#+20
   \   000000AC   0220A0E3           MOV      R2,#+2
   \   000000B0   04108DE2           ADD      R1,SP,#+4
   \   000000B4   ............       ADRL     R0,`?<Constant "DIGITAL">`
   \              ....        
   \   000000BC   ........           BL       GUI_DispStringInRectEx
    665          
    666          
    667          	GUI_SetColor(GUI_BLACK);					// Draw shadow text due to light background
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   ........           BL       GUI_SetColor
    668          	GUI_SetFont(&GUI_Font24B_ASCII);
   \   000000C8   ........           LDR      R0,??DataTable120_7
   \   000000CC   ........           BL       GUI_SetFont
    669          	//GUI_DispStringHCenterAt("Analog0", 98, 127 + pixelOffset);
    670          	//GUI_DispStringHCenterAt("Analog1", 242, 127 + pixelOffset);
    671          	//GUI_DispStringHCenterAt("Digital4", 386, 127 + pixelOffset);
    672          	GUI_DispStringHCenterAt("Analog0", 98, 127 + pixelOffset);
   \   000000D0   ............       ADRL     R6,`?<Constant "Analog0">`
   \              ....        
   \   000000D8   7F5084E2           ADD      R5,R4,#+127
   \   000000DC   0520A0E1           MOV      R2,R5
   \   000000E0   6210A0E3           MOV      R1,#+98
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   ........           BL       GUI_DispStringHCenterAt
    673          	GUI_DispStringHCenterAt("Analog1", 242, 127 + pixelOffset);
   \   000000EC   ............       ADRL     R7,`?<Constant "Analog1">`
   \              ....        
   \   000000F4   0520A0E1           MOV      R2,R5
   \   000000F8   F210A0E3           MOV      R1,#+242
   \   000000FC   0700A0E1           MOV      R0,R7
   \   00000100   ........           BL       GUI_DispStringHCenterAt
    674          	GUI_DispStringHCenterAt("Digital4", 386, 127 + pixelOffset);
   \   00000104   ............       ADRL     R8,`?<Constant "Digital4">`
   \              ....        
   \   0000010C   8210A0E3           MOV      R1,#+130
   \   00000110   0520A0E1           MOV      R2,R5
   \   00000114   401F81E3           ORR      R1,R1,#0x100
   \   00000118   0800A0E1           MOV      R0,R8
   \   0000011C   ........           BL       GUI_DispStringHCenterAt
    675          
    676          	GUI_SetColor(GUI_WHITE);
   \   00000120   FF04E0E3           MVN      R0,#-16777216
   \   00000124   ........           BL       GUI_SetColor
    677          //	GUI_SetFont(&GUI_Font24B_ASCII);
    678          //	GUI_SetTextMode(GUI_TM_TRANS);
    679          	GUI_DispStringHCenterAt("Analog0", 96, 125 + pixelOffset);
   \   00000128   7D5084E2           ADD      R5,R4,#+125
   \   0000012C   0520A0E1           MOV      R2,R5
   \   00000130   6010A0E3           MOV      R1,#+96
   \   00000134   0600A0E1           MOV      R0,R6
   \   00000138   ........           BL       GUI_DispStringHCenterAt
    680          	GUI_DispStringHCenterAt("Analog1", 240, 125 + pixelOffset);
   \   0000013C   0520A0E1           MOV      R2,R5
   \   00000140   F010A0E3           MOV      R1,#+240
   \   00000144   0700A0E1           MOV      R0,R7
   \   00000148   ........           BL       GUI_DispStringHCenterAt
    681          	GUI_DispStringHCenterAt("Digital4", 384, 125 + pixelOffset);
   \   0000014C   0520A0E1           MOV      R2,R5
   \   00000150   601FA0E3           MOV      R1,#+384
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   ........           BL       GUI_DispStringHCenterAt
    682          	GUI_DispStringHCenterAt("Analog2", 96, 235 + pixelOffset);
   \   0000015C   EB5084E2           ADD      R5,R4,#+235
   \   00000160   0520A0E1           MOV      R2,R5
   \   00000164   6010A0E3           MOV      R1,#+96
   \   00000168   ............       ADRL     R0,`?<Constant "Analog2">`
   \              ....        
   \   00000170   ........           BL       GUI_DispStringHCenterAt
    683          	GUI_DispStringHCenterAt("Analog3", 240, 235 + pixelOffset);
   \   00000174   0520A0E1           MOV      R2,R5
   \   00000178   F010A0E3           MOV      R1,#+240
   \   0000017C   ............       ADRL     R0,`?<Constant "Analog3">`
   \              ....        
   \   00000184   ........           BL       GUI_DispStringHCenterAt
    684          	GUI_DispStringHCenterAt("Digital5", 384, 235 + pixelOffset);
   \   00000188   0520A0E1           MOV      R2,R5
   \   0000018C   601FA0E3           MOV      R1,#+384
   \   00000190   ............       ADRL     R0,`?<Constant "Digital5">`
   \              ....        
   \   00000198   ........           BL       GUI_DispStringHCenterAt
    685          
    686          	GUI_DrawBitmap(GetNavigationArrow(INPUTS_SELECTION), 3, pixelOffset + 238);
   \   0000019C   EE2084E2           ADD      R2,R4,#+238
   \   000001A0   0310A0E3           MOV      R1,#+3
   \   000001A4   ........           LDR      R0,??DataTable120_14
   \   000001A8   ........           BL       GUI_DrawBitmap
    687          }
   \   000001AC   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   000001B0   F081BDE8           POP      {R4-R8,PC}       ;; return
    688          
    689          

   \                                 In section .text, align 4, keep-with-next
    690          void CameraSelectionPaint(int pixelOffset, WM_HWIN hParent)
    691          {
   \                     CameraSelectionPaint:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    692          	GUI_DrawBitmap(&bmBlankListWheelScreen, 0, pixelOffset);
   \   00000008   0420A0E1           MOV      R2,R4
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable120_19
   \   00000014   ........           BL       GUI_DrawBitmap
    693          	GUI_DrawBitmap(&bmCameraText, 60, pixelOffset + 1);
   \   00000018   012084E2           ADD      R2,R4,#+1
   \   0000001C   3C10A0E3           MOV      R1,#+60
   \   00000020   ........           LDR      R0,??DataTable120_20
   \   00000024   ........           BL       GUI_DrawBitmap
    694          	GUI_DrawBitmap(GetNavigationArrow(CAMERA_SELECTION), 3, pixelOffset + 238);
   \   00000028   EE2084E2           ADD      R2,R4,#+238
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   0310A0E3           MOV      R1,#+3
   \   00000034   ........           LDR      R0,??DataTable120_14
   \   00000038   ........           B        GUI_DrawBitmap   ;; tailcall
    695          }
    696          

   \                                 In section .text, align 4, keep-with-next
    697          void TachSelectionPaint(int pixelOffset, WM_HWIN hParent)
    698          {
   \                     TachSelectionPaint:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    699          	GUI_DrawBitmap(&bmBackground, 0, pixelOffset);
   \   00000008   0420A0E1           MOV      R2,R4
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           LDR      R0,??DataTable120_13
   \   00000014   ........           BL       GUI_DrawBitmap
    700          	GUI_DrawBitmap(&bmTachSetup, 60, pixelOffset + 1);
   \   00000018   012084E2           ADD      R2,R4,#+1
   \   0000001C   3C10A0E3           MOV      R1,#+60
   \   00000020   ........           LDR      R0,??DataTable120_21
   \   00000024   ........           BL       GUI_DrawBitmap
    701          
    702          	GUI_SetFont(&GUI_Font24B_ASCII);
   \   00000028   ........           LDR      R0,??DataTable120_7
   \   0000002C   ........           BL       GUI_SetFont
    703          	GUI_SetTextMode(GUI_TM_TRANS);
   \   00000030   0200A0E3           MOV      R0,#+2
   \   00000034   ........           BL       GUI_SetTextMode
    704          	GUI_DispStringHCenterAt("Warning", 90, 125 + pixelOffset);
   \   00000038   7D5084E2           ADD      R5,R4,#+125
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   5A10A0E3           MOV      R1,#+90
   \   00000044   ............       ADRL     R0,`?<Constant "Warning">`
   \              ....        
   \   0000004C   ........           BL       GUI_DispStringHCenterAt
    705          	GUI_DispStringHCenterAt("Redline", 240, 125 + pixelOffset);
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   F010A0E3           MOV      R1,#+240
   \   00000058   ............       ADRL     R0,`?<Constant "Redline">`
   \              ....        
   \   00000060   ........           BL       GUI_DispStringHCenterAt
    706          	GUI_DispStringHCenterAt("Engine Cyl", 390, 125 + pixelOffset);
   \   00000064   8660A0E3           MOV      R6,#+134
   \   00000068   406F86E3           ORR      R6,R6,#0x100
   \   0000006C   0520A0E1           MOV      R2,R5
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   ............       ADRL     R0,`?<Constant "Engine Cyl">`
   \              ....        
   \   0000007C   ........           BL       GUI_DispStringHCenterAt
    707          	GUI_DispStringHCenterAt("Powerband", 90, 235 + pixelOffset);
   \   00000080   EB5084E2           ADD      R5,R4,#+235
   \   00000084   0520A0E1           MOV      R2,R5
   \   00000088   5A10A0E3           MOV      R1,#+90
   \   0000008C   ............       ADRL     R0,`?<Constant "Powerband">`
   \              ....        
   \   00000094   ........           BL       GUI_DispStringHCenterAt
    708          	GUI_DispStringHCenterAt("Max RPM", 240, 235 + pixelOffset);
   \   00000098   0520A0E1           MOV      R2,R5
   \   0000009C   F010A0E3           MOV      R1,#+240
   \   000000A0   ............       ADRL     R0,`?<Constant "Max RPM">`
   \              ....        
   \   000000A8   ........           BL       GUI_DispStringHCenterAt
    709          	GUI_DispStringHCenterAt("Lap Meter", 390, 235 + pixelOffset);
   \   000000AC   0520A0E1           MOV      R2,R5
   \   000000B0   0610A0E1           MOV      R1,R6
   \   000000B4   ............       ADRL     R0,`?<Constant "Lap Meter">`
   \              ....        
   \   000000BC   ........           BL       GUI_DispStringHCenterAt
    710          
    711          	GUI_DrawBitmap(GetNavigationArrow(TACH_SELECTION), 3, pixelOffset + 238);
   \   000000C0   EE2084E2           ADD      R2,R4,#+238
   \   000000C4   7040BDE8           POP      {R4-R6,LR}
   \   000000C8   0310A0E3           MOV      R1,#+3
   \   000000CC   ........           LDR      R0,??DataTable120_14
   \   000000D0   ........           B        GUI_DrawBitmap   ;; tailcall
    712          }
    713          
    714          ////void HoldtimeSelectionPaint(int pixelOffset, WM_HWIN hParent)		// to go to new TrackSettingsScreen
    715          ////{
    716          ////	GUI_DrawBitmap(&bmBlankListWheelScreen, 0, pixelOffset);
    717          ////	GUI_DrawBitmap(&bmLaptimeHold, 60, pixelOffset + 1);
    718          ////	GUI_DrawBitmap(GetNavigationArrow(HOLDTIME_SELECTION), 3, pixelOffset + 238);
    719          ////}
    720          
    721          //void LaunchSelectionPaint(int pixelOffset, WM_HWIN hParent)
    722          //{
    723          //	GUI_DrawBitmap(&bmBlankListWheelScreen, 0, pixelOffset);
    724          //	GUI_DrawBitmap(&bmLaunchGForceText, 60, pixelOffset + 1);
    725          //	GUI_DrawBitmap(GetNavigationArrow(LAUNCH_SELECTION), 3, pixelOffset + 238);
    726          //}
    727          //
    728          //void DrivemodeSelectionPaint(int pixelOffset, WM_HWIN hParent)
    729          //{
    730          //	GUI_SetColor(GUI_WHITE);
    731          //	GUI_DrawBitmap(&bmBackground, 0, pixelOffset);
    732          //	GUI_DrawBitmap(&bmDriveModeSetup, 60, pixelOffset + 1);
    733          //
    734          //	GUI_DrawRoundedRect(10, 40 + pixelOffset, 460, 250 + pixelOffset, 5);
    735          //	GUI_FillRoundedRect(10, 40 + pixelOffset, 460, 250 + pixelOffset, 5);
    736          //
    737          //	GUI_SetPenSize(3);
    738          //	GUI_SetColor(GUI_GRAY);
    739          //	GUI_DrawLine(150, 40 + pixelOffset, 150, 250 + pixelOffset);
    740          //	GUI_DrawLine(10, 145 + pixelOffset, 460, 145 + pixelOffset);
    741          //
    742          //	GUI_DrawBitmap(GetNavigationArrow(DRIVEMODE_SELECTION), 3, pixelOffset + 238);
    743          //
    744          //	//GUI_SetFont(&GUI_Font32_ASCII);
    745          //	//GUI_SetTextMode(GUI_TM_TRANS);
    746          //	//GUI_DispStringHCenterAt("DRIVE MODE SETTINGS", XSIZE_PHYS/2, pixelOffset + 2);
    747          //}
    748          
    749          static GUI_CONST_STORAGE GUI_BITMAP *GetNavigationArrow(int screen)
    750          {
    751          	switch (screen)
    752          	{
    753          		default:		return &bmthreewayarrow;
    754          	}
    755          }
    756          

   \                                 In section .text, align 4, keep-with-next
    757          void RaceSettingsIgnoreNextKeyRelease(void)
    758          {
    759          	clickedOnThisScreen = false;
   \                     RaceSettingsIgnoreNextKeyRelease:
   \   00000000   ........           LDR      R0,??DataTable120
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   441080E5           STR      R1,[R0, #+68]
    760          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116:
   \   00000000   4F6E0000           DC8      0x4F, 0x6E, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable119:
   \   00000000   4F666600           DC8      "Off"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120:
   \   00000000   ........           DC32     RaceSettingsScreenList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_1:
   \   00000000   ........           DC32     hScreenTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_2:
   \   00000000   ........           DC32     hScrollTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_3:
   \   00000000   ........           DC32     GUI_Font32_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_4:
   \   00000000   ........           DC32     pressingbutton_semaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_5:
   \   00000000   ........           DC32     bmGreenCheck

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_6:
   \   00000000   ........           DC32     hWarningBtn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_7:
   \   00000000   ........           DC32     GUI_Font24B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_8:
   \   00000000   ........           DC32     vehicleData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_9:
   \   00000000   ........           DC32     hAnalog0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_10:
   \   00000000   ........           DC32     bmBrownInputButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_11:
   \   00000000   ........           DC32     bmGreenInputButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_12:
   \   00000000   ........           DC32     bmRedInputButton

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_13:
   \   00000000   ........           DC32     bmBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_14:
   \   00000000   ........           DC32     bmthreewayarrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_15:
   \   00000000   ........           DC32     bmInputsBackground

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_16:
   \   00000000   ........           DC32     bmInputText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_17:
   \   00000000   ........           DC32     GUI_Font20B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_18:
   \   00000000   ........           DC32     LCD_APIListCCW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_19:
   \   00000000   ........           DC32     bmBlankListWheelScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_20:
   \   00000000   ........           DC32     bmCameraText

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_21:
   \   00000000   ........           DC32     bmTachSetup

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "None">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4E6F6E650000       DC8 78, 111, 110, 101, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ChaseCam SD">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   436861736543       DC8 67, 104, 97, 115, 101, 67, 97, 109, 32, 83
   \              616D2053    
   \   0000000A   4400               DC8 68, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GoPro HD">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   476F50726F20       DC8 71, 111, 80, 114, 111, 32, 72, 68, 0, 0
   \              48440000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RaceCam HD">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   526163654361       DC8 82, 97, 99, 101, 67, 97, 109, 32, 72, 68
   \              6D204844    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sony HD">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   536F6E792048       DC8 83, 111, 110, 121, 32, 72, 68, 0
   \              4400        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sony SD">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   536F6E792053       DC8 83, 111, 110, 121, 32, 83, 68, 0
   \              4400        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353030300000       DC8 53, 48, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353130300000       DC8 53, 49, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353230300000       DC8 53, 50, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353330300000       DC8 53, 51, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353430300000       DC8 53, 52, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353530300000       DC8 53, 53, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353630300000       DC8 53, 54, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353730300000       DC8 53, 55, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353830300000       DC8 53, 56, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   353930300000       DC8 53, 57, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363030300000       DC8 54, 48, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363130300000       DC8 54, 49, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363230300000       DC8 54, 50, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363330300000       DC8 54, 51, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363430300000       DC8 54, 52, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363530300000       DC8 54, 53, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363630300000       DC8 54, 54, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363730300000       DC8 54, 55, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363830300000       DC8 54, 56, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "6900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   363930300000       DC8 54, 57, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373030300000       DC8 55, 48, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373130300000       DC8 55, 49, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373230300000       DC8 55, 50, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373330300000       DC8 55, 51, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373430300000       DC8 55, 52, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373530300000       DC8 55, 53, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373630300000       DC8 55, 54, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373730300000       DC8 55, 55, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373830300000       DC8 55, 56, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "7900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   373930300000       DC8 55, 57, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383030300000       DC8 56, 48, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383130300000       DC8 56, 49, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383230300000       DC8 56, 50, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383330300000       DC8 56, 51, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383430300000       DC8 56, 52, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383530300000       DC8 56, 53, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383630300000       DC8 56, 54, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383730300000       DC8 56, 55, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383830300000       DC8 56, 56, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "8900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   383930300000       DC8 56, 57, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393030300000       DC8 57, 48, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393130300000       DC8 57, 49, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393230300000       DC8 57, 50, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393330300000       DC8 57, 51, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393430300000       DC8 57, 52, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393530300000       DC8 57, 53, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393630300000       DC8 57, 54, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393730300000       DC8 57, 55, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393830300000       DC8 57, 56, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   393930300000       DC8 57, 57, 48, 48, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313030303000       DC8 49, 48, 48, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313031303000       DC8 49, 48, 49, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313032303000       DC8 49, 48, 50, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313033303000       DC8 49, 48, 51, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313034303000       DC8 49, 48, 52, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313035303000       DC8 49, 48, 53, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313036303000       DC8 49, 48, 54, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313037303000       DC8 49, 48, 55, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313038303000       DC8 49, 48, 56, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "10900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313039303000       DC8 49, 48, 57, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313130303000       DC8 49, 49, 48, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313131303000       DC8 49, 49, 49, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313132303000       DC8 49, 49, 50, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313133303000       DC8 49, 49, 51, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313134303000       DC8 49, 49, 52, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313135303000       DC8 49, 49, 53, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313136303000       DC8 49, 49, 54, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313137303000       DC8 49, 49, 55, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313138303000       DC8 49, 49, 56, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "11900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313139303000       DC8 49, 49, 57, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12000">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313230303000       DC8 49, 50, 48, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12100">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313231303000       DC8 49, 50, 49, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12200">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313232303000       DC8 49, 50, 50, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12300">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313233303000       DC8 49, 50, 51, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12400">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313234303000       DC8 49, 50, 52, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12500">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313235303000       DC8 49, 50, 53, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12600">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313236303000       DC8 49, 50, 54, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12700">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313237303000       DC8 49, 50, 55, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12800">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313238303000       DC8 49, 50, 56, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12900">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   313239303000       DC8 49, 50, 57, 48, 48, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Camera Type">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   43616D657261       DC8 67, 97, 109, 101, 114, 97, 32, 84, 121, 112
   \              20547970    
   \   0000000A   6500               DC8 101, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%drpm">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   256472706D00       DC8 37, 100, 114, 112, 109, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5.3 volts">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   352E3320766F       DC8 53, 46, 51, 32, 118, 111, 108, 116, 115, 0
   \              6C747300    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "2.3 volts">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   322E3320766F       DC8 50, 46, 51, 32, 118, 111, 108, 116, 115, 0
   \              6C747300    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "On">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F6E0000           DC8 79, 110, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "9.1 volts">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   392E3120766F       DC8 57, 46, 49, 32, 118, 111, 108, 116, 115, 0
   \              6C747300    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12 volts">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   313220766F6C       DC8 49, 50, 32, 118, 111, 108, 116, 115, 0, 0
   \              74730000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Off">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   4F666600           DC8 79, 102, 102, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Gear Ratio">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   476561722052       DC8 71, 101, 97, 114, 32, 82, 97, 116, 105, 111
   \              6174696F    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ANALOG">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   414E414C4F47       DC8 65, 78, 65, 76, 79, 71, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DIGITAL">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   444947495441       DC8 68, 73, 71, 73, 84, 65, 76, 0
   \              4C00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Analog0">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416E616C6F67       DC8 65, 110, 97, 108, 111, 103, 48, 0
   \              3000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Analog1">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416E616C6F67       DC8 65, 110, 97, 108, 111, 103, 49, 0
   \              3100        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Digital4">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   446967697461       DC8 68, 105, 103, 105, 116, 97, 108, 52, 0, 0
   \              6C340000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Analog2">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416E616C6F67       DC8 65, 110, 97, 108, 111, 103, 50, 0
   \              3200        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Analog3">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   416E616C6F67       DC8 65, 110, 97, 108, 111, 103, 51, 0
   \              3300        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Digital5">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   446967697461       DC8 68, 105, 103, 105, 116, 97, 108, 53, 0, 0
   \              6C350000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Warning">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   5761726E696E       DC8 87, 97, 114, 110, 105, 110, 103, 0
   \              6700        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Redline">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   5265646C696E       DC8 82, 101, 100, 108, 105, 110, 101, 0
   \              6500        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Engine Cyl">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   456E67696E65       DC8 69, 110, 103, 105, 110, 101, 32, 67, 121, 108
   \              2043796C    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Powerband">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   506F77657262       DC8 80, 111, 119, 101, 114, 98, 97, 110, 100, 0
   \              616E6400    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Max RPM">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   4D6178205250       DC8 77, 97, 120, 32, 82, 80, 77, 0
   \              4D00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Lap Meter">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4C6170204D65       DC8 76, 97, 112, 32, 77, 101, 116, 101, 114, 0
   \              74657200    
   \   0000000A   0000               DC8 0, 0
    761          
    762          
    763          /*************************** End of file ****************************/
    764          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     CameraSelectionPaint                8
     DisplayCameraSelection             32
     DisplayGearRatio                   24
     DisplayInputsSelection             64
     DisplayTachSelection               64
     GearRatioPaint                      8
     GetRaceSettingsWindowHandle         0
     InputsSelectionPaint               40
     RSDisplayInputsSelection           24
     RaceSettingsIgnoreNextKeyRelease
                                         0
     RaceSettingsScreensCallback        24
     SetRaceSettingsWindowHandle         0
     TachSelectionPaint                 16


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     hWarningBtn                      24
     hRedlineBtn
     hCylBtn
     hStartBtn
     hPeakBtn
     hLapBtn
     hAnalog0                         24
     hAnalog1
     hAnalog2
     hAnalog3
     hDigital4
     hDigital5
     GetRaceSettingsWindowHandle      12
     SetRaceSettingsWindowHandle      12
     RaceSettingsScreensCallback     956
     RaceSettingsScreenList          116
     hRaceSettingsScreens
     KMCDialogSemaphone
     clickedOnThisScreen
     hCameraSelectionBtn
     hCameraListWheel
     hShowSpeedCheck
     hShowRPMCheck
     apCameras
     DisplayCameraSelection           88
     RPM                             324
     DisplayTachSelection            784
     RSDisplayInputsSelection         64
     DisplayInputsSelection          680
     DisplayGearRatio                132
     GearRatioPaint                   44
     InputsSelectionPaint            436
     CameraSelectionPaint             60
     TachSelectionPaint              212
     RaceSettingsIgnoreNextKeyRelease
                                      16
     ??DataTable116                    4
     ??DataTable119                    4
     ??DataTable120                    4
     ??DataTable120_1                  4
     ??DataTable120_2                  4
     ??DataTable120_3                  4
     ??DataTable120_4                  4
     ??DataTable120_5                  4
     ??DataTable120_6                  4
     ??DataTable120_7                  4
     ??DataTable120_8                  4
     ??DataTable120_9                  4
     ??DataTable120_10                 4
     ??DataTable120_11                 4
     ??DataTable120_12                 4
     ??DataTable120_13                 4
     ??DataTable120_14                 4
     ??DataTable120_15                 4
     ??DataTable120_16                 4
     ??DataTable120_17                 4
     ??DataTable120_18                 4
     ??DataTable120_19                 4
     ??DataTable120_20                 4
     ??DataTable120_21                 4
     ?<Constant "None">                8
     ?<Constant "ChaseCam SD">        12
     ?<Constant "GoPro HD">           12
     ?<Constant "RaceCam HD">         12
     ?<Constant "Sony HD">             8
     ?<Constant "Sony SD">             8
     ?<Constant "5000">                8
     ?<Constant "5100">                8
     ?<Constant "5200">                8
     ?<Constant "5300">                8
     ?<Constant "5400">                8
     ?<Constant "5500">                8
     ?<Constant "5600">                8
     ?<Constant "5700">                8
     ?<Constant "5800">                8
     ?<Constant "5900">                8
     ?<Constant "6000">                8
     ?<Constant "6100">                8
     ?<Constant "6200">                8
     ?<Constant "6300">                8
     ?<Constant "6400">                8
     ?<Constant "6500">                8
     ?<Constant "6600">                8
     ?<Constant "6700">                8
     ?<Constant "6800">                8
     ?<Constant "6900">                8
     ?<Constant "7000">                8
     ?<Constant "7100">                8
     ?<Constant "7200">                8
     ?<Constant "7300">                8
     ?<Constant "7400">                8
     ?<Constant "7500">                8
     ?<Constant "7600">                8
     ?<Constant "7700">                8
     ?<Constant "7800">                8
     ?<Constant "7900">                8
     ?<Constant "8000">                8
     ?<Constant "8100">                8
     ?<Constant "8200">                8
     ?<Constant "8300">                8
     ?<Constant "8400">                8
     ?<Constant "8500">                8
     ?<Constant "8600">                8
     ?<Constant "8700">                8
     ?<Constant "8800">                8
     ?<Constant "8900">                8
     ?<Constant "9000">                8
     ?<Constant "9100">                8
     ?<Constant "9200">                8
     ?<Constant "9300">                8
     ?<Constant "9400">                8
     ?<Constant "9500">                8
     ?<Constant "9600">                8
     ?<Constant "9700">                8
     ?<Constant "9800">                8
     ?<Constant "9900">                8
     ?<Constant "10000">               8
     ?<Constant "10100">               8
     ?<Constant "10200">               8
     ?<Constant "10300">               8
     ?<Constant "10400">               8
     ?<Constant "10500">               8
     ?<Constant "10600">               8
     ?<Constant "10700">               8
     ?<Constant "10800">               8
     ?<Constant "10900">               8
     ?<Constant "11000">               8
     ?<Constant "11100">               8
     ?<Constant "11200">               8
     ?<Constant "11300">               8
     ?<Constant "11400">               8
     ?<Constant "11500">               8
     ?<Constant "11600">               8
     ?<Constant "11700">               8
     ?<Constant "11800">               8
     ?<Constant "11900">               8
     ?<Constant "12000">               8
     ?<Constant "12100">               8
     ?<Constant "12200">               8
     ?<Constant "12300">               8
     ?<Constant "12400">               8
     ?<Constant "12500">               8
     ?<Constant "12600">               8
     ?<Constant "12700">               8
     ?<Constant "12800">               8
     ?<Constant "12900">               8
     ?<Constant "Camera Type">        12
     ?<Constant "%drpm">               8
     ?<Constant "5.3 volts">          12
     ?<Constant "2.3 volts">          12
     ?<Constant "On">                  4
     ?<Constant "9.1 volts">          12
     ?<Constant "12 volts">           12
     ?<Constant "Off">                 4
     ?<Constant "Gear Ratio">         12
     ?<Constant "ANALOG">              8
     ?<Constant "DIGITAL">             8
     ?<Constant "Analog0">             8
     ?<Constant "Analog1">             8
     ?<Constant "Digital4">           12
     ?<Constant "Analog2">             8
     ?<Constant "Analog3">             8
     ?<Constant "Digital5">           12
     ?<Constant "Warning">             8
     ?<Constant "Redline">             8
     ?<Constant "Engine Cyl">         12
     ?<Constant "Powerband">          12
     ?<Constant "Max RPM">             8
     ?<Constant "Lap Meter">          12

 
    48 bytes in section .bss
   440 bytes in section .data
 4 512 bytes in section .text
 
 4 512 bytes of CODE memory
   488 bytes of DATA memory

Errors: none
Warnings: none
