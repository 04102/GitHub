###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FAT_SetEndOfFile.c                   #
#    Command line =  C:\DUII\TargetHW\FS\FAT_SetEndOfFile.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FAT_SetEndOfFile.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FAT_SetEndOfFile.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FAT_SetEndOfFile.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FAT_SetEndOfFile.c
     19          Purpose     : FAT routine for setting the end of file position
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FAT_Intern.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Static code
     35          *
     36          **********************************************************************
     37          */
     38          
     39          /*********************************************************************
     40          *
     41          *       _TruncateFile
     42          *
     43          *  Purpose
     44          *    Truncates the file. This means, the file's cluster chain will 
     45          *    be shorten
     46          *
     47          */
     48          static int _TruncateFile(FS_FILE * pFile, FS_VOLUME * pVolume, FS_SB * pSB) {
     49            FS_FAT_INFO * pFATInfo;
     50            FS_FILE_OBJ * pFileObj;
     51            U32           NumActClusters;
     52            U32           ClusterAbs;
     53            U32           NumCluster2Del;
     54            U32           ClusterStart2Delete;
     55            U32           NumNewClusters;
     56            U32           NewSize;
     57            int           r;
     58          
     59            pFileObj        = pFile->pFileObj;
     60            NewSize         = pFile->FilePos;
     61            pFATInfo        = &pVolume->FSInfo.FATInfo;
     62            //
     63            //  Calculate the number of clusters allocated to file.
     64            //
     65            NumActClusters  = (pFileObj->Size + pFATInfo->BytesPerCluster) / pFATInfo->BytesPerCluster;
     66            //
     67            // Calculate the number of cluster for the new file size.
     68            //
     69            NumNewClusters  = (NewSize + pFATInfo->BytesPerCluster) / pFATInfo->BytesPerCluster;
     70            //
     71            //   Number of clusters to delete
     72            //
     73            NumCluster2Del  = NumActClusters - NumNewClusters;
     74            //
     75            // Go to the cluster from where we will deallocate the "unused" clusters.
     76            //
     77            ClusterAbs      = FS_FAT_WalkCluster(pVolume, pSB, pFileObj->FirstCluster, NumNewClusters - 1);
     78            ClusterStart2Delete = FS_FAT_WalkCluster(pVolume, pSB, ClusterAbs, 1);
     79            //
     80            // Free the cluster chain.
     81            //
     82            FS_FAT_FreeClusterChain(pVolume, pSB, ClusterStart2Delete, NumCluster2Del);
     83            //
     84            //  Mark the last cluster to be the last in the chain.
     85            //
     86            FS_FAT_MarkClusterEOC(pVolume, pSB, ClusterAbs);
     87            //
     88            // Update the Cluster information in pFileObj.
     89            //
     90            pFileObj->Data.Fat.CurClusterAbs  = ClusterAbs;
     91            pFileObj->Data.Fat.CurClusterFile = NumNewClusters;
     92            pFileObj->Data.Fat.NumAdjClusters = 0;
     93            r = 0;
     94            return r;
     95          }
     96          
     97          
     98          /*********************************************************************
     99          *
    100          *       Public code
    101          *
    102          **********************************************************************
    103          */
    104          
    105          
    106          /*********************************************************************
    107          *
    108          *       FS_FAT_SetEndOfFile
    109          *
    110          *  Description:
    111          *    Updates the pFile handle and adds/remove cluster to the file handle.
    112          *
    113          *  Parameters:
    114          *    pFile       - Pointer to a opened file with write permission.
    115          *
    116          *  Return value:
    117          *    0         O.K.
    118          *    1         Error
    119          */

   \                                 In section .text, align 4, keep-with-next
    120          int FS_FAT_SetEndOfFile(FS_FILE * pFile) {
   \                     FS_FAT_SetEndOfFile:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    121            FS_SB            SB;
    122            FS_VOLUME      * pVolume;
    123            FS_FILE_OBJ    * pFileObj;
    124            int              r;
    125          
    126            pFileObj        = pFile->pFileObj;
   \   00000008   005094E5           LDR      R5,[R4, #+0]
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
    127            pVolume         = pFileObj->pVolume;
   \   00000010   086095E5           LDR      R6,[R5, #+8]
    128            r               = -1;
   \   00000014   0080E0E3           MVN      R8,#+0
    129            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           BL       FS__SB_Create
    130            //
    131            // Do we want to truncate the file ?
    132            //
    133            if (pFile->FilePos < pFileObj->Size) {
   \   00000024   040095E5           LDR      R0,[R5, #+4]
   \   00000028   047094E5           LDR      R7,[R4, #+4]
   \   0000002C   000057E1           CMP      R7,R0
   \   00000030   2500002A           BCS      ??FS_FAT_SetEndOfFile_0
    134              r = _TruncateFile(pFile, pVolume, &SB);
   \   00000034   008094E5           LDR      R8,[R4, #+0]
   \   00000038   1C0086E2           ADD      R0,R6,#+28
   \   0000003C   0CA090E5           LDR      R10,[R0, #+12]
   \   00000040   040098E5           LDR      R0,[R8, #+4]
   \   00000044   0A10A0E1           MOV      R1,R10
   \   00000048   00008AE0           ADD      R0,R10,R0
   \   0000004C   ........           BL       __aeabi_uidiv
   \   00000050   0090A0E1           MOV      R9,R0
   \   00000054   07008AE0           ADD      R0,R10,R7
   \   00000058   0A10A0E1           MOV      R1,R10
   \   0000005C   ........           BL       __aeabi_uidiv
   \   00000060   0070A0E1           MOV      R7,R0
   \   00000064   013047E2           SUB      R3,R7,#+1
   \   00000068   002098E5           LDR      R2,[R8, #+0]
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           BL       FS_FAT_WalkCluster
   \   00000078   00A0A0E1           MOV      R10,R0
   \   0000007C   0130A0E3           MOV      R3,#+1
   \   00000080   0A20A0E1           MOV      R2,R10
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           BL       FS_FAT_WalkCluster
   \   00000090   0020A0E1           MOV      R2,R0
   \   00000094   073049E0           SUB      R3,R9,R7
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   ........           BL       FS_FAT_FreeClusterChain
   \   000000A4   0A20A0E1           MOV      R2,R10
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           BL       FS_FAT_MarkClusterEOC
   \   000000B4   14A088E5           STR      R10,[R8, #+20]
   \   000000B8   107088E5           STR      R7,[R8, #+16]
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   BE01C8E1           STRH     R0,[R8, #+30]
    135            } else if (pFile->FilePos > pFileObj->Size) {
   \   000000C4   0080A0E3           MOV      R8,#+0
   \   000000C8   0C0000EA           B        ??FS_FAT_SetEndOfFile_1
   \                     ??FS_FAT_SetEndOfFile_0:
   \   000000CC   070050E1           CMP      R0,R7
   \   000000D0   0C00002A           BCS      ??FS_FAT_SetEndOfFile_2
    136              //
    137              // To avoid allocating one cluster more than required, temporarily subtract 1 byte from FilePos
    138              //
    139              pFile->FilePos--;
   \   000000D4   010047E2           SUB      R0,R7,#+1
   \   000000D8   040084E5           STR      R0,[R4, #+4]
    140              r = FS_FAT_GotoClusterAllocIfReq(pFile, &SB);
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       FS_FAT_GotoClusterAllocIfReq
   \   000000E8   0080A0E1           MOV      R8,R0
    141              pFile->FilePos++;
   \   000000EC   040094E5           LDR      R0,[R4, #+4]
    142            }
    143            if (r == 0) {
   \   000000F0   000058E3           CMP      R8,#+0
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   040084E5           STR      R0,[R4, #+4]
   \   000000FC   0100001A           BNE      ??FS_FAT_SetEndOfFile_2
    144              pFileObj->Size = pFile->FilePos;
   \                     ??FS_FAT_SetEndOfFile_1:
   \   00000100   040094E5           LDR      R0,[R4, #+4]
   \   00000104   040085E5           STR      R0,[R5, #+4]
    145            }
    146            FS_FAT_UpdateDirEntry(pFileObj, &SB);
   \                     ??FS_FAT_SetEndOfFile_2:
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       FS_FAT_UpdateDirEntry
    147            FS__SB_Delete(&SB);
   \   00000114   0D00A0E1           MOV      R0,SP
   \   00000118   ........           BL       FS__SB_Delete
    148            return r;
   \   0000011C   0800A0E1           MOV      R0,R8
   \   00000120   10D08DE2           ADD      SP,SP,#+16
   \   00000124   F087BDE8           POP      {R4-R10,PC}      ;; return
    149          }
    150          
    151          /*************************** End of file ****************************/
    152          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     FS_FAT_SetEndOfFile     48


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     FS_FAT_SetEndOfFile  296

 
 296 bytes in section .text
 
 296 bytes of CODE memory

Errors: none
Warnings: none
