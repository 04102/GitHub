###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:03 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_NextPixelAPI.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_NextPixelAPI.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LCD_NextPixelAPI.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LCD_NextPixelAPI.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_NextPixelAPI.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCD_NextPixelAPI.c
     19          Purpose     : Bitmap drawing via LCD_API_NEXT_PIXEL
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Types
     30          *
     31          **********************************************************************
     32          */
     33          typedef struct {
     34            int x0, xPos, yPos;
     35            GUI_HMEM hMem;            /* Handle of buffer */
     36            U8 * pBuffer; /* Pointer to allocated buffer */
     37            U8 * pDst;    /* Pointer for storing next pixel */
     38            int BytesPerPixel;
     39            int BitsPerPixel;
     40            int BufferSizeInPixels;
     41            int NumPixelsInBuffer;
     42          } NEXT_PIXEL_CONTEXT;
     43          
     44          /*********************************************************************
     45          *
     46          *       Static data
     47          *
     48          **********************************************************************
     49          */

   \                                 In section .bss, align 4
     50          static NEXT_PIXEL_CONTEXT _Context;
   \                     _Context:
   \   00000000                      DS8 40
     51          
     52          /*********************************************************************
     53          *
     54          *       Static code
     55          *
     56          **********************************************************************
     57          */
     58          /*********************************************************************
     59          *
     60          *       _NextPixel_FlushBuffer
     61          */
     62          static void _NextPixel_FlushBuffer(void) {
     63            GUI_Context.apDevice[GUI_Context.SelLayer]->pDeviceAPI->pfDrawBitmap(GUI_Context.apDevice[GUI_Context.SelLayer], _Context.xPos, _Context.yPos, _Context.NumPixelsInBuffer, 1, _Context.BitsPerPixel, 0, (const U8 *)_Context.pBuffer, 0, NULL);
     64            _Context.xPos += _Context.NumPixelsInBuffer;
     65            _Context.NumPixelsInBuffer = 0;
     66            _Context.pDst = _Context.pBuffer;
     67          }
     68          
     69          /*********************************************************************
     70          *
     71          *       _NextPixel_Start
     72          */

   \                                 In section .text, align 4, keep-with-next
     73          static void _NextPixel_Start(int x0, int y0, int x1, int y1) {
   \                     _NextPixel_Start:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
     74            U32 BufferSizeAvailable; /* Number of available bytes */
     75            int BufferSize;          /* Buffer size in bytes */
     76            int BytesPerPixel;       /* Size of LCD_PIXELINDEX */
     77            int BytesPerLineDest;
     78            int xSize;
     79            GUI_USE_PARA(y1);
     80            xSize = x1 - x0 + 1;
   \   00000008   050042E0           SUB      R0,R2,R5
   \   0000000C   019080E2           ADD      R9,R0,#+1
     81            /*
     82             * Calculate buffer size
     83             */
     84            _Context.BitsPerPixel = GUI_GetBitsPerPixelEx(GUI_Context.SelLayer);
   \   00000010   ........           LDR      R0,??DataTable4
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0160A0E1           MOV      R6,R1
   \   0000001C   1100D0E5           LDRB     R0,[R0, #+17]
   \   00000020   ........           BL       GUI_GetBitsPerPixelEx
   \   00000024   ........           LDR      R4,??DataTable4_1
     85            _Context.BitsPerPixel = (_Context.BitsPerPixel == 24) ? 32 : _Context.BitsPerPixel;
   \   00000028   180050E3           CMP      R0,#+24
   \   0000002C   1C0084E5           STR      R0,[R4, #+28]
   \   00000030   2000A003           MOVEQ    R0,#+32
     86            BytesPerPixel         = (_Context.BitsPerPixel <= 8) ? 1 : (_Context.BitsPerPixel <= 16) ? 2 : 4;
   \   00000034   090050E3           CMP      R0,#+9
   \   00000038   1C0084E5           STR      R0,[R4, #+28]
   \   0000003C   0170A0B3           MOVLT    R7,#+1
   \   00000040   020000BA           BLT      ??_NextPixel_Start_0
   \   00000044   110050E3           CMP      R0,#+17
   \   00000048   0270A0B3           MOVLT    R7,#+2
   \   0000004C   0470A0A3           MOVGE    R7,#+4
     87            BytesPerLineDest      = BytesPerPixel * xSize;
   \                     ??_NextPixel_Start_0:
   \   00000050   990708E0           MUL      R8,R9,R7
     88            BufferSizeAvailable   = GUI_ALLOC_GetMaxSize();
   \   00000054   ........           BL       GUI_ALLOC_GetMaxSize
     89            if (BufferSizeAvailable < (U32)BytesPerLineDest) {
   \   00000058   080050E1           CMP      R0,R8
   \   0000005C   0300002A           BCS      ??_NextPixel_Start_1
     90              BufferSize = (BufferSizeAvailable / BytesPerPixel) * BytesPerPixel;
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   ........           BL       __aeabi_uidiv
   \   00000068   970000E0           MUL      R0,R7,R0
   \   0000006C   000000EA           B        ??_NextPixel_Start_2
     91            } else {
     92              BufferSize = BytesPerLineDest;
   \                     ??_NextPixel_Start_1:
   \   00000070   0800A0E1           MOV      R0,R8
     93            }
     94            _Context.BufferSizeInPixels = BufferSize / BytesPerPixel;
   \                     ??_NextPixel_Start_2:
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   ........           BL       __aeabi_idiv
   \   0000007C   200084E5           STR      R0,[R4, #+32]
     95            _Context.NumPixelsInBuffer  = 0;
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   240084E5           STR      R0,[R4, #+36]
     96            _Context.xPos = _Context.x0 = x0;
   \   00000088   005084E5           STR      R5,[R4, #+0]
   \   0000008C   045084E5           STR      R5,[R4, #+4]
     97            _Context.yPos = y0;
   \   00000090   086084E5           STR      R6,[R4, #+8]
     98            _Context.BytesPerPixel = BytesPerPixel;
   \   00000094   187084E5           STR      R7,[R4, #+24]
     99            /*
    100             * Allocate buffer
    101             */
    102            _Context.hMem    = GUI_ALLOC_AllocNoInit(BytesPerLineDest);
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   ........           BL       GUI_ALLOC_AllocNoInit
   \   000000A0   0C0084E5           STR      R0,[R4, #+12]
    103            _Context.pBuffer = (U8 *)GUI_ALLOC_h2p(_Context.hMem);
   \   000000A4   ........           BL       GUI_ALLOC_h2p
   \   000000A8   100084E5           STR      R0,[R4, #+16]
    104            _Context.pDst    = _Context.pBuffer;
   \   000000AC   140084E5           STR      R0,[R4, #+20]
    105          }
   \   000000B0   04D08DE2           ADD      SP,SP,#+4
   \   000000B4   F083BDE8           POP      {R4-R9,PC}       ;; return
    106          
    107          /*********************************************************************
    108          *
    109          *       _NextPixel_SetPixel
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          static void _NextPixel_SetPixel(int PixelIndex) {
   \                     _NextPixel_SetPixel:
   \   00000000   10402DE9           PUSH     {R4,LR}
    112            switch (_Context.BytesPerPixel) {
   \   00000004   ........           LDR      R4,??DataTable4_1
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   182094E5           LDR      R2,[R4, #+24]
   \   00000010   141094E5           LDR      R1,[R4, #+20]
   \   00000014   012052E2           SUBS     R2,R2,#+1
   \   00000018   0400000A           BEQ      ??_NextPixel_SetPixel_0
   \   0000001C   012052E2           SUBS     R2,R2,#+1
   \   00000020   0400000A           BEQ      ??_NextPixel_SetPixel_1
   \   00000024   022052E2           SUBS     R2,R2,#+2
   \   00000028   04008104           STREQ    R0,[R1], #+4
   \   0000002C   020000EA           B        ??_NextPixel_SetPixel_2
    113            case 1: {
    114                U8 * pData;
    115                pData = (U8 *)_Context.pDst;
    116                *pData = PixelIndex;
   \                     ??_NextPixel_SetPixel_0:
   \   00000030   0100C1E4           STRB     R0,[R1], #+1
    117                _Context.pDst += 1;
    118              }
    119              break;
   \   00000034   000000EA           B        ??_NextPixel_SetPixel_2
    120            case 2: {
    121                U16 * pData;
    122                pData = (U16 *)_Context.pDst;
    123                *pData = PixelIndex;
   \                     ??_NextPixel_SetPixel_1:
   \   00000038   B200C1E0           STRH     R0,[R1], #+2
    124                _Context.pDst += 2;
    125              }
    126              break;
    127            case 4: {
    128                U32 * pData;
    129                pData = (U32 *)_Context.pDst;
    130                *pData = PixelIndex;
    131                _Context.pDst += 4;
    132              }
    133              break;
    134            }
    135            if (++_Context.NumPixelsInBuffer == _Context.BufferSizeInPixels) {
   \                     ??_NextPixel_SetPixel_2:
   \   0000003C   240094E5           LDR      R0,[R4, #+36]
   \   00000040   141084E5           STR      R1,[R4, #+20]
   \   00000044   013080E2           ADD      R3,R0,#+1
   \   00000048   200094E5           LDR      R0,[R4, #+32]
   \   0000004C   243084E5           STR      R3,[R4, #+36]
   \   00000050   000053E1           CMP      R3,R0
   \   00000054   1B00001A           BNE      ??_NextPixel_SetPixel_3
    136              _NextPixel_FlushBuffer();
   \   00000058   ........           LDR      R0,??DataTable4
   \   0000005C   082094E5           LDR      R2,[R4, #+8]
   \   00000060   1110D0E5           LDRB     R1,[R0, #+17]
   \   00000064   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000068   480090E5           LDR      R0,[R0, #+72]
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   14108DE5           STR      R1,[SP, #+20]
   \   00000074   10108DE5           STR      R1,[SP, #+16]
   \   00000078   101094E5           LDR      R1,[R4, #+16]
   \   0000007C   0C108DE5           STR      R1,[SP, #+12]
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   08108DE5           STR      R1,[SP, #+8]
   \   00000088   1C1094E5           LDR      R1,[R4, #+28]
   \   0000008C   04108DE5           STR      R1,[SP, #+4]
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   00108DE5           STR      R1,[SP, #+0]
   \   00000098   0CC090E5           LDR      R12,[R0, #+12]
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   04C09CE5           LDR      R12,[R12, #+4]
   \   000000A4   3CFF2FE1           BLX      R12
   \   000000A8   040094E5           LDR      R0,[R4, #+4]
   \   000000AC   241094E5           LDR      R1,[R4, #+36]
   \   000000B0   000081E0           ADD      R0,R1,R0
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   240084E5           STR      R0,[R4, #+36]
   \   000000C0   100094E5           LDR      R0,[R4, #+16]
   \   000000C4   140084E5           STR      R0,[R4, #+20]
    137            }
    138          }
   \                     ??_NextPixel_SetPixel_3:
   \   000000C8   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000000CC   1080BDE8           POP      {R4,PC}          ;; return
    139          
    140          /*********************************************************************
    141          *
    142          *       _NextPixel_NextLine
    143          */

   \                                 In section .text, align 4, keep-with-next
    144          static void _NextPixel_NextLine(void) {
   \                     _NextPixel_NextLine:
   \   00000000   10402DE9           PUSH     {R4,LR}
    145            if (_Context.NumPixelsInBuffer) {
   \   00000004   ........           LDR      R4,??DataTable4_1
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   243094E5           LDR      R3,[R4, #+36]
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   1B00000A           BEQ      ??_NextPixel_NextLine_0
    146              _NextPixel_FlushBuffer();
   \   00000018   ........           LDR      R0,??DataTable4
   \   0000001C   082094E5           LDR      R2,[R4, #+8]
   \   00000020   1110D0E5           LDRB     R1,[R0, #+17]
   \   00000024   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000028   480090E5           LDR      R0,[R0, #+72]
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   14108DE5           STR      R1,[SP, #+20]
   \   00000034   10108DE5           STR      R1,[SP, #+16]
   \   00000038   101094E5           LDR      R1,[R4, #+16]
   \   0000003C   0C108DE5           STR      R1,[SP, #+12]
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   08108DE5           STR      R1,[SP, #+8]
   \   00000048   1C1094E5           LDR      R1,[R4, #+28]
   \   0000004C   04108DE5           STR      R1,[SP, #+4]
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   00108DE5           STR      R1,[SP, #+0]
   \   00000058   0CC090E5           LDR      R12,[R0, #+12]
   \   0000005C   041094E5           LDR      R1,[R4, #+4]
   \   00000060   04C09CE5           LDR      R12,[R12, #+4]
   \   00000064   3CFF2FE1           BLX      R12
   \   00000068   040094E5           LDR      R0,[R4, #+4]
   \   0000006C   241094E5           LDR      R1,[R4, #+36]
   \   00000070   000081E0           ADD      R0,R1,R0
   \   00000074   040084E5           STR      R0,[R4, #+4]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   240084E5           STR      R0,[R4, #+36]
   \   00000080   100094E5           LDR      R0,[R4, #+16]
   \   00000084   140084E5           STR      R0,[R4, #+20]
    147            }
    148            _Context.xPos = _Context.x0;
   \                     ??_NextPixel_NextLine_0:
   \   00000088   000094E5           LDR      R0,[R4, #+0]
    149            _Context.yPos++;
    150          }
   \   0000008C   18D08DE2           ADD      SP,SP,#+24
   \   00000090   040084E5           STR      R0,[R4, #+4]
   \   00000094   080094E5           LDR      R0,[R4, #+8]
   \   00000098   010080E2           ADD      R0,R0,#+1
   \   0000009C   080084E5           STR      R0,[R4, #+8]
   \   000000A0   1080BDE8           POP      {R4,PC}          ;; return
    151          
    152          /*********************************************************************
    153          *
    154          *       _NextPixel_End
    155          */

   \                                 In section .text, align 4, keep-with-next
    156          static void _NextPixel_End(void) {
   \                     _NextPixel_End:
   \   00000000   10402DE9           PUSH     {R4,LR}
    157            if (_Context.NumPixelsInBuffer) {
   \   00000004   ........           LDR      R4,??DataTable4_1
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   243094E5           LDR      R3,[R4, #+36]
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   1B00000A           BEQ      ??_NextPixel_End_0
    158              _NextPixel_FlushBuffer();
   \   00000018   ........           LDR      R0,??DataTable4
   \   0000001C   082094E5           LDR      R2,[R4, #+8]
   \   00000020   1110D0E5           LDRB     R1,[R0, #+17]
   \   00000024   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000028   480090E5           LDR      R0,[R0, #+72]
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   14108DE5           STR      R1,[SP, #+20]
   \   00000034   10108DE5           STR      R1,[SP, #+16]
   \   00000038   101094E5           LDR      R1,[R4, #+16]
   \   0000003C   0C108DE5           STR      R1,[SP, #+12]
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   08108DE5           STR      R1,[SP, #+8]
   \   00000048   1C1094E5           LDR      R1,[R4, #+28]
   \   0000004C   04108DE5           STR      R1,[SP, #+4]
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   00108DE5           STR      R1,[SP, #+0]
   \   00000058   0CC090E5           LDR      R12,[R0, #+12]
   \   0000005C   041094E5           LDR      R1,[R4, #+4]
   \   00000060   04C09CE5           LDR      R12,[R12, #+4]
   \   00000064   3CFF2FE1           BLX      R12
   \   00000068   040094E5           LDR      R0,[R4, #+4]
   \   0000006C   241094E5           LDR      R1,[R4, #+36]
   \   00000070   000081E0           ADD      R0,R1,R0
   \   00000074   040084E5           STR      R0,[R4, #+4]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   240084E5           STR      R0,[R4, #+36]
   \   00000080   100094E5           LDR      R0,[R4, #+16]
   \   00000084   140084E5           STR      R0,[R4, #+20]
    159            }
    160            GUI_ALLOC_Free(_Context.hMem);
   \                     ??_NextPixel_End_0:
   \   00000088   0C0094E5           LDR      R0,[R4, #+12]
   \   0000008C   18D08DE2           ADD      SP,SP,#+24
   \   00000090   1040BDE8           POP      {R4,LR}
   \   00000094   ........           B        GUI_ALLOC_Free   ;; tailcall
    161          }
    162          
    163          /*********************************************************************
    164          *
    165          *       _NextPixel_API
    166          */

   \                                 In section .data, align 4
    167          static LCD_API_NEXT_PIXEL _NextPixel_API = {
   \                     _NextPixel_API:
   \   00000000   ............       DC32 _NextPixel_Start, _NextPixel_SetPixel, _NextPixel_NextLine
   \              ............
   \   0000000C   ........           DC32 _NextPixel_End
    168            _NextPixel_Start,
    169            _NextPixel_SetPixel,
    170            _NextPixel_NextLine,
    171            _NextPixel_End
    172          };
    173          
    174          /*********************************************************************
    175          *
    176          *       Public code
    177          *
    178          **********************************************************************
    179          */
    180          /*********************************************************************
    181          *
    182          *       LCD_GetNextPixelAPI
    183          */

   \                                 In section .text, align 4, keep-with-next
    184          LCD_API_NEXT_PIXEL * LCD_GetNextPixelAPI(void) {
   \                     LCD_GetNextPixelAPI:
   \   00000000   00402DE9           PUSH     {LR}
    185            GUI_DEVICE * pDevice;
    186            LCD_API_NEXT_PIXEL * pNextPixel_API;
    187          
    188            pDevice = GUI_Context.apDevice[GUI_Context.SelLayer];
   \   00000004   ........           LDR      R0,??DataTable4
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   1110D0E5           LDRB     R1,[R0, #+17]
   \   00000010   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000014   480090E5           LDR      R0,[R0, #+72]
   \   00000018   00008DE5           STR      R0,[SP, #+0]
    189            if (pDevice->pDeviceAPI->pfGetDevFunc) {
   \   0000001C   0C2090E5           LDR      R2,[R0, #+12]
   \   00000020   240092E5           LDR      R0,[R2, #+36]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??LCD_GetNextPixelAPI_0
    190              pNextPixel_API = (LCD_API_NEXT_PIXEL *)pDevice->pDeviceAPI->pfGetDevFunc(&pDevice, LCD_DEVFUNC_NEXT_PIXEL);
   \   0000002C   0810A0E3           MOV      R1,#+8
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   242092E5           LDR      R2,[R2, #+36]
   \   00000038   32FF2FE1           BLX      R2
    191            } else {
    192              pNextPixel_API = NULL;
    193            }
    194            if (!pNextPixel_API) {
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0000001A           BNE      ??LCD_GetNextPixelAPI_1
    195              pNextPixel_API = &_NextPixel_API;
   \                     ??LCD_GetNextPixelAPI_0:
   \   00000044   ........           LDR      R0,??DataTable4_2
    196            }
    197            return pNextPixel_API;
   \                     ??LCD_GetNextPixelAPI_1:
   \   00000048   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000004C   0080BDE8           POP      {PC}             ;; return
    198          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     _Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     _NextPixel_API
    199          
    200          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     LCD_GetNextPixelAPI      8
     _NextPixel_End          32
     _NextPixel_NextLine     32
     _NextPixel_SetPixel     32
     _NextPixel_Start        32


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _Context              40
     _NextPixel_Start     184
     _NextPixel_SetPixel  208
     _NextPixel_NextLine  164
     _NextPixel_End       152
     _NextPixel_API        16
     LCD_GetNextPixelAPI   80
     ??DataTable4           4
     ??DataTable4_1         4
     ??DataTable4_2         4

 
  40 bytes in section .bss
  16 bytes in section .data
 800 bytes in section .text
 
 800 bytes of CODE memory
  56 bytes of DATA memory

Errors: none
Warnings: none
