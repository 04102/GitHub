###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawGradient.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawGradient.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawGradient.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawGradient.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawGradient.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawGradient.c
     19          Purpose     : Drawing of horizontal and vertical color gradients
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DrawGradient
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _DrawGradient(int x0, int y0, int x1, int y1, GUI_COLOR Color0, GUI_COLOR Color1, void (* pFunc)(int, int, int), int v) {
   \                     _DrawGradient:
   \   00000000   FA4F2DE9           PUSH     {R1,R3-R11,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   58909DE5           LDR      R9,[SP, #+88]
   \   00000014   5C809DE5           LDR      R8,[SP, #+92]
   \   00000018   60609DE5           LDR      R6,[SP, #+96]
     36            I32 a, r, g, b, a0, r0, g0, b0, a1, r1, g1, b1;
     37            int y, d, ySize, ySize1, NumLines;
     38            GUI_COLOR ColorNew, ColorOld, ColorSic;
     39          
     40            ColorSic = GUI_GetColor();
   \   0000001C   ........           BL       GUI_GetColor
   \   00000020   28008DE5           STR      R0,[SP, #+40]
     41            if (Color0 == Color1) {
   \   00000024   080059E1           CMP      R9,R8
   \   00000028   0F00001A           BNE      ??_DrawGradient_0
     42              LCD_SetColor(Color0);
   \   0000002C   0900A0E1           MOV      R0,R9
   \   00000030   ........           BL       LCD_SetColor
     43              if (v) {
   \   00000034   64009DE5           LDR      R0,[SP, #+100]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0500000A           BEQ      ??_DrawGradient_1
     44                LCD_FillRect(x0, y0, x1, y1);
   \   00000040   30309DE5           LDR      R3,[SP, #+48]
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   2C109DE5           LDR      R1,[SP, #+44]
   \   0000004C   0400A0E1           MOV      R0,R4
   \                     ??_DrawGradient_2:
   \   00000050   ........           BL       LCD_FillRect
   \   00000054   940000EA           B        ??_DrawGradient_3
     45              } else {
     46                LCD_FillRect(y0, x0, y1, x1);
   \                     ??_DrawGradient_1:
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   30209DE5           LDR      R2,[SP, #+48]
   \   00000060   0410A0E1           MOV      R1,R4
   \   00000064   2C009DE5           LDR      R0,[SP, #+44]
   \   00000068   F8FFFFEA           B        ??_DrawGradient_2
     47              }
     48            } else {
     49              ySize  = y1 - y0 + 1;
   \                     ??_DrawGradient_0:
   \   0000006C   30009DE5           LDR      R0,[SP, #+48]
   \   00000070   2C109DE5           LDR      R1,[SP, #+44]
     50              ySize1 = (ySize - 1) ? ySize - 1 : 1;
     51              r0 = (Color0      ) & 0xff;
     52              g0 = (Color0 >>  8) & 0xff;
     53              b0 = (Color0 >> 16) & 0xff;
     54              a0 = (Color0 >> 24) & 0xff;
     55              r1 = (Color1      ) & 0xff;
     56              g1 = (Color1 >>  8) & 0xff;
     57              b1 = (Color1 >> 16) & 0xff;
     58              a1 = (Color1 >> 24) & 0xff;
     59              NumLines = 1;
     60              ColorOld = Color0;
   \   00000074   04908DE5           STR      R9,[SP, #+4]
   \   00000078   010040E0           SUB      R0,R0,R1
   \   0000007C   FF1009E2           AND      R1,R9,#0xFF
   \   00000080   14108DE5           STR      R1,[SP, #+20]
   \   00000084   FF10A0E3           MOV      R1,#+255
   \   00000088   291401E0           AND      R1,R1,R9, LSR #+8
   \   0000008C   10108DE5           STR      R1,[SP, #+16]
   \   00000090   FF10A0E3           MOV      R1,#+255
   \   00000094   291801E0           AND      R1,R1,R9, LSR #+16
   \   00000098   0C108DE5           STR      R1,[SP, #+12]
   \   0000009C   291CA0E1           LSR      R1,R9,#+24
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   08108DE5           STR      R1,[SP, #+8]
   \   000000A8   017050E2           SUBS     R7,R0,#+1
   \   000000AC   FF10A0E3           MOV      R1,#+255
   \   000000B0   FF20A0E3           MOV      R2,#+255
     61              for (y = y0; y <= y1; y++) {
   \   000000B4   2C909DE5           LDR      R9,[SP, #+44]
   \   000000B8   30C09DE5           LDR      R12,[SP, #+48]
   \   000000BC   0170A003           MOVEQ    R7,#+1
   \   000000C0   FF0008E2           AND      R0,R8,#0xFF
   \   000000C4   281401E0           AND      R1,R1,R8, LSR #+8
   \   000000C8   282802E0           AND      R2,R2,R8, LSR #+16
   \   000000CC   283CA0E1           LSR      R3,R8,#+24
   \   000000D0   0180A0E3           MOV      R8,#+1
   \   000000D4   09005CE1           CMP      R12,R9
   \   000000D8   580000BA           BLT      ??_DrawGradient_4
   \   000000DC   08E09DE5           LDR      LR,[SP, #+8]
   \   000000E0   0CC09DE5           LDR      R12,[SP, #+12]
   \   000000E4   0E3043E0           SUB      R3,R3,LR
   \   000000E8   0C2042E0           SUB      R2,R2,R12
   \   000000EC   24308DE5           STR      R3,[SP, #+36]
   \   000000F0   20208DE5           STR      R2,[SP, #+32]
   \   000000F4   10309DE5           LDR      R3,[SP, #+16]
   \   000000F8   14209DE5           LDR      R2,[SP, #+20]
   \   000000FC   031041E0           SUB      R1,R1,R3
   \   00000100   020040E0           SUB      R0,R0,R2
   \   00000104   00A0A0E3           MOV      R10,#+0
   \   00000108   1C108DE5           STR      R1,[SP, #+28]
   \   0000010C   18008DE5           STR      R0,[SP, #+24]
     62                d = (y - y0);
     63                r = (r0 + ((r1 - r0) * d) / ySize1) & 0xff;
     64                g = (g0 + ((g1 - g0) * d) / ySize1) & 0xff;
     65                b = (b0 + ((b1 - b0) * d) / ySize1) & 0xff;
     66                a = (a0 + ((a1 - a0) * d) / ySize1) & 0xff;
     67                ColorNew = r | (g << 8) | ((U32)b << 16) | ((U32)a << 24);
   \                     ??_DrawGradient_5:
   \   00000110   18009DE5           LDR      R0,[SP, #+24]
   \   00000114   0710A0E1           MOV      R1,R7
   \   00000118   9A0000E0           MUL      R0,R10,R0
   \   0000011C   ........           BL       __aeabi_idiv
   \   00000120   14B09DE5           LDR      R11,[SP, #+20]
   \   00000124   0710A0E1           MOV      R1,R7
   \   00000128   0B0080E0           ADD      R0,R0,R11
   \   0000012C   FF0000E2           AND      R0,R0,#0xFF
   \   00000130   00008DE5           STR      R0,[SP, #+0]
   \   00000134   1C009DE5           LDR      R0,[SP, #+28]
   \   00000138   10B09DE5           LDR      R11,[SP, #+16]
   \   0000013C   9A0000E0           MUL      R0,R10,R0
   \   00000140   ........           BL       __aeabi_idiv
   \   00000144   0B0080E0           ADD      R0,R0,R11
   \   00000148   FF1000E2           AND      R1,R0,#0xFF
   \   0000014C   00009DE5           LDR      R0,[SP, #+0]
   \   00000150   0CB09DE5           LDR      R11,[SP, #+12]
   \   00000154   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000158   00008DE5           STR      R0,[SP, #+0]
   \   0000015C   20009DE5           LDR      R0,[SP, #+32]
   \   00000160   0710A0E1           MOV      R1,R7
   \   00000164   9A0000E0           MUL      R0,R10,R0
   \   00000168   ........           BL       __aeabi_idiv
   \   0000016C   0B0080E0           ADD      R0,R0,R11
   \   00000170   FF1000E2           AND      R1,R0,#0xFF
   \   00000174   00009DE5           LDR      R0,[SP, #+0]
   \   00000178   08B09DE5           LDR      R11,[SP, #+8]
   \   0000017C   010880E1           ORR      R0,R0,R1, LSL #+16
   \   00000180   00008DE5           STR      R0,[SP, #+0]
   \   00000184   24009DE5           LDR      R0,[SP, #+36]
   \   00000188   0710A0E1           MOV      R1,R7
   \   0000018C   9A0000E0           MUL      R0,R10,R0
   \   00000190   ........           BL       __aeabi_idiv
   \   00000194   0B1080E0           ADD      R1,R0,R11
   \   00000198   00009DE5           LDR      R0,[SP, #+0]
   \   0000019C   01BC80E1           ORR      R11,R0,R1, LSL #+24
     68                if (y > y0) {
   \   000001A0   2C009DE5           LDR      R0,[SP, #+44]
   \   000001A4   090050E1           CMP      R0,R9
   \   000001A8   1E0000AA           BGE      ??_DrawGradient_6
     69                  if (ColorNew == ColorOld) {
   \   000001AC   04009DE5           LDR      R0,[SP, #+4]
   \   000001B0   00005BE1           CMP      R11,R0
     70                    NumLines++;
   \   000001B4   01808802           ADDEQ    R8,R8,#+1
   \   000001B8   1A00000A           BEQ      ??_DrawGradient_6
     71                  } else {
     72                    LCD_SetColor(ColorOld);
   \   000001BC   ........           BL       LCD_SetColor
     73                    if (NumLines > 1) {
   \   000001C0   010049E2           SUB      R0,R9,#+1
   \   000001C4   020058E3           CMP      R8,#+2
   \   000001C8   0E0000BA           BLT      ??_DrawGradient_7
     74                      if (v) {
   \   000001CC   64109DE5           LDR      R1,[SP, #+100]
   \   000001D0   08C049E0           SUB      R12,R9,R8
   \   000001D4   000051E3           CMP      R1,#+0
   \   000001D8   0500000A           BEQ      ??_DrawGradient_8
     75                        LCD_FillRect(x0, y - NumLines, x1, y - 1);
   \   000001DC   0030A0E1           MOV      R3,R0
   \   000001E0   0520A0E1           MOV      R2,R5
   \   000001E4   0C10A0E1           MOV      R1,R12
   \   000001E8   0400A0E1           MOV      R0,R4
   \                     ??_DrawGradient_9:
   \   000001EC   ........           BL       LCD_FillRect
   \   000001F0   0B0000EA           B        ??_DrawGradient_10
     76                      } else {
     77                        LCD_FillRect(y - NumLines, x0, y - 1, x1);
   \                     ??_DrawGradient_8:
   \   000001F4   0020A0E1           MOV      R2,R0
   \   000001F8   0530A0E1           MOV      R3,R5
   \   000001FC   0410A0E1           MOV      R1,R4
   \   00000200   0C00A0E1           MOV      R0,R12
   \   00000204   F8FFFFEA           B        ??_DrawGradient_9
     78                      }
     79                    } else {
     80                      if (v) {
   \                     ??_DrawGradient_7:
   \   00000208   64109DE5           LDR      R1,[SP, #+100]
   \   0000020C   0520A0E1           MOV      R2,R5
   \   00000210   000051E3           CMP      R1,#+0
     81                        pFunc(x0, y - 1, x1);
   \   00000214   0010A011           MOVNE    R1,R0
   \   00000218   0400A011           MOVNE    R0,R4
     82                      } else {
     83                        pFunc(y - 1, x0, x1);
   \   0000021C   0410A001           MOVEQ    R1,R4
   \   00000220   36FF2FE1           BLX      R6
     84                      }
     85                    }
     86                    NumLines = 1;
   \                     ??_DrawGradient_10:
   \   00000224   0180A0E3           MOV      R8,#+1
     87                  }
     88                }
     89                ColorOld = ColorNew;
     90              }
   \                     ??_DrawGradient_6:
   \   00000228   30009DE5           LDR      R0,[SP, #+48]
   \   0000022C   019089E2           ADD      R9,R9,#+1
   \   00000230   04B08DE5           STR      R11,[SP, #+4]
   \   00000234   01A08AE2           ADD      R10,R10,#+1
   \   00000238   090050E1           CMP      R0,R9
   \   0000023C   B3FFFFAA           BGE      ??_DrawGradient_5
     91              LCD_SetColor(ColorOld);
   \                     ??_DrawGradient_4:
   \   00000240   04009DE5           LDR      R0,[SP, #+4]
   \   00000244   ........           BL       LCD_SetColor
     92              y = y1;
     93              if (NumLines > 1) {
   \   00000248   020058E3           CMP      R8,#+2
   \   0000024C   0E0000BA           BLT      ??_DrawGradient_11
   \   00000250   30009DE5           LDR      R0,[SP, #+48]
   \   00000254   64109DE5           LDR      R1,[SP, #+100]
   \   00000258   080040E0           SUB      R0,R0,R8
   \   0000025C   010080E2           ADD      R0,R0,#+1
   \   00000260   000051E3           CMP      R1,#+0
   \   00000264   0400000A           BEQ      ??_DrawGradient_12
     94                if (v) {
     95                  LCD_FillRect(x0, y - NumLines + 1, x1, y);
   \   00000268   0010A0E1           MOV      R1,R0
   \   0000026C   30309DE5           LDR      R3,[SP, #+48]
   \   00000270   0520A0E1           MOV      R2,R5
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   74FFFFEA           B        ??_DrawGradient_2
     96                } else {
     97                  LCD_FillRect(y - NumLines + 1, x0, y, x1);
   \                     ??_DrawGradient_12:
   \   0000027C   0530A0E1           MOV      R3,R5
   \   00000280   30209DE5           LDR      R2,[SP, #+48]
   \   00000284   0410A0E1           MOV      R1,R4
   \   00000288   70FFFFEA           B        ??_DrawGradient_2
     98                }
     99              } else {
    100                if (v) {
   \                     ??_DrawGradient_11:
   \   0000028C   64009DE5           LDR      R0,[SP, #+100]
   \   00000290   0520A0E1           MOV      R2,R5
   \   00000294   000050E3           CMP      R0,#+0
    101                  pFunc(x0, y, x1);
   \   00000298   30109D15           LDRNE    R1,[SP, #+48]
   \   0000029C   0400A011           MOVNE    R0,R4
    102                } else {
    103                  pFunc(y, x0, x1);
   \   000002A0   0410A001           MOVEQ    R1,R4
   \   000002A4   30009D05           LDREQ    R0,[SP, #+48]
   \   000002A8   36FF2FE1           BLX      R6
    104                }
    105              }
    106            }
    107            LCD_SetColor(ColorSic);
   \                     ??_DrawGradient_3:
   \   000002AC   28009DE5           LDR      R0,[SP, #+40]
   \   000002B0   34D08DE2           ADD      SP,SP,#+52
   \   000002B4   F04FBDE8           POP      {R4-R11,LR}
   \   000002B8   ........           B        LCD_SetColor     ;; tailcall
    108          }
    109          
    110          /*********************************************************************
    111          *
    112          *       Public code
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       GUI_DrawGradientV
    119          */

   \                                 In section .text, align 4, keep-with-next
    120          void GUI_DrawGradientV(int x0, int y0, int x1, int y1, GUI_COLOR Color0, GUI_COLOR Color1) {
   \                     GUI_DrawGradientV:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   38509DE5           LDR      R5,[SP, #+56]
   \   0000001C   3C609DE5           LDR      R6,[SP, #+60]
    121            #if (GUI_WINSUPPORT)
    122              GUI_RECT r;
    123            #endif
    124            GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
    125            #if (GUI_WINSUPPORT)
    126              WM_ADDORG(x0,y0);
   \   00000024   ........           LDR      R0,??DataTable1
   \   00000028   401090E5           LDR      R1,[R0, #+64]
   \   0000002C   440090E5           LDR      R0,[R0, #+68]
   \   00000030   077081E0           ADD      R7,R1,R7
   \   00000034   099080E0           ADD      R9,R0,R9
    127              WM_ADDORG(x1,y1);
   \   00000038   088081E0           ADD      R8,R1,R8
   \   0000003C   044080E0           ADD      R4,R0,R4
    128              r.x0 = x0;
   \   00000040   B071CDE1           STRH     R7,[SP, #+16]
    129              r.x1 = x1;
   \   00000044   B481CDE1           STRH     R8,[SP, #+20]
    130              r.y0 = y0;
   \   00000048   B291CDE1           STRH     R9,[SP, #+18]
    131              r.y1 = y1;
   \   0000004C   B641CDE1           STRH     R4,[SP, #+22]
    132              WM_ITERATE_START(&r); {
   \   00000050   10008DE2           ADD      R0,SP,#+16
   \   00000054   ........           BL       WM__InitIVRSearch
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00000A           BEQ      ??GUI_DrawGradientV_0
    133            #endif
    134            _DrawGradient(x0, y0, x1, y1, Color0, Color1, LCD_DrawHLine, 1);
   \                     ??GUI_DrawGradientV_1:
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   0C008DE5           STR      R0,[SP, #+12]
   \   00000068   ........           LDR      R0,??DataTable1_1
   \   0000006C   04608DE5           STR      R6,[SP, #+4]
   \   00000070   08008DE5           STR      R0,[SP, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   0430A0E1           MOV      R3,R4
   \   0000007C   0820A0E1           MOV      R2,R8
   \   00000080   0910A0E1           MOV      R1,R9
   \   00000084   0700A0E1           MOV      R0,R7
   \   00000088   ........           BL       _DrawGradient
    135            #if (GUI_WINSUPPORT)
    136              } WM_ITERATE_END();
   \   0000008C   ........           BL       WM__GetNextIVR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   F1FFFF1A           BNE      ??GUI_DrawGradientV_1
    137            #endif
    138            GUI_UNLOCK();
   \                     ??GUI_DrawGradientV_0:
   \   00000098   ........           BL       GUI_Unlock
    139          }
   \   0000009C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000A0   F083BDE8           POP      {R4-R9,PC}       ;; return
    140          
    141          /*********************************************************************
    142          *
    143          *       GUI_DrawGradientH
    144          */

   \                                 In section .text, align 4, keep-with-next
    145          void GUI_DrawGradientH(int x0, int y0, int x1, int y1, GUI_COLOR Color0, GUI_COLOR Color1) {
   \                     GUI_DrawGradientH:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   38509DE5           LDR      R5,[SP, #+56]
   \   0000001C   3C609DE5           LDR      R6,[SP, #+60]
    146            #if (GUI_WINSUPPORT)
    147              GUI_RECT r;
    148            #endif
    149            GUI_LOCK();
   \   00000020   ........           BL       GUI_Lock
    150            #if (GUI_WINSUPPORT)
    151              WM_ADDORG(x0,y0);
   \   00000024   ........           LDR      R0,??DataTable1
   \   00000028   401090E5           LDR      R1,[R0, #+64]
   \   0000002C   440090E5           LDR      R0,[R0, #+68]
   \   00000030   077081E0           ADD      R7,R1,R7
   \   00000034   099080E0           ADD      R9,R0,R9
    152              WM_ADDORG(x1,y1);
   \   00000038   088081E0           ADD      R8,R1,R8
   \   0000003C   044080E0           ADD      R4,R0,R4
    153              r.x0 = x0;
   \   00000040   B071CDE1           STRH     R7,[SP, #+16]
    154              r.x1 = x1;
   \   00000044   B481CDE1           STRH     R8,[SP, #+20]
    155              r.y0 = y0;
   \   00000048   B291CDE1           STRH     R9,[SP, #+18]
    156              r.y1 = y1;
   \   0000004C   B641CDE1           STRH     R4,[SP, #+22]
    157              WM_ITERATE_START(&r); {
   \   00000050   10008DE2           ADD      R0,SP,#+16
   \   00000054   ........           BL       WM__InitIVRSearch
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00000A           BEQ      ??GUI_DrawGradientH_0
    158            #endif
    159            _DrawGradient(y0, x0, y1, x1, Color0, Color1, LCD_DrawVLine, 0);
   \                     ??GUI_DrawGradientH_1:
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   0C008DE5           STR      R0,[SP, #+12]
   \   00000068   ........           LDR      R0,??DataTable1_2
   \   0000006C   04608DE5           STR      R6,[SP, #+4]
   \   00000070   08008DE5           STR      R0,[SP, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   0830A0E1           MOV      R3,R8
   \   0000007C   0420A0E1           MOV      R2,R4
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   0900A0E1           MOV      R0,R9
   \   00000088   ........           BL       _DrawGradient
    160            #if (GUI_WINSUPPORT)
    161              } WM_ITERATE_END();
   \   0000008C   ........           BL       WM__GetNextIVR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   F1FFFF1A           BNE      ??GUI_DrawGradientH_1
    162            #endif
    163            GUI_UNLOCK();
   \                     ??GUI_DrawGradientH_0:
   \   00000098   ........           BL       GUI_Unlock
    164          }
   \   0000009C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000A0   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_DrawHLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_DrawVLine
    165          
    166          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     GUI_DrawGradientH     56
     GUI_DrawGradientV     56
     _DrawGradient         88


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     _DrawGradient      700
     GUI_DrawGradientV  164
     GUI_DrawGradientH  164
     ??DataTable1         4
     ??DataTable1_1       4
     ??DataTable1_2       4

 
 1 040 bytes in section .text
 
 1 040 bytes of CODE memory

Errors: none
Warnings: none
