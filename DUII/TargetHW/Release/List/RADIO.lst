###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:26 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\RADIO.c                             #
#    Command line =  C:\DUII\TargetHW\GUI\RADIO.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\RADIO.lst                  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\RADIO.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\RADIO.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : RADIO.c
     19          Purpose     : Implementation of radio button widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include "GUI_Private.h"
     25          #include "RADIO_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Private config defaults
     32          *
     33          **********************************************************************
     34          */
     35          #ifndef   RADIO_DRAW_SKIN_DEFAULT
     36            #define RADIO_DRAW_SKIN_DEFAULT NULL
     37          #endif
     38          
     39          /*********************************************************************
     40          *
     41          *       Public data
     42          *
     43          **********************************************************************
     44          */
     45          
     46          RADIO_PROPS RADIO__DefaultProps = {
     47            RADIO_DEFAULT_BKCOLOR,
     48            RADIO_DEFAULT_TEXT_COLOR,
     49            RADIO_FOCUSCOLOR_DEFAULT,
     50            RADIO_FONT_DEFAULT,
     51            {
     52              RADIO_IMAGE0_DEFAULT,
     53              RADIO_IMAGE1_DEFAULT,
     54            },
     55            RADIO_IMAGE_CHECK_DEFAULT,
     56            {
     57              RADIO__GetButtonSize,
     58              RADIO_DRAW_SKIN_DEFAULT
     59            }
     60          };
     61          

   \                                 In section .bss, align 4
     62          tRADIO_SetValue * RADIO__pfHandleSetValue;
   \                     RADIO__pfHandleSetValue:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     RADIO__DefaultProps:
   \   00000000   C0C0C0000000       DC32 12632256, 0, 0, GUI_Font13_1, RADIO__abmRadio
   \              000000000000
   \              ............
   \              ....        
   \   00000014   ............       DC32 RADIO__abmRadio + 14H, RADIO__bmCheck, RADIO__GetButtonSize, 0H
   \              ............
   \              00000000    
     63          
     64          WIDGET_SKIN const * RADIO__pSkinDefault = &RADIO__SkinClassic;
   \                     RADIO__pSkinDefault:
   \   00000024   ........           DC32 RADIO__SkinClassic
     65          
     66          /*********************************************************************
     67          *
     68          *       Static routines
     69          *
     70          **********************************************************************
     71          */
     72          
     73          /*********************************************************************
     74          *
     75          *       _OnPaint
     76          *
     77          * Purpose:
     78          *   Paints the RADIO button.
     79          *   The button can actually consist of multiple buttons (NumItems).
     80          *   The focus rectangle will be drawn on top of the text if any text is set,
     81          *   otherwise around the entire buttons.
     82          */
     83          static void _OnPaint(RADIO_Handle hObj) {
     84            RADIO_Obj * pObj;
     85            WIDGET_PAINT * pfPaint;
     86          
     87            pObj = RADIO_LOCK_H(hObj);
     88            pfPaint = pObj->pWidgetSkin->pfPaint;
     89            GUI_UNLOCK_H(pObj);
     90            if (pfPaint) {
     91              pfPaint(hObj);
     92            }
     93          }
     94          
     95          /*********************************************************************
     96          *
     97          *       _OnTouch
     98          */

   \                                 In section .text, align 4, keep-with-next
     99          static void _OnTouch(RADIO_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnTouch:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0190A0E1           MOV      R9,R1
   \   00000008   0040A0E1           MOV      R4,R0
    100            RADIO_Obj * pObj;
    101            int Notification, Spacing, Height, Id;
    102            int Hit = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    103            GUI_PID_STATE * pState = (GUI_PID_STATE *)pMsg->Data.p;
   \   00000010   0CA099E5           LDR      R10,[R9, #+12]
    104            pObj = RADIO_LOCK_H(hObj);
   \   00000014   ........           BL       GUI_ALLOC_LockH
   \   00000018   0080A0E1           MOV      R8,R0
    105            Spacing = pObj->Spacing;
    106            if (pObj->GroupId) {
   \   0000001C   6600D8E5           LDRB     R0,[R8, #+102]
   \   00000020   B266D8E1           LDRH     R6,[R8, #+98]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400000A           BEQ      ??_OnTouch_0
    107              Height = pObj->Widget.Win.Rect.y1 - pObj->Widget.Win.Rect.y0 + 1;
   \   0000002C   F600D8E1           LDRSH    R0,[R8, #+6]
   \   00000030   F210D8E1           LDRSH    R1,[R8, #+2]
   \   00000034   010040E0           SUB      R0,R0,R1
   \   00000038   017080E2           ADD      R7,R0,#+1
   \   0000003C   050000EA           B        ??_OnTouch_1
    108            } else {
    109              Height = ((RADIO_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate)->pfGetButtonSize(hObj) + RADIO_BORDER * 2;
   \                     ??_OnTouch_0:
   \   00000040   581098E5           LDR      R1,[R8, #+88]
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   081091E5           LDR      R1,[R1, #+8]
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   31FF2FE1           BLX      R1
   \   00000054   047080E2           ADD      R7,R0,#+4
    110            }
    111            Id = pObj->Widget.Id;
   \                     ??_OnTouch_1:
   \   00000058   F083D8E1           LDRSH    R8,[R8, #+48]
    112            GUI_UNLOCK_H(pObj);
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
    113            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
   \   00000060   0C0099E5           LDR      R0,[R9, #+12]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   3B00000A           BEQ      ??_OnTouch_2
    114              if (pState->Pressed) {
   \   0000006C   0800DAE5           LDRB     R0,[R10, #+8]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   3500000A           BEQ      ??_OnTouch_3
    115                int y, Sel;
    116                y   = pState->y;
   \   00000078   04A09AE5           LDR      R10,[R10, #+4]
    117                Sel = y   / Spacing;
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0A00A0E1           MOV      R0,R10
   \   00000084   ........           BL       __aeabi_idiv
   \   00000088   0090A0E1           MOV      R9,R0
    118                y  -= Sel * Spacing;
    119                if (y <= Height) {
   \   0000008C   960900E0           MUL      R0,R6,R9
   \   00000090   00004AE0           SUB      R0,R10,R0
   \   00000094   000057E1           CMP      R7,R0
   \   00000098   240000BA           BLT      ??_OnTouch_4
    120                  RADIO_SetValue(hObj, Sel);
   \   0000009C   000054E3           CMP      R4,#+0
   \   000000A0   2200000A           BEQ      ??_OnTouch_4
   \   000000A4   ........           BL       GUI_Lock
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       GUI_ALLOC_LockH
   \   000000B0   6660D0E5           LDRB     R6,[R0, #+102]
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
   \   000000B8   000056E3           CMP      R6,#+0
   \   000000BC   0700000A           BEQ      ??_OnTouch_5
   \   000000C0   ........           LDR      R0,??DataTable3
   \   000000C4   002090E5           LDR      R2,[R0, #+0]
   \   000000C8   000052E3           CMP      R2,#+0
   \   000000CC   0300000A           BEQ      ??_OnTouch_5
   \   000000D0   0910A0E1           MOV      R1,R9
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   32FF2FE1           BLX      R2
   \   000000DC   120000EA           B        ??_OnTouch_6
   \                     ??_OnTouch_5:
   \   000000E0   000059E3           CMP      R9,#+0
   \   000000E4   0090A043           MOVMI    R9,#+0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       GUI_ALLOC_LockH
   \   000000F0   B416D0E1           LDRH     R1,[R0, #+100]
   \   000000F4   010059E1           CMP      R9,R1
   \   000000F8   019041A2           SUBGE    R9,R1,#+1
   \   000000FC   F016D0E1           LDRSH    R1,[R0, #+96]
   \   00000100   010059E1           CMP      R9,R1
   \   00000104   0100001A           BNE      ??_OnTouch_7
   \   00000108   ........           BL       GUI_ALLOC_UnlockH
   \   0000010C   060000EA           B        ??_OnTouch_6
   \                     ??_OnTouch_7:
   \   00000110   B096C0E1           STRH     R9,[R0, #+96]
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       WM_InvalidateWindow
   \   0000011C   ........           BL       GUI_ALLOC_UnlockH
   \   00000120   0510A0E3           MOV      R1,#+5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       WM_NotifyParent
   \                     ??_OnTouch_6:
   \   0000012C   ........           BL       GUI_Unlock
    121                }
    122                if (WM_IsFocussable(hObj)) {
   \                     ??_OnTouch_4:
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           BL       WM_IsFocussable
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0100000A           BEQ      ??_OnTouch_8
    123                  WM_SetFocus(hObj);
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       WM_SetFocus
    124                }
    125                Notification = WM_NOTIFICATION_CLICKED;
   \                     ??_OnTouch_8:
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   030000EA           B        ??_OnTouch_9
    126              } else {
    127                Hit = 1;
   \                     ??_OnTouch_3:
   \   00000150   0150A0E3           MOV      R5,#+1
    128                Notification = WM_NOTIFICATION_RELEASED;
   \   00000154   0210A0E3           MOV      R1,#+2
   \   00000158   000000EA           B        ??_OnTouch_9
    129              }
    130            } else {
    131              Notification = WM_NOTIFICATION_MOVED_OUT;
   \                     ??_OnTouch_2:
   \   0000015C   0310A0E3           MOV      R1,#+3
    132            }
    133            WM_NotifyParent(hObj, Notification);
   \                     ??_OnTouch_9:
   \   00000160   0400A0E1           MOV      R0,R4
   \   00000164   ........           BL       WM_NotifyParent
    134            if (Hit == 1) {
   \   00000168   010055E3           CMP      R5,#+1
   \   0000016C   0100001A           BNE      ??_OnTouch_10
    135              GUI_DEBUG_LOG("RADIO: Hit\n");
    136              GUI_StoreKey(Id);
   \   00000170   0800A0E1           MOV      R0,R8
   \   00000174   ........           BL       GUI_StoreKey
    137            }
    138          }
   \                     ??_OnTouch_10:
   \   00000178   F087BDE8           POP      {R4-R10,PC}      ;; return
    139          
    140          /*********************************************************************
    141          *
    142          *       _OnKey
    143          */
    144          static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE * pMsg) {
    145            WM_KEY_INFO * pKeyInfo;
    146            pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
    147            if (pKeyInfo->PressedCnt > 0) {
    148              switch (pKeyInfo->Key) {
    149              case GUI_KEY_RIGHT:
    150              case GUI_KEY_DOWN:
    151                RADIO_Inc(hObj);
    152                break;                    /* Send to parent by not doing anything */
    153              case GUI_KEY_LEFT:
    154              case GUI_KEY_UP:
    155                RADIO_Dec(hObj);
    156                break;                    /* Send to parent by not doing anything */
    157              default:
    158                return;
    159              }
    160            }
    161          }
    162          
    163          /*********************************************************************
    164          *
    165          *       Private routines
    166          *
    167          **********************************************************************
    168          */
    169          /*********************************************************************
    170          *
    171          *       RADIO_LockH
    172          */
    173          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    174          RADIO_Obj * RADIO_LockH(RADIO_Handle h) {
    175            RADIO_Obj * p = (RADIO_Obj *)GUI_LOCK_H(h);
    176            if (p) {
    177              if (p->DebugId != RADIO_ID) {
    178                GUI_DEBUG_ERROROUT("RADIO.c: Wrong handle type or Object not init'ed");
    179                return 0;
    180              }
    181            }
    182            return p;
    183          }
    184          #endif
    185          
    186          /*********************************************************************
    187          *
    188          *       RADIO__GetButtonSize
    189          */

   \                                 In section .text, align 4, keep-with-next
    190          unsigned RADIO__GetButtonSize(RADIO_Handle hObj) {
   \                     RADIO__GetButtonSize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
    191            RADIO_Obj * pObj;
    192            RADIO_SKIN_PRIVATE * pSkinPrivate;
    193            WIDGET_ITEM_DRAW_INFO ItemInfo;
    194            
    195            pObj = RADIO_LOCK_H(hObj);
    196            pSkinPrivate = (RADIO_SKIN_PRIVATE *)pObj->pWidgetSkin->pSkinPrivate;
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   580090E5           LDR      R0,[R0, #+88]
   \   00000014   085090E5           LDR      R5,[R0, #+8]
    197            GUI_UNLOCK_H(pObj);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    198            ItemInfo.hWin = hObj;
    199            ItemInfo.Cmd = WIDGET_ITEM_GET_BUTTONSIZE;
   \   0000001C   1710A0E3           MOV      R1,#+23
   \   00000020   00408DE5           STR      R4,[SP, #+0]
   \   00000024   04108DE5           STR      R1,[SP, #+4]
    200            return pSkinPrivate->pfDrawSkin(&ItemInfo);
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   041095E5           LDR      R1,[R5, #+4]
   \   00000030   31FF2FE1           BLX      R1
   \   00000034   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    201          }
    202          
    203          /*********************************************************************
    204          *
    205          *       Exported routines, modul internal
    206          *
    207          **********************************************************************
    208          */
    209          /*********************************************************************
    210          *
    211          *       RADIO__SetValue
    212          */

   \                                 In section .text, align 4, keep-with-next
    213          void RADIO__SetValue(RADIO_Handle hObj, int v) {
   \                     RADIO__SetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    214            RADIO_Obj * pObj;
    215            pObj = RADIO_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   B416D0E1           LDRH     R1,[R0, #+100]
   \   00000018   010055E1           CMP      R5,R1
    216            if (v >= (int)pObj->NumItems) {
    217              v = pObj->NumItems - 1;
   \   0000001C   015041A2           SUBGE    R5,R1,#+1
    218            }
    219            if (v != pObj->Sel) {
   \   00000020   F016D0E1           LDRSH    R1,[R0, #+96]
   \   00000024   010055E1           CMP      R5,R1
   \   00000028   0700000A           BEQ      ??RADIO__SetValue_0
    220              pObj->Sel = v;
   \   0000002C   B056C0E1           STRH     R5,[R0, #+96]
    221              WM_InvalidateWindow(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
    222              GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    223              WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   0000003C   0510A0E3           MOV      R1,#+5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       WM_NotifyParent
   \   00000048   000000EA           B        ??RADIO__SetValue_1
    224            } else {
    225              GUI_UNLOCK_H(pObj);
   \                     ??RADIO__SetValue_0:
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
    226            }
    227          }
   \                     ??RADIO__SetValue_1:
   \   00000050   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
    228          
    229          /*********************************************************************
    230          *
    231          *       Exported routines:  Callback
    232          *
    233          **********************************************************************
    234          */
    235          /*********************************************************************
    236          *
    237          *       RADIO_Callback
    238          */

   \                                 In section .text, align 4, keep-with-next
    239          void RADIO_Callback (WM_MESSAGE * pMsg) {
   \                     RADIO_Callback:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    240            RADIO_Handle hObj;
    241            RADIO_Obj *   pObj;
    242            hObj = pMsg->hWin;
   \   00000008   044095E5           LDR      R4,[R5, #+4]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
    243            /* Let widget handle the standard messages */
    244            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0510A0E1           MOV      R1,R5
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   5300000A           BEQ      ??RADIO_Callback_2
    245              return;
    246            }
    247            switch (pMsg->MsgId) {
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   0B0040E2           SUB      R0,R0,#+11
   \   0000002C   200050E3           CMP      R0,#+32
   \   00000030   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??RADIO_Callback_0:
   \   00000034   4C00008A           BHI      ??RADIO_Callback_3
   \   00000038   460000EA           B        ??RADIO_Callback_4
   \   0000003C   2E0000EA           B        ??RADIO_Callback_5
   \   00000040   490000EA           B        ??RADIO_Callback_3
   \   00000044   300000EA           B        ??RADIO_Callback_6
   \   00000048   1B0000EA           B        ??RADIO_Callback_7
   \   0000004C   460000EA           B        ??RADIO_Callback_3
   \   00000050   450000EA           B        ??RADIO_Callback_3
   \   00000054   440000EA           B        ??RADIO_Callback_3
   \   00000058   430000EA           B        ??RADIO_Callback_3
   \   0000005C   420000EA           B        ??RADIO_Callback_3
   \   00000060   410000EA           B        ??RADIO_Callback_3
   \   00000064   400000EA           B        ??RADIO_Callback_3
   \   00000068   3F0000EA           B        ??RADIO_Callback_3
   \   0000006C   3E0000EA           B        ??RADIO_Callback_3
   \   00000070   3D0000EA           B        ??RADIO_Callback_3
   \   00000074   3C0000EA           B        ??RADIO_Callback_3
   \   00000078   3B0000EA           B        ??RADIO_Callback_3
   \   0000007C   3A0000EA           B        ??RADIO_Callback_3
   \   00000080   390000EA           B        ??RADIO_Callback_3
   \   00000084   380000EA           B        ??RADIO_Callback_3
   \   00000088   370000EA           B        ??RADIO_Callback_3
   \   0000008C   360000EA           B        ??RADIO_Callback_3
   \   00000090   350000EA           B        ??RADIO_Callback_3
   \   00000094   340000EA           B        ??RADIO_Callback_3
   \   00000098   330000EA           B        ??RADIO_Callback_3
   \   0000009C   320000EA           B        ??RADIO_Callback_3
   \   000000A0   310000EA           B        ??RADIO_Callback_3
   \   000000A4   300000EA           B        ??RADIO_Callback_3
   \   000000A8   2F0000EA           B        ??RADIO_Callback_3
   \   000000AC   2E0000EA           B        ??RADIO_Callback_3
   \   000000B0   2D0000EA           B        ??RADIO_Callback_3
   \   000000B4   2C0000EA           B        ??RADIO_Callback_3
   \   000000B8   090000EA           B        ??RADIO_Callback_8
    248            case WM_PAINT:
    249              GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
    250              _OnPaint(hObj);
   \                     ??RADIO_Callback_7:
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       GUI_ALLOC_LockH
   \   000000C4   580090E5           LDR      R0,[R0, #+88]
   \   000000C8   005090E5           LDR      R5,[R0, #+0]
   \   000000CC   ........           BL       GUI_ALLOC_UnlockH
   \   000000D0   000055E3           CMP      R5,#+0
   \   000000D4   2600000A           BEQ      ??RADIO_Callback_2
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   35FF2FE1           BLX      R5
   \   000000E0   230000EA           B        ??RADIO_Callback_2
    251              return;
    252            case WM_GET_RADIOGROUP:
    253              pObj = RADIO_LOCK_H(hObj);
    254              pMsg->Data.v = pObj->GroupId;
   \                     ??RADIO_Callback_8:
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       GUI_ALLOC_LockH
   \   000000EC   6600D0E5           LDRB     R0,[R0, #+102]
   \   000000F0   0C0085E5           STR      R0,[R5, #+12]
    255              GUI_UNLOCK_H(pObj);
   \   000000F4   ........           BL       GUI_ALLOC_UnlockH
    256              return;
   \   000000F8   1D0000EA           B        ??RADIO_Callback_2
    257            case WM_TOUCH:
    258              _OnTouch(hObj, pMsg);
   \                     ??RADIO_Callback_5:
   \   000000FC   0510A0E1           MOV      R1,R5
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       _OnTouch
    259              break;
   \   00000108   170000EA           B        ??RADIO_Callback_3
    260            case WM_KEY:
    261              _OnKey(hObj, pMsg);
   \                     ??RADIO_Callback_6:
   \   0000010C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000110   041090E5           LDR      R1,[R0, #+4]
   \   00000114   010051E3           CMP      R1,#+1
   \   00000118   130000BA           BLT      ??RADIO_Callback_3
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   100040E2           SUB      R0,R0,#+16
   \   00000124   030050E3           CMP      R0,#+3
   \   00000128   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??RADIO_Callback_1:
   \   0000012C   0E00008A           BHI      ??RADIO_Callback_3
   \   00000130   020000EA           B        ??RADIO_Callback_9
   \   00000134   010000EA           B        ??RADIO_Callback_9
   \   00000138   040000EA           B        ??RADIO_Callback_10
   \   0000013C   030000EA           B        ??RADIO_Callback_10
   \                     ??RADIO_Callback_9:
   \   00000140   0010E0E3           MVN      R1,#+0
   \                     ??RADIO_Callback_11:
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       RADIO_AddValue
   \   0000014C   060000EA           B        ??RADIO_Callback_3
   \                     ??RADIO_Callback_10:
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   FAFFFFEA           B        ??RADIO_Callback_11
    262              break;
    263            case WM_DELETE:
    264              pObj = RADIO_LOCK_H(hObj);
   \                     ??RADIO_Callback_4:
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           BL       GUI_ALLOC_LockH
    265              GUI_ARRAY_Delete(pObj->TextArray);
   \   00000160   5C0090E5           LDR      R0,[R0, #+92]
   \   00000164   ........           BL       GUI_ARRAY_Delete
    266              GUI_UNLOCK_H(pObj);
   \   00000168   ........           BL       GUI_ALLOC_UnlockH
    267              break;
    268            }
    269            WM_DefaultProc(pMsg);
   \                     ??RADIO_Callback_3:
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   ........           BL       WM_DefaultProc
    270          }
   \                     ??RADIO_Callback_2:
   \   00000174   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000178   3080BDE8           POP      {R4,R5,PC}       ;; return
    271          
    272          /*********************************************************************
    273          *
    274          *       Exported routines:  Create
    275          *
    276          **********************************************************************
    277          */
    278          
    279          /* Note: the parameters to a create function may vary.
    280                   Some widgets may have multiple create functions */
    281          
    282          /*********************************************************************
    283          *
    284          *       RADIO_CreateEx
    285          */

   \                                 In section .text, align 4, keep-with-next
    286          RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
    287                                      int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
    288          {
   \                     RADIO_CreateEx:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0290A0E1           MOV      R9,R2
   \   0000000C   03A0A0E1           MOV      R10,R3
   \   00000010   40409DE5           LDR      R4,[SP, #+64]
   \   00000014   44B09DE5           LDR      R11,[SP, #+68]
   \   00000018   48509DE5           LDR      R5,[SP, #+72]
   \   0000001C   50809DE5           LDR      R8,[SP, #+80]
   \   00000020   54709DE5           LDR      R7,[SP, #+84]
    289            RADIO_Handle hObj;
    290            int Height, i;
    291            WM_LOCK();
   \   00000024   ........           BL       GUI_Lock
    292            /* Calculate helper variables */
    293            Height   = RADIO__DefaultProps.apBmRadio[0]->YSize + RADIO_BORDER * 2;
   \   00000028   ........           LDR      R6,??DataTable3_1
    294            Spacing  = (Spacing  <= 0) ? RADIO_SPACING_DEFAULT : Spacing;
   \   0000002C   010057E3           CMP      R7,#+1
   \   00000030   100096E5           LDR      R0,[R6, #+16]
   \   00000034   1470A0B3           MOVLT    R7,#+20
   \   00000038   B210D0E1           LDRH     R1,[R0, #+2]
    295            NumItems = (NumItems <= 0) ? 2                     : NumItems;
   \   0000003C   010058E3           CMP      R8,#+1
   \   00000040   0280A0B3           MOVLT    R8,#+2
    296            if (ySize == 0) {
   \   00000044   00005AE3           CMP      R10,#+0
   \   00000048   041081E2           ADD      R1,R1,#+4
    297              ySize  = Height + ((NumItems - 1) * Spacing);
   \   0000004C   01204802           SUBEQ    R2,R8,#+1
   \   00000050   97122A00           MLAEQ    R10,R7,R2,R1
    298            }
    299            if (xSize == 0) {
   \   00000054   000059E3           CMP      R9,#+0
    300              xSize  = RADIO__DefaultProps.apBmRadio[0]->XSize + RADIO_BORDER * 2;
   \   00000058   B000D001           LDRHEQ   R0,[R0, #+0]
    301            }
    302          #if WM_SUPPORT_TRANSPARENCY
    303            WinFlags |= WM_CF_HASTRANS;
    304          #endif
    305            /* Create the window */
    306            hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
   \   0000005C   00408DE5           STR      R4,[SP, #+0]
   \   00000060   0A30A0E1           MOV      R3,R10
   \   00000064   04908002           ADDEQ    R9,R0,#+4
   \   00000068   3C00A0E3           MOV      R0,#+60
   \   0000006C   0C008DE5           STR      R0,[SP, #+12]
   \   00000070   ........           LDR      R0,??DataTable3_2
   \   00000074   0920A0E1           MOV      R2,R9
   \   00000078   08008DE5           STR      R0,[SP, #+8]
   \   0000007C   01008BE3           ORR      R0,R11,#0x1
   \   00000080   04008DE5           STR      R0,[SP, #+4]
   \   00000084   18109DE5           LDR      R1,[SP, #+24]
   \   00000088   14009DE5           LDR      R0,[SP, #+20]
   \   0000008C   ........           BL       WM_CreateWindowAsChild
   \   00000090   0090B0E1           MOVS     R9,R0
    307            if (hObj) {
   \   00000094   2F00000A           BEQ      ??RADIO_CreateEx_0
    308              GUI_ARRAY TextArray;
    309              RADIO_Obj * pObj;
    310              TextArray = GUI_ARRAY_Create();
   \   00000098   ........           BL       GUI_ARRAY_Create
   \   0000009C   00A0A0E1           MOV      R10,R0
    311              for (i = 0; i < NumItems; i++) {
   \   000000A0   010058E3           CMP      R8,#+1
   \   000000A4   100000BA           BLT      ??RADIO_CreateEx_1
   \   000000A8   010018E3           TST      R8,#0x1
   \   000000AC   0200000A           BEQ      ??RADIO_CreateEx_2
    312                GUI_ARRAY_AddItem(TextArray, NULL, 0);
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   ........           BL       GUI_ARRAY_AddItem
   \                     ??RADIO_CreateEx_2:
   \   000000BC   A8B0B0E1           LSRS     R11,R8,#+1
   \   000000C0   0900000A           BEQ      ??RADIO_CreateEx_1
   \                     ??RADIO_CreateEx_3:
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   0A00A0E1           MOV      R0,R10
   \   000000D0   ........           BL       GUI_ARRAY_AddItem
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   0A00A0E1           MOV      R0,R10
   \   000000E0   ........           BL       GUI_ARRAY_AddItem
    313              }
   \   000000E4   01B05BE2           SUBS     R11,R11,#+1
   \   000000E8   F5FFFF1A           BNE      ??RADIO_CreateEx_3
    314              pObj = (RADIO_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \                     ??RADIO_CreateEx_1:
   \   000000EC   0900A0E1           MOV      R0,R9
   \   000000F0   ........           BL       GUI_ALLOC_LockH
   \   000000F4   00B0A0E1           MOV      R11,R0
    315              /* Init sub-classes */
    316              pObj->TextArray = TextArray;
    317              /* Init widget specific variables */
    318              ExFlags &= RADIO_TEXTPOS_LEFT;
    319              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
   \   000000F8   400F05E2           AND      R0,R5,#0x100
   \   000000FC   5CA08BE5           STR      R10,[R11, #+92]
   \   00000100   102080E3           ORR      R2,R0,#0x10
   \   00000104   4C109DE5           LDR      R1,[SP, #+76]
   \   00000108   0B00A0E1           MOV      R0,R11
   \   0000010C   ........           BL       WIDGET__Init
    320              /* Init member variables */
    321              RADIO_INIT_ID(pObj);
    322              pObj->pWidgetSkin = RADIO__pSkinDefault;
   \   00000110   240096E5           LDR      R0,[R6, #+36]
   \   00000114   58008BE5           STR      R0,[R11, #+88]
    323              pObj->Props = RADIO__DefaultProps;
   \   00000118   0E50B6E8           LDM      R6!,{R1-R3,R12,LR}
   \   0000011C   34008BE2           ADD      R0,R11,#+52
   \   00000120   0E50A0E8           STM      R0!,{R1-R3,R12,LR}
   \   00000124   0E10B6E8           LDM      R6!,{R1-R3,R12}
   \   00000128   246046E2           SUB      R6,R6,#+36
   \   0000012C   0E10A0E8           STM      R0!,{R1-R3,R12}
    324              pObj->Props.BkColor= WM_GetBkColor(hParent);
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           BL       WM_GetBkColor
   \   00000138   34008BE5           STR      R0,[R11, #+52]
    325              pObj->NumItems     = NumItems;
   \   0000013C   B486CBE1           STRH     R8,[R11, #+100]
    326              pObj->Spacing      = Spacing;
   \   00000140   B276CBE1           STRH     R7,[R11, #+98]
    327              GUI_UNLOCK_H(pObj);
   \   00000144   ........           BL       GUI_ALLOC_UnlockH
    328              RADIO__pSkinDefault->pfCreate(hObj);
   \   00000148   241096E5           LDR      R1,[R6, #+36]
   \   0000014C   0900A0E1           MOV      R0,R9
   \   00000150   041091E5           LDR      R1,[R1, #+4]
   \   00000154   31FF2FE1           BLX      R1
    329            } else {
    330              GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
    331            }
    332            WM_UNLOCK();
   \                     ??RADIO_CreateEx_0:
   \   00000158   ........           BL       GUI_Unlock
    333            return hObj;
   \   0000015C   0900A0E1           MOV      R0,R9
   \   00000160   1CD08DE2           ADD      SP,SP,#+28
   \   00000164   F08FBDE8           POP      {R4-R11,PC}      ;; return
    334          }
    335          
    336          /*********************************************************************
    337          *
    338          *       Exported routines:  Various methods
    339          *
    340          **********************************************************************
    341          */
    342          /*********************************************************************
    343          *
    344          *       RADIO_AddValue
    345          */

   \                                 In section .text, align 4, keep-with-next
    346          void RADIO_AddValue(RADIO_Handle hObj, int Add) {
   \                     RADIO_AddValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    347            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   2900000A           BEQ      ??RADIO_AddValue_0
    348              RADIO_Obj * pObj;
    349              int Sel;
    350              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    351              pObj = RADIO_LOCK_H(hObj);
    352              Sel = pObj->Sel;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   F066D0E1           LDRSH    R6,[R0, #+96]
    353              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    354              RADIO_SetValue(hObj, Sel + Add);
   \   00000028   065085E0           ADD      R5,R5,R6
   \   0000002C   ........           BL       GUI_Lock
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   6660D0E5           LDRB     R6,[R0, #+102]
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   \   00000040   000056E3           CMP      R6,#+0
   \   00000044   0700000A           BEQ      ??RADIO_AddValue_1
   \   00000048   ........           LDR      R0,??DataTable3
   \   0000004C   002090E5           LDR      R2,[R0, #+0]
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   0300000A           BEQ      ??RADIO_AddValue_1
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   32FF2FE1           BLX      R2
   \   00000064   120000EA           B        ??RADIO_AddValue_2
   \                     ??RADIO_AddValue_1:
   \   00000068   000055E3           CMP      R5,#+0
   \   0000006C   0050A043           MOVMI    R5,#+0
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       GUI_ALLOC_LockH
   \   00000078   B416D0E1           LDRH     R1,[R0, #+100]
   \   0000007C   010055E1           CMP      R5,R1
   \   00000080   015041A2           SUBGE    R5,R1,#+1
   \   00000084   F016D0E1           LDRSH    R1,[R0, #+96]
   \   00000088   010055E1           CMP      R5,R1
   \   0000008C   0100001A           BNE      ??RADIO_AddValue_3
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
   \   00000094   060000EA           B        ??RADIO_AddValue_2
   \                     ??RADIO_AddValue_3:
   \   00000098   B056C0E1           STRH     R5,[R0, #+96]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       WM_InvalidateWindow
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
   \   000000A8   0510A0E3           MOV      R1,#+5
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       WM_NotifyParent
   \                     ??RADIO_AddValue_2:
   \   000000B4   ........           BL       GUI_Unlock
    355              WM_UNLOCK();
   \   000000B8   ........           BL       GUI_Unlock
    356            }
    357          }
   \                     ??RADIO_AddValue_0:
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
    358          
    359          /*********************************************************************
    360          *
    361          *       RADIO_Dec
    362          */

   \                                 In section .text, align 4, keep-with-next
    363          void RADIO_Dec(RADIO_Handle hObj) {
    364            RADIO_AddValue(hObj, -1);
   \                     RADIO_Dec:
   \   00000000   0010E0E3           MVN      R1,#+0
   \   00000004   ........           B        RADIO_AddValue   ;; tailcall
    365          }
    366          
    367          /*********************************************************************
    368          *
    369          *       RADIO_Inc
    370          */

   \                                 In section .text, align 4, keep-with-next
    371          void RADIO_Inc(RADIO_Handle hObj) {
    372            RADIO_AddValue(hObj,  1);
   \                     RADIO_Inc:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   ........           B        RADIO_AddValue   ;; tailcall
    373          }
    374          
    375          /*********************************************************************
    376          *
    377          *       RADIO_SetValue
    378          */

   \                                 In section .text, align 4, keep-with-next
    379          void RADIO_SetValue(RADIO_Handle hObj, int v) {
   \                     RADIO_SetValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    380            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   2200000A           BEQ      ??RADIO_SetValue_0
    381              RADIO_Obj * pObj;
    382              U8 GroupId;
    383              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    384              pObj = RADIO_LOCK_H(hObj);
    385              GroupId = pObj->GroupId;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   6660D0E5           LDRB     R6,[R0, #+102]
    386              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    387              if (GroupId && RADIO__pfHandleSetValue) {
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0700000A           BEQ      ??RADIO_SetValue_1
   \   00000030   ........           LDR      R0,??DataTable3
   \   00000034   002090E5           LDR      R2,[R0, #+0]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300000A           BEQ      ??RADIO_SetValue_1
    388                (*RADIO__pfHandleSetValue)(hObj, v);
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   32FF2FE1           BLX      R2
   \   0000004C   120000EA           B        ??RADIO_SetValue_2
    389              } else {
    390                if (v < 0) {
   \                     ??RADIO_SetValue_1:
   \   00000050   000055E3           CMP      R5,#+0
    391                  v = 0;
   \   00000054   0050A043           MOVMI    R5,#+0
    392                }
    393                RADIO__SetValue(hObj, v);
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       GUI_ALLOC_LockH
   \   00000060   B416D0E1           LDRH     R1,[R0, #+100]
   \   00000064   010055E1           CMP      R5,R1
   \   00000068   015041A2           SUBGE    R5,R1,#+1
   \   0000006C   F016D0E1           LDRSH    R1,[R0, #+96]
   \   00000070   010055E1           CMP      R5,R1
   \   00000074   0100001A           BNE      ??RADIO_SetValue_3
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
   \   0000007C   060000EA           B        ??RADIO_SetValue_2
   \                     ??RADIO_SetValue_3:
   \   00000080   B056C0E1           STRH     R5,[R0, #+96]
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       WM_InvalidateWindow
   \   0000008C   ........           BL       GUI_ALLOC_UnlockH
   \   00000090   0510A0E3           MOV      R1,#+5
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       WM_NotifyParent
    394              }
    395              WM_UNLOCK();
   \                     ??RADIO_SetValue_2:
   \   0000009C   ........           BL       GUI_Unlock
    396            }
    397          }
   \                     ??RADIO_SetValue_0:
   \   000000A0   7080BDE8           POP      {R4-R6,PC}       ;; return
    398          
    399          /*********************************************************************
    400          *
    401          *       Exported routines:  Query state
    402          *
    403          **********************************************************************
    404          */
    405          /*********************************************************************
    406          *
    407          *       RADIO_GetValue
    408          */

   \                                 In section .text, align 4, keep-with-next
    409          int RADIO_GetValue(RADIO_Handle hObj) {
   \                     RADIO_GetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    410            int r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    411            if (hObj) {
   \   00000010   0500000A           BEQ      ??RADIO_GetValue_0
    412              RADIO_Obj * pObj;
    413              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    414              pObj = RADIO_LOCK_H(hObj);
    415              r = pObj->Sel;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   F056D0E1           LDRSH    R5,[R0, #+96]
    416              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    417              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    418            }
    419            return r;
   \                     ??RADIO_GetValue_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    420          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     RADIO__pfHandleSetValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     RADIO__DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     RADIO_Callback
    421          
    422          #else /* avoid empty object files */
    423          
    424          void RADIO_C(void);
    425          void RADIO_C(void){}
    426          
    427          #endif  /* #if GUI_WINSUPPORT */
    428          
    429          /************************* end of file ******************************/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     RADIO_AddValue           16
     RADIO_Callback           16
     RADIO_CreateEx           64
     RADIO_Dec                 8
     RADIO_GetValue           16
     RADIO_Inc                 8
     RADIO_SetValue           16
     RADIO__GetButtonSize     48
     RADIO__SetValue          16
     _OnTouch                 32


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     RADIO__pfHandleSetValue    4
     RADIO__DefaultProps       40
     RADIO__pSkinDefault
     _OnTouch                 380
     RADIO__GetButtonSize      60
     RADIO__SetValue           88
     RADIO_Callback           380
     RADIO_CreateEx           360
     RADIO_AddValue           192
     RADIO_Dec                  8
     RADIO_Inc                  8
     RADIO_SetValue           164
     RADIO_GetValue            56
     ??DataTable3               4
     ??DataTable3_1             4
     ??DataTable3_2             4

 
     4 bytes in section .bss
    40 bytes in section .data
 1 708 bytes in section .text
 
 1 708 bytes of CODE memory
    44 bytes of DATA memory

Errors: none
Warnings: none
