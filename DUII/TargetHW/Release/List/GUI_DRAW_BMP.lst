###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:13 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DRAW_BMP.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DRAW_BMP.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DRAW_BMP.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DRAW_BMP.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DRAW_BMP.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DRAW_BMP.c
     19          Purpose     : 
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI.h"
     24          #include "GUI_Private.h"
     25          #include "WIDGET.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _Draw
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          static void _Draw(GUI_DRAW_HANDLE hDrawObj, WM_HWIN hWin, int x, int y) {
   \                     _Draw:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0240A0E1           MOV      R4,R2
   \   00000008   0350A0E1           MOV      R5,R3
     40            GUI_DRAW * pDrawObj;
     41            const void * pData;
     42            I16 xOff, yOff;
     43          
     44            GUI_USE_PARA(hWin);
     45            pDrawObj = (GUI_DRAW *)GUI_LOCK_H(hDrawObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
     46            pData = pDrawObj->Data.pData;
   \   00000010   046090E5           LDR      R6,[R0, #+4]
     47            xOff  = pDrawObj->xOff;
   \   00000014   F870D0E1           LDRSH    R7,[R0, #+8]
     48            yOff  = pDrawObj->yOff;
   \   00000018   FA80D0E1           LDRSH    R8,[R0, #+10]
     49            GUI_UNLOCK_H(pDrawObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
     50            GUI_BMP_Draw((const GUI_BITMAP *)pData, x + xOff, y + yOff);
   \   00000020   052088E0           ADD      R2,R8,R5
   \   00000024   041087E0           ADD      R1,R7,R4
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   F041BDE8           POP      {R4-R8,LR}
   \   00000030   ........           B        GUI_BMP_Draw     ;; tailcall
     51          }
     52          
     53          /*********************************************************************
     54          *
     55          *       _GetXSize
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          static int _GetXSize(GUI_DRAW_HANDLE hDrawObj) {
   \                     _GetXSize:
   \   00000000   10402DE9           PUSH     {R4,LR}
     58            GUI_DRAW * pDrawObj;
     59            const void * pData;
     60          
     61            pDrawObj = (GUI_DRAW *)GUI_LOCK_H(hDrawObj);
     62            pData = pDrawObj->Data.pData;
   \   00000004   ........           BL       GUI_ALLOC_LockH
   \   00000008   044090E5           LDR      R4,[R0, #+4]
     63            GUI_UNLOCK_H(pDrawObj);
   \   0000000C   ........           BL       GUI_ALLOC_UnlockH
     64            return GUI_BMP_GetXSize(pData);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   ........           B        GUI_BMP_GetXSize  ;; tailcall
     65          }
     66          
     67          /*********************************************************************
     68          *
     69          *       _GetYSize
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          static int _GetYSize(GUI_DRAW_HANDLE hDrawObj) {
   \                     _GetYSize:
   \   00000000   10402DE9           PUSH     {R4,LR}
     72            GUI_DRAW * pDrawObj;
     73            const void * pData;
     74          
     75            pDrawObj = (GUI_DRAW *)GUI_LOCK_H(hDrawObj);
     76            pData = pDrawObj->Data.pData;
   \   00000004   ........           BL       GUI_ALLOC_LockH
   \   00000008   044090E5           LDR      R4,[R0, #+4]
     77            GUI_UNLOCK_H(pDrawObj);
   \   0000000C   ........           BL       GUI_ALLOC_UnlockH
     78            return GUI_BMP_GetXSize(pData);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   ........           B        GUI_BMP_GetXSize  ;; tailcall
     79          }
     80          
     81          /*********************************************************************
     82          *
     83          *       static data, ConstObj
     84          *
     85          **********************************************************************
     86          */

   \                                 In section .text, align 4, keep-with-next
     87          static const GUI_DRAW_CONSTS _ConstObjData = {
   \                     _ConstObjData:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Draw, _GetXSize, _GetYSize
   \              ............
     88            _Draw,
     89            _GetXSize,
     90            _GetYSize
     91          };
     92          
     93          /*********************************************************************
     94          *
     95          *       public code
     96          *
     97          **********************************************************************
     98          */
     99          /*********************************************************************
    100          *
    101          *       GUI_DRAW_BMP_Create
    102          */

   \                                 In section .text, align 4, keep-with-next
    103          WM_HMEM GUI_DRAW_BMP_Create(const void* pBMP, int x, int y) {
   \                     GUI_DRAW_BMP_Create:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    104            WM_HMEM hMem;
    105            hMem = GUI_ALLOC_AllocZero(sizeof(GUI_DRAW));
   \   00000014   0C00A0E3           MOV      R0,#+12
   \   00000018   ........           BL       GUI_ALLOC_AllocZero
   \   0000001C   0070B0E1           MOVS     R7,R0
    106            if (hMem) {
   \   00000020   0900000A           BEQ      ??GUI_DRAW_BMP_Create_0
    107              GUI_DRAW* pObj;
    108              WM_LOCK();
   \   00000024   ........           BL       GUI_Lock
    109              pObj = (GUI_DRAW*)GUI_LOCK_H(hMem);
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           BL       GUI_ALLOC_LockH
    110              pObj->pConsts      = &_ConstObjData;
   \   00000030   ........           ADR      R1,_ConstObjData
   \   00000034   001080E5           STR      R1,[R0, #+0]
    111              pObj->Data.pData   = pBMP;
   \   00000038   044080E5           STR      R4,[R0, #+4]
    112              pObj->xOff         = x;
   \   0000003C   B850C0E1           STRH     R5,[R0, #+8]
    113              pObj->yOff         = y;
   \   00000040   BA60C0E1           STRH     R6,[R0, #+10]
    114              GUI_UNLOCK_H(pObj);
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
    115              WM_UNLOCK();
   \   00000048   ........           BL       GUI_Unlock
    116            }
    117            return hMem;
   \                     ??GUI_DRAW_BMP_Create_0:
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \   00000054   F080BDE8           POP      {R4-R7,PC}       ;; return
    118          }
    119          
    120          
    121          #else                            /* Avoid problems with empty object modules */
    122            void GUI_DRAW_BMP_C(void) {}
    123          #endif

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     GUI_DRAW_BMP_Create     24
     _Draw                   24
     _GetXSize                8
     _GetYSize                8


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     _Draw                 52
     _GetXSize             28
     _GetYSize             28
     _ConstObjData         12
     GUI_DRAW_BMP_Create   88

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
