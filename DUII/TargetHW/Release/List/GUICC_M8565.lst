###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:38 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUICC_M8565.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUICC_M8565.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUICC_M8565.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUICC_M8565.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUICC_M8565.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICC_M8565.C
     19          Purpose     : Color conversion routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LCD_Protected.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Defines
     28          *
     29          **********************************************************************
     30          */
     31          #define B_BITS 5
     32          #define G_BITS 6
     33          #define R_BITS 5
     34          
     35          #define R_MASK ((1 << R_BITS) -1)
     36          #define G_MASK ((1 << G_BITS) -1)
     37          #define B_MASK ((1 << B_BITS) -1)
     38          
     39          /*********************************************************************
     40          *
     41          *       Static code,
     42          *
     43          *       LCD_FIXEDPALETTE == 8565, 65536 colors + 8 bit transparency, TTTTTTTTxxxxxxxxRRRRRGGGGGGBBBBB
     44          *
     45          **********************************************************************
     46          */
     47          /*********************************************************************
     48          *
     49          *       _Color2Index_M8565
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          static unsigned _Color2Index_M8565(LCD_COLOR Color) {
     52            unsigned r, g, b;
     53            U32 Alpha;
     54            Alpha = ((U32)Color & 0xFF000000) ^ 0xFF000000;
     55            r = (Color >> (8  - R_BITS)) & R_MASK;
     56            g = (Color >> (16 - G_BITS)) & G_MASK;
     57            b = (Color >> (24 - B_BITS)) & B_MASK;
     58            return (U32)(Alpha | (b + (g << B_BITS) + (r << (G_BITS + B_BITS))));
   \                     _Color2Index_M8565:
   \   00000000   1F20A0E3           MOV      R2,#+31
   \   00000004   3F30A0E3           MOV      R3,#+63
   \   00000008   A02902E0           AND      R2,R2,R0, LSR #+19
   \   0000000C   203503E0           AND      R3,R3,R0, LSR #+10
   \   00000010   832282E0           ADD      R2,R2,R3, LSL #+5
   \   00000014   FF1400E2           AND      R1,R0,#0xFF000000
   \   00000018   1F30A0E3           MOV      R3,#+31
   \   0000001C   A00103E0           AND      R0,R3,R0, LSR #+3
   \   00000020   FF1421E2           EOR      R1,R1,#0xFF000000
   \   00000024   800582E0           ADD      R0,R2,R0, LSL #+11
   \   00000028   010080E1           ORR      R0,R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     59          }
     60          
     61          /*********************************************************************
     62          *
     63          *       Index2Color_M8565
     64          */

   \                                 In section .text, align 4, keep-with-next
     65          static LCD_COLOR Index2Color_M8565(unsigned Index) {
     66            unsigned r, g, b;
     67            U32 Alpha;
     68            Alpha = ((U32)Index & 0xFF000000) ^ 0xFF000000;
     69            /* Separate the color masks */
     70            b = Index                        & B_MASK;
     71            g = (Index >> B_BITS)            & G_MASK;
     72            r = (Index >> (B_BITS + G_BITS)) & R_MASK;
     73            /* Convert the color masks */
     74            r = r * 255 / R_MASK;
     75            g = g * 255 / G_MASK;
     76            b = b * 255 / B_MASK;
     77            return (U32)(Alpha | (r + (g << 8) + (((U32)b) << 16)));
   \                     Index2Color_M8565:
   \   00000000   1F20A0E3           MOV      R2,#+31
   \   00000004   A02502E0           AND      R2,R2,R0, LSR #+11
   \   00000008   ........           LDR      R12,??DataTable1  ;; 0x84210842
   \   0000000C   022462E0           RSB      R2,R2,R2, LSL #+8
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   92CCA3E0           UMLAL    R12,R3,R2,R12
   \   00000018   00402DE9           PUSH     {LR}
   \   0000001C   3F20A0E3           MOV      R2,#+63
   \   00000020   A02202E0           AND      R2,R2,R0, LSR #+5
   \   00000024   ........           LDR      LR,??DataTable1_1  ;; 0x82082082
   \   00000028   022462E0           RSB      R2,R2,R2, LSL #+8
   \   0000002C   00C0A0E3           MOV      R12,#+0
   \   00000030   92EEACE0           UMLAL    LR,R12,R2,LR
   \   00000034   FF1400E2           AND      R1,R0,#0xFF000000
   \   00000038   AC22A0E1           LSR      R2,R12,#+5
   \   0000003C   0224A0E1           LSL      R2,R2,#+8
   \   00000040   232282E0           ADD      R2,R2,R3, LSR #+4
   \   00000044   1F0000E2           AND      R0,R0,#0x1F
   \   00000048   ........           LDR      R12,??DataTable1  ;; 0x84210842
   \   0000004C   000460E0           RSB      R0,R0,R0, LSL #+8
   \   00000050   0030A0E3           MOV      R3,#+0
   \   00000054   90CCA3E0           UMLAL    R12,R3,R0,R12
   \   00000058   FF1421E2           EOR      R1,R1,#0xFF000000
   \   0000005C   2302A0E1           LSR      R0,R3,#+4
   \   00000060   000882E0           ADD      R0,R2,R0, LSL #+16
   \   00000064   010080E1           ORR      R0,R0,R1
   \   00000068   0080BDE8           POP      {PC}             ;; return
     78          }
     79          
     80          /*********************************************************************
     81          *
     82          *       _GetIndexMask_M8565
     83          */

   \                                 In section .text, align 4, keep-with-next
     84          static unsigned _GetIndexMask_M8565(void) {
     85            return (unsigned)0xffffffff;
   \                     _GetIndexMask_M8565:
   \   00000000   0000E0E3           MVN      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       Public data
     91          *
     92          **********************************************************************
     93          */
     94          /*********************************************************************
     95          *
     96          *       LCD_API_ColorConv_M8565
     97          *
     98          * Purpose
     99          *   API table for this color conversion mode. Only used by memory
    100          *   devices in this mode.
    101          */

   \                                 In section .rodata, align 4, keep-with-next
    102          const LCD_API_COLOR_CONV LCD_API_ColorConv_M8565 = {
   \                     LCD_API_ColorConv_M8565:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Color2Index_M8565, Index2Color_M8565, _GetIndexMask_M8565
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   42082184           DC32     0x84210842

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   82200882           DC32     0x82082082
    103            _Color2Index_M8565,
    104            Index2Color_M8565,
    105            _GetIndexMask_M8565
    106          };
    107          
    108          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     Index2Color_M8565        4
     _Color2Index_M8565       0
     _GetIndexMask_M8565      0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _Color2Index_M8565        48
     Index2Color_M8565        108
     _GetIndexMask_M8565        8
     LCD_API_ColorConv_M8565   12
     ??DataTable1               4
     ??DataTable1_1             4

 
  12 bytes in section .rodata
 172 bytes in section .text
 
 172 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
