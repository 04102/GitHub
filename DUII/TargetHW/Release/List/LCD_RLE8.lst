###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:35 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LCD_RLE8.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\LCD_RLE8.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LCD_RLE8.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LCD_RLE8.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LCD_RLE8.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LCDRLE8.c
     19          Purpose     : Drawing routines for run length encoded bitmaps
     20                        with 8 bpp
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          #include <stddef.h>           /* needed for definition of NULL */
     25          
     26          #include "GUI_Private.h"
     27          
     28          /*********************************************************************
     29          *
     30          *       Static data
     31          *
     32          **********************************************************************
     33          */
     34          
     35          static struct {
     36            int x,y;
     37            const U8 GUI_UNI_PTR * pPixel;
     38            const U8 GUI_UNI_PTR * pPixelStart;

   \                                 In section .bss, align 4
     39          } Cache;
   \                     Cache:
   \   00000000                      DS8 16
     40          
     41          /*********************************************************************
     42          *
     43          *       Static code
     44          *
     45          **********************************************************************
     46          */
     47          /*********************************************************************
     48          *
     49          *       _DrawBitmap_RLE8
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          static void _DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE8:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
     52            LCD_PIXELINDEX aColorIndex[2];
     53            LCD_PIXELINDEX PixelIndex;
     54            int xi,y;
     55            int xL, yL;
     56            const U8 GUI_UNI_PTR * pPixelOrg = pPixel;
     57            char NoTrans = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
   \   00000004   ........           LDR      R6,??DataTable1
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   1010D6E5           LDRB     R1,[R6, #+16]
   \   00000010   18D04DE2           SUB      SP,SP,#+24
   \   00000014   54509DE5           LDR      R5,[SP, #+84]
   \   00000018   A11002E0           AND      R1,R2,R1, LSR #+1
   \   0000001C   011021E2           EOR      R1,R1,#0x1
   \   00000020   08108DE5           STR      R1,[SP, #+8]
     58            const LCD_PIXELINDEX* pTrans =NULL;
     59            char IsMagnified = ((yMag | xMag) != 1);
   \   00000024   50109DE5           LDR      R1,[SP, #+80]
   \   00000028   00A0A0E3           MOV      R10,#+0
   \   0000002C   051081E1           ORR      R1,R1,R5
   \   00000030   010051E3           CMP      R1,#+1
   \   00000034   04208D15           STRNE    R2,[SP, #+4]
   \   00000038   ........           LDR      R2,??DataTable1_1
   \   0000003C   00A08DE5           STR      R10,[SP, #+0]
   \   00000040   002092E5           LDR      R2,[R2, #+0]
   \   00000044   04A08D05           STREQ    R10,[SP, #+4]
   \   00000048   002092E5           LDR      R2,[R2, #+0]
   \   0000004C   0040A0E1           MOV      R4,R0
   \   00000050   0C208DE5           STR      R2,[SP, #+12]
   \   00000054   ........           LDR      R2,??DataTable1_2
   \   00000058   4C009DE5           LDR      R0,[SP, #+76]
   \   0000005C   002092E5           LDR      R2,[R2, #+0]
     60            aColorIndex[0] = LCD__GetBkColorIndex();
     61            aColorIndex[1] = LCD__GetColorIndex();
     62            /* Handle color translation */
     63            if ((pLogPal) && (pLogPal->pPalEntries)) {
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   002092E5           LDR      R2,[R2, #+0]
   \   00000068   48909DE5           LDR      R9,[SP, #+72]
   \   0000006C   10208DE5           STR      R2,[SP, #+16]
   \   00000070   08109015           LDRNE    R1,[R0, #+8]
   \   00000074   00005113           CMPNE    R1,#+0
   \   00000078   0300000A           BEQ      ??_DrawBitmap_RLE8_0
     64              if ((pTrans = LCD_GetpPalConvTable(pLogPal)) == NULL) {
   \   0000007C   ........           BL       LCD_GetpPalConvTable
   \   00000080   00008DE5           STR      R0,[SP, #+0]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   A200000A           BEQ      ??_DrawBitmap_RLE8_1
     65                return;
     66              }
     67            }
     68           /* Check if we can limit the number of lines due to clipping) */
     69            if (yMag == 1) {
   \                     ??_DrawBitmap_RLE8_0:
   \   0000008C   010055E3           CMP      R5,#+1
   \   00000090   0600001A           BNE      ??_DrawBitmap_RLE8_2
   \   00000094   FE00D6E1           LDRSH    R0,[R6, #+14]
   \   00000098   18109DE5           LDR      R1,[SP, #+24]
   \   0000009C   010040E0           SUB      R0,R0,R1
   \   000000A0   20109DE5           LDR      R1,[SP, #+32]
   \   000000A4   010080E2           ADD      R0,R0,#+1
   \   000000A8   010050E1           CMP      R0,R1
     70              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1)
     71                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   000000AC   20008DB5           STRLT    R0,[SP, #+32]
     72            }
     73            /* Init variables for looping */
     74            xi=0;
     75            y =0;
   \                     ??_DrawBitmap_RLE8_2:
   \   000000B0   04009DE5           LDR      R0,[SP, #+4]
   \   000000B4   0080A0E3           MOV      R8,#+0
   \   000000B8   0070A0E3           MOV      R7,#+0
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   1000001A           BNE      ??_DrawBitmap_RLE8_3
     76            /* Check if we can use the cache to save some unnecessary iterations */
     77            if (!IsMagnified) {
     78              int yDiff = GUI_Context.ClipRect.y0 - y0;
     79              if ((Cache.pPixelStart == pPixel) && (yDiff > Cache.y)) {
   \   000000C4   ........           LDR      R0,??DataTable1_3
   \   000000C8   48109DE5           LDR      R1,[SP, #+72]
   \   000000CC   0C0090E5           LDR      R0,[R0, #+12]
   \   000000D0   010050E1           CMP      R0,R1
   \   000000D4   0B00001A           BNE      ??_DrawBitmap_RLE8_3
   \   000000D8   ........           LDR      R0,??DataTable1_3
   \   000000DC   FA10D6E1           LDRSH    R1,[R6, #+10]
   \   000000E0   18209DE5           LDR      R2,[SP, #+24]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   021041E0           SUB      R1,R1,R2
   \   000000EC   010050E1           CMP      R0,R1
   \   000000F0   040000AA           BGE      ??_DrawBitmap_RLE8_3
     80                /* Accept cache values */
     81                y = Cache.y;
   \   000000F4   0070A0E1           MOV      R7,R0
     82                xi = Cache.x;
   \   000000F8   ........           LDR      R0,??DataTable1_3
   \   000000FC   008090E5           LDR      R8,[R0, #+0]
     83                pPixel = Cache.pPixel;
   \   00000100   080090E5           LDR      R0,[R0, #+8]
   \   00000104   48008DE5           STR      R0,[SP, #+72]
     84              }
     85            }
     86            /* Init values for caching */
     87            Cache.pPixel = Cache.pPixelStart = pPixelOrg;
   \                     ??_DrawBitmap_RLE8_3:
   \   00000108   ........           LDR      R0,??DataTable1_3
   \   0000010C   0C9080E5           STR      R9,[R0, #+12]
   \   00000110   089080E5           STR      R9,[R0, #+8]
     88            Cache.x = Cache.y = 0;
   \   00000114   04A080E5           STR      R10,[R0, #+4]
   \   00000118   00A080E5           STR      R10,[R0, #+0]
     89            /* Repeat until we have reached bottom */
     90            for (; y < ysize; ) {
   \                     ??_DrawBitmap_RLE8_4:
   \   0000011C   20009DE5           LDR      R0,[SP, #+32]
   \   00000120   000057E1           CMP      R7,R0
   \   00000124   730000AA           BGE      ??_DrawBitmap_RLE8_5
     91              U8 Cmd  = *pPixel++;
   \   00000128   48109DE5           LDR      R1,[SP, #+72]
   \   0000012C   01B0D1E4           LDRB     R11,[R1], #+1
   \   00000130   48108DE5           STR      R1,[SP, #+72]
     92              U8 Data = *pPixel++;
   \   00000134   0190D1E4           LDRB     R9,[R1], #+1
   \   00000138   48108DE5           STR      R1,[SP, #+72]
     93              if (Cmd) {
   \   0000013C   00005BE3           CMP      R11,#+0
   \   00000140   5F00000A           BEQ      ??_DrawBitmap_RLE8_6
     94                /* Save cache info */
     95                Cache.pPixel = pPixel-2;
   \   00000144   ........           LDR      R0,??DataTable1_3
   \   00000148   021041E2           SUB      R1,R1,#+2
   \   0000014C   081080E5           STR      R1,[R0, #+8]
     96                Cache.x = xi;
   \   00000150   008080E5           STR      R8,[R0, #+0]
     97                Cache.y = y;
   \   00000154   047080E5           STR      R7,[R0, #+4]
     98                LCD__SetColorIndex(pTrans ? *(pTrans+Data) : Data);
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   00109D15           LDRNE    R1,[SP, #+0]
   \   00000164   0900A0E1           MOV      R0,R9
   \   00000168   00019117           LDRNE    R0,[R1, +R0, LSL #+2]
   \   0000016C   ........           LDR      R1,??DataTable1_2
   \   00000170   001091E5           LDR      R1,[R1, #+0]
   \   00000174   000081E5           STR      R0,[R1, #+0]
     99                while (Cmd) {
    100                  int xi1 = xi+Cmd;
    101                  if (xi1>=xsize)
   \                     ??_DrawBitmap_RLE8_7:
   \   00000178   1C009DE5           LDR      R0,[SP, #+28]
   \   0000017C   08A08BE0           ADD      R10,R11,R8
   \   00000180   00005AE1           CMP      R10,R0
   \   00000184   00A0A0C1           MOVGT    R10,R0
    102                    xi1 = xsize;
    103                  Cmd -= (xi1-xi);
   \   00000188   0A004BE0           SUB      R0,R11,R10
   \   0000018C   00B088E0           ADD      R11,R8,R0
    104                  if (Data || NoTrans) {  /* Skip transparent pixels */
   \   00000190   000059E3           CMP      R9,#+0
   \   00000194   08009D05           LDREQ    R0,[SP, #+8]
   \   00000198   FFB00BE2           AND      R11,R11,#0xFF
   \   0000019C   00005003           CMPEQ    R0,#+0
   \   000001A0   1400000A           BEQ      ??_DrawBitmap_RLE8_8
    105                    if (IsMagnified) {
   \   000001A4   04009DE5           LDR      R0,[SP, #+4]
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   0B00000A           BEQ      ??_DrawBitmap_RLE8_9
    106                      xL = xMag * xi + x0;
    107                      yL = yMag * y + y0;
   \   000001B0   18109DE5           LDR      R1,[SP, #+24]
   \   000001B4   971521E0           MLA      R1,R7,R5,R1
   \   000001B8   50009DE5           LDR      R0,[SP, #+80]
    108                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
   \   000001BC   052081E0           ADD      R2,R1,R5
   \   000001C0   013042E2           SUB      R3,R2,#+1
   \   000001C4   984020E0           MLA      R0,R8,R0,R4
   \   000001C8   50209DE5           LDR      R2,[SP, #+80]
   \   000001CC   08C04AE0           SUB      R12,R10,R8
   \   000001D0   9C0222E0           MLA      R2,R12,R2,R0
   \   000001D4   012042E2           SUB      R2,R2,#+1
   \   000001D8   ........           BL       LCD_FillRect
   \   000001DC   050000EA           B        ??_DrawBitmap_RLE8_8
    109                    } else {
    110                      LCD_DrawHLine(x0+xi, y + y0, xi1+x0-1);
   \                     ??_DrawBitmap_RLE8_9:
   \   000001E0   04008AE0           ADD      R0,R10,R4
   \   000001E4   012040E2           SUB      R2,R0,#+1
   \   000001E8   18009DE5           LDR      R0,[SP, #+24]
   \   000001EC   071080E0           ADD      R1,R0,R7
   \   000001F0   040088E0           ADD      R0,R8,R4
   \   000001F4   ........           BL       LCD_DrawHLine
    111                    }
    112                  }
    113                  xi =xi1;
    114                  if (xi1==xsize) {
   \                     ??_DrawBitmap_RLE8_8:
   \   000001F8   1C009DE5           LDR      R0,[SP, #+28]
   \   000001FC   0A80A0E1           MOV      R8,R10
   \   00000200   00005AE1           CMP      R10,R0
    115                    y++;
   \   00000204   01708702           ADDEQ    R7,R7,#+1
    116                    xi=0;
   \   00000208   0080A003           MOVEQ    R8,#+0
    117                  }
    118                }
   \   0000020C   00005BE3           CMP      R11,#+0
   \   00000210   D8FFFF1A           BNE      ??_DrawBitmap_RLE8_7
   \   00000214   C0FFFFEA           B        ??_DrawBitmap_RLE8_4
    119              } else {
    120                do {
    121                  U8 Index = *pPixel++;
    122                  if (Index || NoTrans) {  /* Skip transparent pixels */
    123                    int x = x0+xi;
    124                    PixelIndex = pTrans ? *(pTrans+Index) : Index;
    125                    if (IsMagnified) {
   \                     ??_DrawBitmap_RLE8_10:
   \   00000218   04009DE5           LDR      R0,[SP, #+4]
   \   0000021C   000050E3           CMP      R0,#+0
   \   00000220   0C00000A           BEQ      ??_DrawBitmap_RLE8_11
    126                      LCD_SetColorIndex(PixelIndex);
   \   00000224   0300A0E1           MOV      R0,R3
   \   00000228   ........           BL       LCD_SetColorIndex
    127                      xL = xMag * xi + x0;
    128                      yL = yMag * y + y0;
   \   0000022C   18109DE5           LDR      R1,[SP, #+24]
   \   00000230   971521E0           MLA      R1,R7,R5,R1
   \   00000234   50009DE5           LDR      R0,[SP, #+80]
    129                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
   \   00000238   052081E0           ADD      R2,R1,R5
   \   0000023C   984020E0           MLA      R0,R8,R0,R4
   \   00000240   013042E2           SUB      R3,R2,#+1
   \   00000244   50209DE5           LDR      R2,[SP, #+80]
   \   00000248   022080E0           ADD      R2,R0,R2
   \   0000024C   012042E2           SUB      R2,R2,#+1
   \   00000250   ........           BL       LCD_FillRect
   \   00000254   0E0000EA           B        ??_DrawBitmap_RLE8_12
    130                    } else {
    131                      #if 1 /* High speed variant */
    132                        if (y + y0>= GUI_Context.ClipRect.y0)
   \                     ??_DrawBitmap_RLE8_11:
   \   00000258   18009DE5           LDR      R0,[SP, #+24]
   \   0000025C   072080E0           ADD      R2,R0,R7
   \   00000260   FA00D6E1           LDRSH    R0,[R6, #+10]
   \   00000264   000052E1           CMP      R2,R0
    133                          if (x >= GUI_Context.ClipRect.x0)
   \   00000268   F800D6A1           LDRSHGE  R0,[R6, #+8]
   \   0000026C   000051A1           CMPGE    R1,R0
    134                            if (x <= GUI_Context.ClipRect.x1)
   \   00000270   FC00D6A1           LDRSHGE  R0,[R6, #+12]
   \   00000274   010050A1           CMPGE    R0,R1
   \   00000278   050000BA           BLT      ??_DrawBitmap_RLE8_12
   \   0000027C   1100D6E5           LDRB     R0,[R6, #+17]
   \   00000280   000186E0           ADD      R0,R6,R0, LSL #+2
   \   00000284   480090E5           LDR      R0,[R0, #+72]
   \   00000288   0CC090E5           LDR      R12,[R0, #+12]
   \   0000028C   18C09CE5           LDR      R12,[R12, #+24]
    135                              LCDDEV_L0_SetPixelIndex(GUI_Context.apDevice[GUI_Context.SelLayer], x, y + y0, PixelIndex);
   \   00000290   3CFF2FE1           BLX      R12
    136                      #else
    137                        LCD_SetPixelIndex(x, y + y0, PixelIndex);
    138                      #endif
    139                    }
    140                  }
    141                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE8_12:
   \   00000294   1C009DE5           LDR      R0,[SP, #+28]
   \   00000298   018088E2           ADD      R8,R8,#+1
   \   0000029C   000058E1           CMP      R8,R0
   \   000002A0   040000BA           BLT      ??_DrawBitmap_RLE8_13
    142                    xi=0; y++;
    143                    if (y >= ysize)
   \   000002A4   20009DE5           LDR      R0,[SP, #+32]
   \   000002A8   017087E2           ADD      R7,R7,#+1
   \   000002AC   0080A0E3           MOV      R8,#+0
   \   000002B0   000057E1           CMP      R7,R0
   \   000002B4   98FFFFAA           BGE      ??_DrawBitmap_RLE8_4
    144                      break;
    145                  }
    146                } while (--Data);
   \                     ??_DrawBitmap_RLE8_13:
   \   000002B8   019049E2           SUB      R9,R9,#+1
   \   000002BC   FF9019E2           ANDS     R9,R9,#0xFF
   \   000002C0   95FFFF0A           BEQ      ??_DrawBitmap_RLE8_4
   \                     ??_DrawBitmap_RLE8_6:
   \   000002C4   48109DE5           LDR      R1,[SP, #+72]
   \   000002C8   0130D1E4           LDRB     R3,[R1], #+1
   \   000002CC   48108DE5           STR      R1,[SP, #+72]
   \   000002D0   000053E3           CMP      R3,#+0
   \   000002D4   08009D05           LDREQ    R0,[SP, #+8]
   \   000002D8   00005003           CMPEQ    R0,#+0
   \   000002DC   ECFFFF0A           BEQ      ??_DrawBitmap_RLE8_12
   \   000002E0   00009DE5           LDR      R0,[SP, #+0]
   \   000002E4   041088E0           ADD      R1,R8,R4
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   C9FFFF0A           BEQ      ??_DrawBitmap_RLE8_10
   \   000002F0   033190E7           LDR      R3,[R0, +R3, LSL #+2]
   \   000002F4   C7FFFFEA           B        ??_DrawBitmap_RLE8_10
    147              }
    148            }
    149            LCD__SetBkColorIndex(aColorIndex[0]);
   \                     ??_DrawBitmap_RLE8_5:
   \   000002F8   ........           LDR      R0,??DataTable1_1
   \   000002FC   0C109DE5           LDR      R1,[SP, #+12]
   \   00000300   000090E5           LDR      R0,[R0, #+0]
   \   00000304   001080E5           STR      R1,[R0, #+0]
    150            LCD__SetColorIndex(aColorIndex[1]);
   \   00000308   ........           LDR      R0,??DataTable1_2
   \   0000030C   10109DE5           LDR      R1,[SP, #+16]
   \   00000310   000090E5           LDR      R0,[R0, #+0]
   \   00000314   001080E5           STR      R1,[R0, #+0]
    151          }
   \                     ??_DrawBitmap_RLE8_1:
   \   00000318   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   0000031C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    152          
    153          /*********************************************************************
    154          *
    155          *       Public data
    156          *
    157          **********************************************************************
    158          */
    159          /*********************************************************************
    160          *
    161          *       GUI_BitmapMethodsRLE8
    162          */

   \                                 In section .rodata, align 4, keep-with-next
    163          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE8 = {
   \                     GUI_BitmapMethodsRLE8:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ........0000       DC32 _DrawBitmap_RLE8, 0
   \              0000        
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   ........           DC32     Cache
    164            _DrawBitmap_RLE8,
    165            NULL
    166          };
    167          
    168          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitmap_RLE8     72


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     Cache                   16
     _DrawBitmap_RLE8       800
     GUI_BitmapMethodsRLE8   12
     ??DataTable1             4
     ??DataTable1_1           4
     ??DataTable1_2           4
     ??DataTable1_3           4

 
  16 bytes in section .bss
  12 bytes in section .rodata
 816 bytes in section .text
 
 816 bytes of CODE  memory
  12 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
