###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:37 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_Circle.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_Circle.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIAA_Circle.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIAA_Circle.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_Circle.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICirleAA.C
     19          Purpose     : Draw Circle routines with Antialiasing
     20          
     21          TBD: Circle needs to be calculated from top to bottom in order
     22          to avoid AA problems at certain positions.  
     23              
     24          ---------------------------END-OF-HEADER------------------------------
     25          */
     26          
     27          #include "GUI_Private.h"
     28          
     29          #include <stdio.h>
     30          #include <string.h>
     31          #include <math.h>
     32          
     33          /*********************************************************************
     34          *
     35          *       Static code
     36          *
     37          **********************************************************************
     38          */
     39          /*********************************************************************
     40          *
     41          *       FillCircle
     42          */

   \                                 In section .text, align 4, keep-with-next
     43          static void FillCircle(int x0, int y0, int r) {
   \                     FillCircle:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
     44            int i, x, y;
     45            int sqmax;
     46            int yMin, yMax;
     47          
     48            sqmax = r * r + r / 2;
   \   0000000C   950500E0           MUL      R0,R5,R5
   \   00000010   A51F85E0           ADD      R1,R5,R5, LSR #+31
   \   00000014   C16080E0           ADD      R6,R0,R1, ASR #+1
     49            /* First step : find uppermost and lowermost coordinates */
     50            yMin = y0 - r;
   \   00000018   00009DE5           LDR      R0,[SP, #+0]
   \   0000001C   058040E0           SUB      R8,R0,R5
     51            yMax = y0 + r;
   \   00000020   007085E0           ADD      R7,R5,R0
   \   00000024   ........           LDR      R0,??DataTable1
   \   00000028   140090E5           LDR      R0,[R0, #+20]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0500000A           BEQ      ??FillCircle_0
   \   00000034   F610D0E1           LDRSH    R1,[R0, #+6]
     52            /* Use Clipping rect to reduce calculation (if possible) */
     53            if (GUI_Context.pClipRect_HL) {
     54              if (yMax > GUI_Context.pClipRect_HL->y1) {
     55                yMax = GUI_Context.pClipRect_HL->y1;
   \   00000038   F200D0E1           LDRSH    R0,[R0, #+2]
   \   0000003C   070051E1           CMP      R1,R7
   \   00000040   0170A0B1           MOVLT    R7,R1
   \   00000044   000058E1           CMP      R8,R0
     56              }
     57              if (yMin < GUI_Context.pClipRect_HL->y0) {
     58                yMin = GUI_Context.pClipRect_HL->y0;
   \   00000048   0080A0B1           MOVLT    R8,R0
     59              }
     60            }
     61            /* Draw top half */
     62            for (i = 1, x = r; i < r; i++) {
   \                     ??FillCircle_0:
   \   0000004C   0190A0E3           MOV      R9,#+1
   \   00000050   05B0A0E1           MOV      R11,R5
   \   00000054   020055E3           CMP      R5,#+2
   \   00000058   170000BA           BLT      ??FillCircle_1
   \   0000005C   00009DE5           LDR      R0,[SP, #+0]
   \   00000060   01A040E2           SUB      R10,R0,#+1
     63              y = y0 - i;
   \                     ??FillCircle_2:
   \   00000064   0A10A0E1           MOV      R1,R10
     64              if ((y >= yMin) && (y <= yMax)) {
   \   00000068   080051E1           CMP      R1,R8
   \   0000006C   010057A1           CMPGE    R7,R1
   \   00000070   0D0000BA           BLT      ??FillCircle_3
     65                /* calc proper x-value */
     66                while ((i * i + x * x) > sqmax) {
   \   00000074   990900E0           MUL      R0,R9,R9
   \   00000078   9B0B22E0           MLA      R2,R11,R11,R0
   \   0000007C   020056E1           CMP      R6,R2
   \   00000080   030000AA           BGE      ??FillCircle_4
     67                  --x;
   \                     ??FillCircle_5:
   \   00000084   01B04BE2           SUB      R11,R11,#+1
   \   00000088   9B0B22E0           MLA      R2,R11,R11,R0
   \   0000008C   020056E1           CMP      R6,R2
   \   00000090   FBFFFFBA           BLT      ??FillCircle_5
     68                }
     69                LCD_HL_DrawHLine (x0 - x, y, x0 + x);
   \                     ??FillCircle_4:
   \   00000094   ........           LDR      R3,??DataTable1
   \   00000098   04208BE0           ADD      R2,R11,R4
   \   0000009C   943093E5           LDR      R3,[R3, #+148]
   \   000000A0   0B0044E0           SUB      R0,R4,R11
   \   000000A4   003093E5           LDR      R3,[R3, #+0]
   \   000000A8   33FF2FE1           BLX      R3
     70              }
     71            }
   \                     ??FillCircle_3:
   \   000000AC   019089E2           ADD      R9,R9,#+1
   \   000000B0   01A04AE2           SUB      R10,R10,#+1
   \   000000B4   050059E1           CMP      R9,R5
   \   000000B8   E9FFFFBA           BLT      ??FillCircle_2
     72            /* Draw bottom half */
     73            for (i = 0, x = r; i < r; i++) {
   \                     ??FillCircle_1:
   \   000000BC   0090A0E3           MOV      R9,#+0
   \   000000C0   05B0A0E1           MOV      R11,R5
   \   000000C4   010055E3           CMP      R5,#+1
   \   000000C8   160000BA           BLT      ??FillCircle_6
   \   000000CC   00A09DE5           LDR      R10,[SP, #+0]
     74              y = y0 + i;
   \                     ??FillCircle_7:
   \   000000D0   0A10A0E1           MOV      R1,R10
     75              if ((y >= yMin) && (y <= yMax)) {
   \   000000D4   080051E1           CMP      R1,R8
   \   000000D8   010057A1           CMPGE    R7,R1
   \   000000DC   0D0000BA           BLT      ??FillCircle_8
     76                /* calc proper x-value */
     77                while ((i * i + x * x) > sqmax) {
   \   000000E0   990900E0           MUL      R0,R9,R9
   \   000000E4   9B0B22E0           MLA      R2,R11,R11,R0
   \   000000E8   020056E1           CMP      R6,R2
   \   000000EC   030000AA           BGE      ??FillCircle_9
     78                  --x;
   \                     ??FillCircle_10:
   \   000000F0   01B04BE2           SUB      R11,R11,#+1
   \   000000F4   9B0B22E0           MLA      R2,R11,R11,R0
   \   000000F8   020056E1           CMP      R6,R2
   \   000000FC   FBFFFFBA           BLT      ??FillCircle_10
     79                }
     80                LCD_HL_DrawHLine (x0 - x, y, x0 + x);
   \                     ??FillCircle_9:
   \   00000100   ........           LDR      R3,??DataTable1
   \   00000104   04208BE0           ADD      R2,R11,R4
   \   00000108   943093E5           LDR      R3,[R3, #+148]
   \   0000010C   0B0044E0           SUB      R0,R4,R11
   \   00000110   003093E5           LDR      R3,[R3, #+0]
   \   00000114   33FF2FE1           BLX      R3
     81              }
     82            }
   \                     ??FillCircle_8:
   \   00000118   019089E2           ADD      R9,R9,#+1
   \   0000011C   01A08AE2           ADD      R10,R10,#+1
   \   00000120   050059E1           CMP      R9,R5
   \   00000124   E9FFFFBA           BLT      ??FillCircle_7
     83          }
   \                     ??FillCircle_6:
   \   00000128   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000012C   F08FBDE8           POP      {R4-R11,PC}      ;; return
     84          
     85          /*********************************************************************
     86          *
     87          *       Public code
     88          *
     89          **********************************************************************
     90          */
     91          /*********************************************************************
     92          *
     93          *       GL_FillCircleAA_HiRes
     94          */

   \                                 In section .text, align 4, keep-with-next
     95          void GL_FillCircleAA_HiRes(int x0, int y0, int r) {
   \                     GL_FillCircleAA_HiRes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     96          /* Init AA Subsystem, pass horizontal limits */
     97            GUI_AA_Init_HiRes(x0 - r, x0 + r);
   \   00000010   041086E0           ADD      R1,R6,R4
   \   00000014   060044E0           SUB      R0,R4,R6
   \   00000018   ........           BL       GUI_AA_Init_HiRes
     98          /* Do the actual drawing */
     99            FillCircle(x0, y0, r);
   \   0000001C   0620A0E1           MOV      R2,R6
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FillCircle
    100          /* Cleanup */
    101            GUI_AA_Exit();
   \   0000002C   7040BDE8           POP      {R4-R6,LR}
   \   00000030   ........           B        GUI_AA_Exit      ;; tailcall
    102          }
    103          
    104          /*********************************************************************
    105          *
    106          *       GUI_AA_FillCircle
    107          */

   \                                 In section .text, align 4, keep-with-next
    108          void GUI_AA_FillCircle(int x0, int y0, int r) {
   \                     GUI_AA_FillCircle:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0240A0E1           MOV      R4,R2
    109            #if (GUI_WINSUPPORT)
    110              GUI_RECT Rect;
    111            #endif
    112            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
    113            #if (GUI_WINSUPPORT)
    114              WM_ADDORG_AA(x0,y0);
   \   00000018   ........           BL       WM__GetOrgX_AA
   \   0000001C   055080E0           ADD      R5,R0,R5
   \   00000020   ........           BL       WM__GetOrgY_AA
   \   00000024   066080E0           ADD      R6,R0,R6
    115            #endif
    116            if (!GUI_Context.AA_HiResEnable) {
   \   00000028   ........           LDR      R0,??DataTable1
   \   0000002C   9910D0E5           LDRB     R1,[R0, #+153]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0300001A           BNE      ??GUI_AA_FillCircle_0
   \   00000038   9800D0E5           LDRB     R0,[R0, #+152]
   \   0000003C   900505E0           MUL      R5,R0,R5
    117              x0 *= GUI_Context.AA_Factor;
    118              y0 *= GUI_Context.AA_Factor;
   \   00000040   900606E0           MUL      R6,R0,R6
    119              r  *= GUI_Context.AA_Factor;
   \   00000044   900404E0           MUL      R4,R0,R4
    120            }
    121            #if (GUI_WINSUPPORT)
    122              Rect.x0 = GUI_AA_HiRes2Pixel(x0 - r);
   \                     ??GUI_AA_FillCircle_0:
   \   00000048   047045E0           SUB      R7,R5,R4
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           BL       GUI_AA_HiRes2Pixel
   \   00000054   B000CDE1           STRH     R0,[SP, #+0]
    123              Rect.x1 = GUI_AA_HiRes2Pixel(x0 + r);
   \   00000058   058084E0           ADD      R8,R4,R5
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   ........           BL       GUI_AA_HiRes2Pixel
   \   00000064   B400CDE1           STRH     R0,[SP, #+4]
    124              Rect.y0 = GUI_AA_HiRes2Pixel(y0 - r);
   \   00000068   040046E0           SUB      R0,R6,R4
   \   0000006C   ........           BL       GUI_AA_HiRes2Pixel
   \   00000070   B200CDE1           STRH     R0,[SP, #+2]
    125              Rect.y1 = GUI_AA_HiRes2Pixel(y0 + r);
   \   00000074   060084E0           ADD      R0,R4,R6
   \   00000078   ........           BL       GUI_AA_HiRes2Pixel
   \   0000007C   B600CDE1           STRH     R0,[SP, #+6]
    126              WM_ITERATE_START(&Rect); {
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   ........           BL       WM__InitIVRSearch
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0A00000A           BEQ      ??GUI_AA_FillCircle_1
    127            #endif
    128            GL_FillCircleAA_HiRes(x0, y0, r);
   \                     ??GUI_AA_FillCircle_2:
   \   00000090   0810A0E1           MOV      R1,R8
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           BL       GUI_AA_Init_HiRes
   \   0000009C   0420A0E1           MOV      R2,R4
   \   000000A0   0610A0E1           MOV      R1,R6
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       FillCircle
   \   000000AC   ........           BL       GUI_AA_Exit
    129            #if (GUI_WINSUPPORT)
    130              } WM_ITERATE_END();
   \   000000B0   ........           BL       WM__GetNextIVR
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   F4FFFF1A           BNE      ??GUI_AA_FillCircle_2
    131            #endif
    132            GUI_UNLOCK();
   \                     ??GUI_AA_FillCircle_1:
   \   000000BC   ........           BL       GUI_Unlock
    133          }
   \   000000C0   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000C4   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context
    134          
    135          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     FillCircle                40
     GL_FillCircleAA_HiRes     16
     GUI_AA_FillCircle         32


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     FillCircle             304
     GL_FillCircleAA_HiRes   52
     GUI_AA_FillCircle      200
     ??DataTable1             4

 
 560 bytes in section .text
 
 560 bytes of CODE memory

Errors: none
Warnings: none
