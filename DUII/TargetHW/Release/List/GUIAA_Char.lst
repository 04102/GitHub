###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_Char.c                        #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_Char.c -D DEBUG=1 -D          #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIAA_Char.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIAA_Char.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_Char.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUICharAA.C
     19          Purpose     : Display antialiased
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24           
     25          #include <stdio.h>
     26          #include <string.h>
     27          
     28          /*********************************************************************
     29          *
     30          *       Types
     31          *
     32          **********************************************************************
     33          */
     34          
     35          typedef void tSetPixelAA(int x, int y, U8 Intens);
     36          
     37          /*********************************************************************
     38          *
     39          *       Static data
     40          *
     41          **********************************************************************
     42          */
     43          

   \                                 In section .text, align 4, keep-with-next
     44          static const U8 Bit2Mask0[] = {1<<7, 1<<5, 1<<3, 1<<1};
   \                     Bit2Mask0:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   80200802           DC8 128, 32, 8, 2

   \                                 In section .text, align 4, keep-with-next
     45          static const U8 Bit2Mask1[] = {1<<6, 1<<4, 1<<2, 1<<0};
   \                     Bit2Mask1:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   40100401           DC8 64, 16, 4, 1
     46          
     47          /*********************************************************************
     48          *
     49          *       Static code
     50          *
     51          **********************************************************************
     52          */
     53          /*********************************************************************
     54          *
     55          *       Draw
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          static void Draw(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8*pData) {
   \                     Draw:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable4
   \   00000008   34509DE5           LDR      R5,[SP, #+52]
   \   0000000C   2A00D0E5           LDRB     R0,[R0, #+42]
   \   00000010   020010E3           TST      R0,#0x2
   \   00000014   ........           LDRNE    R6,??DataTable4_1
   \   00000018   ........           LDREQ    R6,??DataTable4_2
     58            const U8 * pData0;
     59            const U8 * pData1;
     60            int x, y, PixelCnt, Mask0, Mask1;
     61            tSetPixelAA * pfSetPixelAA;
     62          
     63            pfSetPixelAA = (GUI_Context.TextMode & GUI_TM_TRANS)
     64                         ? LCD_SetPixelAA
     65                         : LCD_SetPixelAA_NoTrans;
     66            for (y = 0; y < YSize; y++) {
   \   0000001C   010053E3           CMP      R3,#+1
   \   00000020   3F0000BA           BLT      ??Draw_1
   \   00000024   0140A0E1           MOV      R4,R1
   \   00000028   0370A0E1           MOV      R7,R3
     67              pData0 = pData;
     68              pData1 = pData+BytesPerLine;
   \                     ??Draw_2:
   \   0000002C   30009DE5           LDR      R0,[SP, #+48]
   \   00000030   0580A0E1           MOV      R8,R5
   \   00000034   059080E0           ADD      R9,R0,R5
     69              for (x = 0; x < XSize; x++) {
   \   00000038   04009DE5           LDR      R0,[SP, #+4]
   \   0000003C   00A0A0E3           MOV      R10,#+0
   \   00000040   010050E3           CMP      R0,#+1
   \   00000044   310000BA           BLT      ??Draw_3
   \   00000048   00B09DE5           LDR      R11,[SP, #+0]
     70                PixelCnt = 0;
     71                Mask0 = Bit2Mask0[x & 3];
   \                     ??Draw_4:
   \   0000004C   ........           ADR      R2,Bit2Mask0
   \   00000050   03100AE2           AND      R1,R10,#0x3
   \   00000054   0210D1E7           LDRB     R1,[R1, +R2]
     72                Mask1 = Bit2Mask1[x & 3];
   \   00000058   ........           ADR      R3,Bit2Mask1
   \   0000005C   03200AE2           AND      R2,R10,#0x3
   \   00000060   0320D2E7           LDRB     R2,[R2, +R3]
     73                if ((*pData0) & Mask0) {
   \   00000064   0030D8E5           LDRB     R3,[R8, #+0]
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   030011E1           TST      R1,R3
     74                  PixelCnt++;
   \   00000070   0100A013           MOVNE    R0,#+1
     75                }
     76                if ((*pData0) & Mask1) {
   \   00000074   030012E1           TST      R2,R3
     77                  PixelCnt++;
     78                }
     79                if ((*pData1) & Mask0) {
   \   00000078   0030D9E5           LDRB     R3,[R9, #+0]
   \   0000007C   01008012           ADDNE    R0,R0,#+1
   \   00000080   030011E1           TST      R1,R3
     80                  PixelCnt++;
   \   00000084   01008012           ADDNE    R0,R0,#+1
     81                }
     82                if ((*pData1) & Mask1) {
   \   00000088   030012E1           TST      R2,R3
     83                  PixelCnt++;
   \   0000008C   01008012           ADDNE    R0,R0,#+1
     84                }
     85                if ((x&3) ==3) {
   \   00000090   03100AE2           AND      R1,R10,#0x3
   \   00000094   030051E3           CMP      R1,#+3
     86                  pData0++;
   \   00000098   01808802           ADDEQ    R8,R8,#+1
     87                  pData1++;
   \   0000009C   01908902           ADDEQ    R9,R9,#+1
     88                }
     89                switch (PixelCnt) {
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   030050E3           CMP      R0,#+3
   \   000000A8   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??Draw_0:
   \   000000AC   1200008A           BHI      ??Draw_5
   \   000000B0   0D0000EA           B        ??Draw_6
   \   000000B4   0A0000EA           B        ??Draw_7
   \   000000B8   070000EA           B        ??Draw_8
   \   000000BC   FFFFFFEA           B        ??Draw_9
     90                case 4: LCD_HL_DrawPixel(x0 + x, y0 + y);     break;
   \                     ??Draw_9:
   \   000000C0   ........           LDR      R2,??DataTable4
   \   000000C4   0410A0E1           MOV      R1,R4
   \   000000C8   942092E5           LDR      R2,[R2, #+148]
   \   000000CC   0B00A0E1           MOV      R0,R11
   \   000000D0   042092E5           LDR      R2,[R2, #+4]
   \   000000D4   32FF2FE1           BLX      R2
   \   000000D8   070000EA           B        ??Draw_5
     91                case 3: (*pfSetPixelAA) (x0 + x, y0 + y, 12); break;
   \                     ??Draw_8:
   \   000000DC   0C20A0E3           MOV      R2,#+12
   \   000000E0   020000EA           B        ??Draw_10
     92                case 2: (*pfSetPixelAA) (x0 + x, y0 + y, 8);  break;
   \                     ??Draw_7:
   \   000000E4   0820A0E3           MOV      R2,#+8
   \   000000E8   000000EA           B        ??Draw_10
     93                case 1: (*pfSetPixelAA) (x0 + x, y0 + y, 4);  break;
   \                     ??Draw_6:
   \   000000EC   0420A0E3           MOV      R2,#+4
   \                     ??Draw_10:
   \   000000F0   0410A0E1           MOV      R1,R4
   \   000000F4   0B00A0E1           MOV      R0,R11
   \   000000F8   36FF2FE1           BLX      R6
     94                }
     95              }
   \                     ??Draw_5:
   \   000000FC   04009DE5           LDR      R0,[SP, #+4]
   \   00000100   01A08AE2           ADD      R10,R10,#+1
   \   00000104   01B08BE2           ADD      R11,R11,#+1
   \   00000108   00005AE1           CMP      R10,R0
   \   0000010C   CEFFFFBA           BLT      ??Draw_4
     96              pData += 2 * BytesPerLine;
   \                     ??Draw_3:
   \   00000110   30009DE5           LDR      R0,[SP, #+48]
     97            }
   \   00000114   014084E2           ADD      R4,R4,#+1
   \   00000118   805085E0           ADD      R5,R5,R0, LSL #+1
   \   0000011C   017057E2           SUBS     R7,R7,#+1
   \   00000120   C1FFFF1A           BNE      ??Draw_2
     98          }
   \                     ??Draw_1:
   \   00000124   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000128   F08FBDE8           POP      {R4-R11,PC}      ;; return
     99          
    100          /*********************************************************************
    101          *
    102          *       Public code
    103          *
    104          **********************************************************************
    105          */
    106          /*********************************************************************
    107          *
    108          *       GUIPROPAA_DispChar
    109          */

   \                                 In section .text, align 4, keep-with-next
    110          void GUIPROPAA_DispChar(U16P c) {
   \                     GUIPROPAA_DispChar:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    111            int BytesPerLine;
    112            GUI_DRAWMODE DrawMode, OldDrawMode;
    113            const GUI_FONT_PROP * pProp;
    114            const GUI_CHARINFO  * pCharInfo;
    115          
    116            DrawMode = GUI_Context.TextMode;
   \   00000004   ........           LDR      R4,??DataTable4
   \   00000008   0060A0E1           MOV      R6,R0
    117            pProp    = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
   \   0000000C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000010   0CD04DE2           SUB      SP,SP,#+12
   \   00000014   FA52D4E1           LDRSH    R5,[R4, #+42]
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   1C0090E5           LDR      R0,[R0, #+28]
   \   00000020   ........           BL       GUIPROP__FindChar
    118            if (pProp) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1C00000A           BEQ      ??GUIPROPAA_DispChar_0
    119              pCharInfo    = pProp->paCharInfo+(c-pProp->First);
   \   0000002C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000030   040090E5           LDR      R0,[R0, #+4]
   \   00000034   011046E0           SUB      R1,R6,R1
   \   00000038   816180E0           ADD      R6,R0,R1, LSL #+3
    120              BytesPerLine = pCharInfo->BytesPerLine;
   \   0000003C   0270D6E5           LDRB     R7,[R6, #+2]
    121              OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           BL       LCD_SetDrawMode
   \   00000048   0050A0E1           MOV      R5,R0
    122              Draw(GUI_Context.DispPosX, GUI_Context.DispPosY,
    123                   (pCharInfo->XSize + 1) / 2,
    124                   GUI_Context.pAFont->YSize,
    125                   BytesPerLine,
    126                   (U8 const*) pCharInfo->pData);
   \   0000004C   040096E5           LDR      R0,[R6, #+4]
   \   00000050   00708DE5           STR      R7,[SP, #+0]
   \   00000054   04008DE5           STR      R0,[SP, #+4]
   \   00000058   1C0094E5           LDR      R0,[R4, #+28]
   \   0000005C   F412D4E1           LDRSH    R1,[R4, #+36]
   \   00000060   1830D0E5           LDRB     R3,[R0, #+24]
   \   00000064   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000068   010080E2           ADD      R0,R0,#+1
   \   0000006C   0008A0E1           LSL      R0,R0,#+16
   \   00000070   A028A0E1           LSR      R2,R0,#+17
   \   00000074   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000078   ........           BL       Draw
    127              LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           BL       LCD_SetDrawMode
    128              GUI_Context.DispPosX += (pCharInfo->XDist + 1) / 2;
   \   00000084   0110D6E5           LDRB     R1,[R6, #+1]
   \   00000088   F202D4E1           LDRSH    R0,[R4, #+34]
   \   0000008C   011081E2           ADD      R1,R1,#+1
   \   00000090   0118A0E1           LSL      R1,R1,#+16
   \   00000094   2118A0E1           LSR      R1,R1,#+16
   \   00000098   A10080E0           ADD      R0,R0,R1, LSR #+1
   \   0000009C   B202C4E1           STRH     R0,[R4, #+34]
    129            }
    130          }
   \                     ??GUIPROPAA_DispChar_0:
   \   000000A0   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
    131          
    132          /*********************************************************************
    133          *
    134          *       GUIPROPAA_GetCharDistX
    135          */

   \                                 In section .text, align 4, keep-with-next
    136          int GUIPROPAA_GetCharDistX(U16P c) {
   \                     GUIPROPAA_GetCharDistX:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    137            int r;
    138            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    139          
    140            pProp = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
   \   00000008   ........           LDR      R0,??DataTable4
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   1C0090E5           LDR      R0,[R0, #+28]
   \   00000014   1C0090E5           LDR      R0,[R0, #+28]
   \   00000018   ........           BL       GUIPROP__FindChar
    141            r = (pProp) ? (pProp->paCharInfo + (c - pProp->First))->XSize : 0;
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300000A           BEQ      ??GUIPROPAA_GetCharDistX_0
   \   00000024   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000028   040090E5           LDR      R0,[R0, #+4]
   \   0000002C   011044E0           SUB      R1,R4,R1
   \   00000030   8101D0E7           LDRB     R0,[R0, +R1, LSL #+3]
    142            return (r + 1) / 2;
   \                     ??GUIPROPAA_GetCharDistX_0:
   \   00000034   010080E2           ADD      R0,R0,#+1
   \   00000038   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000003C   C000A0E1           ASR      R0,R0,#+1
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
    143          }
    144          
    145          /*********************************************************************
    146          *
    147          *       GUIPROPAA_GetFontInfo
    148          */

   \                                 In section .text, align 4, keep-with-next
    149          void GUIPROPAA_GetFontInfo(const GUI_FONT * pFont, GUI_FONTINFO* pfi) {
    150            GUI_USE_PARA(pFont);
    151            pfi->Flags = GUI_FONTINFO_FLAG_PROP | GUI_FONTINFO_FLAG_AA;
   \                     GUIPROPAA_GetFontInfo:
   \   00000000   0500A0E3           MOV      R0,#+5
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    152          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    153          
    154          /*********************************************************************
    155          *
    156          *       GUIPROPAA_IsInFont
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          char GUIPROPAA_IsInFont(const GUI_FONT * pFont, U16 c) {
   \                     GUIPROPAA_IsInFont:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    159            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    160          
    161            pProp = GUIPROP__FindChar(pFont->p.pProp, c);
    162            return (pProp==NULL) ? 0 : 1;
   \   00000008   1C0090E5           LDR      R0,[R0, #+28]
   \   0000000C   ........           BL       GUIPROP__FindChar
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100A013           MOVNE    R0,#+1
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    163          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     LCD_SetPixelAA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     LCD_SetPixelAA_NoTrans
    164          
    165          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     Draw                       48
     GUIPROPAA_DispChar         32
     GUIPROPAA_GetCharDistX      8
     GUIPROPAA_GetFontInfo       0
     GUIPROPAA_IsInFont          8


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     Bit2Mask0                 4
     Bit2Mask1                 4
     Draw                    300
     GUIPROPAA_DispChar      168
     GUIPROPAA_GetCharDistX   68
     GUIPROPAA_GetFontInfo    12
     GUIPROPAA_IsInFont       32
     ??DataTable4              4
     ??DataTable4_1            4
     ??DataTable4_2            4

 
 600 bytes in section .text
 
 600 bytes of CODE memory

Errors: none
Warnings: none
