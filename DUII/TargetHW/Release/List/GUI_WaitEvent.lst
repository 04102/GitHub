###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:11 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_WaitEvent.c                     #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_WaitEvent.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_WaitEvent.lst          #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_WaitEvent.o             #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_WaitEvent.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_WaitEvent.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI_WaitEvent
     34          *
     35          *  Function description
     36          *    This function is called from a task which needs to wait for an event.
     37          *    The GUI-Lock will be freed when the task is suspended; the lock state
     38          *    is restored when execution continues.
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void GUI_WaitEvent(void) {
   \                     GUI_WaitEvent:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     41          #if GUI_OS
     42            unsigned LockCnt;
     43            unsigned i;
     44          
     45            GUI_LOCK();
   \   00000008   ........           BL       GUI_Lock
     46            LockCnt = GUITASK__EntranceCnt;
   \   0000000C   40009FE5           LDR      R0,??GUI_WaitEvent_0
   \   00000010   004090E5           LDR      R4,[R0, #+0]
     47            /*
     48             * Reset lock count
     49             */
     50            GUI_ALLOC_Lock();     /* Memory lock */
   \   00000014   ........           BL       GUI_ALLOC_Lock
     51            for (i = LockCnt; i; i--) {
   \   00000018   0450B0E1           MOVS     R5,R4
   \   0000001C   0200000A           BEQ      ??GUI_WaitEvent_1
     52              GUI_Unlock();       /* Dec task lock */
   \                     ??GUI_WaitEvent_2:
   \   00000020   ........           BL       GUI_Unlock
     53            }
   \   00000024   015055E2           SUBS     R5,R5,#+1
   \   00000028   FCFFFF1A           BNE      ??GUI_WaitEvent_2
     54          #endif
     55          #ifdef GUI_X_WAIT_EVENT_TIMED
     56            if (GUI_TIMER__IsActive()) {
     57              GUI_TIMER_TIME Period;
     58              Period = GUI_TIMER__GetPeriod();
     59              if (Period) {
     60                GUI_X_WAIT_EVENT_TIMED(Period);
     61              } else {
     62                GUI_X_WAIT_EVENT();
     63              }
     64            } else {
     65              GUI_X_WAIT_EVENT();
     66            }
     67          #else
     68            GUI_X_WAIT_EVENT();
   \                     ??GUI_WaitEvent_1:
   \   0000002C   ........           BL       GUI_X_ExecIdle
     69          #endif
     70          #if GUI_OS
     71            /*
     72             * Restore lock count
     73             */
     74            for (i = LockCnt; i; i--) {
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0200000A           BEQ      ??GUI_WaitEvent_3
     75              GUI_Lock();         /* Inc task lock */
   \                     ??GUI_WaitEvent_4:
   \   00000038   ........           BL       GUI_Lock
     76            }
   \   0000003C   014054E2           SUBS     R4,R4,#+1
   \   00000040   FCFFFF1A           BNE      ??GUI_WaitEvent_4
     77            GUI_ALLOC_Unlock()  ; /* Memory unlock */
   \                     ??GUI_WaitEvent_3:
   \   00000044   ........           BL       GUI_ALLOC_Unlock
     78            GUI_UNLOCK();
   \   00000048   04D08DE2           ADD      SP,SP,#+4
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   ........           B        GUI_Unlock       ;; tailcall
   \                     ??GUI_WaitEvent_0:
   \   00000054   ........           DC32     GUITASK__EntranceCnt
     79          #endif
     80          }
     81          
     82          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     GUI_WaitEvent     16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI_WaitEvent    88

 
 88 bytes in section .text
 
 88 bytes of CODE memory

Errors: none
Warnings: none
