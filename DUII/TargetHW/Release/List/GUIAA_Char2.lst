###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIAA_Char2.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUIAA_Char2.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIAA_Char2.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIAA_Char2.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIAA_Char2.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIAA_Char2.c
     19          Purpose     : Display antialiased characters 2bpp
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DrawCharAA2_Trans
     36          *
     37          * Purpose:
     38          *   Draws one character with transparency pixel by pixel
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          static void _DrawCharAA2_Trans(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8 * pData, void (* pfSetPixelAA)(int x, int y, U8 Intens)) {
   \                     _DrawCharAA2_Trans:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
     41            const U8 * pData0;
     42            int x, y, xPos, yPos, RemPixels;
     43            U8 Data;
     44            const int aConvTable[4] = {0, 5, 10, 15};
   \   00000004   ............       ADRL     R1,`?<Constant {0, 5, 10, 15}>`
   \              ....        
   \   0000000C   24D04DE2           SUB      SP,SP,#+36
   \   00000010   0C50B1E8           LDM      R1!,{R2,R3,R12,LR}
   \   00000014   60509DE5           LDR      R5,[SP, #+96]
   \   00000018   14008DE2           ADD      R0,SP,#+20
   \   0000001C   0C50A0E8           STM      R0!,{R2,R3,R12,LR}
     45          
     46            for (y = 0; y < YSize; y++) {
   \   00000020   30009DE5           LDR      R0,[SP, #+48]
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0C108DE5           STR      R1,[SP, #+12]
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   D90000BA           BLT      ??_DrawCharAA2_Trans_0
   \   00000034   28109DE5           LDR      R1,[SP, #+40]
   \   00000038   14608DE2           ADD      R6,SP,#+20
   \   0000003C   08108DE5           STR      R1,[SP, #+8]
     47              x         = 0;
     48              pData0    = pData;
     49              RemPixels = XSize;
   \                     ??_DrawCharAA2_Trans_1:
   \   00000040   2C809DE5           LDR      R8,[SP, #+44]
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   00108DE5           STR      R1,[SP, #+0]
   \   0000004C   5C709DE5           LDR      R7,[SP, #+92]
     50              yPos      = y0 + y;
   \   00000050   08909DE5           LDR      R9,[SP, #+8]
   \   00000054   040058E3           CMP      R8,#+4
   \   00000058   9B0000BA           BLT      ??_DrawCharAA2_Trans_2
   \   0000005C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000060   2C109DE5           LDR      R1,[SP, #+44]
   \   00000064   C000A0E1           ASR      R0,R0,#+1
   \   00000068   200F81E0           ADD      R0,R1,R0, LSR #+30
   \   0000006C   0010E0E3           MVN      R1,#+0
   \   00000070   00A0D7E5           LDRB     R10,[R7, #+0]
   \   00000074   400181E0           ADD      R0,R1,R0, ASR #+2
   \   00000078   10008DE5           STR      R0,[SP, #+16]
   \   0000007C   24409DE5           LDR      R4,[SP, #+36]
   \   00000080   010010E3           TST      R0,#0x1
   \   00000084   2100000A           BEQ      ??_DrawCharAA2_Trans_3
     51              while (RemPixels >= 4) {
     52                xPos = x + x0;
     53                Data = *pData0++;
     54                pfSetPixelAA(xPos + 0, yPos, aConvTable[Data >> 6]);
   \   00000088   4A03A0E1           ASR      R0,R10,#+6
   \   0000008C   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000090   0910A0E1           MOV      R1,R9
   \   00000094   FF2002E2           AND      R2,R2,#0xFF
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   35FF2FE1           BLX      R5
     55                Data <<= 2;
   \   000000A0   0AA1A0E1           LSL      R10,R10,#+2
     56                pfSetPixelAA(xPos + 1, yPos, aConvTable[Data >> 6]);
   \   000000A4   FF000AE2           AND      R0,R10,#0xFF
   \   000000A8   4003A0E1           ASR      R0,R0,#+6
   \   000000AC   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000000B0   0910A0E1           MOV      R1,R9
   \   000000B4   FF2002E2           AND      R2,R2,#0xFF
   \   000000B8   010084E2           ADD      R0,R4,#+1
   \   000000BC   35FF2FE1           BLX      R5
     57                Data <<= 2;
   \   000000C0   0AA1A0E1           LSL      R10,R10,#+2
     58                pfSetPixelAA(xPos + 2, yPos, aConvTable[Data >> 6]);
   \   000000C4   FF000AE2           AND      R0,R10,#0xFF
   \   000000C8   4003A0E1           ASR      R0,R0,#+6
   \   000000CC   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000000D0   0910A0E1           MOV      R1,R9
   \   000000D4   FF2002E2           AND      R2,R2,#0xFF
   \   000000D8   020084E2           ADD      R0,R4,#+2
   \   000000DC   35FF2FE1           BLX      R5
     59                Data <<= 2;
     60                pfSetPixelAA(xPos + 3, yPos, aConvTable[Data >> 6]);
   \   000000E0   0A01A0E1           LSL      R0,R10,#+2
   \   000000E4   FF0000E2           AND      R0,R0,#0xFF
   \   000000E8   402296E7           LDR      R2,[R6, +R0, ASR #+4]
   \   000000EC   0910A0E1           MOV      R1,R9
   \   000000F0   FF2002E2           AND      R2,R2,#0xFF
   \   000000F4   030084E2           ADD      R0,R4,#+3
   \   000000F8   35FF2FE1           BLX      R5
     61                RemPixels -= 4;
     62                x         += 4;
   \   000000FC   0410A0E3           MOV      R1,#+4
   \   00000100   00108DE5           STR      R1,[SP, #+0]
   \   00000104   048048E2           SUB      R8,R8,#+4
   \   00000108   01A0F7E5           LDRB     R10,[R7, #+1]!
   \   0000010C   044084E2           ADD      R4,R4,#+4
   \                     ??_DrawCharAA2_Trans_3:
   \   00000110   10109DE5           LDR      R1,[SP, #+16]
   \   00000114   A110A0E1           LSR      R1,R1,#+1
   \   00000118   04108DE5           STR      R1,[SP, #+4]
   \   0000011C   000051E3           CMP      R1,#+0
   \   00000120   4600000A           BEQ      ??_DrawCharAA2_Trans_4
   \                     ??_DrawCharAA2_Trans_5:
   \   00000124   4A03A0E1           ASR      R0,R10,#+6
   \   00000128   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   0000012C   0910A0E1           MOV      R1,R9
   \   00000130   FF2002E2           AND      R2,R2,#0xFF
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   35FF2FE1           BLX      R5
   \   0000013C   0AA1A0E1           LSL      R10,R10,#+2
   \   00000140   FF000AE2           AND      R0,R10,#0xFF
   \   00000144   4003A0E1           ASR      R0,R0,#+6
   \   00000148   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   0000014C   0910A0E1           MOV      R1,R9
   \   00000150   FF2002E2           AND      R2,R2,#0xFF
   \   00000154   010084E2           ADD      R0,R4,#+1
   \   00000158   35FF2FE1           BLX      R5
   \   0000015C   0AA1A0E1           LSL      R10,R10,#+2
   \   00000160   FF000AE2           AND      R0,R10,#0xFF
   \   00000164   4003A0E1           ASR      R0,R0,#+6
   \   00000168   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   0000016C   0910A0E1           MOV      R1,R9
   \   00000170   FF2002E2           AND      R2,R2,#0xFF
   \   00000174   020084E2           ADD      R0,R4,#+2
   \   00000178   35FF2FE1           BLX      R5
   \   0000017C   0A01A0E1           LSL      R0,R10,#+2
   \   00000180   FF0000E2           AND      R0,R0,#0xFF
   \   00000184   402296E7           LDR      R2,[R6, +R0, ASR #+4]
   \   00000188   0910A0E1           MOV      R1,R9
   \   0000018C   FF2002E2           AND      R2,R2,#0xFF
   \   00000190   030084E2           ADD      R0,R4,#+3
   \   00000194   35FF2FE1           BLX      R5
   \   00000198   01A0F7E5           LDRB     R10,[R7, #+1]!
   \   0000019C   04B084E2           ADD      R11,R4,#+4
   \   000001A0   0910A0E1           MOV      R1,R9
   \   000001A4   4A03A0E1           ASR      R0,R10,#+6
   \   000001A8   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000001AC   0B00A0E1           MOV      R0,R11
   \   000001B0   FF2002E2           AND      R2,R2,#0xFF
   \   000001B4   35FF2FE1           BLX      R5
   \   000001B8   0AA1A0E1           LSL      R10,R10,#+2
   \   000001BC   FF000AE2           AND      R0,R10,#0xFF
   \   000001C0   4003A0E1           ASR      R0,R0,#+6
   \   000001C4   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000001C8   0910A0E1           MOV      R1,R9
   \   000001CC   FF2002E2           AND      R2,R2,#0xFF
   \   000001D0   01008BE2           ADD      R0,R11,#+1
   \   000001D4   35FF2FE1           BLX      R5
   \   000001D8   0AA1A0E1           LSL      R10,R10,#+2
   \   000001DC   FF000AE2           AND      R0,R10,#0xFF
   \   000001E0   4003A0E1           ASR      R0,R0,#+6
   \   000001E4   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000001E8   0910A0E1           MOV      R1,R9
   \   000001EC   FF2002E2           AND      R2,R2,#0xFF
   \   000001F0   02008BE2           ADD      R0,R11,#+2
   \   000001F4   35FF2FE1           BLX      R5
   \   000001F8   0A01A0E1           LSL      R0,R10,#+2
   \   000001FC   FF0000E2           AND      R0,R0,#0xFF
   \   00000200   402296E7           LDR      R2,[R6, +R0, ASR #+4]
   \   00000204   0910A0E1           MOV      R1,R9
   \   00000208   FF2002E2           AND      R2,R2,#0xFF
   \   0000020C   03008BE2           ADD      R0,R11,#+3
   \   00000210   35FF2FE1           BLX      R5
   \   00000214   00109DE5           LDR      R1,[SP, #+0]
   \   00000218   088048E2           SUB      R8,R8,#+8
   \   0000021C   081081E2           ADD      R1,R1,#+8
   \   00000220   00108DE5           STR      R1,[SP, #+0]
   \   00000224   04109DE5           LDR      R1,[SP, #+4]
   \   00000228   01A0F7E5           LDRB     R10,[R7, #+1]!
   \   0000022C   011041E2           SUB      R1,R1,#+1
   \   00000230   04108DE5           STR      R1,[SP, #+4]
   \   00000234   084084E2           ADD      R4,R4,#+8
   \   00000238   000051E3           CMP      R1,#+0
   \   0000023C   B8FFFF1A           BNE      ??_DrawCharAA2_Trans_5
   \                     ??_DrawCharAA2_Trans_4:
   \   00000240   4A03A0E1           ASR      R0,R10,#+6
   \   00000244   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000248   04B0A0E1           MOV      R11,R4
   \   0000024C   017087E2           ADD      R7,R7,#+1
   \   00000250   FF2002E2           AND      R2,R2,#0xFF
   \   00000254   0910A0E1           MOV      R1,R9
   \   00000258   0B00A0E1           MOV      R0,R11
   \   0000025C   35FF2FE1           BLX      R5
   \   00000260   0A41A0E1           LSL      R4,R10,#+2
   \   00000264   FF0004E2           AND      R0,R4,#0xFF
   \   00000268   4003A0E1           ASR      R0,R0,#+6
   \   0000026C   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000270   0910A0E1           MOV      R1,R9
   \   00000274   FF2002E2           AND      R2,R2,#0xFF
   \   00000278   01008BE2           ADD      R0,R11,#+1
   \   0000027C   35FF2FE1           BLX      R5
   \   00000280   04A1A0E1           LSL      R10,R4,#+2
   \   00000284   FF000AE2           AND      R0,R10,#0xFF
   \   00000288   4003A0E1           ASR      R0,R0,#+6
   \   0000028C   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000290   0910A0E1           MOV      R1,R9
   \   00000294   FF2002E2           AND      R2,R2,#0xFF
   \   00000298   02008BE2           ADD      R0,R11,#+2
   \   0000029C   35FF2FE1           BLX      R5
   \   000002A0   0A01A0E1           LSL      R0,R10,#+2
   \   000002A4   FF0000E2           AND      R0,R0,#0xFF
   \   000002A8   402296E7           LDR      R2,[R6, +R0, ASR #+4]
   \   000002AC   0910A0E1           MOV      R1,R9
   \   000002B0   FF2002E2           AND      R2,R2,#0xFF
   \   000002B4   03008BE2           ADD      R0,R11,#+3
   \   000002B8   35FF2FE1           BLX      R5
   \   000002BC   00109DE5           LDR      R1,[SP, #+0]
   \   000002C0   048048E2           SUB      R8,R8,#+4
   \   000002C4   041081E2           ADD      R1,R1,#+4
   \   000002C8   00108DE5           STR      R1,[SP, #+0]
     63              }
     64              if (RemPixels) {
   \                     ??_DrawCharAA2_Trans_2:
   \   000002CC   000058E3           CMP      R8,#+0
   \   000002D0   2300000A           BEQ      ??_DrawCharAA2_Trans_6
     65                Data = *pData0;
   \   000002D4   00009DE5           LDR      R0,[SP, #+0]
   \   000002D8   24109DE5           LDR      R1,[SP, #+36]
   \   000002DC   00A0D7E5           LDRB     R10,[R7, #+0]
   \   000002E0   004081E0           ADD      R4,R1,R0
   \   000002E4   010018E3           TST      R8,#0x1
   \   000002E8   0700000A           BEQ      ??_DrawCharAA2_Trans_7
     66                while (RemPixels--) {
     67                  pfSetPixelAA(x++ + x0, yPos, aConvTable[Data >> 6]);
   \   000002EC   4A03A0E1           ASR      R0,R10,#+6
   \   000002F0   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000002F4   0910A0E1           MOV      R1,R9
   \   000002F8   FF2002E2           AND      R2,R2,#0xFF
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   35FF2FE1           BLX      R5
     68                  Data <<= 2;
   \   00000304   0AA1A0E1           LSL      R10,R10,#+2
   \   00000308   014084E2           ADD      R4,R4,#+1
   \                     ??_DrawCharAA2_Trans_7:
   \   0000030C   A870B0E1           LSRS     R7,R8,#+1
   \   00000310   1300000A           BEQ      ??_DrawCharAA2_Trans_6
   \                     ??_DrawCharAA2_Trans_8:
   \   00000314   FF000AE2           AND      R0,R10,#0xFF
   \   00000318   4003A0E1           ASR      R0,R0,#+6
   \   0000031C   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000320   0910A0E1           MOV      R1,R9
   \   00000324   FF2002E2           AND      R2,R2,#0xFF
   \   00000328   0400A0E1           MOV      R0,R4
   \   0000032C   35FF2FE1           BLX      R5
   \   00000330   0A81A0E1           LSL      R8,R10,#+2
   \   00000334   FF0008E2           AND      R0,R8,#0xFF
   \   00000338   4003A0E1           ASR      R0,R0,#+6
   \   0000033C   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   00000340   0910A0E1           MOV      R1,R9
   \   00000344   FF2002E2           AND      R2,R2,#0xFF
   \   00000348   010084E2           ADD      R0,R4,#+1
   \   0000034C   35FF2FE1           BLX      R5
   \   00000350   017047E2           SUB      R7,R7,#+1
   \   00000354   08A1A0E1           LSL      R10,R8,#+2
   \   00000358   024084E2           ADD      R4,R4,#+2
   \   0000035C   000057E3           CMP      R7,#+0
   \   00000360   EBFFFF1A           BNE      ??_DrawCharAA2_Trans_8
     69                }
     70              }
     71              pData += BytesPerLine;
   \                     ??_DrawCharAA2_Trans_6:
   \   00000364   58109DE5           LDR      R1,[SP, #+88]
   \   00000368   5C209DE5           LDR      R2,[SP, #+92]
   \   0000036C   021081E0           ADD      R1,R1,R2
   \   00000370   5C108DE5           STR      R1,[SP, #+92]
     72            }
   \   00000374   0C109DE5           LDR      R1,[SP, #+12]
   \   00000378   011081E2           ADD      R1,R1,#+1
   \   0000037C   0C108DE5           STR      R1,[SP, #+12]
   \   00000380   08109DE5           LDR      R1,[SP, #+8]
   \   00000384   0C009DE5           LDR      R0,[SP, #+12]
   \   00000388   011081E2           ADD      R1,R1,#+1
   \   0000038C   08108DE5           STR      R1,[SP, #+8]
   \   00000390   30109DE5           LDR      R1,[SP, #+48]
   \   00000394   010050E1           CMP      R0,R1
   \   00000398   28FFFFBA           BLT      ??_DrawCharAA2_Trans_1
     73          }
   \                     ??_DrawCharAA2_Trans_0:
   \   0000039C   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000003A0   F08FBDE8           POP      {R4-R11,PC}      ;; return
     74          
     75          /*********************************************************************
     76          *
     77          *       _DrawCharAA2_NoTrans
     78          *
     79          * Purpose:
     80          *   Draws one character without transparency as a bitmap
     81          */
     82          static void _DrawCharAA2_NoTrans(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8 * pData) {

   \                                 In section .data, align 4
     83            static LCD_COLOR      _aColor[4];
     84            static LCD_PIXELINDEX _OldColorIndex, _OldBkColorIndex;
     85            static GUI_LOGPALETTE _Palette = {4, 0, &_aColor[0]};
     86            static GUI_BITMAP     _Bitmap = {0, 0, 0, 2, 0, &_Palette, 0};
   \                     ??_Bitmap:
   \   00000000   000000000000       DC16 0, 0, 0, 2
   \              0200        
   \   00000008   00000000....       DC32 0H, ??_Palette, 0H
   \              ....00000000
   \                     ??_aColor:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     ??_Palette:
   \   00000024   04000000           DC32 4
   \   00000028   00000000           DC8 0, 0, 0, 0
   \   0000002C   ........           DC32 ??_aColor
   \   00000030   00000000           DC8 0, 0, 0, 0
   \   00000034   00000000           DC8 0, 0, 0, 0
     87            int i;
     88            LCD_PIXELINDEX ColorIndex, BkColorIndex;
     89            LCD_COLOR Color, BkColor;
     90          
     91            //
     92            // Get current color indices
     93            //
     94            BkColorIndex = LCD__GetBkColorIndex();
     95            ColorIndex   = LCD__GetColorIndex();
     96            //
     97            // Calculate new palette for bitmap if required
     98            //
     99            if ((_OldColorIndex   != ColorIndex) || 
    100                (_OldBkColorIndex != BkColorIndex)) {
    101              BkColor    = LCD_Index2Color(BkColorIndex);
    102              Color      = LCD_Index2Color(ColorIndex);
    103              _aColor[0] = BkColor;
    104              for (i = 1; i < 3; i++) {
    105                _aColor[i] = LCD_AA_MixColors(Color, BkColor, 5 * i);
    106              }
    107              _aColor[3] = Color;
    108              LCD_GetpPalConvTableUncached(&_Palette);
    109              _OldColorIndex = ColorIndex;
    110              _OldBkColorIndex = BkColorIndex;
    111            }
    112            //
    113            // Set bitmap properties
    114            //
    115            _Bitmap.XSize        = XSize;
    116            _Bitmap.YSize        = YSize;
    117            _Bitmap.BytesPerLine = BytesPerLine;
    118            _Bitmap.pData        = pData;
    119            //
    120            // Set transparency flag
    121            //
    122            _Palette.HasTrans = GUI__CharHasTrans;
    123            //
    124            // Draw bitmap
    125            //
    126            GL_DrawBitmap(&_Bitmap, x0, y0);
    127          }
    128          
    129          /*********************************************************************
    130          *
    131          *       Public code
    132          *
    133          **********************************************************************
    134          */
    135          /*********************************************************************
    136          *
    137          *       GUI_AA__DrawCharAA2
    138          */

   \                                 In section .text, align 4, keep-with-next
    139          void GUI_AA__DrawCharAA2(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8 * pData) {
   \                     GUI_AA__DrawCharAA2:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    140            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000008   ........           LDR      R0,??DataTable3
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   030000E2           AND      R0,R0,#0x3
   \   00000020   030050E3           CMP      R0,#+3
   \   00000024   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??GUI_AA__DrawCharAA2_0:
   \   00000028   3E00008A           BHI      ??GUI_AA__DrawCharAA2_1
   \   0000002C   020000EA           B        ??GUI_AA__DrawCharAA2_2
   \   00000030   330000EA           B        ??GUI_AA__DrawCharAA2_3
   \   00000034   300000EA           B        ??GUI_AA__DrawCharAA2_4
   \   00000038   310000EA           B        ??GUI_AA__DrawCharAA2_3
    141            case 0:
    142              _DrawCharAA2_NoTrans(x0, y0, XSize, YSize, BytesPerLine, pData);
   \                     ??GUI_AA__DrawCharAA2_2:
   \   0000003C   ........           LDR      R0,??DataTable3_1
   \   00000040   ........           LDR      R9,??DataTable3_2
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   007090E5           LDR      R7,[R0, #+0]
   \   0000004C   ........           LDR      R0,??DataTable3_3
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   008090E5           LDR      R8,[R0, #+0]
   \   00000058   300099E5           LDR      R0,[R9, #+48]
   \   0000005C   080050E1           CMP      R0,R8
   \   00000060   34009905           LDREQ    R0,[R9, #+52]
   \   00000064   07005001           CMPEQ    R0,R7
   \   00000068   1400000A           BEQ      ??GUI_AA__DrawCharAA2_5
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   ........           BL       LCD_Index2Color
   \   00000074   00A0A0E1           MOV      R10,R0
   \   00000078   0800A0E1           MOV      R0,R8
   \   0000007C   ........           BL       LCD_Index2Color
   \   00000080   00B0A0E1           MOV      R11,R0
   \   00000084   14A089E5           STR      R10,[R9, #+20]
   \   00000088   0520A0E3           MOV      R2,#+5
   \   0000008C   0A10A0E1           MOV      R1,R10
   \   00000090   ........           BL       LCD_AA_MixColors
   \   00000094   180089E5           STR      R0,[R9, #+24]
   \   00000098   0A20A0E3           MOV      R2,#+10
   \   0000009C   0A10A0E1           MOV      R1,R10
   \   000000A0   0B00A0E1           MOV      R0,R11
   \   000000A4   ........           BL       LCD_AA_MixColors
   \   000000A8   1C0089E5           STR      R0,[R9, #+28]
   \   000000AC   20B089E5           STR      R11,[R9, #+32]
   \   000000B0   240089E2           ADD      R0,R9,#+36
   \   000000B4   ........           BL       LCD_GetpPalConvTableUncached
   \   000000B8   308089E5           STR      R8,[R9, #+48]
   \   000000BC   347089E5           STR      R7,[R9, #+52]
   \                     ??GUI_AA__DrawCharAA2_5:
   \   000000C0   10009DE5           LDR      R0,[SP, #+16]
   \   000000C4   B260C9E1           STRH     R6,[R9, #+2]
   \   000000C8   B000C9E1           STRH     R0,[R9, #+0]
   \   000000CC   38009DE5           LDR      R0,[SP, #+56]
   \   000000D0   0520A0E1           MOV      R2,R5
   \   000000D4   B400C9E1           STRH     R0,[R9, #+4]
   \   000000D8   3C009DE5           LDR      R0,[SP, #+60]
   \   000000DC   0410A0E1           MOV      R1,R4
   \   000000E0   080089E5           STR      R0,[R9, #+8]
   \   000000E4   ........           LDR      R0,??DataTable3_4
   \   000000E8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000EC   2800C9E5           STRB     R0,[R9, #+40]
   \   000000F0   0900A0E1           MOV      R0,R9
   \   000000F4   ........           BL       GL_DrawBitmap
    143              break;
   \   000000F8   0A0000EA           B        ??GUI_AA__DrawCharAA2_1
    144            case LCD_DRAWMODE_TRANS:
    145              _DrawCharAA2_Trans(x0, y0, XSize, YSize, BytesPerLine, pData, LCD_SetPixelAA);
   \                     ??GUI_AA__DrawCharAA2_4:
   \   000000FC   ........           LDR      R0,??DataTable3_5
   \   00000100   000000EA           B        ??GUI_AA__DrawCharAA2_6
    146              break;
    147            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    148            case LCD_DRAWMODE_XOR:
    149              _DrawCharAA2_Trans(x0, y0, XSize, YSize, BytesPerLine, pData, LCD_SetPixelAA_Xor);
   \                     ??GUI_AA__DrawCharAA2_3:
   \   00000104   ........           LDR      R0,??DataTable3_6
   \                     ??GUI_AA__DrawCharAA2_6:
   \   00000108   08008DE5           STR      R0,[SP, #+8]
   \   0000010C   3C009DE5           LDR      R0,[SP, #+60]
   \   00000110   10209DE5           LDR      R2,[SP, #+16]
   \   00000114   04008DE5           STR      R0,[SP, #+4]
   \   00000118   38009DE5           LDR      R0,[SP, #+56]
   \   0000011C   00008DE5           STR      R0,[SP, #+0]
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       _DrawCharAA2_Trans
    150              break;
    151            }
    152          }
   \                     ??GUI_AA__DrawCharAA2_1:
   \   00000128   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000012C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    153          
    154          /*********************************************************************
    155          *
    156          *       GUIPROP_AA2_DispChar
    157          */

   \                                 In section .text, align 4, keep-with-next
    158          void GUIPROP_AA2_DispChar(U16P c) {
   \                     GUIPROP_AA2_DispChar:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    159            int BytesPerLine;
    160            GUI_DRAWMODE DrawMode, OldDrawMode;
    161            const GUI_FONT_PROP * pProp;
    162            const GUI_CHARINFO  * pCharInfo;
    163          
    164            DrawMode = GUI_Context.TextMode;
   \   00000004   ........           LDR      R4,??DataTable3
   \   00000008   0050A0E1           MOV      R5,R0
    165            pProp    = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
   \   0000000C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000010   18D04DE2           SUB      SP,SP,#+24
   \   00000014   FA72D4E1           LDRSH    R7,[R4, #+42]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   1C0090E5           LDR      R0,[R0, #+28]
   \   00000020   ........           BL       GUIPROP__FindChar
    166            if (pProp) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2600000A           BEQ      ??GUIPROP_AA2_DispChar_0
    167              pCharInfo    = pProp->paCharInfo + (c - pProp->First);
   \   0000002C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000030   040090E5           LDR      R0,[R0, #+4]
   \   00000034   011045E0           SUB      R1,R5,R1
   \   00000038   815180E0           ADD      R5,R0,R1, LSL #+3
    168              BytesPerLine = pCharInfo->BytesPerLine;
   \   0000003C   0260D5E5           LDRB     R6,[R5, #+2]
    169              OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           BL       LCD_SetDrawMode
   \   00000048   0070A0E1           MOV      R7,R0
   \   0000004C   ........           LDR      R12,??DataTable3_7
   \   00000050   1C0094E5           LDR      R0,[R4, #+28]
   \   00000054   00C09CE5           LDR      R12,[R12, #+0]
   \   00000058   1830D0E5           LDRB     R3,[R0, #+24]
   \   0000005C   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000060   F412D4E1           LDRSH    R1,[R4, #+36]
   \   00000064   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000068   04E095E5           LDR      LR,[R5, #+4]
   \   0000006C   00005CE3           CMP      R12,#+0
   \   00000070   0B00000A           BEQ      ??GUIPROP_AA2_DispChar_1
    170              #if GUI_SUPPORT_ROTATION
    171              if (GUI_pLCD_APIList) {
    172                GUI_pLCD_APIList->pfDrawBitmap(GUI_Context.DispPosX,      // XPos
    173                                               GUI_Context.DispPosY,      // YPos
    174                                               pCharInfo->XSize,          // XSize
    175                                               GUI_Context.pAFont->YSize, // YSize
    176                                               1,                         // XMag
    177                                               1,                         // YMag
    178                                               2,                         // BitsPerPixel
    179                                               BytesPerLine,              // BytesPerLine
    180                                               pCharInfo->pData,          // Pointer to pixel data
    181                                               NULL);                     // Translation table
   \   00000074   10E08DE5           STR      LR,[SP, #+16]
   \   00000078   02E0A0E3           MOV      LR,#+2
   \   0000007C   08E08DE5           STR      LR,[SP, #+8]
   \   00000080   0080A0E3           MOV      R8,#+0
   \   00000084   01E0A0E3           MOV      LR,#+1
   \   00000088   14808DE5           STR      R8,[SP, #+20]
   \   0000008C   0C608DE5           STR      R6,[SP, #+12]
   \   00000090   04E08DE5           STR      LR,[SP, #+4]
   \   00000094   00E08DE5           STR      LR,[SP, #+0]
   \   00000098   00C09CE5           LDR      R12,[R12, #+0]
   \   0000009C   3CFF2FE1           BLX      R12
   \   000000A0   020000EA           B        ??GUIPROP_AA2_DispChar_2
    182              } else {
    183              #else
    184              {
    185              #endif
    186                GUI_AA__DrawCharAA2(GUI_Context.DispPosX,          // XPos                 
    187                                    GUI_Context.DispPosY,          // YPos                 
    188                                    pCharInfo->XSize,              // XSize                
    189                                    GUI_Context.pAFont->YSize,     // YSize                
    190                                    BytesPerLine,                  // BytesPerLine         
    191                                    (U8 const *)pCharInfo->pData); // Pointer to pixel data
   \                     ??GUIPROP_AA2_DispChar_1:
   \   000000A4   04E08DE5           STR      LR,[SP, #+4]
   \   000000A8   00608DE5           STR      R6,[SP, #+0]
   \   000000AC   ........           BL       GUI_AA__DrawCharAA2
    192              }
    193              LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
   \                     ??GUIPROP_AA2_DispChar_2:
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   ........           BL       LCD_SetDrawMode
    194              GUI_Context.DispPosX += pCharInfo->XDist;
   \   000000B8   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000BC   0110D5E5           LDRB     R1,[R5, #+1]
   \   000000C0   000081E0           ADD      R0,R1,R0
   \   000000C4   B202C4E1           STRH     R0,[R4, #+34]
    195            }
    196          }
   \                     ??GUIPROP_AA2_DispChar_0:
   \   000000C8   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    197          
    198          /*********************************************************************
    199          *
    200          *       GUIPROP_AA2_GetCharDistX
    201          */

   \                                 In section .text, align 4, keep-with-next
    202          int GUIPROP_AA2_GetCharDistX(U16P c) {
   \                     GUIPROP_AA2_GetCharDistX:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    203            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    204          
    205            pProp = GUIPROP__FindChar(GUI_Context.pAFont->p.pProp, c);
   \   00000008   ........           LDR      R0,??DataTable3
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   1C0090E5           LDR      R0,[R0, #+28]
   \   00000014   1C0090E5           LDR      R0,[R0, #+28]
   \   00000018   ........           BL       GUIPROP__FindChar
    206            return (pProp) ? (pProp->paCharInfo + (c - pProp->First))->XSize : 0;
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300000A           BEQ      ??GUIPROP_AA2_GetCharDistX_0
   \   00000024   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000028   040090E5           LDR      R0,[R0, #+4]
   \   0000002C   011044E0           SUB      R1,R4,R1
   \   00000030   8101D0E7           LDRB     R0,[R0, +R1, LSL #+3]
   \                     ??GUIPROP_AA2_GetCharDistX_0:
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    207          }
    208          
    209          /*********************************************************************
    210          *
    211          *       GUIPROP_AA2_GetFontInfo
    212          */

   \                                 In section .text, align 4, keep-with-next
    213          void GUIPROP_AA2_GetFontInfo(const GUI_FONT * pFont, GUI_FONTINFO* pfi) {
    214            GUI_USE_PARA(pFont);
    215            pfi->Flags = GUI_FONTINFO_FLAG_PROP | GUI_FONTINFO_FLAG_AA2;
   \                     GUIPROP_AA2_GetFontInfo:
   \   00000000   0900A0E3           MOV      R0,#+9
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    216          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    217          
    218          /*********************************************************************
    219          *
    220          *       GUIPROP_AA2_IsInFont
    221          */

   \                                 In section .text, align 4, keep-with-next
    222          char GUIPROP_AA2_IsInFont(const GUI_FONT * pFont, U16 c) {
   \                     GUIPROP_AA2_IsInFont:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    223            const GUI_FONT_PROP GUI_UNI_PTR * pProp;
    224          
    225            pProp = GUIPROP__FindChar(pFont->p.pProp, c);
    226            return (pProp==NULL) ? 0 : 1;
   \   00000008   1C0090E5           LDR      R0,[R0, #+28]
   \   0000000C   ........           BL       GUIPROP__FindChar
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100A013           MOVNE    R0,#+1
   \   00000018   04D08DE2           ADD      SP,SP,#+4
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    227          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     ??_Bitmap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     GUI__CharHasTrans

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     LCD_SetPixelAA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   ........           DC32     LCD_SetPixelAA_Xor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   ........           DC32     GUI_pLCD_APIList

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0, 5, 10, 15}>`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   000000000500       DC32 0, 5, 10, 15
   \              00000A000000
   \              0F000000    
    228          
    229          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUIPROP_AA2_DispChar         48
     GUIPROP_AA2_GetCharDistX      8
     GUIPROP_AA2_GetFontInfo       0
     GUIPROP_AA2_IsInFont          8
     GUI_AA__DrawCharAA2          56
     _DrawCharAA2_Trans           88


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     _DrawCharAA2_Trans          932
     _Bitmap                      56
     _aColor
     _Palette
     _OldColorIndex
     _OldBkColorIndex
     GUI_AA__DrawCharAA2         304
     GUIPROP_AA2_DispChar        208
     GUIPROP_AA2_GetCharDistX     56
     GUIPROP_AA2_GetFontInfo      12
     GUIPROP_AA2_IsInFont         32
     ??DataTable3                  4
     ??DataTable3_1                4
     ??DataTable3_2                4
     ??DataTable3_3                4
     ??DataTable3_4                4
     ??DataTable3_5                4
     ??DataTable3_6                4
     ??DataTable3_7                4
     ?<Constant {0, 5, 10, 15}>   16

 
    56 bytes in section .data
 1 592 bytes in section .text
 
 1 592 bytes of CODE memory
    56 bytes of DATA memory

Errors: none
Warnings: none
