###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:59 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMax.c                #
#    Command line =  C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMax.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FRAMEWIN_ButtonMax.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FRAMEWIN_ButtonMax.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\FRAMEWIN_ButtonMax.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FRAMEWIN_ButtonMax.c
     19          Purpose     : 
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          
     24          #include <stdlib.h>
     25          #include <string.h>
     26          #include "GUI_Private.h"
     27          #include "FRAMEWIN_Private.h"
     28          #include "BUTTON.h"
     29          
     30          #if GUI_WINSUPPORT
     31          
     32          /*********************************************************************
     33          *
     34          *        Static code
     35          *
     36          **********************************************************************
     37          */
     38          /*********************************************************************
     39          *
     40          *       Callback
     41          *
     42          * This is the overwritten callback routine for the button.
     43          * The primary reason for overwriting it is that we define the default
     44          * action of the Framewindow here.
     45          * It works as follows:
     46          * - User clicks and releases the button
     47          *   -> BUTTON sends WM_NOTIFY_PARENT to FRAMEWIN
     48          *     -> FRAMEWIN either a) reacts or b)sends WM_NOTIFY_PARENT_REFLECTION back
     49          *       In case of a) This module reacts !
     50          */

   \                                 In section .text, align 4, keep-with-next
     51          static void _cbMax(WM_MESSAGE * pMsg) {
   \                     _cbMax:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     52            if (pMsg->MsgId == WM_NOTIFY_PARENT_REFLECTION) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   270051E3           CMP      R1,#+39
   \   00000010   0B00001A           BNE      ??_cbMax_0
     53              WM_HWIN hObj;
     54              FRAMEWIN_Obj * pObj;
     55              U16 Flags;
     56              hObj = pMsg->hWinSrc;
   \   00000014   084090E5           LDR      R4,[R0, #+8]
     57              pObj = FRAMEWIN_LOCK_H(hObj);
     58              Flags = pObj->Flags;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   BC57D0E1           LDRH     R5,[R0, #+124]
     59              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
     60              if (Flags & FRAMEWIN_SF_MAXIMIZED) {
   \   00000028   800015E3           TST      R5,#0x80
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0100000A           BEQ      ??_cbMax_1
     61                FRAMEWIN_Restore(hObj);
   \   00000034   ........           BL       FRAMEWIN_Restore
   \   00000038   020000EA           B        ??_cbMax_2
     62              } else {
     63                FRAMEWIN_Maximize(hObj);
   \                     ??_cbMax_1:
   \   0000003C   ........           BL       FRAMEWIN_Maximize
   \   00000040   000000EA           B        ??_cbMax_2
     64              }
     65              return;                                       /* We are done ! */
     66            }
     67            BUTTON_Callback(pMsg);
   \                     ??_cbMax_0:
   \   00000044   ........           BL       BUTTON_Callback
     68          }
   \                     ??_cbMax_2:
   \   00000048   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     69          
     70          /*********************************************************************
     71          *
     72          *       _DrawMax
     73          */

   \                                 In section .text, align 4, keep-with-next
     74          static void _DrawMax(WM_HWIN hObj) {
   \                     _DrawMax:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     75            GUI_RECT r;
     76            WM_GetInsideRectEx(hObj, &r);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   ........           BL       WM_GetInsideRectEx
     77            WM_ADDORG(r.x0, r.y0);
   \   00000010   ........           LDR      R1,??DataTable2
   \   00000014   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000018   400091E5           LDR      R0,[R1, #+64]
   \   0000001C   441091E5           LDR      R1,[R1, #+68]
   \   00000020   022080E0           ADD      R2,R0,R2
   \   00000024   B020CDE1           STRH     R2,[SP, #+0]
   \   00000028   F220DDE1           LDRSH    R2,[SP, #+2]
   \   0000002C   022081E0           ADD      R2,R1,R2
   \   00000030   B220CDE1           STRH     R2,[SP, #+2]
     78            WM_ADDORG(r.x1, r.y1);
   \   00000034   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000038   020080E0           ADD      R0,R0,R2
   \   0000003C   B400CDE1           STRH     R0,[SP, #+4]
   \   00000040   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000044   000081E0           ADD      R0,R1,R0
   \   00000048   B600CDE1           STRH     R0,[SP, #+6]
     79            WM_ITERATE_START(&r); {
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       WM__InitIVRSearch
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   2500000A           BEQ      ??_DrawMax_0
     80              LCD_DrawHLine(r.x0 + 1, r.y0 + 1, r.x1 - 1);
   \                     ??_DrawMax_1:
   \   0000005C   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000060   012040E2           SUB      R2,R0,#+1
   \   00000064   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000068   011080E2           ADD      R1,R0,#+1
   \   0000006C   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   ........           BL       LCD_DrawHLine
     81              LCD_DrawHLine(r.x0 + 1, r.y0 + 2, r.x1 - 1);
   \   00000078   F400DDE1           LDRSH    R0,[SP, #+4]
   \   0000007C   012040E2           SUB      R2,R0,#+1
   \   00000080   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000084   021080E2           ADD      R1,R0,#+2
   \   00000088   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   ........           BL       LCD_DrawHLine
     82              LCD_DrawHLine(r.x0 + 1, r.y1 - 1, r.x1 - 1);
   \   00000094   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000098   012040E2           SUB      R2,R0,#+1
   \   0000009C   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000A0   011040E2           SUB      R1,R0,#+1
   \   000000A4   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000A8   010080E2           ADD      R0,R0,#+1
   \   000000AC   ........           BL       LCD_DrawHLine
     83              LCD_DrawVLine(r.x0 + 1, r.y0 + 1, r.y1 - 1);
   \   000000B0   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000B4   012040E2           SUB      R2,R0,#+1
   \   000000B8   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000BC   011080E2           ADD      R1,R0,#+1
   \   000000C0   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   ........           BL       LCD_DrawVLine
     84              LCD_DrawVLine(r.x1 - 1, r.y0 + 1, r.y1 - 1);
   \   000000CC   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000D0   012040E2           SUB      R2,R0,#+1
   \   000000D4   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000D8   011080E2           ADD      R1,R0,#+1
   \   000000DC   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000E0   010040E2           SUB      R0,R0,#+1
   \   000000E4   ........           BL       LCD_DrawVLine
     85            } WM_ITERATE_END();
   \   000000E8   ........           BL       WM__GetNextIVR
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   D9FFFF1A           BNE      ??_DrawMax_1
     86          }
   \                     ??_DrawMax_0:
   \   000000F4   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   000000F8   0080BDE8           POP      {PC}             ;; return
     87          
     88          /*********************************************************************
     89          *
     90          *       _DrawRestore
     91          */

   \                                 In section .text, align 4, keep-with-next
     92          static void _DrawRestore(WM_HWIN hObj) {
   \                     _DrawRestore:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
     93            GUI_RECT r;
     94            int Size;
     95            WM_GetInsideRectEx(hObj, &r);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   ........           BL       WM_GetInsideRectEx
     96            WM_ADDORG(r.x0, r.y0);
   \   00000010   ........           LDR      R1,??DataTable2
   \   00000014   F020DDE1           LDRSH    R2,[SP, #+0]
   \   00000018   400091E5           LDR      R0,[R1, #+64]
   \   0000001C   441091E5           LDR      R1,[R1, #+68]
   \   00000020   022080E0           ADD      R2,R0,R2
   \   00000024   B020CDE1           STRH     R2,[SP, #+0]
   \   00000028   F220DDE1           LDRSH    R2,[SP, #+2]
   \   0000002C   022081E0           ADD      R2,R1,R2
   \   00000030   B220CDE1           STRH     R2,[SP, #+2]
     97            WM_ADDORG(r.x1, r.y1);
   \   00000034   F420DDE1           LDRSH    R2,[SP, #+4]
   \   00000038   020080E0           ADD      R0,R0,R2
   \   0000003C   F620DDE1           LDRSH    R2,[SP, #+6]
   \   00000040   B400CDE1           STRH     R0,[SP, #+4]
     98            Size = ((r.x1 - r.x0 + 1) << 1) / 3;
   \   00000044   0008A0E1           LSL      R0,R0,#+16
   \   00000048   021081E0           ADD      R1,R1,R2
   \   0000004C   B610CDE1           STRH     R1,[SP, #+6]
   \   00000050   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000054   4008A0E1           ASR      R0,R0,#+16
   \   00000058   010040E0           SUB      R0,R0,R1
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \   00000060   ........           LDR      R1,??DataTable2_1  ;; 0x55555556
   \   00000064   8000A0E1           LSL      R0,R0,#+1
   \   00000068   9021C1E0           SMULL    R2,R1,R0,R1
     99            WM_ITERATE_START(&r); {
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   0140B0E1           MOVS     R4,R1
   \   00000074   01408142           ADDMI    R4,R1,#+1
   \   00000078   ........           BL       WM__InitIVRSearch
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   4100000A           BEQ      ??_DrawRestore_0
    100              LCD_DrawHLine(r.x1 - Size, r.y0 + 1,        r.x1 - 1);
   \                     ??_DrawRestore_1:
   \   00000084   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000088   F210DDE1           LDRSH    R1,[SP, #+2]
   \   0000008C   012040E2           SUB      R2,R0,#+1
   \   00000090   011081E2           ADD      R1,R1,#+1
   \   00000094   040040E0           SUB      R0,R0,R4
   \   00000098   ........           BL       LCD_DrawHLine
    101              LCD_DrawHLine(r.x1 - Size, r.y0 + 2,        r.x1 - 1);
   \   0000009C   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000A0   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000A4   012040E2           SUB      R2,R0,#+1
   \   000000A8   021081E2           ADD      R1,R1,#+2
   \   000000AC   040040E0           SUB      R0,R0,R4
   \   000000B0   ........           BL       LCD_DrawHLine
    102              LCD_DrawHLine(r.x0 + Size, r.y0 + Size,     r.x1 - 1);
   \   000000B4   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000B8   012040E2           SUB      R2,R0,#+1
   \   000000BC   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000C0   001084E0           ADD      R1,R4,R0
   \   000000C4   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000C8   000084E0           ADD      R0,R4,R0
   \   000000CC   ........           BL       LCD_DrawHLine
    103              LCD_DrawVLine(r.x1 - Size, r.y0 + 1,        r.y1 - Size);
   \   000000D0   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000D4   042040E0           SUB      R2,R0,R4
   \   000000D8   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000DC   011080E2           ADD      R1,R0,#+1
   \   000000E0   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000E4   040040E0           SUB      R0,R0,R4
   \   000000E8   ........           BL       LCD_DrawVLine
    104              LCD_DrawVLine(r.x1 - 1,    r.y0 + 1,        r.y0 + Size);
   \   000000EC   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000F0   002084E0           ADD      R2,R4,R0
   \   000000F4   011080E2           ADD      R1,R0,#+1
   \   000000F8   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000FC   010040E2           SUB      R0,R0,#+1
   \   00000100   ........           BL       LCD_DrawVLine
    105              LCD_DrawHLine(r.x0 + 1,    r.y1 - Size,     r.x0 + Size);
   \   00000104   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000108   F610DDE1           LDRSH    R1,[SP, #+6]
   \   0000010C   002084E0           ADD      R2,R4,R0
   \   00000110   041041E0           SUB      R1,R1,R4
   \   00000114   010080E2           ADD      R0,R0,#+1
   \   00000118   ........           BL       LCD_DrawHLine
    106              LCD_DrawHLine(r.x0 + 1,    r.y1 - Size + 1, r.x0 + Size);
   \   0000011C   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000120   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000124   002084E0           ADD      R2,R4,R0
   \   00000128   041041E0           SUB      R1,R1,R4
   \   0000012C   011081E2           ADD      R1,R1,#+1
   \   00000130   010080E2           ADD      R0,R0,#+1
   \   00000134   ........           BL       LCD_DrawHLine
    107              LCD_DrawHLine(r.x0 + 1,    r.y1 - 1,        r.x0 + Size);
   \   00000138   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000013C   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000140   002084E0           ADD      R2,R4,R0
   \   00000144   011041E2           SUB      R1,R1,#+1
   \   00000148   010080E2           ADD      R0,R0,#+1
   \   0000014C   ........           BL       LCD_DrawHLine
    108              LCD_DrawVLine(r.x0 + 1,    r.y1 - Size,     r.y1 - 1);
   \   00000150   F600DDE1           LDRSH    R0,[SP, #+6]
   \   00000154   012040E2           SUB      R2,R0,#+1
   \   00000158   041040E0           SUB      R1,R0,R4
   \   0000015C   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   ........           BL       LCD_DrawVLine
    109              LCD_DrawVLine(r.x0 + Size, r.y1 - Size,     r.y1 - 1);
   \   00000168   F600DDE1           LDRSH    R0,[SP, #+6]
   \   0000016C   012040E2           SUB      R2,R0,#+1
   \   00000170   041040E0           SUB      R1,R0,R4
   \   00000174   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000178   000084E0           ADD      R0,R4,R0
   \   0000017C   ........           BL       LCD_DrawVLine
    110            } WM_ITERATE_END();
   \   00000180   ........           BL       WM__GetNextIVR
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   BDFFFF1A           BNE      ??_DrawRestore_1
    111          }
   \                     ??_DrawRestore_0:
   \   0000018C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000190   1080BDE8           POP      {R4,PC}          ;; return
    112          
    113          /*********************************************************************
    114          *
    115          *       _Draw
    116          */

   \                                 In section .text, align 4, keep-with-next
    117          static void _Draw(WM_HWIN hObj) {
   \                     _Draw:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    118            FRAMEWIN_Obj * pFrame;
    119            U16 Flags;
    120            WM_HWIN hFrame;
    121          
    122            hFrame = WM_GetParent(hObj);
   \   0000000C   ........           BL       WM_GetParent
    123            pFrame = FRAMEWIN_LOCK_H(hFrame);
    124            Flags = pFrame->Flags;
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   BC57D0E1           LDRH     R5,[R0, #+124]
    125            GUI_UNLOCK_H(pFrame);
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
    126            GUI_SetColor(GUI_BLACK);
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           BL       GUI_SetColor
    127            if (Flags & FRAMEWIN_SF_MAXIMIZED) {
   \   00000024   800015E3           TST      R5,#0x80
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   0100000A           BEQ      ??_Draw_0
    128              _DrawRestore(hObj);
   \   00000030   ........           BL       _DrawRestore
   \   00000034   000000EA           B        ??_Draw_1
    129            } else {
    130              _DrawMax(hObj);
   \                     ??_Draw_0:
   \   00000038   ........           BL       _DrawMax
    131            }
    132          }
   \                     ??_Draw_1:
   \   0000003C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
    133          
    134          /*********************************************************************
    135          *
    136          *        Exported routines
    137          *
    138          **********************************************************************
    139          */
    140          /*********************************************************************
    141          *
    142          *       FRAMEWIN_AddMaxButton
    143          */

   \                                 In section .text, align 4, keep-with-next
    144          WM_HWIN FRAMEWIN_AddMaxButton(FRAMEWIN_Handle hObj, int Flags, int Off) {
   \                     FRAMEWIN_AddMaxButton:
   \   00000000   10402DE9           PUSH     {R4,LR}
    145            WM_HWIN hButton;
    146            hButton = FRAMEWIN_AddButton(hObj, Flags, Off, GUI_ID_MAXIMIZE);
   \   00000004   0730A0E3           MOV      R3,#+7
   \   00000008   ........           BL       FRAMEWIN_AddButton
   \   0000000C   0040A0E1           MOV      R4,R0
    147            BUTTON_SetSelfDraw(hButton, 0, &_Draw);
   \   00000010   ........           LDR      R2,??DataTable2_2
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           BL       BUTTON_SetSelfDraw
    148            WM_SetCallback(hButton, _cbMax);
   \   0000001C   ........           LDR      R1,??DataTable2_3
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       WM_SetCallback
    149            return hButton;
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    150          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   56555555           DC32     0x55555556

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     _Draw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     _cbMax
    151          
    152          #else
    153            void FRAMEWIN_ButtonMax_c(void) {} /* avoid empty object files */
    154          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     FRAMEWIN_AddMaxButton      8
     _Draw                     16
     _DrawMax                  16
     _DrawRestore              16
     _cbMax                    16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     _cbMax                  80
     _DrawMax               252
     _DrawRestore           404
     _Draw                   68
     FRAMEWIN_AddMaxButton   48
     ??DataTable2             4
     ??DataTable2_1           4
     ??DataTable2_2           4
     ??DataTable2_3           4

 
 868 bytes in section .text
 
 868 bytes of CODE memory

Errors: none
Warnings: none
