###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     31/Dec/2010  09:06:53 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\CalibrateTouchScreen.c                      #
#    Command line =  C:\DUII\DUII\CalibrateTouchScreen.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ --cpu_mode arm -Ohs --use_c++_inline         #
#                    --require_prototypes                                     #
#    List file    =  C:\DUII\TargetHW\Release\List\CalibrateTouchScreen.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\CalibrateTouchScreen.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\CalibrateTouchScreen.c
      1          
      2          /*********************************************************************
      3          *                SEGGER Microcontroller GmbH & Co. KG                *
      4          *        Solutions for real time microcontroller applications        *
      5          **********************************************************************
      6          *                                                                    *
      7          *        (c) 1996 - 2009  SEGGER Microcontroller GmbH & Co. KG       *
      8          *                                                                    *
      9          *        Internet: www.segger.com    Support:  support@segger.com    *
     10          *                                                                    *
     11          **********************************************************************
     12          
     13          ** emWin V5.00 - Graphical user interface for embedded applications **
     14          emWin is protected by international copyright laws.   Knowledge of the
     15          source code may not be used to write a similar product.  This file may
     16          only be used in accordance with a license and should not be re-
     17          distributed in any way. We appreciate your understanding and fairness.
     18          ----------------------------------------------------------------------
     19          File        : MainTask.C
     20          Purpose     : Main program, called from after main after initialisation
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          #include <stdio.h>
     25          #include <stdlib.h>
     26          #include "commondefs.h"
     27          #include "DUII.h"
     28          #include "GUI.h"
     29          #include "CalibrateTouchScreen.h"
     30          #include "FlashReadWrite.h"
     31          #if	_WINDOWS
     32          #include "SIMConf.h"
     33          #else
     34          #include "LCDConf.h"
     35          #endif
     36          
     37          
     38          /*********************************************************************
     39          *
     40          *       External data and code
     41          *
     42          **********************************************************************
     43          */
     44          extern GUI_CONST_STORAGE GUI_BITMAP bmtarget;
     45          
     46          /*********************************************************************
     47          *
     48          *       Public code
     49          *
     50          **********************************************************************
     51          */
     52          
     53          /*********************************************************************
     54          *
     55          *       Local Prototypes
     56          *
     57          **********************************************************************
     58          */
     59          void MoveToNextPos(void);
     60          void TouchScreenCallback(WM_MESSAGE * pMsg);
     61          
     62          /*********************************************************************
     63          *
     64          *       Local Valiables
     65          *
     66          **********************************************************************
     67          */
     68          
     69          int PositionTable[5][2] = {
     70          	{ 45, 19 },
     71          	{ 405, 19 },
     72          	{ 405, 223 },
     73          	{ 45, 223 },
     74          	{ 0, 0 }
     75          };
     76          
     77          static int position = 0;
     78          static int done = 0;
     79          static WM_HWIN hBtn = 0;
     80          
     81          void MoveToNextPos(void)
     82          {
     83          	if (hBtn)
     84          		WM_DeleteWindow(hBtn);
     85          
     86          	GUI_Clear();
     87          	hBtn = BUTTON_CreateEx( PositionTable[position][0], PositionTable[position][1], 31, 31, 0, WM_CF_SHOW, 0, GUI_ID_USER);
     88          	WIDGET_SetEffect(hBtn, &WIDGET_Effect_None);
     89          	BUTTON_SetBitmap( hBtn, BUTTON_BI_UNPRESSED, &bmtarget);
     90          		GUI_DispStringHCenterAt("Touch the target", XSIZE_PHYS/2, YSIZE_PHYS/2);
     91          }
     92          
     93          void TouchScreenCallback(WM_MESSAGE * pMsg)
     94          {
     95          	int NCode, Id;
     96          
     97          	switch(pMsg->MsgId)
     98          	{
     99          	case WM_NOTIFY_PARENT:
    100                Id    = WM_GetId(pMsg->hWinSrc);      // Id of widget
    101                NCode = pMsg->Data.v;                 // Notification code
    102          	   switch(NCode)
    103          		{
    104          		case WM_NOTIFICATION_CLICKED:
    105          			switch (Id)
    106          			{
    107          				case GUI_ID_USER:
    108          					if (PositionTable[++position][0] != 0)
    109          						MoveToNextPos();
    110          					else
    111          					{
    112          						done = TRUE;
    113          						glbData.touchScreenCalibrated = TRUE;
    114          						WriteDataStructures();
    115          					}
    116          					break;
    117          		  };
    118          	  };
    119          	  break;
    120          
    121          	default:
    122          		  WM_DefaultProc(pMsg);
    123          	};
    124          }
    125          
    126          /*********************************************************************
    127          *
    128          *       General Config Screen
    129          */
    130          
    131          void CalibrateTouchScreen(void)
    132          {
    133          #ifndef	_WINDOWS
    134          	// Put touch screen controller in Calibration Mode
    135          	if (StartTouchCalibration() == -1)
    136          		return;		// Failed to put chip in calibration mode
    137          #endif
    138          	
    139          	GUI_SetFont(&GUI_Font24_ASCII);
    140          	MoveToNextPos();
    141          
    142          	WM_SetCallback( WM_GetDesktopWindow(), TouchScreenCallback);
    143          
    144          	while (!done)
    145          	{
    146          #ifndef	_WINDOWS
    147          		int retval;
    148          		
    149          	// Wait for valid touch
    150          		if ((retval = GetTouchPoint()) == -1)
    151          			return;		// Error when talking to touch screen - error out
    152          		if (retval == 1)		// If valid touch detected
    153          		{
    154          			if (PositionTable[++position][0] != 0)
    155          				MoveToNextPos();
    156          			else
    157          			{
    158          				glbData.touchScreenCalibrated = TRUE;
    159          				WriteDataStructures();
    160          				return;			// Exit application
    161          			}
    162          		}
    163          #endif
    164          
    165          		GUI_Delay(10);
    166          #ifdef _WINDOWS
    167          		if (SIM_Tick())
    168          			return;
    169          #endif
    170          	}
    171          }
    172          
    173          /*************************** End of file ****************************/
    174          

Errors: 4
Warnings: none
