###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:02 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Dir.c                             #
#    Command line =  C:\DUII\TargetHW\FS\FS_Dir.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Dir.lst                 #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Dir.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Dir.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Dir.c
     19          Purpose     : Directory support functions
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include <stdlib.h>
     31          
     32          #include "FS_Int.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code, internal version of API functions
     37          *
     38          **********************************************************************
     39          */
     40          /*********************************************************************
     41          *
     42          *       FS__MkDir
     43          *
     44          *  Function description
     45          *    Internal version of FS_MkDir.
     46          *    Creates a directory.
     47          *
     48          *  Parameters
     49          *    pDirName    - Fully qualified directory name.
     50          *
     51          *  Return value
     52          *    ==0         - Directory has been created.
     53          *    ==-1        - An error has occurred.
     54          */

   \                                 In section .text, align 4, keep-with-next
     55          int FS__MkDir(const char * pDirName) {
   \                     FS__MkDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     56            int          r;
     57            FS_VOLUME  * pVolume;
     58            const char * s;
     59            r = -1;
   \   00000008   0040E0E3           MVN      R4,#+0
     60            /* Find correct FSL (device:unit:name) */
     61            pVolume = FS__FindVolume(pDirName, &s);
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   ........           BL       FS__FindVolume
   \   00000014   0050B0E1           MOVS     R5,R0
     62            if (pVolume) {
   \   00000018   0600000A           BEQ      ??FS__MkDir_0
     63              if (FS__AutoMount(pVolume) == FS_MOUNT_RW) {
   \   0000001C   ........           BL       FS__AutoMount
   \   00000020   030050E3           CMP      R0,#+3
   \   00000024   0300001A           BNE      ??FS__MkDir_0
     64                /* Execute the FSL function */
     65                FS_LOCK_DRIVER(&pVolume->Partition.Device);
     66                FS_JOURNAL_BEGIN(pVolume);
     67                r = FS_CREATEDIR(pVolume, s);
   \   00000028   00109DE5           LDR      R1,[SP, #+0]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       FS_FAT_CreateDir
   \   00000034   0040A0E1           MOV      R4,R0
     68                FS_JOURNAL_END  (pVolume);
     69                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
     70              }
     71            }
     72            return r;
   \                     ??FS__MkDir_0:
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
     73          }
     74          
     75          
     76          /*********************************************************************
     77          *
     78          *       FS__RmDir
     79          *
     80          *  Function description
     81          *    Internal version of FS_RmDir.
     82          *    Removes a directory. if it is an empty directory.
     83          *
     84          *  Parameters
     85          *    pDirName    - Fully qualified directory name.
     86          *
     87          *  Return value
     88          *    ==0         - Directory has been removed.
     89          *    ==-1        - An error has occurred.
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          int FS__RmDir(const char * sDirName) {
   \                     FS__RmDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   6CD04DE2           SUB      SP,SP,#+108
   \   00000008   0040A0E1           MOV      R4,R0
     92            FS_FIND_DATA   fd;
     93            FS_VOLUME    * pVolume;
     94            int            i;
     95            const char   * s;
     96            char           c;
     97          
     98            //
     99            // Check if the directory exists.
    100            //
    101            i = FS__FindFirstFile(&fd, sDirName, &c, 1);
    102            FS_USE_PARA(c);  // 'c' is not really used.
    103            if (i == 0) {
   \   0000000C   08108DE2           ADD      R1,SP,#+8
   \   00000010   ........           BL       FS__FindVolume
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3600000A           BEQ      ??FS__RmDir_0
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   04308DE2           ADD      R3,SP,#+4
   \   0000002C   08209DE5           LDR      R2,[SP, #+8]
   \   00000030   2C008DE2           ADD      R0,SP,#+44
   \   00000034   ........           BL       FS__FindFirstFileEx
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   2D00001A           BNE      ??FS__RmDir_0
    104              //
    105              // Check if directory is empty
    106              //
    107              i = 0;
   \   00000040   0350A0E3           MOV      R5,#+3
   \   00000044   0B0000EA           B        ??FS__RmDir_1
    108              do {
    109                i++;
    110                if (i > 2) { /* if is more than '..' and '.' */
    111                  //    There is more than '..' and '.' in the directory, so you
    112                  //    must not delete it.
    113                  FS__FindClose(&fd);
    114                  return -1;
    115                }
    116              } while (FS__FindNextFile(&fd));
   \                     ??FS__RmDir_2:
   \   00000048   1010DDE5           LDRB     R1,[SP, #+16]
   \   0000004C   2C10CDE5           STRB     R1,[SP, #+44]
   \   00000050   14109DE5           LDR      R1,[SP, #+20]
   \   00000054   30108DE5           STR      R1,[SP, #+48]
   \   00000058   20109DE5           LDR      R1,[SP, #+32]
   \   0000005C   3C108DE5           STR      R1,[SP, #+60]
   \   00000060   18109DE5           LDR      R1,[SP, #+24]
   \   00000064   34108DE5           STR      R1,[SP, #+52]
   \   00000068   1C109DE5           LDR      R1,[SP, #+28]
   \   0000006C   38108DE5           STR      R1,[SP, #+56]
   \   00000070   24109DE5           LDR      R1,[SP, #+36]
   \   00000074   40108DE5           STR      R1,[SP, #+64]
   \                     ??FS__RmDir_1:
   \   00000078   015055E2           SUBS     R5,R5,#+1
   \   0000007C   1D00000A           BEQ      ??FS__RmDir_0
   \   00000080   10008DE2           ADD      R0,SP,#+16
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0030A0E3           MOV      R3,#+0
   \   00000090   00C0A0E3           MOV      R12,#+0
   \   00000094   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000098   0E00A0E8           STM      R0!,{R1-R3}
   \   0000009C   40109DE5           LDR      R1,[SP, #+64]
   \   000000A0   60009DE5           LDR      R0,[SP, #+96]
   \   000000A4   24108DE5           STR      R1,[SP, #+36]
   \   000000A8   44109DE5           LDR      R1,[SP, #+68]
   \   000000AC   28108DE5           STR      R1,[SP, #+40]
   \   000000B0   5D00D0E5           LDRB     R0,[R0, #+93]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0400000A           BEQ      ??FS__RmDir_3
   \   000000BC   10108DE2           ADD      R1,SP,#+16
   \   000000C0   48008DE2           ADD      R0,SP,#+72
   \   000000C4   ........           BL       FS_FAT_ReadDir
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   DDFFFF0A           BEQ      ??FS__RmDir_2
    117              FS__FindClose(&fd);
   \                     ??FS__RmDir_3:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   60108DE5           STR      R1,[SP, #+96]
    118              //
    119              // Get the correct pVolume instance
    120              //
    121              pVolume = FS__FindVolume(sDirName, &s);
   \   000000D8   0C108DE2           ADD      R1,SP,#+12
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       FS__FindVolume
    122              if (pVolume) {
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   0200000A           BEQ      ??FS__RmDir_0
    123                //
    124                //  Remove the directory
    125                //
    126                FS_LOCK_DRIVER(&pVolume->Partition.Device);
    127                FS_JOURNAL_BEGIN(pVolume);
    128                i = FS_REMOVEDIR(pVolume, s);
   \   000000EC   0C109DE5           LDR      R1,[SP, #+12]
   \   000000F0   ........           BL       FS_FAT_RemoveDir
    129                FS_JOURNAL_END(pVolume);
   \   000000F4   000000EA           B        ??FS__RmDir_4
    130                FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    131              } else {
    132                i = -1;
    133              }
    134            } else {
    135              i = -1;  // Error, directory not found
   \                     ??FS__RmDir_0:
   \   000000F8   0000E0E3           MVN      R0,#+0
    136            }
    137            return i;
   \                     ??FS__RmDir_4:
   \   000000FC   6CD08DE2           ADD      SP,SP,#+108      ;; stack cleaning
   \   00000100   3080BDE8           POP      {R4,R5,PC}       ;; return
    138          }
    139          
    140          /*********************************************************************
    141          *
    142          *       FS__FindFirstFileEx
    143          *
    144          *  Function description
    145          *    This function initializes the pfd structure with the information
    146          *    necessary to open a directory for listing.
    147          *    It also retrieves the first entry in the given directory.
    148          *
    149          *  Parameters
    150          *    pfd            - Pointer to a FS_FIND_DATA structure.
    151          *    pVolume        - Pointer to a FS_VOLUME structure.
    152          *    sPath          - relative path to the directory on the volume.
    153          *    sFilename      - Pointer to a buffer for storing the file name.
    154          *    sizeofFilename - size in bytes of the sFilename buffer.
    155          *
    156          *  Return value
    157          *    ==0   - O.K., first file found
    158          *    ==1   - No entries available in directory
    159          *    < 0   - Error
    160          */

   \                                 In section .text, align 4, keep-with-next
    161          int FS__FindFirstFileEx(FS_FIND_DATA * pfd, FS_VOLUME * pVolume, const char * sPath, char * sFilename, int sizeofFilename) {
   \                     FS__FindFirstFileEx:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   38909DE5           LDR      R9,[SP, #+56]
    162            int          r;
    163          
    164            r       = -1;  // Set as error so far
   \   0000001C   0080E0E3           MVN      R8,#+0
    165            //
    166            // Mount the volume if necessary
    167            //
    168            if (FS__AutoMount(pVolume) & FS_MOUNT_R) {
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       FS__AutoMount
   \   00000028   010010E3           TST      R0,#0x1
   \   0000002C   2B00000A           BEQ      ??FS__FindFirstFileEx_0
    169              FS__DIR          * pDir;
    170              FS_DIRENTRY_INFO   DirEntryInfo;
    171            
    172              FS_MEMSET(pfd, 0, sizeof(FS_FIND_DATA));
   \   00000030   3C10A0E3           MOV      R1,#+60
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       __aeabi_memclr4
    173              FS_MEMSET(&DirEntryInfo, 0, sizeof(FS_DIRENTRY_INFO));
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   00C0A0E3           MOV      R12,#+0
   \   00000050   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000054   0E00A0E8           STM      R0!,{R1-R3}
    174              DirEntryInfo.sFileName      = sFilename;
   \   00000058   14708DE5           STR      R7,[SP, #+20]
    175              DirEntryInfo.SizeofFileName = sizeofFilename;
   \   0000005C   18908DE5           STR      R9,[SP, #+24]
    176              pfd->Dir.pVolume            = pVolume;
   \   00000060   345084E5           STR      R5,[R4, #+52]
    177              pDir                        = &pfd->Dir;
    178              FS_LOCK_DRIVER(&pVolume->Partition.Device);
    179              if (pVolume->IsMounted) {
   \   00000064   5D00D5E5           LDRB     R0,[R5, #+93]
   \   00000068   1C7084E2           ADD      R7,R4,#+28
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   1A00000A           BEQ      ??FS__FindFirstFileEx_0
    180                if (FS_OPENDIR(sPath, pDir) == 0) {
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           BL       FS_FAT_OpenDir
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   1500001A           BNE      ??FS__FindFirstFileEx_0
    181                  if (FS_READDIR(pDir, &DirEntryInfo) == 0) {
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   ........           BL       FS_FAT_ReadDir
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0F00001A           BNE      ??FS__FindFirstFileEx_1
    182                    pfd->Attributes      = DirEntryInfo.Attributes;
   \   0000009C   0000DDE5           LDRB     R0,[SP, #+0]
    183                    pfd->CreationTime    = DirEntryInfo.CreationTime;
    184                    pfd->FileSize        = DirEntryInfo.FileSize;
    185                    pfd->LastAccessTime  = DirEntryInfo.LastAccessTime;
    186                    pfd->LastWriteTime   = DirEntryInfo.LastWriteTime;
    187                    pfd->sFileName       = DirEntryInfo.sFileName;
    188                    pfd->SizeofFileName  = DirEntryInfo.SizeofFileName;
    189                    r = 0;
   \   000000A0   0080A0E3           MOV      R8,#+0
   \   000000A4   0000C4E5           STRB     R0,[R4, #+0]
   \   000000A8   04009DE5           LDR      R0,[SP, #+4]
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   10009DE5           LDR      R0,[SP, #+16]
   \   000000B4   100084E5           STR      R0,[R4, #+16]
   \   000000B8   08009DE5           LDR      R0,[SP, #+8]
   \   000000BC   080084E5           STR      R0,[R4, #+8]
   \   000000C0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000C4   0C0084E5           STR      R0,[R4, #+12]
   \   000000C8   14009DE5           LDR      R0,[SP, #+20]
   \   000000CC   140084E5           STR      R0,[R4, #+20]
   \   000000D0   18009DE5           LDR      R0,[SP, #+24]
   \   000000D4   180084E5           STR      R0,[R4, #+24]
   \   000000D8   000000EA           B        ??FS__FindFirstFileEx_0
    190                  } else {
    191                    r = 1;
   \                     ??FS__FindFirstFileEx_1:
   \   000000DC   0180A0E3           MOV      R8,#+1
    192                  }
    193                }
    194              } else {
    195                FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: Volume has been unmounted by another thread.\n"));
    196              }
    197              FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    198            }
    199            return r;
   \                     ??FS__FindFirstFileEx_0:
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   1CD08DE2           ADD      SP,SP,#+28
   \   000000E8   F083BDE8           POP      {R4-R9,PC}       ;; return
    200          }
    201          
    202          /*********************************************************************
    203          *
    204          *       FS__FindFirstFile
    205          *
    206          *  Function description
    207          *    This function calls the FS__FindFirstFileEx function to
    208          *    open a directory for directory listing.
    209          *
    210          *  Parameters
    211          *    pfd            - Pointer to a FS_FIND_DATA structure
    212          *    sPath          - Path to the directory that 
    213          *    sFilename      - Pointer to a buffer for storing the file name
    214          *    sizeofFilename - size in bytes of the sFilename buffer.
    215          *
    216          *  Return value
    217          *    ==0   - O.K.
    218          *    ==1   - No entries available in directory
    219          *    !=0   - Error
    220          */

   \                                 In section .text, align 4, keep-with-next
    221          int FS__FindFirstFile(FS_FIND_DATA * pfd, const char * sPath, char * sFilename, int sizeofFilename) {
   \                     FS__FindFirstFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0250A0E1           MOV      R5,R2
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0360A0E1           MOV      R6,R3
    222            int          r;
    223            FS_VOLUME  * pVolume;
    224            const char * s;
    225          
    226          
    227            if (sFilename == (char * )NULL || (sizeofFilename == 0)) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   00005613           CMPNE    R6,#+0
   \   0000001C   0CD04DE2           SUB      SP,SP,#+12
    228              return -1;   // Error, no valid buffer specified for the 
   \   00000020   0000E003           MVNEQ    R0,#+0
   \   00000024   0B00000A           BEQ      ??FS__FindFirstFile_0
    229            }
    230            r       = -1;  // Set as error so far
   \   00000028   0070E0E3           MVN      R7,#+0
    231            pVolume = FS__FindVolume(sPath, &s);
   \   0000002C   04108DE2           ADD      R1,SP,#+4
   \   00000030   ........           BL       FS__FindVolume
   \   00000034   0010B0E1           MOVS     R1,R0
    232            if (pVolume) {
   \   00000038   0500000A           BEQ      ??FS__FindFirstFile_1
    233              r = FS__FindFirstFileEx(pfd, pVolume, s, sFilename, sizeofFilename);
   \   0000003C   00608DE5           STR      R6,[SP, #+0]
   \   00000040   0530A0E1           MOV      R3,R5
   \   00000044   04209DE5           LDR      R2,[SP, #+4]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       FS__FindFirstFileEx
   \   00000050   0070A0E1           MOV      R7,R0
    234            }
    235            return r;
   \                     ??FS__FindFirstFile_1:
   \   00000054   0700A0E1           MOV      R0,R7
   \                     ??FS__FindFirstFile_0:
   \   00000058   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000005C   F080BDE8           POP      {R4-R7,PC}       ;; return
    236          }
    237          
    238          /*********************************************************************
    239          *
    240          *       FS__FindNextFile
    241          *
    242          *  Function description
    243          *    Finds the next directory entry in the directory specified by pfd.
    244          *
    245          *  Parameters
    246          *    pfd            - Pointer to a FS_FIND_DATA structure
    247          *
    248          *  Return value
    249          *    == 1   - O.K.
    250          *    == 0   - Error or no more items found.
    251          */

   \                                 In section .text, align 4, keep-with-next
    252          int FS__FindNextFile(FS_FIND_DATA * pfd) {
   \                     FS__FindNextFile:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
    253            int                r;
    254            FS__DIR          * pDir;
    255            FS_DIRENTRY_INFO   DirEntryInfo;
    256          
    257          
    258            r = 0;
    259            FS_MEMSET(&DirEntryInfo, 0, sizeof(FS_DIRENTRY_INFO));
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   00E0A0E3           MOV      LR,#+0
   \   00000020   0C50A0E8           STM      R0!,{R2,R3,R12,LR}
   \   00000024   0C10A0E8           STM      R0!,{R2,R3,R12}
    260            DirEntryInfo.sFileName      = pfd->sFileName;
   \   00000028   142094E5           LDR      R2,[R4, #+20]
    261            DirEntryInfo.SizeofFileName = pfd->SizeofFileName;
    262          
    263            FS_LOCK_SYS();
    264            pDir = &pfd->Dir;
   \   0000002C   1C0084E2           ADD      R0,R4,#+28
   \   00000030   14208DE5           STR      R2,[SP, #+20]
   \   00000034   182094E5           LDR      R2,[R4, #+24]
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   18208DE5           STR      R2,[SP, #+24]
    265            FS_UNLOCK_SYS();
    266            FS_LOCK_DRIVER(&pDir->pVolume->Partition.Device);
    267            if (pDir->pVolume->IsMounted) {
   \   00000040   182090E5           LDR      R2,[R0, #+24]
   \   00000044   5D20D2E5           LDRB     R2,[R2, #+93]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1200000A           BEQ      ??FS__FindNextFile_0
    268              r    = FS_READDIR(pDir, &DirEntryInfo);
    269              if (r == 0) {
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   ........           BL       FS_FAT_ReadDir
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00001A           BNE      ??FS__FindNextFile_1
    270                pfd->Attributes      = DirEntryInfo.Attributes;
   \   00000060   0000DDE5           LDRB     R0,[SP, #+0]
    271                pfd->CreationTime    = DirEntryInfo.CreationTime;
    272                pfd->FileSize        = DirEntryInfo.FileSize;
    273                pfd->LastAccessTime  = DirEntryInfo.LastAccessTime;
    274                pfd->LastWriteTime   = DirEntryInfo.LastWriteTime;
    275                pfd->sFileName       = DirEntryInfo.sFileName;
    276                r = 1;
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0000C4E5           STRB     R0,[R4, #+0]
   \   0000006C   04009DE5           LDR      R0,[SP, #+4]
   \   00000070   040084E5           STR      R0,[R4, #+4]
   \   00000074   10009DE5           LDR      R0,[SP, #+16]
   \   00000078   100084E5           STR      R0,[R4, #+16]
   \   0000007C   08009DE5           LDR      R0,[SP, #+8]
   \   00000080   080084E5           STR      R0,[R4, #+8]
   \   00000084   0C009DE5           LDR      R0,[SP, #+12]
   \   00000088   0C0084E5           STR      R0,[R4, #+12]
   \   0000008C   14009DE5           LDR      R0,[SP, #+20]
   \   00000090   140084E5           STR      R0,[R4, #+20]
   \   00000094   000000EA           B        ??FS__FindNextFile_0
    277              } else {
    278                r = 0;
   \                     ??FS__FindNextFile_1:
   \   00000098   0010A0E3           MOV      R1,#+0
    279              }
    280            } else {
    281              FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: Volume has been unmounted by another thread.\n"));
    282            }
    283            FS_UNLOCK_DRIVER(&pDir->pVolume->Partition.Device);
    284            return r;
   \                     ??FS__FindNextFile_0:
   \   0000009C   0100A0E1           MOV      R0,R1
   \   000000A0   20D08DE2           ADD      SP,SP,#+32
   \   000000A4   1080BDE8           POP      {R4,PC}          ;; return
    285          }
    286          
    287          
    288          /*********************************************************************
    289          *
    290          *       FS__FindClose
    291          *
    292          *  Function description
    293          *    Closes the FS_FIND_DATA structure.
    294          *
    295          *  Parameters
    296          *    pfd            - Pointer to a FS_FIND_DATA structure
    297          *
    298          */

   \                                 In section .text, align 4, keep-with-next
    299          void FS__FindClose(FS_FIND_DATA * pfd) {
    300            FS_USE_PARA(pfd);
    301            FS_LOCK_SYS();
    302            pfd->Dir.pVolume = NULL;
   \                     FS__FindClose:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   341080E5           STR      R1,[R0, #+52]
    303            FS_UNLOCK_SYS();
    304          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    305          
    306          
    307          /*********************************************************************
    308          *
    309          *       Public code
    310          *
    311          **********************************************************************
    312          */
    313          /*********************************************************************
    314          *
    315          *       FS_MkDir
    316          *
    317          *  Function description
    318          *   Create a directory.
    319          *
    320          *  Parameters
    321          *    pDirName    - Fully qualified directory name.
    322          *
    323          *  Return value
    324          *    ==0         - Directory has been created.
    325          *    ==-1        - An error has occurred.
    326          */

   \                                 In section .text, align 4, keep-with-next
    327          int FS_MkDir(const char * pDirName) {
   \                     FS_MkDir:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
    328            int  r;
    329            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    330            r = FS__MkDir(pDirName);
   \   00000014   0050E0E3           MVN      R5,#+0
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       FS__FindVolume
   \   00000024   0040B0E1           MOVS     R4,R0
   \   00000028   0600000A           BEQ      ??FS_MkDir_0
   \   0000002C   ........           BL       FS__AutoMount
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   0300001A           BNE      ??FS_MkDir_0
   \   00000038   00109DE5           LDR      R1,[SP, #+0]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       FS_FAT_CreateDir
   \   00000044   0050A0E1           MOV      R5,R0
    331            FS_UNLOCK();
   \                     ??FS_MkDir_0:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   ........           BL       FS_OS_Unlock
    332            return r;
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    333          }
    334          
    335          /*********************************************************************
    336          *
    337          *       FS_RmDir
    338          *
    339          *  Function description
    340          *    API function. Remove a directory.
    341          *
    342          *  Parameters
    343          *    pDirName    - Fully qualified directory name.
    344          *
    345          *  Return value
    346          *    ==0         - Directory has been removed.
    347          *    ==-1        - An error has occurred.
    348          */

   \                                 In section .text, align 4, keep-with-next
    349          int FS_RmDir(const char * pDirName) {
   \                     FS_RmDir:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    350            int    r;
    351          
    352            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    353            r = FS__RmDir(pDirName);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       FS__RmDir
   \   00000018   0040A0E1           MOV      R4,R0
    354            FS_UNLOCK();
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           BL       FS_OS_Unlock
    355            return r;
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    356          }
    357          
    358          /*********************************************************************
    359          *
    360          *       FS_FindFirstFile
    361          *
    362          *  Function description
    363          *    This function will call the internal function, 
    364          *    which will do the following:
    365          *    * Initialize the pfd structure with the information necessary to open a directory for listing.
    366          *    * Retrieves the first entry in the given directory if available.
    367          *
    368          *  Parameters
    369          *    pfd            - Pointer to a FS_FIND_DATA structure
    370          *    sPath          - Path to the directory that 
    371          *    sFilename      - Pointer to a buffer for storing the file name
    372          *    sizeofFilename - size in bytes of the sFilename buffer.
    373          *
    374          *  Return value
    375          *    ==0   - O.K.
    376          *    ==1   - No entries available in directory
    377          *    !=0   - Error
    378          */

   \                                 In section .text, align 4, keep-with-next
    379          char FS_FindFirstFile(FS_FIND_DATA * pfd, const char * sPath, char * sFilename, int sizeofFilename) {
   \                     FS_FindFirstFile:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    380            int r;
    381            FS_LOCK();
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           BL       FS_OS_Lock
    382            r = FS__FindFirstFile(pfd, sPath, sFilename, sizeofFilename);
   \   00000020   000056E3           CMP      R6,#+0
   \   00000024   00005713           CMPNE    R7,#+0
   \   00000028   0D00000A           BEQ      ??FS_FindFirstFile_0
   \   0000002C   0080E0E3           MVN      R8,#+0
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           BL       FS__FindVolume
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0900000A           BEQ      ??FS_FindFirstFile_1
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   00708DE5           STR      R7,[SP, #+0]
   \   0000004C   0630A0E1           MOV      R3,R6
   \   00000050   04209DE5           LDR      R2,[SP, #+4]
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       FS__FindFirstFileEx
   \   0000005C   0080A0E1           MOV      R8,R0
   \   00000060   000000EA           B        ??FS_FindFirstFile_2
   \                     ??FS_FindFirstFile_0:
   \   00000064   0080E0E3           MVN      R8,#+0
    383            FS_UNLOCK();
   \                     ??FS_FindFirstFile_2:
   \   00000068   0000A0E3           MOV      R0,#+0
   \                     ??FS_FindFirstFile_1:
   \   0000006C   ........           BL       FS_OS_Unlock
    384            return r;
   \   00000070   FF0008E2           AND      R0,R8,#0xFF
   \   00000074   08D08DE2           ADD      SP,SP,#+8
   \   00000078   F081BDE8           POP      {R4-R8,PC}       ;; return
    385          }
    386          
    387          
    388          /*********************************************************************
    389          *
    390          *       FS_FindNextFile
    391          *
    392          *  Function description
    393          *    Finds the next directory entry in the directory specified by pfd.
    394          *
    395          *  Parameters
    396          *    pfd            - Pointer to a FS_FIND_DATA structure
    397          *
    398          *  Return value
    399          *    ==1   - O.K.
    400          *    ==0   - Error
    401          */

   \                                 In section .text, align 4, keep-with-next
    402          char FS_FindNextFile(FS_FIND_DATA * pfd) {
   \                     FS_FindNextFile:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
    403            int r;
    404            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    405            r = FS__FindNextFile(pfd);
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   00C0A0E3           MOV      R12,#+0
   \   00000028   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   0000002C   0E00A0E8           STM      R0!,{R1-R3}
   \   00000030   141094E5           LDR      R1,[R4, #+20]
   \   00000034   1C0084E2           ADD      R0,R4,#+28
   \   00000038   14108DE5           STR      R1,[SP, #+20]
   \   0000003C   181094E5           LDR      R1,[R4, #+24]
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   18108DE5           STR      R1,[SP, #+24]
   \   00000048   181090E5           LDR      R1,[R0, #+24]
   \   0000004C   5D10D1E5           LDRB     R1,[R1, #+93]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   1000000A           BEQ      ??FS_FindNextFile_0
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   ........           BL       FS_FAT_ReadDir
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0C00001A           BNE      ??FS_FindNextFile_0
   \   00000068   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000006C   0150A0E3           MOV      R5,#+1
   \   00000070   0000C4E5           STRB     R0,[R4, #+0]
   \   00000074   04009DE5           LDR      R0,[SP, #+4]
   \   00000078   040084E5           STR      R0,[R4, #+4]
   \   0000007C   10009DE5           LDR      R0,[SP, #+16]
   \   00000080   100084E5           STR      R0,[R4, #+16]
   \   00000084   08009DE5           LDR      R0,[SP, #+8]
   \   00000088   080084E5           STR      R0,[R4, #+8]
   \   0000008C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000090   0C0084E5           STR      R0,[R4, #+12]
   \   00000094   14009DE5           LDR      R0,[SP, #+20]
   \   00000098   140084E5           STR      R0,[R4, #+20]
    406            FS_UNLOCK();
   \                     ??FS_FindNextFile_0:
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   ........           BL       FS_OS_Unlock
    407            return r;
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   1CD08DE2           ADD      SP,SP,#+28
   \   000000AC   3080BDE8           POP      {R4,R5,PC}       ;; return
    408          }
    409          
    410          
    411          /*********************************************************************
    412          *
    413          *       FS_FindClose
    414          *
    415          *  Function description
    416          *    Closes the FS_FIND_DATA structure.
    417          *
    418          *  Parameters
    419          *    pfd            - Pointer to a FS_FIND_DATA structure
    420          *
    421          */

   \                                 In section .text, align 4, keep-with-next
    422          void FS_FindClose(FS_FIND_DATA * pfd) {
   \                     FS_FindClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    423            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    424            FS__FindClose(pfd);
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   340084E5           STR      R0,[R4, #+52]
    425            FS_UNLOCK();
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   ........           B        FS_OS_Unlock     ;; tailcall
    426          }
    427          
    428          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     FS_FindClose             8
     FS_FindFirstFile        32
     FS_FindNextFile         40
     FS_MkDir                16
     FS_RmDir                 8
     FS__FindClose            0
     FS__FindFirstFile       32
     FS__FindFirstFileEx     56
     FS__FindNextFile        40
     FS__MkDir               16
     FS__RmDir              120


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     FS__MkDir             68
     FS__RmDir            260
     FS__FindFirstFileEx  236
     FS__FindFirstFile     96
     FS__FindNextFile     168
     FS__FindClose         12
     FS_MkDir              92
     FS_RmDir              44
     FS_FindFirstFile     124
     FS_FindNextFile      176
     FS_FindClose          32

 
 1 308 bytes in section .text
 
 1 308 bytes of CODE memory

Errors: none
Warnings: none
