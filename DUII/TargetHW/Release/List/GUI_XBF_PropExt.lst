###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_XBF_PropExt.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_XBF_PropExt.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_XBF_PropExt.lst        #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_XBF_PropExt.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_XBF_PropExt.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_XBF_PropExt.c
     19          Purpose     : Implementation of external binary fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DispChar
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DispChar(U16P c) {
   \                     _DispChar:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     38            LCD_COLOR            OldColor;
     39            GUI_DRAWMODE         DrawMode, OldDrawMode;
     40            U8                   aBuffer[GUI_MAX_XBF_BYTES];
     41            const U8           * pBuffer;
     42            const GUI_XBF_DATA * pXBF_Data;
     43            int                  YMag, YDist;
     44            U32                  Off, iOff;
     45            I16                  xDist, xOff, yOff;
     46            U16                  Size, XSize, YSize;
     47            U16                  MaxLines;
     48            U16                  BytesPerLine, NumBytes;
     49            int                  RemLines, NumLines, xPos, yPos;
     50            
     51            pBuffer        = aBuffer;
     52            pXBF_Data      = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
   \   00000004   ........           LDR      R5,??DataTable4
   \   00000008   41DF4DE2           SUB      SP,SP,#+260
   \   0000000C   3C208DE2           ADD      R2,SP,#+60
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   18208DE5           STR      R2,[SP, #+24]
   \   00000018   1C7091E5           LDR      R7,[R1, #+28]
     53            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   0000001C   B010D7E1           LDRH     R1,[R7, #+0]
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   B210D721           LDRHCS   R1,[R7, #+2]
   \   00000028   00005121           CMPCS    R1,R0
   \   0000002C   AF00003A           BCC      ??_DispChar_0
     54              return;
     55            }
     56            //
     57            // Get offset and size of character data
     58            //
     59            GUI_XBF__GetOffAndSize(pXBF_Data, c, &Off, &Size);
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   1C308DE2           ADD      R3,SP,#+28
   \   00000038   20208DE2           ADD      R2,SP,#+32
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   ........           BL       GUI_XBF__GetOffAndSize
     60            if (!Off) {
   \   00000044   20009DE5           LDR      R0,[SP, #+32]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   A700000A           BEQ      ??_DispChar_0
     61              return;
     62            }
     63            DrawMode       = GUI_Context.TextMode;
   \   00000050   FA02D5E1           LDRSH    R0,[R5, #+42]
   \   00000054   24008DE5           STR      R0,[SP, #+36]
     64            if (GUI__CharHasTrans) {
   \   00000058   ........           LDR      R0,??DataTable4_1
   \   0000005C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
     65              DrawMode    |= GUI_DM_TRANS;
   \   00000064   24009D15           LDRNE    R0,[SP, #+36]
   \   00000068   02008013           ORRNE    R0,R0,#0x2
   \   0000006C   24008D15           STRNE    R0,[SP, #+36]
     66            }
     67            OldDrawMode    = LCD_SetDrawMode(DrawMode);
   \   00000070   24009DE5           LDR      R0,[SP, #+36]
   \   00000074   ........           BL       LCD_SetDrawMode
   \   00000078   38008DE5           STR      R0,[SP, #+56]
     68            //
     69            // Use banding mode if size is too large
     70            //
     71            if (Size > GUI_MAX_XBF_BYTES) {
   \   0000007C   BC01DDE1           LDRH     R0,[SP, #+28]
   \   00000080   08C097E5           LDR      R12,[R7, #+8]
   \   00000084   042097E5           LDR      R2,[R7, #+4]
   \   00000088   C90050E3           CMP      R0,#+201
   \   0000008C   3C308DE2           ADD      R3,SP,#+60
   \   00000090   4C00003A           BCC      ??_DispChar_1
     72              //
     73              // Get the heading 12 Bytes of the character data
     74              //
     75              pXBF_Data->pfGetData(Off, 12, pXBF_Data->pVoid, aBuffer);
   \   00000094   0C10A0E3           MOV      R1,#+12
   \   00000098   20009DE5           LDR      R0,[SP, #+32]
   \   0000009C   3CFF2FE1           BLX      R12
     76              xDist        = GUI__Read16(&pBuffer);
   \   000000A0   18008DE2           ADD      R0,SP,#+24
   \   000000A4   ........           BL       GUI__Read16
   \   000000A8   0008A0E1           LSL      R0,R0,#+16
   \   000000AC   4008A0E1           ASR      R0,R0,#+16
   \   000000B0   2C008DE5           STR      R0,[SP, #+44]
     77              XSize        = GUI__Read16(&pBuffer);
   \   000000B4   18008DE2           ADD      R0,SP,#+24
   \   000000B8   ........           BL       GUI__Read16
   \   000000BC   0060A0E1           MOV      R6,R0
     78              YSize        = GUI__Read16(&pBuffer);
   \   000000C0   18008DE2           ADD      R0,SP,#+24
   \   000000C4   ........           BL       GUI__Read16
   \   000000C8   0040A0E1           MOV      R4,R0
     79              xOff         = GUI__Read16(&pBuffer);
   \   000000CC   18008DE2           ADD      R0,SP,#+24
   \   000000D0   ........           BL       GUI__Read16
   \   000000D4   0090A0E1           MOV      R9,R0
     80              yOff         = GUI__Read16(&pBuffer);
   \   000000D8   18008DE2           ADD      R0,SP,#+24
   \   000000DC   ........           BL       GUI__Read16
   \   000000E0   00A0A0E1           MOV      R10,R0
     81              BytesPerLine = GUI__Read16(&pBuffer);
   \   000000E4   18008DE2           ADD      R0,SP,#+24
   \   000000E8   ........           BL       GUI__Read16
   \   000000EC   28008DE5           STR      R0,[SP, #+40]
     82              iOff         = Off + 12;
   \   000000F0   20009DE5           LDR      R0,[SP, #+32]
     83              MaxLines     = (GUI_MAX_XBF_BYTES - 12) / BytesPerLine;
   \   000000F4   28109DE5           LDR      R1,[SP, #+40]
   \   000000F8   0C8080E2           ADD      R8,R0,#+12
   \   000000FC   BC00A0E3           MOV      R0,#+188
   \   00000100   ........           BL       __aeabi_idiv
   \   00000104   0008A0E1           LSL      R0,R0,#+16
   \   00000108   2008A0E1           LSR      R0,R0,#+16
   \   0000010C   34008DE5           STR      R0,[SP, #+52]
     84              RemLines     = YSize;
     85              xPos         = GUI_Context.DispPosX + xOff;
   \   00000110   F202D5E1           LDRSH    R0,[R5, #+34]
   \   00000114   0998A0E1           LSL      R9,R9,#+16
     86              yPos         = GUI_Context.DispPosY + yOff;
   \   00000118   0AA8A0E1           LSL      R10,R10,#+16
   \   0000011C   490880E0           ADD      R0,R0,R9, ASR #+16
   \   00000120   30008DE5           STR      R0,[SP, #+48]
   \   00000124   F402D5E1           LDRSH    R0,[R5, #+36]
   \   00000128   4A9880E0           ADD      R9,R0,R10, ASR #+16
     87              //
     88              // Display bands while RemLines are left
     89              //
     90              do {
     91                //
     92                // Use MaxLines as YSize for a band until RemLines are less than MaxLines
     93                //
     94                NumLines   = MaxLines;
   \                     ??_DispChar_2:
   \   0000012C   34009DE5           LDR      R0,[SP, #+52]
     95                if (NumLines > RemLines) {
   \   00000130   04A0A0E1           MOV      R10,R4
   \   00000134   000054E1           CMP      R4,R0
   \   00000138   00A0A0C1           MOVGT    R10,R0
     96                  NumLines = RemLines;
     97                }
     98                NumBytes   = NumLines * BytesPerLine;
   \   0000013C   28009DE5           LDR      R0,[SP, #+40]
     99                pXBF_Data->pfGetData(iOff, NumBytes, pXBF_Data->pVoid, aBuffer);
   \   00000140   3C308DE2           ADD      R3,SP,#+60
   \   00000144   8A006BE1           SMULBB   R11,R10,R0
   \   00000148   042097E5           LDR      R2,[R7, #+4]
   \   0000014C   0B18A0E1           LSL      R1,R11,#+16
   \   00000150   2118A0E1           LSR      R1,R1,#+16
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   08C097E5           LDR      R12,[R7, #+8]
   \   0000015C   3CFF2FE1           BLX      R12
    100                LCD_DrawBitmap(xPos,
    101                               yPos,
    102                               XSize,
    103                               NumLines,
    104                               GUI_Context.pAFont->XMag,
    105                               GUI_Context.pAFont->YMag,
    106                               1,
    107                               BytesPerLine,
    108                               aBuffer,
    109                               LCD_pBkColorIndex);
   \   00000160   ........           LDR      R1,??DataTable4_2
   \   00000164   1C0095E5           LDR      R0,[R5, #+28]
   \   00000168   001091E5           LDR      R1,[R1, #+0]
   \   0000016C   0A30A0E1           MOV      R3,R10
   \   00000170   14108DE5           STR      R1,[SP, #+20]
   \   00000174   3C108DE2           ADD      R1,SP,#+60
   \   00000178   10108DE5           STR      R1,[SP, #+16]
   \   0000017C   28109DE5           LDR      R1,[SP, #+40]
   \   00000180   0620A0E1           MOV      R2,R6
   \   00000184   0C108DE5           STR      R1,[SP, #+12]
   \   00000188   0110A0E3           MOV      R1,#+1
   \   0000018C   08108DE5           STR      R1,[SP, #+8]
   \   00000190   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000194   04108DE5           STR      R1,[SP, #+4]
   \   00000198   1A00D0E5           LDRB     R0,[R0, #+26]
   \   0000019C   0910A0E1           MOV      R1,R9
   \   000001A0   00008DE5           STR      R0,[SP, #+0]
   \   000001A4   30009DE5           LDR      R0,[SP, #+48]
   \   000001A8   ........           BL       LCD_DrawBitmap
    110                iOff      += NumBytes;
   \   000001AC   0BB8A0E1           LSL      R11,R11,#+16
    111                RemLines  -= NumLines;
   \   000001B0   0A4044E0           SUB      R4,R4,R10
   \   000001B4   2B8888E0           ADD      R8,R8,R11, LSR #+16
    112                yPos      += NumLines;
   \   000001B8   09908AE0           ADD      R9,R10,R9
    113              } while (RemLines);
   \   000001BC   000054E3           CMP      R4,#+0
   \   000001C0   D9FFFF1A           BNE      ??_DispChar_2
   \   000001C4   2B0000EA           B        ??_DispChar_3
    114            } else {
    115              //
    116              // Get character data
    117              //
    118              pXBF_Data->pfGetData(Off, Size, pXBF_Data->pVoid, aBuffer);
   \                     ??_DispChar_1:
   \   000001C8   0010A0E1           MOV      R1,R0
   \   000001CC   20009DE5           LDR      R0,[SP, #+32]
   \   000001D0   3CFF2FE1           BLX      R12
    119              xDist        = GUI__Read16(&pBuffer);
   \   000001D4   18008DE2           ADD      R0,SP,#+24
   \   000001D8   ........           BL       GUI__Read16
   \   000001DC   0008A0E1           LSL      R0,R0,#+16
   \   000001E0   4008A0E1           ASR      R0,R0,#+16
   \   000001E4   2C008DE5           STR      R0,[SP, #+44]
    120              XSize        = GUI__Read16(&pBuffer);
   \   000001E8   18008DE2           ADD      R0,SP,#+24
   \   000001EC   ........           BL       GUI__Read16
   \   000001F0   0060A0E1           MOV      R6,R0
    121              YSize        = GUI__Read16(&pBuffer);
   \   000001F4   18008DE2           ADD      R0,SP,#+24
   \   000001F8   ........           BL       GUI__Read16
   \   000001FC   0040A0E1           MOV      R4,R0
    122              xOff         = GUI__Read16(&pBuffer);
   \   00000200   18008DE2           ADD      R0,SP,#+24
   \   00000204   ........           BL       GUI__Read16
   \   00000208   0070A0E1           MOV      R7,R0
    123              yOff         = GUI__Read16(&pBuffer);
   \   0000020C   18008DE2           ADD      R0,SP,#+24
   \   00000210   ........           BL       GUI__Read16
   \   00000214   0080A0E1           MOV      R8,R0
    124              BytesPerLine = GUI__Read16(&pBuffer);
   \   00000218   18008DE2           ADD      R0,SP,#+24
   \   0000021C   ........           BL       GUI__Read16
    125              LCD_DrawBitmap(GUI_Context.DispPosX + xOff, GUI_Context.DispPosY + yOff,
    126                             XSize,
    127                             YSize,
    128                             GUI_Context.pAFont->XMag,
    129                             GUI_Context.pAFont->YMag,
    130                             1,
    131                             BytesPerLine,
    132                             pBuffer,
    133                             LCD_pBkColorIndex);
   \   00000220   ........           LDR      R2,??DataTable4_2
   \   00000224   0C008DE5           STR      R0,[SP, #+12]
   \   00000228   002092E5           LDR      R2,[R2, #+0]
   \   0000022C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000230   14208DE5           STR      R2,[SP, #+20]
   \   00000234   18209DE5           LDR      R2,[SP, #+24]
   \   00000238   0100A0E3           MOV      R0,#+1
   \   0000023C   10208DE5           STR      R2,[SP, #+16]
   \   00000240   08008DE5           STR      R0,[SP, #+8]
   \   00000244   1B00D1E5           LDRB     R0,[R1, #+27]
   \   00000248   0888A0E1           LSL      R8,R8,#+16
   \   0000024C   0778A0E1           LSL      R7,R7,#+16
   \   00000250   04008DE5           STR      R0,[SP, #+4]
   \   00000254   1A00D1E5           LDRB     R0,[R1, #+26]
   \   00000258   0430A0E1           MOV      R3,R4
   \   0000025C   0620A0E1           MOV      R2,R6
   \   00000260   00008DE5           STR      R0,[SP, #+0]
   \   00000264   F402D5E1           LDRSH    R0,[R5, #+36]
   \   00000268   481880E0           ADD      R1,R0,R8, ASR #+16
   \   0000026C   F202D5E1           LDRSH    R0,[R5, #+34]
   \   00000270   470880E0           ADD      R0,R0,R7, ASR #+16
   \   00000274   ........           BL       LCD_DrawBitmap
    134            }
    135            //
    136            // Fill empty pixel lines
    137            //
    138            if ((DrawMode & LCD_DRAWMODE_TRANS) == 0) {
   \                     ??_DispChar_3:
   \   00000278   24009DE5           LDR      R0,[SP, #+36]
   \   0000027C   020010E3           TST      R0,#0x2
   \   00000280   1400001A           BNE      ??_DispChar_4
    139              if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \   00000284   1C0095E5           LDR      R0,[R5, #+28]
   \   00000288   1910D0E5           LDRB     R1,[R0, #+25]
   \   0000028C   1820D0E5           LDRB     R2,[R0, #+24]
   \   00000290   010052E1           CMP      R2,R1
   \   00000294   0F00002A           BCS      ??_DispChar_4
    140                YMag  = GUI_Context.pAFont->YMag;
   \   00000298   1B00D0E5           LDRB     R0,[R0, #+27]
    141                YDist = GUI_Context.pAFont->YDist * YMag;
   \   0000029C   800167E1           SMULBB   R7,R0,R1
    142                YSize = GUI_Context.pAFont->YSize * YMag;
   \   000002A0   820064E1           SMULBB   R4,R2,R0
    143                OldColor = GUI_GetColor();
   \   000002A4   ........           BL       GUI_GetColor
   \   000002A8   0080A0E1           MOV      R8,R0
    144                GUI_SetColor(GUI_GetBkColor());
   \   000002AC   ........           BL       GUI_GetBkColor
   \   000002B0   ........           BL       GUI_SetColor
   \   000002B4   F412D5E1           LDRSH    R1,[R5, #+36]
   \   000002B8   F202D5E1           LDRSH    R0,[R5, #+34]
   \   000002BC   0448A0E1           LSL      R4,R4,#+16
   \   000002C0   013087E0           ADD      R3,R7,R1
   \   000002C4   002086E0           ADD      R2,R6,R0
   \   000002C8   241881E0           ADD      R1,R1,R4, LSR #+16
    145                LCD_FillRect(GUI_Context.DispPosX,
    146                             GUI_Context.DispPosY + YSize,
    147                             GUI_Context.DispPosX + XSize,
    148                             GUI_Context.DispPosY + YDist);
   \   000002CC   ........           BL       LCD_FillRect
    149                GUI_SetColor(OldColor);
   \   000002D0   0800A0E1           MOV      R0,R8
   \   000002D4   ........           BL       GUI_SetColor
    150              }
    151            }
    152            //
    153            // Restore drawmode and adjust cursor position
    154            //
    155            LCD_SetDrawMode(OldDrawMode);
   \                     ??_DispChar_4:
   \   000002D8   38009DE5           LDR      R0,[SP, #+56]
   \   000002DC   ........           BL       LCD_SetDrawMode
    156            GUI_Context.DispPosX += xDist;
   \   000002E0   F202D5E1           LDRSH    R0,[R5, #+34]
   \   000002E4   2C109DE5           LDR      R1,[SP, #+44]
   \   000002E8   000081E0           ADD      R0,R1,R0
   \   000002EC   B202C5E1           STRH     R0,[R5, #+34]
    157          }
   \                     ??_DispChar_0:
   \   000002F0   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   000002F4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    158          
    159          /*********************************************************************
    160          *
    161          *       _ClearLine
    162          */

   \                                 In section .text, align 4, keep-with-next
    163          static void _ClearLine(const char GUI_UNI_PTR * s, int Len) {
   \                     _ClearLine:
   \   00000000   F1472DE9           PUSH     {R0,R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0170A0E1           MOV      R7,R1
    164            U16 c;
    165            I16 XDist;
    166            int yDist, DispPosX, DispPosY;
    167            LCD_COLOR OldColor;
    168            OldColor = GUI_GetColor();
   \   0000000C   ........           BL       GUI_GetColor
    169            GUI_SetColor((GUI_Context.TextMode & GUI_TM_REV) ? GUI_GetColor() : GUI_GetBkColor());
   \   00000010   ........           LDR      R9,??DataTable4
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   2A00D9E5           LDRB     R0,[R9, #+42]
   \   0000001C   040010E3           TST      R0,#0x4
   \   00000020   0100000A           BEQ      ??_ClearLine_0
   \   00000024   ........           BL       GUI_GetColor
   \   00000028   000000EA           B        ??_ClearLine_1
   \                     ??_ClearLine_0:
   \   0000002C   ........           BL       GUI_GetBkColor
   \                     ??_ClearLine_1:
   \   00000030   ........           BL       GUI_SetColor
    170            yDist    = GUI_Context.pAFont->YDist * GUI_Context.pAFont->YMag;
   \   00000034   1C0099E5           LDR      R0,[R9, #+28]
    171            DispPosX = GUI_Context.DispPosX;
   \   00000038   F262D9E1           LDRSH    R6,[R9, #+34]
   \   0000003C   1910D0E5           LDRB     R1,[R0, #+25]
   \   00000040   1B00D0E5           LDRB     R0,[R0, #+27]
    172            DispPosY = GUI_Context.DispPosY;
   \   00000044   F492D9E1           LDRSH    R9,[R9, #+36]
    173            XDist    = 0;
   \   00000048   00A0A0E3           MOV      R10,#+0
   \   0000004C   800165E1           SMULBB   R5,R0,R1
   \   00000050   017057E2           SUBS     R7,R7,#+1
   \   00000054   0600004A           BMI      ??_ClearLine_2
    174            while (--Len >= 0) {
    175              c = GUI_UC__GetCharCodeInc(&s);
   \                     ??_ClearLine_3:
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           BL       GUI_UC__GetCharCodeInc
   \   00000060   0080A0E1           MOV      R8,R0
    176              XDist += GUI_XBF__GetCharDistX(c);
   \   00000064   ........           BL       GUI_XBF__GetCharDistX
   \   00000068   0AA080E0           ADD      R10,R0,R10
   \   0000006C   017057E2           SUBS     R7,R7,#+1
    177            }
   \   00000070   F8FFFF5A           BPL      ??_ClearLine_3
    178            XDist += GUI__GetOverlap(c);
   \                     ??_ClearLine_2:
   \   00000074   0808A0E1           LSL      R0,R8,#+16
   \   00000078   2008A0E1           LSR      R0,R0,#+16
   \   0000007C   ........           BL       GUI__GetOverlap
    179            LCD_FillRect(DispPosX, 
    180                         DispPosY, 
    181                         DispPosX + XDist, 
    182                         DispPosY + yDist);
   \   00000080   0A0080E0           ADD      R0,R0,R10
   \   00000084   0008A0E1           LSL      R0,R0,#+16
   \   00000088   402886E0           ADD      R2,R6,R0, ASR #+16
   \   0000008C   093085E0           ADD      R3,R5,R9
   \   00000090   0910A0E1           MOV      R1,R9
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           BL       LCD_FillRect
    183            GUI_SetColor(OldColor);
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       GUI_SetColor
    184            //
    185            // Avoid background pixels to be drawn twice
    186            //
    187            GUI__CharHasTrans = 1;
   \   000000A4   ........           LDR      R0,??DataTable4_1
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0010C0E5           STRB     R1,[R0, #+0]
    188          }
   \   000000B0   08D08DE2           ADD      SP,SP,#+8
   \   000000B4   F087BDE8           POP      {R4-R10,PC}      ;; return
    189          
    190          /*********************************************************************
    191          *
    192          *       _DispLine
    193          */

   \                                 In section .text, align 4, keep-with-next
    194          static void _DispLine(const char GUI_UNI_PTR * s, int Len) {
   \                     _DispLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    195            GUIPROP_EXT__SetfpClearLine(_ClearLine);
   \   00000010   ........           LDR      R0,??DataTable4_3
   \   00000014   ........           BL       GUIPROP_EXT__SetfpClearLine
    196            GUI_ENC_APIList_EXT.pfDispLine(s, Len);
   \   00000018   ........           LDR      R2,??DataTable4_4
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   082092E5           LDR      R2,[R2, #+8]
   \   00000028   32FF2FE1           BLX      R2
    197            GUIPROP_EXT__SetfpClearLine(GUIPROP_EXT__ClearLine);
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   ........           LDR      R0,??DataTable4_5
   \   00000038   ........           B        GUIPROP_EXT__SetfpClearLine  ;; tailcall
    198          }
    199          
    200          /*********************************************************************
    201          *
    202          *       _APIList
    203          */

   \                                 In section .rodata, align 4, keep-with-next
    204          static const tGUI_ENC_APIList _APIList = {
   \                     _APIList:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   000000000000       DC32 0, 0, _DispLine
   \              0000........
    205            NULL,
    206            NULL,
    207            _DispLine
    208          };
    209          
    210          /*********************************************************************
    211          *
    212          *       Public data
    213          *
    214          **********************************************************************
    215          */
    216          /*********************************************************************
    217          *
    218          *       GUI_XBF_TYPE_PROP_EXT
    219          */

   \                                 In section .rodata, align 4, keep-with-next
    220          const tGUI_XBF_APIList GUI_XBF_APIList_Prop_Ext = {
   \                     GUI_XBF_APIList_Prop_Ext:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 _DispChar, GUI_XBF__GetCharDistX, GUI_XBF__GetFontInfo, GUI_XBF__IsInFont, GUI_XBF__GetCharInfo, _APIList
   \              ............
   \              ............
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     GUI__CharHasTrans

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     _ClearLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     GUI_ENC_APIList_EXT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     GUIPROP_EXT__ClearLine
    221            _DispChar,
    222            GUI_XBF__GetCharDistX,
    223            GUI_XBF__GetFontInfo,
    224            GUI_XBF__IsInFont,
    225            GUI_XBF__GetCharInfo,
    226            &_APIList
    227          };
    228          
    229          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     _ClearLine     40
     _DispChar     296
     _DispLine      16


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _DispChar                 760
     _ClearLine                184
     _DispLine                  60
     _APIList                   12
     GUI_XBF_APIList_Prop_Ext   24
     ??DataTable4                4
     ??DataTable4_1              4
     ??DataTable4_2              4
     ??DataTable4_3              4
     ??DataTable4_4              4
     ??DataTable4_5              4

 
    36 bytes in section .rodata
 1 028 bytes in section .text
 
 1 028 bytes of CODE  memory
    36 bytes of CONST memory

Errors: none
Warnings: none
