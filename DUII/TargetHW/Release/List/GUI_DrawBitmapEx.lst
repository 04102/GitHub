###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawBitmapEx.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawBitmapEx.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawBitmapEx.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawBitmapEx.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawBitmapEx.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawBitmapEx.c
     19          Purpose     : Draws a bitmap with free magnification
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GL_DrawBitmapEx
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void GL_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
     36                                      int xCenter, int yCenter, int xMag, int yMag) {
   \                     GL_DrawBitmapEx:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
     37            LCD_PIXELINDEX Index, IndexPrev = 0;
     38            LCD_COLOR Color;
     39            int x, y, xi, yi, xSize, ySize, xAct, xStart, xMagAbs, xiMag, yMin, yMax, yEnd, yPrev, yStep;
     40            char Cached, HasTrans = 0;
     41            int Alpha = 0;
   \   00000004   ........           LDR      R0,??DataTable1
   \   00000008   38D04DE2           SUB      SP,SP,#+56
   \   0000000C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000010   0040A0E3           MOV      R4,#+0
     42            /* Use clipping rect to reduce calculation */
     43            yMin = GUI_Context.ClipRect.y0;
     44            yMax = GUI_Context.ClipRect.y1;
     45            /* Init some values */
     46            xSize    = pBitmap->XSize;
   \   00000014   38209DE5           LDR      R2,[SP, #+56]
   \   00000018   34008DE5           STR      R0,[SP, #+52]
   \   0000001C   ........           LDR      R0,??DataTable1
   \   00000020   2C408DE5           STR      R4,[SP, #+44]
   \   00000024   FE00D0E1           LDRSH    R0,[R0, #+14]
   \   00000028   10408DE5           STR      R4,[SP, #+16]
   \   0000002C   68509DE5           LDR      R5,[SP, #+104]
   \   00000030   30008DE5           STR      R0,[SP, #+48]
   \   00000034   B020D2E1           LDRH     R2,[R2, #+0]
     47            ySize    = pBitmap->YSize;
   \   00000038   38009DE5           LDR      R0,[SP, #+56]
   \   0000003C   0C208DE5           STR      R2,[SP, #+12]
   \   00000040   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000044   28008DE5           STR      R0,[SP, #+40]
     48            xMagAbs  = ((xMag < 0) ? -xMag : xMag);
   \   00000048   6C009DE5           LDR      R0,[SP, #+108]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0020A0E1           MOV      R2,R0
   \   00000054   0600005A           BPL      ??GL_DrawBitmapEx_0
   \   00000058   002062E2           RSB      R2,R2,#+0
   \   0000005C   1C208DE5           STR      R2,[SP, #+28]
   \   00000060   0C009DE5           LDR      R0,[SP, #+12]
   \   00000064   40209DE5           LDR      R2,[SP, #+64]
   \   00000068   020040E0           SUB      R0,R0,R2
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   010000EA           B        ??GL_DrawBitmapEx_1
   \                     ??GL_DrawBitmapEx_0:
   \   00000074   1C208DE5           STR      R2,[SP, #+28]
   \   00000078   40009DE5           LDR      R0,[SP, #+64]
   \                     ??GL_DrawBitmapEx_1:
   \   0000007C   1C209DE5           LDR      R2,[SP, #+28]
     49            x0      -= (I32)((xMag < 0) ? xSize - xCenter - 1 : xCenter) * (I32)(xMagAbs) / (I32)(1000);
     50            yEnd     = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \   00000080   3C609DE5           LDR      R6,[SP, #+60]
   \   00000084   920000E0           MUL      R0,R2,R0
   \   00000088   ........           LDR      R2,??DataTable1_1  ;; 0x10624dd3
   \   0000008C   9032C2E0           SMULL    R3,R2,R0,R2
   \   00000090   4203B0E1           ASRS     R0,R2,#+6
   \   00000094   01008042           ADDMI    R0,R0,#+1
   \   00000098   000041E0           SUB      R0,R1,R0
   \   0000009C   00008DE5           STR      R0,[SP, #+0]
   \   000000A0   70009DE5           LDR      R0,[SP, #+112]
   \   000000A4   FA1FA0E3           MOV      R1,#+1000
   \   000000A8   900502E0           MUL      R2,R0,R5
   \   000000AC   000062E2           RSB      R0,R2,#+0
   \   000000B0   ........           BL       GUI__DivideRound32
   \   000000B4   060080E0           ADD      R0,R0,R6
   \   000000B8   04008DE5           STR      R0,[SP, #+4]
     51            yPrev    = yEnd + 1;
   \   000000BC   010080E2           ADD      R0,R0,#+1
   \   000000C0   24008DE5           STR      R0,[SP, #+36]
     52            yStep = (yMag < 0) ? -1 : 1;
   \   000000C4   70009DE5           LDR      R0,[SP, #+112]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0410E041           MVNMI    R1,R4
   \   000000D0   0110A053           MOVPL    R1,#+1
     53            if (pBitmap->pPal) {
   \   000000D4   38009DE5           LDR      R0,[SP, #+56]
   \   000000D8   20108DE5           STR      R1,[SP, #+32]
   \   000000DC   0C0090E5           LDR      R0,[R0, #+12]
   \   000000E0   000050E3           CMP      R0,#+0
     54              if (pBitmap->pPal->HasTrans) {
   \   000000E4   0400D015           LDRBNE   R0,[R0, #+4]
     55                HasTrans = 1;
     56              }
     57            }
     58            for (yi = 0; yi < ySize; yi++) {
   \   000000E8   08408DE5           STR      R4,[SP, #+8]
   \   000000EC   00005013           CMPNE    R0,#+0
   \   000000F0   0110A013           MOVNE    R1,#+1
   \   000000F4   28009DE5           LDR      R0,[SP, #+40]
   \   000000F8   2C108D15           STRNE    R1,[SP, #+44]
   \   000000FC   010050E3           CMP      R0,#+1
   \   00000100   9E0000BA           BLT      ??GL_DrawBitmapEx_2
   \   00000104   010065E2           RSB      R0,R5,#+1
   \   00000108   18008DE5           STR      R0,[SP, #+24]
     59              y = yEnd;
     60              yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1 - yCenter) * (I32)(yMag)), 1000);
   \                     ??GL_DrawBitmapEx_3:
   \   0000010C   18009DE5           LDR      R0,[SP, #+24]
   \   00000110   70209DE5           LDR      R2,[SP, #+112]
   \   00000114   04509DE5           LDR      R5,[SP, #+4]
   \   00000118   920000E0           MUL      R0,R2,R0
   \   0000011C   3C609DE5           LDR      R6,[SP, #+60]
   \   00000120   FA1FA0E3           MOV      R1,#+1000
   \   00000124   ........           BL       GUI__DivideRound32
   \   00000128   060080E0           ADD      R0,R0,R6
   \   0000012C   04008DE5           STR      R0,[SP, #+4]
     61              if (y != yPrev) {
   \   00000130   24009DE5           LDR      R0,[SP, #+36]
   \   00000134   000055E1           CMP      R5,R0
   \   00000138   8100000A           BEQ      ??GL_DrawBitmapEx_4
     62                yPrev = y;
   \   0000013C   24508DE5           STR      R5,[SP, #+36]
     63                do {
     64                  if ((y >= yMin) && (y <= yMax)) {
   \                     ??GL_DrawBitmapEx_5:
   \   00000140   34009DE5           LDR      R0,[SP, #+52]
   \   00000144   000055E1           CMP      R5,R0
   \   00000148   30009DA5           LDRGE    R0,[SP, #+48]
   \   0000014C   050050A1           CMPGE    R0,R5
   \   00000150   700000BA           BLT      ??GL_DrawBitmapEx_6
     65                    xStart = -1;
     66                    x      =  0;
     67                    xiMag  =  0;
     68                    Cached =  0;
     69                    for (xi = 0; xi < xSize; xi++) {
   \   00000154   0C009DE5           LDR      R0,[SP, #+12]
   \   00000158   00A0E0E3           MVN      R10,#+0
   \   0000015C   0060A0E3           MOV      R6,#+0
   \   00000160   0080A0E3           MOV      R8,#+0
   \   00000164   00B0A0E3           MOV      R11,#+0
   \   00000168   0070A0E3           MOV      R7,#+0
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   680000BA           BLT      ??GL_DrawBitmapEx_6
   \   00000174   010040E2           SUB      R0,R0,#+1
   \   00000178   14008DE5           STR      R0,[SP, #+20]
     70                      xiMag += xMagAbs;
   \                     ??GL_DrawBitmapEx_7:
   \   0000017C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000180   088080E0           ADD      R8,R0,R8
     71                      if (xiMag >= 1000) {
   \   00000184   FA0F58E3           CMP      R8,#+1000
   \   00000188   520000BA           BLT      ??GL_DrawBitmapEx_8
     72                        xAct  = (xMag > 0) ? xi : xSize - xi - 1;
   \   0000018C   6C009DE5           LDR      R0,[SP, #+108]
     73                        Index = GUI_GetBitmapPixelIndex(pBitmap, xAct, yi);
   \   00000190   08209DE5           LDR      R2,[SP, #+8]
   \   00000194   010050E3           CMP      R0,#+1
   \   00000198   0710A0A1           MOVGE    R1,R7
   \   0000019C   14109DB5           LDRLT    R1,[SP, #+20]
   \   000001A0   38009DE5           LDR      R0,[SP, #+56]
   \   000001A4   ........           BL       GUI_GetBitmapPixelIndex
   \   000001A8   0090A0E1           MOV      R9,R0
     74                        if (Index != IndexPrev || xStart == -1) {
   \   000001AC   040059E1           CMP      R9,R4
   \   000001B0   0100001A           BNE      ??GL_DrawBitmapEx_9
   \   000001B4   01007AE3           CMN      R10,#+1
   \   000001B8   4000001A           BNE      ??GL_DrawBitmapEx_10
     75                          if ((Index == 0) && HasTrans) {
   \                     ??GL_DrawBitmapEx_9:
   \   000001BC   000059E3           CMP      R9,#+0
   \   000001C0   0D00001A           BNE      ??GL_DrawBitmapEx_11
   \   000001C4   2C009DE5           LDR      R0,[SP, #+44]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0A00000A           BEQ      ??GL_DrawBitmapEx_11
     76                            /* Transparent color ... clear cache */
     77                            if (Cached) {
   \   000001D0   00005BE3           CMP      R11,#+0
   \   000001D4   3800000A           BEQ      ??GL_DrawBitmapEx_12
     78                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
   \   000001D8   00009DE5           LDR      R0,[SP, #+0]
   \   000001DC   0510A0E1           MOV      R1,R5
   \   000001E0   000086E0           ADD      R0,R6,R0
   \   000001E4   012040E2           SUB      R2,R0,#+1
   \   000001E8   00009DE5           LDR      R0,[SP, #+0]
   \   000001EC   00008AE0           ADD      R0,R10,R0
   \   000001F0   ........           BL       LCD_DrawHLine
     79                              Cached = 0;
   \   000001F4   00B0A0E3           MOV      R11,#+0
   \   000001F8   2F0000EA           B        ??GL_DrawBitmapEx_12
     80                            }
     81                          } else {
     82                            /* Another color ... draw contents of cache */
     83                            if (Cached && xStart != -1) {
   \                     ??GL_DrawBitmapEx_11:
   \   000001FC   00005BE3           CMP      R11,#+0
   \   00000200   01007A13           CMNNE    R10,#+1
   \   00000204   0600000A           BEQ      ??GL_DrawBitmapEx_13
     84                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
   \   00000208   00009DE5           LDR      R0,[SP, #+0]
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   000086E0           ADD      R0,R6,R0
   \   00000214   012040E2           SUB      R2,R0,#+1
   \   00000218   00009DE5           LDR      R0,[SP, #+0]
   \   0000021C   00008AE0           ADD      R0,R10,R0
   \   00000220   ........           BL       LCD_DrawHLine
     85                            }
     86                            xStart    = x;
     87                            Cached    = 1;
     88                            if (pBitmap->pMethods) {
   \                     ??GL_DrawBitmapEx_13:
   \   00000224   38009DE5           LDR      R0,[SP, #+56]
   \   00000228   06A0A0E1           MOV      R10,R6
   \   0000022C   101090E5           LDR      R1,[R0, #+16]
   \   00000230   01B0A0E3           MOV      R11,#+1
   \   00000234   000051E3           CMP      R1,#+0
   \   00000238   0300000A           BEQ      ??GL_DrawBitmapEx_14
     89                              Color = pBitmap->pMethods->pfIndex2Color(Index);
   \   0000023C   0900A0E1           MOV      R0,R9
   \   00000240   041091E5           LDR      R1,[R1, #+4]
   \   00000244   31FF2FE1           BLX      R1
   \   00000248   0D0000EA           B        ??GL_DrawBitmapEx_15
     90                            } else {
     91                              if (pBitmap->pPal->pPalEntries) {
   \                     ??GL_DrawBitmapEx_14:
   \   0000024C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000250   081090E5           LDR      R1,[R0, #+8]
   \   00000254   000051E3           CMP      R1,#+0
     92                                Color = pBitmap->pPal->pPalEntries[Index];
   \   00000258   09419117           LDRNE    R4,[R1, +R9, LSL #+2]
   \   0000025C   0900001A           BNE      ??GL_DrawBitmapEx_16
     93                              } else {
     94                                Color = LCDDEV_L0_Index2Color(Index);
   \   00000260   ........           LDR      R1,??DataTable1
   \   00000264   ........           LDR      R2,??DataTable1
   \   00000268   1110D1E5           LDRB     R1,[R1, #+17]
   \   0000026C   0900A0E1           MOV      R0,R9
   \   00000270   011182E0           ADD      R1,R2,R1, LSL #+2
   \   00000274   481091E5           LDR      R1,[R1, #+72]
   \   00000278   101091E5           LDR      R1,[R1, #+16]
   \   0000027C   041091E5           LDR      R1,[R1, #+4]
   \   00000280   31FF2FE1           BLX      R1
   \                     ??GL_DrawBitmapEx_15:
   \   00000284   0040A0E1           MOV      R4,R0
     95                              }
     96                            }
     97                            Alpha = (Color >> 24);
   \                     ??GL_DrawBitmapEx_16:
   \   00000288   240CA0E1           LSR      R0,R4,#+24
   \   0000028C   10008DE5           STR      R0,[SP, #+16]
     98                            if (Alpha) {
     99                              GUI_SetAlpha(Alpha);
    100                            } else {
    101                              GUI_SetAlpha(0);
   \   00000290   ........           BL       GUI_SetAlpha
    102                            }
    103                            LCD_SetColorIndex(LCDDEV_L0_Color2Index(Color));
   \   00000294   ........           LDR      R1,??DataTable1
   \   00000298   ........           LDR      R2,??DataTable1
   \   0000029C   1110D1E5           LDRB     R1,[R1, #+17]
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   011182E0           ADD      R1,R2,R1, LSL #+2
   \   000002A8   481091E5           LDR      R1,[R1, #+72]
   \   000002AC   101091E5           LDR      R1,[R1, #+16]
   \   000002B0   001091E5           LDR      R1,[R1, #+0]
   \   000002B4   31FF2FE1           BLX      R1
   \   000002B8   ........           BL       LCD_SetColorIndex
    104                          }
    105                          IndexPrev = Index;
   \                     ??GL_DrawBitmapEx_12:
   \   000002BC   0940A0E1           MOV      R4,R9
    106                        }
    107                        do {
    108                          x++;
    109                          xiMag -= 1000;
   \                     ??GL_DrawBitmapEx_10:
   \   000002C0   E700E0E3           MVN      R0,#+231
   \   000002C4   C00FC0E3           BIC      R0,R0,#0x300
   \   000002C8   088080E0           ADD      R8,R0,R8
   \   000002CC   016086E2           ADD      R6,R6,#+1
    110                        } while (xiMag >= 1000);
   \   000002D0   FA0F58E3           CMP      R8,#+1000
   \   000002D4   F9FFFFAA           BGE      ??GL_DrawBitmapEx_10
    111                      }
    112                    }
   \                     ??GL_DrawBitmapEx_8:
   \   000002D8   14009DE5           LDR      R0,[SP, #+20]
   \   000002DC   017087E2           ADD      R7,R7,#+1
   \   000002E0   010040E2           SUB      R0,R0,#+1
   \   000002E4   14008DE5           STR      R0,[SP, #+20]
   \   000002E8   0C009DE5           LDR      R0,[SP, #+12]
   \   000002EC   000057E1           CMP      R7,R0
   \   000002F0   A1FFFFBA           BLT      ??GL_DrawBitmapEx_7
    113                    /* Clear cache */
    114                    if (Cached) {
   \   000002F4   00005BE3           CMP      R11,#+0
   \   000002F8   0600000A           BEQ      ??GL_DrawBitmapEx_6
    115                      LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
   \   000002FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000300   0510A0E1           MOV      R1,R5
   \   00000304   000086E0           ADD      R0,R6,R0
   \   00000308   012040E2           SUB      R2,R0,#+1
   \   0000030C   00009DE5           LDR      R0,[SP, #+0]
   \   00000310   00008AE0           ADD      R0,R10,R0
   \   00000314   ........           BL       LCD_DrawHLine
    116                    }
    117                  }
    118                  y += yStep;
   \                     ??GL_DrawBitmapEx_6:
   \   00000318   20009DE5           LDR      R0,[SP, #+32]
   \   0000031C   055080E0           ADD      R5,R0,R5
    119                } while ((yMag < 0) ? (y > yEnd) : (y < yEnd));
   \   00000320   70009DE5           LDR      R0,[SP, #+112]
   \   00000324   000050E3           CMP      R0,#+0
   \   00000328   04009DE5           LDR      R0,[SP, #+4]
   \   0000032C   0200005A           BPL      ??GL_DrawBitmapEx_17
   \   00000330   050050E1           CMP      R0,R5
   \   00000334   020000AA           BGE      ??GL_DrawBitmapEx_4
   \   00000338   80FFFFEA           B        ??GL_DrawBitmapEx_5
   \                     ??GL_DrawBitmapEx_17:
   \   0000033C   000055E1           CMP      R5,R0
   \   00000340   7EFFFFBA           BLT      ??GL_DrawBitmapEx_5
    120              }
    121            }
   \                     ??GL_DrawBitmapEx_4:
   \   00000344   08009DE5           LDR      R0,[SP, #+8]
   \   00000348   28109DE5           LDR      R1,[SP, #+40]
   \   0000034C   010080E2           ADD      R0,R0,#+1
   \   00000350   08008DE5           STR      R0,[SP, #+8]
   \   00000354   18009DE5           LDR      R0,[SP, #+24]
   \   00000358   010080E2           ADD      R0,R0,#+1
   \   0000035C   18008DE5           STR      R0,[SP, #+24]
   \   00000360   08009DE5           LDR      R0,[SP, #+8]
   \   00000364   010050E1           CMP      R0,R1
   \   00000368   67FFFFBA           BLT      ??GL_DrawBitmapEx_3
    122            if (Alpha) {
   \   0000036C   10009DE5           LDR      R0,[SP, #+16]
   \   00000370   000050E3           CMP      R0,#+0
   \   00000374   0100000A           BEQ      ??GL_DrawBitmapEx_2
    123              GUI_SetAlpha(0);
   \   00000378   0000A0E3           MOV      R0,#+0
   \   0000037C   ........           BL       GUI_SetAlpha
    124            }
    125          }
   \                     ??GL_DrawBitmapEx_2:
   \   00000380   44D08DE2           ADD      SP,SP,#+68       ;; stack cleaning
   \   00000384   F08FBDE8           POP      {R4-R11,PC}      ;; return
    126          
    127          /*********************************************************************
    128          *
    129          *       public code
    130          *
    131          **********************************************************************
    132          */
    133          /*********************************************************************
    134          *
    135          *       GUI_DrawBitmapEx
    136          */

   \                                 In section .text, align 4, keep-with-next
    137          void GUI_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
    138                                int xCenter, int yCenter, int xMag, int yMag) {
   \                     GUI_DrawBitmapEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   01A0A0E1           MOV      R10,R1
   \   00000010   02B0A0E1           MOV      R11,R2
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   38609DE5           LDR      R6,[SP, #+56]
   \   0000001C   3C709DE5           LDR      R7,[SP, #+60]
   \   00000020   40809DE5           LDR      R8,[SP, #+64]
    139            int OldIndex;
    140            #if (GUI_WINSUPPORT)
    141              GUI_RECT r;
    142            #endif
    143            GUI_LOCK();
   \   00000024   ........           BL       GUI_Lock
    144            OldIndex = LCD_GetColorIndex();
   \   00000028   ........           BL       LCD_GetColorIndex
   \   0000002C   0090A0E1           MOV      R9,R0
    145            #if (GUI_WINSUPPORT)
    146              WM_ADDORG(x0, y0);
   \   00000030   ........           LDR      R0,??DataTable1
    147              if (xMag >= 0) {
   \   00000034   000057E3           CMP      R7,#+0
   \   00000038   401090E5           LDR      R1,[R0, #+64]
   \   0000003C   440090E5           LDR      R0,[R0, #+68]
   \   00000040   0AA081E0           ADD      R10,R1,R10
   \   00000044   0BB080E0           ADD      R11,R0,R11
   \   00000048   970500E0           MUL      R0,R7,R5
   \   0000004C   00A08DE5           STR      R10,[SP, #+0]
   \   00000050   000060E2           RSB      R0,R0,#+0
   \   00000054   FA1FA0E3           MOV      R1,#+1000
   \   00000058   0E00004A           BMI      ??GUI_DrawBitmapEx_0
    148                r.x0 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
   \   0000005C   ........           BL       GUI__DivideRound32
   \   00000060   00109DE5           LDR      R1,[SP, #+0]
    149                r.x1 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
   \   00000064   00A08DE5           STR      R10,[SP, #+0]
   \   00000068   010080E0           ADD      R0,R0,R1
   \   0000006C   BC00CDE1           STRH     R0,[SP, #+12]
   \   00000070   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000074   FA1FA0E3           MOV      R1,#+1000
   \   00000078   050040E0           SUB      R0,R0,R5
   \   0000007C   010040E2           SUB      R0,R0,#+1
   \   00000080   970000E0           MUL      R0,R7,R0
   \   00000084   ........           BL       GUI__DivideRound32
   \   00000088   00109DE5           LDR      R1,[SP, #+0]
   \   0000008C   010080E0           ADD      R0,R0,R1
   \   00000090   B001CDE1           STRH     R0,[SP, #+16]
   \   00000094   0D0000EA           B        ??GUI_DrawBitmapEx_1
    150              } else {
    151                r.x1 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
   \                     ??GUI_DrawBitmapEx_0:
   \   00000098   ........           BL       GUI__DivideRound32
   \   0000009C   00109DE5           LDR      R1,[SP, #+0]
    152                r.x0 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
   \   000000A0   00A08DE5           STR      R10,[SP, #+0]
   \   000000A4   010080E0           ADD      R0,R0,R1
   \   000000A8   B001CDE1           STRH     R0,[SP, #+16]
   \   000000AC   B000D4E1           LDRH     R0,[R4, #+0]
   \   000000B0   FA1FA0E3           MOV      R1,#+1000
   \   000000B4   050040E0           SUB      R0,R0,R5
   \   000000B8   010040E2           SUB      R0,R0,#+1
   \   000000BC   970000E0           MUL      R0,R7,R0
   \   000000C0   ........           BL       GUI__DivideRound32
   \   000000C4   00109DE5           LDR      R1,[SP, #+0]
   \   000000C8   010080E0           ADD      R0,R0,R1
   \   000000CC   BC00CDE1           STRH     R0,[SP, #+12]
    153              }
    154              if (yMag >= 0) {
   \                     ??GUI_DrawBitmapEx_1:
   \   000000D0   980600E0           MUL      R0,R8,R6
   \   000000D4   000058E3           CMP      R8,#+0
   \   000000D8   000060E2           RSB      R0,R0,#+0
   \   000000DC   00B08DE5           STR      R11,[SP, #+0]
   \   000000E0   FA1FA0E3           MOV      R1,#+1000
   \   000000E4   0E00004A           BMI      ??GUI_DrawBitmapEx_2
    155                r.y0 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \   000000E8   ........           BL       GUI__DivideRound32
   \   000000EC   00109DE5           LDR      R1,[SP, #+0]
    156                r.y1 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
   \   000000F0   00B08DE5           STR      R11,[SP, #+0]
   \   000000F4   010080E0           ADD      R0,R0,R1
   \   000000F8   BE00CDE1           STRH     R0,[SP, #+14]
   \   000000FC   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000100   FA1FA0E3           MOV      R1,#+1000
   \   00000104   060040E0           SUB      R0,R0,R6
   \   00000108   010040E2           SUB      R0,R0,#+1
   \   0000010C   980000E0           MUL      R0,R8,R0
   \   00000110   ........           BL       GUI__DivideRound32
   \   00000114   00109DE5           LDR      R1,[SP, #+0]
   \   00000118   010080E0           ADD      R0,R0,R1
   \   0000011C   B201CDE1           STRH     R0,[SP, #+18]
   \   00000120   0D0000EA           B        ??GUI_DrawBitmapEx_3
    157              } else {
    158                r.y1 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \                     ??GUI_DrawBitmapEx_2:
   \   00000124   ........           BL       GUI__DivideRound32
   \   00000128   00109DE5           LDR      R1,[SP, #+0]
    159                r.y0 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
   \   0000012C   00B08DE5           STR      R11,[SP, #+0]
   \   00000130   010080E0           ADD      R0,R0,R1
   \   00000134   B201CDE1           STRH     R0,[SP, #+18]
   \   00000138   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000013C   FA1FA0E3           MOV      R1,#+1000
   \   00000140   060040E0           SUB      R0,R0,R6
   \   00000144   010040E2           SUB      R0,R0,#+1
   \   00000148   980000E0           MUL      R0,R8,R0
   \   0000014C   ........           BL       GUI__DivideRound32
   \   00000150   00109DE5           LDR      R1,[SP, #+0]
   \   00000154   010080E0           ADD      R0,R0,R1
   \   00000158   BE00CDE1           STRH     R0,[SP, #+14]
    160              }
    161              WM_ITERATE_START(&r) {
   \                     ??GUI_DrawBitmapEx_3:
   \   0000015C   0C008DE2           ADD      R0,SP,#+12
   \   00000160   ........           BL       WM__InitIVRSearch
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0A00000A           BEQ      ??GUI_DrawBitmapEx_4
    162            #endif
    163            GL_DrawBitmapEx(pBitmap, x0, y0, xCenter, yCenter, xMag, yMag);
   \                     ??GUI_DrawBitmapEx_5:
   \   0000016C   08808DE5           STR      R8,[SP, #+8]
   \   00000170   04708DE5           STR      R7,[SP, #+4]
   \   00000174   00608DE5           STR      R6,[SP, #+0]
   \   00000178   0530A0E1           MOV      R3,R5
   \   0000017C   0B20A0E1           MOV      R2,R11
   \   00000180   0A10A0E1           MOV      R1,R10
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       GL_DrawBitmapEx
    164            #if (GUI_WINSUPPORT)
    165              } WM_ITERATE_END();
   \   0000018C   ........           BL       WM__GetNextIVR
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   F4FFFF1A           BNE      ??GUI_DrawBitmapEx_5
    166            #endif
    167            LCD_SetColorIndex(OldIndex);
   \                     ??GUI_DrawBitmapEx_4:
   \   00000198   0900A0E1           MOV      R0,R9
   \   0000019C   ........           BL       LCD_SetColorIndex
    168            GUI_UNLOCK();
   \   000001A0   ........           BL       GUI_Unlock
    169          }
   \   000001A4   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000001A8   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   D34D6210           DC32     0x10624dd3
    170          
    171          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     GL_DrawBitmapEx     104
     GUI_DrawBitmapEx     56


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     GL_DrawBitmapEx   904
     GUI_DrawBitmapEx  428
     ??DataTable1        4
     ??DataTable1_1      4

 
 1 340 bytes in section .text
 
 1 340 bytes of CODE memory

Errors: none
Warnings: none
