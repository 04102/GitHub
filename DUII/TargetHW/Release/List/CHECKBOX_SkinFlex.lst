###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:26 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\CHECKBOX_SkinFlex.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\CHECKBOX_SkinFlex.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\CHECKBOX_SkinFlex.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\CHECKBOX_SkinFlex.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\CHECKBOX_SkinFlex.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : CHECKBOX_SkinFlex.c
     19          Purpose     : Implementation of framewindow skin
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "CHECKBOX_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Defines (configuration defaults)
     32          *
     33          **********************************************************************
     34          */
     35          #ifndef   CHECKBOX_SKINFLEX_SIZE
     36            #define CHECKBOX_SKINFLEX_SIZE 15
     37          #endif
     38          
     39          #ifndef   CHECKBOX_SKINPROPS_ENABLED

   \                                 In section .data, align 4
     40            static CHECKBOX_SKINFLEX_PROPS _PropsEnabled = {
   \                     _PropsEnabled:
   \   00000000   70707000FCFC       DC32 7368816, 16579836, 12170158, 13816530, 15987699, 4210752, 15
   \              FC00AEB3B900
   \              D2D2D200F3F3
   \              F30040404000
   \              0F000000    
     41              { 0x00707070, 0x00FCFCFC, 0x00B9B3AE },
     42              { 0x00D2D2D2, 0x00F3F3F3},
     43              0x00404040,
     44              CHECKBOX_SKINFLEX_SIZE,
     45            };
     46            #define CHECKBOX_SKINPROPS_ENABLED     &_PropsEnabled
     47          #endif
     48          
     49          #ifndef   CHECKBOX_SKINPROPS_DISABLED

   \                                 In section .data, align 4
     50            static CHECKBOX_SKINFLEX_PROPS _PropsDisabled = {
   \                     _PropsDisabled:
   \   00000000   ADB2B500FCFC       DC32 11907757, 16579836, 16053492, 16053492, 16053492, 9134636, 15
   \              FC00F4F4F400
   \              F4F4F400F4F4
   \              F4002C628B00
   \              0F000000    
     51              { 0x00B5B2AD, 0x00FCFCFC, 0x00F4F4F4 },
     52              { 0x00F4F4F4, 0x00F4F4F4},
     53              0x008B622C,
     54              CHECKBOX_SKINFLEX_SIZE,
     55            };
     56            #define CHECKBOX_SKINPROPS_DISABLED    &_PropsDisabled
     57          #endif
     58          
     59          typedef struct {
     60            GUI_BITMAP     aBitmap[2];
     61            GUI_LOGPALETTE Palette[2];
     62            U8           * apData[2];
     63            GUI_COLOR      aColor[2];
     64          } SKINPROP_BITMAP;
     65          
     66          /*********************************************************************
     67          *
     68          *       Static data
     69          *
     70          **********************************************************************
     71          */

   \                                 In section .text, align 4, keep-with-next
     72          static CHECKBOX_SKINFLEX_PROPS * const _apProps[] = {
   \                     _apProps:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   ............       DC32 _PropsEnabled, _PropsDisabled
   \              ....        
     73            CHECKBOX_SKINPROPS_ENABLED,
     74            CHECKBOX_SKINPROPS_DISABLED,
     75          };
     76          

   \                                 In section .bss, align 4
     77          static SKINPROP_BITMAP _aBitmap[2];
   \                     _aBitmap:
   \   00000000                      DS8 160
     78          
     79          /*********************************************************************
     80          *
     81          *       Static code
     82          *
     83          **********************************************************************
     84          */
     85          /*********************************************************************
     86          *
     87          *       _DrawBackground
     88          */
     89          static void _DrawBackground(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo, const CHECKBOX_SKINFLEX_PROPS * pProps) {
     90            int i;
     91          
     92            for (i = 0; i < GUI_COUNTOF(pProps->aColorFrame); i++) {
     93              GUI_SetColor(pProps->aColorFrame[i]);
     94              GUI_DrawRect(pDrawItemInfo->x0 + i, 
     95                           pDrawItemInfo->y0 + i, 
     96                           pDrawItemInfo->x0 + pProps->ButtonSize - i - 1, 
     97                           pDrawItemInfo->x0 + pProps->ButtonSize - i - 1);
     98            }
     99            GUI_DrawGradientV(pDrawItemInfo->x0 + i, 
    100                              pDrawItemInfo->y0 + i, 
    101                              pDrawItemInfo->x0 + pProps->ButtonSize - i - 1, 
    102                              pDrawItemInfo->x0 + pProps->ButtonSize - i - 1, 
    103                              pProps->aColorInner[0], pProps->aColorInner[1]);
    104          }
    105          
    106          /*********************************************************************
    107          *
    108          *       _SetBitmapPixel_1bpp
    109          */
    110          static void _SetBitmapPixel_1bpp(int x, int y, int BytesPerLine,  U8 * pData) {
    111            U32 Off;
    112            U8 Mask;
    113          
    114            Off = BytesPerLine * y + (x >> 3);
    115            Mask = 0x80 >> (x & 7);
    116            *(pData + Off) |= Mask;
    117          }
    118          
    119          /*********************************************************************
    120          *
    121          *       _GenCheck
    122          */

   \                                 In section .text, align 4, keep-with-next
    123          static void _GenCheck(int b, int h, int s, int w, int Frame, int Dither, GUI_COLOR * pColor, GUI_BITMAP * pBitmap, GUI_LOGPALETTE * pPalette) {
   \                     _GenCheck:
   \   00000000   F94F2DE9           PUSH     {R0,R3-R11,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    124            U8 * pData;
    125            int BytesPerLine, BytesRequired;
    126            int b2, h2, x, y, xs, i, State;
    127          
    128            //
    129            // Calculate check mark
    130            //
    131            b2 = b / 2;
    132            h2 = h / 2;
   \   00000008   A40F84E0           ADD      R0,R4,R4, LSR #+31
   \   0000000C   C000A0E1           ASR      R0,R0,#+1
    133            y  = h2 - h2 / 2 + s - w / 2 + Frame;
   \   00000010   A01F80E0           ADD      R1,R0,R0, LSR #+31
   \   00000014   C10040E0           SUB      R0,R0,R1, ASR #+1
   \   00000018   000082E0           ADD      R0,R2,R0
   \   0000001C   A31F83E0           ADD      R1,R3,R3, LSR #+31
   \   00000020   04D04DE2           SUB      SP,SP,#+4
   \   00000024   C10040E0           SUB      R0,R0,R1, ASR #+1
   \   00000028   30109DE5           LDR      R1,[SP, #+48]
   \   0000002C   34509DE5           LDR      R5,[SP, #+52]
   \   00000030   006081E0           ADD      R6,R1,R0
    134            xs = b2 - s;
   \   00000034   04009DE5           LDR      R0,[SP, #+4]
   \   00000038   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000003C   C00062E0           RSB      R0,R2,R0, ASR #+1
   \   00000040   00008DE5           STR      R0,[SP, #+0]
    135            //
    136            // Get memory for pixels
    137            //
    138            BytesPerLine  = (b + 7) / 8;
   \   00000044   04009DE5           LDR      R0,[SP, #+4]
   \   00000048   070080E2           ADD      R0,R0,#+7
   \   0000004C   4011A0E1           ASR      R1,R0,#+2
   \   00000050   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   00000054   C071A0E1           ASR      R7,R0,#+3
    139            BytesRequired = BytesPerLine * h;
   \   00000058   940709E0           MUL      R9,R4,R7
    140            pData = (U8 *)GUI_ALLOC_GetFixedBlock(BytesRequired);
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000064   0080A0E1           MOV      R8,R0
    141            GUI_MEMSET(pData, 0, BytesRequired);
   \   00000068   0920A0E1           MOV      R2,R9
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   ........           BL       GUI__memset
    142            //
    143            // Set pixels
    144            //
    145            for (x = Frame; x < xs; x++, y++) {
   \   00000074   30009DE5           LDR      R0,[SP, #+48]
   \   00000078   00209DE5           LDR      R2,[SP, #+0]
   \   0000007C   020050E1           CMP      R0,R2
   \   00000080   1C0000AA           BGE      ??_GenCheck_0
   \   00000084   08109DE5           LDR      R1,[SP, #+8]
   \   00000088   8030A0E3           MOV      R3,#+128
   \   0000008C   06C081E0           ADD      R12,R1,R6
    146              State = 1;
   \                     ??_GenCheck_1:
   \   00000090   0110A0E3           MOV      R1,#+1
    147              for (i = y; i < (y + w); i++) {
   \   00000094   0620A0E1           MOV      R2,R6
   \   00000098   0C0056E1           CMP      R6,R12
   \   0000009C   0F0000AA           BGE      ??_GenCheck_2
   \   000000A0   07E000E2           AND      LR,R0,#0x7
   \   000000A4   33EEA0E1           LSR      LR,R3,LR
   \   000000A8   C091A0E1           ASR      R9,R0,#+3
   \   000000AC   010000EA           B        ??_GenCheck_3
    148                if (State && (i < h)) {
   \                     ??_GenCheck_4:
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   0500000A           BEQ      ??_GenCheck_5
   \                     ??_GenCheck_3:
   \   000000B8   040052E1           CMP      R2,R4
   \   000000BC   030000AA           BGE      ??_GenCheck_5
    149                  _SetBitmapPixel_1bpp(x, i, BytesPerLine, pData);
   \   000000C0   92972AE0           MLA      R10,R2,R7,R9
   \   000000C4   08B0DAE7           LDRB     R11,[R10, +R8]
   \   000000C8   0BB08EE1           ORR      R11,LR,R11
   \   000000CC   08B0CAE7           STRB     R11,[R10, +R8]
    150                }
    151                State ^= Dither;
    152              }
   \                     ??_GenCheck_5:
   \   000000D0   012082E2           ADD      R2,R2,#+1
   \   000000D4   011025E0           EOR      R1,R5,R1
   \   000000D8   0C0052E1           CMP      R2,R12
   \   000000DC   F3FFFFBA           BLT      ??_GenCheck_4
    153            }
   \                     ??_GenCheck_2:
   \   000000E0   00109DE5           LDR      R1,[SP, #+0]
   \   000000E4   010080E2           ADD      R0,R0,#+1
   \   000000E8   016086E2           ADD      R6,R6,#+1
   \   000000EC   01C08CE2           ADD      R12,R12,#+1
   \   000000F0   010050E1           CMP      R0,R1
   \   000000F4   E5FFFFBA           BLT      ??_GenCheck_1
    154            for (; x < b - Frame; x++, y--) {
   \                     ??_GenCheck_0:
   \   000000F8   04109DE5           LDR      R1,[SP, #+4]
   \   000000FC   30209DE5           LDR      R2,[SP, #+48]
   \   00000100   02C041E0           SUB      R12,R1,R2
   \   00000104   0C0050E1           CMP      R0,R12
   \   00000108   1A0000AA           BGE      ??_GenCheck_6
    155              State = 1;
    156              for (i = y; i < (y + w); i++) {
   \                     ??_GenCheck_7:
   \   0000010C   08309DE5           LDR      R3,[SP, #+8]
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   06E083E0           ADD      LR,R3,R6
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   0E0056E1           CMP      R6,LR
   \   00000120   100000AA           BGE      ??_GenCheck_8
   \   00000124   8030A0E3           MOV      R3,#+128
   \   00000128   079000E2           AND      R9,R0,#0x7
   \   0000012C   3339A0E1           LSR      R3,R3,R9
   \   00000130   C091A0E1           ASR      R9,R0,#+3
   \   00000134   010000EA           B        ??_GenCheck_9
    157                if (State && (i < h)) {
   \                     ??_GenCheck_10:
   \   00000138   000051E3           CMP      R1,#+0
   \   0000013C   0500000A           BEQ      ??_GenCheck_11
   \                     ??_GenCheck_9:
   \   00000140   040052E1           CMP      R2,R4
   \   00000144   030000AA           BGE      ??_GenCheck_11
    158                  _SetBitmapPixel_1bpp(x, i, BytesPerLine, pData);
   \   00000148   92972AE0           MLA      R10,R2,R7,R9
   \   0000014C   08B0DAE7           LDRB     R11,[R10, +R8]
   \   00000150   0BB083E1           ORR      R11,R3,R11
   \   00000154   08B0CAE7           STRB     R11,[R10, +R8]
    159                }
    160                State ^= Dither;
    161              }
   \                     ??_GenCheck_11:
   \   00000158   012082E2           ADD      R2,R2,#+1
   \   0000015C   011025E0           EOR      R1,R5,R1
   \   00000160   0E0052E1           CMP      R2,LR
   \   00000164   F3FFFFBA           BLT      ??_GenCheck_10
    162            }
   \                     ??_GenCheck_8:
   \   00000168   010080E2           ADD      R0,R0,#+1
   \   0000016C   016046E2           SUB      R6,R6,#+1
   \   00000170   0C0050E1           CMP      R0,R12
   \   00000174   E4FFFFBA           BLT      ??_GenCheck_7
    163            //
    164            // Setup palette structure
    165            //
    166            pPalette->NumEntries  = 2;
   \                     ??_GenCheck_6:
   \   00000178   40009DE5           LDR      R0,[SP, #+64]
   \   0000017C   0210A0E3           MOV      R1,#+2
   \   00000180   001080E5           STR      R1,[R0, #+0]
    167            pPalette->HasTrans    = 1;
   \   00000184   40109DE5           LDR      R1,[SP, #+64]
   \   00000188   0100A0E3           MOV      R0,#+1
   \   0000018C   0400C1E5           STRB     R0,[R1, #+4]
    168            pPalette->pPalEntries = pColor;
   \   00000190   40109DE5           LDR      R1,[SP, #+64]
   \   00000194   38209DE5           LDR      R2,[SP, #+56]
   \   00000198   082081E5           STR      R2,[R1, #+8]
    169            //
    170            // Setup bitmap structure
    171            //
    172            pBitmap->BitsPerPixel = 1;
   \   0000019C   3C109DE5           LDR      R1,[SP, #+60]
   \   000001A0   B600C1E1           STRH     R0,[R1, #+6]
    173            pBitmap->BytesPerLine = BytesPerLine;
   \   000001A4   3C009DE5           LDR      R0,[SP, #+60]
    174            pBitmap->pData = pData;
    175            pBitmap->pMethods = NULL;
   \   000001A8   0010A0E3           MOV      R1,#+0
   \   000001AC   B470C0E1           STRH     R7,[R0, #+4]
   \   000001B0   3C009DE5           LDR      R0,[SP, #+60]
   \   000001B4   088080E5           STR      R8,[R0, #+8]
   \   000001B8   3C009DE5           LDR      R0,[SP, #+60]
   \   000001BC   101080E5           STR      R1,[R0, #+16]
    176            pBitmap->pPal = pPalette;
   \   000001C0   3C009DE5           LDR      R0,[SP, #+60]
   \   000001C4   40109DE5           LDR      R1,[SP, #+64]
   \   000001C8   0C1080E5           STR      R1,[R0, #+12]
    177            pBitmap->XSize = b;
   \   000001CC   3C009DE5           LDR      R0,[SP, #+60]
   \   000001D0   04109DE5           LDR      R1,[SP, #+4]
   \   000001D4   B010C0E1           STRH     R1,[R0, #+0]
    178            pBitmap->YSize = h;
   \   000001D8   3C009DE5           LDR      R0,[SP, #+60]
    179          }
   \   000001DC   0CD08DE2           ADD      SP,SP,#+12
   \   000001E0   B240C0E1           STRH     R4,[R0, #+2]
   \   000001E4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    180          
    181          /*********************************************************************
    182          *
    183          *       _DrawBitmap
    184          */
    185          static void _DrawBitmap(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo, const CHECKBOX_SKINFLEX_PROPS * pProps, SKINPROP_BITMAP * pBitmap) {
    186            int Index, Size;
    187          
    188            Index = pDrawItemInfo->ItemIndex - 1;
    189            Size = pProps->ButtonSize - 6;
    190            //
    191            // Initialize bitmap on first draw
    192            //
    193            if (pBitmap->aBitmap[Index].pData == NULL) {
    194              pBitmap->aColor[1] = pProps->ColorCheck;
    195              _GenCheck(Size, Size, Size / 5, 3, 1, Index, pBitmap->aColor, &pBitmap->aBitmap[Index], &pBitmap->Palette[Index]);
    196            }
    197            //
    198            // Draw bitmap
    199            //
    200            GUI_DrawBitmap(&pBitmap->aBitmap[Index], 3, 3);
    201          }
    202          
    203          /*********************************************************************
    204          *
    205          *       _DrawText
    206          */
    207          static void _DrawText(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo, const CHECKBOX_SKINFLEX_PROPS * pProps) {
    208            CHECKBOX_Obj * pObj;
    209            int Align, Spacing;
    210            GUI_RECT Rect;
    211            const char * s;
    212            const GUI_FONT GUI_UNI_PTR * pFont;
    213            GUI_COLOR Color;
    214          
    215            //
    216            // Get object properties
    217            //
    218            pObj = CHECKBOX_LOCK_H(pDrawItemInfo->hWin);
    219            Align = pObj->Props.Align;
    220            pFont = pObj->Props.pFont;
    221            Spacing = pObj->Props.Spacing;
    222            Color = pObj->Props.TextColor;
    223            GUI_UNLOCK_H(pObj);
    224            //
    225            // Draw text
    226            //
    227            WM_GetClientRect(&Rect);
    228            Rect.x0 += pProps->ButtonSize + Spacing;
    229            s = (const char *)pDrawItemInfo->p;
    230            GUI_SetFont(pFont);
    231            GUI_SetTextMode(GUI_TM_TRANS);
    232            GUI_SetColor(Color);
    233            GUI_DispStringInRect(s, &Rect, Align);
    234          }
    235          
    236          /*********************************************************************
    237          *
    238          *       _DrawFocus
    239          */

   \                                 In section .text, align 4, keep-with-next
    240          static void _DrawFocus(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo, const CHECKBOX_SKINFLEX_PROPS * pProps) {
   \                     _DrawFocus:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0070A0E1           MOV      R7,R0
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   0190A0E1           MOV      R9,R1
    241            CHECKBOX_Obj * pObj;
    242            int Align, Spacing, xSizeText, ySizeText;
    243            GUI_RECT Rect;
    244            GUI_COLOR FocusColor;
    245            const char * s;
    246            const GUI_FONT GUI_UNI_PTR * pFont;
    247          
    248            //
    249            // Get object properties
    250            //
    251            pObj = CHECKBOX_LOCK_H(pDrawItemInfo->hWin);
   \   00000010   000097E5           LDR      R0,[R7, #+0]
   \   00000014   ........           BL       GUI_ALLOC_LockH
    252            Align = pObj->Props.Align;
   \   00000018   F445D0E1           LDRSH    R4,[R0, #+84]
    253            pFont = pObj->Props.pFont;
   \   0000001C   346090E5           LDR      R6,[R0, #+52]
    254            Spacing = pObj->Props.Spacing;
   \   00000020   5680D0E5           LDRB     R8,[R0, #+86]
    255            FocusColor = pObj->Props.FocusColor;
   \   00000024   485090E5           LDR      R5,[R0, #+72]
    256            GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    257            //
    258            // Calculate rectangle
    259            //
    260            WM_GetClientRect(&Rect);
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       WM_GetClientRect
    261            Rect.x0 += pProps->ButtonSize + Spacing;
   \   00000034   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000038   181099E5           LDR      R1,[R9, #+24]
   \   0000003C   011088E0           ADD      R1,R8,R1
   \   00000040   000081E0           ADD      R0,R1,R0
   \   00000044   B000CDE1           STRH     R0,[SP, #+0]
    262            s = (const char *)pDrawItemInfo->p;
    263            xSizeText = GUI_GetStringDistX(s);
   \   00000048   1C0097E5           LDR      R0,[R7, #+28]
   \   0000004C   ........           BL       GUI_GetStringDistX
   \   00000050   0070A0E1           MOV      R7,R0
    264            ySizeText = GUI_GetYSizeOfFont(pFont);
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       GUI_GetYSizeOfFont
    265            switch (Align & ~(GUI_TA_HORIZONTAL)) {
   \   0000005C   0310C4E3           BIC      R1,R4,#0x3
   \   00000060   041051E2           SUBS     R1,R1,#+4
   \   00000064   0700000A           BEQ      ??_DrawFocus_0
   \   00000068   081051E2           SUBS     R1,R1,#+8
   \   0000006C   0800001A           BNE      ??_DrawFocus_1
    266            case GUI_TA_VCENTER:
    267              Rect.y0 = (Rect.y1 - ySizeText + 1) / 2;
   \   00000070   F610DDE1           LDRSH    R1,[SP, #+6]
   \   00000074   001041E0           SUB      R1,R1,R0
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000080   C110A0E1           ASR      R1,R1,#+1
   \   00000084   010000EA           B        ??_DrawFocus_2
    268              break;
    269            case GUI_TA_BOTTOM:
    270              Rect.y0 = Rect.y1 - ySizeText;
   \                     ??_DrawFocus_0:
   \   00000088   F610DDE1           LDRSH    R1,[SP, #+6]
   \   0000008C   001041E0           SUB      R1,R1,R0
   \                     ??_DrawFocus_2:
   \   00000090   B210CDE1           STRH     R1,[SP, #+2]
    271              break;
    272            }
    273            switch (Align & ~(GUI_TA_VERTICAL)) {
   \                     ??_DrawFocus_1:
   \   00000094   0C10C4E3           BIC      R1,R4,#0xC
   \   00000098   010051E3           CMP      R1,#+1
   \   0000009C   0900000A           BEQ      ??_DrawFocus_3
   \   000000A0   0B00003A           BCC      ??_DrawFocus_4
   \   000000A4   020051E3           CMP      R1,#+2
   \   000000A8   0900001A           BNE      ??_DrawFocus_4
    274            case GUI_TA_HCENTER:
    275              Rect.x0 += ((Rect.x1 - Rect.x0) - xSizeText) / 2;
   \   000000AC   F410DDE1           LDRSH    R1,[SP, #+4]
   \   000000B0   F020DDE1           LDRSH    R2,[SP, #+0]
   \   000000B4   021041E0           SUB      R1,R1,R2
   \   000000B8   071041E0           SUB      R1,R1,R7
   \   000000BC   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000000C0   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   000000C4   010000EA           B        ??_DrawFocus_5
    276              break;
    277            case GUI_TA_RIGHT:
    278              Rect.x0 += (Rect.x1 - Rect.x0) - xSizeText;
   \                     ??_DrawFocus_3:
   \   000000C8   F410DDE1           LDRSH    R1,[SP, #+4]
   \   000000CC   071041E0           SUB      R1,R1,R7
   \                     ??_DrawFocus_5:
   \   000000D0   B010CDE1           STRH     R1,[SP, #+0]
    279              break;
    280            }
    281            Rect.x1 = Rect.x0 + xSizeText - 1;
   \                     ??_DrawFocus_4:
   \   000000D4   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000000D8   011087E0           ADD      R1,R7,R1
   \   000000DC   011041E2           SUB      R1,R1,#+1
   \   000000E0   B410CDE1           STRH     R1,[SP, #+4]
    282            Rect.y1 = Rect.y0 + ySizeText - 1;
   \   000000E4   F210DDE1           LDRSH    R1,[SP, #+2]
   \   000000E8   010080E0           ADD      R0,R0,R1
   \   000000EC   010040E2           SUB      R0,R0,#+1
   \   000000F0   B600CDE1           STRH     R0,[SP, #+6]
    283            //
    284            // Draw focus rectangle
    285            //
    286            GUI_SetColor(FocusColor);
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           BL       GUI_SetColor
    287            GUI_DrawFocusRect(&Rect, -1);
   \   000000FC   0010E0E3           MVN      R1,#+0
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           BL       GUI_DrawFocusRect
    288          }
   \   00000108   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
    289          
    290          /*********************************************************************
    291          *
    292          *       Public code
    293          *
    294          **********************************************************************
    295          */
    296          /*********************************************************************
    297          *
    298          *       CHECKBOX_DrawSkinFlex
    299          */

   \                                 In section .text, align 4, keep-with-next
    300          int CHECKBOX_DrawSkinFlex(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo) {
   \                     CHECKBOX_DrawSkinFlex:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    301            const CHECKBOX_SKINFLEX_PROPS * pProps;
    302            SKINPROP_BITMAP * pBitmap;
    303            int Index, Size;
    304          
    305            //
    306            // Get property and bitmap index
    307            //
    308            if (pDrawItemInfo->hWin) {
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0300000A           BEQ      ??CHECKBOX_DrawSkinFlex_1
    309              Index = WM__IsEnabled(pDrawItemInfo->hWin) ? 0 : 1;
   \   00000018   ........           BL       WM__IsEnabled
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0110A003           MOVEQ    R1,#+1
   \   00000024   0000000A           BEQ      ??CHECKBOX_DrawSkinFlex_2
    310            } else {
    311              Index = 0;
   \                     ??CHECKBOX_DrawSkinFlex_1:
   \   00000028   0010A0E3           MOV      R1,#+0
    312            }
    313            //
    314            // Get property pointers
    315            //
    316            pProps = _apProps[Index];
   \                     ??CHECKBOX_DrawSkinFlex_2:
   \   0000002C   ........           ADR      R0,_apProps
    317            pBitmap = &_aBitmap[Index];
   \   00000030   ........           LDR      R2,??DataTable1
   \   00000034   015190E7           LDR      R5,[R0, +R1, LSL #+2]
   \   00000038   5000A0E3           MOV      R0,#+80
   \   0000003C   802106E1           SMLABB   R6,R0,R1,R2
    318            //
    319            // Initialize bitmap if required
    320            //
    321            if (pBitmap->aBitmap[Index].pData == NULL) {
   \   00000040   1470A0E3           MOV      R7,#+20
   \   00000044   876102E1           SMLABB   R2,R7,R1,R6
   \   00000048   080092E5           LDR      R0,[R2, #+8]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1400001A           BNE      ??CHECKBOX_DrawSkinFlex_3
    322              Size = pProps->ButtonSize - 6;
    323              pBitmap->aColor[1] = pProps->ColorCheck;
   \   00000054   143095E5           LDR      R3,[R5, #+20]
   \   00000058   180095E5           LDR      R0,[R5, #+24]
   \   0000005C   4C3086E5           STR      R3,[R6, #+76]
    324              _GenCheck(Size, Size, Size / 5, 3, 1, Index, pBitmap->aColor, &pBitmap->aBitmap[Index], &pBitmap->Palette[Index]);
   \   00000060   0C30A0E3           MOV      R3,#+12
   \   00000064   83610CE1           SMLABB   R12,R3,R1,R6
   \   00000068   04108DE5           STR      R1,[SP, #+4]
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0C208DE5           STR      R2,[SP, #+12]
   \   00000074   00108DE5           STR      R1,[SP, #+0]
   \   00000078   482086E2           ADD      R2,R6,#+72
   \   0000007C   ........           LDR      R1,??DataTable1_1  ;; 0x66666667
   \   00000080   060040E2           SUB      R0,R0,#+6
   \   00000084   08208DE5           STR      R2,[SP, #+8]
   \   00000088   9021C1E0           SMULL    R2,R1,R0,R1
   \   0000008C   28308CE2           ADD      R3,R12,#+40
   \   00000090   10308DE5           STR      R3,[SP, #+16]
   \   00000094   C120B0E1           ASRS     R2,R1,#+1
   \   00000098   0330A0E3           MOV      R3,#+3
   \   0000009C   01208242           ADDMI    R2,R2,#+1
   \   000000A0   0010A0E1           MOV      R1,R0
   \   000000A4   ........           BL       _GenCheck
    325            }
    326            //
    327            // Draw
    328            //
    329            switch (pDrawItemInfo->Cmd) {
   \                     ??CHECKBOX_DrawSkinFlex_3:
   \   000000A8   040094E5           LDR      R0,[R4, #+4]
   \   000000AC   170050E3           CMP      R0,#+23
   \   000000B0   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??CHECKBOX_DrawSkinFlex_0:
   \   000000B4   8600008A           BHI      ??CHECKBOX_DrawSkinFlex_4
   \   000000B8   830000EA           B        ??CHECKBOX_DrawSkinFlex_5
   \   000000BC   840000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000C0   830000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000C4   820000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000C8   3F0000EA           B        ??CHECKBOX_DrawSkinFlex_6
   \   000000CC   110000EA           B        ??CHECKBOX_DrawSkinFlex_7
   \   000000D0   7F0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000D4   7E0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000D8   750000EA           B        ??CHECKBOX_DrawSkinFlex_8
   \   000000DC   7C0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000E0   7B0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000E4   7A0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000E8   790000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000EC   780000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000F0   770000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000F4   760000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   000000F8   530000EA           B        ??CHECKBOX_DrawSkinFlex_9
   \   000000FC   740000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   00000100   730000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   00000104   720000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   00000108   710000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   0000010C   700000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   00000110   6F0000EA           B        ??CHECKBOX_DrawSkinFlex_4
   \   00000114   6A0000EA           B        ??CHECKBOX_DrawSkinFlex_10
    330            case WIDGET_ITEM_DRAW_BUTTON:
    331              _DrawBackground(pDrawItemInfo, pProps);
   \                     ??CHECKBOX_DrawSkinFlex_7:
   \   00000118   000095E5           LDR      R0,[R5, #+0]
   \   0000011C   ........           BL       GUI_SetColor
   \   00000120   0C0094E5           LDR      R0,[R4, #+12]
   \   00000124   181095E5           LDR      R1,[R5, #+24]
   \   00000128   001081E0           ADD      R1,R1,R0
   \   0000012C   012041E2           SUB      R2,R1,#+1
   \   00000130   0230A0E1           MOV      R3,R2
   \   00000134   101094E5           LDR      R1,[R4, #+16]
   \   00000138   ........           BL       GUI_DrawRect
   \   0000013C   040095E5           LDR      R0,[R5, #+4]
   \   00000140   ........           BL       GUI_SetColor
   \   00000144   0C0094E5           LDR      R0,[R4, #+12]
   \   00000148   181095E5           LDR      R1,[R5, #+24]
   \   0000014C   001081E0           ADD      R1,R1,R0
   \   00000150   023041E2           SUB      R3,R1,#+2
   \   00000154   101094E5           LDR      R1,[R4, #+16]
   \   00000158   0320A0E1           MOV      R2,R3
   \   0000015C   011081E2           ADD      R1,R1,#+1
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   ........           BL       GUI_DrawRect
   \   00000168   080095E5           LDR      R0,[R5, #+8]
   \   0000016C   ........           BL       GUI_SetColor
   \   00000170   0C0094E5           LDR      R0,[R4, #+12]
   \   00000174   181095E5           LDR      R1,[R5, #+24]
   \   00000178   001081E0           ADD      R1,R1,R0
   \   0000017C   032041E2           SUB      R2,R1,#+3
   \   00000180   101094E5           LDR      R1,[R4, #+16]
   \   00000184   0230A0E1           MOV      R3,R2
   \   00000188   021081E2           ADD      R1,R1,#+2
   \   0000018C   020080E2           ADD      R0,R0,#+2
   \   00000190   ........           BL       GUI_DrawRect
   \   00000194   0C0094E5           LDR      R0,[R4, #+12]
   \   00000198   181095E5           LDR      R1,[R5, #+24]
   \   0000019C   001081E0           ADD      R1,R1,R0
   \   000001A0   042041E2           SUB      R2,R1,#+4
   \   000001A4   101095E5           LDR      R1,[R5, #+16]
   \   000001A8   0230A0E1           MOV      R3,R2
   \   000001AC   04108DE5           STR      R1,[SP, #+4]
   \   000001B0   0C1095E5           LDR      R1,[R5, #+12]
   \   000001B4   030080E2           ADD      R0,R0,#+3
   \   000001B8   00108DE5           STR      R1,[SP, #+0]
   \   000001BC   101094E5           LDR      R1,[R4, #+16]
   \   000001C0   031081E2           ADD      R1,R1,#+3
   \   000001C4   ........           BL       GUI_DrawGradientV
    332              break;
   \   000001C8   410000EA           B        ??CHECKBOX_DrawSkinFlex_4
    333            case WIDGET_ITEM_DRAW_BITMAP:
    334              _DrawBitmap(pDrawItemInfo, pProps, pBitmap);
   \                     ??CHECKBOX_DrawSkinFlex_6:
   \   000001CC   080094E5           LDR      R0,[R4, #+8]
   \   000001D0   181095E5           LDR      R1,[R5, #+24]
   \   000001D4   010040E2           SUB      R0,R0,#+1
   \   000001D8   976024E0           MLA      R4,R7,R0,R6
   \   000001DC   061041E2           SUB      R1,R1,#+6
   \   000001E0   082094E5           LDR      R2,[R4, #+8]
   \   000001E4   000052E3           CMP      R2,#+0
   \   000001E8   1200001A           BNE      ??CHECKBOX_DrawSkinFlex_11
   \   000001EC   142095E5           LDR      R2,[R5, #+20]
   \   000001F0   4C2086E5           STR      R2,[R6, #+76]
   \   000001F4   0C20A0E3           MOV      R2,#+12
   \   000001F8   926023E0           MLA      R3,R2,R0,R6
   \   000001FC   04008DE5           STR      R0,[SP, #+4]
   \   00000200   282083E2           ADD      R2,R3,#+40
   \   00000204   0100A0E3           MOV      R0,#+1
   \   00000208   10208DE5           STR      R2,[SP, #+16]
   \   0000020C   00008DE5           STR      R0,[SP, #+0]
   \   00000210   482086E2           ADD      R2,R6,#+72
   \   00000214   ........           LDR      R0,??DataTable1_1  ;; 0x66666667
   \   00000218   08208DE5           STR      R2,[SP, #+8]
   \   0000021C   9120C0E0           SMULL    R2,R0,R1,R0
   \   00000220   0C408DE5           STR      R4,[SP, #+12]
   \   00000224   C020B0E1           ASRS     R2,R0,#+1
   \   00000228   0330A0E3           MOV      R3,#+3
   \   0000022C   01208242           ADDMI    R2,R2,#+1
   \   00000230   0100A0E1           MOV      R0,R1
   \   00000234   ........           BL       _GenCheck
   \                     ??CHECKBOX_DrawSkinFlex_11:
   \   00000238   0320A0E3           MOV      R2,#+3
   \   0000023C   0310A0E3           MOV      R1,#+3
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   ........           BL       GUI_DrawBitmap
    335              break;
   \   00000248   210000EA           B        ??CHECKBOX_DrawSkinFlex_4
    336            case WIDGET_ITEM_DRAW_TEXT:
    337              _DrawText(pDrawItemInfo, pProps);
   \                     ??CHECKBOX_DrawSkinFlex_9:
   \   0000024C   000094E5           LDR      R0,[R4, #+0]
   \   00000250   ........           BL       GUI_ALLOC_LockH
   \   00000254   F465D0E1           LDRSH    R6,[R0, #+84]
   \   00000258   347090E5           LDR      R7,[R0, #+52]
   \   0000025C   5680D0E5           LDRB     R8,[R0, #+86]
   \   00000260   449090E5           LDR      R9,[R0, #+68]
   \   00000264   ........           BL       GUI_ALLOC_UnlockH
   \   00000268   0D00A0E1           MOV      R0,SP
   \   0000026C   ........           BL       WM_GetClientRect
   \   00000270   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000274   181095E5           LDR      R1,[R5, #+24]
   \   00000278   011088E0           ADD      R1,R8,R1
   \   0000027C   000081E0           ADD      R0,R1,R0
   \   00000280   B000CDE1           STRH     R0,[SP, #+0]
   \   00000284   1C4094E5           LDR      R4,[R4, #+28]
   \   00000288   0700A0E1           MOV      R0,R7
   \   0000028C   ........           BL       GUI_SetFont
   \   00000290   0200A0E3           MOV      R0,#+2
   \   00000294   ........           BL       GUI_SetTextMode
   \   00000298   0900A0E1           MOV      R0,R9
   \   0000029C   ........           BL       GUI_SetColor
   \   000002A0   0620A0E1           MOV      R2,R6
   \   000002A4   0D10A0E1           MOV      R1,SP
   \   000002A8   0400A0E1           MOV      R0,R4
   \   000002AC   ........           BL       GUI_DispStringInRect
    338              break;
   \   000002B0   070000EA           B        ??CHECKBOX_DrawSkinFlex_4
    339            case WIDGET_ITEM_DRAW_FOCUS:
    340              _DrawFocus(pDrawItemInfo, pProps);
   \                     ??CHECKBOX_DrawSkinFlex_8:
   \   000002B4   0510A0E1           MOV      R1,R5
   \   000002B8   0400A0E1           MOV      R0,R4
   \   000002BC   ........           BL       _DrawFocus
    341              break;
   \   000002C0   030000EA           B        ??CHECKBOX_DrawSkinFlex_4
    342            case WIDGET_ITEM_GET_BUTTONSIZE:
    343              return pProps->ButtonSize;
   \                     ??CHECKBOX_DrawSkinFlex_10:
   \   000002C4   180095E5           LDR      R0,[R5, #+24]
   \   000002C8   020000EA           B        ??CHECKBOX_DrawSkinFlex_12
    344            case WIDGET_ITEM_CREATE:
    345              WM_SetHasTrans(pDrawItemInfo->hWin);
   \                     ??CHECKBOX_DrawSkinFlex_5:
   \   000002CC   000094E5           LDR      R0,[R4, #+0]
   \   000002D0   ........           BL       WM_SetHasTrans
    346              break;
    347            }
    348            return 0;
   \                     ??CHECKBOX_DrawSkinFlex_4:
   \   000002D4   0000A0E3           MOV      R0,#+0
   \                     ??CHECKBOX_DrawSkinFlex_12:
   \   000002D8   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000002DC   F083BDE8           POP      {R4-R9,PC}       ;; return
    349          }
    350          
    351          /*********************************************************************
    352          *
    353          *       CHECKBOX_SetSkinFlexProps
    354          */

   \                                 In section .text, align 4, keep-with-next
    355          void CHECKBOX_SetSkinFlexProps(const CHECKBOX_SKINFLEX_PROPS * pProps, int Index) {
    356            if (Index < GUI_COUNTOF(_apProps)) {
   \                     CHECKBOX_SetSkinFlexProps:
   \   00000000   020051E3           CMP      R1,#+2
   \   00000004   0000003A           BCC      ??CHECKBOX_SetSkinFlexProps_0
    357              *_apProps[Index] = *pProps;
   \   00000008   1EFF2FE1           BX       LR
    358            }
   \                     ??CHECKBOX_SetSkinFlexProps_0:
   \   0000000C   70402DE9           PUSH     {R4-R6,LR}
   \   00000010   ........           ADR      R2,_apProps
   \   00000014   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000018   7C50B0E8           LDM      R0!,{R2-R6,R12,LR}
   \   0000001C   7C50A1E8           STM      R1!,{R2-R6,R12,LR}
    359          }
   \   00000020   7080BDE8           POP      {R4-R6,PC}       ;; return
    360          
    361          /*********************************************************************
    362          *
    363          *       CHECKBOX_GetSkinFlexProps
    364          */

   \                                 In section .text, align 4, keep-with-next
    365          void CHECKBOX_GetSkinFlexProps(CHECKBOX_SKINFLEX_PROPS * pProps, int Index) {
    366            if (Index < GUI_COUNTOF(_apProps)) {
   \                     CHECKBOX_GetSkinFlexProps:
   \   00000000   020051E3           CMP      R1,#+2
   \   00000004   0000003A           BCC      ??CHECKBOX_GetSkinFlexProps_0
    367              *pProps = *_apProps[Index];
   \   00000008   1EFF2FE1           BX       LR
    368            }
   \                     ??CHECKBOX_GetSkinFlexProps_0:
   \   0000000C   70402DE9           PUSH     {R4-R6,LR}
   \   00000010   ........           ADR      R2,_apProps
   \   00000014   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   00000018   7C50B1E8           LDM      R1!,{R2-R6,R12,LR}
   \   0000001C   7C50A0E8           STM      R0!,{R2-R6,R12,LR}
    369          }
   \   00000020   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _aBitmap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   67666666           DC32     0x66666667
    370          
    371          #else
    372            void CHECKBOX_SkinFlex_C(void);
    373            void CHECKBOX_SkinFlex_C(void) {} /* avoid empty object files */
    374          #endif /* GUI_WINSUPPORT */
    375          
    376          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     CHECKBOX_DrawSkinFlex         48
     CHECKBOX_GetSkinFlexProps     16
     CHECKBOX_SetSkinFlexProps     16
     _DrawFocus                    40
     _GenCheck                     48


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     _PropsEnabled               28
     _PropsDisabled              28
     _apProps                     8
     _aBitmap                   160
     _GenCheck                  488
     _DrawFocus                 272
     CHECKBOX_DrawSkinFlex      736
     CHECKBOX_SetSkinFlexProps   36
     CHECKBOX_GetSkinFlexProps   36
     ??DataTable1                 4
     ??DataTable1_1               4

 
   160 bytes in section .bss
    56 bytes in section .data
 1 584 bytes in section .text
 
 1 584 bytes of CODE memory
   216 bytes of DATA memory

Errors: none
Warnings: none
