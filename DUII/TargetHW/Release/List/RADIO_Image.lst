###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:27 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\RADIO_Image.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\RADIO_Image.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\RADIO_Image.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\RADIO_Image.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\RADIO_Image.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : RADIO_Image.c
     19          Purpose     : Implementation of radio widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          #include "RADIO_Private.h"
     25          
     26          #if GUI_WINSUPPORT
     27          
     28          /*********************************************************************
     29          *
     30          *       Defines
     31          *
     32          **********************************************************************
     33          */
     34          
     35          /* Define colors */
     36          #ifndef RADIO_BKCOLOR0_DEFAULT
     37            #define RADIO_BKCOLOR0_DEFAULT 0xc0c0c0           /* Inactive color */
     38          #endif
     39          
     40          #ifndef RADIO_BKCOLOR1_DEFAULT
     41            #define RADIO_BKCOLOR1_DEFAULT GUI_WHITE          /* Active color */
     42          #endif
     43          
     44          /*********************************************************************
     45          *
     46          *       Static const data
     47          *
     48          **********************************************************************
     49          */
     50          
     51          /* Colors */

   \                                 In section .rodata, align 4, keep-with-next
     52          static const GUI_COLOR _aColorDisabled[] = {0xC0C0C0, 0x808080, 0x000000, RADIO_BKCOLOR0_DEFAULT};
   \                     _aColorDisabled:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   C0C0C0008080       DC32 12632256, 8421504, 0, 12632256
   \              800000000000
   \              C0C0C000    

   \                                 In section .rodata, align 4, keep-with-next
     53          static const GUI_COLOR _aColorEnabled[]  = {0xC0C0C0, 0x808080, 0x000000, RADIO_BKCOLOR1_DEFAULT};
   \                     _aColorEnabled:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   C0C0C0008080       DC32 12632256, 8421504, 0, 16777215
   \              800000000000
   \              FFFFFF00    

   \                                 In section .rodata, align 4, keep-with-next
     54          static const GUI_COLOR _ColorsCheck[]    = {0xFFFFFF, 0x000000};
   \                     _ColorsCheck:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   FFFFFF000000       DC32 16777215, 0
   \              0000        
     55          
     56          /* Palettes */

   \                                 In section .rodata, align 4, keep-with-next
     57          static const GUI_LOGPALETTE _PalRadioDisabled = {
   \                     _PalRadioDisabled:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   04000000           DC32 4
   \   00000004   01000000           DC8 1, 0, 0, 0
   \   00000008   ........           DC32 _aColorDisabled
     58            4,	/* number of entries */
     59            1, 	/* Transparency */
     60            _aColorDisabled
     61          };
     62          

   \                                 In section .rodata, align 4, keep-with-next
     63          static const GUI_LOGPALETTE _PalRadioEnabled = {
   \                     _PalRadioEnabled:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   04000000           DC32 4
   \   00000004   01000000           DC8 1, 0, 0, 0
   \   00000008   ........           DC32 _aColorEnabled
     64            4,	/* number of entries */
     65            1, 	/* Transparency */
     66            _aColorEnabled
     67          };
     68          

   \                                 In section .rodata, align 4, keep-with-next
     69          static const GUI_LOGPALETTE _PalCheck = {
   \                     _PalCheck:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   02000000           DC32 2
   \   00000004   01000000           DC8 1, 0, 0, 0
   \   00000008   ........           DC32 _ColorsCheck
     70            2,	/* number of entries */
     71            1, 	/* Transparency */
     72            &_ColorsCheck[0]
     73          };
     74          
     75          /* Pixel data */
     76          #if   WIDGET_USE_SCHEME_SMALL

   \                                 In section .rodata, align 4, keep-with-next
     77          static const unsigned char _acRadio[] = {
   \                     _acRadio:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   00550005AA50       DC8 0, 85, 0, 5, 170, 80, 26, 255, 172, 27
   \              1AFFAC1B    
   \   0000000A   FFCC6FFFF36F       DC8 255, 204, 111, 255, 243, 111, 255, 243, 111, 255
   \              FFF36FFF    
   \   00000014   F36FFFF31BFF       DC8 243, 111, 255, 243, 27, 255, 204, 16, 255, 12
   \              CC10FF0C    
   \   0000001E   0F00F000FF00       DC8 15, 0, 240, 0, 255, 0
     78            0x00, 0x55, 0x00,
     79            0x05, 0xAA, 0x50,
     80            0x1A, 0xFF, 0xAC,
     81            0x1B, 0xFF, 0xCC,
     82            0x6F, 0xFF, 0xF3,
     83            0x6F, 0xFF, 0xF3,
     84            0x6F, 0xFF, 0xF3,
     85            0x6F, 0xFF, 0xF3,
     86            0x1B, 0xFF, 0xCC,
     87            0x10, 0xFF, 0x0C,
     88            0x0F, 0x00, 0xF0,
     89            0x00, 0xFF, 0x00
     90          };
     91          

   \                                 In section .rodata, align 4, keep-with-next
     92          static const unsigned char _acCheck[] = {
   \                     _acCheck:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   60F0F060           DC8 96, 240, 240, 96
     93            _XX_____,
     94            XXXX____,
     95            XXXX____,
     96            _XX_____
     97          };
     98          #elif WIDGET_USE_SCHEME_MEDIUM
     99          static const unsigned char _acRadio[] = {
    100            0x00, 0x15, 0x54, 0x00,
    101            0x01, 0x6A, 0xA9, 0x40,
    102            0x06, 0xBF, 0xFE, 0x90,
    103            0x1B, 0xFF, 0xFF, 0xCC,
    104            0x1B, 0xFF, 0xFF, 0xCC,
    105            0x6F, 0xFF, 0xFF, 0xF3,
    106            0x6F, 0xFF, 0xFF, 0xF3,
    107            0x6F, 0xFF, 0xFF, 0xF3,
    108            0x6F, 0xFF, 0xFF, 0xF3,
    109            0x6F, 0xFF, 0xFF, 0xF3,
    110            0x6F, 0xFF, 0xFF, 0xF3,
    111            0x1B, 0xFF, 0xFF, 0xCC,
    112            0x1B, 0xFF, 0xFF, 0xCC,
    113            0x0C, 0x3F, 0xFC, 0x30,
    114            0x03, 0xC0, 0x03, 0xC0,
    115            0x00, 0x3F, 0xFC, 0x00,
    116          };
    117          
    118          static const unsigned char _acCheck[] = {
    119            _XXXX___,
    120            XXXXXX__,
    121            XXXXXX__,
    122            XXXXXX__,
    123            XXXXXX__,
    124            _XXXX___
    125          };
    126          #elif WIDGET_USE_SCHEME_LARGE
    127          static const unsigned char _acRadio[] = {
    128            0x00, 0x00, 0x15, 0x54, 0x00, 0x00,
    129            0x00, 0x01, 0x6A, 0xA9, 0x40, 0x00,
    130            0x00, 0x16, 0xBF, 0xFE, 0x94, 0x00,
    131            0x00, 0x6B, 0xFF, 0xFF, 0xE9, 0x00,
    132            0x01, 0xBF, 0xFF, 0xFF, 0xFE, 0xC0,
    133            0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x30,
    134            0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x30,
    135            0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC,
    136            0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC,
    137            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    138            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    139            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    140            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    141            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    142            0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    143            0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC,
    144            0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC,
    145            0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x30,
    146            0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x30,
    147            0x01, 0x3F, 0xFF, 0xFF, 0xFC, 0xC0,
    148            0x00, 0xC3, 0xFF, 0xFF, 0xC3, 0x00,
    149            0x00, 0x3C, 0x3F, 0xFC, 0x3C, 0x00,
    150            0x00, 0x03, 0xC0, 0x03, 0xC0, 0x00,
    151            0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00,
    152          };
    153          
    154          static const unsigned char _acCheck[] = {
    155            ___XXXX_, ________,
    156            __XXXXXX, ________,
    157            _XXXXXXX, X_______,
    158            XXXXXXXX, XX______,
    159            XXXXXXXX, XX______,
    160            XXXXXXXX, XX______,
    161            XXXXXXXX, XX______,
    162            _XXXXXXX, X_______,
    163            __XXXXXX, ________,
    164            ___XXXX_, ________,
    165          };
    166          #endif
    167          
    168          
    169          /*********************************************************************
    170          *
    171          *       Exported const data
    172          *
    173          **********************************************************************
    174          */
    175          /* Bitmaps */
    176          #if   WIDGET_USE_SCHEME_SMALL

   \                                 In section .rodata, align 4, keep-with-next
    177          const GUI_BITMAP RADIO__abmRadio[] = {
   \                     RADIO__abmRadio:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   0C000C000300       DC16 12, 12, 3, 2
   \              0200        
   \   00000008   ............       DC32 _acRadio, _PalRadioDisabled
   \              ....        
   \   00000010   00000000           DC8 0, 0, 0, 0
   \   00000014   0C000C000300       DC16 12, 12, 3, 2
   \              0200        
   \   0000001C   ............       DC32 _acRadio, _PalRadioEnabled
   \              ....        
   \   00000024   00000000           DC8 0, 0, 0, 0
    178            { 12, 12, 3, 2, _acRadio, &_PalRadioDisabled},
    179            { 12, 12, 3, 2, _acRadio, &_PalRadioEnabled}
    180          };
    181          

   \                                 In section .rodata, align 4, keep-with-next
    182          const GUI_BITMAP RADIO__bmCheck = {
   \                     RADIO__bmCheck:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   040004000100       DC16 4, 4, 1, 1
   \              0100        
   \   00000008   ............       DC32 _acCheck, _PalCheck
   \              ....        
   \   00000010   00000000           DC8 0, 0, 0, 0
    183            4, /* XSize */
    184            4, /* YSize */
    185            1, /* BytesPerLine */
    186            1, /* BitsPerPixel */
    187            _acCheck,   /* Pointer to picture data (indices) */
    188            &_PalCheck  /* Pointer to palette */
    189          };
    190          #elif WIDGET_USE_SCHEME_MEDIUM
    191          const GUI_BITMAP RADIO__abmRadio[] = {
    192            { 16, 16, 4, 2, _acRadio, &_PalRadioDisabled},
    193            { 16, 16, 4, 2, _acRadio, &_PalRadioEnabled}
    194          };
    195          
    196          const GUI_BITMAP RADIO__bmCheck = {
    197            6, /* XSize */
    198            6, /* YSize */
    199            1, /* BytesPerLine */
    200            1, /* BitsPerPixel */
    201            _acCheck,   /* Pointer to picture data (indices) */
    202            &_PalCheck  /* Pointer to palette */
    203          };
    204          #elif WIDGET_USE_SCHEME_LARGE
    205          const GUI_BITMAP RADIO__abmRadio[] = {
    206            { 24, 24, 6, 2, _acRadio, &_PalRadioDisabled},
    207            { 24, 24, 6, 2, _acRadio, &_PalRadioEnabled}
    208          };
    209          
    210          const GUI_BITMAP RADIO__bmCheck = {
    211            10, /* XSize */
    212            10, /* YSize */
    213            2,  /* BytesPerLine */
    214            1,  /* BitsPerPixel */
    215            _acCheck,   /* Pointer to picture data (indices) */
    216            &_PalCheck  /* Pointer to palette */
    217          };
    218          #endif
    219          
    220          #else                            /* Avoid problems with empty object modules */
    221            void RADIO_Image_C(void);
    222            void RADIO_Image_C(void) {}
    223          #endif
    224          
    225          /************************* end of file ******************************/


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     _aColorDisabled     16
     _aColorEnabled      16
     _ColorsCheck         8
     _PalRadioDisabled   12
     _PalRadioEnabled    12
     _PalCheck           12
     _acRadio            36
     _acCheck             4
     RADIO__abmRadio     40
     RADIO__bmCheck      20

 
 176 bytes in section .rodata
 
 176 bytes of CONST memory

Errors: none
Warnings: none
