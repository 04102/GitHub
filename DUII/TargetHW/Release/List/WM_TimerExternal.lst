###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_TimerExternal.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\WM_TimerExternal.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_TimerExternal.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_TimerExternal.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_TimerExternal.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_TimerExternal.c
     19          Purpose     : Implementetion of WM_CreateTimer, WM_DeleteTimer
     20                        for systems with external one shot timers.
     21                        (--> Philips, 2003)
     22          
     23                        This module requires 2 macros in order to work and
     24                        generate code:
     25                        GUI_X_CREATE_TIMER(Period, void (*cb)(int))
     26                        GUI_X_DELETE_TIMER(ID)
     27          
     28                        Note that the delete macro is optional, since
     29                        one-shot-timers are expected to delete themselves.
     30          ----------------------------------------------------------------------
     31          */
     32          
     33          #include <stddef.h>           /* needed for definition of NULL */
     34          #include "WM_Intern.h"
     35          
     36          
     37          /* Typical configuration: */
     38          
     39          #if 0
     40          int MyApp_CreateTimer(int Period, void (*cb)(int)) {
     41            int r = 0;
     42            /* Alloc a one-shot timer from the kernel & start it etc ... */
     43            return r;
     44          }
     45          #define GUI_X_CREATE_TIMER(Period, cb) MyApp_CreateTimer(Period, cb)
     46          #define GUI_X_DELETE_TIMER(ID)
     47          
     48          #endif
     49          
     50          
     51          #if GUI_WINSUPPORT && defined(GUI_X_CREATE_TIMER)   /* If 0, WM will not generate any code */
     52          
     53          
     54          /*********************************************************************
     55          *
     56          *       Required data structures
     57          *
     58          **********************************************************************
     59          */
     60          typedef struct TIMER_LINK {
     61            int      UserId;
     62            int      TimerId;
     63            WM_HWIN  hWin;
     64            GUI_HMEM hNext;
     65          } TIMER_LINK;
     66          
     67          /*********************************************************************
     68          *
     69          *       Static data
     70          *
     71          **********************************************************************
     72          */
     73          static GUI_HMEM _hFirst;
     74          
     75          /*********************************************************************
     76          *
     77          *       Static code
     78          *
     79          **********************************************************************
     80          */
     81          
     82          /*********************************************************************
     83          *
     84          *       _DeleteLinkItem
     85          *
     86          * Purpose:
     87          * Returns:
     88          *
     89          */
     90          static void _DeleteLinkItem(GUI_HMEM hLinkToDelete) {
     91            GUI_HMEM hLink;
     92            TIMER_LINK* pLink;
     93            TIMER_LINK* pLinkToDelete;
     94            if (hLinkToDelete) {
     95              pLinkToDelete = (TIMER_LINK*)GUI_ALLOC_h2p(hLinkToDelete);
     96              if (_hFirst == hLinkToDelete) {
     97                _hFirst = pLinkToDelete->hNext;
     98                GUI_ALLOC_Free(hLinkToDelete);
     99              } else {
    100                for (hLink = _hFirst; hLink; hLink = pLink->hNext) {
    101                  pLink = (TIMER_LINK*)GUI_ALLOC_h2p(hLink);
    102                  if (pLink->hNext == hLinkToDelete) {
    103                    pLink->hNext = pLinkToDelete->hNext;
    104                    GUI_ALLOC_Free(hLinkToDelete);
    105                    break;                         /* We found it ! */
    106                  }
    107                }
    108              }
    109            }
    110          }
    111          
    112          /*********************************************************************
    113          *
    114          *       _FindTimerByTimerId
    115          *
    116          * Purpose:
    117          *  Find the link item for this timer.
    118          * Returns:  pointer to the link if the TimerId is valid, else NULL
    119          *
    120          */
    121          static GUI_HMEM _FindTimerByTimerId(int TimerId) {
    122            GUI_HMEM hLink;
    123            TIMER_LINK* pLink;
    124            for (hLink = _hFirst; hLink; hLink = pLink->hNext) {
    125              pLink = (TIMER_LINK*)GUI_ALLOC_h2p(hLink);
    126              if (pLink->TimerId == TimerId) {
    127                break;                         /* We found it ! */
    128              }
    129            }
    130            return hLink;
    131          }
    132          
    133          /*********************************************************************
    134          *
    135          *       _FindTimerByUserId
    136          *
    137          * Purpose:
    138          *  Find the link item for this timer.
    139          *  Returns:  pointer to the link if the Window handle & UserId are valid, else NULL
    140          *
    141          */
    142          static GUI_HMEM _FindTimerByUserId(WM_HWIN hWin, int UserId) {
    143            GUI_HMEM hLink;
    144            TIMER_LINK* pLink;
    145            for (hLink = _hFirst; hLink; hLink = pLink->hNext) {
    146              pLink = (TIMER_LINK*)GUI_ALLOC_h2p(hLink);
    147              if ((pLink->hWin == hWin) && (pLink->UserId == UserId)) {
    148                break;                         /* We found it ! */
    149              }
    150            }
    151            return hLink;
    152          }
    153          
    154          /*********************************************************************
    155          *
    156          *       Public code
    157          *
    158          **********************************************************************
    159          */
    160          
    161          /*********************************************************************
    162          *
    163          *       _OnTimer
    164          *
    165          *   This routine is called when a timer is expired. Its function is to
    166          *   find out which window needs to receive a WM_TIMER message.
    167          */
    168          static void _OnTimer(int TimerId) {
    169            TIMER_LINK* pLink;
    170            GUI_HMEM hLink;
    171            WM_LOCK();
    172            hLink = _FindTimerByTimerId(TimerId);
    173            if (hLink) {
    174              WM_MESSAGE Msg;
    175              /* Send Message */
    176              pLink = GUI_ALLOC_h2p(hLink);
    177              Msg.MsgId   = WM_TIMER;
    178              Msg.Data.v  = pLink->UserId;
    179              Msg.hWinSrc = 0;
    180              WM__SendMessage(pLink->hWin, &Msg);
    181              /* Since these timers are one shot, we need to delete the link item. */
    182              _DeleteLinkItem(hLink);
    183            }
    184            WM_UNLOCK();
    185          }
    186          
    187          /*********************************************************************
    188          *
    189          *       WM_DeleteTimer
    190          *
    191          * Purpose:
    192          *   API function (optional).
    193          *   Allows the application to delete a timer. 
    194          */
    195          void WM_DeleteTimer    (WM_HWIN hWin, int UserId) {
    196            GUI_HMEM hLink;
    197            WM_LOCK();
    198            hLink = _FindTimerByUserId(hWin, UserId);
    199            if (hLink) {
    200              TIMER_LINK* pLink;
    201              pLink = GUI_ALLOC_h2p(hLink);
    202              GUI_X_DELETE_TIMER(pLink->TimerId);
    203              _DeleteLinkItem(hLink);
    204            }
    205            WM_UNLOCK();
    206          }
    207          
    208          
    209          /*********************************************************************
    210          *
    211          *       WM_CreateTimer
    212          *
    213          *  Returns:    0 if failed, else != 0
    214          *  Parameters:
    215          *                hWin        Window handle of the window to receive the WM_TIMER message
    216          *                UserId      User defined Id. If not needed, use 0.
    217          *                Period      Number of time units (ticks)
    218          *                Mode        0: one-shot
    219          *
    220          */
    221          int WM_CreateTimer               (WM_HWIN hWin, int UserId, int Period, int Mode) {
    222            int r = 0;
    223            int TimerId;
    224            GUI_HMEM hTimerLink;
    225            TIMER_LINK* pLink;
    226            WM_LOCK();
    227            TimerId = GUI_X_CREATE_TIMER(Period, _OnTimer);
    228            if (TimerId) {
    229              hTimerLink = GUI_ALLOC_AllocZero(sizeof(TIMER_LINK));
    230              if (hTimerLink) {
    231                pLink = (TIMER_LINK*) GUI_ALLOC_h2p(hTimerLink);
    232                /* Put new timer at beginning of the linked list */
    233                pLink->hNext = _hFirst;
    234                if (_hFirst) {
    235                  TIMER_LINK* pNext;
    236                  pNext = (TIMER_LINK*) GUI_ALLOC_h2p(_hFirst);
    237                }
    238                _hFirst = hTimerLink;
    239                /* Fill in link data */
    240                pLink->hWin    = hWin;
    241                pLink->TimerId = TimerId;
    242                pLink->UserId  = UserId;
    243                r = 1;            /* All right, we have successfully created a new timer */
    244              }
    245            }
    246            /* Cleanup in case of problem */
    247            if (r == 0) {
    248              if (TimerId) {
    249                GUI_X_DELETE_TIMER(TimerId);
    250              }
    251            }
    252            WM_UNLOCK();
    253            return r;
    254          }
    255          
    256          
    257          
    258          
    259          
    260          #else
    261            void WM_TimerExternal_c(void);

   \                                 In section .text, align 4, keep-with-next
    262            void WM_TimerExternal_c(void) {} /* avoid empty object files */
   \                     WM_TimerExternal_c:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    263          #endif   /* GUI_WINSUPPORT */
    264          
    265          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     WM_TimerExternal_c      0


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     WM_TimerExternal_c    4

 
 4 bytes in section .text
 
 4 bytes of CODE memory

Errors: none
Warnings: none
