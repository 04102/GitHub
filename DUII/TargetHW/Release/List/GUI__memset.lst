###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:47 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__memset.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__memset.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI__memset.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI__memset.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__memset.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__memset.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI__memset
     34          *
     35          * Purpose:
     36          *  Replacement for the memset function. The advantage is high speed
     37          *  on all systems (sometime up to 10 times as fast as the one
     38          *  in the library)
     39          *  Main idea is to write int-wise.
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void GUI__memset(U8* p, U8 Fill, int NumBytes) {
   \                     GUI__memset:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   010000EA           B        ??GUI__memset_0
     42            int NumInts;
     43            /* Write bytes until we are done or have reached an int boundary */
     44            while (NumBytes && ((sizeof(int) - 1) & (U32)p)) {
     45              *p++ = Fill;
   \                     ??GUI__memset_1:
   \   00000008   0110C0E4           STRB     R1,[R0], #+1
     46              NumBytes--;
   \   0000000C   012042E2           SUB      R2,R2,#+1
     47            }
   \                     ??GUI__memset_0:
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   03001013           TSTNE    R0,#0x3
   \   00000018   FAFFFF1A           BNE      ??GUI__memset_1
     48            /* Write Ints */
     49            NumInts = (unsigned)NumBytes / sizeof(int);
   \   0000001C   2231B0E1           LSRS     R3,R2,#+2
     50            if (NumInts) {
   \   00000020   2100000A           BEQ      ??GUI__memset_2
     51              int FillInt;
     52              int *pInt;
     53              NumBytes &= (sizeof(int) - 1);
     54              if (sizeof(int) == 2) {        /* May some compilers generate a warning at this line: Condition is alwaws true/false */
     55                FillInt = Fill * 0x101;      /* May some compilers generate a warning at this line: Unreachable code */
     56              } else if (sizeof(int) == 4) { /* May some compilers generate a warning at this line: Condition is alwaws true/false */
     57                FillInt = Fill * 0x1010101;  /* May some compilers generate a warning at this line: Unreachable code */
   \   00000024   98E09FE5           LDR      LR,??GUI__memset_3  ;; 0x1010101
   \   00000028   01C0A0E1           MOV      R12,R1
   \   0000002C   9E0C0CE0           MUL      R12,LR,R12
   \   00000030   032002E2           AND      R2,R2,#0x3
     58              }
     59              pInt = (int*)p;
   \   00000034   040053E3           CMP      R3,#+4
   \   00000038   180000BA           BLT      ??GUI__memset_4
   \   0000003C   C3E0A0E1           ASR      LR,R3,#+1
   \   00000040   2EEF83E0           ADD      LR,R3,LR, LSR #+30
   \   00000044   4EE1A0E1           ASR      LR,LR,#+2
   \   00000048   01001EE3           TST      LR,#0x1
   \   0000004C   0400000A           BEQ      ??GUI__memset_5
     60              /* Fill large amount of data at a time */
     61              while (NumInts >= 4) { 
     62                *pInt++ = FillInt;
   \   00000050   04C080E4           STR      R12,[R0], #+4
     63                *pInt++ = FillInt;
   \   00000054   04C080E4           STR      R12,[R0], #+4
     64                *pInt++ = FillInt;
   \   00000058   04C080E4           STR      R12,[R0], #+4
     65                *pInt++ = FillInt;
   \   0000005C   04C080E4           STR      R12,[R0], #+4
     66                NumInts -= 4;
   \   00000060   043043E2           SUB      R3,R3,#+4
   \                     ??GUI__memset_5:
   \   00000064   AEE0B0E1           LSRS     LR,LR,#+1
   \   00000068   0A00000A           BEQ      ??GUI__memset_6
   \                     ??GUI__memset_7:
   \   0000006C   04C080E4           STR      R12,[R0], #+4
   \   00000070   04C080E4           STR      R12,[R0], #+4
   \   00000074   04C080E4           STR      R12,[R0], #+4
   \   00000078   04C080E4           STR      R12,[R0], #+4
   \   0000007C   04C080E4           STR      R12,[R0], #+4
   \   00000080   04C080E4           STR      R12,[R0], #+4
   \   00000084   04C080E4           STR      R12,[R0], #+4
   \   00000088   04C080E4           STR      R12,[R0], #+4
   \   0000008C   083043E2           SUB      R3,R3,#+8
   \   00000090   01E05EE2           SUBS     LR,LR,#+1
   \   00000094   F4FFFF1A           BNE      ??GUI__memset_7
     67              }
     68              /* Fill one int at a time */
     69              while (NumInts) {
   \                     ??GUI__memset_6:
   \   00000098   000053E3           CMP      R3,#+0
   \   0000009C   0200000A           BEQ      ??GUI__memset_2
     70                *pInt++ = FillInt;
   \                     ??GUI__memset_4:
   \   000000A0   04C080E4           STR      R12,[R0], #+4
     71                NumInts--;
   \   000000A4   013053E2           SUBS     R3,R3,#+1
   \   000000A8   FCFFFF1A           BNE      ??GUI__memset_4
     72              }
     73              p = (U8*)pInt;
     74            }
     75            /* Fill the remainder byte wise */
     76            while (NumBytes) {
   \                     ??GUI__memset_2:
   \   000000AC   000052E3           CMP      R2,#+0
   \   000000B0   0200000A           BEQ      ??GUI__memset_8
     77              *p++ = Fill;
   \                     ??GUI__memset_9:
   \   000000B4   0110C0E4           STRB     R1,[R0], #+1
     78              NumBytes--;
   \   000000B8   012052E2           SUBS     R2,R2,#+1
   \   000000BC   FCFFFF1A           BNE      ??GUI__memset_9
     79            }
     80          }
   \                     ??GUI__memset_8:
   \   000000C0   0080BDE8           POP      {PC}             ;; return
   \                     ??GUI__memset_3:
   \   000000C4   01010101           DC32     0x1010101
     81          
     82          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function    .cstack
     --------    -------
     GUI__memset      4


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI__memset     200

 
 200 bytes in section .text
 
 200 bytes of CODE memory

Errors: none
Warnings: none
