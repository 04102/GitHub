###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:13 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_GetNumFiles.c                     #
#    Command line =  C:\DUII\TargetHW\FS\FS_GetNumFiles.c -D DEBUG=1 -D       #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_GetNumFiles.lst         #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_GetNumFiles.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_GetNumFiles.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_GetNumFiles.c
     19          Purpose     : Implementation of FS_GetNumFiles
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include <stdio.h>
     31          
     32          #include "FS_Int.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code, internal
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       FS__GetNumFiles
     44          *
     45          *  Function description:
     46          *    API function. Returns the size of a file
     47          *
     48          *  Parameters:
     49          *    pFile       - Pointer to a FS_FILE data structure.
     50          *                  The file must have been opened with read or write access.
     51          *
     52          *  Return value:
     53          *    0xFFFFFFFF     - Indicates failure
     54          *    0 - 0xFFFFFFFE - File size of the given file
     55          *
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          U32 FS__GetNumFiles(FS_DIR *pDir) {
   \                     FS__GetNumFiles:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040B0E1           MOVS     R4,R0
     58            U32 r;
     59          
     60            if (pDir) {
   \   0000000C   1700000A           BEQ      ??FS__GetNumFiles_0
     61              U16         EntryIndexOld;
     62              FS_DIR_POS  SectorPosOld;
     63              /* Save the old position in pDir structure */
     64              EntryIndexOld = pDir->Dir.DirEntryIndex;
   \   00000010   B051D4E1           LDRH     R5,[R4, #+16]
     65              SectorPosOld = pDir->Dir.DirPos;
   \   00000014   0E10B4E8           LDM      R4!,{R1-R3,R12}
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000020   104044E2           SUB      R4,R4,#+16
     66              FS__RewindDir(pDir);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       FS__RewindDir
     67              r = 0;
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   050000EA           B        ??FS__GetNumFiles_1
     68              do {
     69                U8         Attr;
     70                if (FS__ReadDir(pDir) == (FS_DIRENT *)NULL) {
     71                  break; /* No more files */
     72                }
     73                FS__DirEnt2Attr(&pDir->DirEntry, &Attr);
   \                     ??FS__GetNumFiles_2:
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   200084E2           ADD      R0,R4,#+32
   \   0000003C   ........           BL       FS__DirEnt2Attr
     74                if (!(Attr & FS_ATTR_DIRECTORY)) { /* Is directory entry the volume ID  or a directory, ignore them */
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   100010E3           TST      R0,#0x10
     75                  r++;
   \   00000048   01608602           ADDEQ    R6,R6,#+1
     76                }
   \                     ??FS__GetNumFiles_1:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       FS__ReadDir
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F5FFFF1A           BNE      ??FS__GetNumFiles_2
     77              } while (1);
     78              /* Restore the old position in pDir structure */
     79              pDir->Dir.DirEntryIndex = EntryIndexOld;
   \   0000005C   B051C4E1           STRH     R5,[R4, #+16]
     80              pDir->Dir.DirPos        = SectorPosOld;
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   0E10B0E8           LDM      R0!,{R1-R3,R12}
   \   00000068   0E10A4E8           STM      R4!,{R1-R3,R12}
   \   0000006C   000000EA           B        ??FS__GetNumFiles_3
     81            } else {
     82              r = 0xffffffffUL;
   \                     ??FS__GetNumFiles_0:
   \   00000070   0060E0E3           MVN      R6,#+0
     83            }
     84            return r;
   \                     ??FS__GetNumFiles_3:
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   18D08DE2           ADD      SP,SP,#+24
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
     85          }
     86          
     87          /*********************************************************************
     88          *
     89          *       Public code
     90          *
     91          **********************************************************************
     92          */
     93          
     94          /*********************************************************************
     95          *
     96          *       FS_GetNumFiles
     97          *
     98          *  Function description:
     99          *    API function. Returns the size of a file
    100          *
    101          *  Parameters:
    102          *    pFile       - Pointer to a FS_FILE data structure.
    103          *                  The file must have been opened with read or write access.
    104          *
    105          *  Return value:
    106          *    0xFFFFFFFF     - Indicates failure
    107          *    0 - 0xFFFFFFFE - File size of the given file
    108          *
    109          */

   \                                 In section .text, align 4, keep-with-next
    110          U32 FS_GetNumFiles(FS_DIR *pDir) {
   \                     FS_GetNumFiles:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   18D04DE2           SUB      SP,SP,#+24
    111            U32 r;
    112          
    113            FS_LOCK();
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       FS_OS_Lock
    114            r = FS__GetNumFiles(pDir);
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0060E003           MVNEQ    R6,#+0
   \   0000001C   1600000A           BEQ      ??FS_GetNumFiles_0
   \   00000020   B051D4E1           LDRH     R5,[R4, #+16]
   \   00000024   0E10B4E8           LDM      R4!,{R1-R3,R12}
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000030   104044E2           SUB      R4,R4,#+16
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       FS__RewindDir
   \   0000003C   0060A0E3           MOV      R6,#+0
   \   00000040   050000EA           B        ??FS_GetNumFiles_1
   \                     ??FS_GetNumFiles_2:
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   200084E2           ADD      R0,R4,#+32
   \   0000004C   ........           BL       FS__DirEnt2Attr
   \   00000050   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000054   100010E3           TST      R0,#0x10
   \   00000058   01608602           ADDEQ    R6,R6,#+1
   \                     ??FS_GetNumFiles_1:
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       FS__ReadDir
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F5FFFF1A           BNE      ??FS_GetNumFiles_2
   \   0000006C   B051C4E1           STRH     R5,[R4, #+16]
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   0E10B0E8           LDM      R0!,{R1-R3,R12}
   \   00000078   0E10A4E8           STM      R4!,{R1-R3,R12}
    115            FS_UNLOCK();
   \                     ??FS_GetNumFiles_0:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   ........           BL       FS_OS_Unlock
    116            return r;
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   18D08DE2           ADD      SP,SP,#+24
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    117          }
    118          
    119          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     FS_GetNumFiles      40
     FS__GetNumFiles     40


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     FS__GetNumFiles  128
     FS_GetNumFiles   144

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none
