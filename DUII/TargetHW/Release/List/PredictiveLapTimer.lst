###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     16/Dec/2015  14:17:48 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\PredictiveLapTimer.cpp                      #
#    Command line =  C:\DUII\DUII\PredictiveLapTimer.cpp -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --eec++ --no_static_destruction                          #
#    List file    =  C:\DUII\TargetHW\Release\List\PredictiveLapTimer.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\PredictiveLapTimer.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\PredictiveLapTimer.cpp
      1          #include "PredictiveLapTimer.hpp"
      2          #include "GeneralConfig.h"
      3          #include <string.h>
      4          

   \                                 In section .text, align 4, keep-with-next
      5          PredictiveLapTimer::PredictiveLapTimer(int x, int y, int xsize, int ysize, float fMax, float fMin, WM_HWIN _hParent)
      6          {
   \                     _ZN18PredictiveLapTimerC1Eiiiiffl:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3C009DE5           LDR      R0,[SP, #+60]
   \   00000014   30809DE5           LDR      R8,[SP, #+48]
      7          	if ((_hDlg = WM_CreateWindowAsChild(x, y, xsize, ysize, _hParent, 0, NULL, 0)) <= 0)
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   0C108DE5           STR      R1,[SP, #+12]
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   34909DE5           LDR      R9,[SP, #+52]
   \   00000038   38A09DE5           LDR      R10,[SP, #+56]
   \   0000003C   0830A0E1           MOV      R3,R8
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   0610A0E1           MOV      R1,R6
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           BL       WM_CreateWindowAsChild
   \   00000050   280084E5           STR      R0,[R4, #+40]
   \   00000054   010050E3           CMP      R0,#+1
   \   00000058   000000AA           BGE      ??PredictiveLapTimer_0
      8          		SystemError();
   \   0000005C   ........           BL       SystemError
      9          
     10          	xLoc = x;
   \                     ??PredictiveLapTimer_0:
   \   00000060   005084E5           STR      R5,[R4, #+0]
     11          	yLoc = y;
   \   00000064   046084E5           STR      R6,[R4, #+4]
     12          	xSize = xsize;
   \   00000068   087084E5           STR      R7,[R4, #+8]
     13          	ySize = ysize;
   \   0000006C   0C8084E5           STR      R8,[R4, #+12]
     14          
     15          	Max = fMax;
   \   00000070   209084E5           STR      R9,[R4, #+32]
     16          	Min = fMin;
   \   00000074   24A084E5           STR      R10,[R4, #+36]
     17          
     18          	mMemSpace = 0;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   2C0084E5           STR      R0,[R4, #+44]
     19          
     20          	mem = GUI_MEMDEV_Create(xLoc, yLoc, xSize, ySize);
   \   00000080   0C3094E5           LDR      R3,[R4, #+12]
   \   00000084   082094E5           LDR      R2,[R4, #+8]
   \   00000088   041094E5           LDR      R1,[R4, #+4]
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   ........           BL       GUI_MEMDEV_Create
   \   00000094   300084E5           STR      R0,[R4, #+48]
     21          	
     22          	dValuePerPixel = (float)(xSize) / (Max - Min);
   \   00000098   080094E5           LDR      R0,[R4, #+8]
   \   0000009C   ........           BL       __aeabi_i2f
   \   000000A0   0050A0E1           MOV      R5,R0
   \   000000A4   200094E5           LDR      R0,[R4, #+32]
   \   000000A8   241094E5           LDR      R1,[R4, #+36]
   \   000000AC   ........           BL       __aeabi_fsub
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   ........           BL       __aeabi_fdiv
   \   000000BC   180084E5           STR      R0,[R4, #+24]
     23          
     24          	CreateBackground();
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       _ZN18PredictiveLapTimer16CreateBackgroundEv
     25          }
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   10D08DE2           ADD      SP,SP,#+16
   \   000000D0   F087BDE8           POP      {R4-R10,PC}      ;; return
     26          

   \                                 In section .text, align 4, keep-with-next
     27          PredictiveLapTimer::~PredictiveLapTimer()
     28          {
   \                     _ZN18PredictiveLapTimerD1Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     29          	GUI_MEMDEV_Delete(mem);
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
     30          	GUI_MEMDEV_Delete(mMemSpace);
   \   00000010   2C0094E5           LDR      R0,[R4, #+44]
   \   00000014   ........           BL       GUI_MEMDEV_Delete
     31          }
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     32          

   \                                 In section .text, align 4, keep-with-next
     33          void PredictiveLapTimer::CreateBackground()
     34          {
   \                     _ZN18PredictiveLapTimer16CreateBackgroundEv:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     35          	int x1, y1, x2, y2;
     36          	int i, iTemp;
     37          
     38          	if(mMemSpace)
   \   00000008   2C0094E5           LDR      R0,[R4, #+44]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??CreateBackground_0
     39          		GUI_MEMDEV_Delete(mMemSpace);
   \   00000014   ........           BL       GUI_MEMDEV_Delete
     40          
     41          	mMemSpace = GUI_MEMDEV_Create(xLoc, yLoc, xSize, ySize);
   \                     ??CreateBackground_0:
   \   00000018   0C3094E5           LDR      R3,[R4, #+12]
   \   0000001C   082094E5           LDR      R2,[R4, #+8]
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   ........           BL       GUI_MEMDEV_Create
   \   0000002C   2C0084E5           STR      R0,[R4, #+44]
     42          	GUI_MEMDEV_Select(mMemSpace);
   \   00000030   ........           BL       GUI_MEMDEV_Select
     43          
     44          	GUI_SetTextMode(GUI_TEXTMODE_TRANS);
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   ........           BL       GUI_SetTextMode
     45          
     46          	GUI_SetPenSize(LINE_WIDTH);
   \   0000003C   0300A0E3           MOV      R0,#+3
   \   00000040   ........           BL       GUI_SetPenSize
     47          	GUI_SetColor(GUI_WHITE);
   \   00000044   FF04E0E3           MVN      R0,#-16777216
   \   00000048   ........           BL       GUI_SetColor
     48          
     49          	iZeroLoc = xLoc + xSize / 2;
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   001094E5           LDR      R1,[R4, #+0]
   \   00000054   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000058   C00081E0           ADD      R0,R1,R0, ASR #+1
   \   0000005C   100084E5           STR      R0,[R4, #+16]
     50          
     51          	//Draw the rectangle
     52          	x1 = xLoc;
   \   00000060   007094E5           LDR      R7,[R4, #+0]
     53          	y1 = yLoc;
     54          	x2 = xLoc + xSize - LINE_WIDTH;
   \   00000064   080094E5           LDR      R0,[R4, #+8]
   \   00000068   046094E5           LDR      R6,[R4, #+4]
   \   0000006C   070080E0           ADD      R0,R0,R7
   \   00000070   038040E2           SUB      R8,R0,#+3
     55          	y2 = yLoc + ySize - LINE_WIDTH;
   \   00000074   0C0094E5           LDR      R0,[R4, #+12]
     56          
     57          	GUI_DrawLine(x1, y1, x2, y1);
   \   00000078   0630A0E1           MOV      R3,R6
   \   0000007C   060080E0           ADD      R0,R0,R6
   \   00000080   035040E2           SUB      R5,R0,#+3
   \   00000084   0820A0E1           MOV      R2,R8
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   ........           BL       GUI_DrawLine
     58          	GUI_DrawLine(x2, y1, x2, y2);
   \   00000094   0530A0E1           MOV      R3,R5
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   0800A0E1           MOV      R0,R8
   \   000000A4   ........           BL       GUI_DrawLine
     59          	GUI_DrawLine(x2, y2, x1, y2);
   \   000000A8   0530A0E1           MOV      R3,R5
   \   000000AC   0720A0E1           MOV      R2,R7
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0800A0E1           MOV      R0,R8
   \   000000B8   ........           BL       GUI_DrawLine
     60          	GUI_DrawLine(x1, y2, x1, y1);
   \   000000BC   0630A0E1           MOV      R3,R6
   \   000000C0   0720A0E1           MOV      R2,R7
   \   000000C4   0510A0E1           MOV      R1,R5
   \   000000C8   0700A0E1           MOV      R0,R7
   \   000000CC   ........           BL       GUI_DrawLine
     61          
     62          	// draw the divider lines
     63          	iTemp = xSize / 4;
   \   000000D0   080094E5           LDR      R0,[R4, #+8]
     64          
     65          	//GUI_SetPenSize(3);
     66          	for(i = 1; i < 4; i++)
     67          	{
     68          		x1 = xLoc + i * iTemp;
     69          
     70          //#define DARK_TICS
     71          #ifdef DARK_TICS
     72          		if (i & 0x01)		// odd lines gray
     73          			GUI_SetColor(GUI_GRAY);
     74          		else				// even lines white
     75          			GUI_SetColor(GUI_WHITE);
     76          #endif
     77          		GUI_DrawLine(x1, y1, x1, y2);
   \   000000D4   0530A0E1           MOV      R3,R5
   \   000000D8   C010A0E1           ASR      R1,R0,#+1
   \   000000DC   210F80E0           ADD      R0,R0,R1, LSR #+30
   \   000000E0   4071A0E1           ASR      R7,R0,#+2
   \   000000E4   000094E5           LDR      R0,[R4, #+0]
   \   000000E8   0610A0E1           MOV      R1,R6
   \   000000EC   002087E0           ADD      R2,R7,R0
   \   000000F0   0200A0E1           MOV      R0,R2
   \   000000F4   ........           BL       GUI_DrawLine
   \   000000F8   000094E5           LDR      R0,[R4, #+0]
   \   000000FC   0530A0E1           MOV      R3,R5
   \   00000100   870080E0           ADD      R0,R0,R7, LSL #+1
   \   00000104   0020A0E1           MOV      R2,R0
   \   00000108   0610A0E1           MOV      R1,R6
   \   0000010C   ........           BL       GUI_DrawLine
   \   00000110   000094E5           LDR      R0,[R4, #+0]
   \   00000114   871087E0           ADD      R1,R7,R7, LSL #+1
   \   00000118   000081E0           ADD      R0,R1,R0
   \   0000011C   0530A0E1           MOV      R3,R5
   \   00000120   0020A0E1           MOV      R2,R0
   \   00000124   0610A0E1           MOV      R1,R6
   \   00000128   ........           BL       GUI_DrawLine
     78          	}
     79          
     80          #ifdef DARK_TICS
     81          	GUI_SetColor(GUI_WHITE);
     82          #endif
     83          	GUI_SelectLCD();
   \   0000012C   F041BDE8           POP      {R4-R8,LR}
   \   00000130   ........           B        GUI_SelectLCD    ;; tailcall
     84          }
     85          
     86          #define PREDICTIVE_TEXT_POS_OFFSET	(8)
     87          #define PREDICTIVE_TEXT_NEG_OFFSET	(-72)
     88          

   \                                 In section .text, align 4, keep-with-next
     89          void PredictiveLapTimer::DrawControl()
     90          {
   \                     _ZN18PredictiveLapTimer11DrawControlEv:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     91          	int x1, y1, x2, y2, iTemp;
     92          	char str[10];
     93          	
     94          	if (pAltText)
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3800000A           BEQ      ??DrawControl_0
     95          	{
     96          		GUI_RECT rect;
     97          
     98          		//Draw the rectangle
     99          		GUI_SetPenSize(LINE_WIDTH - 1);
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   ........           BL       GUI_SetPenSize
    100          		GUI_SetColor(GUI_WHITE);
   \   00000020   FF04E0E3           MVN      R0,#-16777216
   \   00000024   ........           BL       GUI_SetColor
    101          		x1 = xLoc;
   \   00000028   007094E5           LDR      R7,[R4, #+0]
    102          		y1 = yLoc;
    103          		x2 = xLoc + xSize - LINE_WIDTH;
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   046094E5           LDR      R6,[R4, #+4]
   \   00000034   070080E0           ADD      R0,R0,R7
   \   00000038   035040E2           SUB      R5,R0,#+3
    104          		y2 = yLoc + ySize - LINE_WIDTH;
   \   0000003C   0C0094E5           LDR      R0,[R4, #+12]
    105          
    106          		GUI_DrawLine(x1, y1, x2, y1);
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   060080E0           ADD      R0,R0,R6
   \   00000048   038040E2           SUB      R8,R0,#+3
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   ........           BL       GUI_DrawLine
    107          		GUI_DrawLine(x2, y1, x2, y2);
   \   0000005C   0830A0E1           MOV      R3,R8
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       GUI_DrawLine
    108          		GUI_DrawLine(x2, y2, x1, y2);
   \   00000070   0830A0E1           MOV      R3,R8
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   0810A0E1           MOV      R1,R8
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           BL       GUI_DrawLine
    109          		GUI_DrawLine(x1, y2, x1, y1);
   \   00000084   0630A0E1           MOV      R3,R6
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0810A0E1           MOV      R1,R8
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   ........           BL       GUI_DrawLine
    110          
    111          		// Draw the text (track name)
    112          		GetRect(&rect);
   \   00000098   000094E5           LDR      R0,[R4, #+0]
   \   0000009C   B000CDE1           STRH     R0,[SP, #+0]
   \   000000A0   041094E5           LDR      R1,[R4, #+4]
   \   000000A4   B210CDE1           STRH     R1,[SP, #+2]
   \   000000A8   082094E5           LDR      R2,[R4, #+8]
   \   000000AC   000082E0           ADD      R0,R2,R0
   \   000000B0   B400CDE1           STRH     R0,[SP, #+4]
   \   000000B4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000B8   010080E0           ADD      R0,R0,R1
   \   000000BC   B600CDE1           STRH     R0,[SP, #+6]
    113          
    114          		if ((strlen(pAltText) > 15) && (xSize < 300))
   \   000000C0   1C0094E5           LDR      R0,[R4, #+28]
   \   000000C4   ........           BL       strlen
   \   000000C8   100050E3           CMP      R0,#+16
   \   000000CC   0300003A           BCC      ??DrawControl_1
   \   000000D0   080094E5           LDR      R0,[R4, #+8]
   \   000000D4   4B0F50E3           CMP      R0,#+300
    115          			GUI_SetFont(&GUI_Font20_ASCII);
   \   000000D8   ........           LDRLT    R0,??DataTable3
   \   000000DC   000000BA           BLT      ??DrawControl_2
    116          		else GUI_SetFont(LAP_TIMER_FONT);
   \                     ??DrawControl_1:
   \   000000E0   ........           LDR      R0,??DataTable3_1
   \                     ??DrawControl_2:
   \   000000E4   ........           BL       GUI_SetFont
    117          
    118          		GUI_DispStringInRect(pAltText, &rect, GUI_TA_CENTER | GUI_TA_VCENTER);
   \   000000E8   0E20A0E3           MOV      R2,#+14
   \   000000EC   0D10A0E1           MOV      R1,SP
   \   000000F0   1C0094E5           LDR      R0,[R4, #+28]
   \   000000F4   ........           BL       GUI_DispStringInRect
   \   000000F8   5B0000EA           B        ??DrawControl_3
    119          	}
    120          	else
    121          	{
    122          		GUI_ClearRect(xLoc, yLoc, xLoc + xSize, yLoc + ySize);
   \                     ??DrawControl_0:
   \   000000FC   041094E5           LDR      R1,[R4, #+4]
   \   00000100   0C2094E5           LDR      R2,[R4, #+12]
   \   00000104   000094E5           LDR      R0,[R4, #+0]
   \   00000108   013082E0           ADD      R3,R2,R1
   \   0000010C   082094E5           LDR      R2,[R4, #+8]
   \   00000110   002082E0           ADD      R2,R2,R0
   \   00000114   ........           BL       GUI_ClearRect
    123          
    124          		if(Value >= 0)
   \   00000118   147094E5           LDR      R7,[R4, #+20]
   \   0000011C   106094E5           LDR      R6,[R4, #+16]
   \   00000120   180094E5           LDR      R0,[R4, #+24]
   \   00000124   0710A0E1           MOV      R1,R7
   \   00000128   ........           BL       __aeabi_fmul
   \   0000012C   ........           BL       __aeabi_f2iz
   \   00000130   005046E0           SUB      R5,R6,R0
   \   00000134   0700A0E1           MOV      R0,R7
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   ........           BL       __aeabi_cfrcmple
   \   00000140   002094E5           LDR      R2,[R4, #+0]
   \   00000144   0C00008A           BHI      ??DrawControl_4
    125          		{
    126          			// draw the red bar
    127          			x1 = xLoc;
    128          			if ((x2 = iZeroLoc - (int)(Value * dValuePerPixel)) < xLoc)
    129          				x2 = xLoc;
    130          			y1 = yLoc + 1 + LINE_WIDTH;
    131          			y2 = yLoc + ySize - 1;
    132          			GUI_DrawGradientV(x2, y1, iZeroLoc, y2, GUI_RED, GUI_BLACK);
   \   00000148   040094E5           LDR      R0,[R4, #+4]
   \   0000014C   04108DE5           STR      R1,[SP, #+4]
   \   00000150   FF10A0E3           MOV      R1,#+255
   \   00000154   00108DE5           STR      R1,[SP, #+0]
   \   00000158   0C1094E5           LDR      R1,[R4, #+12]
   \   0000015C   020055E1           CMP      R5,R2
   \   00000160   001081E0           ADD      R1,R1,R0
   \   00000164   013041E2           SUB      R3,R1,#+1
   \   00000168   0250A0B1           MOVLT    R5,R2
   \   0000016C   041080E2           ADD      R1,R0,#+4
   \   00000170   0620A0E1           MOV      R2,R6
   \   00000174   0500A0E1           MOV      R0,R5
   \   00000178   0E0000EA           B        ??DrawControl_5
    133          		}
    134          		else
    135          		{
    136          			// draw the green bar
    137          			if ((x1 = iZeroLoc - (int)(Value * dValuePerPixel)) > (xLoc + xSize - LINE_WIDTH))
   \                     ??DrawControl_4:
   \   0000017C   080094E5           LDR      R0,[R4, #+8]
   \   00000180   020080E0           ADD      R0,R0,R2
   \   00000184   030040E2           SUB      R0,R0,#+3
   \   00000188   050050E1           CMP      R0,R5
    138          				x1 = xLoc + xSize - LINE_WIDTH;
   \   0000018C   0050A0B1           MOVLT    R5,R0
    139          			x2 = xLoc + xSize;
    140          			y1 = yLoc + 1 + LINE_WIDTH;
    141          			y2 = yLoc + ySize - 1;
    142          			GUI_DrawGradientV(iZeroLoc, y1, x1, y2, GUI_GREEN, GUI_BLACK);
   \   00000190   040094E5           LDR      R0,[R4, #+4]
   \   00000194   04108DE5           STR      R1,[SP, #+4]
   \   00000198   FF1CA0E3           MOV      R1,#+65280
   \   0000019C   00108DE5           STR      R1,[SP, #+0]
   \   000001A0   0C1094E5           LDR      R1,[R4, #+12]
   \   000001A4   0520A0E1           MOV      R2,R5
   \   000001A8   001081E0           ADD      R1,R1,R0
   \   000001AC   013041E2           SUB      R3,R1,#+1
   \   000001B0   041080E2           ADD      R1,R0,#+4
   \   000001B4   0600A0E1           MOV      R0,R6
   \                     ??DrawControl_5:
   \   000001B8   ........           BL       GUI_DrawGradientV
    143          		}
    144          
    145          		GUI_MEMDEV_Write(mMemSpace);			// Draw the background grid and lines
   \   000001BC   2C0094E5           LDR      R0,[R4, #+44]
   \   000001C0   ........           BL       GUI_MEMDEV_Write
    146          
    147          		GUI_SetFont(LAP_TIMER_FONT);
   \   000001C4   ........           LDR      R0,??DataTable3_1
   \   000001C8   ........           BL       GUI_SetFont
    148          		if (Value >= 10.0 || Value <= -10.0)
   \   000001CC   4014A0E3           MOV      R1,#+1073741824
   \   000001D0   140094E5           LDR      R0,[R4, #+20]
   \   000001D4   481781E3           ORR      R1,R1,#0x1200000
   \   000001D8   ........           BL       __aeabi_cfrcmple
   \   000001DC   0300009A           BLS      ??DrawControl_6
   \   000001E0   C015E0E3           MVN      R1,#+805306368
   \   000001E4   EE16C1E3           BIC      R1,R1,#0xEE00000
   \   000001E8   ........           BL       __aeabi_cfcmple
   \   000001EC   0400002A           BCS      ??DrawControl_7
    149          			sprintf(str, "%+.1f", Value);
   \                     ??DrawControl_6:
   \   000001F0   ........           BL       __aeabi_f2d
   \   000001F4   0130A0E1           MOV      R3,R1
   \   000001F8   0020A0E1           MOV      R2,R0
   \   000001FC   ........           ADR      R1,`?<Constant "%+.1f">`
   \   00000200   030000EA           B        ??DrawControl_8
    150          		else
    151          			sprintf(str, "%+.2f", Value);
   \                     ??DrawControl_7:
   \   00000204   ........           BL       __aeabi_f2d
   \   00000208   0130A0E1           MOV      R3,R1
   \   0000020C   0020A0E1           MOV      R2,R0
   \   00000210   ........           ADR      R1,`?<Constant "%+.2f">`
   \                     ??DrawControl_8:
   \   00000214   08008DE2           ADD      R0,SP,#+8
   \   00000218   ........           BL       sprintf
    152          		iTemp = GUI_GetFontDistY();
   \   0000021C   ........           BL       GUI_GetFontDistY
    153          		y1 = yLoc + ySize / 2 - iTemp / 2;
   \   00000220   0C1094E5           LDR      R1,[R4, #+12]
   \   00000224   042094E5           LDR      R2,[R4, #+4]
   \   00000228   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   0000022C   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   00000230   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000234   C06041E0           SUB      R6,R1,R0, ASR #+1
    154          		if (Value >= 0)
   \   00000238   140094E5           LDR      R0,[R4, #+20]
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   ........           BL       __aeabi_cfrcmple
   \   00000244   102094E5           LDR      R2,[R4, #+16]
    155          		{
    156          			x1 = iZeroLoc + PREDICTIVE_TEXT_POS_OFFSET;
    157          			GUI_SetColor(GUI_RED);
   \   00000248   FF00A093           MOVLS    R0,#+255
   \   0000024C   08708292           ADDLS    R7,R2,#+8
    158          		}
    159          		else
    160          		{
    161          			x1 = iZeroLoc + PREDICTIVE_TEXT_NEG_OFFSET;
   \   00000250   48704282           SUBHI    R7,R2,#+72
    162          			GUI_SetColor(GUI_GREEN);
   \   00000254   FF0CA083           MOVHI    R0,#+65280
   \   00000258   ........           BL       GUI_SetColor
    163          		}
    164          		GUI_DispStringAt(str, x1, y1);
   \   0000025C   0620A0E1           MOV      R2,R6
   \   00000260   0710A0E1           MOV      R1,R7
   \   00000264   08008DE2           ADD      R0,SP,#+8
   \   00000268   ........           BL       GUI_DispStringAt
    165          	}
    166          }
   \                     ??DrawControl_3:
   \   0000026C   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000270   F081BDE8           POP      {R4-R8,PC}       ;; return
    167          

   \                                 In section .text, align 4, keep-with-next
    168          void PredictiveLapTimer::SetValue(float dValue)
    169          {
    170          	Value = dValue;
   \                     _ZN18PredictiveLapTimer8SetValueEf:
   \   00000000   141080E5           STR      R1,[R0, #+20]
    171          	pAltText = 0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   1C1080E5           STR      R1,[R0, #+28]
    172          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    173          

   \                                 In section .text, align 4, keep-with-next
    174          void PredictiveLapTimer::SetValue(char *pText)
    175          {
    176          	pAltText = pText;
   \                     _ZN18PredictiveLapTimer8SetValueEPc:
   \   00000000   1C1080E5           STR      R1,[R0, #+28]
    177          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    178          

   \                                 In section .text, align 4, keep-with-next
    179          GUI_MEMDEV_Handle PredictiveLapTimer::DrawToMemArea()
    180          {
   \                     _ZN18PredictiveLapTimer13DrawToMemAreaEv:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    181          	int x1, y1, x2, y2, iTemp;
    182          	char str[10];
    183          	
    184          	if (pAltText)
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3100000A           BEQ      ??DrawToMemArea_0
    185          	{
    186          		GUI_RECT rect;
    187          
    188          		//Draw the rectangle
    189          		GUI_SetPenSize(LINE_WIDTH - 1);
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   ........           BL       GUI_SetPenSize
    190          		GUI_SetColor(GUI_WHITE);
   \   00000020   FF04E0E3           MVN      R0,#-16777216
   \   00000024   ........           BL       GUI_SetColor
    191          		x1 = xLoc;
   \   00000028   007094E5           LDR      R7,[R4, #+0]
    192          		y1 = yLoc;
    193          		x2 = xLoc + xSize - LINE_WIDTH;
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   046094E5           LDR      R6,[R4, #+4]
   \   00000034   070080E0           ADD      R0,R0,R7
   \   00000038   035040E2           SUB      R5,R0,#+3
    194          		y2 = yLoc + ySize - LINE_WIDTH;
   \   0000003C   0C0094E5           LDR      R0,[R4, #+12]
    195          
    196          		GUI_DrawLine(x1, y1, x2, y1);
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   060080E0           ADD      R0,R0,R6
   \   00000048   038040E2           SUB      R8,R0,#+3
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   ........           BL       GUI_DrawLine
    197          		GUI_DrawLine(x2, y1, x2, y2);
   \   0000005C   0830A0E1           MOV      R3,R8
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           BL       GUI_DrawLine
    198          		GUI_DrawLine(x2, y2, x1, y2);
   \   00000070   0830A0E1           MOV      R3,R8
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   0810A0E1           MOV      R1,R8
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           BL       GUI_DrawLine
    199          		GUI_DrawLine(x1, y2, x1, y1);
   \   00000084   0630A0E1           MOV      R3,R6
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0810A0E1           MOV      R1,R8
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   ........           BL       GUI_DrawLine
    200          
    201          		// Draw the text (track name)
    202          		GetRect(&rect);
   \   00000098   000094E5           LDR      R0,[R4, #+0]
   \   0000009C   B000CDE1           STRH     R0,[SP, #+0]
   \   000000A0   041094E5           LDR      R1,[R4, #+4]
   \   000000A4   B210CDE1           STRH     R1,[SP, #+2]
   \   000000A8   082094E5           LDR      R2,[R4, #+8]
   \   000000AC   000082E0           ADD      R0,R2,R0
   \   000000B0   B400CDE1           STRH     R0,[SP, #+4]
   \   000000B4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000B8   010080E0           ADD      R0,R0,R1
   \   000000BC   B600CDE1           STRH     R0,[SP, #+6]
    203          		GUI_SetFont(LAP_TIMER_FONT);
   \   000000C0   ........           LDR      R0,??DataTable3_1
   \   000000C4   ........           BL       GUI_SetFont
    204          		GUI_DispStringInRect(pAltText, &rect, GUI_TA_CENTER | GUI_TA_VCENTER);
   \   000000C8   0E20A0E3           MOV      R2,#+14
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   1C0094E5           LDR      R0,[R4, #+28]
   \   000000D4   ........           BL       GUI_DispStringInRect
    205          
    206          		// Do not return a handle to a memory device for this operation
    207          		return 0;
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   520000EA           B        ??DrawToMemArea_1
    208          	}
    209          	else
    210          	{
    211          		GUI_MEMDEV_Select(mem);
   \                     ??DrawToMemArea_0:
   \   000000E0   300094E5           LDR      R0,[R4, #+48]
   \   000000E4   ........           BL       GUI_MEMDEV_Select
    212          
    213          		GUI_ClearRect(xLoc, yLoc, xLoc + xSize, yLoc + ySize);
   \   000000E8   041094E5           LDR      R1,[R4, #+4]
   \   000000EC   0C2094E5           LDR      R2,[R4, #+12]
   \   000000F0   000094E5           LDR      R0,[R4, #+0]
   \   000000F4   013082E0           ADD      R3,R2,R1
   \   000000F8   082094E5           LDR      R2,[R4, #+8]
   \   000000FC   002082E0           ADD      R2,R2,R0
   \   00000100   ........           BL       GUI_ClearRect
    214          
    215          		if(Value >= 0)
   \   00000104   147094E5           LDR      R7,[R4, #+20]
   \   00000108   106094E5           LDR      R6,[R4, #+16]
   \   0000010C   180094E5           LDR      R0,[R4, #+24]
   \   00000110   0710A0E1           MOV      R1,R7
   \   00000114   ........           BL       __aeabi_fmul
   \   00000118   ........           BL       __aeabi_f2iz
   \   0000011C   005046E0           SUB      R5,R6,R0
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   ........           BL       __aeabi_cfrcmple
   \   0000012C   002094E5           LDR      R2,[R4, #+0]
   \   00000130   0C00008A           BHI      ??DrawToMemArea_2
    216          		{
    217          			// draw the red bar
    218          			x1 = xLoc;
    219          			if ((x2 = iZeroLoc - (int)(Value * dValuePerPixel)) < xLoc)
    220          				x2 = xLoc;
    221          			y1 = yLoc + 1 + LINE_WIDTH;
    222          			y2 = yLoc + ySize - 1;
    223          			GUI_DrawGradientV(x2, y1, iZeroLoc, y2, GUI_RED, GUI_BLACK);
   \   00000134   040094E5           LDR      R0,[R4, #+4]
   \   00000138   04108DE5           STR      R1,[SP, #+4]
   \   0000013C   FF10A0E3           MOV      R1,#+255
   \   00000140   00108DE5           STR      R1,[SP, #+0]
   \   00000144   0C1094E5           LDR      R1,[R4, #+12]
   \   00000148   020055E1           CMP      R5,R2
   \   0000014C   001081E0           ADD      R1,R1,R0
   \   00000150   013041E2           SUB      R3,R1,#+1
   \   00000154   0250A0B1           MOVLT    R5,R2
   \   00000158   041080E2           ADD      R1,R0,#+4
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   0500A0E1           MOV      R0,R5
   \   00000164   0E0000EA           B        ??DrawToMemArea_3
    224          		}
    225          		else
    226          		{
    227          			// draw the green bar
    228          			if ((x1 = iZeroLoc - (int)(Value * dValuePerPixel)) > (xLoc + xSize - LINE_WIDTH))
   \                     ??DrawToMemArea_2:
   \   00000168   080094E5           LDR      R0,[R4, #+8]
   \   0000016C   020080E0           ADD      R0,R0,R2
   \   00000170   030040E2           SUB      R0,R0,#+3
   \   00000174   050050E1           CMP      R0,R5
    229          				x1 = xLoc + xSize - LINE_WIDTH;
   \   00000178   0050A0B1           MOVLT    R5,R0
    230          			x2 = xLoc + xSize;
    231          			y1 = yLoc + 1 + LINE_WIDTH;
    232          			y2 = yLoc + ySize - 1;
    233          			GUI_DrawGradientV(iZeroLoc, y1, x1, y2, GUI_GREEN, GUI_BLACK);
   \   0000017C   040094E5           LDR      R0,[R4, #+4]
   \   00000180   04108DE5           STR      R1,[SP, #+4]
   \   00000184   FF1CA0E3           MOV      R1,#+65280
   \   00000188   00108DE5           STR      R1,[SP, #+0]
   \   0000018C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000190   0520A0E1           MOV      R2,R5
   \   00000194   001081E0           ADD      R1,R1,R0
   \   00000198   013041E2           SUB      R3,R1,#+1
   \   0000019C   041080E2           ADD      R1,R0,#+4
   \   000001A0   0600A0E1           MOV      R0,R6
   \                     ??DrawToMemArea_3:
   \   000001A4   ........           BL       GUI_DrawGradientV
    234          		}
    235          
    236          		GUI_MEMDEV_Write(mMemSpace);			// Draw the background grid and lines
   \   000001A8   2C0094E5           LDR      R0,[R4, #+44]
   \   000001AC   ........           BL       GUI_MEMDEV_Write
    237          
    238          		GUI_SetFont(LAP_TIMER_FONT);
   \   000001B0   ........           LDR      R0,??DataTable3_1
   \   000001B4   ........           BL       GUI_SetFont
    239          		sprintf(str, "%+.2f", Value);
   \   000001B8   140094E5           LDR      R0,[R4, #+20]
   \   000001BC   ........           BL       __aeabi_f2d
   \   000001C0   0020A0E1           MOV      R2,R0
   \   000001C4   0130A0E1           MOV      R3,R1
   \   000001C8   ........           ADR      R1,`?<Constant "%+.2f">`
   \   000001CC   08008DE2           ADD      R0,SP,#+8
   \   000001D0   ........           BL       sprintf
    240          		iTemp = GUI_GetFontDistY();
   \   000001D4   ........           BL       GUI_GetFontDistY
    241          		y1 = yLoc + ySize / 2 - iTemp / 2;
   \   000001D8   0C1094E5           LDR      R1,[R4, #+12]
   \   000001DC   042094E5           LDR      R2,[R4, #+4]
   \   000001E0   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000001E4   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   000001E8   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000001EC   C06041E0           SUB      R6,R1,R0, ASR #+1
    242          
    243          		if (Value >= 0)
   \   000001F0   140094E5           LDR      R0,[R4, #+20]
   \   000001F4   0010A0E3           MOV      R1,#+0
   \   000001F8   ........           BL       __aeabi_cfrcmple
   \   000001FC   102094E5           LDR      R2,[R4, #+16]
    244          		{
    245          			x1 = iZeroLoc + PREDICTIVE_TEXT_POS_OFFSET;
    246          			GUI_SetColor(GUI_RED);
   \   00000200   FF00A093           MOVLS    R0,#+255
   \   00000204   08708292           ADDLS    R7,R2,#+8
    247          		}
    248          		else
    249          		{
    250          			x1 = iZeroLoc + PREDICTIVE_TEXT_NEG_OFFSET;
   \   00000208   48704282           SUBHI    R7,R2,#+72
    251          			GUI_SetColor(GUI_GREEN);
   \   0000020C   FF0CA083           MOVHI    R0,#+65280
   \   00000210   ........           BL       GUI_SetColor
    252          		}
    253          		GUI_DispStringAt(str, x1, y1);
   \   00000214   0620A0E1           MOV      R2,R6
   \   00000218   0710A0E1           MOV      R1,R7
   \   0000021C   08008DE2           ADD      R0,SP,#+8
   \   00000220   ........           BL       GUI_DispStringAt
    254          
    255          		GUI_SelectLCD();
   \   00000224   ........           BL       GUI_SelectLCD
    256          		return mem;
   \   00000228   300094E5           LDR      R0,[R4, #+48]
   \                     ??DrawToMemArea_1:
   \   0000022C   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000230   F081BDE8           POP      {R4-R8,PC}       ;; return
    257          	}
    258          }

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp PredictiveLapTimer::subobject PredictiveLapTimer(int, int, int, int, float, float, GUI_HWIN)
   \                     _ZN18PredictiveLapTimerC2Eiiiiffl:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3C009DE5           LDR      R0,[SP, #+60]
   \   00000014   30809DE5           LDR      R8,[SP, #+48]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   0C108DE5           STR      R1,[SP, #+12]
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   34909DE5           LDR      R9,[SP, #+52]
   \   00000038   38A09DE5           LDR      R10,[SP, #+56]
   \   0000003C   0830A0E1           MOV      R3,R8
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   0610A0E1           MOV      R1,R6
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           BL       WM_CreateWindowAsChild
   \   00000050   280084E5           STR      R0,[R4, #+40]
   \   00000054   010050E3           CMP      R0,#+1
   \   00000058   000000AA           BGE      `??subobject PredictiveLapTimer_0`
   \   0000005C   ........           BL       SystemError
   \                     `??subobject PredictiveLapTimer_0`:
   \   00000060   005084E5           STR      R5,[R4, #+0]
   \   00000064   046084E5           STR      R6,[R4, #+4]
   \   00000068   087084E5           STR      R7,[R4, #+8]
   \   0000006C   0C8084E5           STR      R8,[R4, #+12]
   \   00000070   209084E5           STR      R9,[R4, #+32]
   \   00000074   24A084E5           STR      R10,[R4, #+36]
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   2C0084E5           STR      R0,[R4, #+44]
   \   00000080   0C3094E5           LDR      R3,[R4, #+12]
   \   00000084   082094E5           LDR      R2,[R4, #+8]
   \   00000088   041094E5           LDR      R1,[R4, #+4]
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   ........           BL       GUI_MEMDEV_Create
   \   00000094   300084E5           STR      R0,[R4, #+48]
   \   00000098   080094E5           LDR      R0,[R4, #+8]
   \   0000009C   ........           BL       __aeabi_i2f
   \   000000A0   0050A0E1           MOV      R5,R0
   \   000000A4   200094E5           LDR      R0,[R4, #+32]
   \   000000A8   241094E5           LDR      R1,[R4, #+36]
   \   000000AC   ........           BL       __aeabi_fsub
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   ........           BL       __aeabi_fdiv
   \   000000BC   180084E5           STR      R0,[R4, #+24]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       _ZN18PredictiveLapTimer16CreateBackgroundEv
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   10D08DE2           ADD      SP,SP,#+16
   \   000000D0   F087BDE8           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __code __interwork __softfp PredictiveLapTimer::subobject ~PredictiveLapTimer()
   \                     _ZN18PredictiveLapTimerD2Ev:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   ........           BL       GUI_MEMDEV_Delete
   \   00000010   2C0094E5           LDR      R0,[R4, #+44]
   \   00000014   ........           BL       GUI_MEMDEV_Delete
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Font20_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI_Font32B_ASCII

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%+.1f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252B2E316600       DC8 37, 43, 46, 49, 102, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%+.2f">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   252B2E326600       DC8 37, 43, 46, 50, 102, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     PredictiveLapTimer::CreateBackground()
                                        24
     PredictiveLapTimer::DrawControl()
                                        48
     PredictiveLapTimer::DrawToMemArea()
                                        48
     PredictiveLapTimer::PredictiveLapTimer(int, int, int, int, float, float, GUI_HWIN)
                                        48
     PredictiveLapTimer::SetValue(char *)
                                         0
     PredictiveLapTimer::SetValue(float)
                                         0
     PredictiveLapTimer::subobject PredictiveLapTimer(int, int, int, int, float, float, GUI_HWIN)
                                        48
     PredictiveLapTimer::subobject ~PredictiveLapTimer()
                                         8
     PredictiveLapTimer::~PredictiveLapTimer()
                                         8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     PredictiveLapTimer::PredictiveLapTimer(int, int, int, int, float, float, GUI_HWIN)
                                     212
     PredictiveLapTimer::~PredictiveLapTimer()
                                      32
     PredictiveLapTimer::CreateBackground()
                                     308
     PredictiveLapTimer::DrawControl()
                                     628
     PredictiveLapTimer::SetValue(float)
                                      16
     PredictiveLapTimer::SetValue(char *)
                                       8
     PredictiveLapTimer::DrawToMemArea()
                                     564
     PredictiveLapTimer::subobject PredictiveLapTimer(int, int, int, int, float, float, GUI_HWIN)
                                     212
     PredictiveLapTimer::subobject ~PredictiveLapTimer()
                                      32
     ??DataTable3                      4
     ??DataTable3_1                    4
     ?<Constant "%+.1f">               8
     ?<Constant "%+.2f">               8

 
 2 036 bytes in section .text
 
 2 036 bytes of CODE memory

Errors: none
Warnings: none
