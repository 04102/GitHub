###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:32 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_SIF_Prop.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_SIF_Prop.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_SIF_Prop.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_SIF_Prop.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_SIF_Prop.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_SIF_Prop.c
     19          Purpose     : Implementation of system independend fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Exported code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DispChar
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _DispChar(U16P c) {
   \                     _DispChar:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     36            const U8 * pCharInfo, * pData;
     37            pCharInfo = GUI_SIF__GetpCharInfo(GUI_Context.pAFont, c, sizeof(GUI_SIF_CHARINFO));
   \   00000004   ........           LDR      R4,??DataTable3
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   20D04DE2           SUB      SP,SP,#+32
   \   00000010   0C20A0E3           MOV      R2,#+12
   \   00000014   1C0094E5           LDR      R0,[R4, #+28]
   \   00000018   ........           BL       GUI_SIF__GetpCharInfo
   \   0000001C   18008DE5           STR      R0,[SP, #+24]
     38            if (pCharInfo) {
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3F00000A           BEQ      ??_DispChar_0
     39              GUI_DRAWMODE DrawMode, OldDrawMode;
     40              GUI_SIF_CHARINFO CharInfo;
     41              CharInfo.XSize        = GUI__Read16(&pCharInfo);
   \   00000028   18008DE2           ADD      R0,SP,#+24
   \   0000002C   ........           BL       GUI__Read16
   \   00000030   0050A0E1           MOV      R5,R0
     42              CharInfo.XDist        = GUI__Read16(&pCharInfo);
   \   00000034   18008DE2           ADD      R0,SP,#+24
   \   00000038   ........           BL       GUI__Read16
   \   0000003C   0060A0E1           MOV      R6,R0
     43              CharInfo.BytesPerLine = GUI__Read16(&pCharInfo);
   \   00000040   18008DE2           ADD      R0,SP,#+24
   \   00000044   ........           BL       GUI__Read16
   \   00000048   0080A0E1           MOV      R8,R0
     44                                      GUI__Read16(&pCharInfo); /* Dummy */
   \   0000004C   18008DE2           ADD      R0,SP,#+24
   \   00000050   ........           BL       GUI__Read16
     45              CharInfo.OffData      = GUI__Read32(&pCharInfo);
   \   00000054   18008DE2           ADD      R0,SP,#+24
   \   00000058   ........           BL       GUI__Read32
     46              pData = (const U8 *)GUI_Context.pAFont->p.pFontData + CharInfo.OffData;
   \   0000005C   1C1094E5           LDR      R1,[R4, #+28]
     47              DrawMode = GUI_Context.TextMode;
   \   00000060   FAA2D4E1           LDRSH    R10,[R4, #+42]
   \   00000064   1C1091E5           LDR      R1,[R1, #+28]
   \   00000068   019080E0           ADD      R9,R0,R1
     48              OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   0000006C   0A00A0E1           MOV      R0,R10
   \   00000070   ........           BL       LCD_SetDrawMode
     49              LCD_DrawBitmap(GUI_Context.DispPosX, GUI_Context.DispPosY,
     50                             CharInfo.XSize,
     51          									 GUI_Context.pAFont->YSize,
     52                             GUI_Context.pAFont->XMag,
     53          									 GUI_Context.pAFont->YMag,
     54                             1,
     55                             CharInfo.BytesPerLine,
     56                             pData,
     57                             LCD_pBkColorIndex);
   \   00000074   ........           LDR      R1,??DataTable3_1
   \   00000078   0070A0E1           MOV      R7,R0
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   1C0094E5           LDR      R0,[R4, #+28]
   \   00000084   14108DE5           STR      R1,[SP, #+20]
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   10908DE5           STR      R9,[SP, #+16]
   \   00000090   0C808DE5           STR      R8,[SP, #+12]
   \   00000094   08108DE5           STR      R1,[SP, #+8]
   \   00000098   1B10D0E5           LDRB     R1,[R0, #+27]
   \   0000009C   0520A0E1           MOV      R2,R5
   \   000000A0   04108DE5           STR      R1,[SP, #+4]
   \   000000A4   1A10D0E5           LDRB     R1,[R0, #+26]
   \   000000A8   00108DE5           STR      R1,[SP, #+0]
   \   000000AC   1830D0E5           LDRB     R3,[R0, #+24]
   \   000000B0   F412D4E1           LDRSH    R1,[R4, #+36]
   \   000000B4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000B8   ........           BL       LCD_DrawBitmap
     58              /* Fill empty pixel lines */
     59              if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \   000000BC   1C0094E5           LDR      R0,[R4, #+28]
   \   000000C0   1910D0E5           LDRB     R1,[R0, #+25]
   \   000000C4   1820D0E5           LDRB     R2,[R0, #+24]
   \   000000C8   010052E1           CMP      R2,R1
   \   000000CC   1000002A           BCS      ??_DispChar_1
     60                int YMag = GUI_Context.pAFont->YMag;
   \   000000D0   1B00D0E5           LDRB     R0,[R0, #+27]
     61                int YDist = GUI_Context.pAFont->YDist * YMag;
     62                int YSize = GUI_Context.pAFont->YSize * YMag;
     63                if (DrawMode != LCD_DRAWMODE_TRANS) {
   \   000000D4   02005AE3           CMP      R10,#+2
   \   000000D8   800168E1           SMULBB   R8,R0,R1
   \   000000DC   800269E1           SMULBB   R9,R0,R2
   \   000000E0   0B00000A           BEQ      ??_DispChar_1
     64                  LCD_COLOR OldColor = GUI_GetColor();
   \   000000E4   ........           BL       GUI_GetColor
   \   000000E8   00A0A0E1           MOV      R10,R0
     65                  GUI_SetColor(GUI_GetBkColor());
   \   000000EC   ........           BL       GUI_GetBkColor
   \   000000F0   ........           BL       GUI_SetColor
   \   000000F4   F412D4E1           LDRSH    R1,[R4, #+36]
   \   000000F8   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000FC   013088E0           ADD      R3,R8,R1
   \   00000100   002085E0           ADD      R2,R5,R0
   \   00000104   011089E0           ADD      R1,R9,R1
     66                  LCD_FillRect(GUI_Context.DispPosX, 
     67                               GUI_Context.DispPosY + YSize, 
     68                               GUI_Context.DispPosX + CharInfo.XSize, 
     69                               GUI_Context.DispPosY + YDist);
   \   00000108   ........           BL       LCD_FillRect
     70                  GUI_SetColor(OldColor);
   \   0000010C   0A00A0E1           MOV      R0,R10
   \   00000110   ........           BL       GUI_SetColor
     71                }
     72              }
     73              LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
   \                     ??_DispChar_1:
   \   00000114   0700A0E1           MOV      R0,R7
   \   00000118   ........           BL       LCD_SetDrawMode
     74              GUI_Context.DispPosX += CharInfo.XDist;
   \   0000011C   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000120   000086E0           ADD      R0,R6,R0
   \   00000124   B202C4E1           STRH     R0,[R4, #+34]
     75            }
     76          }
   \                     ??_DispChar_0:
   \   00000128   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   0000012C   F087BDE8           POP      {R4-R10,PC}      ;; return
     77          
     78          /*********************************************************************
     79          *
     80          *       _GetCharDistX
     81          */

   \                                 In section .text, align 4, keep-with-next
     82          static int _GetCharDistX(U16P c) {
   \                     _GetCharDistX:
   \   00000000   10402DE9           PUSH     {R4,LR}
     83            const U8 * pCharInfo;
     84            U16 DistX = 0;
     85            pCharInfo = GUI_SIF__GetpCharInfo(GUI_Context.pAFont, c, sizeof(GUI_SIF_CHARINFO)); /* Get pointer to char info data */
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   ........           LDR      R0,??DataTable3
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   0C20A0E3           MOV      R2,#+12
   \   00000018   1C0090E5           LDR      R0,[R0, #+28]
   \   0000001C   ........           BL       GUI_SIF__GetpCharInfo
   \   00000020   00008DE5           STR      R0,[SP, #+0]
     86            if (pCharInfo) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400000A           BEQ      ??_GetCharDistX_0
     87              pCharInfo += 2;                                       /* Skip unused data */
   \   0000002C   020080E2           ADD      R0,R0,#+2
   \   00000030   00008DE5           STR      R0,[SP, #+0]
     88              DistX = GUI__Read16(&pCharInfo);
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           BL       GUI__Read16
   \   0000003C   0040A0E1           MOV      R4,R0
     89            }
     90            return DistX;
   \                     ??_GetCharDistX_0:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   08D08DE2           ADD      SP,SP,#+8
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
     91          }
     92          
     93          /*********************************************************************
     94          *
     95          *       _GetFontInfo
     96          */

   \                                 In section .text, align 4, keep-with-next
     97          static void _GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO * pfi) {
   \                     _GetFontInfo:
   \   00000000   10402DE9           PUSH     {R4,LR}
     98            const U8 * pData;
     99            pData = (const U8 *)pFont->p.pFontData + 4;             /* Skip unused data */
   \   00000004   1C0090E5           LDR      R0,[R0, #+28]
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   040080E2           ADD      R0,R0,#+4
   \   00000010   00008DE5           STR      R0,[SP, #+0]
   \   00000014   0140A0E1           MOV      R4,R1
    100            pfi->Baseline = GUI__Read16(&pData);
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       GUI__Read16
   \   00000020   0200C4E5           STRB     R0,[R4, #+2]
    101            pfi->LHeight  = GUI__Read16(&pData);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           BL       GUI__Read16
   \   0000002C   0300C4E5           STRB     R0,[R4, #+3]
    102            pfi->CHeight  = GUI__Read16(&pData);
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           BL       GUI__Read16
   \   00000038   0400C4E5           STRB     R0,[R4, #+4]
    103            pfi->Flags    = GUI_FONTINFO_FLAG_PROP;
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   B000C4E1           STRH     R0,[R4, #+0]
    104          }
   \   00000044   08D08DE2           ADD      SP,SP,#+8
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
    105          
    106          /*********************************************************************
    107          *
    108          *       _IsInFont
    109          */

   \                                 In section .text, align 4, keep-with-next
    110          static char _IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
   \                     _IsInFont:
   \   00000000   00402DE9           PUSH     {LR}
    111            const U8 * pCharInfo;
    112            GUI_USE_PARA(pFont);
    113            pCharInfo = GUI_SIF__GetpCharInfo(GUI_Context.pAFont, c, sizeof(GUI_SIF_CHARINFO));
    114            return (pCharInfo) ? 1 : 0;
   \   00000004   ........           LDR      R0,??DataTable3
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0C20A0E3           MOV      R2,#+12
   \   00000010   1C0090E5           LDR      R0,[R0, #+28]
   \   00000014   ........           BL       GUI_SIF__GetpCharInfo
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100A013           MOVNE    R0,#+1
   \   00000020   FF0000E2           AND      R0,R0,#0xFF
   \   00000024   04D08DE2           ADD      SP,SP,#+4
   \   00000028   0080BDE8           POP      {PC}             ;; return
    115          }
    116          
    117          /*********************************************************************
    118          *
    119          *       GUI_SIF_TYPE_PROP
    120          */

   \                                 In section .rodata, align 4, keep-with-next
    121          const tGUI_SIF_APIList GUI_SIF_APIList_Prop = {
   \                     GUI_SIF_APIList_Prop:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 _DispChar, _GetCharDistX, _GetFontInfo, _IsInFont
   \              ............
   \              ........    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    122            _DispChar,
    123            _GetCharDistX,
    124            _GetFontInfo,
    125            _IsInFont
    126          };
    127          
    128          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     _DispChar         64
     _GetCharDistX     16
     _GetFontInfo      16
     _IsInFont          8


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _DispChar             304
     _GetCharDistX          76
     _GetFontInfo           76
     _IsInFont              44
     GUI_SIF_APIList_Prop   24
     ??DataTable3            4
     ??DataTable3_1          4

 
  24 bytes in section .rodata
 508 bytes in section .text
 
 508 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
