###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:03 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_SetTrans.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\WM_SetTrans.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_SetTrans.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_SetTrans.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_SetTrans.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_SetTrans.c
     19          Purpose     : Windows manager, optional routines
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "WM_Intern.h"
     24          
     25          #if GUI_WINSUPPORT
     26          #if WM_SUPPORT_TRANSPARENCY   /* If 0, WM will not generate any code */
     27          
     28          #include "GUI_Debug.h"
     29          
     30          /*********************************************************************
     31          *
     32          *       Public code
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       WM_SetHasTrans
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void WM_SetHasTrans(WM_HWIN hWin) {
   \                     WM_SetHasTrans:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     41            WM_Obj *pWin;
     42            WM_LOCK();
   \   0000000C   ........           BL       GUI_Lock
     43            if (hWin) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1000000A           BEQ      ??WM_SetHasTrans_0
     44              pWin = WM_H2P(hWin);  
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_h2p
   \   00000020   0050A0E1           MOV      R5,R0
     45              //
     46              // First check if this is necessary at all
     47              //
     48              if ((pWin->Status & WM_SF_HASTRANS) == 0) {
   \   00000024   2800D5E5           LDRB     R0,[R5, #+40]
   \   00000028   010010E3           TST      R0,#0x1
   \   0000002C   0A00001A           BNE      ??WM_SetHasTrans_0
     49                //
     50                // Now make sure that the number of invalid windows is correct
     51                //
     52                WM_ValidateWindow(hWin);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_ValidateWindow
     53                //
     54                // Make window transparent
     55                //
     56                pWin->Status |= WM_SF_HASTRANS; // Set Transparency flag
   \   00000038   280095E5           LDR      R0,[R5, #+40]
   \   0000003C   010080E3           ORR      R0,R0,#0x1
   \   00000040   280085E5           STR      R0,[R5, #+40]
     57                WM__TransWindowCnt++;           // Increment counter for transparency windows
   \   00000044   ........           LDR      R0,??DataTable1
   \   00000048   001090E5           LDR      R1,[R0, #+0]
   \   0000004C   011081E2           ADD      R1,R1,#+1
   \   00000050   001080E5           STR      R1,[R0, #+0]
     58                //
     59                // Invalidate window area
     60                //
     61                WM_InvalidateWindow(hWin);      // Mark content as invalid
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_InvalidateWindow
     62              }
     63            }
     64            WM_UNLOCK();
   \                     ??WM_SetHasTrans_0:
   \   0000005C   04D08DE2           ADD      SP,SP,#+4
   \   00000060   3040BDE8           POP      {R4,R5,LR}
   \   00000064   ........           B        GUI_Unlock       ;; tailcall
     65          }
     66          
     67          /*********************************************************************
     68          *
     69          *       WM_ClrHasTrans
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          void WM_ClrHasTrans(WM_HWIN hWin) {
   \                     WM_ClrHasTrans:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     72            WM_Obj *pWin;
     73            WM_LOCK();
   \   00000008   ........           BL       GUI_Lock
     74            if (hWin) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0D00000A           BEQ      ??WM_ClrHasTrans_0
     75              pWin = WM_H2P(hWin);  
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
     76              //
     77              // First check if this is necessary at all
     78              //
     79              if (pWin->Status & WM_SF_HASTRANS) {
   \   0000001C   2810D0E5           LDRB     R1,[R0, #+40]
   \   00000020   010011E3           TST      R1,#0x1
   \   00000024   0800000A           BEQ      ??WM_ClrHasTrans_0
     80                pWin->Status &= ~WM_SF_HASTRANS;
   \   00000028   281090E5           LDR      R1,[R0, #+40]
   \   0000002C   0110C1E3           BIC      R1,R1,#0x1
   \   00000030   281080E5           STR      R1,[R0, #+40]
     81                WM__TransWindowCnt--;           // Decrement counter for transparency windows 
   \   00000034   ........           LDR      R0,??DataTable1
   \   00000038   001090E5           LDR      R1,[R0, #+0]
   \   0000003C   011041E2           SUB      R1,R1,#+1
   \   00000040   001080E5           STR      R1,[R0, #+0]
     82                WM_InvalidateWindow(hWin);      // Mark content as invalid 
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       WM_InvalidateWindow
     83              }
     84            }
     85            WM_UNLOCK();
   \                     ??WM_ClrHasTrans_0:
   \   0000004C   1040BDE8           POP      {R4,LR}
   \   00000050   ........           B        GUI_Unlock       ;; tailcall
     86          }
     87          
     88          /*********************************************************************
     89          *
     90          *       WM_GetHasTrans
     91          */

   \                                 In section .text, align 4, keep-with-next
     92          int WM_GetHasTrans(WM_HWIN hWin) {
   \                     WM_GetHasTrans:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     93            int r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
     94            WM_Obj *pWin;
     95            WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
     96            if (hWin) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0300000A           BEQ      ??WM_GetHasTrans_0
     97              pWin = WM_H2P(hWin);  
     98              r = pWin->Status & WM_SF_HASTRANS;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   2800D0E5           LDRB     R0,[R0, #+40]
   \   00000028   015000E2           AND      R5,R0,#0x1
     99            }
    100            WM_UNLOCK();
   \                     ??WM_GetHasTrans_0:
   \   0000002C   ........           BL       GUI_Unlock
    101            return r;
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    102          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     WM__TransWindowCnt
    103          
    104          #endif /*WM_SUPPORT_TRANSPARENCY*/
    105          
    106          #else
    107            void WM_SetTrans_c(void) {} /* avoid empty object files */
    108          #endif   /* GUI_WINSUPPORT */
    109          
    110          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     WM_ClrHasTrans      8
     WM_GetHasTrans     16
     WM_SetHasTrans     16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     WM_SetHasTrans  104
     WM_ClrHasTrans   84
     WM_GetHasTrans   60
     ??DataTable1      4

 
 252 bytes in section .text
 
 252 bytes of CODE memory

Errors: none
Warnings: none
