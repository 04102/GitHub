###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:00 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_XBF_Prop.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_XBF_Prop.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_XBF_Prop.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_XBF_Prop.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_XBF_Prop.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_XBF_Prop.c
     19          Purpose     : Implementation of external binary fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DispChar
     34          */

   \                                 In section .text, align 4, keep-with-next
     35          static void _DispChar(U16P c) {
   \                     _DispChar:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     36            GUI_DRAWMODE         DrawMode;
     37            GUI_DRAWMODE         OldDrawMode;
     38            U8                   aBuffer[GUI_MAX_XBF_BYTES];
     39            const U8           * pBuffer;
     40            const GUI_XBF_DATA * pXBF_Data;
     41            U32                  Off, iOff;
     42            U16                  Size, XSize;
     43            U16                  BytesPerLine, NumBytes;
     44            U16                  MaxLines;
     45            int                  RemLines, NumLines, xPos, yPos;
     46          
     47            pBuffer = aBuffer;
     48            pXBF_Data = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   41DF4DE2           SUB      SP,SP,#+260
   \   0000000C   38208DE2           ADD      R2,SP,#+56
   \   00000010   1C1094E5           LDR      R1,[R4, #+28]
   \   00000014   1C208DE5           STR      R2,[SP, #+28]
   \   00000018   1C6091E5           LDR      R6,[R1, #+28]
     49            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   0000001C   B010D6E1           LDRH     R1,[R6, #+0]
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   B210D621           LDRHCS   R1,[R6, #+2]
   \   00000028   00005121           CMPCS    R1,R0
   \   0000002C   8400003A           BCC      ??_DispChar_0
     50              return;
     51            }
     52            //
     53            // Get offset and size of character data
     54            //
     55            GUI_XBF__GetOffAndSize(pXBF_Data, c, &Off, &Size);
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   18308DE2           ADD      R3,SP,#+24
   \   00000038   20208DE2           ADD      R2,SP,#+32
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       GUI_XBF__GetOffAndSize
     56            if (!Off) {
   \   00000044   20009DE5           LDR      R0,[SP, #+32]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   7C00000A           BEQ      ??_DispChar_0
     57              return;
     58            }
     59            DrawMode     = GUI_Context.TextMode;
   \   00000050   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000054   28008DE5           STR      R0,[SP, #+40]
     60            OldDrawMode  = LCD_SetDrawMode(DrawMode);
   \   00000058   ........           BL       LCD_SetDrawMode
   \   0000005C   34008DE5           STR      R0,[SP, #+52]
     61            if (Size > GUI_MAX_XBF_BYTES) {
   \   00000060   B801DDE1           LDRH     R0,[SP, #+24]
   \   00000064   08C096E5           LDR      R12,[R6, #+8]
   \   00000068   042096E5           LDR      R2,[R6, #+4]
   \   0000006C   C90050E3           CMP      R0,#+201
   \   00000070   38308DE2           ADD      R3,SP,#+56
   \   00000074   3C00003A           BCC      ??_DispChar_1
     62              //
     63              // Get heading data
     64              //
     65              pXBF_Data->pfGetData(Off, 4, pXBF_Data->pVoid, aBuffer);
   \   00000078   0410A0E3           MOV      R1,#+4
   \   0000007C   20009DE5           LDR      R0,[SP, #+32]
   \   00000080   3CFF2FE1           BLX      R12
     66              XSize        = GUI__Read16(&pBuffer);
   \   00000084   1C008DE2           ADD      R0,SP,#+28
   \   00000088   ........           BL       GUI__Read16
   \   0000008C   0050A0E1           MOV      R5,R0
     67              BytesPerLine = GUI__Read16(&pBuffer);
   \   00000090   1C008DE2           ADD      R0,SP,#+28
   \   00000094   ........           BL       GUI__Read16
   \   00000098   24008DE5           STR      R0,[SP, #+36]
     68              iOff         = Off + 4;
   \   0000009C   20009DE5           LDR      R0,[SP, #+32]
     69              MaxLines     = (GUI_MAX_XBF_BYTES - 4) / BytesPerLine;
   \   000000A0   24109DE5           LDR      R1,[SP, #+36]
   \   000000A4   047080E2           ADD      R7,R0,#+4
   \   000000A8   C400A0E3           MOV      R0,#+196
   \   000000AC   ........           BL       __aeabi_idiv
   \   000000B0   0008A0E1           LSL      R0,R0,#+16
   \   000000B4   2008A0E1           LSR      R0,R0,#+16
   \   000000B8   30008DE5           STR      R0,[SP, #+48]
     70              RemLines     = GUI_Context.pAFont->YSize;
   \   000000BC   1C0094E5           LDR      R0,[R4, #+28]
     71              xPos         = GUI_Context.DispPosX ;
     72              yPos         = GUI_Context.DispPosY;
   \   000000C0   F492D4E1           LDRSH    R9,[R4, #+36]
   \   000000C4   1880D0E5           LDRB     R8,[R0, #+24]
   \   000000C8   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000000CC   2C008DE5           STR      R0,[SP, #+44]
     73              do {
     74                //
     75                // Use MaxLines as YSize for a band until RemLines are less than MaxLines
     76                //
     77                NumLines   = MaxLines;
   \                     ??_DispChar_2:
   \   000000D0   30009DE5           LDR      R0,[SP, #+48]
     78                if (NumLines > RemLines) {
   \   000000D4   08A0A0E1           MOV      R10,R8
   \   000000D8   000058E1           CMP      R8,R0
   \   000000DC   00A0A0C1           MOVGT    R10,R0
     79                  NumLines = RemLines;
     80                }
     81                NumBytes   = NumLines * BytesPerLine;
   \   000000E0   24009DE5           LDR      R0,[SP, #+36]
     82                pXBF_Data->pfGetData(iOff, NumBytes, pXBF_Data->pVoid, aBuffer);
   \   000000E4   38308DE2           ADD      R3,SP,#+56
   \   000000E8   8A006BE1           SMULBB   R11,R10,R0
   \   000000EC   042096E5           LDR      R2,[R6, #+4]
   \   000000F0   0B18A0E1           LSL      R1,R11,#+16
   \   000000F4   2118A0E1           LSR      R1,R1,#+16
   \   000000F8   0700A0E1           MOV      R0,R7
   \   000000FC   08C096E5           LDR      R12,[R6, #+8]
   \   00000100   3CFF2FE1           BLX      R12
     83                LCD_DrawBitmap(xPos, yPos,
     84                               XSize,
     85          								     NumLines,
     86                               GUI_Context.pAFont->XMag,
     87          								     GUI_Context.pAFont->YMag,
     88                               1,
     89                               BytesPerLine,
     90                               aBuffer,
     91                               LCD_pBkColorIndex);
   \   00000104   ........           LDR      R1,??DataTable1_1
   \   00000108   1C0094E5           LDR      R0,[R4, #+28]
   \   0000010C   001091E5           LDR      R1,[R1, #+0]
   \   00000110   0A30A0E1           MOV      R3,R10
   \   00000114   14108DE5           STR      R1,[SP, #+20]
   \   00000118   38108DE2           ADD      R1,SP,#+56
   \   0000011C   10108DE5           STR      R1,[SP, #+16]
   \   00000120   24109DE5           LDR      R1,[SP, #+36]
   \   00000124   0520A0E1           MOV      R2,R5
   \   00000128   0C108DE5           STR      R1,[SP, #+12]
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   08108DE5           STR      R1,[SP, #+8]
   \   00000134   1B10D0E5           LDRB     R1,[R0, #+27]
   \   00000138   04108DE5           STR      R1,[SP, #+4]
   \   0000013C   1A00D0E5           LDRB     R0,[R0, #+26]
   \   00000140   0910A0E1           MOV      R1,R9
   \   00000144   00008DE5           STR      R0,[SP, #+0]
   \   00000148   2C009DE5           LDR      R0,[SP, #+44]
   \   0000014C   ........           BL       LCD_DrawBitmap
     92                iOff      += NumBytes;
   \   00000150   0BB8A0E1           LSL      R11,R11,#+16
     93                RemLines  -= NumLines;
   \   00000154   0A8048E0           SUB      R8,R8,R10
   \   00000158   2B7887E0           ADD      R7,R7,R11, LSR #+16
     94                yPos      += NumLines;
   \   0000015C   09908AE0           ADD      R9,R10,R9
     95              } while (RemLines);
   \   00000160   000058E3           CMP      R8,#+0
   \   00000164   D9FFFF1A           BNE      ??_DispChar_2
   \   00000168   190000EA           B        ??_DispChar_3
     96            } else {
     97              pXBF_Data->pfGetData(Off, Size, pXBF_Data->pVoid, aBuffer); /* Get character data */
   \                     ??_DispChar_1:
   \   0000016C   0010A0E1           MOV      R1,R0
   \   00000170   20009DE5           LDR      R0,[SP, #+32]
   \   00000174   3CFF2FE1           BLX      R12
     98              XSize        = GUI__Read16(&pBuffer);
   \   00000178   1C008DE2           ADD      R0,SP,#+28
   \   0000017C   ........           BL       GUI__Read16
   \   00000180   0050A0E1           MOV      R5,R0
     99              BytesPerLine = GUI__Read16(&pBuffer);
   \   00000184   1C008DE2           ADD      R0,SP,#+28
   \   00000188   ........           BL       GUI__Read16
    100              LCD_DrawBitmap(GUI_Context.DispPosX, GUI_Context.DispPosY,
    101                             XSize,
    102          								   GUI_Context.pAFont->YSize,
    103                             GUI_Context.pAFont->XMag,
    104          								   GUI_Context.pAFont->YMag,
    105                             1,
    106                             BytesPerLine,
    107                             pBuffer,
    108                             LCD_pBkColorIndex);
   \   0000018C   ........           LDR      R2,??DataTable1_1
   \   00000190   0C008DE5           STR      R0,[SP, #+12]
   \   00000194   002092E5           LDR      R2,[R2, #+0]
   \   00000198   1C1094E5           LDR      R1,[R4, #+28]
   \   0000019C   14208DE5           STR      R2,[SP, #+20]
   \   000001A0   1C209DE5           LDR      R2,[SP, #+28]
   \   000001A4   0100A0E3           MOV      R0,#+1
   \   000001A8   10208DE5           STR      R2,[SP, #+16]
   \   000001AC   08008DE5           STR      R0,[SP, #+8]
   \   000001B0   1B00D1E5           LDRB     R0,[R1, #+27]
   \   000001B4   0520A0E1           MOV      R2,R5
   \   000001B8   04008DE5           STR      R0,[SP, #+4]
   \   000001BC   1A00D1E5           LDRB     R0,[R1, #+26]
   \   000001C0   00008DE5           STR      R0,[SP, #+0]
   \   000001C4   1830D1E5           LDRB     R3,[R1, #+24]
   \   000001C8   F412D4E1           LDRSH    R1,[R4, #+36]
   \   000001CC   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000001D0   ........           BL       LCD_DrawBitmap
    109            }
    110            //
    111            // Fill empty pixel lines
    112            //
    113            if ((DrawMode & LCD_DRAWMODE_TRANS) == 0) {
   \                     ??_DispChar_3:
   \   000001D4   28009DE5           LDR      R0,[SP, #+40]
   \   000001D8   020010E3           TST      R0,#0x2
   \   000001DC   1300001A           BNE      ??_DispChar_4
    114              if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \   000001E0   1C0094E5           LDR      R0,[R4, #+28]
   \   000001E4   1910D0E5           LDRB     R1,[R0, #+25]
   \   000001E8   1820D0E5           LDRB     R2,[R0, #+24]
   \   000001EC   010052E1           CMP      R2,R1
   \   000001F0   0E00002A           BCS      ??_DispChar_4
    115                int YMag  = GUI_Context.pAFont->YMag;
   \   000001F4   1B00D0E5           LDRB     R0,[R0, #+27]
    116                int YDist = GUI_Context.pAFont->YDist * YMag;
   \   000001F8   800166E1           SMULBB   R6,R0,R1
    117                int YSize = GUI_Context.pAFont->YSize * YMag;
   \   000001FC   800267E1           SMULBB   R7,R0,R2
    118                LCD_COLOR OldColor = GUI_GetColor();
   \   00000200   ........           BL       GUI_GetColor
   \   00000204   0080A0E1           MOV      R8,R0
    119                GUI_SetColor(GUI_GetBkColor());
   \   00000208   ........           BL       GUI_GetBkColor
   \   0000020C   ........           BL       GUI_SetColor
   \   00000210   F412D4E1           LDRSH    R1,[R4, #+36]
   \   00000214   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000218   013086E0           ADD      R3,R6,R1
   \   0000021C   002085E0           ADD      R2,R5,R0
   \   00000220   011087E0           ADD      R1,R7,R1
    120                LCD_FillRect(GUI_Context.DispPosX,
    121                             GUI_Context.DispPosY + YSize,
    122                             GUI_Context.DispPosX + XSize,
    123                             GUI_Context.DispPosY + YDist);
   \   00000224   ........           BL       LCD_FillRect
    124                GUI_SetColor(OldColor);
   \   00000228   0800A0E1           MOV      R0,R8
   \   0000022C   ........           BL       GUI_SetColor
    125              }
    126            }
    127            //
    128            // Restore dramode and adjust cursor position
    129            //
    130            LCD_SetDrawMode(OldDrawMode);
   \                     ??_DispChar_4:
   \   00000230   34009DE5           LDR      R0,[SP, #+52]
   \   00000234   ........           BL       LCD_SetDrawMode
    131            GUI_Context.DispPosX += XSize;
   \   00000238   F202D4E1           LDRSH    R0,[R4, #+34]
   \   0000023C   000085E0           ADD      R0,R5,R0
   \   00000240   B202C4E1           STRH     R0,[R4, #+34]
    132          }
   \                     ??_DispChar_0:
   \   00000244   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000248   F08FBDE8           POP      {R4-R11,PC}      ;; return
    133          
    134          /*********************************************************************
    135          *
    136          *       Public data
    137          *
    138          **********************************************************************
    139          */
    140          /*********************************************************************
    141          *
    142          *       GUI_XBF_TYPE_PROP
    143          */

   \                                 In section .rodata, align 4, keep-with-next
    144          const tGUI_XBF_APIList GUI_XBF_APIList_Prop = {
   \                     GUI_XBF_APIList_Prop:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 _DispChar, GUI_XBF__GetCharDistX, GUI_XBF__GetFontInfo, GUI_XBF__IsInFont
   \              ............
   \              ........    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    145            _DispChar,
    146            GUI_XBF__GetCharDistX,
    147            GUI_XBF__GetFontInfo,
    148            GUI_XBF__IsInFont,
    149          };
    150          
    151          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     _DispChar    296


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     _DispChar             588
     GUI_XBF_APIList_Prop   24
     ??DataTable1            4
     ??DataTable1_1          4

 
  24 bytes in section .rodata
 596 bytes in section .text
 
 596 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
