###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:36 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OY_32.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OY_32.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDRV_Lin_OY_32.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDRV_Lin_OY_32.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OY_32.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OY_32.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y * (vxSizePhys << 1) + ((U32)x << 1))
     91          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y *  vxSizePhys       +       x      )
     92          
     93          /*********************************************************************
     94          *
     95          *       Types
     96          *
     97          **********************************************************************
     98          */
     99          typedef struct {
    100            U32 VRAMAddr;
    101            int xSize, ySize;
    102            int vxSize, vySize;
    103            int vxSizePhys;
    104            int xPos, yPos;
    105            int Alpha;
    106            int IsVisible;
    107            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    108          } DRIVER_CONTEXT;
    109          
    110          /*********************************************************************
    111          *
    112          *       Static functions
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       _SetPixelIndex
    119          *
    120          * Purpose:
    121          *   Sets the index of the given pixel. The upper layers
    122          *   calling this routine make sure that the coordinates are in range, so
    123          *   that no check on the parameters needs to be performed.
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
    126            DRIVER_CONTEXT * pContext;
    127            U32 Off;
    128          
    129            //
    130            // Get context
    131            //
    132            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _SetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    133            //
    134            // Mirror y
    135            //
    136            y = (pContext->vySize - 1 - (y));
    137            //
    138            // Write into hardware
    139            //
    140            Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    141            WRITE_MEM32(pContext->VRAMAddr, Off, PixelIndex);
   \   00000004   10C090E5           LDR      R12,[R0, #+16]
   \   00000008   01C04CE2           SUB      R12,R12,#+1
   \   0000000C   02204CE0           SUB      R2,R12,R2
   \   00000010   14C090E5           LDR      R12,[R0, #+20]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   9C1221E0           MLA      R1,R12,R2,R1
   \   0000001C   013180E7           STR      R3,[R0, +R1, LSL #+2]
    142          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
    143          
    144          /*********************************************************************
    145          *
    146          *       _GetPixelIndex
    147          *
    148          * Purpose:
    149          *   Returns the index of the given pixel. The upper layers
    150          *   calling this routine make sure that the coordinates are in range, so
    151          *   that no check on the parameters needs to be performed.
    152          */

   \                                 In section .text, align 4, keep-with-next
    153          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    154            DRIVER_CONTEXT * pContext;
    155            U32 Off;
    156            LCD_PIXELINDEX PixelIndex;
    157          
    158            //
    159            // Get context
    160            //
    161            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    162            //
    163            // Mirror y
    164            //
    165            y = (pContext->vySize - 1 - (y));
    166            //
    167            // Write into hardware
    168            //
    169            Off        = XY2OFF32(pContext->vxSizePhys, x, y);
    170            PixelIndex = READ_MEM32(pContext->VRAMAddr, Off);
    171            return PixelIndex;
   \   00000004   103090E5           LDR      R3,[R0, #+16]
   \   00000008   013043E2           SUB      R3,R3,#+1
   \   0000000C   022043E0           SUB      R2,R3,R2
   \   00000010   143090E5           LDR      R3,[R0, #+20]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   931221E0           MLA      R1,R3,R2,R1
   \   0000001C   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   00000020   1EFF2FE1           BX       LR               ;; return
    172          }
    173          
    174          /*********************************************************************
    175          *
    176          *       _XorPixel
    177          */

   \                                 In section .text, align 4, keep-with-next
    178          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    179            LCD_PIXELINDEX PixelIndex;
    180            LCD_PIXELINDEX IndexMask;
    181          
    182            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080096E5           LDR      R0,[R6, #+8]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   101090E5           LDR      R1,[R0, #+16]
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   011041E2           SUB      R1,R1,#+1
   \   0000001C   142090E5           LDR      R2,[R0, #+20]
   \   00000020   051041E0           SUB      R1,R1,R5
   \   00000024   924121E0           MLA      R1,R2,R1,R4
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   04D04DE2           SUB      SP,SP,#+4
   \   00000030   017190E7           LDR      R7,[R0, +R1, LSL #+2]
    183            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000034   100096E5           LDR      R0,[R6, #+16]
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   30FF2FE1           BLX      R0
    184            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000040   081096E5           LDR      R1,[R6, #+8]
   \   00000044   070020E0           EOR      R0,R0,R7
   \   00000048   102091E5           LDR      R2,[R1, #+16]
   \   0000004C   143091E5           LDR      R3,[R1, #+20]
   \   00000050   012042E2           SUB      R2,R2,#+1
   \   00000054   052042E0           SUB      R2,R2,R5
   \   00000058   934222E0           MLA      R2,R3,R2,R4
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
    185          }
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   00000068   F080BDE8           POP      {R4-R7,PC}       ;; return
    186          
    187          /*********************************************************************
    188          *
    189          *       _DrawHLine
    190          */

   \                                 In section .text, align 4, keep-with-next
    191          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    192            DRIVER_CONTEXT * pContext;
    193            register LCD_PIXELINDEX Color;
    194            U32 * pDest;
    195            U32 Off, RemPixels;
    196            LCD_PIXELINDEX ColorIndex;
    197          
    198            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0240A0E1           MOV      R4,R2
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1900000A           BEQ      ??_DrawHLine_0
   \   00000024   060055E1           CMP      R5,R6
   \   00000028   3E0000BA           BLT      ??_DrawHLine_1
    199              for (; x0 <= x1; x0++) {
    200                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   080097E5           LDR      R0,[R7, #+8]
   \   00000030   101090E5           LDR      R1,[R0, #+16]
   \   00000034   142090E5           LDR      R2,[R0, #+20]
   \   00000038   011041E2           SUB      R1,R1,#+1
   \   0000003C   041041E0           SUB      R1,R1,R4
   \   00000040   926121E0           MLA      R1,R2,R1,R6
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   018190E7           LDR      R8,[R0, +R1, LSL #+2]
   \   0000004C   100097E5           LDR      R0,[R7, #+16]
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   30FF2FE1           BLX      R0
   \   00000058   081097E5           LDR      R1,[R7, #+8]
   \   0000005C   080020E0           EOR      R0,R0,R8
   \   00000060   102091E5           LDR      R2,[R1, #+16]
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   012042E2           SUB      R2,R2,#+1
   \   0000006C   042042E0           SUB      R2,R2,R4
   \   00000070   936222E0           MLA      R2,R3,R2,R6
   \   00000074   001091E5           LDR      R1,[R1, #+0]
    201              }
   \   00000078   016086E2           ADD      R6,R6,#+1
   \   0000007C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   00000080   060055E1           CMP      R5,R6
   \   00000084   E8FFFFAA           BGE      ??_DrawHLine_2
   \   00000088   F081BDE8           POP      {R4-R8,PC}
    202            } else {
    203              ColorIndex = LCD__GetColorIndex();
    204              //
    205              // Get context
    206              //
    207              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawHLine_0:
   \   0000008C   081097E5           LDR      R1,[R7, #+8]
   \   00000090   ........           LDR      R0,??DataTable15_1
    208              //
    209              // Mirror y
    210              //
    211              y = (pContext->vySize - 1 - (y));
    212              Color = ColorIndex;
    213              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
    214              pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000094   102091E5           LDR      R2,[R1, #+16]
   \   00000098   143091E5           LDR      R3,[R1, #+20]
   \   0000009C   012042E2           SUB      R2,R2,#+1
   \   000000A0   042042E0           SUB      R2,R2,R4
   \   000000A4   936222E0           MLA      R2,R3,R2,R6
   \   000000A8   001091E5           LDR      R1,[R1, #+0]
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   021181E0           ADD      R1,R1,R2, LSL #+2
    215              RemPixels = x1 - x0 + 1;
   \   000000B4   062045E0           SUB      R2,R5,R6
   \   000000B8   012082E2           ADD      R2,R2,#+1
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
    216              if (RemPixels >= 16) {
   \   000000C0   100052E3           CMP      R2,#+16
   \   000000C4   1200003A           BCC      ??_DrawHLine_3
    217                do {
    218                  WRITE_MEM32P(pDest     , Color);
   \                     ??_DrawHLine_4:
   \   000000C8   040081E4           STR      R0,[R1], #+4
    219                  WRITE_MEM32P(pDest +  1, Color);
   \   000000CC   040081E4           STR      R0,[R1], #+4
    220                  WRITE_MEM32P(pDest +  2, Color);
   \   000000D0   040081E4           STR      R0,[R1], #+4
    221                  WRITE_MEM32P(pDest +  3, Color);
   \   000000D4   040081E4           STR      R0,[R1], #+4
    222                  WRITE_MEM32P(pDest +  4, Color);
   \   000000D8   040081E4           STR      R0,[R1], #+4
    223                  WRITE_MEM32P(pDest +  5, Color);
   \   000000DC   040081E4           STR      R0,[R1], #+4
    224                  WRITE_MEM32P(pDest +  6, Color);
   \   000000E0   040081E4           STR      R0,[R1], #+4
    225                  WRITE_MEM32P(pDest +  7, Color);
   \   000000E4   040081E4           STR      R0,[R1], #+4
    226                  WRITE_MEM32P(pDest +  8, Color);
   \   000000E8   040081E4           STR      R0,[R1], #+4
    227                  WRITE_MEM32P(pDest +  9, Color);
   \   000000EC   040081E4           STR      R0,[R1], #+4
    228                  WRITE_MEM32P(pDest + 10, Color);
   \   000000F0   040081E4           STR      R0,[R1], #+4
    229                  WRITE_MEM32P(pDest + 11, Color);
   \   000000F4   040081E4           STR      R0,[R1], #+4
    230                  WRITE_MEM32P(pDest + 12, Color);
   \   000000F8   040081E4           STR      R0,[R1], #+4
    231                  WRITE_MEM32P(pDest + 13, Color);
   \   000000FC   040081E4           STR      R0,[R1], #+4
    232                  WRITE_MEM32P(pDest + 14, Color);
   \   00000100   040081E4           STR      R0,[R1], #+4
    233                  WRITE_MEM32P(pDest + 15, Color);
    234                  pDest += 16;
    235                  RemPixels -= 16;
   \   00000104   102042E2           SUB      R2,R2,#+16
   \   00000108   040081E4           STR      R0,[R1], #+4
    236                } while (RemPixels >= 16);
   \   0000010C   100052E3           CMP      R2,#+16
   \   00000110   ECFFFF2A           BCS      ??_DrawHLine_4
    237              }
    238              if (RemPixels) {
   \                     ??_DrawHLine_3:
   \   00000114   000052E3           CMP      R2,#+0
   \   00000118   0200000A           BEQ      ??_DrawHLine_1
    239                do {
    240                  WRITE_MEM32P(pDest, ColorIndex);
   \                     ??_DrawHLine_5:
   \   0000011C   040081E4           STR      R0,[R1], #+4
    241                  pDest++;
    242                } while (--RemPixels);
   \   00000120   012052E2           SUBS     R2,R2,#+1
   \   00000124   FCFFFF1A           BNE      ??_DrawHLine_5
    243              }
    244            }
    245          }
   \                     ??_DrawHLine_1:
   \   00000128   F081BDE8           POP      {R4-R8,PC}       ;; return
    246          
    247          /*********************************************************************
    248          *
    249          *       _DrawVLine, not optimized
    250          */

   \                                 In section .text, align 4, keep-with-next
    251          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    252            LCD_PIXELINDEX ColorIndex;
    253          
    254            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable15
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1900000A           BEQ      ??_DrawVLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   270000BA           BLT      ??_DrawVLine_1
    255              for (; y0 <= y1; y0++) {
    256                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   101090E5           LDR      R1,[R0, #+16]
   \   00000034   142090E5           LDR      R2,[R0, #+20]
   \   00000038   011041E2           SUB      R1,R1,#+1
   \   0000003C   071041E0           SUB      R1,R1,R7
   \   00000040   925121E0           MLA      R1,R2,R1,R5
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   018190E7           LDR      R8,[R0, +R1, LSL #+2]
   \   0000004C   100094E5           LDR      R0,[R4, #+16]
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   30FF2FE1           BLX      R0
   \   00000058   081094E5           LDR      R1,[R4, #+8]
   \   0000005C   080020E0           EOR      R0,R0,R8
   \   00000060   102091E5           LDR      R2,[R1, #+16]
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   012042E2           SUB      R2,R2,#+1
   \   0000006C   072042E0           SUB      R2,R2,R7
   \   00000070   935222E0           MLA      R2,R3,R2,R5
   \   00000074   001091E5           LDR      R1,[R1, #+0]
    257              }
   \   00000078   017087E2           ADD      R7,R7,#+1
   \   0000007C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   00000080   070056E1           CMP      R6,R7
   \   00000084   E8FFFFAA           BGE      ??_DrawVLine_2
   \   00000088   F081BDE8           POP      {R4-R8,PC}
    258            } else {
    259              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   0000008C   ........           LDR      R0,??DataTable15_1
   \   00000090   070056E1           CMP      R6,R7
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   0A0000BA           BLT      ??_DrawVLine_1
    260              for (; y0 <= y1; y0++) {
    261                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   000000A0   081094E5           LDR      R1,[R4, #+8]
   \   000000A4   102091E5           LDR      R2,[R1, #+16]
   \   000000A8   143091E5           LDR      R3,[R1, #+20]
   \   000000AC   012042E2           SUB      R2,R2,#+1
   \   000000B0   072042E0           SUB      R2,R2,R7
   \   000000B4   935222E0           MLA      R2,R3,R2,R5
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
    262              }
   \   000000BC   017087E2           ADD      R7,R7,#+1
   \   000000C0   020181E7           STR      R0,[R1, +R2, LSL #+2]
   \   000000C4   070056E1           CMP      R6,R7
   \   000000C8   F4FFFFAA           BGE      ??_DrawVLine_3
    263            }
    264          }
   \                     ??_DrawVLine_1:
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    265          
    266          /*********************************************************************
    267          *
    268          *       _FillRect
    269          */

   \                                 In section .text, align 4, keep-with-next
    270          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18809DE5           LDR      R8,[SP, #+24]
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   060058E1           CMP      R8,R6
   \   0000001C   070000BA           BLT      ??_FillRect_0
    271            #ifdef LCD_FILL_RECT
    272               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    273            #else
    274              for (; y0 <= y1; y0++) {
    275                _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_1:
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawHLine
    276              }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   060058E1           CMP      R8,R6
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    277            #endif
    278          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    279          
    280          /*********************************************************************
    281          *
    282          *       Draw Bitmap 1 BPP
    283          */

   \                                 In section .text, align 4, keep-with-next
    284          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20709DE5           LDR      R7,[SP, #+32]
   \   00000008   0250A0E1           MOV      R5,R2
    285            DRIVER_CONTEXT * pContext;
    286            LCD_PIXELINDEX Index0, Index1, IndexMask;
    287            U32 * pDest;
    288            U32 Color;
    289            unsigned Pixels, PixelCnt, Off;
    290          
    291            Index0 = *(pTrans + 0);
    292            Index1 = *(pTrans + 1);
    293            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    294            x += Diff;
   \   0000000C   019087E0           ADD      R9,R7,R1
    295            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000010   ........           LDR      R1,??DataTable15
   \   00000014   28209DE5           LDR      R2,[SP, #+40]
   \   00000018   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0360A0E1           MOV      R6,R3
   \   00000024   000092E5           LDR      R0,[R2, #+0]
   \   00000028   031001E2           AND      R1,R1,#0x3
   \   0000002C   24809DE5           LDR      R8,[SP, #+36]
   \   00000030   042092E5           LDR      R2,[R2, #+4]
   \   00000034   083094E5           LDR      R3,[R4, #+8]
   \   00000038   030051E3           CMP      R1,#+3
   \   0000003C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000040   4F00008A           BHI      ??_DrawBitLine1BPP_1
   \   00000044   020000EA           B        ??_DrawBitLine1BPP_2
   \   00000048   300000EA           B        ??_DrawBitLine1BPP_3
   \   0000004C   180000EA           B        ??_DrawBitLine1BPP_4
   \   00000050   2E0000EA           B        ??_DrawBitLine1BPP_3
    296            case 0:
    297              y = (pContext->vySize - 1 - (y));
    298              PixelCnt = 8 - Diff;
    299              Pixels   = LCD_aMirror[*p] >> Diff;
    300              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    301              pDest    = OFF2PTR32(pContext->VRAMAddr, Off);
   \                     ??_DrawBitLine1BPP_2:
   \   00000054   104093E5           LDR      R4,[R3, #+16]
   \   00000058   00E0D6E5           LDRB     LR,[R6, #+0]
   \   0000005C   014044E2           SUB      R4,R4,#+1
   \   00000060   054044E0           SUB      R4,R4,R5
   \   00000064   ........           LDR      R12,??DataTable16
   \   00000068   145093E5           LDR      R5,[R3, #+20]
   \   0000006C   0CE0DEE7           LDRB     LR,[LR, +R12]
   \   00000070   959424E0           MLA      R4,R5,R4,R9
   \   00000074   003093E5           LDR      R3,[R3, #+0]
   \   00000078   081067E2           RSB      R1,R7,#+8
   \   0000007C   5EE7A0E1           ASR      LR,LR,R7
   \   00000080   043183E0           ADD      R3,R3,R4, LSL #+2
    302              do {
    303                Color    = (Pixels & 1) ? Index1 : Index0;
   \                     ??_DrawBitLine1BPP_5:
   \   00000084   01001EE3           TST      LR,#0x1
   \   00000088   0240A011           MOVNE    R4,R2
   \   0000008C   0040A001           MOVEQ    R4,R0
    304                Pixels >>= 1;
    305                if (--PixelCnt == 0) {
   \   00000090   011051E2           SUBS     R1,R1,#+1
    306                  Pixels = LCD_aMirror[*(++p)];
   \   00000094   0110F605           LDRBEQ   R1,[R6, #+1]!
   \   00000098   AEE0A0E1           LSR      LR,LR,#+1
   \   0000009C   0CE0D107           LDRBEQ   LR,[R1, +R12]
    307                  PixelCnt = 8;
   \   000000A0   0810A003           MOVEQ    R1,#+8
    308                }
    309                WRITE_MEM32P(pDest, Color);
   \   000000A4   044083E4           STR      R4,[R3], #+4
    310                pDest++;
    311              } while (--xsize);
   \   000000A8   018058E2           SUBS     R8,R8,#+1
   \   000000AC   F4FFFF1A           BNE      ??_DrawBitLine1BPP_5
   \   000000B0   F087BDE8           POP      {R4-R10,PC}
    312              break;
    313            case LCD_DRAWMODE_TRANS:
    314              y = (pContext->vySize - 1 - (y));
    315              PixelCnt = 8 - Diff;
    316              Pixels   = LCD_aMirror[*p] >> Diff;
   \                     ??_DrawBitLine1BPP_4:
   \   000000B4   0000D6E5           LDRB     R0,[R6, #+0]
   \   000000B8   ........           LDR      R12,??DataTable16
    317              Off      = XY2OFF32(pContext->vxSizePhys, x, y);
    318              pDest    = OFF2PTR32(pContext->VRAMAddr, Off);
   \   000000BC   144093E5           LDR      R4,[R3, #+20]
   \   000000C0   0C00D0E7           LDRB     R0,[R0, +R12]
   \   000000C4   081067E2           RSB      R1,R7,#+8
   \   000000C8   50E7A0E1           ASR      LR,R0,R7
   \   000000CC   100093E5           LDR      R0,[R3, #+16]
   \   000000D0   003093E5           LDR      R3,[R3, #+0]
   \   000000D4   010040E2           SUB      R0,R0,#+1
   \   000000D8   050040E0           SUB      R0,R0,R5
   \   000000DC   949020E0           MLA      R0,R4,R0,R9
   \   000000E0   003183E0           ADD      R3,R3,R0, LSL #+2
    319              do {
    320                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_6:
   \   000000E4   01001EE3           TST      LR,#0x1
    321                  WRITE_MEM32P(pDest, Index1);
   \   000000E8   00208315           STRNE    R2,[R3, #+0]
    322                }
    323                pDest++;
    324                Pixels >>= 1;
    325                if (--PixelCnt == 0) {
   \   000000EC   011051E2           SUBS     R1,R1,#+1
    326                  Pixels = LCD_aMirror[*(++p)];
   \   000000F0   0100F605           LDRBEQ   R0,[R6, #+1]!
   \   000000F4   AEE0A0E1           LSR      LR,LR,#+1
    327                  PixelCnt = 8;
   \   000000F8   0810A003           MOVEQ    R1,#+8
   \   000000FC   0CE0D007           LDRBEQ   LR,[R0, +R12]
   \   00000100   043083E2           ADD      R3,R3,#+4
    328                }
    329              } while (--xsize);
   \   00000104   018058E2           SUBS     R8,R8,#+1
   \   00000108   F5FFFF1A           BNE      ??_DrawBitLine1BPP_6
   \   0000010C   F087BDE8           POP      {R4-R10,PC}
    330              break;
    331            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    332            case LCD_DRAWMODE_XOR:
    333              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_3:
   \   00000110   100094E5           LDR      R0,[R4, #+16]
   \   00000114   080090E5           LDR      R0,[R0, #+8]
   \   00000118   30FF2FE1           BLX      R0
   \   0000011C   8010A0E3           MOV      R1,#+128
    334              do {
    335                if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_7:
   \   00000120   0020D6E5           LDRB     R2,[R6, #+0]
   \   00000124   510712E1           TST      R2,R1, ASR R7
   \   00000128   0E00000A           BEQ      ??_DrawBitLine1BPP_8
    336                  int Pixel = _GetPixelIndex(pDevice, x, y);
   \   0000012C   082094E5           LDR      R2,[R4, #+8]
    337                  _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
   \   00000130   103092E5           LDR      R3,[R2, #+16]
   \   00000134   10E092E5           LDR      LR,[R2, #+16]
   \   00000138   013043E2           SUB      R3,R3,#+1
   \   0000013C   14C092E5           LDR      R12,[R2, #+20]
   \   00000140   053043E0           SUB      R3,R3,R5
   \   00000144   01E04EE2           SUB      LR,LR,#+1
   \   00000148   14A092E5           LDR      R10,[R2, #+20]
   \   0000014C   9C9323E0           MLA      R3,R12,R3,R9
   \   00000150   05E04EE0           SUB      LR,LR,R5
   \   00000154   9A9E2EE0           MLA      LR,R10,LR,R9
   \   00000158   00C092E5           LDR      R12,[R2, #+0]
   \   0000015C   0E219CE7           LDR      R2,[R12, +LR, LSL #+2]
   \   00000160   022020E0           EOR      R2,R0,R2
   \   00000164   03218CE7           STR      R2,[R12, +R3, LSL #+2]
    338                }
    339                x++;
    340                if (++Diff == 8) {
   \                     ??_DrawBitLine1BPP_8:
   \   00000168   017087E2           ADD      R7,R7,#+1
   \   0000016C   080057E3           CMP      R7,#+8
    341                  Diff = 0;
   \   00000170   0070A003           MOVEQ    R7,#+0
    342                  p++;
   \   00000174   01608602           ADDEQ    R6,R6,#+1
   \   00000178   019089E2           ADD      R9,R9,#+1
    343                }
    344              } while (--xsize);
   \   0000017C   018058E2           SUBS     R8,R8,#+1
   \   00000180   E6FFFF1A           BNE      ??_DrawBitLine1BPP_7
    345              break;
    346            }
    347          }
   \                     ??_DrawBitLine1BPP_1:
   \   00000184   F087BDE8           POP      {R4-R10,PC}      ;; return
    348          
    349          /*********************************************************************
    350          *
    351          *       Draw Bitmap 2 BPP
    352          */

   \                                 In section .text, align 4, keep-with-next
    353          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   18409DE5           LDR      R4,[SP, #+24]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   \   0000000C   14E09DE5           LDR      LR,[SP, #+20]
    354            DRIVER_CONTEXT * pContext;
    355            LCD_PIXELINDEX Pixels, PixelIndex;
    356            int CurrentPixel, Shift, Index;
    357            U32 * pDest;
    358            U32 Off;
    359          
    360            if (pTrans == NULL) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3000000A           BEQ      ??_DrawBitLine2BPP_0
    361              return; // pTrans is required
    362            }
    363            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000018   085090E5           LDR      R5,[R0, #+8]
    364            y = (pContext->vySize - 1 - (y));
    365            CurrentPixel = Diff;
    366            Pixels       = *p;
    367            x           += Diff;
    368            Off          = XY2OFF32(pContext->vxSizePhys, x, y);
    369            pDest        = OFF2PTR32(pContext->VRAMAddr, Off);
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   106095E5           LDR      R6,[R5, #+16]
   \   00000024   0000D3E5           LDRB     R0,[R3, #+0]
   \   00000028   016046E2           SUB      R6,R6,#+1
   \   0000002C   022046E0           SUB      R2,R6,R2
   \   00000030   146095E5           LDR      R6,[R5, #+20]
   \   00000034   961221E0           MLA      R1,R6,R2,R1
   \   00000038   002095E5           LDR      R2,[R5, #+0]
   \   0000003C   011182E0           ADD      R1,R2,R1, LSL #+2
    370            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000040   ........           LDR      R2,??DataTable15
   \   00000044   1020D2E5           LDRB     R2,[R2, #+16]
   \   00000048   032012E2           ANDS     R2,R2,#0x3
   \   0000004C   0200000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000050   022052E2           SUBS     R2,R2,#+2
   \   00000054   1000000A           BEQ      ??_DrawBitLine2BPP_2
   \   00000058   7080BDE8           POP      {R4-R6,PC}
    371            case 0:
    372              do {
    373                Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_1:
   \   0000005C   03206CE2           RSB      R2,R12,#+3
   \   00000060   8220A0E1           LSL      R2,R2,#+1
    374                Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    375                PixelIndex = *(pTrans + Index);
    376                WRITE_MEM32P(pDest, PixelIndex);
   \   00000064   0260A0E1           MOV      R6,R2
   \   00000068   C050A0E3           MOV      R5,#+192
   \   0000006C   066066E2           RSB      R6,R6,#+6
   \   00000070   555600E0           AND      R5,R0,R5, ASR R6
   \   00000074   3522A0E1           LSR      R2,R5,R2
   \   00000078   022194E7           LDR      R2,[R4, +R2, LSL #+2]
    377                pDest++;
    378                if (++CurrentPixel == 4) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   042081E4           STR      R2,[R1], #+4
   \   00000084   04005CE3           CMP      R12,#+4
    379                  CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    380                  Pixels = *(++p);
   \   0000008C   0100F305           LDRBEQ   R0,[R3, #+1]!
    381                }
    382          		} while (--xsize);
   \   00000090   01E05EE2           SUBS     LR,LR,#+1
   \   00000094   F0FFFF1A           BNE      ??_DrawBitLine2BPP_1
   \   00000098   7080BDE8           POP      {R4-R6,PC}
    383              break;
    384            case LCD_DRAWMODE_TRANS:
    385              do {
    386                Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_2:
   \   0000009C   03206CE2           RSB      R2,R12,#+3
   \   000000A0   8220A0E1           LSL      R2,R2,#+1
    387                Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   000000A4   0260A0E1           MOV      R6,R2
   \   000000A8   C050A0E3           MOV      R5,#+192
   \   000000AC   066066E2           RSB      R6,R6,#+6
   \   000000B0   555600E0           AND      R5,R0,R5, ASR R6
   \   000000B4   3522B0E1           LSRS     R2,R5,R2
    388                if (Index) {
    389                  PixelIndex = *(pTrans + Index);
    390                  WRITE_MEM32P(pDest, PixelIndex);
   \   000000B8   02219417           LDRNE    R2,[R4, +R2, LSL #+2]
    391                }
    392                pDest++;
    393                if (++CurrentPixel == 4) {
   \   000000BC   01C08CE2           ADD      R12,R12,#+1
   \   000000C0   00208115           STRNE    R2,[R1, #+0]
   \   000000C4   04005CE3           CMP      R12,#+4
    394                  CurrentPixel = 0;
   \   000000C8   00C0A003           MOVEQ    R12,#+0
    395                  Pixels = *(++p);
   \   000000CC   0100F305           LDRBEQ   R0,[R3, #+1]!
   \   000000D0   041081E2           ADD      R1,R1,#+4
    396                }
    397          		} while (--xsize);
   \   000000D4   01E05EE2           SUBS     LR,LR,#+1
   \   000000D8   EFFFFF1A           BNE      ??_DrawBitLine2BPP_2
   \                     ??_DrawBitLine2BPP_0:
   \   000000DC   7080BDE8           POP      {R4-R6,PC}       ;; return
    398              break;
    399            }
    400          }
    401          
    402          /*********************************************************************
    403          *
    404          *       Draw Bitmap 4 BPP
    405          */

   \                                 In section .text, align 4, keep-with-next
    406          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   18409DE5           LDR      R4,[SP, #+24]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   \   0000000C   14E09DE5           LDR      LR,[SP, #+20]
    407            DRIVER_CONTEXT * pContext;
    408            LCD_PIXELINDEX Pixels, PixelIndex;
    409            int CurrentPixel, Shift, Index;
    410            U32 * pDest;
    411            U32 Off;
    412          
    413            if (pTrans == NULL) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3000000A           BEQ      ??_DrawBitLine4BPP_0
    414              return; // pTrans is required
    415            }
    416            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000018   085090E5           LDR      R5,[R0, #+8]
    417            y = (pContext->vySize - 1 - (y));
    418            Pixels       = *p;
    419            CurrentPixel = Diff;
    420            x           += Diff;
    421            Off          = XY2OFF32(pContext->vxSizePhys, x, y);
    422            pDest        = OFF2PTR32(pContext->VRAMAddr, Off);
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   106095E5           LDR      R6,[R5, #+16]
   \   00000024   0000D3E5           LDRB     R0,[R3, #+0]
   \   00000028   016046E2           SUB      R6,R6,#+1
   \   0000002C   022046E0           SUB      R2,R6,R2
   \   00000030   146095E5           LDR      R6,[R5, #+20]
   \   00000034   961221E0           MLA      R1,R6,R2,R1
   \   00000038   002095E5           LDR      R2,[R5, #+0]
   \   0000003C   011182E0           ADD      R1,R2,R1, LSL #+2
    423            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000040   ........           LDR      R2,??DataTable15
   \   00000044   1020D2E5           LDRB     R2,[R2, #+16]
   \   00000048   032012E2           ANDS     R2,R2,#0x3
   \   0000004C   0200000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000050   022052E2           SUBS     R2,R2,#+2
   \   00000054   1000000A           BEQ      ??_DrawBitLine4BPP_2
   \   00000058   7080BDE8           POP      {R4-R6,PC}
    424            case 0:
    425              do {
    426                Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_1:
   \   0000005C   01206CE2           RSB      R2,R12,#+1
   \   00000060   0221A0E1           LSL      R2,R2,#+2
    427                Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    428                PixelIndex = *(pTrans + Index);
    429                WRITE_MEM32P(pDest, PixelIndex);
   \   00000064   0260A0E1           MOV      R6,R2
   \   00000068   F050A0E3           MOV      R5,#+240
   \   0000006C   046066E2           RSB      R6,R6,#+4
   \   00000070   555600E0           AND      R5,R0,R5, ASR R6
   \   00000074   3522A0E1           LSR      R2,R5,R2
   \   00000078   022194E7           LDR      R2,[R4, +R2, LSL #+2]
    430                pDest++;
    431                if (++CurrentPixel == 2) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   042081E4           STR      R2,[R1], #+4
   \   00000084   02005CE3           CMP      R12,#+2
    432                  CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    433                  Pixels = *(++p);
   \   0000008C   0100F305           LDRBEQ   R0,[R3, #+1]!
    434                }
    435          		} while (--xsize);
   \   00000090   01E05EE2           SUBS     LR,LR,#+1
   \   00000094   F0FFFF1A           BNE      ??_DrawBitLine4BPP_1
   \   00000098   7080BDE8           POP      {R4-R6,PC}
    436              break;
    437            case LCD_DRAWMODE_TRANS:
    438              do {
    439                Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_2:
   \   0000009C   01206CE2           RSB      R2,R12,#+1
   \   000000A0   0221A0E1           LSL      R2,R2,#+2
    440                Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   000000A4   0260A0E1           MOV      R6,R2
   \   000000A8   F050A0E3           MOV      R5,#+240
   \   000000AC   046066E2           RSB      R6,R6,#+4
   \   000000B0   555600E0           AND      R5,R0,R5, ASR R6
   \   000000B4   3522B0E1           LSRS     R2,R5,R2
    441                if (Index) {
    442                  PixelIndex = *(pTrans + Index);
    443                  WRITE_MEM32P(pDest, PixelIndex);
   \   000000B8   02219417           LDRNE    R2,[R4, +R2, LSL #+2]
    444                }
    445                pDest++;
    446                if (++CurrentPixel == 2) {
   \   000000BC   01C08CE2           ADD      R12,R12,#+1
   \   000000C0   00208115           STRNE    R2,[R1, #+0]
   \   000000C4   02005CE3           CMP      R12,#+2
    447                  CurrentPixel = 0;
   \   000000C8   00C0A003           MOVEQ    R12,#+0
    448                  Pixels = *(++p);
   \   000000CC   0100F305           LDRBEQ   R0,[R3, #+1]!
   \   000000D0   041081E2           ADD      R1,R1,#+4
    449                }
    450          		} while (--xsize);
   \   000000D4   01E05EE2           SUBS     LR,LR,#+1
   \   000000D8   EFFFFF1A           BNE      ??_DrawBitLine4BPP_2
   \                     ??_DrawBitLine4BPP_0:
   \   000000DC   7080BDE8           POP      {R4-R6,PC}       ;; return
    451              break;
    452            }
    453          }
    454          
    455          /*********************************************************************
    456          *
    457          *       Draw Bitmap 8 BPP
    458          */

   \                                 In section .text, align 4, keep-with-next
    459          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0CE09DE5           LDR      LR,[SP, #+12]
   \   00000008   08C09DE5           LDR      R12,[SP, #+8]
    460            DRIVER_CONTEXT * pContext;
    461            LCD_PIXELINDEX Pixel;
    462            register U32 Off;
    463            U32 * pDest;
    464          
    465            if (!pTrans) {
   \   0000000C   00005EE3           CMP      LR,#+0
   \   00000010   5000000A           BEQ      ??_DrawBitLine8BPP_0
    466              return; // No translation from 8bpp BMP to 16bpp device makes no sense
    467            }
    468            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000014   080090E5           LDR      R0,[R0, #+8]
    469            y = (pContext->vySize - 1 - (y));
    470            Off   = XY2OFF32(pContext->vxSizePhys, x,y);
    471            pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   00000018   104090E5           LDR      R4,[R0, #+16]
   \   0000001C   014044E2           SUB      R4,R4,#+1
   \   00000020   022044E0           SUB      R2,R4,R2
   \   00000024   144090E5           LDR      R4,[R0, #+20]
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   941221E0           MLA      R1,R4,R2,R1
   \   00000030   010180E0           ADD      R0,R0,R1, LSL #+2
    472            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000034   ........           LDR      R1,??DataTable15
   \   00000038   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000003C   031011E2           ANDS     R1,R1,#0x3
   \   00000040   0200000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000044   021051E2           SUBS     R1,R1,#+2
   \   00000048   3700000A           BEQ      ??_DrawBitLine8BPP_2
   \   0000004C   1080BDE8           POP      {R4,PC}
    473            case 0:
    474              while (xsize >= 8) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000050   08005CE3           CMP      R12,#+8
   \   00000054   180000AA           BGE      ??_DrawBitLine8BPP_3
   \                     ??_DrawBitLine8BPP_4:
   \   00000058   04005CE3           CMP      R12,#+4
   \   0000005C   0E0000BA           BLT      ??_DrawBitLine8BPP_5
    475                WRITE_MEM32P(pDest + 0, *(pTrans + *(p + 0)));
    476                WRITE_MEM32P(pDest + 1, *(pTrans + *(p + 1)));
    477                WRITE_MEM32P(pDest + 2, *(pTrans + *(p + 2)));
    478                WRITE_MEM32P(pDest + 3, *(pTrans + *(p + 3)));
    479                WRITE_MEM32P(pDest + 4, *(pTrans + *(p + 4)));
    480                WRITE_MEM32P(pDest + 5, *(pTrans + *(p + 5)));
    481                WRITE_MEM32P(pDest + 6, *(pTrans + *(p + 6)));
    482                WRITE_MEM32P(pDest + 7, *(pTrans + *(p + 7)));
    483                xsize -= 8;
    484                p     += 8;
    485                pDest += 8;
    486              }
    487              while (xsize >= 4) {
    488                WRITE_MEM32P(pDest + 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_6:
   \   00000060   0110D3E4           LDRB     R1,[R3], #+1
    489                WRITE_MEM32P(pDest + 1, *(pTrans + *(p + 1)));
    490                WRITE_MEM32P(pDest + 2, *(pTrans + *(p + 2)));
    491                WRITE_MEM32P(pDest + 3, *(pTrans + *(p + 3)));
    492                xsize -= 4;
   \   00000064   04C04CE2           SUB      R12,R12,#+4
    493                p     += 4;
    494                pDest += 4;
   \   00000068   04005CE3           CMP      R12,#+4
   \   0000006C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000070   041080E4           STR      R1,[R0], #+4
   \   00000074   0110D3E4           LDRB     R1,[R3], #+1
   \   00000078   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   0000007C   041080E4           STR      R1,[R0], #+4
   \   00000080   0110D3E4           LDRB     R1,[R3], #+1
   \   00000084   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000088   041080E4           STR      R1,[R0], #+4
   \   0000008C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000090   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000094   041080E4           STR      R1,[R0], #+4
   \   00000098   F0FFFFAA           BGE      ??_DrawBitLine8BPP_6
    495              }
    496              while (xsize) {
   \                     ??_DrawBitLine8BPP_5:
   \   0000009C   00005CE3           CMP      R12,#+0
   \   000000A0   2C00000A           BEQ      ??_DrawBitLine8BPP_0
    497                WRITE_MEM32P(pDest + 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_7:
   \   000000A4   0110D3E4           LDRB     R1,[R3], #+1
    498                xsize--;
   \   000000A8   01C05CE2           SUBS     R12,R12,#+1
   \   000000AC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000B0   041080E4           STR      R1,[R0], #+4
    499                p++;
    500                pDest++;
   \   000000B4   FAFFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   000000B8   1080BDE8           POP      {R4,PC}
    501              }
   \                     ??_DrawBitLine8BPP_3:
   \   000000BC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000C0   08C04CE2           SUB      R12,R12,#+8
   \   000000C4   08005CE3           CMP      R12,#+8
   \   000000C8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000CC   041080E4           STR      R1,[R0], #+4
   \   000000D0   0110D3E4           LDRB     R1,[R3], #+1
   \   000000D4   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000D8   041080E4           STR      R1,[R0], #+4
   \   000000DC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000E0   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000E4   041080E4           STR      R1,[R0], #+4
   \   000000E8   0110D3E4           LDRB     R1,[R3], #+1
   \   000000EC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000F0   041080E4           STR      R1,[R0], #+4
   \   000000F4   0110D3E4           LDRB     R1,[R3], #+1
   \   000000F8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000FC   041080E4           STR      R1,[R0], #+4
   \   00000100   0110D3E4           LDRB     R1,[R3], #+1
   \   00000104   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000108   041080E4           STR      R1,[R0], #+4
   \   0000010C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000110   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000114   041080E4           STR      R1,[R0], #+4
   \   00000118   0110D3E4           LDRB     R1,[R3], #+1
   \   0000011C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000120   041080E4           STR      R1,[R0], #+4
   \   00000124   E4FFFFAA           BGE      ??_DrawBitLine8BPP_3
   \   00000128   CAFFFFEA           B        ??_DrawBitLine8BPP_4
    502              break;
    503            case LCD_DRAWMODE_TRANS:
    504              for (; xsize > 0; xsize--, p++, pDest++) {
   \                     ??_DrawBitLine8BPP_2:
   \   0000012C   01005CE3           CMP      R12,#+1
   \   00000130   080000BA           BLT      ??_DrawBitLine8BPP_0
    505                Pixel = *p;
    506                if (Pixel) {
   \                     ??_DrawBitLine8BPP_8:
   \   00000134   0010D3E5           LDRB     R1,[R3, #+0]
    507                  WRITE_MEM32P(pDest, *(pTrans + *p));
    508                }
    509              }
   \   00000138   01C04CE2           SUB      R12,R12,#+1
   \   0000013C   013083E2           ADD      R3,R3,#+1
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   01119E17           LDRNE    R1,[LR, +R1, LSL #+2]
   \   00000148   00108015           STRNE    R1,[R0, #+0]
   \   0000014C   040080E2           ADD      R0,R0,#+4
   \   00000150   01005CE3           CMP      R12,#+1
   \   00000154   F6FFFFAA           BGE      ??_DrawBitLine8BPP_8
   \                     ??_DrawBitLine8BPP_0:
   \   00000158   1080BDE8           POP      {R4,PC}          ;; return
    510              break;
    511            }
    512          }
    513          
    514          /*********************************************************************
    515          *
    516          *       Draw Bitmap 32 BPP, not optimized
    517          */
    518          static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const GUI_UNI_PTR * p, int xsize) {
    519            for (;xsize > 0; xsize--, x++, p++) {
    520              _SetPixelIndex(pDevice, x, y, *p);
    521            }
    522          }
    523          
    524          /*********************************************************************
    525          *
    526          *       _DrawBitmap
    527          */

   \                                 In section .text, align 4, keep-with-next
    528          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    529                                 int xSize, int ySize,
    530                                 int BitsPerPixel, 
    531                                 int BytesPerLine,
    532                                 const U8 GUI_UNI_PTR * pData, int Diff,
    533                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C009DE5           LDR      R0,[SP, #+60]
   \   00000010   0150A0E1           MOV      R5,R1
    534            int i;
    535          
    536            //
    537            // Use _DrawBitLineXBPP and _DrawBitLineXBPP_Swap
    538            //
    539            switch (BitsPerPixel) {
   \   00000014   010040E2           SUB      R0,R0,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   40709DE5           LDR      R7,[SP, #+64]
   \   00000020   44809DE5           LDR      R8,[SP, #+68]
   \   00000024   48909DE5           LDR      R9,[SP, #+72]
   \   00000028   4CA09DE5           LDR      R10,[SP, #+76]
   \   0000002C   1F0050E3           CMP      R0,#+31
   \   00000030   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000034   4B00008A           BHI      ??_DrawBitmap_1
   \   00000038   1E0000EA           B        ??_DrawBitmap_2
   \   0000003C   4B0000EA           B        ??_DrawBitmap_3
   \   00000040   480000EA           B        ??_DrawBitmap_1
   \   00000044   760000EA           B        ??_DrawBitmap_4
   \   00000048   460000EA           B        ??_DrawBitmap_1
   \   0000004C   450000EA           B        ??_DrawBitmap_1
   \   00000050   440000EA           B        ??_DrawBitmap_1
   \   00000054   9F0000EA           B        ??_DrawBitmap_5
   \   00000058   420000EA           B        ??_DrawBitmap_1
   \   0000005C   410000EA           B        ??_DrawBitmap_1
   \   00000060   400000EA           B        ??_DrawBitmap_1
   \   00000064   3F0000EA           B        ??_DrawBitmap_1
   \   00000068   3E0000EA           B        ??_DrawBitmap_1
   \   0000006C   3D0000EA           B        ??_DrawBitmap_1
   \   00000070   3C0000EA           B        ??_DrawBitmap_1
   \   00000074   3B0000EA           B        ??_DrawBitmap_1
   \   00000078   3A0000EA           B        ??_DrawBitmap_1
   \   0000007C   390000EA           B        ??_DrawBitmap_1
   \   00000080   380000EA           B        ??_DrawBitmap_1
   \   00000084   370000EA           B        ??_DrawBitmap_1
   \   00000088   360000EA           B        ??_DrawBitmap_1
   \   0000008C   350000EA           B        ??_DrawBitmap_1
   \   00000090   340000EA           B        ??_DrawBitmap_1
   \   00000094   330000EA           B        ??_DrawBitmap_1
   \   00000098   320000EA           B        ??_DrawBitmap_1
   \   0000009C   310000EA           B        ??_DrawBitmap_1
   \   000000A0   300000EA           B        ??_DrawBitmap_1
   \   000000A4   2F0000EA           B        ??_DrawBitmap_1
   \   000000A8   2E0000EA           B        ??_DrawBitmap_1
   \   000000AC   2D0000EA           B        ??_DrawBitmap_1
   \   000000B0   2C0000EA           B        ??_DrawBitmap_1
   \   000000B4   AC0000EA           B        ??_DrawBitmap_6
    540            case 1:
    541              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   000000B8   38009DE5           LDR      R0,[SP, #+56]
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   280000BA           BLT      ??_DrawBitmap_1
   \   000000C4   02B0A0E1           MOV      R11,R2
   \   000000C8   10008DE5           STR      R0,[SP, #+16]
   \   000000CC   010010E3           TST      R0,#0x1
   \   000000D0   0700000A           BEQ      ??_DrawBitmap_7
    542                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000000D4   08A08DE5           STR      R10,[SP, #+8]
   \   000000D8   04608DE5           STR      R6,[SP, #+4]
   \   000000DC   00908DE5           STR      R9,[SP, #+0]
   \   000000E0   0830A0E1           MOV      R3,R8
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       _DrawBitLine1BPP
    543                pData += BytesPerLine;
   \   000000EC   088087E0           ADD      R8,R7,R8
   \   000000F0   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_7:
   \   000000F4   10109DE5           LDR      R1,[SP, #+16]
   \   000000F8   A110A0E1           LSR      R1,R1,#+1
   \   000000FC   0C108DE5           STR      R1,[SP, #+12]
   \   00000100   000051E3           CMP      R1,#+0
   \   00000104   1700000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   00000108   08A08DE5           STR      R10,[SP, #+8]
   \   0000010C   04608DE5           STR      R6,[SP, #+4]
   \   00000110   00908DE5           STR      R9,[SP, #+0]
   \   00000114   0830A0E1           MOV      R3,R8
   \   00000118   0B20A0E1           MOV      R2,R11
   \   0000011C   0510A0E1           MOV      R1,R5
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       _DrawBitLine1BPP
   \   00000128   088087E0           ADD      R8,R7,R8
   \   0000012C   08A08DE5           STR      R10,[SP, #+8]
   \   00000130   04608DE5           STR      R6,[SP, #+4]
   \   00000134   00908DE5           STR      R9,[SP, #+0]
   \   00000138   0830A0E1           MOV      R3,R8
   \   0000013C   01208BE2           ADD      R2,R11,#+1
   \   00000140   0510A0E1           MOV      R1,R5
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           BL       _DrawBitLine1BPP
    544              }
   \   0000014C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000150   088087E0           ADD      R8,R7,R8
   \   00000154   011041E2           SUB      R1,R1,#+1
   \   00000158   0C108DE5           STR      R1,[SP, #+12]
   \   0000015C   02B08BE2           ADD      R11,R11,#+2
   \   00000160   000051E3           CMP      R1,#+0
   \   00000164   E7FFFF1A           BNE      ??_DrawBitmap_8
    545              break;
    546            case 2:
    547              for (i = 0; i < ySize; i++) {
    548                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
    549                pData += BytesPerLine;
    550              }
    551              break;
    552            case 4:
    553              for (i = 0; i < ySize; i++) {
    554                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
    555                pData += BytesPerLine;
    556              }
    557              break;
    558            case 8:
    559              for (i = 0; i < ySize; i++) {
    560                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
    561                pData += BytesPerLine;
    562              }
    563              break;
    564            case 32:
    565              for (i = 0; i < ySize; i++) {
    566                _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
    567                pData += BytesPerLine;
    568              }
    569              break;
    570            }
    571          }
   \                     ??_DrawBitmap_1:
   \   00000168   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000016C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??_DrawBitmap_3:
   \   00000170   38009DE5           LDR      R0,[SP, #+56]
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   FAFFFFBA           BLT      ??_DrawBitmap_1
   \   0000017C   02B0A0E1           MOV      R11,R2
   \   00000180   10008DE5           STR      R0,[SP, #+16]
   \   00000184   010010E3           TST      R0,#0x1
   \   00000188   0700000A           BEQ      ??_DrawBitmap_9
   \   0000018C   08A08DE5           STR      R10,[SP, #+8]
   \   00000190   04608DE5           STR      R6,[SP, #+4]
   \   00000194   00908DE5           STR      R9,[SP, #+0]
   \   00000198   0830A0E1           MOV      R3,R8
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       _DrawBitLine2BPP
   \   000001A4   088087E0           ADD      R8,R7,R8
   \   000001A8   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_9:
   \   000001AC   10109DE5           LDR      R1,[SP, #+16]
   \   000001B0   A110A0E1           LSR      R1,R1,#+1
   \   000001B4   0C108DE5           STR      R1,[SP, #+12]
   \   000001B8   000051E3           CMP      R1,#+0
   \   000001BC   E9FFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   000001C0   08A08DE5           STR      R10,[SP, #+8]
   \   000001C4   04608DE5           STR      R6,[SP, #+4]
   \   000001C8   00908DE5           STR      R9,[SP, #+0]
   \   000001CC   0830A0E1           MOV      R3,R8
   \   000001D0   0B20A0E1           MOV      R2,R11
   \   000001D4   0510A0E1           MOV      R1,R5
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   ........           BL       _DrawBitLine2BPP
   \   000001E0   088087E0           ADD      R8,R7,R8
   \   000001E4   08A08DE5           STR      R10,[SP, #+8]
   \   000001E8   04608DE5           STR      R6,[SP, #+4]
   \   000001EC   00908DE5           STR      R9,[SP, #+0]
   \   000001F0   0830A0E1           MOV      R3,R8
   \   000001F4   01208BE2           ADD      R2,R11,#+1
   \   000001F8   0510A0E1           MOV      R1,R5
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       _DrawBitLine2BPP
   \   00000204   0C109DE5           LDR      R1,[SP, #+12]
   \   00000208   088087E0           ADD      R8,R7,R8
   \   0000020C   011041E2           SUB      R1,R1,#+1
   \   00000210   0C108DE5           STR      R1,[SP, #+12]
   \   00000214   02B08BE2           ADD      R11,R11,#+2
   \   00000218   000051E3           CMP      R1,#+0
   \   0000021C   E7FFFF1A           BNE      ??_DrawBitmap_10
   \   00000220   D0FFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_4:
   \   00000224   38009DE5           LDR      R0,[SP, #+56]
   \   00000228   010050E3           CMP      R0,#+1
   \   0000022C   CDFFFFBA           BLT      ??_DrawBitmap_1
   \   00000230   02B0A0E1           MOV      R11,R2
   \   00000234   10008DE5           STR      R0,[SP, #+16]
   \   00000238   010010E3           TST      R0,#0x1
   \   0000023C   0700000A           BEQ      ??_DrawBitmap_11
   \   00000240   08A08DE5           STR      R10,[SP, #+8]
   \   00000244   04608DE5           STR      R6,[SP, #+4]
   \   00000248   00908DE5           STR      R9,[SP, #+0]
   \   0000024C   0830A0E1           MOV      R3,R8
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   ........           BL       _DrawBitLine4BPP
   \   00000258   088087E0           ADD      R8,R7,R8
   \   0000025C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_11:
   \   00000260   10109DE5           LDR      R1,[SP, #+16]
   \   00000264   A110A0E1           LSR      R1,R1,#+1
   \   00000268   0C108DE5           STR      R1,[SP, #+12]
   \   0000026C   000051E3           CMP      R1,#+0
   \   00000270   BCFFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000274   08A08DE5           STR      R10,[SP, #+8]
   \   00000278   04608DE5           STR      R6,[SP, #+4]
   \   0000027C   00908DE5           STR      R9,[SP, #+0]
   \   00000280   0830A0E1           MOV      R3,R8
   \   00000284   0B20A0E1           MOV      R2,R11
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0400A0E1           MOV      R0,R4
   \   00000290   ........           BL       _DrawBitLine4BPP
   \   00000294   088087E0           ADD      R8,R7,R8
   \   00000298   08A08DE5           STR      R10,[SP, #+8]
   \   0000029C   04608DE5           STR      R6,[SP, #+4]
   \   000002A0   00908DE5           STR      R9,[SP, #+0]
   \   000002A4   0830A0E1           MOV      R3,R8
   \   000002A8   01208BE2           ADD      R2,R11,#+1
   \   000002AC   0510A0E1           MOV      R1,R5
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           BL       _DrawBitLine4BPP
   \   000002B8   0C109DE5           LDR      R1,[SP, #+12]
   \   000002BC   088087E0           ADD      R8,R7,R8
   \   000002C0   011041E2           SUB      R1,R1,#+1
   \   000002C4   0C108DE5           STR      R1,[SP, #+12]
   \   000002C8   02B08BE2           ADD      R11,R11,#+2
   \   000002CC   000051E3           CMP      R1,#+0
   \   000002D0   E7FFFF1A           BNE      ??_DrawBitmap_12
   \   000002D4   A3FFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_5:
   \   000002D8   38009DE5           LDR      R0,[SP, #+56]
   \   000002DC   010050E3           CMP      R0,#+1
   \   000002E0   A0FFFFBA           BLT      ??_DrawBitmap_1
   \   000002E4   00B0A0E1           MOV      R11,R0
   \   000002E8   0290A0E1           MOV      R9,R2
   \   000002EC   01001BE3           TST      R11,#0x1
   \   000002F0   0600000A           BEQ      ??_DrawBitmap_13
   \   000002F4   04A08DE5           STR      R10,[SP, #+4]
   \   000002F8   00608DE5           STR      R6,[SP, #+0]
   \   000002FC   0830A0E1           MOV      R3,R8
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   ........           BL       _DrawBitLine8BPP
   \   00000308   088087E0           ADD      R8,R7,R8
   \   0000030C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_13:
   \   00000310   ABB0B0E1           LSRS     R11,R11,#+1
   \   00000314   93FFFF0A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   00000318   04A08DE5           STR      R10,[SP, #+4]
   \   0000031C   00608DE5           STR      R6,[SP, #+0]
   \   00000320   0830A0E1           MOV      R3,R8
   \   00000324   0920A0E1           MOV      R2,R9
   \   00000328   0510A0E1           MOV      R1,R5
   \   0000032C   0400A0E1           MOV      R0,R4
   \   00000330   ........           BL       _DrawBitLine8BPP
   \   00000334   088087E0           ADD      R8,R7,R8
   \   00000338   04A08DE5           STR      R10,[SP, #+4]
   \   0000033C   00608DE5           STR      R6,[SP, #+0]
   \   00000340   0830A0E1           MOV      R3,R8
   \   00000344   012089E2           ADD      R2,R9,#+1
   \   00000348   0510A0E1           MOV      R1,R5
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   ........           BL       _DrawBitLine8BPP
   \   00000354   01B04BE2           SUB      R11,R11,#+1
   \   00000358   088087E0           ADD      R8,R7,R8
   \   0000035C   029089E2           ADD      R9,R9,#+2
   \   00000360   00005BE3           CMP      R11,#+0
   \   00000364   EBFFFF1A           BNE      ??_DrawBitmap_14
   \   00000368   7EFFFFEA           B        ??_DrawBitmap_1
   \                     ??_DrawBitmap_6:
   \   0000036C   38109DE5           LDR      R1,[SP, #+56]
   \   00000370   0000A0E3           MOV      R0,#+0
   \   00000374   010051E3           CMP      R1,#+1
   \   00000378   7AFFFFBA           BLT      ??_DrawBitmap_1
   \                     ??_DrawBitmap_15:
   \   0000037C   0610A0E1           MOV      R1,R6
   \   00000380   0830A0E1           MOV      R3,R8
   \   00000384   05E0A0E1           MOV      LR,R5
   \   00000388   010051E3           CMP      R1,#+1
   \   0000038C   060000AA           BGE      ??_DrawBitmap_16
   \                     ??_DrawBitmap_17:
   \   00000390   38109DE5           LDR      R1,[SP, #+56]
   \   00000394   010080E2           ADD      R0,R0,#+1
   \   00000398   088087E0           ADD      R8,R7,R8
   \   0000039C   012082E2           ADD      R2,R2,#+1
   \   000003A0   010050E1           CMP      R0,R1
   \   000003A4   6FFFFFAA           BGE      ??_DrawBitmap_1
   \   000003A8   F3FFFFEA           B        ??_DrawBitmap_15
   \                     ??_DrawBitmap_16:
   \   000003AC   089094E5           LDR      R9,[R4, #+8]
   \   000003B0   011041E2           SUB      R1,R1,#+1
   \   000003B4   10A099E5           LDR      R10,[R9, #+16]
   \   000003B8   010051E3           CMP      R1,#+1
   \   000003BC   01A04AE2           SUB      R10,R10,#+1
   \   000003C0   02B04AE0           SUB      R11,R10,R2
   \   000003C4   14A099E5           LDR      R10,[R9, #+20]
   \   000003C8   009099E5           LDR      R9,[R9, #+0]
   \   000003CC   9AEB2BE0           MLA      R11,R10,R11,LR
   \   000003D0   04A093E4           LDR      R10,[R3], #+4
   \   000003D4   01E08EE2           ADD      LR,LR,#+1
   \   000003D8   0BA189E7           STR      R10,[R9, +R11, LSL #+2]
   \   000003DC   F2FFFFAA           BGE      ??_DrawBitmap_16
   \   000003E0   EAFFFFEA           B        ??_DrawBitmap_17
    572          
    573          /*********************************************************************
    574          *
    575          *       _SetOrg
    576          */

   \                                 In section .text, align 4, keep-with-next
    577          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    578            #ifndef WIN32
    579              DRIVER_CONTEXT * pContext;
    580            #endif
    581            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    582          
    583            #ifdef WIN32
    584              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    585            #else
    586              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
    587              Data.xPos = x;
   \   00000024   00108DE5           STR      R1,[SP, #+0]
    588              Data.yPos = pContext->vySize - pContext->ySize - y;
   \   00000028   101093E5           LDR      R1,[R3, #+16]
   \   0000002C   083093E5           LDR      R3,[R3, #+8]
   \   00000030   031041E0           SUB      R1,R1,R3
   \   00000034   021041E0           SUB      R1,R1,R2
   \   00000038   04108DE5           STR      R1,[SP, #+4]
    589              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   180090E5           LDR      R0,[R0, #+24]
   \   00000048   ........           BL       LCD_X_DisplayDriver
    590            #endif
    591          }
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    592          
    593          /*********************************************************************
    594          *
    595          *       _InitOnce
    596          *
    597          * Purpose:
    598          *   Allocates a fixed block for the context of the driver
    599          *
    600          * Return value:
    601          *   0 on success, 1 on error
    602          */
    603          static int _InitOnce(GUI_DEVICE * pDevice) {
    604            if (pDevice->u.pContext == NULL) {
    605              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    606              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    607            }
    608            return pDevice->u.pContext ? 0 : 1;
    609          }
    610          
    611          /*********************************************************************
    612          *
    613          *       _GetRect
    614          */

   \                                 In section .text, align 4, keep-with-next
    615          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    616            DRIVER_CONTEXT * pContext;
    617          
    618            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    619            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    620            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    621            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    622            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    623          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    624          
    625          /*********************************************************************
    626          *
    627          *       _GetDevProp
    628          */

   \                                 In section .text, align 4, keep-with-next
    629          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    630            DRIVER_CONTEXT * pContext;
    631          
    632            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    633            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0B0000EA           B        ??_GetDevProp_7
   \   00000044   0C0000EA           B        ??_GetDevProp_8
   \   00000048   090000EA           B        ??_GetDevProp_7
    634            case LCD_DEVCAP_XSIZE:
    635              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    636            case LCD_DEVCAP_YSIZE:
    637              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    638            case LCD_DEVCAP_VXSIZE:
    639              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    640            case LCD_DEVCAP_VYSIZE:
    641              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    642            case LCD_DEVCAP_BITSPERPIXEL:
    643              return 32;
   \                     ??_GetDevProp_6:
   \   0000006C   2000A0E3           MOV      R0,#+32
   \   00000070   1EFF2FE1           BX       LR
    644            case LCD_DEVCAP_NUMCOLORS:
    645              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    646            case LCD_DEVCAP_XMAG:
    647              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    648            case LCD_DEVCAP_YMAG:
    649              return 1;
    650            case LCD_DEVCAP_MIRROR_X:
    651              return 0;
    652            case LCD_DEVCAP_MIRROR_Y:
    653              return 1;
    654            case LCD_DEVCAP_SWAP_XY:
    655              return 0;
    656            }
    657            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    658          }
    659          
    660          /*********************************************************************
    661          *
    662          *       _GetDevData
    663          */

   \                                 In section .text, align 4, keep-with-next
    664          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    665            GUI_USE_PARA(pDevice);
    666            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    667            #if GUI_SUPPORT_MEMDEV
    668              case LCD_DEVDATA_MEMDEV:
    669                return (void *)&GUI_MEMDEV_DEVICE_32;
   \   00000008   ........           LDR      R0,??DataTable16_1
   \   0000000C   1EFF2FE1           BX       LR
    670            #endif
    671            }
    672            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    673          }
    674          
    675          /*********************************************************************
    676          *
    677          *       Static code: Functions available by _GetDevFunc()
    678          *
    679          **********************************************************************
    680          */
    681          /*********************************************************************
    682          *
    683          *       _ReadRect
    684          */

   \                                 In section .text, align 4, keep-with-next
    685          static void _ReadRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer) {
   \                     _ReadRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    686            DRIVER_CONTEXT * pContext;
    687            U32 Off;
    688            int x, NumPixelsPerLine;
    689            U32 * p;
    690          
    691            //
    692            // Get context
    693            //
    694            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   10E09DE5           LDR      LR,[SP, #+16]
   \   0000000C   104090E5           LDR      R4,[R0, #+16]
   \   00000010   14C09DE5           LDR      R12,[SP, #+20]
   \   00000014   014044E2           SUB      R4,R4,#+1
   \   00000018   022044E0           SUB      R2,R4,R2
    695            //
    696            // Mirror y
    697            //
    698            y0 = (pContext->vySize - 1 - y0);
    699            y1 = (pContext->vySize - 1 - y1);
   \   0000001C   0EE044E0           SUB      LR,R4,LR
    700            //
    701            p = (U32 *)pBuffer;
    702            x = x0;
   \   00000020   0140A0E1           MOV      R4,R1
    703            do {
    704              Off = XY2OFF32(pContext->vxSizePhys, x0, y0);
    705              NumPixelsPerLine = x1 - x0 + 1;
   \                     ??_ReadRect_0:
   \   00000024   146090E5           LDR      R6,[R0, #+20]
   \   00000028   015043E0           SUB      R5,R3,R1
   \   0000002C   961221E0           MLA      R1,R6,R2,R1
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   0111A0E1           LSL      R1,R1,#+2
    706              do {
    707                *p++ = READ_MEM32(pContext->VRAMAddr, Off);
   \                     ??_ReadRect_1:
   \   00000038   006090E5           LDR      R6,[R0, #+0]
    708                Off++;
    709              } while (--NumPixelsPerLine);
   \   0000003C   015045E2           SUB      R5,R5,#+1
   \   00000040   066091E7           LDR      R6,[R1, +R6]
   \   00000044   041081E2           ADD      R1,R1,#+4
   \   00000048   04608CE4           STR      R6,[R12], #+4
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   F8FFFF1A           BNE      ??_ReadRect_1
    710              x0 = x;
    711            } while (y0-- > y1);
   \   00000054   0250A0E1           MOV      R5,R2
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   012045E2           SUB      R2,R5,#+1
   \   00000060   05005EE1           CMP      LR,R5
   \   00000064   EEFFFFBA           BLT      ??_ReadRect_0
    712          }
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
    713          
    714          /*********************************************************************
    715          *
    716          *       _SetVRAMAddr
    717          */

   \                                 In section .text, align 4, keep-with-next
    718          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    719            DRIVER_CONTEXT * pContext;
    720            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    721          
    722            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    723            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    724              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    725              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    726              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    727              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    728            }
    729            #ifdef WIN32
    730              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    731            #endif
    732          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    733          
    734          /*********************************************************************
    735          *
    736          *       _SetVSize
    737          */

   \                                 In section .text, align 4, keep-with-next
    738          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    739            DRIVER_CONTEXT * pContext;
    740          
    741            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    742            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    743              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    744              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    745              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    746              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
    747            }
    748            #ifdef WIN32
    749              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    750            #endif
    751          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    752          
    753          /*********************************************************************
    754          *
    755          *       _SetSize
    756          */

   \                                 In section .text, align 4, keep-with-next
    757          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    758            DRIVER_CONTEXT * pContext;
    759            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    760          
    761            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    762            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    763              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    764              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    765                pContext->vxSizePhys = xSize;
    766              }
    767              pContext->xSize = xSize;
    768              pContext->ySize = ySize;
    769              Data.xSize = xSize;
    770              Data.ySize = ySize;
    771              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    772            }
    773          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    774          
    775          /*********************************************************************
    776          *
    777          *       _SetPos
    778          */

   \                                 In section .text, align 4, keep-with-next
    779          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    780            DRIVER_CONTEXT * pContext;
    781            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    782          
    783            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    784            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    785              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    786              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    787              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    788              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    789              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    790              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    791            }
    792          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    793          
    794          /*********************************************************************
    795          *
    796          *       _GetPos
    797          */

   \                                 In section .text, align 4, keep-with-next
    798          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    799            DRIVER_CONTEXT * pContext;
    800          
    801            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    802            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    803              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    804              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    805              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    806            }
    807          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    808          
    809          /*********************************************************************
    810          *
    811          *       _SetAlpha
    812          */

   \                                 In section .text, align 4, keep-with-next
    813          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    814            DRIVER_CONTEXT * pContext;
    815            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    816          
    817            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    818            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    819              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    820              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    821              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    822              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    823            }
    824          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    825          
    826          /*********************************************************************
    827          *
    828          *       _SetVis
    829          */

   \                                 In section .text, align 4, keep-with-next
    830          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    831            DRIVER_CONTEXT * pContext;
    832            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    833          
    834            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    835            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    836              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    837              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    838              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    839              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    840            }
    841          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    842          
    843          /*********************************************************************
    844          *
    845          *       _Init
    846          */

   \                                 In section .text, align 4, keep-with-next
    847          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    848            int r;
    849          
    850            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    851            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    852            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    853          }
    854          
    855          /*********************************************************************
    856          *
    857          *       _On
    858          */

   \                                 In section .text, align 4, keep-with-next
    859          static void _On (GUI_DEVICE * pDevice) {
    860            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    861          }
    862          
    863          /*********************************************************************
    864          *
    865          *       _Off
    866          */

   \                                 In section .text, align 4, keep-with-next
    867          static void _Off (GUI_DEVICE * pDevice) {
    868            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    869          }
    870          
    871          /*********************************************************************
    872          *
    873          *       _SetLUTEntry
    874          */

   \                                 In section .text, align 4, keep-with-next
    875          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    876            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    877          
    878            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
    879            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    880            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    881          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    882          
    883          /*********************************************************************
    884          *
    885          *       _SetAlphaMode
    886          */

   \                                 In section .text, align 4, keep-with-next
    887          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    888            LCD_X_SETALPHAMODE_INFO Data = {0};
    889          
    890            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    891            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    892          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    893          
    894          /*********************************************************************
    895          *
    896          *       _SetChromaMode
    897          */

   \                                 In section .text, align 4, keep-with-next
    898          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    899            LCD_X_SETCHROMAMODE_INFO Data = {0};
    900          
    901            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    902            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    903          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    904          
    905          /*********************************************************************
    906          *
    907          *       _SetChroma
    908          */

   \                                 In section .text, align 4, keep-with-next
    909          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    910            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    911          
    912            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    913            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
    914            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    915          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    916          
    917          /*********************************************************************
    918          *
    919          *       _SetFunc
    920          */

   \                                 In section .text, align 4, keep-with-next
    921          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    922            DRIVER_CONTEXT * pContext;
    923          
    924            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    925            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
    926              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    927              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
    928              case LCD_DEVFUNC_FILLRECT:
    929                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
    930                break;
    931              }
    932            }
    933          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    934          
    935          /*********************************************************************
    936          *
    937          *       _GetDevFunc
    938          */

   \                                 In section .text, align 4, keep-with-next
    939          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
    940            GUI_USE_PARA(ppDevice);
    941            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   150051E3           CMP      R1,#+21
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3500008A           BHI      ??_GetDevFunc_1
   \   00000010   140000EA           B        ??_GetDevFunc_2
   \   00000014   1F0000EA           B        ??_GetDevFunc_3
   \   00000018   1A0000EA           B        ??_GetDevFunc_4
   \   0000001C   1B0000EA           B        ??_GetDevFunc_5
   \   00000020   300000EA           B        ??_GetDevFunc_1
   \   00000024   1D0000EA           B        ??_GetDevFunc_6
   \   00000028   2E0000EA           B        ??_GetDevFunc_1
   \   0000002C   2D0000EA           B        ??_GetDevFunc_1
   \   00000030   0E0000EA           B        ??_GetDevFunc_7
   \   00000034   0F0000EA           B        ??_GetDevFunc_8
   \   00000038   100000EA           B        ??_GetDevFunc_9
   \   0000003C   190000EA           B        ??_GetDevFunc_10
   \   00000040   280000EA           B        ??_GetDevFunc_1
   \   00000044   190000EA           B        ??_GetDevFunc_11
   \   00000048   1A0000EA           B        ??_GetDevFunc_12
   \   0000004C   1B0000EA           B        ??_GetDevFunc_13
   \   00000050   240000EA           B        ??_GetDevFunc_1
   \   00000054   230000EA           B        ??_GetDevFunc_1
   \   00000058   1A0000EA           B        ??_GetDevFunc_14
   \   0000005C   1B0000EA           B        ??_GetDevFunc_15
   \   00000060   1C0000EA           B        ??_GetDevFunc_16
   \   00000064   1D0000EA           B        ??_GetDevFunc_17
    942            case LCD_DEVFUNC_READRECT:
    943              return (void (*)(void))_ReadRect;
   \                     ??_GetDevFunc_2:
   \   00000068   ........           LDR      R0,??DataTable16_2
   \   0000006C   1EFF2FE1           BX       LR
    944            case LCD_DEVFUNC_SET_VRAM_ADDR:
    945              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_7:
   \   00000070   ........           LDR      R0,??DataTable16_3
   \   00000074   1EFF2FE1           BX       LR
    946            case LCD_DEVFUNC_SET_VSIZE:
    947              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_8:
   \   00000078   ........           LDR      R0,??DataTable16_4
   \   0000007C   1EFF2FE1           BX       LR
    948            case LCD_DEVFUNC_SET_SIZE:
    949              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_9:
   \   00000080   ........           LDR      R0,??DataTable16_5
   \   00000084   1EFF2FE1           BX       LR
    950            case LCD_DEVFUNC_SETPOS:
    951              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_4:
   \   00000088   ........           LDR      R0,??DataTable16_6
   \   0000008C   1EFF2FE1           BX       LR
    952            case LCD_DEVFUNC_GETPOS:
    953              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_5:
   \   00000090   ........           LDR      R0,??DataTable16_7
   \   00000094   1EFF2FE1           BX       LR
    954            case LCD_DEVFUNC_SETALPHA:
    955              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_3:
   \   00000098   ........           LDR      R0,??DataTable16_8
   \   0000009C   1EFF2FE1           BX       LR
    956            case LCD_DEVFUNC_SETVIS:
    957              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_6:
   \   000000A0   ........           LDR      R0,??DataTable16_9
   \   000000A4   1EFF2FE1           BX       LR
    958            case LCD_DEVFUNC_INIT:
    959              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_10:
   \   000000A8   ........           LDR      R0,??DataTable16_10
   \   000000AC   1EFF2FE1           BX       LR
    960            case LCD_DEVFUNC_ON:
    961              return (void (*)(void))_On;
   \                     ??_GetDevFunc_11:
   \   000000B0   ........           LDR      R0,??DataTable16_11
   \   000000B4   1EFF2FE1           BX       LR
    962            case LCD_DEVFUNC_OFF:
    963              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_12:
   \   000000B8   ........           LDR      R0,??DataTable16_12
   \   000000BC   1EFF2FE1           BX       LR
    964            case LCD_DEVFUNC_SETLUTENTRY:
    965              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_13:
   \   000000C0   ........           LDR      R0,??DataTable16_13
   \   000000C4   1EFF2FE1           BX       LR
    966          
    967            case LCD_DEVFUNC_ALPHAMODE:
    968              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_14:
   \   000000C8   ........           LDR      R0,??DataTable16_14
   \   000000CC   1EFF2FE1           BX       LR
    969            case LCD_DEVFUNC_CHROMAMODE:
    970              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_15:
   \   000000D0   ........           LDR      R0,??DataTable16_15
   \   000000D4   1EFF2FE1           BX       LR
    971            case LCD_DEVFUNC_CHROMA:
    972              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_16:
   \   000000D8   ........           LDR      R0,??DataTable16_16
   \   000000DC   1EFF2FE1           BX       LR
    973            
    974            case LCD_DEVFUNC_SETFUNC:
    975              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_17:
   \   000000E0   ........           LDR      R0,??DataTable16_17
   \   000000E4   1EFF2FE1           BX       LR
    976            }
    977            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   1EFF2FE1           BX       LR               ;; return
    978          }
    979          
    980          /*********************************************************************
    981          *
    982          *       Public data
    983          *
    984          **********************************************************************
    985          */
    986          /*********************************************************************
    987          *
    988          *       GUI_DEVICE_API structure
    989          */

   \                                 In section .rodata, align 4, keep-with-next
    990          const GUI_DEVICE_API GUIDRV_Lin_OY_32_API = {
   \                     GUIDRV_Lin_OY_32_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _ReadRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
    991            //
    992            // Data
    993            //
    994            DEVICE_CLASS_DRIVER,
    995            //
    996            // Drawing functions
    997            //
    998            _DrawBitmap,
    999            _DrawHLine,
   1000            _DrawVLine,
   1001            _FillRect,
   1002            _GetPixelIndex,
   1003            _SetPixelIndex,
   1004            _XorPixel,
   1005            //
   1006            // Set origin
   1007            //
   1008            _SetOrg,
   1009            //
   1010            // Request information
   1011            //
   1012            _GetDevFunc,
   1013            _GetDevProp,
   1014            _GetDevData,
   1015            _GetRect,
   1016          };
   1017          
   1018          #else
   1019          
   1020          void GUIDRV_Lin_OY_32_C(void);   // Avoid empty object files
   1021          void GUIDRV_Lin_OY_32_C(void) {}
   1022          
   1023          #endif
   1024          
   1025          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     _DrawBitLine1BPP     32
     _DrawBitLine2BPP     16
     _DrawBitLine4BPP     16
     _DrawBitLine8BPP      8
     _DrawBitmap          56
     _DrawHLine           24
     _DrawVLine           24
     _FillRect            24
     _GetDevData           0
     _GetDevFunc           0
     _GetDevProp           0
     _GetPixelIndex        0
     _GetPos              16
     _GetRect              0
     _Init                16
     _Off                  8
     _On                   8
     _ReadRect            16
     _SetAlpha            16
     _SetAlphaMode         8
     _SetChroma           24
     _SetChromaMode        8
     _SetFunc             16
     _SetLUTEntry         24
     _SetOrg              24
     _SetPixelIndex        0
     _SetPos              24
     _SetSize             24
     _SetVRAMAddr         16
     _SetVSize            16
     _SetVis              16
     _XorPixel            24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            36
     _GetPixelIndex            36
     _XorPixel                108
     _DrawHLine               300
     _DrawVLine               208
     _FillRect                 68
     _DrawBitLine1BPP         392
     _DrawBitLine2BPP         224
     _DrawBitLine4BPP         224
     _DrawBitLine8BPP         348
     _DrawBitmap              996
     _SetOrg                   84
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _ReadRect                108
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              240
     GUIDRV_Lin_OY_32_API      52
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ??DataTable16_16           4
     ??DataTable16_17           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 4 868 bytes in section .text
 
 4 868 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
