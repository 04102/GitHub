###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_Validate.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\WM_Validate.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_Validate.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_Validate.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_Validate.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_Validate.C
     19          Purpose     : Windows manager, add. module
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include <stddef.h>           /* needed for definition of NULL */
     24          #include "WM_Intern.h"
     25          #include "Global.h"
     26          
     27          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     28          
     29          /*********************************************************************
     30          *
     31          *       Public code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       WM__SubRect       
     38          
     39            The result is the smallest rectangle which includes the entire
     40            remaining area.
     41          
     42            *pDest = *pr0- *pr1;
     43          */

   \                                 In section .text, align 4, keep-with-next
     44          static void _SubRect(GUI_RECT* pDest, const GUI_RECT* pr0, const GUI_RECT* pr1) {
   \                     _SubRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
     45            if ((pDest == NULL) || (pr0 == NULL))
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   00005613           CMPNE    R6,#+0
   \   00000018   2700000A           BEQ      ??_SubRect_0
     46              return;
     47            *pDest = *pr0;	 
   \   0000001C   0820A0E3           MOV      R2,#+8
   \   00000020   ........           BL       __aeabi_memcpy
     48            if (pr1 == NULL)
   \   00000024   000055E3           CMP      R5,#+0
   \   00000028   2300000A           BEQ      ??_SubRect_0
     49              return;
     50            /* Check left/right sides */
     51            if (  (pr1->y0 <= pr0->y0)
     52                &&(pr1->y1 >= pr0->y1)) {
   \   0000002C   F200D6E1           LDRSH    R0,[R6, #+2]
   \   00000030   F210D5E1           LDRSH    R1,[R5, #+2]
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   0D0000BA           BLT      ??_SubRect_1
   \   0000003C   F600D5E1           LDRSH    R0,[R5, #+6]
   \   00000040   F610D6E1           LDRSH    R1,[R6, #+6]
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   090000BA           BLT      ??_SubRect_1
     53              pDest->x0 = GUI_MAX(pr0->x0, pr1->x1);
   \   0000004C   F400D5E1           LDRSH    R0,[R5, #+4]
   \   00000050   F010D6E1           LDRSH    R1,[R6, #+0]
   \   00000054   010050E1           CMP      R0,R1
   \   00000058   0100A0B1           MOVLT    R0,R1
   \   0000005C   B000C4E1           STRH     R0,[R4, #+0]
     54              pDest->x1 = GUI_MIN(pr0->x1, pr1->x0);
   \   00000060   F400D6E1           LDRSH    R0,[R6, #+4]
   \   00000064   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   0100A0A1           MOVGE    R0,R1
   \   00000070   B400C4E1           STRH     R0,[R4, #+4]
     55            }
     56            /* Check top/bottom sides */
     57            if (  (pr1->x0 <= pr0->x0)
     58                &&(pr1->x1 >= pr0->x1)) {
   \                     ??_SubRect_1:
   \   00000074   F000D6E1           LDRSH    R0,[R6, #+0]
   \   00000078   F010D5E1           LDRSH    R1,[R5, #+0]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   0D0000BA           BLT      ??_SubRect_0
   \   00000084   F400D5E1           LDRSH    R0,[R5, #+4]
   \   00000088   F410D6E1           LDRSH    R1,[R6, #+4]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   090000BA           BLT      ??_SubRect_0
     59              pDest->y0 = GUI_MAX(pr0->y0, pr1->y1);
   \   00000094   F600D5E1           LDRSH    R0,[R5, #+6]
   \   00000098   F210D6E1           LDRSH    R1,[R6, #+2]
   \   0000009C   010050E1           CMP      R0,R1
   \   000000A0   0100A0B1           MOVLT    R0,R1
   \   000000A4   B200C4E1           STRH     R0,[R4, #+2]
     60              pDest->y1 = GUI_MIN(pr0->y1, pr1->y0);
   \   000000A8   F600D6E1           LDRSH    R0,[R6, #+6]
   \   000000AC   F210D5E1           LDRSH    R1,[R5, #+2]
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   0100A0C1           MOVGT    R0,R1
   \   000000B8   B600C4E1           STRH     R0,[R4, #+6]
   \                     ??_SubRect_0:
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
     61            }
     62          }
     63          
     64          /*********************************************************************
     65          *
     66          *       WM_ValidateRect
     67          *
     68            Use this function with great care ! It should under most circumstances not
     69            be necessary to use it, as validation is done automatically as soon as
     70            a window has been redrawn. If you validate a section of a window, this
     71            part will not be included in the paint-command and could therefor not
     72            be updated.
     73          */

   \                                 In section .text, align 4, keep-with-next
     74          void WM_ValidateRect(WM_HWIN hWin, const GUI_RECT*pRect) {
   \                     WM_ValidateRect:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
     75            WM_Obj* pWin;
     76            if (hWin) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1800000A           BEQ      ??WM_ValidateRect_0
     77              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     78              pWin = WM_HANDLE2PTR(hWin);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_h2p
   \   00000024   0040A0E1           MOV      R4,R0
     79              if (pWin->Status & WM_SF_INVALID) {
   \   00000028   2800D4E5           LDRB     R0,[R4, #+40]
   \   0000002C   200010E3           TST      R0,#0x20
   \   00000030   1000000A           BEQ      ??WM_ValidateRect_1
     80                if (pRect) {
   \   00000034   000055E3           CMP      R5,#+0
   \   00000038   0700000A           BEQ      ??WM_ValidateRect_2
     81                  _SubRect(&pWin->InvalidRect, &pWin->InvalidRect, pRect);
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   081084E2           ADD      R1,R4,#+8
   \   00000044   080084E2           ADD      R0,R4,#+8
   \   00000048   ........           BL       _SubRect
     82                  if (WM__RectIsNZ(&pWin->InvalidRect))
   \   0000004C   080084E2           ADD      R0,R4,#+8
   \   00000050   ........           BL       WM__RectIsNZ
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0600001A           BNE      ??WM_ValidateRect_1
     83                    goto Done;
     84                }
     85                pWin->Status &= ~WM_SF_INVALID;
   \                     ??WM_ValidateRect_2:
   \   0000005C   280094E5           LDR      R0,[R4, #+40]
   \   00000060   2000C0E3           BIC      R0,R0,#0x20
   \   00000064   280084E5           STR      R0,[R4, #+40]
     86                WM__NumInvalidWindows--;
   \   00000068   ........           LDR      R0,??DataTable0
   \   0000006C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000070   011041E2           SUB      R1,R1,#+1
   \   00000074   B010C0E1           STRH     R1,[R0, #+0]
     87              }
     88            Done:
     89              WM_UNLOCK();
   \                     ??WM_ValidateRect_1:
   \   00000078   ........           BL       GUI_Unlock
     90            }
     91          }
   \                     ??WM_ValidateRect_0:
   \   0000007C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     WM__NumInvalidWindows
     92          
     93          #else
     94            void WM_Validate(void) {} /* avoid empty object files */
     95          #endif   /* GUI_WINSUPPORT */
     96          
     97          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     WM_ValidateRect     16
     _SubRect            16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     _SubRect         192
     WM_ValidateRect  132
     ??DataTable0       4

 
 328 bytes in section .text
 
 328 bytes of CODE memory

Errors: none
Warnings: none
