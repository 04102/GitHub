###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:31 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\SCROLLBAR_SkinClassic.c             #
#    Command line =  C:\DUII\TargetHW\GUI\SCROLLBAR_SkinClassic.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\SCROLLBAR_SkinClassic.lst  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\SCROLLBAR_SkinClassic.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\SCROLLBAR_SkinClassic.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : SCROLLBAR_SkinClassic.c
     19          Purpose     : Implementation of scrollbar widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "SCROLLBAR_Private.h"
     24          #include "GUI_Private.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *        Static code
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _GetArrowSize
     38          *
     39          */
     40          static int _GetArrowSize(SCROLLBAR_OBJ * pObj) {
     41            unsigned int r, xSize, ySize;
     42          
     43            xSize = WIDGET__GetXSize(&pObj->Widget);
     44            ySize = WIDGET__GetYSize(&pObj->Widget);
     45            r = (ySize / 2) + 5;
     46            if (r > (xSize - 5)) {
     47              r = xSize - 5;
     48            }
     49            return r;
     50          }
     51          
     52          /*********************************************************************
     53          *
     54          *       _CalcPositions
     55          *
     56          *  Calculates all positions required for drawing or for mouse / touch
     57          *  evaluation.
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          static void _CalcPositions(SCROLLBAR_Handle hObj, SCROLLBAR_POSITIONS * pPos) {
   \                     _CalcPositions:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0140A0E1           MOV      R4,R1
     60            SCROLLBAR_OBJ * pObj;
     61            int xSizeArrow, xSize, xSizeMoveable, ThumbSize, NumItems, xSizeThumbArea;
     62            WM_HWIN hWin;
     63            GUI_RECT r, rSub;
     64            int x0, y0;
     65          
     66            pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0050A0E1           MOV      R5,R0
     67            r = pObj->Widget.Win.Rect;
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0820A0E3           MOV      R2,#+8
   \   00000020   ........           BL       __aeabi_memcpy
     68            x0 = r.x0;
     69            y0 = r.y0;
     70            pPos->x1  = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? r.y1 : r.x1;
   \   00000024   3200D5E5           LDRB     R0,[R5, #+50]
   \   00000028   F060DDE1           LDRSH    R6,[SP, #+0]
   \   0000002C   F270DDE1           LDRSH    R7,[SP, #+2]
   \   00000030   080010E3           TST      R0,#0x8
   \   00000034   F600DD11           LDRSHNE  R0,[SP, #+6]
   \   00000038   F400DD01           LDRSHEQ  R0,[SP, #+4]
   \   0000003C   180084E5           STR      R0,[R4, #+24]
     71            //
     72            // Subtract the rectangle of the other scrollbar (if existing and visible)
     73            //
     74            if (pObj->Widget.Id == GUI_ID_HSCROLL) {
   \   00000040   F003D5E1           LDRSH    R0,[R5, #+48]
   \   00000044   FF0050E3           CMP      R0,#+255
   \   00000048   0B00001A           BNE      ??_CalcPositions_0
     75              hWin = WM_GetScrollbarV(pObj->Widget.Win.hParent);
   \   0000004C   180095E5           LDR      R0,[R5, #+24]
   \   00000050   ........           BL       WM_GetScrollbarV
     76              if (hWin) {
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_CalcPositions_0
     77                WM_GetWindowRectEx(hWin, &rSub);
   \   0000005C   08108DE2           ADD      R1,SP,#+8
   \   00000060   ........           BL       WM_GetWindowRectEx
     78                if (r.x1 == rSub.x1) {
   \   00000064   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000068   FC10DDE1           LDRSH    R1,[SP, #+12]
   \   0000006C   010050E1           CMP      R0,R1
     79                  r.x1 = rSub.x0 -1;
   \   00000070   F810DD01           LDRSHEQ  R1,[SP, #+8]
   \   00000074   01104102           SUBEQ    R1,R1,#+1
   \   00000078   B410CD01           STRHEQ   R1,[SP, #+4]
     80                }
     81              }
     82            }
     83            if (pObj->Widget.Id == GUI_ID_VSCROLL) {
   \                     ??_CalcPositions_0:
   \   0000007C   F003D5E1           LDRSH    R0,[R5, #+48]
   \   00000080   FE0050E3           CMP      R0,#+254
   \   00000084   0B00001A           BNE      ??_CalcPositions_1
     84              hWin = WM_GetScrollbarH(pObj->Widget.Win.hParent);
   \   00000088   180095E5           LDR      R0,[R5, #+24]
   \   0000008C   ........           BL       WM_GetScrollbarH
     85              if (hWin) {
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0700000A           BEQ      ??_CalcPositions_1
     86                WM_GetWindowRectEx(hWin, &rSub);
   \   00000098   08108DE2           ADD      R1,SP,#+8
   \   0000009C   ........           BL       WM_GetWindowRectEx
     87                if (r.y1 == rSub.y1) {
   \   000000A0   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000A4   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   000000A8   010050E1           CMP      R0,R1
     88                  r.y1 = rSub.y0 -1;
   \   000000AC   FA00DD01           LDRSHEQ  R0,[SP, #+10]
   \   000000B0   01004002           SUBEQ    R0,R0,#+1
   \   000000B4   B600CD01           STRHEQ   R0,[SP, #+6]
     89                }
     90              }
     91            }
     92            //
     93            // Convert coordinates of this window
     94            //
     95            GUI_MoveRect(&r, -x0, -y0);
   \                     ??_CalcPositions_1:
   \   000000B8   002067E2           RSB      R2,R7,#+0
   \   000000BC   001066E2           RSB      R1,R6,#+0
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   ........           BL       GUI_MoveRect
     96            //
     97            // Convert real into virtual coordinates
     98            //
     99            SCROLLBAR__Rect2VRect(&pObj->Widget, &r);
   \   000000C8   0D10A0E1           MOV      R1,SP
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           BL       SCROLLBAR__Rect2VRect
    100            NumItems      = pObj->NumItems;
    101            xSize         = r.x1 - r.x0 + 1;
   \   000000D4   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000D8   F010DDE1           LDRSH    R1,[SP, #+0]
   \   000000DC   4C6095E5           LDR      R6,[R5, #+76]
   \   000000E0   010040E0           SUB      R0,R0,R1
   \   000000E4   017080E2           ADD      R7,R0,#+1
    102            xSizeArrow    = _GetArrowSize(pObj);
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   ........           BL       WIDGET__GetXSize
   \   000000F0   0080A0E1           MOV      R8,R0
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           BL       WIDGET__GetYSize
   \   000000FC   0510A0E3           MOV      R1,#+5
   \   00000100   A09081E0           ADD      R9,R1,R0, LSR #+1
   \   00000104   050048E2           SUB      R0,R8,#+5
   \   00000108   090050E1           CMP      R0,R9
   \   0000010C   0090A031           MOVCC    R9,R0
    103            xSizeThumbArea= xSize - 2 * xSizeArrow;     // Number of pixels available for thumb and movement
    104            ThumbSize     = (int)GUI__DivideRound32((I32)xSizeThumbArea * pObj->PageSize, NumItems);
   \   00000110   542095E5           LDR      R2,[R5, #+84]
   \   00000114   89A047E0           SUB      R10,R7,R9, LSL #+1
   \   00000118   920A00E0           MUL      R0,R2,R10
   \   0000011C   0610A0E1           MOV      R1,R6
   \   00000120   ........           BL       GUI__DivideRound32
    105            if (ThumbSize < SCROLLBAR_THUMB_SIZE_MIN_DEFAULT) {
   \   00000124   040050E3           CMP      R0,#+4
    106              ThumbSize = SCROLLBAR_THUMB_SIZE_MIN_DEFAULT;
   \   00000128   0400A0B3           MOVLT    R0,#+4
    107            }
    108            if (ThumbSize > xSizeThumbArea) {
   \   0000012C   0A80A0E1           MOV      R8,R10
   \   00000130   00005AE1           CMP      R10,R0
   \   00000134   0080A0C1           MOVGT    R8,R0
    109              ThumbSize = xSizeThumbArea;
    110            }
    111            xSizeMoveable = xSizeThumbArea - ThumbSize;
    112            pPos->x0_LeftArrow  = r.x0;
   \   00000138   F000DDE1           LDRSH    R0,[SP, #+0]
   \   0000013C   08A04AE0           SUB      R10,R10,R8
   \   00000140   000084E5           STR      R0,[R4, #+0]
    113            pPos->x1_LeftArrow  = xSizeArrow - 1;
   \   00000144   010049E2           SUB      R0,R9,#+1
   \   00000148   040084E5           STR      R0,[R4, #+4]
    114            pPos->x1_RightArrow = xSize - 1;
   \   0000014C   010047E2           SUB      R0,R7,#+1
   \   00000150   140084E5           STR      R0,[R4, #+20]
    115            pPos->x0_RightArrow = xSize - xSizeArrow;
   \   00000154   090047E0           SUB      R0,R7,R9
   \   00000158   100084E5           STR      R0,[R4, #+16]
    116            pPos->x0_Thumb      = pPos->x1_LeftArrow + 1+ GUI__DivideRound32((I32)xSizeMoveable * pObj->v, NumItems - pObj->PageSize);
   \   0000015C   540095E5           LDR      R0,[R5, #+84]
   \   00000160   502095E5           LDR      R2,[R5, #+80]
   \   00000164   001046E0           SUB      R1,R6,R0
   \   00000168   920A00E0           MUL      R0,R2,R10
   \   0000016C   ........           BL       GUI__DivideRound32
   \   00000170   041094E5           LDR      R1,[R4, #+4]
   \   00000174   010080E0           ADD      R0,R0,R1
   \   00000178   010080E2           ADD      R0,R0,#+1
   \   0000017C   080084E5           STR      R0,[R4, #+8]
    117            pPos->x1_Thumb      = pPos->x0_Thumb + ThumbSize - 1;
   \   00000180   000088E0           ADD      R0,R8,R0
   \   00000184   010040E2           SUB      R0,R0,#+1
   \   00000188   0C0084E5           STR      R0,[R4, #+12]
    118            pPos->xSizeMoveable = xSizeMoveable;
   \   0000018C   1CA084E5           STR      R10,[R4, #+28]
    119            pPos->ThumbSize     = ThumbSize;
   \   00000190   208084E5           STR      R8,[R4, #+32]
    120            GUI_UNLOCK_H(pObj);
   \   00000194   ........           BL       GUI_ALLOC_UnlockH
    121          }
   \   00000198   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   0000019C   F087BDE8           POP      {R4-R10,PC}      ;; return
    122          
    123          /*********************************************************************
    124          *
    125          *       _Paint
    126          */

   \                                 In section .text, align 4, keep-with-next
    127          static void _Paint(SCROLLBAR_Handle hObj) {
   \                     _Paint:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0050A0E1           MOV      R5,R0
    128            SCROLLBAR_OBJ * pObj;
    129            int ArrowSize, ArrowOff;
    130            SCROLLBAR_POSITIONS Pos;
    131            GUI_RECT r, rClient;
    132            pObj = SCROLLBAR_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0040A0E1           MOV      R4,R0
    133            //
    134            // Get / calc position info
    135            //
    136            pObj->pfCalcPositions(hObj, &Pos);
   \   00000014   14108DE2           ADD      R1,SP,#+20
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   482094E5           LDR      R2,[R4, #+72]
   \   00000020   32FF2FE1           BLX      R2
    137            //SCROLLBAR__CalcPositions(pObj, &Pos);
    138            WIDGET__GetClientRect(&pObj->Widget, &rClient);
   \   00000024   0C108DE2           ADD      R1,SP,#+12
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       WIDGET__GetClientRect
    139            r = rClient;
   \   00000030   0C108DE2           ADD      R1,SP,#+12
   \   00000034   002091E5           LDR      R2,[R1, #+0]
   \   00000038   043091E5           LDR      R3,[R1, #+4]
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   0C0080E8           STM      R0,{R2,R3}
    140            ArrowSize = ((r.y1 - r.y0) / 3) - 1;
   \   00000044   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   00000048   F610DDE1           LDRSH    R1,[SP, #+6]
   \   0000004C   010040E0           SUB      R0,R0,R1
   \   00000050   ........           LDR      R1,??DataTable4  ;; 0x55555556
   \   00000054   9021C1E0           SMULL    R2,R1,R0,R1
   \   00000058   0100B0E1           MOVS     R0,R1
   \   0000005C   01008142           ADDMI    R0,R1,#+1
   \   00000060   015040E2           SUB      R5,R0,#+1
    141            ArrowOff = 3 + ArrowSize + ArrowSize / 3;
   \   00000064   ........           LDR      R0,??DataTable4  ;; 0x55555556
   \   00000068   9510C0E0           SMULL    R1,R0,R5,R0
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   01008042           ADDMI    R0,R0,#+1
   \   00000074   050080E0           ADD      R0,R0,R5
   \   00000078   036080E2           ADD      R6,R0,#+3
    142            //
    143            // Draw left Arrow
    144            //
    145            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_THUMB]);
   \   0000007C   340094E5           LDR      R0,[R4, #+52]
   \   00000080   ........           BL       LCD_SetColor
    146            r = rClient;
   \   00000084   0C108DE2           ADD      R1,SP,#+12
   \   00000088   002091E5           LDR      R2,[R1, #+0]
   \   0000008C   043091E5           LDR      R3,[R1, #+4]
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   0C0080E8           STM      R0,{R2,R3}
    147            r.x0 = Pos.x0_LeftArrow;
   \   00000098   14109DE5           LDR      R1,[SP, #+20]
    148            r.x1 = Pos.x1_LeftArrow;
    149            WIDGET__FillRectEx(&pObj->Widget, &r);
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   B410CDE1           STRH     R1,[SP, #+4]
   \   000000A4   18109DE5           LDR      R1,[SP, #+24]
   \   000000A8   B810CDE1           STRH     R1,[SP, #+8]
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   ........           BL       WIDGET__FillRectEx
    150            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_ARROW]);
   \   000000B4   3C0094E5           LDR      R0,[R4, #+60]
   \   000000B8   ........           BL       LCD_SetColor
    151            WIDGET__DrawTriangle(&pObj->Widget, r.x0 + ArrowOff, (r.y1 - r.y0) >> 1, ArrowSize, -1);
   \   000000BC   0000E0E3           MVN      R0,#+0
   \   000000C0   00008DE5           STR      R0,[SP, #+0]
   \   000000C4   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   000000C8   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000000CC   0530A0E1           MOV      R3,R5
   \   000000D0   010040E0           SUB      R0,R0,R1
   \   000000D4   C020A0E1           ASR      R2,R0,#+1
   \   000000D8   F400DDE1           LDRSH    R0,[SP, #+4]
   \   000000DC   001086E0           ADD      R1,R6,R0
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       WIDGET__DrawTriangle
    152            WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &r);
   \   000000E8   04108DE2           ADD      R1,SP,#+4
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       WIDGET__EFFECT_DrawUpRect
    153            //
    154            // Draw the thumb area which is not covered by the thumb
    155            //
    156            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_SHAFT]);
   \   000000F4   380094E5           LDR      R0,[R4, #+56]
   \   000000F8   ........           BL       LCD_SetColor
    157            r.x0 = Pos.x1_LeftArrow + 1;
   \   000000FC   18009DE5           LDR      R0,[SP, #+24]
    158            r.x1 = Pos.x0_Thumb - 1;
    159            WIDGET__FillRectEx(&pObj->Widget, &r);
   \   00000100   04108DE2           ADD      R1,SP,#+4
   \   00000104   010080E2           ADD      R0,R0,#+1
   \   00000108   B400CDE1           STRH     R0,[SP, #+4]
   \   0000010C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000110   010040E2           SUB      R0,R0,#+1
   \   00000114   B800CDE1           STRH     R0,[SP, #+8]
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       WIDGET__FillRectEx
    160            r = rClient;
   \   00000120   0C108DE2           ADD      R1,SP,#+12
   \   00000124   002091E5           LDR      R2,[R1, #+0]
   \   00000128   043091E5           LDR      R3,[R1, #+4]
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   0C0080E8           STM      R0,{R2,R3}
    161            r.x0 = Pos.x1_Thumb + 1;
   \   00000134   20009DE5           LDR      R0,[SP, #+32]
    162            r.x1 = Pos.x0_RightArrow - 1;
    163            WIDGET__FillRectEx(&pObj->Widget, &r);
   \   00000138   04108DE2           ADD      R1,SP,#+4
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   B400CDE1           STRH     R0,[SP, #+4]
   \   00000144   24009DE5           LDR      R0,[SP, #+36]
   \   00000148   010040E2           SUB      R0,R0,#+1
   \   0000014C   B800CDE1           STRH     R0,[SP, #+8]
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       WIDGET__FillRectEx
    164            //
    165            // Draw Thumb
    166            //
    167            r = rClient;
   \   00000158   0C108DE2           ADD      R1,SP,#+12
   \   0000015C   002091E5           LDR      R2,[R1, #+0]
   \   00000160   043091E5           LDR      R3,[R1, #+4]
   \   00000164   04008DE2           ADD      R0,SP,#+4
   \   00000168   0C0080E8           STM      R0,{R2,R3}
    168            r.x0 = Pos.x0_Thumb;
   \   0000016C   1C009DE5           LDR      R0,[SP, #+28]
    169            r.x1 = Pos.x1_Thumb;
   \   00000170   20109DE5           LDR      R1,[SP, #+32]
   \   00000174   B400CDE1           STRH     R0,[SP, #+4]
   \   00000178   B810CDE1           STRH     R1,[SP, #+8]
    170            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_THUMB]);
   \   0000017C   340094E5           LDR      R0,[R4, #+52]
   \   00000180   ........           BL       LCD_SetColor
    171            WIDGET__FillRectEx(&pObj->Widget, &r);
   \   00000184   04108DE2           ADD      R1,SP,#+4
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   ........           BL       WIDGET__FillRectEx
    172            WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &r);
   \   00000190   04108DE2           ADD      R1,SP,#+4
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           BL       WIDGET__EFFECT_DrawUpRect
    173            //
    174            // Draw right Arrow
    175            //
    176            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_THUMB]);
   \   0000019C   340094E5           LDR      R0,[R4, #+52]
   \   000001A0   ........           BL       LCD_SetColor
    177            r.x0 = Pos.x0_RightArrow;
   \   000001A4   24009DE5           LDR      R0,[SP, #+36]
    178            r.x1 = Pos.x1_RightArrow;
   \   000001A8   28109DE5           LDR      R1,[SP, #+40]
   \   000001AC   B400CDE1           STRH     R0,[SP, #+4]
   \   000001B0   B810CDE1           STRH     R1,[SP, #+8]
    179            WIDGET__FillRectEx(&pObj->Widget, &r);
   \   000001B4   04108DE2           ADD      R1,SP,#+4
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   ........           BL       WIDGET__FillRectEx
    180            LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_ARROW]);
   \   000001C0   3C0094E5           LDR      R0,[R4, #+60]
   \   000001C4   ........           BL       LCD_SetColor
    181            WIDGET__DrawTriangle(&pObj->Widget, r.x1 - ArrowOff, (r.y1 - r.y0) >> 1, ArrowSize, 1);
   \   000001C8   0100A0E3           MOV      R0,#+1
   \   000001CC   00008DE5           STR      R0,[SP, #+0]
   \   000001D0   FA00DDE1           LDRSH    R0,[SP, #+10]
   \   000001D4   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000001D8   0530A0E1           MOV      R3,R5
   \   000001DC   010040E0           SUB      R0,R0,R1
   \   000001E0   C020A0E1           ASR      R2,R0,#+1
   \   000001E4   F800DDE1           LDRSH    R0,[SP, #+8]
   \   000001E8   061040E0           SUB      R1,R0,R6
   \   000001EC   0400A0E1           MOV      R0,R4
   \   000001F0   ........           BL       WIDGET__DrawTriangle
    182            WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &r);
   \   000001F4   04108DE2           ADD      R1,SP,#+4
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           BL       WIDGET__EFFECT_DrawUpRect
    183            //
    184            // Draw overlap area (if any ...)
    185            //
    186            if (Pos.x1_RightArrow != Pos.x1) {
   \   00000200   2C009DE5           LDR      R0,[SP, #+44]
   \   00000204   28109DE5           LDR      R1,[SP, #+40]
   \   00000208   000051E1           CMP      R1,R0
   \   0000020C   0700000A           BEQ      ??_Paint_0
    187              r.x0 = Pos.x1_RightArrow + 1;
   \   00000210   011081E2           ADD      R1,R1,#+1
   \   00000214   B410CDE1           STRH     R1,[SP, #+4]
    188              r.x1 = Pos.x1;
   \   00000218   B800CDE1           STRH     R0,[SP, #+8]
    189              LCD_SetColor(pObj->Props.aColor[SCROLLBAR_CI_THUMB]);
   \   0000021C   340094E5           LDR      R0,[R4, #+52]
   \   00000220   ........           BL       LCD_SetColor
    190              WIDGET__FillRectEx(&pObj->Widget, &r);
   \   00000224   04108DE2           ADD      R1,SP,#+4
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   ........           BL       WIDGET__FillRectEx
    191            }
    192            GUI_UNLOCK_H(pObj);
   \                     ??_Paint_0:
   \   00000230   ........           BL       GUI_ALLOC_UnlockH
    193          }
   \   00000234   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000238   7080BDE8           POP      {R4-R6,PC}       ;; return
    194          
    195          /*********************************************************************
    196          *
    197          *       _Create
    198          */

   \                                 In section .text, align 4, keep-with-next
    199          static void _Create(SCROLLBAR_Handle hObj) {
   \                     _Create:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    200            SCROLLBAR_OBJ * pObj;
    201          
    202            WM_SetHasTrans(hObj);
   \   00000008   ........           BL       WM_SetHasTrans
    203            pObj = SCROLLBAR_LOCK_H(hObj);
    204            pObj->pfCalcPositions = _CalcPositions;
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   ........           LDR      R1,??DataTable4_1
   \   00000018   481080E5           STR      R1,[R0, #+72]
    205            GUI_UNLOCK_H(pObj);
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
    206          }
    207          
    208          /*********************************************************************
    209          *
    210          *        Private data
    211          *
    212          **********************************************************************
    213          */

   \                                 In section .text, align 4, keep-with-next
    214          const WIDGET_SKIN SCROLLBAR__SkinClassic = {
   \                     SCROLLBAR__SkinClassic:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   ............       DC32 _Paint, _Create
   \              ....        
   \   00000008   00000000           DC8 0, 0, 0, 0
    215            _Paint,
    216            _Create
    217          };
    218          
    219          /*********************************************************************
    220          *
    221          *        Public code
    222          *
    223          **********************************************************************
    224          */
    225          /*********************************************************************
    226          *
    227          *       SCROLLBAR_SetSkinClassic
    228          */

   \                                 In section .text, align 4, keep-with-next
    229          void SCROLLBAR_SetSkinClassic(SCROLLBAR_Handle hObj) {
   \                     SCROLLBAR_SetSkinClassic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    230            SCROLLBAR_OBJ * pObj;
    231          
    232            pObj = SCROLLBAR_LOCK_H(hObj);
   \   00000008   ........           BL       GUI_ALLOC_LockH
    233            pObj->pWidgetSkin = &SCROLLBAR__SkinClassic;
   \   0000000C   ........           ADR      R1,SCROLLBAR__SkinClassic
   \   00000010   441080E5           STR      R1,[R0, #+68]
    234            pObj->pfCalcPositions = _CalcPositions;
   \   00000014   ........           LDR      R1,??DataTable4_1
   \   00000018   481080E5           STR      R1,[R0, #+72]
    235            GUI_UNLOCK_H(pObj);
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
    236            WM_InvalidateWindow(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   ........           B        WM_InvalidateWindow  ;; tailcall
    237          }
    238          
    239          /*********************************************************************
    240          *
    241          *       SCROLLBAR_SetDefaultSkinClassic
    242          */

   \                                 In section .text, align 4, keep-with-next
    243          void SCROLLBAR_SetDefaultSkinClassic(void) {
    244            SCROLLBAR__pSkinDefault = &SCROLLBAR__SkinClassic;
   \                     SCROLLBAR_SetDefaultSkinClassic:
   \   00000000   ........           LDR      R0,??DataTable4_2
   \   00000004   ........           ADR      R1,SCROLLBAR__SkinClassic
   \   00000008   001080E5           STR      R1,[R0, #+0]
    245          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   56555555           DC32     0x55555556

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     _CalcPositions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     SCROLLBAR__pSkinDefault
    246          
    247          #else
    248            void SCROLLBAR_SkinClassic_C(void);
    249            void SCROLLBAR_SkinClassic_C(void) {} /* avoid empty object files */
    250          #endif /* GUI_WINSUPPORT */
    251          
    252          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     SCROLLBAR_SetDefaultSkinClassic
                                         0
     SCROLLBAR_SetSkinClassic            8
     _CalcPositions                     48
     _Create                             8
     _Paint                             72


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _CalcPositions                  416
     _Paint                          572
     _Create                          36
     SCROLLBAR__SkinClassic           12
     SCROLLBAR_SetSkinClassic         44
     SCROLLBAR_SetDefaultSkinClassic
                                      16
     ??DataTable4                      4
     ??DataTable4_1                    4
     ??DataTable4_2                    4

 
 1 108 bytes in section .text
 
 1 108 bytes of CODE memory

Errors: none
Warnings: none
