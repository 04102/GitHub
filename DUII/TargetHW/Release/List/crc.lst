###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\crc.c                             #
#    Command line =  C:\DUII\TargetHW\Setup\crc.c -D DEBUG=1 -D               #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\crc.lst                    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\crc.o                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\crc.c
      1          // Part of traqmate.c
      2          // 3/10/2004
      3          // Author: BBoyer
      4          //
      5          // This file contains the crc calculation routines
      6          //
      7          
      8          /*
      9          	The following function calculates a 16 bit CRC on the
     10          	data pointed to by and over the number of bytes specified.
     11          	The value of the CRC is returned.
     12          */
     13          
     14          extern unsigned short crc16_table[];
     15          
     16          /* crc_calc() -- calculate cumulative crc-16 for buffer */
     17          unsigned short crc16(unsigned char *, unsigned int );

   \                                 In section .text, align 4, keep-with-next
     18          unsigned short crc16(unsigned char *buf, unsigned int nbytes)
     19          {
   \                     crc16:
   \   00000000   00402DE9           PUSH     {LR}
     20          	unsigned char *p, *lim;
     21          	unsigned short crc;
     22          
     23          	p = (unsigned char *)buf;
     24          	lim = p + nbytes;
   \   00000004   002081E0           ADD      R2,R1,R0
     25          	crc = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   38309FE5           LDR      R3,??crc16_0
     26          	while (p < lim) {
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0A00002A           BCS      ??crc16_1
     27          		crc = (crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ *p++];
   \                     ??crc16_2:
   \   00000018   01E0D0E4           LDRB     LR,[R0], #+1
   \   0000001C   41C4A0E1           ASR      R12,R1,#+8
   \   00000020   FF1001E2           AND      R1,R1,#0xFF
   \   00000024   01102EE0           EOR      R1,LR,R1
   \   00000028   811083E0           ADD      R1,R3,R1, LSL #+1
   \   0000002C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000030   020050E1           CMP      R0,R2
   \   00000034   0C1021E0           EOR      R1,R1,R12
   \   00000038   0118A0E1           LSL      R1,R1,#+16
   \   0000003C   2118A0E1           LSR      R1,R1,#+16
   \   00000040   F4FFFF3A           BCC      ??crc16_2
     28          	}
     29          	return crc;
   \                     ??crc16_1:
   \   00000044   0100A0E1           MOV      R0,R1
   \   00000048   0080BDE8           POP      {PC}             ;; return
   \                     ??crc16_0:
   \   0000004C   ........           DC32     crc16_table
     30          }

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     crc16         4


   Section sizes:

     Function/Label Bytes
     -------------- -----
     crc16            80

 
 80 bytes in section .text
 
 80 bytes of CODE memory

Errors: none
Warnings: none
