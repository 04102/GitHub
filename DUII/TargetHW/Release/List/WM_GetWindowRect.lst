###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:41 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WM_GetWindowRect.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\WM_GetWindowRect.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WM_GetWindowRect.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WM_GetWindowRect.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WM_GetWindowRect.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WM_GetWindowRect.C
     19          Purpose     : Windows manager, submodule
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          #include "WM_Intern.h"
     25          
     26          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     27          #include "GUI_Debug.h"
     28          #define WM_DEBUG_LEVEL 1
     29          
     30          /*********************************************************************
     31          *
     32          *       Public code
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *       WM_GetWindowRect
     39          *
     40          * Returns the window rect in screen (desktop) coordinates.
     41          */

   \                                 In section .text, align 4, keep-with-next
     42          void WM_GetWindowRect(GUI_RECT* pRect) {
   \                     WM_GetWindowRect:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     43            WM_HWIN hWin;
     44            WM_LOCK();
   \   00000008   ........           BL       GUI_Lock
     45            if (pRect) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0A00000A           BEQ      ??WM_GetWindowRect_0
     46              WM_Obj* pWin;
     47              #if WM_SUPPORT_TRANSPARENCY
     48                hWin = WM__hATransWindow ? WM__hATransWindow : GUI_Context.hAWin;
   \   00000014   ........           LDR      R0,??DataTable0
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   ........           LDREQ    R0,??DataTable0_1
   \   00000024   3C109005           LDREQ    R1,[R0, #+60]
     49              #else
     50                hWin = GUI_Context.hAWin;
     51              #endif
     52              pWin = WM_HANDLE2PTR(hWin);
     53              *pRect = pWin->Rect;
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   ........           BL       GUI_ALLOC_h2p
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   0820A0E3           MOV      R2,#+8
   \   0000003C   ........           BL       __aeabi_memcpy
     54            }
     55            WM_UNLOCK();
   \                     ??WM_GetWindowRect_0:
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   ........           B        GUI_Unlock       ;; tailcall
     56          }
     57          
     58          /*********************************************************************
     59          *
     60          *       WM_GetWindowRectEx
     61          */

   \                                 In section .text, align 4, keep-with-next
     62          void WM_GetWindowRectEx(WM_HWIN hWin, GUI_RECT * pRect) {
   \                     WM_GetWindowRectEx:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     63            if (hWin && pRect) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   00005513           CMPNE    R5,#+0
   \   00000018   0800000A           BEQ      ??WM_GetWindowRectEx_0
     64              WM_Obj * pWin;
     65              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     66              pWin = WM_HANDLE2PTR(hWin);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_h2p
   \   00000028   0010B0E1           MOVS     R1,R0
     67              if (pWin) {
   \   0000002C   0200000A           BEQ      ??WM_GetWindowRectEx_1
     68                *pRect = pWin->Rect;
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   0820A0E3           MOV      R2,#+8
   \   00000038   ........           BL       __aeabi_memcpy
     69              }
     70              WM_UNLOCK();
   \                     ??WM_GetWindowRectEx_1:
   \   0000003C   ........           BL       GUI_Unlock
     71            }
     72          }
   \                     ??WM_GetWindowRectEx_0:
   \   00000040   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     WM__hATransWindow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     GUI_Context
     73          
     74          #else
     75            void WM_GetWindowRect(void) {} /* avoid empty object files */
     76          #endif   /* GUI_WINSUPPORT */
     77          
     78          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     WM_GetWindowRect        8
     WM_GetWindowRectEx     16


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     WM_GetWindowRect     72
     WM_GetWindowRectEx   72
     ??DataTable0          4
     ??DataTable0_1        4

 
 152 bytes in section .text
 
 152 bytes of CODE memory

Errors: none
Warnings: none
