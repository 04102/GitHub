###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:17 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_PID.c                           #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_PID.c -D DEBUG=1 -D             #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_PID.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_PID.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_PID.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_PID.C
     19          Purpose     : PID (Pointer input device) management with buffer
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26            #include "WM.h"
     27          #endif
     28          
     29          /*********************************************************************
     30          *
     31          *       Defines
     32          *
     33          **********************************************************************
     34          */
     35          //
     36          // The following value defines the maximum number of states
     37          // to be managed by this module.
     38          //
     39          #ifndef   GUI_PID_BUFFER_SIZE
     40            #define GUI_PID_BUFFER_SIZE 5
     41          #endif
     42          
     43          /*********************************************************************
     44          *
     45          *       Static data
     46          *
     47          **********************************************************************
     48          */
     49          //
     50          // Input buffer.  Please note that one element remains empty.
     51          //

   \                                 In section .data, align 4
     52          static GUI_PID_STATE _aState[GUI_PID_BUFFER_SIZE + 1]; // Buffer
     53          
     54          static GUI_PID_STATE * _pRead  = &_aState[0]; // Read pointer
   \                     _pRead:
   \   00000000   ........           DC32 _aState
   \   00000004   ........           DC32 _aState
   \                     _aState:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
     55          static GUI_PID_STATE * _pWrite = &_aState[0]; // Write pointer
     56          
     57          /*********************************************************************
     58          *
     59          *       Static code
     60          *
     61          **********************************************************************
     62          */
     63          /*********************************************************************
     64          *
     65          *       _DecPointer
     66          *
     67          * Purpose:
     68          *   Decrements the given pointer. It makes sure that the result is not
     69          *   the given reference pointer. In this case it returns the old value
     70          *
     71          * Parameters:
     72          *   p    - Pointer to be decremented
     73          *   pRef - Reference pointer
     74          *
     75          * Return value:
     76          *   The new pointer
     77          */
     78          static GUI_PID_STATE * _DecPointer(GUI_PID_STATE * p, GUI_PID_STATE * pRef) {
     79            GUI_PID_STATE * pNew;
     80            pNew = p;
     81            if (pNew == _aState) {
     82              //
     83              // Set pointer to last element of array
     84              //
     85              pNew = _aState + GUI_PID_BUFFER_SIZE;
     86            } else {
     87              //
     88              // Decrement pointer
     89              //
     90              --pNew;
     91            }
     92            if (pNew != pRef) {
     93              //
     94              // Return new pointer
     95              //
     96              return pNew;
     97            }
     98            //
     99            // Return old pointer
    100            //
    101            return p;
    102          }
    103          
    104          /*********************************************************************
    105          *
    106          *       _IncPointer
    107          *
    108          * Purpose:
    109          *   Increments the given pointer. It makes sure that the result is not
    110          *   the given reference pointer. In this case it returns the old value
    111          *
    112          * Parameters:
    113          *   p    - Pointer to be incremented
    114          *   pRef - Reference pointer
    115          *
    116          * Return value:
    117          *   The new pointer
    118          */
    119          static GUI_PID_STATE * _IncPointer(GUI_PID_STATE * p, GUI_PID_STATE * pRef) {
    120            GUI_PID_STATE * pNew;
    121            pNew = p;
    122            if (pNew == (_aState + GUI_PID_BUFFER_SIZE)) {
    123              //
    124              // Set pointer to first element of array
    125              //
    126              pNew = _aState;
    127            } else {
    128              //
    129              // Increment pointer
    130              //
    131              ++pNew;
    132            }
    133            if (pNew != pRef) {
    134              //
    135              // Return new pointer
    136              //
    137              return pNew;
    138            }
    139            //
    140            // Return old pointer
    141            //
    142            return p;
    143          }
    144          
    145          /*********************************************************************
    146          *
    147          *       _DecWritePointer
    148          */
    149          static GUI_PID_STATE * _DecWritePointer(GUI_PID_STATE * pWrite) {
    150            return _DecPointer(pWrite, _pRead);
    151          }
    152          
    153          /*********************************************************************
    154          *
    155          *       _IncReadPointer
    156          */
    157          static GUI_PID_STATE * _IncReadPointer(GUI_PID_STATE * pRead) {
    158            return _IncPointer(pRead, _pWrite);
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       _IncWritePointer
    164          */
    165          static GUI_PID_STATE * _IncWritePointer(GUI_PID_STATE * pWrite) {
    166            return _IncPointer(pWrite, _pRead);
    167          }
    168          
    169          /*********************************************************************
    170          *
    171          *       _StoreState
    172          *
    173          * Purpose:
    174          *   Puts the given PID state into the state buffer. In case of an
    175          *   empty buffer it writes without any checks into the buffer. If
    176          *   the buffer is not empty the routine checks if the pressed state
    177          *   of the previous 2 entries are the same as from the new entry to
    178          *   to be written. If it is the same the last element will be
    179          *   overwritten. So the buffer contains a maximum of 2 consecutive
    180          *   entries of the same pressed state.
    181          */

   \                                 In section .text, align 4, keep-with-next
    182          static void _StoreState(const GUI_PID_STATE * pState) {
   \                     _StoreState:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    183            GUI_PID_STATE * pPrev0;
    184            GUI_PID_STATE * pPrev1;
    185            //
    186            // Check if not empty
    187            //
    188            if (_pWrite != _pRead) {
   \   00000004   ........           LDR      R1,??DataTable2
   \   00000008   043091E5           LDR      R3,[R1, #+4]
   \   0000000C   002091E5           LDR      R2,[R1, #+0]
   \   00000010   020053E1           CMP      R3,R2
   \   00000014   1A00000A           BEQ      ??_StoreState_0
    189              //
    190              // Get previous element
    191              //
    192              pPrev0 = _DecWritePointer(_pWrite);
   \   00000018   03C0A0E1           MOV      R12,R3
   \   0000001C   084081E2           ADD      R4,R1,#+8
   \   00000020   04005CE1           CMP      R12,R4
   \   00000024   0C404C12           SUBNE    R4,R12,#+12
   \   00000028   44408102           ADDEQ    R4,R1,#+68
   \   0000002C   020054E1           CMP      R4,R2
   \   00000030   04C0A011           MOVNE    R12,R4
    193              if (pPrev0 != _pWrite) {
   \   00000034   03005CE1           CMP      R12,R3
   \   00000038   1100000A           BEQ      ??_StoreState_0
    194                //
    195                // Check if pressed state of new element is different
    196                //
    197                if (pState->Pressed == pPrev0->Pressed) {
   \   0000003C   08E0D0E5           LDRB     LR,[R0, #+8]
   \   00000040   0850DCE5           LDRB     R5,[R12, #+8]
   \   00000044   05005EE1           CMP      LR,R5
   \   00000048   0D00001A           BNE      ??_StoreState_0
    198                  //
    199                  // Get previous element
    200                  //
    201                  pPrev1 = _DecWritePointer(pPrev0);
   \   0000004C   086081E2           ADD      R6,R1,#+8
   \   00000050   06005CE1           CMP      R12,R6
   \   00000054   0C604C12           SUBNE    R6,R12,#+12
   \   00000058   44608102           ADDEQ    R6,R1,#+68
   \   0000005C   020056E1           CMP      R6,R2
   \   00000060   0C60A001           MOVEQ    R6,R12
    202                  if (pPrev1 != pPrev0) {
   \   00000064   0C0056E1           CMP      R6,R12
   \   00000068   0500000A           BEQ      ??_StoreState_0
    203                    //
    204                    // Check if pressed state of new element is different
    205                    //
    206                    if (pState->Pressed == pPrev1->Pressed) {
   \   0000006C   08C0D6E5           LDRB     R12,[R6, #+8]
   \   00000070   0C005EE1           CMP      LR,R12
   \   00000074   0200001A           BNE      ??_StoreState_0
    207                      //
    208                      // Set write pointer on previous element to be overwritten
    209                      //
    210                      _pWrite = _DecWritePointer(_pWrite);
   \   00000078   020054E1           CMP      R4,R2
   \   0000007C   0430A011           MOVNE    R3,R4
    211                    }
    212                  }
    213                }
    214              }
    215            }
   \   00000080   043081E5           STR      R3,[R1, #+4]
    216            *_pWrite = *pState;
   \                     ??_StoreState_0:
   \   00000084   1050B0E8           LDM      R0!,{R4,R12,LR}
   \   00000088   043091E5           LDR      R3,[R1, #+4]
    217            _pWrite = _IncWritePointer(_pWrite);
   \   0000008C   440081E2           ADD      R0,R1,#+68
   \   00000090   1050A3E8           STM      R3!,{R4,R12,LR}
   \   00000094   0C3043E2           SUB      R3,R3,#+12
   \   00000098   000053E1           CMP      R3,R0
   \   0000009C   0C008312           ADDNE    R0,R3,#+12
   \   000000A0   08008102           ADDEQ    R0,R1,#+8
   \   000000A4   020050E1           CMP      R0,R2
   \   000000A8   0030A011           MOVNE    R3,R0
   \   000000AC   043081E5           STR      R3,[R1, #+4]
    218          }
   \   000000B0   7080BDE8           POP      {R4-R6,PC}       ;; return
    219          
    220          /*********************************************************************
    221          *
    222          *       Public code
    223          *
    224          **********************************************************************
    225          */
    226          /*********************************************************************
    227          *
    228          *       GUI_PID_GetState
    229          */

   \                                 In section .text, align 4, keep-with-next
    230          int GUI_PID_GetState(GUI_PID_STATE * pState) {
   \                     GUI_PID_GetState:
   \   00000000   00402DE9           PUSH     {LR}
    231            //
    232            // Get value
    233            //
    234            *pState = *_pRead;
   \   00000004   ........           LDR      R1,??DataTable2
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   0850B2E8           LDM      R2!,{R3,R12,LR}
   \   00000010   0C2042E2           SUB      R2,R2,#+12
   \   00000014   0850A0E8           STM      R0!,{R3,R12,LR}
    235            //
    236            // Increment read pointer if not empty
    237            //
    238            if (_pRead != _pWrite) {
   \   00000018   043091E5           LDR      R3,[R1, #+4]
   \   0000001C   0C0040E2           SUB      R0,R0,#+12
   \   00000020   030052E1           CMP      R2,R3
   \   00000024   0600000A           BEQ      ??GUI_PID_GetState_0
    239              _pRead = _IncReadPointer(_pRead);
   \   00000028   44C081E2           ADD      R12,R1,#+68
   \   0000002C   0C0052E1           CMP      R2,R12
   \   00000030   0CC08212           ADDNE    R12,R2,#+12
   \   00000034   08C08102           ADDEQ    R12,R1,#+8
   \   00000038   03005CE1           CMP      R12,R3
   \   0000003C   0C20A011           MOVNE    R2,R12
    240            }
   \   00000040   002081E5           STR      R2,[R1, #+0]
    241            //
    242            // Return
    243            //
    244            return (pState->Pressed != 0) ? 1 : 0;
   \                     ??GUI_PID_GetState_0:
   \   00000044   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100A013           MOVNE    R0,#+1
   \   00000050   0080BDE8           POP      {PC}             ;; return
    245          }
    246          
    247          /*********************************************************************
    248          *
    249          *       GUI_PID_StoreState
    250          */

   \                                 In section .text, align 4, keep-with-next
    251          void GUI_PID_StoreState(const GUI_PID_STATE * pState) {
    252            //
    253            // If the window manager is available, set the function pointer for
    254            // the PID handler.
    255            //
    256            #if (GUI_WINSUPPORT)
    257              WM_pfHandlePID = WM_HandlePID;
   \                     GUI_PID_StoreState:
   \   00000000   ........           LDR      R1,??DataTable2_1
   \   00000004   ........           LDR      R2,??DataTable2_2
   \   00000008   002081E5           STR      R2,[R1, #+0]
    258            #endif
    259            //
    260            // Store value
    261            //
    262            _StoreState(pState);
   \   0000000C   ........           B        _StoreState      ;; tailcall
    263            //
    264            // Wake up emWin (if required)
    265            //
    266            GUI_X_SIGNAL_EVENT();
    267          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     _pRead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     WM_pfHandlePID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     WM_HandlePID
    268          
    269          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GUI_PID_GetState        4
     GUI_PID_StoreState      8
     _StoreState            16


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     _pRead               80
     _pWrite
     _aState
     _StoreState         180
     GUI_PID_GetState     84
     GUI_PID_StoreState   16
     ??DataTable2          4
     ??DataTable2_1        4
     ??DataTable2_2        4

 
  80 bytes in section .data
 292 bytes in section .text
 
 292 bytes of CODE memory
  80 bytes of DATA memory

Errors: none
Warnings: none
