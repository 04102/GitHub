###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:22 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FAT_DirEntry.c                       #
#    Command line =  C:\DUII\TargetHW\FS\FAT_DirEntry.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FAT_DirEntry.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FAT_DirEntry.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FAT_DirEntry.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FAT_DirEntry.c
     19          Purpose     : FAT routines for retrieving/setting dir entry info
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *             #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          #include "FAT.h"
     32          #include "FAT_Intern.h"
     33          
     34          
     35          /*********************************************************************
     36          *
     37          *       Static code
     38          *
     39          **********************************************************************
     40          */
     41          
     42          
     43          /*********************************************************************
     44          *
     45          *       _GetDirInfo
     46          *
     47          */
     48          static void _GetDirInfo(FS_FAT_DENTRY * pDirEntry, void  * p, int Mask) {
     49            U32 * pTimeStamp;
     50          
     51            pTimeStamp  = (U32 *)p;
     52            switch (Mask) {
     53              case FS_DIRENTRY_GET_ATTRIBUTES:
     54              {
     55                U8 * pAttributes;
     56                pAttributes = (U8 *)p;
     57                *pAttributes = pDirEntry->data[DIR_ENTRY_OFF_ATTRIBUTES];
     58                break;
     59              }
     60              case FS_DIRENTRY_GET_TIMESTAMP_CREATE:
     61                *pTimeStamp = FS_LoadU32LE(&pDirEntry->data[DIR_ENTRY_OFF_CREATION_TIME]);
     62                break;
     63              case FS_DIRENTRY_GET_TIMESTAMP_MODIFY:
     64                *pTimeStamp = FS_LoadU32LE(&pDirEntry->data[DIR_ENTRY_OFF_WRITE_TIME]);
     65                break;
     66              case FS_DIRENTRY_GET_TIMESTAMP_ACCESS:
     67                *pTimeStamp = (U32)FS_LoadU16LE(&pDirEntry->data[DIR_ENTRY_OFF_LAST_ACCESS_DATE]) << 16;
     68                break;
     69            }
     70          }
     71          
     72          /*********************************************************************
     73          *
     74          *       _SetDirInfo
     75          *
     76          */
     77          static void _SetDirInfo(FS_FAT_DENTRY * pDirEntry, const void  * p, int Mask) {
     78            U32 TimeStamp;
     79            U16 Date;
     80            U16 Time;
     81          
     82            if (Mask == FS_DIRENTRY_SET_ATTRIBUTES) {
     83              U8         Attributes;
     84              U8         AttributesSet;
     85              AttributesSet = *(const U8 *)p;
     86              Attributes    = pDirEntry->data[DIR_ENTRY_OFF_ATTRIBUTES];
     87              //
     88              // Check if directory entry is a directory. This attribute needs
     89              //
     90              if ((Attributes & FS_FAT_ATTR_DIRECTORY) == FS_FAT_ATTR_DIRECTORY) {
     91                AttributesSet |= FS_FAT_ATTR_DIRECTORY;
     92              } else {
     93                AttributesSet &= ~FS_FAT_ATTR_DIRECTORY;
     94              }
     95              pDirEntry->data[DIR_ENTRY_OFF_ATTRIBUTES] = AttributesSet;
     96            } else {
     97              TimeStamp  = *(const U32 *)p;
     98              Date = (U16)(TimeStamp >> 16);
     99              Time = (U16)(TimeStamp & 0xffff);
    100              switch (Mask) {
    101              case FS_DIRENTRY_SET_TIMESTAMP_CREATE:
    102                FS_StoreU16LE(&pDirEntry->data[DIR_ENTRY_OFF_CREATION_TIME], Time);
    103                FS_StoreU16LE(&pDirEntry->data[DIR_ENTRY_OFF_CREATION_DATE], Date);
    104                break;
    105              case FS_DIRENTRY_SET_TIMESTAMP_MODIFY:
    106                FS_StoreU16LE(&pDirEntry->data[DIR_ENTRY_OFF_WRITE_TIME], Time);
    107                FS_StoreU16LE(&pDirEntry->data[DIR_ENTRY_OFF_WRITE_DATE], Date);
    108                break;
    109              case FS_DIRENTRY_SET_TIMESTAMP_ACCESS:
    110                FS_StoreU16LE(&pDirEntry->data[DIR_ENTRY_OFF_LAST_ACCESS_DATE], Date);
    111                break;
    112              }
    113            }
    114          }
    115          
    116          /*********************************************************************
    117          *
    118          *       Public code
    119          *
    120          **********************************************************************
    121          */
    122          
    123          /*********************************************************************
    124          *
    125          *       FS_FAT_GetDirEntryInfo
    126          *
    127          *  Description:
    128          *    Retrieves information of a directory entry
    129          *
    130          *  Parameters:
    131          *    pVolume     - Pointer to an FS_VOLUME data structure.
    132          *    sName       - path to the file/directory.
    133          *    p           - pointer to a buffer that receives the information
    134          *    Mask        - Type of the information that need to be retrieved.
    135          *
    136          *  Return value:
    137          *    0         O.K.
    138          *    1         Error
    139          */

   \                                 In section .text, align 4, keep-with-next
    140          char FS_FAT_GetDirEntryInfo(FS_VOLUME * pVolume, const char * sName,       void * p, int Mask) {
   \                     FS_FAT_GetDirEntryInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
    141            const char    *  pName;
    142            char             r;
    143            FS_SB            SB;
    144            U32           DirStart;
    145            FS_FAT_DENTRY  * pDirEntry;
    146            /*
    147             * Search directory
    148             */
    149            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   14008DE2           ADD      R0,SP,#+20
   \   00000020   ........           BL       FS__SB_Create
    150            if (FS_FAT_FindPath(pVolume, &SB, sName, &pName, &DirStart) == 0) {
   \   00000024   0C008DE2           ADD      R0,SP,#+12
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   10308DE2           ADD      R3,SP,#+16
   \   00000030   0720A0E1           MOV      R2,R7
   \   00000034   14108DE2           ADD      R1,SP,#+20
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       FS_FAT_FindPath
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0300001A           BNE      ??FS_FAT_GetDirEntryInfo_1
    151              FS__SB_Delete(&SB);
   \   00000048   14008DE2           ADD      R0,SP,#+20
   \   0000004C   ........           BL       FS__SB_Delete
    152              return 1;  /* Directory not found */
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   290000EA           B        ??FS_FAT_GetDirEntryInfo_2
    153            }
    154            r = 1;       /* No error so far */
    155            /*
    156             * check if entry exists
    157             */
    158            pDirEntry = FS_FAT_FindDirEntry(pVolume, &SB, pName, 0, DirStart, 0, NULL);
   \                     ??FS_FAT_GetDirEntryInfo_1:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   08008DE5           STR      R0,[SP, #+8]
   \   00000060   04008DE5           STR      R0,[SP, #+4]
   \   00000064   0C009DE5           LDR      R0,[SP, #+12]
   \   00000068   0170A0E3           MOV      R7,#+1
   \   0000006C   00008DE5           STR      R0,[SP, #+0]
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   10209DE5           LDR      R2,[SP, #+16]
   \   00000078   14108DE2           ADD      R1,SP,#+20
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       FS_FAT_FindDirEntry
    159            if (pDirEntry) {
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1900000A           BEQ      ??FS_FAT_GetDirEntryInfo_3
    160              _GetDirInfo(pDirEntry, p, Mask);
   \   0000008C   016046E2           SUB      R6,R6,#+1
   \   00000090   070056E3           CMP      R6,#+7
   \   00000094   06F18F90           ADDLS    PC,PC,R6, LSL #+2
   \                     ??FS_FAT_GetDirEntryInfo_0:
   \   00000098   1400008A           BHI      ??FS_FAT_GetDirEntryInfo_4
   \   0000009C   110000EA           B        ??FS_FAT_GetDirEntryInfo_5
   \   000000A0   0D0000EA           B        ??FS_FAT_GetDirEntryInfo_6
   \   000000A4   110000EA           B        ??FS_FAT_GetDirEntryInfo_4
   \   000000A8   080000EA           B        ??FS_FAT_GetDirEntryInfo_7
   \   000000AC   0F0000EA           B        ??FS_FAT_GetDirEntryInfo_4
   \   000000B0   0E0000EA           B        ??FS_FAT_GetDirEntryInfo_4
   \   000000B4   0D0000EA           B        ??FS_FAT_GetDirEntryInfo_4
   \   000000B8   FFFFFFEA           B        ??FS_FAT_GetDirEntryInfo_8
   \                     ??FS_FAT_GetDirEntryInfo_8:
   \   000000BC   120080E2           ADD      R0,R0,#+18
   \   000000C0   ........           BL       FS_LoadU16LE
   \   000000C4   0008A0E1           LSL      R0,R0,#+16
   \                     ??FS_FAT_GetDirEntryInfo_9:
   \   000000C8   000085E5           STR      R0,[R5, #+0]
   \   000000CC   070000EA           B        ??FS_FAT_GetDirEntryInfo_4
   \                     ??FS_FAT_GetDirEntryInfo_7:
   \   000000D0   160080E2           ADD      R0,R0,#+22
   \   000000D4   ........           BL       FS_LoadU32LE
   \   000000D8   FAFFFFEA           B        ??FS_FAT_GetDirEntryInfo_9
   \                     ??FS_FAT_GetDirEntryInfo_6:
   \   000000DC   0E0080E2           ADD      R0,R0,#+14
   \   000000E0   ........           BL       FS_LoadU32LE
   \   000000E4   F7FFFFEA           B        ??FS_FAT_GetDirEntryInfo_9
   \                     ??FS_FAT_GetDirEntryInfo_5:
   \   000000E8   0B00D0E5           LDRB     R0,[R0, #+11]
   \   000000EC   0000C5E5           STRB     R0,[R5, #+0]
    161              r = 0;
   \                     ??FS_FAT_GetDirEntryInfo_4:
   \   000000F0   0070A0E3           MOV      R7,#+0
    162            }
    163            FS__SB_Delete(&SB);
   \                     ??FS_FAT_GetDirEntryInfo_3:
   \   000000F4   14008DE2           ADD      R0,SP,#+20
   \   000000F8   ........           BL       FS__SB_Delete
    164          
    165            return r;
   \   000000FC   0700A0E1           MOV      R0,R7
   \                     ??FS_FAT_GetDirEntryInfo_2:
   \   00000100   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000104   F080BDE8           POP      {R4-R7,PC}       ;; return
    166          }
    167          
    168          /*********************************************************************
    169          *
    170          *       FS_FAT_SetDirEntryInfo
    171          *
    172          *  Description:
    173          *    Sets the desired information to a directory entry
    174          *
    175          *  Parameters:
    176          *    pVolume     - Pointer to an FS_VOLUME data structure.
    177          *    sName       - path to the file/directory.
    178          *    p           - pointer to a buffer that holds the information
    179          *    Mask        - Type of the information that needs to be updated.
    180          *
    181          *  Return value:
    182          *    0         O.K.
    183          *    1         Error
    184          */

   \                                 In section .text, align 4, keep-with-next
    185          char FS_FAT_SetDirEntryInfo(FS_VOLUME * pVolume, const char * sName, const void * p, int Mask) {
   \                     FS_FAT_SetDirEntryInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0340A0E1           MOV      R4,R3
    186            const char    *  pName;
    187            char             r;
    188            FS_SB            SB;
    189            U32           DirStart;
    190            FS_FAT_DENTRY  * pDirEntry;
    191            /*
    192             * Search directory
    193             */
    194            FS__SB_Create(&SB, &pVolume->Partition);
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   14008DE2           ADD      R0,SP,#+20
   \   00000020   ........           BL       FS__SB_Create
    195            if (FS_FAT_FindPath(pVolume, &SB, sName, &pName, &DirStart) == 0) {
   \   00000024   0C008DE2           ADD      R0,SP,#+12
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   10308DE2           ADD      R3,SP,#+16
   \   00000030   0720A0E1           MOV      R2,R7
   \   00000034   14108DE2           ADD      R1,SP,#+20
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   ........           BL       FS_FAT_FindPath
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0300001A           BNE      ??FS_FAT_SetDirEntryInfo_0
    196              FS__SB_Delete(&SB);
   \   00000048   14008DE2           ADD      R0,SP,#+20
   \   0000004C   ........           BL       FS__SB_Delete
    197              return 1;  /* Directory not found */
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   320000EA           B        ??FS_FAT_SetDirEntryInfo_1
    198            }
    199            r = 1;       /* No error so far */
    200            /*
    201             * check if entry exists
    202             */
    203            pDirEntry = FS_FAT_FindDirEntry(pVolume, &SB, pName, 0, DirStart, 0, NULL);
   \                     ??FS_FAT_SetDirEntryInfo_0:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   08008DE5           STR      R0,[SP, #+8]
   \   00000060   04008DE5           STR      R0,[SP, #+4]
   \   00000064   0C009DE5           LDR      R0,[SP, #+12]
   \   00000068   0170A0E3           MOV      R7,#+1
   \   0000006C   00008DE5           STR      R0,[SP, #+0]
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   10209DE5           LDR      R2,[SP, #+16]
   \   00000078   14108DE2           ADD      R1,SP,#+20
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       FS_FAT_FindDirEntry
   \   00000084   0060B0E1           MOVS     R6,R0
    204            if (pDirEntry) {
   \   00000088   2200000A           BEQ      ??FS_FAT_SetDirEntryInfo_2
    205              _SetDirInfo(pDirEntry, p, Mask);
   \   0000008C   010054E3           CMP      R4,#+1
   \   00000090   1700000A           BEQ      ??FS_FAT_SetDirEntryInfo_3
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   024054E2           SUBS     R4,R4,#+2
   \   0000009C   2158A0E1           LSR      R5,R1,#+16
   \   000000A0   0118A0E1           LSL      R1,R1,#+16
   \   000000A4   2118A0E1           LSR      R1,R1,#+16
   \   000000A8   0C00000A           BEQ      ??FS_FAT_SetDirEntryInfo_4
   \   000000AC   024054E2           SUBS     R4,R4,#+2
   \   000000B0   0500000A           BEQ      ??FS_FAT_SetDirEntryInfo_5
   \   000000B4   044054E2           SUBS     R4,R4,#+4
   \   000000B8   1300001A           BNE      ??FS_FAT_SetDirEntryInfo_6
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   120086E2           ADD      R0,R6,#+18
   \                     ??FS_FAT_SetDirEntryInfo_7:
   \   000000C4   ........           BL       FS_StoreU16LE
   \   000000C8   0F0000EA           B        ??FS_FAT_SetDirEntryInfo_6
   \                     ??FS_FAT_SetDirEntryInfo_5:
   \   000000CC   160086E2           ADD      R0,R6,#+22
   \   000000D0   ........           BL       FS_StoreU16LE
   \   000000D4   0510A0E1           MOV      R1,R5
   \   000000D8   180086E2           ADD      R0,R6,#+24
   \   000000DC   F8FFFFEA           B        ??FS_FAT_SetDirEntryInfo_7
   \                     ??FS_FAT_SetDirEntryInfo_4:
   \   000000E0   0E0086E2           ADD      R0,R6,#+14
   \   000000E4   ........           BL       FS_StoreU16LE
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   100086E2           ADD      R0,R6,#+16
   \   000000F0   F3FFFFEA           B        ??FS_FAT_SetDirEntryInfo_7
   \                     ??FS_FAT_SetDirEntryInfo_3:
   \   000000F4   0B10D6E5           LDRB     R1,[R6, #+11]
   \   000000F8   0000D5E5           LDRB     R0,[R5, #+0]
   \   000000FC   100011E3           TST      R1,#0x10
   \   00000100   10008013           ORRNE    R0,R0,#0x10
   \   00000104   EF000002           ANDEQ    R0,R0,#0xEF
   \   00000108   0B00C6E5           STRB     R0,[R6, #+11]
    206              FS__SB_MarkDirty(&SB);
   \                     ??FS_FAT_SetDirEntryInfo_6:
   \   0000010C   14008DE2           ADD      R0,SP,#+20
   \   00000110   ........           BL       FS__SB_MarkDirty
    207              r = 0;
   \   00000114   0070A0E3           MOV      R7,#+0
    208            }
    209            FS__SB_Delete(&SB);
   \                     ??FS_FAT_SetDirEntryInfo_2:
   \   00000118   14008DE2           ADD      R0,SP,#+20
   \   0000011C   ........           BL       FS__SB_Delete
    210          
    211            return r;
   \   00000120   0700A0E1           MOV      R0,R7
   \                     ??FS_FAT_SetDirEntryInfo_1:
   \   00000124   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000128   F080BDE8           POP      {R4-R7,PC}       ;; return
    212          }
    213          
    214          
    215          
    216          /*************************** End of file ****************************/
    217          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     FS_FAT_GetDirEntryInfo     56
     FS_FAT_SetDirEntryInfo     56


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     FS_FAT_GetDirEntryInfo  264
     FS_FAT_SetDirEntryInfo  300

 
 564 bytes in section .text
 
 564 bytes of CODE memory

Errors: none
Warnings: none
