###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:58 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Unmount.c                         #
#    Command line =  C:\DUII\TargetHW\FS\FS_Unmount.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Unmount.lst             #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Unmount.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Unmount.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Unmount.c
     19          Purpose     : Implementation of FS_Unmount..
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          
     33          /*********************************************************************
     34          *
     35          *       _Unmount
     36          *
     37          *  Description:
     38          *    Internal version of unmounting a volume
     39          *    Closes all open file and directory handles to the volume, marks the volume as unmounted
     40          *
     41          *  Parameters:
     42          *    pVolume       Volume to unmount. Must be valid, may not be NULL.
     43          */
     44          static void _Unmount(FS_VOLUME * pVolume) {
     45            FS_DEVICE  * pDevice;
     46            
     47            pDevice = &pVolume->Partition.Device;
     48            FS_LOCK_DRIVER(pDevice);
     49            if (pVolume->IsMounted) {
     50              FS_FILE    * pFile;
     51              
     52              FS_JOURNAL_INVALIDATE(pVolume);              // Note: If a transaction on the journal is running, data in journal is purposly discarded!
     53              //
     54              // Close all open files on this volume
     55              //
     56              pFile = FS_Global.pFirstFilehandle;
     57              while (pFile){
     58                FS_FILE_OBJ * pFileObj;
     59                char FileIsOnThisVolume;
     60                
     61                //
     62                // Check if file is on this volume. SYS-Lock is required when going thru the data structures.
     63                //
     64                FileIsOnThisVolume = 0;
     65                FS_LOCK_SYS();
     66                if (pFile->InUse) {
     67                  pFileObj = pFile->pFileObj;
     68                  if (pFileObj->pVolume == pVolume) {
     69                    FileIsOnThisVolume = 1;
     70                  }
     71                }
     72                FS_UNLOCK_SYS();
     73                //
     74                // Close file if it is on this volume
     75                //
     76                if (FileIsOnThisVolume) {
     77                  FS__FCloseNL(pFile);
     78                }
     79                pFile = pFile->pNext;
     80              }
     81            #if FS_SUPPORT_CACHE
     82              //
     83              // Clean cache
     84              //
     85              FS__CACHE_CommandDeviceNL(pDevice, FS_CMD_CACHE_CLEAN,  NULL);
     86              //
     87              // Invalidate cache
     88              //
     89              FS__CACHE_CommandDeviceNL(pDevice, FS_CMD_CACHE_INVALIDATE,  pVolume->Partition.Device.Data.pCacheData);
     90            #endif
     91              FS_CLEAN_FS(pVolume);
     92            }
     93            FS__IoCtlNL(pVolume, FS_CMD_UNMOUNT, 0, NULL);           // Send unmount command to driver
     94            FS_LOCK_SYS();
     95            pVolume->IsMounted = 0;                                  // Mark volume as unmounted
     96            pDevice->Data.IsInited = 0;
     97            pVolume->Partition.StartSector = 0;
     98            pVolume->Partition.NumSectors  = 0;
     99            FS_UNLOCK_SYS();
    100            FS_UNLOCK_DRIVER(pDevice);
    101          
    102          }
    103          
    104          /*********************************************************************
    105          *
    106          *       Public code
    107          *
    108          **********************************************************************
    109          */
    110          
    111          /*********************************************************************
    112          *
    113          *       FS__UnmountNL
    114          *
    115          *  Description:
    116          *    Internal version of unmounting a device
    117          *    Closes all open file and directory handles to the volume, marks the volume as unmounted
    118          *    Does not perform locking.
    119          *
    120          *  Parameters:
    121          *    pVolume       Volume to unmount. Must be valid, may not be NULL.
    122          */

   \                                 In section .text, align 4, keep-with-next
    123          void FS__UnmountNL(FS_VOLUME * pVolume) {
   \                     FS__UnmountNL:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    124            FS_DEVICE  * pDevice;
    125            
    126            pDevice = &pVolume->Partition.Device;
    127            FS_LOCK_DRIVER(pDevice);
    128            if (pVolume->IsMounted) {
   \   00000008   5D00D4E5           LDRB     R0,[R4, #+93]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1900000A           BEQ      ??FS__UnmountNL_0
    129              FS_FILE    * pFile;
    130              
    131              FS_JOURNAL_INVALIDATE(pVolume);              // Note: If a transaction on the journal is running, data in journal is purposly discarded!
    132              //
    133              // Close all open files on this volume
    134              //
    135              pFile = FS_Global.pFirstFilehandle;
   \   00000018   ........           LDR      R0,??DataTable2
   \   0000001C   145090E5           LDR      R5,[R0, #+20]
    136              while (pFile){
   \   00000020   000055E3           CMP      R5,#+0
   \   00000024   0B00000A           BEQ      ??FS__UnmountNL_1
    137                FS_FILE_OBJ * pFileObj;
    138                char FileIsOnThisVolume;
    139                
    140                //
    141                // Check if file is on this volume. SYS-Lock is required when going thru the data structures.
    142                //
    143                FileIsOnThisVolume = 0;
    144                FS_LOCK_SYS();
    145                if (pFile->InUse) {
   \                     ??FS__UnmountNL_2:
   \   00000028   0A00D5E5           LDRB     R0,[R5, #+10]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0500000A           BEQ      ??FS__UnmountNL_3
    146                  pFileObj = pFile->pFileObj;
    147                  if (pFileObj->pVolume == pVolume) {
   \   00000034   000095E5           LDR      R0,[R5, #+0]
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   040050E1           CMP      R0,R4
   \   00000040   0100001A           BNE      ??FS__UnmountNL_3
    148                    FileIsOnThisVolume = 1;
    149                  }
    150                }
    151                FS_UNLOCK_SYS();
    152                //
    153                // Close file if it is on this volume
    154                //
    155                if (FileIsOnThisVolume) {
    156                  FS__FCloseNL(pFile);
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       FS__FCloseNL
    157                }
    158                pFile = pFile->pNext;
   \                     ??FS__UnmountNL_3:
   \   0000004C   0C5095E5           LDR      R5,[R5, #+12]
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   F3FFFF1A           BNE      ??FS__UnmountNL_2
    159              }
    160            #if FS_SUPPORT_CACHE
    161              //
    162              // Clean cache
    163              //
    164              FS__CACHE_CommandDeviceNL(pDevice, FS_CMD_CACHE_CLEAN,  NULL);
   \                     ??FS__UnmountNL_1:
   \   00000058   7110A0E3           MOV      R1,#+113
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       FS__CACHE_CommandDeviceNL
    165              //
    166              // Invalidate cache
    167              //
    168              FS__CACHE_CommandDeviceNL(pDevice, FS_CMD_CACHE_INVALIDATE,  pVolume->Partition.Device.Data.pCacheData);
   \   0000006C   7410A0E3           MOV      R1,#+116
   \   00000070   0C2094E5           LDR      R2,[R4, #+12]
   \   00000074   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       FS__CACHE_CommandDeviceNL
    169            #endif
    170            }
    171            FS__IoCtlNL(pVolume, FS_CMD_UNMOUNT, 0, NULL);           // Send unmount command to driver
   \                     ??FS__UnmountNL_0:
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   FC1FA0E3           MOV      R1,#+1008
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       FS__IoCtlNL
    172            FS_LOCK_SYS();
    173            pVolume->IsMounted = 0;                                  // Mark volume as unmounted
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   5D00C4E5           STRB     R0,[R4, #+93]
    174            pDevice->Data.IsInited = 0;
   \   0000009C   0500C4E5           STRB     R0,[R4, #+5]
    175            pVolume->Partition.StartSector = 0;
   \   000000A0   140084E5           STR      R0,[R4, #+20]
    176            pVolume->Partition.NumSectors  = 0;
   \   000000A4   180084E5           STR      R0,[R4, #+24]
    177            FS_UNLOCK_SYS();
    178            FS_UNLOCK_DRIVER(pDevice);
    179          }
   \   000000A8   04D08DE2           ADD      SP,SP,#+4
   \   000000AC   3080BDE8           POP      {R4,R5,PC}       ;; return
    180          
    181          /*********************************************************************
    182          *
    183          *       FS__UnmountForcedNL
    184          *
    185          *  Description:
    186          *    Unmounts a devices.
    187          *    Invalidates all open file and directory handles to the volume, marks the volume as unmounted
    188          *    Does not perform locking.
    189          *
    190          *  Parameters:
    191          *    pVolume       Volume to unmount. Must be valid, may not be NULL.
    192          *
    193          */

   \                                 In section .text, align 4, keep-with-next
    194          void FS__UnmountForcedNL(FS_VOLUME * pVolume) {
   \                     FS__UnmountForcedNL:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    195            FS_DEVICE * pDevice;
    196            pDevice = &pVolume->Partition.Device;
    197            if (pVolume->IsMounted) {
   \   00000008   5D00D4E5           LDRB     R0,[R4, #+93]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1500000A           BEQ      ??FS__UnmountForcedNL_0
    198              FS_FILE   * pFile;
    199              
    200              FS_JOURNAL_INVALIDATE(pVolume);
    201              //
    202              // Invalidate all open handles on this volume
    203              //
    204              FS_LOCK_SYS();
    205              pFile    = FS_Global.pFirstFilehandle;
   \   00000014   ........           LDR      R0,??DataTable2
   \   00000018   140090E5           LDR      R0,[R0, #+20]
    206              while (pFile) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1100000A           BEQ      ??FS__UnmountForcedNL_0
    207                FS_FILE_OBJ * pFileObj;
    208                //
    209                // Check if file is on this volume. SYS-Lock is required when going thru the data structures.
    210                //
    211                if (pFile->InUse) {
   \                     ??FS__UnmountForcedNL_1:
   \   00000024   0A10D0E5           LDRB     R1,[R0, #+10]
   \   00000028   000051E3           CMP      R1,#+0
    212                  pFileObj = pFile->pFileObj;
   \   0000002C   00109015           LDRNE    R1,[R0, #+0]
    213                  if (pFileObj) {
   \   00000030   00005113           CMPNE    R1,#+0
   \   00000034   0900000A           BEQ      ??FS__UnmountForcedNL_2
    214                    if (pFileObj->pVolume == pVolume) {
   \   00000038   082091E5           LDR      R2,[R1, #+8]
   \   0000003C   040052E1           CMP      R2,R4
   \   00000040   0600001A           BNE      ??FS__UnmountForcedNL_2
    215                      pFile->InUse    = 0;
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0A20C0E5           STRB     R2,[R0, #+10]
    216                      pFile->pFileObj = (FS_FILE_OBJ*)NULL;
   \   0000004C   002080E5           STR      R2,[R0, #+0]
    217                      if (pFileObj->UseCnt) {
   \   00000050   0C20D1E5           LDRB     R2,[R1, #+12]
   \   00000054   000052E3           CMP      R2,#+0
    218                        pFileObj->UseCnt--;   // Could also be cleared to 0
   \   00000058   01204212           SUBNE    R2,R2,#+1
   \   0000005C   0C20C115           STRBNE   R2,[R1, #+12]
    219                      }
    220                    }
    221                  }
    222                }
    223                pFile = pFile->pNext;
   \                     ??FS__UnmountForcedNL_2:
   \   00000060   0C0090E5           LDR      R0,[R0, #+12]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   EDFFFF1A           BNE      ??FS__UnmountForcedNL_1
    224              }
    225              FS_UNLOCK_SYS();
    226            }
    227          #if FS_SUPPORT_CACHE
    228            //
    229            // Invalidate cache
    230            //
    231            FS__CACHE_CommandDeviceNL(pDevice, FS_CMD_CACHE_INVALIDATE,  pVolume->Partition.Device.Data.pCacheData);
   \                     ??FS__UnmountForcedNL_0:
   \   0000006C   7410A0E3           MOV      R1,#+116
   \   00000070   0C2094E5           LDR      R2,[R4, #+12]
   \   00000074   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       FS__CACHE_CommandDeviceNL
    232          #endif
    233            FS__IoCtlNL(pVolume, FS_CMD_UNMOUNT_FORCED, 0, NULL);           // Send unmount command to driver
   \   00000080   F110A0E3           MOV      R1,#+241
   \   00000084   0030A0E3           MOV      R3,#+0
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   C01F81E3           ORR      R1,R1,#0x300
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       FS__IoCtlNL
    234            FS_LOCK_SYS();
    235            pVolume->IsMounted = 0;                                  // Mark volume as unmounted
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   5D20C4E5           STRB     R2,[R4, #+93]
    236            pDevice->Data.IsInited = 0;
   \   000000A0   0520C4E5           STRB     R2,[R4, #+5]
    237            pVolume->Partition.StartSector = 0;
   \   000000A4   142084E5           STR      R2,[R4, #+20]
    238            pVolume->Partition.NumSectors  = 0;
   \   000000A8   182084E5           STR      R2,[R4, #+24]
    239            FS_UNLOCK_SYS();
    240            FS_JOURNAL_INVALIDATE(pVolume);
    241          }
   \   000000AC   1080BDE8           POP      {R4,PC}          ;; return
    242          
    243          /*********************************************************************
    244          *
    245          *       FS__UnmountForced
    246          *
    247          *  Description:
    248          *    Unmounts a devices.
    249          *    Invalidates all open file and directory handles to the volume, marks the volume as unmounted
    250          *
    251          *  Parameters:
    252          *    pVolume       Volume to unmount. Must be valid, may not be NULL.
    253          *
    254          */

   \                                 In section .text, align 4, keep-with-next
    255          void FS__UnmountForced(FS_VOLUME * pVolume) {
    256            FS_LOCK_DRIVER(&pVolume->Partition.Device);
    257            FS__UnmountForcedNL(pVolume);
   \                     FS__UnmountForced:
   \   00000000   ........           B        FS__UnmountForcedNL  ;; tailcall
    258            FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    259          }
    260          
    261          /*********************************************************************
    262          *
    263          *       FS__Unmount
    264          *
    265          *  Description:
    266          *    Internal version of unmounting a device
    267          *    Closes all open file and directory handles to the volume, marks the volume as unmounted
    268          *
    269          *  Parameters:
    270          *    pVolume       Volume to unmount. Must be valid, may not be NULL.
    271          */

   \                                 In section .text, align 4, keep-with-next
    272          void FS__Unmount(FS_VOLUME * pVolume) {
   \                     FS__Unmount:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    273            int Status;
    274            FS_LOCK_DRIVER(&pVolume->Partition.Device);
    275            Status = FS_LB_GetStatus(&pVolume->Partition.Device);
    276            FS_UNLOCK_DRIVER(&pVolume->Partition.Device);
    277            if (Status == FS_MEDIA_NOT_PRESENT) {
   \   0000000C   ........           BL       FS_LB_GetStatus
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200001A           BNE      ??FS__Unmount_0
    278              FS__UnmountForced(pVolume);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       FS__UnmountForcedNL
    279            } else {
   \   00000020   1C0000EA           B        ??FS__Unmount_1
    280              _Unmount(pVolume);
   \                     ??FS__Unmount_0:
   \   00000024   5D00D4E5           LDRB     R0,[R4, #+93]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0F00000A           BEQ      ??FS__Unmount_2
   \   00000030   ........           LDR      R0,??DataTable2
   \   00000034   145090E5           LDR      R5,[R0, #+20]
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1700001A           BNE      ??FS__Unmount_3
   \                     ??FS__Unmount_4:
   \   00000040   7110A0E3           MOV      R1,#+113
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   5C1D81E3           ORR      R1,R1,#0x1700
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       FS__CACHE_CommandDeviceNL
   \   00000054   7410A0E3           MOV      R1,#+116
   \   00000058   0C2094E5           LDR      R2,[R4, #+12]
   \   0000005C   5C1D81E3           ORR      R1,R1,#0x1700
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       FS__CACHE_CommandDeviceNL
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       FS_FAT_Clean
   \                     ??FS__Unmount_2:
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   FC1FA0E3           MOV      R1,#+1008
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       FS__IoCtlNL
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   5D00C4E5           STRB     R0,[R4, #+93]
   \   0000008C   0500C4E5           STRB     R0,[R4, #+5]
   \   00000090   140084E5           STR      R0,[R4, #+20]
   \   00000094   180084E5           STR      R0,[R4, #+24]
    281            }
    282          }
   \                     ??FS__Unmount_1:
   \   00000098   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??FS__Unmount_3:
   \   000000A0   0A00D5E5           LDRB     R0,[R5, #+10]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0500000A           BEQ      ??FS__Unmount_5
   \   000000AC   000095E5           LDR      R0,[R5, #+0]
   \   000000B0   080090E5           LDR      R0,[R0, #+8]
   \   000000B4   040050E1           CMP      R0,R4
   \   000000B8   0100001A           BNE      ??FS__Unmount_5
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       FS__FCloseNL
   \                     ??FS__Unmount_5:
   \   000000C4   0C5095E5           LDR      R5,[R5, #+12]
   \   000000C8   000055E3           CMP      R5,#+0
   \   000000CC   F3FFFF1A           BNE      ??FS__Unmount_3
   \   000000D0   DAFFFFEA           B        ??FS__Unmount_4
    283          
    284          /*********************************************************************
    285          *
    286          *       FS_Unmount
    287          *
    288          *  Description:
    289          *    Unmounts a device
    290          *    Closes all open file and directory handles to the volume, marks the volume as unmounted
    291          *
    292          *  Parameters:
    293          *    sVolume            - The volume name.
    294          */

   \                                 In section .text, align 4, keep-with-next
    295          void FS_Unmount(const char * sVolume) {
   \                     FS_Unmount:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    296            FS_VOLUME * pVolume;
    297          
    298            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    299            pVolume = FS__FindVolume(sVolume, NULL);
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       FS__FindVolume
    300            if (pVolume) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100000A           BEQ      ??FS_Unmount_0
    301              FS__Unmount(pVolume);
   \   00000024   ........           BL       FS__Unmount
    302            }
    303            FS_UNLOCK();
   \   00000028   0000A0E3           MOV      R0,#+0
   \                     ??FS_Unmount_0:
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   ........           B        FS_OS_Unlock     ;; tailcall
    304          }
    305          
    306          /*********************************************************************
    307          *
    308          *       FS_UnmountForced
    309          *
    310          *  Description:
    311          *    Unmounts a device
    312          *    Closes all open file and directory handles to the volume, marks the volume as unmounted
    313          *
    314          *  Parameters:
    315          *    sVolume            - The volume name.
    316          */

   \                                 In section .text, align 4, keep-with-next
    317          void FS_UnmountForced(const char * sVolume) {
   \                     FS_UnmountForced:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    318            FS_VOLUME * pVolume;
    319          
    320            FS_LOCK();
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           BL       FS_OS_Lock
    321            pVolume = FS__FindVolume(sVolume, NULL);
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       FS__FindVolume
    322            if (pVolume) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100000A           BEQ      ??FS_UnmountForced_0
    323              FS__UnmountForced(pVolume);
   \   00000024   ........           BL       FS__UnmountForcedNL
    324            }
    325            FS_UNLOCK();
   \   00000028   0000A0E3           MOV      R0,#+0
   \                     ??FS_UnmountForced_0:
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   ........           B        FS_OS_Unlock     ;; tailcall
    326          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     FS_Global
    327          
    328          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     FS_Unmount               8
     FS_UnmountForced         8
     FS__Unmount             16
     FS__UnmountForced        8
     FS__UnmountForcedNL      8
     FS__UnmountNL           16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     FS__UnmountNL        176
     FS__UnmountForcedNL  176
     FS__UnmountForced      4
     FS__Unmount          212
     FS_Unmount            52
     FS_UnmountForced      52
     ??DataTable2           4

 
 676 bytes in section .text
 
 676 bytes of CODE memory

Errors: none
Warnings: none
