###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:28 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_MOUSE_DriverPS2.c               #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_MOUSE_DriverPS2.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_MOUSE_DriverPS2.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_MOUSE_DriverPS2.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_MOUSE_DriverPS2.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_MOUSE_DriverPS2
     19          Purpose     : GUI driver for PS2 mouse
     20          ----------------------------------------------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static data
     28          *
     29          **********************************************************************
     30          */
     31          

   \                                 In section .bss, align 4
     32          static int  _ScreenX              = 0;    /* x-pos              */
   \                     _ScreenX:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
     33          static int  _ScreenY              = 0;    /* y-pos              */
     34          static int  _NumBytesInBuffer     = 0;    /* bytes in rx buffer */

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
     35          static U8   _Buttons              = 0;    /* button status      */
     36          static U8   _abInBuffer[3];               /* mouse rx buffer    */
     37          
     38          /*********************************************************************
     39          *
     40          *       Static code
     41          *
     42          **********************************************************************
     43          */
     44          /*********************************************************************
     45          *
     46          *       _EvaPacket
     47          *
     48          * Purpose:
     49          *   Process data packet from mouse:
     50          *
     51          *             | D7    D6    D5    D4    D3    D2    D1    D0
     52          *   ----------+----------------------------------------------
     53          *   1st byte  | --    --    Y-    X-     1    --    LB    RB
     54          *   2nd byte  | X7    X6    X5    X4    X3    X2    X1    X0
     55          *   3rd byte  | Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0
     56          */
     57          static void _EvaPacket(void) {
     58            char a;
     59            int xSize, ySize;
     60            GUI_PID_STATE State;
     61            xSize = LCD_GetXSize();
     62            ySize = LCD_GetYSize();
     63            _Buttons = _abInBuffer[0] & 0x03;
     64            a = _abInBuffer[1];
     65            /* test x move sign. */
     66            if(_abInBuffer[0] & 0x10) {
     67              a=-a;
     68              _ScreenX  -= a;
     69            }        /* direction is negative, move left */
     70            else {
     71              _ScreenX  += a;
     72            }
     73            a = _abInBuffer[2];
     74            /* test y move sign. */
     75            if(_abInBuffer[0] & 0x20) {
     76              a=-a;
     77              _ScreenY  += a;
     78            }  /* direction is negative, move down */ else {
     79              _ScreenY  -= a;
     80            }
     81            /* check min/max positions */    
     82            if (_ScreenX < 0) {
     83              _ScreenX = 0;
     84            } else if (_ScreenX > xSize-1) {
     85              _ScreenX = xSize-1;
     86            } if (_ScreenY < 0) {
     87              _ScreenY = 0;
     88            } else if (_ScreenY > ySize-1) {
     89              _ScreenY = ySize-1;
     90            }
     91            /* signal new mouse data */
     92            State.x       = _ScreenX;
     93            State.y       = _ScreenY;
     94            State.Pressed = _Buttons;
     95            GUI_MOUSE_StoreState(&State);
     96          }
     97          
     98          /*********************************************************************
     99          *
    100          *       Public code
    101          *
    102          **********************************************************************
    103          */
    104          /*********************************************************************
    105          *
    106          *       GUI_MOUSE_DRIVER_PS2_OnRx
    107          *
    108          * Purpose:
    109          *   Mouse receive interrupt handler. The PS2 mouse interrupt gets
    110          *   in three bytes from the mouse, then wakes up the mouse LSR.
    111          */

   \                                 In section .text, align 4, keep-with-next
    112          void GUI_MOUSE_DRIVER_PS2_OnRx(unsigned char Data) {
   \                     GUI_MOUSE_DRIVER_PS2_OnRx:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    113            if (!_NumBytesInBuffer) {
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0500001A           BNE      ??GUI_MOUSE_DRIVER_PS2_OnRx_0
    114              /* check for start frame */
    115              if ((Data & 0x0c) == 0x08) {
   \   00000018   0C1000E2           AND      R1,R0,#0xC
   \   0000001C   080051E3           CMP      R1,#+8
   \   00000020   3900001A           BNE      ??GUI_MOUSE_DRIVER_PS2_OnRx_1
    116                _abInBuffer[0] = Data;
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
    117                _NumBytesInBuffer++;
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   350000EA           B        ??GUI_MOUSE_DRIVER_PS2_OnRx_2
    118              }
    119            } else {
    120              _abInBuffer[_NumBytesInBuffer] = Data;
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_0:
   \   00000030   042081E0           ADD      R2,R1,R4
   \   00000034   0C00C2E5           STRB     R0,[R2, #+12]
    121              _NumBytesInBuffer++;
   \   00000038   010081E2           ADD      R0,R1,#+1
   \   0000003C   080084E5           STR      R0,[R4, #+8]
    122              if (_NumBytesInBuffer >= 3) {
   \   00000040   030050E3           CMP      R0,#+3
   \   00000044   300000BA           BLT      ??GUI_MOUSE_DRIVER_PS2_OnRx_1
    123                _EvaPacket();
   \   00000048   ........           BL       LCD_GetXSize
   \   0000004C   0050A0E1           MOV      R5,R0
   \   00000050   ........           BL       LCD_GetYSize
   \   00000054   0C20D4E5           LDRB     R2,[R4, #+12]
   \   00000058   0D30D4E5           LDRB     R3,[R4, #+13]
   \   0000005C   00C094E5           LDR      R12,[R4, #+0]
   \   00000060   031002E2           AND      R1,R2,#0x3
   \   00000064   100012E3           TST      R2,#0x10
   \   00000068   0300000A           BEQ      ??GUI_MOUSE_DRIVER_PS2_OnRx_3
   \   0000006C   003063E2           RSB      R3,R3,#+0
   \   00000070   FF3003E2           AND      R3,R3,#0xFF
   \   00000074   03304CE0           SUB      R3,R12,R3
   \   00000078   000000EA           B        ??GUI_MOUSE_DRIVER_PS2_OnRx_4
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_3:
   \   0000007C   0C3083E0           ADD      R3,R3,R12
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_4:
   \   00000080   0EC0D4E5           LDRB     R12,[R4, #+14]
   \   00000084   04E094E5           LDR      LR,[R4, #+4]
   \   00000088   200012E3           TST      R2,#0x20
   \   0000008C   0300000A           BEQ      ??GUI_MOUSE_DRIVER_PS2_OnRx_5
   \   00000090   00206CE2           RSB      R2,R12,#+0
   \   00000094   FF2002E2           AND      R2,R2,#0xFF
   \   00000098   0E2082E0           ADD      R2,R2,LR
   \   0000009C   000000EA           B        ??GUI_MOUSE_DRIVER_PS2_OnRx_6
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_5:
   \   000000A0   0C204EE0           SUB      R2,LR,R12
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_6:
   \   000000A4   000053E3           CMP      R3,#+0
   \   000000A8   0400004A           BMI      ??GUI_MOUSE_DRIVER_PS2_OnRx_7
   \   000000AC   01C045E2           SUB      R12,R5,#+1
   \   000000B0   03005CE1           CMP      R12,R3
   \   000000B4   020000AA           BGE      ??GUI_MOUSE_DRIVER_PS2_OnRx_8
   \   000000B8   0C30A0E1           MOV      R3,R12
   \   000000BC   000000EA           B        ??GUI_MOUSE_DRIVER_PS2_OnRx_8
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_7:
   \   000000C0   0030A0E3           MOV      R3,#+0
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_8:
   \   000000C4   003084E5           STR      R3,[R4, #+0]
   \   000000C8   000052E3           CMP      R2,#+0
   \   000000CC   0400004A           BMI      ??GUI_MOUSE_DRIVER_PS2_OnRx_9
   \   000000D0   010040E2           SUB      R0,R0,#+1
   \   000000D4   020050E1           CMP      R0,R2
   \   000000D8   020000AA           BGE      ??GUI_MOUSE_DRIVER_PS2_OnRx_10
   \   000000DC   0020A0E1           MOV      R2,R0
   \   000000E0   000000EA           B        ??GUI_MOUSE_DRIVER_PS2_OnRx_10
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_9:
   \   000000E4   0020A0E3           MOV      R2,#+0
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_10:
   \   000000E8   042084E5           STR      R2,[R4, #+4]
   \   000000EC   042094E5           LDR      R2,[R4, #+4]
   \   000000F0   00308DE5           STR      R3,[SP, #+0]
   \   000000F4   04208DE5           STR      R2,[SP, #+4]
   \   000000F8   0810CDE5           STRB     R1,[SP, #+8]
   \   000000FC   0D00A0E1           MOV      R0,SP
   \   00000100   ........           BL       GUI_MOUSE_StoreState
    124                _NumBytesInBuffer = 0;
   \   00000104   0000A0E3           MOV      R0,#+0
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_2:
   \   00000108   080084E5           STR      R0,[R4, #+8]
    125              }
    126            }
    127          }
   \                     ??GUI_MOUSE_DRIVER_PS2_OnRx_1:
   \   0000010C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000110   3080BDE8           POP      {R4,R5,PC}       ;; return
    128          
    129          /*********************************************************************
    130          *
    131          *       GUI_MOUSE_DRIVER_PS2_Init
    132          */

   \                                 In section .text, align 4, keep-with-next
    133          void GUI_MOUSE_DRIVER_PS2_Init(void) {
    134            _NumBytesInBuffer = 0; 
   \                     GUI_MOUSE_DRIVER_PS2_Init:
   \   00000000   ........           LDR      R0,??DataTable1
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   081080E5           STR      R1,[R0, #+8]
    135          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _ScreenX
    136          
    137          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     GUI_MOUSE_DRIVER_PS2_Init      0
     GUI_MOUSE_DRIVER_PS2_OnRx     24


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     _ScreenX                    16
     _ScreenY
     _NumBytesInBuffer
     _abInBuffer
     _Buttons                     1
     GUI_MOUSE_DRIVER_PS2_OnRx  276
     GUI_MOUSE_DRIVER_PS2_Init   16
     ??DataTable1                 4

 
  17 bytes in section .bss
 296 bytes in section .text
 
 296 bytes of CODE memory
  17 bytes of DATA memory

Errors: none
Warnings: none
