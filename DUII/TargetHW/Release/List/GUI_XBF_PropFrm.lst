###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:48 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_XBF_PropFrm.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_XBF_PropFrm.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_XBF_PropFrm.lst        #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_XBF_PropFrm.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_XBF_PropFrm.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_XBF_PropFrm.c
     19          Purpose     : Implementation of external binary fonts
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Static code
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       _DispChar
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          static void _DispChar(U16P c) {
   \                     _DispChar:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     38            const U8           * pBuffer;
     39            U8                   aBuffer[GUI_MAX_XBF_BYTES];
     40            const GUI_XBF_DATA * pXBF_Data;
     41            U32                  Off, iOff, i;
     42            U16                  Size;
     43            I16                  xDist, xOff, yOff;
     44            U16                  XSize, YSize;
     45            U16                  MaxLines;
     46            U16                  BytesPerLine, NumBytes;
     47            int                  RemLines, NumLines, xPos, yPos;
     48            GUI_DRAWMODE         OldDrawMode;
     49            LCD_PIXELINDEX       OldIndex;
     50            pBuffer   = aBuffer;
     51            pXBF_Data = (const GUI_XBF_DATA *)GUI_Context.pAFont->p.pFontData;
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   45DF4DE2           SUB      SP,SP,#+276
   \   0000000C   48208DE2           ADD      R2,SP,#+72
   \   00000010   1C1094E5           LDR      R1,[R4, #+28]
   \   00000014   18208DE5           STR      R2,[SP, #+24]
   \   00000018   1C1091E5           LDR      R1,[R1, #+28]
   \   0000001C   1C108DE5           STR      R1,[SP, #+28]
     52            if ((c < pXBF_Data->First) || (c > pXBF_Data->Last)) {
   \   00000020   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   D400003A           BCC      ??_DispChar_0
   \   0000002C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000030   B210D1E1           LDRH     R1,[R1, #+2]
   \   00000034   000051E1           CMP      R1,R0
   \   00000038   D000003A           BCC      ??_DispChar_0
     53              return;
     54            }
     55            //
     56            // Get offset and size of character data
     57            //
     58            GUI_XBF__GetOffAndSize(pXBF_Data, c, &Off, &Size);
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   20308DE2           ADD      R3,SP,#+32
   \   00000044   28208DE2           ADD      R2,SP,#+40
   \   00000048   1C009DE5           LDR      R0,[SP, #+28]
   \   0000004C   ........           BL       GUI_XBF__GetOffAndSize
     59            if (!Off) {
   \   00000050   28009DE5           LDR      R0,[SP, #+40]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   C800000A           BEQ      ??_DispChar_0
     60              return;
     61            }
     62            //
     63            // Set drawmode to transparent and draw the character using the foreground color
     64            //
     65            OldDrawMode = LCD_SetDrawMode(GUI_TM_TRANS | (GUI_Context.TextMode & GUI_TM_REV));
   \   0000005C   2A00D4E5           LDRB     R0,[R4, #+42]
   \   00000060   040000E2           AND      R0,R0,#0x4
   \   00000064   020080E3           ORR      R0,R0,#0x2
   \   00000068   ........           BL       LCD_SetDrawMode
   \   0000006C   ........           LDR      R1,??DataTable1_1
   \   00000070   44008DE5           STR      R0,[SP, #+68]
   \   00000074   001091E5           LDR      R1,[R1, #+0]
     66            OldIndex    = LCD__GetColorIndex();
     67            //
     68            // Use banding mode if size is too large
     69            //
     70            if (Size > GUI_MAX_XBF_BYTES) {
   \   00000078   1C009DE5           LDR      R0,[SP, #+28]
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   48308DE2           ADD      R3,SP,#+72
   \   00000084   40108DE5           STR      R1,[SP, #+64]
   \   00000088   08C090E5           LDR      R12,[R0, #+8]
   \   0000008C   042090E5           LDR      R2,[R0, #+4]
   \   00000090   B002DDE1           LDRH     R0,[SP, #+32]
   \   00000094   C90050E3           CMP      R0,#+201
   \   00000098   6600003A           BCC      ??_DispChar_1
     71              //
     72              // Get the heading 12 Bytes of the character data
     73              //
     74              pXBF_Data->pfGetData(Off, 12, pXBF_Data->pVoid, aBuffer);
   \   0000009C   0C10A0E3           MOV      R1,#+12
   \   000000A0   28009DE5           LDR      R0,[SP, #+40]
   \   000000A4   3CFF2FE1           BLX      R12
     75              xDist        = GUI__Read16(&pBuffer);
   \   000000A8   18008DE2           ADD      R0,SP,#+24
   \   000000AC   ........           BL       GUI__Read16
   \   000000B0   0008A0E1           LSL      R0,R0,#+16
   \   000000B4   4008A0E1           ASR      R0,R0,#+16
   \   000000B8   34008DE5           STR      R0,[SP, #+52]
     76              XSize        = GUI__Read16(&pBuffer);
   \   000000BC   18008DE2           ADD      R0,SP,#+24
   \   000000C0   ........           BL       GUI__Read16
   \   000000C4   0050A0E1           MOV      R5,R0
     77              YSize        = GUI__Read16(&pBuffer);
   \   000000C8   18008DE2           ADD      R0,SP,#+24
   \   000000CC   ........           BL       GUI__Read16
   \   000000D0   0060A0E1           MOV      R6,R0
     78              xOff         = GUI__Read16(&pBuffer);
   \   000000D4   18008DE2           ADD      R0,SP,#+24
   \   000000D8   ........           BL       GUI__Read16
   \   000000DC   0090A0E1           MOV      R9,R0
     79              yOff         = GUI__Read16(&pBuffer);
   \   000000E0   18008DE2           ADD      R0,SP,#+24
   \   000000E4   ........           BL       GUI__Read16
   \   000000E8   0008A0E1           LSL      R0,R0,#+16
   \   000000EC   4008A0E1           ASR      R0,R0,#+16
   \   000000F0   24008DE5           STR      R0,[SP, #+36]
     80              BytesPerLine = GUI__Read16(&pBuffer);
   \   000000F4   18008DE2           ADD      R0,SP,#+24
   \   000000F8   ........           BL       GUI__Read16
   \   000000FC   0070A0E1           MOV      R7,R0
     81              iOff         = Off + 12;
   \   00000100   28009DE5           LDR      R0,[SP, #+40]
     82              MaxLines     = (GUI_MAX_XBF_BYTES - 12) / BytesPerLine;
   \   00000104   0710A0E1           MOV      R1,R7
   \   00000108   0C0080E2           ADD      R0,R0,#+12
   \   0000010C   30008DE5           STR      R0,[SP, #+48]
   \   00000110   BC00A0E3           MOV      R0,#+188
   \   00000114   ........           BL       __aeabi_idiv
   \   00000118   0008A0E1           LSL      R0,R0,#+16
   \   0000011C   2008A0E1           LSR      R0,R0,#+16
   \   00000120   3C008DE5           STR      R0,[SP, #+60]
     83              RemLines     = YSize;
     84              xPos         = GUI_Context.DispPosX + xOff;
   \   00000124   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000128   0998A0E1           LSL      R9,R9,#+16
     85              yPos         = GUI_Context.DispPosY + yOff;
   \   0000012C   24109DE5           LDR      R1,[SP, #+36]
   \   00000130   490880E0           ADD      R0,R0,R9, ASR #+16
   \   00000134   38008DE5           STR      R0,[SP, #+56]
   \   00000138   F402D4E1           LDRSH    R0,[R4, #+36]
   \   0000013C   0680A0E1           MOV      R8,R6
   \   00000140   009081E0           ADD      R9,R1,R0
     86              //
     87              // Display bands while RemLines are left
     88              //
     89              for (i = 0; i < 2; i++) {
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   2C108DE5           STR      R1,[SP, #+44]
     90                do {
     91                  //
     92                  // Use MaxLines as YSize for a band until RemLines are less than MaxLines
     93                  //
     94                  NumLines   = MaxLines;
   \                     ??_DispChar_2:
   \   0000014C   3C009DE5           LDR      R0,[SP, #+60]
     95                  if (NumLines > RemLines) {
   \   00000150   08A0A0E1           MOV      R10,R8
   \   00000154   000058E1           CMP      R8,R0
   \   00000158   00A0A0C1           MOVGT    R10,R0
     96                    NumLines = RemLines;
     97                  }
     98                  NumBytes   = NumLines * BytesPerLine;
   \   0000015C   8A076BE1           SMULBB   R11,R10,R7
     99                  pXBF_Data->pfGetData(iOff, NumBytes, pXBF_Data->pVoid, aBuffer);
   \   00000160   1C009DE5           LDR      R0,[SP, #+28]
   \   00000164   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000168   042090E5           LDR      R2,[R0, #+4]
   \   0000016C   0B18A0E1           LSL      R1,R11,#+16
   \   00000170   48308DE2           ADD      R3,SP,#+72
   \   00000174   2118A0E1           LSR      R1,R1,#+16
   \   00000178   30009DE5           LDR      R0,[SP, #+48]
   \   0000017C   08C09CE5           LDR      R12,[R12, #+8]
   \   00000180   3CFF2FE1           BLX      R12
    100                  LCD_DrawBitmap(xPos, yPos,
    101                                 XSize,
    102          								       NumLines,
    103                                 GUI_Context.pAFont->XMag,
    104          								       GUI_Context.pAFont->YMag,
    105                                 1,
    106                                 BytesPerLine,
    107                                 aBuffer,
    108                                 LCD_pBkColorIndex);
   \   00000184   ........           LDR      R1,??DataTable1_2
   \   00000188   1C0094E5           LDR      R0,[R4, #+28]
   \   0000018C   001091E5           LDR      R1,[R1, #+0]
   \   00000190   0C708DE5           STR      R7,[SP, #+12]
   \   00000194   14108DE5           STR      R1,[SP, #+20]
   \   00000198   48108DE2           ADD      R1,SP,#+72
   \   0000019C   10108DE5           STR      R1,[SP, #+16]
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   08108DE5           STR      R1,[SP, #+8]
   \   000001A8   1B10D0E5           LDRB     R1,[R0, #+27]
   \   000001AC   0A30A0E1           MOV      R3,R10
   \   000001B0   0520A0E1           MOV      R2,R5
   \   000001B4   04108DE5           STR      R1,[SP, #+4]
   \   000001B8   1A00D0E5           LDRB     R0,[R0, #+26]
   \   000001BC   0910A0E1           MOV      R1,R9
   \   000001C0   00008DE5           STR      R0,[SP, #+0]
   \   000001C4   38009DE5           LDR      R0,[SP, #+56]
   \   000001C8   ........           BL       LCD_DrawBitmap
    109                  iOff      += NumBytes;
   \   000001CC   30009DE5           LDR      R0,[SP, #+48]
   \   000001D0   0BB8A0E1           LSL      R11,R11,#+16
   \   000001D4   2B0880E0           ADD      R0,R0,R11, LSR #+16
    110                  RemLines  -= NumLines;
   \   000001D8   0A8048E0           SUB      R8,R8,R10
   \   000001DC   30008DE5           STR      R0,[SP, #+48]
    111                  yPos      += NumLines;
   \   000001E0   09908AE0           ADD      R9,R10,R9
    112                } while (RemLines);
   \   000001E4   000058E3           CMP      R8,#+0
   \   000001E8   D7FFFF1A           BNE      ??_DispChar_2
    113                if (i == 0) {
   \   000001EC   2C009DE5           LDR      R0,[SP, #+44]
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0900001A           BNE      ??_DispChar_3
    114                  RemLines     = YSize;
    115                  yPos         = GUI_Context.DispPosY + yOff;
   \   000001F8   F402D4E1           LDRSH    R0,[R4, #+36]
   \   000001FC   24109DE5           LDR      R1,[SP, #+36]
   \   00000200   0680A0E1           MOV      R8,R6
   \   00000204   009081E0           ADD      R9,R1,R0
    116                  LCD__SetColorIndex(LCD__GetBkColorIndex());
   \   00000208   ........           LDR      R1,??DataTable1_2
   \   0000020C   ........           LDR      R0,??DataTable1_1
   \   00000210   001091E5           LDR      R1,[R1, #+0]
   \   00000214   000090E5           LDR      R0,[R0, #+0]
   \   00000218   001091E5           LDR      R1,[R1, #+0]
   \   0000021C   001080E5           STR      R1,[R0, #+0]
    117                }
    118              }
   \                     ??_DispChar_3:
   \   00000220   2C009DE5           LDR      R0,[SP, #+44]
   \   00000224   010080E2           ADD      R0,R0,#+1
   \   00000228   2C008DE5           STR      R0,[SP, #+44]
   \   0000022C   020050E3           CMP      R0,#+2
   \   00000230   C5FFFF3A           BCC      ??_DispChar_2
   \   00000234   470000EA           B        ??_DispChar_4
    119            } else {
    120              pXBF_Data->pfGetData(Off, Size, pXBF_Data->pVoid, aBuffer); /* Get character data */
   \                     ??_DispChar_1:
   \   00000238   0010A0E1           MOV      R1,R0
   \   0000023C   28009DE5           LDR      R0,[SP, #+40]
   \   00000240   3CFF2FE1           BLX      R12
    121              xDist        = GUI__Read16(&pBuffer);
   \   00000244   18008DE2           ADD      R0,SP,#+24
   \   00000248   ........           BL       GUI__Read16
   \   0000024C   0008A0E1           LSL      R0,R0,#+16
   \   00000250   4008A0E1           ASR      R0,R0,#+16
   \   00000254   34008DE5           STR      R0,[SP, #+52]
    122              XSize        = GUI__Read16(&pBuffer);
   \   00000258   18008DE2           ADD      R0,SP,#+24
   \   0000025C   ........           BL       GUI__Read16
   \   00000260   0050A0E1           MOV      R5,R0
    123              YSize        = GUI__Read16(&pBuffer);
   \   00000264   18008DE2           ADD      R0,SP,#+24
   \   00000268   ........           BL       GUI__Read16
   \   0000026C   0060A0E1           MOV      R6,R0
    124              xOff         = GUI__Read16(&pBuffer);
   \   00000270   18008DE2           ADD      R0,SP,#+24
   \   00000274   ........           BL       GUI__Read16
   \   00000278   0088A0E1           LSL      R8,R0,#+16
    125              yOff         = GUI__Read16(&pBuffer);
   \   0000027C   18008DE2           ADD      R0,SP,#+24
   \   00000280   ........           BL       GUI__Read16
   \   00000284   0008A0E1           LSL      R0,R0,#+16
   \   00000288   4008A0E1           ASR      R0,R0,#+16
   \   0000028C   24008DE5           STR      R0,[SP, #+36]
    126              BytesPerLine = GUI__Read16(&pBuffer);
   \   00000290   18008DE2           ADD      R0,SP,#+24
   \   00000294   ........           BL       GUI__Read16
    127              LCD_DrawBitmap(GUI_Context.DispPosX + xOff, GUI_Context.DispPosY + yOff,
    128                             XSize,
    129          								   YSize,
    130                             GUI_Context.pAFont->XMag,
    131          								   GUI_Context.pAFont->YMag,
    132                             1,
    133                             BytesPerLine,
    134                             pBuffer,
    135                             LCD_pBkColorIndex);
   \   00000298   ........           LDR      R1,??DataTable1_2
   \   0000029C   0070A0E1           MOV      R7,R0
   \   000002A0   001091E5           LDR      R1,[R1, #+0]
   \   000002A4   1C0094E5           LDR      R0,[R4, #+28]
   \   000002A8   14108DE5           STR      R1,[SP, #+20]
   \   000002AC   18109DE5           LDR      R1,[SP, #+24]
   \   000002B0   0C708DE5           STR      R7,[SP, #+12]
   \   000002B4   10108DE5           STR      R1,[SP, #+16]
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   08108DE5           STR      R1,[SP, #+8]
   \   000002C0   1B10D0E5           LDRB     R1,[R0, #+27]
   \   000002C4   0630A0E1           MOV      R3,R6
   \   000002C8   0520A0E1           MOV      R2,R5
   \   000002CC   04108DE5           STR      R1,[SP, #+4]
   \   000002D0   1A00D0E5           LDRB     R0,[R0, #+26]
   \   000002D4   24109DE5           LDR      R1,[SP, #+36]
   \   000002D8   00008DE5           STR      R0,[SP, #+0]
   \   000002DC   F402D4E1           LDRSH    R0,[R4, #+36]
   \   000002E0   001081E0           ADD      R1,R1,R0
   \   000002E4   F202D4E1           LDRSH    R0,[R4, #+34]
   \   000002E8   480880E0           ADD      R0,R0,R8, ASR #+16
   \   000002EC   ........           BL       LCD_DrawBitmap
    136              //
    137              // Draw the frame using the background color
    138              //
    139              LCD__SetColorIndex(LCD__GetBkColorIndex());
   \   000002F0   ........           LDR      R0,??DataTable1_2
   \   000002F4   ........           LDR      R1,??DataTable1_1
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   001091E5           LDR      R1,[R1, #+0]
   \   00000300   002090E5           LDR      R2,[R0, #+0]
    140              LCD_DrawBitmap(GUI_Context.DispPosX + xOff, GUI_Context.DispPosY + yOff,
    141                             XSize,
    142          								   YSize,
    143                             GUI_Context.pAFont->XMag,
    144          								   GUI_Context.pAFont->YMag,
    145                             1,
    146                             BytesPerLine,
    147                             pBuffer + BytesPerLine * YSize,
    148                             LCD_pBkColorIndex);
   \   00000304   0630A0E1           MOV      R3,R6
   \   00000308   002081E5           STR      R2,[R1, #+0]
   \   0000030C   14008DE5           STR      R0,[SP, #+20]
   \   00000310   18009DE5           LDR      R0,[SP, #+24]
   \   00000314   960720E0           MLA      R0,R6,R7,R0
   \   00000318   1C1094E5           LDR      R1,[R4, #+28]
   \   0000031C   10008DE5           STR      R0,[SP, #+16]
   \   00000320   0100A0E3           MOV      R0,#+1
   \   00000324   0C708DE5           STR      R7,[SP, #+12]
   \   00000328   08008DE5           STR      R0,[SP, #+8]
   \   0000032C   1B00D1E5           LDRB     R0,[R1, #+27]
   \   00000330   0520A0E1           MOV      R2,R5
   \   00000334   04008DE5           STR      R0,[SP, #+4]
   \   00000338   1A00D1E5           LDRB     R0,[R1, #+26]
   \   0000033C   24109DE5           LDR      R1,[SP, #+36]
   \   00000340   00008DE5           STR      R0,[SP, #+0]
   \   00000344   F402D4E1           LDRSH    R0,[R4, #+36]
   \   00000348   001081E0           ADD      R1,R1,R0
   \   0000034C   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000350   480880E0           ADD      R0,R0,R8, ASR #+16
   \   00000354   ........           BL       LCD_DrawBitmap
    149              //
    150              // Restore colors and dramode and adjust cursor position
    151              //
    152            }
    153            LCD__SetColorIndex(OldIndex);
   \                     ??_DispChar_4:
   \   00000358   ........           LDR      R0,??DataTable1_1
   \   0000035C   40109DE5           LDR      R1,[SP, #+64]
   \   00000360   000090E5           LDR      R0,[R0, #+0]
   \   00000364   001080E5           STR      R1,[R0, #+0]
    154            LCD_SetDrawMode(OldDrawMode);
   \   00000368   44009DE5           LDR      R0,[SP, #+68]
   \   0000036C   ........           BL       LCD_SetDrawMode
    155            GUI_Context.DispPosX += xDist;
   \   00000370   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000374   34109DE5           LDR      R1,[SP, #+52]
   \   00000378   000081E0           ADD      R0,R1,R0
   \   0000037C   B202C4E1           STRH     R0,[R4, #+34]
    156          }
   \                     ??_DispChar_0:
   \   00000380   45DF8DE2           ADD      SP,SP,#+276      ;; stack cleaning
   \   00000384   F08FBDE8           POP      {R4-R11,PC}      ;; return
    157          
    158          /*********************************************************************
    159          *
    160          *       Public data
    161          *
    162          **********************************************************************
    163          */
    164          /*********************************************************************
    165          *
    166          *       GUI_XBF_TYPE_PROP_FRM
    167          */

   \                                 In section .rodata, align 4, keep-with-next
    168          const tGUI_XBF_APIList GUI_XBF_APIList_Prop_Frm = {
   \                     GUI_XBF_APIList_Prop_Frm:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   ............       DC32 _DispChar, GUI_XBF__GetCharDistX, GUI_XBF__GetFontInfo, GUI_XBF__IsInFont
   \              ............
   \              ........    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     LCD_pBkColorIndex
    169            _DispChar,
    170            GUI_XBF__GetCharDistX,
    171            GUI_XBF__GetFontInfo,
    172            GUI_XBF__IsInFont,
    173          };
    174          
    175          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     _DispChar    312


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _DispChar                 904
     GUI_XBF_APIList_Prop_Frm   24
     ??DataTable1                4
     ??DataTable1_1              4
     ??DataTable1_2              4

 
  24 bytes in section .rodata
 916 bytes in section .text
 
 916 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
