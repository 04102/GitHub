###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:39 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Verify.c                          #
#    Command line =  C:\DUII\TargetHW\FS\FS_Verify.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Verify.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Verify.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Verify.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Verify.c
     19          Purpose     : Implementation of FS_Verify
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Defines, configurable
     35          *
     36          **********************************************************************
     37          */
     38          #ifndef FS_VERIFY_BUFFER_SIZE
     39            #define FS_VERIFY_BUFFER_SIZE 128
     40          #endif
     41          
     42          /*********************************************************************
     43          *
     44          *       Static code
     45          *
     46          **********************************************************************
     47          */
     48          
     49          /*********************************************************************
     50          *
     51          *       Public code, internal
     52          *
     53          **********************************************************************
     54          */
     55          
     56          /*********************************************************************
     57          *
     58          *       FS__Verify
     59          *
     60          *  Function description:
     61          *    Internal version of FS_Verify
     62          *    Verifies a file with a given data buffer
     63          *
     64          *  Parameters:
     65          *    pFile       - Pointer to an open file.
     66          *    pData       - Pointer to the data source of verification
     67          *    NumBytes    - Number of bytes to be verified
     68          *
     69          *  Return value:
     70          *    ==0         - Verification was successful.
     71          *    !=0         - Verification failed.
     72          */

   \                                 In section .text, align 4, keep-with-next
     73          int FS__Verify(FS_FILE * pFile, const void *pData, U32 NumBytes) {
   \                     FS__Verify:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0040A0E1           MOV      R4,R0
     74            U8         acVerifyBuffer[FS_VERIFY_BUFFER_SIZE];
     75            U32        NumBytesInFile;
     76            U32        NumBytesAtOnce;
     77            U32        NumBytesRead;
     78            int           r;
     79            const U8 * p;
     80          
     81            r = 1;
     82            if (pData == NULL) {
   \   0000000C   000055E3           CMP      R5,#+0
   \   00000010   84D04DE2           SUB      SP,SP,#+132
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0170A0E3           MOV      R7,#+1
     83              return 1;                  /* Failure */
     84            }
     85            p = (const U8 *)pData;
     86            if (pFile) {
   \   0000001C   00005413           CMPNE    R4,#+0
   \   00000020   1600000A           BEQ      ??FS__Verify_0
     87              NumBytesInFile = FS__GetFileSize(pFile);
   \   00000024   ........           BL       FS__GetFileSize
     88              if (NumBytesInFile < NumBytes) {
   \   00000028   060050E1           CMP      R0,R6
   \   0000002C   0060A091           MOVLS    R6,R0
     89                NumBytes = NumBytesInFile;
     90              }
     91              do {
     92                /* Request only as much bytes as are available. */
     93                NumBytesAtOnce = (FS_VERIFY_BUFFER_SIZE > NumBytes) ? NumBytes : FS_VERIFY_BUFFER_SIZE;
   \                     ??FS__Verify_1:
   \   00000030   8080A0E3           MOV      R8,#+128
   \   00000034   800056E3           CMP      R6,#+128
   \   00000038   0680A091           MOVLS    R8,R6
     94                NumBytesRead   = FS__Read(pFile, acVerifyBuffer, NumBytesAtOnce);
   \   0000003C   0820A0E1           MOV      R2,R8
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       FS__Read
   \   0000004C   0090A0E1           MOV      R9,R0
     95                if (NumBytesRead < NumBytesAtOnce) {
   \   00000050   080059E1           CMP      R9,R8
   \   00000054   0900003A           BCC      ??FS__Verify_0
     96                  break;                   /* Could not read sufficient data -> Failure */
     97                }
     98                r = FS_MEMCMP(p, acVerifyBuffer, NumBytesRead);
   \   00000058   0920A0E1           MOV      R2,R9
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       memcmp
   \   00000068   0070B0E1           MOVS     R7,R0
     99                if (r != 0) {
   \   0000006C   0300001A           BNE      ??FS__Verify_0
    100                  break;                   /* Verification failed */
    101                }
    102                NumBytes -= NumBytesRead;
   \   00000070   096046E0           SUB      R6,R6,R9
    103                p        += NumBytesRead;
   \   00000074   055089E0           ADD      R5,R9,R5
    104                if (NumBytes == 0) {
   \   00000078   000056E3           CMP      R6,#+0
   \   0000007C   EBFFFF1A           BNE      ??FS__Verify_1
    105                  r = 0;
    106                  break;                   /* Data successfully verified */
    107                }
    108              } while (1);
    109            }
    110            return r;
   \                     ??FS__Verify_0:
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   84D08DE2           ADD      SP,SP,#+132
   \   00000088   F083BDE8           POP      {R4-R9,PC}       ;; return
    111          }
    112          
    113          /*********************************************************************
    114          *
    115          *       Public code
    116          *
    117          **********************************************************************
    118          */
    119          
    120          /*********************************************************************
    121          *
    122          *       FS_Verify
    123          *
    124          *  Function description:
    125          *    Verifies a file with a given data buffer
    126          *
    127          *  Parameters:
    128          *    pFile       - Pointer to an open file.
    129          *    pData       - Pointer to the data source of verification
    130          *    NumBytes    - Number of bytes to be verified
    131          *
    132          *  Return value:
    133          *    ==0         - Verification was successful.
    134          *    !=0         - Verification failed.
    135          */

   \                                 In section .text, align 4, keep-with-next
    136          int FS_Verify(FS_FILE * pFile, const void *pData, U32 NumBytes) {
   \                     FS_Verify:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    137            int r;
    138            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    139            r = FS__Verify(pFile, pData, NumBytes);
   \   00000018   0620A0E1           MOV      R2,R6
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS__Verify
   \   00000028   0040A0E1           MOV      R4,R0
    140            FS_UNLOCK();
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   ........           BL       FS_OS_Unlock
    141            return r;
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   7080BDE8           POP      {R4-R6,PC}       ;; return
    142          }
    143          
    144          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     FS_Verify      16
     FS__Verify    160


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__Verify      140
     FS_Verify        60

 
 200 bytes in section .text
 
 200 bytes of CODE memory

Errors: none
Warnings: none
