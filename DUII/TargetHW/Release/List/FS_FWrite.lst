###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:57 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_FWrite.c                          #
#    Command line =  C:\DUII\TargetHW\FS\FS_FWrite.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_FWrite.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_FWrite.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_FWrite.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_FWrite.c
     19          Purpose     : Implementation of the said function.
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include "FS_Int.h"
     31          
     32          /*********************************************************************
     33          *
     34          *       Public code
     35          *
     36          **********************************************************************
     37          */
     38          
     39          /*********************************************************************
     40          *
     41          *       FS_FWrite
     42          *
     43          *  Function description
     44          *    Write data to a file.
     45          *
     46          *  Parameters
     47          *    pData       - Pointer to a data to be written to a file. 
     48          *    Size        - Size of an element to be transferred.
     49          *    N           - Number of elements to be transferred to the file.
     50          *    pFile       - Pointer to a FS_FILE data structure.
     51          *  
     52          *  Return value
     53          *    Number of elements written.
     54          */

   \                                 In section .text, align 4, keep-with-next
     55          U32 FS_FWrite(const void *pData, U32 Size, U32 N, FS_FILE *pFile) {
   \                     FS_FWrite:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     56            U32 NumBytesWritten;
     57            U32 NumBytes;
     58          
     59            FS_LOCK();
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           BL       FS_OS_Lock
     60            NumBytesWritten = 0;
     61            if (Size == 0) {
   \   00000020   000055E3           CMP      R5,#+0
   \   00000024   0300001A           BNE      ??FS_FWrite_0
     62              FS_UNLOCK();
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   ........           BL       FS_OS_Unlock
     63              return 0;  /* if zero-size return with zero since we would divide by zero at the end of the function */
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   090000EA           B        ??FS_FWrite_1
     64            }
     65            NumBytes = N * Size;
     66            NumBytesWritten = FS__Write(pFile, pData, NumBytes);
   \                     ??FS_FWrite_0:
   \   00000038   950602E0           MUL      R2,R5,R6
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           BL       FS__Write
   \   00000048   0040A0E1           MOV      R4,R0
     67            FS_UNLOCK();
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           BL       FS_OS_Unlock
     68            return NumBytesWritten / Size;
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   ........           BL       __aeabi_uidiv
   \                     ??FS_FWrite_1:
   \   00000060   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000064   F080BDE8           POP      {R4-R7,PC}       ;; return
     69          }
     70          
     71          /*************************** End of file ****************************/
     72          

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     FS_FWrite     24


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS_FWrite       104

 
 104 bytes in section .text
 
 104 bytes of CODE memory

Errors: none
Warnings: none
