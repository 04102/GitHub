###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:21 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WIDGET_Effect_Simple.c              #
#    Command line =  C:\DUII\TargetHW\GUI\WIDGET_Effect_Simple.c -D DEBUG=1   #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WIDGET_Effect_Simple.lst   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WIDGET_Effect_Simple.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WIDGET_Effect_Simple.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WIDGET_Effect_Simple.c
     19          Purpose     : Effect routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "WIDGET.h"
     27          #include "GUI_Debug.h"
     28          #include "GUI.h"
     29          #include "GUI_Private.h"
     30          #include "WM_Intern.h"
     31          
     32          #if GUI_WINSUPPORT
     33          
     34          /*********************************************************************
     35          *
     36          *       Static data
     37          *
     38          **********************************************************************
     39          */

   \                                 In section .bss, align 4
     40          static GUI_COLOR _aColor[] = {
   \                     _aColor:
   \   00000000                      DS8 4
     41            0x000000
     42          };
     43          
     44          /*********************************************************************
     45          *
     46          *       Static routines
     47          *
     48          **********************************************************************
     49          */
     50          /*********************************************************************
     51          *
     52          *       _DrawUpRect
     53          *
     54          *  Function description
     55          *    Draws an "Up" effect arround a given rectangle.
     56          *    This effect is used in different situations, but typically for an unpressed button
     57          *    which is supposed to "stick out".
     58          */

   \                                 In section .text, align 4, keep-with-next
     59          static void _DrawUpRect(const GUI_RECT* pRect) {
   \                     _DrawUpRect:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   A0D04DE2           SUB      SP,SP,#+160
   \   00000008   0040A0E1           MOV      R4,R0
     60            GUI_CONTEXT Context;
     61            GUI_SaveContext(&Context);
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       GUI_SaveContext_W
     62            LCD_SetColor(_aColor[0]);
   \   00000014   ........           LDR      R0,??DataTable4
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       LCD_SetColor
     63            GUI_DrawRect(pRect->x0, pRect->y0, pRect->x1, pRect->y1);          /* Draw rectangle around it */
   \   00000020   F630D4E1           LDRSH    R3,[R4, #+6]
   \   00000024   F420D4E1           LDRSH    R2,[R4, #+4]
   \   00000028   F210D4E1           LDRSH    R1,[R4, #+2]
   \   0000002C   F000D4E1           LDRSH    R0,[R4, #+0]
   \   00000030   ........           BL       GUI_DrawRect
     64            GUI_RestoreContext(&Context);
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           BL       GUI_RestoreContext
     65          }
   \   0000003C   A0D08DE2           ADD      SP,SP,#+160      ;; stack cleaning
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     66          
     67          /*********************************************************************
     68          *
     69          *       _DrawUp
     70          *
     71          * Function description
     72          *   Gets the rectangle of the current window and uses _DrawUpRect()
     73          *   for drawing the effect.
     74          */

   \                                 In section .text, align 4, keep-with-next
     75          static void _DrawUp(void) {
   \                     _DrawUp:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     76            GUI_RECT r;
     77            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
     78            _DrawUpRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawUpRect
     79          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
     80          
     81          /*********************************************************************
     82          *
     83          *       _DrawDownRect
     84          *
     85          * Function description
     86          *   Draws an "Down" effect arround a given rectangle.
     87          *   This effect is used in different situations, but typically for an edit widget
     88          *   which is supposed to "sunken".
     89          */

   \                                 In section .text, align 4, keep-with-next
     90          static void _DrawDownRect(const GUI_RECT* pRect) {
   \                     _DrawDownRect:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   A0D04DE2           SUB      SP,SP,#+160
   \   00000008   0040A0E1           MOV      R4,R0
     91            GUI_CONTEXT Context;
     92            GUI_SaveContext(&Context);
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           BL       GUI_SaveContext_W
     93            LCD_SetColor(_aColor[0]);
   \   00000014   ........           LDR      R0,??DataTable4
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       LCD_SetColor
     94            GUI_DrawRect(pRect->x0, pRect->y0, pRect->x1, pRect->y1);          /* Draw rectangle around it */
   \   00000020   F630D4E1           LDRSH    R3,[R4, #+6]
   \   00000024   F420D4E1           LDRSH    R2,[R4, #+4]
   \   00000028   F210D4E1           LDRSH    R1,[R4, #+2]
   \   0000002C   F000D4E1           LDRSH    R0,[R4, #+0]
   \   00000030   ........           BL       GUI_DrawRect
     95            GUI_RestoreContext(&Context);
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           BL       GUI_RestoreContext
     96          }
   \   0000003C   A0D08DE2           ADD      SP,SP,#+160      ;; stack cleaning
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     97          
     98          /*********************************************************************
     99          *
    100          *       _DrawDown
    101          *
    102          * Function description
    103          *   Gets the rectangle of the current window and uses _DrawDownRect()
    104          *   for drawing the effect.
    105          */

   \                                 In section .text, align 4, keep-with-next
    106          static void _DrawDown(void) {
   \                     _DrawDown:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    107            GUI_RECT r;
    108            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
    109            _DrawDownRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawDownRect
    110          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       Public routines
    115          *
    116          **********************************************************************
    117          */
    118          /*********************************************************************
    119          *
    120          *       WIDGET_EFFECT_Simple_SetColor
    121          */

   \                                 In section .text, align 4, keep-with-next
    122          void WIDGET_EFFECT_Simple_SetColor(unsigned Index, GUI_COLOR Color) {
    123            if (Index < GUI_COUNTOF(_aColor)) {
   \                     WIDGET_EFFECT_Simple_SetColor:
   \   00000000   000050E3           CMP      R0,#+0
    124              _aColor[Index] = Color;
   \   00000004   ........           LDREQ    R0,??DataTable4
   \   00000008   00108005           STREQ    R1,[R0, #+0]
    125            }
    126          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    127          
    128          /*********************************************************************
    129          *
    130          *       WIDGET_EFFECT_Simple_GetColor
    131          */

   \                                 In section .text, align 4, keep-with-next
    132          GUI_COLOR WIDGET_EFFECT_Simple_GetColor(unsigned Index) {
    133            GUI_COLOR r;
    134            r = 0;
    135            if (Index < GUI_COUNTOF(_aColor)) {
   \                     WIDGET_EFFECT_Simple_GetColor:
   \   00000000   000050E3           CMP      R0,#+0
    136              r = _aColor[Index];
   \   00000004   ........           LDREQ    R0,??DataTable4
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   00109005           LDREQ    R1,[R0, #+0]
    137            }
    138            return r;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    139          }
    140          
    141          /*********************************************************************
    142          *
    143          *       WIDGET_EFFECT_Simple_GetNumColors
    144          */

   \                                 In section .text, align 4, keep-with-next
    145          int WIDGET_EFFECT_Simple_GetNumColors(void) {
    146            return GUI_COUNTOF(_aColor);
   \                     WIDGET_EFFECT_Simple_GetNumColors:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    147          }
    148          
    149          /*********************************************************************
    150          *
    151          *       WIDGET_Effect_Simple
    152          *
    153          * Purpose:
    154          *   Structure of type WIDGET_EFFECT which contains the function pointers
    155          *   used to draw the effect. It also contains the effect size
    156          *   which specifies the number of pixels used by the effect frame.
    157          */

   \                                 In section .rodata, align 4, keep-with-next
    158          const WIDGET_EFFECT WIDGET_Effect_Simple = {
   \                     WIDGET_Effect_Simple:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   01000000....       DC32 1, _DrawUp, _DrawUpRect, _DrawDown, _DrawDownRect
   \              ............
   \              ............
   \              ....        
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     _aColor
    159            1,
    160            _DrawUp,
    161            _DrawUpRect,
    162            _DrawDown,
    163            _DrawDownRect,
    164          };
    165          
    166          #else                            /* Avoid problems with empty object modules */
    167            void WIDGET_Effect_Simple_C(void) {}
    168          #endif /* GUI_WINSUPPORT */
    169          
    170          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     WIDGET_EFFECT_Simple_GetColor       0
     WIDGET_EFFECT_Simple_GetNumColors
                                         0
     WIDGET_EFFECT_Simple_SetColor       0
     _DrawDown                          16
     _DrawDownRect                     168
     _DrawUp                            16
     _DrawUpRect                       168


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _aColor                           4
     _DrawUpRect                      68
     _DrawUp                          32
     _DrawDownRect                    68
     _DrawDown                        32
     WIDGET_EFFECT_Simple_SetColor    16
     WIDGET_EFFECT_Simple_GetColor    24
     WIDGET_EFFECT_Simple_GetNumColors
                                       8
     WIDGET_Effect_Simple             28
     ??DataTable4                      4

 
   4 bytes in section .bss
  28 bytes in section .rodata
 252 bytes in section .text
 
 252 bytes of CODE  memory
  28 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
