###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     06/Aug/2010  11:19:55 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\DUII\TimedSDCardWrite.c                          #
#    Command line =  C:\DUII\DUII\TimedSDCardWrite.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --require_prototypes --fpu=None      #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I           #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4\arm\INC\" --cpu_mode arm -Ohs              #
#    List file    =  C:\DUII\TargetHW\Release\List\TimedSDCardWrite.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\TimedSDCardWrite.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\DUII\TimedSDCardWrite.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2008  SEGGER Microcontroller GmbH & Co. KG        *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.52e                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : GUI_HelloWorld.c
     31          Purpose : emWin and embOS demo application
     32          --------  END-OF-HEADER  ---------------------------------------------
     33          */
     34          
     35          #include "GUI.h"
     36          #include "FS.h"
     37          #include <stdio.h>
     38          #include <string.h>
     39          #if	_WINDOWS
     40          #include "SIMConf.h"
     41          #endif
     42          #include "BSP.h"
     43          

   \                                 In section .bss, align 4
     44          char oneKbuffer[1024+2];
   \                     oneKbuffer:
   \   00000000                      DS8 1028
     45          
     46          
     47          /*********************************************************************
     48          *
     49          *       main()
     50          */
     51          void MainTask(void);

   \                                 In section .text, align 4, keep-with-next
     52          void MainTask(void)
     53          {
   \                     MainTask:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     54          U32          v;
     55          FS_FILE    * pFile;
     56          char         ac[256], kmc[100];
     57          int r, i;
     58          const char * sVolName = "";
   \   00000004   634F8FE2           ADR      R4,??MainTask_0  ;; ""
   \   00000008   59DF4DE2           SUB      SP,SP,#+356
   \   0000000C   0450A0E1           MOV      R5,R4
     59          
     60          	GUI_Init();
   \   00000010   ........           BL       GUI_Init
     61            	GUI_SetFont(&GUI_Font32_ASCII);
   \   00000014   84019FE5           LDR      R0,??MainTask_0+0x8
   \   00000018   ........           BL       GUI_SetFont
     62          	
     63            	//
     64            	// Initialize file system
     65            	//
     66            	FS_Init();
   \   0000001C   ........           BL       FS_Init
     67          
     68          #ifdef _WINDOWS
     69          	SIM_Init();
     70          #endif
     71          
     72            	//
     73            	// Check if low-level format is required
     74            	//
     75            	FS_FormatLLIfRequired("");
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       FS_FormatLLIfRequired
     76            
     77            	//
     78            	// Check if volume needs to be high level formatted.
     79            	//
     80            	if ((r = FS_IsHLFormatted("")) == 0) {
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       FS_IsHLFormatted
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0800001A           BNE      ??MainTask_1
     81              	sprintf(kmc,"High level formatting\n");
   \   00000038   64119FE5           LDR      R1,??MainTask_0+0xC
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           BL       sprintf
     82              	GUI_DispString(kmc);
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           BL       GUI_DispString
     83              	FS_Format("", NULL);
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       FS_Format
   \   00000058   030000EA           B        ??MainTask_2
     84            	}
     85            	else if (r == -1)
   \                     ??MainTask_1:
   \   0000005C   010070E3           CMN      R0,#+1
   \   00000060   0100001A           BNE      ??MainTask_2
     86            	{
     87          		GUI_DispString("FS_IsHLFormatted returned an error\n");
   \   00000064   3C019FE5           LDR      R0,??MainTask_0+0x10
   \   00000068   ........           BL       GUI_DispString
     88             }
     89            
     90            	sprintf(kmc,"Running sample on \"%s\"\n", sVolName);
   \                     ??MainTask_2:
   \   0000006C   30419FE5           LDR      R4,??MainTask_0+0xC
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   3C1084E2           ADD      R1,R4,#+60
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           BL       sprintf
     91          	GUI_DispString(kmc);
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   ........           BL       GUI_DispString
     92          	
     93            	v = FS_GetVolumeFreeSpace(sVolName);
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       FS_GetVolumeFreeSpace
   \   00000090   0020A0E1           MOV      R2,R0
     94            	if (v <= 0x7fff) {
   \   00000094   800C52E3           CMP      R2,#+32768
     95              	sprintf(kmc,"  Free space: %u bytes\n", v);
   \   00000098   54108432           ADDCC    R1,R4,#+84
   \   0000009C   0600003A           BCC      ??MainTask_3
     96              	GUI_DispString(kmc);
     97            	} else if (v <= 0x2000000UL) {
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   800780E3           ORR      R0,R0,#0x2000000
   \   000000A8   000052E1           CMP      R2,R0
     98              	v >>= 10;
     99              	sprintf(kmc,"  Free space: %u kBytes\n", v);
   \   000000AC   2225A031           LSRCC    R2,R2,#+10
   \   000000B0   6C108432           ADDCC    R1,R4,#+108
    100              	GUI_DispString(kmc);
    101            	} else {
    102              	v >>= 20;
    103              	sprintf(kmc,"  Free space: %u MBytes\n", v);
   \   000000B4   222AA021           LSRCS    R2,R2,#+20
   \   000000B8   88108422           ADDCS    R1,R4,#+136
   \                     ??MainTask_3:
   \   000000BC   0D00A0E1           MOV      R0,SP
   \   000000C0   ........           BL       sprintf
    104              	GUI_DispString(kmc);
   \   000000C4   0D00A0E1           MOV      R0,SP
   \   000000C8   ........           BL       GUI_DispString
    105            	}
    106          
    107            	// prepare buffer
    108          	oneKbuffer[0] = 0;
   \   000000CC   D8609FE5           LDR      R6,??MainTask_0+0x14
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   0000C6E5           STRB     R0,[R6, #+0]
    109          	for (i=0; i < 16; i++)
   \   000000D8   1070A0E3           MOV      R7,#+16
    110          	{
    111          		strcat(oneKbuffer, "This line right here is 64 characters long including the CR....\n");
   \                     ??MainTask_4:
   \   000000DC   A41084E2           ADD      R1,R4,#+164
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           BL       strcat
    112          	}
   \   000000E8   017057E2           SUBS     R7,R7,#+1
   \   000000EC   FAFFFF1A           BNE      ??MainTask_4
    113          
    114          	GUI_DispString("Begin timed section\n");
   \   000000F0   E80084E2           ADD      R0,R4,#+232
   \   000000F4   ........           BL       GUI_DispString
    115          //  
    116          // Write a 50k file
    117          //
    118            
    119          	// Start LED timed section
    120          	BSP_SetLED(1);
   \   000000F8   0100A0E3           MOV      R0,#+1
   \   000000FC   ........           BL       BSP_SetLED
    121          	
    122          	sprintf(ac, "%s\\fifty_K.txt", sVolName);
   \   00000100   0520A0E1           MOV      R2,R5
   \   00000104   401F84E2           ADD      R1,R4,#+256
   \   00000108   64008DE2           ADD      R0,SP,#+100
   \   0000010C   ........           BL       sprintf
    123          	pFile = FS_FOpen(ac, "w");
   \   00000110   84108FE2           ADR      R1,??MainTask_0+0x4  ;; "w"
   \   00000114   64008DE2           ADD      R0,SP,#+100
   \   00000118   ........           BL       FS_FOpen
   \   0000011C   0050B0E1           MOVS     R5,R0
    124          	if (pFile) {
   \   00000120   1100000A           BEQ      ??MainTask_5
    125          		for (i = 0; i < 50; i++)
   \   00000124   3270A0E3           MOV      R7,#+50
    126          		{
    127          			if (FS_Write(pFile, oneKbuffer, 1024) != 1024)
   \                     ??MainTask_6:
   \   00000128   402EA0E3           MOV      R2,#+1024
   \   0000012C   0610A0E1           MOV      R1,R6
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           BL       FS_Write
   \   00000138   400E50E3           CMP      R0,#+1024
   \   0000013C   0100000A           BEQ      ??MainTask_7
    128          				GUI_DispString("Write Error\n");
   \   00000140   440F84E2           ADD      R0,R4,#+272
   \   00000144   ........           BL       GUI_DispString
    129          		}
   \                     ??MainTask_7:
   \   00000148   017057E2           SUBS     R7,R7,#+1
   \   0000014C   F5FFFF1A           BNE      ??MainTask_6
    130          		if (FS_FClose(pFile))
   \   00000150   0500A0E1           MOV      R0,R5
   \   00000154   ........           BL       FS_FClose
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   0800000A           BEQ      ??MainTask_8
    131          			  	GUI_DispString("Could not close file\n");
   \   00000160   480F84E2           ADD      R0,R4,#+288
   \   00000164   ........           BL       GUI_DispString
   \   00000168   050000EA           B        ??MainTask_8
    132          	}  
    133          	else {
    134              	sprintf(kmc,"Could not open file: %s to write.\n", ac);
   \                     ??MainTask_5:
   \   0000016C   64208DE2           ADD      R2,SP,#+100
   \   00000170   4E1F84E2           ADD      R1,R4,#+312
   \   00000174   0D00A0E1           MOV      R0,SP
   \   00000178   ........           BL       sprintf
    135              	GUI_DispString(kmc);
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   ........           BL       GUI_DispString
    136             }
    137            
    138            	// End LED timer section
    139          	BSP_ClrLED(1);
   \                     ??MainTask_8:
   \   00000184   0100A0E3           MOV      R0,#+1
   \   00000188   ........           BL       BSP_ClrLED
    140          	GUI_DispString("End timed section\n");
   \   0000018C   570F84E2           ADD      R0,R4,#+348
   \   00000190   ........           BL       GUI_DispString
    141          
    142          	// Main task loop
    143            while(1) {
   \                     ??MainTask_9:
   \   00000194   FEFFFFEA           B        ??MainTask_9
   \                     ??MainTask_0:
   \   00000198   00000000           DC8      "",0x0,0x0,0x0
   \   0000019C   77000000           DC8      "w",0x0,0x0
   \   000001A0   ........           DC32     GUI_Font32_ASCII
   \   000001A4   ........           DC32     `?<Constant "High level formatting\\n">`
   \   000001A8   ........           DC32     `?<Constant "High level formatting\\n">`+0x18
   \   000001AC   ........           DC32     oneKbuffer
    144          	 
    145          #ifdef _WINDOWS
    146          		if (SIM_Tick())
    147          			return;
    148          #endif
    149          	}
    150          }

   \                                 In section .rodata, align 1
   \   00000000   00                 DC8 ""

   \                                 In section .rodata, align 4
   \                     `?<Constant "High level formatting\\n">`:
   \   00000000   48696768206C       DC8 "High level formatting\012"
   \              6576656C2066
   \              6F726D617474
   \              696E670A00  
   \   00000017   00                 DC8 0
   \   00000018   46535F497348       DC8 "FS_IsHLFormatted returned an error\012"
   \              4C466F726D61
   \              747465642072
   \              657475726E65
   \              6420616E2065
   \              72726F720A00
   \   0000003C   52756E6E696E       DC8 "Running sample on \"%s\"\012"
   \              672073616D70
   \              6C65206F6E20
   \              222573220A00
   \   00000054   202046726565       DC8 "  Free space: %u bytes\012"
   \              207370616365
   \              3A2025752062
   \              797465730A00
   \   0000006C   202046726565       DC8 "  Free space: %u kBytes\012"
   \              207370616365
   \              3A202575206B
   \              42797465730A
   \              00          
   \   00000085   000000             DC8 0, 0, 0
   \   00000088   202046726565       DC8 "  Free space: %u MBytes\012"
   \              207370616365
   \              3A202575204D
   \              42797465730A
   \              00          
   \   000000A1   000000             DC8 0, 0, 0
   \   000000A4   54686973206C       DC8 54H, 68H, 69H, 73H, 20H, 6CH, 69H, 6EH
   \              696E        
   \   000000AC   652072696768       DC8 65H, 20H, 72H, 69H, 67H, 68H, 74H, 20H
   \              7420        
   \   000000B4   686572652069       DC8 68H, 65H, 72H, 65H, 20H, 69H, 73H, 20H
   \              7320        
   \   000000BC   363420636861       DC8 36H, 34H, 20H, 63H, 68H, 61H, 72H, 61H
   \              7261        
   \   000000C4   637465727320       DC8 63H, 74H, 65H, 72H, 73H, 20H, 6CH, 6FH
   \              6C6F        
   \   000000CC   6E6720696E63       DC8 6EH, 67H, 20H, 69H, 6EH, 63H, 6CH, 75H
   \              6C75        
   \   000000D4   64696E672074       DC8 64H, 69H, 6EH, 67H, 20H, 74H, 68H, 65H
   \              6865        
   \   000000DC   2043522E2E2E       DC8 20H, 43H, 52H, 2EH, 2EH, 2EH, 2EH, 0AH
   \              2E0A        
   \   000000E4   00                 DC8 0
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   426567696E20       DC8 "Begin timed section\012"
   \              74696D656420
   \              73656374696F
   \              6E0A00      
   \   000000FD   000000             DC8 0, 0, 0
   \   00000100   25735C666966       DC8 "%s\\fifty_K.txt"
   \              74795F4B2E74
   \              787400      
   \   0000010F   00                 DC8 0
   \   00000110   577269746520       DC8 "Write Error\012"
   \              4572726F720A
   \              00          
   \   0000011D   000000             DC8 0, 0, 0
   \   00000120   436F756C6420       DC8 "Could not close file\012"
   \              6E6F7420636C
   \              6F7365206669
   \              6C650A00    
   \   00000136   0000               DC8 0, 0
   \   00000138   436F756C6420       DC8 "Could not open file: %s to write.\012"
   \              6E6F74206F70
   \              656E2066696C
   \              653A20257320
   \              746F20777269
   \              74652E0A00  
   \   0000015B   00                 DC8 0
   \   0000015C   456E64207469       DC8 "End timed section\012"
   \              6D6564207365
   \              6374696F6E0A
   \              00          
   \   0000016F   00                 DC8 0

   \                                 In section .rodata, align 2
   \   00000000   7700               DC8 "w"
    151          /****** End of File *************************************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     MainTask    376


   Section sizes:

     Function/Label                        Bytes
     --------------                        -----
     oneKbuffer                            1028
     MainTask                               432
     ?<Constant "">                           1
     ?<Constant "High level formatting\n">  368
     ?<Constant "w">                          2

 
 1 028 bytes in section .bss
   371 bytes in section .rodata
   432 bytes in section .text
 
   432 bytes of CODE  memory
   371 bytes of CONST memory
 1 028 bytes of DATA  memory

Errors: none
Warnings: none
