###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:19 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTBOX_GetItemText.c               #
#    Command line =  C:\DUII\TargetHW\GUI\LISTBOX_GetItemText.c -D DEBUG=1    #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTBOX_GetItemText.lst    #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTBOX_GetItemText.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTBOX_GetItemText.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTBOX_GetItemText.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LISTBOX_Private.h"
     24          #include <string.h>
     25          
     26          #if GUI_WINSUPPORT
     27          
     28          /*********************************************************************
     29          *
     30          *       Exported routines:  Various methods
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       LISTBOX_GetItemText
     37          */

   \                                 In section .text, align 4, keep-with-next
     38          void LISTBOX_GetItemText(LISTBOX_Handle hObj, unsigned Index, char * pBuffer, int MaxSize) {
   \                     LISTBOX_GetItemText:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     39            if (hObj) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   1500000A           BEQ      ??LISTBOX_GetItemText_0
     40              unsigned NumItems;
     41              WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
     42              NumItems = LISTBOX_GetNumItems(hObj);
     43              if (Index < NumItems) {
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       LISTBOX_GetNumItems
   \   0000002C   000055E1           CMP      R5,R0
   \   00000030   0F00002A           BCS      ??LISTBOX_GetItemText_1
     44                const char * pString;
     45                int CopyLen;
     46                pString = LISTBOX__GetpStringLocked(hObj, Index);
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       LISTBOX__GetpStringLocked
   \   00000040   0040A0E1           MOV      R4,R0
     47                CopyLen = strlen(pString);
   \   00000044   ........           BL       strlen
   \   00000048   0050A0E1           MOV      R5,R0
     48                if (CopyLen > (MaxSize - 1)) {
   \   0000004C   010047E2           SUB      R0,R7,#+1
   \   00000050   050050E1           CMP      R0,R5
     49                  CopyLen = MaxSize - 1;
   \   00000054   0050A0B1           MOVLT    R5,R0
     50                }
     51                GUI_MEMCPY(pBuffer, pString, CopyLen);
   \   00000058   0520A0E1           MOV      R2,R5
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       __aeabi_memcpy
     52                GUI_UNLOCK_H(pString);
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
     53                pBuffer[CopyLen] = 0;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0600C5E7           STRB     R0,[R5, +R6]
     54              }
     55              WM_UNLOCK();
   \                     ??LISTBOX_GetItemText_1:
   \   00000074   ........           BL       GUI_Unlock
     56            }
     57          }
   \                     ??LISTBOX_GetItemText_0:
   \   00000078   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return
     58          
     59          #else                            /* Avoid problems with empty object modules */
     60            void LISTBOX_GetItemText_C(void) {}
     61          #endif
     62          
     63          /*************************** End of file ****************************/
     64          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     LISTBOX_GetItemText     24


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     LISTBOX_GetItemText  128

 
 128 bytes in section .text
 
 128 bytes of CODE memory

Errors: none
Warnings: none
