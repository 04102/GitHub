###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:54 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFadeWin.c             #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFadeWin.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDEV_MoveAndFadeWin.lst  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDEV_MoveAndFadeWin.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_MoveAndFadeWin.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDEV_MoveAndFadeWin.c
     19          Purpose     : Routines for fading and moving windows
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          #include <stddef.h>
     25          
     26          #include "GUI_Private.h"
     27          
     28          #if (GUI_SUPPORT_MEMDEV && GUI_WINSUPPORT)
     29          
     30          #include "WM_Intern.h"
     31          
     32          #if (WM_SUPPORT_STATIC_MEMDEV)
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            #define TIME_PER_FRAME 10
     42          #else
     43            #define TIME_PER_FRAME 40
     44          #endif
     45          
     46          /*********************************************************************
     47          *
     48          *       Types
     49          *
     50          **********************************************************************
     51          */
     52          typedef struct {
     53            int a180;
     54            int Period;
     55            int TimeUsed;
     56            int dx;
     57            int dy;
     58          } PARA_IN_MOVE;
     59          
     60          typedef struct {
     61            I32 a;
     62            int m;
     63            int ddx;
     64            int ddy;
     65          } PARA_OUT_MOVE;
     66          
     67          typedef struct {
     68            int Period;         // Complete period to be used for shifting
     69            int TimeDiff;       // Position on timeline
     70            int xStart, yStart; // Start moving from here
     71            int dx, dy;         // Complete distance to be moved during the effect
     72          } PARA_SHIFT;
     73          
     74          typedef void (* PF_CALC_PARA_MOVE) (PARA_IN_MOVE * pParaIn, PARA_OUT_MOVE * pParaOut);
     75          typedef int  (* PF_CALC_PARA_FADE) (int Period, int TimeUsed);
     76          typedef void (* PF_INIT_PARA_SHIFT)(PARA_SHIFT * pPara, GUI_MEMDEV_Handle hMemWin, int Period, int Direction);
     77          
     78          /*********************************************************************
     79          *
     80          *       Static code
     81          *
     82          **********************************************************************
     83          */
     84          /*********************************************************************
     85          *
     86          *       _CalcParaMoveIn
     87          *
     88          * Purpose:
     89          *   Calculates the parameters for moving in a window
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          static void _CalcParaMoveIn(PARA_IN_MOVE * pParaIn, PARA_OUT_MOVE * pParaOut) {
   \                     _CalcParaMoveIn:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     92            pParaOut->a   = pParaIn->a180 * 1000 - (pParaIn->TimeUsed * pParaIn->a180 * 1000) / pParaIn->Period;
   \   00000008   087094E5           LDR      R7,[R4, #+8]
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   FA8FA0E3           MOV      R8,#+1000
   \   00000018   900701E0           MUL      R1,R0,R7
   \   0000001C   980009E0           MUL      R9,R8,R0
   \   00000020   046094E5           LDR      R6,[R4, #+4]
   \   00000024   980100E0           MUL      R0,R8,R1
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   ........           BL       __aeabi_idiv
   \   00000030   000049E0           SUB      R0,R9,R0
   \   00000034   000085E5           STR      R0,[R5, #+0]
     93            pParaOut->m   = (pParaIn->TimeUsed * 1000) / pParaIn->Period;
   \   00000038   980700E0           MUL      R0,R8,R7
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   ........           BL       __aeabi_idiv
   \   00000044   040085E5           STR      R0,[R5, #+4]
     94            pParaOut->ddx = pParaIn->dx - (pParaIn->TimeUsed * pParaIn->dx) / pParaIn->Period;
   \   00000048   0C6094E5           LDR      R6,[R4, #+12]
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   041094E5           LDR      R1,[R4, #+4]
   \   00000054   960000E0           MUL      R0,R6,R0
   \   00000058   ........           BL       __aeabi_idiv
   \   0000005C   000046E0           SUB      R0,R6,R0
   \   00000060   080085E5           STR      R0,[R5, #+8]
     95            pParaOut->ddy = pParaIn->dy - (pParaIn->TimeUsed * pParaIn->dy) / pParaIn->Period;
   \   00000064   106094E5           LDR      R6,[R4, #+16]
   \   00000068   080094E5           LDR      R0,[R4, #+8]
   \   0000006C   041094E5           LDR      R1,[R4, #+4]
   \   00000070   960000E0           MUL      R0,R6,R0
   \   00000074   ........           BL       __aeabi_idiv
   \   00000078   000046E0           SUB      R0,R6,R0
   \   0000007C   0C0085E5           STR      R0,[R5, #+12]
     96          }
   \   00000080   F083BDE8           POP      {R4-R9,PC}       ;; return
     97          
     98          /*********************************************************************
     99          *
    100          *       _CalcParaMoveOut
    101          *
    102          * Purpose:
    103          *   Calculates the parameters for moving out a window
    104          */

   \                                 In section .text, align 4, keep-with-next
    105          static void _CalcParaMoveOut(PARA_IN_MOVE * pParaIn, PARA_OUT_MOVE * pParaOut) {
   \                     _CalcParaMoveOut:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    106            pParaOut->a   = (pParaIn->TimeUsed * pParaIn->a180 * 1000) / pParaIn->Period;
   \   00000008   087094E5           LDR      R7,[R4, #+8]
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   900701E0           MUL      R1,R0,R7
   \   00000018   FA8FA0E3           MOV      R8,#+1000
   \   0000001C   046094E5           LDR      R6,[R4, #+4]
   \   00000020   980100E0           MUL      R0,R8,R1
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   ........           BL       __aeabi_idiv
   \   0000002C   000085E5           STR      R0,[R5, #+0]
    107            pParaOut->m   = 1000 - (pParaIn->TimeUsed * 1000) / pParaIn->Period;
   \   00000030   980700E0           MUL      R0,R8,R7
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   ........           BL       __aeabi_idiv
   \   0000003C   FA0F60E2           RSB      R0,R0,#+1000
   \   00000040   040085E5           STR      R0,[R5, #+4]
    108            pParaOut->ddx = (pParaIn->TimeUsed * pParaIn->dx) / pParaIn->Period;
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   0C1094E5           LDR      R1,[R4, #+12]
   \   0000004C   910000E0           MUL      R0,R1,R0
   \   00000050   041094E5           LDR      R1,[R4, #+4]
   \   00000054   ........           BL       __aeabi_idiv
   \   00000058   080085E5           STR      R0,[R5, #+8]
    109            pParaOut->ddy = (pParaIn->TimeUsed * pParaIn->dy) / pParaIn->Period;
   \   0000005C   080094E5           LDR      R0,[R4, #+8]
   \   00000060   101094E5           LDR      R1,[R4, #+16]
   \   00000064   910000E0           MUL      R0,R1,R0
   \   00000068   041094E5           LDR      R1,[R4, #+4]
   \   0000006C   ........           BL       __aeabi_idiv
   \   00000070   0C0085E5           STR      R0,[R5, #+12]
    110          }
   \   00000074   F081BDE8           POP      {R4-R8,PC}       ;; return
    111          
    112          /*********************************************************************
    113          *
    114          *       _RemoveStaticDevice
    115          *
    116          * Purpose:
    117          *   Removes static device from the given window and its children
    118          */

   \                                 In section .text, align 4, keep-with-next
    119          static void _RemoveStaticDevice(WM_HWIN hWin) {
   \                     _RemoveStaticDevice:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    120            WM_Obj * pObj;
    121          
    122            if (hWin) {
   \   0000000C   1800000A           BEQ      ??_RemoveStaticDevice_0
    123              pObj = (WM_Obj *)GUI_LOCK_H(hWin); {
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0050A0E1           MOV      R5,R0
    124                if (pObj->Status & WM_CF_STATIC) {
   \   00000018   280095E5           LDR      R0,[R5, #+40]
   \   0000001C   400B10E3           TST      R0,#0x10000
   \   00000020   0800000A           BEQ      ??_RemoveStaticDevice_1
    125                  if (pObj->hMem) {
   \   00000024   240095E5           LDR      R0,[R5, #+36]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0200000A           BEQ      ??_RemoveStaticDevice_2
    126                    GUI_MEMDEV_Delete(pObj->hMem);
   \   00000030   ........           BL       GUI_MEMDEV_Delete
    127                    pObj->hMem = 0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   240085E5           STR      R0,[R5, #+36]
    128                  }
    129                  pObj->Status &= ~WM_CF_STATIC;
   \                     ??_RemoveStaticDevice_2:
   \   0000003C   280095E5           LDR      R0,[R5, #+40]
   \   00000040   400BC0E3           BIC      R0,R0,#0x10000
   \   00000044   280085E5           STR      R0,[R5, #+40]
    130                }
    131              } GUI_UNLOCK_H(pObj);
   \                     ??_RemoveStaticDevice_1:
   \   00000048   ........           BL       GUI_ALLOC_UnlockH
    132              hWin = WM_GetFirstChild(hWin);
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       WM_GetFirstChild
   \   00000054   0040B0E1           MOVS     R4,R0
    133              while (hWin) {
   \   00000058   0500000A           BEQ      ??_RemoveStaticDevice_0
    134                _RemoveStaticDevice(hWin);
   \                     ??_RemoveStaticDevice_3:
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       _RemoveStaticDevice
    135                hWin = WM_GetNextSibling(hWin);
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       WM_GetNextSibling
   \   0000006C   0040B0E1           MOVS     R4,R0
   \   00000070   F9FFFF1A           BNE      ??_RemoveStaticDevice_3
    136              }
    137            }
    138          }
   \                     ??_RemoveStaticDevice_0:
   \   00000074   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
    139          
    140          /*********************************************************************
    141          *
    142          *       _MoveWindow
    143          *
    144          * Purpose:
    145          *   Moves in/out a window from/to the given coordinate. Optionally
    146          *   the window can be rotated during the effect.
    147          *
    148          * Parameters:
    149          *   hWin       - Window to be moved
    150          *   x          - Screen coordinate in x for moving window from/to
    151          *   y          - Screen coordinate in y for moving window from/to
    152          *   a180       - Angle in degrees to be used for rotating the window
    153          *   Period     - Period of time for the complete effect
    154          *   pfCalcPara - Function pointer to be used for calculating
    155          *
    156          * Return value:
    157          *   0 on success, 1 on error
    158          */

   \                                 In section .text, align 4, keep-with-next
    159          static int _MoveWindow(WM_HWIN hWin, int x, int y, int a180, int Period, PF_CALC_PARA_MOVE pfCalcPara) {
   \                     _MoveWindow:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0140A0E1           MOV      R4,R1
    160            GUI_MEMDEV_Handle hMemWin;
    161            GUI_MEMDEV_Handle hMemDst;
    162            GUI_MEMDEV_Handle hMemBk;
    163            int xSize, ySize;
    164            int mx, my;
    165            GUI_RECT Rect;
    166            U32 * pBk;
    167            U32 * pDst;
    168            U32 MemSizeBk;
    169            int TimeStart, TimeNow, TimeDiff, TimeUsed, r;
    170          
    171            PARA_IN_MOVE  ParaIn;
    172            PARA_OUT_MOVE ParaOut;
    173          
    174            ParaIn.a180   = a180;
    175            ParaIn.Period = Period;
   \   0000000C   60109DE5           LDR      R1,[SP, #+96]
   \   00000010   0080A0E1           MOV      R8,R0
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   28308DE5           STR      R3,[SP, #+40]
   \   0000001C   2C108DE5           STR      R1,[SP, #+44]
    176            
    177            //
    178            // Show window
    179            //
    180            WM_ShowWindow(hWin);
   \   00000020   ........           BL       WM_ShowWindow
    181            //
    182            // Create window device
    183            //
    184            GUI_MEMDEV_CreateStatic(hWin);
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   ........           BL       GUI_MEMDEV_CreateStatic
    185            //
    186            // Get static memory device from window
    187            //
    188            hMemWin = GUI_MEMDEV_GetWindowDevice(hWin);
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           BL       GUI_MEMDEV_GetWindowDevice
   \   00000034   0060A0E1           MOV      R6,R0
    189            //
    190            // Hide window
    191            //
    192            WM_HideWindow(hWin);
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           BL       WM_HideWindow
    193            if (hMemWin) {
   \   00000040   000056E3           CMP      R6,#+0
   \   00000044   6B00000A           BEQ      ??_MoveWindow_0
    194              //
    195              // Create background device
    196              //
    197              GUI_MEMDEV_CreateStatic(WM_HBKWIN);
   \   00000048   ........           BL       WM_GetDesktopWindow
   \   0000004C   ........           BL       GUI_MEMDEV_CreateStatic
    198              //
    199              // Set clipping rectangle to desktop area
    200              //
    201              WM_SelectWindow(WM_HBKWIN);
   \   00000050   ........           BL       WM_GetDesktopWindow
   \   00000054   ........           BL       WM_SelectWindow
    202              //
    203              // Get static memory device from background
    204              //
    205              hMemBk = GUI_MEMDEV_GetWindowDevice(WM_HBKWIN);
   \   00000058   ........           BL       WM_GetDesktopWindow
   \   0000005C   ........           BL       GUI_MEMDEV_GetWindowDevice
   \   00000060   0070B0E1           MOVS     R7,R0
    206              if (hMemBk) {
   \   00000064   5F00000A           BEQ      ??_MoveWindow_1
    207                //
    208                // Get window coordinates
    209                //
    210                WM_GetWindowRectEx(hWin, &Rect);
   \   00000068   0C108DE2           ADD      R1,SP,#+12
   \   0000006C   0800A0E1           MOV      R0,R8
   \   00000070   ........           BL       WM_GetWindowRectEx
    211                //
    212                // Create memory device for animation
    213                //
    214                xSize   = LCD_GetXSize();
   \   00000074   ........           BL       LCD_GetXSize
   \   00000078   0090A0E1           MOV      R9,R0
    215                ySize   = LCD_GetYSize();
   \   0000007C   ........           BL       LCD_GetYSize
   \   00000080   00A0A0E1           MOV      R10,R0
    216                hMemDst = GUI_MEMDEV_CreateFixed(0, 0, 
    217                                                 xSize, ySize, 
    218                                                 GUI_MEMDEV_NOTRANS, GUI_MEMDEV_APILIST_32, GUI_COLOR_CONV_888);
   \   00000084   ........           LDR      R0,??DataTable5
   \   00000088   0A30A0E1           MOV      R3,R10
   \   0000008C   08008DE5           STR      R0,[SP, #+8]
   \   00000090   ........           LDR      R0,??DataTable5_1
   \   00000094   0920A0E1           MOV      R2,R9
   \   00000098   04008DE5           STR      R0,[SP, #+4]
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   00008DE5           STR      R0,[SP, #+0]
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   ........           BL       GUI_MEMDEV_CreateFixed
   \   000000B0   0080B0E1           MOVS     R8,R0
    219                if (hMemDst) {
   \   000000B4   4700000A           BEQ      ??_MoveWindow_2
    220                  //
    221                  // Calculate size of data block
    222                  //
    223                  MemSizeBk = xSize * ySize * sizeof(LCD_PIXELINDEX);
   \   000000B8   9A0900E0           MUL      R0,R10,R9
   \   000000BC   0091A0E1           LSL      R9,R0,#+2
    224                  //
    225                  // Fill with content of background window
    226                  //
    227                  pBk  = (U32 *)GUI_MEMDEV_GetDataPtr(hMemBk);
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           BL       GUI_MEMDEV_GetDataPtr
   \   000000C8   00A0A0E1           MOV      R10,R0
    228                  pDst = (U32 *)GUI_MEMDEV_GetDataPtr(hMemDst);
   \   000000CC   0800A0E1           MOV      R0,R8
   \   000000D0   ........           BL       GUI_MEMDEV_GetDataPtr
   \   000000D4   00B0A0E1           MOV      R11,R0
    229                  //
    230                  // Calculate center of window to be animated
    231                  //
    232                  mx = (Rect.x0 + Rect.x1) >> 1;
    233                  my = (Rect.y0 + Rect.y1) >> 1;
   \   000000D8   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   000000DC   F211DDE1           LDRSH    R1,[SP, #+18]
    234                  //
    235                  // Calculate parameters for animation
    236                  //
    237                  ParaIn.dx = x - mx;
   \   000000E0   F021DDE1           LDRSH    R2,[SP, #+16]
   \   000000E4   000081E0           ADD      R0,R1,R0
   \   000000E8   FC10DDE1           LDRSH    R1,[SP, #+12]
    238                  ParaIn.dy = y - my;
   \   000000EC   C00045E0           SUB      R0,R5,R0, ASR #+1
   \   000000F0   38008DE5           STR      R0,[SP, #+56]
   \   000000F4   011082E0           ADD      R1,R2,R1
   \   000000F8   C11044E0           SUB      R1,R4,R1, ASR #+1
   \   000000FC   34108DE5           STR      R1,[SP, #+52]
    239                  //
    240                  // Animation
    241                  //
    242                  TimeStart = GUI_GetTime();
   \   00000100   ........           BL       GUI_GetTime
   \   00000104   0040A0E1           MOV      R4,R0
    243                  GUI_X_Delay(TIME_PER_FRAME);
   \   00000108   2800A0E3           MOV      R0,#+40
   \   0000010C   ........           BL       GUI_X_Delay
   \   00000110   60009DE5           LDR      R0,[SP, #+96]
   \   00000114   040080E0           ADD      R0,R0,R4
   \   00000118   14008DE5           STR      R0,[SP, #+20]
    244                  do {
    245                    //
    246                    // Calculate elapsed time
    247                    //
    248                    TimeNow         = GUI_GetTime();
   \                     ??_MoveWindow_3:
   \   0000011C   ........           BL       GUI_GetTime
   \   00000120   0050A0E1           MOV      R5,R0
    249                    TimeDiff        = TimeNow - TimeStart;
    250                    ParaIn.TimeUsed = (TimeDiff > Period) ? Period : TimeDiff;
   \   00000124   60109DE5           LDR      R1,[SP, #+96]
   \   00000128   040045E0           SUB      R0,R5,R4
   \   0000012C   000051E1           CMP      R1,R0
   \   00000130   0010A0C1           MOVGT    R1,R0
   \   00000134   30108DE5           STR      R1,[SP, #+48]
    251                    //
    252                    // Calculate parameters
    253                    //
    254                    pfCalcPara(&ParaIn, &ParaOut);
   \   00000138   18108DE2           ADD      R1,SP,#+24
   \   0000013C   28008DE2           ADD      R0,SP,#+40
   \   00000140   64209DE5           LDR      R2,[SP, #+100]
   \   00000144   32FF2FE1           BLX      R2
    255                    //
    256                    // Fill memory device with background
    257                    //
    258                    GUI_MEMCPY(pDst, pBk, MemSizeBk);
   \   00000148   0920A0E1           MOV      R2,R9
   \   0000014C   0A10A0E1           MOV      R1,R10
   \   00000150   0B00A0E1           MOV      R0,R11
   \   00000154   ........           BL       __aeabi_memcpy4
    259                    //
    260                    // Rotate and shrink
    261                    //
    262                    GUI_MEMDEV__Rotate(hMemWin, hMemDst, 
    263                                       Rect.x0 + ParaOut.ddx, 
    264                                       Rect.y0 + ParaOut.ddy, 
    265                                       ParaOut.a, ParaOut.m, 0x00FFFFFF); // Important: No alpha value must remain!
   \   00000158   FF04E0E3           MVN      R0,#-16777216
   \   0000015C   08008DE5           STR      R0,[SP, #+8]
   \   00000160   1C009DE5           LDR      R0,[SP, #+28]
   \   00000164   24109DE5           LDR      R1,[SP, #+36]
   \   00000168   04008DE5           STR      R0,[SP, #+4]
   \   0000016C   18009DE5           LDR      R0,[SP, #+24]
   \   00000170   00008DE5           STR      R0,[SP, #+0]
   \   00000174   FE00DDE1           LDRSH    R0,[SP, #+14]
   \   00000178   003081E0           ADD      R3,R1,R0
   \   0000017C   FC00DDE1           LDRSH    R0,[SP, #+12]
   \   00000180   20109DE5           LDR      R1,[SP, #+32]
   \   00000184   002081E0           ADD      R2,R1,R0
   \   00000188   0810A0E1           MOV      R1,R8
   \   0000018C   0600A0E1           MOV      R0,R6
   \   00000190   ........           BL       GUI_MEMDEV__Rotate
    266                    //
    267                    // Draw memory device without window manager
    268                    //
    269                    WM_Deactivate();
   \   00000194   ........           BL       WM_Deactivate
    270                    GUI_MEMDEV_Write(hMemDst);
   \   00000198   0800A0E1           MOV      R0,R8
   \   0000019C   ........           BL       GUI_MEMDEV_Write
    271                    WM_Activate();
   \   000001A0   ........           BL       WM_Activate
    272                    //
    273                    // Make sure not more than 25 frames per second are drawn
    274                    //
    275                    TimeUsed = GUI_GetTime() - TimeNow;
   \   000001A4   ........           BL       GUI_GetTime
   \   000001A8   050040E0           SUB      R0,R0,R5
    276                    if (TimeUsed < TIME_PER_FRAME) {
   \   000001AC   280050E3           CMP      R0,#+40
   \   000001B0   010000AA           BGE      ??_MoveWindow_4
    277                      GUI_X_Delay(TIME_PER_FRAME - TimeUsed);
   \   000001B4   280060E2           RSB      R0,R0,#+40
   \   000001B8   ........           BL       GUI_X_Delay
    278                    }
    279                  } while (TimeNow < (TimeStart + Period));
   \                     ??_MoveWindow_4:
   \   000001BC   14009DE5           LDR      R0,[SP, #+20]
   \   000001C0   000055E1           CMP      R5,R0
   \   000001C4   D4FFFFBA           BLT      ??_MoveWindow_3
    280                  //
    281                  // Remove temporary memory devices
    282                  //
    283                  GUI_MEMDEV_Delete(hMemDst);
   \   000001C8   0800A0E1           MOV      R0,R8
   \   000001CC   ........           BL       GUI_MEMDEV_Delete
    284                  r = 0;
   \   000001D0   0040A0E3           MOV      R4,#+0
   \   000001D4   000000EA           B        ??_MoveWindow_5
    285                } else {
    286                  r = 1;
   \                     ??_MoveWindow_2:
   \   000001D8   0140A0E3           MOV      R4,#+1
    287                }
    288                GUI_MEMDEV_Delete(hMemBk);
   \                     ??_MoveWindow_5:
   \   000001DC   0700A0E1           MOV      R0,R7
   \   000001E0   ........           BL       GUI_MEMDEV_Delete
   \   000001E4   000000EA           B        ??_MoveWindow_6
    289              } else {
    290                r = 1;
   \                     ??_MoveWindow_1:
   \   000001E8   0140A0E3           MOV      R4,#+1
    291              }
    292              GUI_MEMDEV_Delete(hMemWin);
   \                     ??_MoveWindow_6:
   \   000001EC   0600A0E1           MOV      R0,R6
   \   000001F0   ........           BL       GUI_MEMDEV_Delete
   \   000001F4   000000EA           B        ??_MoveWindow_7
    293            } else {
    294              r = 1;
   \                     ??_MoveWindow_0:
   \   000001F8   0140A0E3           MOV      R4,#+1
    295            }
    296            //
    297            // Remove devices
    298            //
    299            _RemoveStaticDevice(WM_HBKWIN);
   \                     ??_MoveWindow_7:
   \   000001FC   ........           BL       WM_GetDesktopWindow
   \   00000200   0050B0E1           MOVS     R5,R0
   \   00000204   1800000A           BEQ      ??_MoveWindow_8
   \   00000208   ........           BL       GUI_ALLOC_LockH
   \   0000020C   0060A0E1           MOV      R6,R0
   \   00000210   280096E5           LDR      R0,[R6, #+40]
   \   00000214   400B10E3           TST      R0,#0x10000
   \   00000218   0800000A           BEQ      ??_MoveWindow_9
   \   0000021C   240096E5           LDR      R0,[R6, #+36]
   \   00000220   000050E3           CMP      R0,#+0
   \   00000224   0200000A           BEQ      ??_MoveWindow_10
   \   00000228   ........           BL       GUI_MEMDEV_Delete
   \   0000022C   0000A0E3           MOV      R0,#+0
   \   00000230   240086E5           STR      R0,[R6, #+36]
   \                     ??_MoveWindow_10:
   \   00000234   280096E5           LDR      R0,[R6, #+40]
   \   00000238   400BC0E3           BIC      R0,R0,#0x10000
   \   0000023C   280086E5           STR      R0,[R6, #+40]
   \                     ??_MoveWindow_9:
   \   00000240   ........           BL       GUI_ALLOC_UnlockH
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   ........           BL       WM_GetFirstChild
   \   0000024C   0050B0E1           MOVS     R5,R0
   \   00000250   0500000A           BEQ      ??_MoveWindow_8
   \                     ??_MoveWindow_11:
   \   00000254   0500A0E1           MOV      R0,R5
   \   00000258   ........           BL       _RemoveStaticDevice
   \   0000025C   0500A0E1           MOV      R0,R5
   \   00000260   ........           BL       WM_GetNextSibling
   \   00000264   0050B0E1           MOVS     R5,R0
   \   00000268   F9FFFF1A           BNE      ??_MoveWindow_11
    300            //
    301            // This is the end...
    302            //
    303            return r;
   \                     ??_MoveWindow_8:
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   3CD08DE2           ADD      SP,SP,#+60
   \   00000274   F08FBDE8           POP      {R4-R11,PC}      ;; return
    304          }
    305          
    306          /*********************************************************************
    307          *
    308          *       _CalcParaFadeIn
    309          *
    310          * Purpose:
    311          *   Calculates the parameters for fading in a window
    312          */

   \                                 In section .text, align 4, keep-with-next
    313          static int _CalcParaFadeIn(int Period, int TimeUsed) {
   \                     _CalcParaFadeIn:
   \   00000000   0020A0E1           MOV      R2,R0
   \   00000004   00402DE9           PUSH     {LR}
    314            int Intens;
    315          
    316            Intens = (TimeUsed * 255) / Period;
   \   00000008   010461E0           RSB      R0,R1,R1, LSL #+8
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   ........           BL       __aeabi_idiv
    317            Intens = (Intens > 255) ? 255 : Intens;
   \   00000014   400F50E3           CMP      R0,#+256
   \   00000018   FF00A0A3           MOVGE    R0,#+255
    318            return Intens;
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    319          }
    320          
    321          /*********************************************************************
    322          *
    323          *       _CalcParaFadeOut
    324          *
    325          * Purpose:
    326          *   Calculates the parameters for fading out a window
    327          */

   \                                 In section .text, align 4, keep-with-next
    328          static int _CalcParaFadeOut(int Period, int TimeUsed) {
   \                     _CalcParaFadeOut:
   \   00000000   0020A0E1           MOV      R2,R0
   \   00000004   00402DE9           PUSH     {LR}
    329            int Intens;
    330          
    331            Intens = 255 - (TimeUsed * 255) / Period;
   \   00000008   010461E0           RSB      R0,R1,R1, LSL #+8
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   ........           BL       __aeabi_idiv
   \   00000014   FF0070E2           RSBS     R0,R0,#+255
    332            Intens = (Intens < 0) ? 0 : Intens;
   \   00000018   0000A043           MOVMI    R0,#+0
    333            return Intens;
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    334          }
    335          
    336          /*********************************************************************
    337          *
    338          *       _FadeWindow
    339          *
    340          * Purpose:
    341          *   Fades in/out a window.
    342          *
    343          * Parameters:
    344          *   hWin       - Window to be faded
    345          *   Period     - Period of time for the complete effect
    346          *   pfCalcPara - Function pointer to be used for calculating
    347          *
    348          * Return value:
    349          *   0 on success, 1 on error
    350          */

   \                                 In section .text, align 4, keep-with-next
    351          static int _FadeWindow(WM_HWIN hWin, int Period, PF_CALC_PARA_FADE pfCalcPara) {
   \                     _FadeWindow:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0080A0E1           MOV      R8,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    352            GUI_MEMDEV_Handle hMemWin;
    353            GUI_MEMDEV_Handle hMemDst;
    354            GUI_MEMDEV_Handle hMemBk;
    355            int xSize, ySize;
    356            GUI_RECT Rect;
    357            int TimeStart, TimeNow, TimeDiff, TimeUsed, Intens, r, xPosWin, yPosWin;
    358          
    359            //
    360            // Show window
    361            //
    362            WM_ShowWindow(hWin);
   \   00000010   ........           BL       WM_ShowWindow
    363            //
    364            // Create window device
    365            //
    366            GUI_MEMDEV_CreateStatic(hWin);
   \   00000014   0800A0E1           MOV      R0,R8
   \   00000018   ........           BL       GUI_MEMDEV_CreateStatic
    367            //
    368            // Get static memory device from window
    369            //
    370            hMemWin = GUI_MEMDEV_GetWindowDevice(hWin);
   \   0000001C   0800A0E1           MOV      R0,R8
   \   00000020   ........           BL       GUI_MEMDEV_GetWindowDevice
   \   00000024   0050A0E1           MOV      R5,R0
    371            //
    372            // Hide window
    373            //
    374            WM_HideWindow(hWin);
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   ........           BL       WM_HideWindow
    375            if (hMemWin) {
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   4E00000A           BEQ      ??_FadeWindow_0
    376              xPosWin = GUI_MEMDEV_GetXPos(hMemWin);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       GUI_MEMDEV_GetXPos
   \   00000040   0060A0E1           MOV      R6,R0
    377              yPosWin = GUI_MEMDEV_GetYPos(hMemWin);
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       GUI_MEMDEV_GetYPos
   \   0000004C   0070A0E1           MOV      R7,R0
    378              //
    379              // Create background device
    380              //
    381              GUI_MEMDEV_CreateStatic(WM_HBKWIN);
   \   00000050   ........           BL       WM_GetDesktopWindow
   \   00000054   ........           BL       GUI_MEMDEV_CreateStatic
    382              //
    383              // Set clipping rectangle to desktop area
    384              //
    385              WM_SelectWindow(WM_HBKWIN);
   \   00000058   ........           BL       WM_GetDesktopWindow
   \   0000005C   ........           BL       WM_SelectWindow
    386              //
    387              // Get static memory device from background
    388              //
    389              hMemBk = GUI_MEMDEV_GetWindowDevice(WM_HBKWIN);
   \   00000060   ........           BL       WM_GetDesktopWindow
   \   00000064   ........           BL       GUI_MEMDEV_GetWindowDevice
   \   00000068   0090B0E1           MOVS     R9,R0
    390              if (hMemBk) {
   \   0000006C   3C00000A           BEQ      ??_FadeWindow_1
    391                //
    392                // Get window coordinates
    393                //
    394                WM_GetWindowRectEx(hWin, &Rect);
   \   00000070   0C108DE2           ADD      R1,SP,#+12
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   ........           BL       WM_GetWindowRectEx
    395                //
    396                // Create memory device for animation
    397                //
    398                xSize   = Rect.x1 - Rect.x0 + 1;
    399                ySize   = Rect.y1 - Rect.y0 + 1;
    400                hMemDst = GUI_MEMDEV_CreateFixed(Rect.x0, Rect.y0, 
    401                                                 xSize, ySize, 
    402                                                 GUI_MEMDEV_NOTRANS, GUI_MEMDEV_APILIST_32, GUI_COLOR_CONV_888);
   \   0000007C   ........           LDR      R2,??DataTable5
   \   00000080   FE10DDE1           LDRSH    R1,[SP, #+14]
   \   00000084   08208DE5           STR      R2,[SP, #+8]
   \   00000088   ........           LDR      R2,??DataTable5_1
   \   0000008C   FC00DDE1           LDRSH    R0,[SP, #+12]
   \   00000090   04208DE5           STR      R2,[SP, #+4]
   \   00000094   0120A0E3           MOV      R2,#+1
   \   00000098   00208DE5           STR      R2,[SP, #+0]
   \   0000009C   F221DDE1           LDRSH    R2,[SP, #+18]
   \   000000A0   012042E0           SUB      R2,R2,R1
   \   000000A4   013082E2           ADD      R3,R2,#+1
   \   000000A8   F021DDE1           LDRSH    R2,[SP, #+16]
   \   000000AC   002042E0           SUB      R2,R2,R0
   \   000000B0   012082E2           ADD      R2,R2,#+1
   \   000000B4   ........           BL       GUI_MEMDEV_CreateFixed
   \   000000B8   0080B0E1           MOVS     R8,R0
    403                if (hMemDst) {
   \   000000BC   2400000A           BEQ      ??_FadeWindow_2
    404                  //
    405                  // Animation
    406                  //
    407                  TimeStart = GUI_GetTime();
   \   000000C0   ........           BL       GUI_GetTime
   \   000000C4   00A0A0E1           MOV      R10,R0
    408                  GUI_X_Delay(TIME_PER_FRAME);
   \   000000C8   2800A0E3           MOV      R0,#+40
   \   000000CC   ........           BL       GUI_X_Delay
    409                  do {
    410                    //
    411                    // Calculate elapsed time
    412                    //
    413                    TimeNow  = GUI_GetTime();
   \                     ??_FadeWindow_3:
   \   000000D0   ........           BL       GUI_GetTime
   \   000000D4   00B0A0E1           MOV      R11,R0
    414                    TimeDiff = TimeNow - TimeStart;
   \   000000D8   0A004BE0           SUB      R0,R11,R10
    415                    TimeDiff = (TimeDiff > Period) ? Period : TimeDiff;
   \   000000DC   0410A0E1           MOV      R1,R4
   \   000000E0   000054E1           CMP      R4,R0
   \   000000E4   0010A0C1           MOVGT    R1,R0
    416                    //
    417                    // Calculate parameters
    418                    //
    419                    Intens = pfCalcPara(Period, TimeDiff);
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   18209DE5           LDR      R2,[SP, #+24]
   \   000000F0   32FF2FE1           BLX      R2
    420                    //
    421                    // Fade device
    422                    //
    423                    GUI_MEMDEV__FadeDeviceEx(hMemWin, hMemBk, hMemDst, Intens, xPosWin, yPosWin);
   \   000000F4   FF3000E2           AND      R3,R0,#0xFF
   \   000000F8   04708DE5           STR      R7,[SP, #+4]
   \   000000FC   00608DE5           STR      R6,[SP, #+0]
   \   00000100   0820A0E1           MOV      R2,R8
   \   00000104   0910A0E1           MOV      R1,R9
   \   00000108   0500A0E1           MOV      R0,R5
   \   0000010C   ........           BL       GUI_MEMDEV__FadeDeviceEx
    424                    //
    425                    // Draw memory device without window manager
    426                    //
    427                    WM_Deactivate();
   \   00000110   ........           BL       WM_Deactivate
    428                    GUI_MEMDEV_Write(hMemDst);
   \   00000114   0800A0E1           MOV      R0,R8
   \   00000118   ........           BL       GUI_MEMDEV_Write
    429                    WM_Activate();
   \   0000011C   ........           BL       WM_Activate
    430                    //
    431                    // Make sure not more than 25 frames per second are drawn
    432                    //
    433                    TimeUsed = GUI_GetTime() - TimeNow;
   \   00000120   ........           BL       GUI_GetTime
   \   00000124   0B0040E0           SUB      R0,R0,R11
    434                    if (TimeUsed < TIME_PER_FRAME) {
   \   00000128   280050E3           CMP      R0,#+40
   \   0000012C   010000AA           BGE      ??_FadeWindow_4
    435                      GUI_X_Delay(TIME_PER_FRAME - TimeUsed);
   \   00000130   280060E2           RSB      R0,R0,#+40
   \   00000134   ........           BL       GUI_X_Delay
    436                    }
    437                  } while (TimeNow < (TimeStart + Period));
   \                     ??_FadeWindow_4:
   \   00000138   0A0084E0           ADD      R0,R4,R10
   \   0000013C   00005BE1           CMP      R11,R0
   \   00000140   E2FFFFBA           BLT      ??_FadeWindow_3
    438                  //
    439                  // Remove temporary memory devices
    440                  //
    441                  GUI_MEMDEV_Delete(hMemDst);
   \   00000144   0800A0E1           MOV      R0,R8
   \   00000148   ........           BL       GUI_MEMDEV_Delete
    442                  r = 0;
   \   0000014C   0040A0E3           MOV      R4,#+0
   \   00000150   000000EA           B        ??_FadeWindow_5
    443                } else {
    444                  r = 1;
   \                     ??_FadeWindow_2:
   \   00000154   0140A0E3           MOV      R4,#+1
    445                }
    446                GUI_MEMDEV_Delete(hMemBk);
   \                     ??_FadeWindow_5:
   \   00000158   0900A0E1           MOV      R0,R9
   \   0000015C   ........           BL       GUI_MEMDEV_Delete
   \   00000160   000000EA           B        ??_FadeWindow_6
    447              } else {
    448                r = 1;
   \                     ??_FadeWindow_1:
   \   00000164   0140A0E3           MOV      R4,#+1
    449              }
    450              GUI_MEMDEV_Delete(hMemWin);
   \                     ??_FadeWindow_6:
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       GUI_MEMDEV_Delete
   \   00000170   000000EA           B        ??_FadeWindow_7
    451            } else {
    452              r = 1;
   \                     ??_FadeWindow_0:
   \   00000174   0140A0E3           MOV      R4,#+1
    453            }
    454            //
    455            // Remove devices
    456            //
    457            _RemoveStaticDevice(WM_HBKWIN);
   \                     ??_FadeWindow_7:
   \   00000178   ........           BL       WM_GetDesktopWindow
   \   0000017C   0050B0E1           MOVS     R5,R0
   \   00000180   1800000A           BEQ      ??_FadeWindow_8
   \   00000184   ........           BL       GUI_ALLOC_LockH
   \   00000188   0060A0E1           MOV      R6,R0
   \   0000018C   280096E5           LDR      R0,[R6, #+40]
   \   00000190   400B10E3           TST      R0,#0x10000
   \   00000194   0800000A           BEQ      ??_FadeWindow_9
   \   00000198   240096E5           LDR      R0,[R6, #+36]
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   0200000A           BEQ      ??_FadeWindow_10
   \   000001A4   ........           BL       GUI_MEMDEV_Delete
   \   000001A8   0000A0E3           MOV      R0,#+0
   \   000001AC   240086E5           STR      R0,[R6, #+36]
   \                     ??_FadeWindow_10:
   \   000001B0   280096E5           LDR      R0,[R6, #+40]
   \   000001B4   400BC0E3           BIC      R0,R0,#0x10000
   \   000001B8   280086E5           STR      R0,[R6, #+40]
   \                     ??_FadeWindow_9:
   \   000001BC   ........           BL       GUI_ALLOC_UnlockH
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   ........           BL       WM_GetFirstChild
   \   000001C8   0050B0E1           MOVS     R5,R0
   \   000001CC   0500000A           BEQ      ??_FadeWindow_8
   \                     ??_FadeWindow_11:
   \   000001D0   0500A0E1           MOV      R0,R5
   \   000001D4   ........           BL       _RemoveStaticDevice
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   ........           BL       WM_GetNextSibling
   \   000001E0   0050B0E1           MOVS     R5,R0
   \   000001E4   F9FFFF1A           BNE      ??_FadeWindow_11
    458            //
    459            // This is the end...
    460            //
    461            return r;
   \                     ??_FadeWindow_8:
   \   000001E8   0400A0E1           MOV      R0,R4
   \   000001EC   1CD08DE2           ADD      SP,SP,#+28
   \   000001F0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    462          }
    463          
    464          /*********************************************************************
    465          *
    466          *       Public code
    467          *
    468          **********************************************************************
    469          */
    470          /*********************************************************************
    471          *
    472          *       GUI_MEMDEV_MoveInWindow
    473          */

   \                                 In section .text, align 4, keep-with-next
    474          int GUI_MEMDEV_MoveInWindow(WM_HWIN hWin, int x, int y, int a180, int Period) {
   \                     GUI_MEMDEV_MoveInWindow:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   20809DE5           LDR      R8,[SP, #+32]
    475            int r;
    476          
    477            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    478            //
    479            // Move window
    480            //
    481            r = _MoveWindow(hWin, x, y, a180, Period, _CalcParaMoveIn);
   \   00000020   ........           LDR      R0,??DataTable5_2
   \   00000024   00808DE5           STR      R8,[SP, #+0]
   \   00000028   04008DE5           STR      R0,[SP, #+4]
   \   0000002C   0730A0E1           MOV      R3,R7
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       _MoveWindow
   \   00000040   0050A0E1           MOV      R5,R0
    482            //
    483            // Make visible
    484            //
    485            WM_ShowWindow(hWin);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       WM_ShowWindow
    486            WM_ValidateWindow(WM_HBKWIN);
   \   0000004C   ........           BL       WM_GetDesktopWindow
   \   00000050   ........           BL       WM_ValidateWindow
    487            WM_ValidateWindow(hWin);
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WM_ValidateWindow
    488            //
    489            // That's all
    490            //
    491            GUI_UNLOCK();
   \   0000005C   ........           BL       GUI_Unlock
    492            return r;
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   08D08DE2           ADD      SP,SP,#+8
   \   00000068   F081BDE8           POP      {R4-R8,PC}       ;; return
    493          }
    494          
    495          /*********************************************************************
    496          *
    497          *       GUI_MEMDEV_MoveOutWindow
    498          */

   \                                 In section .text, align 4, keep-with-next
    499          int GUI_MEMDEV_MoveOutWindow(WM_HWIN hWin, int x, int y, int a180, int Period) {
   \                     GUI_MEMDEV_MoveOutWindow:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   20809DE5           LDR      R8,[SP, #+32]
    500            int r;
    501          
    502            GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
    503            //
    504            // Move window
    505            //
    506            r = _MoveWindow(hWin, x, y, a180, Period, _CalcParaMoveOut);
   \   00000020   ........           LDR      R0,??DataTable5_3
   \   00000024   00808DE5           STR      R8,[SP, #+0]
   \   00000028   04008DE5           STR      R0,[SP, #+4]
   \   0000002C   0730A0E1           MOV      R3,R7
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       _MoveWindow
   \   00000040   0050A0E1           MOV      R5,R0
    507            //
    508            // Hide window
    509            //
    510            WM_HideWindow(hWin);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       WM_HideWindow
    511            WM_ValidateWindow(WM_HBKWIN);
   \   0000004C   ........           BL       WM_GetDesktopWindow
   \   00000050   ........           BL       WM_ValidateWindow
    512            //
    513            // That's all
    514            //
    515            GUI_UNLOCK();
   \   00000054   ........           BL       GUI_Unlock
    516            return r;
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   08D08DE2           ADD      SP,SP,#+8
   \   00000060   F081BDE8           POP      {R4-R8,PC}       ;; return
    517          }
    518          
    519          /*********************************************************************
    520          *
    521          *       GUI_MEMDEV_FadeInWindow
    522          */

   \                                 In section .text, align 4, keep-with-next
    523          int GUI_MEMDEV_FadeInWindow(WM_HWIN hWin, int Period) {
   \                     GUI_MEMDEV_FadeInWindow:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    524            int r;
    525          
    526            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    527            //
    528            // Fade window
    529            //
    530            r = _FadeWindow(hWin, Period, _CalcParaFadeIn);
   \   00000014   ........           LDR      R2,??DataTable5_4
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       _FadeWindow
   \   00000024   0050A0E1           MOV      R5,R0
    531            //
    532            // Make visible
    533            //
    534            WM_ShowWindow(hWin);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       WM_ShowWindow
    535            WM_ValidateWindow(WM_HBKWIN);
   \   00000030   ........           BL       WM_GetDesktopWindow
   \   00000034   ........           BL       WM_ValidateWindow
    536            //
    537            // That's all
    538            //
    539            GUI_UNLOCK();
   \   00000038   ........           BL       GUI_Unlock
    540            return r;
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
    541          }
    542          
    543          /*********************************************************************
    544          *
    545          *       GUI_MEMDEV_FadeOutWindow
    546          */

   \                                 In section .text, align 4, keep-with-next
    547          int GUI_MEMDEV_FadeOutWindow(WM_HWIN hWin, int Period) {
   \                     GUI_MEMDEV_FadeOutWindow:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    548            int r;
    549          
    550            GUI_LOCK();
   \   00000010   ........           BL       GUI_Lock
    551            //
    552            // Fade window
    553            //
    554            r = _FadeWindow(hWin, Period, _CalcParaFadeOut);
   \   00000014   ........           LDR      R2,??DataTable5_5
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       _FadeWindow
   \   00000024   0050A0E1           MOV      R5,R0
    555            //
    556            // Hide window
    557            //
    558            WM_HideWindow(hWin);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       WM_HideWindow
    559            WM_ValidateWindow(WM_HBKWIN);
   \   00000030   ........           BL       WM_GetDesktopWindow
   \   00000034   ........           BL       WM_ValidateWindow
    560            //
    561            // That's all
    562            //
    563            GUI_UNLOCK();
   \   00000038   ........           BL       GUI_Unlock
    564            return r;
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
    565          }
    566          
    567          #endif /* WM_SUPPORT_STATIC_MEMDEV */
    568          
    569          void GUIDEV_MoveAndFadeWin_C(void);

   \                                 In section .text, align 4, keep-with-next
    570          void GUIDEV_MoveAndFadeWin_C(void) {} /* avoid empty object files */
   \                     GUIDEV_MoveAndFadeWin_C:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     LCD_API_ColorConv_888

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   ........           DC32     _CalcParaMoveIn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   ........           DC32     _CalcParaMoveOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   ........           DC32     _CalcParaFadeIn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   ........           DC32     _CalcParaFadeOut
    571          
    572          #else
    573          
    574          void GUIDEV_MoveAndFadeWin_C(void);
    575          void GUIDEV_MoveAndFadeWin_C(void) {} /* avoid empty object files */
    576          
    577          #endif /* (GUI_SUPPORT_MEMDEV && GUI_WINSUPPORT) */
    578          
    579          /*************************** end of file ****************************/
    580          
    581          

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     GUIDEV_MoveAndFadeWin_C       0
     GUI_MEMDEV_FadeInWindow      16
     GUI_MEMDEV_FadeOutWindow     16
     GUI_MEMDEV_MoveInWindow      32
     GUI_MEMDEV_MoveOutWindow     32
     _CalcParaFadeIn               4
     _CalcParaFadeOut              4
     _CalcParaMoveIn              28
     _CalcParaMoveOut             24
     _FadeWindow                  64
     _MoveWindow                  96
     _RemoveStaticDevice          16


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     _CalcParaMoveIn           132
     _CalcParaMoveOut          120
     _RemoveStaticDevice       124
     _MoveWindow               632
     _CalcParaFadeIn            32
     _CalcParaFadeOut           32
     _FadeWindow               500
     GUI_MEMDEV_MoveInWindow   108
     GUI_MEMDEV_MoveOutWindow  100
     GUI_MEMDEV_FadeInWindow    72
     GUI_MEMDEV_FadeOutWindow   72
     GUIDEV_MoveAndFadeWin_C     4
     ??DataTable5                4
     ??DataTable5_1              4
     ??DataTable5_2              4
     ??DataTable5_3              4
     ??DataTable5_4              4
     ??DataTable5_5              4

 
 1 952 bytes in section .text
 
 1 952 bytes of CODE memory

Errors: none
Warnings: none
