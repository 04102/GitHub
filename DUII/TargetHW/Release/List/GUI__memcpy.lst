###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:11:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__memcpy.c                       #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__memcpy.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI__memcpy.lst            #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI__memcpy.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__memcpy.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__memcpy.c
     19          Purpose     : Implementation of said function
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUI__memcpy
     34          *
     35          * Purpose:
     36          *  Replacement for the memset function. The advantage is high speed
     37          *  on all systems (sometime up to 10 times as fast as the one
     38          *  in the library)
     39          *  Main idea is to write int-wise.
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void GUI__memcpy(void * pDest, const void * pSrc, int NumBytes) {
     42            char * pd;
     43            const char * ps;
     44            pd = (char*)pDest;
     45            ps = (const char*)pSrc;
     46            /*
     47            * Copy words if possible
     48            */
     49            if ((((U32)ps & 3) == 0) && (((U32)pd & 3) == 0)) {
   \                     GUI__memcpy:
   \   00000000   030011E3           TST      R1,#0x3
   \   00000004   03001003           TSTEQ    R0,#0x3
   \   00000008   1400001A           BNE      ??GUI__memcpy_0
   \   0000000C   4231A0E1           ASR      R3,R2,#+2
   \   00000010   040053E3           CMP      R3,#+4
   \   00000014   0A00003A           BCC      ??GUI__memcpy_1
     50              unsigned NumWords = NumBytes >> 2;
     51              while (NumWords >= 4) {
     52                *(int*)pd = *(const int*)ps;
   \                     ??GUI__memcpy_2:
   \   00000018   04C091E4           LDR      R12,[R1], #+4
     53                pd += 4;
     54                ps += 4;
     55                *(int*)pd = *(const int*)ps;
     56                pd += 4;
     57                ps += 4;
     58                *(int*)pd = *(const int*)ps;
     59                pd += 4;
     60                ps += 4;
     61                *(int*)pd = *(const int*)ps;
     62                pd += 4;
     63                ps += 4;
     64                NumWords -= 4;
   \   0000001C   043043E2           SUB      R3,R3,#+4
   \   00000020   04C080E4           STR      R12,[R0], #+4
   \   00000024   04C091E4           LDR      R12,[R1], #+4
     65              }
   \   00000028   040053E3           CMP      R3,#+4
   \   0000002C   04C080E4           STR      R12,[R0], #+4
   \   00000030   04C091E4           LDR      R12,[R1], #+4
   \   00000034   04C080E4           STR      R12,[R0], #+4
   \   00000038   04C091E4           LDR      R12,[R1], #+4
   \   0000003C   04C080E4           STR      R12,[R0], #+4
   \   00000040   F4FFFF2A           BCS      ??GUI__memcpy_2
     66              if (NumWords) {
   \                     ??GUI__memcpy_1:
   \   00000044   000053E3           CMP      R3,#+0
   \   00000048   0300000A           BEQ      ??GUI__memcpy_3
     67                do {
     68                  *(int*)pd = *(const int*)ps;
   \                     ??GUI__memcpy_4:
   \   0000004C   04C091E4           LDR      R12,[R1], #+4
     69                  pd += 4;
     70                  ps += 4;
     71                } while (--NumWords);
   \   00000050   013053E2           SUBS     R3,R3,#+1
   \   00000054   04C080E4           STR      R12,[R0], #+4
   \   00000058   FBFFFF1A           BNE      ??GUI__memcpy_4
     72              }
     73              NumBytes &= 3;
   \                     ??GUI__memcpy_3:
   \   0000005C   032002E2           AND      R2,R2,#0x3
     74            }
     75            /*
     76            * Copy halfwords if possible
     77            */
     78            if ((((U32)ps & 1) == 0) && (((U32)pd & 1) == 0)) {
   \                     ??GUI__memcpy_0:
   \   00000060   013001E2           AND      R3,R1,#0x1
   \   00000064   01C000E2           AND      R12,R0,#0x1
   \   00000068   03309CE1           ORRS     R3,R12,R3
   \   0000006C   1400001A           BNE      ??GUI__memcpy_5
   \   00000070   C230A0E1           ASR      R3,R2,#+1
   \   00000074   040053E3           CMP      R3,#+4
   \   00000078   0A00003A           BCC      ??GUI__memcpy_6
     79              unsigned NumHWords = NumBytes >> 1;
     80              while (NumHWords >= 4) {
     81                *(short*)pd = *(const short*)ps;
   \                     ??GUI__memcpy_7:
   \   0000007C   F2C0D1E0           LDRSH    R12,[R1], #+2
     82                pd += 2;
     83                ps += 2;
     84                *(short*)pd = *(const short*)ps;
     85                pd += 2;
     86                ps += 2;
     87                *(short*)pd = *(const short*)ps;
     88                pd += 2;
     89                ps += 2;
     90                *(short*)pd = *(const short*)ps;
     91                pd += 2;
     92                ps += 2;
     93                NumHWords -= 4;
   \   00000080   043043E2           SUB      R3,R3,#+4
     94              }
   \   00000084   040053E3           CMP      R3,#+4
   \   00000088   B2C0C0E0           STRH     R12,[R0], #+2
   \   0000008C   F2C0D1E0           LDRSH    R12,[R1], #+2
   \   00000090   B2C0C0E0           STRH     R12,[R0], #+2
   \   00000094   F2C0D1E0           LDRSH    R12,[R1], #+2
   \   00000098   B2C0C0E0           STRH     R12,[R0], #+2
   \   0000009C   F2C0D1E0           LDRSH    R12,[R1], #+2
   \   000000A0   B2C0C0E0           STRH     R12,[R0], #+2
   \   000000A4   F4FFFF2A           BCS      ??GUI__memcpy_7
     95              if (NumHWords) {
   \                     ??GUI__memcpy_6:
   \   000000A8   000053E3           CMP      R3,#+0
   \   000000AC   0300000A           BEQ      ??GUI__memcpy_8
     96                do {
     97                  *(short*)pd = *(const short*)ps;
   \                     ??GUI__memcpy_9:
   \   000000B0   F2C0D1E0           LDRSH    R12,[R1], #+2
     98                  pd += 2;
     99                  ps += 2;
    100                } while (--NumHWords);
   \   000000B4   013053E2           SUBS     R3,R3,#+1
   \   000000B8   B2C0C0E0           STRH     R12,[R0], #+2
   \   000000BC   FBFFFF1A           BNE      ??GUI__memcpy_9
    101              }
    102              NumBytes &= 1;
   \                     ??GUI__memcpy_8:
   \   000000C0   012002E2           AND      R2,R2,#0x1
    103            }
    104            /*
    105            * Copy bytes, bulk
    106            */
    107            while (NumBytes >= 4) {
   \                     ??GUI__memcpy_5:
   \   000000C4   040052E3           CMP      R2,#+4
   \   000000C8   0A0000BA           BLT      ??GUI__memcpy_10
    108              *(char*)pd++ = *(const char*)ps++;
   \                     ??GUI__memcpy_11:
   \   000000CC   0130D1E4           LDRB     R3,[R1], #+1
    109              *(char*)pd++ = *(const char*)ps++;
    110              *(char*)pd++ = *(const char*)ps++;
    111              *(char*)pd++ = *(const char*)ps++;
    112              NumBytes -= 4;
   \   000000D0   042042E2           SUB      R2,R2,#+4
   \   000000D4   040052E3           CMP      R2,#+4
   \   000000D8   0130C0E4           STRB     R3,[R0], #+1
   \   000000DC   0130D1E4           LDRB     R3,[R1], #+1
   \   000000E0   0130C0E4           STRB     R3,[R0], #+1
   \   000000E4   0130D1E4           LDRB     R3,[R1], #+1
   \   000000E8   0130C0E4           STRB     R3,[R0], #+1
   \   000000EC   0130D1E4           LDRB     R3,[R1], #+1
   \   000000F0   0130C0E4           STRB     R3,[R0], #+1
   \   000000F4   F4FFFFAA           BGE      ??GUI__memcpy_11
    113            };
    114            /*
    115            * Copy bytes, one at a time
    116            */
    117            if (NumBytes) {
   \                     ??GUI__memcpy_10:
   \   000000F8   000052E3           CMP      R2,#+0
   \   000000FC   0300000A           BEQ      ??GUI__memcpy_12
    118              do {
    119                *(char*)pd++ = *(const char*)ps++;
   \                     ??GUI__memcpy_13:
   \   00000100   0130D1E4           LDRB     R3,[R1], #+1
    120              } while (--NumBytes);
   \   00000104   012052E2           SUBS     R2,R2,#+1
   \   00000108   0130C0E4           STRB     R3,[R0], #+1
   \   0000010C   FBFFFF1A           BNE      ??GUI__memcpy_13
    121            };
    122          }
   \                     ??GUI__memcpy_12:
   \   00000110   1EFF2FE1           BX       LR               ;; return
    123          
    124          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function    .cstack
     --------    -------
     GUI__memcpy      0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GUI__memcpy     276

 
 276 bytes in section .text
 
 276 bytes of CODE memory

Errors: none
Warnings: none
