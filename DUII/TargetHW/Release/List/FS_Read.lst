###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:10:40 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\FS\FS_Read.c                            #
#    Command line =  C:\DUII\TargetHW\FS\FS_Read.c -D DEBUG=1 -D              #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\FS_Read.lst                #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\FS_Read.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\FS\FS_Read.c
      1          /*********************************************************************
      2          *                SEGGER MICROCONTROLLER GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 2003-2010     SEGGER Microcontroller GmbH & Co KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          **** emFile file system for embedded applications ****
     13          emFile is protected by international copyright laws. Knowledge of the
     14          source code may not be used to write a similar product. This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : FS_Read.c
     19          Purpose     : Implementation of FS_Read
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          /*********************************************************************
     24          *
     25          *       #include Section
     26          *
     27          **********************************************************************
     28          */
     29          
     30          #include <stdio.h>
     31          #include "FS_Int.h"
     32          #include "FS_OS.h"
     33          
     34          /*********************************************************************
     35          *
     36          *       Public code
     37          *
     38          **********************************************************************
     39          */
     40          
     41          /*********************************************************************
     42          *
     43          *       FS__Read
     44          *
     45          *  Function description:
     46          *    Internal version of FS_Read.
     47          *    Reads data from a file.
     48          *
     49          *  Parameters:
     50          *    pData       - Pointer to a buffer to receive the data
     51          *    NumBytes    - Number of bytes to be read
     52          *    pFile       - Pointer to a FS_FILE data structure.
     53          *  
     54          *  Return value:
     55          *    Number of bytes read.
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          U32 FS__Read(FS_FILE *pFile, void *pData, U32 NumBytes) {
   \                     FS__Read:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     58            char InUse;
     59            U32 NumBytesRead;
     60            FS_FILE_OBJ * pFileObj;
     61          
     62            if (NumBytes == 0) {
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0100001A           BNE      ??FS__Read_0
     63              return 0;
   \                     ??FS__Read_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C0000EA           B        ??FS__Read_2
     64            }
     65            if (pFile == NULL) {
   \                     ??FS__Read_0:
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0A00000A           BEQ      ??FS__Read_2
     66              return 0;  /* No pointer to a FS_FILE structure */
     67            }
     68            NumBytesRead = 0;
     69            //
     70            // Load file information
     71            //
     72            FS_LOCK_SYS();
     73            InUse   = pFile->InUse;
     74            pFileObj = pFile->pFileObj;
     75            FS_UNLOCK_SYS();
     76            if ((InUse == 0) || (pFileObj == (FS_FILE_OBJ*)NULL)) {
   \   00000020   0A30D0E5           LDRB     R3,[R0, #+10]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   00309015           LDRNE    R3,[R0, #+0]
   \   0000002C   00005313           CMPNE    R3,#+0
   \   00000030   F6FFFF0A           BEQ      ??FS__Read_1
     77              FS_DEBUG_ERROROUT((FS_MTYPE_API, "Application error: FS__Read: Invalid file handle.\n"));
     78              return 0;
     79            }
     80            //
     81            // Lock driver before performing operation
     82            //
     83            FS_LOCK_DRIVER(&pFileObj->pVolume->Partition.Device);
     84            //
     85            // Multi-tasking environments with per-driver-locking:
     86            // Make sure that relevant file information has not changed (an other task may have closed the file, unmounted the volume etc.)
     87            // If it has, no action is performed.
     88            //
     89          #if FS_OS_LOCK_PER_DRIVER
     90            FS_LOCK_SYS();
     91            if (pFileObj != pFile->pFileObj) {
     92              InUse = 0;
     93            }
     94            if (pFile->InUse == 0) {
     95              InUse = 0;
     96            }
     97            FS_UNLOCK_SYS();
     98            if (InUse == 0) {      // Let's make sure the file is still valid
     99              FS_DEBUG_ERROROUT((FS_MTYPE_API,"Application error: File handle has been invalidated by other thread during wait"));
    100            } else
    101          #endif
    102            //
    103            // All checks and locking operations completed. Call the File system (FAT/EFS) layer.
    104            //
    105            {
    106              if ((pFile->AccessFlags & FS_FILE_ACCESS_FLAG_R) == 0) {
   \   00000034   0B30D0E5           LDRB     R3,[R0, #+11]
   \   00000038   080013E3           TST      R3,#0x8
    107                pFile->Error = FS_ERR_WRITEONLY; /* File open mode does not allow read ops */
   \   0000003C   0410E003           MVNEQ    R1,#+4
   \   00000040   B810C001           STRHEQ   R1,[R0, #+8]
    108                NumBytesRead = 0;
   \   00000044   F1FFFF0A           BEQ      ??FS__Read_1
    109              } else {
    110                NumBytesRead = FS_FREAD(pFile, pData, NumBytes);
   \   00000048   ........           BL       FS_FAT_Read
    111              }
    112            }
    113            FS_UNLOCK_DRIVER(&pFileObj->pVolume->Partition.Device);
    114            return NumBytesRead;
   \                     ??FS__Read_2:
   \   0000004C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000050   0080BDE8           POP      {PC}             ;; return
    115          }
    116          
    117          /*********************************************************************
    118          *
    119          *       FS_Read
    120          *
    121          *  Function description:
    122          *    Read data from a file.
    123          *
    124          *  Parameters:
    125          *    pData       - Pointer to a buffer to receive the data
    126          *    NumBytes    - Number of bytes to be read
    127          *    pFile       - Pointer to a FS_FILE data structure.
    128          *  
    129          *  Return value:
    130          *    Number of bytes read.
    131          */

   \                                 In section .text, align 4, keep-with-next
    132          U32 FS_Read(FS_FILE *pFile, void *pData, U32 NumBytes) {
   \                     FS_Read:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    133            U32 i;
    134          
    135            FS_LOCK();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       FS_OS_Lock
    136            i = FS__Read(pFile, pData, NumBytes);
   \   00000018   000056E3           CMP      R6,#+0
   \   0000001C   1100000A           BEQ      ??FS_Read_0
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   1000000A           BEQ      ??FS_Read_1
   \   00000028   0A00D4E5           LDRB     R0,[R4, #+10]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   00009415           LDRNE    R0,[R4, #+0]
   \   00000034   00005013           CMPNE    R0,#+0
   \   00000038   0A00000A           BEQ      ??FS_Read_0
   \   0000003C   0B00D4E5           LDRB     R0,[R4, #+11]
   \   00000040   080010E3           TST      R0,#0x8
   \   00000044   0500000A           BEQ      ??FS_Read_2
   \   00000048   0620A0E1           MOV      R2,R6
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       FS_FAT_Read
   \   00000058   0040A0E1           MOV      R4,R0
   \   0000005C   020000EA           B        ??FS_Read_1
   \                     ??FS_Read_2:
   \   00000060   0400E0E3           MVN      R0,#+4
   \   00000064   B800C4E1           STRH     R0,[R4, #+8]
   \                     ??FS_Read_0:
   \   00000068   0040A0E3           MOV      R4,#+0
    137            FS_UNLOCK();
   \                     ??FS_Read_1:
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   ........           BL       FS_OS_Unlock
    138            return i;
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
    139          }
    140          
    141          
    142          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     FS_Read      16
     FS__Read      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     FS__Read         84
     FS_Read         124

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
