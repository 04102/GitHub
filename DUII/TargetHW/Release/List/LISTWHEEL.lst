###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:13:22 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTWHEEL.c                         #
#    Command line =  C:\DUII\TargetHW\GUI\LISTWHEEL.c -D DEBUG=1 -D           #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTWHEEL.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTWHEEL.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTWHEEL.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTWHEEL.c
     19          Purpose     : Implementation of listwheel widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_ARRAY.h"
     26          #include "LISTWHEEL_Private.h"
     27          
     28          #if GUI_WINSUPPORT
     29          
     30          /*********************************************************************
     31          *
     32          *       Private config defaults
     33          *
     34          **********************************************************************
     35          */
     36          /* Define default fonts */
     37          #ifndef LISTWHEEL_FONT_DEFAULT
     38            #if   WIDGET_USE_SCHEME_SMALL
     39              #define LISTWHEEL_FONT_DEFAULT &GUI_Font13_1
     40            #elif WIDGET_USE_SCHEME_MEDIUM
     41              #define LISTWHEEL_FONT_DEFAULT &GUI_Font16_1
     42            #elif WIDGET_USE_SCHEME_LARGE
     43              #define LISTWHEEL_FONT_DEFAULT &GUI_Font24_1
     44            #endif
     45          #endif
     46          
     47          /* Define colors */
     48          #ifndef   LISTWHEEL_BKCOLOR0_DEFAULT
     49            #define LISTWHEEL_BKCOLOR0_DEFAULT GUI_WHITE      /* Not selected */
     50          #endif
     51          #ifndef   LISTWHEEL_BKCOLOR1_DEFAULT
     52            #define LISTWHEEL_BKCOLOR1_DEFAULT GUI_WHITE      /* Selected */
     53          #endif
     54          #ifndef   LISTWHEEL_TEXTCOLOR0_DEFAULT
     55            #define LISTWHEEL_TEXTCOLOR0_DEFAULT GUI_BLACK    /* Not selected */
     56          #endif
     57          #ifndef   LISTWHEEL_TEXTCOLOR1_DEFAULT
     58            #define LISTWHEEL_TEXTCOLOR1_DEFAULT GUI_BLUE     /* Selected */
     59          #endif
     60          #ifndef   LISTWHEEL_TEXTALIGN_DEFAULT
     61            #define LISTWHEEL_TEXTALIGN_DEFAULT GUI_TA_LEFT   /* Left aligned */
     62          #endif
     63          
     64          #define TIMER_PERIOD 25
     65          
     66          /*********************************************************************
     67          *
     68          *       Static data
     69          *
     70          **********************************************************************
     71          */

   \                                 In section .data, align 4
     72          LISTWHEEL_PROPS LISTWHEEL_DefaultProps = {
   \                     LISTWHEEL_DefaultProps:
   \   00000000   ........FFFF       DC32 GUI_Font13_1, 16777215, 16777215, 0, 16711680
   \              FF00FFFFFF00
   \              000000000000
   \              FF00        
   \   00000014   0000               DC16 0
   \   00000016   0000               DC8 0, 0
     73            LISTWHEEL_FONT_DEFAULT,
     74            {
     75              LISTWHEEL_BKCOLOR0_DEFAULT,
     76              LISTWHEEL_BKCOLOR1_DEFAULT,
     77            },
     78            {
     79              LISTWHEEL_TEXTCOLOR0_DEFAULT,
     80              LISTWHEEL_TEXTCOLOR1_DEFAULT,
     81            },
     82            LISTWHEEL_TEXTALIGN_DEFAULT
     83          };
     84          
     85          /*********************************************************************
     86          *
     87          *       Static code
     88          *
     89          **********************************************************************
     90          */
     91          /*********************************************************************
     92          *
     93          *       _RecalcDatasizeY
     94          *
     95          * Purpose:
     96          *   Recalculates the data size in Y direction
     97          */
     98          static void _RecalcDatasizeY(LISTWHEEL_Handle hObj) {
     99            LISTWHEEL_OBJ * pObj;
    100            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
    101            int NumItems, ySizeData = 0, ySizeItem;
    102            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
    103            LISTWHEEL_ITEM * pItem;
    104            GUI_ARRAY ItemArray;
    105          
    106            pObj = LISTWHEEL_LOCK_H(hObj); {
    107              pfOwnerDraw = pObj->pfOwnerDraw;
    108              NumItems    = GUI_ARRAY_GetNumItems(pObj->ItemArray);
    109              ItemArray   = pObj->ItemArray;
    110            } GUI_UNLOCK_H(pObj);
    111            ItemInfo.Cmd  = WIDGET_ITEM_GET_YSIZE;
    112            ItemInfo.hWin = hObj;
    113            while (NumItems--) {
    114              pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, NumItems); {
    115                ItemInfo.p = pItem->pData;
    116                //
    117                // If there is no custom data use ItemInfo.p for passing the item handle
    118                //
    119                if (ItemInfo.p == NULL) {
    120                  ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, NumItems);
    121                }
    122              } GUI_UNLOCK_H(pItem);
    123              //
    124              // Get size of item
    125              //
    126              ySizeItem = pfOwnerDraw(&ItemInfo);
    127              ySizeData += ySizeItem;
    128            }
    129            //
    130            // Store data size
    131            //
    132            pObj = LISTWHEEL_LOCK_H(hObj); {
    133              pObj->ySizeData = ySizeData;
    134            } GUI_UNLOCK_H(pObj);
    135          }
    136          
    137          /*********************************************************************
    138          *
    139          *       _OnPaint
    140          *
    141          * Purpose:
    142          *   Draws the widget
    143          */

   \                                 In section .text, align 4, keep-with-next
    144          static void _OnPaint(LISTWHEEL_Handle hObj) {
   \                     _OnPaint:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
    145            const GUI_FONT GUI_UNI_PTR * pFont;
    146            int i, j, NumItems, xSizeItem, ySizeItem, xPos = 0, yPos = 0, Pos, ySizeData;
    147            
    148            LISTWHEEL_OBJ * pObj;
    149            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
    150            LISTWHEEL_ITEM * pItem;
    151            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
   \   00000008   08008DE2           ADD      R0,SP,#+8
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000020   0E10A0E8           STM      R0!,{R1-R3,R12}
    152            GUI_ARRAY ItemArray;
    153            GUI_RECT RectInside;
    154          
    155            //
    156            // Get widget properties
    157            //
    158            WM_GetInsideRectEx(hObj, &RectInside);
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   30009DE5           LDR      R0,[SP, #+48]
   \   0000002C   ........           BL       WM_GetInsideRectEx
    159            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000030   30009DE5           LDR      R0,[SP, #+48]
   \   00000034   ........           BL       GUI_ALLOC_LockH
   \   00000038   0070A0E1           MOV      R7,R0
    160              pfOwnerDraw = pObj->pfOwnerDraw;
   \   0000003C   384097E5           LDR      R4,[R7, #+56]
    161              NumItems    = GUI_ARRAY_GetNumItems(pObj->ItemArray);
   \   00000040   340097E5           LDR      R0,[R7, #+52]
   \   00000044   ........           BL       GUI_ARRAY_GetNumItems
   \   00000048   28008DE5           STR      R0,[SP, #+40]
    162              ItemArray   = pObj->ItemArray;
   \   0000004C   345097E5           LDR      R5,[R7, #+52]
    163              Pos         = pObj->Pos;
   \   00000050   706097E5           LDR      R6,[R7, #+112]
    164              pFont       = pObj->Props.pFont;
   \   00000054   3C8097E5           LDR      R8,[R7, #+60]
    165              ySizeData   = pObj->ySizeData;
   \   00000058   807097E5           LDR      R7,[R7, #+128]
    166            } GUI_UNLOCK_H(pObj);
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
    167            if (ySizeData == 0) {
   \   00000060   000057E3           CMP      R7,#+0
   \   00000064   6200000A           BEQ      ??_OnPaint_0
    168              return; // Nothing to do
    169            }
    170            GUI_SetFont(pFont);
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       GUI_SetFont
    171            if (pfOwnerDraw) {
   \   00000070   000054E3           CMP      R4,#+0
   \   00000074   5E00000A           BEQ      ??_OnPaint_0
    172              ItemInfo.hWin = hObj;
   \   00000078   30109DE5           LDR      R1,[SP, #+48]
    173              //
    174              // Draw background
    175              //
    176              ItemInfo.Cmd       = WIDGET_ITEM_DRAW_BACKGROUND;
    177              ItemInfo.hWin      = hObj;
    178              ItemInfo.x0        = 0;
    179              ItemInfo.y0        = 0;
    180              ItemInfo.x1        = RectInside.x1;
    181              ItemInfo.y1        = RectInside.y1;
    182              pfOwnerDraw(&ItemInfo);
   \   0000007C   08008DE2           ADD      R0,SP,#+8
   \   00000080   08108DE5           STR      R1,[SP, #+8]
   \   00000084   0310A0E3           MOV      R1,#+3
   \   00000088   0C108DE5           STR      R1,[SP, #+12]
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   14108DE5           STR      R1,[SP, #+20]
   \   00000094   18108DE5           STR      R1,[SP, #+24]
   \   00000098   F410DDE1           LDRSH    R1,[SP, #+4]
   \   0000009C   1C108DE5           STR      R1,[SP, #+28]
   \   000000A0   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000000A4   20108DE5           STR      R1,[SP, #+32]
   \   000000A8   34FF2FE1           BLX      R4
    183              for (j = 0; j < 2; j++) {
   \   000000AC   28009DE5           LDR      R0,[SP, #+40]
   \   000000B0   0070A0E3           MOV      R7,#+0
   \   000000B4   0680A0E1           MOV      R8,R6
   \   000000B8   019040E2           SUB      R9,R0,#+1
   \                     ??_OnPaint_1:
   \   000000BC   00A0A0E3           MOV      R10,#+0
   \   000000C0   060000EA           B        ??_OnPaint_2
    184                xPos = 0;
    185                yPos = Pos;
   \                     ??_OnPaint_3:
   \   000000C4   0680A0E1           MOV      R8,R6
    186                i = j ? NumItems - 1 : 0;
   \   000000C8   000057E3           CMP      R7,#+0
   \   000000CC   FAFFFF0A           BEQ      ??_OnPaint_1
   \   000000D0   09A0A0E1           MOV      R10,R9
   \                     ??_OnPaint_4:
   \   000000D4   010057E3           CMP      R7,#+1
   \   000000D8   010056A3           CMPGE    R6,#+1
   \   000000DC   340000BA           BLT      ??_OnPaint_5
    187                while ((j == 0) || ((j > 0) && (Pos > 0))) {
    188                  //
    189                  // Get data pointer of item
    190                  //
    191                  pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, i); {
    192                    ItemInfo.p = pItem->pData;
   \                     ??_OnPaint_2:
   \   000000E0   0A10A0E1           MOV      R1,R10
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   24008DE5           STR      R0,[SP, #+36]
    193                    //
    194                    // If there is no custom data use ItemInfo.p for passing the item handle
    195                    //
    196                    if (ItemInfo.p == NULL) {
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0300001A           BNE      ??_OnPaint_6
    197                      ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, i);
   \   000000FC   0A10A0E1           MOV      R1,R10
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   ........           BL       GUI_ARRAY_GethItem
   \   00000108   24008DE5           STR      R0,[SP, #+36]
    198                    }
    199                  } GUI_UNLOCK_H(pItem);
   \                     ??_OnPaint_6:
   \   0000010C   ........           BL       GUI_ALLOC_UnlockH
    200                  //
    201                  // Get size of item
    202                  //
    203                  ItemInfo.Cmd = WIDGET_ITEM_GET_YSIZE;
   \   00000110   1910A0E3           MOV      R1,#+25
   \   00000114   0C108DE5           STR      R1,[SP, #+12]
    204                  ySizeItem    = pfOwnerDraw(&ItemInfo);
   \   00000118   08008DE2           ADD      R0,SP,#+8
   \   0000011C   34FF2FE1           BLX      R4
    205                  xSizeItem    = 0;
    206                  //
    207                  // Adjust position
    208                  //
    209                  if (j) {
    210                    xPos -= xSizeItem;
    211                    yPos -= ySizeItem;
    212                  }
    213                  //
    214                  // Use callback function for drawing operation
    215                  //
    216                  if (((xPos + xSizeItem) >= 0) || ((yPos + ySizeItem) >= 0)) {
    217                    ItemInfo.Cmd       = WIDGET_ITEM_DRAW;
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   0C108DE5           STR      R1,[SP, #+12]
    218                    ItemInfo.hWin      = hObj;
   \   00000128   30109DE5           LDR      R1,[SP, #+48]
   \   0000012C   00B0A0E1           MOV      R11,R0
   \   00000130   08108DE5           STR      R1,[SP, #+8]
   \   00000134   000057E3           CMP      R7,#+0
    219                    ItemInfo.ItemIndex = i;
    220                    ItemInfo.x0        = xPos;
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   0B804810           SUBNE    R8,R8,R11
   \   00000140   14108DE5           STR      R1,[SP, #+20]
    221                    ItemInfo.y0        = yPos;
    222                    ItemInfo.x1        = RectInside.x1;
   \   00000144   F410DDE1           LDRSH    R1,[SP, #+4]
    223                    ItemInfo.y1        = yPos + ySizeItem - 1;
   \   00000148   0B0088E0           ADD      R0,R8,R11
   \   0000014C   010040E2           SUB      R0,R0,#+1
   \   00000150   20008DE5           STR      R0,[SP, #+32]
   \   00000154   10A08DE5           STR      R10,[SP, #+16]
   \   00000158   18808DE5           STR      R8,[SP, #+24]
   \   0000015C   1C108DE5           STR      R1,[SP, #+28]
    224                    pfOwnerDraw(&ItemInfo);
   \   00000160   08008DE2           ADD      R0,SP,#+8
   \   00000164   34FF2FE1           BLX      R4
    225                  }
    226                  //
    227                  // Adjust position
    228                  //
    229                  if (j == 0) {
   \   00000168   000057E3           CMP      R7,#+0
   \   0000016C   0A00001A           BNE      ??_OnPaint_7
    230                    xPos += xSizeItem;
    231                    yPos += ySizeItem;
    232                  }
    233                  //
    234                  // Check if we are done
    235                  //
    236                  if (j) {
    237                    if ((xPos < 0) || (yPos < 0)) {
    238                      break;
    239                    }
    240                    if (i == 0) {
    241                      i = NumItems;
    242                    }
    243                    i--;
    244                  } else {
    245                    if (i == (NumItems - 1)) {
    246                      i = -1;
    247                    }
    248                    if ((xPos > RectInside.x1) || (yPos > RectInside.y1)) {
   \   00000170   F400DDE1           LDRSH    R0,[SP, #+4]
   \   00000174   09005AE1           CMP      R10,R9
   \   00000178   00A0E003           MVNEQ    R10,#+0
   \   0000017C   08808BE0           ADD      R8,R11,R8
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0A00004A           BMI      ??_OnPaint_5
   \   00000188   F600DDE1           LDRSH    R0,[SP, #+6]
   \   0000018C   080050E1           CMP      R0,R8
   \   00000190   070000BA           BLT      ??_OnPaint_5
    249                      break;
    250                    }
    251                    i++;
   \   00000194   01A08AE2           ADD      R10,R10,#+1
   \   00000198   D0FFFFEA           B        ??_OnPaint_2
    252                  }
   \                     ??_OnPaint_7:
   \   0000019C   000058E3           CMP      R8,#+0
   \   000001A0   0300004A           BMI      ??_OnPaint_5
   \   000001A4   00005AE3           CMP      R10,#+0
   \   000001A8   28A09D05           LDREQ    R10,[SP, #+40]
   \   000001AC   01A04AE2           SUB      R10,R10,#+1
   \   000001B0   C7FFFFEA           B        ??_OnPaint_4
    253                };
    254              }
   \                     ??_OnPaint_5:
   \   000001B4   017087E2           ADD      R7,R7,#+1
   \   000001B8   020057E3           CMP      R7,#+2
   \   000001BC   C0FFFFBA           BLT      ??_OnPaint_3
    255              //
    256              // Draw overlay
    257              //
    258              ItemInfo.Cmd       = WIDGET_ITEM_DRAW_OVERLAY;
   \   000001C0   0B10A0E3           MOV      R1,#+11
   \   000001C4   0C108DE5           STR      R1,[SP, #+12]
    259              ItemInfo.hWin      = hObj;
   \   000001C8   30109DE5           LDR      R1,[SP, #+48]
    260              ItemInfo.x0        = 0;
    261              ItemInfo.y0        = 0;
    262              ItemInfo.x1        = RectInside.x1;
    263              ItemInfo.y1        = RectInside.y1;
    264              pfOwnerDraw(&ItemInfo);
   \   000001CC   08008DE2           ADD      R0,SP,#+8
   \   000001D0   08108DE5           STR      R1,[SP, #+8]
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   14108DE5           STR      R1,[SP, #+20]
   \   000001DC   18108DE5           STR      R1,[SP, #+24]
   \   000001E0   F410DDE1           LDRSH    R1,[SP, #+4]
   \   000001E4   1C108DE5           STR      R1,[SP, #+28]
   \   000001E8   F610DDE1           LDRSH    R1,[SP, #+6]
   \   000001EC   20108DE5           STR      R1,[SP, #+32]
   \   000001F0   34FF2FE1           BLX      R4
   \                     ??_OnPaint_0:
   \   000001F4   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000001F8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    265            }
    266          }
    267          
    268          /*********************************************************************
    269          *
    270          *       _GetDistToNextItem
    271          *
    272          * Purpose:
    273          *   It returns the distance to the next item relative to the given position.
    274          *
    275          * Parameters:
    276          *   yPos   - Position from which the distance is calculated
    277          *   pIndex - Pointer for storing the index of the next element (could be NULL) 
    278          */

   \                                 In section .text, align 4, keep-with-next
    279          static int _GetDistToNextItem(LISTWHEEL_Handle hObj, int yPos, int * pIndex) {
   \                     _GetDistToNextItem:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   00A0A0E1           MOV      R10,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    280            LISTWHEEL_OBJ * pObj;
    281            GUI_ARRAY ItemArray;
    282            int NumItems, Pos, PosNew, ySizeItem, ySizeData, i = 0;
    283            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   00C0A0E3           MOV      R12,#+0
   \   00000024   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000028   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   0000002C   0050A0E3           MOV      R5,#+0
    284            LISTWHEEL_ITEM * pItem;
    285            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
    286            
    287            //
    288            // Get widget properties
    289            //
    290            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000030   0A00A0E1           MOV      R0,R10
   \   00000034   ........           BL       GUI_ALLOC_LockH
    291              pfOwnerDraw = pObj->pfOwnerDraw;
   \   00000038   386090E5           LDR      R6,[R0, #+56]
    292              ItemArray   = pObj->ItemArray;
   \   0000003C   347090E5           LDR      R7,[R0, #+52]
    293              ySizeData   = pObj->ySizeData;
   \   00000040   80B090E5           LDR      R11,[R0, #+128]
    294              Pos         = pObj->Pos;
   \   00000044   709090E5           LDR      R9,[R0, #+112]
    295            } GUI_UNLOCK_H(pObj);
   \   00000048   ........           BL       GUI_ALLOC_UnlockH
    296            NumItems = GUI_ARRAY_GetNumItems(ItemArray);
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           BL       GUI_ARRAY_GetNumItems
   \   00000054   0080A0E1           MOV      R8,R0
    297            while (Pos > yPos) {
   \   00000058   090054E1           CMP      R4,R9
   \   0000005C   020000AA           BGE      ??_GetDistToNextItem_0
    298              Pos -= ySizeData;
   \                     ??_GetDistToNextItem_1:
   \   00000060   0B9049E0           SUB      R9,R9,R11
   \   00000064   090054E1           CMP      R4,R9
   \   00000068   FCFFFFBA           BLT      ??_GetDistToNextItem_1
    299            }
    300            ItemInfo.Cmd  = WIDGET_ITEM_GET_YSIZE;
   \                     ??_GetDistToNextItem_0:
   \   0000006C   1910A0E3           MOV      R1,#+25
   \   00000070   04108DE5           STR      R1,[SP, #+4]
    301            ItemInfo.hWin = hObj;
   \   00000074   00A08DE5           STR      R10,[SP, #+0]
   \   00000078   030000EA           B        ??_GetDistToNextItem_2
    302            do {
    303              //
    304              // Get data pointer of item
    305              //
    306              pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, i); {
    307                ItemInfo.p = pItem->pData;
    308                //
    309                // If there is no custom data use ItemInfo.p for passing the item handle
    310                //
    311                if (ItemInfo.p == NULL) {
    312                  ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, i);
    313                }
    314              } GUI_UNLOCK_H(pItem);
    315              //
    316              // Get size of item
    317              //
    318              ySizeItem = pfOwnerDraw(&ItemInfo);
    319              //
    320              // Check if done
    321              //
    322              PosNew = Pos + ySizeItem;
    323              if ((yPos >= Pos) && (yPos < PosNew)) {
    324                if (pIndex) {
    325                  *pIndex = i;
    326                }
    327                return yPos - Pos;
    328              }
    329              if (++i == NumItems) {
   \                     ??_GetDistToNextItem_3:
   \   0000007C   015085E2           ADD      R5,R5,#+1
   \   00000080   080055E1           CMP      R5,R8
    330                i = 0;
   \   00000084   0050A003           MOVEQ    R5,#+0
    331              }
    332              Pos = PosNew;
   \   00000088   0090A0E1           MOV      R9,R0
    333            } while (1);
   \                     ??_GetDistToNextItem_2:
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   1C008DE5           STR      R0,[SP, #+28]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0300001A           BNE      ??_GetDistToNextItem_4
   \   000000A8   0510A0E1           MOV      R1,R5
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           BL       GUI_ARRAY_GethItem
   \   000000B4   1C008DE5           STR      R0,[SP, #+28]
   \                     ??_GetDistToNextItem_4:
   \   000000B8   ........           BL       GUI_ALLOC_UnlockH
   \   000000BC   0D00A0E1           MOV      R0,SP
   \   000000C0   36FF2FE1           BLX      R6
   \   000000C4   090080E0           ADD      R0,R0,R9
   \   000000C8   090054E1           CMP      R4,R9
   \   000000CC   EAFFFFBA           BLT      ??_GetDistToNextItem_3
   \   000000D0   000054E1           CMP      R4,R0
   \   000000D4   E8FFFFAA           BGE      ??_GetDistToNextItem_3
   \   000000D8   20009DE5           LDR      R0,[SP, #+32]
   \   000000DC   24D08DE2           ADD      SP,SP,#+36
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   00508015           STRNE    R5,[R0, #+0]
   \   000000E8   090044E0           SUB      R0,R4,R9
   \   000000EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    334          }
    335          
    336          /*********************************************************************
    337          *
    338          *       _CreateTimer
    339          *
    340          * Purpose:
    341          *   Creates a new timer. If there is already an existing timer it will
    342          *   be removed
    343          *   after releasing the PID.
    344          */
    345          static WM_HTIMER _CreateTimer(WM_HWIN hWin, int UserId, int Period, int Mode) {
    346            LISTWHEEL_OBJ * pObj;
    347            WM_HTIMER hTimer;
    348          
    349            pObj   = (LISTWHEEL_OBJ *)WM_H2P(hWin);
    350            hTimer = pObj->hTimer;
    351            if (hTimer) {
    352              WM_RestartTimer(hTimer, Period);
    353            } else {
    354              hTimer = WM_CreateTimer(hWin, UserId, Period, Mode);
    355            }
    356            return hTimer;
    357          }
    358          
    359          /*********************************************************************
    360          *
    361          *       _OnReleased
    362          *
    363          * Purpose:
    364          *   This routine makes sure, that the widget moves to the nearest item
    365          *   after releasing the PID.
    366          */

   \                                 In section .text, align 4, keep-with-next
    367          static void _OnReleased(LISTWHEEL_Handle hObj, int Notification) {
   \                     _OnReleased:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
    368            GUI_ARRAY ItemArray;
    369            WIDGET_ITEM_DRAW_INFO ItemInfo;
    370            LISTWHEEL_ITEM * pItem;
    371            LISTWHEEL_OBJ * pObj;
    372            WM_HMEM hTimer;
    373            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
    374            int Velocity, TimeTouched, TimeNow, TimeUsed, Dist, SnapPosition, Index, ySizeItem, Destination;
    375          
    376            //
    377            // Get widget properties
    378            //
    379            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   0000000C   ........           BL       GUI_ALLOC_LockH
    380              pfOwnerDraw  = pObj->pfOwnerDraw;
   \   00000010   385090E5           LDR      R5,[R0, #+56]
    381              Velocity     = pObj->Velocity;
   \   00000014   746090E5           LDR      R6,[R0, #+116]
    382              hTimer       = pObj->hTimer;
   \   00000018   587090E5           LDR      R7,[R0, #+88]
    383              TimeTouched  = pObj->TimeTouched;
   \   0000001C   6C8090E5           LDR      R8,[R0, #+108]
    384              ItemArray    = pObj->ItemArray;
   \   00000020   349090E5           LDR      R9,[R0, #+52]
    385              SnapPosition = pObj->SnapPosition;
   \   00000024   78A090E5           LDR      R10,[R0, #+120]
    386              Destination  = pObj->Destination;
   \   00000028   84B090E5           LDR      R11,[R0, #+132]
    387            } GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
    388            if (Destination >= 0) {
   \   00000030   00005BE3           CMP      R11,#+0
   \   00000034   4C00005A           BPL      ??_OnReleased_0
    389              return;
    390            }
    391            TimeNow = GUI_GetTime();
   \   00000038   ........           BL       GUI_GetTime
    392            TimeUsed = TimeNow - TimeTouched;
    393            Dist = 0;
    394            if (TimeUsed > 100) {
   \   0000003C   080040E0           SUB      R0,R0,R8
   \   00000040   00B0A0E3           MOV      R11,#+0
   \   00000044   650050E3           CMP      R0,#+101
   \   00000048   1F0000BA           BLT      ??_OnReleased_1
    395              Velocity = 0;
   \   0000004C   0060A0E3           MOV      R6,#+0
    396            }
    397            //
    398            // Set timer if required
    399            //
    400            if (Velocity && (hTimer == 0)) {
    401              //
    402              // If velocity is already available create the timer if required
    403              //
    404              hTimer = _CreateTimer(hObj, 0, TIMER_PERIOD, 0);
    405            } else if (Velocity == 0) {
    406              //
    407              // Get the distance to the nearest item
    408              //
    409              Dist = _GetDistToNextItem(hObj, SnapPosition, &Index);
   \                     ??_OnReleased_2:
   \   00000050   0D20A0E1           MOV      R2,SP
   \   00000054   0A10A0E1           MOV      R1,R10
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       _GetDistToNextItem
   \   00000060   00B0B0E1           MOVS     R11,R0
    410              if (Dist) {
   \   00000064   3000000A           BEQ      ??_OnReleased_3
    411                //
    412                // Get data pointer of item
    413                //
    414                pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index); {
    415                  ItemInfo.p = pItem->pData;
   \   00000068   00109DE5           LDR      R1,[SP, #+0]
   \   0000006C   0900A0E1           MOV      R0,R9
   \   00000070   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   20008DE5           STR      R0,[SP, #+32]
    416                  //
    417                  // If there is no custom data use ItemInfo.p for passing the item handle
    418                  //
    419                  if (ItemInfo.p == NULL) {
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0300001A           BNE      ??_OnReleased_4
    420                    ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, Index);
   \   00000084   00109DE5           LDR      R1,[SP, #+0]
   \   00000088   0900A0E1           MOV      R0,R9
   \   0000008C   ........           BL       GUI_ARRAY_GethItem
   \   00000090   20008DE5           STR      R0,[SP, #+32]
    421                  }
    422                } GUI_UNLOCK_H(pItem);
   \                     ??_OnReleased_4:
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
    423                //
    424                // Get size of item
    425                //
    426                ItemInfo.Cmd  = WIDGET_ITEM_GET_YSIZE;
   \   00000098   1910A0E3           MOV      R1,#+25
   \   0000009C   08108DE5           STR      R1,[SP, #+8]
    427                ItemInfo.hWin = hObj;
   \   000000A0   04408DE5           STR      R4,[SP, #+4]
    428                ySizeItem = pfOwnerDraw(&ItemInfo);
   \   000000A4   04008DE2           ADD      R0,SP,#+4
   \   000000A8   35FF2FE1           BLX      R5
    429                //
    430                //
    431                //
    432                Dist += ySizeItem >> 1;
   \   000000AC   C010A0E1           ASR      R1,R0,#+1
   \   000000B0   0BB081E0           ADD      R11,R1,R11
    433                if (Dist > ySizeItem) {
   \   000000B4   0B0050E1           CMP      R0,R11
    434                  Dist -= ySizeItem;
   \   000000B8   00B04BB0           SUBLT    R11,R11,R0
    435                }
    436                if (Dist > (ySizeItem >> 1)) {
   \   000000BC   0B0051E1           CMP      R1,R11
    437                  Velocity = 1;
   \   000000C0   0160A0B3           MOVLT    R6,#+1
   \   000000C4   0060E0A3           MVNGE    R6,#+0
   \   000000C8   0C0000EA           B        ??_OnReleased_5
    438                } else {
   \                     ??_OnReleased_1:
   \   000000CC   000056E3           CMP      R6,#+0
   \   000000D0   DEFFFF0A           BEQ      ??_OnReleased_2
   \   000000D4   000057E3           CMP      R7,#+0
   \   000000D8   1300001A           BNE      ??_OnReleased_3
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       GUI_ALLOC_h2p
   \   000000E4   587090E5           LDR      R7,[R0, #+88]
   \   000000E8   000057E3           CMP      R7,#+0
   \   000000EC   0800000A           BEQ      ??_OnReleased_6
   \                     ??_OnReleased_7:
   \   000000F0   1910A0E3           MOV      R1,#+25
   \   000000F4   0700A0E1           MOV      R0,R7
   \   000000F8   ........           BL       WM_RestartTimer
   \   000000FC   0A0000EA           B        ??_OnReleased_3
    439                  Velocity = -1;
    440                }
    441                hTimer = _CreateTimer(hObj, 0, TIMER_PERIOD, 0);
   \                     ??_OnReleased_5:
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       GUI_ALLOC_h2p
   \   00000108   587090E5           LDR      R7,[R0, #+88]
   \   0000010C   000057E3           CMP      R7,#+0
   \   00000110   F6FFFF1A           BNE      ??_OnReleased_7
   \                     ??_OnReleased_6:
   \   00000114   0030A0E3           MOV      R3,#+0
   \   00000118   1920A0E3           MOV      R2,#+25
   \   0000011C   0010A0E3           MOV      R1,#+0
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       WM_CreateTimer
   \   00000128   0070A0E1           MOV      R7,R0
    442              }
    443            }
    444            //
    445            // Set widget properties
    446            //
    447            pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??_OnReleased_3:
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       GUI_ALLOC_LockH
    448              pObj->Velocity    = Velocity;
   \   00000134   746080E5           STR      R6,[R0, #+116]
    449              pObj->TimeTouched = 0;
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   6C1080E5           STR      R1,[R0, #+108]
    450              pObj->TouchPos    = 0;
   \   00000140   7C1080E5           STR      R1,[R0, #+124]
    451              pObj->hTimer      = hTimer;
   \   00000144   587080E5           STR      R7,[R0, #+88]
    452            } GUI_UNLOCK_H(pObj);
   \   00000148   ........           BL       GUI_ALLOC_UnlockH
    453            //
    454            // Notify parent
    455            //
    456            WM_NotifyParent(hObj, Notification);
   \   0000014C   28109DE5           LDR      R1,[SP, #+40]
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       WM_NotifyParent
    457            if (Dist == 0) {
   \   00000158   00005BE3           CMP      R11,#+0
   \   0000015C   0200001A           BNE      ??_OnReleased_0
    458              WM_NotifyParent(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \   00000160   0410A0E3           MOV      R1,#+4
   \   00000164   0400A0E1           MOV      R0,R4
   \   00000168   ........           BL       WM_NotifyParent
   \                     ??_OnReleased_0:
   \   0000016C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000170   F08FBDE8           POP      {R4-R11,PC}      ;; return
    459            }
    460          }
    461          
    462          /*********************************************************************
    463          *
    464          *       _OnPressed
    465          *
    466          * Purpose:
    467          *   Calculates the velocity in dependence of the timestamp of the last
    468          *   pressed event and the distance to the current position.
    469          */

   \                                 In section .text, align 4, keep-with-next
    470          static void _OnPressed(LISTWHEEL_Handle hObj, int y) {
   \                     _OnPressed:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    471            LISTWHEEL_OBJ * pObj;
    472            int TimeTouched, TimeNow, TimeUsed, Diff = 0, TouchPos, Velocity = 0, Destination;
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   0070A0E3           MOV      R7,#+0
    473          
    474            //
    475            // Get widget properties
    476            //
    477            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000014   ........           BL       GUI_ALLOC_LockH
    478              TouchPos    = pObj->TouchPos;
   \   00000018   7C8090E5           LDR      R8,[R0, #+124]
    479              TimeTouched = pObj->TimeTouched;
   \   0000001C   6C9090E5           LDR      R9,[R0, #+108]
    480              Destination = pObj->Destination;
   \   00000020   84A090E5           LDR      R10,[R0, #+132]
    481            } GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    482            if (Destination >= 0) {
   \   00000028   00005AE3           CMP      R10,#+0
   \   0000002C   2300005A           BPL      ??_OnPressed_0
    483              return;
    484            }
    485            //
    486            // Calculate velocity
    487            //
    488            TimeNow = GUI_GetTime();
   \   00000030   ........           BL       GUI_GetTime
   \   00000034   00A0A0E1           MOV      R10,R0
    489            if (TimeTouched > 0) {
   \   00000038   010059E3           CMP      R9,#+1
   \   0000003C   090000BA           BLT      ??_OnPressed_1
    490              Diff = y - TouchPos;
   \   00000040   086055E0           SUBS     R6,R5,R8
    491              if (Diff != 0) {
   \   00000044   0700000A           BEQ      ??_OnPressed_1
    492                WM_InvalidateWindow(hObj);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       WM_InvalidateWindow
    493                TimeUsed = TimeNow - TimeTouched + 1;
    494                Velocity = (Diff * TIMER_PERIOD / TimeUsed);
   \   00000050   1910A0E3           MOV      R1,#+25
   \   00000054   910600E0           MUL      R0,R1,R6
   \   00000058   09104AE0           SUB      R1,R10,R9
   \   0000005C   011081E2           ADD      R1,R1,#+1
   \   00000060   ........           BL       __aeabi_idiv
   \   00000064   0070A0E1           MOV      R7,R0
    495              }
    496            }
    497            //
    498            // Set widget properties
    499            //
    500            pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??_OnPressed_1:
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       GUI_ALLOC_LockH
    501              pObj->TimeTouched = TimeNow;
   \   00000070   6CA080E5           STR      R10,[R0, #+108]
    502              pObj->TouchPos    = y;
   \   00000074   7C5080E5           STR      R5,[R0, #+124]
    503              pObj->Velocity    = Velocity;
   \   00000078   747080E5           STR      R7,[R0, #+116]
    504              pObj->Pos        += Diff;
   \   0000007C   701090E5           LDR      R1,[R0, #+112]
   \   00000080   011086E0           ADD      R1,R6,R1
   \   00000084   000000EA           B        ??_OnPressed_2
    505              while (pObj->Pos < 0) {
    506                pObj->Pos += pObj->ySizeData;
   \                     ??_OnPressed_3:
   \   00000088   011082E0           ADD      R1,R2,R1
   \                     ??_OnPressed_2:
   \   0000008C   701080E5           STR      R1,[R0, #+112]
    507              }
   \   00000090   701090E5           LDR      R1,[R0, #+112]
   \   00000094   802090E5           LDR      R2,[R0, #+128]
   \   00000098   000051E3           CMP      R1,#+0
   \   0000009C   F9FFFF4A           BMI      ??_OnPressed_3
    508              while (pObj->Pos > pObj->ySizeData) {
   \   000000A0   010052E1           CMP      R2,R1
   \   000000A4   040000AA           BGE      ??_OnPressed_4
    509                pObj->Pos -= pObj->ySizeData;
   \                     ??_OnPressed_5:
   \   000000A8   701090E5           LDR      R1,[R0, #+112]
   \   000000AC   021041E0           SUB      R1,R1,R2
   \   000000B0   701080E5           STR      R1,[R0, #+112]
   \   000000B4   010052E1           CMP      R2,R1
   \   000000B8   FAFFFFBA           BLT      ??_OnPressed_5
    510              }
    511            } GUI_UNLOCK_H(pObj);
   \                     ??_OnPressed_4:
   \   000000BC   ........           BL       GUI_ALLOC_UnlockH
    512          }
   \                     ??_OnPressed_0:
   \   000000C0   F087BDE8           POP      {R4-R10,PC}      ;; return
    513          
    514          /*********************************************************************
    515          *
    516          *       _CheckTimer
    517          */
    518          static void _CheckTimer(LISTWHEEL_Handle hObj) {
    519            LISTWHEEL_OBJ * pObj;
    520            int TimeNow, TimeTouched;
    521            WM_HMEM hTimer;
    522            
    523            //
    524            // Get widget properties
    525            //
    526            pObj = LISTWHEEL_LOCK_H(hObj); {
    527              TimeTouched = pObj->TimeTouched;
    528              hTimer      = pObj->hTimer;
    529            } GUI_UNLOCK_H(pObj);
    530            TimeNow = GUI_GetTime();
    531            if ((TimeTouched > TimeNow) && (hTimer)) {
    532              WM_RestartTimer(hTimer, TIMER_PERIOD);
    533            }
    534          }
    535          
    536          /*********************************************************************
    537          *
    538          *       _StopAutoMove
    539          *
    540          * Purpose:
    541          *   Stops moving based on pObj->Velocity and pObj->hTimer
    542          */
    543          static void _StopAutoMove(LISTWHEEL_Handle hObj) {
    544            LISTWHEEL_OBJ * pObj;
    545            WM_HMEM hTimer;
    546          
    547            pObj = LISTWHEEL_LOCK_H(hObj); {
    548              hTimer = pObj->hTimer;
    549              pObj->Velocity = 0;
    550              pObj->hTimer   = 0;
    551            } GUI_UNLOCK_H(pObj);
    552            if (hTimer) {
    553              WM_DeleteTimer(hTimer);
    554            }
    555          }
    556          
    557          /*********************************************************************
    558          *
    559          *       _OnTouch
    560          *
    561          * Purpose:
    562          *   Manages PID events if the widget has already captured the input.
    563          */

   \                                 In section .text, align 4, keep-with-next
    564          static void _OnTouch(LISTWHEEL_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnTouch:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    565            const GUI_PID_STATE * pState;
    566            GUI_RECT Rect;
    567            int Notification;
    568            int HasCaptured;
    569          
    570            _CheckTimer(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   6C6090E5           LDR      R6,[R0, #+108]
   \   00000018   587090E5           LDR      R7,[R0, #+88]
   \   0000001C   ........           BL       GUI_ALLOC_UnlockH
   \   00000020   ........           BL       GUI_GetTime
   \   00000024   060050E1           CMP      R0,R6
   \   00000028   040000AA           BGE      ??_OnTouch_0
   \   0000002C   000057E3           CMP      R7,#+0
   \   00000030   0200000A           BEQ      ??_OnTouch_0
   \   00000034   1910A0E3           MOV      R1,#+25
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           BL       WM_RestartTimer
    571            //
    572            // Get message state
    573            //
    574            pState = (const GUI_PID_STATE *)pMsg->Data.p;
   \                     ??_OnTouch_0:
   \   00000040   0C6095E5           LDR      R6,[R5, #+12]
    575            HasCaptured = WM_HasCaptured(pMsg->hWin);
    576            //
    577            //
    578            //
    579            if ((HasCaptured == 0) && (pState)) {
   \   00000044   040095E5           LDR      R0,[R5, #+4]
   \   00000048   ........           BL       WM_HasCaptured
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1200001A           BNE      ??_OnTouch_1
   \   00000054   000056E3           CMP      R6,#+0
    580              if (pState->Pressed) {
   \   00000058   0800D615           LDRBNE   R0,[R6, #+8]
   \   0000005C   00005013           CMPNE    R0,#+0
   \   00000060   2600000A           BEQ      ??_OnTouch_2
    581                _StopAutoMove(hObj);
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI_ALLOC_LockH
   \   0000006C   585090E5           LDR      R5,[R0, #+88]
   \   00000070   0060A0E3           MOV      R6,#+0
   \   00000074   746080E5           STR      R6,[R0, #+116]
   \   00000078   586080E5           STR      R6,[R0, #+88]
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   0100000A           BEQ      ??_OnTouch_3
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           BL       WM_DeleteTimer
    582                WM_SetCapture(hObj, 0);
   \                     ??_OnTouch_3:
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       WM_SetCapture
   \   0000009C   170000EA           B        ??_OnTouch_2
    583              }
    584            }
    585            //
    586            // Process message
    587            //
    588            if (HasCaptured) {
    589              if (pMsg->Data.p) {
   \                     ??_OnTouch_1:
   \   000000A0   0C0095E5           LDR      R0,[R5, #+12]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   1400000A           BEQ      ??_OnTouch_2
    590                WM_GetClientRectEx(pMsg->hWin, &Rect);
   \   000000AC   0D10A0E1           MOV      R1,SP
   \   000000B0   040095E5           LDR      R0,[R5, #+4]
   \   000000B4   ........           BL       WM_GetClientRectEx
    591                if (pState->Pressed && (pState->y >= 0) && (pState->y <= Rect.y1)) {
   \   000000B8   0800D6E5           LDRB     R0,[R6, #+8]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   0A00000A           BEQ      ??_OnTouch_4
   \   000000C4   041096E5           LDR      R1,[R6, #+4]
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0500004A           BMI      ??_OnTouch_5
   \   000000D0   F600DDE1           LDRSH    R0,[SP, #+6]
   \   000000D4   010050E1           CMP      R0,R1
   \   000000D8   020000BA           BLT      ??_OnTouch_5
    592                  _OnPressed(hObj, pState->y);
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       _OnPressed
   \   000000E4   050000EA           B        ??_OnTouch_2
    593                } else {
    594                  if (pState->Pressed) {
    595                    Notification = WM_NOTIFICATION_MOVED_OUT;
   \                     ??_OnTouch_5:
   \   000000E8   0310A0E3           MOV      R1,#+3
   \   000000EC   000000EA           B        ??_OnTouch_6
    596                  } else {
    597                    Notification = WM_NOTIFICATION_RELEASED;
   \                     ??_OnTouch_4:
   \   000000F0   0210A0E3           MOV      R1,#+2
    598                  }
    599                  _OnReleased(hObj, Notification);
   \                     ??_OnTouch_6:
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       _OnReleased
    600                  WM_ReleaseCapture();
   \   000000FC   ........           BL       WM_ReleaseCapture
    601                }
    602              }
    603            }
    604          }
   \                     ??_OnTouch_2:
   \   00000100   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000104   F080BDE8           POP      {R4-R7,PC}       ;; return
    605          
    606          /*********************************************************************
    607          *
    608          *       _OnPidStateChange
    609          *
    610          * Purpose:
    611          *   Captures the input on the first press.
    612          */

   \                                 In section .text, align 4, keep-with-next
    613          static void _OnPidStateChange(LISTWHEEL_Handle hObj, WM_MESSAGE * pMsg) {
   \                     _OnPidStateChange:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    614            LISTWHEEL_OBJ * pObj;
    615            U16 State;
    616            const WM_PID_STATE_CHANGED_INFO * pState;
    617          
    618            _CheckTimer(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   6C5090E5           LDR      R5,[R0, #+108]
   \   00000014   587090E5           LDR      R7,[R0, #+88]
   \   00000018   ........           BL       GUI_ALLOC_UnlockH
   \   0000001C   ........           BL       GUI_GetTime
   \   00000020   050050E1           CMP      R0,R5
   \   00000024   040000AA           BGE      ??_OnPidStateChange_0
   \   00000028   000057E3           CMP      R7,#+0
   \   0000002C   0200000A           BEQ      ??_OnPidStateChange_0
   \   00000030   1910A0E3           MOV      R1,#+25
   \   00000034   0700A0E1           MOV      R0,R7
   \   00000038   ........           BL       WM_RestartTimer
    619            //
    620            // Get widget properties
    621            //
    622            pObj = LISTWHEEL_LOCK_H(hObj); {
    623              State = pObj->Widget.State;
   \                     ??_OnPidStateChange_0:
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       GUI_ALLOC_LockH
   \   00000044   B253D0E1           LDRH     R5,[R0, #+50]
    624            } GUI_UNLOCK_H(pObj);
   \   00000048   ........           BL       GUI_ALLOC_UnlockH
    625            //
    626            // Get message state
    627            //
    628            pState = (const WM_PID_STATE_CHANGED_INFO *)pMsg->Data.p;
   \   0000004C   0C6096E5           LDR      R6,[R6, #+12]
    629            //
    630            // Process message
    631            //
    632            if ((pState->StatePrev == 0) && (pState->State == 1)) {
   \   00000050   0900D6E5           LDRB     R0,[R6, #+9]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0800D605           LDRBEQ   R0,[R6, #+8]
   \   0000005C   01005003           CMPEQ    R0,#+1
   \   00000060   1D00001A           BNE      ??_OnPidStateChange_1
    633              _StopAutoMove(hObj);
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI_ALLOC_LockH
   \   0000006C   587090E5           LDR      R7,[R0, #+88]
   \   00000070   0080A0E3           MOV      R8,#+0
   \   00000074   748080E5           STR      R8,[R0, #+116]
   \   00000078   588080E5           STR      R8,[R0, #+88]
   \   0000007C   ........           BL       GUI_ALLOC_UnlockH
   \   00000080   000057E3           CMP      R7,#+0
   \   00000084   0100000A           BEQ      ??_OnPidStateChange_2
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           BL       WM_DeleteTimer
    634              if ((State & LISTWHEEL_STATE_PRESSED) == 0) {   
   \                     ??_OnPidStateChange_2:
   \   00000090   400F15E3           TST      R5,#0x100
   \   00000094   1000001A           BNE      ??_OnPidStateChange_1
    635                pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GUI_ALLOC_LockH
   \   000000A0   0050A0E1           MOV      R5,R0
    636                  pObj->TimeTouched = GUI_GetTime();
   \   000000A4   ........           BL       GUI_GetTime
   \   000000A8   6C0085E5           STR      R0,[R5, #+108]
    637                  pObj->TouchPos    = pState->y;
   \   000000AC   040096E5           LDR      R0,[R6, #+4]
   \   000000B0   7C0085E5           STR      R0,[R5, #+124]
    638                } GUI_UNLOCK_H(pObj);
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
    639                WM_SetCapture(hObj, 0);
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       WM_SetCapture
    640                _OnPressed(hObj, pState->y);
   \   000000C4   041096E5           LDR      R1,[R6, #+4]
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           BL       _OnPressed
    641                WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       WM_NotifyParent
    642              }
    643            }
    644          }
   \                     ??_OnPidStateChange_1:
   \   000000DC   F081BDE8           POP      {R4-R8,PC}       ;; return
    645          
    646          /*********************************************************************
    647          *
    648          *       _OnTimer
    649          *
    650          * Purpose:
    651          *   If a destination has been set it sets the velocity to the right direction
    652          *   and accelerates the motion to a maximum value, which depends on the
    653          *   complete data size.
    654          *   If no destination has been set it slows down the motion. It keeps moving
    655          *   with a minimum of speed until any item has reached the sanp position.
    656          */

   \                                 In section .text, align 4, keep-with-next
    657          static void _OnTimer(LISTWHEEL_Handle hObj) {
   \                     _OnTimer:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    658            LISTWHEEL_OBJ * pObj;
    659            WM_HMEM hTimer;
    660            int Pos, Velocity, Swap, ySizeData, SnapPosition, Destination, Dist, MaxVel;
    661          
    662            //
    663            // Get widget properties
    664            //
    665            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   0000000C   ........           BL       GUI_ALLOC_LockH
    666              Pos          = pObj->Pos;
   \   00000010   705090E5           LDR      R5,[R0, #+112]
    667              Velocity     = pObj->Velocity;
   \   00000014   74A090E5           LDR      R10,[R0, #+116]
    668              hTimer       = pObj->hTimer;
   \   00000018   586090E5           LDR      R6,[R0, #+88]
    669              ySizeData    = pObj->ySizeData;
   \   0000001C   807090E5           LDR      R7,[R0, #+128]
    670              SnapPosition = pObj->SnapPosition;
   \   00000020   78B090E5           LDR      R11,[R0, #+120]
    671              Destination  = pObj->Destination;
   \   00000024   848090E5           LDR      R8,[R0, #+132]
    672            } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
    673            if (Destination >= 0) {
   \   0000002C   000058E3           CMP      R8,#+0
   \   00000030   4100004A           BMI      ??_OnTimer_0
    674              //
    675              // Automatic movement
    676              //
    677              if (Pos != Destination) {
   \   00000034   080055E1           CMP      R5,R8
   \   00000038   3100000A           BEQ      ??_OnTimer_1
    678                if (Velocity == 0) {
   \   0000003C   00005AE3           CMP      R10,#+0
   \   00000040   0900001A           BNE      ??_OnTimer_2
    679                  //
    680                  // Initial velocity
    681                  //
    682                  Dist = Destination - Pos;
   \   00000044   050048E0           SUB      R0,R8,R5
    683                  if (Dist > 0) {
   \   00000048   010050E3           CMP      R0,#+1
    684                    Swap = 0;
   \   0000004C   0090A0A3           MOVGE    R9,#+0
    685                  } else {
    686                    Dist = -Dist;
   \   00000050   000060B2           RSBLT    R0,R0,#+0
    687                    Swap = 1;
   \   00000054   0190A0B3           MOVLT    R9,#+1
    688                  }
    689                  if (Dist > (ySizeData >> 1)) {
   \   00000058   C70050E1           CMP      R0,R7, ASR #+1
    690                    Swap ^= 1;
   \   0000005C   019029C2           EORGT    R9,R9,#0x1
    691                  }
    692                  Velocity = -(Swap << 1) + 1;
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   89A040E0           SUB      R10,R0,R9, LSL #+1
   \   00000068   210000EA           B        ??_OnTimer_3
    693                } else {
    694                  //
    695                  // Adjust position
    696                  //
    697                  Pos += Velocity;
   \                     ??_OnTimer_2:
   \   0000006C   05509AE0           ADDS     R5,R10,R5
    698                  while (Pos < 0) {
   \   00000070   0100005A           BPL      ??_OnTimer_4
    699                    Pos += ySizeData;
   \                     ??_OnTimer_5:
   \   00000074   055097E0           ADDS     R5,R7,R5
   \   00000078   FDFFFF4A           BMI      ??_OnTimer_5
    700                  }
    701                  while (Pos > ySizeData) {
   \                     ??_OnTimer_4:
   \   0000007C   050057E1           CMP      R7,R5
   \   00000080   020000AA           BGE      ??_OnTimer_6
    702                    Pos -= ySizeData;
   \                     ??_OnTimer_7:
   \   00000084   075045E0           SUB      R5,R5,R7
   \   00000088   050057E1           CMP      R7,R5
   \   0000008C   FCFFFFBA           BLT      ??_OnTimer_7
    703                  }
    704                  WM_InvalidateWindow(hObj);
   \                     ??_OnTimer_6:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       WM_InvalidateWindow
    705                  //
    706                  // Acceleration
    707                  //
    708                  if (Velocity > 0) {
   \   00000098   01005AE3           CMP      R10,#+1
   \   0000009C   050000BA           BLT      ??_OnTimer_8
    709                    Swap = 0;
   \   000000A0   0090A0E3           MOV      R9,#+0
    710                    Dist = Destination - Pos;
   \   000000A4   050058E0           SUBS     R0,R8,R5
    711                    while (Dist < 0) {
   \   000000A8   0800005A           BPL      ??_OnTimer_9
    712                      Dist += ySizeData;
   \                     ??_OnTimer_10:
   \   000000AC   000097E0           ADDS     R0,R7,R0
   \   000000B0   FDFFFF4A           BMI      ??_OnTimer_10
   \   000000B4   050000EA           B        ??_OnTimer_9
    713                    }
    714                  } else {
    715                    Swap = 1;
   \                     ??_OnTimer_8:
   \   000000B8   0190A0E3           MOV      R9,#+1
    716                    Velocity = -Velocity;
   \   000000BC   00A06AE2           RSB      R10,R10,#+0
    717                    Dist = Pos - Destination;
   \   000000C0   080055E0           SUBS     R0,R5,R8
    718                    while (Dist < 0) {
   \   000000C4   0100005A           BPL      ??_OnTimer_9
    719                      Dist += ySizeData;
   \                     ??_OnTimer_11:
   \   000000C8   000097E0           ADDS     R0,R7,R0
   \   000000CC   FDFFFF4A           BMI      ??_OnTimer_11
    720                    }
    721                  }
    722                  MaxVel = ySizeData >> 6;
   \                     ??_OnTimer_9:
   \   000000D0   4713A0E1           ASR      R1,R7,#+6
    723                  if (MaxVel < 5) {
   \   000000D4   050051E3           CMP      R1,#+5
    724                    MaxVel = 5;
   \   000000D8   0510A0B3           MOVLT    R1,#+5
    725                  }
    726                  if (Velocity < MaxVel) {
   \   000000DC   01005AE1           CMP      R10,R1
    727                    Velocity++;
   \   000000E0   01A08AB2           ADDLT    R10,R10,#+1
    728                  }
    729                  if (Velocity > Dist) {
   \   000000E4   0A0050E1           CMP      R0,R10
   \   000000E8   00A0A0D1           MOVLE    R10,R0
    730                    Velocity = Dist;
    731                  }
    732                  if (Swap) {
   \   000000EC   000059E3           CMP      R9,#+0
    733                    Velocity = -Velocity;
   \   000000F0   00A06A12           RSBNE    R10,R10,#+0
    734                  }
    735                }
    736                WM_RestartTimer(hTimer, TIMER_PERIOD);
   \                     ??_OnTimer_3:
   \   000000F4   1910A0E3           MOV      R1,#+25
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   ........           BL       WM_RestartTimer
   \   00000100   030000EA           B        ??_OnTimer_12
    737              } else {
    738                Destination = -1;
   \                     ??_OnTimer_1:
   \   00000104   0080E0E3           MVN      R8,#+0
    739                WM_DeleteTimer(hTimer);
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           BL       WM_DeleteTimer
    740                hTimer = 0;
   \   00000110   0060A0E3           MOV      R6,#+0
    741              }
    742              pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??_OnTimer_12:
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       GUI_ALLOC_LockH
   \   0000011C   0040A0E1           MOV      R4,R0
    743                pObj->Pos         = Pos;
   \   00000120   705084E5           STR      R5,[R4, #+112]
    744                pObj->hTimer      = hTimer;
   \   00000124   586084E5           STR      R6,[R4, #+88]
    745                pObj->Velocity    = Velocity;
   \   00000128   74A084E5           STR      R10,[R4, #+116]
    746                pObj->Destination = Destination;
   \   0000012C   848084E5           STR      R8,[R4, #+132]
    747                pObj->TimeTouched = GUI_GetTime();
   \   00000130   ........           BL       GUI_GetTime
   \   00000134   6C0084E5           STR      R0,[R4, #+108]
    748              } GUI_UNLOCK_H(pObj);
   \   00000138   2F0000EA           B        ??_OnTimer_13
    749            } else {
    750              //
    751              // Adjust position on current velocity
    752              //
    753              while (Pos > ySizeData) {
   \                     ??_OnTimer_0:
   \   0000013C   050057E1           CMP      R7,R5
   \   00000140   020000AA           BGE      ??_OnTimer_14
    754                Pos -= ySizeData;
   \                     ??_OnTimer_15:
   \   00000144   075045E0           SUB      R5,R5,R7
   \   00000148   050057E1           CMP      R7,R5
   \   0000014C   FCFFFFBA           BLT      ??_OnTimer_15
    755              }
    756              WM_InvalidateWindow(hObj);
   \                     ??_OnTimer_14:
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       WM_InvalidateWindow
    757              //
    758              // Decrease velocity
    759              //
    760              if (Velocity > 0) {
   \   00000158   01005AE3           CMP      R10,#+1
    761                Swap = 0;
   \   0000015C   0090A0A3           MOVGE    R9,#+0
    762              } else {
    763                Swap = 1;
   \   00000160   0190A0B3           MOVLT    R9,#+1
    764                Velocity = -Velocity;
   \   00000164   00A06AB2           RSBLT    R10,R10,#+0
    765              }
    766              if (Velocity > 200) {
   \   00000168   C9005AE3           CMP      R10,#+201
    767                Velocity = 200;
   \   0000016C   C8A0A0A3           MOVGE    R10,#+200
   \   00000170   0E0000AA           BGE      ??_OnTimer_16
    768              } else if (Velocity > 100) {
   \   00000174   65005AE3           CMP      R10,#+101
    769                Velocity -= 10;
   \   00000178   0AA04AA2           SUBGE    R10,R10,#+10
   \   0000017C   020000AA           BGE      ??_OnTimer_17
    770              } else if (Velocity > 10) {
   \   00000180   0B005AE3           CMP      R10,#+11
    771                Velocity -= 5;
   \   00000184   05A04AA2           SUBGE    R10,R10,#+5
    772              } else {
    773                Velocity -= 1;
   \   00000188   01A04AB2           SUBLT    R10,R10,#+1
    774              }
    775              //
    776              // Keep moving until snap position has been reached
    777              //
    778              if (Velocity == 0) {
   \                     ??_OnTimer_17:
   \   0000018C   00005AE3           CMP      R10,#+0
   \   00000190   0600001A           BNE      ??_OnTimer_16
    779                if (_GetDistToNextItem(hObj, SnapPosition, NULL)) {
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0B10A0E1           MOV      R1,R11
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       _GetDistToNextItem
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   0400000A           BEQ      ??_OnTimer_18
    780                  Velocity = 1;
   \   000001AC   01A0A0E3           MOV      R10,#+1
    781                }
    782              }
    783              //
    784              // Manage timer
    785              //
    786              if (Velocity != 0) {
    787                WM_RestartTimer(hTimer, TIMER_PERIOD);
   \                     ??_OnTimer_16:
   \   000001B0   1910A0E3           MOV      R1,#+25
   \   000001B4   0600A0E1           MOV      R0,R6
   \   000001B8   ........           BL       WM_RestartTimer
   \   000001BC   050000EA           B        ??_OnTimer_19
    788              } else {
    789                WM_DeleteTimer(hTimer);
   \                     ??_OnTimer_18:
   \   000001C0   0600A0E1           MOV      R0,R6
   \   000001C4   ........           BL       WM_DeleteTimer
    790                hTimer = 0;
   \   000001C8   0060A0E3           MOV      R6,#+0
    791                WM_NotifyParent(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \   000001CC   0410A0E3           MOV      R1,#+4
   \   000001D0   0400A0E1           MOV      R0,R4
   \   000001D4   ........           BL       WM_NotifyParent
    792              }
    793              //
    794              // Set widget properties
    795              //
    796              if (Swap) {
   \                     ??_OnTimer_19:
   \   000001D8   000059E3           CMP      R9,#+0
    797                Velocity = -Velocity;
   \   000001DC   00A06A12           RSBNE    R10,R10,#+0
    798              }
    799              Pos += Velocity;
    800              pObj = LISTWHEEL_LOCK_H(hObj); {
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   ........           BL       GUI_ALLOC_LockH
   \   000001E8   0040A0E1           MOV      R4,R0
    801                pObj->Pos      = Pos;
   \   000001EC   05008AE0           ADD      R0,R10,R5
   \   000001F0   700084E5           STR      R0,[R4, #+112]
    802                pObj->hTimer   = hTimer;
   \   000001F4   586084E5           STR      R6,[R4, #+88]
    803                pObj->Velocity = Velocity;
   \   000001F8   74A084E5           STR      R10,[R4, #+116]
    804              } GUI_UNLOCK_H(pObj);
   \                     ??_OnTimer_13:
   \   000001FC   04D08DE2           ADD      SP,SP,#+4
   \   00000200   F04FBDE8           POP      {R4-R11,LR}
   \   00000204   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
    805            }
    806          }
    807          
    808          /*********************************************************************
    809          *
    810          *       _RemoveItems
    811          */
    812          static void _RemoveItems(LISTWHEEL_Handle hObj) {
    813            LISTWHEEL_OBJ * pObj;
    814            GUI_ARRAY ItemArray;
    815            int Index;
    816          
    817            pObj = LISTWHEEL_LOCK_H(hObj); {
    818              ItemArray = pObj->ItemArray;
    819            } GUI_UNLOCK_H(pObj);
    820            Index = GUI_ARRAY_GetNumItems(ItemArray);
    821            while (Index--) {
    822              GUI_ARRAY_DeleteItem(ItemArray, Index);
    823            }
    824          }
    825          
    826          /*********************************************************************
    827          *
    828          *       _FreeAttached
    829          */
    830          static void _FreeAttached(LISTWHEEL_Handle hObj) {
    831            LISTWHEEL_OBJ * pObj;
    832            GUI_ARRAY ItemArray;
    833          
    834            pObj = LISTWHEEL_LOCK_H(hObj); {
    835              ItemArray = pObj->ItemArray;
    836              pObj->ItemArray = 0;
    837              pObj->hTimer    = 0;
    838            } GUI_UNLOCK_H(pObj);
    839            GUI_ARRAY_Delete(ItemArray);
    840          }
    841          
    842          /*********************************************************************
    843          *
    844          *       _GetItemHeight
    845          */
    846          static int _GetItemHeight(LISTWHEEL_Handle hObj, unsigned int ItemIndex) {
    847            LISTWHEEL_OBJ * pObj;
    848            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
    849            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
    850            LISTWHEEL_ITEM * pItem;
    851            GUI_ARRAY ItemArray;
    852            int Height;
    853          
    854            pObj = LISTWHEEL_LOCK_H(hObj); {
    855              pfOwnerDraw = pObj->pfOwnerDraw;
    856              ItemArray   = pObj->ItemArray;
    857            } GUI_UNLOCK_H(pObj);
    858            pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, ItemIndex); {
    859              ItemInfo.p = pItem->pData;
    860              //
    861              // If there is no custom data use ItemInfo.p for passing the item handle
    862              //
    863              if (ItemInfo.p == NULL) {
    864                ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, ItemIndex);
    865              }
    866            } GUI_UNLOCK_H(pItem);
    867            ItemInfo.Cmd = WIDGET_ITEM_GET_YSIZE;
    868            ItemInfo.hWin = hObj;
    869            ItemInfo.ItemIndex = ItemIndex;
    870            Height = pfOwnerDraw(&ItemInfo);
    871            return Height;
    872          }
    873          
    874          /*********************************************************************
    875          *
    876          *       _GetDestination
    877          */

   \                                 In section .text, align 4, keep-with-next
    878          static int _GetDestination(LISTWHEEL_Handle hObj, unsigned int Index) {
   \                     _GetDestination:
   \   00000000   F04D2DE9           PUSH     {R4-R8,R10,R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
    879            LISTWHEEL_OBJ * pObj;
    880            int SnapPosition, Destination, ySizeData;
    881          
    882            pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000010   ........           BL       GUI_ALLOC_LockH
    883              SnapPosition = pObj->SnapPosition;
   \   00000014   781090E5           LDR      R1,[R0, #+120]
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    884              ySizeData    = pObj->ySizeData;
   \   0000001C   805090E5           LDR      R5,[R0, #+128]
    885            } GUI_UNLOCK_H(pObj);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
    886          
    887            for (Destination = 0; Index > 0; Index--) {
   \   00000024   0060A0E3           MOV      R6,#+0
   \   00000028   000058E3           CMP      R8,#+0
   \   0000002C   2200000A           BEQ      ??_GetDestination_0
   \   00000030   ............       ADRL     R7,`?<Constant {0L}>_3`
   \              ....        
    888              Destination += _GetItemHeight(hObj, Index - 1);
   \                     ??_GetDestination_1:
   \   00000038   0E5CB7E8           LDM      R7!,{R1-R3,R10-R12,LR}
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   0E5CA0E8           STM      R0!,{R1-R3,R10-R12,LR}
   \   00000044   001097E5           LDR      R1,[R7, #0]
   \   00000048   018048E2           SUB      R8,R8,#+1
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   1C7047E2           SUB      R7,R7,#+28
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   38A090E5           LDR      R10,[R0, #+56]
   \   00000060   34B090E5           LDR      R11,[R0, #+52]
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
   \   00000068   0810A0E1           MOV      R1,R8
   \   0000006C   0B00A0E1           MOV      R0,R11
   \   00000070   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   20008DE5           STR      R0,[SP, #+32]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0300001A           BNE      ??_GetDestination_2
   \   00000084   0810A0E1           MOV      R1,R8
   \   00000088   0B00A0E1           MOV      R0,R11
   \   0000008C   ........           BL       GUI_ARRAY_GethItem
   \   00000090   20008DE5           STR      R0,[SP, #+32]
   \                     ??_GetDestination_2:
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
   \   00000098   1910A0E3           MOV      R1,#+25
   \   0000009C   08108DE5           STR      R1,[SP, #+8]
   \   000000A0   04408DE5           STR      R4,[SP, #+4]
   \   000000A4   0C808DE5           STR      R8,[SP, #+12]
   \   000000A8   04008DE2           ADD      R0,SP,#+4
   \   000000AC   3AFF2FE1           BLX      R10
   \   000000B0   066080E0           ADD      R6,R0,R6
    889            }
   \   000000B4   000058E3           CMP      R8,#+0
   \   000000B8   DEFFFF1A           BNE      ??_GetDestination_1
    890            Destination = ySizeData - Destination + SnapPosition;
   \                     ??_GetDestination_0:
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   060045E0           SUB      R0,R5,R6
   \   000000C4   000081E0           ADD      R0,R1,R0
    891            while (Destination > ySizeData) {
   \   000000C8   000055E1           CMP      R5,R0
   \   000000CC   020000AA           BGE      ??_GetDestination_3
    892              Destination -= ySizeData;
   \                     ??_GetDestination_4:
   \   000000D0   050040E0           SUB      R0,R0,R5
   \   000000D4   000055E1           CMP      R5,R0
   \   000000D8   FCFFFFBA           BLT      ??_GetDestination_4
    893            }
    894          
    895            return Destination;
   \                     ??_GetDestination_3:
   \   000000DC   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000000E0   F08DBDE8           POP      {R4-R8,R10,R11,PC}  ;; return
    896          }
    897          
    898          /*********************************************************************
    899          *
    900          *       Private code
    901          *
    902          **********************************************************************
    903          */
    904          /*********************************************************************
    905          *
    906          *       LISTWHEEL_LockH
    907          */
    908          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    909          LISTWHEEL_OBJ * LISTWHEEL_LockH(LISTWHEEL_Handle h) {
    910            LISTWHEEL_OBJ * p;
    911            p = (LISTWHEEL_OBJ *)GUI_LOCK_H(h);
    912            if (p) {
    913              if (p->DebugId != LISTWHEEL_ID) {
    914                GUI_DEBUG_ERROROUT("LISTWHEEL.c: Wrong handle type or Object not init'ed");
    915                return 0;
    916              }
    917            }
    918            return p;
    919          }
    920          #endif
    921          
    922          /*********************************************************************
    923          *
    924          *       Public code
    925          *
    926          **********************************************************************
    927          */
    928          /*********************************************************************
    929          *
    930          *       LISTWHEEL_Callback
    931          */

   \                                 In section .text, align 4, keep-with-next
    932          void LISTWHEEL_Callback(WM_MESSAGE * pMsg) {
   \                     LISTWHEEL_Callback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    933            LISTWHEEL_Handle hObj;
    934          
    935            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
    936            //
    937            // Let widget handle the standard messages
    938            //
    939            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           BL       WIDGET_HandleActive
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1700000A           BEQ      ??LISTWHEEL_Callback_0
    940              return;
    941            }
    942            //
    943            // Process widget specific messages
    944            //
    945            switch (pMsg->MsgId) {
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   0B0050E2           SUBS     R0,R0,#+11
   \   00000028   0900000A           BEQ      ??LISTWHEEL_Callback_1
   \   0000002C   010050E2           SUBS     R0,R0,#+1
   \   00000030   1A00000A           BEQ      ??LISTWHEEL_Callback_2
   \   00000034   030050E2           SUBS     R0,R0,#+3
   \   00000038   1C00000A           BEQ      ??LISTWHEEL_Callback_3
   \   0000003C   020050E2           SUBS     R0,R0,#+2
   \   00000040   1200000A           BEQ      ??LISTWHEEL_Callback_4
   \   00000044   020040E2           SUB      R0,R0,#+2
   \   00000048   400F50E2           SUBS     R0,R0,#+256
   \   0000004C   0C00000A           BEQ      ??LISTWHEEL_Callback_5
   \   00000050   080000EA           B        ??LISTWHEEL_Callback_6
    946            case WM_DELETE:
    947              _FreeAttached(hObj);
   \                     ??LISTWHEEL_Callback_1:
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   345090E5           LDR      R5,[R0, #+52]
   \   00000060   0060A0E3           MOV      R6,#+0
   \   00000064   346080E5           STR      R6,[R0, #+52]
   \   00000068   586080E5           STR      R6,[R0, #+88]
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       GUI_ARRAY_Delete
    948              break;
    949            case WM_TIMER:
    950              _OnTimer(hObj);
    951              break;
    952            case WM_PID_STATE_CHANGED:
    953              _OnPidStateChange(hObj, pMsg);
    954              break;
    955            case WM_TOUCH:
    956              _OnTouch(hObj, pMsg);
    957              break;
    958            case WM_PAINT:
    959              _OnPaint(hObj);
    960              return;
    961            }
    962            //
    963            // Process remaining messages
    964            //
    965            WM_DefaultProc(pMsg);
   \                     ??LISTWHEEL_Callback_6:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       WM_DefaultProc
    966          }
   \                     ??LISTWHEEL_Callback_0:
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LISTWHEEL_Callback_5:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       _OnTimer
   \   0000008C   F9FFFFEA           B        ??LISTWHEEL_Callback_6
   \                     ??LISTWHEEL_Callback_4:
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   ........           BL       _OnPidStateChange
   \   0000009C   F5FFFFEA           B        ??LISTWHEEL_Callback_6
   \                     ??LISTWHEEL_Callback_2:
   \   000000A0   0410A0E1           MOV      R1,R4
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       _OnTouch
   \   000000AC   F1FFFFEA           B        ??LISTWHEEL_Callback_6
   \                     ??LISTWHEEL_Callback_3:
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   7040BDE8           POP      {R4-R6,LR}
   \   000000B8   ........           B        _OnPaint         ;; tailcall
    967          
    968          /*********************************************************************
    969          *
    970          *       _FillStringInRect
    971          */
    972          static void _FillStringInRect(char * s, GUI_RECT * pRect, int Align, int HasTrans) {
    973            int Len;
    974          
    975            Len = GUI__strlen(s);
    976            if (HasTrans == 0) {
    977              GUI_ClearRectEx(pRect);
    978              GUI_SetTextMode(GUI_TM_NORMAL);
    979            } else {
    980              GUI_SetTextMode(GUI_TM_TRANS);
    981            }
    982            GUI_DispStringInRectMax(s, pRect, Align, Len);
    983          }
    984          
    985          /*********************************************************************
    986          *
    987          *       LISTWHEEL_OwnerDraw
    988          */

   \                                 In section .text, align 4, keep-with-next
    989          int LISTWHEEL_OwnerDraw(const WIDGET_ITEM_DRAW_INFO * pDrawItemInfo) {
   \                     LISTWHEEL_OwnerDraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    990            LISTWHEEL_OBJ * pObj;
    991            LISTWHEEL_ITEM * pItem;
    992            int xSize, ySizeItem, ySizeFont, LineHeight, Index, Align, HasTrans;
    993            char * pText;
    994            GUI_RECT Rect;
    995            unsigned LBorder;
    996            unsigned RBorder;
    997            GUI_COLOR Color, BkColor;
    998          
    999            if (pDrawItemInfo->p == NULL) {
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   14D04DE2           SUB      SP,SP,#+20
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200001A           BNE      ??LISTWHEEL_OwnerDraw_0
   1000              return 0;
   \                     ??LISTWHEEL_OwnerDraw_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     ??LISTWHEEL_OwnerDraw_2:
   \   0000001C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000020   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1001            }
   1002            //
   1003            // Get object properties
   1004            //
   1005            pObj = LISTWHEEL_LOCK_H(pDrawItemInfo->hWin); {
   \                     ??LISTWHEEL_OwnerDraw_0:
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   00A0A0E1           MOV      R10,R0
   1006              ySizeFont  = GUI_GetYSizeOfFont(pObj->Props.pFont);
   \   00000030   3C009AE5           LDR      R0,[R10, #+60]
   \   00000034   ........           BL       GUI_GetYSizeOfFont
   \   00000038   00B0A0E1           MOV      R11,R0
   1007              xSize      = pObj->Widget.Win.Rect.x1 - pObj->Widget.Win.Rect.x0 + 1;
   \   0000003C   F400DAE1           LDRSH    R0,[R10, #+4]
   \   00000040   F010DAE1           LDRSH    R1,[R10, #+0]
   1008              LBorder    = pObj->LBorder;
   \   00000044   5C609AE5           LDR      R6,[R10, #+92]
   1009              RBorder    = pObj->RBorder;
   \   00000048   60709AE5           LDR      R7,[R10, #+96]
   \   0000004C   010040E0           SUB      R0,R0,R1
   \   00000050   015080E2           ADD      R5,R0,#+1
   1010              LineHeight = pObj->LineHeight;
   1011              Index      = (pObj->Sel == pDrawItemInfo->ItemIndex) ? LISTWHEEL_CI_SEL : LISTWHEEL_CI_UNSEL;
   \   00000054   68009AE5           LDR      R0,[R10, #+104]
   \   00000058   081094E5           LDR      R1,[R4, #+8]
   \   0000005C   64809AE5           LDR      R8,[R10, #+100]
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   0100A003           MOVEQ    R0,#+1
   \   00000068   0000A013           MOVNE    R0,#+0
   1012              Color      = pObj->Props.aTextColor[Index];
   \   0000006C   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   00000070   482090E5           LDR      R2,[R0, #+72]
   \   00000074   0C208DE5           STR      R2,[SP, #+12]
   1013              BkColor    = pObj->Props.aBackColor[Index];
   \   00000078   409090E5           LDR      R9,[R0, #+64]
   1014              Align      = pObj->Props.Align;
   \   0000007C   F0A5DAE1           LDRSH    R10,[R10, #+80]
   1015            } GUI_UNLOCK_H(pObj);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
   1016            if (LineHeight) {
   \   00000084   000058E3           CMP      R8,#+0
   1017              ySizeItem = LineHeight;
   \   00000088   08808D15           STRNE    R8,[SP, #+8]
   1018            } else {
   1019              ySizeItem = ySizeFont;
   \   0000008C   08B08D05           STREQ    R11,[SP, #+8]
   1020            }
   1021            //
   1022            // Get item properties
   1023            //
   1024            pItem = (LISTWHEEL_ITEM *)GUI_LOCK_H((WM_HMEM)pDrawItemInfo->p); {
   \   00000090   1C0094E5           LDR      R0,[R4, #+28]
   \   00000094   ........           BL       GUI_ALLOC_LockH
   \   00000098   00B0A0E1           MOV      R11,R0
   1025              pText = pItem->acText;
   1026            } GUI_UNLOCK_H(pItem);
   \   0000009C   ........           BL       GUI_ALLOC_UnlockH
   1027            //
   1028            // Process messages
   1029            //
   1030            switch (pDrawItemInfo->Cmd) {
   \   000000A0   040094E5           LDR      R0,[R4, #+4]
   \   000000A4   010050E2           SUBS     R0,R0,#+1
   \   000000A8   0A00000A           BEQ      ??LISTWHEEL_OwnerDraw_3
   \   000000AC   170050E2           SUBS     R0,R0,#+23
   \   000000B0   0200000A           BEQ      ??LISTWHEEL_OwnerDraw_4
   \   000000B4   010050E2           SUBS     R0,R0,#+1
   \   000000B8   0200000A           BEQ      ??LISTWHEEL_OwnerDraw_5
   \   000000BC   D5FFFFEA           B        ??LISTWHEEL_OwnerDraw_1
   1031            case WIDGET_ITEM_GET_XSIZE:
   1032              return xSize;
   \                     ??LISTWHEEL_OwnerDraw_4:
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   D4FFFFEA           B        ??LISTWHEEL_OwnerDraw_2
   1033            case WIDGET_ITEM_GET_YSIZE:
   1034              if (LineHeight) {
   \                     ??LISTWHEEL_OwnerDraw_5:
   \   000000C8   000058E3           CMP      R8,#+0
   1035                return LineHeight;
   \   000000CC   0800A011           MOVNE    R0,R8
   \   000000D0   08009D05           LDREQ    R0,[SP, #+8]
   \   000000D4   D0FFFFEA           B        ??LISTWHEEL_OwnerDraw_2
   1036              } else {
   1037                return ySizeItem;
   1038              }
   1039            case WIDGET_ITEM_DRAW:
   1040              Rect.x0 = pDrawItemInfo->x0 + LBorder;
   \                     ??LISTWHEEL_OwnerDraw_3:
   \   000000D8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000DC   000086E0           ADD      R0,R6,R0
   \   000000E0   B000CDE1           STRH     R0,[SP, #+0]
   1041              Rect.y0 = pDrawItemInfo->y0;
   \   000000E4   100094E5           LDR      R0,[R4, #+16]
   \   000000E8   B200CDE1           STRH     R0,[SP, #+2]
   1042              Rect.x1 = pDrawItemInfo->x1 - RBorder;
   \   000000EC   140094E5           LDR      R0,[R4, #+20]
   \   000000F0   070040E0           SUB      R0,R0,R7
   \   000000F4   B400CDE1           STRH     R0,[SP, #+4]
   1043              Rect.y1 = pDrawItemInfo->y1;
   \   000000F8   180094E5           LDR      R0,[R4, #+24]
   \   000000FC   B600CDE1           STRH     R0,[SP, #+6]
   1044              #if WM_SUPPORT_TRANSPARENCY
   1045                HasTrans = WM_GetHasTrans(pDrawItemInfo->hWin);
   \   00000100   000094E5           LDR      R0,[R4, #+0]
   \   00000104   ........           BL       WM_GetHasTrans
   \   00000108   0050A0E1           MOV      R5,R0
   1046              #else
   1047                HasTrans = 0;
   1048              #endif
   1049              GUI_SetBkColor(BkColor);
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   ........           BL       GUI_SetBkColor
   1050              GUI_SetColor(Color);
   \   00000114   0C009DE5           LDR      R0,[SP, #+12]
   \   00000118   ........           BL       GUI_SetColor
   1051              _FillStringInRect(pText, &Rect, Align, HasTrans);
   \   0000011C   04808BE2           ADD      R8,R11,#+4
   \   00000120   0800A0E1           MOV      R0,R8
   \   00000124   ........           BL       GUI__strlen
   \   00000128   0090A0E1           MOV      R9,R0
   \   0000012C   000055E3           CMP      R5,#+0
   \   00000130   0200A013           MOVNE    R0,#+2
   \   00000134   0200001A           BNE      ??LISTWHEEL_OwnerDraw_6
   \   00000138   0D00A0E1           MOV      R0,SP
   \   0000013C   ........           BL       GUI_ClearRectEx
   \   00000140   0000A0E3           MOV      R0,#+0
   \                     ??LISTWHEEL_OwnerDraw_6:
   \   00000144   ........           BL       GUI_SetTextMode
   \   00000148   0930A0E1           MOV      R3,R9
   \   0000014C   0A20A0E1           MOV      R2,R10
   \   00000150   0D10A0E1           MOV      R1,SP
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   ........           BL       GUI_DispStringInRectMax
   1052              if (HasTrans == 0) {
   \   0000015C   000055E3           CMP      R5,#+0
   \   00000160   ACFFFF1A           BNE      ??LISTWHEEL_OwnerDraw_1
   1053                if (LBorder) {
   \   00000164   000056E3           CMP      R6,#+0
   \   00000168   0500000A           BEQ      ??LISTWHEEL_OwnerDraw_7
   1054                  GUI_ClearRect(pDrawItemInfo->x0, pDrawItemInfo->y0, pDrawItemInfo->x0 + LBorder - 1, pDrawItemInfo->y1);
   \   0000016C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000170   183094E5           LDR      R3,[R4, #+24]
   \   00000174   001086E0           ADD      R1,R6,R0
   \   00000178   012041E2           SUB      R2,R1,#+1
   \   0000017C   101094E5           LDR      R1,[R4, #+16]
   \   00000180   ........           BL       GUI_ClearRect
   1055                }
   1056                if (RBorder) {
   \                     ??LISTWHEEL_OwnerDraw_7:
   \   00000184   000057E3           CMP      R7,#+0
   \   00000188   A2FFFF0A           BEQ      ??LISTWHEEL_OwnerDraw_1
   1057                  GUI_ClearRect(pDrawItemInfo->x1 - RBorder, pDrawItemInfo->y0, pDrawItemInfo->x1, pDrawItemInfo->y1);
   \   0000018C   142094E5           LDR      R2,[R4, #+20]
   \   00000190   183094E5           LDR      R3,[R4, #+24]
   \   00000194   101094E5           LDR      R1,[R4, #+16]
   \   00000198   070042E0           SUB      R0,R2,R7
   \   0000019C   ........           BL       GUI_ClearRect
   \   000001A0   9CFFFFEA           B        ??LISTWHEEL_OwnerDraw_1
   1058                }
   1059              }
   1060              break;
   1061            }
   1062            return 0;
   1063          }
   1064          
   1065          /*********************************************************************
   1066          *
   1067          *       LISTWHEEL_CreateEx
   1068          */

   \                                 In section .text, align 4, keep-with-next
   1069          LISTWHEEL_Handle LISTWHEEL_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
   1070                                          int WinFlags, int ExFlags, int Id, const GUI_ConstString * ppText)
   1071          {
   \                     LISTWHEEL_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   44509DE5           LDR      R5,[SP, #+68]
   \   00000024   48409DE5           LDR      R4,[SP, #+72]
   1072            LISTWHEEL_Handle hObj;
   1073            GUI_ARRAY ItemArray;
   1074            LISTWHEEL_OBJ * pObj;
   1075          
   1076            GUI_USE_PARA(ExFlags);
   1077            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
   1078            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, LISTWHEEL_Callback,
   1079                                          sizeof(LISTWHEEL_OBJ) - sizeof(WM_Obj));
   \   0000002C   5C00A0E3           MOV      R0,#+92
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable6
   \   00000038   04B08DE5           STR      R11,[SP, #+4]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   00A08DE5           STR      R10,[SP, #+0]
   \   00000044   0930A0E1           MOV      R3,R9
   \   00000048   0820A0E1           MOV      R2,R8
   \   0000004C   0710A0E1           MOV      R1,R7
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           BL       WM_CreateWindowAsChild
   \   00000058   0060B0E1           MOVS     R6,R0
   1080            if (hObj) {
   \   0000005C   3C00000A           BEQ      ??LISTWHEEL_CreateEx_0
   1081              ItemArray = GUI_ARRAY_Create();
   \   00000060   ........           BL       GUI_ARRAY_Create
   \   00000064   0080B0E1           MOVS     R8,R0
   1082              if (ItemArray) {
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   3700000A           BEQ      ??LISTWHEEL_CreateEx_1
   1083                pObj = (LISTWHEEL_OBJ *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   00000070   ........           BL       GUI_ALLOC_LockH
   \   00000074   0070A0E1           MOV      R7,R0
   1084                //
   1085                // Default initialization
   1086                //
   1087                WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   00000078   1020A0E3           MOV      R2,#+16
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   ........           BL       WIDGET__Init
   1088                LISTWHEEL_INIT_ID(pObj);
   1089                //
   1090                // Widget specific initialization
   1091                //
   1092                pObj->Widget.pEffect = &WIDGET_Effect_None;
   \   00000084   ........           LDR      R0,??DataTable6_1
   1093                pObj->ItemArray   = ItemArray;
   1094                pObj->Props       = LISTWHEEL_DefaultProps;
   \   00000088   ........           LDR      R1,??DataTable6_2
   \   0000008C   2C0087E5           STR      R0,[R7, #+44]
   \   00000090   348087E5           STR      R8,[R7, #+52]
   \   00000094   2C51B1E8           LDM      R1!,{R2,R3,R5,R8,R12,LR}
   \   00000098   3C0087E2           ADD      R0,R7,#+60
   \   0000009C   2C51A0E8           STM      R0!,{R2,R3,R5,R8,R12,LR}
   1095                pObj->pfOwnerDraw = LISTWHEEL_OwnerDraw;
   \   000000A0   ........           LDR      R0,??DataTable6_3
   \   000000A4   380087E5           STR      R0,[R7, #+56]
   1096                pObj->Destination = -1;
   \   000000A8   0000E0E3           MVN      R0,#+0
   \   000000AC   840087E5           STR      R0,[R7, #+132]
   1097                GUI_UNLOCK_H(pObj);
   \   000000B0   ........           BL       GUI_ALLOC_UnlockH
   1098                if (ppText) {
   \   000000B4   000054E3           CMP      R4,#+0
   \   000000B8   2500000A           BEQ      ??LISTWHEEL_CreateEx_0
   \   000000BC   ........           BL       GUI_Lock
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       GUI_ALLOC_LockH
   \   000000C8   345090E5           LDR      R5,[R0, #+52]
   \   000000CC   ........           BL       GUI_ALLOC_UnlockH
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   ........           BL       GUI_ARRAY_GetNumItems
   \   000000D8   0070B0E1           MOVS     R7,R0
   \   000000DC   1400000A           BEQ      ??LISTWHEEL_CreateEx_2
   \   000000E0   0780A0E1           MOV      R8,R7
   \   000000E4   010018E3           TST      R8,#0x1
   \   000000E8   0300000A           BEQ      ??LISTWHEEL_CreateEx_3
   \   000000EC   017047E2           SUB      R7,R7,#+1
   \   000000F0   0710A0E1           MOV      R1,R7
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           BL       GUI_ARRAY_DeleteItem
   \                     ??LISTWHEEL_CreateEx_3:
   \   000000FC   A880B0E1           LSRS     R8,R8,#+1
   \   00000100   0B00000A           BEQ      ??LISTWHEEL_CreateEx_2
   \                     ??LISTWHEEL_CreateEx_4:
   \   00000104   017047E2           SUB      R7,R7,#+1
   \   00000108   0710A0E1           MOV      R1,R7
   \   0000010C   0500A0E1           MOV      R0,R5
   \   00000110   ........           BL       GUI_ARRAY_DeleteItem
   \   00000114   017047E2           SUB      R7,R7,#+1
   \   00000118   0710A0E1           MOV      R1,R7
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           BL       GUI_ARRAY_DeleteItem
   \   00000124   018058E2           SUBS     R8,R8,#+1
   \   00000128   F5FFFF1A           BNE      ??LISTWHEEL_CreateEx_4
   \   0000012C   000000EA           B        ??LISTWHEEL_CreateEx_2
   \                     ??LISTWHEEL_CreateEx_5:
   \   00000130   ........           BL       LISTWHEEL_AddString
   \                     ??LISTWHEEL_CreateEx_2:
   \   00000134   041094E4           LDR      R1,[R4], #+4
   \   00000138   0600A0E1           MOV      R0,R6
   \   0000013C   000051E3           CMP      R1,#+0
   \   00000140   FAFFFF1A           BNE      ??LISTWHEEL_CreateEx_5
   \   00000144   ........           BL       WM_InvalidateWindow
   \   00000148   ........           BL       GUI_Unlock
   \   0000014C   000000EA           B        ??LISTWHEEL_CreateEx_0
   1099                  LISTWHEEL_SetText(hObj, ppText);
   1100                }
   1101              } else {
   1102                WM_DeleteWindow(hObj);
   \                     ??LISTWHEEL_CreateEx_1:
   \   00000150   ........           BL       WM_DeleteWindow
   1103              }
   1104            }
   1105            WM_UNLOCK();
   \                     ??LISTWHEEL_CreateEx_0:
   \   00000154   ........           BL       GUI_Unlock
   1106            return hObj;
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   14D08DE2           ADD      SP,SP,#+20
   \   00000160   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1107          }
   1108          
   1109          /*********************************************************************
   1110          *
   1111          *       LISTWHEEL_AddString
   1112          */

   \                                 In section .text, align 4, keep-with-next
   1113          void LISTWHEEL_AddString(LISTWHEEL_Handle hObj, const char * s) {
   \                     LISTWHEEL_AddString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0170A0E1           MOV      R7,R1
   1114            WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw;
   1115            WIDGET_ITEM_DRAW_INFO ItemInfo;
   1116            LISTWHEEL_ITEM * pItem;
   1117            LISTWHEEL_OBJ * pObj;
   1118            LISTWHEEL_ITEM Item = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   30D04DE2           SUB      SP,SP,#+48
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   002091E5           LDR      R2,[R1, #+0]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   0C0080E8           STM      R0,{R2,R3}
   1119            GUI_RECT RectInside;
   1120            GUI_ARRAY ItemArray;
   1121            unsigned ItemIndex;
   1122            int ySizeData;
   1123          
   1124            if (hObj && s) {
   \   00000028   000054E3           CMP      R4,#+0
   \   0000002C   00005713           CMPNE    R7,#+0
   \   00000030   3500000A           BEQ      ??LISTWHEEL_AddString_0
   1125              WM_LOCK();
   \   00000034   ........           BL       GUI_Lock
   1126              //
   1127              // Get properties of widget
   1128              //
   1129              WM_GetInsideRect(&RectInside);
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           BL       WM_GetInsideRect
   1130              pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GUI_ALLOC_LockH
   \   00000048   0060A0E1           MOV      R6,R0
   1131                GUI_SetFont(pObj->Props.pFont);
   \   0000004C   3C0096E5           LDR      R0,[R6, #+60]
   \   00000050   ........           BL       GUI_SetFont
   1132                ItemArray   = pObj->ItemArray;
   \   00000054   345096E5           LDR      R5,[R6, #+52]
   1133                pfOwnerDraw = pObj->pfOwnerDraw;
   \   00000058   388096E5           LDR      R8,[R6, #+56]
   1134              } GUI_UNLOCK_H(pObj);
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
   1135              ItemIndex = GUI_ARRAY_GetNumItems(ItemArray);
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       GUI_ARRAY_GetNumItems
   \   00000068   0090A0E1           MOV      R9,R0
   1136              //
   1137              // Set item properties
   1138              //
   1139              if (GUI_ARRAY_AddItem(ItemArray, &Item, sizeof(LISTWHEEL_ITEM) + strlen(s)) == 0) {
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   ........           BL       strlen
   \   00000074   082080E2           ADD      R2,R0,#+8
   \   00000078   08108DE2           ADD      R1,SP,#+8
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           BL       GUI_ARRAY_AddItem
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1E00001A           BNE      ??LISTWHEEL_AddString_1
   1140                pItem     = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, ItemIndex); {
   \   0000008C   0910A0E1           MOV      R1,R9
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000098   00A0A0E1           MOV      R10,R0
   1141                  strcpy(pItem->acText, s);
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   04008AE2           ADD      R0,R10,#+4
   \   000000A4   ........           BL       strcpy
   1142                  ItemInfo.p = pItem->pData;
   \   000000A8   00009AE5           LDR      R0,[R10, #+0]
   \   000000AC   2C008DE5           STR      R0,[SP, #+44]
   1143                  //
   1144                  // If there is no custom data use ItemInfo.p for passing the item handle
   1145                  //
   1146                  if (ItemInfo.p == NULL) {
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0300001A           BNE      ??LISTWHEEL_AddString_2
   1147                    ItemInfo.p = (void *)GUI_ARRAY_GethItem(ItemArray, ItemIndex);
   \   000000B8   0910A0E1           MOV      R1,R9
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       GUI_ARRAY_GethItem
   \   000000C4   2C008DE5           STR      R0,[SP, #+44]
   1148                  }
   1149                } GUI_UNLOCK_H(pItem);
   \                     ??LISTWHEEL_AddString_2:
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
   1150                //
   1151                // Get item size
   1152                //
   1153                ItemInfo.hWin      = hObj;
   1154                ItemInfo.ItemIndex = ItemIndex;
   1155                ItemInfo.Cmd       = WIDGET_ITEM_GET_YSIZE;
   \   000000CC   1910A0E3           MOV      R1,#+25
   \   000000D0   10408DE5           STR      R4,[SP, #+16]
   \   000000D4   18908DE5           STR      R9,[SP, #+24]
   \   000000D8   14108DE5           STR      R1,[SP, #+20]
   1156                ySizeData          = pfOwnerDraw(&ItemInfo);
   \   000000DC   10008DE2           ADD      R0,SP,#+16
   \   000000E0   38FF2FE1           BLX      R8
   \   000000E4   0050A0E1           MOV      R5,R0
   1157                //
   1158                // Set widget properties
   1159                //
   1160                pObj = LISTWHEEL_LOCK_H(hObj); {
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       GUI_ALLOC_LockH
   1161                  pObj->ySizeData += ySizeData;
   \   000000F0   801090E5           LDR      R1,[R0, #+128]
   \   000000F4   011085E0           ADD      R1,R5,R1
   \   000000F8   801080E5           STR      R1,[R0, #+128]
   1162                } GUI_UNLOCK_H(pObj);
   \   000000FC   ........           BL       GUI_ALLOC_UnlockH
   1163                //
   1164                // Invalidate object
   1165                //
   1166                WM_Invalidate(hObj);
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       WM_InvalidateWindow
   1167              }
   1168              WM_UNLOCK();
   \                     ??LISTWHEEL_AddString_1:
   \   00000108   ........           BL       GUI_Unlock
   1169            }
   1170          }
   \                     ??LISTWHEEL_AddString_0:
   \   0000010C   30D08DE2           ADD      SP,SP,#+48       ;; stack cleaning
   \   00000110   F087BDE8           POP      {R4-R10,PC}      ;; return
   1171          
   1172          /*********************************************************************
   1173          *
   1174          *       LISTWHEEL_SetFont
   1175          */

   \                                 In section .text, align 4, keep-with-next
   1176          void LISTWHEEL_SetFont(LISTWHEEL_Handle hObj, const GUI_FONT GUI_UNI_PTR * pFont) {
   \                     LISTWHEEL_SetFont:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   20D04DE2           SUB      SP,SP,#+32
   \   0000000C   0150A0E1           MOV      R5,R1
   1177            LISTWHEEL_OBJ * pObj;
   1178            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3300000A           BEQ      ??LISTWHEEL_SetFont_0
   1179              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1180              pObj = LISTWHEEL_LOCK_H(hObj);
   1181              pObj->Props.pFont = pFont;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   3C5080E5           STR      R5,[R0, #+60]
   1182              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1183              _RecalcDatasizeY(hObj);
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   00C0A0E3           MOV      R12,#+0
   \   00000040   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000044   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000048   0050A0E3           MOV      R5,#+0
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   0080A0E1           MOV      R8,R0
   \   00000058   386098E5           LDR      R6,[R8, #+56]
   \   0000005C   340098E5           LDR      R0,[R8, #+52]
   \   00000060   ........           BL       GUI_ARRAY_GetNumItems
   \   00000064   0070A0E1           MOV      R7,R0
   \   00000068   348098E5           LDR      R8,[R8, #+52]
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \   00000070   1920A0E3           MOV      R2,#+25
   \   00000074   04208DE5           STR      R2,[SP, #+4]
   \   00000078   00408DE5           STR      R4,[SP, #+0]
   \   0000007C   000057E3           CMP      R7,#+0
   \   00000080   1100000A           BEQ      ??LISTWHEEL_SetFont_1
   \                     ??LISTWHEEL_SetFont_2:
   \   00000084   017047E2           SUB      R7,R7,#+1
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   1C008DE5           STR      R0,[SP, #+28]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0300001A           BNE      ??LISTWHEEL_SetFont_3
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   0800A0E1           MOV      R0,R8
   \   000000AC   ........           BL       GUI_ARRAY_GethItem
   \   000000B0   1C008DE5           STR      R0,[SP, #+28]
   \                     ??LISTWHEEL_SetFont_3:
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   36FF2FE1           BLX      R6
   \   000000C0   055080E0           ADD      R5,R0,R5
   \   000000C4   000057E3           CMP      R7,#+0
   \   000000C8   EDFFFF1A           BNE      ??LISTWHEEL_SetFont_2
   \                     ??LISTWHEEL_SetFont_1:
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       GUI_ALLOC_LockH
   \   000000D4   805080E5           STR      R5,[R0, #+128]
   \   000000D8   ........           BL       GUI_ALLOC_UnlockH
   1184              WM_Invalidate(hObj);
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       WM_InvalidateWindow
   1185              WM_UNLOCK();
   \   000000E4   ........           BL       GUI_Unlock
   1186            }
   1187          }
   \                     ??LISTWHEEL_SetFont_0:
   \   000000E8   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000EC   F081BDE8           POP      {R4-R8,PC}       ;; return
   1188          
   1189          /*********************************************************************
   1190          *
   1191          *       LISTWHEEL_GetFont
   1192          */

   \                                 In section .text, align 4, keep-with-next
   1193          const GUI_FONT GUI_UNI_PTR * LISTWHEEL_GetFont(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetFont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1194            const GUI_FONT GUI_UNI_PTR * pFont = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1195            LISTWHEEL_OBJ * pObj;
   1196            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTWHEEL_GetFont_0
   1197              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1198              pObj = LISTWHEEL_LOCK_H(hObj);
   1199              pFont = pObj->Props.pFont;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   3C5090E5           LDR      R5,[R0, #+60]
   1200              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1201              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1202            }
   1203            return pFont;
   \                     ??LISTWHEEL_GetFont_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1204          }
   1205          
   1206          /*********************************************************************
   1207          *
   1208          *       LISTWHEEL_SetOwnerDraw
   1209          */

   \                                 In section .text, align 4, keep-with-next
   1210          void LISTWHEEL_SetOwnerDraw(LISTWHEEL_Handle hObj, WIDGET_DRAW_ITEM_FUNC * pfOwnerDraw) {
   \                     LISTWHEEL_SetOwnerDraw:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1211            LISTWHEEL_OBJ * pObj;
   1212          
   1213            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??LISTWHEEL_SetOwnerDraw_0
   1214              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1215              pObj = LISTWHEEL_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   1216              if (pfOwnerDraw) {
   \   00000024   000055E3           CMP      R5,#+0
   1217                pObj->pfOwnerDraw = pfOwnerDraw;
   1218              }else {
   1219                pObj->pfOwnerDraw = LISTWHEEL_OwnerDraw;
   \   00000028   ........           LDREQ    R5,??DataTable6_3
   \   0000002C   385080E5           STR      R5,[R0, #+56]
   1220              }
   1221              GUI_UNLOCK_H(pObj);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
   1222              WM_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
   1223              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
   1224            }
   1225          }
   \                     ??LISTWHEEL_SetOwnerDraw_0:
   \   00000040   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
   1226          
   1227          /*********************************************************************
   1228          *
   1229          *       LISTWHEEL__GetpStringLocked
   1230          *
   1231          *  Returns:
   1232          *    Pointer to the specified item
   1233          */

   \                                 In section .text, align 4, keep-with-next
   1234          const char * LISTWHEEL__GetpStringLocked(LISTWHEEL_Handle hObj, int Index) {
   \                     LISTWHEEL__GetpStringLocked:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
   1235            LISTWHEEL_OBJ * pObj;
   1236            const char * s = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1237            LISTWHEEL_ITEM * pItem;
   1238            pObj = LISTWHEEL_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   1239            pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(pObj->ItemArray, Index);
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   340090E5           LDR      R0,[R0, #+52]
   \   0000001C   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000020   0040A0E1           MOV      R4,R0
   1240            GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1241            if (pItem) {
   \   00000028   000054E3           CMP      R4,#+0
   1242              s = pItem->acText;
   \   0000002C   04508412           ADDNE    R5,R4,#+4
   1243            }
   1244            return s;
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1245          }
   1246          
   1247          /*********************************************************************
   1248          *
   1249          *       LISTWHEEL_GetNumItems
   1250          */

   \                                 In section .text, align 4, keep-with-next
   1251          int LISTWHEEL_GetNumItems(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetNumItems:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1252            LISTWHEEL_OBJ * pObj;
   1253            int r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1254          
   1255            if (hObj) {
   \   00000010   0700000A           BEQ      ??LISTWHEEL_GetNumItems_0
   1256              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1257              pObj = LISTWHEEL_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   1258              r = GUI_ARRAY_GetNumItems(pObj->ItemArray);
   \   00000020   340090E5           LDR      R0,[R0, #+52]
   \   00000024   ........           BL       GUI_ARRAY_GetNumItems
   \   00000028   0050A0E1           MOV      R5,R0
   1259              GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
   1260              WM_UNLOCK();
   \   00000030   ........           BL       GUI_Unlock
   1261            }
   1262            return r;
   \                     ??LISTWHEEL_GetNumItems_0:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1263          }
   1264          
   1265          /*********************************************************************
   1266          *
   1267          *       LISTWHEEL_GetItemText
   1268          */

   \                                 In section .text, align 4, keep-with-next
   1269          void LISTWHEEL_GetItemText(LISTWHEEL_Handle hObj, unsigned Index, char * pBuffer, int MaxSize) {
   \                     LISTWHEEL_GetItemText:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0080A0E1           MOV      R8,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   0240A0E1           MOV      R4,R2
   \   00000014   0350A0E1           MOV      R5,R3
   1270            unsigned NumItems;
   1271          
   1272            if (hObj) {
   \   00000018   000058E3           CMP      R8,#+0
   \   0000001C   2200000A           BEQ      ??LISTWHEEL_GetItemText_0
   1273              WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
   1274              NumItems = LISTWHEEL_GetNumItems(hObj);
   \   00000024   ........           BL       GUI_Lock
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   ........           BL       GUI_ALLOC_LockH
   \   00000030   340090E5           LDR      R0,[R0, #+52]
   \   00000034   ........           BL       GUI_ARRAY_GetNumItems
   \   00000038   0060A0E1           MOV      R6,R0
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   \   00000040   ........           BL       GUI_Unlock
   1275              if (Index < NumItems) {
   \   00000044   060059E1           CMP      R9,R6
   \   00000048   1600002A           BCS      ??LISTWHEEL_GetItemText_1
   1276                const char * pString;
   1277                int CopyLen;
   1278                pString = LISTWHEEL__GetpStringLocked(hObj, Index);
   \   0000004C   0060A0E3           MOV      R6,#+0
   \   00000050   0070A0E3           MOV      R7,#+0
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   0910A0E1           MOV      R1,R9
   \   00000060   340090E5           LDR      R0,[R0, #+52]
   \   00000064   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000068   0080A0E1           MOV      R8,R0
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \   00000070   000058E3           CMP      R8,#+0
   \   00000074   04708812           ADDNE    R7,R8,#+4
   1279                CopyLen = strlen(pString);
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   ........           BL       strlen
   \   00000080   0080A0E1           MOV      R8,R0
   1280                if (CopyLen > (MaxSize - 1)) {
   \   00000084   010045E2           SUB      R0,R5,#+1
   \   00000088   080050E1           CMP      R0,R8
   1281                  CopyLen = MaxSize - 1;
   \   0000008C   0080A0B1           MOVLT    R8,R0
   1282                }
   1283                GUI_MEMCPY(pBuffer, pString, CopyLen);
   \   00000090   0820A0E1           MOV      R2,R8
   \   00000094   0710A0E1           MOV      R1,R7
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       __aeabi_memcpy
   1284                GUI_UNLOCK_H(pString);
   \   000000A0   ........           BL       GUI_ALLOC_UnlockH
   1285                pBuffer[CopyLen] = 0;
   \   000000A4   0460C8E7           STRB     R6,[R8, +R4]
   1286              }
   1287              WM_UNLOCK();
   \                     ??LISTWHEEL_GetItemText_1:
   \   000000A8   ........           BL       GUI_Unlock
   1288            }
   1289          }
   \                     ??LISTWHEEL_GetItemText_0:
   \   000000AC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000B0   F083BDE8           POP      {R4-R9,PC}       ;; return
   1290          
   1291          /*********************************************************************
   1292          *
   1293          *       LISTWHEEL_SetItemData
   1294          */

   \                                 In section .text, align 4, keep-with-next
   1295          void LISTWHEEL_SetItemData(LISTWHEEL_Handle hObj, unsigned Index, void * pData) {
   \                     LISTWHEEL_SetItemData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   1296            LISTWHEEL_OBJ * pObj;
   1297            LISTWHEEL_ITEM * pItem;
   1298            unsigned NumItems;
   1299            GUI_ARRAY ItemArray;
   1300          
   1301            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0E00000A           BEQ      ??LISTWHEEL_SetItemData_0
   1302              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1303              //
   1304              // Get widget properties
   1305              //
   1306              pObj = LISTWHEEL_LOCK_H(hObj); {
   1307                ItemArray   = pObj->ItemArray;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   344090E5           LDR      R4,[R0, #+52]
   1308              } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1309              NumItems = GUI_ARRAY_GetNumItems(ItemArray);
   1310              if (Index < NumItems) {
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ARRAY_GetNumItems
   \   00000034   000055E1           CMP      R5,R0
   \   00000038   0400002A           BCS      ??LISTWHEEL_SetItemData_1
   1311                //
   1312                // Get data pointer of item
   1313                //
   1314                pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index); {
   1315                  pItem->pData = pData;
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000048   006080E5           STR      R6,[R0, #+0]
   1316                } GUI_UNLOCK_H(pItem);
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
   1317              }
   1318              WM_UNLOCK();
   \                     ??LISTWHEEL_SetItemData_1:
   \   00000050   ........           BL       GUI_Unlock
   1319            }
   1320          }
   \                     ??LISTWHEEL_SetItemData_0:
   \   00000054   7080BDE8           POP      {R4-R6,PC}       ;; return
   1321          
   1322          /*********************************************************************
   1323          *
   1324          *       LISTWHEEL_GetItemData
   1325          */

   \                                 In section .text, align 4, keep-with-next
   1326          void * LISTWHEEL_GetItemData(LISTWHEEL_Handle hObj, unsigned Index) {
   \                     LISTWHEEL_GetItemData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1327            LISTWHEEL_OBJ * pObj;
   1328            LISTWHEEL_ITEM * pItem;
   1329            unsigned NumItems;
   1330            GUI_ARRAY ItemArray;
   1331            void * pData = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
   1332          
   1333            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0E00000A           BEQ      ??LISTWHEEL_GetItemData_0
   1334              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1335              //
   1336              // Get widget properties
   1337              //
   1338              pObj = LISTWHEEL_LOCK_H(hObj); {
   1339                ItemArray   = pObj->ItemArray;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   344090E5           LDR      R4,[R0, #+52]
   1340              } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1341              NumItems = GUI_ARRAY_GetNumItems(ItemArray);
   1342              if (Index < NumItems) {
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ARRAY_GetNumItems
   \   00000034   000055E1           CMP      R5,R0
   \   00000038   0400002A           BCS      ??LISTWHEEL_GetItemData_1
   1343                //
   1344                // Get data pointer of item
   1345                //
   1346                pItem = (LISTWHEEL_ITEM *)GUI_ARRAY_GetpItemLocked(ItemArray, Index); {
   1347                  pData = pItem->pData;
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000048   006090E5           LDR      R6,[R0, #+0]
   1348                } GUI_UNLOCK_H(pItem);
   \   0000004C   ........           BL       GUI_ALLOC_UnlockH
   1349              }
   1350              WM_UNLOCK();
   \                     ??LISTWHEEL_GetItemData_1:
   \   00000050   ........           BL       GUI_Unlock
   1351            }
   1352            return pData;
   \                     ??LISTWHEEL_GetItemData_0:
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
   1353          }
   1354          
   1355          /*********************************************************************
   1356          *
   1357          *       LISTWHEEL_SetUserData
   1358          */

   \                                 In section .text, align 4, keep-with-next
   1359          void LISTWHEEL_SetUserData(LISTWHEEL_Handle hObj, void * pData) {
   \                     LISTWHEEL_SetUserData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1360            LISTWHEEL_OBJ * pObj;
   1361          
   1362            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0500000A           BEQ      ??LISTWHEEL_SetUserData_0
   1363              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1364              //
   1365              // Get widget properties
   1366              //
   1367              pObj = LISTWHEEL_LOCK_H(hObj); {
   1368                pObj->pData = pData;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   545080E5           STR      R5,[R0, #+84]
   1369              } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1370              WM_UNLOCK();
   \   0000002C   ........           BL       GUI_Unlock
   1371            }
   1372          }
   \                     ??LISTWHEEL_SetUserData_0:
   \   00000030   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1373          
   1374          /*********************************************************************
   1375          *
   1376          *       LISTWHEEL_GetUserData
   1377          */

   \                                 In section .text, align 4, keep-with-next
   1378          void * LISTWHEEL_GetUserData(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetUserData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1379            LISTWHEEL_OBJ * pObj;
   1380            void * pData = NULL;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1381          
   1382            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTWHEEL_GetUserData_0
   1383              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1384              //
   1385              // Get widget properties
   1386              //
   1387              pObj = LISTWHEEL_LOCK_H(hObj); {
   1388                pData = pObj->pData;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   545090E5           LDR      R5,[R0, #+84]
   1389              } GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1390              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1391            }
   1392            return pData;
   \                     ??LISTWHEEL_GetUserData_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1393          }
   1394          
   1395          /*********************************************************************
   1396          *
   1397          *       LISTWHEEL_SetSnapPosition
   1398          */

   \                                 In section .text, align 4, keep-with-next
   1399          void LISTWHEEL_SetSnapPosition(LISTWHEEL_Handle hObj, int SnapPosition) {
   \                     LISTWHEEL_SetSnapPosition:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1400            LISTWHEEL_OBJ * pObj;
   1401          
   1402            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0600000A           BEQ      ??LISTWHEEL_SetSnapPosition_0
   1403              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1404              pObj = LISTWHEEL_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   1405              pObj->SnapPosition = pObj->Pos = SnapPosition;
   \   00000024   705080E5           STR      R5,[R0, #+112]
   \   00000028   785080E5           STR      R5,[R0, #+120]
   1406              GUI_UNLOCK_H(pObj);
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
   1407              WM_UNLOCK();
   \   00000030   ........           BL       GUI_Unlock
   1408            }
   1409          }
   \                     ??LISTWHEEL_SetSnapPosition_0:
   \   00000034   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1410          
   1411          /*********************************************************************
   1412          *
   1413          *       LISTWHEEL_GetSnapPosition
   1414          */

   \                                 In section .text, align 4, keep-with-next
   1415          int LISTWHEEL_GetSnapPosition(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetSnapPosition:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1416            LISTWHEEL_OBJ * pObj;
   1417            int r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1418          
   1419            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTWHEEL_GetSnapPosition_0
   1420              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1421              pObj = LISTWHEEL_LOCK_H(hObj);
   1422              r = pObj->SnapPosition;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   785090E5           LDR      R5,[R0, #+120]
   1423              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1424              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1425            }
   1426            return r;
   \                     ??LISTWHEEL_GetSnapPosition_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1427          }
   1428          
   1429          /*********************************************************************
   1430          *
   1431          *       LISTWHEEL_SetTextAlign
   1432          */

   \                                 In section .text, align 4, keep-with-next
   1433          void LISTWHEEL_SetTextAlign(LISTWHEEL_Handle hObj, int Align) {
   \                     LISTWHEEL_SetTextAlign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1434            LISTWHEEL_OBJ * pObj;
   1435          
   1436            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0700000A           BEQ      ??LISTWHEEL_SetTextAlign_0
   1437              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1438              pObj = LISTWHEEL_LOCK_H(hObj);
   1439              pObj->Props.Align = Align;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   B055C0E1           STRH     R5,[R0, #+80]
   1440              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1441              WM_Invalidate(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       WM_InvalidateWindow
   1442              WM_UNLOCK();
   \   00000034   ........           BL       GUI_Unlock
   1443            }
   1444          }
   \                     ??LISTWHEEL_SetTextAlign_0:
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1445          
   1446          /*********************************************************************
   1447          *
   1448          *       LISTWHEEL_GetTextAlign
   1449          */

   \                                 In section .text, align 4, keep-with-next
   1450          int LISTWHEEL_GetTextAlign(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetTextAlign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1451            LISTWHEEL_OBJ * pObj;
   1452            int Align = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1453          
   1454            if (hObj) {
   \   00000010   0700000A           BEQ      ??LISTWHEEL_GetTextAlign_0
   1455              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1456              pObj = LISTWHEEL_LOCK_H(hObj);
   1457              Align = pObj->Props.Align;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   F055D0E1           LDRSH    R5,[R0, #+80]
   1458              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1459              WM_Invalidate(hObj);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       WM_InvalidateWindow
   1460              WM_UNLOCK();
   \   00000030   ........           BL       GUI_Unlock
   1461            }
   1462            return Align;
   \                     ??LISTWHEEL_GetTextAlign_0:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1463          }
   1464          
   1465          /*********************************************************************
   1466          *
   1467          *       LISTWHEEL_SetRBorder
   1468          */

   \                                 In section .text, align 4, keep-with-next
   1469          void LISTWHEEL_SetRBorder(LISTWHEEL_Handle hObj, unsigned BorderSize) {
   \                     LISTWHEEL_SetRBorder:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1470            LISTWHEEL_OBJ * pObj;
   1471          
   1472            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??LISTWHEEL_SetRBorder_0
   1473              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1474              pObj = LISTWHEEL_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   1475              if (pObj->RBorder != BorderSize) {
   \   00000024   601090E5           LDR      R1,[R0, #+96]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??LISTWHEEL_SetRBorder_1
   1476                pObj->RBorder = BorderSize;
   \   00000030   605080E5           STR      R5,[R0, #+96]
   1477                WM_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
   1478              }
   1479              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_SetRBorder_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   1480              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
   1481            }
   1482          }
   \                     ??LISTWHEEL_SetRBorder_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1483          
   1484          /*********************************************************************
   1485          *
   1486          *       LISTWHEEL_SetLBorder
   1487          */

   \                                 In section .text, align 4, keep-with-next
   1488          void LISTWHEEL_SetLBorder(LISTWHEEL_Handle hObj, unsigned BorderSize) {
   \                     LISTWHEEL_SetLBorder:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1489            LISTWHEEL_OBJ * pObj;
   1490          
   1491            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??LISTWHEEL_SetLBorder_0
   1492              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1493              pObj = LISTWHEEL_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   1494              if (pObj->LBorder != BorderSize) {
   \   00000024   5C1090E5           LDR      R1,[R0, #+92]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??LISTWHEEL_SetLBorder_1
   1495                pObj->LBorder = BorderSize;
   \   00000030   5C5080E5           STR      R5,[R0, #+92]
   1496                WM_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
   1497              }
   1498              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_SetLBorder_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   1499              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
   1500            }
   1501          }
   \                     ??LISTWHEEL_SetLBorder_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1502          
   1503          /*********************************************************************
   1504          *
   1505          *       LISTWHEEL_GetRBorder
   1506          */

   \                                 In section .text, align 4, keep-with-next
   1507          int LISTWHEEL_GetRBorder(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetRBorder:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1508            LISTWHEEL_OBJ * pObj;
   1509            int RBorder = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1510          
   1511            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTWHEEL_GetRBorder_0
   1512              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1513              pObj = LISTWHEEL_LOCK_H(hObj);
   1514              RBorder = pObj->RBorder;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   605090E5           LDR      R5,[R0, #+96]
   1515              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1516              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1517            }
   1518            return RBorder;
   \                     ??LISTWHEEL_GetRBorder_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1519          }
   1520          
   1521          /*********************************************************************
   1522          *
   1523          *       LISTWHEEL_GetLBorder
   1524          */

   \                                 In section .text, align 4, keep-with-next
   1525          int LISTWHEEL_GetLBorder(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetLBorder:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1526            LISTWHEEL_OBJ * pObj;
   1527            int LBorder = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1528          
   1529            if (hObj) {
   \   00000010   0500000A           BEQ      ??LISTWHEEL_GetLBorder_0
   1530              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1531              pObj = LISTWHEEL_LOCK_H(hObj);
   1532              LBorder = pObj->LBorder;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   5C5090E5           LDR      R5,[R0, #+92]
   1533              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
   1534              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
   1535            }
   1536            return LBorder;
   \                     ??LISTWHEEL_GetLBorder_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   1537          }
   1538          
   1539          /*********************************************************************
   1540          *
   1541          *       LISTWHEEL_SetLineHeight
   1542          */

   \                                 In section .text, align 4, keep-with-next
   1543          void LISTWHEEL_SetLineHeight(LISTWHEEL_Handle hObj, unsigned LineHeight) {
   \                     LISTWHEEL_SetLineHeight:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   24D04DE2           SUB      SP,SP,#+36
   \   0000000C   0150A0E1           MOV      R5,R1
   1544            LISTWHEEL_OBJ * pObj;
   1545            int Recalc = 0;
   \   00000010   0060A0E3           MOV      R6,#+0
   1546          
   1547            if (hObj) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   3900000A           BEQ      ??LISTWHEEL_SetLineHeight_0
   1548              WM_LOCK();
   \   0000001C   ........           BL       GUI_Lock
   1549              pObj = LISTWHEEL_LOCK_H(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   1550              if (pObj->LineHeight != LineHeight) {
   \   00000028   641090E5           LDR      R1,[R0, #+100]
   \   0000002C   050051E1           CMP      R1,R5
   \   00000030   0300000A           BEQ      ??LISTWHEEL_SetLineHeight_1
   1551                pObj->LineHeight = LineHeight;
   \   00000034   645080E5           STR      R5,[R0, #+100]
   1552                WM_Invalidate(hObj);
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       WM_InvalidateWindow
   1553                Recalc = 1;
   \   00000040   0160A0E3           MOV      R6,#+1
   1554              }
   1555              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_SetLineHeight_1:
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
   1556              if (Recalc) {
   \   00000048   000056E3           CMP      R6,#+0
   \   0000004C   2B00000A           BEQ      ??LISTWHEEL_SetLineHeight_2
   1557                _RecalcDatasizeY(hObj);
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0030A0E3           MOV      R3,#+0
   \   00000060   00C0A0E3           MOV      R12,#+0
   \   00000064   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000068   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   0000006C   0060A0E3           MOV      R6,#+0
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       GUI_ALLOC_LockH
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   387099E5           LDR      R7,[R9, #+56]
   \   00000080   340099E5           LDR      R0,[R9, #+52]
   \   00000084   ........           BL       GUI_ARRAY_GetNumItems
   \   00000088   0080A0E1           MOV      R8,R0
   \   0000008C   349099E5           LDR      R9,[R9, #+52]
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
   \   00000094   1910A0E3           MOV      R1,#+25
   \   00000098   04108DE5           STR      R1,[SP, #+4]
   \   0000009C   00408DE5           STR      R4,[SP, #+0]
   \   000000A0   000058E3           CMP      R8,#+0
   \   000000A4   1100000A           BEQ      ??LISTWHEEL_SetLineHeight_3
   \                     ??LISTWHEEL_SetLineHeight_4:
   \   000000A8   018048E2           SUB      R8,R8,#+1
   \   000000AC   0810A0E1           MOV      R1,R8
   \   000000B0   0900A0E1           MOV      R0,R9
   \   000000B4   ........           BL       GUI_ARRAY_GetpItemLocked
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   1C008DE5           STR      R0,[SP, #+28]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300001A           BNE      ??LISTWHEEL_SetLineHeight_5
   \   000000C8   0810A0E1           MOV      R1,R8
   \   000000CC   0900A0E1           MOV      R0,R9
   \   000000D0   ........           BL       GUI_ARRAY_GethItem
   \   000000D4   1C008DE5           STR      R0,[SP, #+28]
   \                     ??LISTWHEEL_SetLineHeight_5:
   \   000000D8   ........           BL       GUI_ALLOC_UnlockH
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   37FF2FE1           BLX      R7
   \   000000E4   066080E0           ADD      R6,R0,R6
   \   000000E8   000058E3           CMP      R8,#+0
   \   000000EC   EDFFFF1A           BNE      ??LISTWHEEL_SetLineHeight_4
   \                     ??LISTWHEEL_SetLineHeight_3:
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       GUI_ALLOC_LockH
   \   000000F8   806080E5           STR      R6,[R0, #+128]
   \   000000FC   ........           BL       GUI_ALLOC_UnlockH
   1558              }
   1559              WM_UNLOCK();
   \                     ??LISTWHEEL_SetLineHeight_2:
   \   00000100   ........           BL       GUI_Unlock
   1560            }
   1561          }
   \                     ??LISTWHEEL_SetLineHeight_0:
   \   00000104   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000108   F083BDE8           POP      {R4-R9,PC}       ;; return
   1562          
   1563          /*********************************************************************
   1564          *
   1565          *       LISTWHEEL_SetSel
   1566          */

   \                                 In section .text, align 4, keep-with-next
   1567          void LISTWHEEL_SetSel(LISTWHEEL_Handle hObj, int Sel) {
   \                     LISTWHEEL_SetSel:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1568            LISTWHEEL_OBJ * pObj;
   1569          
   1570            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??LISTWHEEL_SetSel_0
   1571              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1572              pObj = LISTWHEEL_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   1573              if (pObj->Sel != Sel) {
   \   00000024   681090E5           LDR      R1,[R0, #+104]
   \   00000028   050051E1           CMP      R1,R5
   \   0000002C   0200000A           BEQ      ??LISTWHEEL_SetSel_1
   1574                pObj->Sel = Sel;
   \   00000030   685080E5           STR      R5,[R0, #+104]
   1575                WM_Invalidate(hObj);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       WM_InvalidateWindow
   1576              }
   1577              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_SetSel_1:
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   1578              WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
   1579            }
   1580          }
   \                     ??LISTWHEEL_SetSel_0:
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1581          
   1582          /*********************************************************************
   1583          *
   1584          *       LISTWHEEL_GetSel
   1585          */

   \                                 In section .text, align 4, keep-with-next
   1586          int LISTWHEEL_GetSel(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetSel:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1587            LISTWHEEL_OBJ * pObj;
   1588            int Sel = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1589          
   1590            if (hObj) {
   \   00000010   0A00000A           BEQ      ??LISTWHEEL_GetSel_0
   1591              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1592              pObj = LISTWHEEL_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   1593              if (pObj->Sel != Sel) {
   \   00000020   680090E5           LDR      R0,[R0, #+104]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??LISTWHEEL_GetSel_1
   1594                Sel = pObj->Sel;
   \   0000002C   0050A0E1           MOV      R5,R0
   1595                WM_Invalidate(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
   1596              }
   1597              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_GetSel_1:
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   1598              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
   1599            }
   1600            return Sel;
   \                     ??LISTWHEEL_GetSel_0:
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1601          }
   1602          
   1603          /*********************************************************************
   1604          *
   1605          *       LISTWHEEL_GetLineHeight
   1606          */

   \                                 In section .text, align 4, keep-with-next
   1607          unsigned LISTWHEEL_GetLineHeight(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetLineHeight:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1608            LISTWHEEL_OBJ * pObj;
   1609            unsigned LineHeight = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   1610          
   1611            if (hObj) {
   \   00000010   0A00000A           BEQ      ??LISTWHEEL_GetLineHeight_0
   1612              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1613              pObj = LISTWHEEL_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   1614              if (pObj->LineHeight != LineHeight) {
   \   00000020   640090E5           LDR      R0,[R0, #+100]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??LISTWHEEL_GetLineHeight_1
   1615                LineHeight = pObj->LineHeight;
   \   0000002C   0050A0E1           MOV      R5,R0
   1616                WM_Invalidate(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
   1617              }
   1618              GUI_UNLOCK_H(pObj);
   \                     ??LISTWHEEL_GetLineHeight_1:
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   1619              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
   1620            }
   1621            return LineHeight;
   \                     ??LISTWHEEL_GetLineHeight_0:
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1622          }
   1623          
   1624          /*********************************************************************
   1625          *
   1626          *       LISTWHEEL_SetTextColor
   1627          */

   \                                 In section .text, align 4, keep-with-next
   1628          void LISTWHEEL_SetTextColor(LISTWHEEL_Handle hObj, unsigned int Index, GUI_COLOR Color) {
   \                     LISTWHEEL_SetTextColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   1629            LISTWHEEL_OBJ * pObj;
   1630          
   1631            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0A00000A           BEQ      ??LISTWHEEL_SetTextColor_0
   1632              if (Index < GUI_COUNTOF(pObj->Props.aBackColor)) {
   \   00000018   020055E3           CMP      R5,#+2
   \   0000001C   0800002A           BCS      ??LISTWHEEL_SetTextColor_0
   1633                WM_LOCK();
   \   00000020   ........           BL       GUI_Lock
   1634                pObj = LISTWHEEL_LOCK_H(hObj);
   1635                pObj->Props.aTextColor[Index] = Color;
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_ALLOC_LockH
   \   0000002C   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000030   486080E5           STR      R6,[R0, #+72]
   1636                GUI_UNLOCK_H(pObj);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
   1637                WM_Invalidate(hObj);
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       WM_InvalidateWindow
   1638                WM_UNLOCK();
   \   00000040   ........           BL       GUI_Unlock
   1639              }
   1640            }
   1641          }
   \                     ??LISTWHEEL_SetTextColor_0:
   \   00000044   7080BDE8           POP      {R4-R6,PC}       ;; return
   1642          
   1643          /*********************************************************************
   1644          *
   1645          *       LISTWHEEL_GetPos
   1646          */

   \                                 In section .text, align 4, keep-with-next
   1647          int LISTWHEEL_GetPos(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetPos:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1648            LISTWHEEL_OBJ * pObj;
   1649            int SnapPosition, Index = -1;
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   0040B0E1           MOVS     R4,R0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
   1650          
   1651            if (hObj) {
   \   00000014   0900000A           BEQ      ??LISTWHEEL_GetPos_0
   1652              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1653              pObj = LISTWHEEL_LOCK_H(hObj); {
   1654                SnapPosition = pObj->SnapPosition;
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   785090E5           LDR      R5,[R0, #+120]
   1655              } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1656              _GetDistToNextItem(hObj, SnapPosition, &Index);
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       _GetDistToNextItem
   1657              WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
   1658            }
   1659            return Index;
   \                     ??LISTWHEEL_GetPos_0:
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   1660          }
   1661          
   1662          /*********************************************************************
   1663          *
   1664          *       LISTWHEEL_GetVelocity
   1665          */

   \                                 In section .text, align 4, keep-with-next
   1666          int LISTWHEEL_GetVelocity(LISTWHEEL_Handle hObj) {
   \                     LISTWHEEL_GetVelocity:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   1667            LISTWHEEL_OBJ * pObj;
   1668            int Velocity;
   1669          
   1670            if (hObj) {
   \   0000000C   0500000A           BEQ      ??LISTWHEEL_GetVelocity_0
   1671              WM_LOCK();
   \   00000010   ........           BL       GUI_Lock
   1672              pObj = LISTWHEEL_LOCK_H(hObj); {
   1673          		Velocity = pObj->Velocity;
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_LockH
   \   0000001C   745090E5           LDR      R5,[R0, #+116]
   1674              } GUI_UNLOCK_H(pObj);
   \   00000020   ........           BL       GUI_ALLOC_UnlockH
   1675              WM_UNLOCK();
   \   00000024   ........           BL       GUI_Unlock
   1676            }
   1677            return Velocity;
   \                     ??LISTWHEEL_GetVelocity_0:
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
   1678          }
   1679          
   1680          /*********************************************************************
   1681          *
   1682          *       LISTWHEEL_SetText
   1683          */

   \                                 In section .text, align 4, keep-with-next
   1684          void LISTWHEEL_SetText(LISTWHEEL_Handle hObj, const GUI_ConstString * ppText) {
   \                     LISTWHEEL_SetText:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1685            int i;
   1686            const char * s;
   1687          
   1688            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   2600000A           BEQ      ??LISTWHEEL_SetText_0
   1689              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1690              if (ppText) {
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   2000000A           BEQ      ??LISTWHEEL_SetText_1
   1691                //
   1692                // Remove previous items
   1693                //
   1694                _RemoveItems(hObj);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_LockH
   \   00000028   346090E5           LDR      R6,[R0, #+52]
   \   0000002C   ........           BL       GUI_ALLOC_UnlockH
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           BL       GUI_ARRAY_GetNumItems
   \   00000038   0070B0E1           MOVS     R7,R0
   \   0000003C   1500000A           BEQ      ??LISTWHEEL_SetText_2
   \   00000040   0780A0E1           MOV      R8,R7
   \   00000044   010018E3           TST      R8,#0x1
   \   00000048   0300000A           BEQ      ??LISTWHEEL_SetText_3
   \   0000004C   017047E2           SUB      R7,R7,#+1
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       GUI_ARRAY_DeleteItem
   \                     ??LISTWHEEL_SetText_3:
   \   0000005C   A880B0E1           LSRS     R8,R8,#+1
   \   00000060   0C00000A           BEQ      ??LISTWHEEL_SetText_2
   \                     ??LISTWHEEL_SetText_4:
   \   00000064   017047E2           SUB      R7,R7,#+1
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       GUI_ARRAY_DeleteItem
   \   00000074   017047E2           SUB      R7,R7,#+1
   \   00000078   0710A0E1           MOV      R1,R7
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       GUI_ARRAY_DeleteItem
   \   00000084   018058E2           SUBS     R8,R8,#+1
   \   00000088   F5FFFF1A           BNE      ??LISTWHEEL_SetText_4
   1695                //
   1696                // Add new items
   1697                //
   1698                for (i = 0; (s = *(ppText + i)) != 0; i++) {
   \   0000008C   010000EA           B        ??LISTWHEEL_SetText_2
   1699                  LISTWHEEL_AddString(hObj, s);
   \                     ??LISTWHEEL_SetText_5:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       LISTWHEEL_AddString
   1700                }
   \                     ??LISTWHEEL_SetText_2:
   \   00000098   041095E4           LDR      R1,[R5], #+4
   \   0000009C   000051E3           CMP      R1,#+0
   \   000000A0   FAFFFF1A           BNE      ??LISTWHEEL_SetText_5
   1701              }
   1702              WM_Invalidate(hObj);
   \                     ??LISTWHEEL_SetText_1:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       WM_InvalidateWindow
   1703              WM_UNLOCK();
   \   000000AC   ........           BL       GUI_Unlock
   1704            }
   1705          }
   \                     ??LISTWHEEL_SetText_0:
   \   000000B0   F081BDE8           POP      {R4-R8,PC}       ;; return
   1706          
   1707          /*********************************************************************
   1708          *
   1709          *       LISTWHEEL_MoveToPos
   1710          */

   \                                 In section .text, align 4, keep-with-next
   1711          void LISTWHEEL_MoveToPos(LISTWHEEL_Handle hObj, unsigned int Index) {
   \                     LISTWHEEL_MoveToPos:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1712            LISTWHEEL_OBJ * pObj;
   1713            WM_HMEM hTimer;
   1714            int Pos, Destination;
   1715          
   1716            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   3000000A           BEQ      ??LISTWHEEL_MoveToPos_0
   1717              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1718              _StopAutoMove(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   586090E5           LDR      R6,[R0, #+88]
   \   00000024   0070A0E3           MOV      R7,#+0
   \   00000028   747080E5           STR      R7,[R0, #+116]
   \   0000002C   587080E5           STR      R7,[R0, #+88]
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
   \   00000034   000056E3           CMP      R6,#+0
   \   00000038   0100000A           BEQ      ??LISTWHEEL_MoveToPos_1
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       WM_DeleteTimer
   1719              pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??LISTWHEEL_MoveToPos_1:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       GUI_ALLOC_LockH
   1720                Pos          = pObj->Pos;
   \   0000004C   707090E5           LDR      R7,[R0, #+112]
   1721                Destination  = pObj->Destination;
   1722                hTimer       = pObj->hTimer;
   \   00000050   588090E5           LDR      R8,[R0, #+88]
   1723              } GUI_UNLOCK_H(pObj);
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
   1724              Destination = _GetDestination(hObj, Index);
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       _GetDestination
   \   00000064   0050A0E1           MOV      R5,R0
   1725              if (Destination != Pos) {
   \   00000068   070055E1           CMP      R5,R7
   \   0000006C   1800000A           BEQ      ??LISTWHEEL_MoveToPos_2
   1726                if (hTimer == 0) {
   \   00000070   000058E3           CMP      R8,#+0
   \   00000074   0E00001A           BNE      ??LISTWHEEL_MoveToPos_3
   1727                  hTimer = _CreateTimer(hObj, 0, TIMER_PERIOD, 0);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       GUI_ALLOC_h2p
   \   00000080   588090E5           LDR      R8,[R0, #+88]
   \   00000084   000058E3           CMP      R8,#+0
   \   00000088   0300000A           BEQ      ??LISTWHEEL_MoveToPos_4
   \   0000008C   1910A0E3           MOV      R1,#+25
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           BL       WM_RestartTimer
   \   00000098   050000EA           B        ??LISTWHEEL_MoveToPos_3
   \                     ??LISTWHEEL_MoveToPos_4:
   \   0000009C   0030A0E3           MOV      R3,#+0
   \   000000A0   1920A0E3           MOV      R2,#+25
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       WM_CreateTimer
   \   000000B0   0080A0E1           MOV      R8,R0
   1728                }
   1729                pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??LISTWHEEL_MoveToPos_3:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       GUI_ALLOC_LockH
   \   000000BC   0060A0E1           MOV      R6,R0
   1730                  pObj->Destination = Destination;
   \   000000C0   845086E5           STR      R5,[R6, #+132]
   1731                  pObj->hTimer      = hTimer;
   \   000000C4   588086E5           STR      R8,[R6, #+88]
   1732                  pObj->TimeTouched = GUI_GetTime();
   \   000000C8   ........           BL       GUI_GetTime
   \   000000CC   6C0086E5           STR      R0,[R6, #+108]
   1733                } GUI_UNLOCK_H(pObj);
   \   000000D0   ........           BL       GUI_ALLOC_UnlockH
   1734              }
   1735              WM_UNLOCK();
   \                     ??LISTWHEEL_MoveToPos_2:
   \   000000D4   ........           BL       GUI_Unlock
   1736            }
   1737          }
   \                     ??LISTWHEEL_MoveToPos_0:
   \   000000D8   F081BDE8           POP      {R4-R8,PC}       ;; return
   1738          
   1739          /*********************************************************************
   1740          *
   1741          *       LISTWHEEL_SetVelocity
   1742          */

   \                                 In section .text, align 4, keep-with-next
   1743          void LISTWHEEL_SetVelocity(LISTWHEEL_Handle hObj, int Velocity) {
   \                     LISTWHEEL_SetVelocity:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1744            LISTWHEEL_OBJ * pObj;
   1745            WM_HMEM hTimer;
   1746            int Destination;
   1747          
   1748            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   2100000A           BEQ      ??LISTWHEEL_SetVelocity_0
   1749              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
   1750              pObj = LISTWHEEL_LOCK_H(hObj); {
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   1751                Destination  = pObj->Destination;
   \   00000020   847090E5           LDR      R7,[R0, #+132]
   1752                hTimer       = pObj->hTimer;
   \   00000024   588090E5           LDR      R8,[R0, #+88]
   1753              } GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   1754              if (Destination == -1) {
   \   0000002C   010077E3           CMN      R7,#+1
   \   00000030   1800001A           BNE      ??LISTWHEEL_SetVelocity_1
   1755                if (hTimer == 0) {
   \   00000034   000058E3           CMP      R8,#+0
   \   00000038   0E00001A           BNE      ??LISTWHEEL_SetVelocity_2
   1756                  hTimer = _CreateTimer(hObj, 0, TIMER_PERIOD, 0);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       GUI_ALLOC_h2p
   \   00000044   588090E5           LDR      R8,[R0, #+88]
   \   00000048   000058E3           CMP      R8,#+0
   \   0000004C   0300000A           BEQ      ??LISTWHEEL_SetVelocity_3
   \   00000050   1910A0E3           MOV      R1,#+25
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   ........           BL       WM_RestartTimer
   \   0000005C   050000EA           B        ??LISTWHEEL_SetVelocity_2
   \                     ??LISTWHEEL_SetVelocity_3:
   \   00000060   0030A0E3           MOV      R3,#+0
   \   00000064   1920A0E3           MOV      R2,#+25
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       WM_CreateTimer
   \   00000074   0080A0E1           MOV      R8,R0
   1757                }
   1758                pObj = LISTWHEEL_LOCK_H(hObj); {
   \                     ??LISTWHEEL_SetVelocity_2:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       GUI_ALLOC_LockH
   \   00000080   0060A0E1           MOV      R6,R0
   1759                  pObj->Velocity    = Velocity;
   \   00000084   745086E5           STR      R5,[R6, #+116]
   1760                  pObj->hTimer      = hTimer;
   \   00000088   588086E5           STR      R8,[R6, #+88]
   1761                  pObj->TimeTouched = GUI_GetTime();
   \   0000008C   ........           BL       GUI_GetTime
   \   00000090   6C0086E5           STR      R0,[R6, #+108]
   1762                } GUI_UNLOCK_H(pObj);
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
   1763              }
   1764              WM_UNLOCK();
   \                     ??LISTWHEEL_SetVelocity_1:
   \   00000098   ........           BL       GUI_Unlock
   1765            }
   1766          }
   \                     ??LISTWHEEL_SetVelocity_0:
   \   0000009C   F081BDE8           POP      {R4-R8,PC}       ;; return
   1767          
   1768          /*********************************************************************
   1769          *
   1770          *       LISTWHEEL_SetPos
   1771          */

   \                                 In section .text, align 4, keep-with-next
   1772          void LISTWHEEL_SetPos(LISTWHEEL_Handle hObj, unsigned int Index) {
   \                     LISTWHEEL_SetPos:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
   1773            LISTWHEEL_OBJ * pObj;
   1774            int Pos, Destination, NumItems;
   1775          
   1776            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1700000A           BEQ      ??LISTWHEEL_SetPos_0
   1777              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
   1778              pObj = LISTWHEEL_LOCK_H(hObj); {
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0060A0E1           MOV      R6,R0
   1779                NumItems     = GUI_ARRAY_GetNumItems(pObj->ItemArray);
   \   00000028   340096E5           LDR      R0,[R6, #+52]
   \   0000002C   ........           BL       GUI_ARRAY_GetNumItems
   \   00000030   0070A0E1           MOV      R7,R0
   1780                Pos          = pObj->Pos;
   \   00000034   706096E5           LDR      R6,[R6, #+112]
   1781              } GUI_UNLOCK_H(pObj);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   1782              if (Index < (unsigned)NumItems) {
   \   0000003C   070055E1           CMP      R5,R7
   \   00000040   0B00002A           BCS      ??LISTWHEEL_SetPos_1
   1783                Destination = _GetDestination(hObj, Index);
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       _GetDestination
   \   00000050   0050A0E1           MOV      R5,R0
   1784                if (Destination != Pos) {
   \   00000054   060055E1           CMP      R5,R6
   \   00000058   0500000A           BEQ      ??LISTWHEEL_SetPos_1
   1785                  pObj = LISTWHEEL_LOCK_H(hObj); {
   1786                    pObj->Pos         = Destination;
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       GUI_ALLOC_LockH
   \   00000064   705080E5           STR      R5,[R0, #+112]
   1787                  } GUI_UNLOCK_H(pObj);
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
   1788                  WM_Invalidate(hObj);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       WM_InvalidateWindow
   1789                }
   1790              }
   1791              WM_UNLOCK();
   \                     ??LISTWHEEL_SetPos_1:
   \   00000074   ........           BL       GUI_Unlock
   1792            }
   1793          }
   \                     ??LISTWHEEL_SetPos_0:
   \   00000078   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000007C   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     LISTWHEEL_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     WIDGET_Effect_None

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     LISTWHEEL_DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     LISTWHEEL_OwnerDraw

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_3`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0L}>_2`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   1794          
   1795          #else                            /* Avoid problems with empty object modules */
   1796            void LISTWHEEL_C(void) {}
   1797          #endif
   1798          
   1799          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     LISTWHEEL_AddString             80
     LISTWHEEL_Callback              16
     LISTWHEEL_CreateEx              56
     LISTWHEEL_GetFont               16
     LISTWHEEL_GetItemData           16
     LISTWHEEL_GetItemText           32
     LISTWHEEL_GetLBorder            16
     LISTWHEEL_GetLineHeight         16
     LISTWHEEL_GetNumItems           16
     LISTWHEEL_GetPos                16
     LISTWHEEL_GetRBorder            16
     LISTWHEEL_GetSel                16
     LISTWHEEL_GetSnapPosition       16
     LISTWHEEL_GetTextAlign          16
     LISTWHEEL_GetUserData           16
     LISTWHEEL_GetVelocity           16
     LISTWHEEL_MoveToPos             24
     LISTWHEEL_OwnerDraw             56
     LISTWHEEL_SetFont               56
     LISTWHEEL_SetItemData           16
     LISTWHEEL_SetLBorder            16
     LISTWHEEL_SetLineHeight         64
     LISTWHEEL_SetOwnerDraw          16
     LISTWHEEL_SetPos                24
     LISTWHEEL_SetRBorder            16
     LISTWHEEL_SetSel                16
     LISTWHEEL_SetSnapPosition       16
     LISTWHEEL_SetText               24
     LISTWHEEL_SetTextAlign          16
     LISTWHEEL_SetTextColor          16
     LISTWHEEL_SetUserData           16
     LISTWHEEL_SetVelocity           24
     LISTWHEEL__GetpStringLocked     16
     _GetDestination                 72
     _GetDistToNextItem              72
     _OnPaint                        88
     _OnPidStateChange               24
     _OnPressed                      40
     _OnReleased                     80
     _OnTimer                        40
     _OnTouch                        32


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     LISTWHEEL_DefaultProps        24
     _OnPaint                     508
     _GetDistToNextItem           240
     _OnReleased                  372
     _OnPressed                   196
     _OnTouch                     264
     _OnPidStateChange            224
     _OnTimer                     520
     _GetDestination              228
     LISTWHEEL_Callback           188
     LISTWHEEL_OwnerDraw          420
     LISTWHEEL_CreateEx           356
     LISTWHEEL_AddString          276
     LISTWHEEL_SetFont            240
     LISTWHEEL_GetFont             56
     LISTWHEEL_SetOwnerDraw        72
     LISTWHEEL__GetpStringLocked   60
     LISTWHEEL_GetNumItems         64
     LISTWHEEL_GetItemText        180
     LISTWHEEL_SetItemData         88
     LISTWHEEL_GetItemData         92
     LISTWHEEL_SetUserData         56
     LISTWHEEL_GetUserData         56
     LISTWHEEL_SetSnapPosition     60
     LISTWHEEL_GetSnapPosition     56
     LISTWHEEL_SetTextAlign        64
     LISTWHEEL_GetTextAlign        64
     LISTWHEEL_SetRBorder          76
     LISTWHEEL_SetLBorder          76
     LISTWHEEL_GetRBorder          56
     LISTWHEEL_GetLBorder          56
     LISTWHEEL_SetLineHeight      268
     LISTWHEEL_SetSel              76
     LISTWHEEL_GetSel              76
     LISTWHEEL_GetLineHeight       76
     LISTWHEEL_SetTextColor        72
     LISTWHEEL_GetPos              76
     LISTWHEEL_GetVelocity         52
     LISTWHEEL_SetText            180
     LISTWHEEL_MoveToPos          220
     LISTWHEEL_SetVelocity        160
     LISTWHEEL_SetPos             128
     ??DataTable6                   4
     ??DataTable6_1                 4
     ??DataTable6_2                 4
     ??DataTable6_3                 4
     ?<Constant {0L}>_3            32
     ?<Constant {(void *)0}>        8
     ?<Constant {0L}>              32
     ?<Constant {0L}>_1            32
     ?<Constant {0L}>_2            32

 
    24 bytes in section .data
    96 bytes in section .rodata
 6 704 bytes in section .text
 
 6 704 bytes of CODE  memory
    96 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
