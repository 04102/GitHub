###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\PROGBAR_SetText.c                   #
#    Command line =  C:\DUII\TargetHW\GUI\PROGBAR_SetText.c -D DEBUG=1 -D     #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\PROGBAR_SetText.lst        #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\PROGBAR_SetText.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\PROGBAR_SetText.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : PROGBAR_SetText.c
     19          Purpose     : Implementation of progbar widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "PROGBAR_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Exported routines
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       PROGBAR_SetText
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void PROGBAR_SetText(PROGBAR_Handle hObj, const char * s) {
   \                     PROGBAR_SetText:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0170A0E1           MOV      R7,R1
     38            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3400000A           BEQ      ??PROGBAR_SetText_0
     39              PROGBAR_Obj * pObj;
     40              const GUI_FONT GUI_UNI_PTR * pOldFont;
     41              GUI_RECT r1, r2;
     42              char * pText;
     43              WM_HMEM hpText;
     44              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
     45              pObj = PROGBAR_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0050A0E1           MOV      R5,R0
     46              hpText = pObj->hpText;
   \   00000028   380095E5           LDR      R0,[R5, #+56]
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
     47              pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000030   4C0095E5           LDR      R0,[R5, #+76]
   \   00000034   ........           BL       GUI_SetFont
   \   00000038   0060A0E1           MOV      R6,R0
     48              pText = PROGBAR__GetTextLocked(pObj);
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           BL       PROGBAR__GetTextLocked
     49              PROGBAR__GetTextRect(pObj, &r1, pText);
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   04108DE2           ADD      R1,SP,#+4
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       PROGBAR__GetTextRect
     50              GUI_UNLOCK_H(pText);
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
     51              if (!s) {
   \   00000058   000057E3           CMP      R7,#+0
   \   0000005C   0700001A           BNE      ??PROGBAR_SetText_1
     52                pObj->Flags &= ~PROGBAR_SF_USER;
   \   00000060   6800D5E5           LDRB     R0,[R5, #+104]
     53                WM_InvalidateRect(hObj, &r1);
   \   00000064   04108DE2           ADD      R1,SP,#+4
   \   00000068   0200C0E3           BIC      R0,R0,#0x2
   \   0000006C   6800C5E5           STRB     R0,[R5, #+104]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       WM_InvalidateRect
     54                GUI_UNLOCK_H(pObj);
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
   \   0000007C   170000EA           B        ??PROGBAR_SetText_2
     55              } else {
     56                GUI_UNLOCK_H(pObj);
   \                     ??PROGBAR_SetText_1:
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
     57                if (GUI__SetText(&hpText, s)) {
   \   00000084   0710A0E1           MOV      R1,R7
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           BL       GUI__SetText
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1100000A           BEQ      ??PROGBAR_SetText_2
     58                  pObj = PROGBAR_LOCK_H(hObj);
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GUI_ALLOC_LockH
     59                  pObj->hpText = hpText;
   \   000000A0   00109DE5           LDR      R1,[SP, #+0]
     60                  pObj->Flags |= PROGBAR_SF_USER;
     61                  PROGBAR__GetTextRect(pObj, &r2, s);
   \   000000A4   0720A0E1           MOV      R2,R7
   \   000000A8   381080E5           STR      R1,[R0, #+56]
   \   000000AC   6810D0E5           LDRB     R1,[R0, #+104]
   \   000000B0   021081E3           ORR      R1,R1,#0x2
   \   000000B4   6810C0E5           STRB     R1,[R0, #+104]
   \   000000B8   0C108DE2           ADD      R1,SP,#+12
   \   000000BC   ........           BL       PROGBAR__GetTextRect
     62                  GUI_UNLOCK_H(pObj);
   \   000000C0   ........           BL       GUI_ALLOC_UnlockH
     63                  GUI_MergeRect(&r1, &r1, &r2);
   \   000000C4   0C208DE2           ADD      R2,SP,#+12
   \   000000C8   04108DE2           ADD      R1,SP,#+4
   \   000000CC   04008DE2           ADD      R0,SP,#+4
   \   000000D0   ........           BL       GUI_MergeRect
     64                  WM_InvalidateRect(hObj, &r1);
   \   000000D4   04108DE2           ADD      R1,SP,#+4
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       WM_InvalidateRect
     65                }
     66              }
     67              GUI_SetFont(pOldFont);
   \                     ??PROGBAR_SetText_2:
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           BL       GUI_SetFont
     68              WM_UNLOCK();
   \   000000E8   ........           BL       GUI_Unlock
     69            }
     70          }
   \                     ??PROGBAR_SetText_0:
   \   000000EC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return
     71          
     72          #else  /* avoid empty object files */
     73            void PROGBAR_SetText_C(void);
     74            void PROGBAR_SetText_C(void) {}
     75          #endif

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     PROGBAR_SetText     48


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     PROGBAR_SetText  244

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
