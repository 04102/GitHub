###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:47 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap.c                    #
#    Command line =  C:\DUII\TargetHW\GUI\GUI_DrawBitmap.c -D DEBUG=1 -D      #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI_DrawBitmap.lst         #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI_DrawBitmap.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI_DrawBitmap.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI_DrawBitmap.C
     19          Purpose     : Implementation of GUI_DrawBitmap
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GL_DrawBitmap
     34          *
     35          * Purpose:
     36          *  Translates the external bitmap format into an internal
     37          *  format. This turned out to be necessary as the internal
     38          *  format is easier to create and more flexible for routines
     39          *  that draw text-bitmaps.
     40          */

   \                                 In section .text, align 4, keep-with-next
     41          void GL_DrawBitmap(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0) {
   \                     GL_DrawBitmap:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0270A0E1           MOV      R7,R2
     42            GUI_DRAWMODE PrevDraw;
     43            const GUI_LOGPALETTE GUI_UNI_PTR * pPal;
     44            pPal = pBitmap->pPal;
   \   00000014   0C8095E5           LDR      R8,[R5, #+12]
     45            PrevDraw = GUI_SetDrawMode(0);  /* No Get... at this point */
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           BL       GUI_SetDrawMode
   \   00000020   0040A0E1           MOV      R4,R0
     46            GUI_SetDrawMode((pPal && pPal->HasTrans) ? (PrevDraw|GUI_DRAWMODE_TRANS) : PrevDraw &(~GUI_DRAWMODE_TRANS));
   \   00000024   000058E3           CMP      R8,#+0
   \   00000028   0400D815           LDRBNE   R0,[R8, #+4]
   \   0000002C   00005013           CMPNE    R0,#+0
   \   00000030   02008413           ORRNE    R0,R4,#0x2
   \   00000034   0200C403           BICEQ    R0,R4,#0x2
   \   00000038   ........           BL       GUI_SetDrawMode
     47            if (pBitmap->pMethods) {
   \   0000003C   10C095E5           LDR      R12,[R5, #+16]
   \   00000040   0C0095E5           LDR      R0,[R5, #+12]
   \   00000044   00005CE3           CMP      R12,#+0
   \   00000048   0C00000A           BEQ      ??GL_DrawBitmap_0
     48              pBitmap->pMethods->pfDraw(x0, y0, pBitmap->XSize ,pBitmap->YSize, (U8 const *)pBitmap->pData, pBitmap->pPal, 1, 1);
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0C108DE5           STR      R1,[SP, #+12]
   \   00000054   08108DE5           STR      R1,[SP, #+8]
   \   00000058   04008DE5           STR      R0,[SP, #+4]
   \   0000005C   080095E5           LDR      R0,[R5, #+8]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   00008DE5           STR      R0,[SP, #+0]
   \   00000068   B230D5E1           LDRH     R3,[R5, #+2]
   \   0000006C   B020D5E1           LDRH     R2,[R5, #+0]
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   00C09CE5           LDR      R12,[R12, #+0]
   \   00000078   3CFF2FE1           BLX      R12
   \   0000007C   130000EA           B        ??GL_DrawBitmap_1
     49            } else {
     50              const LCD_PIXELINDEX* pTrans;
     51              pTrans = LCD_GetpPalConvTable(pBitmap->pPal);
   \                     ??GL_DrawBitmap_0:
   \   00000080   ........           BL       LCD_GetpPalConvTable
     52              if (!pTrans) {
   \   00000084   B610D5E1           LDRH     R1,[R5, #+6]
   \   00000088   000050E3           CMP      R0,#+0
     53                pTrans = (pBitmap->BitsPerPixel != 1) ? NULL : LCD_pBkColorIndex;
   \   0000008C   01005103           CMPEQ    R1,#+1
   \   00000090   ........           LDREQ    R0,??DataTable1
   \   00000094   00009005           LDREQ    R0,[R0, #+0]
     54              }
     55              LCD_DrawBitmap( x0,y0
     56                              ,pBitmap->XSize ,pBitmap->YSize
     57                              ,1,1
     58                              ,pBitmap->BitsPerPixel
     59                              ,pBitmap->BytesPerLine
     60                              ,pBitmap->pData
     61                              ,pTrans);
   \   00000098   14008DE5           STR      R0,[SP, #+20]
   \   0000009C   080095E5           LDR      R0,[R5, #+8]
   \   000000A0   10008DE5           STR      R0,[SP, #+16]
   \   000000A4   B400D5E1           LDRH     R0,[R5, #+4]
   \   000000A8   08108DE5           STR      R1,[SP, #+8]
   \   000000AC   0710A0E1           MOV      R1,R7
   \   000000B0   0C008DE5           STR      R0,[SP, #+12]
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   04008DE5           STR      R0,[SP, #+4]
   \   000000BC   00008DE5           STR      R0,[SP, #+0]
   \   000000C0   B230D5E1           LDRH     R3,[R5, #+2]
   \   000000C4   B020D5E1           LDRH     R2,[R5, #+0]
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   ........           BL       LCD_DrawBitmap
     62            }
     63            GUI_SetDrawMode(PrevDraw);
   \                     ??GL_DrawBitmap_1:
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   18D08DE2           ADD      SP,SP,#+24
   \   000000D8   F041BDE8           POP      {R4-R8,LR}
   \   000000DC   ........           B        GUI_SetDrawMode  ;; tailcall
     64          }
     65          
     66          /*********************************************************************
     67          *
     68          *       GUI_DrawBitmap
     69          */

   \                                 In section .text, align 4, keep-with-next
     70          void GUI_DrawBitmap(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0) {
   \                     GUI_DrawBitmap:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     71            #if (GUI_WINSUPPORT)
     72              GUI_RECT r;
     73            #endif
     74            GUI_LOCK();
   \   00000014   ........           BL       GUI_Lock
     75            #if (GUI_WINSUPPORT)
     76              WM_ADDORG(x0,y0);
   \   00000018   ........           LDR      R0,??DataTable1_1
   \   0000001C   401090E5           LDR      R1,[R0, #+64]
   \   00000020   440090E5           LDR      R0,[R0, #+68]
   \   00000024   055081E0           ADD      R5,R1,R5
   \   00000028   066080E0           ADD      R6,R0,R6
     77              r.x1 = (r.x0 = x0) + pBitmap->XSize-1;
   \   0000002C   B050CDE1           STRH     R5,[SP, #+0]
   \   00000030   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000034   F010D4E1           LDRSH    R1,[R4, #+0]
     78              r.y1 = (r.y0 = y0) + pBitmap->YSize-1;
   \   00000038   B260CDE1           STRH     R6,[SP, #+2]
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   010040E2           SUB      R0,R0,#+1
   \   00000044   B400CDE1           STRH     R0,[SP, #+4]
   \   00000048   F200DDE1           LDRSH    R0,[SP, #+2]
   \   0000004C   F210D4E1           LDRSH    R1,[R4, #+2]
   \   00000050   000081E0           ADD      R0,R1,R0
   \   00000054   010040E2           SUB      R0,R0,#+1
   \   00000058   B600CDE1           STRH     R0,[SP, #+6]
     79              WM_ITERATE_START(&r) {
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           BL       WM__InitIVRSearch
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0600000A           BEQ      ??GUI_DrawBitmap_0
     80            #endif
     81            GL_DrawBitmap(pBitmap, x0, y0);
   \                     ??GUI_DrawBitmap_1:
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           BL       GL_DrawBitmap
     82            #if (GUI_WINSUPPORT)
     83              } WM_ITERATE_END();
   \   0000007C   ........           BL       WM__GetNextIVR
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   F8FFFF1A           BNE      ??GUI_DrawBitmap_1
     84            #endif
     85            GUI_UNLOCK();
   \                     ??GUI_DrawBitmap_0:
   \   00000088   ........           BL       GUI_Unlock
     86          }
   \   0000008C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000090   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     LCD_pBkColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     GUI_Context
     87          
     88          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     GL_DrawBitmap      48
     GUI_DrawBitmap     24


   Section sizes:

     Function/Label Bytes
     -------------- -----
     GL_DrawBitmap   224
     GUI_DrawBitmap  148
     ??DataTable1      4
     ??DataTable1_1    4

 
 380 bytes in section .text
 
 380 bytes of CODE memory

Errors: none
Warnings: none
