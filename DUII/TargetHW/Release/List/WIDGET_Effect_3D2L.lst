###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:39 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D2L.c                #
#    Command line =  C:\DUII\TargetHW\GUI\WIDGET_Effect_3D2L.c -D DEBUG=1 -D  #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\WIDGET_Effect_3D2L.lst     #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\WIDGET_Effect_3D2L.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\WIDGET_Effect_3D2L.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : WIDGET_Effect_3D2L.c
     19          Purpose     : Effect routines
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #include "WIDGET.h"
     27          #include "GUI_Debug.h"
     28          #include "GUI.h"
     29          #include "GUI_Private.h"
     30          #include "WM_Intern.h"
     31          
     32          #if GUI_WINSUPPORT
     33          
     34          /*********************************************************************
     35          *
     36          *       Static data
     37          *
     38          **********************************************************************
     39          */

   \                                 In section .data, align 4
     40          static GUI_COLOR _aColor[] = {
   \                     _aColor:
   \   00000000   606060009A9A       DC32 6316128, 10132122, 13684944, 15198183
   \              9A00D0D0D000
   \              E7E7E700    
     41            0x606060, 0x9A9A9A, 0xD0D0D0, 0xE7E7E7
     42          };
     43          
     44          /*********************************************************************
     45          *
     46          *       Static routines
     47          *
     48          **********************************************************************
     49          */
     50          /*********************************************************************
     51          *
     52          *       _DrawUpRect
     53          *
     54          *  Function description
     55          *    Draws an "Up" effect arround a given rectangle.
     56          *    This effect is used in different situations, but typically for an unpressed button
     57          *    which is supposed to "stick out".
     58          *
     59          * Add. info:
     60          *   This routine does not preserve the drawing colors for speed
     61          *   reasons. If this is required, it should be done in the calling
     62          *   routine.
     63          */

   \                                 In section .text, align 4, keep-with-next
     64          static void _DrawUpRect(const GUI_RECT* pRect) {
   \                     _DrawUpRect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     65            GUI_RECT r;
     66            r = *pRect;
   \   00000004   F040D0E1           LDRSH    R4,[R0, #+0]
   \   00000008   F250D0E1           LDRSH    R5,[R0, #+2]
   \   0000000C   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000010   F670D0E1           LDRSH    R7,[R0, #+6]
   \   00000014   ........           LDR      R0,??DataTable4
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
     67            /* Draw the upper left sides */
     68            LCD_SetColor(_aColor[2]);
   \   00000020   ........           BL       LCD_SetColor
     69            GUI_DrawHLine(r.y0, r.x0, r.x1 - 1);
   \   00000024   018046E2           SUB      R8,R6,#+1
   \   00000028   0820A0E1           MOV      R2,R8
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       GUI_DrawHLine
     70            GUI_DrawVLine(r.x0, r.y0 + 1, r.y1 - 1);
   \   00000038   019085E2           ADD      R9,R5,#+1
   \   0000003C   01A047E2           SUB      R10,R7,#+1
   \   00000040   0A20A0E1           MOV      R2,R10
   \   00000044   0910A0E1           MOV      R1,R9
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_DrawVLine
     71            LCD_SetColor(_aColor[3]);
   \   00000050   ........           LDR      R0,??DataTable4
   \   00000054   0C0090E5           LDR      R0,[R0, #+12]
   \   00000058   ........           BL       LCD_SetColor
     72            GUI_DrawHLine(r.y0 + 1, r.x0 + 1, r.x1 - 2);
   \   0000005C   01B084E2           ADD      R11,R4,#+1
   \   00000060   022046E2           SUB      R2,R6,#+2
   \   00000064   0B10A0E1           MOV      R1,R11
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   ........           BL       GUI_DrawHLine
   \   00000070   022047E2           SUB      R2,R7,#+2
   \   00000074   021085E2           ADD      R1,R5,#+2
   \   00000078   0B00A0E1           MOV      R0,R11
     73            GUI_DrawVLine(r.x0 + 1, r.y0 + 2, r.y1 - 2);
   \   0000007C   ........           BL       GUI_DrawVLine
     74            /* Draw the lower right sides */
     75            LCD_SetColor(_aColor[0]);
   \   00000080   ........           LDR      R0,??DataTable4
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   ........           BL       LCD_SetColor
     76            GUI_DrawHLine(r.y1, r.x0, r.x1);
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           BL       GUI_DrawHLine
     77            GUI_DrawVLine(r.x1, r.y0, r.y1 - 1);
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           BL       GUI_DrawVLine
     78            LCD_SetColor(_aColor[1]);
   \   000000AC   ........           LDR      R0,??DataTable4
   \   000000B0   040090E5           LDR      R0,[R0, #+4]
   \   000000B4   ........           BL       LCD_SetColor
     79            GUI_DrawHLine(r.y1 - 1, r.x0 + 1, r.x1 - 1);
   \   000000B8   0820A0E1           MOV      R2,R8
   \   000000BC   0B10A0E1           MOV      R1,R11
   \   000000C0   0A00A0E1           MOV      R0,R10
   \   000000C4   ........           BL       GUI_DrawHLine
     80            GUI_DrawVLine(r.x1 - 1, r.y0 + 1, r.y1 - 2);
   \   000000C8   022047E2           SUB      R2,R7,#+2
   \   000000CC   0910A0E1           MOV      R1,R9
   \   000000D0   0800A0E1           MOV      R0,R8
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   \   000000D8   F04FBDE8           POP      {R4-R11,LR}
   \   000000DC   ........           B        GUI_DrawVLine    ;; tailcall
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       _DrawUp
     86          *
     87          * Function description
     88          *   Gets the rectangle of the current window and uses _DrawUpRect()
     89          *   for drawing the effect.
     90          */

   \                                 In section .text, align 4, keep-with-next
     91          static void _DrawUp(void) {
   \                     _DrawUp:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
     92            GUI_RECT r;
     93            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
     94            _DrawUpRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawUpRect
     95          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
     96          
     97          /*********************************************************************
     98          *
     99          *       _DrawDownRect
    100          *
    101          * Function description
    102          *   Draws an "Down" effect arround a given rectangle.
    103          *   This effect is used in different situations, but typically for an edit widget
    104          *   which is supposed to "sunken".
    105          *
    106          * Add. info:
    107          *   This routine does not preserve the drawing colors for speed
    108          *   reasons. If this is required, it should be done in the calling
    109          *   routine.
    110          */

   \                                 In section .text, align 4, keep-with-next
    111          static void _DrawDownRect(const GUI_RECT* pRect) {
   \                     _DrawDownRect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    112            GUI_RECT r;
    113            r = *pRect;
   \   00000004   F040D0E1           LDRSH    R4,[R0, #+0]
   \   00000008   F250D0E1           LDRSH    R5,[R0, #+2]
   \   0000000C   F460D0E1           LDRSH    R6,[R0, #+4]
   \   00000010   F670D0E1           LDRSH    R7,[R0, #+6]
   \   00000014   ........           LDR      R0,??DataTable4
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   040090E5           LDR      R0,[R0, #+4]
    114            /* Draw the upper left sides */
    115            LCD_SetColor(_aColor[1]);
   \   00000020   ........           BL       LCD_SetColor
    116            GUI_DrawHLine(r.y0, r.x0, r.x1 - 1);
   \   00000024   018046E2           SUB      R8,R6,#+1
   \   00000028   0820A0E1           MOV      R2,R8
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       GUI_DrawHLine
    117            GUI_DrawVLine(r.x0, r.y0 + 1, r.y1 - 1);
   \   00000038   019085E2           ADD      R9,R5,#+1
   \   0000003C   01A047E2           SUB      R10,R7,#+1
   \   00000040   0A20A0E1           MOV      R2,R10
   \   00000044   0910A0E1           MOV      R1,R9
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_DrawVLine
    118            LCD_SetColor(_aColor[0]);
   \   00000050   ........           LDR      R0,??DataTable4
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   ........           BL       LCD_SetColor
    119            GUI_DrawHLine(r.y0 + 1, r.x0 + 1, r.x1 - 2);
   \   0000005C   01B084E2           ADD      R11,R4,#+1
   \   00000060   022046E2           SUB      R2,R6,#+2
   \   00000064   0B10A0E1           MOV      R1,R11
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   ........           BL       GUI_DrawHLine
   \   00000070   022047E2           SUB      R2,R7,#+2
   \   00000074   021085E2           ADD      R1,R5,#+2
   \   00000078   0B00A0E1           MOV      R0,R11
    120            GUI_DrawVLine(r.x0 + 1, r.y0 + 2, r.y1 - 2);
   \   0000007C   ........           BL       GUI_DrawVLine
    121            /* Draw the lower right sides */
    122            LCD_SetColor(_aColor[3]);
   \   00000080   ........           LDR      R0,??DataTable4
   \   00000084   0C0090E5           LDR      R0,[R0, #+12]
   \   00000088   ........           BL       LCD_SetColor
    123            GUI_DrawHLine(r.y1, r.x0, r.x1);
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           BL       GUI_DrawHLine
    124            GUI_DrawVLine(r.x1, r.y0, r.y1 - 1);
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           BL       GUI_DrawVLine
    125            LCD_SetColor(_aColor[2]);
   \   000000AC   ........           LDR      R0,??DataTable4
   \   000000B0   080090E5           LDR      R0,[R0, #+8]
   \   000000B4   ........           BL       LCD_SetColor
    126            GUI_DrawHLine(r.y1 - 1, r.x0 + 1, r.x1 - 1);
   \   000000B8   0820A0E1           MOV      R2,R8
   \   000000BC   0B10A0E1           MOV      R1,R11
   \   000000C0   0A00A0E1           MOV      R0,R10
   \   000000C4   ........           BL       GUI_DrawHLine
    127            GUI_DrawVLine(r.x1 - 1, r.y0 + 1, r.y1 - 2);
   \   000000C8   022047E2           SUB      R2,R7,#+2
   \   000000CC   0910A0E1           MOV      R1,R9
   \   000000D0   0800A0E1           MOV      R0,R8
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   \   000000D8   F04FBDE8           POP      {R4-R11,LR}
   \   000000DC   ........           B        GUI_DrawVLine    ;; tailcall
    128          }
    129          
    130          /*********************************************************************
    131          *
    132          *       _DrawDown
    133          *
    134          * Function description
    135          *   Gets the rectangle of the current window and uses _DrawDownRect()
    136          *   for drawing the effect.
    137          */

   \                                 In section .text, align 4, keep-with-next
    138          static void _DrawDown(void) {
   \                     _DrawDown:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
    139            GUI_RECT r;
    140            WM_GetClientRect(&r);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       WM_GetClientRect
    141            _DrawDownRect(&r);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       _DrawDownRect
    142          }
   \   00000018   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    143          
    144          /*********************************************************************
    145          *
    146          *       Public routines
    147          *
    148          **********************************************************************
    149          */
    150          /*********************************************************************
    151          *
    152          *       WIDGET_EFFECT_3D2L_SetColor
    153          */

   \                                 In section .text, align 4, keep-with-next
    154          void WIDGET_EFFECT_3D2L_SetColor(unsigned Index, GUI_COLOR Color) {
    155            if (Index < GUI_COUNTOF(_aColor)) {
   \                     WIDGET_EFFECT_3D2L_SetColor:
   \   00000000   040050E3           CMP      R0,#+4
    156              _aColor[Index] = Color;
   \   00000004   ........           LDRCC    R2,??DataTable4
   \   00000008   00118237           STRCC    R1,[R2, +R0, LSL #+2]
    157            }
    158          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    159          
    160          /*********************************************************************
    161          *
    162          *       WIDGET_EFFECT_3D2L_GetColor
    163          */

   \                                 In section .text, align 4, keep-with-next
    164          GUI_COLOR WIDGET_EFFECT_3D2L_GetColor(unsigned Index) {
    165            GUI_COLOR r;
    166            r = 0;
   \                     WIDGET_EFFECT_3D2L_GetColor:
   \   00000000   0010A0E3           MOV      R1,#+0
    167            if (Index < GUI_COUNTOF(_aColor)) {
   \   00000004   040050E3           CMP      R0,#+4
    168              r = _aColor[Index];
   \   00000008   ........           LDRCC    R1,??DataTable4
   \   0000000C   00119137           LDRCC    R1,[R1, +R0, LSL #+2]
    169            }
    170            return r;
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    171          }
    172          
    173          /*********************************************************************
    174          *
    175          *       WIDGET_EFFECT_3D2L_GetNumColors
    176          */

   \                                 In section .text, align 4, keep-with-next
    177          int WIDGET_EFFECT_3D2L_GetNumColors(void) {
    178            return GUI_COUNTOF(_aColor);
   \                     WIDGET_EFFECT_3D2L_GetNumColors:
   \   00000000   0400A0E3           MOV      R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return
    179          }
    180          
    181          /*********************************************************************
    182          *
    183          *       WIDGET_Effect_3D2L
    184          *
    185          * Purpose:
    186          *   Structure of type WIDGET_EFFECT which contains the function pointers
    187          *   used to draw the effect. It also contains the effect size
    188          *   which specifies the number of pixels used by the effect frame.
    189          */

   \                                 In section .rodata, align 4, keep-with-next
    190          const WIDGET_EFFECT WIDGET_Effect_3D2L = {
   \                     WIDGET_Effect_3D2L:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   02000000....       DC32 2, _DrawUp, _DrawUpRect, _DrawDown, _DrawDownRect
   \              ............
   \              ............
   \              ....        
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     _aColor
    191            2,
    192            _DrawUp,
    193            _DrawUpRect,
    194            _DrawDown,
    195            _DrawDownRect,
    196          };
    197          
    198          #else                            /* Avoid problems with empty object modules */
    199            void WIDGET_Effect_3D2L_C(void) {}
    200          #endif /* GUI_WINSUPPORT */
    201          
    202          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     WIDGET_EFFECT_3D2L_GetColor         0
     WIDGET_EFFECT_3D2L_GetNumColors
                                         0
     WIDGET_EFFECT_3D2L_SetColor         0
     _DrawDown                          16
     _DrawDownRect                      40
     _DrawUp                            16
     _DrawUpRect                        40


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _aColor                          16
     _DrawUpRect                     224
     _DrawUp                          32
     _DrawDownRect                   224
     _DrawDown                        32
     WIDGET_EFFECT_3D2L_SetColor      16
     WIDGET_EFFECT_3D2L_GetColor      24
     WIDGET_EFFECT_3D2L_GetNumColors
                                       8
     WIDGET_Effect_3D2L               28
     ??DataTable4                      4

 
  16 bytes in section .data
  28 bytes in section .rodata
 564 bytes in section .text
 
 564 bytes of CODE  memory
  28 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
