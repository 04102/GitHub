###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:14:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\EDIT.c                              #
#    Command line =  C:\DUII\TargetHW\GUI\EDIT.c -D DEBUG=1 -D                #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\EDIT.lst                   #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\EDIT.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\EDIT.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : EDIT.c
     19          Purpose     : Implementation of edit widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          
     26          #define EDIT_C       /* Required to generate intermodule data */
     27          
     28          #include "EDIT.h"
     29          #include "GUI_Debug.h"
     30          #include "GUI_Private.h"
     31          #include "EDIT_Private.h"
     32          
     33          #if GUI_WINSUPPORT
     34          
     35          /*********************************************************************
     36          *
     37          *       Private config defaults
     38          *
     39          **********************************************************************
     40          */
     41          
     42          /* Define default fonts */
     43          #ifndef EDIT_FONT_DEFAULT
     44            #if   WIDGET_USE_SCHEME_SMALL
     45              #define EDIT_FONT_DEFAULT &GUI_Font13_1
     46            #elif WIDGET_USE_SCHEME_MEDIUM
     47              #define EDIT_FONT_DEFAULT &GUI_Font16_1
     48            #elif WIDGET_USE_SCHEME_LARGE
     49              #define EDIT_FONT_DEFAULT &GUI_Font24_1
     50            #endif
     51          #endif
     52          
     53          #ifndef EDIT_ALIGN_DEFAULT
     54            #define EDIT_ALIGN_DEFAULT GUI_TA_LEFT | GUI_TA_VCENTER
     55          #endif
     56          
     57          /* Define colors */
     58          #ifndef EDIT_BKCOLOR0_DEFAULT
     59            #define EDIT_BKCOLOR0_DEFAULT 0xC0C0C0
     60          #endif
     61          
     62          #ifndef EDIT_BKCOLOR1_DEFAULT
     63            #define EDIT_BKCOLOR1_DEFAULT GUI_WHITE
     64          #endif
     65          
     66          #ifndef EDIT_TEXTCOLOR0_DEFAULT
     67            #define EDIT_TEXTCOLOR0_DEFAULT GUI_BLACK
     68          #endif
     69          
     70          #ifndef EDIT_TEXTCOLOR1_DEFAULT
     71            #define EDIT_TEXTCOLOR1_DEFAULT GUI_BLACK
     72          #endif
     73          
     74          #ifndef EDIT_BORDER_DEFAULT
     75            #define EDIT_BORDER_DEFAULT 1
     76          #endif
     77          
     78          /*********************************************************************
     79          *
     80          *       Static data
     81          *
     82          **********************************************************************
     83          */

   \                                 In section .data, align 4
     84          EDIT_PROPS EDIT__DefaultProps = {
   \                     EDIT__DefaultProps:
   \   00000000   0C0000000100       DC32 12, 1, GUI_Font13_1, 0, 0, 12632256, 16777215
   \              0000........
   \              000000000000
   \              0000C0C0C000
   \              FFFFFF00    
     85            EDIT_ALIGN_DEFAULT,
     86            EDIT_BORDER_DEFAULT,
     87            EDIT_FONT_DEFAULT,
     88            {
     89              EDIT_TEXTCOLOR0_DEFAULT,
     90              EDIT_TEXTCOLOR1_DEFAULT,
     91            },
     92            {
     93              EDIT_BKCOLOR0_DEFAULT,
     94              EDIT_BKCOLOR1_DEFAULT
     95            }
     96          };
     97          
     98          /*********************************************************************
     99          *
    100          *       Static routines
    101          *
    102          **********************************************************************
    103          */
    104          /*********************************************************************
    105          *
    106          *       _CalcSizes
    107          */

   \                                 In section .text, align 4, keep-with-next
    108          static void _CalcSizes(EDIT_Handle hObj, EDIT_Obj * pObj, GUI_RECT * pFillRect, GUI_RECT * pInsideRect, GUI_RECT * pTextRect, GUI_RECT * pInvertRect, int * pCursorWidth, int ManageSelection) {
   \                     _CalcSizes:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0290A0E1           MOV      R9,R2
   \   00000010   03A0A0E1           MOV      R10,R3
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   2C609DE5           LDR      R6,[SP, #+44]
   \   0000001C   30709DE5           LDR      R7,[SP, #+48]
    109            const char GUI_UNI_PTR * pText = NULL;
   \   00000020   00B0A0E3           MOV      R11,#+0
   \   00000024   0080A0E3           MOV      R8,#+0
    110            int IsEnabled;
    111            IsEnabled = WM__IsEnabled(hObj);
   \   00000028   ........           BL       WM__IsEnabled
    112            /* Set colors and font */
    113            LCD_SetBkColor(pObj->Props.aBkColor[IsEnabled]);
   \   0000002C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   740090E5           LDR      R0,[R0, #+116]
   \   00000038   ........           BL       LCD_SetBkColor
    114            LCD_SetColor(pObj->Props.aTextColor[IsEnabled]);
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   6C0090E5           LDR      R0,[R0, #+108]
   \   00000044   ........           BL       LCD_SetColor
    115            GUI_SetFont(pObj->Props.pFont);
   \   00000048   680094E5           LDR      R0,[R4, #+104]
   \   0000004C   ........           BL       GUI_SetFont
    116            /* Calculate size */
    117            WIDGET__GetInsideRect(&pObj->Widget, pFillRect);
   \   00000050   0910A0E1           MOV      R1,R9
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       WIDGET__GetInsideRect
    118            if (pObj->hpText) {
   \   0000005C   340094E5           LDR      R0,[R4, #+52]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0100000A           BEQ      ??_CalcSizes_0
    119              pText = (const char *)GUI_LOCK_H(pObj->hpText);
   \   00000068   ........           BL       GUI_ALLOC_LockH
   \   0000006C   0080A0E1           MOV      R8,R0
    120            }
    121            *pInsideRect = *pFillRect;
   \                     ??_CalcSizes_0:
   \   00000070   0A00A0E1           MOV      R0,R10
   \   00000074   0910A0E1           MOV      R1,R9
   \   00000078   0820A0E3           MOV      R2,#+8
   \   0000007C   ........           BL       __aeabi_memcpy
    122            pInsideRect->x0 += pObj->Props.Border + EDIT_XOFF;
   \   00000080   F000DAE1           LDRSH    R0,[R10, #+0]
   \   00000084   641094E5           LDR      R1,[R4, #+100]
    123            pInsideRect->x1 -= pObj->Props.Border + EDIT_XOFF;
    124            GUI__CalcTextRect(pText, pInsideRect, pTextRect, pObj->Props.Align);
   \   00000088   0520A0E1           MOV      R2,R5
   \   0000008C   011081E2           ADD      R1,R1,#+1
   \   00000090   000081E0           ADD      R0,R1,R0
   \   00000094   B000CAE1           STRH     R0,[R10, #+0]
   \   00000098   F400DAE1           LDRSH    R0,[R10, #+4]
   \   0000009C   641094E5           LDR      R1,[R4, #+100]
   \   000000A0   010040E0           SUB      R0,R0,R1
   \   000000A4   010040E2           SUB      R0,R0,#+1
   \   000000A8   B400CAE1           STRH     R0,[R10, #+4]
   \   000000AC   603094E5           LDR      R3,[R4, #+96]
   \   000000B0   0A10A0E1           MOV      R1,R10
   \   000000B4   0800A0E1           MOV      R0,R8
   \   000000B8   ........           BL       GUI__CalcTextRect
    125            /* Calculate position and size of cursor */
    126            if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
   \   000000BC   3200D4E5           LDRB     R0,[R4, #+50]
   \   000000C0   010010E3           TST      R0,#0x1
   \   000000C4   5800000A           BEQ      ??_CalcSizes_1
    127              int NumChars;
    128              *pCursorWidth = ((pObj->XSizeCursor > 0) ? (pObj->XSizeCursor) : (1));
   \   000000C8   5500D4E5           LDRB     R0,[R4, #+85]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0100A003           MOVEQ    R0,#+1
   \   000000D4   000087E5           STR      R0,[R7, #+0]
    129              NumChars    = GUI__GetNumChars(pText);
   \   000000D8   0800A0E1           MOV      R0,R8
   \   000000DC   ........           BL       GUI__GetNumChars
   \   000000E0   0090A0E1           MOV      R9,R0
    130              if (pText) {
   \   000000E4   000058E3           CMP      R8,#+0
   \   000000E8   5200000A           BEQ      ??_CalcSizes_2
    131                U16 Char;
    132                int i, IsRTL = 0;
   \   000000EC   00B08DE5           STR      R11,[SP, #+0]
    133                if ((pObj->EditMode != GUI_EDIT_MODE_INSERT) || ((pObj->SelSize) && ManageSelection)) {
   \   000000F0   5400D4E5           LDRB     R0,[R4, #+84]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0400001A           BNE      ??_CalcSizes_3
   \   000000FC   500094E5           LDR      R0,[R4, #+80]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   34009D15           LDRNE    R0,[SP, #+52]
   \   00000108   00005013           CMPNE    R0,#+0
   \   0000010C   2800000A           BEQ      ??_CalcSizes_4
    134                  if (pObj->CursorPos < NumChars) {
   \                     ??_CalcSizes_3:
   \   00000110   4C0094E5           LDR      R0,[R4, #+76]
   \   00000114   090050E1           CMP      R0,R9
   \   00000118   300000AA           BGE      ??_CalcSizes_5
    135                    if ((pObj->SelSize) && (ManageSelection)) {
   \   0000011C   500094E5           LDR      R0,[R4, #+80]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   34009D15           LDRNE    R0,[SP, #+52]
   \   00000128   00005013           CMPNE    R0,#+0
   \   0000012C   1900000A           BEQ      ??_CalcSizes_6
    136                      *pCursorWidth = 0;
   \   00000130   00B087E5           STR      R11,[R7, #+0]
    137                      for (i = pObj->CursorPos; i < (int)(pObj->CursorPos + pObj->SelSize); i++) {
   \   00000134   4CA094E5           LDR      R10,[R4, #+76]
   \   00000138   501094E5           LDR      R1,[R4, #+80]
   \   0000013C   0A0081E0           ADD      R0,R1,R10
   \   00000140   00005AE1           CMP      R10,R0
   \   00000144   100000AA           BGE      ??_CalcSizes_7
    138                        Char = GUI__GetCursorCharacter(pText, i, NumChars, 0);
   \                     ??_CalcSizes_8:
   \   00000148   0030A0E3           MOV      R3,#+0
   \   0000014C   0920A0E1           MOV      R2,R9
   \   00000150   0A10A0E1           MOV      R1,R10
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   ........           BL       GUI__GetCursorCharacter
    139                        *pCursorWidth += GUI_GetCharDistX(Char);
   \   0000015C   ........           BL       GUI_GetCharDistX
   \   00000160   001097E5           LDR      R1,[R7, #+0]
    140                      }
   \   00000164   01A08AE2           ADD      R10,R10,#+1
   \   00000168   010080E0           ADD      R0,R0,R1
   \   0000016C   000087E5           STR      R0,[R7, #+0]
   \   00000170   4C1094E5           LDR      R1,[R4, #+76]
   \   00000174   502094E5           LDR      R2,[R4, #+80]
   \   00000178   011082E0           ADD      R1,R2,R1
   \   0000017C   01005AE1           CMP      R10,R1
   \   00000180   F0FFFFBA           BLT      ??_CalcSizes_8
    141                      if (!*pCursorWidth) {
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   1400001A           BNE      ??_CalcSizes_5
    142                        *pCursorWidth = 1;
   \                     ??_CalcSizes_7:
   \   0000018C   0100A0E3           MOV      R0,#+1
   \                     ??_CalcSizes_9:
   \   00000190   000087E5           STR      R0,[R7, #+0]
   \   00000194   110000EA           B        ??_CalcSizes_5
    143                      }
    144                    } else {
    145                      Char = GUI__GetCursorCharacter(pText, pObj->CursorPos, NumChars, &IsRTL);
   \                     ??_CalcSizes_6:
   \   00000198   0D30A0E1           MOV      R3,SP
   \   0000019C   0920A0E1           MOV      R2,R9
   \   000001A0   4C1094E5           LDR      R1,[R4, #+76]
   \   000001A4   0800A0E1           MOV      R0,R8
   \   000001A8   ........           BL       GUI__GetCursorCharacter
    146                      *pCursorWidth = GUI_GetCharDistX(Char);
   \   000001AC   ........           BL       GUI_GetCharDistX
   \   000001B0   F6FFFFEA           B        ??_CalcSizes_9
    147                    }
    148                  }
    149                } else {
    150                  if (GUI__BIDI_Enabled == 1) {
   \                     ??_CalcSizes_4:
   \   000001B4   ........           LDR      R0,??DataTable2
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   010050E3           CMP      R0,#+1
   \   000001C0   0600001A           BNE      ??_CalcSizes_5
    151                    IsRTL = _pfGUI__BIDI_GetCharDir(pText, NumChars, pObj->CursorPos);
   \   000001C4   ........           LDR      R3,??DataTable2_1
   \   000001C8   4C2094E5           LDR      R2,[R4, #+76]
   \   000001CC   0910A0E1           MOV      R1,R9
   \   000001D0   0800A0E1           MOV      R0,R8
   \   000001D4   003093E5           LDR      R3,[R3, #+0]
   \   000001D8   33FF2FE1           BLX      R3
   \   000001DC   00008DE5           STR      R0,[SP, #+0]
    152                  }
    153                }
    154                *pInvertRect = *pTextRect;
   \                     ??_CalcSizes_5:
   \   000001E0   0600A0E1           MOV      R0,R6
   \   000001E4   0510A0E1           MOV      R1,R5
   \   000001E8   0820A0E3           MOV      R2,#+8
   \   000001EC   ........           BL       __aeabi_memcpy
    155                if (IsRTL) {
   \   000001F0   00009DE5           LDR      R0,[SP, #+0]
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   0300000A           BEQ      ??_CalcSizes_10
    156                  pInvertRect->x0 -= *pCursorWidth;
   \   000001FC   F000D6E1           LDRSH    R0,[R6, #+0]
   \   00000200   001097E5           LDR      R1,[R7, #+0]
   \   00000204   010040E0           SUB      R0,R0,R1
   \   00000208   B000C6E1           STRH     R0,[R6, #+0]
    157                }
    158                pInvertRect->x0 += GUI__GetCursorPosX(pText, pObj->CursorPos, NumChars);
   \                     ??_CalcSizes_10:
   \   0000020C   0920A0E1           MOV      R2,R9
   \   00000210   4C1094E5           LDR      R1,[R4, #+76]
   \   00000214   0800A0E1           MOV      R0,R8
   \   00000218   ........           BL       GUI__GetCursorPosX
   \   0000021C   F010D6E1           LDRSH    R1,[R6, #+0]
   \   00000220   010080E0           ADD      R0,R0,R1
   \   00000224   B000C6E1           STRH     R0,[R6, #+0]
   \   00000228   010000EA           B        ??_CalcSizes_11
    159              }
    160            }
    161            if (pText) {
   \                     ??_CalcSizes_1:
   \   0000022C   000058E3           CMP      R8,#+0
   \   00000230   0000000A           BEQ      ??_CalcSizes_2
    162              GUI_UNLOCK_H(pText);
   \                     ??_CalcSizes_11:
   \   00000234   ........           BL       GUI_ALLOC_UnlockH
    163            }
    164          }
   \                     ??_CalcSizes_2:
   \   00000238   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000023C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    165          
    166          /*********************************************************************
    167          *
    168          *       _Paint
    169          */

   \                                 In section .text, align 4, keep-with-next
    170          static void _Paint(EDIT_Handle hObj, int Complete) {
   \                     _Paint:
   \   00000000   D0412DE9           PUSH     {R4,R6-R8,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   0080A0E1           MOV      R8,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    171            EDIT_Obj * pObj;
    172            int CursorWidth;
    173            const char GUI_UNI_PTR * pText = NULL;
   \   00000010   0060A0E3           MOV      R6,#+0
    174            GUI_RECT rFillRect, rInside, rText, rInvert;
    175          
    176            pObj = EDIT_LOCK_H(hObj);
   \   00000014   ........           BL       GUI_ALLOC_LockH
   \   00000018   0070A0E1           MOV      R7,R0
    177            _CalcSizes(hObj, pObj, &rFillRect, &rInside, &rText, &rInvert, &CursorWidth, Complete);
   \   0000001C   10008DE2           ADD      R0,SP,#+16
   \   00000020   08008DE5           STR      R0,[SP, #+8]
   \   00000024   14008DE2           ADD      R0,SP,#+20
   \   00000028   04008DE5           STR      R0,[SP, #+4]
   \   0000002C   24008DE2           ADD      R0,SP,#+36
   \   00000030   00008DE5           STR      R0,[SP, #+0]
   \   00000034   0C408DE5           STR      R4,[SP, #+12]
   \   00000038   2C308DE2           ADD      R3,SP,#+44
   \   0000003C   1C208DE2           ADD      R2,SP,#+28
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           BL       _CalcSizes
    178            if (pObj->hpText) {
   \   0000004C   340097E5           LDR      R0,[R7, #+52]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200000A           BEQ      ??_Paint_0
    179              pText = (const char *)GUI_LOCK_H(pObj->hpText);
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   0060A0E1           MOV      R6,R0
    180            }
    181            /* WM loop */
    182            WM_ITERATE_START(NULL) {
   \   00000060   0000A0E3           MOV      R0,#+0
   \                     ??_Paint_0:
   \   00000064   ........           BL       WM__InitIVRSearch
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1900000A           BEQ      ??_Paint_1
    183              /* Set clipping rectangle */
    184              WM_SetUserClipRect(&rFillRect);
   \                     ??_Paint_2:
   \   00000070   1C008DE2           ADD      R0,SP,#+28
   \   00000074   ........           BL       WM_SetUserClipRect
    185              if (Complete) {
   \   00000078   000054E3           CMP      R4,#+0
   \   0000007C   0400000A           BEQ      ??_Paint_3
    186                /* Display text */
    187                WIDGET__FillStringInRect(pText, &rFillRect, &rInside, &rText);
   \   00000080   24308DE2           ADD      R3,SP,#+36
   \   00000084   2C208DE2           ADD      R2,SP,#+44
   \   00000088   1C108DE2           ADD      R1,SP,#+28
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   ........           BL       WIDGET__FillStringInRect
    188              }
    189              /* Display cursor if needed */
    190              if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
   \                     ??_Paint_3:
   \   00000094   3200D7E5           LDRB     R0,[R7, #+50]
   \   00000098   010010E3           TST      R0,#0x1
   \   0000009C   0600000A           BEQ      ??_Paint_4
    191                GUI_InvertRect(rInvert.x0, rInvert.y0, rInvert.x0 + CursorWidth - 1, rInvert.y1);
   \   000000A0   F401DDE1           LDRSH    R0,[SP, #+20]
   \   000000A4   10109DE5           LDR      R1,[SP, #+16]
   \   000000A8   FA31DDE1           LDRSH    R3,[SP, #+26]
   \   000000AC   011080E0           ADD      R1,R0,R1
   \   000000B0   012041E2           SUB      R2,R1,#+1
   \   000000B4   F611DDE1           LDRSH    R1,[SP, #+22]
   \   000000B8   ........           BL       GUI_InvertRect
    192              }
    193              WM_SetUserClipRect(NULL);
   \                     ??_Paint_4:
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   ........           BL       WM_SetUserClipRect
    194              /* Draw the 3D effect (if configured) */
    195              WIDGET__EFFECT_DrawDown(&pObj->Widget);
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   ........           BL       WIDGET__EFFECT_DrawDown
    196            } WM_ITERATE_END();
   \   000000CC   ........           BL       WM__GetNextIVR
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   E5FFFF1A           BNE      ??_Paint_2
    197            if (Complete) {
   \                     ??_Paint_1:
   \   000000D8   000054E3           CMP      R4,#+0
   \   000000DC   0200000A           BEQ      ??_Paint_5
    198              WM_RestartTimer(pObj->hTimer, 0);
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   7C0097E5           LDR      R0,[R7, #+124]
   \   000000E8   ........           BL       WM_RestartTimer
    199            }
    200            GUI_UNLOCK_H(pObj);
   \                     ??_Paint_5:
   \   000000EC   ........           BL       GUI_ALLOC_UnlockH
    201            if (pText) {
   \   000000F0   000056E3           CMP      R6,#+0
   \   000000F4   0000000A           BEQ      ??_Paint_6
    202              GUI_UNLOCK_H(pText);
   \   000000F8   ........           BL       GUI_ALLOC_UnlockH
    203            }
    204          }
   \                     ??_Paint_6:
   \   000000FC   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   00000100   D081BDE8           POP      {R4,R6-R8,PC}    ;; return
    205          
    206          /*********************************************************************
    207          *
    208          *       _InvertCursor
    209          */
    210          static void _InvertCursor(EDIT_Handle hObj) {
    211            _Paint(hObj, 0);
    212          }
    213          
    214          /*********************************************************************
    215          *
    216          *       _Delete
    217          */
    218          static void _Delete(EDIT_Handle hObj) {
    219            EDIT_Obj * pObj;
    220            pObj = EDIT_LOCK_H(hObj);
    221            GUI_ALLOC_FreePtr(&pObj->hpText);
    222            GUI_UNLOCK_H(pObj);
    223          }
    224          
    225          /*********************************************************************
    226          *
    227          *       _IncrementBuffer
    228          *
    229          * Increments the buffer size by AddBytes.
    230          */
    231          static int _IncrementBuffer(EDIT_Handle hObj, unsigned AddBytes) {
    232            EDIT_Obj * pObj;
    233            WM_HMEM hNew;
    234            WM_HMEM hpText;
    235            int NewSize;
    236            pObj = EDIT_LOCK_H(hObj);
    237            hpText = pObj->hpText;
    238            NewSize = pObj->BufferSize + AddBytes;
    239            GUI_UNLOCK_H(pObj);
    240            hNew = GUI_ALLOC_Realloc(hpText, NewSize);
    241            if (hNew) {
    242              if (!(hpText)) {
    243                char * pText;
    244                pText  = (char *)GUI_LOCK_H(hNew);
    245                *pText = 0;
    246                GUI_UNLOCK_H(pText);
    247              }
    248              pObj = EDIT_LOCK_H(hObj);
    249              pObj->BufferSize = NewSize;
    250              pObj->hpText     = hNew;
    251              GUI_UNLOCK_H(pObj);
    252              return 1;
    253            }
    254            return 0;
    255          }
    256          
    257          /*********************************************************************
    258          *
    259          *       _IsSpaceInBuffer
    260          *
    261          * Checks the available space in the buffer. If there is not enough
    262          * space left this function attempts to get more.
    263          *
    264          * Returns:
    265          *  1 = requested space is available
    266          *  0 = failed to get enough space
    267          */

   \                                 In section .text, align 4, keep-with-next
    268          static int _IsSpaceInBuffer(EDIT_Handle hObj, int BytesNeeded) {
   \                     _IsSpaceInBuffer:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    269            int NumBytes = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
    270            EDIT_Obj * pObj;
    271            pObj = EDIT_LOCK_H(hObj);
   \   00000010   ........           BL       GUI_ALLOC_LockH
   \   00000014   0070A0E1           MOV      R7,R0
    272            if (pObj->hpText) {
   \   00000018   340097E5           LDR      R0,[R7, #+52]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300000A           BEQ      ??_IsSpaceInBuffer_0
    273              char * pText;
    274              pText = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000024   ........           BL       GUI_ALLOC_LockH
    275              NumBytes = strlen(pText);
   \   00000028   ........           BL       strlen
   \   0000002C   0060A0E1           MOV      R6,R0
    276              GUI_UNLOCK_H(pText);
   \   00000030   ........           BL       GUI_ALLOC_UnlockH
    277            }
    278            BytesNeeded = (BytesNeeded + NumBytes + 1) - pObj->BufferSize;
   \                     ??_IsSpaceInBuffer_0:
   \   00000034   BA13D7E1           LDRH     R1,[R7, #+58]
   \   00000038   050086E0           ADD      R0,R6,R5
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   017040E0           SUB      R7,R0,R1
    279            GUI_UNLOCK_H(pObj);
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
   \   00000048   0050A0E3           MOV      R5,#+0
    280            if (BytesNeeded > 0) {
   \   0000004C   010057E3           CMP      R7,#+1
   \   00000050   150000BA           BLT      ??_IsSpaceInBuffer_1
    281              if (!_IncrementBuffer(hObj, BytesNeeded + EDIT_REALLOC_SIZE)) {
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       GUI_ALLOC_LockH
   \   0000005C   346090E5           LDR      R6,[R0, #+52]
   \   00000060   BA03D0E1           LDRH     R0,[R0, #+58]
   \   00000064   000087E0           ADD      R0,R7,R0
   \   00000068   107080E2           ADD      R7,R0,#+16
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
   \   00000070   0710A0E1           MOV      R1,R7
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   ........           BL       GUI_ALLOC_Realloc
   \   0000007C   0080B0E1           MOVS     R8,R0
   \   00000080   0B00000A           BEQ      ??_IsSpaceInBuffer_2
   \   00000084   000056E3           CMP      R6,#+0
   \   00000088   0200001A           BNE      ??_IsSpaceInBuffer_3
   \   0000008C   ........           BL       GUI_ALLOC_LockH
   \   00000090   0050C0E5           STRB     R5,[R0, #+0]
   \   00000094   ........           BL       GUI_ALLOC_UnlockH
   \                     ??_IsSpaceInBuffer_3:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       GUI_ALLOC_LockH
   \   000000A0   BA73C0E1           STRH     R7,[R0, #+58]
   \   000000A4   348080E5           STR      R8,[R0, #+52]
   \   000000A8   ........           BL       GUI_ALLOC_UnlockH
    282                return 0;
    283              }
    284            }
    285            return 1;
   \                     ??_IsSpaceInBuffer_1:
   \   000000AC   0100A0E3           MOV      R0,#+1
   \   000000B0   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??_IsSpaceInBuffer_2:
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   F081BDE8           POP      {R4-R8,PC}
    286          }
    287          
    288          /*********************************************************************
    289          *
    290          *       _CharsAreAvailable
    291          *
    292          * Checks weither the maximum number of characters is reached or not.
    293          *
    294          * Returns:
    295          *  1 = requested number of chars are available
    296          *  0 = maximum number of chars have reached
    297          */
    298          static int _CharsAreAvailable(EDIT_Obj * pObj, int CharsNeeded) {
    299            if ((CharsNeeded > 0) && (pObj->MaxLen > 0)) {
    300              int NumChars = 0;
    301              if (pObj->hpText) {
    302                char * pText;
    303                pText = (char *)GUI_LOCK_H(pObj->hpText);
    304                NumChars = GUI__GetNumChars(pText);
    305                GUI_UNLOCK_H(pText);
    306              }
    307              if ((CharsNeeded + NumChars) > pObj->MaxLen) {
    308                return 0;
    309              }
    310            }
    311            return 1;
    312          }
    313          
    314          /*********************************************************************
    315          *
    316          *       _DeleteChar
    317          *
    318          * Deletes a character at the current cursor position and moves
    319          * all bytes after the cursor position.
    320          */
    321          static void _DeleteChar(EDIT_Handle hObj) {
    322            EDIT_Obj * pObj;
    323            WM_HMEM hpText;
    324            int CursorPos;
    325            pObj = EDIT_LOCK_H(hObj);
    326            hpText = pObj->hpText;
    327            CursorPos = pObj->CursorPos;
    328            GUI_UNLOCK_H(pObj);
    329            if (hpText) {
    330              unsigned CursorOffset;
    331              char * pText;
    332              pText = (char *)GUI_LOCK_H(hpText);
    333              CursorOffset = GUI_UC__NumChars2NumBytes(pText, CursorPos);
    334              if (CursorOffset < strlen(pText)) {
    335                int NumBytes;
    336                pText += CursorOffset;
    337                NumBytes = GUI_UC_GetCharSize(pText);
    338                strcpy(pText, pText + NumBytes);
    339                GUI_UNLOCK_H(pText);
    340                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
    341              } else {
    342                GUI_UNLOCK_H(pText);
    343              }
    344            }
    345          }
    346          
    347          /*********************************************************************
    348          *
    349          *       _InsertChar
    350          *
    351          * Create space at the current cursor position and inserts a character.
    352          */

   \                                 In section .text, align 4, keep-with-next
    353          static int _InsertChar(EDIT_Handle hObj, U16 Char) {
   \                     _InsertChar:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    354            EDIT_Obj * pObj;
    355            int CharsAreAvailable;
    356            int CursorPos;
    357            WM_HMEM hpText;
    358            pObj = EDIT_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0060A0E1           MOV      R6,R0
    359            CharsAreAvailable = _CharsAreAvailable(pObj, 1);
   \   00000014   F803D6E1           LDRSH    R0,[R6, #+56]
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   0B0000BA           BLT      ??_InsertChar_0
   \   00000020   340096E5           LDR      R0,[R6, #+52]
   \   00000024   0070A0E3           MOV      R7,#+0
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300000A           BEQ      ??_InsertChar_1
   \   00000030   ........           BL       GUI_ALLOC_LockH
   \   00000034   ........           BL       GUI__GetNumChars
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   ........           BL       GUI_ALLOC_UnlockH
   \                     ??_InsertChar_1:
   \   00000040   F803D6E1           LDRSH    R0,[R6, #+56]
   \   00000044   011087E2           ADD      R1,R7,#+1
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   010000BA           BLT      ??_InsertChar_2
   \                     ??_InsertChar_0:
   \   00000050   0170A0E3           MOV      R7,#+1
   \   00000054   000000EA           B        ??_InsertChar_3
   \                     ??_InsertChar_2:
   \   00000058   0070A0E3           MOV      R7,#+0
    360            hpText = pObj->hpText;
   \                     ??_InsertChar_3:
   \   0000005C   348096E5           LDR      R8,[R6, #+52]
    361            CursorPos = pObj->CursorPos;
   \   00000060   4C6096E5           LDR      R6,[R6, #+76]
    362            GUI_UNLOCK_H(pObj);
   \   00000064   ........           BL       GUI_ALLOC_UnlockH
    363            if (CharsAreAvailable) {
   \   00000068   000057E3           CMP      R7,#+0
   \   0000006C   1C00000A           BEQ      ??_InsertChar_4
    364              int BytesNeeded;
    365              BytesNeeded = GUI_UC__CalcSizeOfChar(Char);
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       GUI_UC__CalcSizeOfChar
   \   00000078   0070A0E1           MOV      R7,R0
    366              if (_IsSpaceInBuffer(hObj, BytesNeeded)) {
   \   0000007C   0710A0E1           MOV      R1,R7
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       _IsSpaceInBuffer
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   1500000A           BEQ      ??_InsertChar_5
    367                int CursorOffset;
    368                char * pText;
    369                pText = (char *)GUI_LOCK_H(hpText);
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           BL       GUI_ALLOC_LockH
   \   00000098   0080A0E1           MOV      R8,R0
    370                CursorOffset = GUI_UC__NumChars2NumBytes(pText, CursorPos);
    371                pText += CursorOffset;
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   ........           BL       GUI_UC__NumChars2NumBytes
   \   000000A4   086080E0           ADD      R6,R0,R8
    372                memmove(pText + BytesNeeded, pText, strlen(pText) + 1);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   ........           BL       strlen
   \   000000B0   012080E2           ADD      R2,R0,#+1
   \   000000B4   0610A0E1           MOV      R1,R6
   \   000000B8   060087E0           ADD      R0,R7,R6
   \   000000BC   ........           BL       __aeabi_memmove
    373                GUI_UC_Encode(pText, Char);
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           BL       GUI_UC_Encode
    374                GUI_UNLOCK_H(pText);
   \   000000CC   ........           BL       GUI_ALLOC_UnlockH
    375                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   000000D0   0510A0E3           MOV      R1,#+5
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       WM_NotifyParent
    376                return 1;
   \   000000DC   0100A0E3           MOV      R0,#+1
   \   000000E0   F081BDE8           POP      {R4-R8,PC}
    377              }
    378            }
    379            return 0;
   \                     ??_InsertChar_4:
   \   000000E4   0000A0E3           MOV      R0,#+0
   \                     ??_InsertChar_5:
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return
    380          }
    381          
    382          /*********************************************************************
    383          *
    384          *       _OnTouch
    385          */
    386          static void _OnTouch(EDIT_Handle hObj, WM_MESSAGE * pMsg) {
    387            const GUI_PID_STATE * pState;
    388            pState = (const GUI_PID_STATE *)pMsg->Data.p;
    389            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
    390              if (pState->Pressed) {
    391                GUI_DEBUG_LOG1("EDIT_Callback(WM_TOUCH, Pressed, Handle %d)\n",1);
    392                EDIT_SetCursorAtPixel(hObj, pState->x);
    393                WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
    394              } else {
    395                GUI_DEBUG_LOG1("EDIT_Callback(WM_TOUCH, Released, Handle %d)\n",1);
    396                WM_NotifyParent(hObj, WM_NOTIFICATION_RELEASED);
    397              }
    398            } else {
    399              GUI_DEBUG_LOG1("EDIT_Callback(WM_TOUCH, Moved out, Handle %d)\n",1);
    400              WM_NotifyParent(hObj, WM_NOTIFICATION_MOVED_OUT);
    401            }
    402          }
    403          
    404          /*********************************************************************
    405          *
    406          *       _SetValue
    407          */

   \                                 In section .text, align 4, keep-with-next
    408          static void _SetValue(EDIT_Handle hObj, I32 Value, int Unsigned) {
   \                     _SetValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    409            EDIT_Obj * pObj;
    410            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   2400000A           BEQ      ??_SetValue_0
    411              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    412              pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    413              /* Put in min/max range */
    414              if (Unsigned) {
   \   00000024   3C1090E5           LDR      R1,[R0, #+60]
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0500000A           BEQ      ??_SetValue_1
    415                if ((unsigned)Value < (unsigned)pObj->Min) {
   \   00000030   010055E1           CMP      R5,R1
    416                  Value = pObj->Min;
   \   00000034   0150A031           MOVCC    R5,R1
    417                }
    418                if ((unsigned)Value > (unsigned)pObj->Max) {
   \   00000038   401090E5           LDR      R1,[R0, #+64]
   \   0000003C   050051E1           CMP      R1,R5
   \   00000040   0700002A           BCS      ??_SetValue_2
    419                  Value = pObj->Max;
   \   00000044   050000EA           B        ??_SetValue_3
    420                }
    421              } else {
    422                if (Value < pObj->Min) {
   \                     ??_SetValue_1:
   \   00000048   010055E1           CMP      R5,R1
   \   0000004C   0150A0B1           MOVLT    R5,R1
   \   00000050   0510A0E1           MOV      R1,R5
    423                  Value = pObj->Min;
    424                }
    425                if (Value > pObj->Max) {
   \   00000054   405090E5           LDR      R5,[R0, #+64]
   \   00000058   010055E1           CMP      R5,R1
   \   0000005C   000000DA           BLE      ??_SetValue_2
   \                     ??_SetValue_3:
   \   00000060   0150A0E1           MOV      R5,R1
    426                  Value = pObj->Max;
    427                }
    428              }
    429              if (pObj->CurrentValue != (U32)Value) {
   \                     ??_SetValue_2:
   \   00000064   481090E5           LDR      R1,[R0, #+72]
   \   00000068   050051E1           CMP      R1,R5
   \   0000006C   0C00000A           BEQ      ??_SetValue_4
    430                pObj->CurrentValue = Value;
   \   00000070   485080E5           STR      R5,[R0, #+72]
    431                if (pObj->pfUpdateBuffer) {
   \   00000074   5C1090E5           LDR      R1,[R0, #+92]
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   0100000A           BEQ      ??_SetValue_5
    432                  pObj->pfUpdateBuffer(hObj);
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   31FF2FE1           BLX      R1
    433                }
    434                WM_InvalidateWindow(hObj);
   \                     ??_SetValue_5:
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       WM_InvalidateWindow
    435                GUI_UNLOCK_H(pObj);
   \   00000090   ........           BL       GUI_ALLOC_UnlockH
    436                WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   00000094   0510A0E3           MOV      R1,#+5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       WM_NotifyParent
   \   000000A0   000000EA           B        ??_SetValue_6
    437              } else {
    438                GUI_UNLOCK_H(pObj);
   \                     ??_SetValue_4:
   \   000000A4   ........           BL       GUI_ALLOC_UnlockH
    439              }
    440              WM_UNLOCK();
   \                     ??_SetValue_6:
   \   000000A8   ........           BL       GUI_Unlock
    441            }
    442          }
   \                     ??_SetValue_0:
   \   000000AC   7080BDE8           POP      {R4-R6,PC}       ;; return
    443          
    444          /*********************************************************************
    445          *
    446          *       _ChangeCharacter
    447          */
    448          static void _ChangeCharacter(EDIT_Handle hObj, U16 Char, int Index, char * pText) {
    449            char acBuffer[3] = {0};
    450            int SizeNew, SizeOld;
    451            SizeOld = GUI_UC__CalcSizeOfChar(Char);
    452            Char += Index;
    453            SizeNew = GUI_UC__CalcSizeOfChar(Char);
    454            if (SizeOld == SizeNew) {
    455              GUI_UC_Encode(acBuffer, Char);
    456              memcpy(pText, acBuffer, SizeNew);
    457              WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
    458            }
    459          }
    460          
    461          /*********************************************************************
    462          *
    463          *       Private routines:
    464          *
    465          **********************************************************************
    466          */
    467          /*********************************************************************
    468          *
    469          *       EDIT_LockH
    470          */
    471          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    472          EDIT_Obj * EDIT_LockH(EDIT_Handle h) {
    473            EDIT_Obj * p = (EDIT_Obj *)GUI_LOCK_H(h);
    474            if (p) {
    475              if (p->DebugId != EDIT_ID) {
    476                GUI_DEBUG_ERROROUT("EDIT.c: Wrong handle type or Object not init'ed");
    477                return 0;
    478              }
    479            }
    480            return p;
    481          }
    482          #endif
    483          
    484          /*********************************************************************
    485          *
    486          *       EDIT__GetCurrentChar
    487          */

   \                                 In section .text, align 4, keep-with-next
    488          U16 EDIT__GetCurrentChar(EDIT_Obj * pObj) {
   \                     EDIT__GetCurrentChar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    489            U16 Char = 0;
    490            if (pObj->hpText) {
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0700000A           BEQ      ??EDIT__GetCurrentChar_0
    491              const char * pText;
    492              pText  = (const char *)GUI_LOCK_H(pObj->hpText);
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0050A0E1           MOV      R5,R0
    493              pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
   \   00000024   4C1094E5           LDR      R1,[R4, #+76]
   \   00000028   ........           BL       GUI_UC__NumChars2NumBytes
    494              Char   = GUI_UC_GetCharCode(pText);
   \   0000002C   050080E0           ADD      R0,R0,R5
   \   00000030   ........           BL       GUI_UC_GetCharCode
   \   00000034   0050A0E1           MOV      R5,R0
    495              GUI_UNLOCK_H(pText);
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    496            }
    497            return Char;
   \                     ??EDIT__GetCurrentChar_0:
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
    498          }
    499          
    500          /*********************************************************************
    501          *
    502          *       EDIT__SetCursorPos
    503          *
    504          * Sets a new cursor position.
    505          */

   \                                 In section .text, align 4, keep-with-next
    506          void EDIT__SetCursorPos(EDIT_Handle hObj, int CursorPos) {
   \                     EDIT__SetCursorPos:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0150A0E1           MOV      R5,R1
    507            EDIT_Obj * pObj;
    508            pObj = EDIT_LOCK_H(hObj);
   \   0000000C   ........           BL       GUI_ALLOC_LockH
   \   00000010   0040A0E1           MOV      R4,R0
    509            if (pObj->hpText) {
   \   00000014   340094E5           LDR      R0,[R4, #+52]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1200000A           BEQ      ??EDIT__SetCursorPos_0
    510              char * pText;
    511              int NumChars, Offset;
    512              pText    = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000020   ........           BL       GUI_ALLOC_LockH
    513              NumChars = GUI__GetNumChars(pText);
   \   00000024   ........           BL       GUI__GetNumChars
    514              Offset   = (pObj->EditMode == GUI_EDIT_MODE_INSERT) ? 0 : 1;
   \   00000028   5410D4E5           LDRB     R1,[R4, #+84]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0110A013           MOVNE    R1,#+1
    515              if (CursorPos < 0) {
   \   00000034   000055E3           CMP      R5,#+0
    516                CursorPos = 0;
   \   00000038   0050A043           MOVMI    R5,#+0
    517              }
    518              if (CursorPos > NumChars) {
   \   0000003C   050050E1           CMP      R0,R5
   \   00000040   0050A0D1           MOVLE    R5,R0
    519                CursorPos = NumChars;
    520              }
    521              if (CursorPos > (pObj->MaxLen - Offset)) {
   \   00000044   F803D4E1           LDRSH    R0,[R4, #+56]
   \   00000048   010040E0           SUB      R0,R0,R1
   \   0000004C   050050E1           CMP      R0,R5
    522                CursorPos = pObj->MaxLen - Offset;
   \   00000050   0050A0B1           MOVLT    R5,R0
    523              }
    524              if (pObj->CursorPos != CursorPos) {
   \   00000054   4C0094E5           LDR      R0,[R4, #+76]
   \   00000058   050050E1           CMP      R0,R5
    525                pObj->CursorPos = CursorPos;
   \   0000005C   4C508415           STRNE    R5,[R4, #+76]
    526              }
    527              pObj->SelSize = 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   500084E5           STR      R0,[R4, #+80]
    528              GUI_UNLOCK_H(pText);
   \   00000068   ........           BL       GUI_ALLOC_UnlockH
    529            }
    530            GUI_UNLOCK_H(pObj);
   \                     ??EDIT__SetCursorPos_0:
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   3040BDE8           POP      {R4,R5,LR}
   \   00000074   ........           B        GUI_ALLOC_UnlockH  ;; tailcall
    531          }
    532          
    533          /*********************************************************************
    534          *
    535          *       EDIT__SetValueUnsigned
    536          */

   \                                 In section .text, align 4, keep-with-next
    537          void EDIT__SetValueUnsigned(EDIT_Handle hObj, I32 Value) {
    538            _SetValue(hObj, Value, 1);
   \                     EDIT__SetValueUnsigned:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   ........           B        _SetValue        ;; tailcall
    539          }
    540          
    541          /*********************************************************************
    542          *
    543          *       Exported routines:  Callback
    544          *
    545          **********************************************************************
    546          */
    547          /*********************************************************************
    548          *
    549          *       EDIT_Callback
    550          */

   \                                 In section .text, align 4, keep-with-next
    551          void EDIT_Callback (WM_MESSAGE * pMsg) {
   \                     EDIT_Callback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    552            int IsEnabled;
    553            EDIT_Handle hObj;
    554            EDIT_Obj *  pObj;
    555            hObj = (EDIT_Handle) pMsg->hWin;       
   \   00000008   045094E5           LDR      R5,[R4, #+4]
    556            IsEnabled = WM__IsEnabled(hObj);
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           BL       WM__IsEnabled
   \   00000014   0060A0E1           MOV      R6,R0
    557            /* Let widget handle the standard messages */
    558            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       WIDGET_HandleActive
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1700000A           BEQ      ??EDIT_Callback_1
    559              return;
    560            }
    561            switch (pMsg->MsgId) {
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   0B0050E2           SUBS     R0,R0,#+11
   \   00000034   2A00000A           BEQ      ??EDIT_Callback_2
   \   00000038   010050E2           SUBS     R0,R0,#+1
   \   0000003C   1300000A           BEQ      ??EDIT_Callback_3
   \   00000040   020050E2           SUBS     R0,R0,#+2
   \   00000044   2B00000A           BEQ      ??EDIT_Callback_4
   \   00000048   010050E2           SUBS     R0,R0,#+1
   \   0000004C   2000000A           BEQ      ??EDIT_Callback_5
   \   00000050   410F50E2           SUBS     R0,R0,#+260
   \   00000054   0A00001A           BNE      ??EDIT_Callback_6
    562            case WM_TIMER:
    563              WM_SelectWindow(hObj);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           BL       WM_SelectWindow
    564              _InvertCursor(hObj);
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       _Paint
    565              pObj = EDIT_LOCK_H(hObj);
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       GUI_ALLOC_LockH
    566              WM_RestartTimer(pObj->hTimer, 0);
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   7C0090E5           LDR      R0,[R0, #+124]
   \   0000007C   ........           BL       WM_RestartTimer
    567              GUI_UNLOCK_H(pObj);
   \                     ??EDIT_Callback_7:
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
    568              break;
    569            case WM_TOUCH:
    570              _OnTouch(hObj, pMsg);
    571              break;
    572            case WM_PAINT:
    573              GUI_DEBUG_LOG("EDIT: _Callback(WM_PAINT)\n");
    574              _Paint(hObj, 1);
    575              return;
    576            case WM_DELETE:
    577              GUI_DEBUG_LOG("EDIT: _Callback(WM_DELETE)\n");
    578              _Delete(hObj);
    579              break;       /* No return here ... WM_DefaultProc needs to be called */
    580            case WM_KEY:
    581              if (IsEnabled) {
    582                if ( ((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt >0) {
    583                  int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
    584                  switch (Key) {
    585                  case GUI_KEY_ENTER:
    586                  case GUI_KEY_ESCAPE:
    587                  case GUI_KEY_TAB:
    588                  case GUI_KEY_BACKTAB:
    589                    break;                    /* Send to parent by not doing anything */
    590                  default:
    591                    EDIT_AddKey(hObj, Key);
    592                    return;
    593                  }
    594                }
    595              }
    596              break;
    597            }
    598            WM_DefaultProc(pMsg);
   \                     ??EDIT_Callback_6:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       WM_DefaultProc
    599          }
   \                     ??EDIT_Callback_1:
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??EDIT_Callback_3:
   \   00000090   0C0094E5           LDR      R0,[R4, #+12]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0300001A           BNE      ??EDIT_Callback_8
   \   0000009C   0310A0E3           MOV      R1,#+3
   \                     ??EDIT_Callback_9:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       WM_NotifyParent
   \   000000A8   F5FFFFEA           B        ??EDIT_Callback_6
   \                     ??EDIT_Callback_8:
   \   000000AC   0810D0E5           LDRB     R1,[R0, #+8]
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   0400000A           BEQ      ??EDIT_Callback_10
   \   000000B8   001090E5           LDR      R1,[R0, #+0]
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           BL       EDIT_SetCursorAtPixel
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   F4FFFFEA           B        ??EDIT_Callback_9
   \                     ??EDIT_Callback_10:
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   F2FFFFEA           B        ??EDIT_Callback_9
   \                     ??EDIT_Callback_5:
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   7040BDE8           POP      {R4-R6,LR}
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   ........           B        _Paint           ;; tailcall
   \                     ??EDIT_Callback_2:
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           BL       GUI_ALLOC_LockH
   \   000000EC   340080E2           ADD      R0,R0,#+52
   \   000000F0   ........           BL       GUI_ALLOC_FreePtr
   \   000000F4   E1FFFFEA           B        ??EDIT_Callback_7
   \                     ??EDIT_Callback_4:
   \   000000F8   000056E3           CMP      R6,#+0
   \   000000FC   E0FFFF0A           BEQ      ??EDIT_Callback_6
   \   00000100   0C0094E5           LDR      R0,[R4, #+12]
   \   00000104   041090E5           LDR      R1,[R0, #+4]
   \   00000108   010051E3           CMP      R1,#+1
   \   0000010C   DCFFFFBA           BLT      ??EDIT_Callback_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   090041E2           SUB      R0,R1,#+9
   \   00000118   120050E3           CMP      R0,#+18
   \   0000011C   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??EDIT_Callback_0:
   \   00000120   1200008A           BHI      ??EDIT_Callback_11
   \   00000124   D6FFFFEA           B        ??EDIT_Callback_6
   \   00000128   D5FFFFEA           B        ??EDIT_Callback_6
   \   0000012C   0F0000EA           B        ??EDIT_Callback_11
   \   00000130   0E0000EA           B        ??EDIT_Callback_11
   \   00000134   D2FFFFEA           B        ??EDIT_Callback_6
   \   00000138   0C0000EA           B        ??EDIT_Callback_11
   \   0000013C   0B0000EA           B        ??EDIT_Callback_11
   \   00000140   0A0000EA           B        ??EDIT_Callback_11
   \   00000144   090000EA           B        ??EDIT_Callback_11
   \   00000148   080000EA           B        ??EDIT_Callback_11
   \   0000014C   070000EA           B        ??EDIT_Callback_11
   \   00000150   060000EA           B        ??EDIT_Callback_11
   \   00000154   050000EA           B        ??EDIT_Callback_11
   \   00000158   040000EA           B        ??EDIT_Callback_11
   \   0000015C   030000EA           B        ??EDIT_Callback_11
   \   00000160   020000EA           B        ??EDIT_Callback_11
   \   00000164   010000EA           B        ??EDIT_Callback_11
   \   00000168   000000EA           B        ??EDIT_Callback_11
   \   0000016C   C4FFFFEA           B        ??EDIT_Callback_6
   \                     ??EDIT_Callback_11:
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   7040BDE8           POP      {R4-R6,LR}
   \   00000178   ........           B        EDIT_AddKey      ;; tailcall
    600          
    601          /*********************************************************************
    602          *
    603          *       Exported routines:  Create
    604          *
    605          **********************************************************************
    606          */
    607          /*********************************************************************
    608          *
    609          *       EDIT_CreateEx
    610          */

   \                                 In section .text, align 4, keep-with-next
    611          EDIT_Handle EDIT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags,
    612                                    int Id, int MaxLen)
    613          {
   \                     EDIT_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   44509DE5           LDR      R5,[SP, #+68]
   \   00000024   48409DE5           LDR      R4,[SP, #+72]
    614            EDIT_Handle hObj;
    615            GUI_USE_PARA(ExFlags);
    616            WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    617            /* Alloc memory for obj */
    618            WinFlags |= WM_CF_LATE_CLIP;    /* Always use late clipping since widget is optimized for it. */
    619            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, EDIT_Callback,
    620                                          sizeof(EDIT_Obj) - sizeof(WM_Obj));
   \   0000002C   5400A0E3           MOV      R0,#+84
   \   00000030   0C008DE5           STR      R0,[SP, #+12]
   \   00000034   ........           LDR      R0,??DataTable2_2
   \   00000038   00A08DE5           STR      R10,[SP, #+0]
   \   0000003C   08008DE5           STR      R0,[SP, #+8]
   \   00000040   400D8BE3           ORR      R0,R11,#0x1000
   \   00000044   04008DE5           STR      R0,[SP, #+4]
   \   00000048   0930A0E1           MOV      R3,R9
   \   0000004C   0820A0E1           MOV      R2,R8
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           BL       WM_CreateWindowAsChild
   \   0000005C   0060B0E1           MOVS     R6,R0
    621            if (hObj) {
   \   00000060   2C00000A           BEQ      ??EDIT_CreateEx_0
    622              int BufferSize;
    623              EDIT_Obj * pObj;
    624              pObj = (EDIT_Obj *)GUI_LOCK_H(hObj);
   \   00000064   ........           BL       GUI_ALLOC_LockH
   \   00000068   0070A0E1           MOV      R7,R0
    625              /* init widget specific variables */
    626              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   0000006C   1020A0E3           MOV      R2,#+16
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   ........           BL       WIDGET__Init
    627              /* init member variables */
    628              EDIT_INIT_ID(pObj);
    629              pObj->Props         = EDIT__DefaultProps;
   \   00000078   ........           LDR      R1,??DataTable2_3
   \   0000007C   600087E2           ADD      R0,R7,#+96
   \   00000080   2C53B1E8           LDM      R1!,{R2,R3,R5,R8,R9,R12,LR}
    630              pObj->XSizeCursor   = 1;
    631              pObj->MaxLen        = (MaxLen == 0) ? 8 : MaxLen;
   \   00000084   000054E3           CMP      R4,#+0
   \   00000088   2C53A0E8           STM      R0!,{R2,R3,R5,R8,R9,R12,LR}
   \   0000008C   0100A0E3           MOV      R0,#+1
   \   00000090   5500C7E5           STRB     R0,[R7, #+85]
   \   00000094   0840A003           MOVEQ    R4,#+8
   \   00000098   B843C7E1           STRH     R4,[R7, #+56]
    632              pObj->BufferSize    = 0;
   \   0000009C   0040A0E3           MOV      R4,#+0
   \   000000A0   BA43C7E1           STRH     R4,[R7, #+58]
    633              pObj->hpText        = 0;
   \   000000A4   344087E5           STR      R4,[R7, #+52]
    634              BufferSize = pObj->MaxLen + 1;
   \   000000A8   F803D7E1           LDRSH    R0,[R7, #+56]
   \   000000AC   015080E2           ADD      R5,R0,#+1
    635              GUI_UNLOCK_H(pObj);
   \   000000B0   ........           BL       GUI_ALLOC_UnlockH
    636              if (_IncrementBuffer(hObj, BufferSize) == 0) {
   \   000000B4   0600A0E1           MOV      R0,R6
   \   000000B8   ........           BL       GUI_ALLOC_LockH
   \   000000BC   347090E5           LDR      R7,[R0, #+52]
   \   000000C0   BA03D0E1           LDRH     R0,[R0, #+58]
   \   000000C4   005085E0           ADD      R5,R5,R0
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           BL       GUI_ALLOC_Realloc
   \   000000D8   0080B0E1           MOVS     R8,R0
   \   000000DC   0A00000A           BEQ      ??EDIT_CreateEx_1
   \   000000E0   000057E3           CMP      R7,#+0
   \   000000E4   0200001A           BNE      ??EDIT_CreateEx_2
   \   000000E8   ........           BL       GUI_ALLOC_LockH
   \   000000EC   0040C0E5           STRB     R4,[R0, #+0]
   \   000000F0   ........           BL       GUI_ALLOC_UnlockH
   \                     ??EDIT_CreateEx_2:
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           BL       GUI_ALLOC_LockH
   \   000000FC   BA53C0E1           STRH     R5,[R0, #+58]
   \   00000100   348080E5           STR      R8,[R0, #+52]
   \   00000104   ........           BL       GUI_ALLOC_UnlockH
   \   00000108   020000EA           B        ??EDIT_CreateEx_0
    637                GUI_DEBUG_ERROROUT("EDIT_Create failed to alloc buffer");
    638                EDIT_Delete(hObj);
   \                     ??EDIT_CreateEx_1:
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110   ........           BL       WM_DeleteWindow
    639                hObj = 0;
   \   00000114   0060A0E3           MOV      R6,#+0
    640              }
    641            }
    642            WM_UNLOCK();
   \                     ??EDIT_CreateEx_0:
   \   00000118   ........           BL       GUI_Unlock
    643            return hObj;
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   14D08DE2           ADD      SP,SP,#+20
   \   00000124   F08FBDE8           POP      {R4-R11,PC}      ;; return
    644          }
    645          
    646          /*********************************************************************
    647          *
    648          *       Exported routines:  Various methods
    649          *
    650          **********************************************************************
    651          */
    652          /*********************************************************************
    653          *
    654          *       EDIT_SetCursorAtPixel
    655          */

   \                                 In section .text, align 4, keep-with-next
    656          void EDIT_SetCursorAtPixel(EDIT_Handle hObj, int xPos) {
   \                     EDIT_SetCursorAtPixel:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
    657            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   8700000A           BEQ      ??EDIT_SetCursorAtPixel_0
    658              EDIT_Obj * pObj;
    659              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    660              pObj = EDIT_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0060A0E1           MOV      R6,R0
    661              if (pObj->hpText) {    
   \   00000024   340096E5           LDR      R0,[R6, #+52]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   7E00000A           BEQ      ??EDIT_SetCursorAtPixel_1
    662                const GUI_FONT GUI_UNI_PTR *pOldFont;
    663                int xSize, TextWidth, NumChars;
    664                const char GUI_UNI_PTR * pText;
    665                pText = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000030   ........           BL       GUI_ALLOC_LockH
   \   00000034   0080A0E1           MOV      R8,R0
    666                pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000038   680096E5           LDR      R0,[R6, #+104]
   \   0000003C   ........           BL       GUI_SetFont
   \   00000040   0050A0E1           MOV      R5,R0
    667                xSize = WM_GetWindowSizeX(hObj);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       WM_GetWindowSizeX
   \   0000004C   00A0A0E1           MOV      R10,R0
    668                TextWidth = GUI_GetStringDistX(pText);
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   ........           BL       GUI_GetStringDistX
   \   00000058   0090A0E1           MOV      R9,R0
    669                switch (pObj->Props.Align & GUI_TA_HORIZONTAL) {
   \   0000005C   6000D6E5           LDRB     R0,[R6, #+96]
   \   00000060   030000E2           AND      R0,R0,#0x3
   \   00000064   010050E3           CMP      R0,#+1
   \   00000068   0700000A           BEQ      ??EDIT_SetCursorAtPixel_2
   \   0000006C   0C00003A           BCC      ??EDIT_SetCursorAtPixel_3
   \   00000070   020050E3           CMP      R0,#+2
   \   00000074   0A00001A           BNE      ??EDIT_SetCursorAtPixel_3
    670                case GUI_TA_HCENTER:
    671                  xPos -= (xSize - TextWidth + 1) / 2;
   \   00000078   09004AE0           SUB      R0,R10,R9
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000084   C07047E0           SUB      R7,R7,R0, ASR #+1
    672                  break;
   \   00000088   0B0000EA           B        ??EDIT_SetCursorAtPixel_4
    673                case GUI_TA_RIGHT:
    674                  xPos -= xSize - TextWidth - (pObj->Props.Border + EDIT_XOFF);
   \                     ??EDIT_SetCursorAtPixel_2:
   \   0000008C   0A0047E0           SUB      R0,R7,R10
   \   00000090   641096E5           LDR      R1,[R6, #+100]
   \   00000094   000089E0           ADD      R0,R9,R0
   \   00000098   000081E0           ADD      R0,R1,R0
   \   0000009C   017080E2           ADD      R7,R0,#+1
    675                  break;
   \   000000A0   050000EA           B        ??EDIT_SetCursorAtPixel_4
    676                default:
    677                  xPos -= (pObj->Props.Border + EDIT_XOFF) + pObj->Widget.pEffect->EffectSize;
   \                     ??EDIT_SetCursorAtPixel_3:
   \   000000A4   2C1096E5           LDR      R1,[R6, #+44]
   \   000000A8   640096E5           LDR      R0,[R6, #+100]
   \   000000AC   001091E5           LDR      R1,[R1, #+0]
   \   000000B0   000047E0           SUB      R0,R7,R0
   \   000000B4   010040E0           SUB      R0,R0,R1
   \   000000B8   017040E2           SUB      R7,R0,#+1
    678                }
    679                NumChars = GUI__GetNumChars(pText);
   \                     ??EDIT_SetCursorAtPixel_4:
   \   000000BC   0800A0E1           MOV      R0,R8
   \   000000C0   ........           BL       GUI__GetNumChars
   \   000000C4   0060A0E1           MOV      R6,R0
    680                if (xPos < 0) {
   \   000000C8   000057E3           CMP      R7,#+0
   \   000000CC   1700005A           BPL      ??EDIT_SetCursorAtPixel_5
    681                  EDIT__SetCursorPos(hObj, 0);
   \   000000D0   0060A0E3           MOV      R6,#+0
   \   000000D4   0070A0E3           MOV      R7,#+0
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       GUI_ALLOC_LockH
   \   000000E0   0080A0E1           MOV      R8,R0
   \   000000E4   340098E5           LDR      R0,[R8, #+52]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   4800000A           BEQ      ??EDIT_SetCursorAtPixel_6
   \   000000F0   ........           BL       GUI_ALLOC_LockH
   \   000000F4   ........           BL       GUI__GetNumChars
   \   000000F8   5410D8E5           LDRB     R1,[R8, #+84]
   \   000000FC   000051E3           CMP      R1,#+0
   \   00000100   0110A013           MOVNE    R1,#+1
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0070A041           MOVMI    R7,R0
   \   0000010C   F803D8E1           LDRSH    R0,[R8, #+56]
   \   00000110   010040E0           SUB      R0,R0,R1
   \   00000114   070050E1           CMP      R0,R7
   \   00000118   0070A0B1           MOVLT    R7,R0
   \   0000011C   4C0098E5           LDR      R0,[R8, #+76]
   \   00000120   070050E1           CMP      R0,R7
   \   00000124   4C708815           STRNE    R7,[R8, #+76]
   \   00000128   506088E5           STR      R6,[R8, #+80]
   \   0000012C   370000EA           B        ??EDIT_SetCursorAtPixel_7
    682                } else if (xPos > TextWidth) {
   \                     ??EDIT_SetCursorAtPixel_5:
   \   00000130   070059E1           CMP      R9,R7
   \   00000134   180000AA           BGE      ??EDIT_SetCursorAtPixel_8
    683                  EDIT__SetCursorPos(hObj, NumChars);
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       GUI_ALLOC_LockH
   \   00000140   0070A0E1           MOV      R7,R0
   \   00000144   340097E5           LDR      R0,[R7, #+52]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   3000000A           BEQ      ??EDIT_SetCursorAtPixel_6
   \   00000150   ........           BL       GUI_ALLOC_LockH
   \   00000154   ........           BL       GUI__GetNumChars
   \   00000158   5410D7E5           LDRB     R1,[R7, #+84]
   \   0000015C   000051E3           CMP      R1,#+0
   \   00000160   0110A013           MOVNE    R1,#+1
   \   00000164   000056E3           CMP      R6,#+0
   \   00000168   0060A043           MOVMI    R6,#+0
   \   0000016C   060050E1           CMP      R0,R6
   \   00000170   0060A0D1           MOVLE    R6,R0
   \   00000174   F803D7E1           LDRSH    R0,[R7, #+56]
   \   00000178   010040E0           SUB      R0,R0,R1
   \   0000017C   060050E1           CMP      R0,R6
   \   00000180   0060A0B1           MOVLT    R6,R0
   \   00000184   4C0097E5           LDR      R0,[R7, #+76]
   \   00000188   060050E1           CMP      R0,R6
   \   0000018C   4C608715           STRNE    R6,[R7, #+76]
   \   00000190   0000A0E3           MOV      R0,#+0
   \   00000194   500087E5           STR      R0,[R7, #+80]
   \   00000198   1C0000EA           B        ??EDIT_SetCursorAtPixel_7
    684                } else {
    685                  EDIT__SetCursorPos(hObj, GUI__GetCursorPosChar(pText, xPos, NumChars));
   \                     ??EDIT_SetCursorAtPixel_8:
   \   0000019C   0620A0E1           MOV      R2,R6
   \   000001A0   0710A0E1           MOV      R1,R7
   \   000001A4   0800A0E1           MOV      R0,R8
   \   000001A8   ........           BL       GUI__GetCursorPosChar
   \   000001AC   0070A0E1           MOV      R7,R0
   \   000001B0   0400A0E1           MOV      R0,R4
   \   000001B4   ........           BL       GUI_ALLOC_LockH
   \   000001B8   0060A0E1           MOV      R6,R0
   \   000001BC   340096E5           LDR      R0,[R6, #+52]
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   1200000A           BEQ      ??EDIT_SetCursorAtPixel_6
   \   000001C8   ........           BL       GUI_ALLOC_LockH
   \   000001CC   ........           BL       GUI__GetNumChars
   \   000001D0   5410D6E5           LDRB     R1,[R6, #+84]
   \   000001D4   000051E3           CMP      R1,#+0
   \   000001D8   0110A013           MOVNE    R1,#+1
   \   000001DC   000057E3           CMP      R7,#+0
   \   000001E0   0070A043           MOVMI    R7,#+0
   \   000001E4   070050E1           CMP      R0,R7
   \   000001E8   0070A0D1           MOVLE    R7,R0
   \   000001EC   F803D6E1           LDRSH    R0,[R6, #+56]
   \   000001F0   010040E0           SUB      R0,R0,R1
   \   000001F4   070050E1           CMP      R0,R7
   \   000001F8   0070A0B1           MOVLT    R7,R0
   \   000001FC   4C0096E5           LDR      R0,[R6, #+76]
   \   00000200   070050E1           CMP      R0,R7
   \   00000204   4C708615           STRNE    R7,[R6, #+76]
   \   00000208   0000A0E3           MOV      R0,#+0
   \   0000020C   500086E5           STR      R0,[R6, #+80]
   \                     ??EDIT_SetCursorAtPixel_7:
   \   00000210   ........           BL       GUI_ALLOC_UnlockH
   \                     ??EDIT_SetCursorAtPixel_6:
   \   00000214   ........           BL       GUI_ALLOC_UnlockH
    686                }
    687                GUI_UNLOCK_H(pText);
   \   00000218   ........           BL       GUI_ALLOC_UnlockH
    688                GUI_SetFont(pOldFont);
   \   0000021C   0500A0E1           MOV      R0,R5
   \   00000220   ........           BL       GUI_SetFont
    689                EDIT_Invalidate(hObj);
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           BL       WM_InvalidateWindow
    690              }
    691              GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetCursorAtPixel_1:
   \   0000022C   ........           BL       GUI_ALLOC_UnlockH
    692              WM_UNLOCK();
   \   00000230   ........           BL       GUI_Unlock
    693            }
    694          }
   \                     ??EDIT_SetCursorAtPixel_0:
   \   00000234   F087BDE8           POP      {R4-R10,PC}      ;; return
    695          
    696          /*********************************************************************
    697          *
    698          *       EDIT_AddKey
    699          */

   \                                 In section .text, align 4, keep-with-next
    700          void EDIT_AddKey(EDIT_Handle hObj, int Key) {
   \                     EDIT_AddKey:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0160A0E1           MOV      R6,R1
    701            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0F01000A           BEQ      ??EDIT_AddKey_1
    702              EDIT_Obj * pObj;
    703              tEDIT_AddKeyEx * pfAddKeyEx;
    704              U8 EditMode;
    705              WM_HMEM hpText;
    706              int CursorPos;
    707              
    708              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    709              pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    710              pfAddKeyEx = pObj->pfAddKeyEx;
   \   00000024   587090E5           LDR      R7,[R0, #+88]
    711              EditMode   = pObj->EditMode;
   \   00000028   5480D0E5           LDRB     R8,[R0, #+84]
    712              hpText     = pObj->hpText;
   \   0000002C   349090E5           LDR      R9,[R0, #+52]
    713              CursorPos  = pObj->CursorPos;
   \   00000030   4C5090E5           LDR      R5,[R0, #+76]
    714              GUI_UNLOCK_H(pObj);
   \   00000034   ........           BL       GUI_ALLOC_UnlockH
    715              if (pfAddKeyEx) {
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0300000A           BEQ      ??EDIT_AddKey_2
    716                pfAddKeyEx(hObj, Key);
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   37FF2FE1           BLX      R7
   \   0000004C   FE0000EA           B        ??EDIT_AddKey_3
    717              } else {
    718                switch (Key) {
   \                     ??EDIT_AddKey_2:
   \   00000050   080046E2           SUB      R0,R6,#+8
   \   00000054   160050E3           CMP      R0,#+22
   \   00000058   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??EDIT_AddKey_0:
   \   0000005C   B800008A           BHI      ??EDIT_AddKey_4
   \   00000060   4A0000EA           B        ??EDIT_AddKey_5
   \   00000064   B60000EA           B        ??EDIT_AddKey_4
   \   00000068   B50000EA           B        ??EDIT_AddKey_4
   \   0000006C   B40000EA           B        ??EDIT_AddKey_4
   \   00000070   B30000EA           B        ??EDIT_AddKey_4
   \   00000074   B20000EA           B        ??EDIT_AddKey_4
   \   00000078   B10000EA           B        ??EDIT_AddKey_4
   \   0000007C   B00000EA           B        ??EDIT_AddKey_4
   \   00000080   400000EA           B        ??EDIT_AddKey_6
   \   00000084   0C0000EA           B        ??EDIT_AddKey_7
   \   00000088   D40000EA           B        ??EDIT_AddKey_8
   \   0000008C   2C0000EA           B        ??EDIT_AddKey_9
   \   00000090   AB0000EA           B        ??EDIT_AddKey_4
   \   00000094   AA0000EA           B        ??EDIT_AddKey_4
   \   00000098   A90000EA           B        ??EDIT_AddKey_4
   \   0000009C   A80000EA           B        ??EDIT_AddKey_4
   \   000000A0   A70000EA           B        ??EDIT_AddKey_4
   \   000000A4   A60000EA           B        ??EDIT_AddKey_4
   \   000000A8   A50000EA           B        ??EDIT_AddKey_4
   \   000000AC   A40000EA           B        ??EDIT_AddKey_4
   \   000000B0   A30000EA           B        ??EDIT_AddKey_4
   \   000000B4   800000EA           B        ??EDIT_AddKey_10
   \   000000B8   6D0000EA           B        ??EDIT_AddKey_11
    719                case GUI_KEY_UP:
    720                  if (hpText) {
   \                     ??EDIT_AddKey_7:
   \   000000BC   000059E3           CMP      R9,#+0
   \   000000C0   E100000A           BEQ      ??EDIT_AddKey_3
    721                    char * pText;
    722                    U16 Char;
    723                    pText  = (char *)GUI_LOCK_H(hpText);
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   0060A0E1           MOV      R6,R0
    724                    pText += GUI_UC__NumChars2NumBytes(pText, CursorPos);
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   ........           BL       GUI_UC__NumChars2NumBytes
   \   000000D8   065080E0           ADD      R5,R0,R6
    725                    Char   = GUI_UC_GetCharCode(pText);
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           BL       GUI_UC_GetCharCode
    726                    _ChangeCharacter(hObj, Char, +1, pText);
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   0060A0E1           MOV      R6,R0
   \   000000EC   00108DE5           STR      R1,[SP, #+0]
   \   000000F0   ........           BL       GUI_UC__CalcSizeOfChar
   \   000000F4   0070A0E1           MOV      R7,R0
   \   000000F8   016086E2           ADD      R6,R6,#+1
   \                     ??EDIT_AddKey_12:
   \   000000FC   0608A0E1           LSL      R0,R6,#+16
   \   00000100   2008A0E1           LSR      R0,R0,#+16
   \   00000104   ........           BL       GUI_UC__CalcSizeOfChar
   \   00000108   0080A0E1           MOV      R8,R0
   \   0000010C   080057E1           CMP      R7,R8
   \   00000110   CC00001A           BNE      ??EDIT_AddKey_13
   \   00000114   0618A0E1           LSL      R1,R6,#+16
   \   00000118   2118A0E1           LSR      R1,R1,#+16
   \   0000011C   0D00A0E1           MOV      R0,SP
   \   00000120   ........           BL       GUI_UC_Encode
   \   00000124   0820A0E1           MOV      R2,R8
   \   00000128   0D10A0E1           MOV      R1,SP
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           BL       __aeabi_memcpy
   \   00000134   0510A0E3           MOV      R1,#+5
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       WM_NotifyParent
    727                    GUI_UNLOCK_H(pText);
   \   00000140   C00000EA           B        ??EDIT_AddKey_13
    728                  }
    729                  break;
    730                case GUI_KEY_DOWN:
    731                  if (hpText) {
   \                     ??EDIT_AddKey_9:
   \   00000144   000059E3           CMP      R9,#+0
   \   00000148   BF00000A           BEQ      ??EDIT_AddKey_3
    732                    char * pText;
    733                    U16 Char;
    734                    pText  = (char *)GUI_LOCK_H(hpText);
   \   0000014C   0900A0E1           MOV      R0,R9
   \   00000150   ........           BL       GUI_ALLOC_LockH
   \   00000154   0060A0E1           MOV      R6,R0
    735                    pText += GUI_UC__NumChars2NumBytes(pText, CursorPos);
   \   00000158   0510A0E1           MOV      R1,R5
   \   0000015C   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000160   065080E0           ADD      R5,R0,R6
    736                    Char   = GUI_UC_GetCharCode(pText);
   \   00000164   0500A0E1           MOV      R0,R5
   \   00000168   ........           BL       GUI_UC_GetCharCode
    737                    _ChangeCharacter(hObj, Char, -1, pText);
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   0060A0E1           MOV      R6,R0
   \   00000174   00108DE5           STR      R1,[SP, #+0]
   \   00000178   ........           BL       GUI_UC__CalcSizeOfChar
   \   0000017C   0070A0E1           MOV      R7,R0
   \   00000180   016046E2           SUB      R6,R6,#+1
   \   00000184   DCFFFFEA           B        ??EDIT_AddKey_12
    738                    GUI_UNLOCK_H(pText);
    739                  }
    740                  break;
    741                case GUI_KEY_RIGHT:
    742                  EDIT__SetCursorPos(hObj, CursorPos + 1);
    743                  break;
    744                case GUI_KEY_LEFT:
    745                  EDIT__SetCursorPos(hObj, CursorPos - 1);
   \                     ??EDIT_AddKey_6:
   \   00000188   015045E2           SUB      R5,R5,#+1
   \   0000018C   940000EA           B        ??EDIT_AddKey_14
    746                  break;
    747                case GUI_KEY_BACKSPACE:
    748                  if (CursorPos) {
   \                     ??EDIT_AddKey_5:
   \   00000190   000055E3           CMP      R5,#+0
   \   00000194   AC00000A           BEQ      ??EDIT_AddKey_3
    749                    EDIT__SetCursorPos(hObj, CursorPos - 1);
   \   00000198   015045E2           SUB      R5,R5,#+1
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       GUI_ALLOC_LockH
   \   000001A4   0060A0E1           MOV      R6,R0
   \   000001A8   340096E5           LDR      R0,[R6, #+52]
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   1200000A           BEQ      ??EDIT_AddKey_15
   \   000001B4   ........           BL       GUI_ALLOC_LockH
   \   000001B8   ........           BL       GUI__GetNumChars
   \   000001BC   5410D6E5           LDRB     R1,[R6, #+84]
   \   000001C0   000051E3           CMP      R1,#+0
   \   000001C4   0110A013           MOVNE    R1,#+1
   \   000001C8   000055E3           CMP      R5,#+0
   \   000001CC   0050A043           MOVMI    R5,#+0
   \   000001D0   050050E1           CMP      R0,R5
   \   000001D4   0050A0D1           MOVLE    R5,R0
   \   000001D8   F803D6E1           LDRSH    R0,[R6, #+56]
   \   000001DC   010040E0           SUB      R0,R0,R1
   \   000001E0   050050E1           CMP      R0,R5
   \   000001E4   0050A0B1           MOVLT    R5,R0
   \   000001E8   4C0096E5           LDR      R0,[R6, #+76]
   \   000001EC   050050E1           CMP      R0,R5
   \   000001F0   4C508615           STRNE    R5,[R6, #+76]
   \   000001F4   0000A0E3           MOV      R0,#+0
   \   000001F8   500086E5           STR      R0,[R6, #+80]
   \   000001FC   ........           BL       GUI_ALLOC_UnlockH
   \                     ??EDIT_AddKey_15:
   \   00000200   ........           BL       GUI_ALLOC_UnlockH
    750                    _DeleteChar(hObj);
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           BL       GUI_ALLOC_LockH
   \   0000020C   345090E5           LDR      R5,[R0, #+52]
   \   00000210   4C6090E5           LDR      R6,[R0, #+76]
   \   00000214   ........           BL       GUI_ALLOC_UnlockH
   \   00000218   000055E3           CMP      R5,#+0
   \   0000021C   8A00000A           BEQ      ??EDIT_AddKey_3
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           BL       GUI_ALLOC_LockH
   \   00000228   0050A0E1           MOV      R5,R0
   \   0000022C   0610A0E1           MOV      R1,R6
   \   00000230   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000234   0060A0E1           MOV      R6,R0
   \   00000238   0500A0E1           MOV      R0,R5
   \   0000023C   ........           BL       strlen
   \   00000240   000056E1           CMP      R6,R0
   \   00000244   7F00002A           BCS      ??EDIT_AddKey_13
   \                     ??EDIT_AddKey_16:
   \   00000248   055086E0           ADD      R5,R6,R5
   \   0000024C   0500A0E1           MOV      R0,R5
   \   00000250   ........           BL       GUI_UC_GetCharSize
   \   00000254   051080E0           ADD      R1,R0,R5
   \   00000258   0500A0E1           MOV      R0,R5
   \   0000025C   ........           BL       strcpy
   \   00000260   ........           BL       GUI_ALLOC_UnlockH
   \   00000264   0510A0E3           MOV      R1,#+5
   \   00000268   0400A0E1           MOV      R0,R4
   \   0000026C   ........           BL       WM_NotifyParent
   \   00000270   750000EA           B        ??EDIT_AddKey_3
    751                  }
    752                  break;
    753                case GUI_KEY_DELETE:
    754                  _DeleteChar(hObj);
   \                     ??EDIT_AddKey_11:
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   ........           BL       GUI_ALLOC_LockH
   \   0000027C   345090E5           LDR      R5,[R0, #+52]
   \   00000280   4C6090E5           LDR      R6,[R0, #+76]
   \   00000284   ........           BL       GUI_ALLOC_UnlockH
   \   00000288   000055E3           CMP      R5,#+0
   \   0000028C   6E00000A           BEQ      ??EDIT_AddKey_3
   \   00000290   0500A0E1           MOV      R0,R5
   \   00000294   ........           BL       GUI_ALLOC_LockH
   \   00000298   0050A0E1           MOV      R5,R0
   \   0000029C   0610A0E1           MOV      R1,R6
   \   000002A0   ........           BL       GUI_UC__NumChars2NumBytes
   \   000002A4   0060A0E1           MOV      R6,R0
   \   000002A8   0500A0E1           MOV      R0,R5
   \   000002AC   ........           BL       strlen
   \   000002B0   000056E1           CMP      R6,R0
   \   000002B4   E3FFFF3A           BCC      ??EDIT_AddKey_16
   \   000002B8   620000EA           B        ??EDIT_AddKey_13
    755                  break;
    756                case GUI_KEY_INSERT:
    757                  pObj = EDIT_LOCK_H(hObj);
   \                     ??EDIT_AddKey_10:
   \   000002BC   0400A0E1           MOV      R0,R4
   \   000002C0   ........           BL       GUI_ALLOC_LockH
    758                  if (EditMode == GUI_EDIT_MODE_OVERWRITE) {
   \   000002C4   010058E3           CMP      R8,#+1
    759                    pObj->EditMode = GUI_EDIT_MODE_INSERT;
   \   000002C8   0010A003           MOVEQ    R1,#+0
   \   000002CC   5410C005           STRBEQ   R1,[R0, #+84]
   \   000002D0   5C00000A           BEQ      ??EDIT_AddKey_13
    760                  } else {
    761                    pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   5410C0E5           STRB     R1,[R0, #+84]
    762                    EDIT__SetCursorPos(hObj, CursorPos);
   \   000002DC   0400A0E1           MOV      R0,R4
   \   000002E0   ........           BL       GUI_ALLOC_LockH
   \   000002E4   0060A0E1           MOV      R6,R0
   \   000002E8   340096E5           LDR      R0,[R6, #+52]
   \   000002EC   000050E3           CMP      R0,#+0
   \   000002F0   5300000A           BEQ      ??EDIT_AddKey_17
   \   000002F4   ........           BL       GUI_ALLOC_LockH
   \   000002F8   ........           BL       GUI__GetNumChars
   \   000002FC   5410D6E5           LDRB     R1,[R6, #+84]
   \   00000300   000051E3           CMP      R1,#+0
   \   00000304   0110A013           MOVNE    R1,#+1
   \   00000308   000055E3           CMP      R5,#+0
   \   0000030C   0050A043           MOVMI    R5,#+0
   \   00000310   050050E1           CMP      R0,R5
   \   00000314   0050A0D1           MOVLE    R5,R0
   \   00000318   F803D6E1           LDRSH    R0,[R6, #+56]
   \   0000031C   010040E0           SUB      R0,R0,R1
   \   00000320   050050E1           CMP      R0,R5
   \   00000324   0050A0B1           MOVLT    R5,R0
   \   00000328   4C0096E5           LDR      R0,[R6, #+76]
   \   0000032C   050050E1           CMP      R0,R5
   \   00000330   4C508615           STRNE    R5,[R6, #+76]
   \   00000334   0000A0E3           MOV      R0,#+0
   \   00000338   500086E5           STR      R0,[R6, #+80]
   \   0000033C   ........           BL       GUI_ALLOC_UnlockH
   \   00000340   3F0000EA           B        ??EDIT_AddKey_17
    763                  }
    764                  GUI_UNLOCK_H(pObj);
    765                  break;
    766                default:
    767                  if (Key >= 0x20) {
   \                     ??EDIT_AddKey_4:
   \   00000344   200056E3           CMP      R6,#+32
   \   00000348   3F0000BA           BLT      ??EDIT_AddKey_3
    768                    if (EditMode != GUI_EDIT_MODE_INSERT) {
   \   0000034C   000058E3           CMP      R8,#+0
   \   00000350   1C00000A           BEQ      ??EDIT_AddKey_18
    769                      _DeleteChar(hObj);
   \   00000354   0400A0E1           MOV      R0,R4
   \   00000358   ........           BL       GUI_ALLOC_LockH
   \   0000035C   347090E5           LDR      R7,[R0, #+52]
   \   00000360   4C8090E5           LDR      R8,[R0, #+76]
   \   00000364   ........           BL       GUI_ALLOC_UnlockH
   \   00000368   000057E3           CMP      R7,#+0
   \   0000036C   1500000A           BEQ      ??EDIT_AddKey_18
   \   00000370   0700A0E1           MOV      R0,R7
   \   00000374   ........           BL       GUI_ALLOC_LockH
   \   00000378   0070A0E1           MOV      R7,R0
   \   0000037C   0810A0E1           MOV      R1,R8
   \   00000380   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000384   0080A0E1           MOV      R8,R0
   \   00000388   0700A0E1           MOV      R0,R7
   \   0000038C   ........           BL       strlen
   \   00000390   000058E1           CMP      R8,R0
   \   00000394   0100003A           BCC      ??EDIT_AddKey_19
   \   00000398   ........           BL       GUI_ALLOC_UnlockH
   \   0000039C   090000EA           B        ??EDIT_AddKey_18
   \                     ??EDIT_AddKey_19:
   \   000003A0   077088E0           ADD      R7,R8,R7
   \   000003A4   0700A0E1           MOV      R0,R7
   \   000003A8   ........           BL       GUI_UC_GetCharSize
   \   000003AC   071080E0           ADD      R1,R0,R7
   \   000003B0   0700A0E1           MOV      R0,R7
   \   000003B4   ........           BL       strcpy
   \   000003B8   ........           BL       GUI_ALLOC_UnlockH
   \   000003BC   0510A0E3           MOV      R1,#+5
   \   000003C0   0400A0E1           MOV      R0,R4
   \   000003C4   ........           BL       WM_NotifyParent
    770                    }
    771                    if (_InsertChar(hObj, Key)) {
   \                     ??EDIT_AddKey_18:
   \   000003C8   0618A0E1           LSL      R1,R6,#+16
   \   000003CC   2118A0E1           LSR      R1,R1,#+16
   \   000003D0   0400A0E1           MOV      R0,R4
   \   000003D4   ........           BL       _InsertChar
   \   000003D8   000050E3           CMP      R0,#+0
   \   000003DC   1A00000A           BEQ      ??EDIT_AddKey_3
    772                      EDIT__SetCursorPos(hObj, CursorPos + 1);
   \                     ??EDIT_AddKey_8:
   \   000003E0   015085E2           ADD      R5,R5,#+1
   \                     ??EDIT_AddKey_14:
   \   000003E4   0400A0E1           MOV      R0,R4
   \   000003E8   ........           BL       GUI_ALLOC_LockH
   \   000003EC   0060A0E1           MOV      R6,R0
   \   000003F0   340096E5           LDR      R0,[R6, #+52]
   \   000003F4   000050E3           CMP      R0,#+0
   \   000003F8   1200000A           BEQ      ??EDIT_AddKey_13
   \   000003FC   ........           BL       GUI_ALLOC_LockH
   \   00000400   ........           BL       GUI__GetNumChars
   \   00000404   5410D6E5           LDRB     R1,[R6, #+84]
   \   00000408   000051E3           CMP      R1,#+0
   \   0000040C   0110A013           MOVNE    R1,#+1
   \   00000410   000055E3           CMP      R5,#+0
   \   00000414   0050A043           MOVMI    R5,#+0
   \   00000418   050050E1           CMP      R0,R5
   \   0000041C   0050A0D1           MOVLE    R5,R0
   \   00000420   F803D6E1           LDRSH    R0,[R6, #+56]
   \   00000424   010040E0           SUB      R0,R0,R1
   \   00000428   050050E1           CMP      R0,R5
   \   0000042C   0050A0B1           MOVLT    R5,R0
   \   00000430   4C0096E5           LDR      R0,[R6, #+76]
   \   00000434   050050E1           CMP      R0,R5
   \   00000438   4C508615           STRNE    R5,[R6, #+76]
   \   0000043C   0000A0E3           MOV      R0,#+0
   \   00000440   500086E5           STR      R0,[R6, #+80]
   \                     ??EDIT_AddKey_17:
   \   00000444   ........           BL       GUI_ALLOC_UnlockH
   \                     ??EDIT_AddKey_13:
   \   00000448   ........           BL       GUI_ALLOC_UnlockH
    773                    }
    774                  }
    775                }
    776              }
    777              EDIT_Invalidate(hObj);
   \                     ??EDIT_AddKey_3:
   \   0000044C   0400A0E1           MOV      R0,R4
   \   00000450   ........           BL       WM_InvalidateWindow
    778              WM_UNLOCK();
   \   00000454   ........           BL       GUI_Unlock
    779            }
    780          }
   \                     ??EDIT_AddKey_1:
   \   00000458   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000045C   F083BDE8           POP      {R4-R9,PC}       ;; return
    781          
    782          /*********************************************************************
    783          *
    784          *       EDIT_SetFont
    785          */

   \                                 In section .text, align 4, keep-with-next
    786          void EDIT_SetFont(EDIT_Handle hObj, const GUI_FONT GUI_UNI_PTR * pfont) {
   \                     EDIT_SetFont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    787            EDIT_Obj * pObj;
    788            if (hObj == 0) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??EDIT_SetFont_0
    789              return;
    790            }
    791            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    792            pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    793            if (pObj) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??EDIT_SetFont_1
    794              pObj->Props.pFont = pfont;
   \   0000002C   685080E5           STR      R5,[R0, #+104]
    795              EDIT_Invalidate(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
    796            }
    797            GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetFont_1:
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
    798            WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
    799          }
   \                     ??EDIT_SetFont_0:
   \   00000040   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
    800          
    801          /*********************************************************************
    802          *
    803          *       EDIT_SetBkColor
    804          */

   \                                 In section .text, align 4, keep-with-next
    805          void EDIT_SetBkColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
   \                     EDIT_SetBkColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    806            EDIT_Obj * pObj;
    807            if (hObj == 0) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0C00000A           BEQ      ??EDIT_SetBkColor_0
    808              return;
    809            }
    810            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    811            pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    812            if (pObj) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??EDIT_SetBkColor_1
    813              if (Index < GUI_COUNTOF(pObj->Props.aBkColor)) {
   \   0000002C   020055E3           CMP      R5,#+2
   \   00000030   0300002A           BCS      ??EDIT_SetBkColor_1
    814                pObj->Props.aBkColor[Index] = color;
   \   00000034   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000038   746080E5           STR      R6,[R0, #+116]
    815                EDIT_Invalidate(hObj);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       WM_InvalidateWindow
    816              }
    817            }
    818            GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetBkColor_1:
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
    819            WM_UNLOCK();
   \   00000048   ........           BL       GUI_Unlock
    820          }
   \                     ??EDIT_SetBkColor_0:
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
    821          
    822          /*********************************************************************
    823          *
    824          *       EDIT_SetTextColor
    825          */

   \                                 In section .text, align 4, keep-with-next
    826          void EDIT_SetTextColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
   \                     EDIT_SetTextColor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    827            EDIT_Obj * pObj;
    828            if (hObj == 0) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0C00000A           BEQ      ??EDIT_SetTextColor_0
    829              return;
    830            }
    831            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    832            pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    833            if (pObj) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??EDIT_SetTextColor_1
    834              if (Index < GUI_COUNTOF(pObj->Props.aTextColor)) {
   \   0000002C   020055E3           CMP      R5,#+2
   \   00000030   0300002A           BCS      ??EDIT_SetTextColor_1
    835                pObj->Props.aTextColor[Index] = color;
   \   00000034   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000038   6C6080E5           STR      R6,[R0, #+108]
    836                EDIT_Invalidate(hObj);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       WM_InvalidateWindow
    837              }
    838            }
    839            GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetTextColor_1:
   \   00000044   ........           BL       GUI_ALLOC_UnlockH
    840            WM_UNLOCK();
   \   00000048   ........           BL       GUI_Unlock
    841          }
   \                     ??EDIT_SetTextColor_0:
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
    842          
    843          /*********************************************************************
    844          *
    845          *       EDIT_SetText
    846          */

   \                                 In section .text, align 4, keep-with-next
    847          void EDIT_SetText(EDIT_Handle hObj, const char * s) {
   \                     EDIT_SetText:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    848            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   3800000A           BEQ      ??EDIT_SetText_0
    849              EDIT_Obj * pObj;
    850              WM_HMEM hpText;
    851              I16 MaxLen;
    852          
    853              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    854              pObj = EDIT_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
    855              hpText = pObj->hpText;
   \   00000020   348090E5           LDR      R8,[R0, #+52]
    856              MaxLen = pObj->MaxLen;
   \   00000024   F863D0E1           LDRSH    R6,[R0, #+56]
    857              GUI_UNLOCK_H(pObj);
   \   00000028   ........           BL       GUI_ALLOC_UnlockH
   \   0000002C   0070A0E3           MOV      R7,#+0
    858              if (s) {
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   2600000A           BEQ      ??EDIT_SetText_1
    859                int NumBytesNew, NumBytesOld = 0;
   \   00000038   0090A0E3           MOV      R9,#+0
    860                int NumCharsNew;
    861                if (hpText) {
   \   0000003C   000058E3           CMP      R8,#+0
   \   00000040   0400000A           BEQ      ??EDIT_SetText_2
    862                  char * pText;
    863                  pText       = (char *)GUI_LOCK_H(hpText);
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           BL       GUI_ALLOC_LockH
    864                  NumBytesOld = strlen(pText) + 1;
   \   0000004C   ........           BL       strlen
   \   00000050   019080E2           ADD      R9,R0,#+1
    865                  GUI_UNLOCK_H(pText);
   \   00000054   ........           BL       GUI_ALLOC_UnlockH
    866                }
    867                NumCharsNew = GUI__GetNumChars(s);
   \                     ??EDIT_SetText_2:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           BL       GUI__GetNumChars
    868                if (NumCharsNew > MaxLen) {
   \   00000060   000056E1           CMP      R6,R0
   \   00000064   0060A0C1           MOVGT    R6,R0
    869                  NumCharsNew = MaxLen;
    870                }
    871                NumBytesNew = GUI_UC__NumChars2NumBytes(s, NumCharsNew) + 1;
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000074   01A080E2           ADD      R10,R0,#+1
    872                if (_IsSpaceInBuffer(hObj, NumBytesNew - NumBytesOld)) {
   \   00000078   09104AE0           SUB      R1,R10,R9
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       _IsSpaceInBuffer
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1700000A           BEQ      ??EDIT_SetText_3
    873                  char * pText;
    874                  pObj  = (EDIT_Obj *)GUI_LOCK_H(hObj); /* Pointer recalculation required */
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       GUI_ALLOC_LockH
   \   00000094   0080A0E1           MOV      R8,R0
    875                  pText = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000098   340098E5           LDR      R0,[R8, #+52]
   \   0000009C   ........           BL       GUI_ALLOC_LockH
    876                  GUI_MEMCPY(pText, s, NumBytesNew);
   \   000000A0   0A20A0E1           MOV      R2,R10
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   ........           BL       __aeabi_memcpy
    877                  pObj->CursorPos = NumCharsNew;
   \   000000AC   4C6088E5           STR      R6,[R8, #+76]
    878                  if (pObj->CursorPos == pObj->MaxLen) {
   \   000000B0   F813D8E1           LDRSH    R1,[R8, #+56]
   \   000000B4   010056E1           CMP      R6,R1
    879                    if (pObj->EditMode == GUI_EDIT_MODE_OVERWRITE) {
   \   000000B8   5410D805           LDRBEQ   R1,[R8, #+84]
   \   000000BC   01005103           CMPEQ    R1,#+1
    880                      pObj->CursorPos--;
   \   000000C0   01004602           SUBEQ    R0,R6,#+1
   \   000000C4   4C008805           STREQ    R0,[R8, #+76]
    881                    }
    882                  }
    883                  GUI_UNLOCK_H(pObj);
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
    884                  GUI_UNLOCK_H(pText);
   \   000000CC   ........           BL       GUI_ALLOC_UnlockH
   \   000000D0   050000EA           B        ??EDIT_SetText_3
    885                }
    886              } else {
    887                GUI_ALLOC_FreePtr(&pObj->hpText);
   \                     ??EDIT_SetText_1:
   \   000000D4   3400A0E3           MOV      R0,#+52
   \   000000D8   ........           BL       GUI_ALLOC_FreePtr
    888                pObj->BufferSize = 0;
   \   000000DC   0600A0E3           MOV      R0,#+6
   \   000000E0   B473C0E1           STRH     R7,[R0, #+52]
    889                pObj->CursorPos  = 0;
   \   000000E4   1800A0E3           MOV      R0,#+24
   \   000000E8   347080E5           STR      R7,[R0, #+52]
    890              }
    891              EDIT_Invalidate(hObj);
   \                     ??EDIT_SetText_3:
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       WM_InvalidateWindow
    892              WM_UNLOCK();
   \   000000F4   ........           BL       GUI_Unlock
    893            }
    894          }
   \                     ??EDIT_SetText_0:
   \   000000F8   F087BDE8           POP      {R4-R10,PC}      ;; return
    895          
    896          /*********************************************************************
    897          *
    898          *       EDIT_GetText
    899          */

   \                                 In section .text, align 4, keep-with-next
    900          void EDIT_GetText(EDIT_Handle hObj, char * sDest, int MaxLen) {
   \                     EDIT_GetText:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0260A0E1           MOV      R6,R2
    901            if (sDest) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   1B00000A           BEQ      ??EDIT_GetText_0
    902              *sDest = 0;
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   0070C5E5           STRB     R7,[R5, #+0]
    903              if (hObj) {
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   1700000A           BEQ      ??EDIT_GetText_0
    904                EDIT_Obj * pObj;
    905                WM_LOCK();
   \   00000028   ........           BL       GUI_Lock
    906                pObj = EDIT_LOCK_H(hObj);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       GUI_ALLOC_LockH
    907                if (pObj->hpText) {
   \   00000034   340090E5           LDR      R0,[R0, #+52]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0F00000A           BEQ      ??EDIT_GetText_1
    908                  char * pText;
    909                  int NumChars, NumBytes;
    910                  pText = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000040   ........           BL       GUI_ALLOC_LockH
   \   00000044   0040A0E1           MOV      R4,R0
    911                  NumChars = GUI__GetNumChars(pText);
   \   00000048   ........           BL       GUI__GetNumChars
   \   0000004C   0010A0E1           MOV      R1,R0
    912                  NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000058   0080A0E1           MOV      R8,R0
    913                  if (NumBytes > (MaxLen - 1)) {
   \   0000005C   010046E2           SUB      R0,R6,#+1
   \   00000060   080050E1           CMP      R0,R8
    914                    NumBytes = MaxLen - 1;
   \   00000064   0080A0B1           MOVLT    R8,R0
    915                  }
    916                  GUI_MEMCPY(sDest, pText, NumBytes);
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0410A0E1           MOV      R1,R4
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       __aeabi_memcpy
    917                  GUI_UNLOCK_H(pText);
   \   00000078   ........           BL       GUI_ALLOC_UnlockH
    918                  *(sDest + NumBytes) = 0;
   \   0000007C   0570C8E7           STRB     R7,[R8, +R5]
    919                }
    920                GUI_UNLOCK_H(pObj);
   \                     ??EDIT_GetText_1:
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
    921                WM_UNLOCK();
   \   00000084   ........           BL       GUI_Unlock
    922              }
    923            }
    924          }
   \                     ??EDIT_GetText_0:
   \   00000088   F081BDE8           POP      {R4-R8,PC}       ;; return
    925          
    926          /*********************************************************************
    927          *
    928          *       EDIT_GetValue
    929          */

   \                                 In section .text, align 4, keep-with-next
    930          I32  EDIT_GetValue(EDIT_Handle hObj) {
   \                     EDIT_GetValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    931            EDIT_Obj * pObj;
    932            I32 r = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    933            if (hObj) {
   \   00000010   0500000A           BEQ      ??EDIT_GetValue_0
    934              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
    935              pObj = EDIT_LOCK_H(hObj);
    936              r = pObj->CurrentValue;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   485090E5           LDR      R5,[R0, #+72]
    937              GUI_UNLOCK_H(pObj);
   \   00000024   ........           BL       GUI_ALLOC_UnlockH
    938              WM_UNLOCK();
   \   00000028   ........           BL       GUI_Unlock
    939            }
    940            return r;
   \                     ??EDIT_GetValue_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    941          }
    942          
    943          /*********************************************************************
    944          *
    945          *       EDIT_SetValue
    946          */

   \                                 In section .text, align 4, keep-with-next
    947          void EDIT_SetValue(EDIT_Handle hObj, I32 Value) {
    948            _SetValue(hObj, Value, 0);
   \                     EDIT_SetValue:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   ........           B        _SetValue        ;; tailcall
    949          }
    950          
    951          /*********************************************************************
    952          *
    953          *       EDIT_SetMaxLen
    954          */

   \                                 In section .text, align 4, keep-with-next
    955          void EDIT_SetMaxLen(EDIT_Handle  hObj, int MaxLen) {
   \                     EDIT_SetMaxLen:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    956            if (hObj) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3600000A           BEQ      ??EDIT_SetMaxLen_0
    957              EDIT_Obj * pObj;
    958              U16 BufferSize;
    959              WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    960              pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
   \   00000024   0060A0E1           MOV      R6,R0
    961              BufferSize = pObj->BufferSize;
   \   00000028   F803D6E1           LDRSH    R0,[R6, #+56]
   \   0000002C   BA73D6E1           LDRH     R7,[R6, #+58]
   \   00000030   000055E1           CMP      R5,R0
   \   00000034   2C00000A           BEQ      ??EDIT_SetMaxLen_1
    962              if (MaxLen != pObj->MaxLen) {
    963                if (MaxLen < pObj->MaxLen) {
   \   00000038   0D0000AA           BGE      ??EDIT_SetMaxLen_2
    964                  if (pObj->hpText) {
   \   0000003C   340096E5           LDR      R0,[R6, #+52]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0A00000A           BEQ      ??EDIT_SetMaxLen_2
    965                    char * pText;
    966                    int   NumChars;
    967                    pText    = (char *)GUI_LOCK_H(pObj->hpText);
   \   00000048   ........           BL       GUI_ALLOC_LockH
   \   0000004C   0060A0E1           MOV      R6,R0
    968                    NumChars = GUI__GetNumChars(pText);
    969                    if (NumChars > MaxLen) {
   \   00000050   ........           BL       GUI__GetNumChars
   \   00000054   000055E1           CMP      R5,R0
   \   00000058   040000AA           BGE      ??EDIT_SetMaxLen_3
    970                      int NumBytes;
    971                      NumBytes = GUI_UC__NumChars2NumBytes(pText, MaxLen);
    972                      *(pText + NumBytes) = 0;
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           BL       GUI_UC__NumChars2NumBytes
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0610C0E7           STRB     R1,[R0, +R6]
    973                    }
    974                    GUI_UNLOCK_H(pText);
   \                     ??EDIT_SetMaxLen_3:
   \   00000070   ........           BL       GUI_ALLOC_UnlockH
    975                  }
    976                }
    977                GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetMaxLen_2:
   \   00000074   ........           BL       GUI_ALLOC_UnlockH
   \   00000078   0060A0E3           MOV      R6,#+0
    978                _IncrementBuffer(hObj, MaxLen - BufferSize + 1);
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       GUI_ALLOC_LockH
   \   00000084   348090E5           LDR      R8,[R0, #+52]
   \   00000088   BA03D0E1           LDRH     R0,[R0, #+58]
   \   0000008C   000085E0           ADD      R0,R5,R0
   \   00000090   070040E0           SUB      R0,R0,R7
   \   00000094   017080E2           ADD      R7,R0,#+1
   \   00000098   ........           BL       GUI_ALLOC_UnlockH
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   0800A0E1           MOV      R0,R8
   \   000000A4   ........           BL       GUI_ALLOC_Realloc
   \   000000A8   0090B0E1           MOVS     R9,R0
   \   000000AC   0900000A           BEQ      ??EDIT_SetMaxLen_4
   \   000000B0   000058E3           CMP      R8,#+0
   \   000000B4   0200001A           BNE      ??EDIT_SetMaxLen_5
   \   000000B8   ........           BL       GUI_ALLOC_LockH
   \   000000BC   0060C0E5           STRB     R6,[R0, #+0]
   \   000000C0   ........           BL       GUI_ALLOC_UnlockH
   \                     ??EDIT_SetMaxLen_5:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           BL       GUI_ALLOC_LockH
   \   000000CC   BA73C0E1           STRH     R7,[R0, #+58]
   \   000000D0   349080E5           STR      R9,[R0, #+52]
   \   000000D4   ........           BL       GUI_ALLOC_UnlockH
    979                pObj = EDIT_LOCK_H(hObj);
    980                pObj->MaxLen = MaxLen;
   \                     ??EDIT_SetMaxLen_4:
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           BL       GUI_ALLOC_LockH
   \   000000E0   B853C0E1           STRH     R5,[R0, #+56]
    981                EDIT_Invalidate(hObj);
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       WM_InvalidateWindow
    982              }
    983              GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetMaxLen_1:
   \   000000EC   ........           BL       GUI_ALLOC_UnlockH
    984              WM_UNLOCK();
   \   000000F0   ........           BL       GUI_Unlock
    985            }
    986          }
   \                     ??EDIT_SetMaxLen_0:
   \   000000F4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000F8   F083BDE8           POP      {R4-R9,PC}       ;; return
    987          
    988          /*********************************************************************
    989          *
    990          *       EDIT_SetTextAlign
    991          */

   \                                 In section .text, align 4, keep-with-next
    992          void EDIT_SetTextAlign(EDIT_Handle hObj, int Align) {
   \                     EDIT_SetTextAlign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0150A0E1           MOV      R5,R1
    993            EDIT_Obj * pObj;
    994            if (hObj == 0) {
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0900000A           BEQ      ??EDIT_SetTextAlign_0
    995              return;
    996            }
    997            WM_LOCK();
   \   00000018   ........           BL       GUI_Lock
    998            pObj = EDIT_LOCK_H(hObj);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       GUI_ALLOC_LockH
    999            if (pObj) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??EDIT_SetTextAlign_1
   1000              pObj->Props.Align = Align;
   \   0000002C   605080E5           STR      R5,[R0, #+96]
   1001              EDIT_Invalidate(hObj);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       WM_InvalidateWindow
   1002            }
   1003            GUI_UNLOCK_H(pObj);
   \                     ??EDIT_SetTextAlign_1:
   \   00000038   ........           BL       GUI_ALLOC_UnlockH
   1004            WM_UNLOCK();
   \   0000003C   ........           BL       GUI_Unlock
   1005          }
   \                     ??EDIT_SetTextAlign_0:
   \   00000040   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     GUI__BIDI_Enabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     _pfGUI__BIDI_GetCharDir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     EDIT_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     EDIT__DefaultProps

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC8 0, 0, 0, 0
   1006          
   1007          #else  /* avoid empty object files */
   1008          
   1009          void Edit_C(void) {}
   1010          
   1011          #endif
   1012          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     EDIT_AddKey                32
     EDIT_Callback              16
     EDIT_CreateEx              56
     EDIT_GetText               24
     EDIT_GetValue              16
     EDIT_SetBkColor            16
     EDIT_SetCursorAtPixel      32
     EDIT_SetFont               16
     EDIT_SetMaxLen             32
     EDIT_SetText               32
     EDIT_SetTextAlign          16
     EDIT_SetTextColor          16
     EDIT_SetValue               8
     EDIT__GetCurrentChar       16
     EDIT__SetCursorPos         16
     EDIT__SetValueUnsigned      8
     _CalcSizes                 40
     _InsertChar                24
     _IsSpaceInBuffer           24
     _Paint                     80
     _SetValue                  16


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     EDIT__DefaultProps       28
     _CalcSizes              576
     _Paint                  260
     _IsSpaceInBuffer        188
     _InsertChar             236
     _SetValue               176
     EDIT__GetCurrentChar     72
     EDIT__SetCursorPos      120
     EDIT__SetValueUnsigned    8
     EDIT_Callback           380
     EDIT_CreateEx           296
     EDIT_SetCursorAtPixel   568
     EDIT_AddKey            1120
     EDIT_SetFont             72
     EDIT_SetBkColor          80
     EDIT_SetTextColor        80
     EDIT_SetText            252
     EDIT_GetText            140
     EDIT_GetValue            56
     EDIT_SetValue             8
     EDIT_SetMaxLen          252
     EDIT_SetTextAlign        72
     ??DataTable2              4
     ??DataTable2_1            4
     ??DataTable2_2            4
     ??DataTable2_3            4
     ?<Constant {0}>           4

 
    28 bytes in section .data
     4 bytes in section .rodata
 5 028 bytes in section .text
 
 5 028 bytes of CODE  memory
     4 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
