###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:16:20 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\LISTVIEW_DeleteColumn.c             #
#    Command line =  C:\DUII\TargetHW\GUI\LISTVIEW_DeleteColumn.c -D DEBUG=1  #
#                    -D SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D  #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\LISTVIEW_DeleteColumn.lst  #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\LISTVIEW_DeleteColumn.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\LISTVIEW_DeleteColumn.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : LISTVIEW_DeleteColumn.c
     19          Purpose     : Implementation of LISTVIEW_DeleteColumn
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include "LISTVIEW_Private.h"
     24          
     25          #if GUI_WINSUPPORT
     26          
     27          /*********************************************************************
     28          *
     29          *       Public routines
     30          *
     31          **********************************************************************
     32          */
     33          /*********************************************************************
     34          *
     35          *       LISTVIEW_DeleteColumn
     36          */

   \                                 In section .text, align 4, keep-with-next
     37          void LISTVIEW_DeleteColumn(LISTVIEW_Handle hObj, unsigned Index) {
   \                     LISTVIEW_DeleteColumn:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     38            if (hObj) {
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   2E00000A           BEQ      ??LISTVIEW_DeleteColumn_0
     39              LISTVIEW_Obj * pObj;
     40              LISTVIEW_ROW * pRow;
     41              unsigned NumRows, i;
     42              LISTVIEW_CELL * pCell;
     43              GUI_ARRAY CellArray;
     44              WM_HMEM hCellInfo;
     45          
     46              WM_LOCK();
   \   00000014   ........           BL       GUI_Lock
     47              pObj = LISTVIEW_LOCK_H(hObj);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       GUI_ALLOC_LockH
   \   00000020   0060A0E1           MOV      R6,R0
     48              if (Index < LISTVIEW__GetNumColumns(pObj)) {
   \   00000024   ........           BL       LISTVIEW__GetNumColumns
   \   00000028   000055E1           CMP      R5,R0
   \   0000002C   2500002A           BCS      ??LISTVIEW_DeleteColumn_1
     49                HEADER_DeleteItem(pObj->hHeader, Index);
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   340096E5           LDR      R0,[R6, #+52]
   \   00000038   ........           BL       HEADER_DeleteItem
     50                GUI_ARRAY_DeleteItem(pObj->ColumnArray, Index);
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   3C0096E5           LDR      R0,[R6, #+60]
   \   00000044   ........           BL       GUI_ARRAY_DeleteItem
     51                NumRows = LISTVIEW__GetNumRows(pObj);
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BL       LISTVIEW__GetNumRows
   \   00000050   0070B0E1           MOVS     R7,R0
     52                for (i = 0; i < NumRows; i++) {
   \   00000054   0080A0E3           MOV      R8,#+0
   \   00000058   1300000A           BEQ      ??LISTVIEW_DeleteColumn_2
     53                  pRow = (LISTVIEW_ROW *)GUI_ARRAY_GetpItemLocked(pObj->RowArray, i);
     54                  CellArray = pRow->CellArray;
   \                     ??LISTVIEW_DeleteColumn_3:
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   380096E5           LDR      R0,[R6, #+56]
   \   00000064   ........           BL       GUI_ARRAY_GetpItemLocked
   \   00000068   009090E5           LDR      R9,[R0, #+0]
     55                  GUI_UNLOCK_H(pRow);
   \   0000006C   ........           BL       GUI_ALLOC_UnlockH
     56                  /* Delete attached info items */
     57                  pCell = (LISTVIEW_CELL *)GUI_ARRAY_GetpItemLocked(CellArray, Index);
     58                  hCellInfo = pCell->hCellInfo;
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   ........           BL       GUI_ARRAY_GetpItemLocked
   \   0000007C   00A090E5           LDR      R10,[R0, #+0]
     59                  GUI_UNLOCK_H(pCell);
   \   00000080   ........           BL       GUI_ALLOC_UnlockH
     60                  if (hCellInfo) {
   \   00000084   00005AE3           CMP      R10,#+0
   \   00000088   0100000A           BEQ      ??LISTVIEW_DeleteColumn_4
     61                    GUI_ALLOC_Free(hCellInfo);
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   ........           BL       GUI_ALLOC_Free
     62                  }
     63                  /* Delete cell */
     64                  GUI_ARRAY_DeleteItem(CellArray, Index);
   \                     ??LISTVIEW_DeleteColumn_4:
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0900A0E1           MOV      R0,R9
   \   0000009C   ........           BL       GUI_ARRAY_DeleteItem
     65                }
   \   000000A0   018088E2           ADD      R8,R8,#+1
   \   000000A4   070058E1           CMP      R8,R7
   \   000000A8   EBFFFF3A           BCC      ??LISTVIEW_DeleteColumn_3
     66                GUI_UNLOCK_H(pObj);
   \                     ??LISTVIEW_DeleteColumn_2:
   \   000000AC   ........           BL       GUI_ALLOC_UnlockH
     67                LISTVIEW__UpdateScrollParas(hObj);
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       LISTVIEW__UpdateScrollParas
     68                pObj = LISTVIEW_LOCK_H(hObj);
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       GUI_ALLOC_LockH
     69                LISTVIEW__InvalidateInsideArea(hObj);
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       LISTVIEW__InvalidateInsideArea
     70              }
     71              GUI_UNLOCK_H(pObj);
   \                     ??LISTVIEW_DeleteColumn_1:
   \   000000C8   ........           BL       GUI_ALLOC_UnlockH
     72              WM_UNLOCK();
   \   000000CC   ........           BL       GUI_Unlock
     73            }
     74          }
   \                     ??LISTVIEW_DeleteColumn_0:
   \   000000D0   F087BDE8           POP      {R4-R10,PC}      ;; return
     75          
     76          #else                            /* Avoid problems with empty object modules */
     77            void LISTVIEW_DeleteColumn_C(void);
     78            void LISTVIEW_DeleteColumn_C(void) {}
     79          #endif
     80          
     81          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     LISTVIEW_DeleteColumn     32


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     LISTVIEW_DeleteColumn  212

 
 212 bytes in section .text
 
 212 bytes of CODE memory

Errors: none
Warnings: none
