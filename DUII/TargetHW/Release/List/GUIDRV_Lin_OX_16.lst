###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:12:53 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_16.c                  #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_16.c -D DEBUG=1 -D    #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDRV_Lin_OX_16.lst       #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDRV_Lin_OX_16.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDRV_Lin_OX_16.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDRV_Lin_OX_16.c
     19          Purpose     : Driver for accessing linear video memory
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stddef.h>
     24          
     25          #include "LCD_Private.h"
     26          #include "GUI_Private.h"
     27          #include "LCD_SIM.h"
     28          #include "LCD_ConfDefaults.h"
     29          
     30          #include "GUIDRV_Lin.h"
     31          
     32          #if (!defined(WIN32) | defined(LCD_SIMCONTROLLER))
     33          
     34          /*********************************************************************
     35          *
     36          *       Defines
     37          *
     38          **********************************************************************
     39          */
     40          #ifdef WIN32
     41            //
     42            // Simulation prototypes
     43            //
     44            U16  SIM_Lin_ReadMem16  (unsigned int Off);
     45            U32  SIM_Lin_ReadMem32  (unsigned int Off);
     46            U32  SIM_Lin_ReadMem32p (U32 * p);
     47            void SIM_Lin_WriteMem16 (unsigned int Off, U16 Data);
     48            void SIM_Lin_WriteMem32 (unsigned int Off, U32 Data);
     49            void SIM_Lin_WriteMem16p(U16 * p, U16 Data);
     50            void SIM_Lin_WriteMem32p(U32 * p, U32 Data);
     51            void SIM_Lin_memcpy     (void * pDst, const void * pSrc, int Len);
     52            void SIM_Lin_SetVRAMAddr(int LayerIndex, void * pVRAM);
     53            void SIM_Lin_SetVRAMSize(int LayerIndex, int xSize, int ySize);
     54            //
     55            // Access macro definition for internal simulation
     56            //
     57            #define LCD_READ_MEM16(VRAMAddr, Off)        SIM_Lin_ReadMem16(Off)
     58            #define LCD_READ_MEM32(VRAMAddr, Off)        SIM_Lin_ReadMem32(Off)
     59            #define LCD_READ_MEM32P(p)                   SIM_Lin_ReadMem32p(p)
     60            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) SIM_Lin_WriteMem16(Off, Data)
     61            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) SIM_Lin_WriteMem32(Off, Data)
     62            #define LCD_WRITE_MEM16P(p, Data)            SIM_Lin_WriteMem16p(p, Data)
     63            #define LCD_WRITE_MEM32P(p, Data)            SIM_Lin_WriteMem32p(p, Data)
     64            #undef  GUI_MEMCPY
     65            #define GUI_MEMCPY(pDst, pSrc, Len) SIM_Lin_memcpy(pDst, pSrc, Len)
     66          #else
     67            //
     68            // Access macro definition for hardware
     69            //
     70            #define LCD_READ_MEM16(VRAMAddr, Off)        (*((U16 *)VRAMAddr + (U32)Off))
     71            #define LCD_READ_MEM32(VRAMAddr, Off)        (*((U32 *)VRAMAddr + (U32)Off))
     72            #define LCD_READ_MEM32P(p)                   (*((U32 *)p))
     73            #define LCD_WRITE_MEM16(VRAMAddr, Off, Data) *((U16 *)VRAMAddr + (U32)Off) = Data
     74            #define LCD_WRITE_MEM32(VRAMAddr, Off, Data) *((U32 *)VRAMAddr + (U32)Off) = Data
     75            #define LCD_WRITE_MEM16P(p, Data)            *((U16 *)p) = Data
     76            #define LCD_WRITE_MEM32P(p, Data)            *((U32 *)p) = Data
     77          #endif
     78          
     79          #define WRITE_MEM16(VRAMAddr, Off, Data) LCD_WRITE_MEM16(VRAMAddr, Off, Data)
     80          #define WRITE_MEM32(VRAMAddr, Off, Data) LCD_WRITE_MEM32(VRAMAddr, Off, Data)
     81          #define READ_MEM16(VRAMAddr, Off)        LCD_READ_MEM16(VRAMAddr, Off)
     82          #define READ_MEM32(VRAMAddr, Off)        LCD_READ_MEM32(VRAMAddr, Off)
     83          #define READ_MEM32P(p)                   LCD_READ_MEM32P(p)
     84          #define WRITE_MEM16P(p, Data)            LCD_WRITE_MEM16P(p, Data)
     85          #define WRITE_MEM32P(p, Data)            LCD_WRITE_MEM32P(p, Data)
     86          
     87          #define OFF2PTR16(VRAMAddr, Off)     (U16 *)((U8 *)VRAMAddr + (Off << 1))
     88          #define OFF2PTR32(VRAMAddr, Off)     (U32 *)((U8 *)VRAMAddr + (Off << 2))
     89          
     90          #define XY2OFF16(vxSizePhys, x, y)    ((U32)y *  vxSizePhys       +       x      )
     91          #define XY2OFF32(vxSizePhys, x, y)    ((U32)y * (vxSizePhys >> 1) + ((U32)x >> 1))
     92          
     93          /*********************************************************************
     94          *
     95          *       Types
     96          *
     97          **********************************************************************
     98          */
     99          typedef struct {
    100            U32 VRAMAddr;
    101            int xSize, ySize;
    102            int vxSize, vySize;
    103            int vxSizePhys;
    104            int xPos, yPos;
    105            int Alpha;
    106            int IsVisible;
    107            void (* pfFillRect)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex);
    108          } DRIVER_CONTEXT;
    109          
    110          /*********************************************************************
    111          *
    112          *       Static functions
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       _SetPixelIndex
    119          *
    120          * Purpose:
    121          *   Sets the index of the given pixel. The upper layers
    122          *   calling this routine make sure that the coordinates are in range, so
    123          *   that no check on the parameters needs to be performed.
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
   \                     _SetPixelIndex:
   \   00000000   00402DE9           PUSH     {LR}
    126            DRIVER_CONTEXT * pContext;
    127            U32 Off;
    128          
    129            //
    130            // Get context
    131            //
    132            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    133            //
    134            // Mirror x
    135            //
    136            x = (pContext->vxSize - 1 - (x));
    137            //
    138            // Write into hardware
    139            //
    140            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
    141            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
    142            WRITE_MEM16(pContext->VRAMAddr, Off, PixelIndex);
   \   00000008   14C090E5           LDR      R12,[R0, #+20]
   \   0000000C   0CE090E5           LDR      LR,[R0, #+12]
   \   00000010   9CE222E0           MLA      R2,R12,R2,LR
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   012042E2           SUB      R2,R2,#+1
   \   0000001C   011042E0           SUB      R1,R2,R1
   \   00000020   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000024   B030C0E1           STRH     R3,[R0, #+0]
    143          }
   \   00000028   0080BDE8           POP      {PC}             ;; return
    144          
    145          /*********************************************************************
    146          *
    147          *       _GetPixelIndex
    148          *
    149          * Purpose:
    150          *   Returns the index of the given pixel. The upper layers
    151          *   calling this routine make sure that the coordinates are in range, so
    152          *   that no check on the parameters needs to be performed.
    153          */

   \                                 In section .text, align 4, keep-with-next
    154          static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
    155            DRIVER_CONTEXT * pContext;
    156            U32 Off;
    157            LCD_PIXELINDEX PixelIndex;
    158          
    159            //
    160            // Get context
    161            //
    162            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    163            //
    164            // Mirror x
    165            //
    166            x = (pContext->vxSize - 1 - (x));
    167            //
    168            // Read from hardware
    169            //
    170            pContext   = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetPixelIndex:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    171            Off        = XY2OFF16(pContext->vxSizePhys, x, y);
    172            PixelIndex = READ_MEM16(pContext->VRAMAddr, Off);
    173            return PixelIndex;
   \   00000004   143090E5           LDR      R3,[R0, #+20]
   \   00000008   0CC090E5           LDR      R12,[R0, #+12]
   \   0000000C   93C222E0           MLA      R2,R3,R2,R12
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   011042E0           SUB      R1,R2,R1
   \   0000001C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000020   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000024   1EFF2FE1           BX       LR               ;; return
    174          }
    175          
    176          /*********************************************************************
    177          *
    178          *       _XorPixel
    179          */

   \                                 In section .text, align 4, keep-with-next
    180          static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
   \                     _XorPixel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    181            LCD_PIXELINDEX PixelIndex;
    182            LCD_PIXELINDEX IndexMask;
    183            
    184            PixelIndex = _GetPixelIndex(pDevice, x, y);
   \   00000008   080096E5           LDR      R0,[R6, #+8]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   141090E5           LDR      R1,[R0, #+20]
   \   00000018   0C2090E5           LDR      R2,[R0, #+12]
   \   0000001C   912522E0           MLA      R2,R1,R5,R2
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   011042E2           SUB      R1,R2,#+1
   \   00000028   041041E0           SUB      R1,R1,R4
   \   0000002C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000030   B070D0E1           LDRH     R7,[R0, #+0]
    185            IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
   \   00000034   100096E5           LDR      R0,[R6, #+16]
   \   00000038   04D04DE2           SUB      SP,SP,#+4
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
   \   00000040   30FF2FE1           BLX      R0
    186            _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
   \   00000044   081096E5           LDR      R1,[R6, #+8]
   \   00000048   070020E0           EOR      R0,R0,R7
   \   0000004C   142091E5           LDR      R2,[R1, #+20]
   \   00000050   0C3091E5           LDR      R3,[R1, #+12]
   \   00000054   923523E0           MLA      R3,R2,R5,R3
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   012043E2           SUB      R2,R3,#+1
   \   00000060   042042E0           SUB      R2,R2,R4
   \   00000064   821081E0           ADD      R1,R1,R2, LSL #+1
   \   00000068   B000C1E1           STRH     R0,[R1, #+0]
    187          }
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   F080BDE8           POP      {R4-R7,PC}       ;; return
    188          
    189          /*********************************************************************
    190          *
    191          *       _DrawHLine
    192          */

   \                                 In section .text, align 4, keep-with-next
    193          static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
   \                     _DrawHLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    194            DRIVER_CONTEXT * pContext;
    195            U32 * pDest;
    196            U32 Off;
    197            int RemPixels, temp;
    198            U32 Data, ColorMask;
    199            LCD_PIXELINDEX ColorIndex;
    200          
    201            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1B00000A           BEQ      ??_DrawHLine_0
   \   00000024   040055E1           CMP      R5,R4
   \   00000028   4F0000BA           BLT      ??_DrawHLine_1
    202              for (; x0 <= x1; x0++) {
    203                _XorPixel(pDevice, x0, y);
   \                     ??_DrawHLine_2:
   \   0000002C   080097E5           LDR      R0,[R7, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   921621E0           MLA      R1,R2,R6,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   041041E0           SUB      R1,R1,R4
   \   00000048   810080E0           ADD      R0,R0,R1, LSL #+1
   \   0000004C   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000050   100097E5           LDR      R0,[R7, #+16]
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   30FF2FE1           BLX      R0
   \   0000005C   081097E5           LDR      R1,[R7, #+8]
   \   00000060   080020E0           EOR      R0,R0,R8
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   0C2091E5           LDR      R2,[R1, #+12]
   \   0000006C   932622E0           MLA      R2,R3,R6,R2
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   012042E2           SUB      R2,R2,#+1
   \   00000078   042042E0           SUB      R2,R2,R4
   \   0000007C   821081E0           ADD      R1,R1,R2, LSL #+1
    204              }
   \   00000080   014084E2           ADD      R4,R4,#+1
   \   00000084   B000C1E1           STRH     R0,[R1, #+0]
   \   00000088   040055E1           CMP      R5,R4
   \   0000008C   E6FFFFAA           BGE      ??_DrawHLine_2
   \   00000090   F081BDE8           POP      {R4-R8,PC}
    205            } else {
    206              ColorIndex = LCD__GetColorIndex();
    207              //
    208              // Get context
    209              //
    210              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     ??_DrawHLine_0:
   \   00000094   081097E5           LDR      R1,[R7, #+8]
    211              //
    212              // Mirror x
    213              //
    214              temp = x0;
   \   00000098   0420A0E1           MOV      R2,R4
   \   0000009C   0C3091E5           LDR      R3,[R1, #+12]
   \   000000A0   ........           LDR      R0,??DataTable15
   \   000000A4   013043E2           SUB      R3,R3,#+1
   \   000000A8   054043E0           SUB      R4,R3,R5
    215              x0 = (pContext->vxSize - 1 - x1);
    216              x1 = (pContext->vxSize - 1 - temp);
   \   000000AC   025043E0           SUB      R5,R3,R2
    217              //
    218              // Draw...
    219              //
    220              Off = XY2OFF32(pContext->vxSizePhys, x0, y);
    221              pDest = OFF2PTR32(pContext->VRAMAddr, Off);
   \   000000B0   142091E5           LDR      R2,[R1, #+20]
   \   000000B4   001091E5           LDR      R1,[R1, #+0]
   \   000000B8   C220A0E1           ASR      R2,R2,#+1
   \   000000BC   920603E0           MUL      R3,R2,R6
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   A42083E0           ADD      R2,R3,R4, LSR #+1
   \   000000C8   021181E0           ADD      R1,R1,R2, LSL #+2
    222              RemPixels = x1 - x0 + 1;
   \   000000CC   042045E0           SUB      R2,R5,R4
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   012082E2           ADD      R2,R2,#+1
    223              //
    224              // First DWORD
    225              //
    226              if (x0 & 1) {
   \   000000D8   010014E3           TST      R4,#0x1
   \   000000DC   0500000A           BEQ      ??_DrawHLine_3
    227                Data = READ_MEM32P(pDest);
    228                #if (LCD_ENDIAN_BIG == 0)
    229                  Data &= 0xFFFF;
    230                  Data |= (((U32)ColorIndex) << 16);
    231                #else
    232                  Data &= 0xFFFF0000;
    233                  Data |= ColorIndex;
    234                #endif
    235                WRITE_MEM32P(pDest, Data);
   \   000000E0   B030D1E1           LDRH     R3,[R1, #+0]
   \   000000E4   00C8A0E1           LSL      R12,R0,#+16
    236                pDest++;
    237                RemPixels--;
   \   000000E8   012042E2           SUB      R2,R2,#+1
   \   000000EC   0338A0E1           LSL      R3,R3,#+16
   \   000000F0   23388CE1           ORR      R3,R12,R3, LSR #+16
   \   000000F4   043081E4           STR      R3,[R1], #+4
    238              }
    239              //
    240              // Complete DWORDS
    241              //
    242              ColorMask = ColorIndex * 0x00010001;
   \                     ??_DrawHLine_3:
   \   000000F8   003880E0           ADD      R3,R0,R0, LSL #+16
    243              if (RemPixels >= 16) {
   \   000000FC   100052E3           CMP      R2,#+16
   \   00000100   0B0000BA           BLT      ??_DrawHLine_4
    244                RemPixels -= 16;
   \   00000104   102042E2           SUB      R2,R2,#+16
    245                do {
    246                  WRITE_MEM32P(pDest,     ColorMask);
   \                     ??_DrawHLine_5:
   \   00000108   043081E4           STR      R3,[R1], #+4
    247                  WRITE_MEM32P(pDest + 1, ColorMask);
   \   0000010C   043081E4           STR      R3,[R1], #+4
    248                  WRITE_MEM32P(pDest + 2, ColorMask);
   \   00000110   043081E4           STR      R3,[R1], #+4
    249                  WRITE_MEM32P(pDest + 3, ColorMask);
   \   00000114   043081E4           STR      R3,[R1], #+4
    250                  WRITE_MEM32P(pDest + 4, ColorMask);
   \   00000118   043081E4           STR      R3,[R1], #+4
    251                  WRITE_MEM32P(pDest + 5, ColorMask);
   \   0000011C   043081E4           STR      R3,[R1], #+4
    252                  WRITE_MEM32P(pDest + 6, ColorMask);
   \   00000120   043081E4           STR      R3,[R1], #+4
    253                  WRITE_MEM32P(pDest + 7, ColorMask);
   \   00000124   043081E4           STR      R3,[R1], #+4
    254                  pDest += 8;
    255                  RemPixels -= 16;
   \   00000128   102052E2           SUBS     R2,R2,#+16
    256                } while (RemPixels >= 0);
   \   0000012C   F5FFFF5A           BPL      ??_DrawHLine_5
    257                RemPixels += 16;
   \   00000130   102082E2           ADD      R2,R2,#+16
    258              }
    259              if (RemPixels >= 2) {
   \                     ??_DrawHLine_4:
   \   00000134   020052E3           CMP      R2,#+2
   \   00000138   030000BA           BLT      ??_DrawHLine_6
    260                do {
    261                  WRITE_MEM32P(pDest, ColorMask);
    262                  pDest++;
    263                  RemPixels -= 2;
   \                     ??_DrawHLine_7:
   \   0000013C   022042E2           SUB      R2,R2,#+2
   \   00000140   043081E4           STR      R3,[R1], #+4
    264                } while (RemPixels >= 2);
   \   00000144   020052E3           CMP      R2,#+2
   \   00000148   FBFFFFAA           BGE      ??_DrawHLine_7
    265              }
    266              //
    267              // Last DWORD
    268              //
    269              if (RemPixels > 0) {
   \                     ??_DrawHLine_6:
   \   0000014C   010052E3           CMP      R2,#+1
   \   00000150   050000BA           BLT      ??_DrawHLine_1
    270                Data = READ_MEM32P(pDest);
    271                #if (LCD_ENDIAN_BIG == 0)
    272                  Data &= 0xFFFF0000;
    273                  Data |= ColorIndex & 0xFFFF;
    274                #else
    275                  Data &= 0xFFFF;
    276                  Data |= (((U32)ColorIndex) << 16);
    277                #endif
    278                WRITE_MEM32P(pDest, Data);
   \   00000154   002091E5           LDR      R2,[R1, #+0]
   \   00000158   0008A0E1           LSL      R0,R0,#+16
   \   0000015C   2228A0E1           LSR      R2,R2,#+16
   \   00000160   2008A0E1           LSR      R0,R0,#+16
   \   00000164   020880E1           ORR      R0,R0,R2, LSL #+16
   \   00000168   000081E5           STR      R0,[R1, #+0]
    279              }
    280            }
    281          }
   \                     ??_DrawHLine_1:
   \   0000016C   F081BDE8           POP      {R4-R8,PC}       ;; return
    282          
    283          /*********************************************************************
    284          *
    285          *       _DrawVLine, not optimized
    286          */

   \                                 In section .text, align 4, keep-with-next
    287          static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
   \                     _DrawVLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    288            LCD_PIXELINDEX ColorIndex;
    289          
    290            if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
   \   00000008   ........           LDR      R0,??DataTable14
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1000D0E5           LDRB     R0,[R0, #+16]
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   010010E3           TST      R0,#0x1
   \   00000020   1B00000A           BEQ      ??_DrawVLine_0
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   2A0000BA           BLT      ??_DrawVLine_1
    291              for (; y0 <= y1; y0++) {
    292                _XorPixel(pDevice, x, y0);
   \                     ??_DrawVLine_2:
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   142090E5           LDR      R2,[R0, #+20]
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   921721E0           MLA      R1,R2,R7,R1
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   051041E0           SUB      R1,R1,R5
   \   00000048   810080E0           ADD      R0,R0,R1, LSL #+1
   \   0000004C   B080D0E1           LDRH     R8,[R0, #+0]
   \   00000050   100094E5           LDR      R0,[R4, #+16]
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   30FF2FE1           BLX      R0
   \   0000005C   081094E5           LDR      R1,[R4, #+8]
   \   00000060   080020E0           EOR      R0,R0,R8
   \   00000064   143091E5           LDR      R3,[R1, #+20]
   \   00000068   0C2091E5           LDR      R2,[R1, #+12]
   \   0000006C   932722E0           MLA      R2,R3,R7,R2
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   012042E2           SUB      R2,R2,#+1
   \   00000078   052042E0           SUB      R2,R2,R5
   \   0000007C   821081E0           ADD      R1,R1,R2, LSL #+1
    293              }
   \   00000080   017087E2           ADD      R7,R7,#+1
   \   00000084   B000C1E1           STRH     R0,[R1, #+0]
   \   00000088   070056E1           CMP      R6,R7
   \   0000008C   E6FFFFAA           BGE      ??_DrawVLine_2
   \   00000090   F081BDE8           POP      {R4-R8,PC}
    294            } else {
    295              ColorIndex = LCD__GetColorIndex();
   \                     ??_DrawVLine_0:
   \   00000094   ........           LDR      R0,??DataTable15
   \   00000098   070056E1           CMP      R6,R7
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   0B0000BA           BLT      ??_DrawVLine_1
    296              for (; y0 <= y1; y0++) {
    297                _SetPixelIndex(pDevice, x, y0, ColorIndex);
   \                     ??_DrawVLine_3:
   \   000000A8   081094E5           LDR      R1,[R4, #+8]
   \   000000AC   143091E5           LDR      R3,[R1, #+20]
   \   000000B0   0C2091E5           LDR      R2,[R1, #+12]
   \   000000B4   932722E0           MLA      R2,R3,R7,R2
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
   \   000000BC   012042E2           SUB      R2,R2,#+1
   \   000000C0   052042E0           SUB      R2,R2,R5
   \   000000C4   821081E0           ADD      R1,R1,R2, LSL #+1
    298              }
   \   000000C8   017087E2           ADD      R7,R7,#+1
   \   000000CC   B000C1E1           STRH     R0,[R1, #+0]
   \   000000D0   070056E1           CMP      R6,R7
   \   000000D4   F3FFFFAA           BGE      ??_DrawVLine_3
    299            }
    300          }
   \                     ??_DrawVLine_1:
   \   000000D8   F081BDE8           POP      {R4-R8,PC}       ;; return
    301          
    302          /*********************************************************************
    303          *
    304          *       _FillRect
    305          */

   \                                 In section .text, align 4, keep-with-next
    306          static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
   \                     _FillRect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18809DE5           LDR      R8,[SP, #+24]
   \   00000008   0260A0E1           MOV      R6,R2
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   060058E1           CMP      R8,R6
   \   0000001C   070000BA           BLT      ??_FillRect_0
    307            #ifdef LCD_FILL_RECT
    308               LCD_FILL_RECT(x0, y0, x1, y1, LCD__GetColorIndex());
    309            #else
    310              for (; y0 <= y1; y0++) {
    311                _DrawHLine(pDevice, x0, y0, x1);
   \                     ??_FillRect_1:
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       _DrawHLine
    312              }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   060058E1           CMP      R8,R6
   \   0000003C   F7FFFFAA           BGE      ??_FillRect_1
    313            #endif
    314          }
   \                     ??_FillRect_0:
   \   00000040   F081BDE8           POP      {R4-R8,PC}       ;; return
    315          
    316          /*********************************************************************
    317          *
    318          *       Draw Bitmap 1 BPP
    319          */

   \                                 In section .text, align 4, keep-with-next
    320          static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, unsigned x, unsigned y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine1BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    321            DRIVER_CONTEXT * pContext;
    322            unsigned Pixels, PixelCnt;
    323            LCD_PIXELINDEX Index, Index0, Index1, IndexMask;
    324            U32 Off;
    325          
    326            Index0   = *(pTrans + 0);
    327            Index1   = *(pTrans + 1);
    328            //
    329            // Get context
    330            //
    331            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   086090E5           LDR      R6,[R0, #+8]
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
    332            x       += Diff;
    333            //
    334            // Mirror x
    335            //
    336            x = (pContext->vxSize - 1 - (x));
    337            Off      = XY2OFF16(pContext->vxSizePhys, x, y);
   \   0000000C   0C8096E5           LDR      R8,[R6, #+12]
   \   00000010   147096E5           LDR      R7,[R6, #+20]
   \   00000014   018048E2           SUB      R8,R8,#+1
   \   00000018   978222E0           MLA      R2,R7,R2,R8
   \   0000001C   0340A0E1           MOV      R4,R3
   \   00000020   011042E0           SUB      R1,R2,R1
   \   00000024   0C7041E0           SUB      R7,R1,R12
    338            PixelCnt = 8 - Diff;
    339            Pixels   = LCD_aMirror[*p] >> Diff;
   \   00000028   0010D4E5           LDRB     R1,[R4, #+0]
   \   0000002C   ........           LDR      R9,??DataTable15_1
   \   00000030   28E09DE5           LDR      LR,[SP, #+40]
   \   00000034   0910D1E7           LDRB     R1,[R1, +R9]
   \   00000038   00309EE5           LDR      R3,[LR, #+0]
   \   0000003C   24509DE5           LDR      R5,[SP, #+36]
   \   00000040   51ACA0E1           ASR      R10,R1,R12
    340            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000044   ........           LDR      R1,??DataTable14
   \   00000048   04E09EE5           LDR      LR,[LR, #+4]
   \   0000004C   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000050   08806CE2           RSB      R8,R12,#+8
   \   00000054   031001E2           AND      R1,R1,#0x3
   \   00000058   030051E3           CMP      R1,#+3
   \   0000005C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitLine1BPP_0:
   \   00000060   3400008A           BHI      ??_DrawBitLine1BPP_1
   \   00000064   020000EA           B        ??_DrawBitLine1BPP_2
   \   00000068   1F0000EA           B        ??_DrawBitLine1BPP_3
   \   0000006C   100000EA           B        ??_DrawBitLine1BPP_4
   \   00000070   1D0000EA           B        ??_DrawBitLine1BPP_3
    341            case 0:
    342              do {
    343                Index = (Pixels & 1) ? Index1 : Index0;
    344                WRITE_MEM16(pContext->VRAMAddr, Off, Index);
   \                     ??_DrawBitLine1BPP_2:
   \   00000074   001096E5           LDR      R1,[R6, #+0]
   \   00000078   01001AE3           TST      R10,#0x1
   \   0000007C   0E00A011           MOVNE    R0,LR
   \   00000080   0300A001           MOVEQ    R0,R3
   \   00000084   871081E0           ADD      R1,R1,R7, LSL #+1
    345                Off--;
    346                PixelCnt--;
   \   00000088   018048E2           SUB      R8,R8,#+1
   \   0000008C   B000C1E1           STRH     R0,[R1, #+0]
    347                Pixels >>= 1;
    348                if (PixelCnt == 0) {
   \   00000090   000058E3           CMP      R8,#+0
    349                  Pixels   = LCD_aMirror[*(++p)];
   \   00000094   0100F405           LDRBEQ   R0,[R4, #+1]!
   \   00000098   AAA0A0E1           LSR      R10,R10,#+1
    350                  PixelCnt = 8;
   \   0000009C   0880A003           MOVEQ    R8,#+8
   \   000000A0   09A0D007           LDRBEQ   R10,[R0, +R9]
   \   000000A4   017047E2           SUB      R7,R7,#+1
    351                }
    352              } while (--xsize);
   \   000000A8   015055E2           SUBS     R5,R5,#+1
   \   000000AC   F0FFFF1A           BNE      ??_DrawBitLine1BPP_2
   \   000000B0   F087BDE8           POP      {R4-R10,PC}
    353              break;
    354            case LCD_DRAWMODE_TRANS:
    355              do {
    356                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_4:
   \   000000B4   01001AE3           TST      R10,#0x1
    357                  WRITE_MEM16(pContext->VRAMAddr, Off, Index1);
   \   000000B8   00009615           LDRNE    R0,[R6, #+0]
    358                }
    359                Off--;
    360                PixelCnt--;
   \   000000BC   018048E2           SUB      R8,R8,#+1
   \   000000C0   87008010           ADDNE    R0,R0,R7, LSL #+1
   \   000000C4   B0E0C011           STRHNE   LR,[R0, #+0]
    361                Pixels >>= 1;
    362                if (PixelCnt == 0) {
   \   000000C8   000058E3           CMP      R8,#+0
    363                  Pixels   = LCD_aMirror[*(++p)];
   \   000000CC   0100F405           LDRBEQ   R0,[R4, #+1]!
   \   000000D0   AAA0A0E1           LSR      R10,R10,#+1
    364                  PixelCnt = 8;
   \   000000D4   0880A003           MOVEQ    R8,#+8
   \   000000D8   09A0D007           LDRBEQ   R10,[R0, +R9]
   \   000000DC   017047E2           SUB      R7,R7,#+1
    365                }
    366              } while (--xsize);
   \   000000E0   015055E2           SUBS     R5,R5,#+1
   \   000000E4   F2FFFF1A           BNE      ??_DrawBitLine1BPP_4
   \   000000E8   F087BDE8           POP      {R4-R10,PC}
    367              break;
    368            case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
    369            case LCD_DRAWMODE_XOR:
    370              IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
   \                     ??_DrawBitLine1BPP_3:
   \   000000EC   100090E5           LDR      R0,[R0, #+16]
   \   000000F0   080090E5           LDR      R0,[R0, #+8]
   \   000000F4   30FF2FE1           BLX      R0
   \   000000F8   001096E5           LDR      R1,[R6, #+0]
   \   000000FC   871081E0           ADD      R1,R1,R7, LSL #+1
    371              do {
    372                if (Pixels & 1) {
   \                     ??_DrawBitLine1BPP_5:
   \   00000100   01001AE3           TST      R10,#0x1
    373                  Index = READ_MEM16(pContext->VRAMAddr, Off);
    374                  Index ^= IndexMask;
    375                  WRITE_MEM16(pContext->VRAMAddr, Off, Index);
   \   00000104   B020D111           LDRHNE   R2,[R1, #+0]
    376                }
    377                Off--;
    378                PixelCnt--;
   \   00000108   018048E2           SUB      R8,R8,#+1
    379                Pixels >>= 1;
   \   0000010C   AAA0A0E1           LSR      R10,R10,#+1
   \   00000110   02202010           EORNE    R2,R0,R2
   \   00000114   B020C111           STRHNE   R2,[R1, #+0]
    380                if (PixelCnt == 0) {
   \   00000118   000058E3           CMP      R8,#+0
    381                  Pixels   = LCD_aMirror[*(++p)];
   \   0000011C   0120F405           LDRBEQ   R2,[R4, #+1]!
    382                  PixelCnt = 8;
   \   00000120   0880A003           MOVEQ    R8,#+8
    383                }
    384              } while (--xsize);
   \   00000124   015045E2           SUB      R5,R5,#+1
   \   00000128   09A0D207           LDRBEQ   R10,[R2, +R9]
   \   0000012C   021041E2           SUB      R1,R1,#+2
   \   00000130   000055E3           CMP      R5,#+0
   \   00000134   F1FFFF1A           BNE      ??_DrawBitLine1BPP_5
    385              break;
    386            }
    387          }
   \                     ??_DrawBitLine1BPP_1:
   \   00000138   F087BDE8           POP      {R4-R10,PC}      ;; return
    388          
    389          /*********************************************************************
    390          *
    391          *       Draw Bitmap 2 BPP, not optimized
    392          */

   \                                 In section .text, align 4, keep-with-next
    393          static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine2BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    394            LCD_PIXELINDEX Pixels, PixelIndex;
    395            int CurrentPixel, Shift, Index;
    396            Pixels       = *p;
    397            CurrentPixel = Diff;
    398            x           += Diff;
    399            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable14
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24409DE5           LDR      R4,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00E0D3E5           LDRB     LR,[R3, #+0]
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine2BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   3200000A           BEQ      ??_DrawBitLine2BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    400            case 0:
    401              if (pTrans) {
   \                     ??_DrawBitLine2BPP_0:
   \   00000034   C060A0E3           MOV      R6,#+192
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1700000A           BEQ      ??_DrawBitLine2BPP_2
    402                do {
    403                  Shift = (3 - CurrentPixel) << 1;
    404                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    405                  PixelIndex = *(pTrans + Index);
    406                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine2BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   03706CE2           RSB      R7,R12,#+3
   \   00000048   14A098E5           LDR      R10,[R8, #+20]
   \   0000004C   0C9098E5           LDR      R9,[R8, #+12]
   \   00000050   9A9229E0           MLA      R9,R10,R2,R9
   \   00000054   008098E5           LDR      R8,[R8, #+0]
   \   00000058   019049E2           SUB      R9,R9,#+1
   \   0000005C   019049E0           SUB      R9,R9,R1
   \   00000060   8770A0E1           LSL      R7,R7,#+1
   \   00000064   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000068   0790A0E1           MOV      R9,R7
   \   0000006C   069069E2           RSB      R9,R9,#+6
   \   00000070   56990EE0           AND      R9,LR,R6, ASR R9
   \   00000074   3977A0E1           LSR      R7,R9,R7
   \   00000078   077195E7           LDR      R7,[R5, +R7, LSL #+2]
    407                  if (++CurrentPixel == 4) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   B070C8E1           STRH     R7,[R8, #+0]
   \   00000084   04005CE3           CMP      R12,#+4
    408                    CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    409                    Pixels = *(++p);
   \   0000008C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000090   011081E2           ADD      R1,R1,#+1
    410                  }
    411          		  } while (--xsize);
   \   00000094   014054E2           SUBS     R4,R4,#+1
   \   00000098   E8FFFF1A           BNE      ??_DrawBitLine2BPP_3
   \   0000009C   F087BDE8           POP      {R4-R10,PC}
    412              } else {
    413                do {
    414                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_2:
   \   000000A0   03506CE2           RSB      R5,R12,#+3
   \   000000A4   8570A0E1           LSL      R7,R5,#+1
    415                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
    416                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   085090E5           LDR      R5,[R0, #+8]
    417                  if (++CurrentPixel == 4) {
   \   000000AC   01C08CE2           ADD      R12,R12,#+1
   \   000000B0   149095E5           LDR      R9,[R5, #+20]
   \   000000B4   0C8095E5           LDR      R8,[R5, #+12]
   \   000000B8   998228E0           MLA      R8,R9,R2,R8
   \   000000BC   005095E5           LDR      R5,[R5, #+0]
   \   000000C0   018048E2           SUB      R8,R8,#+1
   \   000000C4   018048E0           SUB      R8,R8,R1
   \   000000C8   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000000CC   0780A0E1           MOV      R8,R7
   \   000000D0   068068E2           RSB      R8,R8,#+6
   \   000000D4   56880EE0           AND      R8,LR,R6, ASR R8
   \   000000D8   3877A0E1           LSR      R7,R8,R7
   \   000000DC   B070C5E1           STRH     R7,[R5, #+0]
   \   000000E0   04005CE3           CMP      R12,#+4
    418                    CurrentPixel = 0;
   \   000000E4   00C0A003           MOVEQ    R12,#+0
    419                    Pixels = *(++p);
   \   000000E8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000EC   011081E2           ADD      R1,R1,#+1
    420                  }
    421          		  } while (--xsize);
   \   000000F0   014054E2           SUBS     R4,R4,#+1
   \   000000F4   E9FFFF1A           BNE      ??_DrawBitLine2BPP_2
   \   000000F8   F087BDE8           POP      {R4-R10,PC}
    422              }
    423              break;
    424            case LCD_DRAWMODE_TRANS:
    425              if (pTrans) {
   \                     ??_DrawBitLine2BPP_1:
   \   000000FC   C060A0E3           MOV      R6,#+192
   \   00000100   000055E3           CMP      R5,#+0
   \   00000104   1800000A           BEQ      ??_DrawBitLine2BPP_4
    426                do {
    427                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_5:
   \   00000108   03706CE2           RSB      R7,R12,#+3
   \   0000010C   8770A0E1           LSL      R7,R7,#+1
    428                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000110   0780A0E1           MOV      R8,R7
   \   00000114   068068E2           RSB      R8,R8,#+6
   \   00000118   56880EE0           AND      R8,LR,R6, ASR R8
   \   0000011C   3877B0E1           LSRS     R7,R8,R7
    429                  if (Index) {
   \   00000120   0900000A           BEQ      ??_DrawBitLine2BPP_6
    430                    PixelIndex = *(pTrans + Index);
    431                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000124   088090E5           LDR      R8,[R0, #+8]
   \   00000128   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000012C   14A098E5           LDR      R10,[R8, #+20]
   \   00000130   0C9098E5           LDR      R9,[R8, #+12]
   \   00000134   9A9229E0           MLA      R9,R10,R2,R9
   \   00000138   008098E5           LDR      R8,[R8, #+0]
   \   0000013C   019049E2           SUB      R9,R9,#+1
   \   00000140   019049E0           SUB      R9,R9,R1
   \   00000144   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000148   B070C8E1           STRH     R7,[R8, #+0]
    432                  }
    433                  x++;
    434                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_6:
   \   0000014C   01C08CE2           ADD      R12,R12,#+1
   \   00000150   04005CE3           CMP      R12,#+4
    435                    CurrentPixel = 0;
   \   00000154   00C0A003           MOVEQ    R12,#+0
    436                    Pixels = *(++p);
   \   00000158   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   0000015C   011081E2           ADD      R1,R1,#+1
    437                  }
    438          		  } while (--xsize);
   \   00000160   014054E2           SUBS     R4,R4,#+1
   \   00000164   E7FFFF1A           BNE      ??_DrawBitLine2BPP_5
   \   00000168   F087BDE8           POP      {R4-R10,PC}
    439              } else {
    440                do {
    441                  Shift = (3 - CurrentPixel) << 1;
   \                     ??_DrawBitLine2BPP_4:
   \   0000016C   03506CE2           RSB      R5,R12,#+3
   \   00000170   8570A0E1           LSL      R7,R5,#+1
    442                  Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
   \   00000174   0750A0E1           MOV      R5,R7
   \   00000178   065065E2           RSB      R5,R5,#+6
   \   0000017C   56550EE0           AND      R5,LR,R6, ASR R5
   \   00000180   3577B0E1           LSRS     R7,R5,R7
    443                  if (Index) {
   \   00000184   0800000A           BEQ      ??_DrawBitLine2BPP_7
    444                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000188   085090E5           LDR      R5,[R0, #+8]
   \   0000018C   149095E5           LDR      R9,[R5, #+20]
   \   00000190   0C8095E5           LDR      R8,[R5, #+12]
   \   00000194   998228E0           MLA      R8,R9,R2,R8
   \   00000198   005095E5           LDR      R5,[R5, #+0]
   \   0000019C   018048E2           SUB      R8,R8,#+1
   \   000001A0   018048E0           SUB      R8,R8,R1
   \   000001A4   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000001A8   B070C5E1           STRH     R7,[R5, #+0]
    445                  }
    446                  x++;
    447                  if (++CurrentPixel == 4) {
   \                     ??_DrawBitLine2BPP_7:
   \   000001AC   01C08CE2           ADD      R12,R12,#+1
   \   000001B0   04005CE3           CMP      R12,#+4
    448                    CurrentPixel = 0;
   \   000001B4   00C0A003           MOVEQ    R12,#+0
    449                    Pixels = *(++p);
   \   000001B8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001BC   011081E2           ADD      R1,R1,#+1
    450                  }
    451          		  } while (--xsize);
   \   000001C0   014054E2           SUBS     R4,R4,#+1
   \   000001C4   E8FFFF1A           BNE      ??_DrawBitLine2BPP_4
    452              }
    453              break;
    454            }
    455          }
   \   000001C8   F087BDE8           POP      {R4-R10,PC}      ;; return
    456          
    457          /*********************************************************************
    458          *
    459          *       Draw Bitmap 4 BPP, not optimized
    460          */

   \                                 In section .text, align 4, keep-with-next
    461          static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine4BPP:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    462            LCD_PIXELINDEX Pixels, PixelIndex;
    463            int CurrentPixel, Shift, Index;
    464            Pixels       = *p;
    465            CurrentPixel = Diff;
    466            x           += Diff;
    467            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000004   ........           LDR      R6,??DataTable14
   \   00000008   20C09DE5           LDR      R12,[SP, #+32]
   \   0000000C   1060D6E5           LDRB     R6,[R6, #+16]
   \   00000010   24409DE5           LDR      R4,[SP, #+36]
   \   00000014   28509DE5           LDR      R5,[SP, #+40]
   \   00000018   00E0D3E5           LDRB     LR,[R3, #+0]
   \   0000001C   01108CE0           ADD      R1,R12,R1
   \   00000020   036016E2           ANDS     R6,R6,#0x3
   \   00000024   0200000A           BEQ      ??_DrawBitLine4BPP_0
   \   00000028   026056E2           SUBS     R6,R6,#+2
   \   0000002C   3200000A           BEQ      ??_DrawBitLine4BPP_1
   \   00000030   F087BDE8           POP      {R4-R10,PC}
    468            case 0:
    469              if (pTrans) {
   \                     ??_DrawBitLine4BPP_0:
   \   00000034   F060A0E3           MOV      R6,#+240
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   1700000A           BEQ      ??_DrawBitLine4BPP_2
    470                do {
    471                  Shift = (1 - CurrentPixel) << 2;
    472                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    473                  PixelIndex = *(pTrans + Index);
    474                  _SetPixelIndex(pDevice, x++, y, PixelIndex);
   \                     ??_DrawBitLine4BPP_3:
   \   00000040   088090E5           LDR      R8,[R0, #+8]
   \   00000044   01706CE2           RSB      R7,R12,#+1
   \   00000048   14A098E5           LDR      R10,[R8, #+20]
   \   0000004C   0C9098E5           LDR      R9,[R8, #+12]
   \   00000050   9A9229E0           MLA      R9,R10,R2,R9
   \   00000054   008098E5           LDR      R8,[R8, #+0]
   \   00000058   019049E2           SUB      R9,R9,#+1
   \   0000005C   019049E0           SUB      R9,R9,R1
   \   00000060   0771A0E1           LSL      R7,R7,#+2
   \   00000064   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000068   0790A0E1           MOV      R9,R7
   \   0000006C   049069E2           RSB      R9,R9,#+4
   \   00000070   56990EE0           AND      R9,LR,R6, ASR R9
   \   00000074   3977A0E1           LSR      R7,R9,R7
   \   00000078   077195E7           LDR      R7,[R5, +R7, LSL #+2]
    475                  if (++CurrentPixel == 2) {
   \   0000007C   01C08CE2           ADD      R12,R12,#+1
   \   00000080   B070C8E1           STRH     R7,[R8, #+0]
   \   00000084   02005CE3           CMP      R12,#+2
    476                    CurrentPixel = 0;
   \   00000088   00C0A003           MOVEQ    R12,#+0
    477                    Pixels = *(++p);
   \   0000008C   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   00000090   011081E2           ADD      R1,R1,#+1
    478                  }
    479          		  } while (--xsize);
   \   00000094   014054E2           SUBS     R4,R4,#+1
   \   00000098   E8FFFF1A           BNE      ??_DrawBitLine4BPP_3
   \   0000009C   F087BDE8           POP      {R4-R10,PC}
    480              } else {
    481                do {
    482                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_2:
   \   000000A0   01506CE2           RSB      R5,R12,#+1
   \   000000A4   0571A0E1           LSL      R7,R5,#+2
    483                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
    484                  _SetPixelIndex(pDevice, x++, y, Index);
   \   000000A8   085090E5           LDR      R5,[R0, #+8]
    485                  if (++CurrentPixel == 2) {
   \   000000AC   01C08CE2           ADD      R12,R12,#+1
   \   000000B0   149095E5           LDR      R9,[R5, #+20]
   \   000000B4   0C8095E5           LDR      R8,[R5, #+12]
   \   000000B8   998228E0           MLA      R8,R9,R2,R8
   \   000000BC   005095E5           LDR      R5,[R5, #+0]
   \   000000C0   018048E2           SUB      R8,R8,#+1
   \   000000C4   018048E0           SUB      R8,R8,R1
   \   000000C8   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000000CC   0780A0E1           MOV      R8,R7
   \   000000D0   048068E2           RSB      R8,R8,#+4
   \   000000D4   56880EE0           AND      R8,LR,R6, ASR R8
   \   000000D8   3877A0E1           LSR      R7,R8,R7
   \   000000DC   B070C5E1           STRH     R7,[R5, #+0]
   \   000000E0   02005CE3           CMP      R12,#+2
    486                    CurrentPixel = 0;
   \   000000E4   00C0A003           MOVEQ    R12,#+0
    487                    Pixels = *(++p);
   \   000000E8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000000EC   011081E2           ADD      R1,R1,#+1
    488                  }
    489          		  } while (--xsize);
   \   000000F0   014054E2           SUBS     R4,R4,#+1
   \   000000F4   E9FFFF1A           BNE      ??_DrawBitLine4BPP_2
   \   000000F8   F087BDE8           POP      {R4-R10,PC}
    490              }
    491              break;
    492            case LCD_DRAWMODE_TRANS:
    493              if (pTrans) {
   \                     ??_DrawBitLine4BPP_1:
   \   000000FC   F060A0E3           MOV      R6,#+240
   \   00000100   000055E3           CMP      R5,#+0
   \   00000104   1800000A           BEQ      ??_DrawBitLine4BPP_4
    494                do {
    495                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_5:
   \   00000108   01706CE2           RSB      R7,R12,#+1
   \   0000010C   0771A0E1           LSL      R7,R7,#+2
    496                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000110   0780A0E1           MOV      R8,R7
   \   00000114   048068E2           RSB      R8,R8,#+4
   \   00000118   56880EE0           AND      R8,LR,R6, ASR R8
   \   0000011C   3877B0E1           LSRS     R7,R8,R7
    497                  if (Index) {
   \   00000120   0900000A           BEQ      ??_DrawBitLine4BPP_6
    498                    PixelIndex = *(pTrans + Index);
    499                    _SetPixelIndex(pDevice, x, y, PixelIndex);
   \   00000124   088090E5           LDR      R8,[R0, #+8]
   \   00000128   077195E7           LDR      R7,[R5, +R7, LSL #+2]
   \   0000012C   14A098E5           LDR      R10,[R8, #+20]
   \   00000130   0C9098E5           LDR      R9,[R8, #+12]
   \   00000134   9A9229E0           MLA      R9,R10,R2,R9
   \   00000138   008098E5           LDR      R8,[R8, #+0]
   \   0000013C   019049E2           SUB      R9,R9,#+1
   \   00000140   019049E0           SUB      R9,R9,R1
   \   00000144   898088E0           ADD      R8,R8,R9, LSL #+1
   \   00000148   B070C8E1           STRH     R7,[R8, #+0]
    500                  }
    501                  x++;
    502                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_6:
   \   0000014C   01C08CE2           ADD      R12,R12,#+1
   \   00000150   02005CE3           CMP      R12,#+2
    503                    CurrentPixel = 0;
   \   00000154   00C0A003           MOVEQ    R12,#+0
    504                    Pixels = *(++p);
   \   00000158   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   0000015C   011081E2           ADD      R1,R1,#+1
    505                  }
    506          		  } while (--xsize);
   \   00000160   014054E2           SUBS     R4,R4,#+1
   \   00000164   E7FFFF1A           BNE      ??_DrawBitLine4BPP_5
   \   00000168   F087BDE8           POP      {R4-R10,PC}
    507              } else {
    508                do {
    509                  Shift = (1 - CurrentPixel) << 2;
   \                     ??_DrawBitLine4BPP_4:
   \   0000016C   01506CE2           RSB      R5,R12,#+1
   \   00000170   0571A0E1           LSL      R7,R5,#+2
    510                  Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
   \   00000174   0750A0E1           MOV      R5,R7
   \   00000178   045065E2           RSB      R5,R5,#+4
   \   0000017C   56550EE0           AND      R5,LR,R6, ASR R5
   \   00000180   3577B0E1           LSRS     R7,R5,R7
    511                  if (Index) {
   \   00000184   0800000A           BEQ      ??_DrawBitLine4BPP_7
    512                    _SetPixelIndex(pDevice, x, y, Index);
   \   00000188   085090E5           LDR      R5,[R0, #+8]
   \   0000018C   149095E5           LDR      R9,[R5, #+20]
   \   00000190   0C8095E5           LDR      R8,[R5, #+12]
   \   00000194   998228E0           MLA      R8,R9,R2,R8
   \   00000198   005095E5           LDR      R5,[R5, #+0]
   \   0000019C   018048E2           SUB      R8,R8,#+1
   \   000001A0   018048E0           SUB      R8,R8,R1
   \   000001A4   885085E0           ADD      R5,R5,R8, LSL #+1
   \   000001A8   B070C5E1           STRH     R7,[R5, #+0]
    513                  }
    514                  x++;
    515                  if (++CurrentPixel == 2) {
   \                     ??_DrawBitLine4BPP_7:
   \   000001AC   01C08CE2           ADD      R12,R12,#+1
   \   000001B0   02005CE3           CMP      R12,#+2
    516                    CurrentPixel = 0;
   \   000001B4   00C0A003           MOVEQ    R12,#+0
    517                    Pixels = *(++p);
   \   000001B8   01E0F305           LDRBEQ   LR,[R3, #+1]!
   \   000001BC   011081E2           ADD      R1,R1,#+1
    518                  }
    519          		  } while (--xsize);
   \   000001C0   014054E2           SUBS     R4,R4,#+1
   \   000001C4   E8FFFF1A           BNE      ??_DrawBitLine4BPP_4
    520              }
    521              break;
    522            }
    523          }
   \   000001C8   F087BDE8           POP      {R4-R10,PC}      ;; return
    524          
    525          /*********************************************************************
    526          *
    527          *       Draw Bitmap 8 BPP
    528          */

   \                                 In section .text, align 4, keep-with-next
    529          static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
   \                     _DrawBitLine8BPP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10E09DE5           LDR      LR,[SP, #+16]
   \   00000008   0CC09DE5           LDR      R12,[SP, #+12]
    530            DRIVER_CONTEXT * pContext;
    531            LCD_PIXELINDEX Pixel;
    532            register U32 Off;
    533            U16 * pDest;
    534          
    535            if (!pTrans) {
   \   0000000C   00005EE3           CMP      LR,#+0
   \   00000010   5000000A           BEQ      ??_DrawBitLine8BPP_0
    536              return; // No translation from 8bpp BMP to 16bpp device makes no sense
    537            }
    538            //
    539            // Get context
    540            //
    541            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000014   080090E5           LDR      R0,[R0, #+8]
    542            //
    543            // Mirror x
    544            //
    545            x = (pContext->vxSize - 1 - (x));
    546            Off   = XY2OFF16(pContext->vxSizePhys, x,y);
    547            pDest = OFF2PTR16(pContext->VRAMAddr, Off);
   \   00000018   0C5090E5           LDR      R5,[R0, #+12]
   \   0000001C   144090E5           LDR      R4,[R0, #+20]
   \   00000020   015045E2           SUB      R5,R5,#+1
   \   00000024   011045E0           SUB      R1,R5,R1
   \   00000028   941221E0           MLA      R1,R4,R2,R1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   810080E0           ADD      R0,R0,R1, LSL #+1
    548            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   00000034   ........           LDR      R1,??DataTable14
   \   00000038   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000003C   031011E2           ANDS     R1,R1,#0x3
   \   00000040   0200000A           BEQ      ??_DrawBitLine8BPP_1
   \   00000044   021051E2           SUBS     R1,R1,#+2
   \   00000048   3700000A           BEQ      ??_DrawBitLine8BPP_2
   \   0000004C   3080BDE8           POP      {R4,R5,PC}
    549            case 0:
    550              while (xsize >= 8) {
   \                     ??_DrawBitLine8BPP_1:
   \   00000050   08005CE3           CMP      R12,#+8
   \   00000054   180000AA           BGE      ??_DrawBitLine8BPP_3
   \                     ??_DrawBitLine8BPP_4:
   \   00000058   04005CE3           CMP      R12,#+4
   \   0000005C   0E0000BA           BLT      ??_DrawBitLine8BPP_5
    551                WRITE_MEM16P(pDest - 0, *(pTrans + *(p + 0)));
    552                WRITE_MEM16P(pDest - 1, *(pTrans + *(p + 1)));
    553                WRITE_MEM16P(pDest - 2, *(pTrans + *(p + 2)));
    554                WRITE_MEM16P(pDest - 3, *(pTrans + *(p + 3)));
    555                WRITE_MEM16P(pDest - 4, *(pTrans + *(p + 4)));
    556                WRITE_MEM16P(pDest - 5, *(pTrans + *(p + 5)));
    557                WRITE_MEM16P(pDest - 6, *(pTrans + *(p + 6)));
    558                WRITE_MEM16P(pDest - 7, *(pTrans + *(p + 7)));
    559                xsize -= 8;
    560                p     += 8;
    561                pDest -= 8;
    562              }
    563              while (xsize >= 4) {
    564                WRITE_MEM16P(pDest - 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_6:
   \   00000060   0110D3E4           LDRB     R1,[R3], #+1
    565                WRITE_MEM16P(pDest - 1, *(pTrans + *(p + 1)));
    566                WRITE_MEM16P(pDest - 2, *(pTrans + *(p + 2)));
    567                WRITE_MEM16P(pDest - 3, *(pTrans + *(p + 3)));
    568                xsize -= 4;
   \   00000064   04C04CE2           SUB      R12,R12,#+4
    569                p     += 4;
    570                pDest -= 4;
   \   00000068   04005CE3           CMP      R12,#+4
   \   0000006C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000070   B21040E0           STRH     R1,[R0], #-2
   \   00000074   0110D3E4           LDRB     R1,[R3], #+1
   \   00000078   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   0000007C   B21040E0           STRH     R1,[R0], #-2
   \   00000080   0110D3E4           LDRB     R1,[R3], #+1
   \   00000084   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000088   B21040E0           STRH     R1,[R0], #-2
   \   0000008C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000090   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000094   B21040E0           STRH     R1,[R0], #-2
   \   00000098   F0FFFFAA           BGE      ??_DrawBitLine8BPP_6
    571              }
    572              while (xsize) {
   \                     ??_DrawBitLine8BPP_5:
   \   0000009C   00005CE3           CMP      R12,#+0
   \   000000A0   2C00000A           BEQ      ??_DrawBitLine8BPP_0
    573                WRITE_MEM16P(pDest - 0, *(pTrans + *(p + 0)));
   \                     ??_DrawBitLine8BPP_7:
   \   000000A4   0110D3E4           LDRB     R1,[R3], #+1
    574                xsize--;
   \   000000A8   01C05CE2           SUBS     R12,R12,#+1
   \   000000AC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000B0   B21040E0           STRH     R1,[R0], #-2
    575                p++;
    576                pDest--;
   \   000000B4   FAFFFF1A           BNE      ??_DrawBitLine8BPP_7
   \   000000B8   3080BDE8           POP      {R4,R5,PC}
    577              }
   \                     ??_DrawBitLine8BPP_3:
   \   000000BC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000C0   08C04CE2           SUB      R12,R12,#+8
   \   000000C4   08005CE3           CMP      R12,#+8
   \   000000C8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000CC   B21040E0           STRH     R1,[R0], #-2
   \   000000D0   0110D3E4           LDRB     R1,[R3], #+1
   \   000000D4   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000D8   B21040E0           STRH     R1,[R0], #-2
   \   000000DC   0110D3E4           LDRB     R1,[R3], #+1
   \   000000E0   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000E4   B21040E0           STRH     R1,[R0], #-2
   \   000000E8   0110D3E4           LDRB     R1,[R3], #+1
   \   000000EC   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000F0   B21040E0           STRH     R1,[R0], #-2
   \   000000F4   0110D3E4           LDRB     R1,[R3], #+1
   \   000000F8   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   000000FC   B21040E0           STRH     R1,[R0], #-2
   \   00000100   0110D3E4           LDRB     R1,[R3], #+1
   \   00000104   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000108   B21040E0           STRH     R1,[R0], #-2
   \   0000010C   0110D3E4           LDRB     R1,[R3], #+1
   \   00000110   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000114   B21040E0           STRH     R1,[R0], #-2
   \   00000118   0110D3E4           LDRB     R1,[R3], #+1
   \   0000011C   01119EE7           LDR      R1,[LR, +R1, LSL #+2]
   \   00000120   B21040E0           STRH     R1,[R0], #-2
   \   00000124   E4FFFFAA           BGE      ??_DrawBitLine8BPP_3
   \   00000128   CAFFFFEA           B        ??_DrawBitLine8BPP_4
    578              break;
    579            case LCD_DRAWMODE_TRANS:
    580              for (; xsize > 0; xsize--, p++, pDest--) {
   \                     ??_DrawBitLine8BPP_2:
   \   0000012C   01005CE3           CMP      R12,#+1
   \   00000130   080000BA           BLT      ??_DrawBitLine8BPP_0
    581                Pixel = *p;
    582                if (Pixel) {
   \                     ??_DrawBitLine8BPP_8:
   \   00000134   0010D3E5           LDRB     R1,[R3, #+0]
    583                  WRITE_MEM16P(pDest, *(pTrans + *p));
    584                }
    585              }
   \   00000138   01C04CE2           SUB      R12,R12,#+1
   \   0000013C   013083E2           ADD      R3,R3,#+1
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   01119E17           LDRNE    R1,[LR, +R1, LSL #+2]
   \   00000148   B010C011           STRHNE   R1,[R0, #+0]
   \   0000014C   020040E2           SUB      R0,R0,#+2
   \   00000150   01005CE3           CMP      R12,#+1
   \   00000154   F6FFFFAA           BGE      ??_DrawBitLine8BPP_8
   \                     ??_DrawBitLine8BPP_0:
   \   00000158   3080BDE8           POP      {R4,R5,PC}       ;; return
    586              break;
    587            }
    588          }
    589          
    590          /*********************************************************************
    591          *
    592          *       Draw Bitmap 16 BPP
    593          */

   \                                 In section .text, align 4, keep-with-next
    594          static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR * p, int xsize) {
   \                     _DrawBitLine16BPP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    595            DRIVER_CONTEXT * pContext;
    596            U32 Off;
    597            U16 * pDest;
    598          
    599            //
    600            // Get context
    601            //
    602            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0CC09DE5           LDR      R12,[SP, #+12]
    603            //
    604            // Mirror x
    605            //
    606            x = (pContext->vxSize - 1 - (x));
    607            Off = XY2OFF16(pContext->vxSizePhys, x,y);
    608            pDest = OFF2PTR16(pContext->VRAMAddr, Off);
   \   0000000C   0C4090E5           LDR      R4,[R0, #+12]
   \   00000010   14E090E5           LDR      LR,[R0, #+20]
   \   00000014   014044E2           SUB      R4,R4,#+1
   \   00000018   011044E0           SUB      R1,R4,R1
   \   0000001C   9E1221E0           MLA      R1,LR,R2,R1
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   08005CE3           CMP      R12,#+8
   \   00000028   810080E0           ADD      R0,R0,R1, LSL #+1
   \   0000002C   4D0000BA           BLT      ??_DrawBitLine16BPP_0
   \   00000030   4C11A0E1           ASR      R1,R12,#+2
   \   00000034   A11E8CE0           ADD      R1,R12,R1, LSR #+29
   \   00000038   00E0E0E3           MVN      LR,#+0
   \   0000003C   C1118EE0           ADD      R1,LR,R1, ASR #+3
   \   00000040   B040D3E1           LDRH     R4,[R3, #+0]
   \   00000044   B220D3E1           LDRH     R2,[R3, #+2]
   \   00000048   010011E3           TST      R1,#0x1
   \   0000004C   1000000A           BEQ      ??_DrawBitLine16BPP_1
    609            while (xsize >= 8) {
    610              WRITE_MEM16P(pDest - 0, *(p + 0));
   \   00000050   B24040E0           STRH     R4,[R0], #-2
    611              WRITE_MEM16P(pDest - 1, *(p + 1));
   \   00000054   B22040E0           STRH     R2,[R0], #-2
    612              WRITE_MEM16P(pDest - 2, *(p + 2));
   \   00000058   B420D3E1           LDRH     R2,[R3, #+4]
    613              WRITE_MEM16P(pDest - 3, *(p + 3));
    614              WRITE_MEM16P(pDest - 4, *(p + 4));
    615              WRITE_MEM16P(pDest - 5, *(p + 5));
    616              WRITE_MEM16P(pDest - 6, *(p + 6));
    617              WRITE_MEM16P(pDest - 7, *(p + 7));
    618              xsize -= 8;
   \   0000005C   08C04CE2           SUB      R12,R12,#+8
   \   00000060   B22040E0           STRH     R2,[R0], #-2
   \   00000064   B620D3E1           LDRH     R2,[R3, #+6]
   \   00000068   B22040E0           STRH     R2,[R0], #-2
   \   0000006C   B820D3E1           LDRH     R2,[R3, #+8]
   \   00000070   B22040E0           STRH     R2,[R0], #-2
   \   00000074   BA20D3E1           LDRH     R2,[R3, #+10]
   \   00000078   B22040E0           STRH     R2,[R0], #-2
   \   0000007C   BC20D3E1           LDRH     R2,[R3, #+12]
   \   00000080   B22040E0           STRH     R2,[R0], #-2
   \   00000084   BE20D3E1           LDRH     R2,[R3, #+14]
   \   00000088   B22040E0           STRH     R2,[R0], #-2
    619              p     += 8;
    620              pDest -= 8;
   \   0000008C   B041F3E1           LDRH     R4,[R3, #+16]!
   \   00000090   B220D3E1           LDRH     R2,[R3, #+2]
   \                     ??_DrawBitLine16BPP_1:
   \   00000094   A110B0E1           LSRS     R1,R1,#+1
   \   00000098   2200000A           BEQ      ??_DrawBitLine16BPP_2
   \                     ??_DrawBitLine16BPP_3:
   \   0000009C   B24040E0           STRH     R4,[R0], #-2
   \   000000A0   B22040E0           STRH     R2,[R0], #-2
   \   000000A4   B420D3E1           LDRH     R2,[R3, #+4]
   \   000000A8   10C04CE2           SUB      R12,R12,#+16
   \   000000AC   011051E2           SUBS     R1,R1,#+1
   \   000000B0   B22040E0           STRH     R2,[R0], #-2
   \   000000B4   B620D3E1           LDRH     R2,[R3, #+6]
   \   000000B8   B22040E0           STRH     R2,[R0], #-2
   \   000000BC   B820D3E1           LDRH     R2,[R3, #+8]
   \   000000C0   B22040E0           STRH     R2,[R0], #-2
   \   000000C4   BA20D3E1           LDRH     R2,[R3, #+10]
   \   000000C8   B22040E0           STRH     R2,[R0], #-2
   \   000000CC   BC20D3E1           LDRH     R2,[R3, #+12]
   \   000000D0   B22040E0           STRH     R2,[R0], #-2
   \   000000D4   BE20D3E1           LDRH     R2,[R3, #+14]
   \   000000D8   B22040E0           STRH     R2,[R0], #-2
   \   000000DC   B0E1F3E1           LDRH     LR,[R3, #+16]!
   \   000000E0   B250D3E1           LDRH     R5,[R3, #+2]
   \   000000E4   B2E040E0           STRH     LR,[R0], #-2
   \   000000E8   B25040E0           STRH     R5,[R0], #-2
   \   000000EC   B420D3E1           LDRH     R2,[R3, #+4]
   \   000000F0   B22040E0           STRH     R2,[R0], #-2
   \   000000F4   B620D3E1           LDRH     R2,[R3, #+6]
   \   000000F8   B22040E0           STRH     R2,[R0], #-2
   \   000000FC   B820D3E1           LDRH     R2,[R3, #+8]
   \   00000100   B22040E0           STRH     R2,[R0], #-2
   \   00000104   BA20D3E1           LDRH     R2,[R3, #+10]
   \   00000108   B22040E0           STRH     R2,[R0], #-2
   \   0000010C   BC20D3E1           LDRH     R2,[R3, #+12]
   \   00000110   B22040E0           STRH     R2,[R0], #-2
   \   00000114   BE20D3E1           LDRH     R2,[R3, #+14]
   \   00000118   B22040E0           STRH     R2,[R0], #-2
   \   0000011C   B041F3E1           LDRH     R4,[R3, #+16]!
   \   00000120   B220D3E1           LDRH     R2,[R3, #+2]
   \   00000124   DCFFFF1A           BNE      ??_DrawBitLine16BPP_3
   \                     ??_DrawBitLine16BPP_2:
   \   00000128   B24040E0           STRH     R4,[R0], #-2
   \   0000012C   B22040E0           STRH     R2,[R0], #-2
   \   00000130   B410D3E1           LDRH     R1,[R3, #+4]
   \   00000134   08C04CE2           SUB      R12,R12,#+8
   \   00000138   B21040E0           STRH     R1,[R0], #-2
   \   0000013C   B610D3E1           LDRH     R1,[R3, #+6]
   \   00000140   B21040E0           STRH     R1,[R0], #-2
   \   00000144   B810D3E1           LDRH     R1,[R3, #+8]
   \   00000148   B21040E0           STRH     R1,[R0], #-2
   \   0000014C   BA10D3E1           LDRH     R1,[R3, #+10]
   \   00000150   B21040E0           STRH     R1,[R0], #-2
   \   00000154   BC10D3E1           LDRH     R1,[R3, #+12]
   \   00000158   B21040E0           STRH     R1,[R0], #-2
   \   0000015C   BE10D3E1           LDRH     R1,[R3, #+14]
   \   00000160   103083E2           ADD      R3,R3,#+16
   \   00000164   B21040E0           STRH     R1,[R0], #-2
    621            }
    622            while (xsize >= 4) {
   \                     ??_DrawBitLine16BPP_0:
   \   00000168   04005CE3           CMP      R12,#+4
   \   0000016C   100000AA           BGE      ??_DrawBitLine16BPP_4
   \                     ??_DrawBitLine16BPP_5:
   \   00000170   00005CE3           CMP      R12,#+0
   \   00000174   0D00000A           BEQ      ??_DrawBitLine16BPP_6
   \   00000178   B020D3E1           LDRH     R2,[R3, #+0]
   \   0000017C   01104CE2           SUB      R1,R12,#+1
   \   00000180   010011E3           TST      R1,#0x1
    623              WRITE_MEM16P(pDest - 0, *(p + 0));
    624              WRITE_MEM16P(pDest - 1, *(p + 1));
    625              WRITE_MEM16P(pDest - 2, *(p + 2));
    626              WRITE_MEM16P(pDest - 3, *(p + 3));
    627              xsize -= 4;
    628              p     += 4;
    629              pDest -= 4;
    630            }
    631            while (xsize) {
    632              WRITE_MEM16P(pDest - 0, *(p + 0));
   \   00000184   B2204010           STRHNE   R2,[R0], #-2
    633              xsize--;
    634              p++;
    635              pDest--;
   \   00000188   B220F311           LDRHNE   R2,[R3, #+2]!
   \   0000018C   A110B0E1           LSRS     R1,R1,#+1
   \   00000190   0500000A           BEQ      ??_DrawBitLine16BPP_7
   \                     ??_DrawBitLine16BPP_8:
   \   00000194   B22040E0           STRH     R2,[R0], #-2
   \   00000198   B2C0F3E1           LDRH     R12,[R3, #+2]!
   \   0000019C   011051E2           SUBS     R1,R1,#+1
   \   000001A0   B2C040E0           STRH     R12,[R0], #-2
   \   000001A4   B220F3E1           LDRH     R2,[R3, #+2]!
   \   000001A8   F9FFFF1A           BNE      ??_DrawBitLine16BPP_8
   \                     ??_DrawBitLine16BPP_7:
   \   000001AC   B020C0E1           STRH     R2,[R0, #+0]
    636            }
    637          }
   \                     ??_DrawBitLine16BPP_6:
   \   000001B0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??_DrawBitLine16BPP_4:
   \   000001B4   B210D3E0           LDRH     R1,[R3], #+2
   \   000001B8   04C04CE2           SUB      R12,R12,#+4
   \   000001BC   04005CE3           CMP      R12,#+4
   \   000001C0   B21040E0           STRH     R1,[R0], #-2
   \   000001C4   B210D3E0           LDRH     R1,[R3], #+2
   \   000001C8   B21040E0           STRH     R1,[R0], #-2
   \   000001CC   B210D3E0           LDRH     R1,[R3], #+2
   \   000001D0   B21040E0           STRH     R1,[R0], #-2
   \   000001D4   B210D3E0           LDRH     R1,[R3], #+2
   \   000001D8   B21040E0           STRH     R1,[R0], #-2
   \   000001DC   F4FFFFAA           BGE      ??_DrawBitLine16BPP_4
   \   000001E0   E2FFFFEA           B        ??_DrawBitLine16BPP_5
    638          
    639          /*********************************************************************
    640          *
    641          *       _DrawBitmap
    642          */

   \                                 In section .text, align 4, keep-with-next
    643          static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
    644                                 int xSize, int ySize,
    645                                 int BitsPerPixel, 
    646                                 int BytesPerLine,
    647                                 const U8 GUI_UNI_PTR * pData, int Diff,
    648                                 const LCD_PIXELINDEX* pTrans) {
   \                     _DrawBitmap:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C109DE5           LDR      R1,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
    649            int i;
    650          
    651            switch (BitsPerPixel) {
   \   00000014   011041E2           SUB      R1,R1,#+1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   38009DE5           LDR      R0,[SP, #+56]
   \   00000020   40709DE5           LDR      R7,[SP, #+64]
   \   00000024   44809DE5           LDR      R8,[SP, #+68]
   \   00000028   48909DE5           LDR      R9,[SP, #+72]
   \   0000002C   4CA09DE5           LDR      R10,[SP, #+76]
   \   00000030   0F0051E3           CMP      R1,#+15
   \   00000034   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_DrawBitmap_0:
   \   00000038   DC00008A           BHI      ??_DrawBitmap_1
   \   0000003C   0E0000EA           B        ??_DrawBitmap_2
   \   00000040   3A0000EA           B        ??_DrawBitmap_3
   \   00000044   D90000EA           B        ??_DrawBitmap_1
   \   00000048   650000EA           B        ??_DrawBitmap_4
   \   0000004C   D70000EA           B        ??_DrawBitmap_1
   \   00000050   D60000EA           B        ??_DrawBitmap_1
   \   00000054   D50000EA           B        ??_DrawBitmap_1
   \   00000058   8E0000EA           B        ??_DrawBitmap_5
   \   0000005C   D30000EA           B        ??_DrawBitmap_1
   \   00000060   D20000EA           B        ??_DrawBitmap_1
   \   00000064   D10000EA           B        ??_DrawBitmap_1
   \   00000068   D00000EA           B        ??_DrawBitmap_1
   \   0000006C   CF0000EA           B        ??_DrawBitmap_1
   \   00000070   CE0000EA           B        ??_DrawBitmap_1
   \   00000074   CD0000EA           B        ??_DrawBitmap_1
   \   00000078   AB0000EA           B        ??_DrawBitmap_6
    652            case 1:
    653              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_2:
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   CA0000BA           BLT      ??_DrawBitmap_1
   \   00000084   02B0A0E1           MOV      R11,R2
   \   00000088   10008DE5           STR      R0,[SP, #+16]
   \   0000008C   010010E3           TST      R0,#0x1
   \   00000090   0800000A           BEQ      ??_DrawBitmap_7
    654                _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000094   08A08DE5           STR      R10,[SP, #+8]
   \   00000098   04608DE5           STR      R6,[SP, #+4]
   \   0000009C   00908DE5           STR      R9,[SP, #+0]
   \   000000A0   0830A0E1           MOV      R3,R8
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       _DrawBitLine1BPP
    655                pData += BytesPerLine;
   \   000000B0   088087E0           ADD      R8,R7,R8
   \   000000B4   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_7:
   \   000000B8   10109DE5           LDR      R1,[SP, #+16]
   \   000000BC   A110A0E1           LSR      R1,R1,#+1
   \   000000C0   0C108DE5           STR      R1,[SP, #+12]
   \   000000C4   000051E3           CMP      R1,#+0
   \   000000C8   B800000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_8:
   \   000000CC   08A08DE5           STR      R10,[SP, #+8]
   \   000000D0   04608DE5           STR      R6,[SP, #+4]
   \   000000D4   00908DE5           STR      R9,[SP, #+0]
   \   000000D8   0830A0E1           MOV      R3,R8
   \   000000DC   0B20A0E1           MOV      R2,R11
   \   000000E0   0510A0E1           MOV      R1,R5
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           BL       _DrawBitLine1BPP
   \   000000EC   088087E0           ADD      R8,R7,R8
   \   000000F0   08A08DE5           STR      R10,[SP, #+8]
   \   000000F4   04608DE5           STR      R6,[SP, #+4]
   \   000000F8   00908DE5           STR      R9,[SP, #+0]
   \   000000FC   0830A0E1           MOV      R3,R8
   \   00000100   01208BE2           ADD      R2,R11,#+1
   \   00000104   0510A0E1           MOV      R1,R5
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       _DrawBitLine1BPP
    656              }
   \   00000110   0C109DE5           LDR      R1,[SP, #+12]
   \   00000114   088087E0           ADD      R8,R7,R8
   \   00000118   011041E2           SUB      R1,R1,#+1
   \   0000011C   0C108DE5           STR      R1,[SP, #+12]
   \   00000120   02B08BE2           ADD      R11,R11,#+2
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   E7FFFF1A           BNE      ??_DrawBitmap_8
   \   0000012C   9F0000EA           B        ??_DrawBitmap_1
    657              break;
    658            case 2:
    659              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_3:
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   9D0000BA           BLT      ??_DrawBitmap_1
   \   00000138   02B0A0E1           MOV      R11,R2
   \   0000013C   10008DE5           STR      R0,[SP, #+16]
   \   00000140   010010E3           TST      R0,#0x1
   \   00000144   0800000A           BEQ      ??_DrawBitmap_9
    660                _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   00000148   08A08DE5           STR      R10,[SP, #+8]
   \   0000014C   04608DE5           STR      R6,[SP, #+4]
   \   00000150   00908DE5           STR      R9,[SP, #+0]
   \   00000154   0830A0E1           MOV      R3,R8
   \   00000158   0510A0E1           MOV      R1,R5
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           BL       _DrawBitLine2BPP
    661                pData += BytesPerLine;
   \   00000164   088087E0           ADD      R8,R7,R8
   \   00000168   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_9:
   \   0000016C   10109DE5           LDR      R1,[SP, #+16]
   \   00000170   A110A0E1           LSR      R1,R1,#+1
   \   00000174   0C108DE5           STR      R1,[SP, #+12]
   \   00000178   000051E3           CMP      R1,#+0
   \   0000017C   8B00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_10:
   \   00000180   08A08DE5           STR      R10,[SP, #+8]
   \   00000184   04608DE5           STR      R6,[SP, #+4]
   \   00000188   00908DE5           STR      R9,[SP, #+0]
   \   0000018C   0830A0E1           MOV      R3,R8
   \   00000190   0B20A0E1           MOV      R2,R11
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           BL       _DrawBitLine2BPP
   \   000001A0   088087E0           ADD      R8,R7,R8
   \   000001A4   08A08DE5           STR      R10,[SP, #+8]
   \   000001A8   04608DE5           STR      R6,[SP, #+4]
   \   000001AC   00908DE5           STR      R9,[SP, #+0]
   \   000001B0   0830A0E1           MOV      R3,R8
   \   000001B4   01208BE2           ADD      R2,R11,#+1
   \   000001B8   0510A0E1           MOV      R1,R5
   \   000001BC   0400A0E1           MOV      R0,R4
   \   000001C0   ........           BL       _DrawBitLine2BPP
    662              }
   \   000001C4   0C109DE5           LDR      R1,[SP, #+12]
   \   000001C8   088087E0           ADD      R8,R7,R8
   \   000001CC   011041E2           SUB      R1,R1,#+1
   \   000001D0   0C108DE5           STR      R1,[SP, #+12]
   \   000001D4   02B08BE2           ADD      R11,R11,#+2
   \   000001D8   000051E3           CMP      R1,#+0
   \   000001DC   E7FFFF1A           BNE      ??_DrawBitmap_10
   \   000001E0   720000EA           B        ??_DrawBitmap_1
    663              break;
    664            case 4:
    665              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_4:
   \   000001E4   010050E3           CMP      R0,#+1
   \   000001E8   700000BA           BLT      ??_DrawBitmap_1
   \   000001EC   02B0A0E1           MOV      R11,R2
   \   000001F0   10008DE5           STR      R0,[SP, #+16]
   \   000001F4   010010E3           TST      R0,#0x1
   \   000001F8   0800000A           BEQ      ??_DrawBitmap_11
    666                _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
   \   000001FC   08A08DE5           STR      R10,[SP, #+8]
   \   00000200   04608DE5           STR      R6,[SP, #+4]
   \   00000204   00908DE5           STR      R9,[SP, #+0]
   \   00000208   0830A0E1           MOV      R3,R8
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   0400A0E1           MOV      R0,R4
   \   00000214   ........           BL       _DrawBitLine4BPP
    667                pData += BytesPerLine;
   \   00000218   088087E0           ADD      R8,R7,R8
   \   0000021C   01B08BE2           ADD      R11,R11,#+1
   \                     ??_DrawBitmap_11:
   \   00000220   10109DE5           LDR      R1,[SP, #+16]
   \   00000224   A110A0E1           LSR      R1,R1,#+1
   \   00000228   0C108DE5           STR      R1,[SP, #+12]
   \   0000022C   000051E3           CMP      R1,#+0
   \   00000230   5E00000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_12:
   \   00000234   08A08DE5           STR      R10,[SP, #+8]
   \   00000238   04608DE5           STR      R6,[SP, #+4]
   \   0000023C   00908DE5           STR      R9,[SP, #+0]
   \   00000240   0830A0E1           MOV      R3,R8
   \   00000244   0B20A0E1           MOV      R2,R11
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       _DrawBitLine4BPP
   \   00000254   088087E0           ADD      R8,R7,R8
   \   00000258   08A08DE5           STR      R10,[SP, #+8]
   \   0000025C   04608DE5           STR      R6,[SP, #+4]
   \   00000260   00908DE5           STR      R9,[SP, #+0]
   \   00000264   0830A0E1           MOV      R3,R8
   \   00000268   01208BE2           ADD      R2,R11,#+1
   \   0000026C   0510A0E1           MOV      R1,R5
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   ........           BL       _DrawBitLine4BPP
    668              }
   \   00000278   0C109DE5           LDR      R1,[SP, #+12]
   \   0000027C   088087E0           ADD      R8,R7,R8
   \   00000280   011041E2           SUB      R1,R1,#+1
   \   00000284   0C108DE5           STR      R1,[SP, #+12]
   \   00000288   02B08BE2           ADD      R11,R11,#+2
   \   0000028C   000051E3           CMP      R1,#+0
   \   00000290   E7FFFF1A           BNE      ??_DrawBitmap_12
   \   00000294   450000EA           B        ??_DrawBitmap_1
    669              break;
    670            case 8:
    671              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_5:
   \   00000298   010050E3           CMP      R0,#+1
   \   0000029C   430000BA           BLT      ??_DrawBitmap_1
   \   000002A0   00B0A0E1           MOV      R11,R0
   \   000002A4   0290A0E1           MOV      R9,R2
   \   000002A8   01001BE3           TST      R11,#0x1
   \   000002AC   0700000A           BEQ      ??_DrawBitmap_13
    672                _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
   \   000002B0   04A08DE5           STR      R10,[SP, #+4]
   \   000002B4   00608DE5           STR      R6,[SP, #+0]
   \   000002B8   0830A0E1           MOV      R3,R8
   \   000002BC   0510A0E1           MOV      R1,R5
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           BL       _DrawBitLine8BPP
    673                pData += BytesPerLine;
   \   000002C8   088087E0           ADD      R8,R7,R8
   \   000002CC   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_13:
   \   000002D0   ABB0B0E1           LSRS     R11,R11,#+1
   \   000002D4   3500000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_14:
   \   000002D8   04A08DE5           STR      R10,[SP, #+4]
   \   000002DC   00608DE5           STR      R6,[SP, #+0]
   \   000002E0   0830A0E1           MOV      R3,R8
   \   000002E4   0920A0E1           MOV      R2,R9
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0400A0E1           MOV      R0,R4
   \   000002F0   ........           BL       _DrawBitLine8BPP
   \   000002F4   088087E0           ADD      R8,R7,R8
   \   000002F8   04A08DE5           STR      R10,[SP, #+4]
   \   000002FC   00608DE5           STR      R6,[SP, #+0]
   \   00000300   0830A0E1           MOV      R3,R8
   \   00000304   012089E2           ADD      R2,R9,#+1
   \   00000308   0510A0E1           MOV      R1,R5
   \   0000030C   0400A0E1           MOV      R0,R4
   \   00000310   ........           BL       _DrawBitLine8BPP
    674              }
   \   00000314   01B04BE2           SUB      R11,R11,#+1
   \   00000318   088087E0           ADD      R8,R7,R8
   \   0000031C   029089E2           ADD      R9,R9,#+2
   \   00000320   00005BE3           CMP      R11,#+0
   \   00000324   EBFFFF1A           BNE      ??_DrawBitmap_14
   \   00000328   200000EA           B        ??_DrawBitmap_1
    675              break;
    676            case 16:
    677              for (i = 0; i < ySize; i++) {
   \                     ??_DrawBitmap_6:
   \   0000032C   010050E3           CMP      R0,#+1
   \   00000330   1E0000BA           BLT      ??_DrawBitmap_1
   \   00000334   00A0A0E1           MOV      R10,R0
   \   00000338   0290A0E1           MOV      R9,R2
   \   0000033C   01001AE3           TST      R10,#0x1
   \   00000340   0600000A           BEQ      ??_DrawBitmap_15
    678                _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
   \   00000344   00608DE5           STR      R6,[SP, #+0]
   \   00000348   0830A0E1           MOV      R3,R8
   \   0000034C   0510A0E1           MOV      R1,R5
   \   00000350   0400A0E1           MOV      R0,R4
   \   00000354   ........           BL       _DrawBitLine16BPP
    679                pData += BytesPerLine;
   \   00000358   088087E0           ADD      R8,R7,R8
   \   0000035C   019089E2           ADD      R9,R9,#+1
   \                     ??_DrawBitmap_15:
   \   00000360   AAA0B0E1           LSRS     R10,R10,#+1
   \   00000364   1100000A           BEQ      ??_DrawBitmap_1
   \                     ??_DrawBitmap_16:
   \   00000368   00608DE5           STR      R6,[SP, #+0]
   \   0000036C   0830A0E1           MOV      R3,R8
   \   00000370   0920A0E1           MOV      R2,R9
   \   00000374   0510A0E1           MOV      R1,R5
   \   00000378   0400A0E1           MOV      R0,R4
   \   0000037C   ........           BL       _DrawBitLine16BPP
   \   00000380   088087E0           ADD      R8,R7,R8
   \   00000384   00608DE5           STR      R6,[SP, #+0]
   \   00000388   0830A0E1           MOV      R3,R8
   \   0000038C   012089E2           ADD      R2,R9,#+1
   \   00000390   0510A0E1           MOV      R1,R5
   \   00000394   0400A0E1           MOV      R0,R4
   \   00000398   ........           BL       _DrawBitLine16BPP
    680              }
   \   0000039C   01A04AE2           SUB      R10,R10,#+1
   \   000003A0   088087E0           ADD      R8,R7,R8
   \   000003A4   029089E2           ADD      R9,R9,#+2
   \   000003A8   00005AE3           CMP      R10,#+0
   \   000003AC   EDFFFF1A           BNE      ??_DrawBitmap_16
    681              break;
    682            }
    683          }
   \                     ??_DrawBitmap_1:
   \   000003B0   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000003B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
    684          
    685          /*********************************************************************
    686          *
    687          *       _SetOrg
    688          */

   \                                 In section .text, align 4, keep-with-next
    689          static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
   \                     _SetOrg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    690            #ifndef WIN32
    691              DRIVER_CONTEXT * pContext;
    692            #endif
    693            LCD_X_SETORG_INFO Data = {0};
   \   00000004   ............       ADRL     R12,`?<Constant {0}>`
   \              ....        
   \   0000000C   0CD04DE2           SUB      SP,SP,#+12
   \   00000010   00409CE5           LDR      R4,[R12, #+0]
   \   00000014   04509CE5           LDR      R5,[R12, #+4]
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   300083E8           STM      R3,{R4,R5}
    694          
    695            #ifdef WIN32
    696              LCDSIM_SetOrg(x, y, pDevice->LayerIndex);
    697            #else
    698              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000020   083090E5           LDR      R3,[R0, #+8]
    699              Data.xPos = pContext->vxSize - pContext->xSize - x;
   \   00000024   0CC093E5           LDR      R12,[R3, #+12]
   \   00000028   043093E5           LDR      R3,[R3, #+4]
    700              Data.yPos = y;
   \   0000002C   04208DE5           STR      R2,[SP, #+4]
   \   00000030   03304CE0           SUB      R3,R12,R3
   \   00000034   011043E0           SUB      R1,R3,R1
   \   00000038   00108DE5           STR      R1,[SP, #+0]
    701              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   180090E5           LDR      R0,[R0, #+24]
   \   00000048   ........           BL       LCD_X_DisplayDriver
    702            #endif
    703          }
   \   0000004C   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    704          
    705          /*********************************************************************
    706          *
    707          *       _InitOnce
    708          *
    709          * Purpose:
    710          *   Allocates a fixed block for the context of the driver
    711          *
    712          * Return value:
    713          *   0 on success, 1 on error
    714          */
    715          static int _InitOnce(GUI_DEVICE * pDevice) {
    716            if (pDevice->u.pContext == NULL) {
    717              pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT));
    718              GUI__memset((U8 *)pDevice->u.pContext, 0, sizeof(DRIVER_CONTEXT));
    719            }
    720            return pDevice->u.pContext ? 0 : 1;
    721          }
    722          
    723          /*********************************************************************
    724          *
    725          *       _GetRect
    726          */

   \                                 In section .text, align 4, keep-with-next
    727          static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
    728            DRIVER_CONTEXT * pContext;
    729          
    730            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \                     _GetRect:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
    731            pRect->x0 = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   B020C1E1           STRH     R2,[R1, #+0]
    732            pRect->y0 = 0;
   \   0000000C   B220C1E1           STRH     R2,[R1, #+2]
    733            pRect->x1 = pContext->vxSize - 1;
   \   00000010   0C2090E5           LDR      R2,[R0, #+12]
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   B420C1E1           STRH     R2,[R1, #+4]
    734            pRect->y1 = pContext->vySize - 1;
   \   0000001C   100090E5           LDR      R0,[R0, #+16]
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B600C1E1           STRH     R0,[R1, #+6]
    735          }
   \   00000028   1EFF2FE1           BX       LR               ;; return
    736          
    737          /*********************************************************************
    738          *
    739          *       _GetDevProp
    740          */

   \                                 In section .text, align 4, keep-with-next
    741          static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
    742            DRIVER_CONTEXT * pContext;
    743          
    744            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    745            switch (Index) {
   \                     _GetDevProp:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   0D0051E3           CMP      R1,#+13
   \   0000000C   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevProp_0:
   \   00000010   1B00008A           BHI      ??_GetDevProp_1
   \   00000014   0C0000EA           B        ??_GetDevProp_2
   \   00000018   0D0000EA           B        ??_GetDevProp_3
   \   0000001C   0E0000EA           B        ??_GetDevProp_4
   \   00000020   0F0000EA           B        ??_GetDevProp_5
   \   00000024   160000EA           B        ??_GetDevProp_1
   \   00000028   150000EA           B        ??_GetDevProp_1
   \   0000002C   140000EA           B        ??_GetDevProp_1
   \   00000030   0D0000EA           B        ??_GetDevProp_6
   \   00000034   0E0000EA           B        ??_GetDevProp_7
   \   00000038   0F0000EA           B        ??_GetDevProp_8
   \   0000003C   0E0000EA           B        ??_GetDevProp_8
   \   00000040   0D0000EA           B        ??_GetDevProp_8
   \   00000044   0A0000EA           B        ??_GetDevProp_7
   \   00000048   090000EA           B        ??_GetDevProp_7
    746            case LCD_DEVCAP_XSIZE:
    747              return pContext->xSize;
   \                     ??_GetDevProp_2:
   \   0000004C   040090E5           LDR      R0,[R0, #+4]
   \   00000050   1EFF2FE1           BX       LR
    748            case LCD_DEVCAP_YSIZE:
    749              return pContext->ySize;
   \                     ??_GetDevProp_3:
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   1EFF2FE1           BX       LR
    750            case LCD_DEVCAP_VXSIZE:
    751              return pContext->vxSize;
   \                     ??_GetDevProp_4:
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   1EFF2FE1           BX       LR
    752            case LCD_DEVCAP_VYSIZE:
    753              return pContext->vySize;
   \                     ??_GetDevProp_5:
   \   00000064   100090E5           LDR      R0,[R0, #+16]
   \   00000068   1EFF2FE1           BX       LR
    754            case LCD_DEVCAP_BITSPERPIXEL:
    755              return 16;
   \                     ??_GetDevProp_6:
   \   0000006C   1000A0E3           MOV      R0,#+16
   \   00000070   1EFF2FE1           BX       LR
    756            case LCD_DEVCAP_NUMCOLORS:
    757              return 0;
   \                     ??_GetDevProp_7:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR
    758            case LCD_DEVCAP_XMAG:
    759              return 1;
   \                     ??_GetDevProp_8:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1EFF2FE1           BX       LR
    760            case LCD_DEVCAP_YMAG:
    761              return 1;
    762            case LCD_DEVCAP_MIRROR_X:
    763              return 1;
    764            case LCD_DEVCAP_MIRROR_Y:
    765              return 0;
    766            case LCD_DEVCAP_SWAP_XY:
    767              return 0;
    768            }
    769            return -1;
   \                     ??_GetDevProp_1:
   \   00000084   0000E0E3           MVN      R0,#+0
   \   00000088   1EFF2FE1           BX       LR               ;; return
    770          }
    771          
    772          /*********************************************************************
    773          *
    774          *       _GetDevData
    775          */

   \                                 In section .text, align 4, keep-with-next
    776          static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
    777            GUI_USE_PARA(pDevice);
    778            switch (Index) {
   \                     _GetDevData:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   0100001A           BNE      ??_GetDevData_0
    779            #if GUI_SUPPORT_MEMDEV
    780              case LCD_DEVDATA_MEMDEV:
    781                return (void *)&GUI_MEMDEV_DEVICE_16;
   \   00000008   ........           LDR      R0,??DataTable16
   \   0000000C   1EFF2FE1           BX       LR
    782            #endif
    783            }
    784            return NULL;
   \                     ??_GetDevData_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    785          }
    786          
    787          /*********************************************************************
    788          *
    789          *       Static code: Functions available by _GetDevFunc()
    790          *
    791          **********************************************************************
    792          */
    793          /*********************************************************************
    794          *
    795          *       _ReadRect
    796          */

   \                                 In section .text, align 4, keep-with-next
    797          static void _ReadRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1, LCD_PIXELINDEX * pBuffer) {
   \                     _ReadRect:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    798            DRIVER_CONTEXT * pContext;
    799            U32 Off;
    800            int x, NumPixelsPerLine;
    801            U16 * p;
    802          
    803            pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \   00000008   10C09DE5           LDR      R12,[SP, #+16]
   \   0000000C   0C4090E5           LDR      R4,[R0, #+12]
   \   00000010   14E09DE5           LDR      LR,[SP, #+20]
   \   00000014   014044E2           SUB      R4,R4,#+1
   \   00000018   015044E0           SUB      R5,R4,R1
    804            x0 = (pContext->vxSize - 1 - (x0));
    805            x1 = (pContext->vxSize - 1 - (x1));
   \   0000001C   031044E0           SUB      R1,R4,R3
    806            p = (U16 *)pBuffer;
    807            x = x0;
   \   00000020   0530A0E1           MOV      R3,R5
    808            do {
    809              Off = XY2OFF16(pContext->vxSizePhys, x0, y0);
    810              NumPixelsPerLine = x0 - x1 + 1;
   \                     ??_ReadRect_0:
   \   00000024   146090E5           LDR      R6,[R0, #+20]
   \   00000028   014045E0           SUB      R4,R5,R1
   \   0000002C   965225E0           MLA      R5,R6,R2,R5
   \   00000030   014084E2           ADD      R4,R4,#+1
   \   00000034   8550A0E1           LSL      R5,R5,#+1
    811              do {
    812                *p++ = READ_MEM16(pContext->VRAMAddr, Off);
   \                     ??_ReadRect_1:
   \   00000038   006090E5           LDR      R6,[R0, #+0]
    813                Off--;
    814              } while (--NumPixelsPerLine);
   \   0000003C   014044E2           SUB      R4,R4,#+1
   \   00000040   B66095E1           LDRH     R6,[R5, +R6]
   \   00000044   025045E2           SUB      R5,R5,#+2
   \   00000048   000054E3           CMP      R4,#+0
   \   0000004C   B260CEE0           STRH     R6,[LR], #+2
   \   00000050   F8FFFF1A           BNE      ??_ReadRect_1
    815              x0 = x;
    816            } while (y0++ < y1);
   \   00000054   0240A0E1           MOV      R4,R2
   \   00000058   0350A0E1           MOV      R5,R3
   \   0000005C   012084E2           ADD      R2,R4,#+1
   \   00000060   0C0054E1           CMP      R4,R12
   \   00000064   EEFFFFBA           BLT      ??_ReadRect_0
    817          }
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
    818          
    819          /*********************************************************************
    820          *
    821          *       _SetVRAMAddr
    822          */

   \                                 In section .text, align 4, keep-with-next
    823          static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
   \                     _SetVRAMAddr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    824            DRIVER_CONTEXT * pContext;
    825            LCD_X_SETVRAMADDR_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {(void *)0}>`
   \              ....        
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
    826          
    827            _InitOnce(pDevice);
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??_SetVRAMAddr_0
   \   0000002C   2C00A0E3           MOV      R0,#+44
   \   00000030   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000034   080084E5           STR      R0,[R4, #+8]
   \   00000038   2C20A0E3           MOV      R2,#+44
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   ........           BL       GUI__memset
    828            if (pDevice->u.pContext) {
   \                     ??_SetVRAMAddr_0:
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??_SetVRAMAddr_1
    829              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    830              pContext->VRAMAddr = (U32)pVRAM;
   \   00000050   005080E5           STR      R5,[R0, #+0]
    831              Data.pVRAM = pVRAM;
   \   00000054   00508DE5           STR      R5,[SP, #+0]
    832              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   ........           BL       LCD_X_DisplayDriver
    833            }
    834            #ifdef WIN32
    835              SIM_Lin_SetVRAMAddr(pDevice->LayerIndex, pVRAM);
    836            #endif
    837          }
   \                     ??_SetVRAMAddr_1:
   \   00000068   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
    838          
    839          /*********************************************************************
    840          *
    841          *       _SetVSize
    842          */

   \                                 In section .text, align 4, keep-with-next
    843          static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetVSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    844            DRIVER_CONTEXT * pContext;
    845          
    846            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetVSize_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    847            if (pDevice->u.pContext) {
   \                     ??_SetVSize_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
    848              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    849              pContext->vxSize = xSize;
   \   0000003C   0C508015           STRNE    R5,[R0, #+12]
    850              pContext->vySize = ySize;
   \   00000040   10608015           STRNE    R6,[R0, #+16]
    851              pContext->vxSizePhys = xSize;
   \   00000044   14508015           STRNE    R5,[R0, #+20]
    852            }
    853            #ifdef WIN32
    854              SIM_Lin_SetVRAMSize(pDevice->LayerIndex, xSize, ySize);
    855            #endif
    856          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
    857          
    858          /*********************************************************************
    859          *
    860          *       _SetSize
    861          */

   \                                 In section .text, align 4, keep-with-next
    862          static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
   \                     _SetSize:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    863            DRIVER_CONTEXT * pContext;
    864            LCD_X_SETSIZE_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_1`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    865          
    866            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetSize_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    867            if (pDevice->u.pContext) {
   \                     ??_SetSize_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??_SetSize_1
    868              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    869              if (pContext->vxSizePhys == 0) {
   \   0000005C   141090E5           LDR      R1,[R0, #+20]
    870                pContext->vxSizePhys = xSize;
    871              }
    872              pContext->xSize = xSize;
    873              pContext->ySize = ySize;
    874              Data.xSize = xSize;
    875              Data.ySize = ySize;
    876              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
   \   00000060   0D20A0E1           MOV      R2,SP
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   14508005           STREQ    R5,[R0, #+20]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
   \   00000070   086080E5           STR      R6,[R0, #+8]
   \   00000074   00508DE5           STR      R5,[SP, #+0]
   \   00000078   04608DE5           STR      R6,[SP, #+4]
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   180094E5           LDR      R0,[R4, #+24]
   \   00000084   ........           BL       LCD_X_DisplayDriver
    877            }
    878          }
   \                     ??_SetSize_1:
   \   00000088   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    879          
    880          /*********************************************************************
    881          *
    882          *       _SetPos
    883          */

   \                                 In section .text, align 4, keep-with-next
    884          static void _SetPos(GUI_DEVICE * pDevice, int xPos, int yPos) {
   \                     _SetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    885            DRIVER_CONTEXT * pContext;
    886            LCD_X_SETPOS_INFO Data = {0};
   \   00000008   ............       ADRL     R1,`?<Constant {0}>_2`
   \              ....        
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   08D04DE2           SUB      SP,SP,#+8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   043091E5           LDR      R3,[R1, #+4]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   0C0080E8           STM      R0,{R2,R3}
    887          
    888            _InitOnce(pDevice);
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500001A           BNE      ??_SetPos_0
   \   00000038   2C00A0E3           MOV      R0,#+44
   \   0000003C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000040   080084E5           STR      R0,[R4, #+8]
   \   00000044   2C20A0E3           MOV      R2,#+44
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           BL       GUI__memset
    889            if (pDevice->u.pContext) {
   \                     ??_SetPos_0:
   \   00000050   080094E5           LDR      R0,[R4, #+8]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??_SetPos_1
    890              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    891              pContext->xPos = xPos;
   \   0000005C   185080E5           STR      R5,[R0, #+24]
    892              pContext->yPos = yPos;
   \   00000060   1C6080E5           STR      R6,[R0, #+28]
    893              Data.xPos = xPos;
   \   00000064   00508DE5           STR      R5,[SP, #+0]
    894              Data.yPos = yPos;
   \   00000068   04608DE5           STR      R6,[SP, #+4]
    895              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETPOS, (void *)&Data);
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   0810A0E3           MOV      R1,#+8
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   ........           BL       LCD_X_DisplayDriver
    896            }
    897          }
   \                     ??_SetPos_1:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
    898          
    899          /*********************************************************************
    900          *
    901          *       _GetPos
    902          */

   \                                 In section .text, align 4, keep-with-next
    903          static void _GetPos(GUI_DEVICE * pDevice, int * pxPos, int * pyPos) {
   \                     _GetPos:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    904            DRIVER_CONTEXT * pContext;
    905          
    906            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_GetPos_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
    907            if (pDevice->u.pContext) {
   \                     ??_GetPos_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??_GetPos_1
    908              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    909              *pxPos = pContext->xPos;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   001085E5           STR      R1,[R5, #+0]
    910              *pyPos = pContext->yPos;
   \   00000048   1C0090E5           LDR      R0,[R0, #+28]
   \   0000004C   000086E5           STR      R0,[R6, #+0]
    911            }
    912          }
   \                     ??_GetPos_1:
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    913          
    914          /*********************************************************************
    915          *
    916          *       _SetAlpha
    917          */

   \                                 In section .text, align 4, keep-with-next
    918          static void _SetAlpha(GUI_DEVICE * pDevice, int Alpha) {
   \                     _SetAlpha:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    919            DRIVER_CONTEXT * pContext;
    920            LCD_X_SETALPHA_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_3`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    921          
    922            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetAlpha_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    923            if (pDevice->u.pContext) {
   \                     ??_SetAlpha_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetAlpha_1
    924              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    925              pContext->Alpha = Alpha;
   \   0000004C   205080E5           STR      R5,[R0, #+32]
    926              Data.Alpha = Alpha;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    927              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHA, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    928            }
    929          }
   \                     ??_SetAlpha_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    930          
    931          /*********************************************************************
    932          *
    933          *       _SetVis
    934          */

   \                                 In section .text, align 4, keep-with-next
    935          static void _SetVis(GUI_DEVICE * pDevice, int OnOff) {
   \                     _SetVis:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    936            DRIVER_CONTEXT * pContext;
    937            LCD_X_SETVIS_INFO Data = {0};
   \   00000008   ........           ADR      R1,`?<Constant {0}>_4`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    938          
    939            _InitOnce(pDevice);
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??_SetVis_0
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   2C20A0E3           MOV      R2,#+44
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           BL       GUI__memset
    940            if (pDevice->u.pContext) {
   \                     ??_SetVis_0:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??_SetVis_1
    941              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
    942              pContext->IsVisible = OnOff;
   \   0000004C   245080E5           STR      R5,[R0, #+36]
    943              Data.OnOff = OnOff;
   \   00000050   00508DE5           STR      R5,[SP, #+0]
    944              LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVIS, (void *)&Data);
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   180094E5           LDR      R0,[R4, #+24]
   \   00000060   ........           BL       LCD_X_DisplayDriver
    945            }
    946          }
   \                     ??_SetVis_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
    947          
    948          /*********************************************************************
    949          *
    950          *       _Init
    951          */

   \                                 In section .text, align 4, keep-with-next
    952          static int  _Init(GUI_DEVICE * pDevice) {
   \                     _Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    953            int r;
    954          
    955            r = _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500001A           BNE      ??_Init_0
   \   00000018   2C00A0E3           MOV      R0,#+44
   \   0000001C   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000020   080084E5           STR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       GUI__memset
   \                     ??_Init_0:
   \   00000030   080094E5           LDR      R0,[R4, #+8]
    956            r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
    957            return r;
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0150A003           MOVEQ    R5,#+1
   \   00000040   0050A013           MOVNE    R5,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   ........           BL       LCD_X_DisplayDriver
   \   00000050   050080E1           ORR      R0,R0,R5
   \   00000054   04D08DE2           ADD      SP,SP,#+4
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
    958          }
    959          
    960          /*********************************************************************
    961          *
    962          *       _On
    963          */

   \                                 In section .text, align 4, keep-with-next
    964          static void _On (GUI_DEVICE * pDevice) {
    965            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
   \                     _On:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0510A0E3           MOV      R1,#+5
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    966          }
    967          
    968          /*********************************************************************
    969          *
    970          *       _Off
    971          */

   \                                 In section .text, align 4, keep-with-next
    972          static void _Off (GUI_DEVICE * pDevice) {
    973            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
   \                     _Off:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0610A0E3           MOV      R1,#+6
   \   00000008   180090E5           LDR      R0,[R0, #+24]
   \   0000000C   ........           B        LCD_X_DisplayDriver  ;; tailcall
    974          }
    975          
    976          /*********************************************************************
    977          *
    978          *       _SetLUTEntry
    979          */

   \                                 In section .text, align 4, keep-with-next
    980          static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
   \                     _SetLUTEntry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    981            LCD_X_SETLUTENTRY_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
    982          
    983            Data.Pos   = Pos;
   \   0000001C   0410CDE5           STRB     R1,[SP, #+4]
    984            Data.Color = Color;
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    985            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
    986          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    987          
    988          /*********************************************************************
    989          *
    990          *       _SetAlphaMode
    991          */

   \                                 In section .text, align 4, keep-with-next
    992          static void _SetAlphaMode(GUI_DEVICE * pDevice, int AlphaMode) {
   \                     _SetAlphaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    993            LCD_X_SETALPHAMODE_INFO Data = {0};
    994          
    995            Data.AlphaMode = AlphaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
    996            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETALPHAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0B10A0E3           MOV      R1,#+11
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
    997          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
    998          
    999          /*********************************************************************
   1000          *
   1001          *       _SetChromaMode
   1002          */

   \                                 In section .text, align 4, keep-with-next
   1003          static void _SetChromaMode(GUI_DEVICE * pDevice, int ChromaMode) {
   \                     _SetChromaMode:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   1004            LCD_X_SETCHROMAMODE_INFO Data = {0};
   1005          
   1006            Data.ChromaMode = ChromaMode;
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   1007            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMAMODE, (void *)&Data);
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   ........           BL       LCD_X_DisplayDriver
   1008          }
   \   0000001C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000020   0080BDE8           POP      {PC}             ;; return
   1009          
   1010          /*********************************************************************
   1011          *
   1012          *       _SetChroma
   1013          */

   \                                 In section .text, align 4, keep-with-next
   1014          static void _SetChroma(GUI_DEVICE * pDevice, LCD_COLOR ChromaMin, LCD_COLOR ChromaMax) {
   \                     _SetChroma:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1015            LCD_X_SETCHROMA_INFO Data = {0};
   \   00000004   ........           ADR      R12,`?<Constant {0L}>_1`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   00409CE5           LDR      R4,[R12, #+0]
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   300083E8           STM      R3,{R4,R5}
   1016          
   1017            Data.ChromaMin = ChromaMin;
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   1018            Data.ChromaMax = ChromaMax;
   \   00000020   04208DE5           STR      R2,[SP, #+4]
   1019            LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETCHROMA, (void *)&Data);
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0D10A0E3           MOV      R1,#+13
   \   0000002C   180090E5           LDR      R0,[R0, #+24]
   \   00000030   ........           BL       LCD_X_DisplayDriver
   1020          }
   \   00000034   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   1021          
   1022          /*********************************************************************
   1023          *
   1024          *       _SetFunc
   1025          */

   \                                 In section .text, align 4, keep-with-next
   1026          static void _SetFunc(GUI_DEVICE * pDevice, int Index, void (* pFunc)(void)) {
   \                     _SetFunc:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1027            DRIVER_CONTEXT * pContext;
   1028          
   1029            _InitOnce(pDevice);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??_SetFunc_0
   \   0000001C   2C00A0E3           MOV      R0,#+44
   \   00000020   ........           BL       GUI_ALLOC_GetFixedBlock
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   2C20A0E3           MOV      R2,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           BL       GUI__memset
   1030            if (pDevice->u.pContext) {
   \                     ??_SetFunc_0:
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??_SetFunc_1
   1031              pContext = (DRIVER_CONTEXT *)pDevice->u.pContext;
   1032              switch (Index) {
   \   00000040   170055E3           CMP      R5,#+23
   1033              case LCD_DEVFUNC_FILLRECT:
   1034                pContext->pfFillRect = (void (*)(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex))pFunc;
   \   00000044   28608005           STREQ    R6,[R0, #+40]
   1035                break;
   1036              }
   1037            }
   1038          }
   \                     ??_SetFunc_1:
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
   1039          
   1040          /*********************************************************************
   1041          *
   1042          *       _GetDevFunc
   1043          */

   \                                 In section .text, align 4, keep-with-next
   1044          static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
   1045            GUI_USE_PARA(ppDevice);
   1046            switch (Index) {
   \                     _GetDevFunc:
   \   00000000   011041E2           SUB      R1,R1,#+1
   \   00000004   150051E3           CMP      R1,#+21
   \   00000008   01F18F90           ADDLS    PC,PC,R1, LSL #+2
   \                     ??_GetDevFunc_0:
   \   0000000C   3500008A           BHI      ??_GetDevFunc_1
   \   00000010   140000EA           B        ??_GetDevFunc_2
   \   00000014   1F0000EA           B        ??_GetDevFunc_3
   \   00000018   1A0000EA           B        ??_GetDevFunc_4
   \   0000001C   1B0000EA           B        ??_GetDevFunc_5
   \   00000020   300000EA           B        ??_GetDevFunc_1
   \   00000024   1D0000EA           B        ??_GetDevFunc_6
   \   00000028   2E0000EA           B        ??_GetDevFunc_1
   \   0000002C   2D0000EA           B        ??_GetDevFunc_1
   \   00000030   0E0000EA           B        ??_GetDevFunc_7
   \   00000034   0F0000EA           B        ??_GetDevFunc_8
   \   00000038   100000EA           B        ??_GetDevFunc_9
   \   0000003C   190000EA           B        ??_GetDevFunc_10
   \   00000040   280000EA           B        ??_GetDevFunc_1
   \   00000044   190000EA           B        ??_GetDevFunc_11
   \   00000048   1A0000EA           B        ??_GetDevFunc_12
   \   0000004C   1B0000EA           B        ??_GetDevFunc_13
   \   00000050   240000EA           B        ??_GetDevFunc_1
   \   00000054   230000EA           B        ??_GetDevFunc_1
   \   00000058   1A0000EA           B        ??_GetDevFunc_14
   \   0000005C   1B0000EA           B        ??_GetDevFunc_15
   \   00000060   1C0000EA           B        ??_GetDevFunc_16
   \   00000064   1D0000EA           B        ??_GetDevFunc_17
   1047            case LCD_DEVFUNC_READRECT:
   1048              return (void (*)(void))_ReadRect;
   \                     ??_GetDevFunc_2:
   \   00000068   ........           LDR      R0,??DataTable16_1
   \   0000006C   1EFF2FE1           BX       LR
   1049            case LCD_DEVFUNC_SET_VRAM_ADDR:
   1050              return (void (*)(void))_SetVRAMAddr;
   \                     ??_GetDevFunc_7:
   \   00000070   ........           LDR      R0,??DataTable16_2
   \   00000074   1EFF2FE1           BX       LR
   1051            case LCD_DEVFUNC_SET_VSIZE:
   1052              return (void (*)(void))_SetVSize;
   \                     ??_GetDevFunc_8:
   \   00000078   ........           LDR      R0,??DataTable16_3
   \   0000007C   1EFF2FE1           BX       LR
   1053            case LCD_DEVFUNC_SET_SIZE:
   1054              return (void (*)(void))_SetSize;
   \                     ??_GetDevFunc_9:
   \   00000080   ........           LDR      R0,??DataTable16_4
   \   00000084   1EFF2FE1           BX       LR
   1055            case LCD_DEVFUNC_SETPOS:
   1056              return (void (*)(void))_SetPos;
   \                     ??_GetDevFunc_4:
   \   00000088   ........           LDR      R0,??DataTable16_5
   \   0000008C   1EFF2FE1           BX       LR
   1057            case LCD_DEVFUNC_GETPOS:
   1058              return (void (*)(void))_GetPos;
   \                     ??_GetDevFunc_5:
   \   00000090   ........           LDR      R0,??DataTable16_6
   \   00000094   1EFF2FE1           BX       LR
   1059            case LCD_DEVFUNC_SETALPHA:
   1060              return (void (*)(void))_SetAlpha;
   \                     ??_GetDevFunc_3:
   \   00000098   ........           LDR      R0,??DataTable16_7
   \   0000009C   1EFF2FE1           BX       LR
   1061            case LCD_DEVFUNC_SETVIS:
   1062              return (void (*)(void))_SetVis;
   \                     ??_GetDevFunc_6:
   \   000000A0   ........           LDR      R0,??DataTable16_8
   \   000000A4   1EFF2FE1           BX       LR
   1063            case LCD_DEVFUNC_INIT:
   1064              return (void (*)(void))_Init;
   \                     ??_GetDevFunc_10:
   \   000000A8   ........           LDR      R0,??DataTable16_9
   \   000000AC   1EFF2FE1           BX       LR
   1065            case LCD_DEVFUNC_ON:
   1066              return (void (*)(void))_On;
   \                     ??_GetDevFunc_11:
   \   000000B0   ........           LDR      R0,??DataTable16_10
   \   000000B4   1EFF2FE1           BX       LR
   1067            case LCD_DEVFUNC_OFF:
   1068              return (void (*)(void))_Off;
   \                     ??_GetDevFunc_12:
   \   000000B8   ........           LDR      R0,??DataTable16_11
   \   000000BC   1EFF2FE1           BX       LR
   1069            case LCD_DEVFUNC_SETLUTENTRY:
   1070              return (void (*)(void))_SetLUTEntry;
   \                     ??_GetDevFunc_13:
   \   000000C0   ........           LDR      R0,??DataTable16_12
   \   000000C4   1EFF2FE1           BX       LR
   1071          
   1072            case LCD_DEVFUNC_ALPHAMODE:
   1073              return (void (*)(void))_SetAlphaMode;
   \                     ??_GetDevFunc_14:
   \   000000C8   ........           LDR      R0,??DataTable16_13
   \   000000CC   1EFF2FE1           BX       LR
   1074            case LCD_DEVFUNC_CHROMAMODE:
   1075              return (void (*)(void))_SetChromaMode;
   \                     ??_GetDevFunc_15:
   \   000000D0   ........           LDR      R0,??DataTable16_14
   \   000000D4   1EFF2FE1           BX       LR
   1076            case LCD_DEVFUNC_CHROMA:
   1077              return (void (*)(void))_SetChroma;
   \                     ??_GetDevFunc_16:
   \   000000D8   ........           LDR      R0,??DataTable16_15
   \   000000DC   1EFF2FE1           BX       LR
   1078            
   1079            case LCD_DEVFUNC_SETFUNC:
   1080              return (void (*)(void))_SetFunc;
   \                     ??_GetDevFunc_17:
   \   000000E0   ........           LDR      R0,??DataTable16_16
   \   000000E4   1EFF2FE1           BX       LR
   1081            }
   1082            return NULL;
   \                     ??_GetDevFunc_1:
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   1EFF2FE1           BX       LR               ;; return
   1083          }
   1084          
   1085          /*********************************************************************
   1086          *
   1087          *       Public data
   1088          *
   1089          **********************************************************************
   1090          */
   1091          /*********************************************************************
   1092          *
   1093          *       GUI_DEVICE_API structure
   1094          */

   \                                 In section .rodata, align 4, keep-with-next
   1095          const GUI_DEVICE_API GUIDRV_Lin_OX_16_API = {
   \                     GUIDRV_Lin_OX_16_API:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   00000000....       DC32 0, _DrawBitmap, _DrawHLine, _DrawVLine, _FillRect, _GetPixelIndex, _SetPixelIndex, _XorPixel, _SetOrg, _GetDevFunc
   \              ............
   \              ............
   \              ............
   \              ............
   \              ............
   \              ........    
   \   00000028   ............       DC32 _GetDevProp, _GetDevData, _GetRect
   \              ............

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     LCD_pColorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     LCD_aMirror

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     GUI_MEMDEV_DEVICE_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     _ReadRect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     _SetVRAMAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     _SetVSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     _SetSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     _SetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     _GetPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     _SetAlpha

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     _SetVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     _Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     _On

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     _Off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     _SetLUTEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     _SetAlphaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     _SetChromaMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     _SetChroma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   ........           DC32     _SetFunc

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {(void *)0}>`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0L}>_1`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   00000000           DC32 0
   \   00000004   00000000           DC8 0, 0, 0, 0
   1096            //
   1097            // Data
   1098            //
   1099            DEVICE_CLASS_DRIVER,
   1100            //
   1101            // Drawing functions
   1102            //
   1103            _DrawBitmap,
   1104            _DrawHLine,
   1105            _DrawVLine,
   1106            _FillRect,
   1107            _GetPixelIndex,
   1108            _SetPixelIndex,
   1109            _XorPixel,
   1110            //
   1111            // Set origin
   1112            //
   1113            _SetOrg,
   1114            //
   1115            // Request information
   1116            //
   1117            _GetDevFunc,
   1118            _GetDevProp,
   1119            _GetDevData,
   1120            _GetRect,
   1121          };
   1122          
   1123          #else
   1124          
   1125          void GUIDRV_Lin_OX_16_C(void);   // Avoid empty object files
   1126          void GUIDRV_Lin_OX_16_C(void) {}
   1127          
   1128          #endif
   1129          
   1130          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     _DrawBitLine16BPP     12
     _DrawBitLine1BPP      32
     _DrawBitLine2BPP      32
     _DrawBitLine4BPP      32
     _DrawBitLine8BPP      12
     _DrawBitmap           56
     _DrawHLine            24
     _DrawVLine            24
     _FillRect             24
     _GetDevData            0
     _GetDevFunc            0
     _GetDevProp            0
     _GetPixelIndex         0
     _GetPos               16
     _GetRect               0
     _Init                 16
     _Off                   8
     _On                    8
     _ReadRect             16
     _SetAlpha             16
     _SetAlphaMode          8
     _SetChroma            24
     _SetChromaMode         8
     _SetFunc              16
     _SetLUTEntry          24
     _SetOrg               24
     _SetPixelIndex         4
     _SetPos               24
     _SetSize              24
     _SetVRAMAddr          16
     _SetVSize             16
     _SetVis               16
     _XorPixel             24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _SetPixelIndex            44
     _GetPixelIndex            40
     _XorPixel                116
     _DrawHLine               368
     _DrawVLine               220
     _FillRect                 68
     _DrawBitLine1BPP         316
     _DrawBitLine2BPP         460
     _DrawBitLine4BPP         460
     _DrawBitLine8BPP         348
     _DrawBitLine16BPP        484
     _DrawBitmap              952
     _SetOrg                   84
     _GetRect                  44
     _GetDevProp              140
     _GetDevData               24
     _ReadRect                108
     _SetVRAMAddr             112
     _SetVSize                 76
     _SetSize                 144
     _SetPos                  132
     _GetPos                   84
     _SetAlpha                108
     _SetVis                  108
     _Init                     92
     _On                       16
     _Off                      16
     _SetLUTEntry              60
     _SetAlphaMode             36
     _SetChromaMode            36
     _SetChroma                60
     _SetFunc                  76
     _GetDevFunc              240
     GUIDRV_Lin_OX_16_API      52
     ??DataTable14              4
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable16              4
     ??DataTable16_1            4
     ??DataTable16_2            4
     ??DataTable16_3            4
     ??DataTable16_4            4
     ??DataTable16_5            4
     ??DataTable16_6            4
     ??DataTable16_7            4
     ??DataTable16_8            4
     ??DataTable16_9            4
     ??DataTable16_10           4
     ??DataTable16_11           4
     ??DataTable16_12           4
     ??DataTable16_13           4
     ??DataTable16_14           4
     ??DataTable16_15           4
     ??DataTable16_16           4
     ?<Constant {0}>            8
     ?<Constant {(void *)0}>    4
     ?<Constant {0}>_1          8
     ?<Constant {0}>_2          8
     ?<Constant {0}>_3          4
     ?<Constant {0}>_4          4
     ?<Constant {0L}>           8
     ?<Constant {0L}>_1         8

 
    52 bytes in section .rodata
 5 804 bytes in section .text
 
 5 804 bytes of CODE  memory
    52 bytes of CONST memory

Errors: none
Warnings: none
