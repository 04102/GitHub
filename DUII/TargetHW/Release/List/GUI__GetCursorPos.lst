###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:09:43 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUI__GetCursorPos.c                 #
#    Command line =  C:\DUII\TargetHW\GUI\GUI__GetCursorPos.c -D DEBUG=1 -D   #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUI__GetCursorPos.lst      #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUI__GetCursorPos.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUI__GetCursorPos.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUI__GetCursorPos.c
     19          Purpose     : Implementation of optional routines
     20          
     21                        The routines below are used by EDIT and MULTIEDIT widget
     22          ---------------------------END-OF-HEADER------------------------------
     23          */
     24          
     25          #include "GUI_Private.h"
     26          
     27          /*********************************************************************
     28          *
     29          *       Defines
     30          *
     31          **********************************************************************
     32          */
     33          #ifndef   GUI_SUPPORT_BIDI
     34            #define GUI_SUPPORT_BIDI 0
     35          #endif
     36          
     37          /*********************************************************************
     38          *
     39          *       Static code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       _GetCursorPosX
     46          */

   \                                 In section .text, align 4, keep-with-next
     47          static int _GetCursorPosX(const char GUI_UNI_PTR * s, int MaxNumChars, int Index) {
   \                     _GetCursorPosX:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0240B0E1           MOVS     R4,R2
     48            int CursorPosX = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
     49            U16 Char;
     50            GUI_USE_PARA(MaxNumChars);
   \   00000010   1200000A           BEQ      ??_GetCursorPosX_0
   \   00000014   010014E3           TST      R4,#0x1
   \   00000018   0300000A           BEQ      ??_GetCursorPosX_1
     51            while (Index--) {
     52              Char        = GUI_UC__GetCharCodeInc(&s);
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   ........           BL       GUI_UC__GetCharCodeInc
     53              CursorPosX += GUI_GetCharDistX(Char);
   \   00000024   ........           BL       GUI_GetCharDistX
   \   00000028   0050A0E1           MOV      R5,R0
   \                     ??_GetCursorPosX_1:
   \   0000002C   A440B0E1           LSRS     R4,R4,#+1
   \   00000030   0A00000A           BEQ      ??_GetCursorPosX_0
   \                     ??_GetCursorPosX_2:
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   ........           BL       GUI_UC__GetCharCodeInc
   \   0000003C   ........           BL       GUI_GetCharDistX
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           BL       GUI_UC__GetCharCodeInc
   \   0000004C   ........           BL       GUI_GetCharDistX
   \   00000050   060080E0           ADD      R0,R0,R6
   \   00000054   055080E0           ADD      R5,R0,R5
   \   00000058   014054E2           SUBS     R4,R4,#+1
   \   0000005C   F4FFFF1A           BNE      ??_GetCursorPosX_2
     54            }
     55            return CursorPosX;
   \                     ??_GetCursorPosX_0:
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   08D08DE2           ADD      SP,SP,#+8
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
     56          }
     57          
     58          /*********************************************************************
     59          *
     60          *       _GetCursorPosChar
     61          */

   \                                 In section .text, align 4, keep-with-next
     62          static int _GetCursorPosChar(const char GUI_UNI_PTR * s, int MaxNumChars, int x) {
   \                     _GetCursorPosChar:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63            int SizeX = 0;
     64            const char GUI_UNI_PTR * p;
     65            p = s;
   \   00000008   018041E2           SUB      R8,R1,#+1
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   0470A0E1           MOV      R7,R4
   \   0000001C   010058E3           CMP      R8,#+1
   \   00000020   0D0000BA           BLT      ??_GetCursorPosChar_0
     66            while (--MaxNumChars> 0) {
     67              U16 Char;
     68              Char   = GUI_UC_GetCharCode(s);
   \                     ??_GetCursorPosChar_1:
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       GUI_UC_GetCharCode
   \   0000002C   0090A0E1           MOV      R9,R0
     69              SizeX += GUI_GetCharDistX(Char);
   \   00000030   ........           BL       GUI_GetCharDistX
   \   00000034   066080E0           ADD      R6,R0,R6
     70              if (!Char || (SizeX > x)) {
   \   00000038   000059E3           CMP      R9,#+0
   \   0000003C   0600000A           BEQ      ??_GetCursorPosChar_0
   \   00000040   060055E1           CMP      R5,R6
   \   00000044   040000BA           BLT      ??_GetCursorPosChar_0
     71                break;
     72              }
     73              s += GUI_UC_GetCharSize(s);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       GUI_UC_GetCharSize
   \   00000050   044080E0           ADD      R4,R0,R4
   \   00000054   018058E2           SUBS     R8,R8,#+1
     74            }
   \   00000058   F1FFFF1A           BNE      ??_GetCursorPosChar_1
     75            return GUI_UC__NumBytes2NumChars(p, s - p);
   \                     ??_GetCursorPosChar_0:
   \   0000005C   071044E0           SUB      R1,R4,R7
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   F043BDE8           POP      {R4-R9,LR}
   \   0000006C   ........           B        GUI_UC__NumBytes2NumChars  ;; tailcall
     76          }
     77          
     78          /*********************************************************************
     79          *
     80          *       _GetCursorCharacter
     81          */

   \                                 In section .text, align 4, keep-with-next
     82          static U16 _GetCursorCharacter(const char GUI_UNI_PTR * s, int MaxNumChars, int Index, int * pIsRTL) {
   \                     _GetCursorCharacter:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     83            GUI_USE_PARA(MaxNumChars);
     84            if (pIsRTL) {
   \   00000008   000053E3           CMP      R3,#+0
     85              *pIsRTL = 0;
   \   0000000C   0000A013           MOVNE    R0,#+0
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   00008315           STRNE    R0,[R3, #+0]
   \   00000018   04D04DE2           SUB      SP,SP,#+4
     86            }
     87            while (Index--) {
   \   0000001C   000055E3           CMP      R5,#+0
   \   00000020   0800000A           BEQ      ??_GetCursorCharacter_0
     88              s  += GUI_UC__GetCharSize(s);
   \                     ??_GetCursorCharacter_1:
   \   00000024   ........           LDR      R1,??DataTable3
   \   00000028   015045E2           SUB      R5,R5,#+1
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   041091E5           LDR      R1,[R1, #+4]
   \   00000038   31FF2FE1           BLX      R1
   \   0000003C   044080E0           ADD      R4,R0,R4
   \   00000040   000055E3           CMP      R5,#+0
   \   00000044   F6FFFF1A           BNE      ??_GetCursorCharacter_1
     89            }
     90            return GUI_UC_GetCharCode(s);
   \                     ??_GetCursorCharacter_0:
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   3040BDE8           POP      {R4,R5,LR}
   \   00000054   ........           B        GUI_UC_GetCharCode  ;; tailcall
     91          }
     92          
     93          /*********************************************************************
     94          *
     95          *       Private data
     96          *
     97          **********************************************************************
     98          */
     99          /*********************************************************************
    100          *
    101          *       Function pointers
    102          */
    103          #if GUI_SUPPORT_BIDI
    104            int (* GUI__GetCursorPos_pfGetPosX)     (const char GUI_UNI_PTR * s, int MaxNumChars, int Index)               = GUI__BIDI_GetCursorPosX;
    105            int (* GUI__GetCursorPos_pfGetPosChar)  (const char GUI_UNI_PTR * s, int MaxNumChars, int x)                   = GUI__BIDI_GetCursorPosChar;
    106            U16 (* GUI__GetCursorPos_pfGetCharacter)(const char GUI_UNI_PTR * s, int MaxNumChars, int Index, int * pIsRTL) = GUI__BIDI_GetCursorCharacter;
    107          #else

   \                                 In section .data, align 4
    108            int (* GUI__GetCursorPos_pfGetPosX)     (const char GUI_UNI_PTR * s, int MaxNumChars, int Index)               = _GetCursorPosX;
   \                     GUI__GetCursorPos_pfGetPosX:
   \   00000000   ........           DC32 _GetCursorPosX

   \                                 In section .data, align 4
    109            int (* GUI__GetCursorPos_pfGetPosChar)  (const char GUI_UNI_PTR * s, int MaxNumChars, int x)                   = _GetCursorPosChar;
   \                     GUI__GetCursorPos_pfGetPosChar:
   \   00000000   ........           DC32 _GetCursorPosChar

   \                                 In section .data, align 4
    110            U16 (* GUI__GetCursorPos_pfGetCharacter)(const char GUI_UNI_PTR * s, int MaxNumChars, int Index, int * pIsRTL) = _GetCursorCharacter;
   \                     GUI__GetCursorPos_pfGetCharacter:
   \   00000000   ........           DC32 _GetCursorCharacter
    111          #endif
    112          
    113          /*********************************************************************
    114          *
    115          *       GUI__GetCursorPosX
    116          *
    117          * Purpose:
    118          *   Returns the cursor position in pixels by the given index
    119          *
    120          * Parameters:
    121          *   s           : Pointer to the string
    122          *   Index       : Index of cursor character
    123          *   MaxNumChars : Number of charaters in the string
    124          */

   \                                 In section .text, align 4, keep-with-next
    125          int GUI__GetCursorPosX(const char GUI_UNI_PTR * s, int Index, int MaxNumChars) {
   \                     GUI__GetCursorPosX:
   \   00000000   0230A0E1           MOV      R3,R2
    126            return GUI__GetCursorPos_pfGetPosX(s, MaxNumChars, Index);
   \   00000004   0120A0E1           MOV      R2,R1
   \   00000008   0310A0E1           MOV      R1,R3
   \   0000000C   ........           LDR      R3,??DataTable3_1
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   13FF2FE1           BX       R3               ;; tailcall
    127          }
    128          
    129          /*********************************************************************
    130          *
    131          *       GUI__GetCursorPosChar
    132          *
    133          * Purpose:
    134          *   Returns the cursor character index by the given pixel position
    135          *
    136          * Parameters:
    137          *   s           : Pointer to the string
    138          *   x           : X position of the cursor
    139          *   MaxNumChars : Number of charaters in the string
    140          */

   \                                 In section .text, align 4, keep-with-next
    141          int GUI__GetCursorPosChar(const char GUI_UNI_PTR * s, int x, int MaxNumChars) {
   \                     GUI__GetCursorPosChar:
   \   00000000   0230A0E1           MOV      R3,R2
    142            return GUI__GetCursorPos_pfGetPosChar(s, MaxNumChars, x);
   \   00000004   0120A0E1           MOV      R2,R1
   \   00000008   0310A0E1           MOV      R1,R3
   \   0000000C   ........           LDR      R3,??DataTable3_2
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   13FF2FE1           BX       R3               ;; tailcall
    143          }
    144          
    145          /*********************************************************************
    146          *
    147          *       GUI__GetCursorCharacter
    148          */

   \                                 In section .text, align 4, keep-with-next
    149          U16 GUI__GetCursorCharacter(const char GUI_UNI_PTR * s, int Index, int MaxNumChars, int * pIsRTL) {
   \                     GUI__GetCursorCharacter:
   \   00000000   02C0A0E1           MOV      R12,R2
    150            return GUI__GetCursorPos_pfGetCharacter(s, MaxNumChars, Index, pIsRTL);
   \   00000004   0120A0E1           MOV      R2,R1
   \   00000008   0C10A0E1           MOV      R1,R12
   \   0000000C   ........           LDR      R12,??DataTable3_3
   \   00000010   00C09CE5           LDR      R12,[R12, #+0]
   \   00000014   1CFF2FE1           BX       R12              ;; tailcall
    151          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     GUI_pUC_API

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     GUI__GetCursorPos_pfGetPosX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     GUI__GetCursorPos_pfGetPosChar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     GUI__GetCursorPos_pfGetCharacter
    152          
    153          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     GUI__GetCursorCharacter      8
     GUI__GetCursorPosChar        8
     GUI__GetCursorPosX           8
     _GetCursorCharacter         16
     _GetCursorPosChar           32
     _GetCursorPosX              24


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _GetCursorPosX                  108
     _GetCursorPosChar               112
     _GetCursorCharacter              88
     GUI__GetCursorPos_pfGetPosX       4
     GUI__GetCursorPos_pfGetPosChar    4
     GUI__GetCursorPos_pfGetCharacter
                                       4
     GUI__GetCursorPosX               24
     GUI__GetCursorPosChar            24
     GUI__GetCursorCharacter          24
     ??DataTable3                      4
     ??DataTable3_1                    4
     ??DataTable3_2                    4
     ??DataTable3_3                    4

 
  12 bytes in section .data
 396 bytes in section .text
 
 396 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
