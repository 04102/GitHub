###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:15:29 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\GUIDEV_Write.c                      #
#    Command line =  C:\DUII\TargetHW\GUI\GUIDEV_Write.c -D DEBUG=1 -D        #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\GUIDEV_Write.lst           #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\GUIDEV_Write.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\GUIDEV_Write.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : GUIDev.C
     19          Purpose     : Implementation of memory devices
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <string.h>
     24          
     25          #include "GUI_Private.h"
     26          
     27          /* Memory device capabilities are compiled only if support for them is enabled.*/ 
     28          #if GUI_SUPPORT_MEMDEV
     29          
     30          /*********************************************************************
     31          *
     32          *       Exported routines
     33          *
     34          **********************************************************************
     35          */
     36          /*********************************************************************
     37          *
     38          *        GUI_MEMDEV_WriteAt
     39          */

   \                                 In section .text, align 4, keep-with-next
     40          void GUI_MEMDEV_WriteAt(GUI_MEMDEV_Handle hMem, int x, int y) {
   \                     GUI_MEMDEV_WriteAt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     41            if (hMem) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   1F00000A           BEQ      ??GUI_MEMDEV_WriteAt_0
     42              GUI_MEMDEV* pDevData;
     43              #if (GUI_WINSUPPORT)
     44                GUI_RECT r;
     45              #endif
     46              GUI_LOCK();
   \   0000001C   ........           BL       GUI_Lock
     47              pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  /* Convert to pointer */
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       GUI_ALLOC_h2p
     48              if (x == GUI_POS_AUTO) {
   \   00000028   FE10E0E3           MVN      R1,#+254
   \   0000002C   F01EC1E3           BIC      R1,R1,#0xF00
   \   00000030   010055E1           CMP      R5,R1
     49                x = pDevData->x0;
   \   00000034   F450D001           LDRSHEQ  R5,[R0, #+4]
     50                y = pDevData->y0;
   \   00000038   F660D001           LDRSHEQ  R6,[R0, #+6]
     51              }
     52              #if (GUI_WINSUPPORT)
     53                /* Calculate rectangle */
     54                r.x1 = (r.x0 = x) + pDevData->XSize-1;
   \   0000003C   B050CDE1           STRH     R5,[SP, #+0]
   \   00000040   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000044   F820D0E1           LDRSH    R2,[R0, #+8]
     55                r.y1 = (r.y0 = y) + pDevData->YSize-1;;
   \   00000048   B260CDE1           STRH     R6,[SP, #+2]
   \   0000004C   011082E0           ADD      R1,R2,R1
   \   00000050   011041E2           SUB      R1,R1,#+1
   \   00000054   B410CDE1           STRH     R1,[SP, #+4]
   \   00000058   F210DDE1           LDRSH    R1,[SP, #+2]
   \   0000005C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000060   010080E0           ADD      R0,R0,R1
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   B600CDE1           STRH     R0,[SP, #+6]
     56                /* Do the drawing. WIndow manager has to be on */
     57                WM_ITERATE_START(&r) {
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           BL       WM__InitIVRSearch
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0600000A           BEQ      ??GUI_MEMDEV_WriteAt_1
     58                  GUI_MEMDEV__WriteToActiveAt(hMem,x,y);
   \                     ??GUI_MEMDEV_WriteAt_2:
   \   0000007C   0620A0E1           MOV      R2,R6
   \   00000080   0510A0E1           MOV      R1,R5
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       GUI_MEMDEV__WriteToActiveAt
     59                } WM_ITERATE_END();
   \   0000008C   ........           BL       WM__GetNextIVR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   F8FFFF1A           BNE      ??GUI_MEMDEV_WriteAt_2
     60              #else
     61                GUI_MEMDEV__WriteToActiveAt(hMem,x,y);
     62              #endif
     63              GUI_UNLOCK();
   \                     ??GUI_MEMDEV_WriteAt_1:
   \   00000098   ........           BL       GUI_Unlock
     64            }
     65          }
   \                     ??GUI_MEMDEV_WriteAt_0:
   \   0000009C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000A0   7080BDE8           POP      {R4-R6,PC}       ;; return
     66          
     67          /*********************************************************************
     68          *
     69          *       GUI_MEMDEV_Write
     70          */

   \                                 In section .text, align 4, keep-with-next
     71          void GUI_MEMDEV_Write(GUI_MEMDEV_Handle hMem) {
   \                     GUI_MEMDEV_Write:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
     72            GUI_MEMDEV_WriteAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO);
   \   0000000C   1A00000A           BEQ      ??GUI_MEMDEV_Write_0
   \   00000010   ........           BL       GUI_Lock
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       GUI_ALLOC_h2p
   \   0000001C   F450D0E1           LDRSH    R5,[R0, #+4]
   \   00000020   F660D0E1           LDRSH    R6,[R0, #+6]
   \   00000024   B050CDE1           STRH     R5,[SP, #+0]
   \   00000028   F820D0E1           LDRSH    R2,[R0, #+8]
   \   0000002C   B260CDE1           STRH     R6,[SP, #+2]
   \   00000030   051082E0           ADD      R1,R2,R5
   \   00000034   011041E2           SUB      R1,R1,#+1
   \   00000038   B410CDE1           STRH     R1,[SP, #+4]
   \   0000003C   FA00D0E1           LDRSH    R0,[R0, #+10]
   \   00000040   060080E0           ADD      R0,R0,R6
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   B600CDE1           STRH     R0,[SP, #+6]
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           BL       WM__InitIVRSearch
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0600000A           BEQ      ??GUI_MEMDEV_Write_1
   \                     ??GUI_MEMDEV_Write_2:
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       GUI_MEMDEV__WriteToActiveAt
   \   0000006C   ........           BL       WM__GetNextIVR
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   F8FFFF1A           BNE      ??GUI_MEMDEV_Write_2
   \                     ??GUI_MEMDEV_Write_1:
   \   00000078   ........           BL       GUI_Unlock
     73          }
   \                     ??GUI_MEMDEV_Write_0:
   \   0000007C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
     74          
     75          #else
     76          
     77          void GUIDEV_Write_C(void);
     78          void GUIDEV_Write_C(void) {}
     79          
     80          #endif /* GUI_SUPPORT_MEMDEV */
     81          
     82          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GUI_MEMDEV_Write       24
     GUI_MEMDEV_WriteAt     24


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     GUI_MEMDEV_WriteAt  164
     GUI_MEMDEV_Write    132

 
 296 bytes in section .text
 
 296 bytes of CODE memory

Errors: none
Warnings: none
