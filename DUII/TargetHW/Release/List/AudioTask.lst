###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     15/Oct/2011  16:56:31 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\Setup\AudioTask.c                       #
#    Command line =  C:\DUII\TargetHW\Setup\AudioTask.c -D DEBUG=1 -D         #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -lCN                 #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    C:\DUII\TargetHW\Sounds\ -I \DUII\DUII\ --cpu_mode arm   #
#                    -Ohs --use_c++_inline --require_prototypes               #
#    List file    =  C:\DUII\TargetHW\Release\List\AudioTask.lst              #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\AudioTask.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\Setup\AudioTask.c
      1          #define AUDIO_MAIN
      2          
      3          #include <stdio.h>
      4          #include <string.h>
      5          #include "SPI_API.h"
      6          #include "DUII.h"
      7          #include "dbgu.h"
      8          #include "twi.h"
      9          #include "AudioTask.h"
     10          
     11          //
     12          // External data declarations
     13          //
     14          
     15          //
     16          // External functions
     17          //
     18          void mSDelay( int );
     19          
     20          //
     21          // Local defines, constants and structure definitions
     22          //

   \                                 In section .bss, align 4
     23          AT91S_TWI	*twi;
   \                     twi:
   \   00000000                      DS8 4
     24          
     25          //
     26          // Local function prototypes
     27          //

   \                                 In section .text, align 4, keep-with-next
     28          void Speak( char *sound) {
   \                     Speak:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   04D04DE2           SUB      SP,SP,#+4
     29          	unsigned int bytectr = sizeof (*sound);
     30          	char *pByte = sound;
     31          	
     32          //	TWI_WriteByte(&twi, 0);		// clear out the interface
     33          
     34          	TWI_StartWrite(twi, DAC_SLAVE_ADDR, 0, 0, 0);
   \   0000000C   ........           LDR      R5,??DataTable1
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   00008DE5           STR      R0,[SP, #+0]
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   4610A0E3           MOV      R1,#+70
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   ........           BL       TWI_StartWrite
     35          
     36          	while (bytectr--) {
     37          		while (1 != TWI_ByteSent(twi)) ;	// wait for char to finish
   \                     ??Speak_0:
   \   0000002C   000095E5           LDR      R0,[R5, #+0]
   \   00000030   ........           BL       TWI_ByteSent
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   FBFFFF1A           BNE      ??Speak_0
     38          		TWI_WriteByte(twi, *pByte++);		// send a character
   \   0000003C   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   3040BDE8           POP      {R4,R5,LR}
   \   0000004C   ........           B        TWI_WriteByte    ;; tailcall
     39          	} // while		
     40          
     41          } // Speak
     42          

   \                                 In section .text, align 4, keep-with-next
     43          static void InitAudioTask(void) {
   \                     InitAudioTask:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     44          
     45          	twi = (AT91S_TWI *) 0xFFFA8000;
   \   00000004   ........           LDR      R4,??DataTable1
   \   00000008   ........           LDR      R0,??DataTable1_1  ;; 0xfffa8000
     46          
     47          	// create clock for TWI
     48          //	PMC_SCER = 1 << 9;		// PCK1
     49          	PMC_SCER = AT91C_PMC_PCK1;
   \   0000000C   801FA0E3           MOV      R1,#+512
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   FF00E0E3           MVN      R0,#+255
   \   00000018   C00FC0E3           BIC      R0,R0,#0x300
   \   0000001C   001080E5           STR      R1,[R0, #+0]
     50          	PMC_PCK1 = 0x0001;		// select main clock with no divider
   \   00000020   4400A0E3           MOV      R0,#+68
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   001400E5           STR      R1,[R0, #-1024]
     51          //	PMC_PCK1 = 0x0002;		// select PLL clock with no divider
     52          	
     53          	// set up TWI interface
     54          	TWI_ConfigureMaster(twi, TWI_CLOCK, MASTER_CLOCK);
   \   0000002C   B728A0E3           MOV      R2,#+11993088
   \   00000030   601BA0E3           MOV      R1,#+98304
   \   00000034   04D04DE2           SUB      SP,SP,#+4
   \   00000038   6C2D82E3           ORR      R2,R2,#0x1B00
   \   0000003C   6A1E81E3           ORR      R1,R1,#0x6A0
   \   00000040   ........           LDR      R0,??DataTable1_1  ;; 0xfffa8000
   \   00000044   ........           BL       TWI_ConfigureMaster
     55          		
     56          	// program the dac
     57          	// set audio divider for 12MHz input clock and 8KHz audio sampling rate
     58          	TWI_StartWrite(twi, DAC_SLAVE_ADDR, DAC_SAMPLING1, 1, DAC_SYSCLK1);
   \   00000048   2400A0E3           MOV      R0,#+36
   \   0000004C   00008DE5           STR      R0,[SP, #+0]
   \   00000050   0130A0E3           MOV      R3,#+1
   \   00000054   5520A0E3           MOV      R2,#+85
   \   00000058   4610A0E3           MOV      R1,#+70
   \   0000005C   000094E5           LDR      R0,[R4, #+0]
   \   00000060   ........           BL       TWI_StartWrite
     59          	while (1 != TWI_ByteSent(twi)) ;	// wait for char to finish
   \                     ??InitAudioTask_0:
   \   00000064   000094E5           LDR      R0,[R4, #+0]
   \   00000068   ........           BL       TWI_ByteSent
   \   0000006C   010050E3           CMP      R0,#+1
   \   00000070   FBFFFF1A           BNE      ??InitAudioTask_0
     60          	TWI_StartWrite(twi, DAC_SLAVE_ADDR, DAC_SAMPLING2, 1, DAC_SYSCLK2);
   \   00000074   6000A0E3           MOV      R0,#+96
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0130A0E3           MOV      R3,#+1
   \   00000080   5620A0E3           MOV      R2,#+86
   \   00000084   4610A0E3           MOV      R1,#+70
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   ........           BL       TWI_StartWrite
     61          	while (1 != TWI_ByteSent(twi)) ;	// wait for char to finish
   \                     ??InitAudioTask_1:
   \   00000090   000094E5           LDR      R0,[R4, #+0]
   \   00000094   ........           BL       TWI_ByteSent
   \   00000098   010050E3           CMP      R0,#+1
   \   0000009C   FBFFFF1A           BNE      ??InitAudioTask_1
     62          	
     63          	// program the amplifier
     64          	TWI_StartWrite(twi, AMP_SLAVE_ADDR, AMP_CONTROL_REGISTER, 1, AMP_ENABLE);
   \   000000A0   D000A0E3           MOV      R0,#+208
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0130A0E3           MOV      R3,#+1
   \   000000AC   0120A0E3           MOV      R2,#+1
   \   000000B0   6010A0E3           MOV      R1,#+96
   \   000000B4   000094E5           LDR      R0,[R4, #+0]
   \   000000B8   ........           BL       TWI_StartWrite
     65          	while (1 != TWI_ByteSent(twi)) ;	// wait for char to finish
   \                     ??InitAudioTask_2:
   \   000000BC   000094E5           LDR      R0,[R4, #+0]
   \   000000C0   ........           BL       TWI_ByteSent
   \   000000C4   010050E3           CMP      R0,#+1
   \   000000C8   FBFFFF1A           BNE      ??InitAudioTask_2
     66          	TWI_StartWrite(twi, AMP_SLAVE_ADDR, AMP_CONTROL_REGISTER, 1, AMP_ENABLE);
   \   000000CC   D000A0E3           MOV      R0,#+208
   \   000000D0   00008DE5           STR      R0,[SP, #+0]
   \   000000D4   0130A0E3           MOV      R3,#+1
   \   000000D8   0120A0E3           MOV      R2,#+1
   \   000000DC   6010A0E3           MOV      R1,#+96
   \   000000E0   000094E5           LDR      R0,[R4, #+0]
   \   000000E4   ........           BL       TWI_StartWrite
     67          	while (1 != TWI_ByteSent(twi)) ;	// wait for char to finish
   \                     ??InitAudioTask_3:
   \   000000E8   000094E5           LDR      R0,[R4, #+0]
   \   000000EC   ........           BL       TWI_ByteSent
   \   000000F0   010050E3           CMP      R0,#+1
   \   000000F4   FBFFFF1A           BNE      ??InitAudioTask_3
     68          	
     69          	// clear any pending events
     70          	OS_ClearEvents(&audioTCB);
   \   000000F8   ........           LDR      R0,??DataTable1_2
   \   000000FC   ........           BL       OS_ClearEvents
     71          
     72          	// say something
     73          	Speak(welcomeToTraqDash);
   \   00000100   ........           LDR      R0,??DataTable1_3
   \   00000104   0030A0E3           MOV      R3,#+0
   \   00000108   005090E5           LDR      R5,[R0, #+0]
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   00008DE5           STR      R0,[SP, #+0]
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   4610A0E3           MOV      R1,#+70
   \   0000011C   000094E5           LDR      R0,[R4, #+0]
   \   00000120   ........           BL       TWI_StartWrite
   \                     ??InitAudioTask_4:
   \   00000124   000094E5           LDR      R0,[R4, #+0]
   \   00000128   ........           BL       TWI_ByteSent
   \   0000012C   010050E3           CMP      R0,#+1
   \   00000130   FBFFFF1A           BNE      ??InitAudioTask_4
   \   00000134   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000138   000094E5           LDR      R0,[R4, #+0]
   \   0000013C   04D08DE2           ADD      SP,SP,#+4
   \   00000140   3040BDE8           POP      {R4,R5,LR}
   \   00000144   ........           B        TWI_WriteByte    ;; tailcall
     74          
     75          } // InitAudioTask
     76          
     77          #define ALL_AUDIO_EVENTS ((1 << AUDIO_SOUND_DONE))
     78          

   \                                 In section .text, align 4, keep-with-next
     79          void AudioTask( void ) {
   \                     AudioTask:
   \   00000000   00402DE9           PUSH     {LR}
     80          	char which_event;										 // bitmask of events that occured
     81          
     82          	OS_Delay(5000);				// wait for initialization to complete
   \   00000004   8800A0E3           MOV      R0,#+136
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   4C0D80E3           ORR      R0,R0,#0x1300
   \   00000010   ........           BL       OS_Delay
     83          	
     84            	InitAudioTask();
   \   00000014   ........           BL       InitAudioTask
     85          
     86          	while (1) {	
     87          		// wait for something to happen
     88          		which_event = OS_WaitEvent( (unsigned char) ALL_AUDIO_EVENTS );
   \                     ??AudioTask_0:
   \   00000018   2000A0E3           MOV      R0,#+32
   \   0000001C   ........           BL       OS_WaitEvent
     89          		
     90          		if (which_event & (1 << AUDIO_SOUND_DONE)) {
   \   00000020   FCFFFFEA           B        ??AudioTask_0
     91          			
     92          			// if there isnanother soundbyte on the queue, get it started
     93          
     94          		} // if
     95          		
     96          	} // while
     97          } // AudioTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     twi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0080FAFF           DC32     0xfffa8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     audioTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   ........           DC32     welcomeToTraqDash

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     AudioTask          8
     InitAudioTask     16
     Speak             16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     twi               4
     Speak            80
     InitAudioTask   328
     AudioTask        36
     ??DataTable1      4
     ??DataTable1_1    4
     ??DataTable1_2    4
     ??DataTable1_3    4

 
   4 bytes in section .bss
 460 bytes in section .text
 
 460 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
