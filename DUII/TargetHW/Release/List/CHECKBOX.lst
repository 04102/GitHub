###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     19/Nov/2015  13:08:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  C:\DUII\TargetHW\GUI\CHECKBOX.c                          #
#    Command line =  C:\DUII\TargetHW\GUI\CHECKBOX.c -D DEBUG=1 -D            #
#                    SDRAM_TARGET=1 -D USB_IS_HIGH_SPEED -D NOPROFILER -D     #
#                    OS_TRACE=0 -D OS_VIEW_ENABLE=0 -lCN                      #
#                    C:\DUII\TargetHW\Release\List\ -o                        #
#                    C:\DUII\TargetHW\Release\Obj\ --endian=little            #
#                    --cpu=ARM926EJ-S -e --fpu=None --dlib_config             #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\ -I              #
#                    C:\DUII\TargetHW\Application\SEGGERDEMO\Src\ -I          #
#                    C:\DUII\TargetHW\Config\ -I C:\DUII\TargetHW\FS\ -I      #
#                    C:\DUII\TargetHW\GUI\ -I C:\DUII\TargetHW\Inc\ -I        #
#                    C:\DUII\TargetHW\OS\ -I C:\DUII\TargetHW\Setup\ -I       #
#                    \DUII\DUII\ -I \DUII\DUII\Graphics\ --cpu_mode arm -Ohs  #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  C:\DUII\TargetHW\Release\List\CHECKBOX.lst               #
#    Object file  =  C:\DUII\TargetHW\Release\Obj\CHECKBOX.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\DUII\TargetHW\GUI\CHECKBOX.c
      1          /*********************************************************************
      2          *                SEGGER Microcontroller GmbH & Co. KG                *
      3          *        Solutions for real time microcontroller applications        *
      4          **********************************************************************
      5          *                                                                    *
      6          *        (c) 1996 - 2010  SEGGER Microcontroller GmbH & Co. KG       *
      7          *                                                                    *
      8          *        Internet: www.segger.com    Support:  support@segger.com    *
      9          *                                                                    *
     10          **********************************************************************
     11          
     12          ** emWin V5.06 - Graphical user interface for embedded applications **
     13          emWin is protected by international copyright laws.   Knowledge of the
     14          source code may not be used to write a similar product.  This file may
     15          only be used in accordance with a license and should not be re-
     16          distributed in any way. We appreciate your understanding and fairness.
     17          ----------------------------------------------------------------------
     18          File        : CHECKBOX.c
     19          Purpose     : Implementation of checkbox widget
     20          ---------------------------END-OF-HEADER------------------------------
     21          */
     22          
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "CHECKBOX_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Private config defaults
     32          *
     33          **********************************************************************
     34          */
     35          
     36          /* Define default fonts */
     37          #ifndef   CHECKBOX_FONT_DEFAULT
     38            #if   WIDGET_USE_SCHEME_SMALL
     39              #define CHECKBOX_FONT_DEFAULT &GUI_Font13_1
     40            #elif WIDGET_USE_SCHEME_MEDIUM
     41              #define CHECKBOX_FONT_DEFAULT &GUI_Font16_1
     42            #elif WIDGET_USE_SCHEME_LARGE
     43              #define CHECKBOX_FONT_DEFAULT &GUI_Font24_1
     44            #endif
     45          #endif
     46          
     47          /* Define default images */
     48          #ifndef   CHECKBOX_IMAGE0_DEFAULT
     49            #define CHECKBOX_IMAGE0_DEFAULT &CHECKBOX__abmCheck[0]
     50          #endif
     51          
     52          #ifndef   CHECKBOX_IMAGE1_DEFAULT
     53            #define CHECKBOX_IMAGE1_DEFAULT &CHECKBOX__abmCheck[1]
     54          #endif
     55          
     56          /* Define widget background color */
     57          #ifndef   CHECKBOX_BKCOLOR_DEFAULT
     58            #define CHECKBOX_BKCOLOR_DEFAULT 0xC0C0C0           /* Text background color */
     59          #endif
     60          
     61          #ifndef   CHECKBOX_SPACING_DEFAULT
     62            #define CHECKBOX_SPACING_DEFAULT 4
     63          #endif
     64          
     65          #ifndef   CHECKBOX_TEXTCOLOR_DEFAULT
     66            #define CHECKBOX_TEXTCOLOR_DEFAULT GUI_BLACK
     67          #endif
     68          
     69          #ifndef   CHECKBOX_FOCUSCOLOR_DEFAULT
     70            #define CHECKBOX_FOCUSCOLOR_DEFAULT GUI_BLACK
     71          #endif
     72          
     73          #ifndef   CHECKBOX_TEXTALIGN_DEFAULT
     74            #define CHECKBOX_TEXTALIGN_DEFAULT (GUI_TA_LEFT | GUI_TA_VCENTER)
     75          #endif
     76          
     77          #ifndef   CHECKBOX_DRAW_SKIN_DEFAULT
     78            #define CHECKBOX_DRAW_SKIN_DEFAULT NULL
     79          #endif
     80          
     81          /*********************************************************************
     82          *
     83          *       Static data
     84          *
     85          **********************************************************************
     86          */

   \                                 In section .data, align 4
     87          CHECKBOX_PROPS CHECKBOX__DefaultProps = {
   \                     CHECKBOX__DefaultProps:
   \   00000000   ........8080       DC32 GUI_Font13_1, 8421504, 16777215, 12632256, 0, 0
   \              8000FFFFFF00
   \              C0C0C0000000
   \              000000000000
   \   00000018   ........0000       DC32 CHECKBOX__GetButtonSize, 0H
   \              0000        
   \   00000020   0C00               DC16 12
   \   00000022   0400               DC8 4, 0
   \   00000024   000000000000       DC32 0H, 0H, CHECKBOX__abmCheck, CHECKBOX__abmCheck + 14H
   \              0000........
   \              ........    
   \   00000034   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
     88            CHECKBOX_FONT_DEFAULT,
     89            {
     90              CHECKBOX_BKCOLOR0_DEFAULT,
     91              CHECKBOX_BKCOLOR1_DEFAULT,
     92            },
     93            CHECKBOX_BKCOLOR_DEFAULT,
     94            CHECKBOX_FOCUSCOLOR_DEFAULT,
     95            CHECKBOX_TEXTCOLOR_DEFAULT,
     96            {
     97              CHECKBOX__GetButtonSize,
     98              CHECKBOX_DRAW_SKIN_DEFAULT
     99            },
    100            CHECKBOX_TEXTALIGN_DEFAULT,
    101            CHECKBOX_SPACING_DEFAULT,
    102            {
    103              NULL,
    104              NULL,
    105              CHECKBOX_IMAGE0_DEFAULT, 
    106              CHECKBOX_IMAGE1_DEFAULT
    107            }
    108          };
    109          
    110          WIDGET_SKIN const * CHECKBOX__pSkinDefault = &CHECKBOX__SkinClassic;
   \                     CHECKBOX__pSkinDefault:
   \   0000003C   ........           DC32 CHECKBOX__SkinClassic
    111          
    112          /*********************************************************************
    113          *
    114          *       Static routines
    115          *
    116          **********************************************************************
    117          */
    118          /*********************************************************************
    119          *
    120          *       _Paint
    121          */
    122          static void _Paint(CHECKBOX_Handle hObj) {
    123            CHECKBOX_Obj * pObj;
    124            WIDGET_PAINT * pfPaint;
    125          
    126            pObj = CHECKBOX_LOCK_H(hObj);
    127            pfPaint = pObj->pWidgetSkin->pfPaint;
    128            GUI_UNLOCK_H(pObj);
    129            if (pfPaint) {
    130              pfPaint(hObj);
    131            }
    132          }
    133          
    134          /*********************************************************************
    135          *
    136          *       _OnTouch
    137          */
    138          static void _OnTouch(CHECKBOX_Handle hObj, WM_MESSAGE * pMsg) {
    139            CHECKBOX_Obj * pObj;
    140            int Notification = 0;
    141            int Hit = 0;
    142            const GUI_PID_STATE * pState;
    143            U8 NumStates;
    144            U8 CurrentState;
    145            I16 Id;
    146          
    147            pObj = CHECKBOX_LOCK_H(hObj);
    148            NumStates    = pObj->NumStates;
    149            CurrentState = pObj->CurrentState;
    150            Id           = pObj->Widget.Id;
    151            GUI_UNLOCK_H(pObj);
    152            pState = (const GUI_PID_STATE *)pMsg->Data.p;
    153            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
    154              if (!WM_HasCaptured(hObj)) {
    155                if (pState->Pressed) {
    156                  WM_SetCapture(hObj, 1);
    157                  CHECKBOX_SetState(hObj, (CurrentState + 1) % NumStates);
    158                  Notification = WM_NOTIFICATION_CLICKED;
    159                } else {
    160                  Hit =1;
    161                  Notification = WM_NOTIFICATION_RELEASED;
    162                }
    163              }
    164            } else {
    165              Notification = WM_NOTIFICATION_MOVED_OUT;
    166            }
    167            WM_NotifyParent(hObj, Notification);
    168            if (Hit == 1) {
    169              GUI_DEBUG_LOG("CHECKBOX: Hit\n");
    170              GUI_StoreKey(Id);
    171            }
    172          }
    173          
    174          /*********************************************************************
    175          *
    176          *       _OnKey
    177          */
    178          static void  _OnKey(CHECKBOX_Handle hObj, WM_MESSAGE * pMsg) {
    179            WM_KEY_INFO * pKeyInfo;
    180            CHECKBOX_Obj * pObj;
    181            U8 NumStates;
    182            U8 CurrentState;
    183            pObj = CHECKBOX_LOCK_H(hObj);
    184            NumStates    = pObj->NumStates;
    185            CurrentState = pObj->CurrentState;
    186            GUI_UNLOCK_H(pObj);
    187            if (WM__IsEnabled(hObj)) {
    188              pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
    189              if (pKeyInfo->PressedCnt > 0) {
    190                switch (pKeyInfo->Key) {
    191                case GUI_KEY_SPACE:
    192                  CHECKBOX_SetState(hObj, (CurrentState + 1) % NumStates);
    193                  break;                    /* Send to parent by not doing anything */
    194                }
    195              }
    196            }
    197          }
    198          
    199          /*********************************************************************
    200          *
    201          *       _Delete
    202          */
    203          static void _Delete(CHECKBOX_Handle hObj) {
    204            CHECKBOX_Obj * pObj;
    205            pObj = CHECKBOX_LOCK_H(hObj);
    206            /* Delete attached objects (if any) */
    207            GUI_DEBUG_LOG("CHECKBOX: Delete() Deleting attached items");
    208            GUI_ALLOC_FreePtr(&pObj->hpText);
    209            GUI_UNLOCK_H(pObj);
    210          }
    211          
    212          /*********************************************************************
    213          *
    214          *       Private routines
    215          *
    216          **********************************************************************
    217          */
    218          /*********************************************************************
    219          *
    220          *       CHECKBOX__GetButtonSize
    221          */

   \                                 In section .text, align 4, keep-with-next
    222          unsigned CHECKBOX__GetButtonSize(void) {
   \                     CHECKBOX__GetButtonSize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    223            WIDGET_ITEM_DRAW_INFO ItemInfo = {0};
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   0E10A0E8           STM      R0!,{R1-R3,R12}
   \   00000020   0E10A0E8           STM      R0!,{R1-R3,R12}
    224          
    225            ItemInfo.Cmd = WIDGET_ITEM_GET_BUTTONSIZE;
   \   00000024   1710A0E3           MOV      R1,#+23
   \   00000028   04108DE5           STR      R1,[SP, #+4]
    226            return ((CHECKBOX_SKIN_PRIVATE *)CHECKBOX__pSkinDefault->pSkinPrivate)->pfDrawSkin(&ItemInfo);
   \   0000002C   ........           LDR      R1,??DataTable2
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   3C1091E5           LDR      R1,[R1, #+60]
   \   00000038   081091E5           LDR      R1,[R1, #+8]
   \   0000003C   041091E5           LDR      R1,[R1, #+4]
   \   00000040   31FF2FE1           BLX      R1
   \   00000044   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   00000048   0080BDE8           POP      {PC}             ;; return
    227          }
    228          
    229          /*********************************************************************
    230          *
    231          *       CHECKBOX_LockH
    232          */
    233          #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
    234          CHECKBOX_Obj * CHECKBOX_LockH(CHECKBOX_Handle h) {
    235            CHECKBOX_Obj * p = (CHECKBOX_Obj *)GUI_LOCK_H(h);
    236            if (p) {
    237              if (p->DebugId != CHECKBOX_ID) {
    238                GUI_DEBUG_ERROROUT("CHECKBOX.c: Wrong handle type or Object not init'ed");
    239                return 0;
    240              }
    241            }
    242            return p;
    243          }
    244          #endif
    245          
    246          /*********************************************************************
    247          *
    248          *       Exported routines:  Callback
    249          *
    250          **********************************************************************
    251          */
    252          /*********************************************************************
    253          *
    254          *       CHECKBOX_Callback
    255          */

   \                                 In section .text, align 4, keep-with-next
    256          void CHECKBOX_Callback (WM_MESSAGE *pMsg) {
   \                     CHECKBOX_Callback:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    257            CHECKBOX_Handle hObj;
    258            hObj = pMsg->hWin;
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
    259            /* Let widget handle the standard messages */
    260            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       WIDGET_HandleActive
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   5700000A           BEQ      ??CHECKBOX_Callback_1
    261              return;
    262            }
    263            switch (pMsg->MsgId) {
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   0B0040E2           SUB      R0,R0,#+11
   \   0000002C   040050E3           CMP      R0,#+4
   \   00000030   00F18F90           ADDLS    PC,PC,R0, LSL #+2
   \                     ??CHECKBOX_Callback_0:
   \   00000034   5000008A           BHI      ??CHECKBOX_Callback_2
   \   00000038   4A0000EA           B        ??CHECKBOX_Callback_3
   \   0000003C   220000EA           B        ??CHECKBOX_Callback_4
   \   00000040   4D0000EA           B        ??CHECKBOX_Callback_2
   \   00000044   000000EA           B        ??CHECKBOX_Callback_5
   \   00000048   150000EA           B        ??CHECKBOX_Callback_6
    264            case WM_KEY:
    265              _OnKey(hObj, pMsg);
   \                     ??CHECKBOX_Callback_5:
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       GUI_ALLOC_LockH
   \   00000054   7460D0E5           LDRB     R6,[R0, #+116]
   \   00000058   7570D0E5           LDRB     R7,[R0, #+117]
   \   0000005C   ........           BL       GUI_ALLOC_UnlockH
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       WM__IsEnabled
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   4200000A           BEQ      ??CHECKBOX_Callback_2
   \   00000070   0C0094E5           LDR      R0,[R4, #+12]
   \   00000074   041090E5           LDR      R1,[R0, #+4]
   \   00000078   010051E3           CMP      R1,#+1
   \   0000007C   3E0000BA           BLT      ??CHECKBOX_Callback_2
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   200050E3           CMP      R0,#+32
   \   00000088   3B00001A           BNE      ??CHECKBOX_Callback_2
   \   0000008C   010087E2           ADD      R0,R7,#+1
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   ........           BL       __aeabi_idivmod
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           BL       CHECKBOX_SetState
   \   000000A0   350000EA           B        ??CHECKBOX_Callback_2
    266              break;
    267            case WM_PAINT:
    268              GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
    269              _Paint(hObj);
   \                     ??CHECKBOX_Callback_6:
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       GUI_ALLOC_LockH
   \   000000AC   700090E5           LDR      R0,[R0, #+112]
   \   000000B0   004090E5           LDR      R4,[R0, #+0]
   \   000000B4   ........           BL       GUI_ALLOC_UnlockH
   \   000000B8   000054E3           CMP      R4,#+0
   \   000000BC   3000000A           BEQ      ??CHECKBOX_Callback_1
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   34FF2FE1           BLX      R4
   \   000000C8   2D0000EA           B        ??CHECKBOX_Callback_1
    270              return;
    271            case WM_TOUCH:
    272              _OnTouch(hObj, pMsg);
   \                     ??CHECKBOX_Callback_4:
   \   000000CC   0060A0E3           MOV      R6,#+0
   \   000000D0   0070A0E3           MOV      R7,#+0
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           BL       GUI_ALLOC_LockH
   \   000000DC   7480D0E5           LDRB     R8,[R0, #+116]
   \   000000E0   7590D0E5           LDRB     R9,[R0, #+117]
   \   000000E4   F0A3D0E1           LDRSH    R10,[R0, #+48]
   \   000000E8   ........           BL       GUI_ALLOC_UnlockH
   \   000000EC   0CB094E5           LDR      R11,[R4, #+12]
   \   000000F0   00005BE3           CMP      R11,#+0
   \   000000F4   0360A003           MOVEQ    R6,#+3
   \   000000F8   1200000A           BEQ      ??CHECKBOX_Callback_7
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           BL       WM_HasCaptured
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0E00001A           BNE      ??CHECKBOX_Callback_7
   \   0000010C   0800DBE5           LDRB     R0,[R11, #+8]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0900000A           BEQ      ??CHECKBOX_Callback_8
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           BL       WM_SetCapture
   \   00000124   010089E2           ADD      R0,R9,#+1
   \   00000128   0810A0E1           MOV      R1,R8
   \   0000012C   ........           BL       __aeabi_idivmod
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           BL       CHECKBOX_SetState
   \   00000138   0160A0E3           MOV      R6,#+1
   \   0000013C   010000EA           B        ??CHECKBOX_Callback_7
   \                     ??CHECKBOX_Callback_8:
   \   00000140   0170A0E3           MOV      R7,#+1
   \   00000144   0260A0E3           MOV      R6,#+2
   \                     ??CHECKBOX_Callback_7:
   \   00000148   0610A0E1           MOV      R1,R6
   \   0000014C   0500A0E1           MOV      R0,R5
   \   00000150   ........           BL       WM_NotifyParent
   \   00000154   010057E3           CMP      R7,#+1
   \   00000158   0700001A           BNE      ??CHECKBOX_Callback_2
   \   0000015C   0A00A0E1           MOV      R0,R10
   \   00000160   ........           BL       GUI_StoreKey
   \   00000164   040000EA           B        ??CHECKBOX_Callback_2
    273              break;
    274            case WM_DELETE:
    275              GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_DELETE)\n");
    276              _Delete(hObj);
   \                     ??CHECKBOX_Callback_3:
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           BL       GUI_ALLOC_LockH
   \   00000170   780080E2           ADD      R0,R0,#+120
   \   00000174   ........           BL       GUI_ALLOC_FreePtr
   \   00000178   ........           BL       GUI_ALLOC_UnlockH
    277              break;       /* No return here ... WM_DefaultProc needs to be called */
    278            }
    279            WM_DefaultProc(pMsg);
   \                     ??CHECKBOX_Callback_2:
   \   0000017C   0400A0E1           MOV      R0,R4
   \   00000180   ........           BL       WM_DefaultProc
    280          }
   \                     ??CHECKBOX_Callback_1:
   \   00000184   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000188   F08FBDE8           POP      {R4-R11,PC}      ;; return
    281          
    282          /*********************************************************************
    283          *
    284          *       Exported routines:  Create
    285          *
    286          **********************************************************************
    287          */
    288          
    289          /* Note: the parameters to a create function may vary.
    290                   Some widgets may have multiple create functions */
    291          
    292          /*********************************************************************
    293          *
    294          *       CHECKBOX_CreateEx
    295          */

   \                                 In section .text, align 4, keep-with-next
    296          CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    297                                              int WinFlags, int ExFlags, int Id)
    298          {
   \                     CHECKBOX_CreateEx:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0390A0E1           MOV      R9,R3
   \   00000018   38A09DE5           LDR      R10,[SP, #+56]
   \   0000001C   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000020   44409DE5           LDR      R4,[SP, #+68]
    299            CHECKBOX_Handle hObj;
    300            CHECKBOX_Obj  * pObj;
    301            GUI_USE_PARA(ExFlags);
    302            WM_LOCK();
   \   00000024   ........           BL       GUI_Lock
    303            /* Calculate size if needed */
    304            if ((xsize == 0) || (ysize == 0)) {
   \   00000028   000058E3           CMP      R8,#+0
   \   0000002C   0200000A           BEQ      ??CHECKBOX_CreateEx_0
   \   00000030   000059E3           CMP      R9,#+0
   \   00000034   0E00001A           BNE      ??CHECKBOX_CreateEx_1
   \   00000038   070000EA           B        ??CHECKBOX_CreateEx_2
    305              if (xsize == 0) {
    306                xsize  = ((CHECKBOX_SKIN_PRIVATE *)CHECKBOX__pSkinDefault->pSkinPrivate)->pfGetButtonSize();
   \                     ??CHECKBOX_CreateEx_0:
   \   0000003C   ........           LDR      R0,??DataTable2
   \   00000040   3C0090E5           LDR      R0,[R0, #+60]
   \   00000044   080090E5           LDR      R0,[R0, #+8]
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   30FF2FE1           BLX      R0
   \   00000050   0080A0E1           MOV      R8,R0
    307              }
    308              if (ysize == 0) {
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   0500001A           BNE      ??CHECKBOX_CreateEx_1
    309                ysize  = ((CHECKBOX_SKIN_PRIVATE *)CHECKBOX__pSkinDefault->pSkinPrivate)->pfGetButtonSize();
   \                     ??CHECKBOX_CreateEx_2:
   \   0000005C   ........           LDR      R0,??DataTable2
   \   00000060   3C0090E5           LDR      R0,[R0, #+60]
   \   00000064   080090E5           LDR      R0,[R0, #+8]
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   30FF2FE1           BLX      R0
   \   00000070   0090A0E1           MOV      R9,R0
    310              }
    311            }
    312          #if WM_SUPPORT_TRANSPARENCY
    313            if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
   \                     ??CHECKBOX_CreateEx_1:
   \   00000074   ........           LDR      R5,??DataTable2
   \   00000078   F014E0E3           MVN      R1,#-268435456
   \   0000007C   0C0095E5           LDR      R0,[R5, #+12]
    314              WinFlags |= WM_CF_HASTRANS;
    315            }
    316          #endif
    317            /* Create the window */
    318            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, CHECKBOX_Callback,
    319                                          sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
   \   00000080   00A08DE5           STR      R10,[SP, #+0]
   \   00000084   010050E1           CMP      R0,R1
   \   00000088   5000A0E3           MOV      R0,#+80
   \   0000008C   0C008DE5           STR      R0,[SP, #+12]
   \   00000090   ........           LDR      R0,??DataTable2_1
   \   00000094   01B08B03           ORREQ    R11,R11,#0x1
   \   00000098   08008DE5           STR      R0,[SP, #+8]
   \   0000009C   04B08DE5           STR      R11,[SP, #+4]
   \   000000A0   0930A0E1           MOV      R3,R9
   \   000000A4   0820A0E1           MOV      R2,R8
   \   000000A8   0710A0E1           MOV      R1,R7
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           BL       WM_CreateWindowAsChild
   \   000000B4   0060B0E1           MOVS     R6,R0
    320            if (hObj) {
   \   000000B8   1300000A           BEQ      ??CHECKBOX_CreateEx_3
    321              pObj = (CHECKBOX_Obj *)GUI_LOCK_H(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
   \   000000BC   ........           BL       GUI_ALLOC_LockH
   \   000000C0   0070A0E1           MOV      R7,R0
    322              /* init widget specific variables */
    323              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   000000C4   1020A0E3           MOV      R2,#+16
   \   000000C8   0410A0E1           MOV      R1,R4
   \   000000CC   ........           BL       WIDGET__Init
    324              CHECKBOX_INIT_ID(pObj);
    325              /* init member variables */
    326              pObj->Props = CHECKBOX__DefaultProps;
   \   000000D0   1E53B5E8           LDM      R5!,{R1-R4,R8,R9,R12,LR}
   \   000000D4   340087E2           ADD      R0,R7,#+52
   \   000000D8   1E53A0E8           STM      R0!,{R1-R4,R8,R9,R12,LR}
   \   000000DC   1E51B5E8           LDM      R5!,{R1-R4,R8,R12,LR}
   \   000000E0   3C5045E2           SUB      R5,R5,#+60
   \   000000E4   1E51A0E8           STM      R0!,{R1-R4,R8,R12,LR}
    327              pObj->pWidgetSkin = CHECKBOX__pSkinDefault;
   \   000000E8   3C0095E5           LDR      R0,[R5, #+60]
   \   000000EC   700087E5           STR      R0,[R7, #+112]
    328              pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
   \   000000F0   0200A0E3           MOV      R0,#+2
   \   000000F4   7400C7E5           STRB     R0,[R7, #+116]
    329              GUI_UNLOCK_H(pObj);
   \   000000F8   ........           BL       GUI_ALLOC_UnlockH
    330              CHECKBOX__pSkinDefault->pfCreate(hObj);
   \   000000FC   3C1095E5           LDR      R1,[R5, #+60]
   \   00000100   0600A0E1           MOV      R0,R6
   \   00000104   041091E5           LDR      R1,[R1, #+4]
   \   00000108   31FF2FE1           BLX      R1
    331            } else {
    332              GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
    333            }
    334            WM_UNLOCK();
   \                     ??CHECKBOX_CreateEx_3:
   \   0000010C   ........           BL       GUI_Unlock
    335            return hObj;
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   14D08DE2           ADD      SP,SP,#+20
   \   00000118   F08FBDE8           POP      {R4-R11,PC}      ;; return
    336          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     CHECKBOX__DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     CHECKBOX_Callback

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0L}>`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   00000000           DC32 0
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
    337          
    338          #else                            /* Avoid problems with empty object modules */
    339            void CHECKBOX_C(void);
    340            void CHECKBOX_C(void) {}
    341          #endif  /* #if GUI_WINSUPPORT */
    342          
    343          
    344          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     CHECKBOX_Callback           40
     CHECKBOX_CreateEx           56
     CHECKBOX__GetButtonSize     40


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     CHECKBOX__DefaultProps    64
     CHECKBOX__pSkinDefault
     CHECKBOX__GetButtonSize   76
     CHECKBOX_Callback        396
     CHECKBOX_CreateEx        284
     ??DataTable2               4
     ??DataTable2_1             4
     ?<Constant {0L}>          32

 
  64 bytes in section .data
  32 bytes in section .rodata
 764 bytes in section .text
 
 764 bytes of CODE  memory
  32 bytes of CONST memory
  64 bytes of DATA  memory

Errors: none
Warnings: none
